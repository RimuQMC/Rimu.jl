var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21006415460622577 ± 0.0017004721053323008\n   G2(1) = 0.9184908856177018 ± 0.000807622768604503\n   G2(2) = 0.9818632511786239 ± 0.0006013699297099122\n   G2(3) = 0.9892275718011231 ± 0.0008418827805529516\n   G2(4) = 0.9818632511786239 ± 0.0006013699297099122\n   G2(5) = 0.9184908856177018 ± 0.000807622768604503\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.022015591549624 ± 0.14020557601045544\n   Replica 2: -4.027575181949208 ± 0.12460050794262721\n   Replica 3: -4.0292335109982105 ± 0.13113545667415732\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip390\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip390)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip391\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip390)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip392\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.64 2211.02,1003.64 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.459 2211.02,746.459 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.281 2211.02,489.281 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.103 2211.02,232.103 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.64 423.181,1003.64 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.459 423.181,746.459 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.281 423.181,489.281 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.103 423.181,232.103 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M356.339 1246.61 Q352.728 1246.61 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.52 Q352.728 1275.06 356.339 1275.06 Q359.973 1275.06 361.779 1271.52 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.61 356.339 1246.61 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.18 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.18 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M290.043 1016.98 L306.363 1016.98 L306.363 1020.92 L284.418 1020.92 L284.418 1016.98 Q287.08 1014.23 291.664 1009.6 Q296.27 1004.95 297.451 1003.6 Q299.696 1001.08 300.576 999.344 Q301.478 997.584 301.478 995.895 Q301.478 993.14 299.534 991.404 Q297.613 989.668 294.511 989.668 Q292.312 989.668 289.858 990.432 Q287.427 991.196 284.65 992.746 L284.65 988.024 Q287.474 986.89 289.927 986.311 Q292.381 985.733 294.418 985.733 Q299.789 985.733 302.983 988.418 Q306.177 991.103 306.177 995.594 Q306.177 997.723 305.367 999.645 Q304.58 1001.54 302.474 1004.14 Q301.895 1004.81 298.793 1008.02 Q295.691 1011.22 290.043 1016.98 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M316.224 986.358 L334.58 986.358 L334.58 990.293 L320.506 990.293 L320.506 998.765 Q321.524 998.418 322.543 998.256 Q323.562 998.07 324.58 998.07 Q330.367 998.07 333.747 1001.24 Q337.126 1004.41 337.126 1009.83 Q337.126 1015.41 333.654 1018.51 Q330.182 1021.59 323.862 1021.59 Q321.687 1021.59 319.418 1021.22 Q317.173 1020.85 314.765 1020.11 L314.765 1015.41 Q316.849 1016.54 319.071 1017.1 Q321.293 1017.65 323.77 1017.65 Q327.774 1017.65 330.112 1015.55 Q332.45 1013.44 332.45 1009.83 Q332.45 1006.22 330.112 1004.11 Q327.774 1002.01 323.77 1002.01 Q321.895 1002.01 320.02 1002.42 Q318.168 1002.84 316.224 1003.72 L316.224 986.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M356.339 989.436 Q352.728 989.436 350.899 993.001 Q349.094 996.543 349.094 1003.67 Q349.094 1010.78 350.899 1014.34 Q352.728 1017.89 356.339 1017.89 Q359.973 1017.89 361.779 1014.34 Q363.608 1010.78 363.608 1003.67 Q363.608 996.543 361.779 993.001 Q359.973 989.436 356.339 989.436 M356.339 985.733 Q362.149 985.733 365.205 990.339 Q368.284 994.922 368.284 1003.67 Q368.284 1012.4 365.205 1017.01 Q362.149 1021.59 356.339 1021.59 Q350.529 1021.59 347.45 1017.01 Q344.395 1012.4 344.395 1003.67 Q344.395 994.922 347.45 990.339 Q350.529 985.733 356.339 985.733 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M286.062 729.179 L304.418 729.179 L304.418 733.115 L290.344 733.115 L290.344 741.587 Q291.363 741.24 292.381 741.078 Q293.4 740.892 294.418 740.892 Q300.205 740.892 303.585 744.064 Q306.964 747.235 306.964 752.652 Q306.964 758.23 303.492 761.332 Q300.02 764.411 293.701 764.411 Q291.525 764.411 289.256 764.04 Q287.011 763.67 284.603 762.929 L284.603 758.23 Q286.687 759.364 288.909 759.92 Q291.131 760.476 293.608 760.476 Q297.613 760.476 299.951 758.369 Q302.288 756.263 302.288 752.652 Q302.288 749.04 299.951 746.934 Q297.613 744.828 293.608 744.828 Q291.733 744.828 289.858 745.244 Q288.006 745.661 286.062 746.54 L286.062 729.179 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M326.177 732.258 Q322.566 732.258 320.737 735.823 Q318.932 739.365 318.932 746.494 Q318.932 753.601 320.737 757.165 Q322.566 760.707 326.177 760.707 Q329.811 760.707 331.617 757.165 Q333.446 753.601 333.446 746.494 Q333.446 739.365 331.617 735.823 Q329.811 732.258 326.177 732.258 M326.177 728.554 Q331.987 728.554 335.043 733.161 Q338.122 737.744 338.122 746.494 Q338.122 755.221 335.043 759.827 Q331.987 764.411 326.177 764.411 Q320.367 764.411 317.288 759.827 Q314.233 755.221 314.233 746.494 Q314.233 737.744 317.288 733.161 Q320.367 728.554 326.177 728.554 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M356.339 732.258 Q352.728 732.258 350.899 735.823 Q349.094 739.365 349.094 746.494 Q349.094 753.601 350.899 757.165 Q352.728 760.707 356.339 760.707 Q359.973 760.707 361.779 757.165 Q363.608 753.601 363.608 746.494 Q363.608 739.365 361.779 735.823 Q359.973 732.258 356.339 732.258 M356.339 728.554 Q362.149 728.554 365.205 733.161 Q368.284 737.744 368.284 746.494 Q368.284 755.221 365.205 759.827 Q362.149 764.411 356.339 764.411 Q350.529 764.411 347.45 759.827 Q344.395 755.221 344.395 746.494 Q344.395 737.744 347.45 733.161 Q350.529 728.554 356.339 728.554 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M284.835 472.001 L307.057 472.001 L307.057 473.992 L294.511 506.561 L289.627 506.561 L301.432 475.937 L284.835 475.937 L284.835 472.001 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M316.224 472.001 L334.58 472.001 L334.58 475.937 L320.506 475.937 L320.506 484.409 Q321.524 484.061 322.543 483.899 Q323.562 483.714 324.58 483.714 Q330.367 483.714 333.747 486.886 Q337.126 490.057 337.126 495.473 Q337.126 501.052 333.654 504.154 Q330.182 507.233 323.862 507.233 Q321.687 507.233 319.418 506.862 Q317.173 506.492 314.765 505.751 L314.765 501.052 Q316.849 502.186 319.071 502.742 Q321.293 503.297 323.77 503.297 Q327.774 503.297 330.112 501.191 Q332.45 499.085 332.45 495.473 Q332.45 491.862 330.112 489.756 Q327.774 487.649 323.77 487.649 Q321.895 487.649 320.02 488.066 Q318.168 488.483 316.224 489.362 L316.224 472.001 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M356.339 475.08 Q352.728 475.08 350.899 478.645 Q349.094 482.186 349.094 489.316 Q349.094 496.423 350.899 499.987 Q352.728 503.529 356.339 503.529 Q359.973 503.529 361.779 499.987 Q363.608 496.423 363.608 489.316 Q363.608 482.186 361.779 478.645 Q359.973 475.08 356.339 475.08 M356.339 471.376 Q362.149 471.376 365.205 475.983 Q368.284 480.566 368.284 489.316 Q368.284 498.043 365.205 502.649 Q362.149 507.233 356.339 507.233 Q350.529 507.233 347.45 502.649 Q344.395 498.043 344.395 489.316 Q344.395 480.566 347.45 475.983 Q350.529 471.376 356.339 471.376 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M256.664 245.448 L264.303 245.448 L264.303 219.082 L255.992 220.749 L255.992 216.49 L264.256 214.823 L268.932 214.823 L268.932 245.448 L276.571 245.448 L276.571 249.383 L256.664 249.383 L256.664 245.448 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M296.015 217.902 Q292.404 217.902 290.576 221.467 Q288.77 225.008 288.77 232.138 Q288.77 239.244 290.576 242.809 Q292.404 246.351 296.015 246.351 Q299.65 246.351 301.455 242.809 Q303.284 239.244 303.284 232.138 Q303.284 225.008 301.455 221.467 Q299.65 217.902 296.015 217.902 M296.015 214.198 Q301.826 214.198 304.881 218.805 Q307.96 223.388 307.96 232.138 Q307.96 240.865 304.881 245.471 Q301.826 250.055 296.015 250.055 Q290.205 250.055 287.127 245.471 Q284.071 240.865 284.071 232.138 Q284.071 223.388 287.127 218.805 Q290.205 214.198 296.015 214.198 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M326.177 217.902 Q322.566 217.902 320.737 221.467 Q318.932 225.008 318.932 232.138 Q318.932 239.244 320.737 242.809 Q322.566 246.351 326.177 246.351 Q329.811 246.351 331.617 242.809 Q333.446 239.244 333.446 232.138 Q333.446 225.008 331.617 221.467 Q329.811 217.902 326.177 217.902 M326.177 214.198 Q331.987 214.198 335.043 218.805 Q338.122 223.388 338.122 232.138 Q338.122 240.865 335.043 245.471 Q331.987 250.055 326.177 250.055 Q320.367 250.055 317.288 245.471 Q314.233 240.865 314.233 232.138 Q314.233 223.388 317.288 218.805 Q320.367 214.198 326.177 214.198 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M356.339 217.902 Q352.728 217.902 350.899 221.467 Q349.094 225.008 349.094 232.138 Q349.094 239.244 350.899 242.809 Q352.728 246.351 356.339 246.351 Q359.973 246.351 361.779 242.809 Q363.608 239.244 363.608 232.138 Q363.608 225.008 361.779 221.467 Q359.973 217.902 356.339 217.902 M356.339 214.198 Q362.149 214.198 365.205 218.805 Q368.284 223.388 368.284 232.138 Q368.284 240.865 365.205 245.471 Q362.149 250.055 356.339 250.055 Q350.529 250.055 347.45 245.471 Q344.395 240.865 344.395 232.138 Q344.395 223.388 347.45 218.805 Q350.529 214.198 356.339 214.198 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip392)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.103 4017.76,232.103 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.1 457.691,1247.85 458.259,1246.57 458.828,1246.29 459.396,1245.92 459.964,1245.5 460.533,1245.02 461.101,1244.43 461.669,1242.72 462.238,1240.96 462.806,1239.15 463.375,1238.32 463.943,1236.35 464.511,1235.37 465.08,1233.23 465.648,1231.01 466.216,1228.7 466.785,1227.36 467.353,1224.84 467.921,1223.26 468.49,1221.55 469.058,1219.7 469.626,1217.66 470.195,1215.53 470.763,1213.18 471.331,1210.71 471.9,1208.05 472.468,1204.21 473.036,1200.26 473.605,1197.14 474.173,1192.79 474.741,1188.23 475.31,1184.5 475.878,1180.55 476.446,1176.36 477.015,1171.96 477.583,1167.42 478.152,1162.62 478.72,1157.65 479.288,1152.41 479.857,1146.9 480.425,1139.13 480.993,1133.18 481.562,1126.04 482.13,1118.62 482.698,1112.01 483.267,1103.19 483.835,1095.15 484.403,1087.99 484.972,1080.62 485.54,1069.98 486.108,1061.19 486.677,1053.06 487.245,1040.76 487.813,1032.54 488.382,1023.21 488.95,1014.67 489.518,1002.93 490.087,993.221 490.655,982.209 491.224,970.234 491.792,961.355 492.36,948.223 492.929,937.238 493.497,926.156 494.065,915.033 494.634,900.84 495.202,889.797 495.77,879.913 496.339,867.82 496.907,858.959 497.475,848.993 498.044,838.004 498.612,828.97 499.18,816.895 499.749,808.094 500.317,799.139 500.885,786.922 501.454,777.174 502.022,768.303 502.59,756.433 503.159,745.689 503.727,736.957 504.295,727.343 504.864,719.891 505.432,710.228 506.001,699.566 506.569,690.151 507.137,679.656 507.706,670.449 508.274,660.291 508.842,650.188 509.411,641.316 509.979,631.622 510.547,624.161 511.116,616.536 511.684,608.98 512.252,598.632 512.821,589.676 513.389,582.94 513.957,575.973 514.526,565.085 515.094,556.56 515.662,551.145 516.231,541.746 516.799,534.528 517.367,526.49 517.936,519.414 518.504,513.595 519.072,504.69 519.641,495.008 520.209,489.763 520.778,483.314 521.346,478.188 521.914,473.2 522.483,467.106 523.051,460.163 523.619,455.534 524.188,449.702 524.756,444.92 525.324,437.21 525.893,430.07 526.461,425.95 527.029,420.07 527.598,413.913 528.166,406.018 528.734,401.581 529.303,398.2 529.871,393.032 530.439,388.891 531.008,385.045 531.576,379.961 532.144,375.247 532.713,370.75 533.281,369.56 533.85,366.035 534.418,362.632 534.986,360.262 535.555,356.018 536.123,353.908 536.691,351.026 537.26,347.975 537.828,345.969 538.396,344.114 538.965,341.845 539.533,337.864 540.101,336.008 540.67,334.506 541.238,331.842 541.806,329.955 542.375,329.356 542.943,326.563 543.511,325.986 544.08,324.138 544.648,323.51 545.216,320.482 545.785,318.691 546.353,316.008 546.921,313.164 547.49,311.584 548.058,311.022 548.627,308.298 549.195,304.614 549.763,301.264 550.332,300.281 550.9,300.07 551.468,296.72 552.037,297.584 552.605,296.43 553.173,296.199 553.742,295.02 554.31,292.741 554.878,290.639 555.447,287.66 556.015,284.707 556.583,282.845 557.152,281.141 557.72,280.559 558.288,277.772 558.857,277.016 559.425,276.27 559.993,275.964 560.562,273.466 561.13,272.889 561.698,269.138 562.267,269.086 562.835,268.914 563.404,266.645 563.972,265.585 564.54,265.432 565.109,265.34 565.677,265.364 566.245,263.284 566.814,264.319 567.382,263.191 567.95,261.872 568.519,260.902 569.087,259.994 569.655,259.963 570.224,258.086 570.792,258.018 571.36,259.031 571.929,258.057 572.497,260.21 573.065,260.053 573.634,260.033 574.202,261.766 574.77,260.502 575.339,257.119 575.907,255.651 576.476,255.745 577.044,252.827 577.612,249.911 578.181,251.143 578.749,251.68 579.317,251.875 579.886,253.08 580.454,254.282 581.022,256.264 581.591,254.725 582.159,255.68 582.727,255.487 583.296,256.244 583.864,253.83 584.432,252.439 585.001,251.472 585.569,250.235 586.137,255.3 586.706,254.912 587.274,253.465 587.842,252.147 588.411,251.857 588.979,249.786 589.547,248.482 590.116,246.506 590.684,247.821 591.253,245.893 591.821,247.116 592.389,246.203 592.958,246.317 593.526,244.617 594.094,244.843 594.663,245.01 595.231,246.151 595.799,245.022 596.368,247.001 596.936,250.09 597.504,248.835 598.073,247.65 598.641,247.549 599.209,246.52 599.778,244.413 600.346,244.585 600.914,244.503 601.483,243.384 602.051,243.512 602.619,243.708 603.188,244.922 603.756,242.876 604.325,239.941 604.893,240.29 605.461,239.795 606.03,240.087 606.598,239.337 607.166,238.628 607.735,238.889 608.303,238.146 608.871,238.674 609.44,240.049 610.008,240.314 610.576,240.458 611.145,239.68 611.713,240.203 612.281,241.516 612.85,240.573 613.418,240.746 613.986,242.103 614.555,242.411 615.123,240.431 615.691,240.59 616.26,238.654 616.828,237.785 617.396,239.143 617.965,241.289 618.533,241.476 619.102,241.712 619.67,239.774 620.238,239.999 620.807,241.215 621.375,244.488 621.943,241.042 622.512,242.065 623.08,242.536 623.648,242.472 624.217,241.404 624.785,241.214 625.353,240.319 625.922,240.593 626.49,239.751 627.058,239.831 627.627,239.954 628.195,240.043 628.763,238.267 629.332,240.496 629.9,239.597 630.468,241.086 631.037,238.874 631.605,238.974 632.173,238.9 632.742,239.025 633.31,239.256 633.879,240.479 634.447,239.467 635.015,239.733 635.584,240.962 636.152,239.932 636.72,237.929 637.289,235.722 637.857,236.052 638.425,235.352 638.994,236.339 639.562,236.806 640.13,235.669 640.699,233.799 641.267,233.175 641.835,234.47 642.404,234.592 642.972,232.767 643.54,232.364 644.109,233.906 644.677,234.308 645.245,232.626 645.814,236.226 646.382,237.5 646.951,235.645 647.519,235.027 648.087,235.304 648.656,234.743 649.224,236.255 649.792,236.424 650.361,237.693 650.929,238.798 651.497,238.753 652.066,235.736 652.634,234.667 653.202,235.917 653.771,238.109 654.339,238.466 654.907,236.439 655.476,235.376 656.044,234.602 656.612,232.827 657.181,232.217 657.749,233.628 658.317,235.129 658.886,234.661 659.454,235.175 660.022,235.454 660.591,235.605 661.159,236.905 661.728,238.199 662.296,239.343 662.864,238.33 663.433,239.469 664.001,242.727 664.569,238.302 665.138,239.471 665.706,238.617 666.274,237.457 666.843,236.705 667.411,238.012 667.979,234.984 668.548,235.497 669.116,238.599 669.684,238.573 670.253,237.638 670.821,236.645 671.389,236.704 671.958,235.582 672.526,234.58 673.094,234.85 673.663,233.903 674.231,233.332 674.799,232.519 675.368,229.773 675.936,229.185 676.505,229.693 677.073,230.285 677.641,230.921 678.21,229.246 678.778,231.03 679.346,231.591 679.915,232.205 680.483,230.51 681.051,232.187 681.62,231.527 682.188,230.047 682.756,233.686 683.325,234.162 683.893,235.561 684.461,235.85 685.03,236.96 685.598,239.032 686.166,239.916 686.735,238.636 687.303,238.813 687.871,238.818 688.44,237.736 689.008,236.702 689.577,236.765 690.145,238.916 690.713,241.181 691.282,242.921 691.85,243.562 692.418,244.02 692.987,242.555 693.555,242.078 694.123,242.784 694.692,244.379 695.26,243.772 695.828,243.25 696.397,241.617 696.965,242.196 697.533,242.546 698.102,241.952 698.67,238.293 699.238,237.101 699.807,236.84 700.375,238.453 700.943,238.465 701.512,238.316 702.08,241.132 702.648,240.872 703.217,241.661 703.785,243.248 704.354,242.846 704.922,241.029 705.49,239.576 706.059,239.085 706.627,236.458 707.195,235.226 707.764,234.15 708.332,235.246 708.9,237.264 709.469,236.05 710.037,237.919 710.605,238.582 711.174,239.347 711.742,238.046 712.31,237.991 712.879,236.64 713.447,236.428 714.015,235.225 714.584,234.986 715.152,235.764 715.72,234.632 716.289,232.454 716.857,232.457 717.425,231.621 717.994,231.53 718.562,231.655 719.131,230.863 719.699,232.116 720.267,233.441 720.836,233.527 721.404,234.403 721.972,235.425 722.541,234.358 723.109,232.024 723.677,231.167 724.246,232.257 724.814,232.213 725.382,231.34 725.951,230.57 726.519,228.88 727.087,229.128 727.656,229.464 728.224,229.695 728.792,228.933 729.361,231.342 729.929,230.362 730.497,230.73 731.066,229.936 731.634,228.037 732.203,229.496 732.771,227.894 733.339,229.443 733.908,229.736 734.476,229.904 735.044,233.365 735.613,234.655 736.181,235.471 736.749,235.295 737.318,234.026 737.886,231.927 738.454,232.014 739.023,232.227 739.591,231.44 740.159,226.593 740.728,226.203 741.296,226.791 741.864,227.216 742.433,227.703 743.001,229.157 743.569,230.552 744.138,231.88 744.706,233.03 745.274,232.095 745.843,232.131 746.411,231.271 746.98,230.528 747.548,230.889 748.116,230.02 748.685,230.452 749.253,230.871 749.821,234.471 750.39,234.418 750.958,234.474 751.526,233.337 752.095,234.612 752.663,236.621 753.231,234.643 753.8,234.725 754.368,232.752 754.936,234.022 755.505,235.918 756.073,239.154 756.641,238.966 757.21,238.617 757.778,239.371 758.346,235.776 758.915,234.621 759.483,233.558 760.052,234.539 760.62,232.244 761.188,230.428 761.757,232.719 762.325,233 762.893,234.053 763.462,232.817 764.03,233.759 764.598,233.584 765.167,233.602 765.735,231.732 766.303,231.938 766.872,232.155 767.44,230.34 768.008,228.509 768.577,229.032 769.145,231.631 769.713,230.924 770.282,233.204 770.85,234.261 771.418,234.3 771.987,234.328 772.555,234.22 773.123,237.542 773.692,238.689 774.26,238.497 774.829,237.185 775.397,236.86 775.965,234.697 776.534,234.752 777.102,235.628 777.67,235.589 778.239,236.58 778.807,235.601 779.375,235.415 779.944,235.334 780.512,237.267 781.08,236.124 781.649,235.051 782.217,235.037 782.785,233.12 783.354,231.124 783.922,231.288 784.49,229.235 785.059,228.385 785.627,231.968 786.195,232.12 786.764,233.409 787.332,232.463 787.9,234.732 788.469,234.539 789.037,234.495 789.606,232.205 790.174,236.341 790.742,232.096 791.311,234.418 791.879,235.379 792.447,235.272 793.016,235.238 793.584,234.938 794.152,234.748 794.721,235.999 795.289,234.727 795.857,234.714 796.426,234.806 796.994,236.002 797.562,234.943 798.131,233.698 798.699,235.777 799.267,235.648 799.836,234.677 800.404,233.532 800.972,232.396 801.541,231.363 802.109,232.255 802.678,231.06 803.246,234.229 803.814,233.27 804.383,231.104 804.951,231.113 805.519,228.241 806.088,224.603 806.656,228.367 807.224,229.845 807.793,232.173 808.361,232.179 808.929,235.221 809.498,234.258 810.066,234.225 810.634,235.011 811.203,234.828 811.771,234.741 812.339,234.59 812.908,235.693 813.476,235.816 814.044,235.524 814.613,236.426 815.181,232.988 815.749,233.758 816.318,234.959 816.886,235.038 817.455,231.869 818.023,232.992 818.591,231.95 819.16,230.114 819.728,230.335 820.296,231.692 820.865,231.968 821.433,230.978 822.001,231.278 822.57,230.431 823.138,230.87 823.706,230.869 824.275,230.223 824.843,230.503 825.411,229.675 825.98,231.171 826.548,232.52 827.116,233.703 827.685,234.697 828.253,234.874 828.821,232.834 829.39,231.827 829.958,232.076 830.526,230.09 831.095,230.498 831.663,231.744 832.232,232.079 832.8,233.288 833.368,231.485 833.937,231.612 834.505,231.724 835.073,232.665 835.642,232.619 836.21,232.703 836.778,230.933 837.347,231.116 837.915,229.195 838.483,227.253 839.052,227.607 839.62,226.854 840.188,226.336 840.757,225.927 841.325,226.478 841.893,227.223 842.462,226.589 843.03,227.146 843.598,228.687 844.167,231.243 844.735,232.742 845.304,233.056 845.872,231.157 846.44,233.245 847.009,233.238 847.577,232.416 848.145,232.4 848.714,231.671 849.282,229.904 849.85,229.265 850.419,229.627 850.987,228.863 851.555,231.488 852.124,231.746 852.692,230.895 853.26,232.209 853.829,233.264 854.397,233.62 854.965,233.794 855.534,233.75 856.102,235.856 856.67,236.976 857.239,235.855 857.807,237.954 858.375,237.721 858.944,237.693 859.512,241.774 860.081,239.117 860.649,239.786 861.217,240.489 861.786,237.896 862.354,238.824 862.922,236.634 863.491,237.48 864.059,238.317 864.627,239.024 865.196,237.666 865.764,239.394 866.332,237.058 866.901,233.627 867.469,236.717 868.037,234.408 868.606,235.521 869.174,237.53 869.742,237.296 870.311,237.035 870.879,238.945 871.447,239.466 872.016,236.682 872.584,238.484 873.152,236.267 873.721,239.072 874.289,238.372 874.858,238.74 875.426,235.994 875.994,236.691 876.563,233.282 877.131,233.004 877.699,231.746 878.268,231.746 878.836,232.617 879.404,234.617 879.973,234.394 880.541,234.137 881.109,233.826 881.678,232.574 882.246,229.443 882.814,230.74 883.383,229.772 883.951,229.979 884.519,230.086 885.088,233.17 885.656,234.044 886.224,235.799 886.793,235.597 887.361,236.439 887.93,238.315 888.498,238.878 889.066,237.362 889.635,236.794 890.203,238.549 890.771,236.933 891.34,235.595 891.908,236.195 892.476,236.686 893.045,237.281 893.613,234.472 894.181,234.271 894.75,233.185 895.318,233.147 895.886,232.938 896.455,233.778 897.023,234.503 897.591,232.246 898.16,234.109 898.728,234.064 899.296,232.735 899.865,231.597 900.433,231.695 901.001,232.644 901.57,232.281 902.138,231.122 902.707,232.244 903.275,232.127 903.843,233.057 904.412,230.844 904.98,228.669 905.548,228.796 906.117,228.993 906.685,229.127 907.253,228.135 907.822,227.332 908.39,225.598 908.958,224.067 909.527,225.618 910.095,225.916 910.663,225.083 911.232,226.496 911.8,226.605 912.368,226.904 912.937,227.291 913.505,227.506 914.073,227.789 914.642,228.182 915.21,226.719 915.779,225.032 916.347,223.499 916.915,224.017 917.484,224.633 918.052,227.395 918.62,227.706 919.189,227.911 919.757,229.412 920.325,228.603 920.894,230.013 921.462,229.242 922.03,230.523 922.599,229.664 923.167,228.87 923.735,227.33 924.304,227.703 924.872,227.898 925.44,223.97 926.009,223.51 926.577,224.303 927.145,224.912 927.714,223.506 928.282,223.025 928.85,224.858 929.419,225.53 929.987,226.278 930.556,227.063 931.124,226.457 931.692,227.021 932.261,232.732 932.829,233.997 933.397,233.996 933.966,234.224 934.534,234.305 935.102,235.212 935.671,236.111 936.239,237.374 936.807,237.256 937.376,239.169 937.944,240.76 938.512,241.319 939.081,238.464 939.649,236.016 940.217,234.774 940.786,234.622 941.354,233.932 941.922,235.092 942.491,237.069 943.059,236.925 943.627,239.794 944.196,240.453 944.764,240.906 945.333,242.278 945.901,240.823 946.469,240.524 947.038,240.025 947.606,238.512 948.174,237.215 948.743,235.741 949.311,235.599 949.879,234.196 950.448,233.218 951.016,232.024 951.584,231.021 952.153,230.1 952.721,231.307 953.289,231.449 953.858,232.292 954.426,228.359 954.994,227.742 955.563,229.142 956.131,229.64 956.699,236.2 957.268,233.962 957.836,235.034 958.405,237.988 958.973,238.612 959.541,240.104 960.11,237.498 960.678,238.194 961.246,237.754 961.815,237.362 962.383,236.086 962.951,235.725 963.52,236.471 964.088,237.086 964.656,237.554 965.225,237.339 965.793,238.754 966.361,239.131 966.93,236.641 967.498,240.17 968.066,239.558 968.635,237.755 969.203,236.262 969.771,237.938 970.34,237.234 970.908,236.789 971.476,236.104 972.045,234.583 972.613,235.431 973.182,234.232 973.75,234.959 974.318,232.585 974.887,232.485 975.455,232.285 976.023,232.281 976.592,232.177 977.16,231.999 977.728,233.116 978.297,231.972 978.865,233.019 979.433,231.777 980.002,231.725 980.57,232.493 981.138,232.354 981.707,233.161 982.275,233.676 982.843,232.501 983.412,231.352 983.98,231.186 984.548,228.916 985.117,229.057 985.685,231.062 986.253,229.884 986.822,227.745 987.39,228.063 987.959,229.327 988.527,227.353 989.095,227.669 989.664,225.965 990.232,226.221 990.8,230.607 991.369,231.525 991.937,231.425 992.505,229.385 993.074,227.359 993.642,225.71 994.21,226.196 994.779,225.582 995.347,225.199 995.915,225.595 996.484,222.64 997.052,222.181 997.62,221.987 998.189,222.693 998.757,222.446 999.325,222.153 999.894,223.091 1000.46,224.663 1001.03,224.139 1001.6,225.637 1002.17,225.226 1002.74,225.794 1003.3,228.308 1003.87,229.497 1004.44,228.826 1005.01,228.26 1005.58,229.732 1006.15,233.222 1006.71,235.168 1007.28,235.242 1007.85,237.195 1008.42,235.016 1008.99,234.128 1009.56,235.119 1010.12,235.064 1010.69,233.122 1011.26,233.247 1011.83,232.017 1012.4,231.842 1012.97,229.824 1013.53,231.205 1014.1,231.339 1014.67,232.645 1015.24,233.573 1015.81,233.788 1016.38,233.887 1016.94,234.748 1017.51,235.636 1018.08,239.795 1018.65,238.302 1019.22,238.049 1019.79,236.615 1020.35,236.504 1020.92,237.117 1021.49,236.997 1022.06,235.557 1022.63,234.518 1023.2,231.124 1023.76,231.178 1024.33,230.383 1024.9,231.589 1025.47,235.804 1026.04,235.751 1026.61,237.441 1027.17,235.997 1027.74,237.707 1028.31,238.352 1028.88,238.181 1029.45,237.763 1030.02,235.266 1030.58,233.995 1031.15,232.935 1031.72,232.023 1032.29,232.99 1032.86,234.813 1033.43,234.616 1033.99,233.403 1034.56,234.143 1035.13,234.896 1035.7,231.428 1036.27,232.48 1036.84,231.394 1037.4,233.52 1037.97,234.494 1038.54,236.232 1039.11,235.939 1039.68,235.607 1040.25,235.069 1040.81,234.803 1041.38,234.571 1041.95,235.319 1042.52,233.009 1043.09,233.898 1043.66,232.64 1044.22,232.726 1044.79,232.587 1045.36,231.437 1045.93,231.27 1046.5,232.37 1047.07,233.083 1047.63,232.757 1048.2,232.568 1048.77,232.742 1049.34,230.596 1049.91,230.44 1050.48,229.433 1051.05,229.335 1051.61,231.398 1052.18,231.397 1052.75,229.254 1053.32,229.36 1053.89,228.409 1054.46,229.691 1055.02,230.004 1055.59,227.855 1056.16,227.048 1056.73,228.233 1057.3,228.363 1057.87,229.533 1058.43,230.613 1059,230.716 1059.57,230.828 1060.14,230.992 1060.71,230.122 1061.28,230.382 1061.84,230.343 1062.41,230.454 1062.98,231.774 1063.55,229.985 1064.12,229.106 1064.69,231.501 1065.25,229.868 1065.82,230.062 1066.39,229.275 1066.96,230.689 1067.53,231.863 1068.1,231.907 1068.66,230.758 1069.23,229.771 1069.8,231.274 1070.37,231.412 1070.94,232.645 1071.51,232.669 1072.07,232.675 1072.64,232.712 1073.21,232.625 1073.78,232.473 1074.35,231.491 1074.92,232.634 1075.48,233.752 1076.05,232.594 1076.62,231.575 1077.19,231.7 1077.76,231.968 1078.33,232.134 1078.89,231.439 1079.46,230.406 1080.03,229.576 1080.6,230.855 1081.17,231.877 1081.74,233.243 1082.3,231.169 1082.87,230.108 1083.44,229.057 1084.01,229.349 1084.58,232.68 1085.15,232.842 1085.71,234.054 1086.28,234.016 1086.85,234.071 1087.42,234.742 1087.99,235.798 1088.56,234.318 1089.12,234.197 1089.69,235.013 1090.26,233.839 1090.83,235.967 1091.4,232.735 1091.97,230.926 1092.53,231.222 1093.1,232.44 1093.67,231.339 1094.24,229.316 1094.81,229.606 1095.38,228.674 1095.94,231.039 1096.51,231.267 1097.08,231.417 1097.65,230.536 1098.22,232.766 1098.79,232.547 1099.35,233.505 1099.92,234.573 1100.49,235.395 1101.06,235.183 1101.63,233.886 1102.2,235.72 1102.76,233.37 1103.33,234.271 1103.9,233.097 1104.47,233.026 1105.04,234.894 1105.61,233.659 1106.17,231.306 1106.74,231.182 1107.31,230.324 1107.88,230.531 1108.45,230.766 1109.02,230.972 1109.58,229.077 1110.15,228.493 1110.72,227.74 1111.29,229.079 1111.86,229.484 1112.43,230.791 1112.99,228.944 1113.56,229.16 1114.13,229.414 1114.7,230.62 1115.27,233.919 1115.84,234.686 1116.4,234.602 1116.97,236.743 1117.54,235.411 1118.11,235.122 1118.68,234.973 1119.25,236.765 1119.81,236.519 1120.38,235.129 1120.95,235.872 1121.52,236.544 1122.09,237.082 1122.66,235.915 1123.23,235.598 1123.79,236.136 1124.36,232.856 1124.93,232.779 1125.5,232.691 1126.07,232.667 1126.64,230.617 1127.2,230.902 1127.77,230.78 1128.34,228.78 1128.91,228.885 1129.48,228.149 1130.05,228.322 1130.61,228.574 1131.18,229.815 1131.75,229.917 1132.32,229.038 1132.89,232.14 1133.46,234.35 1134.02,234.142 1134.59,233.927 1135.16,236.913 1135.73,237.525 1136.3,237.242 1136.87,236.917 1137.43,233.356 1138,234.159 1138.57,236.186 1139.14,234.9 1139.71,232.715 1140.28,232.472 1140.84,233.498 1141.41,232.432 1141.98,231.371 1142.55,232.297 1143.12,231.157 1143.69,231.388 1144.25,231.381 1144.82,233.619 1145.39,231.41 1145.96,232.572 1146.53,231.643 1147.1,231.768 1147.66,229.916 1148.23,228.423 1148.8,228.905 1149.37,227.207 1149.94,228.554 1150.51,227.663 1151.07,228.011 1151.64,227.402 1152.21,228.877 1152.78,226.074 1153.35,227.444 1153.92,228.931 1154.48,230.11 1155.05,231.422 1155.62,231.443 1156.19,233.641 1156.76,231.61 1157.33,230.659 1157.89,230.952 1158.46,230.179 1159.03,229.696 1159.6,232.164 1160.17,232.246 1160.74,232.183 1161.3,233.384 1161.87,232.214 1162.44,232.098 1163.01,233.061 1163.58,233.035 1164.15,235.053 1164.71,234.826 1165.28,232.24 1165.85,232.345 1166.42,234.405 1166.99,234.191 1167.56,233.992 1168.12,232.952 1168.69,231.925 1169.26,230.912 1169.83,231.957 1170.4,231.758 1170.97,230.566 1171.53,229.726 1172.1,228.984 1172.67,229.445 1173.24,230.836 1173.81,228 1174.38,230.285 1174.94,228.401 1175.51,228.731 1176.08,226.002 1176.65,226.582 1177.22,228.193 1177.79,225.444 1178.35,228.174 1178.92,229.288 1179.49,228.516 1180.06,229.899 1180.63,231.102 1181.2,231.389 1181.76,231.511 1182.33,231.878 1182.9,231.619 1183.47,231.731 1184.04,231.799 1184.61,230.792 1185.17,232.899 1185.74,230.824 1186.31,229.915 1186.88,231.1 1187.45,235.379 1188.02,235.21 1188.58,237.065 1189.15,238.776 1189.72,237.386 1190.29,238.213 1190.86,236.931 1191.43,237.527 1192,237.458 1192.56,237.272 1193.13,235.847 1193.7,236.568 1194.27,237.594 1194.84,236.35 1195.41,236.238 1195.97,236.15 1196.54,238.054 1197.11,237.385 1197.68,237.781 1198.25,237.339 1198.82,237.911 1199.38,235.47 1199.95,235.167 1200.52,235.983 1201.09,237.979 1201.66,237.491 1202.23,237.018 1202.79,237.636 1203.36,239.181 1203.93,237.77 1204.5,237.199 1205.07,237.83 1205.64,237.371 1206.2,236.952 1206.77,238.596 1207.34,239.965 1207.91,237.248 1208.48,235.6 1209.05,236.106 1209.61,235.673 1210.18,234.341 1210.75,236.07 1211.32,235.448 1211.89,235.032 1212.46,231.637 1213.02,230.496 1213.59,228.508 1214.16,229.591 1214.73,229.579 1215.3,228.569 1215.87,226.278 1216.43,226.546 1217,227.158 1217.57,230.765 1218.14,230.948 1218.71,230.998 1219.28,231.278 1219.84,232.336 1220.41,233.567 1220.98,232.412 1221.55,234.363 1222.12,233.858 1222.69,234.732 1223.25,232.413 1223.82,231.217 1224.39,231.442 1224.96,233.419 1225.53,233.173 1226.1,231.924 1226.66,229.736 1227.23,228.856 1227.8,228.203 1228.37,228.561 1228.94,226.786 1229.51,229.159 1230.07,230.198 1230.64,230.33 1231.21,231.395 1231.78,233.644 1232.35,233.352 1232.92,232.248 1233.48,232.13 1234.05,231.963 1234.62,230.085 1235.19,230.132 1235.76,230.279 1236.33,231.357 1236.89,230.458 1237.46,229.167 1238.03,230.374 1238.6,229.561 1239.17,228.841 1239.74,229.171 1240.3,230.225 1240.87,231.335 1241.44,232.566 1242.01,232.327 1242.58,231.276 1243.15,227.119 1243.71,228.377 1244.28,228.7 1244.85,230.867 1245.42,227.738 1245.99,229.003 1246.56,230.179 1247.12,228.243 1247.69,228.571 1248.26,228.532 1248.83,227.764 1249.4,229.02 1249.97,229.079 1250.53,230.313 1251.1,227.501 1251.67,228.078 1252.24,230.303 1252.81,231.537 1253.38,230.593 1253.94,231.948 1254.51,233.287 1255.08,232.099 1255.65,232.197 1256.22,233.108 1256.79,233.223 1257.35,235.192 1257.92,233.841 1258.49,235.747 1259.06,236.447 1259.63,235.063 1260.2,235.854 1260.76,236.765 1261.33,234.541 1261.9,231.196 1262.47,229.177 1263.04,231.316 1263.61,230.277 1264.18,231.495 1264.74,230.514 1265.31,229.565 1265.88,229.755 1266.45,230.967 1267.02,231.948 1267.59,228.915 1268.15,229.2 1268.72,229.436 1269.29,227.734 1269.86,226.94 1270.43,225.328 1271,226.99 1271.56,228.143 1272.13,226.178 1272.7,228.737 1273.27,231.023 1273.84,231.113 1274.41,230.23 1274.97,231.521 1275.54,229.383 1276.11,227.829 1276.68,229.303 1277.25,230.433 1277.82,230.615 1278.38,231.821 1278.95,232.9 1279.52,235.024 1280.09,233.915 1280.66,233.955 1281.23,233.925 1281.79,236.063 1282.36,237.053 1282.93,235.755 1283.5,234.709 1284.07,234.503 1284.64,235.415 1285.2,233.163 1285.77,234.127 1286.34,236.243 1286.91,236.946 1287.48,237.607 1288.05,237.344 1288.61,240.066 1289.18,238.458 1289.75,239.046 1290.32,238.482 1290.89,237.104 1291.46,236.677 1292.02,237.465 1292.59,237.106 1293.16,235.435 1293.73,236.187 1294.3,234.804 1294.87,233.508 1295.43,234.314 1296,235.18 1296.57,234.78 1297.14,234.509 1297.71,235.217 1298.28,234.683 1298.84,233.236 1299.41,233.307 1299.98,232.083 1300.55,233.007 1301.12,231.762 1301.69,230.589 1302.25,231.573 1302.82,232.441 1303.39,233.11 1303.96,232.83 1304.53,234.856 1305.1,234.737 1305.66,234.265 1306.23,233.993 1306.8,232.795 1307.37,233.789 1307.94,234.593 1308.51,233.188 1309.07,233.157 1309.64,232.991 1310.21,231.575 1310.78,231.303 1311.35,230.386 1311.92,229.415 1312.48,229.646 1313.05,229.828 1313.62,230.847 1314.19,232.745 1314.76,232.262 1315.33,233.297 1315.89,232 1316.46,229.866 1317.03,229.844 1317.6,228.848 1318.17,228.103 1318.74,230.329 1319.3,231.504 1319.87,231.402 1320.44,230.383 1321.01,231.48 1321.58,231.251 1322.15,230.253 1322.71,230.11 1323.28,230.157 1323.85,230.071 1324.42,230.184 1324.99,231.043 1325.56,231.167 1326.12,228.056 1326.69,229.199 1327.26,228.133 1327.83,230.182 1328.4,228.158 1328.97,229.534 1329.53,227.48 1330.1,227.871 1330.67,228.17 1331.24,228.425 1331.81,229.602 1332.38,229.868 1332.94,231.988 1333.51,231.748 1334.08,228.984 1334.65,230.323 1335.22,228.484 1335.79,229.929 1336.36,228.979 1336.92,229.233 1337.49,231.502 1338.06,231.631 1338.63,229.841 1339.2,230.106 1339.77,227.133 1340.33,226.64 1340.9,230.253 1341.47,232.557 1342.04,233.686 1342.61,231.678 1343.18,232.706 1343.74,232.756 1344.31,232.934 1344.88,231.879 1345.45,230.876 1346.02,234.052 1346.59,235.756 1347.15,234.567 1347.72,234.338 1348.29,234.484 1348.86,234.307 1349.43,233.124 1350,231.037 1350.56,233.231 1351.13,232.16 1351.7,231.181 1352.27,231.139 1352.84,231.202 1353.41,230.253 1353.97,230.469 1354.54,230.735 1355.11,230.701 1355.68,230.89 1356.25,230.98 1356.82,231.15 1357.38,234.461 1357.95,233.261 1358.52,234.3 1359.09,233.333 1359.66,232.181 1360.23,233.171 1360.79,232.426 1361.36,232.562 1361.93,235.538 1362.5,235.177 1363.07,234.934 1363.64,234.549 1364.2,233.212 1364.77,233.152 1365.34,230.871 1365.91,228.012 1366.48,229.169 1367.05,230.492 1367.61,230.852 1368.18,229.952 1368.75,227.046 1369.32,227.465 1369.89,225.896 1370.46,228.432 1371.02,229.739 1371.59,230.951 1372.16,232.157 1372.73,233.197 1373.3,233.924 1373.87,231.757 1374.43,231.742 1375,231.777 1375.57,232.689 1376.14,233.914 1376.71,231.754 1377.28,232.724 1377.84,230.7 1378.41,226.776 1378.98,226.977 1379.55,226.15 1380.12,227.526 1380.69,227.979 1381.25,230.498 1381.82,229.598 1382.39,228.092 1382.96,232.463 1383.53,229.528 1384.1,226.465 1384.66,225.914 1385.23,225.649 1385.8,224.316 1386.37,224.707 1386.94,225.431 1387.51,226.119 1388.07,226.371 1388.64,230.017 1389.21,230.267 1389.78,227.552 1390.35,227.918 1390.92,230.546 1391.48,230.708 1392.05,228.993 1392.62,228.402 1393.19,228.967 1393.76,230.393 1394.33,230.906 1394.89,230.153 1395.46,231.535 1396.03,232.902 1396.6,230.744 1397.17,233.101 1397.74,233.997 1398.3,236.087 1398.87,237.071 1399.44,236.934 1400.01,236.84 1400.58,236.626 1401.15,236.482 1401.71,235.142 1402.28,233.962 1402.85,233.935 1403.42,234.884 1403.99,234.748 1404.56,232.565 1405.13,232.656 1405.69,232.892 1406.26,236.05 1406.83,234.911 1407.4,235.587 1407.97,237.457 1408.54,237.366 1409.1,238.153 1409.67,237.911 1410.24,238.546 1410.81,238.356 1411.38,241.029 1411.95,240.497 1412.51,239.892 1413.08,240.699 1413.65,241.304 1414.22,240.566 1414.79,238.977 1415.36,237.384 1415.92,238.18 1416.49,236.691 1417.06,238.301 1417.63,237.714 1418.2,238.323 1418.77,237.835 1419.33,238.488 1419.9,234.913 1420.47,235.795 1421.04,236.427 1421.61,234.992 1422.18,232.7 1422.74,234.565 1423.31,234.251 1423.88,234.322 1424.45,232.97 1425.02,231.826 1425.59,231.771 1426.15,232.618 1426.72,232.474 1427.29,232.605 1427.86,232.504 1428.43,232.416 1429,231.404 1429.56,233.117 1430.13,229.773 1430.7,230.832 1431.27,232.87 1431.84,232.741 1432.41,231.566 1432.97,228.522 1433.54,227.48 1434.11,229.951 1434.68,228.132 1435.25,229.186 1435.82,229.133 1436.38,228.223 1436.95,227.338 1437.52,226.552 1438.09,228.192 1438.66,229.071 1439.23,229.199 1439.79,230.436 1440.36,229.458 1440.93,230.436 1441.5,229.459 1442.07,230.93 1442.64,232.077 1443.2,231.967 1443.77,230.838 1444.34,230.918 1444.91,231.032 1445.48,230.154 1446.05,228.098 1446.61,228.548 1447.18,232.727 1447.75,233.571 1448.32,234.491 1448.89,234.454 1449.46,232.269 1450.02,233.366 1450.59,234.283 1451.16,234.211 1451.73,234.076 1452.3,233.786 1452.87,233.922 1453.43,234.886 1454,233.566 1454.57,229.405 1455.14,227.468 1455.71,228.042 1456.28,228.668 1456.84,230.065 1457.41,230.159 1457.98,230.495 1458.55,231.478 1459.12,231.467 1459.69,232.677 1460.25,235.748 1460.82,234.448 1461.39,233.297 1461.96,234.047 1462.53,229.987 1463.1,231.196 1463.66,231.185 1464.23,231.518 1464.8,231.512 1465.37,232.514 1465.94,230.345 1466.51,231.324 1467.07,231.497 1467.64,230.755 1468.21,230.669 1468.78,231.835 1469.35,232.008 1469.92,231.957 1470.48,231.93 1471.05,231.139 1471.62,229.819 1472.19,229.852 1472.76,232.23 1473.33,235.227 1473.89,235.049 1474.46,235.857 1475.03,232.622 1475.6,234.626 1476.17,236.636 1476.74,236.382 1477.31,237.122 1477.87,237.672 1478.44,237.111 1479.01,232.563 1479.58,230.326 1480.15,228.412 1480.72,229.703 1481.28,227.805 1481.85,225.179 1482.42,224.664 1482.99,224.33 1483.56,226.217 1484.13,227.674 1484.69,228.865 1485.26,230.135 1485.83,230.349 1486.4,229.566 1486.97,230.665 1487.54,228.669 1488.1,229.898 1488.67,231.356 1489.24,229.388 1489.81,228.578 1490.38,229.978 1490.95,230.314 1491.51,232.559 1492.08,232.508 1492.65,232.499 1493.22,232.564 1493.79,231.75 1494.36,230.857 1494.92,230.032 1495.49,229.289 1496.06,228.558 1496.63,228.963 1497.2,232.536 1497.77,231.541 1498.33,231.718 1498.9,233.523 1499.47,233.594 1500.04,233.546 1500.61,237.627 1501.18,238.193 1501.74,237.934 1502.31,236.443 1502.88,235.113 1503.45,236.084 1504.02,233.879 1504.59,235.613 1505.15,236.51 1505.72,237.119 1506.29,237.744 1506.86,239.5 1507.43,239.1 1508,239.374 1508.56,238.903 1509.13,239.552 1509.7,238.915 1510.27,239.308 1510.84,238.33 1511.41,240.241 1511.97,239.366 1512.54,236.77 1513.11,235.186 1513.68,233.677 1514.25,233.594 1514.82,234.253 1515.38,234.229 1515.95,233.023 1516.52,232.724 1517.09,232.645 1517.66,233.536 1518.23,233.317 1518.79,232.161 1519.36,233.141 1519.93,231.869 1520.5,233.848 1521.07,232.554 1521.64,234.726 1522.2,233.293 1522.77,234.273 1523.34,235.056 1523.91,232.684 1524.48,232.527 1525.05,232.194 1525.61,230.96 1526.18,233.074 1526.75,234.818 1527.32,235.681 1527.89,233.157 1528.46,233.172 1529.02,231.949 1529.59,230.921 1530.16,230.843 1530.73,231.844 1531.3,231.846 1531.87,229.832 1532.43,229.887 1533,230.914 1533.57,228.802 1534.14,230.065 1534.71,228.945 1535.28,227.935 1535.84,228.005 1536.41,227.202 1536.98,228.546 1537.55,227.369 1538.12,227.5 1538.69,228.491 1539.25,228.758 1539.82,231.032 1540.39,231.137 1540.96,231.258 1541.53,231.237 1542.1,230.959 1542.66,231.943 1543.23,233.095 1543.8,232.737 1544.37,233.475 1544.94,234.194 1545.51,234.06 1546.08,232.895 1546.64,230.666 1547.21,233.021 1547.78,231.713 1548.35,231.642 1548.92,233.378 1549.49,233.084 1550.05,230.881 1550.62,229.916 1551.19,230.021 1551.76,227.776 1552.33,229.123 1552.9,227.111 1553.46,227.344 1554.03,228.563 1554.6,229.679 1555.17,230.795 1555.74,229.993 1556.31,229.149 1556.87,228.311 1557.44,228.592 1558.01,230.022 1558.58,229.456 1559.15,228.619 1559.72,228.601 1560.28,228.809 1560.85,228.141 1561.42,227.179 1561.99,227.688 1562.56,226.086 1563.13,226.654 1563.69,228.141 1564.26,229.523 1564.83,230.562 1565.4,230.662 1565.97,228.898 1566.54,229.3 1567.1,229.647 1567.67,235.975 1568.24,235.881 1568.81,235.555 1569.38,234.511 1569.95,233.263 1570.51,233.246 1571.08,231.287 1571.65,232.39 1572.22,233.257 1572.79,233.058 1573.36,229.849 1573.92,231.062 1574.49,231.157 1575.06,232.25 1575.63,232.215 1576.2,233.26 1576.77,233.329 1577.33,232.135 1577.9,231.984 1578.47,233.161 1579.04,234.141 1579.61,234.124 1580.18,233.953 1580.74,236.123 1581.31,237.029 1581.88,235.534 1582.45,233.385 1583.02,234.273 1583.59,234.041 1584.15,234.103 1584.72,231.958 1585.29,230.991 1585.86,227.984 1586.43,230.291 1587,231.611 1587.56,231.458 1588.13,232.465 1588.7,232.604 1589.27,232.54 1589.84,229.571 1590.41,228.549 1590.97,227.849 1591.54,226.164 1592.11,226.711 1592.68,227.896 1593.25,231.446 1593.82,230.388 1594.38,231.757 1594.95,231.972 1595.52,230.849 1596.09,232.025 1596.66,233.009 1597.23,234.143 1597.79,233.134 1598.36,231.952 1598.93,231.999 1599.5,233.288 1600.07,234.369 1600.64,234.257 1601.2,230.065 1601.77,229.033 1602.34,229.238 1602.91,226.481 1603.48,226.071 1604.05,227.725 1604.61,227.177 1605.18,227.699 1605.75,227.328 1606.32,229.698 1606.89,229.057 1607.46,229.4 1608.02,228.524 1608.59,228.95 1609.16,228.111 1609.73,228.349 1610.3,228.657 1610.87,231.085 1611.43,231.268 1612,230.491 1612.57,232.732 1613.14,232.796 1613.71,232.895 1614.28,232.841 1614.84,233.767 1615.41,234.971 1615.98,235.914 1616.55,236.891 1617.12,235.559 1617.69,235.402 1618.26,235.435 1618.82,234.063 1619.39,233.135 1619.96,235.171 1620.53,235.118 1621.1,235.032 1621.67,233.749 1622.23,236.678 1622.8,236.507 1623.37,238.321 1623.94,238.924 1624.51,238.332 1625.08,237.637 1625.64,237.653 1626.21,238.419 1626.78,237.161 1627.35,236.921 1627.92,236.596 1628.49,236.169 1629.05,235.901 1629.62,235.425 1630.19,236.044 1630.76,233.55 1631.33,234.308 1631.9,235.365 1632.46,235.033 1633.03,234.727 1633.6,233.266 1634.17,231.93 1634.74,229.575 1635.31,229.732 1635.87,230.199 1636.44,230.323 1637.01,231.361 1637.58,231.257 1638.15,231.378 1638.72,232.344 1639.28,231.06 1639.85,231.23 1640.42,231.128 1640.99,232.231 1641.56,230.127 1642.13,231.547 1642.69,233.568 1643.26,235.465 1643.83,234.297 1644.4,235.099 1644.97,233.872 1645.54,234.555 1646.1,234.271 1646.67,232.909 1647.24,231.764 1647.81,230.497 1648.38,232.711 1648.95,232.496 1649.51,233.38 1650.08,230.209 1650.65,229.968 1651.22,232.093 1651.79,233.205 1652.36,235.224 1652.92,234.966 1653.49,236.587 1654.06,237.064 1654.63,236.449 1655.2,238.069 1655.77,237.52 1656.33,235.92 1656.9,237.658 1657.47,235.286 1658.04,236.161 1658.61,236.719 1659.18,237.408 1659.74,237.13 1660.31,235.709 1660.88,233.304 1661.45,234.314 1662.02,235.065 1662.59,234.772 1663.15,234.493 1663.72,234.225 1664.29,234.621 1664.86,233.573 1665.43,232.266 1666,231.153 1666.56,231.15 1667.13,233.093 1667.7,231.826 1668.27,231.678 1668.84,228.638 1669.41,228.785 1669.97,227.818 1670.54,229.836 1671.11,228.976 1671.68,229.004 1672.25,228.091 1672.82,227.094 1673.38,228.237 1673.95,228.417 1674.52,229.553 1675.09,229.629 1675.66,228.639 1676.23,227.693 1676.79,229.047 1677.36,228.144 1677.93,229.677 1678.5,229.861 1679.07,229.718 1679.64,230.622 1680.2,231.651 1680.77,231.59 1681.34,231.481 1681.91,232.548 1682.48,231.367 1683.05,231.135 1683.61,230.318 1684.18,229.318 1684.75,228.349 1685.32,228.692 1685.89,229.881 1686.46,230.22 1687.02,231.637 1687.59,231.568 1688.16,231.776 1688.73,231.844 1689.3,231.582 1689.87,231.572 1690.44,231.485 1691,231.404 1691.57,230.197 1692.14,233.238 1692.71,233.002 1693.28,233.857 1693.85,233.565 1694.41,231.422 1694.98,229.47 1695.55,228.835 1696.12,227.877 1696.69,228.008 1697.26,229.299 1697.82,230.639 1698.39,229.529 1698.96,230.48 1699.53,230.772 1700.1,230.147 1700.67,229.405 1701.23,231.574 1701.8,231.532 1702.37,229.434 1702.94,230.764 1703.51,226.681 1704.08,228.203 1704.64,229.516 1705.21,229.748 1705.78,227.876 1706.35,229.28 1706.92,229.771 1707.49,229.934 1708.05,229.002 1708.62,230.349 1709.19,231.613 1709.76,232.455 1710.33,231.617 1710.9,230.413 1711.46,229.59 1712.03,230.892 1712.6,230.024 1713.17,230.387 1713.74,230.772 1714.31,231.079 1714.87,233.366 1715.44,233.606 1716.01,233.429 1716.58,234.465 1717.15,233.231 1717.72,233.109 1718.28,233.119 1718.85,230.103 1719.42,231.244 1719.99,230.242 1720.56,230.484 1721.13,230.541 1721.69,230.581 1722.26,233.846 1722.83,234.704 1723.4,232.557 1723.97,231.417 1724.54,232.31 1725.1,234.459 1725.67,234.273 1726.24,235.966 1726.81,233.646 1727.38,234.626 1727.95,232.691 1728.51,233.743 1729.08,235.771 1729.65,232.739 1730.22,231.678 1730.79,231.859 1731.36,232.883 1731.92,235.043 1732.49,234.009 1733.06,233.943 1733.63,233.876 1734.2,230.835 1734.77,230.847 1735.33,229.675 1735.9,231.053 1736.47,232.033 1737.04,230.762 1737.61,228.866 1738.18,230.159 1738.74,229.23 1739.31,229.47 1739.88,231.808 1740.45,230.728 1741.02,230.624 1741.59,230.536 1742.15,229.762 1742.72,231.044 1743.29,230.799 1743.86,230.051 1744.43,230.249 1745,229.501 1745.56,230.529 1746.13,230.686 1746.7,232.864 1747.27,230.788 1747.84,228.86 1748.41,228.048 1748.97,228.417 1749.54,229.821 1750.11,229.954 1750.68,229.281 1751.25,229.669 1751.82,229.801 1752.38,231.206 1752.95,232.363 1753.52,234.41 1754.09,236.388 1754.66,233.032 1755.23,234.054 1755.79,232.954 1756.36,233.154 1756.93,233.913 1757.5,235.82 1758.07,234.621 1758.64,234.715 1759.21,234.409 1759.77,234.241 1760.34,235.235 1760.91,236.024 1761.48,237.799 1762.05,238.305 1762.62,237.637 1763.18,236.171 1763.75,236.919 1764.32,235.69 1764.89,236.295 1765.46,236.091 1766.03,235.79 1766.59,234.675 1767.16,235.586 1767.73,235.402 1768.3,234.358 1768.87,233.113 1769.44,234.151 1770,235.038 1770.57,229.665 1771.14,228.869 1771.71,230.133 1772.28,229.18 1772.85,229.53 1773.41,229.666 1773.98,230.864 1774.55,230.691 1775.12,231.904 1775.69,230.078 1776.26,229.046 1776.82,229.445 1777.39,227.474 1777.96,226.494 1778.53,229.088 1779.1,230.485 1779.67,228.596 1780.23,228.914 1780.8,229.328 1781.37,226.585 1781.94,226.974 1782.51,228.128 1783.08,228.431 1783.64,228.798 1784.21,229.333 1784.78,226.604 1785.35,227.185 1785.92,227.534 1786.49,228.865 1787.05,228.16 1787.62,228.724 1788.19,228.963 1788.76,229.296 1789.33,227.865 1789.9,227.605 1790.46,225.989 1791.03,226.393 1791.6,228.065 1792.17,227.607 1792.74,228.897 1793.31,229.232 1793.87,230.661 1794.44,231.04 1795.01,232.313 1795.58,233.732 1796.15,233.749 1796.72,236.825 1797.28,237.652 1797.85,240.448 1798.42,240.021 1798.99,239.216 1799.56,240.942 1800.13,242.398 1800.69,238.545 1801.26,236.873 1801.83,235.745 1802.4,233.415 1802.97,234.397 1803.54,233.315 1804.1,234.553 1804.67,232.272 1805.24,231.167 1805.81,231.294 1806.38,235.643 1806.95,235.457 1807.51,235.179 1808.08,236.135 1808.65,236.762 1809.22,235.443 1809.79,236.225 1810.36,236.121 1810.92,234.77 1811.49,234.736 1812.06,235.628 1812.63,235.44 1813.2,233.313 1813.77,233.242 1814.33,231.196 1814.9,232.274 1815.47,232.326 1816.04,231.311 1816.61,232.285 1817.18,231.233 1817.74,231.234 1818.31,232.365 1818.88,231.096 1819.45,228.123 1820.02,225.22 1820.59,225.613 1821.15,227.295 1821.72,227.716 1822.29,226.827 1822.86,228.254 1823.43,228.826 1824,227.26 1824.56,228.69 1825.13,228.08 1825.7,228.417 1826.27,226.7 1826.84,225.246 1827.41,224.81 1827.97,226.484 1828.54,227.092 1829.11,228.624 1829.68,231.081 1830.25,235.082 1830.82,233.912 1831.39,235.914 1831.95,236.714 1832.52,237.711 1833.09,237.338 1833.66,235.746 1834.23,238.733 1834.8,237.476 1835.36,240.292 1835.93,239.968 1836.5,238.639 1837.07,239.497 1837.64,238.761 1838.21,239.25 1838.77,238.451 1839.34,238.983 1839.91,238.21 1840.48,236.701 1841.05,236.479 1841.62,235.047 1842.18,236.867 1842.75,236.428 1843.32,236.217 1843.89,234.76 1844.46,233.671 1845.03,231.572 1845.59,229.279 1846.16,231.375 1846.73,232.434 1847.3,233.339 1847.87,234.171 1848.44,232.916 1849,231.687 1849.57,232.789 1850.14,232.626 1850.71,232.469 1851.28,232.424 1851.85,234.626 1852.41,234.468 1852.98,233.109 1853.55,232.95 1854.12,232.771 1854.69,231.75 1855.26,231.608 1855.82,232.609 1856.39,233.581 1856.96,233.5 1857.53,234.093 1858.1,233.857 1858.67,234.51 1859.23,234.13 1859.8,233.911 1860.37,233.578 1860.94,234.433 1861.51,234.154 1862.08,233.91 1862.64,233.749 1863.21,234.798 1863.78,236.71 1864.35,237.268 1864.92,235.556 1865.49,235.245 1866.05,236.246 1866.62,233.905 1867.19,234.79 1867.76,239.241 1868.33,238.698 1868.9,235.818 1869.46,234.484 1870.03,235.143 1870.6,230.582 1871.17,231.486 1871.74,231.237 1872.31,231.326 1872.87,230.099 1873.44,229.213 1874.01,228.389 1874.58,227.655 1875.15,227.864 1875.72,228.001 1876.28,229.332 1876.85,229.327 1877.42,228.403 1877.99,227.65 1878.56,230.097 1879.13,230.141 1879.69,229.225 1880.26,229.109 1880.83,231.176 1881.4,232.179 1881.97,229.905 1882.54,230.111 1883.1,231.287 1883.67,234.373 1884.24,234.26 1884.81,234.033 1885.38,231.753 1885.95,230.562 1886.51,232.551 1887.08,234.564 1887.65,234.183 1888.22,233.518 1888.79,231.263 1889.36,229.443 1889.92,229.294 1890.49,228.42 1891.06,227.512 1891.63,227.661 1892.2,227.73 1892.77,228.14 1893.33,229.34 1893.9,229.557 1894.47,230.621 1895.04,228.643 1895.61,228.919 1896.18,228.3 1896.74,229.491 1897.31,229.88 1897.88,229.866 1898.45,228.902 1899.02,230.127 1899.59,230.13 1900.16,230.055 1900.72,229.2 1901.29,228.295 1901.86,228.552 1902.43,226.612 1903,227.076 1903.57,227.343 1904.13,226.647 1904.7,229.04 1905.27,230.27 1905.84,230.511 1906.41,231.54 1906.98,230.971 1907.54,232.216 1908.11,233.271 1908.68,230.892 1909.25,229.043 1909.82,226.165 1910.39,225.614 1910.95,227.059 1911.52,226.458 1912.09,226.827 1912.66,228.266 1913.23,227.57 1913.8,224.783 1914.36,226.357 1914.93,225.965 1915.5,225.541 1916.07,226.24 1916.64,229.174 1917.21,229.239 1917.77,228.543 1918.34,227.816 1918.91,227.196 1919.48,227.549 1920.05,228.939 1920.62,227.278 1921.18,226.928 1921.75,228.497 1922.32,226.63 1922.89,227.337 1923.46,225.683 1924.03,227.347 1924.59,226.745 1925.16,228.436 1925.73,226.937 1926.3,228.726 1926.87,230.266 1927.44,230.629 1928,230.071 1928.57,232.594 1929.14,233.896 1929.71,234.053 1930.28,235.118 1930.85,235.107 1931.41,235.211 1931.98,235.274 1932.55,235.159 1933.12,236.201 1933.69,237.093 1934.26,237.089 1934.82,234.911 1935.39,233.9 1935.96,234.003 1936.53,233.072 1937.1,232 1937.67,234.528 1938.23,235.535 1938.8,233.294 1939.37,232.398 1939.94,231.345 1940.51,231.574 1941.08,232.745 1941.64,234.778 1942.21,234.764 1942.78,233.716 1943.35,235.822 1943.92,237.728 1944.49,239.624 1945.05,238.224 1945.62,238.003 1946.19,238.77 1946.76,238.502 1947.33,237.954 1947.9,240.857 1948.46,240.263 1949.03,237.709 1949.6,236.172 1950.17,236.963 1950.74,235.952 1951.31,234.69 1951.87,232.58 1952.44,232.437 1953.01,234.376 1953.58,235.328 1954.15,237.009 1954.72,236.426 1955.28,234.023 1955.85,234.808 1956.42,236.575 1956.99,237.263 1957.56,239.137 1958.13,238.613 1958.69,240.187 1959.26,237.445 1959.83,233.959 1960.4,235.78 1960.97,235.454 1961.54,236.188 1962.1,235.045 1962.67,235.647 1963.24,235.655 1963.81,237.525 1964.38,235.928 1964.95,234.81 1965.51,235.606 1966.08,234.387 1966.65,233.982 1967.22,235.867 1967.79,235.498 1968.36,233.131 1968.92,234.804 1969.49,234.557 1970.06,236.028 1970.63,234.597 1971.2,232.512 1971.77,232.301 1972.34,231.184 1972.9,229.036 1973.47,229.478 1974.04,230.507 1974.61,229.457 1975.18,229.507 1975.75,229.863 1976.31,231.193 1976.88,232.193 1977.45,232.117 1978.02,230.278 1978.59,233.405 1979.16,233.254 1979.72,233.145 1980.29,232.11 1980.86,228.883 1981.43,229.201 1982,229.374 1982.57,227.592 1983.13,228.912 1983.7,229.094 1984.27,230.163 1984.84,230.041 1985.41,229.197 1985.98,228.285 1986.54,228.539 1987.11,227.566 1987.68,227.62 1988.25,229.116 1988.82,231.239 1989.39,232.259 1989.95,232.386 1990.52,232.183 1991.09,232.131 1991.66,233.211 1992.23,234.29 1992.8,235.123 1993.36,235.739 1993.93,234.683 1994.5,232.435 1995.07,232.276 1995.64,232.108 1996.21,231.917 1996.77,234.164 1997.34,234.72 1997.91,234.426 1998.48,233.98 1999.05,234.804 1999.62,233.57 2000.18,233.595 2000.75,232.324 2001.32,233.125 2001.89,232.827 2002.46,232.653 2003.03,235.653 2003.59,235.252 2004.16,233.737 2004.73,234.558 2005.3,232.181 2005.87,233.117 2006.44,232.944 2007,230.648 2007.57,231.553 2008.14,229.439 2008.71,229.424 2009.28,228.73 2009.85,228.936 2010.41,229.154 2010.98,229.403 2011.55,229.773 2012.12,230.963 2012.69,230.055 2013.26,226.839 2013.82,226.295 2014.39,229.729 2014.96,229.944 2015.53,229.239 2016.1,226.56 2016.67,226.863 2017.23,227.189 2017.8,227.474 2018.37,229.892 2018.94,231.037 2019.51,229.874 2020.08,232.188 2020.64,229.038 2021.21,226.282 2021.78,224.818 2022.35,227.435 2022.92,226.775 2023.49,227.218 2024.05,228.557 2024.62,231.031 2025.19,232.154 2025.76,231.237 2026.33,232.244 2026.9,233.334 2027.46,233.197 2028.03,232.998 2028.6,232.111 2029.17,233.256 2029.74,233.182 2030.31,233.2 2030.87,233.128 2031.44,234.062 2032.01,234.161 2032.58,234.02 2033.15,235.95 2033.72,235.646 2034.28,234.592 2034.85,236.478 2035.42,237.369 2035.99,237.093 2036.56,238.95 2037.13,237.427 2037.69,235.714 2038.26,235.369 2038.83,233.034 2039.4,234.154 2039.97,233.822 2040.54,233.71 2041.11,234.407 2041.67,232.967 2042.24,231.854 2042.81,231.859 2043.38,230.97 2043.95,231.1 2044.52,231.234 2045.08,231.4 2045.65,233.489 2046.22,232.459 2046.79,231.288 2047.36,232.338 2047.93,230.26 2048.49,229.372 2049.06,228.629 2049.63,229.838 2050.2,231.012 2050.77,232.06 2051.34,232.929 2051.9,233.807 2052.47,234.697 2053.04,232.379 2053.61,232.345 2054.18,233.453 2054.75,232.374 2055.31,232.372 2055.88,234.188 2056.45,235.1 2057.02,234.99 2057.59,235.645 2058.16,236.355 2058.72,234.814 2059.29,233.603 2059.86,231.407 2060.43,231.324 2061,231.261 2061.57,230.343 2062.13,231.601 2062.7,231.449 2063.27,231.379 2063.84,229.301 2064.41,228.589 2064.98,226.682 2065.54,226.844 2066.11,226.123 2066.68,224.483 2067.25,222.977 2067.82,222.463 2068.39,219.975 2068.95,219.895 2069.52,221.705 2070.09,222.244 2070.66,224.083 2071.23,222.694 2071.8,222.563 2072.36,224.291 2072.93,224.899 2073.5,223.636 2074.07,225.248 2074.64,225.94 2075.21,226.641 2075.77,226.843 2076.34,226.652 2076.91,226.379 2077.48,228.211 2078.05,230.842 2078.62,229.884 2079.18,229.427 2079.75,230.743 2080.32,233.096 2080.89,234.275 2081.46,233.39 2082.03,232.355 2082.59,235.461 2083.16,236.522 2083.73,237.365 2084.3,235.32 2084.87,234.148 2085.44,234.158 2086,235.103 2086.57,237.194 2087.14,234.912 2087.71,232.782 2088.28,232.838 2088.85,233.952 2089.41,234.169 2089.98,234.008 2090.55,235.129 2091.12,236.023 2091.69,236.65 2092.26,234.547 2092.82,234.435 2093.39,235.247 2093.96,236.136 2094.53,237.122 2095.1,236.879 2095.67,234.741 2096.23,233.487 2096.8,233.273 2097.37,233.123 2097.94,234.163 2098.51,231.806 2099.08,232.048 2099.64,232.084 2100.21,233.122 2100.78,234.125 2101.35,234.318 2101.92,233.217 2102.49,233.282 2103.05,234.187 2103.62,235.019 2104.19,235.857 2104.76,235.681 2105.33,232.528 2105.9,233.754 2106.46,233.545 2107.03,234.673 2107.6,233.724 2108.17,232.278 2108.74,232.562 2109.31,230.621 2109.87,231.633 2110.44,231.724 2111.01,235.158 2111.58,233.021 2112.15,233.066 2112.72,232.946 2113.29,232.981 2113.85,231.858 2114.42,229.951 2114.99,228.059 2115.56,229.411 2116.13,227.54 2116.7,227.952 2117.26,232.42 2117.83,232.404 2118.4,230.501 2118.97,231.644 2119.54,231.851 2120.11,233.177 2120.67,233.257 2121.24,233.159 2121.81,235.13 2122.38,236.918 2122.95,235.594 2123.52,234.393 2124.08,232.24 2124.65,232.384 2125.22,235.591 2125.79,235.481 2126.36,235.265 2126.93,236.227 2127.49,237.973 2128.06,237.421 2128.63,237.154 2129.2,236.786 2129.77,236.727 2130.34,235.379 2130.9,236.196 2131.47,236.904 2132.04,235.479 2132.61,235.253 2133.18,235.089 2133.75,234.061 2134.31,236.858 2134.88,234.572 2135.45,236.41 2136.02,234.984 2136.59,233.659 2137.16,236.729 2137.72,237.365 2138.29,236.837 2138.86,237.601 2139.43,237.063 2140,237.629 2140.57,236.12 2141.13,232.621 2141.7,232.552 2142.27,231.263 2142.84,233.42 2143.41,232.245 2143.98,231.048 2144.54,231.199 2145.11,231.161 2145.68,236.359 2146.25,236.059 2146.82,236.61 2147.39,233.925 2147.95,232.708 2148.52,232.567 2149.09,231.422 2149.66,230.362 2150.23,227.353 2150.8,226.643 2151.36,226.924 2151.93,227.105 2152.5,225.294 2153.07,225.717 2153.64,227.062 2154.21,227.116 2154.77,228.628 2155.34,232.821 2155.91,232.74 2156.48,234.578 2157.05,233.99 2157.62,234.809 2158.18,234.474 2158.75,235.022 2159.32,234.86 2159.89,235.562 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip390)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.024\n  with uncertainty of ± 0.0021658161171839137\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0158 ± (0.00234664, 0.00240525) (MC)\n  95% confidence interval: [-4.0206, -4.01115] (MC)\n  linear error propagation: -4.01587 ± 0.00241611\n  |δ_y| = |0.00165019| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015803927790426, val_l = 0.004798744734173077, val_u = 0.0046554684180053485)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip420\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip420)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip421\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip420)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip422\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1139.14 2211.02,1139.14 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,958.233 2211.02,958.233 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,777.322 2211.02,777.322 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,596.411 2211.02,596.411 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,415.5 2211.02,415.5 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,234.589 2211.02,234.589 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1139.14 365.751,1139.14 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,958.233 365.751,958.233 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,777.322 365.751,777.322 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,596.411 365.751,596.411 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,415.5 365.751,415.5 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,234.589 365.751,234.589 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M298.909 1124.94 Q295.298 1124.94 293.469 1128.51 Q291.664 1132.05 291.664 1139.18 Q291.664 1146.28 293.469 1149.85 Q295.298 1153.39 298.909 1153.39 Q302.543 1153.39 304.349 1149.85 Q306.177 1146.28 306.177 1139.18 Q306.177 1132.05 304.349 1128.51 Q302.543 1124.94 298.909 1124.94 M298.909 1121.24 Q304.719 1121.24 307.775 1125.85 Q310.853 1130.43 310.853 1139.18 Q310.853 1147.91 307.775 1152.51 Q304.719 1157.09 298.909 1157.09 Q293.099 1157.09 290.02 1152.51 Q286.964 1147.91 286.964 1139.18 Q286.964 1130.43 290.02 1125.85 Q293.099 1121.24 298.909 1121.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M259.557 971.577 L267.196 971.577 L267.196 945.212 L258.886 946.879 L258.886 942.619 L267.15 940.953 L271.826 940.953 L271.826 971.577 L279.465 971.577 L279.465 975.513 L259.557 975.513 L259.557 971.577 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M298.909 944.031 Q295.298 944.031 293.469 947.596 Q291.664 951.138 291.664 958.267 Q291.664 965.374 293.469 968.939 Q295.298 972.48 298.909 972.48 Q302.543 972.48 304.349 968.939 Q306.177 965.374 306.177 958.267 Q306.177 951.138 304.349 947.596 Q302.543 944.031 298.909 944.031 M298.909 940.328 Q304.719 940.328 307.775 944.934 Q310.853 949.517 310.853 958.267 Q310.853 966.994 307.775 971.601 Q304.719 976.184 298.909 976.184 Q293.099 976.184 290.02 971.601 Q286.964 966.994 286.964 958.267 Q286.964 949.517 290.02 944.934 Q293.099 940.328 298.909 940.328 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M262.775 790.666 L279.094 790.666 L279.094 794.602 L257.15 794.602 L257.15 790.666 Q259.812 787.912 264.395 783.282 Q269.002 778.629 270.182 777.287 Q272.428 774.764 273.307 773.028 Q274.21 771.268 274.21 769.579 Q274.21 766.824 272.266 765.088 Q270.344 763.352 267.242 763.352 Q265.043 763.352 262.59 764.116 Q260.159 764.88 257.381 766.43 L257.381 761.708 Q260.205 760.574 262.659 759.995 Q265.113 759.417 267.15 759.417 Q272.52 759.417 275.715 762.102 Q278.909 764.787 278.909 769.278 Q278.909 771.407 278.099 773.329 Q277.312 775.227 275.205 777.819 Q274.627 778.491 271.525 781.708 Q268.423 784.903 262.775 790.666 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M298.909 763.12 Q295.298 763.12 293.469 766.685 Q291.664 770.227 291.664 777.356 Q291.664 784.463 293.469 788.028 Q295.298 791.569 298.909 791.569 Q302.543 791.569 304.349 788.028 Q306.177 784.463 306.177 777.356 Q306.177 770.227 304.349 766.685 Q302.543 763.12 298.909 763.12 M298.909 759.417 Q304.719 759.417 307.775 764.023 Q310.853 768.606 310.853 777.356 Q310.853 786.083 307.775 790.69 Q304.719 795.273 298.909 795.273 Q293.099 795.273 290.02 790.69 Q286.964 786.083 286.964 777.356 Q286.964 768.606 290.02 764.023 Q293.099 759.417 298.909 759.417 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M272.914 595.056 Q276.27 595.774 278.145 598.043 Q280.043 600.311 280.043 603.644 Q280.043 608.76 276.525 611.561 Q273.006 614.362 266.525 614.362 Q264.349 614.362 262.034 613.922 Q259.742 613.505 257.289 612.649 L257.289 608.135 Q259.233 609.269 261.548 609.848 Q263.863 610.427 266.386 610.427 Q270.784 610.427 273.076 608.691 Q275.39 606.955 275.39 603.644 Q275.39 600.589 273.238 598.876 Q271.108 597.14 267.289 597.14 L263.261 597.14 L263.261 593.297 L267.474 593.297 Q270.923 593.297 272.752 591.932 Q274.58 590.543 274.58 587.95 Q274.58 585.288 272.682 583.876 Q270.807 582.441 267.289 582.441 Q265.367 582.441 263.168 582.857 Q260.969 583.274 258.33 584.154 L258.33 579.987 Q260.992 579.246 263.307 578.876 Q265.645 578.506 267.705 578.506 Q273.029 578.506 276.131 580.936 Q279.233 583.344 279.233 587.464 Q279.233 590.334 277.59 592.325 Q275.946 594.293 272.914 595.056 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M298.909 582.209 Q295.298 582.209 293.469 585.774 Q291.664 589.316 291.664 596.445 Q291.664 603.552 293.469 607.117 Q295.298 610.658 298.909 610.658 Q302.543 610.658 304.349 607.117 Q306.177 603.552 306.177 596.445 Q306.177 589.316 304.349 585.774 Q302.543 582.209 298.909 582.209 M298.909 578.506 Q304.719 578.506 307.775 583.112 Q310.853 587.695 310.853 596.445 Q310.853 605.172 307.775 609.779 Q304.719 614.362 298.909 614.362 Q293.099 614.362 290.02 609.779 Q286.964 605.172 286.964 596.445 Q286.964 587.695 290.02 583.112 Q293.099 578.506 298.909 578.506 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M271.594 402.294 L259.789 420.743 L271.594 420.743 L271.594 402.294 M270.367 398.22 L276.247 398.22 L276.247 420.743 L281.177 420.743 L281.177 424.632 L276.247 424.632 L276.247 432.78 L271.594 432.78 L271.594 424.632 L255.992 424.632 L255.992 420.118 L270.367 398.22 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M298.909 401.298 Q295.298 401.298 293.469 404.863 Q291.664 408.405 291.664 415.534 Q291.664 422.641 293.469 426.206 Q295.298 429.747 298.909 429.747 Q302.543 429.747 304.349 426.206 Q306.177 422.641 306.177 415.534 Q306.177 408.405 304.349 404.863 Q302.543 401.298 298.909 401.298 M298.909 397.595 Q304.719 397.595 307.775 402.201 Q310.853 406.784 310.853 415.534 Q310.853 424.261 307.775 428.868 Q304.719 433.451 298.909 433.451 Q293.099 433.451 290.02 428.868 Q286.964 424.261 286.964 415.534 Q286.964 406.784 290.02 402.201 Q293.099 397.595 298.909 397.595 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M258.793 217.309 L277.15 217.309 L277.15 221.244 L263.076 221.244 L263.076 229.716 Q264.094 229.369 265.113 229.207 Q266.131 229.022 267.15 229.022 Q272.937 229.022 276.316 232.193 Q279.696 235.364 279.696 240.781 Q279.696 246.359 276.224 249.461 Q272.752 252.54 266.432 252.54 Q264.256 252.54 261.988 252.17 Q259.742 251.799 257.335 251.059 L257.335 246.359 Q259.418 247.494 261.641 248.049 Q263.863 248.605 266.34 248.605 Q270.344 248.605 272.682 246.498 Q275.02 244.392 275.02 240.781 Q275.02 237.17 272.682 235.063 Q270.344 232.957 266.34 232.957 Q264.465 232.957 262.59 233.373 Q260.738 233.79 258.793 234.67 L258.793 217.309 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M298.909 220.387 Q295.298 220.387 293.469 223.952 Q291.664 227.494 291.664 234.623 Q291.664 241.73 293.469 245.295 Q295.298 248.836 298.909 248.836 Q302.543 248.836 304.349 245.295 Q306.177 241.73 306.177 234.623 Q306.177 227.494 304.349 223.952 Q302.543 220.387 298.909 220.387 M298.909 216.684 Q304.719 216.684 307.775 221.29 Q310.853 225.873 310.853 234.623 Q310.853 243.35 307.775 247.957 Q304.719 252.54 298.909 252.54 Q293.099 252.54 290.02 247.957 Q286.964 243.35 286.964 234.623 Q286.964 225.873 290.02 221.29 Q293.099 216.684 298.909 216.684 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip422)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1005.84 400.199,883.381 400.786,908.876 401.372,800.877 401.958,821.754 402.545,833.774 403.131,738.411 403.718,653.083 404.304,571.113 404.891,494.718 405.477,428.546 406.063,454.712 406.65,474.632 407.236,489.651 407.823,433.182 408.409,446.621 408.995,396.162 409.582,408.129 410.168,418.066 410.755,425.36 411.341,385.425 411.927,393.451 412.514,360.08 413.1,330.008 413.687,303.219 414.273,281.49 414.86,260.945 415.446,245.21 416.032,230.928 416.619,219.895 417.205,237.387 417.792,253.079 418.378,245.311 418.964,262.408 419.551,279.504 420.137,276.793 420.724,275.945 421.31,277.275 421.896,279.83 422.483,282.572 423.069,287.044 423.656,291.997 424.242,298.463 424.829,306.524 425.415,340.224 426.001,348.955 426.588,368.908 427.174,389.159 427.761,398.991 428.347,428.034 428.933,447.139 429.52,456.809 430.106,466.791 430.693,501.042 431.279,518.741 431.865,530.234 432.452,568.833 433.038,578.344 433.625,593.88 434.211,603.59 434.798,630.966 435.384,645.496 435.97,666.054 436.557,690.368 437.143,698.206 437.73,725.841 438.316,742.35 438.902,758.583 439.489,774.346 440.075,802.168 440.662,816.381 441.248,825.674 441.835,843.055 442.421,848.116 443.007,857.072 443.594,869.449 444.18,874.922 444.767,890.509 445.353,895.163 445.939,900.32 446.526,915.687 447.112,923.307 447.699,928.296 448.285,942.132 448.871,952.617 449.458,957.41 450.044,964.723 450.631,966.194 451.217,973.727 451.804,983.946 452.39,990.966 452.976,1000.81 453.563,1007.49 454.149,1016.6 454.736,1025.65 455.322,1031.84 455.908,1040.08 456.495,1043.26 457.081,1046.94 457.668,1050.61 458.254,1060.66 458.84,1067.74 459.427,1070.12 460.013,1073.14 460.6,1084.65 461.186,1091.3 461.773,1091.64 462.359,1100.32 462.945,1104.7 463.532,1110.87 464.118,1115.27 464.705,1117.33 465.291,1125.56 465.877,1135.44 466.464,1136.97 467.05,1140.92 467.637,1142.52 468.223,1143.98 468.809,1147.63 469.396,1152.98 469.982,1154.24 470.569,1157.8 471.155,1159.6 471.742,1166.78 472.328,1173.08 472.914,1174.2 473.501,1178.51 474.087,1183.45 474.674,1191.51 475.26,1193.79 475.846,1194.38 476.433,1198.1 477.019,1200.21 477.606,1201.92 478.192,1205.8 478.778,1209.19 479.365,1212.33 479.951,1210.11 480.538,1211.79 481.124,1213.35 481.711,1213.32 482.297,1216.41 482.883,1216.13 483.47,1217.17 484.056,1218.55 484.643,1218.33 485.229,1217.93 485.815,1218.24 486.402,1221.36 486.988,1221.18 487.575,1220.5 488.161,1221.7 488.748,1221.74 489.334,1219.8 489.92,1221.34 490.507,1219.47 491.093,1219.61 491.68,1217.89 492.266,1219.96 492.852,1220.17 493.439,1221.82 494.025,1223.79 494.612,1223.88 495.198,1222.42 495.784,1224.34 496.371,1227.81 496.957,1230.86 497.544,1230.36 498.13,1228.7 498.717,1231.86 499.303,1228.65 499.889,1228.52 500.476,1227 501.062,1226.94 501.649,1228.6 502.235,1230.04 502.821,1232.87 503.408,1235.74 503.994,1237.03 504.581,1238.14 505.167,1237.6 505.753,1240.39 506.34,1240.21 506.926,1240.04 507.513,1239.23 508.099,1241.71 508.686,1241.38 509.272,1245.8 509.858,1244.82 510.445,1244.02 511.031,1246.34 511.618,1246.92 512.204,1246.19 512.79,1245.37 513.377,1244.39 513.963,1246.52 514.55,1244.09 515.136,1244.84 515.722,1245.91 516.309,1246.49 516.895,1247 517.482,1246.26 518.068,1248.23 518.655,1247.59 519.241,1245.36 519.827,1246.02 520.414,1242.11 521,1241.54 521.587,1240.77 522.173,1237.42 522.759,1238.44 523.346,1242.61 523.932,1244.06 524.519,1243.25 525.105,1246.85 525.691,1250.53 526.278,1248.22 526.864,1246.9 527.451,1246.05 528.037,1243.73 528.624,1241.37 529.21,1237.83 529.796,1239.4 530.383,1237.36 530.969,1236.97 531.556,1235.19 532.142,1238.05 532.728,1239.47 533.315,1240.3 533.901,1241.56 534.488,1233.63 535.074,1233.54 535.661,1235.01 536.247,1236.34 536.833,1236.19 537.42,1238.66 538.006,1240.06 538.593,1242.47 539.179,1240.15 539.765,1242.51 540.352,1240.34 540.938,1241.24 541.525,1240.68 542.111,1242.75 542.697,1242.06 543.284,1241.46 543.87,1239.44 544.457,1240.68 545.043,1237.43 545.63,1232.51 546.216,1233.83 546.802,1235.08 547.389,1234.79 547.975,1235.85 548.562,1238.5 549.148,1237.9 549.734,1237.67 550.321,1238.94 550.907,1238.44 551.494,1237.83 552.08,1235.74 552.666,1238.35 553.253,1242.29 553.839,1241.57 554.426,1242.05 555.012,1241.41 555.599,1242.27 556.185,1243.09 556.771,1242.53 557.358,1243.41 557.944,1242.48 558.531,1240.3 559.117,1239.7 559.703,1239.26 560.29,1240.15 560.876,1239.18 561.463,1237.05 562.049,1238.15 562.635,1237.66 563.222,1235.45 563.808,1234.72 564.395,1237.29 564.981,1236.83 565.568,1239.39 566.154,1240.46 566.74,1238.33 567.327,1235.03 567.913,1234.5 568.5,1233.9 569.086,1236.43 569.672,1235.89 570.259,1233.9 570.845,1228.9 571.432,1233.55 572.018,1231.81 572.605,1230.85 573.191,1230.65 573.777,1231.9 574.364,1231.91 574.95,1232.95 575.537,1232.32 576.123,1233.3 576.709,1232.97 577.296,1232.57 577.882,1232.22 578.469,1234.56 579.055,1231.17 579.641,1232.23 580.228,1229.87 580.814,1232.81 581.401,1232.47 581.987,1232.39 582.574,1232.01 583.16,1231.49 583.746,1229.51 584.333,1230.74 584.919,1230.15 585.506,1228.16 586.092,1229.4 586.678,1232.07 587.265,1235.09 587.851,1234.51 588.438,1235.41 589.024,1233.89 589.61,1233.1 590.197,1234.61 590.783,1237.2 591.37,1238.04 591.956,1236.15 592.543,1235.91 593.129,1238.46 593.715,1239.02 594.302,1236.8 594.888,1236.17 595.475,1238.53 596.061,1233.33 596.647,1231.38 597.234,1233.9 597.82,1234.69 598.407,1234.21 598.993,1234.93 599.579,1232.68 600.166,1232.32 600.752,1230.36 601.339,1228.61 601.925,1228.49 602.512,1232.65 603.098,1234.09 603.684,1232.22 604.271,1228.95 604.857,1228.26 605.444,1231.01 606.03,1232.42 606.616,1233.44 607.203,1235.92 607.789,1236.77 608.376,1234.74 608.962,1232.54 609.548,1233.13 610.135,1232.32 610.721,1231.83 611.308,1231.52 611.894,1229.55 612.481,1227.54 613.067,1225.72 613.653,1226.98 614.24,1225.16 614.826,1220.23 615.413,1226.34 615.999,1224.47 616.585,1225.5 617.172,1226.99 617.758,1227.92 618.345,1225.91 618.931,1230.1 619.518,1229.28 620.104,1224.71 620.69,1224.57 621.277,1225.74 621.863,1227.01 622.45,1226.8 623.036,1228.29 623.622,1229.63 624.209,1229.17 624.795,1230.46 625.382,1231.23 625.968,1232.36 626.554,1236.28 627.141,1237.19 627.727,1236.55 628.314,1235.77 628.9,1234.91 629.487,1237.34 630.073,1234.86 630.659,1234.09 631.246,1233.22 631.832,1235.65 632.419,1233.29 633.005,1234.24 633.591,1236.37 634.178,1231.21 634.764,1230.48 635.351,1228.41 635.937,1227.9 636.523,1226.19 637.11,1223.06 637.696,1221.59 638.283,1223.22 638.869,1222.78 639.456,1222.58 640.042,1223.96 640.628,1225.29 641.215,1225.07 641.801,1221.83 642.388,1218.36 642.974,1215.58 643.56,1214.35 644.147,1213.36 644.733,1215.15 645.32,1215.54 645.906,1214.24 646.492,1211.62 647.079,1212.16 647.665,1212.58 648.252,1214.63 648.838,1213.53 649.425,1212.73 650.011,1213.3 650.597,1218.31 651.184,1219.86 651.77,1220.09 652.357,1217.63 652.943,1217.44 653.529,1217.47 654.116,1213.23 654.702,1213.35 655.289,1211.96 655.875,1209.39 656.462,1209.65 657.048,1211.98 657.634,1213.83 658.221,1214.33 658.807,1217.92 659.394,1219.58 659.98,1221.04 660.566,1219.4 661.153,1216.4 661.739,1218.01 662.326,1215.2 662.912,1214.08 663.498,1212.79 664.085,1214.47 664.671,1214.38 665.258,1216.16 665.844,1216.34 666.431,1217.95 667.017,1218.21 667.603,1217 668.19,1218.53 668.776,1221.59 669.363,1221.58 669.949,1222.77 670.535,1222.91 671.122,1222.75 671.708,1223.9 672.295,1222.13 672.881,1220.23 673.467,1220.07 674.054,1218.77 674.64,1217.23 675.227,1218.68 675.813,1221.96 676.4,1223.2 676.986,1221.66 677.572,1221.72 678.159,1222.97 678.745,1224.09 679.332,1226.56 679.918,1226.29 680.504,1225.89 681.091,1225.64 681.677,1226.8 682.264,1223.43 682.85,1224.86 683.436,1224.38 684.023,1225.56 684.609,1228.34 685.196,1226.36 685.782,1228.73 686.369,1226.63 686.955,1226.28 687.541,1226.11 688.128,1221.21 688.714,1219.32 689.301,1218.07 689.887,1218.23 690.473,1219.97 691.06,1222.93 691.646,1222.81 692.233,1222.5 692.819,1223.63 693.405,1230.58 693.992,1231.29 694.578,1230.62 695.165,1230.16 695.751,1229.6 696.338,1227.65 696.924,1225.73 697.51,1223.87 698.097,1222.23 698.683,1223.55 699.27,1223.49 699.856,1224.73 700.442,1225.81 701.029,1225.34 701.615,1226.62 702.202,1226.06 702.788,1225.51 703.375,1220.37 703.961,1220.38 704.547,1220.24 705.134,1221.8 705.72,1219.94 706.307,1216.97 706.893,1219.69 707.479,1219.5 708.066,1222.27 708.652,1220.42 709.239,1217.64 709.825,1212.86 710.411,1212.94 710.998,1213.25 711.584,1211.97 712.171,1216.95 712.757,1218.51 713.344,1219.97 713.93,1218.52 714.516,1221.75 715.103,1224.35 715.689,1221.11 716.276,1220.69 716.862,1219.15 717.448,1220.87 718.035,1219.5 718.621,1219.7 719.208,1219.64 719.794,1222.28 720.38,1221.99 720.967,1221.69 721.553,1224.29 722.14,1226.96 722.726,1226.31 723.313,1222.67 723.899,1223.7 724.485,1220.46 725.072,1218.91 725.658,1218.8 726.245,1218.69 726.831,1218.79 727.417,1213.94 728.004,1212.13 728.59,1212.22 729.177,1213.94 729.763,1214.26 730.349,1217.24 730.936,1217.09 731.522,1215.76 732.109,1215.71 732.695,1214.19 733.282,1215.47 733.868,1215.64 734.454,1215.66 735.041,1212.79 735.627,1214.29 736.214,1215.72 736.8,1215.66 737.386,1218.33 737.973,1221.17 738.559,1220.96 739.146,1223.92 739.732,1225.22 740.318,1220.19 740.905,1219.98 741.491,1218.13 742.078,1219.45 742.664,1216.18 743.251,1216.38 743.837,1216.38 744.423,1219.6 745.01,1213.65 745.596,1219.63 746.183,1216.3 746.769,1214.85 747.355,1214.91 747.942,1214.87 748.528,1215.21 749.115,1215.41 749.701,1213.53 750.288,1215.25 750.874,1215.2 751.46,1214.99 752.047,1213.19 752.633,1214.61 753.22,1216.32 753.806,1213.28 754.392,1213.36 754.979,1214.66 755.565,1216.24 756.152,1217.83 756.738,1219.3 757.324,1218.04 757.911,1219.75 758.497,1215.23 759.084,1216.55 759.67,1219.63 760.257,1219.64 760.843,1223.78 761.429,1229.08 762.016,1223.92 762.602,1221.91 763.189,1218.64 763.775,1218.62 764.361,1214.25 764.948,1215.55 765.534,1215.53 766.121,1214.34 766.707,1214.53 767.293,1214.57 767.88,1214.72 768.466,1213.06 769.053,1212.78 769.639,1213.1 770.226,1211.7 770.812,1216.53 771.398,1215.39 771.985,1213.62 772.571,1213.43 773.158,1217.9 773.744,1216.29 774.33,1217.76 774.917,1220.4 775.503,1220.14 776.09,1218.24 776.676,1217.86 777.262,1219.28 777.849,1218.88 778.435,1220.12 779.022,1219.54 779.608,1219.58 780.195,1220.54 780.781,1220.19 781.367,1221.42 781.954,1219.34 782.54,1217.43 783.127,1215.72 783.713,1214.25 784.299,1213.92 784.886,1216.78 785.472,1218.2 786.059,1217.85 786.645,1220.7 787.232,1220.17 787.818,1218.43 788.404,1217.96 788.991,1216.22 789.577,1218.78 790.164,1218.61 790.75,1218.47 791.336,1217.13 791.923,1217.18 792.509,1217.04 793.096,1219.56 793.682,1219.33 794.268,1222.11 794.855,1224.97 795.441,1224.6 796.028,1225.8 796.614,1226.69 797.201,1227.44 797.787,1226.82 798.373,1225.92 798.96,1226.96 799.546,1226.32 800.133,1224.26 800.719,1220.69 801.305,1218.57 801.892,1218.1 802.478,1220.79 803.065,1217.83 803.651,1217.8 804.237,1218.95 804.824,1218.97 805.41,1220 805.997,1222.55 806.583,1223.52 807.17,1223.09 807.756,1224.25 808.342,1220.58 808.929,1220.23 809.515,1221.46 810.102,1219.61 810.688,1218.09 811.274,1217.54 811.861,1217.25 812.447,1217.27 813.034,1214.19 813.62,1212.47 814.206,1213.95 814.793,1210.82 815.379,1210.99 815.966,1210.87 816.552,1204.81 817.139,1208.38 817.725,1207.22 818.311,1205.98 818.898,1209.49 819.484,1207.99 820.071,1210.96 820.657,1209.61 821.243,1208.25 821.83,1207.06 822.416,1208.82 823.003,1206.17 823.589,1209.34 824.175,1214.14 824.762,1209.65 825.348,1212.84 825.935,1211.17 826.521,1208.18 827.108,1208.37 827.694,1208.6 828.28,1205.7 828.867,1204.75 829.453,1208.57 830.04,1205.84 830.626,1208.85 831.212,1204.69 831.799,1205.5 832.385,1204.79 832.972,1208.57 833.558,1207.45 834.145,1212.23 834.731,1212.6 835.317,1214.38 835.904,1214.39 836.49,1213.15 837.077,1210.26 837.663,1210.51 838.249,1210.81 838.836,1211.2 839.422,1212.95 840.009,1217.43 840.595,1215.65 841.181,1217.07 841.768,1216.84 842.354,1216.75 842.941,1212.38 843.527,1211.09 844.114,1208.51 844.7,1208.7 845.286,1207.39 845.873,1204.56 846.459,1203.57 847.046,1205.57 847.632,1206.24 848.218,1203.57 848.805,1205.73 849.391,1207.52 849.978,1206.55 850.564,1205.73 851.15,1204.74 851.737,1208.64 852.323,1208.87 852.91,1210.37 853.496,1210.39 854.083,1210.66 854.669,1209.43 855.255,1208.34 855.842,1211.52 856.428,1208.84 857.015,1208.84 857.601,1210.7 858.187,1212.31 858.774,1212.19 859.36,1210.84 859.947,1211.34 860.533,1213 861.119,1211.42 861.706,1211.58 862.292,1210.25 862.879,1213.4 863.465,1216.54 864.052,1216.46 864.638,1216.27 865.224,1216.17 865.811,1217.67 866.397,1218.93 866.984,1221.54 867.57,1223.9 868.156,1221.92 868.743,1221.67 869.329,1223.03 869.916,1221.21 870.502,1221.22 871.089,1220.94 871.675,1220.54 872.261,1220.37 872.848,1220.09 873.434,1219.65 874.021,1221.85 874.607,1224.41 875.193,1226.79 875.78,1226.29 876.366,1225.64 876.953,1221.91 877.539,1221.6 878.125,1221.43 878.712,1219.4 879.298,1220.63 879.885,1218.71 880.471,1219.88 881.058,1218.12 881.644,1219.4 882.23,1220.6 882.817,1222.89 883.403,1222.5 883.99,1222.34 884.576,1228.06 885.162,1228.94 885.749,1228.06 886.335,1227.41 886.922,1229.61 887.508,1230.54 888.094,1228.18 888.681,1227.43 889.267,1226.54 889.854,1225.59 890.44,1226.59 891.027,1225.95 891.613,1217.91 892.199,1216.08 892.786,1216.02 893.372,1215.64 893.959,1215.47 894.545,1214.1 895.131,1212.72 895.718,1210.78 896.304,1210.81 896.891,1207.9 897.477,1205.4 898.063,1204.35 898.65,1208.21 899.236,1211.56 899.823,1213.24 900.409,1213.38 900.996,1214.31 901.582,1212.59 902.168,1209.65 902.755,1209.72 903.341,1205.44 903.928,1204.27 904.514,1203.38 905.1,1201.14 905.687,1202.96 906.273,1203.15 906.86,1203.63 907.446,1205.6 908.032,1207.29 908.619,1209.27 909.205,1209.37 909.792,1211.29 910.378,1212.64 910.965,1214.32 911.551,1215.76 912.137,1217.11 912.724,1215.44 913.31,1215.26 913.897,1214.06 914.483,1219.69 915.069,1220.68 915.656,1218.8 916.242,1218.17 916.829,1208.82 917.415,1211.93 918.002,1210.33 918.588,1205.99 919.174,1204.93 919.761,1202.58 920.347,1206.12 920.934,1204.97 921.52,1205.43 922.106,1205.84 922.693,1207.53 923.279,1207.93 923.866,1206.76 924.452,1205.75 925.038,1204.93 925.625,1205.09 926.211,1202.9 926.798,1202.17 927.384,1205.56 927.971,1200.34 928.557,1200.99 929.143,1203.39 929.73,1205.38 930.316,1202.85 930.903,1203.7 931.489,1204.19 932.075,1205.05 932.662,1207.13 933.248,1205.84 933.835,1207.47 934.421,1206.36 935.007,1209.69 935.594,1209.82 936.18,1210.1 936.767,1210.1 937.353,1210.24 937.94,1210.5 938.526,1208.9 939.112,1210.51 939.699,1209.01 940.285,1210.77 940.872,1210.85 941.458,1209.76 942.044,1209.95 942.631,1208.78 943.217,1208.01 943.804,1209.66 944.39,1211.3 944.976,1211.55 945.563,1214.83 946.149,1214.72 946.736,1211.93 947.322,1213.65 947.909,1216.77 948.495,1216.44 949.081,1214.75 949.668,1217.65 950.254,1217.33 950.841,1219.89 951.427,1219.69 952.013,1213.59 952.6,1212.31 953.186,1212.47 953.773,1215.41 954.359,1218.39 954.945,1220.87 955.532,1220.36 956.118,1221.4 956.705,1222.13 957.291,1221.76 957.878,1226.15 958.464,1227.07 959.05,1227.62 959.637,1226.9 960.223,1227.52 960.81,1228.2 961.396,1227.15 961.982,1225.16 962.569,1226.12 963.155,1224.2 963.742,1224.97 964.328,1224.36 964.915,1220.94 965.501,1219.35 966.087,1220.38 966.674,1221.28 967.26,1219.29 967.847,1214.35 968.433,1211.52 969.019,1211.32 969.606,1208.42 970.192,1211.42 970.779,1212.61 971.365,1211.13 971.951,1211.12 972.538,1213.83 973.124,1213.62 973.711,1215.36 974.297,1215.61 974.884,1218.51 975.47,1216.6 976.056,1216.43 976.643,1214.58 977.229,1213.23 977.816,1212.88 978.402,1212.69 978.988,1211.4 979.575,1210.05 980.161,1203.95 980.748,1205.89 981.334,1206.08 981.92,1207.98 982.507,1208.01 983.093,1207 983.68,1207.03 984.266,1208.97 984.853,1210.37 985.439,1215.17 986.025,1215.13 986.612,1216.29 987.198,1214.61 987.785,1208.57 988.371,1208.54 988.957,1206 989.544,1207.93 990.13,1205.36 990.717,1204.27 991.303,1204.34 991.889,1204.77 992.476,1208.21 993.062,1209.95 993.649,1211.42 994.235,1212.7 994.822,1211.32 995.408,1208.67 995.994,1208.88 996.581,1210.55 997.167,1209.45 997.754,1208.31 998.34,1213.21 998.926,1211.72 999.513,1213.27 1000.1,1210.24 1000.69,1208.8 1001.27,1206.23 1001.86,1206.54 1002.44,1206.91 1003.03,1207.58 1003.62,1207.88 1004.2,1208.14 1004.79,1206.99 1005.38,1210.22 1005.96,1208.92 1006.55,1210.68 1007.14,1210.54 1007.72,1210.72 1008.31,1212.36 1008.9,1212.61 1009.48,1211.06 1010.07,1210.03 1010.65,1210.47 1011.24,1210.72 1011.83,1210.46 1012.41,1213.52 1013,1213.79 1013.59,1215.27 1014.17,1215.49 1014.76,1212.61 1015.35,1212.63 1015.93,1215.72 1016.52,1215.65 1017.11,1217.09 1017.69,1215.36 1018.28,1214.98 1018.86,1218.11 1019.45,1219.38 1020.04,1217.83 1020.62,1217.76 1021.21,1216.19 1021.8,1214.71 1022.38,1214.61 1022.97,1214.48 1023.56,1214.29 1024.14,1215.56 1024.73,1215.25 1025.32,1215.35 1025.9,1215.24 1026.49,1213.4 1027.07,1215.97 1027.66,1217.29 1028.25,1213.94 1028.83,1216.3 1029.42,1216.08 1030.01,1217.27 1030.59,1215.32 1031.18,1213.68 1031.77,1213.62 1032.35,1215.27 1032.94,1216.73 1033.52,1214.64 1034.11,1214.46 1034.7,1212.71 1035.28,1212.66 1035.87,1212.64 1036.46,1212.57 1037.04,1212.68 1037.63,1212.88 1038.22,1214.28 1038.8,1212.66 1039.39,1211.04 1039.98,1212.65 1040.56,1214.1 1041.15,1213.94 1041.73,1213.56 1042.32,1213.33 1042.91,1214.33 1043.49,1215.82 1044.08,1217.06 1044.67,1215.3 1045.25,1213.87 1045.84,1211.92 1046.43,1214.86 1047.01,1216.41 1047.6,1217.97 1048.19,1217.63 1048.77,1212.94 1049.36,1212.69 1049.94,1210.92 1050.53,1210.93 1051.12,1210.79 1051.7,1209.77 1052.29,1208.18 1052.88,1210.2 1053.46,1210.31 1054.05,1209.08 1054.64,1210.69 1055.22,1207.58 1055.81,1212.12 1056.39,1214.69 1056.98,1214.3 1057.57,1212.58 1058.15,1214.15 1058.74,1217.07 1059.33,1216.73 1059.91,1218.14 1060.5,1214.85 1061.09,1214.55 1061.67,1214.36 1062.26,1215.64 1062.85,1212.49 1063.43,1212.78 1064.02,1211.39 1064.6,1209.82 1065.19,1208.57 1065.78,1208.78 1066.36,1210.56 1066.95,1207.87 1067.54,1211.15 1068.12,1209.81 1068.71,1211.44 1069.3,1211.52 1069.88,1208.8 1070.47,1210.5 1071.06,1213.84 1071.64,1214.04 1072.23,1215.29 1072.81,1215.04 1073.4,1214.75 1073.99,1214.5 1074.57,1217.24 1075.16,1218.16 1075.75,1219.34 1076.33,1217.55 1076.92,1217.05 1077.51,1215.25 1078.09,1217.94 1078.68,1217.71 1079.26,1217.43 1079.85,1215.78 1080.44,1211.09 1081.02,1209.93 1081.61,1209.98 1082.2,1206.83 1082.78,1208.62 1083.37,1208.94 1083.96,1209.07 1084.54,1206.41 1085.13,1206.63 1085.72,1208.51 1086.3,1207.35 1086.89,1206.28 1087.47,1205.38 1088.06,1206.92 1088.65,1207.27 1089.23,1206.4 1089.82,1211 1090.41,1211.09 1090.99,1211.2 1091.58,1211.21 1092.17,1214.14 1092.75,1213.77 1093.34,1213.98 1093.93,1216.88 1094.51,1216.82 1095.1,1217.97 1095.68,1217.83 1096.27,1217.58 1096.86,1215.9 1097.44,1215.82 1098.03,1217.14 1098.62,1212.78 1099.2,1209.6 1099.79,1209.84 1100.38,1210.09 1100.96,1205.74 1101.55,1204.72 1102.14,1204.98 1102.72,1205.3 1103.31,1210.29 1103.89,1209.1 1104.48,1206.13 1105.07,1207.86 1105.65,1210.92 1106.24,1211.26 1106.83,1209.77 1107.41,1211.26 1108,1212.78 1108.59,1211.47 1109.17,1213.1 1109.76,1212.79 1110.34,1212.82 1110.93,1209.63 1111.52,1212.76 1112.1,1211.11 1112.69,1212.43 1113.28,1212.27 1113.86,1214.93 1114.45,1217.13 1115.04,1216.54 1115.62,1219.06 1116.21,1217.27 1116.8,1218.65 1117.38,1218.27 1117.97,1219.26 1118.55,1217.28 1119.14,1221.38 1119.73,1219.59 1120.31,1217.59 1120.9,1216 1121.49,1214.17 1122.07,1214.16 1122.66,1211.02 1123.25,1213.9 1123.83,1215.27 1124.42,1214.89 1125.01,1216.03 1125.59,1216.78 1126.18,1213.31 1126.76,1213.19 1127.35,1213.28 1127.94,1211.55 1128.52,1213.19 1129.11,1213.36 1129.7,1211.97 1130.28,1211.99 1130.87,1209.06 1131.46,1209.3 1132.04,1212.94 1132.63,1212.79 1133.21,1209.82 1133.8,1210.06 1134.39,1210.29 1134.97,1211.73 1135.56,1213.18 1136.15,1214.64 1136.73,1213.17 1137.32,1213.46 1137.91,1215.18 1138.49,1216.43 1139.08,1217.56 1139.67,1216.99 1140.25,1215.07 1140.84,1219.16 1141.42,1216.01 1142.01,1218.76 1142.6,1218.39 1143.18,1222.38 1143.77,1221.72 1144.36,1219.58 1144.94,1223.61 1145.53,1219.9 1146.12,1218.42 1146.7,1219.6 1147.29,1217.72 1147.88,1216.06 1148.46,1215.68 1149.05,1215.52 1149.63,1215.01 1150.22,1215.39 1150.81,1215.25 1151.39,1215.16 1151.98,1216.61 1152.57,1213.62 1153.15,1216.58 1153.74,1217.92 1154.33,1216.28 1154.91,1210.16 1155.5,1210.31 1156.09,1207.55 1156.67,1204.94 1157.26,1206.76 1157.84,1205.42 1158.43,1207.1 1159.02,1206.1 1159.6,1206.05 1160.19,1206.16 1160.78,1208.07 1161.36,1206.93 1161.95,1205.32 1162.54,1206.96 1163.12,1207 1163.71,1207.01 1164.29,1204.15 1164.88,1204.95 1165.47,1204.23 1166.05,1204.71 1166.64,1203.73 1167.23,1207.09 1167.81,1207.43 1168.4,1206.17 1168.99,1203.18 1169.57,1203.72 1170.16,1204.25 1170.75,1203.22 1171.33,1200.83 1171.92,1202.67 1172.5,1203.34 1173.09,1202.28 1173.68,1202.78 1174.26,1203.24 1174.85,1200.73 1175.44,1198.57 1176.02,1202.27 1176.61,1204.5 1177.2,1203.67 1177.78,1204.18 1178.37,1206 1178.96,1203.45 1179.54,1204.23 1180.13,1204.73 1180.71,1209.53 1181.3,1211.18 1181.89,1214.07 1182.47,1212.62 1183.06,1212.71 1183.65,1214.22 1184.23,1217.6 1184.82,1217.38 1185.41,1216.66 1185.99,1211.64 1186.58,1211.41 1187.16,1211.37 1187.75,1211 1188.34,1209.51 1188.92,1207.74 1189.51,1209.35 1190.1,1206.54 1190.68,1207.2 1191.27,1205.9 1191.86,1209.16 1192.44,1210.86 1193.03,1210.57 1193.62,1207.75 1194.2,1208.06 1194.79,1209.83 1195.37,1212.97 1195.96,1214.29 1196.55,1215.32 1197.13,1214.91 1197.72,1217.55 1198.31,1214.31 1198.89,1212.9 1199.48,1212.77 1200.07,1211.29 1200.65,1208.08 1201.24,1208.46 1201.83,1210.01 1202.41,1210.17 1203,1210.41 1203.58,1213.11 1204.17,1213.1 1204.76,1212.94 1205.34,1211.45 1205.93,1212.76 1206.52,1214.65 1207.1,1213.01 1207.69,1214.22 1208.28,1215.32 1208.86,1214.94 1209.45,1213.52 1210.03,1211.98 1210.62,1210.23 1211.21,1210.56 1211.79,1212.06 1212.38,1218.04 1212.97,1216.38 1213.55,1216.02 1214.14,1213.01 1214.73,1217.53 1215.31,1215.84 1215.9,1214.24 1216.49,1217.07 1217.07,1216.71 1217.66,1216.86 1218.24,1218.06 1218.83,1216.39 1219.42,1216.39 1220,1214.71 1220.59,1218.78 1221.18,1218.09 1221.76,1215.02 1222.35,1213.3 1222.94,1214.67 1223.52,1212.77 1224.11,1210.85 1224.7,1212.52 1225.28,1212.38 1225.87,1211.07 1226.45,1210.88 1227.04,1208.01 1227.63,1209.87 1228.21,1207.08 1228.8,1205.97 1229.39,1207.84 1229.97,1206.61 1230.56,1205.2 1231.15,1208.27 1231.73,1213 1232.32,1215.92 1232.91,1212.94 1233.49,1214.45 1234.08,1212.76 1234.66,1214.18 1235.25,1215.58 1235.84,1215.38 1236.42,1213.71 1237.01,1212.34 1237.6,1216.69 1238.18,1216.37 1238.77,1216.11 1239.36,1218.62 1239.94,1219.88 1240.53,1222.32 1241.11,1220.14 1241.7,1218.64 1242.29,1221.56 1242.87,1218.07 1243.46,1214.89 1244.05,1214.79 1244.63,1216.08 1245.22,1214.28 1245.81,1217.36 1246.39,1219.66 1246.98,1217.67 1247.57,1216.13 1248.15,1215.92 1248.74,1214.23 1249.32,1212.69 1249.91,1209.62 1250.5,1211.13 1251.08,1211.02 1251.67,1211.01 1252.26,1207.88 1252.84,1206.35 1253.43,1208.08 1254.02,1209.48 1254.6,1209.7 1255.19,1208.32 1255.78,1211.47 1256.36,1210.05 1256.95,1206.95 1257.53,1205.82 1258.12,1204.73 1258.71,1204.95 1259.29,1200.87 1259.88,1202.97 1260.47,1201.94 1261.05,1202.56 1261.64,1204.37 1262.23,1204.85 1262.81,1203.58 1263.4,1203.95 1263.98,1206.21 1264.57,1205.04 1265.16,1206.91 1265.74,1208.7 1266.33,1207.5 1266.92,1206.19 1267.5,1206.68 1268.09,1207 1268.68,1205.91 1269.26,1206.59 1269.85,1208.6 1270.44,1208.47 1271.02,1210.19 1271.61,1208.86 1272.19,1210.62 1272.78,1212.32 1273.37,1210.95 1273.95,1209.72 1274.54,1208.75 1275.13,1209.12 1275.71,1206.19 1276.3,1206.28 1276.89,1206.89 1277.47,1207.22 1278.06,1208.88 1278.65,1207.44 1279.23,1206.23 1279.82,1208.18 1280.4,1208.2 1280.99,1208.41 1281.58,1210.41 1282.16,1210.82 1282.75,1212.16 1283.34,1213.59 1283.92,1213.34 1284.51,1213.15 1285.1,1211.75 1285.68,1209.06 1286.27,1209.74 1286.86,1208.25 1287.44,1210.08 1288.03,1213.14 1288.61,1213.23 1289.2,1214.72 1289.79,1215.88 1290.37,1212.81 1290.96,1211.17 1291.55,1211.34 1292.13,1212.82 1292.72,1211.29 1293.31,1211.64 1293.89,1213.09 1294.48,1213.35 1295.06,1213.34 1295.65,1213.51 1296.24,1213.41 1296.82,1212.23 1297.41,1212.08 1298,1216.56 1298.58,1215.04 1299.17,1216.65 1299.76,1213.83 1300.34,1216.78 1300.93,1214.92 1301.52,1217.93 1302.1,1217.5 1302.69,1217.19 1303.27,1216.94 1303.86,1215.36 1304.45,1215.05 1305.03,1212.07 1305.62,1212.42 1306.21,1216.39 1306.79,1214.56 1307.38,1217.24 1307.97,1215.28 1308.55,1216.7 1309.14,1216.42 1309.73,1213.25 1310.31,1213.08 1310.9,1215.66 1311.48,1215.35 1312.07,1219.66 1312.66,1220.5 1313.24,1215.48 1313.83,1212.23 1314.42,1210.6 1315,1213.44 1315.59,1211.97 1316.18,1211.88 1316.76,1211.61 1317.35,1213.1 1317.93,1214.55 1318.52,1210.02 1319.11,1207.52 1319.69,1209.12 1320.28,1209.38 1320.87,1209.11 1321.45,1209.3 1322.04,1210.94 1322.63,1213.9 1323.21,1210.78 1323.8,1212.29 1324.39,1213.69 1324.97,1213.78 1325.56,1213.72 1326.14,1215.1 1326.73,1214.84 1327.32,1214.51 1327.9,1214.6 1328.49,1214.36 1329.08,1214.27 1329.66,1214.06 1330.25,1209.33 1330.84,1210.99 1331.42,1209.46 1332.01,1210.79 1332.6,1212.41 1333.18,1210.99 1333.77,1212.02 1334.35,1211.82 1334.94,1207.53 1335.53,1207.95 1336.11,1208.21 1336.7,1208.69 1337.29,1210.54 1337.87,1210.6 1338.46,1213.84 1339.05,1217.97 1339.63,1216.43 1340.22,1214.62 1340.8,1214.15 1341.39,1215.47 1341.98,1219.69 1342.56,1219.23 1343.15,1221.6 1343.74,1218.15 1344.32,1216.39 1344.91,1214.72 1345.5,1213.02 1346.08,1211.52 1346.67,1210.45 1347.26,1213.51 1347.84,1213.54 1348.43,1213.5 1349.01,1212.2 1349.6,1210.42 1350.19,1213.47 1350.77,1212.09 1351.36,1214.98 1351.95,1220.63 1352.53,1220.49 1353.12,1221.82 1353.71,1220.02 1354.29,1219.5 1354.88,1216.01 1355.47,1217.35 1356.05,1219.57 1356.64,1213.42 1357.22,1217.62 1357.81,1222.07 1358.4,1223.01 1358.98,1223.57 1359.57,1225.65 1360.16,1225.31 1360.74,1224.48 1361.33,1223.69 1361.92,1223.5 1362.5,1218.45 1363.09,1218.15 1363.68,1222.08 1364.26,1221.69 1364.85,1218.04 1365.43,1217.86 1366.02,1220.35 1366.61,1221.28 1367.19,1220.58 1367.78,1218.63 1368.37,1217.94 1368.95,1219.05 1369.54,1217.12 1370.13,1215.18 1370.71,1218.25 1371.3,1214.91 1371.88,1213.59 1372.47,1210.53 1373.06,1209 1373.64,1209.06 1374.23,1209.06 1374.82,1209.23 1375.4,1209.31 1375.99,1211.12 1376.58,1212.73 1377.16,1212.72 1377.75,1211.3 1378.34,1211.42 1378.92,1214.48 1379.51,1214.34 1380.09,1213.98 1380.68,1209.42 1381.27,1210.95 1381.85,1209.9 1382.44,1207.1 1383.03,1207.08 1383.61,1205.8 1384.2,1205.98 1384.79,1204.9 1385.37,1204.99 1385.96,1200.95 1386.55,1201.47 1387.13,1202.1 1387.72,1200.72 1388.3,1199.6 1388.89,1200.4 1389.48,1202.46 1390.06,1204.57 1390.65,1203.27 1391.24,1205.25 1391.82,1202.8 1392.41,1203.47 1393,1202.43 1393.58,1202.96 1394.17,1201.86 1394.75,1206.83 1395.34,1205.48 1395.93,1204.47 1396.51,1206.41 1397.1,1209.62 1397.69,1206.93 1398.27,1207.31 1398.86,1207.15 1399.45,1209.03 1400.03,1210.64 1400.62,1210.73 1401.21,1209.52 1401.79,1209.72 1402.38,1209.52 1402.96,1209.65 1403.55,1209.76 1404.14,1211.21 1404.72,1208.77 1405.31,1213.54 1405.9,1212.08 1406.48,1209.2 1407.07,1209.36 1407.66,1211.03 1408.24,1215.4 1408.83,1216.99 1409.42,1213.59 1410,1216.25 1410.59,1214.85 1411.17,1215.01 1411.76,1216.4 1412.35,1217.77 1412.93,1219.03 1413.52,1216.84 1414.11,1215.69 1414.69,1215.59 1415.28,1213.91 1415.87,1215.35 1416.45,1214.03 1417.04,1215.47 1417.63,1213.44 1418.21,1211.83 1418.8,1211.99 1419.38,1213.61 1419.97,1213.53 1420.56,1213.4 1421.14,1214.69 1421.73,1217.68 1422.32,1217.15 1422.9,1211.27 1423.49,1210.04 1424.08,1208.67 1424.66,1208.66 1425.25,1211.73 1425.83,1210.15 1426.42,1208.8 1427.01,1208.84 1427.59,1208.97 1428.18,1209.34 1428.77,1209.09 1429.35,1207.65 1429.94,1209.47 1430.53,1215.4 1431.11,1218.25 1431.7,1217.56 1432.29,1216.77 1432.87,1214.87 1433.46,1214.8 1434.04,1214.37 1434.63,1213.01 1435.22,1213.04 1435.8,1211.32 1436.39,1206.89 1436.98,1208.66 1437.56,1210.24 1438.15,1209.13 1438.74,1214.9 1439.32,1213.23 1439.91,1213.27 1440.5,1212.82 1441.08,1212.84 1441.67,1211.42 1442.25,1214.52 1442.84,1213.17 1443.43,1212.94 1444.01,1214.02 1444.6,1214.18 1445.19,1212.55 1445.77,1212.31 1446.36,1212.39 1446.95,1212.43 1447.53,1213.57 1448.12,1215.49 1448.7,1215.51 1449.29,1212.16 1449.88,1207.85 1450.46,1208.02 1451.05,1206.77 1451.64,1211.32 1452.22,1208.42 1452.81,1205.46 1453.4,1205.7 1453.98,1204.51 1454.57,1203.57 1455.16,1204.23 1455.74,1210.63 1456.33,1213.82 1456.91,1216.61 1457.5,1214.87 1458.09,1217.65 1458.67,1221.52 1459.26,1222.45 1459.85,1223.13 1460.43,1220.66 1461.02,1218.74 1461.61,1217.17 1462.19,1215.44 1462.78,1215.19 1463.37,1216.36 1463.95,1214.86 1464.54,1217.75 1465.12,1216.09 1465.71,1214.07 1466.3,1216.9 1466.88,1218.14 1467.47,1216.24 1468.06,1215.81 1468.64,1212.65 1469.23,1212.71 1469.82,1212.71 1470.4,1212.6 1470.99,1213.76 1471.57,1215.05 1472.16,1216.26 1472.75,1217.39 1473.33,1218.51 1473.92,1218.03 1474.51,1213 1475.09,1214.42 1475.68,1214.18 1476.27,1211.6 1476.85,1211.45 1477.44,1211.48 1478.03,1205.56 1478.61,1204.59 1479.2,1204.79 1479.78,1206.78 1480.37,1208.57 1480.96,1207.09 1481.54,1210.15 1482.13,1207.61 1482.72,1206.22 1483.3,1205.21 1483.89,1204.17 1484.48,1201.47 1485.06,1201.84 1485.65,1201.25 1486.24,1201.73 1486.82,1200.6 1487.41,1201.31 1487.99,1200.55 1488.58,1201.75 1489.17,1198.82 1489.75,1199.85 1490.34,1203.39 1490.93,1205.54 1491.51,1207.63 1492.1,1207.7 1492.69,1206.71 1493.27,1206.69 1493.86,1208.36 1494.45,1208.76 1495.03,1208.86 1495.62,1207.57 1496.2,1207.84 1496.79,1209.47 1497.38,1208.06 1497.96,1209.85 1498.55,1207.02 1499.14,1208.83 1499.72,1205.69 1500.31,1207.68 1500.9,1206.24 1501.48,1205.05 1502.07,1208.38 1502.65,1208.59 1503.24,1209.05 1503.83,1210.82 1504.41,1207.82 1505,1205.28 1505.59,1203.97 1506.17,1207.49 1506.76,1207.44 1507.35,1209.17 1507.93,1210.65 1508.52,1210.79 1509.11,1209.39 1509.69,1209.4 1510.28,1212.29 1510.86,1212.28 1511.45,1210.87 1512.04,1213.93 1512.62,1212.21 1513.21,1213.87 1513.8,1215.4 1514.38,1215.42 1514.97,1216.68 1515.56,1214.9 1516.14,1216.68 1516.73,1216.63 1517.32,1215.34 1517.9,1215.06 1518.49,1211.9 1519.07,1211.78 1519.66,1211.63 1520.25,1211.68 1520.83,1212.11 1521.42,1210.73 1522.01,1209.08 1522.59,1209.57 1523.18,1208.49 1523.77,1207.42 1524.35,1207.55 1524.94,1209.17 1525.52,1212.34 1526.11,1209 1526.7,1210.86 1527.28,1210.97 1527.87,1208.49 1528.46,1208.88 1529.04,1212.01 1529.63,1213.43 1530.22,1213.34 1530.8,1216.61 1531.39,1214.8 1531.98,1217.76 1532.56,1217.57 1533.15,1215.96 1533.73,1214.46 1534.32,1212.93 1534.91,1214.12 1535.49,1215.39 1536.08,1216.67 1536.67,1216.37 1537.25,1214.43 1537.84,1215.29 1538.43,1216.57 1539.01,1216.69 1539.6,1216.49 1540.19,1217.54 1540.77,1219.02 1541.36,1218.44 1541.94,1220.85 1542.53,1220.21 1543.12,1218.23 1543.7,1216.37 1544.29,1214.95 1544.88,1214.85 1545.46,1217.42 1546.05,1216.93 1546.64,1216.52 1547.22,1207.5 1547.81,1207.52 1548.4,1207.89 1548.98,1209.29 1549.57,1211.02 1550.15,1211.01 1550.74,1213.79 1551.33,1212.23 1551.91,1210.98 1552.5,1211.23 1553.09,1215.81 1553.67,1214.13 1554.26,1214.02 1554.85,1212.48 1555.43,1212.53 1556.02,1211.03 1556.6,1210.89 1557.19,1212.57 1557.78,1212.79 1558.36,1211.1 1558.95,1209.67 1559.54,1209.63 1560.12,1209.82 1560.71,1206.65 1561.3,1205.23 1561.88,1207.24 1562.47,1210.24 1563.06,1208.92 1563.64,1209.2 1564.23,1209.05 1564.81,1212.08 1565.4,1213.47 1565.99,1217.8 1566.57,1214.62 1567.16,1212.78 1567.75,1213.01 1568.33,1211.58 1568.92,1211.37 1569.51,1211.45 1570.09,1215.7 1570.68,1217.23 1571.27,1218.33 1571.85,1220.86 1572.44,1220.24 1573.02,1218.7 1573.61,1213.74 1574.2,1215.27 1574.78,1213.36 1575.37,1213.06 1575.96,1214.67 1576.54,1213.02 1577.13,1211.61 1577.72,1209.95 1578.3,1211.35 1578.89,1213.02 1579.47,1212.95 1580.06,1211.1 1580.65,1209.52 1581.23,1209.62 1581.82,1215.57 1582.41,1217.1 1582.99,1216.9 1583.58,1220.92 1584.17,1221.66 1584.75,1219.47 1585.34,1220.37 1585.93,1219.77 1586.51,1220.42 1587.1,1217.17 1587.68,1218.15 1588.27,1217.74 1588.86,1219.07 1589.44,1218.57 1590.03,1219.85 1590.62,1219.63 1591.2,1219.29 1591.79,1215.91 1592.38,1215.68 1592.96,1216.81 1593.55,1213.65 1594.14,1213.54 1594.72,1213.37 1595.31,1213.43 1595.89,1212.08 1596.48,1210.3 1597.07,1208.86 1597.65,1207.35 1598.24,1209.13 1598.83,1209.26 1599.41,1209.12 1600,1211 1600.59,1212.28 1601.17,1209.32 1601.76,1209.31 1602.34,1209.35 1602.93,1211.11 1603.52,1206.85 1604.1,1206.97 1604.69,1204.23 1605.28,1203.18 1605.86,1203.84 1606.45,1204.67 1607.04,1204.49 1607.62,1203.23 1608.21,1204.86 1608.8,1205.07 1609.38,1205.4 1609.97,1205.89 1610.55,1206.16 1611.14,1206.74 1611.73,1205.75 1612.31,1209.23 1612.9,1208.1 1613.49,1206.52 1614.07,1206.9 1614.66,1207.26 1615.25,1209.29 1615.83,1211.17 1616.42,1214.55 1617.01,1214.4 1617.59,1213.8 1618.18,1213.67 1618.76,1212.24 1619.35,1212.41 1619.94,1212.26 1620.52,1210.89 1621.11,1212.73 1621.7,1212.51 1622.28,1212.68 1622.87,1211.13 1623.46,1214.14 1624.04,1212.16 1624.63,1209.28 1625.22,1206.51 1625.8,1208.09 1626.39,1206.88 1626.97,1208.56 1627.56,1207.52 1628.15,1207.86 1628.73,1209.76 1629.32,1211.38 1629.91,1213.21 1630.49,1210.08 1631.08,1210.37 1631.67,1209.09 1632.25,1213.6 1632.84,1214 1633.42,1211.01 1634.01,1209.42 1634.6,1206.48 1635.18,1206.77 1635.77,1204.35 1636.36,1203.53 1636.94,1204.28 1637.53,1201.82 1638.12,1202.45 1638.7,1204.6 1639.29,1201.99 1639.88,1205.25 1640.46,1203.9 1641.05,1202.98 1641.63,1201.86 1642.22,1202.11 1642.81,1204.01 1643.39,1207.37 1643.98,1205.89 1644.57,1204.74 1645.15,1205.08 1645.74,1205.41 1646.33,1205.73 1646.91,1205.1 1647.5,1206.53 1648.09,1208.37 1648.67,1209.96 1649.26,1209.99 1649.84,1207.23 1650.43,1209.02 1651.02,1209.24 1651.6,1213.61 1652.19,1213.5 1652.78,1214.97 1653.36,1212.2 1653.95,1213.5 1654.54,1213.55 1655.12,1214.94 1655.71,1216.48 1656.29,1214.98 1656.88,1214.84 1657.47,1213.31 1658.05,1213.28 1658.64,1214.76 1659.23,1216.21 1659.81,1214.4 1660.4,1215.78 1660.99,1213.7 1661.57,1213.5 1662.16,1213.77 1662.75,1212.54 1663.33,1211.11 1663.92,1211.21 1664.5,1211.38 1665.09,1209.86 1665.68,1211.55 1666.26,1211.9 1666.85,1213.1 1667.44,1214.58 1668.02,1216.04 1668.61,1215.66 1669.2,1214.05 1669.78,1213.63 1670.37,1211.65 1670.96,1211.76 1671.54,1211.48 1672.13,1211.39 1672.71,1211.77 1673.3,1211.8 1673.89,1211.94 1674.47,1212.08 1675.06,1213.83 1675.65,1209.52 1676.23,1209.83 1676.82,1208.57 1677.41,1208.94 1677.99,1211.98 1678.58,1214.79 1679.17,1215.77 1679.75,1217.24 1680.34,1217.17 1680.92,1215.44 1681.51,1213.6 1682.1,1215.23 1682.68,1213.94 1683.27,1213.57 1683.86,1214.5 1684.44,1215.62 1685.03,1212.58 1685.62,1212.66 1686.2,1215.68 1686.79,1213.85 1687.37,1219.73 1687.96,1217.71 1688.55,1215.94 1689.13,1215.68 1689.72,1218.42 1690.31,1216.53 1690.89,1215.91 1691.48,1215.74 1692.07,1217.14 1692.65,1215.3 1693.24,1213.53 1693.83,1212.34 1694.41,1213.53 1695,1215.27 1695.58,1216.5 1696.17,1214.7 1696.76,1215.98 1697.34,1215.52 1697.93,1215.02 1698.52,1214.61 1699.1,1211.36 1699.69,1210.98 1700.28,1211.19 1700.86,1209.66 1701.45,1211.37 1702.04,1211.51 1702.62,1211.47 1703.21,1215.77 1703.79,1214.19 1704.38,1215.65 1704.97,1215.36 1705.55,1215.32 1706.14,1215.31 1706.73,1210.66 1707.31,1209.38 1707.9,1212.39 1708.49,1214.02 1709.07,1212.75 1709.66,1209.66 1710.24,1209.86 1710.83,1207.36 1711.42,1210.59 1712,1209.14 1712.59,1211.85 1713.18,1210.32 1713.76,1207.36 1714.35,1211.62 1714.94,1213.12 1715.52,1212.87 1716.11,1211.41 1716.7,1208.28 1717.28,1209.69 1717.87,1209.73 1718.45,1209.77 1719.04,1214.09 1719.63,1214.11 1720.21,1215.82 1720.8,1213.92 1721.39,1212.54 1721.97,1214.36 1722.56,1217.12 1723.15,1215.36 1723.73,1216.74 1724.32,1216.48 1724.91,1213.2 1725.49,1214.76 1726.08,1214.95 1726.66,1215.11 1727.25,1216.27 1727.84,1214.5 1728.42,1214.88 1729.01,1215.98 1729.6,1215.76 1730.18,1216.88 1730.77,1215.48 1731.36,1215.3 1731.94,1212.22 1732.53,1215.17 1733.11,1217.97 1733.7,1219.22 1734.29,1218.81 1734.87,1216.91 1735.46,1216.78 1736.05,1217.8 1736.63,1217.33 1737.22,1217.21 1737.81,1215.26 1738.39,1213.62 1738.98,1210.68 1739.57,1207.76 1740.15,1212.47 1740.74,1210.98 1741.32,1212.5 1741.91,1212.19 1742.5,1211.07 1743.08,1208.27 1743.67,1209.9 1744.26,1209.69 1744.84,1210.06 1745.43,1210.23 1746.02,1208.74 1746.6,1207.52 1747.19,1204.85 1747.78,1203.96 1748.36,1204.75 1748.95,1206.7 1749.53,1205.51 1750.12,1207.15 1750.71,1206.17 1751.29,1206.35 1751.88,1206.67 1752.47,1208.17 1753.05,1206.79 1753.64,1206.95 1754.23,1208.36 1754.81,1210.09 1755.4,1208.57 1755.99,1207.24 1756.57,1214.86 1757.16,1216.07 1757.74,1214.35 1758.33,1215.77 1758.92,1215.36 1759.5,1215.23 1760.09,1213.59 1760.68,1213.87 1761.26,1212.17 1761.85,1214.79 1762.44,1216.33 1763.02,1215.84 1763.61,1218.73 1764.19,1220.26 1764.78,1216.71 1765.37,1214.8 1765.95,1217.55 1766.54,1217.19 1767.13,1216.69 1767.71,1220.69 1768.3,1220.29 1768.89,1218.78 1769.47,1218.46 1770.06,1218.04 1770.65,1217.37 1771.23,1221.34 1771.82,1220.67 1772.4,1220.31 1772.99,1218.53 1773.58,1219.63 1774.16,1218.94 1774.75,1218.69 1775.34,1218.3 1775.92,1220.43 1776.51,1220.92 1777.1,1223.35 1777.68,1222.95 1778.27,1220.72 1778.86,1221.49 1779.44,1219.77 1780.03,1219.38 1780.61,1217.41 1781.2,1216.91 1781.79,1215.12 1782.37,1213.07 1782.96,1213 1783.55,1208.53 1784.13,1207.2 1784.72,1203.01 1785.31,1203.39 1785.89,1204.33 1786.48,1201.63 1787.06,1199.27 1787.65,1204.55 1788.24,1206.78 1788.82,1208.28 1789.41,1211.52 1790,1210.08 1790.58,1211.57 1791.17,1209.75 1791.76,1212.96 1792.34,1214.54 1792.93,1214.39 1793.52,1208.16 1794.1,1208.33 1794.69,1208.63 1795.27,1207.17 1795.86,1206.15 1796.45,1207.92 1797.03,1206.7 1797.62,1206.73 1798.21,1208.57 1798.79,1208.54 1799.38,1207.18 1799.97,1207.35 1800.55,1210.32 1801.14,1210.39 1801.73,1213.29 1802.31,1211.77 1802.9,1211.69 1803.48,1213.14 1804.07,1211.76 1804.66,1213.27 1805.24,1213.29 1805.83,1211.69 1806.42,1213.51 1807,1217.79 1807.59,1222.05 1808.18,1221.68 1808.76,1219.46 1809.35,1219 1809.94,1220.39 1810.52,1218.5 1811.11,1217.79 1811.69,1220.12 1812.28,1218.21 1812.87,1219.18 1813.45,1218.81 1814.04,1221.37 1814.63,1223.59 1815.21,1224.41 1815.8,1222.22 1816.39,1221.51 1816.97,1219.46 1817.56,1216.04 1818.14,1210.33 1818.73,1211.92 1819.32,1208.99 1819.9,1207.73 1820.49,1206.16 1821.08,1206.54 1821.66,1208.69 1822.25,1204.28 1822.84,1205.91 1823.42,1201.69 1824.01,1201.93 1824.6,1203.62 1825.18,1202.2 1825.77,1203.05 1826.35,1202.16 1826.94,1203.11 1827.53,1202.16 1828.11,1203.09 1828.7,1205.09 1829.29,1205.28 1829.87,1207.22 1830.46,1204.52 1831.05,1205.01 1831.63,1205.2 1832.22,1207.18 1832.81,1208.67 1833.39,1211.64 1833.98,1214.94 1834.56,1212.01 1835.15,1210.52 1835.74,1209.21 1836.32,1207.98 1836.91,1209.72 1837.5,1211.46 1838.08,1209.89 1838.67,1210.11 1839.26,1210.32 1839.84,1210.37 1840.43,1207.2 1841.01,1207.36 1841.6,1209.24 1842.19,1209.44 1842.77,1209.68 1843.36,1211.12 1843.95,1211.34 1844.53,1209.91 1845.12,1208.5 1845.71,1208.58 1846.29,1207.69 1846.88,1207.97 1847.47,1206.98 1848.05,1207.46 1848.64,1207.72 1849.22,1208.15 1849.81,1206.87 1850.4,1207.21 1850.98,1207.5 1851.57,1207.68 1852.16,1206.13 1852.74,1203.3 1853.33,1202.36 1853.92,1204.69 1854.5,1205.04 1855.09,1203.51 1855.68,1206.76 1856.26,1205.44 1856.85,1198.94 1857.43,1199.53 1858.02,1203.49 1858.61,1205.31 1859.19,1204.29 1859.78,1210.76 1860.37,1209.5 1860.95,1209.88 1861.54,1209.77 1862.13,1211.55 1862.71,1212.88 1863.3,1214.14 1863.88,1215.29 1864.47,1215.12 1865.06,1215.04 1865.64,1213.25 1866.23,1213.34 1866.82,1214.74 1867.4,1215.92 1867.99,1212.54 1868.58,1212.54 1869.16,1213.9 1869.75,1214.15 1870.34,1211.27 1870.92,1209.86 1871.51,1213.12 1872.09,1212.89 1872.68,1211.26 1873.27,1206.85 1873.85,1206.95 1874.44,1207.21 1875.03,1210.43 1875.61,1212.15 1876.2,1209.34 1876.79,1206.43 1877.37,1206.91 1877.96,1207.81 1878.55,1211.01 1879.13,1213.64 1879.72,1213.93 1880.3,1215.26 1880.89,1216.66 1881.48,1216.57 1882.06,1216.6 1882.65,1216.14 1883.24,1214.53 1883.82,1214.3 1884.41,1212.85 1885,1215.72 1885.58,1215.42 1886.17,1216.4 1886.76,1214.8 1887.34,1214.32 1887.93,1214.4 1888.51,1215.84 1889.1,1214.18 1889.69,1214.23 1890.27,1214.39 1890.86,1215.67 1891.45,1217.05 1892.03,1216.79 1892.62,1219.66 1893.21,1219.15 1893.79,1218.91 1894.38,1220.04 1894.96,1216.77 1895.55,1215.1 1896.14,1214.8 1896.72,1213.37 1897.31,1214.2 1897.9,1212.45 1898.48,1210.93 1899.07,1214.31 1899.66,1217 1900.24,1221.19 1900.83,1222.15 1901.42,1220.27 1902,1221.27 1902.59,1220.9 1903.17,1218.99 1903.76,1220.09 1904.35,1224.2 1904.93,1222.16 1905.52,1222.88 1906.11,1223.65 1906.69,1222.84 1907.28,1218.81 1907.87,1218.8 1908.45,1219.88 1909.04,1221.02 1909.63,1222.02 1910.21,1221.66 1910.8,1219.8 1911.38,1222.26 1911.97,1222.9 1912.56,1220.8 1913.14,1223.57 1913.73,1222.71 1914.32,1225.21 1914.9,1223.01 1915.49,1224.01 1916.08,1221.74 1916.66,1223.99 1917.25,1221.57 1917.83,1219.46 1918.42,1219 1919.01,1219.84 1919.59,1216.28 1920.18,1214.39 1920.77,1214.12 1921.35,1212.53 1921.94,1212.46 1922.53,1212.23 1923.11,1212.05 1923.7,1212.12 1924.29,1210.54 1924.87,1209.14 1925.46,1209 1926.04,1212 1926.63,1213.37 1927.22,1213.17 1927.8,1214.46 1928.39,1215.97 1928.98,1212.34 1929.56,1210.82 1930.15,1213.95 1930.74,1215.2 1931.32,1216.7 1931.91,1216.4 1932.5,1214.73 1933.08,1211.79 1933.67,1211.74 1934.25,1213.17 1934.84,1210.09 1935.43,1207.24 1936.01,1204.34 1936.6,1206.15 1937.19,1206.3 1937.77,1205.03 1938.36,1205.23 1938.95,1205.84 1939.53,1201.47 1940.12,1202.09 1940.71,1205.55 1941.29,1207.6 1941.88,1206.35 1942.46,1207.67 1943.05,1209.38 1943.64,1212.34 1944.22,1212.53 1944.81,1209.73 1945.4,1208.3 1945.98,1205.79 1946.57,1206.49 1947.16,1209.83 1947.74,1208.64 1948.33,1206.02 1948.91,1204.9 1949.5,1202.05 1950.09,1202.61 1950.67,1200.15 1951.26,1203.89 1951.85,1208.75 1952.43,1206.08 1953.02,1206.45 1953.61,1205.3 1954.19,1206.83 1954.78,1205.88 1955.37,1205.77 1955.95,1202.97 1956.54,1205.12 1957.12,1206.62 1957.71,1205.4 1958.3,1207.05 1958.88,1207.57 1959.47,1204.81 1960.06,1205.23 1960.64,1208.54 1961.23,1206.11 1961.82,1206.39 1962.4,1204.2 1962.99,1206.15 1963.58,1209.08 1964.16,1209.37 1964.75,1210.96 1965.33,1214.07 1965.92,1213.52 1966.51,1212.12 1967.09,1213.67 1967.68,1213.67 1968.27,1213.23 1968.85,1211.39 1969.44,1209.98 1970.03,1210.09 1970.61,1212.73 1971.2,1208.29 1971.78,1208.47 1972.37,1208.6 1972.96,1210.05 1973.54,1214.67 1974.13,1214.31 1974.72,1214.14 1975.3,1216.77 1975.89,1215.01 1976.48,1214.84 1977.06,1213.39 1977.65,1213.62 1978.24,1214.89 1978.82,1216.27 1979.41,1216.02 1979.99,1217.51 1980.58,1217.56 1981.17,1215.55 1981.75,1212.59 1982.34,1211.15 1982.93,1210.96 1983.51,1211.25 1984.1,1211.32 1984.69,1209.77 1985.27,1208.19 1985.86,1206.93 1986.45,1205.95 1987.03,1207.37 1987.62,1210.53 1988.2,1210.75 1988.79,1210.98 1989.38,1211.26 1989.96,1208.04 1990.55,1207.18 1991.14,1207.53 1991.72,1208.1 1992.31,1206.87 1992.9,1208.56 1993.48,1208.49 1994.07,1210.27 1994.65,1209.11 1995.24,1209.51 1995.83,1209.74 1996.41,1205.41 1997,1205.89 1997.59,1207.98 1998.17,1206.75 1998.76,1210.1 1999.35,1208.75 1999.93,1208.97 2000.52,1212.24 2001.11,1210.99 2001.69,1214.03 2002.28,1214.13 2002.86,1215.2 2003.45,1215 2004.04,1214.77 2004.62,1214.5 2005.21,1214.05 2005.8,1212.41 2006.38,1213.74 2006.97,1218.4 2007.56,1219.32 2008.14,1214.58 2008.73,1214.34 2009.32,1215.4 2009.9,1219.31 2010.49,1219.04 2011.07,1218.72 2011.66,1218.45 2012.25,1215.12 2012.83,1213.54 2013.42,1215.24 2014.01,1211.98 2014.59,1216.5 2015.18,1220.52 2015.77,1222.77 2016.35,1219.24 2016.94,1220.31 2017.53,1219.83 2018.11,1218.05 2018.7,1214.61 2019.28,1213.03 2019.87,1214.35 2020.46,1212.93 2021.04,1211.36 2021.63,1211.52 2022.22,1211.77 2022.8,1213.02 2023.39,1211.38 2023.98,1211.45 2024.56,1211.4 2025.15,1211.47 2025.73,1210.1 2026.32,1209.9 2026.91,1210.04 2027.49,1207.21 2028.08,1207.54 2028.67,1208.96 2029.25,1206.17 2029.84,1204.77 2030.43,1205.01 2031.01,1202.19 2031.6,1204.2 2032.19,1206.52 2032.77,1206.91 2033.36,1210.18 2033.94,1208.54 2034.53,1208.96 2035.12,1209.07 2035.7,1208.03 2036.29,1210.03 2036.88,1211.61 2037.46,1211.61 2038.05,1212.89 2038.64,1212.73 2039.22,1212.57 2039.81,1212.35 2040.4,1209.38 2040.98,1210.82 2041.57,1212.49 2042.15,1211 2042.74,1213.98 2043.33,1215.3 2043.91,1216.44 2044.5,1214.81 2045.09,1213.19 2045.67,1211.72 2046.26,1210.47 2046.85,1209.18 2047.43,1207.86 2048.02,1211.12 2048.6,1211.16 2049.19,1209.56 2049.78,1211.07 2050.36,1211.07 2050.95,1208.45 2051.54,1207.08 2052.12,1207.15 2052.71,1206.13 2053.3,1205 2053.88,1207.1 2054.47,1208.77 2055.06,1211.88 2055.64,1212.02 2056.23,1212.13 2056.81,1213.47 2057.4,1211.72 2057.99,1211.95 2058.57,1212.07 2059.16,1215.06 2059.75,1216.16 2060.33,1218.98 2060.92,1218.91 2061.51,1220.08 2062.09,1222.59 2062.68,1224.95 2063.27,1225.93 2063.85,1229.73 2064.44,1230.19 2065.02,1227.96 2065.61,1227.49 2066.2,1225.14 2066.78,1227.35 2067.37,1227.8 2067.96,1225.6 2068.54,1224.96 2069.13,1226.96 2069.72,1224.9 2070.3,1224.1 2070.89,1223.28 2071.48,1223.14 2072.06,1223.56 2072.65,1224.11 2073.23,1221.65 2073.82,1217.99 2074.41,1219.4 2074.99,1220.12 2075.58,1218.31 2076.17,1214.97 2076.75,1213.25 2077.34,1214.46 2077.93,1215.91 2078.51,1211.44 2079.1,1209.81 2079.68,1208.47 2080.27,1211.27 2080.86,1212.87 2081.44,1212.79 2082.03,1211.38 2082.62,1208.28 2083.2,1211.42 2083.79,1214.41 2084.38,1214.31 2084.96,1212.69 2085.55,1212.32 2086.14,1212.5 2086.72,1210.83 2087.31,1209.46 2087.89,1208.44 2088.48,1211.34 2089.07,1211.43 2089.65,1210.2 2090.24,1208.83 2090.83,1207.3 2091.41,1207.5 2092,1210.45 2092.59,1212.18 2093.17,1212.45 2093.76,1212.63 2094.35,1211.11 2094.93,1214.43 2095.52,1214.09 2096.1,1214.04 2096.69,1212.55 2097.28,1211.08 2097.86,1210.75 2098.45,1212.27 2099.04,1212.15 2099.62,1210.81 2100.21,1209.56 2100.8,1208.27 2101.38,1208.42 2101.97,1212.85 2102.55,1211.07 2103.14,1211.33 2103.73,1209.67 2104.31,1210.96 2104.9,1212.99 2105.49,1212.58 2106.07,1215.35 2106.66,1213.94 2107.25,1213.82 2107.83,1208.9 2108.42,1211.88 2109.01,1211.79 2109.59,1211.94 2110.18,1211.87 2110.76,1213.45 2111.35,1216.19 2111.94,1218.96 2112.52,1217.14 2113.11,1219.89 2113.7,1219.43 2114.28,1213.15 2114.87,1213.16 2115.46,1215.88 2116.04,1214.29 2116.63,1214 2117.22,1212.11 2117.8,1211.96 2118.39,1212.07 2118.97,1209.21 2119.56,1206.55 2120.15,1208.32 2120.73,1209.95 2121.32,1212.98 2121.91,1212.77 2122.49,1208.15 2123.08,1208.21 2123.67,1208.42 2124.25,1206.95 2124.84,1204.31 2125.42,1204.95 2126.01,1205.18 2126.6,1205.57 2127.18,1205.52 2127.77,1207.33 2128.36,1206.06 2128.94,1204.93 2129.53,1206.85 2130.12,1207.08 2130.7,1207.22 2131.29,1208.62 2131.88,1204.54 2132.46,1207.69 2133.05,1204.98 2133.63,1206.91 2134.22,1208.73 2134.81,1204.27 2135.39,1203.23 2135.98,1203.84 2136.57,1202.6 2137.15,1203.22 2137.74,1202.27 2138.33,1204.29 2138.91,1209.21 2139.5,1209.29 2140.09,1211.13 2140.67,1208.05 2141.26,1209.71 2141.84,1211.42 2142.43,1211.23 2143.02,1211.31 2143.6,1203.87 2144.19,1204.18 2144.78,1203.27 2145.36,1207.01 2145.95,1208.71 2146.54,1208.89 2147.12,1210.52 2147.71,1212.06 2148.3,1216.41 2148.88,1217.56 2149.47,1217.31 2150.05,1217.2 2150.64,1219.93 2151.23,1219.51 2151.81,1217.77 2152.4,1217.84 2152.99,1215.82 2153.57,1209.9 2154.16,1210 2154.75,1207.34 2155.33,1208.12 2155.92,1206.89 2156.5,1207.29 2157.09,1206.44 2157.68,1206.59 2158.26,1205.5 \"/>\n<path clip-path=\"url(#clip422)\" d=\"M986.025 1212.52 L986.612 1212.52 L987.198 1212.52 L987.785 1212.52 L988.371 1212.52 L988.957 1212.52 L989.544 1212.52 L990.13 1212.52 L990.717 1212.52 L991.303 1212.52 L991.889 1212.52 L992.476 1212.52 L993.062 1212.52 L993.649 1212.52 L994.235 1212.52 L994.822 1212.52 L995.408 1212.52 L995.994 1212.52 L996.581 1212.52 L997.167 1212.52 L997.754 1212.52 L998.34 1212.52 L998.926 1212.52 L999.513 1212.52 L1000.1 1212.52 L1000.69 1212.52 L1001.27 1212.52 L1001.86 1212.52 L1002.44 1212.52 L1003.03 1212.52 L1003.62 1212.52 L1004.2 1212.52 L1004.79 1212.52 L1005.38 1212.52 L1005.96 1212.52 L1006.55 1212.52 L1007.14 1212.52 L1007.72 1212.52 L1008.31 1212.52 L1008.9 1212.52 L1009.48 1212.52 L1010.07 1212.52 L1010.65 1212.52 L1011.24 1212.52 L1011.83 1212.52 L1012.41 1212.52 L1013 1212.52 L1013.59 1212.52 L1014.17 1212.52 L1014.76 1212.52 L1015.35 1212.52 L1015.93 1212.52 L1016.52 1212.52 L1017.11 1212.52 L1017.69 1212.52 L1018.28 1212.52 L1018.86 1212.52 L1019.45 1212.52 L1020.04 1212.52 L1020.62 1212.52 L1021.21 1212.52 L1021.8 1212.52 L1022.38 1212.52 L1022.97 1212.52 L1023.56 1212.52 L1024.14 1212.52 L1024.73 1212.52 L1025.32 1212.52 L1025.9 1212.52 L1026.49 1212.52 L1027.07 1212.52 L1027.66 1212.52 L1028.25 1212.52 L1028.83 1212.52 L1029.42 1212.52 L1030.01 1212.52 L1030.59 1212.52 L1031.18 1212.52 L1031.77 1212.52 L1032.35 1212.52 L1032.94 1212.52 L1033.52 1212.52 L1034.11 1212.52 L1034.7 1212.52 L1035.28 1212.52 L1035.87 1212.52 L1036.46 1212.52 L1037.04 1212.52 L1037.63 1212.52 L1038.22 1212.52 L1038.8 1212.52 L1039.39 1212.52 L1039.98 1212.52 L1040.56 1212.52 L1041.15 1212.52 L1041.73 1212.52 L1042.32 1212.52 L1042.91 1212.52 L1043.49 1212.52 L1044.08 1212.52 L1044.67 1212.52 L1045.25 1212.52 L1045.84 1212.52 L1046.43 1212.52 L1047.01 1212.52 L1047.6 1212.52 L1048.19 1212.52 L1048.77 1212.52 L1049.36 1212.52 L1049.94 1212.52 L1050.53 1212.52 L1051.12 1212.52 L1051.7 1212.52 L1052.29 1212.52 L1052.88 1212.52 L1053.46 1212.52 L1054.05 1212.52 L1054.64 1212.52 L1055.22 1212.52 L1055.81 1212.52 L1056.39 1212.52 L1056.98 1212.52 L1057.57 1212.52 L1058.15 1212.52 L1058.74 1212.52 L1059.33 1212.52 L1059.91 1212.52 L1060.5 1212.52 L1061.09 1212.52 L1061.67 1212.52 L1062.26 1212.52 L1062.85 1212.52 L1063.43 1212.52 L1064.02 1212.52 L1064.6 1212.52 L1065.19 1212.52 L1065.78 1212.52 L1066.36 1212.52 L1066.95 1212.52 L1067.54 1212.52 L1068.12 1212.52 L1068.71 1212.52 L1069.3 1212.52 L1069.88 1212.52 L1070.47 1212.52 L1071.06 1212.52 L1071.64 1212.52 L1072.23 1212.52 L1072.81 1212.52 L1073.4 1212.52 L1073.99 1212.52 L1074.57 1212.52 L1075.16 1212.52 L1075.75 1212.52 L1076.33 1212.52 L1076.92 1212.52 L1077.51 1212.52 L1078.09 1212.52 L1078.68 1212.52 L1079.26 1212.52 L1079.85 1212.52 L1080.44 1212.52 L1081.02 1212.52 L1081.61 1212.52 L1082.2 1212.52 L1082.78 1212.52 L1083.37 1212.52 L1083.96 1212.52 L1084.54 1212.52 L1085.13 1212.52 L1085.72 1212.52 L1086.3 1212.52 L1086.89 1212.52 L1087.47 1212.52 L1088.06 1212.52 L1088.65 1212.52 L1089.23 1212.52 L1089.82 1212.52 L1090.41 1212.52 L1090.99 1212.52 L1091.58 1212.52 L1092.17 1212.52 L1092.75 1212.52 L1093.34 1212.52 L1093.93 1212.52 L1094.51 1212.52 L1095.1 1212.52 L1095.68 1212.52 L1096.27 1212.52 L1096.86 1212.52 L1097.44 1212.52 L1098.03 1212.52 L1098.62 1212.52 L1099.2 1212.52 L1099.79 1212.52 L1100.38 1212.52 L1100.96 1212.52 L1101.55 1212.52 L1102.14 1212.52 L1102.72 1212.52 L1103.31 1212.52 L1103.89 1212.52 L1104.48 1212.52 L1105.07 1212.52 L1105.65 1212.52 L1106.24 1212.52 L1106.83 1212.52 L1107.41 1212.52 L1108 1212.52 L1108.59 1212.52 L1109.17 1212.52 L1109.76 1212.52 L1110.34 1212.52 L1110.93 1212.52 L1111.52 1212.52 L1112.1 1212.52 L1112.69 1212.52 L1113.28 1212.52 L1113.86 1212.52 L1114.45 1212.52 L1115.04 1212.52 L1115.62 1212.52 L1116.21 1212.52 L1116.8 1212.52 L1117.38 1212.52 L1117.97 1212.52 L1118.55 1212.52 L1119.14 1212.52 L1119.73 1212.52 L1120.31 1212.52 L1120.9 1212.52 L1121.49 1212.52 L1122.07 1212.52 L1122.66 1212.52 L1123.25 1212.52 L1123.83 1212.52 L1124.42 1212.52 L1125.01 1212.52 L1125.59 1212.52 L1126.18 1212.52 L1126.76 1212.52 L1127.35 1212.52 L1127.94 1212.52 L1128.52 1212.52 L1129.11 1212.52 L1129.7 1212.52 L1130.28 1212.52 L1130.87 1212.52 L1131.46 1212.52 L1132.04 1212.52 L1132.63 1212.52 L1133.21 1212.52 L1133.8 1212.52 L1134.39 1212.52 L1134.97 1212.52 L1135.56 1212.52 L1136.15 1212.52 L1136.73 1212.52 L1137.32 1212.52 L1137.91 1212.52 L1138.49 1212.52 L1139.08 1212.52 L1139.67 1212.52 L1140.25 1212.52 L1140.84 1212.52 L1141.42 1212.52 L1142.01 1212.52 L1142.6 1212.52 L1143.18 1212.52 L1143.77 1212.52 L1144.36 1212.52 L1144.94 1212.52 L1145.53 1212.52 L1146.12 1212.52 L1146.7 1212.52 L1147.29 1212.52 L1147.88 1212.52 L1148.46 1212.52 L1149.05 1212.52 L1149.63 1212.52 L1150.22 1212.52 L1150.81 1212.52 L1151.39 1212.52 L1151.98 1212.52 L1152.57 1212.52 L1153.15 1212.52 L1153.74 1212.52 L1154.33 1212.52 L1154.91 1212.52 L1155.5 1212.52 L1156.09 1212.52 L1156.67 1212.52 L1157.26 1212.52 L1157.84 1212.52 L1158.43 1212.52 L1159.02 1212.52 L1159.6 1212.52 L1160.19 1212.52 L1160.78 1212.52 L1161.36 1212.52 L1161.95 1212.52 L1162.54 1212.52 L1163.12 1212.52 L1163.71 1212.52 L1164.29 1212.52 L1164.88 1212.52 L1165.47 1212.52 L1166.05 1212.52 L1166.64 1212.52 L1167.23 1212.52 L1167.81 1212.52 L1168.4 1212.52 L1168.99 1212.52 L1169.57 1212.52 L1170.16 1212.52 L1170.75 1212.52 L1171.33 1212.52 L1171.92 1212.52 L1172.5 1212.52 L1173.09 1212.52 L1173.68 1212.52 L1174.26 1212.52 L1174.85 1212.52 L1175.44 1212.52 L1176.02 1212.52 L1176.61 1212.52 L1177.2 1212.52 L1177.78 1212.52 L1178.37 1212.52 L1178.96 1212.52 L1179.54 1212.52 L1180.13 1212.52 L1180.71 1212.52 L1181.3 1212.52 L1181.89 1212.52 L1182.47 1212.52 L1183.06 1212.52 L1183.65 1212.52 L1184.23 1212.52 L1184.82 1212.52 L1185.41 1212.52 L1185.99 1212.52 L1186.58 1212.52 L1187.16 1212.52 L1187.75 1212.52 L1188.34 1212.52 L1188.92 1212.52 L1189.51 1212.52 L1190.1 1212.52 L1190.68 1212.52 L1191.27 1212.52 L1191.86 1212.52 L1192.44 1212.52 L1193.03 1212.52 L1193.62 1212.52 L1194.2 1212.52 L1194.79 1212.52 L1195.37 1212.52 L1195.96 1212.52 L1196.55 1212.52 L1197.13 1212.52 L1197.72 1212.52 L1198.31 1212.52 L1198.89 1212.52 L1199.48 1212.52 L1200.07 1212.52 L1200.65 1212.52 L1201.24 1212.52 L1201.83 1212.52 L1202.41 1212.52 L1203 1212.52 L1203.58 1212.52 L1204.17 1212.52 L1204.76 1212.52 L1205.34 1212.52 L1205.93 1212.52 L1206.52 1212.52 L1207.1 1212.52 L1207.69 1212.52 L1208.28 1212.52 L1208.86 1212.52 L1209.45 1212.52 L1210.03 1212.52 L1210.62 1212.52 L1211.21 1212.52 L1211.79 1212.52 L1212.38 1212.52 L1212.97 1212.52 L1213.55 1212.52 L1214.14 1212.52 L1214.73 1212.52 L1215.31 1212.52 L1215.9 1212.52 L1216.49 1212.52 L1217.07 1212.52 L1217.66 1212.52 L1218.24 1212.52 L1218.83 1212.52 L1219.42 1212.52 L1220 1212.52 L1220.59 1212.52 L1221.18 1212.52 L1221.76 1212.52 L1222.35 1212.52 L1222.94 1212.52 L1223.52 1212.52 L1224.11 1212.52 L1224.7 1212.52 L1225.28 1212.52 L1225.87 1212.52 L1226.45 1212.52 L1227.04 1212.52 L1227.63 1212.52 L1228.21 1212.52 L1228.8 1212.52 L1229.39 1212.52 L1229.97 1212.52 L1230.56 1212.52 L1231.15 1212.52 L1231.73 1212.52 L1232.32 1212.52 L1232.91 1212.52 L1233.49 1212.52 L1234.08 1212.52 L1234.66 1212.52 L1235.25 1212.52 L1235.84 1212.52 L1236.42 1212.52 L1237.01 1212.52 L1237.6 1212.52 L1238.18 1212.52 L1238.77 1212.52 L1239.36 1212.52 L1239.94 1212.52 L1240.53 1212.52 L1241.11 1212.52 L1241.7 1212.52 L1242.29 1212.52 L1242.87 1212.52 L1243.46 1212.52 L1244.05 1212.52 L1244.63 1212.52 L1245.22 1212.52 L1245.81 1212.52 L1246.39 1212.52 L1246.98 1212.52 L1247.57 1212.52 L1248.15 1212.52 L1248.74 1212.52 L1249.32 1212.52 L1249.91 1212.52 L1250.5 1212.52 L1251.08 1212.52 L1251.67 1212.52 L1252.26 1212.52 L1252.84 1212.52 L1253.43 1212.52 L1254.02 1212.52 L1254.6 1212.52 L1255.19 1212.52 L1255.78 1212.52 L1256.36 1212.52 L1256.95 1212.52 L1257.53 1212.52 L1258.12 1212.52 L1258.71 1212.52 L1259.29 1212.52 L1259.88 1212.52 L1260.47 1212.52 L1261.05 1212.52 L1261.64 1212.52 L1262.23 1212.52 L1262.81 1212.52 L1263.4 1212.52 L1263.98 1212.52 L1264.57 1212.52 L1265.16 1212.52 L1265.74 1212.52 L1266.33 1212.52 L1266.92 1212.52 L1267.5 1212.52 L1268.09 1212.52 L1268.68 1212.52 L1269.26 1212.52 L1269.85 1212.52 L1270.44 1212.52 L1271.02 1212.52 L1271.61 1212.52 L1272.19 1212.52 L1272.78 1212.52 L1273.37 1212.52 L1273.95 1212.52 L1274.54 1212.52 L1275.13 1212.52 L1275.71 1212.52 L1276.3 1212.52 L1276.89 1212.52 L1277.47 1212.52 L1278.06 1212.52 L1278.65 1212.52 L1279.23 1212.52 L1279.82 1212.52 L1280.4 1212.52 L1280.99 1212.52 L1281.58 1212.52 L1282.16 1212.52 L1282.75 1212.52 L1283.34 1212.52 L1283.92 1212.52 L1284.51 1212.52 L1285.1 1212.52 L1285.68 1212.52 L1286.27 1212.52 L1286.86 1212.52 L1287.44 1212.52 L1288.03 1212.52 L1288.61 1212.52 L1289.2 1212.52 L1289.79 1212.52 L1290.37 1212.52 L1290.96 1212.52 L1291.55 1212.52 L1292.13 1212.52 L1292.72 1212.52 L1293.31 1212.52 L1293.89 1212.52 L1294.48 1212.52 L1295.06 1212.52 L1295.65 1212.52 L1296.24 1212.52 L1296.82 1212.52 L1297.41 1212.52 L1298 1212.52 L1298.58 1212.52 L1299.17 1212.52 L1299.76 1212.52 L1300.34 1212.52 L1300.93 1212.52 L1301.52 1212.52 L1302.1 1212.52 L1302.69 1212.52 L1303.27 1212.52 L1303.86 1212.52 L1304.45 1212.52 L1305.03 1212.52 L1305.62 1212.52 L1306.21 1212.52 L1306.79 1212.52 L1307.38 1212.52 L1307.97 1212.52 L1308.55 1212.52 L1309.14 1212.52 L1309.73 1212.52 L1310.31 1212.52 L1310.9 1212.52 L1311.48 1212.52 L1312.07 1212.52 L1312.66 1212.52 L1313.24 1212.52 L1313.83 1212.52 L1314.42 1212.52 L1315 1212.52 L1315.59 1212.52 L1316.18 1212.52 L1316.76 1212.52 L1317.35 1212.52 L1317.93 1212.52 L1318.52 1212.52 L1319.11 1212.52 L1319.69 1212.52 L1320.28 1212.52 L1320.87 1212.52 L1321.45 1212.52 L1322.04 1212.52 L1322.63 1212.52 L1323.21 1212.52 L1323.8 1212.52 L1324.39 1212.52 L1324.97 1212.52 L1325.56 1212.52 L1326.14 1212.52 L1326.73 1212.52 L1327.32 1212.52 L1327.9 1212.52 L1328.49 1212.52 L1329.08 1212.52 L1329.66 1212.52 L1330.25 1212.52 L1330.84 1212.52 L1331.42 1212.52 L1332.01 1212.52 L1332.6 1212.52 L1333.18 1212.52 L1333.77 1212.52 L1334.35 1212.52 L1334.94 1212.52 L1335.53 1212.52 L1336.11 1212.52 L1336.7 1212.52 L1337.29 1212.52 L1337.87 1212.52 L1338.46 1212.52 L1339.05 1212.52 L1339.63 1212.52 L1340.22 1212.52 L1340.8 1212.52 L1341.39 1212.52 L1341.98 1212.52 L1342.56 1212.52 L1343.15 1212.52 L1343.74 1212.52 L1344.32 1212.52 L1344.91 1212.52 L1345.5 1212.52 L1346.08 1212.52 L1346.67 1212.52 L1347.26 1212.52 L1347.84 1212.52 L1348.43 1212.52 L1349.01 1212.52 L1349.6 1212.52 L1350.19 1212.52 L1350.77 1212.52 L1351.36 1212.52 L1351.95 1212.52 L1352.53 1212.52 L1353.12 1212.52 L1353.71 1212.52 L1354.29 1212.52 L1354.88 1212.52 L1355.47 1212.52 L1356.05 1212.52 L1356.64 1212.52 L1357.22 1212.52 L1357.81 1212.52 L1358.4 1212.52 L1358.98 1212.52 L1359.57 1212.52 L1360.16 1212.52 L1360.74 1212.52 L1361.33 1212.52 L1361.92 1212.52 L1362.5 1212.52 L1363.09 1212.52 L1363.68 1212.52 L1364.26 1212.52 L1364.85 1212.52 L1365.43 1212.52 L1366.02 1212.52 L1366.61 1212.52 L1367.19 1212.52 L1367.78 1212.52 L1368.37 1212.52 L1368.95 1212.52 L1369.54 1212.52 L1370.13 1212.52 L1370.71 1212.52 L1371.3 1212.52 L1371.88 1212.52 L1372.47 1212.52 L1373.06 1212.52 L1373.64 1212.52 L1374.23 1212.52 L1374.82 1212.52 L1375.4 1212.52 L1375.99 1212.52 L1376.58 1212.52 L1377.16 1212.52 L1377.75 1212.52 L1378.34 1212.52 L1378.92 1212.52 L1379.51 1212.52 L1380.09 1212.52 L1380.68 1212.52 L1381.27 1212.52 L1381.85 1212.52 L1382.44 1212.52 L1383.03 1212.52 L1383.61 1212.52 L1384.2 1212.52 L1384.79 1212.52 L1385.37 1212.52 L1385.96 1212.52 L1386.55 1212.52 L1387.13 1212.52 L1387.72 1212.52 L1388.3 1212.52 L1388.89 1212.52 L1389.48 1212.52 L1390.06 1212.52 L1390.65 1212.52 L1391.24 1212.52 L1391.82 1212.52 L1392.41 1212.52 L1393 1212.52 L1393.58 1212.52 L1394.17 1212.52 L1394.75 1212.52 L1395.34 1212.52 L1395.93 1212.52 L1396.51 1212.52 L1397.1 1212.52 L1397.69 1212.52 L1398.27 1212.52 L1398.86 1212.52 L1399.45 1212.52 L1400.03 1212.52 L1400.62 1212.52 L1401.21 1212.52 L1401.79 1212.52 L1402.38 1212.52 L1402.96 1212.52 L1403.55 1212.52 L1404.14 1212.52 L1404.72 1212.52 L1405.31 1212.52 L1405.9 1212.52 L1406.48 1212.52 L1407.07 1212.52 L1407.66 1212.52 L1408.24 1212.52 L1408.83 1212.52 L1409.42 1212.52 L1410 1212.52 L1410.59 1212.52 L1411.17 1212.52 L1411.76 1212.52 L1412.35 1212.52 L1412.93 1212.52 L1413.52 1212.52 L1414.11 1212.52 L1414.69 1212.52 L1415.28 1212.52 L1415.87 1212.52 L1416.45 1212.52 L1417.04 1212.52 L1417.63 1212.52 L1418.21 1212.52 L1418.8 1212.52 L1419.38 1212.52 L1419.97 1212.52 L1420.56 1212.52 L1421.14 1212.52 L1421.73 1212.52 L1422.32 1212.52 L1422.9 1212.52 L1423.49 1212.52 L1424.08 1212.52 L1424.66 1212.52 L1425.25 1212.52 L1425.83 1212.52 L1426.42 1212.52 L1427.01 1212.52 L1427.59 1212.52 L1428.18 1212.52 L1428.77 1212.52 L1429.35 1212.52 L1429.94 1212.52 L1430.53 1212.52 L1431.11 1212.52 L1431.7 1212.52 L1432.29 1212.52 L1432.87 1212.52 L1433.46 1212.52 L1434.04 1212.52 L1434.63 1212.52 L1435.22 1212.52 L1435.8 1212.52 L1436.39 1212.52 L1436.98 1212.52 L1437.56 1212.52 L1438.15 1212.52 L1438.74 1212.52 L1439.32 1212.52 L1439.91 1212.52 L1440.5 1212.52 L1441.08 1212.52 L1441.67 1212.52 L1442.25 1212.52 L1442.84 1212.52 L1443.43 1212.52 L1444.01 1212.52 L1444.6 1212.52 L1445.19 1212.52 L1445.77 1212.52 L1446.36 1212.52 L1446.95 1212.52 L1447.53 1212.52 L1448.12 1212.52 L1448.7 1212.52 L1449.29 1212.52 L1449.88 1212.52 L1450.46 1212.52 L1451.05 1212.52 L1451.64 1212.52 L1452.22 1212.52 L1452.81 1212.52 L1453.4 1212.52 L1453.98 1212.52 L1454.57 1212.52 L1455.16 1212.52 L1455.74 1212.52 L1456.33 1212.52 L1456.91 1212.52 L1457.5 1212.52 L1458.09 1212.52 L1458.67 1212.52 L1459.26 1212.52 L1459.85 1212.52 L1460.43 1212.52 L1461.02 1212.52 L1461.61 1212.52 L1462.19 1212.52 L1462.78 1212.52 L1463.37 1212.52 L1463.95 1212.52 L1464.54 1212.52 L1465.12 1212.52 L1465.71 1212.52 L1466.3 1212.52 L1466.88 1212.52 L1467.47 1212.52 L1468.06 1212.52 L1468.64 1212.52 L1469.23 1212.52 L1469.82 1212.52 L1470.4 1212.52 L1470.99 1212.52 L1471.57 1212.52 L1472.16 1212.52 L1472.75 1212.52 L1473.33 1212.52 L1473.92 1212.52 L1474.51 1212.52 L1475.09 1212.52 L1475.68 1212.52 L1476.27 1212.52 L1476.85 1212.52 L1477.44 1212.52 L1478.03 1212.52 L1478.61 1212.52 L1479.2 1212.52 L1479.78 1212.52 L1480.37 1212.52 L1480.96 1212.52 L1481.54 1212.52 L1482.13 1212.52 L1482.72 1212.52 L1483.3 1212.52 L1483.89 1212.52 L1484.48 1212.52 L1485.06 1212.52 L1485.65 1212.52 L1486.24 1212.52 L1486.82 1212.52 L1487.41 1212.52 L1487.99 1212.52 L1488.58 1212.52 L1489.17 1212.52 L1489.75 1212.52 L1490.34 1212.52 L1490.93 1212.52 L1491.51 1212.52 L1492.1 1212.52 L1492.69 1212.52 L1493.27 1212.52 L1493.86 1212.52 L1494.45 1212.52 L1495.03 1212.52 L1495.62 1212.52 L1496.2 1212.52 L1496.79 1212.52 L1497.38 1212.52 L1497.96 1212.52 L1498.55 1212.52 L1499.14 1212.52 L1499.72 1212.52 L1500.31 1212.52 L1500.9 1212.52 L1501.48 1212.52 L1502.07 1212.52 L1502.65 1212.52 L1503.24 1212.52 L1503.83 1212.52 L1504.41 1212.52 L1505 1212.52 L1505.59 1212.52 L1506.17 1212.52 L1506.76 1212.52 L1507.35 1212.52 L1507.93 1212.52 L1508.52 1212.52 L1509.11 1212.52 L1509.69 1212.52 L1510.28 1212.52 L1510.86 1212.52 L1511.45 1212.52 L1512.04 1212.52 L1512.62 1212.52 L1513.21 1212.52 L1513.8 1212.52 L1514.38 1212.52 L1514.97 1212.52 L1515.56 1212.52 L1516.14 1212.52 L1516.73 1212.52 L1517.32 1212.52 L1517.9 1212.52 L1518.49 1212.52 L1519.07 1212.52 L1519.66 1212.52 L1520.25 1212.52 L1520.83 1212.52 L1521.42 1212.52 L1522.01 1212.52 L1522.59 1212.52 L1523.18 1212.52 L1523.77 1212.52 L1524.35 1212.52 L1524.94 1212.52 L1525.52 1212.52 L1526.11 1212.52 L1526.7 1212.52 L1527.28 1212.52 L1527.87 1212.52 L1528.46 1212.52 L1529.04 1212.52 L1529.63 1212.52 L1530.22 1212.52 L1530.8 1212.52 L1531.39 1212.52 L1531.98 1212.52 L1532.56 1212.52 L1533.15 1212.52 L1533.73 1212.52 L1534.32 1212.52 L1534.91 1212.52 L1535.49 1212.52 L1536.08 1212.52 L1536.67 1212.52 L1537.25 1212.52 L1537.84 1212.52 L1538.43 1212.52 L1539.01 1212.52 L1539.6 1212.52 L1540.19 1212.52 L1540.77 1212.52 L1541.36 1212.52 L1541.94 1212.52 L1542.53 1212.52 L1543.12 1212.52 L1543.7 1212.52 L1544.29 1212.52 L1544.88 1212.52 L1545.46 1212.52 L1546.05 1212.52 L1546.64 1212.52 L1547.22 1212.52 L1547.81 1212.52 L1548.4 1212.52 L1548.98 1212.52 L1549.57 1212.52 L1550.15 1212.52 L1550.74 1212.52 L1551.33 1212.52 L1551.91 1212.52 L1552.5 1212.52 L1553.09 1212.52 L1553.67 1212.52 L1554.26 1212.52 L1554.85 1212.52 L1555.43 1212.52 L1556.02 1212.52 L1556.6 1212.52 L1557.19 1212.52 L1557.78 1212.52 L1558.36 1212.52 L1558.95 1212.52 L1559.54 1212.52 L1560.12 1212.52 L1560.71 1212.52 L1561.3 1212.52 L1561.88 1212.52 L1562.47 1212.52 L1563.06 1212.52 L1563.64 1212.52 L1564.23 1212.52 L1564.81 1212.52 L1565.4 1212.52 L1565.99 1212.52 L1566.57 1212.52 L1567.16 1212.52 L1567.75 1212.52 L1568.33 1212.52 L1568.92 1212.52 L1569.51 1212.52 L1570.09 1212.52 L1570.68 1212.52 L1571.27 1212.52 L1571.85 1212.52 L1572.44 1212.52 L1573.02 1212.52 L1573.61 1212.52 L1574.2 1212.52 L1574.78 1212.52 L1575.37 1212.52 L1575.96 1212.52 L1576.54 1212.52 L1577.13 1212.52 L1577.72 1212.52 L1578.3 1212.52 L1578.89 1212.52 L1579.47 1212.52 L1580.06 1212.52 L1580.65 1212.52 L1581.23 1212.52 L1581.82 1212.52 L1582.41 1212.52 L1582.99 1212.52 L1583.58 1212.52 L1584.17 1212.52 L1584.75 1212.52 L1585.34 1212.52 L1585.93 1212.52 L1586.51 1212.52 L1587.1 1212.52 L1587.68 1212.52 L1588.27 1212.52 L1588.86 1212.52 L1589.44 1212.52 L1590.03 1212.52 L1590.62 1212.52 L1591.2 1212.52 L1591.79 1212.52 L1592.38 1212.52 L1592.96 1212.52 L1593.55 1212.52 L1594.14 1212.52 L1594.72 1212.52 L1595.31 1212.52 L1595.89 1212.52 L1596.48 1212.52 L1597.07 1212.52 L1597.65 1212.52 L1598.24 1212.52 L1598.83 1212.52 L1599.41 1212.52 L1600 1212.52 L1600.59 1212.52 L1601.17 1212.52 L1601.76 1212.52 L1602.34 1212.52 L1602.93 1212.52 L1603.52 1212.52 L1604.1 1212.52 L1604.69 1212.52 L1605.28 1212.52 L1605.86 1212.52 L1606.45 1212.52 L1607.04 1212.52 L1607.62 1212.52 L1608.21 1212.52 L1608.8 1212.52 L1609.38 1212.52 L1609.97 1212.52 L1610.55 1212.52 L1611.14 1212.52 L1611.73 1212.52 L1612.31 1212.52 L1612.9 1212.52 L1613.49 1212.52 L1614.07 1212.52 L1614.66 1212.52 L1615.25 1212.52 L1615.83 1212.52 L1616.42 1212.52 L1617.01 1212.52 L1617.59 1212.52 L1618.18 1212.52 L1618.76 1212.52 L1619.35 1212.52 L1619.94 1212.52 L1620.52 1212.52 L1621.11 1212.52 L1621.7 1212.52 L1622.28 1212.52 L1622.87 1212.52 L1623.46 1212.52 L1624.04 1212.52 L1624.63 1212.52 L1625.22 1212.52 L1625.8 1212.52 L1626.39 1212.52 L1626.97 1212.52 L1627.56 1212.52 L1628.15 1212.52 L1628.73 1212.52 L1629.32 1212.52 L1629.91 1212.52 L1630.49 1212.52 L1631.08 1212.52 L1631.67 1212.52 L1632.25 1212.52 L1632.84 1212.52 L1633.42 1212.52 L1634.01 1212.52 L1634.6 1212.52 L1635.18 1212.52 L1635.77 1212.52 L1636.36 1212.52 L1636.94 1212.52 L1637.53 1212.52 L1638.12 1212.52 L1638.7 1212.52 L1639.29 1212.52 L1639.88 1212.52 L1640.46 1212.52 L1641.05 1212.52 L1641.63 1212.52 L1642.22 1212.52 L1642.81 1212.52 L1643.39 1212.52 L1643.98 1212.52 L1644.57 1212.52 L1645.15 1212.52 L1645.74 1212.52 L1646.33 1212.52 L1646.91 1212.52 L1647.5 1212.52 L1648.09 1212.52 L1648.67 1212.52 L1649.26 1212.52 L1649.84 1212.52 L1650.43 1212.52 L1651.02 1212.52 L1651.6 1212.52 L1652.19 1212.52 L1652.78 1212.52 L1653.36 1212.52 L1653.95 1212.52 L1654.54 1212.52 L1655.12 1212.52 L1655.71 1212.52 L1656.29 1212.52 L1656.88 1212.52 L1657.47 1212.52 L1658.05 1212.52 L1658.64 1212.52 L1659.23 1212.52 L1659.81 1212.52 L1660.4 1212.52 L1660.99 1212.52 L1661.57 1212.52 L1662.16 1212.52 L1662.75 1212.52 L1663.33 1212.52 L1663.92 1212.52 L1664.5 1212.52 L1665.09 1212.52 L1665.68 1212.52 L1666.26 1212.52 L1666.85 1212.52 L1667.44 1212.52 L1668.02 1212.52 L1668.61 1212.52 L1669.2 1212.52 L1669.78 1212.52 L1670.37 1212.52 L1670.96 1212.52 L1671.54 1212.52 L1672.13 1212.52 L1672.71 1212.52 L1673.3 1212.52 L1673.89 1212.52 L1674.47 1212.52 L1675.06 1212.52 L1675.65 1212.52 L1676.23 1212.52 L1676.82 1212.52 L1677.41 1212.52 L1677.99 1212.52 L1678.58 1212.52 L1679.17 1212.52 L1679.75 1212.52 L1680.34 1212.52 L1680.92 1212.52 L1681.51 1212.52 L1682.1 1212.52 L1682.68 1212.52 L1683.27 1212.52 L1683.86 1212.52 L1684.44 1212.52 L1685.03 1212.52 L1685.62 1212.52 L1686.2 1212.52 L1686.79 1212.52 L1687.37 1212.52 L1687.96 1212.52 L1688.55 1212.52 L1689.13 1212.52 L1689.72 1212.52 L1690.31 1212.52 L1690.89 1212.52 L1691.48 1212.52 L1692.07 1212.52 L1692.65 1212.52 L1693.24 1212.52 L1693.83 1212.52 L1694.41 1212.52 L1695 1212.52 L1695.58 1212.52 L1696.17 1212.52 L1696.76 1212.52 L1697.34 1212.52 L1697.93 1212.52 L1698.52 1212.52 L1699.1 1212.52 L1699.69 1212.52 L1700.28 1212.52 L1700.86 1212.52 L1701.45 1212.52 L1702.04 1212.52 L1702.62 1212.52 L1703.21 1212.52 L1703.79 1212.52 L1704.38 1212.52 L1704.97 1212.52 L1705.55 1212.52 L1706.14 1212.52 L1706.73 1212.52 L1707.31 1212.52 L1707.9 1212.52 L1708.49 1212.52 L1709.07 1212.52 L1709.66 1212.52 L1710.24 1212.52 L1710.83 1212.52 L1711.42 1212.52 L1712 1212.52 L1712.59 1212.52 L1713.18 1212.52 L1713.76 1212.52 L1714.35 1212.52 L1714.94 1212.52 L1715.52 1212.52 L1716.11 1212.52 L1716.7 1212.52 L1717.28 1212.52 L1717.87 1212.52 L1718.45 1212.52 L1719.04 1212.52 L1719.63 1212.52 L1720.21 1212.52 L1720.8 1212.52 L1721.39 1212.52 L1721.97 1212.52 L1722.56 1212.52 L1723.15 1212.52 L1723.73 1212.52 L1724.32 1212.52 L1724.91 1212.52 L1725.49 1212.52 L1726.08 1212.52 L1726.66 1212.52 L1727.25 1212.52 L1727.84 1212.52 L1728.42 1212.52 L1729.01 1212.52 L1729.6 1212.52 L1730.18 1212.52 L1730.77 1212.52 L1731.36 1212.52 L1731.94 1212.52 L1732.53 1212.52 L1733.11 1212.52 L1733.7 1212.52 L1734.29 1212.52 L1734.87 1212.52 L1735.46 1212.52 L1736.05 1212.52 L1736.63 1212.52 L1737.22 1212.52 L1737.81 1212.52 L1738.39 1212.52 L1738.98 1212.52 L1739.57 1212.52 L1740.15 1212.52 L1740.74 1212.52 L1741.32 1212.52 L1741.91 1212.52 L1742.5 1212.52 L1743.08 1212.52 L1743.67 1212.52 L1744.26 1212.52 L1744.84 1212.52 L1745.43 1212.52 L1746.02 1212.52 L1746.6 1212.52 L1747.19 1212.52 L1747.78 1212.52 L1748.36 1212.52 L1748.95 1212.52 L1749.53 1212.52 L1750.12 1212.52 L1750.71 1212.52 L1751.29 1212.52 L1751.88 1212.52 L1752.47 1212.52 L1753.05 1212.52 L1753.64 1212.52 L1754.23 1212.52 L1754.81 1212.52 L1755.4 1212.52 L1755.99 1212.52 L1756.57 1212.52 L1757.16 1212.52 L1757.74 1212.52 L1758.33 1212.52 L1758.92 1212.52 L1759.5 1212.52 L1760.09 1212.52 L1760.68 1212.52 L1761.26 1212.52 L1761.85 1212.52 L1762.44 1212.52 L1763.02 1212.52 L1763.61 1212.52 L1764.19 1212.52 L1764.78 1212.52 L1765.37 1212.52 L1765.95 1212.52 L1766.54 1212.52 L1767.13 1212.52 L1767.71 1212.52 L1768.3 1212.52 L1768.89 1212.52 L1769.47 1212.52 L1770.06 1212.52 L1770.65 1212.52 L1771.23 1212.52 L1771.82 1212.52 L1772.4 1212.52 L1772.99 1212.52 L1773.58 1212.52 L1774.16 1212.52 L1774.75 1212.52 L1775.34 1212.52 L1775.92 1212.52 L1776.51 1212.52 L1777.1 1212.52 L1777.68 1212.52 L1778.27 1212.52 L1778.86 1212.52 L1779.44 1212.52 L1780.03 1212.52 L1780.61 1212.52 L1781.2 1212.52 L1781.79 1212.52 L1782.37 1212.52 L1782.96 1212.52 L1783.55 1212.52 L1784.13 1212.52 L1784.72 1212.52 L1785.31 1212.52 L1785.89 1212.52 L1786.48 1212.52 L1787.06 1212.52 L1787.65 1212.52 L1788.24 1212.52 L1788.82 1212.52 L1789.41 1212.52 L1790 1212.52 L1790.58 1212.52 L1791.17 1212.52 L1791.76 1212.52 L1792.34 1212.52 L1792.93 1212.52 L1793.52 1212.52 L1794.1 1212.52 L1794.69 1212.52 L1795.27 1212.52 L1795.86 1212.52 L1796.45 1212.52 L1797.03 1212.52 L1797.62 1212.52 L1798.21 1212.52 L1798.79 1212.52 L1799.38 1212.52 L1799.97 1212.52 L1800.55 1212.52 L1801.14 1212.52 L1801.73 1212.52 L1802.31 1212.52 L1802.9 1212.52 L1803.48 1212.52 L1804.07 1212.52 L1804.66 1212.52 L1805.24 1212.52 L1805.83 1212.52 L1806.42 1212.52 L1807 1212.52 L1807.59 1212.52 L1808.18 1212.52 L1808.76 1212.52 L1809.35 1212.52 L1809.94 1212.52 L1810.52 1212.52 L1811.11 1212.52 L1811.69 1212.52 L1812.28 1212.52 L1812.87 1212.52 L1813.45 1212.52 L1814.04 1212.52 L1814.63 1212.52 L1815.21 1212.52 L1815.8 1212.52 L1816.39 1212.52 L1816.97 1212.52 L1817.56 1212.52 L1818.14 1212.52 L1818.73 1212.52 L1819.32 1212.52 L1819.9 1212.52 L1820.49 1212.52 L1821.08 1212.52 L1821.66 1212.52 L1822.25 1212.52 L1822.84 1212.52 L1823.42 1212.52 L1824.01 1212.52 L1824.6 1212.52 L1825.18 1212.52 L1825.77 1212.52 L1826.35 1212.52 L1826.94 1212.52 L1827.53 1212.52 L1828.11 1212.52 L1828.7 1212.52 L1829.29 1212.52 L1829.87 1212.52 L1830.46 1212.52 L1831.05 1212.52 L1831.63 1212.52 L1832.22 1212.52 L1832.81 1212.52 L1833.39 1212.52 L1833.98 1212.52 L1834.56 1212.52 L1835.15 1212.52 L1835.74 1212.52 L1836.32 1212.52 L1836.91 1212.52 L1837.5 1212.52 L1838.08 1212.52 L1838.67 1212.52 L1839.26 1212.52 L1839.84 1212.52 L1840.43 1212.52 L1841.01 1212.52 L1841.6 1212.52 L1842.19 1212.52 L1842.77 1212.52 L1843.36 1212.52 L1843.95 1212.52 L1844.53 1212.52 L1845.12 1212.52 L1845.71 1212.52 L1846.29 1212.52 L1846.88 1212.52 L1847.47 1212.52 L1848.05 1212.52 L1848.64 1212.52 L1849.22 1212.52 L1849.81 1212.52 L1850.4 1212.52 L1850.98 1212.52 L1851.57 1212.52 L1852.16 1212.52 L1852.74 1212.52 L1853.33 1212.52 L1853.92 1212.52 L1854.5 1212.52 L1855.09 1212.52 L1855.68 1212.52 L1856.26 1212.52 L1856.85 1212.52 L1857.43 1212.52 L1858.02 1212.52 L1858.61 1212.52 L1859.19 1212.52 L1859.78 1212.52 L1860.37 1212.52 L1860.95 1212.52 L1861.54 1212.52 L1862.13 1212.52 L1862.71 1212.52 L1863.3 1212.52 L1863.88 1212.52 L1864.47 1212.52 L1865.06 1212.52 L1865.64 1212.52 L1866.23 1212.52 L1866.82 1212.52 L1867.4 1212.52 L1867.99 1212.52 L1868.58 1212.52 L1869.16 1212.52 L1869.75 1212.52 L1870.34 1212.52 L1870.92 1212.52 L1871.51 1212.52 L1872.09 1212.52 L1872.68 1212.52 L1873.27 1212.52 L1873.85 1212.52 L1874.44 1212.52 L1875.03 1212.52 L1875.61 1212.52 L1876.2 1212.52 L1876.79 1212.52 L1877.37 1212.52 L1877.96 1212.52 L1878.55 1212.52 L1879.13 1212.52 L1879.72 1212.52 L1880.3 1212.52 L1880.89 1212.52 L1881.48 1212.52 L1882.06 1212.52 L1882.65 1212.52 L1883.24 1212.52 L1883.82 1212.52 L1884.41 1212.52 L1885 1212.52 L1885.58 1212.52 L1886.17 1212.52 L1886.76 1212.52 L1887.34 1212.52 L1887.93 1212.52 L1888.51 1212.52 L1889.1 1212.52 L1889.69 1212.52 L1890.27 1212.52 L1890.86 1212.52 L1891.45 1212.52 L1892.03 1212.52 L1892.62 1212.52 L1893.21 1212.52 L1893.79 1212.52 L1894.38 1212.52 L1894.96 1212.52 L1895.55 1212.52 L1896.14 1212.52 L1896.72 1212.52 L1897.31 1212.52 L1897.9 1212.52 L1898.48 1212.52 L1899.07 1212.52 L1899.66 1212.52 L1900.24 1212.52 L1900.83 1212.52 L1901.42 1212.52 L1902 1212.52 L1902.59 1212.52 L1903.17 1212.52 L1903.76 1212.52 L1904.35 1212.52 L1904.93 1212.52 L1905.52 1212.52 L1906.11 1212.52 L1906.69 1212.52 L1907.28 1212.52 L1907.87 1212.52 L1908.45 1212.52 L1909.04 1212.52 L1909.63 1212.52 L1910.21 1212.52 L1910.8 1212.52 L1911.38 1212.52 L1911.97 1212.52 L1912.56 1212.52 L1913.14 1212.52 L1913.73 1212.52 L1914.32 1212.52 L1914.9 1212.52 L1915.49 1212.52 L1916.08 1212.52 L1916.66 1212.52 L1917.25 1212.52 L1917.83 1212.52 L1918.42 1212.52 L1919.01 1212.52 L1919.59 1212.52 L1920.18 1212.52 L1920.77 1212.52 L1921.35 1212.52 L1921.94 1212.52 L1922.53 1212.52 L1923.11 1212.52 L1923.7 1212.52 L1924.29 1212.52 L1924.87 1212.52 L1925.46 1212.52 L1926.04 1212.52 L1926.63 1212.52 L1927.22 1212.52 L1927.8 1212.52 L1928.39 1212.52 L1928.98 1212.52 L1929.56 1212.52 L1930.15 1212.52 L1930.74 1212.52 L1931.32 1212.52 L1931.91 1212.52 L1932.5 1212.52 L1933.08 1212.52 L1933.67 1212.52 L1934.25 1212.52 L1934.84 1212.52 L1935.43 1212.52 L1936.01 1212.52 L1936.6 1212.52 L1937.19 1212.52 L1937.77 1212.52 L1938.36 1212.52 L1938.95 1212.52 L1939.53 1212.52 L1940.12 1212.52 L1940.71 1212.52 L1941.29 1212.52 L1941.88 1212.52 L1942.46 1212.52 L1943.05 1212.52 L1943.64 1212.52 L1944.22 1212.52 L1944.81 1212.52 L1945.4 1212.52 L1945.98 1212.52 L1946.57 1212.52 L1947.16 1212.52 L1947.74 1212.52 L1948.33 1212.52 L1948.91 1212.52 L1949.5 1212.52 L1950.09 1212.52 L1950.67 1212.52 L1951.26 1212.52 L1951.85 1212.52 L1952.43 1212.52 L1953.02 1212.52 L1953.61 1212.52 L1954.19 1212.52 L1954.78 1212.52 L1955.37 1212.52 L1955.95 1212.52 L1956.54 1212.52 L1957.12 1212.52 L1957.71 1212.52 L1958.3 1212.52 L1958.88 1212.52 L1959.47 1212.52 L1960.06 1212.52 L1960.64 1212.52 L1961.23 1212.52 L1961.82 1212.52 L1962.4 1212.52 L1962.99 1212.52 L1963.58 1212.52 L1964.16 1212.52 L1964.75 1212.52 L1965.33 1212.52 L1965.92 1212.52 L1966.51 1212.52 L1967.09 1212.52 L1967.68 1212.52 L1968.27 1212.52 L1968.85 1212.52 L1969.44 1212.52 L1970.03 1212.52 L1970.61 1212.52 L1971.2 1212.52 L1971.78 1212.52 L1972.37 1212.52 L1972.96 1212.52 L1973.54 1212.52 L1974.13 1212.52 L1974.72 1212.52 L1975.3 1212.52 L1975.89 1212.52 L1976.48 1212.52 L1977.06 1212.52 L1977.65 1212.52 L1978.24 1212.52 L1978.82 1212.52 L1979.41 1212.52 L1979.99 1212.52 L1980.58 1212.52 L1981.17 1212.52 L1981.75 1212.52 L1982.34 1212.52 L1982.93 1212.52 L1983.51 1212.52 L1984.1 1212.52 L1984.69 1212.52 L1985.27 1212.52 L1985.86 1212.52 L1986.45 1212.52 L1987.03 1212.52 L1987.62 1212.52 L1988.2 1212.52 L1988.79 1212.52 L1989.38 1212.52 L1989.96 1212.52 L1990.55 1212.52 L1991.14 1212.52 L1991.72 1212.52 L1992.31 1212.52 L1992.9 1212.52 L1993.48 1212.52 L1994.07 1212.52 L1994.65 1212.52 L1995.24 1212.52 L1995.83 1212.52 L1996.41 1212.52 L1997 1212.52 L1997.59 1212.52 L1998.17 1212.52 L1998.76 1212.52 L1999.35 1212.52 L1999.93 1212.52 L2000.52 1212.52 L2001.11 1212.52 L2001.69 1212.52 L2002.28 1212.52 L2002.86 1212.52 L2003.45 1212.52 L2004.04 1212.52 L2004.62 1212.52 L2005.21 1212.52 L2005.8 1212.52 L2006.38 1212.52 L2006.97 1212.52 L2007.56 1212.52 L2008.14 1212.52 L2008.73 1212.52 L2009.32 1212.52 L2009.9 1212.52 L2010.49 1212.52 L2011.07 1212.52 L2011.66 1212.52 L2012.25 1212.52 L2012.83 1212.52 L2013.42 1212.52 L2014.01 1212.52 L2014.59 1212.52 L2015.18 1212.52 L2015.77 1212.52 L2016.35 1212.52 L2016.94 1212.52 L2017.53 1212.52 L2018.11 1212.52 L2018.7 1212.52 L2019.28 1212.52 L2019.87 1212.52 L2020.46 1212.52 L2021.04 1212.52 L2021.63 1212.52 L2022.22 1212.52 L2022.8 1212.52 L2023.39 1212.52 L2023.98 1212.52 L2024.56 1212.52 L2025.15 1212.52 L2025.73 1212.52 L2026.32 1212.52 L2026.91 1212.52 L2027.49 1212.52 L2028.08 1212.52 L2028.67 1212.52 L2029.25 1212.52 L2029.84 1212.52 L2030.43 1212.52 L2031.01 1212.52 L2031.6 1212.52 L2032.19 1212.52 L2032.77 1212.52 L2033.36 1212.52 L2033.94 1212.52 L2034.53 1212.52 L2035.12 1212.52 L2035.7 1212.52 L2036.29 1212.52 L2036.88 1212.52 L2037.46 1212.52 L2038.05 1212.52 L2038.64 1212.52 L2039.22 1212.52 L2039.81 1212.52 L2040.4 1212.52 L2040.98 1212.52 L2041.57 1212.52 L2042.15 1212.52 L2042.74 1212.52 L2043.33 1212.52 L2043.91 1212.52 L2044.5 1212.52 L2045.09 1212.52 L2045.67 1212.52 L2046.26 1212.52 L2046.85 1212.52 L2047.43 1212.52 L2048.02 1212.52 L2048.6 1212.52 L2049.19 1212.52 L2049.78 1212.52 L2050.36 1212.52 L2050.95 1212.52 L2051.54 1212.52 L2052.12 1212.52 L2052.71 1212.52 L2053.3 1212.52 L2053.88 1212.52 L2054.47 1212.52 L2055.06 1212.52 L2055.64 1212.52 L2056.23 1212.52 L2056.81 1212.52 L2057.4 1212.52 L2057.99 1212.52 L2058.57 1212.52 L2059.16 1212.52 L2059.75 1212.52 L2060.33 1212.52 L2060.92 1212.52 L2061.51 1212.52 L2062.09 1212.52 L2062.68 1212.52 L2063.27 1212.52 L2063.85 1212.52 L2064.44 1212.52 L2065.02 1212.52 L2065.61 1212.52 L2066.2 1212.52 L2066.78 1212.52 L2067.37 1212.52 L2067.96 1212.52 L2068.54 1212.52 L2069.13 1212.52 L2069.72 1212.52 L2070.3 1212.52 L2070.89 1212.52 L2071.48 1212.52 L2072.06 1212.52 L2072.65 1212.52 L2073.23 1212.52 L2073.82 1212.52 L2074.41 1212.52 L2074.99 1212.52 L2075.58 1212.52 L2076.17 1212.52 L2076.75 1212.52 L2077.34 1212.52 L2077.93 1212.52 L2078.51 1212.52 L2079.1 1212.52 L2079.68 1212.52 L2080.27 1212.52 L2080.86 1212.52 L2081.44 1212.52 L2082.03 1212.52 L2082.62 1212.52 L2083.2 1212.52 L2083.79 1212.52 L2084.38 1212.52 L2084.96 1212.52 L2085.55 1212.52 L2086.14 1212.52 L2086.72 1212.52 L2087.31 1212.52 L2087.89 1212.52 L2088.48 1212.52 L2089.07 1212.52 L2089.65 1212.52 L2090.24 1212.52 L2090.83 1212.52 L2091.41 1212.52 L2092 1212.52 L2092.59 1212.52 L2093.17 1212.52 L2093.76 1212.52 L2094.35 1212.52 L2094.93 1212.52 L2095.52 1212.52 L2096.1 1212.52 L2096.69 1212.52 L2097.28 1212.52 L2097.86 1212.52 L2098.45 1212.52 L2099.04 1212.52 L2099.62 1212.52 L2100.21 1212.52 L2100.8 1212.52 L2101.38 1212.52 L2101.97 1212.52 L2102.55 1212.52 L2103.14 1212.52 L2103.73 1212.52 L2104.31 1212.52 L2104.9 1212.52 L2105.49 1212.52 L2106.07 1212.52 L2106.66 1212.52 L2107.25 1212.52 L2107.83 1212.52 L2108.42 1212.52 L2109.01 1212.52 L2109.59 1212.52 L2110.18 1212.52 L2110.76 1212.52 L2111.35 1212.52 L2111.94 1212.52 L2112.52 1212.52 L2113.11 1212.52 L2113.7 1212.52 L2114.28 1212.52 L2114.87 1212.52 L2115.46 1212.52 L2116.04 1212.52 L2116.63 1212.52 L2117.22 1212.52 L2117.8 1212.52 L2118.39 1212.52 L2118.97 1212.52 L2119.56 1212.52 L2120.15 1212.52 L2120.73 1212.52 L2121.32 1212.52 L2121.91 1212.52 L2122.49 1212.52 L2123.08 1212.52 L2123.67 1212.52 L2124.25 1212.52 L2124.84 1212.52 L2125.42 1212.52 L2126.01 1212.52 L2126.6 1212.52 L2127.18 1212.52 L2127.77 1212.52 L2128.36 1212.52 L2128.94 1212.52 L2129.53 1212.52 L2130.12 1212.52 L2130.7 1212.52 L2131.29 1212.52 L2131.88 1212.52 L2132.46 1212.52 L2133.05 1212.52 L2133.63 1212.52 L2134.22 1212.52 L2134.81 1212.52 L2135.39 1212.52 L2135.98 1212.52 L2136.57 1212.52 L2137.15 1212.52 L2137.74 1212.52 L2138.33 1212.52 L2138.91 1212.52 L2139.5 1212.52 L2140.09 1212.52 L2140.67 1212.52 L2141.26 1212.52 L2141.84 1212.52 L2142.43 1212.52 L2143.02 1212.52 L2143.6 1212.52 L2144.19 1212.52 L2144.78 1212.52 L2145.36 1212.52 L2145.95 1212.52 L2146.54 1212.52 L2147.12 1212.52 L2147.71 1212.52 L2148.3 1212.52 L2148.88 1212.52 L2149.47 1212.52 L2150.05 1212.52 L2150.64 1212.52 L2151.23 1212.52 L2151.81 1212.52 L2152.4 1212.52 L2152.99 1212.52 L2153.57 1212.52 L2154.16 1212.52 L2154.75 1212.52 L2155.33 1212.52 L2155.92 1212.52 L2156.5 1212.52 L2157.09 1212.52 L2157.68 1212.52 L2158.26 1212.52 L2158.26 1211.65 L2157.68 1211.65 L2157.09 1211.65 L2156.5 1211.65 L2155.92 1211.65 L2155.33 1211.65 L2154.75 1211.65 L2154.16 1211.65 L2153.57 1211.65 L2152.99 1211.65 L2152.4 1211.65 L2151.81 1211.65 L2151.23 1211.65 L2150.64 1211.65 L2150.05 1211.65 L2149.47 1211.65 L2148.88 1211.65 L2148.3 1211.65 L2147.71 1211.65 L2147.12 1211.65 L2146.54 1211.65 L2145.95 1211.65 L2145.36 1211.65 L2144.78 1211.65 L2144.19 1211.65 L2143.6 1211.65 L2143.02 1211.65 L2142.43 1211.65 L2141.84 1211.65 L2141.26 1211.65 L2140.67 1211.65 L2140.09 1211.65 L2139.5 1211.65 L2138.91 1211.65 L2138.33 1211.65 L2137.74 1211.65 L2137.15 1211.65 L2136.57 1211.65 L2135.98 1211.65 L2135.39 1211.65 L2134.81 1211.65 L2134.22 1211.65 L2133.63 1211.65 L2133.05 1211.65 L2132.46 1211.65 L2131.88 1211.65 L2131.29 1211.65 L2130.7 1211.65 L2130.12 1211.65 L2129.53 1211.65 L2128.94 1211.65 L2128.36 1211.65 L2127.77 1211.65 L2127.18 1211.65 L2126.6 1211.65 L2126.01 1211.65 L2125.42 1211.65 L2124.84 1211.65 L2124.25 1211.65 L2123.67 1211.65 L2123.08 1211.65 L2122.49 1211.65 L2121.91 1211.65 L2121.32 1211.65 L2120.73 1211.65 L2120.15 1211.65 L2119.56 1211.65 L2118.97 1211.65 L2118.39 1211.65 L2117.8 1211.65 L2117.22 1211.65 L2116.63 1211.65 L2116.04 1211.65 L2115.46 1211.65 L2114.87 1211.65 L2114.28 1211.65 L2113.7 1211.65 L2113.11 1211.65 L2112.52 1211.65 L2111.94 1211.65 L2111.35 1211.65 L2110.76 1211.65 L2110.18 1211.65 L2109.59 1211.65 L2109.01 1211.65 L2108.42 1211.65 L2107.83 1211.65 L2107.25 1211.65 L2106.66 1211.65 L2106.07 1211.65 L2105.49 1211.65 L2104.9 1211.65 L2104.31 1211.65 L2103.73 1211.65 L2103.14 1211.65 L2102.55 1211.65 L2101.97 1211.65 L2101.38 1211.65 L2100.8 1211.65 L2100.21 1211.65 L2099.62 1211.65 L2099.04 1211.65 L2098.45 1211.65 L2097.86 1211.65 L2097.28 1211.65 L2096.69 1211.65 L2096.1 1211.65 L2095.52 1211.65 L2094.93 1211.65 L2094.35 1211.65 L2093.76 1211.65 L2093.17 1211.65 L2092.59 1211.65 L2092 1211.65 L2091.41 1211.65 L2090.83 1211.65 L2090.24 1211.65 L2089.65 1211.65 L2089.07 1211.65 L2088.48 1211.65 L2087.89 1211.65 L2087.31 1211.65 L2086.72 1211.65 L2086.14 1211.65 L2085.55 1211.65 L2084.96 1211.65 L2084.38 1211.65 L2083.79 1211.65 L2083.2 1211.65 L2082.62 1211.65 L2082.03 1211.65 L2081.44 1211.65 L2080.86 1211.65 L2080.27 1211.65 L2079.68 1211.65 L2079.1 1211.65 L2078.51 1211.65 L2077.93 1211.65 L2077.34 1211.65 L2076.75 1211.65 L2076.17 1211.65 L2075.58 1211.65 L2074.99 1211.65 L2074.41 1211.65 L2073.82 1211.65 L2073.23 1211.65 L2072.65 1211.65 L2072.06 1211.65 L2071.48 1211.65 L2070.89 1211.65 L2070.3 1211.65 L2069.72 1211.65 L2069.13 1211.65 L2068.54 1211.65 L2067.96 1211.65 L2067.37 1211.65 L2066.78 1211.65 L2066.2 1211.65 L2065.61 1211.65 L2065.02 1211.65 L2064.44 1211.65 L2063.85 1211.65 L2063.27 1211.65 L2062.68 1211.65 L2062.09 1211.65 L2061.51 1211.65 L2060.92 1211.65 L2060.33 1211.65 L2059.75 1211.65 L2059.16 1211.65 L2058.57 1211.65 L2057.99 1211.65 L2057.4 1211.65 L2056.81 1211.65 L2056.23 1211.65 L2055.64 1211.65 L2055.06 1211.65 L2054.47 1211.65 L2053.88 1211.65 L2053.3 1211.65 L2052.71 1211.65 L2052.12 1211.65 L2051.54 1211.65 L2050.95 1211.65 L2050.36 1211.65 L2049.78 1211.65 L2049.19 1211.65 L2048.6 1211.65 L2048.02 1211.65 L2047.43 1211.65 L2046.85 1211.65 L2046.26 1211.65 L2045.67 1211.65 L2045.09 1211.65 L2044.5 1211.65 L2043.91 1211.65 L2043.33 1211.65 L2042.74 1211.65 L2042.15 1211.65 L2041.57 1211.65 L2040.98 1211.65 L2040.4 1211.65 L2039.81 1211.65 L2039.22 1211.65 L2038.64 1211.65 L2038.05 1211.65 L2037.46 1211.65 L2036.88 1211.65 L2036.29 1211.65 L2035.7 1211.65 L2035.12 1211.65 L2034.53 1211.65 L2033.94 1211.65 L2033.36 1211.65 L2032.77 1211.65 L2032.19 1211.65 L2031.6 1211.65 L2031.01 1211.65 L2030.43 1211.65 L2029.84 1211.65 L2029.25 1211.65 L2028.67 1211.65 L2028.08 1211.65 L2027.49 1211.65 L2026.91 1211.65 L2026.32 1211.65 L2025.73 1211.65 L2025.15 1211.65 L2024.56 1211.65 L2023.98 1211.65 L2023.39 1211.65 L2022.8 1211.65 L2022.22 1211.65 L2021.63 1211.65 L2021.04 1211.65 L2020.46 1211.65 L2019.87 1211.65 L2019.28 1211.65 L2018.7 1211.65 L2018.11 1211.65 L2017.53 1211.65 L2016.94 1211.65 L2016.35 1211.65 L2015.77 1211.65 L2015.18 1211.65 L2014.59 1211.65 L2014.01 1211.65 L2013.42 1211.65 L2012.83 1211.65 L2012.25 1211.65 L2011.66 1211.65 L2011.07 1211.65 L2010.49 1211.65 L2009.9 1211.65 L2009.32 1211.65 L2008.73 1211.65 L2008.14 1211.65 L2007.56 1211.65 L2006.97 1211.65 L2006.38 1211.65 L2005.8 1211.65 L2005.21 1211.65 L2004.62 1211.65 L2004.04 1211.65 L2003.45 1211.65 L2002.86 1211.65 L2002.28 1211.65 L2001.69 1211.65 L2001.11 1211.65 L2000.52 1211.65 L1999.93 1211.65 L1999.35 1211.65 L1998.76 1211.65 L1998.17 1211.65 L1997.59 1211.65 L1997 1211.65 L1996.41 1211.65 L1995.83 1211.65 L1995.24 1211.65 L1994.65 1211.65 L1994.07 1211.65 L1993.48 1211.65 L1992.9 1211.65 L1992.31 1211.65 L1991.72 1211.65 L1991.14 1211.65 L1990.55 1211.65 L1989.96 1211.65 L1989.38 1211.65 L1988.79 1211.65 L1988.2 1211.65 L1987.62 1211.65 L1987.03 1211.65 L1986.45 1211.65 L1985.86 1211.65 L1985.27 1211.65 L1984.69 1211.65 L1984.1 1211.65 L1983.51 1211.65 L1982.93 1211.65 L1982.34 1211.65 L1981.75 1211.65 L1981.17 1211.65 L1980.58 1211.65 L1979.99 1211.65 L1979.41 1211.65 L1978.82 1211.65 L1978.24 1211.65 L1977.65 1211.65 L1977.06 1211.65 L1976.48 1211.65 L1975.89 1211.65 L1975.3 1211.65 L1974.72 1211.65 L1974.13 1211.65 L1973.54 1211.65 L1972.96 1211.65 L1972.37 1211.65 L1971.78 1211.65 L1971.2 1211.65 L1970.61 1211.65 L1970.03 1211.65 L1969.44 1211.65 L1968.85 1211.65 L1968.27 1211.65 L1967.68 1211.65 L1967.09 1211.65 L1966.51 1211.65 L1965.92 1211.65 L1965.33 1211.65 L1964.75 1211.65 L1964.16 1211.65 L1963.58 1211.65 L1962.99 1211.65 L1962.4 1211.65 L1961.82 1211.65 L1961.23 1211.65 L1960.64 1211.65 L1960.06 1211.65 L1959.47 1211.65 L1958.88 1211.65 L1958.3 1211.65 L1957.71 1211.65 L1957.12 1211.65 L1956.54 1211.65 L1955.95 1211.65 L1955.37 1211.65 L1954.78 1211.65 L1954.19 1211.65 L1953.61 1211.65 L1953.02 1211.65 L1952.43 1211.65 L1951.85 1211.65 L1951.26 1211.65 L1950.67 1211.65 L1950.09 1211.65 L1949.5 1211.65 L1948.91 1211.65 L1948.33 1211.65 L1947.74 1211.65 L1947.16 1211.65 L1946.57 1211.65 L1945.98 1211.65 L1945.4 1211.65 L1944.81 1211.65 L1944.22 1211.65 L1943.64 1211.65 L1943.05 1211.65 L1942.46 1211.65 L1941.88 1211.65 L1941.29 1211.65 L1940.71 1211.65 L1940.12 1211.65 L1939.53 1211.65 L1938.95 1211.65 L1938.36 1211.65 L1937.77 1211.65 L1937.19 1211.65 L1936.6 1211.65 L1936.01 1211.65 L1935.43 1211.65 L1934.84 1211.65 L1934.25 1211.65 L1933.67 1211.65 L1933.08 1211.65 L1932.5 1211.65 L1931.91 1211.65 L1931.32 1211.65 L1930.74 1211.65 L1930.15 1211.65 L1929.56 1211.65 L1928.98 1211.65 L1928.39 1211.65 L1927.8 1211.65 L1927.22 1211.65 L1926.63 1211.65 L1926.04 1211.65 L1925.46 1211.65 L1924.87 1211.65 L1924.29 1211.65 L1923.7 1211.65 L1923.11 1211.65 L1922.53 1211.65 L1921.94 1211.65 L1921.35 1211.65 L1920.77 1211.65 L1920.18 1211.65 L1919.59 1211.65 L1919.01 1211.65 L1918.42 1211.65 L1917.83 1211.65 L1917.25 1211.65 L1916.66 1211.65 L1916.08 1211.65 L1915.49 1211.65 L1914.9 1211.65 L1914.32 1211.65 L1913.73 1211.65 L1913.14 1211.65 L1912.56 1211.65 L1911.97 1211.65 L1911.38 1211.65 L1910.8 1211.65 L1910.21 1211.65 L1909.63 1211.65 L1909.04 1211.65 L1908.45 1211.65 L1907.87 1211.65 L1907.28 1211.65 L1906.69 1211.65 L1906.11 1211.65 L1905.52 1211.65 L1904.93 1211.65 L1904.35 1211.65 L1903.76 1211.65 L1903.17 1211.65 L1902.59 1211.65 L1902 1211.65 L1901.42 1211.65 L1900.83 1211.65 L1900.24 1211.65 L1899.66 1211.65 L1899.07 1211.65 L1898.48 1211.65 L1897.9 1211.65 L1897.31 1211.65 L1896.72 1211.65 L1896.14 1211.65 L1895.55 1211.65 L1894.96 1211.65 L1894.38 1211.65 L1893.79 1211.65 L1893.21 1211.65 L1892.62 1211.65 L1892.03 1211.65 L1891.45 1211.65 L1890.86 1211.65 L1890.27 1211.65 L1889.69 1211.65 L1889.1 1211.65 L1888.51 1211.65 L1887.93 1211.65 L1887.34 1211.65 L1886.76 1211.65 L1886.17 1211.65 L1885.58 1211.65 L1885 1211.65 L1884.41 1211.65 L1883.82 1211.65 L1883.24 1211.65 L1882.65 1211.65 L1882.06 1211.65 L1881.48 1211.65 L1880.89 1211.65 L1880.3 1211.65 L1879.72 1211.65 L1879.13 1211.65 L1878.55 1211.65 L1877.96 1211.65 L1877.37 1211.65 L1876.79 1211.65 L1876.2 1211.65 L1875.61 1211.65 L1875.03 1211.65 L1874.44 1211.65 L1873.85 1211.65 L1873.27 1211.65 L1872.68 1211.65 L1872.09 1211.65 L1871.51 1211.65 L1870.92 1211.65 L1870.34 1211.65 L1869.75 1211.65 L1869.16 1211.65 L1868.58 1211.65 L1867.99 1211.65 L1867.4 1211.65 L1866.82 1211.65 L1866.23 1211.65 L1865.64 1211.65 L1865.06 1211.65 L1864.47 1211.65 L1863.88 1211.65 L1863.3 1211.65 L1862.71 1211.65 L1862.13 1211.65 L1861.54 1211.65 L1860.95 1211.65 L1860.37 1211.65 L1859.78 1211.65 L1859.19 1211.65 L1858.61 1211.65 L1858.02 1211.65 L1857.43 1211.65 L1856.85 1211.65 L1856.26 1211.65 L1855.68 1211.65 L1855.09 1211.65 L1854.5 1211.65 L1853.92 1211.65 L1853.33 1211.65 L1852.74 1211.65 L1852.16 1211.65 L1851.57 1211.65 L1850.98 1211.65 L1850.4 1211.65 L1849.81 1211.65 L1849.22 1211.65 L1848.64 1211.65 L1848.05 1211.65 L1847.47 1211.65 L1846.88 1211.65 L1846.29 1211.65 L1845.71 1211.65 L1845.12 1211.65 L1844.53 1211.65 L1843.95 1211.65 L1843.36 1211.65 L1842.77 1211.65 L1842.19 1211.65 L1841.6 1211.65 L1841.01 1211.65 L1840.43 1211.65 L1839.84 1211.65 L1839.26 1211.65 L1838.67 1211.65 L1838.08 1211.65 L1837.5 1211.65 L1836.91 1211.65 L1836.32 1211.65 L1835.74 1211.65 L1835.15 1211.65 L1834.56 1211.65 L1833.98 1211.65 L1833.39 1211.65 L1832.81 1211.65 L1832.22 1211.65 L1831.63 1211.65 L1831.05 1211.65 L1830.46 1211.65 L1829.87 1211.65 L1829.29 1211.65 L1828.7 1211.65 L1828.11 1211.65 L1827.53 1211.65 L1826.94 1211.65 L1826.35 1211.65 L1825.77 1211.65 L1825.18 1211.65 L1824.6 1211.65 L1824.01 1211.65 L1823.42 1211.65 L1822.84 1211.65 L1822.25 1211.65 L1821.66 1211.65 L1821.08 1211.65 L1820.49 1211.65 L1819.9 1211.65 L1819.32 1211.65 L1818.73 1211.65 L1818.14 1211.65 L1817.56 1211.65 L1816.97 1211.65 L1816.39 1211.65 L1815.8 1211.65 L1815.21 1211.65 L1814.63 1211.65 L1814.04 1211.65 L1813.45 1211.65 L1812.87 1211.65 L1812.28 1211.65 L1811.69 1211.65 L1811.11 1211.65 L1810.52 1211.65 L1809.94 1211.65 L1809.35 1211.65 L1808.76 1211.65 L1808.18 1211.65 L1807.59 1211.65 L1807 1211.65 L1806.42 1211.65 L1805.83 1211.65 L1805.24 1211.65 L1804.66 1211.65 L1804.07 1211.65 L1803.48 1211.65 L1802.9 1211.65 L1802.31 1211.65 L1801.73 1211.65 L1801.14 1211.65 L1800.55 1211.65 L1799.97 1211.65 L1799.38 1211.65 L1798.79 1211.65 L1798.21 1211.65 L1797.62 1211.65 L1797.03 1211.65 L1796.45 1211.65 L1795.86 1211.65 L1795.27 1211.65 L1794.69 1211.65 L1794.1 1211.65 L1793.52 1211.65 L1792.93 1211.65 L1792.34 1211.65 L1791.76 1211.65 L1791.17 1211.65 L1790.58 1211.65 L1790 1211.65 L1789.41 1211.65 L1788.82 1211.65 L1788.24 1211.65 L1787.65 1211.65 L1787.06 1211.65 L1786.48 1211.65 L1785.89 1211.65 L1785.31 1211.65 L1784.72 1211.65 L1784.13 1211.65 L1783.55 1211.65 L1782.96 1211.65 L1782.37 1211.65 L1781.79 1211.65 L1781.2 1211.65 L1780.61 1211.65 L1780.03 1211.65 L1779.44 1211.65 L1778.86 1211.65 L1778.27 1211.65 L1777.68 1211.65 L1777.1 1211.65 L1776.51 1211.65 L1775.92 1211.65 L1775.34 1211.65 L1774.75 1211.65 L1774.16 1211.65 L1773.58 1211.65 L1772.99 1211.65 L1772.4 1211.65 L1771.82 1211.65 L1771.23 1211.65 L1770.65 1211.65 L1770.06 1211.65 L1769.47 1211.65 L1768.89 1211.65 L1768.3 1211.65 L1767.71 1211.65 L1767.13 1211.65 L1766.54 1211.65 L1765.95 1211.65 L1765.37 1211.65 L1764.78 1211.65 L1764.19 1211.65 L1763.61 1211.65 L1763.02 1211.65 L1762.44 1211.65 L1761.85 1211.65 L1761.26 1211.65 L1760.68 1211.65 L1760.09 1211.65 L1759.5 1211.65 L1758.92 1211.65 L1758.33 1211.65 L1757.74 1211.65 L1757.16 1211.65 L1756.57 1211.65 L1755.99 1211.65 L1755.4 1211.65 L1754.81 1211.65 L1754.23 1211.65 L1753.64 1211.65 L1753.05 1211.65 L1752.47 1211.65 L1751.88 1211.65 L1751.29 1211.65 L1750.71 1211.65 L1750.12 1211.65 L1749.53 1211.65 L1748.95 1211.65 L1748.36 1211.65 L1747.78 1211.65 L1747.19 1211.65 L1746.6 1211.65 L1746.02 1211.65 L1745.43 1211.65 L1744.84 1211.65 L1744.26 1211.65 L1743.67 1211.65 L1743.08 1211.65 L1742.5 1211.65 L1741.91 1211.65 L1741.32 1211.65 L1740.74 1211.65 L1740.15 1211.65 L1739.57 1211.65 L1738.98 1211.65 L1738.39 1211.65 L1737.81 1211.65 L1737.22 1211.65 L1736.63 1211.65 L1736.05 1211.65 L1735.46 1211.65 L1734.87 1211.65 L1734.29 1211.65 L1733.7 1211.65 L1733.11 1211.65 L1732.53 1211.65 L1731.94 1211.65 L1731.36 1211.65 L1730.77 1211.65 L1730.18 1211.65 L1729.6 1211.65 L1729.01 1211.65 L1728.42 1211.65 L1727.84 1211.65 L1727.25 1211.65 L1726.66 1211.65 L1726.08 1211.65 L1725.49 1211.65 L1724.91 1211.65 L1724.32 1211.65 L1723.73 1211.65 L1723.15 1211.65 L1722.56 1211.65 L1721.97 1211.65 L1721.39 1211.65 L1720.8 1211.65 L1720.21 1211.65 L1719.63 1211.65 L1719.04 1211.65 L1718.45 1211.65 L1717.87 1211.65 L1717.28 1211.65 L1716.7 1211.65 L1716.11 1211.65 L1715.52 1211.65 L1714.94 1211.65 L1714.35 1211.65 L1713.76 1211.65 L1713.18 1211.65 L1712.59 1211.65 L1712 1211.65 L1711.42 1211.65 L1710.83 1211.65 L1710.24 1211.65 L1709.66 1211.65 L1709.07 1211.65 L1708.49 1211.65 L1707.9 1211.65 L1707.31 1211.65 L1706.73 1211.65 L1706.14 1211.65 L1705.55 1211.65 L1704.97 1211.65 L1704.38 1211.65 L1703.79 1211.65 L1703.21 1211.65 L1702.62 1211.65 L1702.04 1211.65 L1701.45 1211.65 L1700.86 1211.65 L1700.28 1211.65 L1699.69 1211.65 L1699.1 1211.65 L1698.52 1211.65 L1697.93 1211.65 L1697.34 1211.65 L1696.76 1211.65 L1696.17 1211.65 L1695.58 1211.65 L1695 1211.65 L1694.41 1211.65 L1693.83 1211.65 L1693.24 1211.65 L1692.65 1211.65 L1692.07 1211.65 L1691.48 1211.65 L1690.89 1211.65 L1690.31 1211.65 L1689.72 1211.65 L1689.13 1211.65 L1688.55 1211.65 L1687.96 1211.65 L1687.37 1211.65 L1686.79 1211.65 L1686.2 1211.65 L1685.62 1211.65 L1685.03 1211.65 L1684.44 1211.65 L1683.86 1211.65 L1683.27 1211.65 L1682.68 1211.65 L1682.1 1211.65 L1681.51 1211.65 L1680.92 1211.65 L1680.34 1211.65 L1679.75 1211.65 L1679.17 1211.65 L1678.58 1211.65 L1677.99 1211.65 L1677.41 1211.65 L1676.82 1211.65 L1676.23 1211.65 L1675.65 1211.65 L1675.06 1211.65 L1674.47 1211.65 L1673.89 1211.65 L1673.3 1211.65 L1672.71 1211.65 L1672.13 1211.65 L1671.54 1211.65 L1670.96 1211.65 L1670.37 1211.65 L1669.78 1211.65 L1669.2 1211.65 L1668.61 1211.65 L1668.02 1211.65 L1667.44 1211.65 L1666.85 1211.65 L1666.26 1211.65 L1665.68 1211.65 L1665.09 1211.65 L1664.5 1211.65 L1663.92 1211.65 L1663.33 1211.65 L1662.75 1211.65 L1662.16 1211.65 L1661.57 1211.65 L1660.99 1211.65 L1660.4 1211.65 L1659.81 1211.65 L1659.23 1211.65 L1658.64 1211.65 L1658.05 1211.65 L1657.47 1211.65 L1656.88 1211.65 L1656.29 1211.65 L1655.71 1211.65 L1655.12 1211.65 L1654.54 1211.65 L1653.95 1211.65 L1653.36 1211.65 L1652.78 1211.65 L1652.19 1211.65 L1651.6 1211.65 L1651.02 1211.65 L1650.43 1211.65 L1649.84 1211.65 L1649.26 1211.65 L1648.67 1211.65 L1648.09 1211.65 L1647.5 1211.65 L1646.91 1211.65 L1646.33 1211.65 L1645.74 1211.65 L1645.15 1211.65 L1644.57 1211.65 L1643.98 1211.65 L1643.39 1211.65 L1642.81 1211.65 L1642.22 1211.65 L1641.63 1211.65 L1641.05 1211.65 L1640.46 1211.65 L1639.88 1211.65 L1639.29 1211.65 L1638.7 1211.65 L1638.12 1211.65 L1637.53 1211.65 L1636.94 1211.65 L1636.36 1211.65 L1635.77 1211.65 L1635.18 1211.65 L1634.6 1211.65 L1634.01 1211.65 L1633.42 1211.65 L1632.84 1211.65 L1632.25 1211.65 L1631.67 1211.65 L1631.08 1211.65 L1630.49 1211.65 L1629.91 1211.65 L1629.32 1211.65 L1628.73 1211.65 L1628.15 1211.65 L1627.56 1211.65 L1626.97 1211.65 L1626.39 1211.65 L1625.8 1211.65 L1625.22 1211.65 L1624.63 1211.65 L1624.04 1211.65 L1623.46 1211.65 L1622.87 1211.65 L1622.28 1211.65 L1621.7 1211.65 L1621.11 1211.65 L1620.52 1211.65 L1619.94 1211.65 L1619.35 1211.65 L1618.76 1211.65 L1618.18 1211.65 L1617.59 1211.65 L1617.01 1211.65 L1616.42 1211.65 L1615.83 1211.65 L1615.25 1211.65 L1614.66 1211.65 L1614.07 1211.65 L1613.49 1211.65 L1612.9 1211.65 L1612.31 1211.65 L1611.73 1211.65 L1611.14 1211.65 L1610.55 1211.65 L1609.97 1211.65 L1609.38 1211.65 L1608.8 1211.65 L1608.21 1211.65 L1607.62 1211.65 L1607.04 1211.65 L1606.45 1211.65 L1605.86 1211.65 L1605.28 1211.65 L1604.69 1211.65 L1604.1 1211.65 L1603.52 1211.65 L1602.93 1211.65 L1602.34 1211.65 L1601.76 1211.65 L1601.17 1211.65 L1600.59 1211.65 L1600 1211.65 L1599.41 1211.65 L1598.83 1211.65 L1598.24 1211.65 L1597.65 1211.65 L1597.07 1211.65 L1596.48 1211.65 L1595.89 1211.65 L1595.31 1211.65 L1594.72 1211.65 L1594.14 1211.65 L1593.55 1211.65 L1592.96 1211.65 L1592.38 1211.65 L1591.79 1211.65 L1591.2 1211.65 L1590.62 1211.65 L1590.03 1211.65 L1589.44 1211.65 L1588.86 1211.65 L1588.27 1211.65 L1587.68 1211.65 L1587.1 1211.65 L1586.51 1211.65 L1585.93 1211.65 L1585.34 1211.65 L1584.75 1211.65 L1584.17 1211.65 L1583.58 1211.65 L1582.99 1211.65 L1582.41 1211.65 L1581.82 1211.65 L1581.23 1211.65 L1580.65 1211.65 L1580.06 1211.65 L1579.47 1211.65 L1578.89 1211.65 L1578.3 1211.65 L1577.72 1211.65 L1577.13 1211.65 L1576.54 1211.65 L1575.96 1211.65 L1575.37 1211.65 L1574.78 1211.65 L1574.2 1211.65 L1573.61 1211.65 L1573.02 1211.65 L1572.44 1211.65 L1571.85 1211.65 L1571.27 1211.65 L1570.68 1211.65 L1570.09 1211.65 L1569.51 1211.65 L1568.92 1211.65 L1568.33 1211.65 L1567.75 1211.65 L1567.16 1211.65 L1566.57 1211.65 L1565.99 1211.65 L1565.4 1211.65 L1564.81 1211.65 L1564.23 1211.65 L1563.64 1211.65 L1563.06 1211.65 L1562.47 1211.65 L1561.88 1211.65 L1561.3 1211.65 L1560.71 1211.65 L1560.12 1211.65 L1559.54 1211.65 L1558.95 1211.65 L1558.36 1211.65 L1557.78 1211.65 L1557.19 1211.65 L1556.6 1211.65 L1556.02 1211.65 L1555.43 1211.65 L1554.85 1211.65 L1554.26 1211.65 L1553.67 1211.65 L1553.09 1211.65 L1552.5 1211.65 L1551.91 1211.65 L1551.33 1211.65 L1550.74 1211.65 L1550.15 1211.65 L1549.57 1211.65 L1548.98 1211.65 L1548.4 1211.65 L1547.81 1211.65 L1547.22 1211.65 L1546.64 1211.65 L1546.05 1211.65 L1545.46 1211.65 L1544.88 1211.65 L1544.29 1211.65 L1543.7 1211.65 L1543.12 1211.65 L1542.53 1211.65 L1541.94 1211.65 L1541.36 1211.65 L1540.77 1211.65 L1540.19 1211.65 L1539.6 1211.65 L1539.01 1211.65 L1538.43 1211.65 L1537.84 1211.65 L1537.25 1211.65 L1536.67 1211.65 L1536.08 1211.65 L1535.49 1211.65 L1534.91 1211.65 L1534.32 1211.65 L1533.73 1211.65 L1533.15 1211.65 L1532.56 1211.65 L1531.98 1211.65 L1531.39 1211.65 L1530.8 1211.65 L1530.22 1211.65 L1529.63 1211.65 L1529.04 1211.65 L1528.46 1211.65 L1527.87 1211.65 L1527.28 1211.65 L1526.7 1211.65 L1526.11 1211.65 L1525.52 1211.65 L1524.94 1211.65 L1524.35 1211.65 L1523.77 1211.65 L1523.18 1211.65 L1522.59 1211.65 L1522.01 1211.65 L1521.42 1211.65 L1520.83 1211.65 L1520.25 1211.65 L1519.66 1211.65 L1519.07 1211.65 L1518.49 1211.65 L1517.9 1211.65 L1517.32 1211.65 L1516.73 1211.65 L1516.14 1211.65 L1515.56 1211.65 L1514.97 1211.65 L1514.38 1211.65 L1513.8 1211.65 L1513.21 1211.65 L1512.62 1211.65 L1512.04 1211.65 L1511.45 1211.65 L1510.86 1211.65 L1510.28 1211.65 L1509.69 1211.65 L1509.11 1211.65 L1508.52 1211.65 L1507.93 1211.65 L1507.35 1211.65 L1506.76 1211.65 L1506.17 1211.65 L1505.59 1211.65 L1505 1211.65 L1504.41 1211.65 L1503.83 1211.65 L1503.24 1211.65 L1502.65 1211.65 L1502.07 1211.65 L1501.48 1211.65 L1500.9 1211.65 L1500.31 1211.65 L1499.72 1211.65 L1499.14 1211.65 L1498.55 1211.65 L1497.96 1211.65 L1497.38 1211.65 L1496.79 1211.65 L1496.2 1211.65 L1495.62 1211.65 L1495.03 1211.65 L1494.45 1211.65 L1493.86 1211.65 L1493.27 1211.65 L1492.69 1211.65 L1492.1 1211.65 L1491.51 1211.65 L1490.93 1211.65 L1490.34 1211.65 L1489.75 1211.65 L1489.17 1211.65 L1488.58 1211.65 L1487.99 1211.65 L1487.41 1211.65 L1486.82 1211.65 L1486.24 1211.65 L1485.65 1211.65 L1485.06 1211.65 L1484.48 1211.65 L1483.89 1211.65 L1483.3 1211.65 L1482.72 1211.65 L1482.13 1211.65 L1481.54 1211.65 L1480.96 1211.65 L1480.37 1211.65 L1479.78 1211.65 L1479.2 1211.65 L1478.61 1211.65 L1478.03 1211.65 L1477.44 1211.65 L1476.85 1211.65 L1476.27 1211.65 L1475.68 1211.65 L1475.09 1211.65 L1474.51 1211.65 L1473.92 1211.65 L1473.33 1211.65 L1472.75 1211.65 L1472.16 1211.65 L1471.57 1211.65 L1470.99 1211.65 L1470.4 1211.65 L1469.82 1211.65 L1469.23 1211.65 L1468.64 1211.65 L1468.06 1211.65 L1467.47 1211.65 L1466.88 1211.65 L1466.3 1211.65 L1465.71 1211.65 L1465.12 1211.65 L1464.54 1211.65 L1463.95 1211.65 L1463.37 1211.65 L1462.78 1211.65 L1462.19 1211.65 L1461.61 1211.65 L1461.02 1211.65 L1460.43 1211.65 L1459.85 1211.65 L1459.26 1211.65 L1458.67 1211.65 L1458.09 1211.65 L1457.5 1211.65 L1456.91 1211.65 L1456.33 1211.65 L1455.74 1211.65 L1455.16 1211.65 L1454.57 1211.65 L1453.98 1211.65 L1453.4 1211.65 L1452.81 1211.65 L1452.22 1211.65 L1451.64 1211.65 L1451.05 1211.65 L1450.46 1211.65 L1449.88 1211.65 L1449.29 1211.65 L1448.7 1211.65 L1448.12 1211.65 L1447.53 1211.65 L1446.95 1211.65 L1446.36 1211.65 L1445.77 1211.65 L1445.19 1211.65 L1444.6 1211.65 L1444.01 1211.65 L1443.43 1211.65 L1442.84 1211.65 L1442.25 1211.65 L1441.67 1211.65 L1441.08 1211.65 L1440.5 1211.65 L1439.91 1211.65 L1439.32 1211.65 L1438.74 1211.65 L1438.15 1211.65 L1437.56 1211.65 L1436.98 1211.65 L1436.39 1211.65 L1435.8 1211.65 L1435.22 1211.65 L1434.63 1211.65 L1434.04 1211.65 L1433.46 1211.65 L1432.87 1211.65 L1432.29 1211.65 L1431.7 1211.65 L1431.11 1211.65 L1430.53 1211.65 L1429.94 1211.65 L1429.35 1211.65 L1428.77 1211.65 L1428.18 1211.65 L1427.59 1211.65 L1427.01 1211.65 L1426.42 1211.65 L1425.83 1211.65 L1425.25 1211.65 L1424.66 1211.65 L1424.08 1211.65 L1423.49 1211.65 L1422.9 1211.65 L1422.32 1211.65 L1421.73 1211.65 L1421.14 1211.65 L1420.56 1211.65 L1419.97 1211.65 L1419.38 1211.65 L1418.8 1211.65 L1418.21 1211.65 L1417.63 1211.65 L1417.04 1211.65 L1416.45 1211.65 L1415.87 1211.65 L1415.28 1211.65 L1414.69 1211.65 L1414.11 1211.65 L1413.52 1211.65 L1412.93 1211.65 L1412.35 1211.65 L1411.76 1211.65 L1411.17 1211.65 L1410.59 1211.65 L1410 1211.65 L1409.42 1211.65 L1408.83 1211.65 L1408.24 1211.65 L1407.66 1211.65 L1407.07 1211.65 L1406.48 1211.65 L1405.9 1211.65 L1405.31 1211.65 L1404.72 1211.65 L1404.14 1211.65 L1403.55 1211.65 L1402.96 1211.65 L1402.38 1211.65 L1401.79 1211.65 L1401.21 1211.65 L1400.62 1211.65 L1400.03 1211.65 L1399.45 1211.65 L1398.86 1211.65 L1398.27 1211.65 L1397.69 1211.65 L1397.1 1211.65 L1396.51 1211.65 L1395.93 1211.65 L1395.34 1211.65 L1394.75 1211.65 L1394.17 1211.65 L1393.58 1211.65 L1393 1211.65 L1392.41 1211.65 L1391.82 1211.65 L1391.24 1211.65 L1390.65 1211.65 L1390.06 1211.65 L1389.48 1211.65 L1388.89 1211.65 L1388.3 1211.65 L1387.72 1211.65 L1387.13 1211.65 L1386.55 1211.65 L1385.96 1211.65 L1385.37 1211.65 L1384.79 1211.65 L1384.2 1211.65 L1383.61 1211.65 L1383.03 1211.65 L1382.44 1211.65 L1381.85 1211.65 L1381.27 1211.65 L1380.68 1211.65 L1380.09 1211.65 L1379.51 1211.65 L1378.92 1211.65 L1378.34 1211.65 L1377.75 1211.65 L1377.16 1211.65 L1376.58 1211.65 L1375.99 1211.65 L1375.4 1211.65 L1374.82 1211.65 L1374.23 1211.65 L1373.64 1211.65 L1373.06 1211.65 L1372.47 1211.65 L1371.88 1211.65 L1371.3 1211.65 L1370.71 1211.65 L1370.13 1211.65 L1369.54 1211.65 L1368.95 1211.65 L1368.37 1211.65 L1367.78 1211.65 L1367.19 1211.65 L1366.61 1211.65 L1366.02 1211.65 L1365.43 1211.65 L1364.85 1211.65 L1364.26 1211.65 L1363.68 1211.65 L1363.09 1211.65 L1362.5 1211.65 L1361.92 1211.65 L1361.33 1211.65 L1360.74 1211.65 L1360.16 1211.65 L1359.57 1211.65 L1358.98 1211.65 L1358.4 1211.65 L1357.81 1211.65 L1357.22 1211.65 L1356.64 1211.65 L1356.05 1211.65 L1355.47 1211.65 L1354.88 1211.65 L1354.29 1211.65 L1353.71 1211.65 L1353.12 1211.65 L1352.53 1211.65 L1351.95 1211.65 L1351.36 1211.65 L1350.77 1211.65 L1350.19 1211.65 L1349.6 1211.65 L1349.01 1211.65 L1348.43 1211.65 L1347.84 1211.65 L1347.26 1211.65 L1346.67 1211.65 L1346.08 1211.65 L1345.5 1211.65 L1344.91 1211.65 L1344.32 1211.65 L1343.74 1211.65 L1343.15 1211.65 L1342.56 1211.65 L1341.98 1211.65 L1341.39 1211.65 L1340.8 1211.65 L1340.22 1211.65 L1339.63 1211.65 L1339.05 1211.65 L1338.46 1211.65 L1337.87 1211.65 L1337.29 1211.65 L1336.7 1211.65 L1336.11 1211.65 L1335.53 1211.65 L1334.94 1211.65 L1334.35 1211.65 L1333.77 1211.65 L1333.18 1211.65 L1332.6 1211.65 L1332.01 1211.65 L1331.42 1211.65 L1330.84 1211.65 L1330.25 1211.65 L1329.66 1211.65 L1329.08 1211.65 L1328.49 1211.65 L1327.9 1211.65 L1327.32 1211.65 L1326.73 1211.65 L1326.14 1211.65 L1325.56 1211.65 L1324.97 1211.65 L1324.39 1211.65 L1323.8 1211.65 L1323.21 1211.65 L1322.63 1211.65 L1322.04 1211.65 L1321.45 1211.65 L1320.87 1211.65 L1320.28 1211.65 L1319.69 1211.65 L1319.11 1211.65 L1318.52 1211.65 L1317.93 1211.65 L1317.35 1211.65 L1316.76 1211.65 L1316.18 1211.65 L1315.59 1211.65 L1315 1211.65 L1314.42 1211.65 L1313.83 1211.65 L1313.24 1211.65 L1312.66 1211.65 L1312.07 1211.65 L1311.48 1211.65 L1310.9 1211.65 L1310.31 1211.65 L1309.73 1211.65 L1309.14 1211.65 L1308.55 1211.65 L1307.97 1211.65 L1307.38 1211.65 L1306.79 1211.65 L1306.21 1211.65 L1305.62 1211.65 L1305.03 1211.65 L1304.45 1211.65 L1303.86 1211.65 L1303.27 1211.65 L1302.69 1211.65 L1302.1 1211.65 L1301.52 1211.65 L1300.93 1211.65 L1300.34 1211.65 L1299.76 1211.65 L1299.17 1211.65 L1298.58 1211.65 L1298 1211.65 L1297.41 1211.65 L1296.82 1211.65 L1296.24 1211.65 L1295.65 1211.65 L1295.06 1211.65 L1294.48 1211.65 L1293.89 1211.65 L1293.31 1211.65 L1292.72 1211.65 L1292.13 1211.65 L1291.55 1211.65 L1290.96 1211.65 L1290.37 1211.65 L1289.79 1211.65 L1289.2 1211.65 L1288.61 1211.65 L1288.03 1211.65 L1287.44 1211.65 L1286.86 1211.65 L1286.27 1211.65 L1285.68 1211.65 L1285.1 1211.65 L1284.51 1211.65 L1283.92 1211.65 L1283.34 1211.65 L1282.75 1211.65 L1282.16 1211.65 L1281.58 1211.65 L1280.99 1211.65 L1280.4 1211.65 L1279.82 1211.65 L1279.23 1211.65 L1278.65 1211.65 L1278.06 1211.65 L1277.47 1211.65 L1276.89 1211.65 L1276.3 1211.65 L1275.71 1211.65 L1275.13 1211.65 L1274.54 1211.65 L1273.95 1211.65 L1273.37 1211.65 L1272.78 1211.65 L1272.19 1211.65 L1271.61 1211.65 L1271.02 1211.65 L1270.44 1211.65 L1269.85 1211.65 L1269.26 1211.65 L1268.68 1211.65 L1268.09 1211.65 L1267.5 1211.65 L1266.92 1211.65 L1266.33 1211.65 L1265.74 1211.65 L1265.16 1211.65 L1264.57 1211.65 L1263.98 1211.65 L1263.4 1211.65 L1262.81 1211.65 L1262.23 1211.65 L1261.64 1211.65 L1261.05 1211.65 L1260.47 1211.65 L1259.88 1211.65 L1259.29 1211.65 L1258.71 1211.65 L1258.12 1211.65 L1257.53 1211.65 L1256.95 1211.65 L1256.36 1211.65 L1255.78 1211.65 L1255.19 1211.65 L1254.6 1211.65 L1254.02 1211.65 L1253.43 1211.65 L1252.84 1211.65 L1252.26 1211.65 L1251.67 1211.65 L1251.08 1211.65 L1250.5 1211.65 L1249.91 1211.65 L1249.32 1211.65 L1248.74 1211.65 L1248.15 1211.65 L1247.57 1211.65 L1246.98 1211.65 L1246.39 1211.65 L1245.81 1211.65 L1245.22 1211.65 L1244.63 1211.65 L1244.05 1211.65 L1243.46 1211.65 L1242.87 1211.65 L1242.29 1211.65 L1241.7 1211.65 L1241.11 1211.65 L1240.53 1211.65 L1239.94 1211.65 L1239.36 1211.65 L1238.77 1211.65 L1238.18 1211.65 L1237.6 1211.65 L1237.01 1211.65 L1236.42 1211.65 L1235.84 1211.65 L1235.25 1211.65 L1234.66 1211.65 L1234.08 1211.65 L1233.49 1211.65 L1232.91 1211.65 L1232.32 1211.65 L1231.73 1211.65 L1231.15 1211.65 L1230.56 1211.65 L1229.97 1211.65 L1229.39 1211.65 L1228.8 1211.65 L1228.21 1211.65 L1227.63 1211.65 L1227.04 1211.65 L1226.45 1211.65 L1225.87 1211.65 L1225.28 1211.65 L1224.7 1211.65 L1224.11 1211.65 L1223.52 1211.65 L1222.94 1211.65 L1222.35 1211.65 L1221.76 1211.65 L1221.18 1211.65 L1220.59 1211.65 L1220 1211.65 L1219.42 1211.65 L1218.83 1211.65 L1218.24 1211.65 L1217.66 1211.65 L1217.07 1211.65 L1216.49 1211.65 L1215.9 1211.65 L1215.31 1211.65 L1214.73 1211.65 L1214.14 1211.65 L1213.55 1211.65 L1212.97 1211.65 L1212.38 1211.65 L1211.79 1211.65 L1211.21 1211.65 L1210.62 1211.65 L1210.03 1211.65 L1209.45 1211.65 L1208.86 1211.65 L1208.28 1211.65 L1207.69 1211.65 L1207.1 1211.65 L1206.52 1211.65 L1205.93 1211.65 L1205.34 1211.65 L1204.76 1211.65 L1204.17 1211.65 L1203.58 1211.65 L1203 1211.65 L1202.41 1211.65 L1201.83 1211.65 L1201.24 1211.65 L1200.65 1211.65 L1200.07 1211.65 L1199.48 1211.65 L1198.89 1211.65 L1198.31 1211.65 L1197.72 1211.65 L1197.13 1211.65 L1196.55 1211.65 L1195.96 1211.65 L1195.37 1211.65 L1194.79 1211.65 L1194.2 1211.65 L1193.62 1211.65 L1193.03 1211.65 L1192.44 1211.65 L1191.86 1211.65 L1191.27 1211.65 L1190.68 1211.65 L1190.1 1211.65 L1189.51 1211.65 L1188.92 1211.65 L1188.34 1211.65 L1187.75 1211.65 L1187.16 1211.65 L1186.58 1211.65 L1185.99 1211.65 L1185.41 1211.65 L1184.82 1211.65 L1184.23 1211.65 L1183.65 1211.65 L1183.06 1211.65 L1182.47 1211.65 L1181.89 1211.65 L1181.3 1211.65 L1180.71 1211.65 L1180.13 1211.65 L1179.54 1211.65 L1178.96 1211.65 L1178.37 1211.65 L1177.78 1211.65 L1177.2 1211.65 L1176.61 1211.65 L1176.02 1211.65 L1175.44 1211.65 L1174.85 1211.65 L1174.26 1211.65 L1173.68 1211.65 L1173.09 1211.65 L1172.5 1211.65 L1171.92 1211.65 L1171.33 1211.65 L1170.75 1211.65 L1170.16 1211.65 L1169.57 1211.65 L1168.99 1211.65 L1168.4 1211.65 L1167.81 1211.65 L1167.23 1211.65 L1166.64 1211.65 L1166.05 1211.65 L1165.47 1211.65 L1164.88 1211.65 L1164.29 1211.65 L1163.71 1211.65 L1163.12 1211.65 L1162.54 1211.65 L1161.95 1211.65 L1161.36 1211.65 L1160.78 1211.65 L1160.19 1211.65 L1159.6 1211.65 L1159.02 1211.65 L1158.43 1211.65 L1157.84 1211.65 L1157.26 1211.65 L1156.67 1211.65 L1156.09 1211.65 L1155.5 1211.65 L1154.91 1211.65 L1154.33 1211.65 L1153.74 1211.65 L1153.15 1211.65 L1152.57 1211.65 L1151.98 1211.65 L1151.39 1211.65 L1150.81 1211.65 L1150.22 1211.65 L1149.63 1211.65 L1149.05 1211.65 L1148.46 1211.65 L1147.88 1211.65 L1147.29 1211.65 L1146.7 1211.65 L1146.12 1211.65 L1145.53 1211.65 L1144.94 1211.65 L1144.36 1211.65 L1143.77 1211.65 L1143.18 1211.65 L1142.6 1211.65 L1142.01 1211.65 L1141.42 1211.65 L1140.84 1211.65 L1140.25 1211.65 L1139.67 1211.65 L1139.08 1211.65 L1138.49 1211.65 L1137.91 1211.65 L1137.32 1211.65 L1136.73 1211.65 L1136.15 1211.65 L1135.56 1211.65 L1134.97 1211.65 L1134.39 1211.65 L1133.8 1211.65 L1133.21 1211.65 L1132.63 1211.65 L1132.04 1211.65 L1131.46 1211.65 L1130.87 1211.65 L1130.28 1211.65 L1129.7 1211.65 L1129.11 1211.65 L1128.52 1211.65 L1127.94 1211.65 L1127.35 1211.65 L1126.76 1211.65 L1126.18 1211.65 L1125.59 1211.65 L1125.01 1211.65 L1124.42 1211.65 L1123.83 1211.65 L1123.25 1211.65 L1122.66 1211.65 L1122.07 1211.65 L1121.49 1211.65 L1120.9 1211.65 L1120.31 1211.65 L1119.73 1211.65 L1119.14 1211.65 L1118.55 1211.65 L1117.97 1211.65 L1117.38 1211.65 L1116.8 1211.65 L1116.21 1211.65 L1115.62 1211.65 L1115.04 1211.65 L1114.45 1211.65 L1113.86 1211.65 L1113.28 1211.65 L1112.69 1211.65 L1112.1 1211.65 L1111.52 1211.65 L1110.93 1211.65 L1110.34 1211.65 L1109.76 1211.65 L1109.17 1211.65 L1108.59 1211.65 L1108 1211.65 L1107.41 1211.65 L1106.83 1211.65 L1106.24 1211.65 L1105.65 1211.65 L1105.07 1211.65 L1104.48 1211.65 L1103.89 1211.65 L1103.31 1211.65 L1102.72 1211.65 L1102.14 1211.65 L1101.55 1211.65 L1100.96 1211.65 L1100.38 1211.65 L1099.79 1211.65 L1099.2 1211.65 L1098.62 1211.65 L1098.03 1211.65 L1097.44 1211.65 L1096.86 1211.65 L1096.27 1211.65 L1095.68 1211.65 L1095.1 1211.65 L1094.51 1211.65 L1093.93 1211.65 L1093.34 1211.65 L1092.75 1211.65 L1092.17 1211.65 L1091.58 1211.65 L1090.99 1211.65 L1090.41 1211.65 L1089.82 1211.65 L1089.23 1211.65 L1088.65 1211.65 L1088.06 1211.65 L1087.47 1211.65 L1086.89 1211.65 L1086.3 1211.65 L1085.72 1211.65 L1085.13 1211.65 L1084.54 1211.65 L1083.96 1211.65 L1083.37 1211.65 L1082.78 1211.65 L1082.2 1211.65 L1081.61 1211.65 L1081.02 1211.65 L1080.44 1211.65 L1079.85 1211.65 L1079.26 1211.65 L1078.68 1211.65 L1078.09 1211.65 L1077.51 1211.65 L1076.92 1211.65 L1076.33 1211.65 L1075.75 1211.65 L1075.16 1211.65 L1074.57 1211.65 L1073.99 1211.65 L1073.4 1211.65 L1072.81 1211.65 L1072.23 1211.65 L1071.64 1211.65 L1071.06 1211.65 L1070.47 1211.65 L1069.88 1211.65 L1069.3 1211.65 L1068.71 1211.65 L1068.12 1211.65 L1067.54 1211.65 L1066.95 1211.65 L1066.36 1211.65 L1065.78 1211.65 L1065.19 1211.65 L1064.6 1211.65 L1064.02 1211.65 L1063.43 1211.65 L1062.85 1211.65 L1062.26 1211.65 L1061.67 1211.65 L1061.09 1211.65 L1060.5 1211.65 L1059.91 1211.65 L1059.33 1211.65 L1058.74 1211.65 L1058.15 1211.65 L1057.57 1211.65 L1056.98 1211.65 L1056.39 1211.65 L1055.81 1211.65 L1055.22 1211.65 L1054.64 1211.65 L1054.05 1211.65 L1053.46 1211.65 L1052.88 1211.65 L1052.29 1211.65 L1051.7 1211.65 L1051.12 1211.65 L1050.53 1211.65 L1049.94 1211.65 L1049.36 1211.65 L1048.77 1211.65 L1048.19 1211.65 L1047.6 1211.65 L1047.01 1211.65 L1046.43 1211.65 L1045.84 1211.65 L1045.25 1211.65 L1044.67 1211.65 L1044.08 1211.65 L1043.49 1211.65 L1042.91 1211.65 L1042.32 1211.65 L1041.73 1211.65 L1041.15 1211.65 L1040.56 1211.65 L1039.98 1211.65 L1039.39 1211.65 L1038.8 1211.65 L1038.22 1211.65 L1037.63 1211.65 L1037.04 1211.65 L1036.46 1211.65 L1035.87 1211.65 L1035.28 1211.65 L1034.7 1211.65 L1034.11 1211.65 L1033.52 1211.65 L1032.94 1211.65 L1032.35 1211.65 L1031.77 1211.65 L1031.18 1211.65 L1030.59 1211.65 L1030.01 1211.65 L1029.42 1211.65 L1028.83 1211.65 L1028.25 1211.65 L1027.66 1211.65 L1027.07 1211.65 L1026.49 1211.65 L1025.9 1211.65 L1025.32 1211.65 L1024.73 1211.65 L1024.14 1211.65 L1023.56 1211.65 L1022.97 1211.65 L1022.38 1211.65 L1021.8 1211.65 L1021.21 1211.65 L1020.62 1211.65 L1020.04 1211.65 L1019.45 1211.65 L1018.86 1211.65 L1018.28 1211.65 L1017.69 1211.65 L1017.11 1211.65 L1016.52 1211.65 L1015.93 1211.65 L1015.35 1211.65 L1014.76 1211.65 L1014.17 1211.65 L1013.59 1211.65 L1013 1211.65 L1012.41 1211.65 L1011.83 1211.65 L1011.24 1211.65 L1010.65 1211.65 L1010.07 1211.65 L1009.48 1211.65 L1008.9 1211.65 L1008.31 1211.65 L1007.72 1211.65 L1007.14 1211.65 L1006.55 1211.65 L1005.96 1211.65 L1005.38 1211.65 L1004.79 1211.65 L1004.2 1211.65 L1003.62 1211.65 L1003.03 1211.65 L1002.44 1211.65 L1001.86 1211.65 L1001.27 1211.65 L1000.69 1211.65 L1000.1 1211.65 L999.513 1211.65 L998.926 1211.65 L998.34 1211.65 L997.754 1211.65 L997.167 1211.65 L996.581 1211.65 L995.994 1211.65 L995.408 1211.65 L994.822 1211.65 L994.235 1211.65 L993.649 1211.65 L993.062 1211.65 L992.476 1211.65 L991.889 1211.65 L991.303 1211.65 L990.717 1211.65 L990.13 1211.65 L989.544 1211.65 L988.957 1211.65 L988.371 1211.65 L987.785 1211.65 L987.198 1211.65 L986.612 1211.65 L986.025 1211.65  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.08 986.612,1212.08 987.198,1212.08 987.785,1212.08 988.371,1212.08 988.957,1212.08 989.544,1212.08 990.13,1212.08 990.717,1212.08 991.303,1212.08 991.889,1212.08 992.476,1212.08 993.062,1212.08 993.649,1212.08 994.235,1212.08 994.822,1212.08 995.408,1212.08 995.994,1212.08 996.581,1212.08 997.167,1212.08 997.754,1212.08 998.34,1212.08 998.926,1212.08 999.513,1212.08 1000.1,1212.08 1000.69,1212.08 1001.27,1212.08 1001.86,1212.08 1002.44,1212.08 1003.03,1212.08 1003.62,1212.08 1004.2,1212.08 1004.79,1212.08 1005.38,1212.08 1005.96,1212.08 1006.55,1212.08 1007.14,1212.08 1007.72,1212.08 1008.31,1212.08 1008.9,1212.08 1009.48,1212.08 1010.07,1212.08 1010.65,1212.08 1011.24,1212.08 1011.83,1212.08 1012.41,1212.08 1013,1212.08 1013.59,1212.08 1014.17,1212.08 1014.76,1212.08 1015.35,1212.08 1015.93,1212.08 1016.52,1212.08 1017.11,1212.08 1017.69,1212.08 1018.28,1212.08 1018.86,1212.08 1019.45,1212.08 1020.04,1212.08 1020.62,1212.08 1021.21,1212.08 1021.8,1212.08 1022.38,1212.08 1022.97,1212.08 1023.56,1212.08 1024.14,1212.08 1024.73,1212.08 1025.32,1212.08 1025.9,1212.08 1026.49,1212.08 1027.07,1212.08 1027.66,1212.08 1028.25,1212.08 1028.83,1212.08 1029.42,1212.08 1030.01,1212.08 1030.59,1212.08 1031.18,1212.08 1031.77,1212.08 1032.35,1212.08 1032.94,1212.08 1033.52,1212.08 1034.11,1212.08 1034.7,1212.08 1035.28,1212.08 1035.87,1212.08 1036.46,1212.08 1037.04,1212.08 1037.63,1212.08 1038.22,1212.08 1038.8,1212.08 1039.39,1212.08 1039.98,1212.08 1040.56,1212.08 1041.15,1212.08 1041.73,1212.08 1042.32,1212.08 1042.91,1212.08 1043.49,1212.08 1044.08,1212.08 1044.67,1212.08 1045.25,1212.08 1045.84,1212.08 1046.43,1212.08 1047.01,1212.08 1047.6,1212.08 1048.19,1212.08 1048.77,1212.08 1049.36,1212.08 1049.94,1212.08 1050.53,1212.08 1051.12,1212.08 1051.7,1212.08 1052.29,1212.08 1052.88,1212.08 1053.46,1212.08 1054.05,1212.08 1054.64,1212.08 1055.22,1212.08 1055.81,1212.08 1056.39,1212.08 1056.98,1212.08 1057.57,1212.08 1058.15,1212.08 1058.74,1212.08 1059.33,1212.08 1059.91,1212.08 1060.5,1212.08 1061.09,1212.08 1061.67,1212.08 1062.26,1212.08 1062.85,1212.08 1063.43,1212.08 1064.02,1212.08 1064.6,1212.08 1065.19,1212.08 1065.78,1212.08 1066.36,1212.08 1066.95,1212.08 1067.54,1212.08 1068.12,1212.08 1068.71,1212.08 1069.3,1212.08 1069.88,1212.08 1070.47,1212.08 1071.06,1212.08 1071.64,1212.08 1072.23,1212.08 1072.81,1212.08 1073.4,1212.08 1073.99,1212.08 1074.57,1212.08 1075.16,1212.08 1075.75,1212.08 1076.33,1212.08 1076.92,1212.08 1077.51,1212.08 1078.09,1212.08 1078.68,1212.08 1079.26,1212.08 1079.85,1212.08 1080.44,1212.08 1081.02,1212.08 1081.61,1212.08 1082.2,1212.08 1082.78,1212.08 1083.37,1212.08 1083.96,1212.08 1084.54,1212.08 1085.13,1212.08 1085.72,1212.08 1086.3,1212.08 1086.89,1212.08 1087.47,1212.08 1088.06,1212.08 1088.65,1212.08 1089.23,1212.08 1089.82,1212.08 1090.41,1212.08 1090.99,1212.08 1091.58,1212.08 1092.17,1212.08 1092.75,1212.08 1093.34,1212.08 1093.93,1212.08 1094.51,1212.08 1095.1,1212.08 1095.68,1212.08 1096.27,1212.08 1096.86,1212.08 1097.44,1212.08 1098.03,1212.08 1098.62,1212.08 1099.2,1212.08 1099.79,1212.08 1100.38,1212.08 1100.96,1212.08 1101.55,1212.08 1102.14,1212.08 1102.72,1212.08 1103.31,1212.08 1103.89,1212.08 1104.48,1212.08 1105.07,1212.08 1105.65,1212.08 1106.24,1212.08 1106.83,1212.08 1107.41,1212.08 1108,1212.08 1108.59,1212.08 1109.17,1212.08 1109.76,1212.08 1110.34,1212.08 1110.93,1212.08 1111.52,1212.08 1112.1,1212.08 1112.69,1212.08 1113.28,1212.08 1113.86,1212.08 1114.45,1212.08 1115.04,1212.08 1115.62,1212.08 1116.21,1212.08 1116.8,1212.08 1117.38,1212.08 1117.97,1212.08 1118.55,1212.08 1119.14,1212.08 1119.73,1212.08 1120.31,1212.08 1120.9,1212.08 1121.49,1212.08 1122.07,1212.08 1122.66,1212.08 1123.25,1212.08 1123.83,1212.08 1124.42,1212.08 1125.01,1212.08 1125.59,1212.08 1126.18,1212.08 1126.76,1212.08 1127.35,1212.08 1127.94,1212.08 1128.52,1212.08 1129.11,1212.08 1129.7,1212.08 1130.28,1212.08 1130.87,1212.08 1131.46,1212.08 1132.04,1212.08 1132.63,1212.08 1133.21,1212.08 1133.8,1212.08 1134.39,1212.08 1134.97,1212.08 1135.56,1212.08 1136.15,1212.08 1136.73,1212.08 1137.32,1212.08 1137.91,1212.08 1138.49,1212.08 1139.08,1212.08 1139.67,1212.08 1140.25,1212.08 1140.84,1212.08 1141.42,1212.08 1142.01,1212.08 1142.6,1212.08 1143.18,1212.08 1143.77,1212.08 1144.36,1212.08 1144.94,1212.08 1145.53,1212.08 1146.12,1212.08 1146.7,1212.08 1147.29,1212.08 1147.88,1212.08 1148.46,1212.08 1149.05,1212.08 1149.63,1212.08 1150.22,1212.08 1150.81,1212.08 1151.39,1212.08 1151.98,1212.08 1152.57,1212.08 1153.15,1212.08 1153.74,1212.08 1154.33,1212.08 1154.91,1212.08 1155.5,1212.08 1156.09,1212.08 1156.67,1212.08 1157.26,1212.08 1157.84,1212.08 1158.43,1212.08 1159.02,1212.08 1159.6,1212.08 1160.19,1212.08 1160.78,1212.08 1161.36,1212.08 1161.95,1212.08 1162.54,1212.08 1163.12,1212.08 1163.71,1212.08 1164.29,1212.08 1164.88,1212.08 1165.47,1212.08 1166.05,1212.08 1166.64,1212.08 1167.23,1212.08 1167.81,1212.08 1168.4,1212.08 1168.99,1212.08 1169.57,1212.08 1170.16,1212.08 1170.75,1212.08 1171.33,1212.08 1171.92,1212.08 1172.5,1212.08 1173.09,1212.08 1173.68,1212.08 1174.26,1212.08 1174.85,1212.08 1175.44,1212.08 1176.02,1212.08 1176.61,1212.08 1177.2,1212.08 1177.78,1212.08 1178.37,1212.08 1178.96,1212.08 1179.54,1212.08 1180.13,1212.08 1180.71,1212.08 1181.3,1212.08 1181.89,1212.08 1182.47,1212.08 1183.06,1212.08 1183.65,1212.08 1184.23,1212.08 1184.82,1212.08 1185.41,1212.08 1185.99,1212.08 1186.58,1212.08 1187.16,1212.08 1187.75,1212.08 1188.34,1212.08 1188.92,1212.08 1189.51,1212.08 1190.1,1212.08 1190.68,1212.08 1191.27,1212.08 1191.86,1212.08 1192.44,1212.08 1193.03,1212.08 1193.62,1212.08 1194.2,1212.08 1194.79,1212.08 1195.37,1212.08 1195.96,1212.08 1196.55,1212.08 1197.13,1212.08 1197.72,1212.08 1198.31,1212.08 1198.89,1212.08 1199.48,1212.08 1200.07,1212.08 1200.65,1212.08 1201.24,1212.08 1201.83,1212.08 1202.41,1212.08 1203,1212.08 1203.58,1212.08 1204.17,1212.08 1204.76,1212.08 1205.34,1212.08 1205.93,1212.08 1206.52,1212.08 1207.1,1212.08 1207.69,1212.08 1208.28,1212.08 1208.86,1212.08 1209.45,1212.08 1210.03,1212.08 1210.62,1212.08 1211.21,1212.08 1211.79,1212.08 1212.38,1212.08 1212.97,1212.08 1213.55,1212.08 1214.14,1212.08 1214.73,1212.08 1215.31,1212.08 1215.9,1212.08 1216.49,1212.08 1217.07,1212.08 1217.66,1212.08 1218.24,1212.08 1218.83,1212.08 1219.42,1212.08 1220,1212.08 1220.59,1212.08 1221.18,1212.08 1221.76,1212.08 1222.35,1212.08 1222.94,1212.08 1223.52,1212.08 1224.11,1212.08 1224.7,1212.08 1225.28,1212.08 1225.87,1212.08 1226.45,1212.08 1227.04,1212.08 1227.63,1212.08 1228.21,1212.08 1228.8,1212.08 1229.39,1212.08 1229.97,1212.08 1230.56,1212.08 1231.15,1212.08 1231.73,1212.08 1232.32,1212.08 1232.91,1212.08 1233.49,1212.08 1234.08,1212.08 1234.66,1212.08 1235.25,1212.08 1235.84,1212.08 1236.42,1212.08 1237.01,1212.08 1237.6,1212.08 1238.18,1212.08 1238.77,1212.08 1239.36,1212.08 1239.94,1212.08 1240.53,1212.08 1241.11,1212.08 1241.7,1212.08 1242.29,1212.08 1242.87,1212.08 1243.46,1212.08 1244.05,1212.08 1244.63,1212.08 1245.22,1212.08 1245.81,1212.08 1246.39,1212.08 1246.98,1212.08 1247.57,1212.08 1248.15,1212.08 1248.74,1212.08 1249.32,1212.08 1249.91,1212.08 1250.5,1212.08 1251.08,1212.08 1251.67,1212.08 1252.26,1212.08 1252.84,1212.08 1253.43,1212.08 1254.02,1212.08 1254.6,1212.08 1255.19,1212.08 1255.78,1212.08 1256.36,1212.08 1256.95,1212.08 1257.53,1212.08 1258.12,1212.08 1258.71,1212.08 1259.29,1212.08 1259.88,1212.08 1260.47,1212.08 1261.05,1212.08 1261.64,1212.08 1262.23,1212.08 1262.81,1212.08 1263.4,1212.08 1263.98,1212.08 1264.57,1212.08 1265.16,1212.08 1265.74,1212.08 1266.33,1212.08 1266.92,1212.08 1267.5,1212.08 1268.09,1212.08 1268.68,1212.08 1269.26,1212.08 1269.85,1212.08 1270.44,1212.08 1271.02,1212.08 1271.61,1212.08 1272.19,1212.08 1272.78,1212.08 1273.37,1212.08 1273.95,1212.08 1274.54,1212.08 1275.13,1212.08 1275.71,1212.08 1276.3,1212.08 1276.89,1212.08 1277.47,1212.08 1278.06,1212.08 1278.65,1212.08 1279.23,1212.08 1279.82,1212.08 1280.4,1212.08 1280.99,1212.08 1281.58,1212.08 1282.16,1212.08 1282.75,1212.08 1283.34,1212.08 1283.92,1212.08 1284.51,1212.08 1285.1,1212.08 1285.68,1212.08 1286.27,1212.08 1286.86,1212.08 1287.44,1212.08 1288.03,1212.08 1288.61,1212.08 1289.2,1212.08 1289.79,1212.08 1290.37,1212.08 1290.96,1212.08 1291.55,1212.08 1292.13,1212.08 1292.72,1212.08 1293.31,1212.08 1293.89,1212.08 1294.48,1212.08 1295.06,1212.08 1295.65,1212.08 1296.24,1212.08 1296.82,1212.08 1297.41,1212.08 1298,1212.08 1298.58,1212.08 1299.17,1212.08 1299.76,1212.08 1300.34,1212.08 1300.93,1212.08 1301.52,1212.08 1302.1,1212.08 1302.69,1212.08 1303.27,1212.08 1303.86,1212.08 1304.45,1212.08 1305.03,1212.08 1305.62,1212.08 1306.21,1212.08 1306.79,1212.08 1307.38,1212.08 1307.97,1212.08 1308.55,1212.08 1309.14,1212.08 1309.73,1212.08 1310.31,1212.08 1310.9,1212.08 1311.48,1212.08 1312.07,1212.08 1312.66,1212.08 1313.24,1212.08 1313.83,1212.08 1314.42,1212.08 1315,1212.08 1315.59,1212.08 1316.18,1212.08 1316.76,1212.08 1317.35,1212.08 1317.93,1212.08 1318.52,1212.08 1319.11,1212.08 1319.69,1212.08 1320.28,1212.08 1320.87,1212.08 1321.45,1212.08 1322.04,1212.08 1322.63,1212.08 1323.21,1212.08 1323.8,1212.08 1324.39,1212.08 1324.97,1212.08 1325.56,1212.08 1326.14,1212.08 1326.73,1212.08 1327.32,1212.08 1327.9,1212.08 1328.49,1212.08 1329.08,1212.08 1329.66,1212.08 1330.25,1212.08 1330.84,1212.08 1331.42,1212.08 1332.01,1212.08 1332.6,1212.08 1333.18,1212.08 1333.77,1212.08 1334.35,1212.08 1334.94,1212.08 1335.53,1212.08 1336.11,1212.08 1336.7,1212.08 1337.29,1212.08 1337.87,1212.08 1338.46,1212.08 1339.05,1212.08 1339.63,1212.08 1340.22,1212.08 1340.8,1212.08 1341.39,1212.08 1341.98,1212.08 1342.56,1212.08 1343.15,1212.08 1343.74,1212.08 1344.32,1212.08 1344.91,1212.08 1345.5,1212.08 1346.08,1212.08 1346.67,1212.08 1347.26,1212.08 1347.84,1212.08 1348.43,1212.08 1349.01,1212.08 1349.6,1212.08 1350.19,1212.08 1350.77,1212.08 1351.36,1212.08 1351.95,1212.08 1352.53,1212.08 1353.12,1212.08 1353.71,1212.08 1354.29,1212.08 1354.88,1212.08 1355.47,1212.08 1356.05,1212.08 1356.64,1212.08 1357.22,1212.08 1357.81,1212.08 1358.4,1212.08 1358.98,1212.08 1359.57,1212.08 1360.16,1212.08 1360.74,1212.08 1361.33,1212.08 1361.92,1212.08 1362.5,1212.08 1363.09,1212.08 1363.68,1212.08 1364.26,1212.08 1364.85,1212.08 1365.43,1212.08 1366.02,1212.08 1366.61,1212.08 1367.19,1212.08 1367.78,1212.08 1368.37,1212.08 1368.95,1212.08 1369.54,1212.08 1370.13,1212.08 1370.71,1212.08 1371.3,1212.08 1371.88,1212.08 1372.47,1212.08 1373.06,1212.08 1373.64,1212.08 1374.23,1212.08 1374.82,1212.08 1375.4,1212.08 1375.99,1212.08 1376.58,1212.08 1377.16,1212.08 1377.75,1212.08 1378.34,1212.08 1378.92,1212.08 1379.51,1212.08 1380.09,1212.08 1380.68,1212.08 1381.27,1212.08 1381.85,1212.08 1382.44,1212.08 1383.03,1212.08 1383.61,1212.08 1384.2,1212.08 1384.79,1212.08 1385.37,1212.08 1385.96,1212.08 1386.55,1212.08 1387.13,1212.08 1387.72,1212.08 1388.3,1212.08 1388.89,1212.08 1389.48,1212.08 1390.06,1212.08 1390.65,1212.08 1391.24,1212.08 1391.82,1212.08 1392.41,1212.08 1393,1212.08 1393.58,1212.08 1394.17,1212.08 1394.75,1212.08 1395.34,1212.08 1395.93,1212.08 1396.51,1212.08 1397.1,1212.08 1397.69,1212.08 1398.27,1212.08 1398.86,1212.08 1399.45,1212.08 1400.03,1212.08 1400.62,1212.08 1401.21,1212.08 1401.79,1212.08 1402.38,1212.08 1402.96,1212.08 1403.55,1212.08 1404.14,1212.08 1404.72,1212.08 1405.31,1212.08 1405.9,1212.08 1406.48,1212.08 1407.07,1212.08 1407.66,1212.08 1408.24,1212.08 1408.83,1212.08 1409.42,1212.08 1410,1212.08 1410.59,1212.08 1411.17,1212.08 1411.76,1212.08 1412.35,1212.08 1412.93,1212.08 1413.52,1212.08 1414.11,1212.08 1414.69,1212.08 1415.28,1212.08 1415.87,1212.08 1416.45,1212.08 1417.04,1212.08 1417.63,1212.08 1418.21,1212.08 1418.8,1212.08 1419.38,1212.08 1419.97,1212.08 1420.56,1212.08 1421.14,1212.08 1421.73,1212.08 1422.32,1212.08 1422.9,1212.08 1423.49,1212.08 1424.08,1212.08 1424.66,1212.08 1425.25,1212.08 1425.83,1212.08 1426.42,1212.08 1427.01,1212.08 1427.59,1212.08 1428.18,1212.08 1428.77,1212.08 1429.35,1212.08 1429.94,1212.08 1430.53,1212.08 1431.11,1212.08 1431.7,1212.08 1432.29,1212.08 1432.87,1212.08 1433.46,1212.08 1434.04,1212.08 1434.63,1212.08 1435.22,1212.08 1435.8,1212.08 1436.39,1212.08 1436.98,1212.08 1437.56,1212.08 1438.15,1212.08 1438.74,1212.08 1439.32,1212.08 1439.91,1212.08 1440.5,1212.08 1441.08,1212.08 1441.67,1212.08 1442.25,1212.08 1442.84,1212.08 1443.43,1212.08 1444.01,1212.08 1444.6,1212.08 1445.19,1212.08 1445.77,1212.08 1446.36,1212.08 1446.95,1212.08 1447.53,1212.08 1448.12,1212.08 1448.7,1212.08 1449.29,1212.08 1449.88,1212.08 1450.46,1212.08 1451.05,1212.08 1451.64,1212.08 1452.22,1212.08 1452.81,1212.08 1453.4,1212.08 1453.98,1212.08 1454.57,1212.08 1455.16,1212.08 1455.74,1212.08 1456.33,1212.08 1456.91,1212.08 1457.5,1212.08 1458.09,1212.08 1458.67,1212.08 1459.26,1212.08 1459.85,1212.08 1460.43,1212.08 1461.02,1212.08 1461.61,1212.08 1462.19,1212.08 1462.78,1212.08 1463.37,1212.08 1463.95,1212.08 1464.54,1212.08 1465.12,1212.08 1465.71,1212.08 1466.3,1212.08 1466.88,1212.08 1467.47,1212.08 1468.06,1212.08 1468.64,1212.08 1469.23,1212.08 1469.82,1212.08 1470.4,1212.08 1470.99,1212.08 1471.57,1212.08 1472.16,1212.08 1472.75,1212.08 1473.33,1212.08 1473.92,1212.08 1474.51,1212.08 1475.09,1212.08 1475.68,1212.08 1476.27,1212.08 1476.85,1212.08 1477.44,1212.08 1478.03,1212.08 1478.61,1212.08 1479.2,1212.08 1479.78,1212.08 1480.37,1212.08 1480.96,1212.08 1481.54,1212.08 1482.13,1212.08 1482.72,1212.08 1483.3,1212.08 1483.89,1212.08 1484.48,1212.08 1485.06,1212.08 1485.65,1212.08 1486.24,1212.08 1486.82,1212.08 1487.41,1212.08 1487.99,1212.08 1488.58,1212.08 1489.17,1212.08 1489.75,1212.08 1490.34,1212.08 1490.93,1212.08 1491.51,1212.08 1492.1,1212.08 1492.69,1212.08 1493.27,1212.08 1493.86,1212.08 1494.45,1212.08 1495.03,1212.08 1495.62,1212.08 1496.2,1212.08 1496.79,1212.08 1497.38,1212.08 1497.96,1212.08 1498.55,1212.08 1499.14,1212.08 1499.72,1212.08 1500.31,1212.08 1500.9,1212.08 1501.48,1212.08 1502.07,1212.08 1502.65,1212.08 1503.24,1212.08 1503.83,1212.08 1504.41,1212.08 1505,1212.08 1505.59,1212.08 1506.17,1212.08 1506.76,1212.08 1507.35,1212.08 1507.93,1212.08 1508.52,1212.08 1509.11,1212.08 1509.69,1212.08 1510.28,1212.08 1510.86,1212.08 1511.45,1212.08 1512.04,1212.08 1512.62,1212.08 1513.21,1212.08 1513.8,1212.08 1514.38,1212.08 1514.97,1212.08 1515.56,1212.08 1516.14,1212.08 1516.73,1212.08 1517.32,1212.08 1517.9,1212.08 1518.49,1212.08 1519.07,1212.08 1519.66,1212.08 1520.25,1212.08 1520.83,1212.08 1521.42,1212.08 1522.01,1212.08 1522.59,1212.08 1523.18,1212.08 1523.77,1212.08 1524.35,1212.08 1524.94,1212.08 1525.52,1212.08 1526.11,1212.08 1526.7,1212.08 1527.28,1212.08 1527.87,1212.08 1528.46,1212.08 1529.04,1212.08 1529.63,1212.08 1530.22,1212.08 1530.8,1212.08 1531.39,1212.08 1531.98,1212.08 1532.56,1212.08 1533.15,1212.08 1533.73,1212.08 1534.32,1212.08 1534.91,1212.08 1535.49,1212.08 1536.08,1212.08 1536.67,1212.08 1537.25,1212.08 1537.84,1212.08 1538.43,1212.08 1539.01,1212.08 1539.6,1212.08 1540.19,1212.08 1540.77,1212.08 1541.36,1212.08 1541.94,1212.08 1542.53,1212.08 1543.12,1212.08 1543.7,1212.08 1544.29,1212.08 1544.88,1212.08 1545.46,1212.08 1546.05,1212.08 1546.64,1212.08 1547.22,1212.08 1547.81,1212.08 1548.4,1212.08 1548.98,1212.08 1549.57,1212.08 1550.15,1212.08 1550.74,1212.08 1551.33,1212.08 1551.91,1212.08 1552.5,1212.08 1553.09,1212.08 1553.67,1212.08 1554.26,1212.08 1554.85,1212.08 1555.43,1212.08 1556.02,1212.08 1556.6,1212.08 1557.19,1212.08 1557.78,1212.08 1558.36,1212.08 1558.95,1212.08 1559.54,1212.08 1560.12,1212.08 1560.71,1212.08 1561.3,1212.08 1561.88,1212.08 1562.47,1212.08 1563.06,1212.08 1563.64,1212.08 1564.23,1212.08 1564.81,1212.08 1565.4,1212.08 1565.99,1212.08 1566.57,1212.08 1567.16,1212.08 1567.75,1212.08 1568.33,1212.08 1568.92,1212.08 1569.51,1212.08 1570.09,1212.08 1570.68,1212.08 1571.27,1212.08 1571.85,1212.08 1572.44,1212.08 1573.02,1212.08 1573.61,1212.08 1574.2,1212.08 1574.78,1212.08 1575.37,1212.08 1575.96,1212.08 1576.54,1212.08 1577.13,1212.08 1577.72,1212.08 1578.3,1212.08 1578.89,1212.08 1579.47,1212.08 1580.06,1212.08 1580.65,1212.08 1581.23,1212.08 1581.82,1212.08 1582.41,1212.08 1582.99,1212.08 1583.58,1212.08 1584.17,1212.08 1584.75,1212.08 1585.34,1212.08 1585.93,1212.08 1586.51,1212.08 1587.1,1212.08 1587.68,1212.08 1588.27,1212.08 1588.86,1212.08 1589.44,1212.08 1590.03,1212.08 1590.62,1212.08 1591.2,1212.08 1591.79,1212.08 1592.38,1212.08 1592.96,1212.08 1593.55,1212.08 1594.14,1212.08 1594.72,1212.08 1595.31,1212.08 1595.89,1212.08 1596.48,1212.08 1597.07,1212.08 1597.65,1212.08 1598.24,1212.08 1598.83,1212.08 1599.41,1212.08 1600,1212.08 1600.59,1212.08 1601.17,1212.08 1601.76,1212.08 1602.34,1212.08 1602.93,1212.08 1603.52,1212.08 1604.1,1212.08 1604.69,1212.08 1605.28,1212.08 1605.86,1212.08 1606.45,1212.08 1607.04,1212.08 1607.62,1212.08 1608.21,1212.08 1608.8,1212.08 1609.38,1212.08 1609.97,1212.08 1610.55,1212.08 1611.14,1212.08 1611.73,1212.08 1612.31,1212.08 1612.9,1212.08 1613.49,1212.08 1614.07,1212.08 1614.66,1212.08 1615.25,1212.08 1615.83,1212.08 1616.42,1212.08 1617.01,1212.08 1617.59,1212.08 1618.18,1212.08 1618.76,1212.08 1619.35,1212.08 1619.94,1212.08 1620.52,1212.08 1621.11,1212.08 1621.7,1212.08 1622.28,1212.08 1622.87,1212.08 1623.46,1212.08 1624.04,1212.08 1624.63,1212.08 1625.22,1212.08 1625.8,1212.08 1626.39,1212.08 1626.97,1212.08 1627.56,1212.08 1628.15,1212.08 1628.73,1212.08 1629.32,1212.08 1629.91,1212.08 1630.49,1212.08 1631.08,1212.08 1631.67,1212.08 1632.25,1212.08 1632.84,1212.08 1633.42,1212.08 1634.01,1212.08 1634.6,1212.08 1635.18,1212.08 1635.77,1212.08 1636.36,1212.08 1636.94,1212.08 1637.53,1212.08 1638.12,1212.08 1638.7,1212.08 1639.29,1212.08 1639.88,1212.08 1640.46,1212.08 1641.05,1212.08 1641.63,1212.08 1642.22,1212.08 1642.81,1212.08 1643.39,1212.08 1643.98,1212.08 1644.57,1212.08 1645.15,1212.08 1645.74,1212.08 1646.33,1212.08 1646.91,1212.08 1647.5,1212.08 1648.09,1212.08 1648.67,1212.08 1649.26,1212.08 1649.84,1212.08 1650.43,1212.08 1651.02,1212.08 1651.6,1212.08 1652.19,1212.08 1652.78,1212.08 1653.36,1212.08 1653.95,1212.08 1654.54,1212.08 1655.12,1212.08 1655.71,1212.08 1656.29,1212.08 1656.88,1212.08 1657.47,1212.08 1658.05,1212.08 1658.64,1212.08 1659.23,1212.08 1659.81,1212.08 1660.4,1212.08 1660.99,1212.08 1661.57,1212.08 1662.16,1212.08 1662.75,1212.08 1663.33,1212.08 1663.92,1212.08 1664.5,1212.08 1665.09,1212.08 1665.68,1212.08 1666.26,1212.08 1666.85,1212.08 1667.44,1212.08 1668.02,1212.08 1668.61,1212.08 1669.2,1212.08 1669.78,1212.08 1670.37,1212.08 1670.96,1212.08 1671.54,1212.08 1672.13,1212.08 1672.71,1212.08 1673.3,1212.08 1673.89,1212.08 1674.47,1212.08 1675.06,1212.08 1675.65,1212.08 1676.23,1212.08 1676.82,1212.08 1677.41,1212.08 1677.99,1212.08 1678.58,1212.08 1679.17,1212.08 1679.75,1212.08 1680.34,1212.08 1680.92,1212.08 1681.51,1212.08 1682.1,1212.08 1682.68,1212.08 1683.27,1212.08 1683.86,1212.08 1684.44,1212.08 1685.03,1212.08 1685.62,1212.08 1686.2,1212.08 1686.79,1212.08 1687.37,1212.08 1687.96,1212.08 1688.55,1212.08 1689.13,1212.08 1689.72,1212.08 1690.31,1212.08 1690.89,1212.08 1691.48,1212.08 1692.07,1212.08 1692.65,1212.08 1693.24,1212.08 1693.83,1212.08 1694.41,1212.08 1695,1212.08 1695.58,1212.08 1696.17,1212.08 1696.76,1212.08 1697.34,1212.08 1697.93,1212.08 1698.52,1212.08 1699.1,1212.08 1699.69,1212.08 1700.28,1212.08 1700.86,1212.08 1701.45,1212.08 1702.04,1212.08 1702.62,1212.08 1703.21,1212.08 1703.79,1212.08 1704.38,1212.08 1704.97,1212.08 1705.55,1212.08 1706.14,1212.08 1706.73,1212.08 1707.31,1212.08 1707.9,1212.08 1708.49,1212.08 1709.07,1212.08 1709.66,1212.08 1710.24,1212.08 1710.83,1212.08 1711.42,1212.08 1712,1212.08 1712.59,1212.08 1713.18,1212.08 1713.76,1212.08 1714.35,1212.08 1714.94,1212.08 1715.52,1212.08 1716.11,1212.08 1716.7,1212.08 1717.28,1212.08 1717.87,1212.08 1718.45,1212.08 1719.04,1212.08 1719.63,1212.08 1720.21,1212.08 1720.8,1212.08 1721.39,1212.08 1721.97,1212.08 1722.56,1212.08 1723.15,1212.08 1723.73,1212.08 1724.32,1212.08 1724.91,1212.08 1725.49,1212.08 1726.08,1212.08 1726.66,1212.08 1727.25,1212.08 1727.84,1212.08 1728.42,1212.08 1729.01,1212.08 1729.6,1212.08 1730.18,1212.08 1730.77,1212.08 1731.36,1212.08 1731.94,1212.08 1732.53,1212.08 1733.11,1212.08 1733.7,1212.08 1734.29,1212.08 1734.87,1212.08 1735.46,1212.08 1736.05,1212.08 1736.63,1212.08 1737.22,1212.08 1737.81,1212.08 1738.39,1212.08 1738.98,1212.08 1739.57,1212.08 1740.15,1212.08 1740.74,1212.08 1741.32,1212.08 1741.91,1212.08 1742.5,1212.08 1743.08,1212.08 1743.67,1212.08 1744.26,1212.08 1744.84,1212.08 1745.43,1212.08 1746.02,1212.08 1746.6,1212.08 1747.19,1212.08 1747.78,1212.08 1748.36,1212.08 1748.95,1212.08 1749.53,1212.08 1750.12,1212.08 1750.71,1212.08 1751.29,1212.08 1751.88,1212.08 1752.47,1212.08 1753.05,1212.08 1753.64,1212.08 1754.23,1212.08 1754.81,1212.08 1755.4,1212.08 1755.99,1212.08 1756.57,1212.08 1757.16,1212.08 1757.74,1212.08 1758.33,1212.08 1758.92,1212.08 1759.5,1212.08 1760.09,1212.08 1760.68,1212.08 1761.26,1212.08 1761.85,1212.08 1762.44,1212.08 1763.02,1212.08 1763.61,1212.08 1764.19,1212.08 1764.78,1212.08 1765.37,1212.08 1765.95,1212.08 1766.54,1212.08 1767.13,1212.08 1767.71,1212.08 1768.3,1212.08 1768.89,1212.08 1769.47,1212.08 1770.06,1212.08 1770.65,1212.08 1771.23,1212.08 1771.82,1212.08 1772.4,1212.08 1772.99,1212.08 1773.58,1212.08 1774.16,1212.08 1774.75,1212.08 1775.34,1212.08 1775.92,1212.08 1776.51,1212.08 1777.1,1212.08 1777.68,1212.08 1778.27,1212.08 1778.86,1212.08 1779.44,1212.08 1780.03,1212.08 1780.61,1212.08 1781.2,1212.08 1781.79,1212.08 1782.37,1212.08 1782.96,1212.08 1783.55,1212.08 1784.13,1212.08 1784.72,1212.08 1785.31,1212.08 1785.89,1212.08 1786.48,1212.08 1787.06,1212.08 1787.65,1212.08 1788.24,1212.08 1788.82,1212.08 1789.41,1212.08 1790,1212.08 1790.58,1212.08 1791.17,1212.08 1791.76,1212.08 1792.34,1212.08 1792.93,1212.08 1793.52,1212.08 1794.1,1212.08 1794.69,1212.08 1795.27,1212.08 1795.86,1212.08 1796.45,1212.08 1797.03,1212.08 1797.62,1212.08 1798.21,1212.08 1798.79,1212.08 1799.38,1212.08 1799.97,1212.08 1800.55,1212.08 1801.14,1212.08 1801.73,1212.08 1802.31,1212.08 1802.9,1212.08 1803.48,1212.08 1804.07,1212.08 1804.66,1212.08 1805.24,1212.08 1805.83,1212.08 1806.42,1212.08 1807,1212.08 1807.59,1212.08 1808.18,1212.08 1808.76,1212.08 1809.35,1212.08 1809.94,1212.08 1810.52,1212.08 1811.11,1212.08 1811.69,1212.08 1812.28,1212.08 1812.87,1212.08 1813.45,1212.08 1814.04,1212.08 1814.63,1212.08 1815.21,1212.08 1815.8,1212.08 1816.39,1212.08 1816.97,1212.08 1817.56,1212.08 1818.14,1212.08 1818.73,1212.08 1819.32,1212.08 1819.9,1212.08 1820.49,1212.08 1821.08,1212.08 1821.66,1212.08 1822.25,1212.08 1822.84,1212.08 1823.42,1212.08 1824.01,1212.08 1824.6,1212.08 1825.18,1212.08 1825.77,1212.08 1826.35,1212.08 1826.94,1212.08 1827.53,1212.08 1828.11,1212.08 1828.7,1212.08 1829.29,1212.08 1829.87,1212.08 1830.46,1212.08 1831.05,1212.08 1831.63,1212.08 1832.22,1212.08 1832.81,1212.08 1833.39,1212.08 1833.98,1212.08 1834.56,1212.08 1835.15,1212.08 1835.74,1212.08 1836.32,1212.08 1836.91,1212.08 1837.5,1212.08 1838.08,1212.08 1838.67,1212.08 1839.26,1212.08 1839.84,1212.08 1840.43,1212.08 1841.01,1212.08 1841.6,1212.08 1842.19,1212.08 1842.77,1212.08 1843.36,1212.08 1843.95,1212.08 1844.53,1212.08 1845.12,1212.08 1845.71,1212.08 1846.29,1212.08 1846.88,1212.08 1847.47,1212.08 1848.05,1212.08 1848.64,1212.08 1849.22,1212.08 1849.81,1212.08 1850.4,1212.08 1850.98,1212.08 1851.57,1212.08 1852.16,1212.08 1852.74,1212.08 1853.33,1212.08 1853.92,1212.08 1854.5,1212.08 1855.09,1212.08 1855.68,1212.08 1856.26,1212.08 1856.85,1212.08 1857.43,1212.08 1858.02,1212.08 1858.61,1212.08 1859.19,1212.08 1859.78,1212.08 1860.37,1212.08 1860.95,1212.08 1861.54,1212.08 1862.13,1212.08 1862.71,1212.08 1863.3,1212.08 1863.88,1212.08 1864.47,1212.08 1865.06,1212.08 1865.64,1212.08 1866.23,1212.08 1866.82,1212.08 1867.4,1212.08 1867.99,1212.08 1868.58,1212.08 1869.16,1212.08 1869.75,1212.08 1870.34,1212.08 1870.92,1212.08 1871.51,1212.08 1872.09,1212.08 1872.68,1212.08 1873.27,1212.08 1873.85,1212.08 1874.44,1212.08 1875.03,1212.08 1875.61,1212.08 1876.2,1212.08 1876.79,1212.08 1877.37,1212.08 1877.96,1212.08 1878.55,1212.08 1879.13,1212.08 1879.72,1212.08 1880.3,1212.08 1880.89,1212.08 1881.48,1212.08 1882.06,1212.08 1882.65,1212.08 1883.24,1212.08 1883.82,1212.08 1884.41,1212.08 1885,1212.08 1885.58,1212.08 1886.17,1212.08 1886.76,1212.08 1887.34,1212.08 1887.93,1212.08 1888.51,1212.08 1889.1,1212.08 1889.69,1212.08 1890.27,1212.08 1890.86,1212.08 1891.45,1212.08 1892.03,1212.08 1892.62,1212.08 1893.21,1212.08 1893.79,1212.08 1894.38,1212.08 1894.96,1212.08 1895.55,1212.08 1896.14,1212.08 1896.72,1212.08 1897.31,1212.08 1897.9,1212.08 1898.48,1212.08 1899.07,1212.08 1899.66,1212.08 1900.24,1212.08 1900.83,1212.08 1901.42,1212.08 1902,1212.08 1902.59,1212.08 1903.17,1212.08 1903.76,1212.08 1904.35,1212.08 1904.93,1212.08 1905.52,1212.08 1906.11,1212.08 1906.69,1212.08 1907.28,1212.08 1907.87,1212.08 1908.45,1212.08 1909.04,1212.08 1909.63,1212.08 1910.21,1212.08 1910.8,1212.08 1911.38,1212.08 1911.97,1212.08 1912.56,1212.08 1913.14,1212.08 1913.73,1212.08 1914.32,1212.08 1914.9,1212.08 1915.49,1212.08 1916.08,1212.08 1916.66,1212.08 1917.25,1212.08 1917.83,1212.08 1918.42,1212.08 1919.01,1212.08 1919.59,1212.08 1920.18,1212.08 1920.77,1212.08 1921.35,1212.08 1921.94,1212.08 1922.53,1212.08 1923.11,1212.08 1923.7,1212.08 1924.29,1212.08 1924.87,1212.08 1925.46,1212.08 1926.04,1212.08 1926.63,1212.08 1927.22,1212.08 1927.8,1212.08 1928.39,1212.08 1928.98,1212.08 1929.56,1212.08 1930.15,1212.08 1930.74,1212.08 1931.32,1212.08 1931.91,1212.08 1932.5,1212.08 1933.08,1212.08 1933.67,1212.08 1934.25,1212.08 1934.84,1212.08 1935.43,1212.08 1936.01,1212.08 1936.6,1212.08 1937.19,1212.08 1937.77,1212.08 1938.36,1212.08 1938.95,1212.08 1939.53,1212.08 1940.12,1212.08 1940.71,1212.08 1941.29,1212.08 1941.88,1212.08 1942.46,1212.08 1943.05,1212.08 1943.64,1212.08 1944.22,1212.08 1944.81,1212.08 1945.4,1212.08 1945.98,1212.08 1946.57,1212.08 1947.16,1212.08 1947.74,1212.08 1948.33,1212.08 1948.91,1212.08 1949.5,1212.08 1950.09,1212.08 1950.67,1212.08 1951.26,1212.08 1951.85,1212.08 1952.43,1212.08 1953.02,1212.08 1953.61,1212.08 1954.19,1212.08 1954.78,1212.08 1955.37,1212.08 1955.95,1212.08 1956.54,1212.08 1957.12,1212.08 1957.71,1212.08 1958.3,1212.08 1958.88,1212.08 1959.47,1212.08 1960.06,1212.08 1960.64,1212.08 1961.23,1212.08 1961.82,1212.08 1962.4,1212.08 1962.99,1212.08 1963.58,1212.08 1964.16,1212.08 1964.75,1212.08 1965.33,1212.08 1965.92,1212.08 1966.51,1212.08 1967.09,1212.08 1967.68,1212.08 1968.27,1212.08 1968.85,1212.08 1969.44,1212.08 1970.03,1212.08 1970.61,1212.08 1971.2,1212.08 1971.78,1212.08 1972.37,1212.08 1972.96,1212.08 1973.54,1212.08 1974.13,1212.08 1974.72,1212.08 1975.3,1212.08 1975.89,1212.08 1976.48,1212.08 1977.06,1212.08 1977.65,1212.08 1978.24,1212.08 1978.82,1212.08 1979.41,1212.08 1979.99,1212.08 1980.58,1212.08 1981.17,1212.08 1981.75,1212.08 1982.34,1212.08 1982.93,1212.08 1983.51,1212.08 1984.1,1212.08 1984.69,1212.08 1985.27,1212.08 1985.86,1212.08 1986.45,1212.08 1987.03,1212.08 1987.62,1212.08 1988.2,1212.08 1988.79,1212.08 1989.38,1212.08 1989.96,1212.08 1990.55,1212.08 1991.14,1212.08 1991.72,1212.08 1992.31,1212.08 1992.9,1212.08 1993.48,1212.08 1994.07,1212.08 1994.65,1212.08 1995.24,1212.08 1995.83,1212.08 1996.41,1212.08 1997,1212.08 1997.59,1212.08 1998.17,1212.08 1998.76,1212.08 1999.35,1212.08 1999.93,1212.08 2000.52,1212.08 2001.11,1212.08 2001.69,1212.08 2002.28,1212.08 2002.86,1212.08 2003.45,1212.08 2004.04,1212.08 2004.62,1212.08 2005.21,1212.08 2005.8,1212.08 2006.38,1212.08 2006.97,1212.08 2007.56,1212.08 2008.14,1212.08 2008.73,1212.08 2009.32,1212.08 2009.9,1212.08 2010.49,1212.08 2011.07,1212.08 2011.66,1212.08 2012.25,1212.08 2012.83,1212.08 2013.42,1212.08 2014.01,1212.08 2014.59,1212.08 2015.18,1212.08 2015.77,1212.08 2016.35,1212.08 2016.94,1212.08 2017.53,1212.08 2018.11,1212.08 2018.7,1212.08 2019.28,1212.08 2019.87,1212.08 2020.46,1212.08 2021.04,1212.08 2021.63,1212.08 2022.22,1212.08 2022.8,1212.08 2023.39,1212.08 2023.98,1212.08 2024.56,1212.08 2025.15,1212.08 2025.73,1212.08 2026.32,1212.08 2026.91,1212.08 2027.49,1212.08 2028.08,1212.08 2028.67,1212.08 2029.25,1212.08 2029.84,1212.08 2030.43,1212.08 2031.01,1212.08 2031.6,1212.08 2032.19,1212.08 2032.77,1212.08 2033.36,1212.08 2033.94,1212.08 2034.53,1212.08 2035.12,1212.08 2035.7,1212.08 2036.29,1212.08 2036.88,1212.08 2037.46,1212.08 2038.05,1212.08 2038.64,1212.08 2039.22,1212.08 2039.81,1212.08 2040.4,1212.08 2040.98,1212.08 2041.57,1212.08 2042.15,1212.08 2042.74,1212.08 2043.33,1212.08 2043.91,1212.08 2044.5,1212.08 2045.09,1212.08 2045.67,1212.08 2046.26,1212.08 2046.85,1212.08 2047.43,1212.08 2048.02,1212.08 2048.6,1212.08 2049.19,1212.08 2049.78,1212.08 2050.36,1212.08 2050.95,1212.08 2051.54,1212.08 2052.12,1212.08 2052.71,1212.08 2053.3,1212.08 2053.88,1212.08 2054.47,1212.08 2055.06,1212.08 2055.64,1212.08 2056.23,1212.08 2056.81,1212.08 2057.4,1212.08 2057.99,1212.08 2058.57,1212.08 2059.16,1212.08 2059.75,1212.08 2060.33,1212.08 2060.92,1212.08 2061.51,1212.08 2062.09,1212.08 2062.68,1212.08 2063.27,1212.08 2063.85,1212.08 2064.44,1212.08 2065.02,1212.08 2065.61,1212.08 2066.2,1212.08 2066.78,1212.08 2067.37,1212.08 2067.96,1212.08 2068.54,1212.08 2069.13,1212.08 2069.72,1212.08 2070.3,1212.08 2070.89,1212.08 2071.48,1212.08 2072.06,1212.08 2072.65,1212.08 2073.23,1212.08 2073.82,1212.08 2074.41,1212.08 2074.99,1212.08 2075.58,1212.08 2076.17,1212.08 2076.75,1212.08 2077.34,1212.08 2077.93,1212.08 2078.51,1212.08 2079.1,1212.08 2079.68,1212.08 2080.27,1212.08 2080.86,1212.08 2081.44,1212.08 2082.03,1212.08 2082.62,1212.08 2083.2,1212.08 2083.79,1212.08 2084.38,1212.08 2084.96,1212.08 2085.55,1212.08 2086.14,1212.08 2086.72,1212.08 2087.31,1212.08 2087.89,1212.08 2088.48,1212.08 2089.07,1212.08 2089.65,1212.08 2090.24,1212.08 2090.83,1212.08 2091.41,1212.08 2092,1212.08 2092.59,1212.08 2093.17,1212.08 2093.76,1212.08 2094.35,1212.08 2094.93,1212.08 2095.52,1212.08 2096.1,1212.08 2096.69,1212.08 2097.28,1212.08 2097.86,1212.08 2098.45,1212.08 2099.04,1212.08 2099.62,1212.08 2100.21,1212.08 2100.8,1212.08 2101.38,1212.08 2101.97,1212.08 2102.55,1212.08 2103.14,1212.08 2103.73,1212.08 2104.31,1212.08 2104.9,1212.08 2105.49,1212.08 2106.07,1212.08 2106.66,1212.08 2107.25,1212.08 2107.83,1212.08 2108.42,1212.08 2109.01,1212.08 2109.59,1212.08 2110.18,1212.08 2110.76,1212.08 2111.35,1212.08 2111.94,1212.08 2112.52,1212.08 2113.11,1212.08 2113.7,1212.08 2114.28,1212.08 2114.87,1212.08 2115.46,1212.08 2116.04,1212.08 2116.63,1212.08 2117.22,1212.08 2117.8,1212.08 2118.39,1212.08 2118.97,1212.08 2119.56,1212.08 2120.15,1212.08 2120.73,1212.08 2121.32,1212.08 2121.91,1212.08 2122.49,1212.08 2123.08,1212.08 2123.67,1212.08 2124.25,1212.08 2124.84,1212.08 2125.42,1212.08 2126.01,1212.08 2126.6,1212.08 2127.18,1212.08 2127.77,1212.08 2128.36,1212.08 2128.94,1212.08 2129.53,1212.08 2130.12,1212.08 2130.7,1212.08 2131.29,1212.08 2131.88,1212.08 2132.46,1212.08 2133.05,1212.08 2133.63,1212.08 2134.22,1212.08 2134.81,1212.08 2135.39,1212.08 2135.98,1212.08 2136.57,1212.08 2137.15,1212.08 2137.74,1212.08 2138.33,1212.08 2138.91,1212.08 2139.5,1212.08 2140.09,1212.08 2140.67,1212.08 2141.26,1212.08 2141.84,1212.08 2142.43,1212.08 2143.02,1212.08 2143.6,1212.08 2144.19,1212.08 2144.78,1212.08 2145.36,1212.08 2145.95,1212.08 2146.54,1212.08 2147.12,1212.08 2147.71,1212.08 2148.3,1212.08 2148.88,1212.08 2149.47,1212.08 2150.05,1212.08 2150.64,1212.08 2151.23,1212.08 2151.81,1212.08 2152.4,1212.08 2152.99,1212.08 2153.57,1212.08 2154.16,1212.08 2154.75,1212.08 2155.33,1212.08 2155.92,1212.08 2156.5,1212.08 2157.09,1212.08 2157.68,1212.08 2158.26,1212.08 \"/>\n<path clip-path=\"url(#clip422)\" d=\"M986.025 1211.88 L986.612 1211.88 L987.198 1211.88 L987.785 1211.88 L988.371 1211.88 L988.957 1211.88 L989.544 1211.88 L990.13 1211.88 L990.717 1211.88 L991.303 1211.88 L991.889 1211.88 L992.476 1211.88 L993.062 1211.88 L993.649 1211.88 L994.235 1211.88 L994.822 1211.88 L995.408 1211.88 L995.994 1211.88 L996.581 1211.88 L997.167 1211.88 L997.754 1211.88 L998.34 1211.88 L998.926 1211.88 L999.513 1211.88 L1000.1 1211.88 L1000.69 1211.88 L1001.27 1211.88 L1001.86 1211.88 L1002.44 1211.88 L1003.03 1211.88 L1003.62 1211.88 L1004.2 1211.88 L1004.79 1211.88 L1005.38 1211.88 L1005.96 1211.88 L1006.55 1211.88 L1007.14 1211.88 L1007.72 1211.88 L1008.31 1211.88 L1008.9 1211.88 L1009.48 1211.88 L1010.07 1211.88 L1010.65 1211.88 L1011.24 1211.88 L1011.83 1211.88 L1012.41 1211.88 L1013 1211.88 L1013.59 1211.88 L1014.17 1211.88 L1014.76 1211.88 L1015.35 1211.88 L1015.93 1211.88 L1016.52 1211.88 L1017.11 1211.88 L1017.69 1211.88 L1018.28 1211.88 L1018.86 1211.88 L1019.45 1211.88 L1020.04 1211.88 L1020.62 1211.88 L1021.21 1211.88 L1021.8 1211.88 L1022.38 1211.88 L1022.97 1211.88 L1023.56 1211.88 L1024.14 1211.88 L1024.73 1211.88 L1025.32 1211.88 L1025.9 1211.88 L1026.49 1211.88 L1027.07 1211.88 L1027.66 1211.88 L1028.25 1211.88 L1028.83 1211.88 L1029.42 1211.88 L1030.01 1211.88 L1030.59 1211.88 L1031.18 1211.88 L1031.77 1211.88 L1032.35 1211.88 L1032.94 1211.88 L1033.52 1211.88 L1034.11 1211.88 L1034.7 1211.88 L1035.28 1211.88 L1035.87 1211.88 L1036.46 1211.88 L1037.04 1211.88 L1037.63 1211.88 L1038.22 1211.88 L1038.8 1211.88 L1039.39 1211.88 L1039.98 1211.88 L1040.56 1211.88 L1041.15 1211.88 L1041.73 1211.88 L1042.32 1211.88 L1042.91 1211.88 L1043.49 1211.88 L1044.08 1211.88 L1044.67 1211.88 L1045.25 1211.88 L1045.84 1211.88 L1046.43 1211.88 L1047.01 1211.88 L1047.6 1211.88 L1048.19 1211.88 L1048.77 1211.88 L1049.36 1211.88 L1049.94 1211.88 L1050.53 1211.88 L1051.12 1211.88 L1051.7 1211.88 L1052.29 1211.88 L1052.88 1211.88 L1053.46 1211.88 L1054.05 1211.88 L1054.64 1211.88 L1055.22 1211.88 L1055.81 1211.88 L1056.39 1211.88 L1056.98 1211.88 L1057.57 1211.88 L1058.15 1211.88 L1058.74 1211.88 L1059.33 1211.88 L1059.91 1211.88 L1060.5 1211.88 L1061.09 1211.88 L1061.67 1211.88 L1062.26 1211.88 L1062.85 1211.88 L1063.43 1211.88 L1064.02 1211.88 L1064.6 1211.88 L1065.19 1211.88 L1065.78 1211.88 L1066.36 1211.88 L1066.95 1211.88 L1067.54 1211.88 L1068.12 1211.88 L1068.71 1211.88 L1069.3 1211.88 L1069.88 1211.88 L1070.47 1211.88 L1071.06 1211.88 L1071.64 1211.88 L1072.23 1211.88 L1072.81 1211.88 L1073.4 1211.88 L1073.99 1211.88 L1074.57 1211.88 L1075.16 1211.88 L1075.75 1211.88 L1076.33 1211.88 L1076.92 1211.88 L1077.51 1211.88 L1078.09 1211.88 L1078.68 1211.88 L1079.26 1211.88 L1079.85 1211.88 L1080.44 1211.88 L1081.02 1211.88 L1081.61 1211.88 L1082.2 1211.88 L1082.78 1211.88 L1083.37 1211.88 L1083.96 1211.88 L1084.54 1211.88 L1085.13 1211.88 L1085.72 1211.88 L1086.3 1211.88 L1086.89 1211.88 L1087.47 1211.88 L1088.06 1211.88 L1088.65 1211.88 L1089.23 1211.88 L1089.82 1211.88 L1090.41 1211.88 L1090.99 1211.88 L1091.58 1211.88 L1092.17 1211.88 L1092.75 1211.88 L1093.34 1211.88 L1093.93 1211.88 L1094.51 1211.88 L1095.1 1211.88 L1095.68 1211.88 L1096.27 1211.88 L1096.86 1211.88 L1097.44 1211.88 L1098.03 1211.88 L1098.62 1211.88 L1099.2 1211.88 L1099.79 1211.88 L1100.38 1211.88 L1100.96 1211.88 L1101.55 1211.88 L1102.14 1211.88 L1102.72 1211.88 L1103.31 1211.88 L1103.89 1211.88 L1104.48 1211.88 L1105.07 1211.88 L1105.65 1211.88 L1106.24 1211.88 L1106.83 1211.88 L1107.41 1211.88 L1108 1211.88 L1108.59 1211.88 L1109.17 1211.88 L1109.76 1211.88 L1110.34 1211.88 L1110.93 1211.88 L1111.52 1211.88 L1112.1 1211.88 L1112.69 1211.88 L1113.28 1211.88 L1113.86 1211.88 L1114.45 1211.88 L1115.04 1211.88 L1115.62 1211.88 L1116.21 1211.88 L1116.8 1211.88 L1117.38 1211.88 L1117.97 1211.88 L1118.55 1211.88 L1119.14 1211.88 L1119.73 1211.88 L1120.31 1211.88 L1120.9 1211.88 L1121.49 1211.88 L1122.07 1211.88 L1122.66 1211.88 L1123.25 1211.88 L1123.83 1211.88 L1124.42 1211.88 L1125.01 1211.88 L1125.59 1211.88 L1126.18 1211.88 L1126.76 1211.88 L1127.35 1211.88 L1127.94 1211.88 L1128.52 1211.88 L1129.11 1211.88 L1129.7 1211.88 L1130.28 1211.88 L1130.87 1211.88 L1131.46 1211.88 L1132.04 1211.88 L1132.63 1211.88 L1133.21 1211.88 L1133.8 1211.88 L1134.39 1211.88 L1134.97 1211.88 L1135.56 1211.88 L1136.15 1211.88 L1136.73 1211.88 L1137.32 1211.88 L1137.91 1211.88 L1138.49 1211.88 L1139.08 1211.88 L1139.67 1211.88 L1140.25 1211.88 L1140.84 1211.88 L1141.42 1211.88 L1142.01 1211.88 L1142.6 1211.88 L1143.18 1211.88 L1143.77 1211.88 L1144.36 1211.88 L1144.94 1211.88 L1145.53 1211.88 L1146.12 1211.88 L1146.7 1211.88 L1147.29 1211.88 L1147.88 1211.88 L1148.46 1211.88 L1149.05 1211.88 L1149.63 1211.88 L1150.22 1211.88 L1150.81 1211.88 L1151.39 1211.88 L1151.98 1211.88 L1152.57 1211.88 L1153.15 1211.88 L1153.74 1211.88 L1154.33 1211.88 L1154.91 1211.88 L1155.5 1211.88 L1156.09 1211.88 L1156.67 1211.88 L1157.26 1211.88 L1157.84 1211.88 L1158.43 1211.88 L1159.02 1211.88 L1159.6 1211.88 L1160.19 1211.88 L1160.78 1211.88 L1161.36 1211.88 L1161.95 1211.88 L1162.54 1211.88 L1163.12 1211.88 L1163.71 1211.88 L1164.29 1211.88 L1164.88 1211.88 L1165.47 1211.88 L1166.05 1211.88 L1166.64 1211.88 L1167.23 1211.88 L1167.81 1211.88 L1168.4 1211.88 L1168.99 1211.88 L1169.57 1211.88 L1170.16 1211.88 L1170.75 1211.88 L1171.33 1211.88 L1171.92 1211.88 L1172.5 1211.88 L1173.09 1211.88 L1173.68 1211.88 L1174.26 1211.88 L1174.85 1211.88 L1175.44 1211.88 L1176.02 1211.88 L1176.61 1211.88 L1177.2 1211.88 L1177.78 1211.88 L1178.37 1211.88 L1178.96 1211.88 L1179.54 1211.88 L1180.13 1211.88 L1180.71 1211.88 L1181.3 1211.88 L1181.89 1211.88 L1182.47 1211.88 L1183.06 1211.88 L1183.65 1211.88 L1184.23 1211.88 L1184.82 1211.88 L1185.41 1211.88 L1185.99 1211.88 L1186.58 1211.88 L1187.16 1211.88 L1187.75 1211.88 L1188.34 1211.88 L1188.92 1211.88 L1189.51 1211.88 L1190.1 1211.88 L1190.68 1211.88 L1191.27 1211.88 L1191.86 1211.88 L1192.44 1211.88 L1193.03 1211.88 L1193.62 1211.88 L1194.2 1211.88 L1194.79 1211.88 L1195.37 1211.88 L1195.96 1211.88 L1196.55 1211.88 L1197.13 1211.88 L1197.72 1211.88 L1198.31 1211.88 L1198.89 1211.88 L1199.48 1211.88 L1200.07 1211.88 L1200.65 1211.88 L1201.24 1211.88 L1201.83 1211.88 L1202.41 1211.88 L1203 1211.88 L1203.58 1211.88 L1204.17 1211.88 L1204.76 1211.88 L1205.34 1211.88 L1205.93 1211.88 L1206.52 1211.88 L1207.1 1211.88 L1207.69 1211.88 L1208.28 1211.88 L1208.86 1211.88 L1209.45 1211.88 L1210.03 1211.88 L1210.62 1211.88 L1211.21 1211.88 L1211.79 1211.88 L1212.38 1211.88 L1212.97 1211.88 L1213.55 1211.88 L1214.14 1211.88 L1214.73 1211.88 L1215.31 1211.88 L1215.9 1211.88 L1216.49 1211.88 L1217.07 1211.88 L1217.66 1211.88 L1218.24 1211.88 L1218.83 1211.88 L1219.42 1211.88 L1220 1211.88 L1220.59 1211.88 L1221.18 1211.88 L1221.76 1211.88 L1222.35 1211.88 L1222.94 1211.88 L1223.52 1211.88 L1224.11 1211.88 L1224.7 1211.88 L1225.28 1211.88 L1225.87 1211.88 L1226.45 1211.88 L1227.04 1211.88 L1227.63 1211.88 L1228.21 1211.88 L1228.8 1211.88 L1229.39 1211.88 L1229.97 1211.88 L1230.56 1211.88 L1231.15 1211.88 L1231.73 1211.88 L1232.32 1211.88 L1232.91 1211.88 L1233.49 1211.88 L1234.08 1211.88 L1234.66 1211.88 L1235.25 1211.88 L1235.84 1211.88 L1236.42 1211.88 L1237.01 1211.88 L1237.6 1211.88 L1238.18 1211.88 L1238.77 1211.88 L1239.36 1211.88 L1239.94 1211.88 L1240.53 1211.88 L1241.11 1211.88 L1241.7 1211.88 L1242.29 1211.88 L1242.87 1211.88 L1243.46 1211.88 L1244.05 1211.88 L1244.63 1211.88 L1245.22 1211.88 L1245.81 1211.88 L1246.39 1211.88 L1246.98 1211.88 L1247.57 1211.88 L1248.15 1211.88 L1248.74 1211.88 L1249.32 1211.88 L1249.91 1211.88 L1250.5 1211.88 L1251.08 1211.88 L1251.67 1211.88 L1252.26 1211.88 L1252.84 1211.88 L1253.43 1211.88 L1254.02 1211.88 L1254.6 1211.88 L1255.19 1211.88 L1255.78 1211.88 L1256.36 1211.88 L1256.95 1211.88 L1257.53 1211.88 L1258.12 1211.88 L1258.71 1211.88 L1259.29 1211.88 L1259.88 1211.88 L1260.47 1211.88 L1261.05 1211.88 L1261.64 1211.88 L1262.23 1211.88 L1262.81 1211.88 L1263.4 1211.88 L1263.98 1211.88 L1264.57 1211.88 L1265.16 1211.88 L1265.74 1211.88 L1266.33 1211.88 L1266.92 1211.88 L1267.5 1211.88 L1268.09 1211.88 L1268.68 1211.88 L1269.26 1211.88 L1269.85 1211.88 L1270.44 1211.88 L1271.02 1211.88 L1271.61 1211.88 L1272.19 1211.88 L1272.78 1211.88 L1273.37 1211.88 L1273.95 1211.88 L1274.54 1211.88 L1275.13 1211.88 L1275.71 1211.88 L1276.3 1211.88 L1276.89 1211.88 L1277.47 1211.88 L1278.06 1211.88 L1278.65 1211.88 L1279.23 1211.88 L1279.82 1211.88 L1280.4 1211.88 L1280.99 1211.88 L1281.58 1211.88 L1282.16 1211.88 L1282.75 1211.88 L1283.34 1211.88 L1283.92 1211.88 L1284.51 1211.88 L1285.1 1211.88 L1285.68 1211.88 L1286.27 1211.88 L1286.86 1211.88 L1287.44 1211.88 L1288.03 1211.88 L1288.61 1211.88 L1289.2 1211.88 L1289.79 1211.88 L1290.37 1211.88 L1290.96 1211.88 L1291.55 1211.88 L1292.13 1211.88 L1292.72 1211.88 L1293.31 1211.88 L1293.89 1211.88 L1294.48 1211.88 L1295.06 1211.88 L1295.65 1211.88 L1296.24 1211.88 L1296.82 1211.88 L1297.41 1211.88 L1298 1211.88 L1298.58 1211.88 L1299.17 1211.88 L1299.76 1211.88 L1300.34 1211.88 L1300.93 1211.88 L1301.52 1211.88 L1302.1 1211.88 L1302.69 1211.88 L1303.27 1211.88 L1303.86 1211.88 L1304.45 1211.88 L1305.03 1211.88 L1305.62 1211.88 L1306.21 1211.88 L1306.79 1211.88 L1307.38 1211.88 L1307.97 1211.88 L1308.55 1211.88 L1309.14 1211.88 L1309.73 1211.88 L1310.31 1211.88 L1310.9 1211.88 L1311.48 1211.88 L1312.07 1211.88 L1312.66 1211.88 L1313.24 1211.88 L1313.83 1211.88 L1314.42 1211.88 L1315 1211.88 L1315.59 1211.88 L1316.18 1211.88 L1316.76 1211.88 L1317.35 1211.88 L1317.93 1211.88 L1318.52 1211.88 L1319.11 1211.88 L1319.69 1211.88 L1320.28 1211.88 L1320.87 1211.88 L1321.45 1211.88 L1322.04 1211.88 L1322.63 1211.88 L1323.21 1211.88 L1323.8 1211.88 L1324.39 1211.88 L1324.97 1211.88 L1325.56 1211.88 L1326.14 1211.88 L1326.73 1211.88 L1327.32 1211.88 L1327.9 1211.88 L1328.49 1211.88 L1329.08 1211.88 L1329.66 1211.88 L1330.25 1211.88 L1330.84 1211.88 L1331.42 1211.88 L1332.01 1211.88 L1332.6 1211.88 L1333.18 1211.88 L1333.77 1211.88 L1334.35 1211.88 L1334.94 1211.88 L1335.53 1211.88 L1336.11 1211.88 L1336.7 1211.88 L1337.29 1211.88 L1337.87 1211.88 L1338.46 1211.88 L1339.05 1211.88 L1339.63 1211.88 L1340.22 1211.88 L1340.8 1211.88 L1341.39 1211.88 L1341.98 1211.88 L1342.56 1211.88 L1343.15 1211.88 L1343.74 1211.88 L1344.32 1211.88 L1344.91 1211.88 L1345.5 1211.88 L1346.08 1211.88 L1346.67 1211.88 L1347.26 1211.88 L1347.84 1211.88 L1348.43 1211.88 L1349.01 1211.88 L1349.6 1211.88 L1350.19 1211.88 L1350.77 1211.88 L1351.36 1211.88 L1351.95 1211.88 L1352.53 1211.88 L1353.12 1211.88 L1353.71 1211.88 L1354.29 1211.88 L1354.88 1211.88 L1355.47 1211.88 L1356.05 1211.88 L1356.64 1211.88 L1357.22 1211.88 L1357.81 1211.88 L1358.4 1211.88 L1358.98 1211.88 L1359.57 1211.88 L1360.16 1211.88 L1360.74 1211.88 L1361.33 1211.88 L1361.92 1211.88 L1362.5 1211.88 L1363.09 1211.88 L1363.68 1211.88 L1364.26 1211.88 L1364.85 1211.88 L1365.43 1211.88 L1366.02 1211.88 L1366.61 1211.88 L1367.19 1211.88 L1367.78 1211.88 L1368.37 1211.88 L1368.95 1211.88 L1369.54 1211.88 L1370.13 1211.88 L1370.71 1211.88 L1371.3 1211.88 L1371.88 1211.88 L1372.47 1211.88 L1373.06 1211.88 L1373.64 1211.88 L1374.23 1211.88 L1374.82 1211.88 L1375.4 1211.88 L1375.99 1211.88 L1376.58 1211.88 L1377.16 1211.88 L1377.75 1211.88 L1378.34 1211.88 L1378.92 1211.88 L1379.51 1211.88 L1380.09 1211.88 L1380.68 1211.88 L1381.27 1211.88 L1381.85 1211.88 L1382.44 1211.88 L1383.03 1211.88 L1383.61 1211.88 L1384.2 1211.88 L1384.79 1211.88 L1385.37 1211.88 L1385.96 1211.88 L1386.55 1211.88 L1387.13 1211.88 L1387.72 1211.88 L1388.3 1211.88 L1388.89 1211.88 L1389.48 1211.88 L1390.06 1211.88 L1390.65 1211.88 L1391.24 1211.88 L1391.82 1211.88 L1392.41 1211.88 L1393 1211.88 L1393.58 1211.88 L1394.17 1211.88 L1394.75 1211.88 L1395.34 1211.88 L1395.93 1211.88 L1396.51 1211.88 L1397.1 1211.88 L1397.69 1211.88 L1398.27 1211.88 L1398.86 1211.88 L1399.45 1211.88 L1400.03 1211.88 L1400.62 1211.88 L1401.21 1211.88 L1401.79 1211.88 L1402.38 1211.88 L1402.96 1211.88 L1403.55 1211.88 L1404.14 1211.88 L1404.72 1211.88 L1405.31 1211.88 L1405.9 1211.88 L1406.48 1211.88 L1407.07 1211.88 L1407.66 1211.88 L1408.24 1211.88 L1408.83 1211.88 L1409.42 1211.88 L1410 1211.88 L1410.59 1211.88 L1411.17 1211.88 L1411.76 1211.88 L1412.35 1211.88 L1412.93 1211.88 L1413.52 1211.88 L1414.11 1211.88 L1414.69 1211.88 L1415.28 1211.88 L1415.87 1211.88 L1416.45 1211.88 L1417.04 1211.88 L1417.63 1211.88 L1418.21 1211.88 L1418.8 1211.88 L1419.38 1211.88 L1419.97 1211.88 L1420.56 1211.88 L1421.14 1211.88 L1421.73 1211.88 L1422.32 1211.88 L1422.9 1211.88 L1423.49 1211.88 L1424.08 1211.88 L1424.66 1211.88 L1425.25 1211.88 L1425.83 1211.88 L1426.42 1211.88 L1427.01 1211.88 L1427.59 1211.88 L1428.18 1211.88 L1428.77 1211.88 L1429.35 1211.88 L1429.94 1211.88 L1430.53 1211.88 L1431.11 1211.88 L1431.7 1211.88 L1432.29 1211.88 L1432.87 1211.88 L1433.46 1211.88 L1434.04 1211.88 L1434.63 1211.88 L1435.22 1211.88 L1435.8 1211.88 L1436.39 1211.88 L1436.98 1211.88 L1437.56 1211.88 L1438.15 1211.88 L1438.74 1211.88 L1439.32 1211.88 L1439.91 1211.88 L1440.5 1211.88 L1441.08 1211.88 L1441.67 1211.88 L1442.25 1211.88 L1442.84 1211.88 L1443.43 1211.88 L1444.01 1211.88 L1444.6 1211.88 L1445.19 1211.88 L1445.77 1211.88 L1446.36 1211.88 L1446.95 1211.88 L1447.53 1211.88 L1448.12 1211.88 L1448.7 1211.88 L1449.29 1211.88 L1449.88 1211.88 L1450.46 1211.88 L1451.05 1211.88 L1451.64 1211.88 L1452.22 1211.88 L1452.81 1211.88 L1453.4 1211.88 L1453.98 1211.88 L1454.57 1211.88 L1455.16 1211.88 L1455.74 1211.88 L1456.33 1211.88 L1456.91 1211.88 L1457.5 1211.88 L1458.09 1211.88 L1458.67 1211.88 L1459.26 1211.88 L1459.85 1211.88 L1460.43 1211.88 L1461.02 1211.88 L1461.61 1211.88 L1462.19 1211.88 L1462.78 1211.88 L1463.37 1211.88 L1463.95 1211.88 L1464.54 1211.88 L1465.12 1211.88 L1465.71 1211.88 L1466.3 1211.88 L1466.88 1211.88 L1467.47 1211.88 L1468.06 1211.88 L1468.64 1211.88 L1469.23 1211.88 L1469.82 1211.88 L1470.4 1211.88 L1470.99 1211.88 L1471.57 1211.88 L1472.16 1211.88 L1472.75 1211.88 L1473.33 1211.88 L1473.92 1211.88 L1474.51 1211.88 L1475.09 1211.88 L1475.68 1211.88 L1476.27 1211.88 L1476.85 1211.88 L1477.44 1211.88 L1478.03 1211.88 L1478.61 1211.88 L1479.2 1211.88 L1479.78 1211.88 L1480.37 1211.88 L1480.96 1211.88 L1481.54 1211.88 L1482.13 1211.88 L1482.72 1211.88 L1483.3 1211.88 L1483.89 1211.88 L1484.48 1211.88 L1485.06 1211.88 L1485.65 1211.88 L1486.24 1211.88 L1486.82 1211.88 L1487.41 1211.88 L1487.99 1211.88 L1488.58 1211.88 L1489.17 1211.88 L1489.75 1211.88 L1490.34 1211.88 L1490.93 1211.88 L1491.51 1211.88 L1492.1 1211.88 L1492.69 1211.88 L1493.27 1211.88 L1493.86 1211.88 L1494.45 1211.88 L1495.03 1211.88 L1495.62 1211.88 L1496.2 1211.88 L1496.79 1211.88 L1497.38 1211.88 L1497.96 1211.88 L1498.55 1211.88 L1499.14 1211.88 L1499.72 1211.88 L1500.31 1211.88 L1500.9 1211.88 L1501.48 1211.88 L1502.07 1211.88 L1502.65 1211.88 L1503.24 1211.88 L1503.83 1211.88 L1504.41 1211.88 L1505 1211.88 L1505.59 1211.88 L1506.17 1211.88 L1506.76 1211.88 L1507.35 1211.88 L1507.93 1211.88 L1508.52 1211.88 L1509.11 1211.88 L1509.69 1211.88 L1510.28 1211.88 L1510.86 1211.88 L1511.45 1211.88 L1512.04 1211.88 L1512.62 1211.88 L1513.21 1211.88 L1513.8 1211.88 L1514.38 1211.88 L1514.97 1211.88 L1515.56 1211.88 L1516.14 1211.88 L1516.73 1211.88 L1517.32 1211.88 L1517.9 1211.88 L1518.49 1211.88 L1519.07 1211.88 L1519.66 1211.88 L1520.25 1211.88 L1520.83 1211.88 L1521.42 1211.88 L1522.01 1211.88 L1522.59 1211.88 L1523.18 1211.88 L1523.77 1211.88 L1524.35 1211.88 L1524.94 1211.88 L1525.52 1211.88 L1526.11 1211.88 L1526.7 1211.88 L1527.28 1211.88 L1527.87 1211.88 L1528.46 1211.88 L1529.04 1211.88 L1529.63 1211.88 L1530.22 1211.88 L1530.8 1211.88 L1531.39 1211.88 L1531.98 1211.88 L1532.56 1211.88 L1533.15 1211.88 L1533.73 1211.88 L1534.32 1211.88 L1534.91 1211.88 L1535.49 1211.88 L1536.08 1211.88 L1536.67 1211.88 L1537.25 1211.88 L1537.84 1211.88 L1538.43 1211.88 L1539.01 1211.88 L1539.6 1211.88 L1540.19 1211.88 L1540.77 1211.88 L1541.36 1211.88 L1541.94 1211.88 L1542.53 1211.88 L1543.12 1211.88 L1543.7 1211.88 L1544.29 1211.88 L1544.88 1211.88 L1545.46 1211.88 L1546.05 1211.88 L1546.64 1211.88 L1547.22 1211.88 L1547.81 1211.88 L1548.4 1211.88 L1548.98 1211.88 L1549.57 1211.88 L1550.15 1211.88 L1550.74 1211.88 L1551.33 1211.88 L1551.91 1211.88 L1552.5 1211.88 L1553.09 1211.88 L1553.67 1211.88 L1554.26 1211.88 L1554.85 1211.88 L1555.43 1211.88 L1556.02 1211.88 L1556.6 1211.88 L1557.19 1211.88 L1557.78 1211.88 L1558.36 1211.88 L1558.95 1211.88 L1559.54 1211.88 L1560.12 1211.88 L1560.71 1211.88 L1561.3 1211.88 L1561.88 1211.88 L1562.47 1211.88 L1563.06 1211.88 L1563.64 1211.88 L1564.23 1211.88 L1564.81 1211.88 L1565.4 1211.88 L1565.99 1211.88 L1566.57 1211.88 L1567.16 1211.88 L1567.75 1211.88 L1568.33 1211.88 L1568.92 1211.88 L1569.51 1211.88 L1570.09 1211.88 L1570.68 1211.88 L1571.27 1211.88 L1571.85 1211.88 L1572.44 1211.88 L1573.02 1211.88 L1573.61 1211.88 L1574.2 1211.88 L1574.78 1211.88 L1575.37 1211.88 L1575.96 1211.88 L1576.54 1211.88 L1577.13 1211.88 L1577.72 1211.88 L1578.3 1211.88 L1578.89 1211.88 L1579.47 1211.88 L1580.06 1211.88 L1580.65 1211.88 L1581.23 1211.88 L1581.82 1211.88 L1582.41 1211.88 L1582.99 1211.88 L1583.58 1211.88 L1584.17 1211.88 L1584.75 1211.88 L1585.34 1211.88 L1585.93 1211.88 L1586.51 1211.88 L1587.1 1211.88 L1587.68 1211.88 L1588.27 1211.88 L1588.86 1211.88 L1589.44 1211.88 L1590.03 1211.88 L1590.62 1211.88 L1591.2 1211.88 L1591.79 1211.88 L1592.38 1211.88 L1592.96 1211.88 L1593.55 1211.88 L1594.14 1211.88 L1594.72 1211.88 L1595.31 1211.88 L1595.89 1211.88 L1596.48 1211.88 L1597.07 1211.88 L1597.65 1211.88 L1598.24 1211.88 L1598.83 1211.88 L1599.41 1211.88 L1600 1211.88 L1600.59 1211.88 L1601.17 1211.88 L1601.76 1211.88 L1602.34 1211.88 L1602.93 1211.88 L1603.52 1211.88 L1604.1 1211.88 L1604.69 1211.88 L1605.28 1211.88 L1605.86 1211.88 L1606.45 1211.88 L1607.04 1211.88 L1607.62 1211.88 L1608.21 1211.88 L1608.8 1211.88 L1609.38 1211.88 L1609.97 1211.88 L1610.55 1211.88 L1611.14 1211.88 L1611.73 1211.88 L1612.31 1211.88 L1612.9 1211.88 L1613.49 1211.88 L1614.07 1211.88 L1614.66 1211.88 L1615.25 1211.88 L1615.83 1211.88 L1616.42 1211.88 L1617.01 1211.88 L1617.59 1211.88 L1618.18 1211.88 L1618.76 1211.88 L1619.35 1211.88 L1619.94 1211.88 L1620.52 1211.88 L1621.11 1211.88 L1621.7 1211.88 L1622.28 1211.88 L1622.87 1211.88 L1623.46 1211.88 L1624.04 1211.88 L1624.63 1211.88 L1625.22 1211.88 L1625.8 1211.88 L1626.39 1211.88 L1626.97 1211.88 L1627.56 1211.88 L1628.15 1211.88 L1628.73 1211.88 L1629.32 1211.88 L1629.91 1211.88 L1630.49 1211.88 L1631.08 1211.88 L1631.67 1211.88 L1632.25 1211.88 L1632.84 1211.88 L1633.42 1211.88 L1634.01 1211.88 L1634.6 1211.88 L1635.18 1211.88 L1635.77 1211.88 L1636.36 1211.88 L1636.94 1211.88 L1637.53 1211.88 L1638.12 1211.88 L1638.7 1211.88 L1639.29 1211.88 L1639.88 1211.88 L1640.46 1211.88 L1641.05 1211.88 L1641.63 1211.88 L1642.22 1211.88 L1642.81 1211.88 L1643.39 1211.88 L1643.98 1211.88 L1644.57 1211.88 L1645.15 1211.88 L1645.74 1211.88 L1646.33 1211.88 L1646.91 1211.88 L1647.5 1211.88 L1648.09 1211.88 L1648.67 1211.88 L1649.26 1211.88 L1649.84 1211.88 L1650.43 1211.88 L1651.02 1211.88 L1651.6 1211.88 L1652.19 1211.88 L1652.78 1211.88 L1653.36 1211.88 L1653.95 1211.88 L1654.54 1211.88 L1655.12 1211.88 L1655.71 1211.88 L1656.29 1211.88 L1656.88 1211.88 L1657.47 1211.88 L1658.05 1211.88 L1658.64 1211.88 L1659.23 1211.88 L1659.81 1211.88 L1660.4 1211.88 L1660.99 1211.88 L1661.57 1211.88 L1662.16 1211.88 L1662.75 1211.88 L1663.33 1211.88 L1663.92 1211.88 L1664.5 1211.88 L1665.09 1211.88 L1665.68 1211.88 L1666.26 1211.88 L1666.85 1211.88 L1667.44 1211.88 L1668.02 1211.88 L1668.61 1211.88 L1669.2 1211.88 L1669.78 1211.88 L1670.37 1211.88 L1670.96 1211.88 L1671.54 1211.88 L1672.13 1211.88 L1672.71 1211.88 L1673.3 1211.88 L1673.89 1211.88 L1674.47 1211.88 L1675.06 1211.88 L1675.65 1211.88 L1676.23 1211.88 L1676.82 1211.88 L1677.41 1211.88 L1677.99 1211.88 L1678.58 1211.88 L1679.17 1211.88 L1679.75 1211.88 L1680.34 1211.88 L1680.92 1211.88 L1681.51 1211.88 L1682.1 1211.88 L1682.68 1211.88 L1683.27 1211.88 L1683.86 1211.88 L1684.44 1211.88 L1685.03 1211.88 L1685.62 1211.88 L1686.2 1211.88 L1686.79 1211.88 L1687.37 1211.88 L1687.96 1211.88 L1688.55 1211.88 L1689.13 1211.88 L1689.72 1211.88 L1690.31 1211.88 L1690.89 1211.88 L1691.48 1211.88 L1692.07 1211.88 L1692.65 1211.88 L1693.24 1211.88 L1693.83 1211.88 L1694.41 1211.88 L1695 1211.88 L1695.58 1211.88 L1696.17 1211.88 L1696.76 1211.88 L1697.34 1211.88 L1697.93 1211.88 L1698.52 1211.88 L1699.1 1211.88 L1699.69 1211.88 L1700.28 1211.88 L1700.86 1211.88 L1701.45 1211.88 L1702.04 1211.88 L1702.62 1211.88 L1703.21 1211.88 L1703.79 1211.88 L1704.38 1211.88 L1704.97 1211.88 L1705.55 1211.88 L1706.14 1211.88 L1706.73 1211.88 L1707.31 1211.88 L1707.9 1211.88 L1708.49 1211.88 L1709.07 1211.88 L1709.66 1211.88 L1710.24 1211.88 L1710.83 1211.88 L1711.42 1211.88 L1712 1211.88 L1712.59 1211.88 L1713.18 1211.88 L1713.76 1211.88 L1714.35 1211.88 L1714.94 1211.88 L1715.52 1211.88 L1716.11 1211.88 L1716.7 1211.88 L1717.28 1211.88 L1717.87 1211.88 L1718.45 1211.88 L1719.04 1211.88 L1719.63 1211.88 L1720.21 1211.88 L1720.8 1211.88 L1721.39 1211.88 L1721.97 1211.88 L1722.56 1211.88 L1723.15 1211.88 L1723.73 1211.88 L1724.32 1211.88 L1724.91 1211.88 L1725.49 1211.88 L1726.08 1211.88 L1726.66 1211.88 L1727.25 1211.88 L1727.84 1211.88 L1728.42 1211.88 L1729.01 1211.88 L1729.6 1211.88 L1730.18 1211.88 L1730.77 1211.88 L1731.36 1211.88 L1731.94 1211.88 L1732.53 1211.88 L1733.11 1211.88 L1733.7 1211.88 L1734.29 1211.88 L1734.87 1211.88 L1735.46 1211.88 L1736.05 1211.88 L1736.63 1211.88 L1737.22 1211.88 L1737.81 1211.88 L1738.39 1211.88 L1738.98 1211.88 L1739.57 1211.88 L1740.15 1211.88 L1740.74 1211.88 L1741.32 1211.88 L1741.91 1211.88 L1742.5 1211.88 L1743.08 1211.88 L1743.67 1211.88 L1744.26 1211.88 L1744.84 1211.88 L1745.43 1211.88 L1746.02 1211.88 L1746.6 1211.88 L1747.19 1211.88 L1747.78 1211.88 L1748.36 1211.88 L1748.95 1211.88 L1749.53 1211.88 L1750.12 1211.88 L1750.71 1211.88 L1751.29 1211.88 L1751.88 1211.88 L1752.47 1211.88 L1753.05 1211.88 L1753.64 1211.88 L1754.23 1211.88 L1754.81 1211.88 L1755.4 1211.88 L1755.99 1211.88 L1756.57 1211.88 L1757.16 1211.88 L1757.74 1211.88 L1758.33 1211.88 L1758.92 1211.88 L1759.5 1211.88 L1760.09 1211.88 L1760.68 1211.88 L1761.26 1211.88 L1761.85 1211.88 L1762.44 1211.88 L1763.02 1211.88 L1763.61 1211.88 L1764.19 1211.88 L1764.78 1211.88 L1765.37 1211.88 L1765.95 1211.88 L1766.54 1211.88 L1767.13 1211.88 L1767.71 1211.88 L1768.3 1211.88 L1768.89 1211.88 L1769.47 1211.88 L1770.06 1211.88 L1770.65 1211.88 L1771.23 1211.88 L1771.82 1211.88 L1772.4 1211.88 L1772.99 1211.88 L1773.58 1211.88 L1774.16 1211.88 L1774.75 1211.88 L1775.34 1211.88 L1775.92 1211.88 L1776.51 1211.88 L1777.1 1211.88 L1777.68 1211.88 L1778.27 1211.88 L1778.86 1211.88 L1779.44 1211.88 L1780.03 1211.88 L1780.61 1211.88 L1781.2 1211.88 L1781.79 1211.88 L1782.37 1211.88 L1782.96 1211.88 L1783.55 1211.88 L1784.13 1211.88 L1784.72 1211.88 L1785.31 1211.88 L1785.89 1211.88 L1786.48 1211.88 L1787.06 1211.88 L1787.65 1211.88 L1788.24 1211.88 L1788.82 1211.88 L1789.41 1211.88 L1790 1211.88 L1790.58 1211.88 L1791.17 1211.88 L1791.76 1211.88 L1792.34 1211.88 L1792.93 1211.88 L1793.52 1211.88 L1794.1 1211.88 L1794.69 1211.88 L1795.27 1211.88 L1795.86 1211.88 L1796.45 1211.88 L1797.03 1211.88 L1797.62 1211.88 L1798.21 1211.88 L1798.79 1211.88 L1799.38 1211.88 L1799.97 1211.88 L1800.55 1211.88 L1801.14 1211.88 L1801.73 1211.88 L1802.31 1211.88 L1802.9 1211.88 L1803.48 1211.88 L1804.07 1211.88 L1804.66 1211.88 L1805.24 1211.88 L1805.83 1211.88 L1806.42 1211.88 L1807 1211.88 L1807.59 1211.88 L1808.18 1211.88 L1808.76 1211.88 L1809.35 1211.88 L1809.94 1211.88 L1810.52 1211.88 L1811.11 1211.88 L1811.69 1211.88 L1812.28 1211.88 L1812.87 1211.88 L1813.45 1211.88 L1814.04 1211.88 L1814.63 1211.88 L1815.21 1211.88 L1815.8 1211.88 L1816.39 1211.88 L1816.97 1211.88 L1817.56 1211.88 L1818.14 1211.88 L1818.73 1211.88 L1819.32 1211.88 L1819.9 1211.88 L1820.49 1211.88 L1821.08 1211.88 L1821.66 1211.88 L1822.25 1211.88 L1822.84 1211.88 L1823.42 1211.88 L1824.01 1211.88 L1824.6 1211.88 L1825.18 1211.88 L1825.77 1211.88 L1826.35 1211.88 L1826.94 1211.88 L1827.53 1211.88 L1828.11 1211.88 L1828.7 1211.88 L1829.29 1211.88 L1829.87 1211.88 L1830.46 1211.88 L1831.05 1211.88 L1831.63 1211.88 L1832.22 1211.88 L1832.81 1211.88 L1833.39 1211.88 L1833.98 1211.88 L1834.56 1211.88 L1835.15 1211.88 L1835.74 1211.88 L1836.32 1211.88 L1836.91 1211.88 L1837.5 1211.88 L1838.08 1211.88 L1838.67 1211.88 L1839.26 1211.88 L1839.84 1211.88 L1840.43 1211.88 L1841.01 1211.88 L1841.6 1211.88 L1842.19 1211.88 L1842.77 1211.88 L1843.36 1211.88 L1843.95 1211.88 L1844.53 1211.88 L1845.12 1211.88 L1845.71 1211.88 L1846.29 1211.88 L1846.88 1211.88 L1847.47 1211.88 L1848.05 1211.88 L1848.64 1211.88 L1849.22 1211.88 L1849.81 1211.88 L1850.4 1211.88 L1850.98 1211.88 L1851.57 1211.88 L1852.16 1211.88 L1852.74 1211.88 L1853.33 1211.88 L1853.92 1211.88 L1854.5 1211.88 L1855.09 1211.88 L1855.68 1211.88 L1856.26 1211.88 L1856.85 1211.88 L1857.43 1211.88 L1858.02 1211.88 L1858.61 1211.88 L1859.19 1211.88 L1859.78 1211.88 L1860.37 1211.88 L1860.95 1211.88 L1861.54 1211.88 L1862.13 1211.88 L1862.71 1211.88 L1863.3 1211.88 L1863.88 1211.88 L1864.47 1211.88 L1865.06 1211.88 L1865.64 1211.88 L1866.23 1211.88 L1866.82 1211.88 L1867.4 1211.88 L1867.99 1211.88 L1868.58 1211.88 L1869.16 1211.88 L1869.75 1211.88 L1870.34 1211.88 L1870.92 1211.88 L1871.51 1211.88 L1872.09 1211.88 L1872.68 1211.88 L1873.27 1211.88 L1873.85 1211.88 L1874.44 1211.88 L1875.03 1211.88 L1875.61 1211.88 L1876.2 1211.88 L1876.79 1211.88 L1877.37 1211.88 L1877.96 1211.88 L1878.55 1211.88 L1879.13 1211.88 L1879.72 1211.88 L1880.3 1211.88 L1880.89 1211.88 L1881.48 1211.88 L1882.06 1211.88 L1882.65 1211.88 L1883.24 1211.88 L1883.82 1211.88 L1884.41 1211.88 L1885 1211.88 L1885.58 1211.88 L1886.17 1211.88 L1886.76 1211.88 L1887.34 1211.88 L1887.93 1211.88 L1888.51 1211.88 L1889.1 1211.88 L1889.69 1211.88 L1890.27 1211.88 L1890.86 1211.88 L1891.45 1211.88 L1892.03 1211.88 L1892.62 1211.88 L1893.21 1211.88 L1893.79 1211.88 L1894.38 1211.88 L1894.96 1211.88 L1895.55 1211.88 L1896.14 1211.88 L1896.72 1211.88 L1897.31 1211.88 L1897.9 1211.88 L1898.48 1211.88 L1899.07 1211.88 L1899.66 1211.88 L1900.24 1211.88 L1900.83 1211.88 L1901.42 1211.88 L1902 1211.88 L1902.59 1211.88 L1903.17 1211.88 L1903.76 1211.88 L1904.35 1211.88 L1904.93 1211.88 L1905.52 1211.88 L1906.11 1211.88 L1906.69 1211.88 L1907.28 1211.88 L1907.87 1211.88 L1908.45 1211.88 L1909.04 1211.88 L1909.63 1211.88 L1910.21 1211.88 L1910.8 1211.88 L1911.38 1211.88 L1911.97 1211.88 L1912.56 1211.88 L1913.14 1211.88 L1913.73 1211.88 L1914.32 1211.88 L1914.9 1211.88 L1915.49 1211.88 L1916.08 1211.88 L1916.66 1211.88 L1917.25 1211.88 L1917.83 1211.88 L1918.42 1211.88 L1919.01 1211.88 L1919.59 1211.88 L1920.18 1211.88 L1920.77 1211.88 L1921.35 1211.88 L1921.94 1211.88 L1922.53 1211.88 L1923.11 1211.88 L1923.7 1211.88 L1924.29 1211.88 L1924.87 1211.88 L1925.46 1211.88 L1926.04 1211.88 L1926.63 1211.88 L1927.22 1211.88 L1927.8 1211.88 L1928.39 1211.88 L1928.98 1211.88 L1929.56 1211.88 L1930.15 1211.88 L1930.74 1211.88 L1931.32 1211.88 L1931.91 1211.88 L1932.5 1211.88 L1933.08 1211.88 L1933.67 1211.88 L1934.25 1211.88 L1934.84 1211.88 L1935.43 1211.88 L1936.01 1211.88 L1936.6 1211.88 L1937.19 1211.88 L1937.77 1211.88 L1938.36 1211.88 L1938.95 1211.88 L1939.53 1211.88 L1940.12 1211.88 L1940.71 1211.88 L1941.29 1211.88 L1941.88 1211.88 L1942.46 1211.88 L1943.05 1211.88 L1943.64 1211.88 L1944.22 1211.88 L1944.81 1211.88 L1945.4 1211.88 L1945.98 1211.88 L1946.57 1211.88 L1947.16 1211.88 L1947.74 1211.88 L1948.33 1211.88 L1948.91 1211.88 L1949.5 1211.88 L1950.09 1211.88 L1950.67 1211.88 L1951.26 1211.88 L1951.85 1211.88 L1952.43 1211.88 L1953.02 1211.88 L1953.61 1211.88 L1954.19 1211.88 L1954.78 1211.88 L1955.37 1211.88 L1955.95 1211.88 L1956.54 1211.88 L1957.12 1211.88 L1957.71 1211.88 L1958.3 1211.88 L1958.88 1211.88 L1959.47 1211.88 L1960.06 1211.88 L1960.64 1211.88 L1961.23 1211.88 L1961.82 1211.88 L1962.4 1211.88 L1962.99 1211.88 L1963.58 1211.88 L1964.16 1211.88 L1964.75 1211.88 L1965.33 1211.88 L1965.92 1211.88 L1966.51 1211.88 L1967.09 1211.88 L1967.68 1211.88 L1968.27 1211.88 L1968.85 1211.88 L1969.44 1211.88 L1970.03 1211.88 L1970.61 1211.88 L1971.2 1211.88 L1971.78 1211.88 L1972.37 1211.88 L1972.96 1211.88 L1973.54 1211.88 L1974.13 1211.88 L1974.72 1211.88 L1975.3 1211.88 L1975.89 1211.88 L1976.48 1211.88 L1977.06 1211.88 L1977.65 1211.88 L1978.24 1211.88 L1978.82 1211.88 L1979.41 1211.88 L1979.99 1211.88 L1980.58 1211.88 L1981.17 1211.88 L1981.75 1211.88 L1982.34 1211.88 L1982.93 1211.88 L1983.51 1211.88 L1984.1 1211.88 L1984.69 1211.88 L1985.27 1211.88 L1985.86 1211.88 L1986.45 1211.88 L1987.03 1211.88 L1987.62 1211.88 L1988.2 1211.88 L1988.79 1211.88 L1989.38 1211.88 L1989.96 1211.88 L1990.55 1211.88 L1991.14 1211.88 L1991.72 1211.88 L1992.31 1211.88 L1992.9 1211.88 L1993.48 1211.88 L1994.07 1211.88 L1994.65 1211.88 L1995.24 1211.88 L1995.83 1211.88 L1996.41 1211.88 L1997 1211.88 L1997.59 1211.88 L1998.17 1211.88 L1998.76 1211.88 L1999.35 1211.88 L1999.93 1211.88 L2000.52 1211.88 L2001.11 1211.88 L2001.69 1211.88 L2002.28 1211.88 L2002.86 1211.88 L2003.45 1211.88 L2004.04 1211.88 L2004.62 1211.88 L2005.21 1211.88 L2005.8 1211.88 L2006.38 1211.88 L2006.97 1211.88 L2007.56 1211.88 L2008.14 1211.88 L2008.73 1211.88 L2009.32 1211.88 L2009.9 1211.88 L2010.49 1211.88 L2011.07 1211.88 L2011.66 1211.88 L2012.25 1211.88 L2012.83 1211.88 L2013.42 1211.88 L2014.01 1211.88 L2014.59 1211.88 L2015.18 1211.88 L2015.77 1211.88 L2016.35 1211.88 L2016.94 1211.88 L2017.53 1211.88 L2018.11 1211.88 L2018.7 1211.88 L2019.28 1211.88 L2019.87 1211.88 L2020.46 1211.88 L2021.04 1211.88 L2021.63 1211.88 L2022.22 1211.88 L2022.8 1211.88 L2023.39 1211.88 L2023.98 1211.88 L2024.56 1211.88 L2025.15 1211.88 L2025.73 1211.88 L2026.32 1211.88 L2026.91 1211.88 L2027.49 1211.88 L2028.08 1211.88 L2028.67 1211.88 L2029.25 1211.88 L2029.84 1211.88 L2030.43 1211.88 L2031.01 1211.88 L2031.6 1211.88 L2032.19 1211.88 L2032.77 1211.88 L2033.36 1211.88 L2033.94 1211.88 L2034.53 1211.88 L2035.12 1211.88 L2035.7 1211.88 L2036.29 1211.88 L2036.88 1211.88 L2037.46 1211.88 L2038.05 1211.88 L2038.64 1211.88 L2039.22 1211.88 L2039.81 1211.88 L2040.4 1211.88 L2040.98 1211.88 L2041.57 1211.88 L2042.15 1211.88 L2042.74 1211.88 L2043.33 1211.88 L2043.91 1211.88 L2044.5 1211.88 L2045.09 1211.88 L2045.67 1211.88 L2046.26 1211.88 L2046.85 1211.88 L2047.43 1211.88 L2048.02 1211.88 L2048.6 1211.88 L2049.19 1211.88 L2049.78 1211.88 L2050.36 1211.88 L2050.95 1211.88 L2051.54 1211.88 L2052.12 1211.88 L2052.71 1211.88 L2053.3 1211.88 L2053.88 1211.88 L2054.47 1211.88 L2055.06 1211.88 L2055.64 1211.88 L2056.23 1211.88 L2056.81 1211.88 L2057.4 1211.88 L2057.99 1211.88 L2058.57 1211.88 L2059.16 1211.88 L2059.75 1211.88 L2060.33 1211.88 L2060.92 1211.88 L2061.51 1211.88 L2062.09 1211.88 L2062.68 1211.88 L2063.27 1211.88 L2063.85 1211.88 L2064.44 1211.88 L2065.02 1211.88 L2065.61 1211.88 L2066.2 1211.88 L2066.78 1211.88 L2067.37 1211.88 L2067.96 1211.88 L2068.54 1211.88 L2069.13 1211.88 L2069.72 1211.88 L2070.3 1211.88 L2070.89 1211.88 L2071.48 1211.88 L2072.06 1211.88 L2072.65 1211.88 L2073.23 1211.88 L2073.82 1211.88 L2074.41 1211.88 L2074.99 1211.88 L2075.58 1211.88 L2076.17 1211.88 L2076.75 1211.88 L2077.34 1211.88 L2077.93 1211.88 L2078.51 1211.88 L2079.1 1211.88 L2079.68 1211.88 L2080.27 1211.88 L2080.86 1211.88 L2081.44 1211.88 L2082.03 1211.88 L2082.62 1211.88 L2083.2 1211.88 L2083.79 1211.88 L2084.38 1211.88 L2084.96 1211.88 L2085.55 1211.88 L2086.14 1211.88 L2086.72 1211.88 L2087.31 1211.88 L2087.89 1211.88 L2088.48 1211.88 L2089.07 1211.88 L2089.65 1211.88 L2090.24 1211.88 L2090.83 1211.88 L2091.41 1211.88 L2092 1211.88 L2092.59 1211.88 L2093.17 1211.88 L2093.76 1211.88 L2094.35 1211.88 L2094.93 1211.88 L2095.52 1211.88 L2096.1 1211.88 L2096.69 1211.88 L2097.28 1211.88 L2097.86 1211.88 L2098.45 1211.88 L2099.04 1211.88 L2099.62 1211.88 L2100.21 1211.88 L2100.8 1211.88 L2101.38 1211.88 L2101.97 1211.88 L2102.55 1211.88 L2103.14 1211.88 L2103.73 1211.88 L2104.31 1211.88 L2104.9 1211.88 L2105.49 1211.88 L2106.07 1211.88 L2106.66 1211.88 L2107.25 1211.88 L2107.83 1211.88 L2108.42 1211.88 L2109.01 1211.88 L2109.59 1211.88 L2110.18 1211.88 L2110.76 1211.88 L2111.35 1211.88 L2111.94 1211.88 L2112.52 1211.88 L2113.11 1211.88 L2113.7 1211.88 L2114.28 1211.88 L2114.87 1211.88 L2115.46 1211.88 L2116.04 1211.88 L2116.63 1211.88 L2117.22 1211.88 L2117.8 1211.88 L2118.39 1211.88 L2118.97 1211.88 L2119.56 1211.88 L2120.15 1211.88 L2120.73 1211.88 L2121.32 1211.88 L2121.91 1211.88 L2122.49 1211.88 L2123.08 1211.88 L2123.67 1211.88 L2124.25 1211.88 L2124.84 1211.88 L2125.42 1211.88 L2126.01 1211.88 L2126.6 1211.88 L2127.18 1211.88 L2127.77 1211.88 L2128.36 1211.88 L2128.94 1211.88 L2129.53 1211.88 L2130.12 1211.88 L2130.7 1211.88 L2131.29 1211.88 L2131.88 1211.88 L2132.46 1211.88 L2133.05 1211.88 L2133.63 1211.88 L2134.22 1211.88 L2134.81 1211.88 L2135.39 1211.88 L2135.98 1211.88 L2136.57 1211.88 L2137.15 1211.88 L2137.74 1211.88 L2138.33 1211.88 L2138.91 1211.88 L2139.5 1211.88 L2140.09 1211.88 L2140.67 1211.88 L2141.26 1211.88 L2141.84 1211.88 L2142.43 1211.88 L2143.02 1211.88 L2143.6 1211.88 L2144.19 1211.88 L2144.78 1211.88 L2145.36 1211.88 L2145.95 1211.88 L2146.54 1211.88 L2147.12 1211.88 L2147.71 1211.88 L2148.3 1211.88 L2148.88 1211.88 L2149.47 1211.88 L2150.05 1211.88 L2150.64 1211.88 L2151.23 1211.88 L2151.81 1211.88 L2152.4 1211.88 L2152.99 1211.88 L2153.57 1211.88 L2154.16 1211.88 L2154.75 1211.88 L2155.33 1211.88 L2155.92 1211.88 L2156.5 1211.88 L2157.09 1211.88 L2157.68 1211.88 L2158.26 1211.88 L2158.26 1211.71 L2157.68 1211.71 L2157.09 1211.71 L2156.5 1211.71 L2155.92 1211.71 L2155.33 1211.71 L2154.75 1211.71 L2154.16 1211.71 L2153.57 1211.71 L2152.99 1211.71 L2152.4 1211.71 L2151.81 1211.71 L2151.23 1211.71 L2150.64 1211.71 L2150.05 1211.71 L2149.47 1211.71 L2148.88 1211.71 L2148.3 1211.71 L2147.71 1211.71 L2147.12 1211.71 L2146.54 1211.71 L2145.95 1211.71 L2145.36 1211.71 L2144.78 1211.71 L2144.19 1211.71 L2143.6 1211.71 L2143.02 1211.71 L2142.43 1211.71 L2141.84 1211.71 L2141.26 1211.71 L2140.67 1211.71 L2140.09 1211.71 L2139.5 1211.71 L2138.91 1211.71 L2138.33 1211.71 L2137.74 1211.71 L2137.15 1211.71 L2136.57 1211.71 L2135.98 1211.71 L2135.39 1211.71 L2134.81 1211.71 L2134.22 1211.71 L2133.63 1211.71 L2133.05 1211.71 L2132.46 1211.71 L2131.88 1211.71 L2131.29 1211.71 L2130.7 1211.71 L2130.12 1211.71 L2129.53 1211.71 L2128.94 1211.71 L2128.36 1211.71 L2127.77 1211.71 L2127.18 1211.71 L2126.6 1211.71 L2126.01 1211.71 L2125.42 1211.71 L2124.84 1211.71 L2124.25 1211.71 L2123.67 1211.71 L2123.08 1211.71 L2122.49 1211.71 L2121.91 1211.71 L2121.32 1211.71 L2120.73 1211.71 L2120.15 1211.71 L2119.56 1211.71 L2118.97 1211.71 L2118.39 1211.71 L2117.8 1211.71 L2117.22 1211.71 L2116.63 1211.71 L2116.04 1211.71 L2115.46 1211.71 L2114.87 1211.71 L2114.28 1211.71 L2113.7 1211.71 L2113.11 1211.71 L2112.52 1211.71 L2111.94 1211.71 L2111.35 1211.71 L2110.76 1211.71 L2110.18 1211.71 L2109.59 1211.71 L2109.01 1211.71 L2108.42 1211.71 L2107.83 1211.71 L2107.25 1211.71 L2106.66 1211.71 L2106.07 1211.71 L2105.49 1211.71 L2104.9 1211.71 L2104.31 1211.71 L2103.73 1211.71 L2103.14 1211.71 L2102.55 1211.71 L2101.97 1211.71 L2101.38 1211.71 L2100.8 1211.71 L2100.21 1211.71 L2099.62 1211.71 L2099.04 1211.71 L2098.45 1211.71 L2097.86 1211.71 L2097.28 1211.71 L2096.69 1211.71 L2096.1 1211.71 L2095.52 1211.71 L2094.93 1211.71 L2094.35 1211.71 L2093.76 1211.71 L2093.17 1211.71 L2092.59 1211.71 L2092 1211.71 L2091.41 1211.71 L2090.83 1211.71 L2090.24 1211.71 L2089.65 1211.71 L2089.07 1211.71 L2088.48 1211.71 L2087.89 1211.71 L2087.31 1211.71 L2086.72 1211.71 L2086.14 1211.71 L2085.55 1211.71 L2084.96 1211.71 L2084.38 1211.71 L2083.79 1211.71 L2083.2 1211.71 L2082.62 1211.71 L2082.03 1211.71 L2081.44 1211.71 L2080.86 1211.71 L2080.27 1211.71 L2079.68 1211.71 L2079.1 1211.71 L2078.51 1211.71 L2077.93 1211.71 L2077.34 1211.71 L2076.75 1211.71 L2076.17 1211.71 L2075.58 1211.71 L2074.99 1211.71 L2074.41 1211.71 L2073.82 1211.71 L2073.23 1211.71 L2072.65 1211.71 L2072.06 1211.71 L2071.48 1211.71 L2070.89 1211.71 L2070.3 1211.71 L2069.72 1211.71 L2069.13 1211.71 L2068.54 1211.71 L2067.96 1211.71 L2067.37 1211.71 L2066.78 1211.71 L2066.2 1211.71 L2065.61 1211.71 L2065.02 1211.71 L2064.44 1211.71 L2063.85 1211.71 L2063.27 1211.71 L2062.68 1211.71 L2062.09 1211.71 L2061.51 1211.71 L2060.92 1211.71 L2060.33 1211.71 L2059.75 1211.71 L2059.16 1211.71 L2058.57 1211.71 L2057.99 1211.71 L2057.4 1211.71 L2056.81 1211.71 L2056.23 1211.71 L2055.64 1211.71 L2055.06 1211.71 L2054.47 1211.71 L2053.88 1211.71 L2053.3 1211.71 L2052.71 1211.71 L2052.12 1211.71 L2051.54 1211.71 L2050.95 1211.71 L2050.36 1211.71 L2049.78 1211.71 L2049.19 1211.71 L2048.6 1211.71 L2048.02 1211.71 L2047.43 1211.71 L2046.85 1211.71 L2046.26 1211.71 L2045.67 1211.71 L2045.09 1211.71 L2044.5 1211.71 L2043.91 1211.71 L2043.33 1211.71 L2042.74 1211.71 L2042.15 1211.71 L2041.57 1211.71 L2040.98 1211.71 L2040.4 1211.71 L2039.81 1211.71 L2039.22 1211.71 L2038.64 1211.71 L2038.05 1211.71 L2037.46 1211.71 L2036.88 1211.71 L2036.29 1211.71 L2035.7 1211.71 L2035.12 1211.71 L2034.53 1211.71 L2033.94 1211.71 L2033.36 1211.71 L2032.77 1211.71 L2032.19 1211.71 L2031.6 1211.71 L2031.01 1211.71 L2030.43 1211.71 L2029.84 1211.71 L2029.25 1211.71 L2028.67 1211.71 L2028.08 1211.71 L2027.49 1211.71 L2026.91 1211.71 L2026.32 1211.71 L2025.73 1211.71 L2025.15 1211.71 L2024.56 1211.71 L2023.98 1211.71 L2023.39 1211.71 L2022.8 1211.71 L2022.22 1211.71 L2021.63 1211.71 L2021.04 1211.71 L2020.46 1211.71 L2019.87 1211.71 L2019.28 1211.71 L2018.7 1211.71 L2018.11 1211.71 L2017.53 1211.71 L2016.94 1211.71 L2016.35 1211.71 L2015.77 1211.71 L2015.18 1211.71 L2014.59 1211.71 L2014.01 1211.71 L2013.42 1211.71 L2012.83 1211.71 L2012.25 1211.71 L2011.66 1211.71 L2011.07 1211.71 L2010.49 1211.71 L2009.9 1211.71 L2009.32 1211.71 L2008.73 1211.71 L2008.14 1211.71 L2007.56 1211.71 L2006.97 1211.71 L2006.38 1211.71 L2005.8 1211.71 L2005.21 1211.71 L2004.62 1211.71 L2004.04 1211.71 L2003.45 1211.71 L2002.86 1211.71 L2002.28 1211.71 L2001.69 1211.71 L2001.11 1211.71 L2000.52 1211.71 L1999.93 1211.71 L1999.35 1211.71 L1998.76 1211.71 L1998.17 1211.71 L1997.59 1211.71 L1997 1211.71 L1996.41 1211.71 L1995.83 1211.71 L1995.24 1211.71 L1994.65 1211.71 L1994.07 1211.71 L1993.48 1211.71 L1992.9 1211.71 L1992.31 1211.71 L1991.72 1211.71 L1991.14 1211.71 L1990.55 1211.71 L1989.96 1211.71 L1989.38 1211.71 L1988.79 1211.71 L1988.2 1211.71 L1987.62 1211.71 L1987.03 1211.71 L1986.45 1211.71 L1985.86 1211.71 L1985.27 1211.71 L1984.69 1211.71 L1984.1 1211.71 L1983.51 1211.71 L1982.93 1211.71 L1982.34 1211.71 L1981.75 1211.71 L1981.17 1211.71 L1980.58 1211.71 L1979.99 1211.71 L1979.41 1211.71 L1978.82 1211.71 L1978.24 1211.71 L1977.65 1211.71 L1977.06 1211.71 L1976.48 1211.71 L1975.89 1211.71 L1975.3 1211.71 L1974.72 1211.71 L1974.13 1211.71 L1973.54 1211.71 L1972.96 1211.71 L1972.37 1211.71 L1971.78 1211.71 L1971.2 1211.71 L1970.61 1211.71 L1970.03 1211.71 L1969.44 1211.71 L1968.85 1211.71 L1968.27 1211.71 L1967.68 1211.71 L1967.09 1211.71 L1966.51 1211.71 L1965.92 1211.71 L1965.33 1211.71 L1964.75 1211.71 L1964.16 1211.71 L1963.58 1211.71 L1962.99 1211.71 L1962.4 1211.71 L1961.82 1211.71 L1961.23 1211.71 L1960.64 1211.71 L1960.06 1211.71 L1959.47 1211.71 L1958.88 1211.71 L1958.3 1211.71 L1957.71 1211.71 L1957.12 1211.71 L1956.54 1211.71 L1955.95 1211.71 L1955.37 1211.71 L1954.78 1211.71 L1954.19 1211.71 L1953.61 1211.71 L1953.02 1211.71 L1952.43 1211.71 L1951.85 1211.71 L1951.26 1211.71 L1950.67 1211.71 L1950.09 1211.71 L1949.5 1211.71 L1948.91 1211.71 L1948.33 1211.71 L1947.74 1211.71 L1947.16 1211.71 L1946.57 1211.71 L1945.98 1211.71 L1945.4 1211.71 L1944.81 1211.71 L1944.22 1211.71 L1943.64 1211.71 L1943.05 1211.71 L1942.46 1211.71 L1941.88 1211.71 L1941.29 1211.71 L1940.71 1211.71 L1940.12 1211.71 L1939.53 1211.71 L1938.95 1211.71 L1938.36 1211.71 L1937.77 1211.71 L1937.19 1211.71 L1936.6 1211.71 L1936.01 1211.71 L1935.43 1211.71 L1934.84 1211.71 L1934.25 1211.71 L1933.67 1211.71 L1933.08 1211.71 L1932.5 1211.71 L1931.91 1211.71 L1931.32 1211.71 L1930.74 1211.71 L1930.15 1211.71 L1929.56 1211.71 L1928.98 1211.71 L1928.39 1211.71 L1927.8 1211.71 L1927.22 1211.71 L1926.63 1211.71 L1926.04 1211.71 L1925.46 1211.71 L1924.87 1211.71 L1924.29 1211.71 L1923.7 1211.71 L1923.11 1211.71 L1922.53 1211.71 L1921.94 1211.71 L1921.35 1211.71 L1920.77 1211.71 L1920.18 1211.71 L1919.59 1211.71 L1919.01 1211.71 L1918.42 1211.71 L1917.83 1211.71 L1917.25 1211.71 L1916.66 1211.71 L1916.08 1211.71 L1915.49 1211.71 L1914.9 1211.71 L1914.32 1211.71 L1913.73 1211.71 L1913.14 1211.71 L1912.56 1211.71 L1911.97 1211.71 L1911.38 1211.71 L1910.8 1211.71 L1910.21 1211.71 L1909.63 1211.71 L1909.04 1211.71 L1908.45 1211.71 L1907.87 1211.71 L1907.28 1211.71 L1906.69 1211.71 L1906.11 1211.71 L1905.52 1211.71 L1904.93 1211.71 L1904.35 1211.71 L1903.76 1211.71 L1903.17 1211.71 L1902.59 1211.71 L1902 1211.71 L1901.42 1211.71 L1900.83 1211.71 L1900.24 1211.71 L1899.66 1211.71 L1899.07 1211.71 L1898.48 1211.71 L1897.9 1211.71 L1897.31 1211.71 L1896.72 1211.71 L1896.14 1211.71 L1895.55 1211.71 L1894.96 1211.71 L1894.38 1211.71 L1893.79 1211.71 L1893.21 1211.71 L1892.62 1211.71 L1892.03 1211.71 L1891.45 1211.71 L1890.86 1211.71 L1890.27 1211.71 L1889.69 1211.71 L1889.1 1211.71 L1888.51 1211.71 L1887.93 1211.71 L1887.34 1211.71 L1886.76 1211.71 L1886.17 1211.71 L1885.58 1211.71 L1885 1211.71 L1884.41 1211.71 L1883.82 1211.71 L1883.24 1211.71 L1882.65 1211.71 L1882.06 1211.71 L1881.48 1211.71 L1880.89 1211.71 L1880.3 1211.71 L1879.72 1211.71 L1879.13 1211.71 L1878.55 1211.71 L1877.96 1211.71 L1877.37 1211.71 L1876.79 1211.71 L1876.2 1211.71 L1875.61 1211.71 L1875.03 1211.71 L1874.44 1211.71 L1873.85 1211.71 L1873.27 1211.71 L1872.68 1211.71 L1872.09 1211.71 L1871.51 1211.71 L1870.92 1211.71 L1870.34 1211.71 L1869.75 1211.71 L1869.16 1211.71 L1868.58 1211.71 L1867.99 1211.71 L1867.4 1211.71 L1866.82 1211.71 L1866.23 1211.71 L1865.64 1211.71 L1865.06 1211.71 L1864.47 1211.71 L1863.88 1211.71 L1863.3 1211.71 L1862.71 1211.71 L1862.13 1211.71 L1861.54 1211.71 L1860.95 1211.71 L1860.37 1211.71 L1859.78 1211.71 L1859.19 1211.71 L1858.61 1211.71 L1858.02 1211.71 L1857.43 1211.71 L1856.85 1211.71 L1856.26 1211.71 L1855.68 1211.71 L1855.09 1211.71 L1854.5 1211.71 L1853.92 1211.71 L1853.33 1211.71 L1852.74 1211.71 L1852.16 1211.71 L1851.57 1211.71 L1850.98 1211.71 L1850.4 1211.71 L1849.81 1211.71 L1849.22 1211.71 L1848.64 1211.71 L1848.05 1211.71 L1847.47 1211.71 L1846.88 1211.71 L1846.29 1211.71 L1845.71 1211.71 L1845.12 1211.71 L1844.53 1211.71 L1843.95 1211.71 L1843.36 1211.71 L1842.77 1211.71 L1842.19 1211.71 L1841.6 1211.71 L1841.01 1211.71 L1840.43 1211.71 L1839.84 1211.71 L1839.26 1211.71 L1838.67 1211.71 L1838.08 1211.71 L1837.5 1211.71 L1836.91 1211.71 L1836.32 1211.71 L1835.74 1211.71 L1835.15 1211.71 L1834.56 1211.71 L1833.98 1211.71 L1833.39 1211.71 L1832.81 1211.71 L1832.22 1211.71 L1831.63 1211.71 L1831.05 1211.71 L1830.46 1211.71 L1829.87 1211.71 L1829.29 1211.71 L1828.7 1211.71 L1828.11 1211.71 L1827.53 1211.71 L1826.94 1211.71 L1826.35 1211.71 L1825.77 1211.71 L1825.18 1211.71 L1824.6 1211.71 L1824.01 1211.71 L1823.42 1211.71 L1822.84 1211.71 L1822.25 1211.71 L1821.66 1211.71 L1821.08 1211.71 L1820.49 1211.71 L1819.9 1211.71 L1819.32 1211.71 L1818.73 1211.71 L1818.14 1211.71 L1817.56 1211.71 L1816.97 1211.71 L1816.39 1211.71 L1815.8 1211.71 L1815.21 1211.71 L1814.63 1211.71 L1814.04 1211.71 L1813.45 1211.71 L1812.87 1211.71 L1812.28 1211.71 L1811.69 1211.71 L1811.11 1211.71 L1810.52 1211.71 L1809.94 1211.71 L1809.35 1211.71 L1808.76 1211.71 L1808.18 1211.71 L1807.59 1211.71 L1807 1211.71 L1806.42 1211.71 L1805.83 1211.71 L1805.24 1211.71 L1804.66 1211.71 L1804.07 1211.71 L1803.48 1211.71 L1802.9 1211.71 L1802.31 1211.71 L1801.73 1211.71 L1801.14 1211.71 L1800.55 1211.71 L1799.97 1211.71 L1799.38 1211.71 L1798.79 1211.71 L1798.21 1211.71 L1797.62 1211.71 L1797.03 1211.71 L1796.45 1211.71 L1795.86 1211.71 L1795.27 1211.71 L1794.69 1211.71 L1794.1 1211.71 L1793.52 1211.71 L1792.93 1211.71 L1792.34 1211.71 L1791.76 1211.71 L1791.17 1211.71 L1790.58 1211.71 L1790 1211.71 L1789.41 1211.71 L1788.82 1211.71 L1788.24 1211.71 L1787.65 1211.71 L1787.06 1211.71 L1786.48 1211.71 L1785.89 1211.71 L1785.31 1211.71 L1784.72 1211.71 L1784.13 1211.71 L1783.55 1211.71 L1782.96 1211.71 L1782.37 1211.71 L1781.79 1211.71 L1781.2 1211.71 L1780.61 1211.71 L1780.03 1211.71 L1779.44 1211.71 L1778.86 1211.71 L1778.27 1211.71 L1777.68 1211.71 L1777.1 1211.71 L1776.51 1211.71 L1775.92 1211.71 L1775.34 1211.71 L1774.75 1211.71 L1774.16 1211.71 L1773.58 1211.71 L1772.99 1211.71 L1772.4 1211.71 L1771.82 1211.71 L1771.23 1211.71 L1770.65 1211.71 L1770.06 1211.71 L1769.47 1211.71 L1768.89 1211.71 L1768.3 1211.71 L1767.71 1211.71 L1767.13 1211.71 L1766.54 1211.71 L1765.95 1211.71 L1765.37 1211.71 L1764.78 1211.71 L1764.19 1211.71 L1763.61 1211.71 L1763.02 1211.71 L1762.44 1211.71 L1761.85 1211.71 L1761.26 1211.71 L1760.68 1211.71 L1760.09 1211.71 L1759.5 1211.71 L1758.92 1211.71 L1758.33 1211.71 L1757.74 1211.71 L1757.16 1211.71 L1756.57 1211.71 L1755.99 1211.71 L1755.4 1211.71 L1754.81 1211.71 L1754.23 1211.71 L1753.64 1211.71 L1753.05 1211.71 L1752.47 1211.71 L1751.88 1211.71 L1751.29 1211.71 L1750.71 1211.71 L1750.12 1211.71 L1749.53 1211.71 L1748.95 1211.71 L1748.36 1211.71 L1747.78 1211.71 L1747.19 1211.71 L1746.6 1211.71 L1746.02 1211.71 L1745.43 1211.71 L1744.84 1211.71 L1744.26 1211.71 L1743.67 1211.71 L1743.08 1211.71 L1742.5 1211.71 L1741.91 1211.71 L1741.32 1211.71 L1740.74 1211.71 L1740.15 1211.71 L1739.57 1211.71 L1738.98 1211.71 L1738.39 1211.71 L1737.81 1211.71 L1737.22 1211.71 L1736.63 1211.71 L1736.05 1211.71 L1735.46 1211.71 L1734.87 1211.71 L1734.29 1211.71 L1733.7 1211.71 L1733.11 1211.71 L1732.53 1211.71 L1731.94 1211.71 L1731.36 1211.71 L1730.77 1211.71 L1730.18 1211.71 L1729.6 1211.71 L1729.01 1211.71 L1728.42 1211.71 L1727.84 1211.71 L1727.25 1211.71 L1726.66 1211.71 L1726.08 1211.71 L1725.49 1211.71 L1724.91 1211.71 L1724.32 1211.71 L1723.73 1211.71 L1723.15 1211.71 L1722.56 1211.71 L1721.97 1211.71 L1721.39 1211.71 L1720.8 1211.71 L1720.21 1211.71 L1719.63 1211.71 L1719.04 1211.71 L1718.45 1211.71 L1717.87 1211.71 L1717.28 1211.71 L1716.7 1211.71 L1716.11 1211.71 L1715.52 1211.71 L1714.94 1211.71 L1714.35 1211.71 L1713.76 1211.71 L1713.18 1211.71 L1712.59 1211.71 L1712 1211.71 L1711.42 1211.71 L1710.83 1211.71 L1710.24 1211.71 L1709.66 1211.71 L1709.07 1211.71 L1708.49 1211.71 L1707.9 1211.71 L1707.31 1211.71 L1706.73 1211.71 L1706.14 1211.71 L1705.55 1211.71 L1704.97 1211.71 L1704.38 1211.71 L1703.79 1211.71 L1703.21 1211.71 L1702.62 1211.71 L1702.04 1211.71 L1701.45 1211.71 L1700.86 1211.71 L1700.28 1211.71 L1699.69 1211.71 L1699.1 1211.71 L1698.52 1211.71 L1697.93 1211.71 L1697.34 1211.71 L1696.76 1211.71 L1696.17 1211.71 L1695.58 1211.71 L1695 1211.71 L1694.41 1211.71 L1693.83 1211.71 L1693.24 1211.71 L1692.65 1211.71 L1692.07 1211.71 L1691.48 1211.71 L1690.89 1211.71 L1690.31 1211.71 L1689.72 1211.71 L1689.13 1211.71 L1688.55 1211.71 L1687.96 1211.71 L1687.37 1211.71 L1686.79 1211.71 L1686.2 1211.71 L1685.62 1211.71 L1685.03 1211.71 L1684.44 1211.71 L1683.86 1211.71 L1683.27 1211.71 L1682.68 1211.71 L1682.1 1211.71 L1681.51 1211.71 L1680.92 1211.71 L1680.34 1211.71 L1679.75 1211.71 L1679.17 1211.71 L1678.58 1211.71 L1677.99 1211.71 L1677.41 1211.71 L1676.82 1211.71 L1676.23 1211.71 L1675.65 1211.71 L1675.06 1211.71 L1674.47 1211.71 L1673.89 1211.71 L1673.3 1211.71 L1672.71 1211.71 L1672.13 1211.71 L1671.54 1211.71 L1670.96 1211.71 L1670.37 1211.71 L1669.78 1211.71 L1669.2 1211.71 L1668.61 1211.71 L1668.02 1211.71 L1667.44 1211.71 L1666.85 1211.71 L1666.26 1211.71 L1665.68 1211.71 L1665.09 1211.71 L1664.5 1211.71 L1663.92 1211.71 L1663.33 1211.71 L1662.75 1211.71 L1662.16 1211.71 L1661.57 1211.71 L1660.99 1211.71 L1660.4 1211.71 L1659.81 1211.71 L1659.23 1211.71 L1658.64 1211.71 L1658.05 1211.71 L1657.47 1211.71 L1656.88 1211.71 L1656.29 1211.71 L1655.71 1211.71 L1655.12 1211.71 L1654.54 1211.71 L1653.95 1211.71 L1653.36 1211.71 L1652.78 1211.71 L1652.19 1211.71 L1651.6 1211.71 L1651.02 1211.71 L1650.43 1211.71 L1649.84 1211.71 L1649.26 1211.71 L1648.67 1211.71 L1648.09 1211.71 L1647.5 1211.71 L1646.91 1211.71 L1646.33 1211.71 L1645.74 1211.71 L1645.15 1211.71 L1644.57 1211.71 L1643.98 1211.71 L1643.39 1211.71 L1642.81 1211.71 L1642.22 1211.71 L1641.63 1211.71 L1641.05 1211.71 L1640.46 1211.71 L1639.88 1211.71 L1639.29 1211.71 L1638.7 1211.71 L1638.12 1211.71 L1637.53 1211.71 L1636.94 1211.71 L1636.36 1211.71 L1635.77 1211.71 L1635.18 1211.71 L1634.6 1211.71 L1634.01 1211.71 L1633.42 1211.71 L1632.84 1211.71 L1632.25 1211.71 L1631.67 1211.71 L1631.08 1211.71 L1630.49 1211.71 L1629.91 1211.71 L1629.32 1211.71 L1628.73 1211.71 L1628.15 1211.71 L1627.56 1211.71 L1626.97 1211.71 L1626.39 1211.71 L1625.8 1211.71 L1625.22 1211.71 L1624.63 1211.71 L1624.04 1211.71 L1623.46 1211.71 L1622.87 1211.71 L1622.28 1211.71 L1621.7 1211.71 L1621.11 1211.71 L1620.52 1211.71 L1619.94 1211.71 L1619.35 1211.71 L1618.76 1211.71 L1618.18 1211.71 L1617.59 1211.71 L1617.01 1211.71 L1616.42 1211.71 L1615.83 1211.71 L1615.25 1211.71 L1614.66 1211.71 L1614.07 1211.71 L1613.49 1211.71 L1612.9 1211.71 L1612.31 1211.71 L1611.73 1211.71 L1611.14 1211.71 L1610.55 1211.71 L1609.97 1211.71 L1609.38 1211.71 L1608.8 1211.71 L1608.21 1211.71 L1607.62 1211.71 L1607.04 1211.71 L1606.45 1211.71 L1605.86 1211.71 L1605.28 1211.71 L1604.69 1211.71 L1604.1 1211.71 L1603.52 1211.71 L1602.93 1211.71 L1602.34 1211.71 L1601.76 1211.71 L1601.17 1211.71 L1600.59 1211.71 L1600 1211.71 L1599.41 1211.71 L1598.83 1211.71 L1598.24 1211.71 L1597.65 1211.71 L1597.07 1211.71 L1596.48 1211.71 L1595.89 1211.71 L1595.31 1211.71 L1594.72 1211.71 L1594.14 1211.71 L1593.55 1211.71 L1592.96 1211.71 L1592.38 1211.71 L1591.79 1211.71 L1591.2 1211.71 L1590.62 1211.71 L1590.03 1211.71 L1589.44 1211.71 L1588.86 1211.71 L1588.27 1211.71 L1587.68 1211.71 L1587.1 1211.71 L1586.51 1211.71 L1585.93 1211.71 L1585.34 1211.71 L1584.75 1211.71 L1584.17 1211.71 L1583.58 1211.71 L1582.99 1211.71 L1582.41 1211.71 L1581.82 1211.71 L1581.23 1211.71 L1580.65 1211.71 L1580.06 1211.71 L1579.47 1211.71 L1578.89 1211.71 L1578.3 1211.71 L1577.72 1211.71 L1577.13 1211.71 L1576.54 1211.71 L1575.96 1211.71 L1575.37 1211.71 L1574.78 1211.71 L1574.2 1211.71 L1573.61 1211.71 L1573.02 1211.71 L1572.44 1211.71 L1571.85 1211.71 L1571.27 1211.71 L1570.68 1211.71 L1570.09 1211.71 L1569.51 1211.71 L1568.92 1211.71 L1568.33 1211.71 L1567.75 1211.71 L1567.16 1211.71 L1566.57 1211.71 L1565.99 1211.71 L1565.4 1211.71 L1564.81 1211.71 L1564.23 1211.71 L1563.64 1211.71 L1563.06 1211.71 L1562.47 1211.71 L1561.88 1211.71 L1561.3 1211.71 L1560.71 1211.71 L1560.12 1211.71 L1559.54 1211.71 L1558.95 1211.71 L1558.36 1211.71 L1557.78 1211.71 L1557.19 1211.71 L1556.6 1211.71 L1556.02 1211.71 L1555.43 1211.71 L1554.85 1211.71 L1554.26 1211.71 L1553.67 1211.71 L1553.09 1211.71 L1552.5 1211.71 L1551.91 1211.71 L1551.33 1211.71 L1550.74 1211.71 L1550.15 1211.71 L1549.57 1211.71 L1548.98 1211.71 L1548.4 1211.71 L1547.81 1211.71 L1547.22 1211.71 L1546.64 1211.71 L1546.05 1211.71 L1545.46 1211.71 L1544.88 1211.71 L1544.29 1211.71 L1543.7 1211.71 L1543.12 1211.71 L1542.53 1211.71 L1541.94 1211.71 L1541.36 1211.71 L1540.77 1211.71 L1540.19 1211.71 L1539.6 1211.71 L1539.01 1211.71 L1538.43 1211.71 L1537.84 1211.71 L1537.25 1211.71 L1536.67 1211.71 L1536.08 1211.71 L1535.49 1211.71 L1534.91 1211.71 L1534.32 1211.71 L1533.73 1211.71 L1533.15 1211.71 L1532.56 1211.71 L1531.98 1211.71 L1531.39 1211.71 L1530.8 1211.71 L1530.22 1211.71 L1529.63 1211.71 L1529.04 1211.71 L1528.46 1211.71 L1527.87 1211.71 L1527.28 1211.71 L1526.7 1211.71 L1526.11 1211.71 L1525.52 1211.71 L1524.94 1211.71 L1524.35 1211.71 L1523.77 1211.71 L1523.18 1211.71 L1522.59 1211.71 L1522.01 1211.71 L1521.42 1211.71 L1520.83 1211.71 L1520.25 1211.71 L1519.66 1211.71 L1519.07 1211.71 L1518.49 1211.71 L1517.9 1211.71 L1517.32 1211.71 L1516.73 1211.71 L1516.14 1211.71 L1515.56 1211.71 L1514.97 1211.71 L1514.38 1211.71 L1513.8 1211.71 L1513.21 1211.71 L1512.62 1211.71 L1512.04 1211.71 L1511.45 1211.71 L1510.86 1211.71 L1510.28 1211.71 L1509.69 1211.71 L1509.11 1211.71 L1508.52 1211.71 L1507.93 1211.71 L1507.35 1211.71 L1506.76 1211.71 L1506.17 1211.71 L1505.59 1211.71 L1505 1211.71 L1504.41 1211.71 L1503.83 1211.71 L1503.24 1211.71 L1502.65 1211.71 L1502.07 1211.71 L1501.48 1211.71 L1500.9 1211.71 L1500.31 1211.71 L1499.72 1211.71 L1499.14 1211.71 L1498.55 1211.71 L1497.96 1211.71 L1497.38 1211.71 L1496.79 1211.71 L1496.2 1211.71 L1495.62 1211.71 L1495.03 1211.71 L1494.45 1211.71 L1493.86 1211.71 L1493.27 1211.71 L1492.69 1211.71 L1492.1 1211.71 L1491.51 1211.71 L1490.93 1211.71 L1490.34 1211.71 L1489.75 1211.71 L1489.17 1211.71 L1488.58 1211.71 L1487.99 1211.71 L1487.41 1211.71 L1486.82 1211.71 L1486.24 1211.71 L1485.65 1211.71 L1485.06 1211.71 L1484.48 1211.71 L1483.89 1211.71 L1483.3 1211.71 L1482.72 1211.71 L1482.13 1211.71 L1481.54 1211.71 L1480.96 1211.71 L1480.37 1211.71 L1479.78 1211.71 L1479.2 1211.71 L1478.61 1211.71 L1478.03 1211.71 L1477.44 1211.71 L1476.85 1211.71 L1476.27 1211.71 L1475.68 1211.71 L1475.09 1211.71 L1474.51 1211.71 L1473.92 1211.71 L1473.33 1211.71 L1472.75 1211.71 L1472.16 1211.71 L1471.57 1211.71 L1470.99 1211.71 L1470.4 1211.71 L1469.82 1211.71 L1469.23 1211.71 L1468.64 1211.71 L1468.06 1211.71 L1467.47 1211.71 L1466.88 1211.71 L1466.3 1211.71 L1465.71 1211.71 L1465.12 1211.71 L1464.54 1211.71 L1463.95 1211.71 L1463.37 1211.71 L1462.78 1211.71 L1462.19 1211.71 L1461.61 1211.71 L1461.02 1211.71 L1460.43 1211.71 L1459.85 1211.71 L1459.26 1211.71 L1458.67 1211.71 L1458.09 1211.71 L1457.5 1211.71 L1456.91 1211.71 L1456.33 1211.71 L1455.74 1211.71 L1455.16 1211.71 L1454.57 1211.71 L1453.98 1211.71 L1453.4 1211.71 L1452.81 1211.71 L1452.22 1211.71 L1451.64 1211.71 L1451.05 1211.71 L1450.46 1211.71 L1449.88 1211.71 L1449.29 1211.71 L1448.7 1211.71 L1448.12 1211.71 L1447.53 1211.71 L1446.95 1211.71 L1446.36 1211.71 L1445.77 1211.71 L1445.19 1211.71 L1444.6 1211.71 L1444.01 1211.71 L1443.43 1211.71 L1442.84 1211.71 L1442.25 1211.71 L1441.67 1211.71 L1441.08 1211.71 L1440.5 1211.71 L1439.91 1211.71 L1439.32 1211.71 L1438.74 1211.71 L1438.15 1211.71 L1437.56 1211.71 L1436.98 1211.71 L1436.39 1211.71 L1435.8 1211.71 L1435.22 1211.71 L1434.63 1211.71 L1434.04 1211.71 L1433.46 1211.71 L1432.87 1211.71 L1432.29 1211.71 L1431.7 1211.71 L1431.11 1211.71 L1430.53 1211.71 L1429.94 1211.71 L1429.35 1211.71 L1428.77 1211.71 L1428.18 1211.71 L1427.59 1211.71 L1427.01 1211.71 L1426.42 1211.71 L1425.83 1211.71 L1425.25 1211.71 L1424.66 1211.71 L1424.08 1211.71 L1423.49 1211.71 L1422.9 1211.71 L1422.32 1211.71 L1421.73 1211.71 L1421.14 1211.71 L1420.56 1211.71 L1419.97 1211.71 L1419.38 1211.71 L1418.8 1211.71 L1418.21 1211.71 L1417.63 1211.71 L1417.04 1211.71 L1416.45 1211.71 L1415.87 1211.71 L1415.28 1211.71 L1414.69 1211.71 L1414.11 1211.71 L1413.52 1211.71 L1412.93 1211.71 L1412.35 1211.71 L1411.76 1211.71 L1411.17 1211.71 L1410.59 1211.71 L1410 1211.71 L1409.42 1211.71 L1408.83 1211.71 L1408.24 1211.71 L1407.66 1211.71 L1407.07 1211.71 L1406.48 1211.71 L1405.9 1211.71 L1405.31 1211.71 L1404.72 1211.71 L1404.14 1211.71 L1403.55 1211.71 L1402.96 1211.71 L1402.38 1211.71 L1401.79 1211.71 L1401.21 1211.71 L1400.62 1211.71 L1400.03 1211.71 L1399.45 1211.71 L1398.86 1211.71 L1398.27 1211.71 L1397.69 1211.71 L1397.1 1211.71 L1396.51 1211.71 L1395.93 1211.71 L1395.34 1211.71 L1394.75 1211.71 L1394.17 1211.71 L1393.58 1211.71 L1393 1211.71 L1392.41 1211.71 L1391.82 1211.71 L1391.24 1211.71 L1390.65 1211.71 L1390.06 1211.71 L1389.48 1211.71 L1388.89 1211.71 L1388.3 1211.71 L1387.72 1211.71 L1387.13 1211.71 L1386.55 1211.71 L1385.96 1211.71 L1385.37 1211.71 L1384.79 1211.71 L1384.2 1211.71 L1383.61 1211.71 L1383.03 1211.71 L1382.44 1211.71 L1381.85 1211.71 L1381.27 1211.71 L1380.68 1211.71 L1380.09 1211.71 L1379.51 1211.71 L1378.92 1211.71 L1378.34 1211.71 L1377.75 1211.71 L1377.16 1211.71 L1376.58 1211.71 L1375.99 1211.71 L1375.4 1211.71 L1374.82 1211.71 L1374.23 1211.71 L1373.64 1211.71 L1373.06 1211.71 L1372.47 1211.71 L1371.88 1211.71 L1371.3 1211.71 L1370.71 1211.71 L1370.13 1211.71 L1369.54 1211.71 L1368.95 1211.71 L1368.37 1211.71 L1367.78 1211.71 L1367.19 1211.71 L1366.61 1211.71 L1366.02 1211.71 L1365.43 1211.71 L1364.85 1211.71 L1364.26 1211.71 L1363.68 1211.71 L1363.09 1211.71 L1362.5 1211.71 L1361.92 1211.71 L1361.33 1211.71 L1360.74 1211.71 L1360.16 1211.71 L1359.57 1211.71 L1358.98 1211.71 L1358.4 1211.71 L1357.81 1211.71 L1357.22 1211.71 L1356.64 1211.71 L1356.05 1211.71 L1355.47 1211.71 L1354.88 1211.71 L1354.29 1211.71 L1353.71 1211.71 L1353.12 1211.71 L1352.53 1211.71 L1351.95 1211.71 L1351.36 1211.71 L1350.77 1211.71 L1350.19 1211.71 L1349.6 1211.71 L1349.01 1211.71 L1348.43 1211.71 L1347.84 1211.71 L1347.26 1211.71 L1346.67 1211.71 L1346.08 1211.71 L1345.5 1211.71 L1344.91 1211.71 L1344.32 1211.71 L1343.74 1211.71 L1343.15 1211.71 L1342.56 1211.71 L1341.98 1211.71 L1341.39 1211.71 L1340.8 1211.71 L1340.22 1211.71 L1339.63 1211.71 L1339.05 1211.71 L1338.46 1211.71 L1337.87 1211.71 L1337.29 1211.71 L1336.7 1211.71 L1336.11 1211.71 L1335.53 1211.71 L1334.94 1211.71 L1334.35 1211.71 L1333.77 1211.71 L1333.18 1211.71 L1332.6 1211.71 L1332.01 1211.71 L1331.42 1211.71 L1330.84 1211.71 L1330.25 1211.71 L1329.66 1211.71 L1329.08 1211.71 L1328.49 1211.71 L1327.9 1211.71 L1327.32 1211.71 L1326.73 1211.71 L1326.14 1211.71 L1325.56 1211.71 L1324.97 1211.71 L1324.39 1211.71 L1323.8 1211.71 L1323.21 1211.71 L1322.63 1211.71 L1322.04 1211.71 L1321.45 1211.71 L1320.87 1211.71 L1320.28 1211.71 L1319.69 1211.71 L1319.11 1211.71 L1318.52 1211.71 L1317.93 1211.71 L1317.35 1211.71 L1316.76 1211.71 L1316.18 1211.71 L1315.59 1211.71 L1315 1211.71 L1314.42 1211.71 L1313.83 1211.71 L1313.24 1211.71 L1312.66 1211.71 L1312.07 1211.71 L1311.48 1211.71 L1310.9 1211.71 L1310.31 1211.71 L1309.73 1211.71 L1309.14 1211.71 L1308.55 1211.71 L1307.97 1211.71 L1307.38 1211.71 L1306.79 1211.71 L1306.21 1211.71 L1305.62 1211.71 L1305.03 1211.71 L1304.45 1211.71 L1303.86 1211.71 L1303.27 1211.71 L1302.69 1211.71 L1302.1 1211.71 L1301.52 1211.71 L1300.93 1211.71 L1300.34 1211.71 L1299.76 1211.71 L1299.17 1211.71 L1298.58 1211.71 L1298 1211.71 L1297.41 1211.71 L1296.82 1211.71 L1296.24 1211.71 L1295.65 1211.71 L1295.06 1211.71 L1294.48 1211.71 L1293.89 1211.71 L1293.31 1211.71 L1292.72 1211.71 L1292.13 1211.71 L1291.55 1211.71 L1290.96 1211.71 L1290.37 1211.71 L1289.79 1211.71 L1289.2 1211.71 L1288.61 1211.71 L1288.03 1211.71 L1287.44 1211.71 L1286.86 1211.71 L1286.27 1211.71 L1285.68 1211.71 L1285.1 1211.71 L1284.51 1211.71 L1283.92 1211.71 L1283.34 1211.71 L1282.75 1211.71 L1282.16 1211.71 L1281.58 1211.71 L1280.99 1211.71 L1280.4 1211.71 L1279.82 1211.71 L1279.23 1211.71 L1278.65 1211.71 L1278.06 1211.71 L1277.47 1211.71 L1276.89 1211.71 L1276.3 1211.71 L1275.71 1211.71 L1275.13 1211.71 L1274.54 1211.71 L1273.95 1211.71 L1273.37 1211.71 L1272.78 1211.71 L1272.19 1211.71 L1271.61 1211.71 L1271.02 1211.71 L1270.44 1211.71 L1269.85 1211.71 L1269.26 1211.71 L1268.68 1211.71 L1268.09 1211.71 L1267.5 1211.71 L1266.92 1211.71 L1266.33 1211.71 L1265.74 1211.71 L1265.16 1211.71 L1264.57 1211.71 L1263.98 1211.71 L1263.4 1211.71 L1262.81 1211.71 L1262.23 1211.71 L1261.64 1211.71 L1261.05 1211.71 L1260.47 1211.71 L1259.88 1211.71 L1259.29 1211.71 L1258.71 1211.71 L1258.12 1211.71 L1257.53 1211.71 L1256.95 1211.71 L1256.36 1211.71 L1255.78 1211.71 L1255.19 1211.71 L1254.6 1211.71 L1254.02 1211.71 L1253.43 1211.71 L1252.84 1211.71 L1252.26 1211.71 L1251.67 1211.71 L1251.08 1211.71 L1250.5 1211.71 L1249.91 1211.71 L1249.32 1211.71 L1248.74 1211.71 L1248.15 1211.71 L1247.57 1211.71 L1246.98 1211.71 L1246.39 1211.71 L1245.81 1211.71 L1245.22 1211.71 L1244.63 1211.71 L1244.05 1211.71 L1243.46 1211.71 L1242.87 1211.71 L1242.29 1211.71 L1241.7 1211.71 L1241.11 1211.71 L1240.53 1211.71 L1239.94 1211.71 L1239.36 1211.71 L1238.77 1211.71 L1238.18 1211.71 L1237.6 1211.71 L1237.01 1211.71 L1236.42 1211.71 L1235.84 1211.71 L1235.25 1211.71 L1234.66 1211.71 L1234.08 1211.71 L1233.49 1211.71 L1232.91 1211.71 L1232.32 1211.71 L1231.73 1211.71 L1231.15 1211.71 L1230.56 1211.71 L1229.97 1211.71 L1229.39 1211.71 L1228.8 1211.71 L1228.21 1211.71 L1227.63 1211.71 L1227.04 1211.71 L1226.45 1211.71 L1225.87 1211.71 L1225.28 1211.71 L1224.7 1211.71 L1224.11 1211.71 L1223.52 1211.71 L1222.94 1211.71 L1222.35 1211.71 L1221.76 1211.71 L1221.18 1211.71 L1220.59 1211.71 L1220 1211.71 L1219.42 1211.71 L1218.83 1211.71 L1218.24 1211.71 L1217.66 1211.71 L1217.07 1211.71 L1216.49 1211.71 L1215.9 1211.71 L1215.31 1211.71 L1214.73 1211.71 L1214.14 1211.71 L1213.55 1211.71 L1212.97 1211.71 L1212.38 1211.71 L1211.79 1211.71 L1211.21 1211.71 L1210.62 1211.71 L1210.03 1211.71 L1209.45 1211.71 L1208.86 1211.71 L1208.28 1211.71 L1207.69 1211.71 L1207.1 1211.71 L1206.52 1211.71 L1205.93 1211.71 L1205.34 1211.71 L1204.76 1211.71 L1204.17 1211.71 L1203.58 1211.71 L1203 1211.71 L1202.41 1211.71 L1201.83 1211.71 L1201.24 1211.71 L1200.65 1211.71 L1200.07 1211.71 L1199.48 1211.71 L1198.89 1211.71 L1198.31 1211.71 L1197.72 1211.71 L1197.13 1211.71 L1196.55 1211.71 L1195.96 1211.71 L1195.37 1211.71 L1194.79 1211.71 L1194.2 1211.71 L1193.62 1211.71 L1193.03 1211.71 L1192.44 1211.71 L1191.86 1211.71 L1191.27 1211.71 L1190.68 1211.71 L1190.1 1211.71 L1189.51 1211.71 L1188.92 1211.71 L1188.34 1211.71 L1187.75 1211.71 L1187.16 1211.71 L1186.58 1211.71 L1185.99 1211.71 L1185.41 1211.71 L1184.82 1211.71 L1184.23 1211.71 L1183.65 1211.71 L1183.06 1211.71 L1182.47 1211.71 L1181.89 1211.71 L1181.3 1211.71 L1180.71 1211.71 L1180.13 1211.71 L1179.54 1211.71 L1178.96 1211.71 L1178.37 1211.71 L1177.78 1211.71 L1177.2 1211.71 L1176.61 1211.71 L1176.02 1211.71 L1175.44 1211.71 L1174.85 1211.71 L1174.26 1211.71 L1173.68 1211.71 L1173.09 1211.71 L1172.5 1211.71 L1171.92 1211.71 L1171.33 1211.71 L1170.75 1211.71 L1170.16 1211.71 L1169.57 1211.71 L1168.99 1211.71 L1168.4 1211.71 L1167.81 1211.71 L1167.23 1211.71 L1166.64 1211.71 L1166.05 1211.71 L1165.47 1211.71 L1164.88 1211.71 L1164.29 1211.71 L1163.71 1211.71 L1163.12 1211.71 L1162.54 1211.71 L1161.95 1211.71 L1161.36 1211.71 L1160.78 1211.71 L1160.19 1211.71 L1159.6 1211.71 L1159.02 1211.71 L1158.43 1211.71 L1157.84 1211.71 L1157.26 1211.71 L1156.67 1211.71 L1156.09 1211.71 L1155.5 1211.71 L1154.91 1211.71 L1154.33 1211.71 L1153.74 1211.71 L1153.15 1211.71 L1152.57 1211.71 L1151.98 1211.71 L1151.39 1211.71 L1150.81 1211.71 L1150.22 1211.71 L1149.63 1211.71 L1149.05 1211.71 L1148.46 1211.71 L1147.88 1211.71 L1147.29 1211.71 L1146.7 1211.71 L1146.12 1211.71 L1145.53 1211.71 L1144.94 1211.71 L1144.36 1211.71 L1143.77 1211.71 L1143.18 1211.71 L1142.6 1211.71 L1142.01 1211.71 L1141.42 1211.71 L1140.84 1211.71 L1140.25 1211.71 L1139.67 1211.71 L1139.08 1211.71 L1138.49 1211.71 L1137.91 1211.71 L1137.32 1211.71 L1136.73 1211.71 L1136.15 1211.71 L1135.56 1211.71 L1134.97 1211.71 L1134.39 1211.71 L1133.8 1211.71 L1133.21 1211.71 L1132.63 1211.71 L1132.04 1211.71 L1131.46 1211.71 L1130.87 1211.71 L1130.28 1211.71 L1129.7 1211.71 L1129.11 1211.71 L1128.52 1211.71 L1127.94 1211.71 L1127.35 1211.71 L1126.76 1211.71 L1126.18 1211.71 L1125.59 1211.71 L1125.01 1211.71 L1124.42 1211.71 L1123.83 1211.71 L1123.25 1211.71 L1122.66 1211.71 L1122.07 1211.71 L1121.49 1211.71 L1120.9 1211.71 L1120.31 1211.71 L1119.73 1211.71 L1119.14 1211.71 L1118.55 1211.71 L1117.97 1211.71 L1117.38 1211.71 L1116.8 1211.71 L1116.21 1211.71 L1115.62 1211.71 L1115.04 1211.71 L1114.45 1211.71 L1113.86 1211.71 L1113.28 1211.71 L1112.69 1211.71 L1112.1 1211.71 L1111.52 1211.71 L1110.93 1211.71 L1110.34 1211.71 L1109.76 1211.71 L1109.17 1211.71 L1108.59 1211.71 L1108 1211.71 L1107.41 1211.71 L1106.83 1211.71 L1106.24 1211.71 L1105.65 1211.71 L1105.07 1211.71 L1104.48 1211.71 L1103.89 1211.71 L1103.31 1211.71 L1102.72 1211.71 L1102.14 1211.71 L1101.55 1211.71 L1100.96 1211.71 L1100.38 1211.71 L1099.79 1211.71 L1099.2 1211.71 L1098.62 1211.71 L1098.03 1211.71 L1097.44 1211.71 L1096.86 1211.71 L1096.27 1211.71 L1095.68 1211.71 L1095.1 1211.71 L1094.51 1211.71 L1093.93 1211.71 L1093.34 1211.71 L1092.75 1211.71 L1092.17 1211.71 L1091.58 1211.71 L1090.99 1211.71 L1090.41 1211.71 L1089.82 1211.71 L1089.23 1211.71 L1088.65 1211.71 L1088.06 1211.71 L1087.47 1211.71 L1086.89 1211.71 L1086.3 1211.71 L1085.72 1211.71 L1085.13 1211.71 L1084.54 1211.71 L1083.96 1211.71 L1083.37 1211.71 L1082.78 1211.71 L1082.2 1211.71 L1081.61 1211.71 L1081.02 1211.71 L1080.44 1211.71 L1079.85 1211.71 L1079.26 1211.71 L1078.68 1211.71 L1078.09 1211.71 L1077.51 1211.71 L1076.92 1211.71 L1076.33 1211.71 L1075.75 1211.71 L1075.16 1211.71 L1074.57 1211.71 L1073.99 1211.71 L1073.4 1211.71 L1072.81 1211.71 L1072.23 1211.71 L1071.64 1211.71 L1071.06 1211.71 L1070.47 1211.71 L1069.88 1211.71 L1069.3 1211.71 L1068.71 1211.71 L1068.12 1211.71 L1067.54 1211.71 L1066.95 1211.71 L1066.36 1211.71 L1065.78 1211.71 L1065.19 1211.71 L1064.6 1211.71 L1064.02 1211.71 L1063.43 1211.71 L1062.85 1211.71 L1062.26 1211.71 L1061.67 1211.71 L1061.09 1211.71 L1060.5 1211.71 L1059.91 1211.71 L1059.33 1211.71 L1058.74 1211.71 L1058.15 1211.71 L1057.57 1211.71 L1056.98 1211.71 L1056.39 1211.71 L1055.81 1211.71 L1055.22 1211.71 L1054.64 1211.71 L1054.05 1211.71 L1053.46 1211.71 L1052.88 1211.71 L1052.29 1211.71 L1051.7 1211.71 L1051.12 1211.71 L1050.53 1211.71 L1049.94 1211.71 L1049.36 1211.71 L1048.77 1211.71 L1048.19 1211.71 L1047.6 1211.71 L1047.01 1211.71 L1046.43 1211.71 L1045.84 1211.71 L1045.25 1211.71 L1044.67 1211.71 L1044.08 1211.71 L1043.49 1211.71 L1042.91 1211.71 L1042.32 1211.71 L1041.73 1211.71 L1041.15 1211.71 L1040.56 1211.71 L1039.98 1211.71 L1039.39 1211.71 L1038.8 1211.71 L1038.22 1211.71 L1037.63 1211.71 L1037.04 1211.71 L1036.46 1211.71 L1035.87 1211.71 L1035.28 1211.71 L1034.7 1211.71 L1034.11 1211.71 L1033.52 1211.71 L1032.94 1211.71 L1032.35 1211.71 L1031.77 1211.71 L1031.18 1211.71 L1030.59 1211.71 L1030.01 1211.71 L1029.42 1211.71 L1028.83 1211.71 L1028.25 1211.71 L1027.66 1211.71 L1027.07 1211.71 L1026.49 1211.71 L1025.9 1211.71 L1025.32 1211.71 L1024.73 1211.71 L1024.14 1211.71 L1023.56 1211.71 L1022.97 1211.71 L1022.38 1211.71 L1021.8 1211.71 L1021.21 1211.71 L1020.62 1211.71 L1020.04 1211.71 L1019.45 1211.71 L1018.86 1211.71 L1018.28 1211.71 L1017.69 1211.71 L1017.11 1211.71 L1016.52 1211.71 L1015.93 1211.71 L1015.35 1211.71 L1014.76 1211.71 L1014.17 1211.71 L1013.59 1211.71 L1013 1211.71 L1012.41 1211.71 L1011.83 1211.71 L1011.24 1211.71 L1010.65 1211.71 L1010.07 1211.71 L1009.48 1211.71 L1008.9 1211.71 L1008.31 1211.71 L1007.72 1211.71 L1007.14 1211.71 L1006.55 1211.71 L1005.96 1211.71 L1005.38 1211.71 L1004.79 1211.71 L1004.2 1211.71 L1003.62 1211.71 L1003.03 1211.71 L1002.44 1211.71 L1001.86 1211.71 L1001.27 1211.71 L1000.69 1211.71 L1000.1 1211.71 L999.513 1211.71 L998.926 1211.71 L998.34 1211.71 L997.754 1211.71 L997.167 1211.71 L996.581 1211.71 L995.994 1211.71 L995.408 1211.71 L994.822 1211.71 L994.235 1211.71 L993.649 1211.71 L993.062 1211.71 L992.476 1211.71 L991.889 1211.71 L991.303 1211.71 L990.717 1211.71 L990.13 1211.71 L989.544 1211.71 L988.957 1211.71 L988.371 1211.71 L987.785 1211.71 L987.198 1211.71 L986.612 1211.71 L986.025 1211.71  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.79 986.612,1211.79 987.198,1211.79 987.785,1211.79 988.371,1211.79 988.957,1211.79 989.544,1211.79 990.13,1211.79 990.717,1211.79 991.303,1211.79 991.889,1211.79 992.476,1211.79 993.062,1211.79 993.649,1211.79 994.235,1211.79 994.822,1211.79 995.408,1211.79 995.994,1211.79 996.581,1211.79 997.167,1211.79 997.754,1211.79 998.34,1211.79 998.926,1211.79 999.513,1211.79 1000.1,1211.79 1000.69,1211.79 1001.27,1211.79 1001.86,1211.79 1002.44,1211.79 1003.03,1211.79 1003.62,1211.79 1004.2,1211.79 1004.79,1211.79 1005.38,1211.79 1005.96,1211.79 1006.55,1211.79 1007.14,1211.79 1007.72,1211.79 1008.31,1211.79 1008.9,1211.79 1009.48,1211.79 1010.07,1211.79 1010.65,1211.79 1011.24,1211.79 1011.83,1211.79 1012.41,1211.79 1013,1211.79 1013.59,1211.79 1014.17,1211.79 1014.76,1211.79 1015.35,1211.79 1015.93,1211.79 1016.52,1211.79 1017.11,1211.79 1017.69,1211.79 1018.28,1211.79 1018.86,1211.79 1019.45,1211.79 1020.04,1211.79 1020.62,1211.79 1021.21,1211.79 1021.8,1211.79 1022.38,1211.79 1022.97,1211.79 1023.56,1211.79 1024.14,1211.79 1024.73,1211.79 1025.32,1211.79 1025.9,1211.79 1026.49,1211.79 1027.07,1211.79 1027.66,1211.79 1028.25,1211.79 1028.83,1211.79 1029.42,1211.79 1030.01,1211.79 1030.59,1211.79 1031.18,1211.79 1031.77,1211.79 1032.35,1211.79 1032.94,1211.79 1033.52,1211.79 1034.11,1211.79 1034.7,1211.79 1035.28,1211.79 1035.87,1211.79 1036.46,1211.79 1037.04,1211.79 1037.63,1211.79 1038.22,1211.79 1038.8,1211.79 1039.39,1211.79 1039.98,1211.79 1040.56,1211.79 1041.15,1211.79 1041.73,1211.79 1042.32,1211.79 1042.91,1211.79 1043.49,1211.79 1044.08,1211.79 1044.67,1211.79 1045.25,1211.79 1045.84,1211.79 1046.43,1211.79 1047.01,1211.79 1047.6,1211.79 1048.19,1211.79 1048.77,1211.79 1049.36,1211.79 1049.94,1211.79 1050.53,1211.79 1051.12,1211.79 1051.7,1211.79 1052.29,1211.79 1052.88,1211.79 1053.46,1211.79 1054.05,1211.79 1054.64,1211.79 1055.22,1211.79 1055.81,1211.79 1056.39,1211.79 1056.98,1211.79 1057.57,1211.79 1058.15,1211.79 1058.74,1211.79 1059.33,1211.79 1059.91,1211.79 1060.5,1211.79 1061.09,1211.79 1061.67,1211.79 1062.26,1211.79 1062.85,1211.79 1063.43,1211.79 1064.02,1211.79 1064.6,1211.79 1065.19,1211.79 1065.78,1211.79 1066.36,1211.79 1066.95,1211.79 1067.54,1211.79 1068.12,1211.79 1068.71,1211.79 1069.3,1211.79 1069.88,1211.79 1070.47,1211.79 1071.06,1211.79 1071.64,1211.79 1072.23,1211.79 1072.81,1211.79 1073.4,1211.79 1073.99,1211.79 1074.57,1211.79 1075.16,1211.79 1075.75,1211.79 1076.33,1211.79 1076.92,1211.79 1077.51,1211.79 1078.09,1211.79 1078.68,1211.79 1079.26,1211.79 1079.85,1211.79 1080.44,1211.79 1081.02,1211.79 1081.61,1211.79 1082.2,1211.79 1082.78,1211.79 1083.37,1211.79 1083.96,1211.79 1084.54,1211.79 1085.13,1211.79 1085.72,1211.79 1086.3,1211.79 1086.89,1211.79 1087.47,1211.79 1088.06,1211.79 1088.65,1211.79 1089.23,1211.79 1089.82,1211.79 1090.41,1211.79 1090.99,1211.79 1091.58,1211.79 1092.17,1211.79 1092.75,1211.79 1093.34,1211.79 1093.93,1211.79 1094.51,1211.79 1095.1,1211.79 1095.68,1211.79 1096.27,1211.79 1096.86,1211.79 1097.44,1211.79 1098.03,1211.79 1098.62,1211.79 1099.2,1211.79 1099.79,1211.79 1100.38,1211.79 1100.96,1211.79 1101.55,1211.79 1102.14,1211.79 1102.72,1211.79 1103.31,1211.79 1103.89,1211.79 1104.48,1211.79 1105.07,1211.79 1105.65,1211.79 1106.24,1211.79 1106.83,1211.79 1107.41,1211.79 1108,1211.79 1108.59,1211.79 1109.17,1211.79 1109.76,1211.79 1110.34,1211.79 1110.93,1211.79 1111.52,1211.79 1112.1,1211.79 1112.69,1211.79 1113.28,1211.79 1113.86,1211.79 1114.45,1211.79 1115.04,1211.79 1115.62,1211.79 1116.21,1211.79 1116.8,1211.79 1117.38,1211.79 1117.97,1211.79 1118.55,1211.79 1119.14,1211.79 1119.73,1211.79 1120.31,1211.79 1120.9,1211.79 1121.49,1211.79 1122.07,1211.79 1122.66,1211.79 1123.25,1211.79 1123.83,1211.79 1124.42,1211.79 1125.01,1211.79 1125.59,1211.79 1126.18,1211.79 1126.76,1211.79 1127.35,1211.79 1127.94,1211.79 1128.52,1211.79 1129.11,1211.79 1129.7,1211.79 1130.28,1211.79 1130.87,1211.79 1131.46,1211.79 1132.04,1211.79 1132.63,1211.79 1133.21,1211.79 1133.8,1211.79 1134.39,1211.79 1134.97,1211.79 1135.56,1211.79 1136.15,1211.79 1136.73,1211.79 1137.32,1211.79 1137.91,1211.79 1138.49,1211.79 1139.08,1211.79 1139.67,1211.79 1140.25,1211.79 1140.84,1211.79 1141.42,1211.79 1142.01,1211.79 1142.6,1211.79 1143.18,1211.79 1143.77,1211.79 1144.36,1211.79 1144.94,1211.79 1145.53,1211.79 1146.12,1211.79 1146.7,1211.79 1147.29,1211.79 1147.88,1211.79 1148.46,1211.79 1149.05,1211.79 1149.63,1211.79 1150.22,1211.79 1150.81,1211.79 1151.39,1211.79 1151.98,1211.79 1152.57,1211.79 1153.15,1211.79 1153.74,1211.79 1154.33,1211.79 1154.91,1211.79 1155.5,1211.79 1156.09,1211.79 1156.67,1211.79 1157.26,1211.79 1157.84,1211.79 1158.43,1211.79 1159.02,1211.79 1159.6,1211.79 1160.19,1211.79 1160.78,1211.79 1161.36,1211.79 1161.95,1211.79 1162.54,1211.79 1163.12,1211.79 1163.71,1211.79 1164.29,1211.79 1164.88,1211.79 1165.47,1211.79 1166.05,1211.79 1166.64,1211.79 1167.23,1211.79 1167.81,1211.79 1168.4,1211.79 1168.99,1211.79 1169.57,1211.79 1170.16,1211.79 1170.75,1211.79 1171.33,1211.79 1171.92,1211.79 1172.5,1211.79 1173.09,1211.79 1173.68,1211.79 1174.26,1211.79 1174.85,1211.79 1175.44,1211.79 1176.02,1211.79 1176.61,1211.79 1177.2,1211.79 1177.78,1211.79 1178.37,1211.79 1178.96,1211.79 1179.54,1211.79 1180.13,1211.79 1180.71,1211.79 1181.3,1211.79 1181.89,1211.79 1182.47,1211.79 1183.06,1211.79 1183.65,1211.79 1184.23,1211.79 1184.82,1211.79 1185.41,1211.79 1185.99,1211.79 1186.58,1211.79 1187.16,1211.79 1187.75,1211.79 1188.34,1211.79 1188.92,1211.79 1189.51,1211.79 1190.1,1211.79 1190.68,1211.79 1191.27,1211.79 1191.86,1211.79 1192.44,1211.79 1193.03,1211.79 1193.62,1211.79 1194.2,1211.79 1194.79,1211.79 1195.37,1211.79 1195.96,1211.79 1196.55,1211.79 1197.13,1211.79 1197.72,1211.79 1198.31,1211.79 1198.89,1211.79 1199.48,1211.79 1200.07,1211.79 1200.65,1211.79 1201.24,1211.79 1201.83,1211.79 1202.41,1211.79 1203,1211.79 1203.58,1211.79 1204.17,1211.79 1204.76,1211.79 1205.34,1211.79 1205.93,1211.79 1206.52,1211.79 1207.1,1211.79 1207.69,1211.79 1208.28,1211.79 1208.86,1211.79 1209.45,1211.79 1210.03,1211.79 1210.62,1211.79 1211.21,1211.79 1211.79,1211.79 1212.38,1211.79 1212.97,1211.79 1213.55,1211.79 1214.14,1211.79 1214.73,1211.79 1215.31,1211.79 1215.9,1211.79 1216.49,1211.79 1217.07,1211.79 1217.66,1211.79 1218.24,1211.79 1218.83,1211.79 1219.42,1211.79 1220,1211.79 1220.59,1211.79 1221.18,1211.79 1221.76,1211.79 1222.35,1211.79 1222.94,1211.79 1223.52,1211.79 1224.11,1211.79 1224.7,1211.79 1225.28,1211.79 1225.87,1211.79 1226.45,1211.79 1227.04,1211.79 1227.63,1211.79 1228.21,1211.79 1228.8,1211.79 1229.39,1211.79 1229.97,1211.79 1230.56,1211.79 1231.15,1211.79 1231.73,1211.79 1232.32,1211.79 1232.91,1211.79 1233.49,1211.79 1234.08,1211.79 1234.66,1211.79 1235.25,1211.79 1235.84,1211.79 1236.42,1211.79 1237.01,1211.79 1237.6,1211.79 1238.18,1211.79 1238.77,1211.79 1239.36,1211.79 1239.94,1211.79 1240.53,1211.79 1241.11,1211.79 1241.7,1211.79 1242.29,1211.79 1242.87,1211.79 1243.46,1211.79 1244.05,1211.79 1244.63,1211.79 1245.22,1211.79 1245.81,1211.79 1246.39,1211.79 1246.98,1211.79 1247.57,1211.79 1248.15,1211.79 1248.74,1211.79 1249.32,1211.79 1249.91,1211.79 1250.5,1211.79 1251.08,1211.79 1251.67,1211.79 1252.26,1211.79 1252.84,1211.79 1253.43,1211.79 1254.02,1211.79 1254.6,1211.79 1255.19,1211.79 1255.78,1211.79 1256.36,1211.79 1256.95,1211.79 1257.53,1211.79 1258.12,1211.79 1258.71,1211.79 1259.29,1211.79 1259.88,1211.79 1260.47,1211.79 1261.05,1211.79 1261.64,1211.79 1262.23,1211.79 1262.81,1211.79 1263.4,1211.79 1263.98,1211.79 1264.57,1211.79 1265.16,1211.79 1265.74,1211.79 1266.33,1211.79 1266.92,1211.79 1267.5,1211.79 1268.09,1211.79 1268.68,1211.79 1269.26,1211.79 1269.85,1211.79 1270.44,1211.79 1271.02,1211.79 1271.61,1211.79 1272.19,1211.79 1272.78,1211.79 1273.37,1211.79 1273.95,1211.79 1274.54,1211.79 1275.13,1211.79 1275.71,1211.79 1276.3,1211.79 1276.89,1211.79 1277.47,1211.79 1278.06,1211.79 1278.65,1211.79 1279.23,1211.79 1279.82,1211.79 1280.4,1211.79 1280.99,1211.79 1281.58,1211.79 1282.16,1211.79 1282.75,1211.79 1283.34,1211.79 1283.92,1211.79 1284.51,1211.79 1285.1,1211.79 1285.68,1211.79 1286.27,1211.79 1286.86,1211.79 1287.44,1211.79 1288.03,1211.79 1288.61,1211.79 1289.2,1211.79 1289.79,1211.79 1290.37,1211.79 1290.96,1211.79 1291.55,1211.79 1292.13,1211.79 1292.72,1211.79 1293.31,1211.79 1293.89,1211.79 1294.48,1211.79 1295.06,1211.79 1295.65,1211.79 1296.24,1211.79 1296.82,1211.79 1297.41,1211.79 1298,1211.79 1298.58,1211.79 1299.17,1211.79 1299.76,1211.79 1300.34,1211.79 1300.93,1211.79 1301.52,1211.79 1302.1,1211.79 1302.69,1211.79 1303.27,1211.79 1303.86,1211.79 1304.45,1211.79 1305.03,1211.79 1305.62,1211.79 1306.21,1211.79 1306.79,1211.79 1307.38,1211.79 1307.97,1211.79 1308.55,1211.79 1309.14,1211.79 1309.73,1211.79 1310.31,1211.79 1310.9,1211.79 1311.48,1211.79 1312.07,1211.79 1312.66,1211.79 1313.24,1211.79 1313.83,1211.79 1314.42,1211.79 1315,1211.79 1315.59,1211.79 1316.18,1211.79 1316.76,1211.79 1317.35,1211.79 1317.93,1211.79 1318.52,1211.79 1319.11,1211.79 1319.69,1211.79 1320.28,1211.79 1320.87,1211.79 1321.45,1211.79 1322.04,1211.79 1322.63,1211.79 1323.21,1211.79 1323.8,1211.79 1324.39,1211.79 1324.97,1211.79 1325.56,1211.79 1326.14,1211.79 1326.73,1211.79 1327.32,1211.79 1327.9,1211.79 1328.49,1211.79 1329.08,1211.79 1329.66,1211.79 1330.25,1211.79 1330.84,1211.79 1331.42,1211.79 1332.01,1211.79 1332.6,1211.79 1333.18,1211.79 1333.77,1211.79 1334.35,1211.79 1334.94,1211.79 1335.53,1211.79 1336.11,1211.79 1336.7,1211.79 1337.29,1211.79 1337.87,1211.79 1338.46,1211.79 1339.05,1211.79 1339.63,1211.79 1340.22,1211.79 1340.8,1211.79 1341.39,1211.79 1341.98,1211.79 1342.56,1211.79 1343.15,1211.79 1343.74,1211.79 1344.32,1211.79 1344.91,1211.79 1345.5,1211.79 1346.08,1211.79 1346.67,1211.79 1347.26,1211.79 1347.84,1211.79 1348.43,1211.79 1349.01,1211.79 1349.6,1211.79 1350.19,1211.79 1350.77,1211.79 1351.36,1211.79 1351.95,1211.79 1352.53,1211.79 1353.12,1211.79 1353.71,1211.79 1354.29,1211.79 1354.88,1211.79 1355.47,1211.79 1356.05,1211.79 1356.64,1211.79 1357.22,1211.79 1357.81,1211.79 1358.4,1211.79 1358.98,1211.79 1359.57,1211.79 1360.16,1211.79 1360.74,1211.79 1361.33,1211.79 1361.92,1211.79 1362.5,1211.79 1363.09,1211.79 1363.68,1211.79 1364.26,1211.79 1364.85,1211.79 1365.43,1211.79 1366.02,1211.79 1366.61,1211.79 1367.19,1211.79 1367.78,1211.79 1368.37,1211.79 1368.95,1211.79 1369.54,1211.79 1370.13,1211.79 1370.71,1211.79 1371.3,1211.79 1371.88,1211.79 1372.47,1211.79 1373.06,1211.79 1373.64,1211.79 1374.23,1211.79 1374.82,1211.79 1375.4,1211.79 1375.99,1211.79 1376.58,1211.79 1377.16,1211.79 1377.75,1211.79 1378.34,1211.79 1378.92,1211.79 1379.51,1211.79 1380.09,1211.79 1380.68,1211.79 1381.27,1211.79 1381.85,1211.79 1382.44,1211.79 1383.03,1211.79 1383.61,1211.79 1384.2,1211.79 1384.79,1211.79 1385.37,1211.79 1385.96,1211.79 1386.55,1211.79 1387.13,1211.79 1387.72,1211.79 1388.3,1211.79 1388.89,1211.79 1389.48,1211.79 1390.06,1211.79 1390.65,1211.79 1391.24,1211.79 1391.82,1211.79 1392.41,1211.79 1393,1211.79 1393.58,1211.79 1394.17,1211.79 1394.75,1211.79 1395.34,1211.79 1395.93,1211.79 1396.51,1211.79 1397.1,1211.79 1397.69,1211.79 1398.27,1211.79 1398.86,1211.79 1399.45,1211.79 1400.03,1211.79 1400.62,1211.79 1401.21,1211.79 1401.79,1211.79 1402.38,1211.79 1402.96,1211.79 1403.55,1211.79 1404.14,1211.79 1404.72,1211.79 1405.31,1211.79 1405.9,1211.79 1406.48,1211.79 1407.07,1211.79 1407.66,1211.79 1408.24,1211.79 1408.83,1211.79 1409.42,1211.79 1410,1211.79 1410.59,1211.79 1411.17,1211.79 1411.76,1211.79 1412.35,1211.79 1412.93,1211.79 1413.52,1211.79 1414.11,1211.79 1414.69,1211.79 1415.28,1211.79 1415.87,1211.79 1416.45,1211.79 1417.04,1211.79 1417.63,1211.79 1418.21,1211.79 1418.8,1211.79 1419.38,1211.79 1419.97,1211.79 1420.56,1211.79 1421.14,1211.79 1421.73,1211.79 1422.32,1211.79 1422.9,1211.79 1423.49,1211.79 1424.08,1211.79 1424.66,1211.79 1425.25,1211.79 1425.83,1211.79 1426.42,1211.79 1427.01,1211.79 1427.59,1211.79 1428.18,1211.79 1428.77,1211.79 1429.35,1211.79 1429.94,1211.79 1430.53,1211.79 1431.11,1211.79 1431.7,1211.79 1432.29,1211.79 1432.87,1211.79 1433.46,1211.79 1434.04,1211.79 1434.63,1211.79 1435.22,1211.79 1435.8,1211.79 1436.39,1211.79 1436.98,1211.79 1437.56,1211.79 1438.15,1211.79 1438.74,1211.79 1439.32,1211.79 1439.91,1211.79 1440.5,1211.79 1441.08,1211.79 1441.67,1211.79 1442.25,1211.79 1442.84,1211.79 1443.43,1211.79 1444.01,1211.79 1444.6,1211.79 1445.19,1211.79 1445.77,1211.79 1446.36,1211.79 1446.95,1211.79 1447.53,1211.79 1448.12,1211.79 1448.7,1211.79 1449.29,1211.79 1449.88,1211.79 1450.46,1211.79 1451.05,1211.79 1451.64,1211.79 1452.22,1211.79 1452.81,1211.79 1453.4,1211.79 1453.98,1211.79 1454.57,1211.79 1455.16,1211.79 1455.74,1211.79 1456.33,1211.79 1456.91,1211.79 1457.5,1211.79 1458.09,1211.79 1458.67,1211.79 1459.26,1211.79 1459.85,1211.79 1460.43,1211.79 1461.02,1211.79 1461.61,1211.79 1462.19,1211.79 1462.78,1211.79 1463.37,1211.79 1463.95,1211.79 1464.54,1211.79 1465.12,1211.79 1465.71,1211.79 1466.3,1211.79 1466.88,1211.79 1467.47,1211.79 1468.06,1211.79 1468.64,1211.79 1469.23,1211.79 1469.82,1211.79 1470.4,1211.79 1470.99,1211.79 1471.57,1211.79 1472.16,1211.79 1472.75,1211.79 1473.33,1211.79 1473.92,1211.79 1474.51,1211.79 1475.09,1211.79 1475.68,1211.79 1476.27,1211.79 1476.85,1211.79 1477.44,1211.79 1478.03,1211.79 1478.61,1211.79 1479.2,1211.79 1479.78,1211.79 1480.37,1211.79 1480.96,1211.79 1481.54,1211.79 1482.13,1211.79 1482.72,1211.79 1483.3,1211.79 1483.89,1211.79 1484.48,1211.79 1485.06,1211.79 1485.65,1211.79 1486.24,1211.79 1486.82,1211.79 1487.41,1211.79 1487.99,1211.79 1488.58,1211.79 1489.17,1211.79 1489.75,1211.79 1490.34,1211.79 1490.93,1211.79 1491.51,1211.79 1492.1,1211.79 1492.69,1211.79 1493.27,1211.79 1493.86,1211.79 1494.45,1211.79 1495.03,1211.79 1495.62,1211.79 1496.2,1211.79 1496.79,1211.79 1497.38,1211.79 1497.96,1211.79 1498.55,1211.79 1499.14,1211.79 1499.72,1211.79 1500.31,1211.79 1500.9,1211.79 1501.48,1211.79 1502.07,1211.79 1502.65,1211.79 1503.24,1211.79 1503.83,1211.79 1504.41,1211.79 1505,1211.79 1505.59,1211.79 1506.17,1211.79 1506.76,1211.79 1507.35,1211.79 1507.93,1211.79 1508.52,1211.79 1509.11,1211.79 1509.69,1211.79 1510.28,1211.79 1510.86,1211.79 1511.45,1211.79 1512.04,1211.79 1512.62,1211.79 1513.21,1211.79 1513.8,1211.79 1514.38,1211.79 1514.97,1211.79 1515.56,1211.79 1516.14,1211.79 1516.73,1211.79 1517.32,1211.79 1517.9,1211.79 1518.49,1211.79 1519.07,1211.79 1519.66,1211.79 1520.25,1211.79 1520.83,1211.79 1521.42,1211.79 1522.01,1211.79 1522.59,1211.79 1523.18,1211.79 1523.77,1211.79 1524.35,1211.79 1524.94,1211.79 1525.52,1211.79 1526.11,1211.79 1526.7,1211.79 1527.28,1211.79 1527.87,1211.79 1528.46,1211.79 1529.04,1211.79 1529.63,1211.79 1530.22,1211.79 1530.8,1211.79 1531.39,1211.79 1531.98,1211.79 1532.56,1211.79 1533.15,1211.79 1533.73,1211.79 1534.32,1211.79 1534.91,1211.79 1535.49,1211.79 1536.08,1211.79 1536.67,1211.79 1537.25,1211.79 1537.84,1211.79 1538.43,1211.79 1539.01,1211.79 1539.6,1211.79 1540.19,1211.79 1540.77,1211.79 1541.36,1211.79 1541.94,1211.79 1542.53,1211.79 1543.12,1211.79 1543.7,1211.79 1544.29,1211.79 1544.88,1211.79 1545.46,1211.79 1546.05,1211.79 1546.64,1211.79 1547.22,1211.79 1547.81,1211.79 1548.4,1211.79 1548.98,1211.79 1549.57,1211.79 1550.15,1211.79 1550.74,1211.79 1551.33,1211.79 1551.91,1211.79 1552.5,1211.79 1553.09,1211.79 1553.67,1211.79 1554.26,1211.79 1554.85,1211.79 1555.43,1211.79 1556.02,1211.79 1556.6,1211.79 1557.19,1211.79 1557.78,1211.79 1558.36,1211.79 1558.95,1211.79 1559.54,1211.79 1560.12,1211.79 1560.71,1211.79 1561.3,1211.79 1561.88,1211.79 1562.47,1211.79 1563.06,1211.79 1563.64,1211.79 1564.23,1211.79 1564.81,1211.79 1565.4,1211.79 1565.99,1211.79 1566.57,1211.79 1567.16,1211.79 1567.75,1211.79 1568.33,1211.79 1568.92,1211.79 1569.51,1211.79 1570.09,1211.79 1570.68,1211.79 1571.27,1211.79 1571.85,1211.79 1572.44,1211.79 1573.02,1211.79 1573.61,1211.79 1574.2,1211.79 1574.78,1211.79 1575.37,1211.79 1575.96,1211.79 1576.54,1211.79 1577.13,1211.79 1577.72,1211.79 1578.3,1211.79 1578.89,1211.79 1579.47,1211.79 1580.06,1211.79 1580.65,1211.79 1581.23,1211.79 1581.82,1211.79 1582.41,1211.79 1582.99,1211.79 1583.58,1211.79 1584.17,1211.79 1584.75,1211.79 1585.34,1211.79 1585.93,1211.79 1586.51,1211.79 1587.1,1211.79 1587.68,1211.79 1588.27,1211.79 1588.86,1211.79 1589.44,1211.79 1590.03,1211.79 1590.62,1211.79 1591.2,1211.79 1591.79,1211.79 1592.38,1211.79 1592.96,1211.79 1593.55,1211.79 1594.14,1211.79 1594.72,1211.79 1595.31,1211.79 1595.89,1211.79 1596.48,1211.79 1597.07,1211.79 1597.65,1211.79 1598.24,1211.79 1598.83,1211.79 1599.41,1211.79 1600,1211.79 1600.59,1211.79 1601.17,1211.79 1601.76,1211.79 1602.34,1211.79 1602.93,1211.79 1603.52,1211.79 1604.1,1211.79 1604.69,1211.79 1605.28,1211.79 1605.86,1211.79 1606.45,1211.79 1607.04,1211.79 1607.62,1211.79 1608.21,1211.79 1608.8,1211.79 1609.38,1211.79 1609.97,1211.79 1610.55,1211.79 1611.14,1211.79 1611.73,1211.79 1612.31,1211.79 1612.9,1211.79 1613.49,1211.79 1614.07,1211.79 1614.66,1211.79 1615.25,1211.79 1615.83,1211.79 1616.42,1211.79 1617.01,1211.79 1617.59,1211.79 1618.18,1211.79 1618.76,1211.79 1619.35,1211.79 1619.94,1211.79 1620.52,1211.79 1621.11,1211.79 1621.7,1211.79 1622.28,1211.79 1622.87,1211.79 1623.46,1211.79 1624.04,1211.79 1624.63,1211.79 1625.22,1211.79 1625.8,1211.79 1626.39,1211.79 1626.97,1211.79 1627.56,1211.79 1628.15,1211.79 1628.73,1211.79 1629.32,1211.79 1629.91,1211.79 1630.49,1211.79 1631.08,1211.79 1631.67,1211.79 1632.25,1211.79 1632.84,1211.79 1633.42,1211.79 1634.01,1211.79 1634.6,1211.79 1635.18,1211.79 1635.77,1211.79 1636.36,1211.79 1636.94,1211.79 1637.53,1211.79 1638.12,1211.79 1638.7,1211.79 1639.29,1211.79 1639.88,1211.79 1640.46,1211.79 1641.05,1211.79 1641.63,1211.79 1642.22,1211.79 1642.81,1211.79 1643.39,1211.79 1643.98,1211.79 1644.57,1211.79 1645.15,1211.79 1645.74,1211.79 1646.33,1211.79 1646.91,1211.79 1647.5,1211.79 1648.09,1211.79 1648.67,1211.79 1649.26,1211.79 1649.84,1211.79 1650.43,1211.79 1651.02,1211.79 1651.6,1211.79 1652.19,1211.79 1652.78,1211.79 1653.36,1211.79 1653.95,1211.79 1654.54,1211.79 1655.12,1211.79 1655.71,1211.79 1656.29,1211.79 1656.88,1211.79 1657.47,1211.79 1658.05,1211.79 1658.64,1211.79 1659.23,1211.79 1659.81,1211.79 1660.4,1211.79 1660.99,1211.79 1661.57,1211.79 1662.16,1211.79 1662.75,1211.79 1663.33,1211.79 1663.92,1211.79 1664.5,1211.79 1665.09,1211.79 1665.68,1211.79 1666.26,1211.79 1666.85,1211.79 1667.44,1211.79 1668.02,1211.79 1668.61,1211.79 1669.2,1211.79 1669.78,1211.79 1670.37,1211.79 1670.96,1211.79 1671.54,1211.79 1672.13,1211.79 1672.71,1211.79 1673.3,1211.79 1673.89,1211.79 1674.47,1211.79 1675.06,1211.79 1675.65,1211.79 1676.23,1211.79 1676.82,1211.79 1677.41,1211.79 1677.99,1211.79 1678.58,1211.79 1679.17,1211.79 1679.75,1211.79 1680.34,1211.79 1680.92,1211.79 1681.51,1211.79 1682.1,1211.79 1682.68,1211.79 1683.27,1211.79 1683.86,1211.79 1684.44,1211.79 1685.03,1211.79 1685.62,1211.79 1686.2,1211.79 1686.79,1211.79 1687.37,1211.79 1687.96,1211.79 1688.55,1211.79 1689.13,1211.79 1689.72,1211.79 1690.31,1211.79 1690.89,1211.79 1691.48,1211.79 1692.07,1211.79 1692.65,1211.79 1693.24,1211.79 1693.83,1211.79 1694.41,1211.79 1695,1211.79 1695.58,1211.79 1696.17,1211.79 1696.76,1211.79 1697.34,1211.79 1697.93,1211.79 1698.52,1211.79 1699.1,1211.79 1699.69,1211.79 1700.28,1211.79 1700.86,1211.79 1701.45,1211.79 1702.04,1211.79 1702.62,1211.79 1703.21,1211.79 1703.79,1211.79 1704.38,1211.79 1704.97,1211.79 1705.55,1211.79 1706.14,1211.79 1706.73,1211.79 1707.31,1211.79 1707.9,1211.79 1708.49,1211.79 1709.07,1211.79 1709.66,1211.79 1710.24,1211.79 1710.83,1211.79 1711.42,1211.79 1712,1211.79 1712.59,1211.79 1713.18,1211.79 1713.76,1211.79 1714.35,1211.79 1714.94,1211.79 1715.52,1211.79 1716.11,1211.79 1716.7,1211.79 1717.28,1211.79 1717.87,1211.79 1718.45,1211.79 1719.04,1211.79 1719.63,1211.79 1720.21,1211.79 1720.8,1211.79 1721.39,1211.79 1721.97,1211.79 1722.56,1211.79 1723.15,1211.79 1723.73,1211.79 1724.32,1211.79 1724.91,1211.79 1725.49,1211.79 1726.08,1211.79 1726.66,1211.79 1727.25,1211.79 1727.84,1211.79 1728.42,1211.79 1729.01,1211.79 1729.6,1211.79 1730.18,1211.79 1730.77,1211.79 1731.36,1211.79 1731.94,1211.79 1732.53,1211.79 1733.11,1211.79 1733.7,1211.79 1734.29,1211.79 1734.87,1211.79 1735.46,1211.79 1736.05,1211.79 1736.63,1211.79 1737.22,1211.79 1737.81,1211.79 1738.39,1211.79 1738.98,1211.79 1739.57,1211.79 1740.15,1211.79 1740.74,1211.79 1741.32,1211.79 1741.91,1211.79 1742.5,1211.79 1743.08,1211.79 1743.67,1211.79 1744.26,1211.79 1744.84,1211.79 1745.43,1211.79 1746.02,1211.79 1746.6,1211.79 1747.19,1211.79 1747.78,1211.79 1748.36,1211.79 1748.95,1211.79 1749.53,1211.79 1750.12,1211.79 1750.71,1211.79 1751.29,1211.79 1751.88,1211.79 1752.47,1211.79 1753.05,1211.79 1753.64,1211.79 1754.23,1211.79 1754.81,1211.79 1755.4,1211.79 1755.99,1211.79 1756.57,1211.79 1757.16,1211.79 1757.74,1211.79 1758.33,1211.79 1758.92,1211.79 1759.5,1211.79 1760.09,1211.79 1760.68,1211.79 1761.26,1211.79 1761.85,1211.79 1762.44,1211.79 1763.02,1211.79 1763.61,1211.79 1764.19,1211.79 1764.78,1211.79 1765.37,1211.79 1765.95,1211.79 1766.54,1211.79 1767.13,1211.79 1767.71,1211.79 1768.3,1211.79 1768.89,1211.79 1769.47,1211.79 1770.06,1211.79 1770.65,1211.79 1771.23,1211.79 1771.82,1211.79 1772.4,1211.79 1772.99,1211.79 1773.58,1211.79 1774.16,1211.79 1774.75,1211.79 1775.34,1211.79 1775.92,1211.79 1776.51,1211.79 1777.1,1211.79 1777.68,1211.79 1778.27,1211.79 1778.86,1211.79 1779.44,1211.79 1780.03,1211.79 1780.61,1211.79 1781.2,1211.79 1781.79,1211.79 1782.37,1211.79 1782.96,1211.79 1783.55,1211.79 1784.13,1211.79 1784.72,1211.79 1785.31,1211.79 1785.89,1211.79 1786.48,1211.79 1787.06,1211.79 1787.65,1211.79 1788.24,1211.79 1788.82,1211.79 1789.41,1211.79 1790,1211.79 1790.58,1211.79 1791.17,1211.79 1791.76,1211.79 1792.34,1211.79 1792.93,1211.79 1793.52,1211.79 1794.1,1211.79 1794.69,1211.79 1795.27,1211.79 1795.86,1211.79 1796.45,1211.79 1797.03,1211.79 1797.62,1211.79 1798.21,1211.79 1798.79,1211.79 1799.38,1211.79 1799.97,1211.79 1800.55,1211.79 1801.14,1211.79 1801.73,1211.79 1802.31,1211.79 1802.9,1211.79 1803.48,1211.79 1804.07,1211.79 1804.66,1211.79 1805.24,1211.79 1805.83,1211.79 1806.42,1211.79 1807,1211.79 1807.59,1211.79 1808.18,1211.79 1808.76,1211.79 1809.35,1211.79 1809.94,1211.79 1810.52,1211.79 1811.11,1211.79 1811.69,1211.79 1812.28,1211.79 1812.87,1211.79 1813.45,1211.79 1814.04,1211.79 1814.63,1211.79 1815.21,1211.79 1815.8,1211.79 1816.39,1211.79 1816.97,1211.79 1817.56,1211.79 1818.14,1211.79 1818.73,1211.79 1819.32,1211.79 1819.9,1211.79 1820.49,1211.79 1821.08,1211.79 1821.66,1211.79 1822.25,1211.79 1822.84,1211.79 1823.42,1211.79 1824.01,1211.79 1824.6,1211.79 1825.18,1211.79 1825.77,1211.79 1826.35,1211.79 1826.94,1211.79 1827.53,1211.79 1828.11,1211.79 1828.7,1211.79 1829.29,1211.79 1829.87,1211.79 1830.46,1211.79 1831.05,1211.79 1831.63,1211.79 1832.22,1211.79 1832.81,1211.79 1833.39,1211.79 1833.98,1211.79 1834.56,1211.79 1835.15,1211.79 1835.74,1211.79 1836.32,1211.79 1836.91,1211.79 1837.5,1211.79 1838.08,1211.79 1838.67,1211.79 1839.26,1211.79 1839.84,1211.79 1840.43,1211.79 1841.01,1211.79 1841.6,1211.79 1842.19,1211.79 1842.77,1211.79 1843.36,1211.79 1843.95,1211.79 1844.53,1211.79 1845.12,1211.79 1845.71,1211.79 1846.29,1211.79 1846.88,1211.79 1847.47,1211.79 1848.05,1211.79 1848.64,1211.79 1849.22,1211.79 1849.81,1211.79 1850.4,1211.79 1850.98,1211.79 1851.57,1211.79 1852.16,1211.79 1852.74,1211.79 1853.33,1211.79 1853.92,1211.79 1854.5,1211.79 1855.09,1211.79 1855.68,1211.79 1856.26,1211.79 1856.85,1211.79 1857.43,1211.79 1858.02,1211.79 1858.61,1211.79 1859.19,1211.79 1859.78,1211.79 1860.37,1211.79 1860.95,1211.79 1861.54,1211.79 1862.13,1211.79 1862.71,1211.79 1863.3,1211.79 1863.88,1211.79 1864.47,1211.79 1865.06,1211.79 1865.64,1211.79 1866.23,1211.79 1866.82,1211.79 1867.4,1211.79 1867.99,1211.79 1868.58,1211.79 1869.16,1211.79 1869.75,1211.79 1870.34,1211.79 1870.92,1211.79 1871.51,1211.79 1872.09,1211.79 1872.68,1211.79 1873.27,1211.79 1873.85,1211.79 1874.44,1211.79 1875.03,1211.79 1875.61,1211.79 1876.2,1211.79 1876.79,1211.79 1877.37,1211.79 1877.96,1211.79 1878.55,1211.79 1879.13,1211.79 1879.72,1211.79 1880.3,1211.79 1880.89,1211.79 1881.48,1211.79 1882.06,1211.79 1882.65,1211.79 1883.24,1211.79 1883.82,1211.79 1884.41,1211.79 1885,1211.79 1885.58,1211.79 1886.17,1211.79 1886.76,1211.79 1887.34,1211.79 1887.93,1211.79 1888.51,1211.79 1889.1,1211.79 1889.69,1211.79 1890.27,1211.79 1890.86,1211.79 1891.45,1211.79 1892.03,1211.79 1892.62,1211.79 1893.21,1211.79 1893.79,1211.79 1894.38,1211.79 1894.96,1211.79 1895.55,1211.79 1896.14,1211.79 1896.72,1211.79 1897.31,1211.79 1897.9,1211.79 1898.48,1211.79 1899.07,1211.79 1899.66,1211.79 1900.24,1211.79 1900.83,1211.79 1901.42,1211.79 1902,1211.79 1902.59,1211.79 1903.17,1211.79 1903.76,1211.79 1904.35,1211.79 1904.93,1211.79 1905.52,1211.79 1906.11,1211.79 1906.69,1211.79 1907.28,1211.79 1907.87,1211.79 1908.45,1211.79 1909.04,1211.79 1909.63,1211.79 1910.21,1211.79 1910.8,1211.79 1911.38,1211.79 1911.97,1211.79 1912.56,1211.79 1913.14,1211.79 1913.73,1211.79 1914.32,1211.79 1914.9,1211.79 1915.49,1211.79 1916.08,1211.79 1916.66,1211.79 1917.25,1211.79 1917.83,1211.79 1918.42,1211.79 1919.01,1211.79 1919.59,1211.79 1920.18,1211.79 1920.77,1211.79 1921.35,1211.79 1921.94,1211.79 1922.53,1211.79 1923.11,1211.79 1923.7,1211.79 1924.29,1211.79 1924.87,1211.79 1925.46,1211.79 1926.04,1211.79 1926.63,1211.79 1927.22,1211.79 1927.8,1211.79 1928.39,1211.79 1928.98,1211.79 1929.56,1211.79 1930.15,1211.79 1930.74,1211.79 1931.32,1211.79 1931.91,1211.79 1932.5,1211.79 1933.08,1211.79 1933.67,1211.79 1934.25,1211.79 1934.84,1211.79 1935.43,1211.79 1936.01,1211.79 1936.6,1211.79 1937.19,1211.79 1937.77,1211.79 1938.36,1211.79 1938.95,1211.79 1939.53,1211.79 1940.12,1211.79 1940.71,1211.79 1941.29,1211.79 1941.88,1211.79 1942.46,1211.79 1943.05,1211.79 1943.64,1211.79 1944.22,1211.79 1944.81,1211.79 1945.4,1211.79 1945.98,1211.79 1946.57,1211.79 1947.16,1211.79 1947.74,1211.79 1948.33,1211.79 1948.91,1211.79 1949.5,1211.79 1950.09,1211.79 1950.67,1211.79 1951.26,1211.79 1951.85,1211.79 1952.43,1211.79 1953.02,1211.79 1953.61,1211.79 1954.19,1211.79 1954.78,1211.79 1955.37,1211.79 1955.95,1211.79 1956.54,1211.79 1957.12,1211.79 1957.71,1211.79 1958.3,1211.79 1958.88,1211.79 1959.47,1211.79 1960.06,1211.79 1960.64,1211.79 1961.23,1211.79 1961.82,1211.79 1962.4,1211.79 1962.99,1211.79 1963.58,1211.79 1964.16,1211.79 1964.75,1211.79 1965.33,1211.79 1965.92,1211.79 1966.51,1211.79 1967.09,1211.79 1967.68,1211.79 1968.27,1211.79 1968.85,1211.79 1969.44,1211.79 1970.03,1211.79 1970.61,1211.79 1971.2,1211.79 1971.78,1211.79 1972.37,1211.79 1972.96,1211.79 1973.54,1211.79 1974.13,1211.79 1974.72,1211.79 1975.3,1211.79 1975.89,1211.79 1976.48,1211.79 1977.06,1211.79 1977.65,1211.79 1978.24,1211.79 1978.82,1211.79 1979.41,1211.79 1979.99,1211.79 1980.58,1211.79 1981.17,1211.79 1981.75,1211.79 1982.34,1211.79 1982.93,1211.79 1983.51,1211.79 1984.1,1211.79 1984.69,1211.79 1985.27,1211.79 1985.86,1211.79 1986.45,1211.79 1987.03,1211.79 1987.62,1211.79 1988.2,1211.79 1988.79,1211.79 1989.38,1211.79 1989.96,1211.79 1990.55,1211.79 1991.14,1211.79 1991.72,1211.79 1992.31,1211.79 1992.9,1211.79 1993.48,1211.79 1994.07,1211.79 1994.65,1211.79 1995.24,1211.79 1995.83,1211.79 1996.41,1211.79 1997,1211.79 1997.59,1211.79 1998.17,1211.79 1998.76,1211.79 1999.35,1211.79 1999.93,1211.79 2000.52,1211.79 2001.11,1211.79 2001.69,1211.79 2002.28,1211.79 2002.86,1211.79 2003.45,1211.79 2004.04,1211.79 2004.62,1211.79 2005.21,1211.79 2005.8,1211.79 2006.38,1211.79 2006.97,1211.79 2007.56,1211.79 2008.14,1211.79 2008.73,1211.79 2009.32,1211.79 2009.9,1211.79 2010.49,1211.79 2011.07,1211.79 2011.66,1211.79 2012.25,1211.79 2012.83,1211.79 2013.42,1211.79 2014.01,1211.79 2014.59,1211.79 2015.18,1211.79 2015.77,1211.79 2016.35,1211.79 2016.94,1211.79 2017.53,1211.79 2018.11,1211.79 2018.7,1211.79 2019.28,1211.79 2019.87,1211.79 2020.46,1211.79 2021.04,1211.79 2021.63,1211.79 2022.22,1211.79 2022.8,1211.79 2023.39,1211.79 2023.98,1211.79 2024.56,1211.79 2025.15,1211.79 2025.73,1211.79 2026.32,1211.79 2026.91,1211.79 2027.49,1211.79 2028.08,1211.79 2028.67,1211.79 2029.25,1211.79 2029.84,1211.79 2030.43,1211.79 2031.01,1211.79 2031.6,1211.79 2032.19,1211.79 2032.77,1211.79 2033.36,1211.79 2033.94,1211.79 2034.53,1211.79 2035.12,1211.79 2035.7,1211.79 2036.29,1211.79 2036.88,1211.79 2037.46,1211.79 2038.05,1211.79 2038.64,1211.79 2039.22,1211.79 2039.81,1211.79 2040.4,1211.79 2040.98,1211.79 2041.57,1211.79 2042.15,1211.79 2042.74,1211.79 2043.33,1211.79 2043.91,1211.79 2044.5,1211.79 2045.09,1211.79 2045.67,1211.79 2046.26,1211.79 2046.85,1211.79 2047.43,1211.79 2048.02,1211.79 2048.6,1211.79 2049.19,1211.79 2049.78,1211.79 2050.36,1211.79 2050.95,1211.79 2051.54,1211.79 2052.12,1211.79 2052.71,1211.79 2053.3,1211.79 2053.88,1211.79 2054.47,1211.79 2055.06,1211.79 2055.64,1211.79 2056.23,1211.79 2056.81,1211.79 2057.4,1211.79 2057.99,1211.79 2058.57,1211.79 2059.16,1211.79 2059.75,1211.79 2060.33,1211.79 2060.92,1211.79 2061.51,1211.79 2062.09,1211.79 2062.68,1211.79 2063.27,1211.79 2063.85,1211.79 2064.44,1211.79 2065.02,1211.79 2065.61,1211.79 2066.2,1211.79 2066.78,1211.79 2067.37,1211.79 2067.96,1211.79 2068.54,1211.79 2069.13,1211.79 2069.72,1211.79 2070.3,1211.79 2070.89,1211.79 2071.48,1211.79 2072.06,1211.79 2072.65,1211.79 2073.23,1211.79 2073.82,1211.79 2074.41,1211.79 2074.99,1211.79 2075.58,1211.79 2076.17,1211.79 2076.75,1211.79 2077.34,1211.79 2077.93,1211.79 2078.51,1211.79 2079.1,1211.79 2079.68,1211.79 2080.27,1211.79 2080.86,1211.79 2081.44,1211.79 2082.03,1211.79 2082.62,1211.79 2083.2,1211.79 2083.79,1211.79 2084.38,1211.79 2084.96,1211.79 2085.55,1211.79 2086.14,1211.79 2086.72,1211.79 2087.31,1211.79 2087.89,1211.79 2088.48,1211.79 2089.07,1211.79 2089.65,1211.79 2090.24,1211.79 2090.83,1211.79 2091.41,1211.79 2092,1211.79 2092.59,1211.79 2093.17,1211.79 2093.76,1211.79 2094.35,1211.79 2094.93,1211.79 2095.52,1211.79 2096.1,1211.79 2096.69,1211.79 2097.28,1211.79 2097.86,1211.79 2098.45,1211.79 2099.04,1211.79 2099.62,1211.79 2100.21,1211.79 2100.8,1211.79 2101.38,1211.79 2101.97,1211.79 2102.55,1211.79 2103.14,1211.79 2103.73,1211.79 2104.31,1211.79 2104.9,1211.79 2105.49,1211.79 2106.07,1211.79 2106.66,1211.79 2107.25,1211.79 2107.83,1211.79 2108.42,1211.79 2109.01,1211.79 2109.59,1211.79 2110.18,1211.79 2110.76,1211.79 2111.35,1211.79 2111.94,1211.79 2112.52,1211.79 2113.11,1211.79 2113.7,1211.79 2114.28,1211.79 2114.87,1211.79 2115.46,1211.79 2116.04,1211.79 2116.63,1211.79 2117.22,1211.79 2117.8,1211.79 2118.39,1211.79 2118.97,1211.79 2119.56,1211.79 2120.15,1211.79 2120.73,1211.79 2121.32,1211.79 2121.91,1211.79 2122.49,1211.79 2123.08,1211.79 2123.67,1211.79 2124.25,1211.79 2124.84,1211.79 2125.42,1211.79 2126.01,1211.79 2126.6,1211.79 2127.18,1211.79 2127.77,1211.79 2128.36,1211.79 2128.94,1211.79 2129.53,1211.79 2130.12,1211.79 2130.7,1211.79 2131.29,1211.79 2131.88,1211.79 2132.46,1211.79 2133.05,1211.79 2133.63,1211.79 2134.22,1211.79 2134.81,1211.79 2135.39,1211.79 2135.98,1211.79 2136.57,1211.79 2137.15,1211.79 2137.74,1211.79 2138.33,1211.79 2138.91,1211.79 2139.5,1211.79 2140.09,1211.79 2140.67,1211.79 2141.26,1211.79 2141.84,1211.79 2142.43,1211.79 2143.02,1211.79 2143.6,1211.79 2144.19,1211.79 2144.78,1211.79 2145.36,1211.79 2145.95,1211.79 2146.54,1211.79 2147.12,1211.79 2147.71,1211.79 2148.3,1211.79 2148.88,1211.79 2149.47,1211.79 2150.05,1211.79 2150.64,1211.79 2151.23,1211.79 2151.81,1211.79 2152.4,1211.79 2152.99,1211.79 2153.57,1211.79 2154.16,1211.79 2154.75,1211.79 2155.33,1211.79 2155.92,1211.79 2156.5,1211.79 2157.09,1211.79 2157.68,1211.79 2158.26,1211.79 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560.87,1191.61 1399.48,899.083 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.41 985.439,1191.61 2158.26,1191.61 2158.26,1231.41 985.439,1231.41 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip420)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip420)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip423\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip423)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip423)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip423)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip423)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip423)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip423)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip423)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip423)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip423)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip423)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip423)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3827.94 163.232,-3598.71 163.792,-3466.74 164.351,-4513.78 164.91,-5450.64 165.469,-6350.63 166.029,-7189.41 166.588,-7915.94 167.147,-7628.64 167.706,-7409.94 168.266,-7245.03 168.825,-7865.04 169.384,-7717.48 169.943,-8271.5 170.503,-8140.11 171.062,-8031 171.621,-7950.92 172.18,-8389.38 172.74,-8301.26 173.299,-8667.66 173.858,-8997.83 174.417,-9291.96 174.977,-9530.54 175.536,-9756.12 176.095,-9928.88 176.655,-10085.7 177.214,-10206.8 177.773,-10014.8 178.332,-9842.47 178.892,-9927.76 179.451,-9740.05 180.01,-9552.34 180.569,-9582.11 181.129,-9591.42 181.688,-9576.82 182.247,-9548.77 182.806,-9518.66 183.366,-9469.56 183.925,-9415.18 184.484,-9344.18 185.043,-9255.67 185.603,-8885.67 186.162,-8789.81 186.721,-8570.73 187.28,-8348.39 187.84,-8240.44 188.399,-7921.57 188.958,-7711.8 189.517,-7605.63 190.077,-7496.03 190.636,-7119.97 191.195,-6925.64 191.754,-6799.46 192.314,-6375.66 192.873,-6271.24 193.432,-6100.66 193.991,-5994.05 194.551,-5693.47 195.11,-5533.94 195.669,-5308.22 196.228,-5041.27 196.788,-4955.21 197.347,-4651.79 197.906,-4470.52 198.465,-4292.3 199.025,-4119.23 199.584,-3813.76 200.143,-3657.7 200.702,-3555.67 201.262,-3364.84 201.821,-3309.27 202.38,-3210.94 202.939,-3075.05 203.499,-3014.96 204.058,-2843.81 204.617,-2792.72 205.176,-2736.1 205.736,-2567.38 206.295,-2483.72 206.854,-2428.94 207.413,-2277.03 207.973,-2161.9 208.532,-2109.28 209.091,-2028.99 209.65,-2012.84 210.21,-1930.13 210.769,-1817.92 211.328,-1740.85 211.887,-1632.74 212.447,-1559.45 213.006,-1459.43 213.565,-1360.07 214.124,-1292.05 214.684,-1201.56 215.243,-1166.73 215.802,-1126.25 216.361,-1085.99 216.921,-975.693 217.48,-897.966 218.039,-871.82 218.598,-838.651 219.158,-712.295 219.717,-639.202 220.276,-635.471 220.835,-540.209 221.395,-492.126 221.954,-424.357 222.513,-376.058 223.072,-353.435 223.632,-263.022 224.191,-154.646 224.75,-137.807 225.309,-94.4336 225.869,-76.8863 226.428,-60.807 226.987,-20.7624 227.546,37.9884 228.106,51.763 228.665,90.9103 229.224,110.652 229.783,189.444 230.343,258.667 230.902,270.933 231.461,318.327 232.02,372.477 232.58,461.05 233.139,486.108 233.698,492.557 234.257,533.399 234.817,556.508 235.376,575.279 235.935,617.949 236.494,655.149 237.054,689.632 237.613,665.28 238.172,683.677 238.731,700.867 239.291,700.446 239.85,734.378 240.409,731.337 240.968,742.711 241.528,757.935 242.087,755.528 242.646,751.081 243.205,754.508 243.765,788.726 244.324,786.798 244.883,779.276 245.442,792.492 246.002,792.973 246.561,771.632 247.12,788.593 247.679,767.991 248.239,769.597 248.798,750.676 249.357,773.375 249.916,775.661 250.476,793.807 251.035,815.485 251.594,816.404 252.153,800.45 252.713,821.494 253.272,859.61 253.831,893.062 254.39,887.535 254.95,869.311 255.509,903.998 256.068,868.844 256.627,867.36 257.187,850.724 257.746,850.077 258.305,868.219 258.864,884.055 259.424,915.139 259.983,946.595 260.542,960.799 261.101,972.953 261.661,967.058 262.22,997.732 262.779,995.766 263.338,993.862 263.898,984.958 264.457,1012.17 265.016,1008.59 265.575,1057.15 266.135,1046.35 266.694,1037.54 267.253,1062.98 267.812,1069.4 268.372,1061.38 268.931,1052.41 269.49,1041.58 270.049,1064.97 270.609,1038.36 271.168,1046.59 271.727,1058.25 272.286,1064.65 272.846,1070.33 273.405,1062.09 273.964,1083.74 274.523,1076.71 275.083,1052.21 275.642,1059.54 276.201,1016.59 276.76,1010.31 277.32,1001.89 277.879,965.047 278.438,976.255 278.997,1022.08 279.557,1037.94 280.116,1029.07 280.675,1068.67 281.234,1109.01 281.794,1083.69 282.353,1069.15 282.912,1059.9 283.471,1034.36 284.031,1008.48 284.59,969.596 285.149,986.862 285.708,964.401 286.268,960.148 286.827,940.631 287.386,971.978 287.945,987.563 288.505,996.754 289.064,1010.56 289.623,923.484 290.182,922.485 290.742,938.658 291.301,953.185 291.86,951.59 292.419,978.655 292.979,994.045 293.538,1020.55 294.097,995.044 294.656,1020.97 295.216,997.138 295.775,1007.05 296.334,1000.85 296.893,1023.56 297.453,1016.07 298.012,1009.44 298.571,987.215 299.13,1000.86 299.69,965.249 300.249,911.154 300.808,925.661 301.368,939.416 301.927,936.192 302.486,947.83 303.045,976.975 303.605,970.411 304.164,967.832 304.723,981.822 305.282,976.273 305.842,969.614 306.401,946.651 306.96,975.265 307.519,1018.6 308.079,1010.61 308.638,1015.94 309.197,1008.93 309.756,1018.34 310.316,1027.35 310.875,1021.2 311.434,1030.86 311.993,1020.63 312.553,996.764 313.112,990.091 313.671,985.257 314.23,995.031 314.79,984.379 315.349,961.002 315.908,973.056 316.467,967.685 317.027,943.425 317.586,935.419 318.145,963.697 318.704,958.589 319.264,986.686 319.823,998.426 320.382,975.136 320.941,938.874 321.501,933.057 322.06,926.397 322.619,954.211 323.178,948.248 323.738,926.492 324.297,871.545 324.856,922.553 325.415,903.521 325.975,892.937 326.534,890.707 327.093,904.476 327.652,904.618 328.212,916.007 328.771,909.105 329.33,919.844 329.889,916.195 330.449,911.857 331.008,907.999 331.567,933.716 332.126,896.431 332.686,908.105 333.245,882.144 333.804,914.471 334.363,910.78 334.923,909.829 335.482,905.74 336.041,899.929 336.6,878.294 337.16,891.763 337.719,885.261 338.278,863.367 338.837,876.979 339.397,906.336 339.956,939.459 340.515,933.112 341.074,942.972 341.634,926.356 342.193,917.654 342.752,934.183 343.311,962.621 343.871,971.93 344.43,951.174 344.989,948.506 345.548,976.537 346.108,982.686 346.667,958.282 347.226,951.386 347.785,977.231 348.345,920.22 348.904,898.786 349.463,926.458 350.022,935.134 350.582,929.859 351.141,937.722 351.7,913.009 352.259,909.045 352.819,887.621 353.378,868.382 353.937,867.016 354.496,912.721 355.056,928.502 355.615,907.949 356.174,872.071 356.733,864.551 357.293,894.672 357.852,910.142 358.411,921.365 358.97,948.606 359.53,957.995 360.089,935.704 360.648,911.532 361.207,917.984 361.767,909.075 362.326,903.726 362.885,900.294 363.444,878.646 364.004,856.66 364.563,836.63 365.122,850.449 365.681,830.46 366.241,776.391 366.8,843.385 367.359,822.922 367.918,834.181 368.478,850.553 369.037,860.794 369.596,838.68 370.155,884.751 370.715,875.765 371.274,825.592 371.833,823.994 372.392,836.802 372.952,850.824 373.511,848.483 374.07,864.807 374.629,879.555 375.189,874.529 375.748,888.637 376.307,897.084 376.866,909.52 377.426,952.617 377.985,962.575 378.544,955.498 379.103,946.933 379.663,937.495 380.222,964.197 380.781,937.013 381.34,928.51 381.9,919.003 382.459,945.652 383.018,919.743 383.577,930.12 384.137,953.582 384.696,896.898 385.255,888.896 385.814,866.157 386.374,860.51 386.933,841.798 387.492,807.461 388.051,791.284 388.611,809.161 389.17,804.342 389.729,802.176 390.288,817.251 390.848,831.869 391.407,829.459 391.966,793.928 392.525,755.858 393.085,725.346 393.644,711.782 394.203,700.92 394.762,720.55 395.322,724.893 395.881,710.57 396.44,681.831 396.999,687.699 397.559,692.382 398.118,714.917 398.677,702.747 399.236,694.056 399.796,700.266 400.355,755.306 400.914,772.275 401.473,774.861 402.033,747.834 402.592,745.676 403.151,746.07 403.71,699.451 404.27,700.781 404.829,685.517 405.388,657.294 405.947,660.221 406.507,685.799 407.066,706.103 407.625,711.575 408.184,751.033 408.744,769.172 409.303,785.193 409.862,767.245 410.421,734.353 410.981,751.965 411.54,721.152 412.099,708.851 412.658,694.7 413.218,713.095 413.777,712.113 414.336,731.693 414.895,733.638 415.455,751.326 416.014,754.141 416.573,740.942 417.132,757.706 417.692,791.284 418.251,791.13 418.81,804.198 419.369,805.776 419.929,803.975 420.488,816.592 421.047,797.246 421.606,776.34 422.166,774.584 422.725,760.315 423.284,743.454 423.843,759.283 424.403,795.393 424.962,808.914 425.521,792.046 426.08,792.685 426.64,806.396 427.199,818.762 427.758,845.803 428.318,842.902 428.877,838.526 429.436,835.715 429.995,848.44 430.555,811.53 431.114,827.181 431.673,821.933 432.232,834.853 432.792,865.346 433.351,843.689 433.91,869.639 434.469,846.623 435.029,842.832 435.588,840.919 436.147,787.1 436.706,766.345 437.266,752.658 437.825,754.394 438.384,773.461 438.943,805.969 439.503,804.652 440.062,801.32 440.621,813.672 441.18,890.019 441.74,897.83 442.299,890.439 442.858,885.4 443.417,879.269 443.977,857.8 444.536,836.775 445.095,816.353 445.654,798.303 446.214,812.751 446.773,812.188 447.332,825.719 447.891,837.666 448.451,832.483 449.01,846.523 449.569,840.374 450.128,834.292 450.688,777.913 451.247,778.019 451.806,776.421 452.365,793.625 452.925,773.125 453.484,740.59 454.043,770.465 454.602,768.377 455.162,798.701 455.721,778.477 456.28,747.918 456.839,695.48 457.399,696.279 457.958,699.692 458.517,685.714 459.076,740.393 459.636,757.512 460.195,773.519 460.754,757.577 461.313,793.035 461.873,821.575 462.432,786.027 462.991,781.406 463.55,764.509 464.11,783.4 464.669,768.333 465.228,770.569 465.787,769.829 466.347,798.852 466.906,795.724 467.465,792.359 468.024,820.902 468.584,850.22 469.143,843.128 469.702,803.191 470.261,814.474 470.821,778.909 471.38,761.894 471.939,760.608 472.498,759.487 473.058,760.495 473.617,707.313 474.176,687.457 474.735,688.456 475.295,707.251 475.854,710.825 476.413,743.553 476.972,741.886 477.532,727.231 478.091,726.755 478.65,710.003 479.209,724.097 479.769,725.956 480.328,726.206 480.887,694.624 481.446,711.117 482.006,726.833 482.565,726.148 483.124,755.497 483.683,786.63 484.243,784.364 484.802,816.896 485.361,831.136 485.92,775.939 486.48,773.581 487.039,753.255 487.598,767.764 488.157,731.851 488.717,734.08 489.276,734.029 489.835,769.42 490.394,704.078 490.954,769.794 491.513,733.168 492.072,717.266 492.631,717.946 493.191,717.495 493.75,721.277 494.309,723.397 494.868,702.8 495.428,721.707 495.987,721.098 496.546,718.839 497.105,699.1 497.665,714.623 498.224,733.401 498.783,700.07 499.342,700.975 499.902,715.23 500.461,732.506 501.02,749.972 501.579,766.161 502.139,752.331 502.698,771.104 503.257,721.482 503.816,735.946 504.376,769.725 504.935,769.883 505.494,815.336 506.053,873.527 506.613,816.867 507.172,794.792 507.731,758.843 508.29,758.726 508.85,710.698 509.409,724.958 509.968,724.803 510.527,711.73 511.087,713.721 511.646,714.255 512.205,715.836 512.764,697.621 513.324,694.574 513.883,698.034 514.442,682.712 515.001,735.687 515.561,723.264 516.12,703.788 516.679,701.654 517.238,750.747 517.798,733.11 518.357,749.27 518.916,778.214 519.475,775.343 520.035,754.536 520.594,750.313 521.153,765.941 521.712,761.576 522.272,775.16 522.831,768.759 523.39,769.163 523.949,779.706 524.509,775.879 525.068,789.392 525.627,766.62 526.186,745.647 526.746,726.867 527.305,710.677 527.864,707.079 528.423,738.42 528.983,754.068 529.542,750.218 530.101,781.491 530.66,775.696 531.22,756.579 531.779,751.407 532.338,732.364 532.897,760.414 533.457,758.607 534.016,756.986 534.575,742.283 535.134,742.83 535.694,741.348 536.253,769.037 536.812,766.522 537.371,797.039 537.931,828.421 538.49,824.364 539.049,837.559 539.608,847.287 540.168,855.479 540.727,848.747 541.286,838.806 541.845,850.239 542.405,843.214 542.964,820.554 543.523,781.417 544.082,758.077 544.642,752.917 545.201,782.544 545.76,749.947 546.319,749.7 546.879,762.314 547.438,762.47 547.997,773.854 548.556,801.789 549.116,812.515 549.675,807.701 550.234,820.466 550.793,780.185 551.353,776.308 551.912,789.817 552.471,769.499 553.031,752.841 553.59,746.857 554.149,743.651 554.708,743.829 555.268,710.046 555.827,691.157 556.386,707.389 556.945,672.997 557.505,674.884 558.064,673.581 558.623,607.075 559.182,646.279 559.742,633.485 560.301,619.946 560.86,658.476 561.419,641.976 561.979,674.582 562.538,659.781 563.097,644.861 563.656,631.723 564.216,651.095 564.775,621.989 565.334,656.75 565.893,709.449 566.453,660.146 567.012,695.212 567.571,676.919 568.13,644.072 568.69,646.09 569.249,648.62 569.808,616.828 570.367,606.435 570.927,648.281 571.486,618.321 572.045,651.451 572.604,605.718 573.164,614.667 573.723,606.882 574.282,648.313 574.841,636.079 575.401,688.527 575.96,692.55 576.519,712.093 577.078,712.204 577.638,698.596 578.197,666.87 578.756,669.611 579.315,672.974 579.875,677.242 580.434,696.461 580.993,745.602 581.552,726.014 582.112,741.671 582.671,739.132 583.23,738.105 583.789,690.16 584.349,676.041 584.908,647.704 585.467,649.765 586.026,635.357 586.586,604.314 587.145,593.459 587.704,615.387 588.263,622.744 588.823,593.486 589.382,617.097 589.941,636.762 590.5,626.198 591.06,617.171 591.619,606.32 592.178,649.146 592.737,651.587 593.297,668.055 593.856,668.313 594.415,671.298 594.974,657.78 595.534,645.816 596.093,680.673 596.652,651.252 597.211,651.337 597.771,671.704 598.33,689.433 598.889,688.053 599.448,673.217 600.008,678.784 600.567,696.979 601.126,679.608 601.685,681.413 602.245,666.75 602.804,701.315 603.363,735.884 603.922,734.958 604.482,732.877 605.041,731.73 605.6,748.23 606.159,762.05 606.719,790.702 607.278,816.647 607.837,794.862 608.396,792.185 608.956,807.134 609.515,787.165 610.074,787.189 610.633,784.189 611.193,779.735 611.752,777.849 612.311,774.819 612.87,769.985 613.43,794.139 613.989,822.22 614.548,848.365 615.107,842.916 615.667,835.767 616.226,794.816 616.785,791.381 617.344,789.52 617.904,767.244 618.463,780.785 619.022,759.71 619.581,772.463 620.141,753.211 620.7,767.203 621.259,780.443 621.818,805.608 622.378,801.232 622.937,799.523 623.496,862.346 624.055,872.033 624.615,862.275 625.174,855.151 625.733,879.349 626.292,889.505 626.852,863.654 627.411,855.364 627.97,845.673 628.529,835.168 629.089,846.212 629.648,839.119 630.207,750.898 630.766,730.745 631.326,730.166 631.885,725.992 632.444,724.061 633.003,709.05 633.563,693.871 634.122,672.636 634.681,672.875 635.24,640.957 635.8,613.515 636.359,601.943 636.918,644.405 637.477,681.192 638.037,699.61 638.596,701.195 639.155,711.305 639.714,692.422 640.274,660.22 640.833,660.961 641.392,613.997 641.951,601.144 642.511,591.363 643.07,566.803 643.629,586.787 644.188,588.829 644.748,594.139 645.307,615.697 645.866,634.254 646.425,655.992 646.985,657.121 647.544,678.203 648.103,692.982 648.662,711.458 649.222,727.277 649.781,742.109 650.34,723.733 650.899,721.751 651.459,708.661 652.018,770.474 652.577,781.306 653.136,760.666 653.696,753.764 654.255,651.072 654.814,685.175 655.373,667.668 655.933,620.015 656.492,608.311 657.051,582.611 657.61,621.468 658.17,608.756 658.729,613.843 659.288,618.311 659.847,636.867 660.407,641.35 660.966,628.435 661.525,617.345 662.084,608.383 662.644,610.108 663.203,586.061 663.762,578.023 664.321,615.289 664.881,557.938 665.44,565.156 665.999,591.436 666.558,613.315 667.118,585.492 667.677,594.845 668.236,600.291 668.795,609.677 669.355,632.487 669.914,618.32 670.473,636.231 671.032,624.086 671.592,660.667 672.151,662.1 672.71,665.128 673.269,665.138 673.829,666.718 674.388,669.502 674.947,651.924 675.506,669.653 676.066,653.181 676.625,672.482 677.184,673.406 677.743,661.411 678.303,663.484 678.862,650.685 679.421,642.229 679.981,660.277 680.54,678.261 681.099,681.098 681.658,717.087 682.218,715.855 682.777,685.258 683.336,704.114 683.895,738.398 684.455,734.738 685.014,716.14 685.573,747.985 686.132,744.487 686.692,772.577 687.251,770.449 687.81,703.4 688.369,689.411 688.929,691.176 689.488,723.477 690.047,756.113 690.606,783.414 691.166,777.776 691.725,789.219 692.284,797.21 692.843,793.135 693.403,841.351 693.962,851.42 694.521,857.5 695.08,849.596 695.64,856.341 696.199,863.88 696.758,852.3 697.317,830.499 697.877,840.988 698.436,819.993 698.995,828.419 699.554,821.644 700.114,784.178 700.673,766.667 701.232,778.019 701.791,787.906 702.351,765.98 702.91,711.749 703.469,680.682 704.028,678.57 704.588,646.701 705.147,679.581 705.706,692.715 706.265,676.427 706.825,676.376 707.384,706.106 707.943,703.82 708.502,722.867 709.062,725.648 709.621,757.486 710.18,736.456 710.739,734.627 711.299,714.291 711.858,699.485 712.417,695.64 712.976,693.554 713.536,679.408 714.095,664.563 714.654,597.572 715.213,618.866 715.773,620.959 716.332,641.82 716.891,642.185 717.45,631.115 718.01,631.471 718.569,652.742 719.128,668.082 719.687,720.85 720.247,720.304 720.806,733.101 721.365,714.644 721.924,648.299 722.484,647.984 723.043,620.108 723.602,641.31 724.161,613.036 724.721,601.086 725.28,601.854 725.839,606.591 726.398,644.356 726.958,663.455 727.517,679.594 728.076,693.701 728.635,678.492 729.195,649.441 729.754,651.713 730.313,670.089 730.872,658.014 731.432,645.487 731.991,699.315 732.55,682.959 733.109,699.938 733.669,666.659 734.228,650.843 734.787,622.636 735.346,625.991 735.906,630.051 736.465,637.474 737.024,640.753 737.583,643.591 738.143,631.007 738.702,666.473 739.261,652.18 739.82,671.46 740.38,669.936 740.939,671.937 741.498,689.913 742.057,692.734 742.617,675.675 743.176,664.351 743.735,669.192 744.294,671.958 744.854,669.077 745.413,702.677 745.972,705.59 746.531,721.938 747.091,724.3 747.65,692.719 748.209,692.948 748.768,726.872 749.328,726.08 749.887,741.861 750.446,722.862 751.005,718.684 751.565,753.088 752.124,767.066 752.683,750.032 753.242,749.178 753.802,731.964 754.361,715.763 754.92,714.613 755.479,713.274 756.039,711.081 756.598,725.118 757.157,721.639 757.716,722.781 758.276,721.587 758.835,701.312 759.394,729.567 759.953,744.033 760.513,707.295 761.072,733.164 761.631,730.81 762.19,743.809 762.75,722.445 763.309,704.397 763.868,703.788 764.427,721.943 764.987,737.879 765.546,714.948 766.105,713.037 766.664,693.817 767.224,693.27 767.783,693.001 768.342,692.24 768.901,693.428 769.461,695.658 770.02,711.015 770.579,693.203 771.138,675.396 771.698,693.16 772.257,709.055 772.816,707.25 773.375,703.16 773.935,700.58 774.494,711.52 775.053,727.978 775.612,741.556 776.172,722.226 776.731,706.512 777.29,685.059 777.849,717.389 778.409,734.372 778.968,751.506 779.527,747.851 780.086,696.278 780.646,693.545 781.205,674.187 781.764,674.192 782.323,672.724 782.883,661.524 783.442,644.018 784.001,666.258 784.56,667.482 785.12,653.951 785.679,671.585 786.238,637.439 786.797,687.268 787.357,715.575 787.916,711.271 788.475,692.359 789.034,709.596 789.594,741.66 790.153,737.956 790.712,753.366 791.271,717.249 791.831,713.985 792.39,711.888 792.949,725.961 793.508,691.321 794.068,694.579 794.627,679.335 795.186,662.03 795.745,648.281 796.305,650.616 796.864,670.153 797.423,640.626 797.982,676.612 798.542,662 799.101,679.866 799.66,680.673 800.219,650.898 800.779,669.547 801.338,706.148 801.897,708.347 802.456,722.131 803.016,719.422 803.575,716.206 804.134,713.386 804.693,743.524 805.253,753.641 805.812,766.575 806.371,746.884 806.931,741.459 807.49,721.722 808.049,751.161 808.608,748.736 809.168,745.656 809.727,727.523 810.286,675.993 810.845,663.318 811.405,663.847 811.964,629.22 812.523,648.849 813.082,652.4 813.642,653.822 814.201,624.596 814.76,627.045 815.319,647.659 815.879,634.976 816.438,623.174 816.997,613.292 817.556,630.218 818.116,634.049 818.675,624.452 819.234,675.006 819.793,675.994 820.353,677.161 820.912,677.372 821.471,709.482 822.03,705.454 822.59,707.738 823.149,739.593 823.708,738.96 824.267,751.507 824.827,750.024 825.386,747.229 825.945,728.817 826.504,727.923 827.064,742.413 827.623,694.556 828.182,659.675 828.741,662.267 829.301,665.037 829.86,617.271 830.419,606.084 830.978,608.897 831.538,612.448 832.097,667.227 832.656,654.168 833.215,621.509 833.775,640.563 834.334,674.186 834.893,677.826 835.452,661.537 836.012,677.912 836.571,694.517 837.13,680.169 837.689,698.06 838.249,694.713 838.808,695.04 839.367,659.993 839.926,694.34 840.486,676.252 841.045,690.741 841.604,688.92 842.163,718.159 842.723,742.296 843.282,735.871 843.841,763.497 844.4,743.87 844.96,758.957 845.519,754.862 846.078,765.68 846.637,743.977 847.197,788.94 847.756,769.321 848.315,747.407 848.874,729.869 849.434,709.826 849.993,709.713 850.552,675.269 851.111,706.807 851.671,721.932 852.23,717.772 852.789,730.283 853.348,738.478 853.908,700.379 854.467,699.059 855.026,700.019 855.585,681.055 856.145,699.104 856.704,700.893 857.263,685.712 857.822,685.832 858.382,653.684 858.941,656.367 859.5,696.328 860.059,694.619 860.619,662.055 861.178,664.718 861.737,667.217 862.296,683.037 862.856,698.958 863.415,714.966 863.974,698.888 864.533,702.062 865.093,720.936 865.652,734.619 866.211,747.016 866.77,740.73 867.33,719.669 867.889,764.637 868.448,729.998 869.007,760.171 869.567,756.131 870.126,799.965 870.685,792.756 871.244,769.196 871.804,813.486 872.363,772.754 872.922,756.473 873.481,769.456 874.041,748.835 874.6,730.596 875.159,726.391 875.718,724.683 876.278,719.085 876.837,723.237 877.396,721.621 877.955,720.661 878.515,736.607 879.074,703.828 879.633,736.268 880.192,750.954 880.752,732.986 881.311,665.807 881.87,667.466 882.429,637.166 882.989,608.514 883.548,628.472 884.107,613.738 884.666,632.154 885.226,621.219 885.785,620.634 886.344,621.912 886.903,642.873 887.463,630.303 888.022,612.673 888.581,630.67 889.14,631.124 889.7,631.235 890.259,599.839 890.818,608.592 891.377,600.693 891.937,605.92 892.496,595.242 893.055,632.07 893.614,635.833 894.174,621.978 894.733,589.181 895.292,595.086 895.851,600.913 896.411,589.593 896.97,563.39 897.529,583.577 898.088,590.864 898.648,579.281 899.207,584.78 899.766,589.787 900.325,562.24 900.885,538.503 901.444,579.142 902.003,603.624 902.562,594.551 903.122,600.146 903.681,620.092 904.24,592.071 904.799,600.688 905.359,606.218 905.918,658.867 906.477,676.975 907.036,708.723 907.596,692.809 908.155,693.778 908.714,710.416 909.273,747.453 909.833,745.034 910.392,737.16 910.951,682.027 911.51,679.561 912.07,679.128 912.629,675.056 913.188,658.647 913.747,639.169 914.307,656.924 914.866,626.061 915.425,633.323 915.984,618.98 916.544,654.757 917.103,673.502 917.662,670.236 918.221,639.289 918.781,642.752 919.34,662.12 919.899,696.594 920.458,711.154 921.018,722.416 921.577,717.989 922.136,746.934 922.695,711.338 923.255,695.907 923.814,694.428 924.373,678.205 924.932,642.975 925.492,647.113 926.051,664.121 926.61,665.946 927.169,668.568 927.729,698.166 928.288,698.056 928.847,696.342 929.406,679.945 929.966,694.323 930.525,715.137 931.084,697.068 931.644,710.381 932.203,722.481 932.762,718.3 933.321,702.632 933.881,685.743 934.44,666.592 934.999,670.223 935.558,686.703 936.118,752.271 936.677,734.064 937.236,730.148 937.795,697.132 938.355,746.673 938.914,728.167 939.473,710.637 940.032,741.641 940.592,737.692 941.151,739.385 941.71,752.545 942.269,734.158 942.829,734.185 943.388,715.727 943.947,760.448 944.506,752.806 945.066,719.096 945.625,700.236 946.184,715.271 946.743,694.398 947.303,673.338 947.862,691.701 948.421,690.166 948.98,675.767 949.54,673.649 950.099,642.207 950.658,662.595 951.217,631.943 951.777,619.749 952.336,640.282 952.895,626.861 953.454,611.286 954.014,645.017 954.573,697.002 955.132,729.025 955.691,696.295 956.251,712.892 956.81,694.287 957.369,709.908 957.928,725.319 958.488,723.121 959.047,704.773 959.606,689.679 960.165,737.443 960.725,733.94 961.284,731.138 961.843,758.684 962.402,772.487 962.962,799.33 963.521,775.381 964.08,758.872 964.639,790.906 965.199,752.589 965.758,717.69 966.317,716.601 966.876,730.802 967.436,711.064 967.995,744.876 968.554,770.122 969.113,748.294 969.673,731.384 970.232,729.042 970.791,710.508 971.35,693.594 971.91,659.819 972.469,676.44 973.028,675.24 973.587,675.143 974.147,640.799 974.706,623.906 975.265,642.908 975.824,658.304 976.384,660.751 976.943,645.611 977.502,680.145 978.061,664.598 978.621,630.532 979.18,618.129 979.739,606.167 980.298,608.628 980.858,563.831 981.417,586.882 981.976,575.591 982.535,582.382 983.095,602.238 983.654,607.437 984.213,593.557 984.772,597.577 985.332,622.465 985.891,609.545 986.45,630.139 987.009,649.764 987.569,636.614 988.128,622.242 988.687,627.608 989.246,631.07 989.806,619.136 990.365,626.601 990.924,648.651 991.483,647.187 992.043,666.107 992.602,651.545 993.161,670.887 993.72,689.459 994.28,674.44 994.839,660.925 995.398,650.276 995.957,654.384 996.517,622.178 997.076,623.207 997.635,629.852 998.194,633.472 998.754,651.785 999.313,635.9 999.872,622.673 1000.43,644.091 1000.99,644.23 1001.55,646.527 1002.11,668.565 1002.67,673.022 1003.23,687.693 1003.79,703.491 1004.35,700.682 1004.91,698.58 1005.46,683.256 1006.02,653.758 1006.58,661.161 1007.14,644.805 1007.7,664.875 1008.26,698.496 1008.82,699.537 1009.38,715.883 1009.94,728.584 1010.5,694.843 1011.06,676.9 1011.62,678.69 1012.18,694.941 1012.73,678.208 1013.29,682.001 1013.85,697.977 1014.41,700.788 1014.97,700.664 1015.53,702.624 1016.09,701.47 1016.65,688.541 1017.21,686.921 1017.77,736.111 1018.33,719.406 1018.89,737.041 1019.45,706.079 1020.01,738.473 1020.56,718.073 1021.12,751.111 1021.68,746.413 1022.24,743.027 1022.8,740.227 1023.36,722.875 1023.92,719.463 1024.48,686.794 1025.04,690.601 1025.6,734.19 1026.16,714.116 1026.72,743.552 1027.28,721.964 1027.83,737.567 1028.39,734.547 1028.95,699.746 1029.51,697.89 1030.07,726.213 1030.63,722.743 1031.19,770.042 1031.75,779.292 1032.31,724.251 1032.87,688.552 1033.43,670.605 1033.99,701.774 1034.55,685.702 1035.1,684.726 1035.66,681.728 1036.22,698.091 1036.78,713.951 1037.34,664.277 1037.9,636.748 1038.46,654.401 1039.02,657.256 1039.58,654.273 1040.14,656.324 1040.7,674.315 1041.26,706.876 1041.82,672.634 1042.38,689.166 1042.93,704.567 1043.49,705.527 1044.05,704.832 1044.61,720.033 1045.17,717.209 1045.73,713.537 1046.29,714.488 1046.85,711.946 1047.41,710.902 1047.97,708.574 1048.53,656.666 1049.09,674.884 1049.65,658.118 1050.2,672.698 1050.76,690.487 1051.32,674.852 1051.88,686.263 1052.44,684.022 1053,636.91 1053.56,641.551 1054.12,644.432 1054.68,649.639 1055.24,669.982 1055.8,670.6 1056.36,706.208 1056.92,751.508 1057.48,734.616 1058.03,714.717 1058.59,709.544 1059.15,724.098 1059.71,770.381 1060.27,765.371 1060.83,791.396 1061.39,753.534 1061.95,734.136 1062.51,715.807 1063.07,697.164 1063.63,680.759 1064.19,668.944 1064.75,702.554 1065.3,702.9 1065.86,702.462 1066.42,688.187 1066.98,668.676 1067.54,702.172 1068.1,687 1068.66,718.679 1069.22,780.74 1069.78,779.24 1070.34,793.769 1070.9,774.032 1071.46,768.341 1072.02,730.032 1072.57,744.685 1073.13,769.114 1073.69,701.594 1074.25,747.688 1074.81,796.543 1075.37,806.907 1075.93,812.969 1076.49,835.816 1077.05,832.1 1077.61,823.036 1078.17,814.324 1078.73,812.213 1079.29,756.763 1079.85,753.472 1080.4,796.685 1080.96,792.349 1081.52,752.339 1082.08,750.278 1082.64,777.669 1083.2,787.909 1083.76,780.174 1084.32,758.73 1084.88,751.191 1085.44,763.403 1086,742.257 1086.56,720.884 1087.12,754.637 1087.67,717.916 1088.23,703.476 1088.79,669.869 1089.35,653.07 1089.91,653.688 1090.47,653.681 1091.03,655.607 1091.59,656.49 1092.15,676.323 1092.71,694.018 1093.27,693.869 1093.83,678.312 1094.39,679.604 1094.94,713.236 1095.5,711.65 1096.06,707.762 1096.62,657.64 1097.18,674.427 1097.74,662.879 1098.3,632.206 1098.86,631.994 1099.42,617.888 1099.98,619.858 1100.54,607.995 1101.1,608.997 1101.66,564.633 1102.22,570.327 1102.77,577.32 1103.33,562.092 1103.89,549.818 1104.45,558.683 1105.01,581.286 1105.57,604.403 1106.13,590.149 1106.69,611.855 1107.25,584.94 1107.81,592.308 1108.37,580.928 1108.93,586.738 1109.49,574.607 1110.04,629.209 1110.6,614.394 1111.16,603.263 1111.72,624.603 1112.28,659.89 1112.84,630.28 1113.4,634.47 1113.96,632.691 1114.52,653.336 1115.08,671.1 1115.64,672.054 1116.2,658.805 1116.76,660.922 1117.31,658.741 1117.87,660.177 1118.43,661.439 1118.99,677.279 1119.55,650.506 1120.11,702.85 1120.67,686.917 1121.23,655.198 1121.79,656.999 1122.35,675.306 1122.91,723.34 1123.47,740.799 1124.03,703.418 1124.59,732.655 1125.14,717.326 1125.7,719.062 1126.26,734.264 1126.82,749.361 1127.38,763.151 1127.94,739.132 1128.5,726.543 1129.06,725.455 1129.62,706.91 1130.18,722.796 1130.74,708.246 1131.3,724.121 1131.86,701.806 1132.41,684.1 1132.97,685.848 1133.53,703.657 1134.09,702.791 1134.65,701.371 1135.21,715.507 1135.77,748.407 1136.33,742.588 1136.89,677.922 1137.45,664.417 1138.01,649.44 1138.57,649.298 1139.13,683.031 1139.68,665.693 1140.24,650.83 1140.8,651.288 1141.36,652.764 1141.92,656.732 1142.48,654.07 1143.04,638.275 1143.6,658.26 1144.16,723.335 1144.72,754.566 1145.28,747.001 1145.84,738.417 1146.4,717.528 1146.96,716.684 1147.51,711.998 1148.07,697.025 1148.63,697.38 1149.19,678.525 1149.75,629.856 1150.31,649.267 1150.87,666.707 1151.43,654.504 1151.99,717.863 1152.55,699.498 1153.11,699.954 1153.67,694.99 1154.23,695.264 1154.78,679.669 1155.34,713.694 1155.9,698.823 1156.46,696.35 1157.02,708.218 1157.58,709.979 1158.14,692.073 1158.7,689.422 1159.26,690.262 1159.82,690.734 1160.38,703.246 1160.94,724.3 1161.5,724.483 1162.05,687.758 1162.61,640.422 1163.17,642.262 1163.73,628.576 1164.29,678.496 1164.85,646.717 1165.41,614.151 1165.97,616.77 1166.53,603.731 1167.09,593.462 1167.65,600.637 1168.21,670.935 1168.77,706.003 1169.33,736.631 1169.88,717.485 1170.44,748.032 1171,790.511 1171.56,800.698 1172.12,808.221 1172.68,781.081 1173.24,760.043 1173.8,742.72 1174.36,723.757 1174.92,720.993 1175.48,733.845 1176.04,717.348 1176.6,749.171 1177.15,730.914 1177.71,708.664 1178.27,739.84 1178.83,753.415 1179.39,732.49 1179.95,727.866 1180.51,693.075 1181.07,693.732 1181.63,693.752 1182.19,692.608 1182.75,705.291 1183.31,719.457 1183.87,732.812 1184.43,745.142 1184.98,757.489 1185.54,752.225 1186.1,696.962 1186.66,712.514 1187.22,709.889 1187.78,681.565 1188.34,679.996 1188.9,680.296 1189.46,615.329 1190.02,604.656 1190.58,606.872 1191.14,628.679 1191.7,648.355 1192.25,632.084 1192.81,665.688 1193.37,637.744 1193.93,622.477 1194.49,611.462 1195.05,600.014 1195.61,570.429 1196.17,574.473 1196.73,567.957 1197.29,573.182 1197.85,560.779 1198.41,568.568 1198.97,560.228 1199.52,573.5 1200.08,541.258 1200.64,552.62 1201.2,591.505 1201.76,615.117 1202.32,637.997 1202.88,638.808 1203.44,627.946 1204,627.659 1204.56,646.033 1205.12,650.461 1205.68,651.514 1206.24,637.303 1206.8,640.321 1207.35,658.159 1207.91,642.704 1208.47,662.426 1209.03,631.298 1209.59,651.161 1210.15,616.748 1210.71,638.567 1211.27,622.723 1211.83,609.695 1212.39,646.211 1212.95,648.514 1213.51,653.63 1214.07,673.032 1214.62,640.073 1215.18,612.248 1215.74,597.77 1216.3,636.515 1216.86,635.958 1217.42,654.913 1217.98,671.143 1218.54,672.73 1219.1,657.37 1219.66,657.418 1220.22,689.189 1220.78,689.027 1221.34,673.551 1221.89,707.129 1222.45,688.286 1223.01,706.515 1223.57,723.351 1224.13,723.547 1224.69,737.402 1225.25,717.82 1225.81,737.39 1226.37,736.794 1226.93,722.655 1227.49,719.581 1228.05,684.862 1228.61,683.54 1229.17,681.938 1229.72,682.526 1230.28,687.168 1230.84,672.024 1231.4,653.922 1231.96,659.264 1232.52,647.416 1233.08,635.657 1233.64,637.124 1234.2,654.902 1234.76,689.767 1235.32,653.107 1235.88,673.441 1236.44,674.678 1236.99,647.461 1237.55,651.702 1238.11,686.11 1238.67,701.662 1239.23,700.686 1239.79,736.593 1240.35,716.768 1240.91,749.275 1241.47,747.156 1242.03,729.497 1242.59,713.047 1243.15,696.25 1243.71,709.264 1244.26,723.179 1244.82,737.261 1245.38,734.013 1245.94,712.621 1246.5,722.165 1247.06,736.128 1247.62,737.495 1248.18,735.303 1248.74,746.806 1249.3,763.12 1249.86,756.651 1250.42,783.136 1250.98,776.084 1251.54,754.441 1252.09,733.957 1252.65,718.408 1253.21,717.32 1253.77,745.489 1254.33,740.169 1254.89,735.584 1255.45,636.567 1256.01,636.853 1256.57,640.842 1257.13,656.272 1257.69,675.216 1258.25,675.127 1258.81,705.641 1259.36,688.522 1259.92,674.759 1260.48,677.541 1261.04,727.774 1261.6,709.392 1262.16,708.219 1262.72,691.3 1263.28,691.805 1263.84,675.3 1264.4,673.844 1264.96,692.298 1265.52,694.657 1266.08,676.141 1266.63,660.357 1267.19,659.989 1267.75,662.064 1268.31,627.211 1268.87,611.619 1269.43,633.753 1269.99,666.626 1270.55,652.221 1271.11,655.202 1271.67,653.633 1272.23,686.842 1272.79,702.112 1273.35,749.712 1273.91,714.74 1274.46,694.528 1275.02,697.091 1275.58,681.413 1276.14,679.111 1276.7,679.968 1277.26,726.561 1277.82,743.403 1278.38,755.48 1278.94,783.215 1279.5,776.469 1280.06,759.554 1280.62,705.054 1281.18,721.894 1281.73,700.881 1282.29,697.597 1282.85,715.318 1283.41,697.193 1283.97,681.707 1284.53,663.535 1285.09,678.831 1285.65,697.145 1286.21,696.438 1286.77,676.16 1287.33,658.727 1287.89,659.806 1288.45,725.18 1289,742.026 1289.56,739.753 1290.12,783.899 1290.68,792.063 1291.24,767.984 1291.8,777.937 1292.36,771.269 1292.92,778.448 1293.48,742.706 1294.04,753.52 1294.6,749.068 1295.16,763.662 1295.72,758.083 1296.28,772.225 1296.83,769.72 1297.39,766.035 1297.95,728.925 1298.51,726.369 1299.07,738.844 1299.63,704.059 1300.19,702.845 1300.75,701.077 1301.31,701.688 1301.87,686.852 1302.43,667.319 1302.99,651.532 1303.55,634.886 1304.1,654.486 1304.66,655.897 1305.22,654.347 1305.78,674.993 1306.34,689.035 1306.9,656.57 1307.46,656.462 1308.02,656.874 1308.58,676.239 1309.14,629.44 1309.7,630.729 1310.26,600.628 1310.82,589.138 1311.38,596.415 1311.93,605.507 1312.49,603.535 1313.05,589.677 1313.61,607.643 1314.17,609.886 1314.73,613.527 1315.29,618.896 1315.85,621.874 1316.41,628.228 1316.97,617.42 1317.53,655.597 1318.09,643.189 1318.65,625.808 1319.2,630.043 1319.76,633.96 1320.32,656.22 1320.88,676.923 1321.44,714.021 1322,712.347 1322.56,705.727 1323.12,704.365 1323.68,688.585 1324.24,690.454 1324.8,688.811 1325.36,673.813 1325.92,693.962 1326.47,691.6 1327.03,693.482 1327.59,676.404 1328.15,709.493 1328.71,687.763 1329.27,656.073 1329.83,625.658 1330.39,643.07 1330.95,629.727 1331.51,648.173 1332.07,636.84 1332.63,640.564 1333.19,661.384 1333.75,679.18 1334.3,699.229 1334.86,664.871 1335.42,668.064 1335.98,654.009 1336.54,703.561 1337.1,707.934 1337.66,675.145 1338.22,657.619 1338.78,625.404 1339.34,628.514 1339.9,601.997 1340.46,593.049 1341.02,601.256 1341.57,574.257 1342.13,581.108 1342.69,604.745 1343.25,576.054 1343.81,611.874 1344.37,597.053 1344.93,586.97 1345.49,574.633 1346.05,577.392 1346.61,598.316 1347.17,635.184 1347.73,618.87 1348.29,606.318 1348.84,610.044 1349.4,613.611 1349.96,617.109 1350.52,610.197 1351.08,625.967 1351.64,646.123 1352.2,663.606 1352.76,663.946 1353.32,633.626 1353.88,653.286 1354.44,655.705 1355,703.638 1355.56,702.406 1356.12,718.606 1356.67,688.233 1357.23,702.448 1357.79,702.964 1358.35,718.266 1358.91,735.131 1359.47,718.751 1360.03,717.121 1360.59,700.411 1361.15,700.008 1361.71,716.327 1362.27,732.235 1362.83,712.345 1363.39,727.462 1363.94,704.607 1364.5,702.463 1365.06,705.402 1365.62,691.923 1366.18,676.184 1366.74,677.272 1367.3,679.149 1367.86,662.528 1368.42,680.998 1368.98,684.876 1369.54,698.044 1370.1,714.302 1370.66,730.393 1371.21,726.163 1371.77,708.525 1372.33,703.892 1372.89,682.159 1373.45,683.391 1374.01,680.29 1374.57,679.316 1375.13,683.516 1375.69,683.847 1376.25,685.38 1376.81,686.841 1377.37,706.045 1377.93,658.744 1378.49,662.114 1379.04,648.352 1379.6,652.415 1380.16,685.736 1380.72,716.648 1381.28,727.438 1381.84,743.488 1382.4,742.745 1382.96,723.728 1383.52,703.522 1384.08,721.425 1384.64,707.273 1385.2,703.175 1385.76,713.414 1386.31,725.692 1386.87,692.408 1387.43,693.231 1387.99,726.401 1388.55,706.322 1389.11,770.852 1389.67,748.652 1390.23,729.225 1390.79,726.373 1391.35,756.506 1391.91,735.762 1392.47,728.914 1393.03,727.08 1393.58,742.386 1394.14,722.174 1394.7,702.829 1395.26,689.705 1395.82,702.804 1396.38,721.896 1396.94,735.373 1397.5,715.658 1398.06,729.692 1398.62,724.624 1399.18,719.104 1399.74,714.678 1400.3,678.951 1400.86,674.776 1401.41,677.108 1401.97,660.347 1402.53,679.084 1403.09,680.662 1403.65,680.193 1404.21,727.376 1404.77,710.046 1405.33,726.071 1405.89,722.846 1406.45,722.452 1407.01,722.299 1407.57,671.329 1408.13,657.244 1408.68,690.311 1409.24,708.131 1409.8,694.28 1410.36,660.316 1410.92,662.516 1411.48,635.1 1412.04,670.543 1412.6,654.599 1413.16,684.359 1413.72,667.574 1414.28,635.031 1414.84,681.771 1415.4,698.298 1415.95,695.57 1416.51,679.516 1417.07,645.182 1417.63,660.598 1418.19,661.055 1418.75,661.535 1419.31,708.919 1419.87,709.124 1420.43,727.942 1420.99,707.021 1421.55,691.905 1422.11,711.943 1422.67,742.164 1423.23,722.84 1423.78,738.047 1424.34,735.161 1424.9,699.183 1425.46,716.278 1426.02,718.333 1426.58,720.182 1427.14,732.835 1427.7,713.386 1428.26,717.583 1428.82,729.744 1429.38,727.265 1429.94,739.6 1430.5,724.229 1431.05,722.258 1431.61,688.382 1432.17,720.843 1432.73,751.57 1433.29,765.314 1433.85,760.772 1434.41,739.848 1434.97,738.472 1435.53,749.706 1436.09,744.481 1436.65,743.157 1437.21,721.767 1437.77,703.811 1438.33,671.446 1438.88,639.47 1439.44,691.155 1440,674.738 1440.56,691.495 1441.12,688.066 1441.68,675.773 1442.24,645.079 1442.8,662.883 1443.36,660.615 1443.92,664.65 1444.48,666.576 1445.04,650.225 1445.6,636.778 1446.15,607.47 1446.71,597.677 1447.27,606.354 1447.83,627.835 1448.39,614.742 1448.95,632.692 1449.51,622.015 1450.07,623.947 1450.63,627.466 1451.19,643.947 1451.75,628.753 1452.31,630.59 1452.87,646.062 1453.42,665.022 1453.98,648.322 1454.54,633.674 1455.1,717.443 1455.66,730.709 1456.22,711.836 1456.78,727.423 1457.34,722.832 1457.9,721.491 1458.46,703.394 1459.02,706.496 1459.58,687.848 1460.14,716.638 1460.7,733.484 1461.25,728.157 1461.81,759.92 1462.37,776.717 1462.93,737.743 1463.49,716.712 1464.05,746.904 1464.61,742.987 1465.17,737.465 1465.73,781.373 1466.29,776.974 1466.85,760.448 1467.41,756.918 1467.97,752.29 1468.52,744.899 1469.08,788.591 1469.64,781.178 1470.2,777.217 1470.76,757.738 1471.32,769.798 1471.88,762.158 1472.44,759.449 1473,755.18 1473.56,778.529 1474.12,783.907 1474.68,810.618 1475.24,806.181 1475.79,781.714 1476.35,790.157 1476.91,771.292 1477.47,767.008 1478.03,745.432 1478.59,739.91 1479.15,720.198 1479.71,697.75 1480.27,696.985 1480.83,647.856 1481.39,633.302 1481.95,587.231 1482.51,591.42 1483.07,601.738 1483.62,572.119 1484.18,546.224 1484.74,604.24 1485.3,628.727 1485.86,645.099 1486.42,680.77 1486.98,664.861 1487.54,681.237 1488.1,661.31 1488.66,696.537 1489.22,713.899 1489.78,712.182 1490.34,643.83 1490.89,645.671 1491.45,649.02 1492.01,632.959 1492.57,621.785 1493.13,641.216 1493.69,627.806 1494.25,628.183 1494.81,648.297 1495.37,648.006 1495.93,633.088 1496.49,634.966 1497.05,667.524 1497.61,668.276 1498.16,700.164 1498.72,683.467 1499.28,682.598 1499.84,698.517 1500.4,683.406 1500.96,699.924 1501.52,700.176 1502.08,682.639 1502.64,702.537 1503.2,749.581 1503.76,796.302 1504.32,792.274 1504.88,767.91 1505.44,762.799 1505.99,778.082 1506.55,757.33 1507.11,749.541 1507.67,775.124 1508.23,754.174 1508.79,764.809 1509.35,760.752 1509.91,788.817 1510.47,813.26 1511.03,822.2 1511.59,798.226 1512.15,790.436 1512.71,767.945 1513.26,730.389 1513.82,667.604 1514.38,685.157 1514.94,652.961 1515.5,639.132 1516.06,621.917 1516.62,626.083 1517.18,649.649 1517.74,601.229 1518.3,619.103 1518.86,572.77 1519.42,575.374 1519.98,594.016 1520.53,578.386 1521.09,587.763 1521.65,577.951 1522.21,588.412 1522.77,578.007 1523.33,588.125 1523.89,610.128 1524.45,612.225 1525.01,633.517 1525.57,603.813 1526.13,609.295 1526.69,611.289 1527.25,633.055 1527.81,649.426 1528.36,682.018 1528.92,718.257 1529.48,686.155 1530.04,669.702 1530.6,655.336 1531.16,641.822 1531.72,660.98 1532.28,680.102 1532.84,662.859 1533.4,665.225 1533.96,667.533 1534.52,668.133 1535.08,633.294 1535.63,634.997 1536.19,655.725 1536.75,657.922 1537.31,660.475 1537.87,676.36 1538.43,678.701 1538.99,663.09 1539.55,647.592 1540.11,648.414 1540.67,638.633 1541.23,641.74 1541.79,630.892 1542.35,636.138 1542.9,638.973 1543.46,643.672 1544.02,629.715 1544.58,633.399 1545.14,636.617 1545.7,638.598 1546.26,621.535 1546.82,590.465 1547.38,580.201 1547.94,605.7 1548.5,609.543 1549.06,592.744 1549.62,628.453 1550.18,613.919 1550.73,542.614 1551.29,549.021 1551.85,592.579 1552.41,612.51 1552.97,601.361 1553.53,672.342 1554.09,658.585 1554.65,662.686 1555.21,661.557 1555.77,681.098 1556.33,695.654 1556.89,709.484 1557.45,722.155 1558,720.247 1558.56,719.401 1559.12,699.757 1559.68,700.699 1560.24,716.071 1560.8,729.028 1561.36,691.955 1561.92,691.892 1562.48,706.893 1563.04,709.602 1563.6,678.015 1564.16,662.519 1564.72,698.275 1565.28,695.727 1565.83,677.824 1566.39,629.424 1566.95,630.506 1567.51,633.423 1568.07,668.778 1568.63,687.636 1569.19,656.792 1569.75,624.89 1570.31,630.141 1570.87,639.997 1571.43,675.098 1571.99,703.986 1572.55,707.141 1573.1,721.739 1573.66,737.133 1574.22,736.209 1574.78,736.488 1575.34,731.41 1575.9,713.779 1576.46,711.226 1577.02,695.286 1577.58,726.829 1578.14,723.559 1578.7,734.257 1579.26,716.726 1579.82,711.418 1580.37,712.319 1580.93,728.161 1581.49,709.9 1582.05,710.459 1582.61,712.246 1583.17,726.314 1583.73,741.424 1584.29,738.575 1584.85,770.103 1585.41,764.518 1585.97,761.875 1586.53,774.251 1587.09,738.389 1587.65,720 1588.2,716.774 1588.76,701.077 1589.32,710.198 1589.88,690.949 1590.44,674.28 1591,711.396 1591.56,740.844 1592.12,786.939 1592.68,797.399 1593.24,776.755 1593.8,787.732 1594.36,783.683 1594.92,762.736 1595.47,774.845 1596.03,819.894 1596.59,797.516 1597.15,805.418 1597.71,813.952 1598.27,805.025 1598.83,760.794 1599.39,760.687 1599.95,772.506 1600.51,785.013 1601.07,796.05 1601.63,792.035 1602.19,771.622 1602.74,798.659 1603.3,805.639 1603.86,782.612 1604.42,813.008 1604.98,803.62 1605.54,831.01 1606.1,806.913 1606.66,817.806 1607.22,792.934 1607.78,817.58 1608.34,791.107 1608.9,767.941 1609.46,762.803 1610.02,772.034 1610.57,732.941 1611.13,712.256 1611.69,709.222 1612.25,691.8 1612.81,691.038 1613.37,688.468 1613.93,686.498 1614.49,687.345 1615.05,669.925 1615.61,654.539 1616.17,653.06 1616.73,685.951 1617.29,701.046 1617.84,698.877 1618.4,712.978 1618.96,729.567 1619.52,689.734 1620.08,673.072 1620.64,707.389 1621.2,721.15 1621.76,737.64 1622.32,734.27 1622.88,715.981 1623.44,683.703 1624,683.095 1624.56,698.823 1625.11,665.061 1625.67,633.742 1626.23,601.926 1626.79,621.81 1627.35,623.403 1627.91,609.424 1628.47,611.612 1629.03,618.316 1629.59,570.426 1630.15,577.146 1630.71,615.126 1631.27,637.728 1631.83,623.954 1632.39,638.435 1632.94,657.191 1633.5,689.693 1634.06,691.8 1634.62,661.107 1635.18,645.368 1635.74,617.77 1636.3,625.482 1636.86,662.125 1637.42,649.122 1637.98,620.358 1638.54,608.081 1639.1,576.771 1639.66,582.911 1640.21,555.916 1640.77,596.893 1641.33,650.349 1641.89,621.019 1642.45,625.033 1643.01,612.384 1643.57,629.196 1644.13,618.768 1644.69,617.54 1645.25,586.852 1645.81,610.446 1646.37,626.929 1646.93,613.525 1647.48,631.695 1648.04,637.377 1648.6,607.025 1649.16,611.692 1649.72,648.013 1650.28,621.288 1650.84,624.353 1651.4,600.34 1651.96,621.746 1652.52,653.877 1653.08,657.075 1653.64,674.614 1654.2,708.667 1654.76,702.674 1655.31,687.293 1655.87,704.305 1656.43,704.335 1656.99,699.544 1657.55,679.3 1658.11,663.841 1658.67,665.003 1659.23,693.959 1659.79,645.268 1660.35,647.242 1660.91,648.606 1661.47,664.594 1662.03,715.358 1662.58,711.353 1663.14,709.528 1663.7,738.35 1664.26,719.032 1664.82,717.155 1665.38,701.283 1665.94,703.801 1666.5,717.701 1667.06,732.91 1667.62,730.109 1668.18,746.48 1668.74,747.03 1669.3,724.919 1669.85,692.462 1670.41,676.661 1670.97,674.606 1671.53,677.721 1672.09,678.513 1672.65,661.478 1673.21,644.113 1673.77,630.279 1674.33,619.611 1674.89,635.176 1675.45,669.838 1676.01,672.25 1676.57,674.832 1677.13,677.85 1677.68,642.46 1678.24,633.057 1678.8,636.881 1679.36,643.207 1679.92,629.621 1680.48,648.261 1681.04,647.421 1681.6,666.998 1682.16,654.302 1682.72,658.688 1683.28,661.195 1683.84,613.664 1684.4,618.908 1684.95,641.863 1685.51,628.393 1686.07,665.135 1686.63,650.358 1687.19,652.774 1687.75,688.675 1688.31,674.883 1688.87,708.302 1689.43,709.358 1689.99,721.083 1690.55,718.897 1691.11,716.443 1691.67,713.452 1692.23,708.459 1692.78,690.468 1693.34,705.099 1693.9,756.227 1694.46,766.37 1695.02,714.277 1695.58,711.629 1696.14,723.373 1696.7,766.291 1697.26,763.248 1697.82,759.76 1698.38,756.795 1698.94,720.253 1699.5,702.924 1700.05,721.551 1700.61,685.821 1701.17,735.356 1701.73,779.537 1702.29,804.251 1702.85,765.496 1703.41,777.277 1703.97,771.977 1704.53,752.467 1705.09,714.671 1705.65,697.323 1706.21,711.74 1706.77,696.151 1707.32,678.93 1707.88,680.698 1708.44,683.511 1709,697.203 1709.56,679.157 1710.12,679.974 1710.68,679.349 1711.24,680.15 1711.8,665.096 1712.36,662.917 1712.92,664.517 1713.48,633.428 1714.04,637.04 1714.6,652.606 1715.15,622.018 1715.71,606.56 1716.27,609.294 1716.83,578.326 1717.39,600.347 1717.95,625.796 1718.51,630.132 1719.07,665.996 1719.63,648.039 1720.19,652.64 1720.75,653.874 1721.31,642.367 1721.87,664.38 1722.42,681.66 1722.98,681.664 1723.54,695.727 1724.1,694.028 1724.66,692.227 1725.22,689.886 1725.78,657.187 1726.34,673.003 1726.9,691.327 1727.46,675.039 1728.02,707.686 1728.58,722.217 1729.14,734.724 1729.69,716.805 1730.25,699.04 1730.81,682.875 1731.37,669.186 1731.93,655.083 1732.49,640.506 1733.05,676.281 1733.61,676.729 1734.17,659.183 1734.73,675.78 1735.29,675.727 1735.85,647.002 1736.41,631.943 1736.97,632.764 1737.52,621.51 1738.08,609.187 1738.64,632.229 1739.2,650.52 1739.76,684.661 1740.32,686.187 1740.88,687.418 1741.44,702.128 1742,682.864 1742.56,685.42 1743.12,686.713 1743.68,719.627 1744.24,731.67 1744.79,762.675 1745.35,761.805 1745.91,774.729 1746.47,802.241 1747.03,828.121 1747.59,838.948 1748.15,880.71 1748.71,885.673 1749.27,861.213 1749.83,856.01 1750.39,830.306 1750.95,854.482 1751.51,859.415 1752.06,835.35 1752.62,828.252 1753.18,850.211 1753.74,827.613 1754.3,818.892 1754.86,809.803 1755.42,808.314 1755.98,812.939 1756.54,818.899 1757.1,791.93 1757.66,751.769 1758.22,767.236 1758.78,775.098 1759.34,755.23 1759.89,718.583 1760.45,699.682 1761.01,712.972 1761.57,728.885 1762.13,679.795 1762.69,661.97 1763.25,647.261 1763.81,677.975 1764.37,695.495 1764.93,694.702 1765.49,679.143 1766.05,645.15 1766.61,679.657 1767.16,712.417 1767.72,711.322 1768.28,693.52 1768.84,689.519 1769.4,691.429 1769.96,673.132 1770.52,658.052 1771.08,646.93 1771.64,678.769 1772.2,679.783 1772.76,666.231 1773.32,651.205 1773.88,634.342 1774.43,636.634 1774.99,668.973 1775.55,687.948 1776.11,690.897 1776.67,692.901 1777.23,676.177 1777.79,712.704 1778.35,708.984 1778.91,708.434 1779.47,692.075 1780.03,675.941 1780.59,672.274 1781.15,688.96 1781.71,687.587 1782.26,672.944 1782.82,659.156 1783.38,645.007 1783.94,646.634 1784.5,695.305 1785.06,675.832 1785.62,678.612 1786.18,660.362 1786.74,674.546 1787.3,696.855 1787.86,692.324 1788.42,722.741 1788.98,707.279 1789.53,705.99 1790.09,651.931 1790.65,684.712 1791.21,683.727 1791.77,685.32 1792.33,684.509 1792.89,701.944 1793.45,732.023 1794.01,762.414 1794.57,742.425 1795.13,772.635 1795.69,767.576 1796.25,698.579 1796.8,698.743 1797.36,728.614 1797.92,711.113 1798.48,707.994 1799.04,687.181 1799.6,685.574 1800.16,686.775 1800.72,655.323 1801.28,626.11 1801.84,645.562 1802.4,663.464 1802.96,696.72 1803.52,694.398 1804.08,643.7 1804.63,644.351 1805.19,646.724 1805.75,630.533 1806.31,601.606 1806.87,608.532 1807.43,611.123 1807.99,615.383 1808.55,614.86 1809.11,634.758 1809.67,620.818 1810.23,608.351 1810.79,629.413 1811.35,631.936 1811.9,633.552 1812.46,648.863 1813.02,604.048 1813.58,638.72 1814.14,608.897 1814.7,630.109 1815.26,650.138 1815.82,601.15 1816.38,589.648 1816.94,596.372 1817.5,582.809 1818.06,589.627 1818.62,579.123 1819.18,601.3 1819.73,655.316 1820.29,656.233 1820.85,676.408 1821.41,642.67 1821.97,660.798 1822.53,679.604 1823.09,677.552 1823.65,678.42 1824.21,596.688 1824.77,600.116 1825.33,590.169 1825.89,631.212 1826.45,649.844 1827,651.889 1827.56,669.769 1828.12,686.671 1828.68,734.463 1829.24,747.064 1829.8,744.342 1830.36,743.09 1830.92,773.013 1831.48,768.49 1832.04,749.378 1832.6,750.077 1833.16,727.901 1833.72,662.987 1834.27,664.044 1834.83,634.841 1835.39,643.362 1835.95,629.855 1836.51,634.309 1837.07,624.915 1837.63,626.565 1838.19,614.62 \"/>\n<path clip-path=\"url(#clip423)\" d=\"M720.247 691.651 L720.806 691.651 L721.365 691.651 L721.924 691.651 L722.484 691.651 L723.043 691.651 L723.602 691.651 L724.161 691.651 L724.721 691.651 L725.28 691.651 L725.839 691.651 L726.398 691.651 L726.958 691.651 L727.517 691.651 L728.076 691.651 L728.635 691.651 L729.195 691.651 L729.754 691.651 L730.313 691.651 L730.872 691.651 L731.432 691.651 L731.991 691.651 L732.55 691.651 L733.109 691.651 L733.669 691.651 L734.228 691.651 L734.787 691.651 L735.346 691.651 L735.906 691.651 L736.465 691.651 L737.024 691.651 L737.583 691.651 L738.143 691.651 L738.702 691.651 L739.261 691.651 L739.82 691.651 L740.38 691.651 L740.939 691.651 L741.498 691.651 L742.057 691.651 L742.617 691.651 L743.176 691.651 L743.735 691.651 L744.294 691.651 L744.854 691.651 L745.413 691.651 L745.972 691.651 L746.531 691.651 L747.091 691.651 L747.65 691.651 L748.209 691.651 L748.768 691.651 L749.328 691.651 L749.887 691.651 L750.446 691.651 L751.005 691.651 L751.565 691.651 L752.124 691.651 L752.683 691.651 L753.242 691.651 L753.802 691.651 L754.361 691.651 L754.92 691.651 L755.479 691.651 L756.039 691.651 L756.598 691.651 L757.157 691.651 L757.716 691.651 L758.276 691.651 L758.835 691.651 L759.394 691.651 L759.953 691.651 L760.513 691.651 L761.072 691.651 L761.631 691.651 L762.19 691.651 L762.75 691.651 L763.309 691.651 L763.868 691.651 L764.427 691.651 L764.987 691.651 L765.546 691.651 L766.105 691.651 L766.664 691.651 L767.224 691.651 L767.783 691.651 L768.342 691.651 L768.901 691.651 L769.461 691.651 L770.02 691.651 L770.579 691.651 L771.138 691.651 L771.698 691.651 L772.257 691.651 L772.816 691.651 L773.375 691.651 L773.935 691.651 L774.494 691.651 L775.053 691.651 L775.612 691.651 L776.172 691.651 L776.731 691.651 L777.29 691.651 L777.849 691.651 L778.409 691.651 L778.968 691.651 L779.527 691.651 L780.086 691.651 L780.646 691.651 L781.205 691.651 L781.764 691.651 L782.323 691.651 L782.883 691.651 L783.442 691.651 L784.001 691.651 L784.56 691.651 L785.12 691.651 L785.679 691.651 L786.238 691.651 L786.797 691.651 L787.357 691.651 L787.916 691.651 L788.475 691.651 L789.034 691.651 L789.594 691.651 L790.153 691.651 L790.712 691.651 L791.271 691.651 L791.831 691.651 L792.39 691.651 L792.949 691.651 L793.508 691.651 L794.068 691.651 L794.627 691.651 L795.186 691.651 L795.745 691.651 L796.305 691.651 L796.864 691.651 L797.423 691.651 L797.982 691.651 L798.542 691.651 L799.101 691.651 L799.66 691.651 L800.219 691.651 L800.779 691.651 L801.338 691.651 L801.897 691.651 L802.456 691.651 L803.016 691.651 L803.575 691.651 L804.134 691.651 L804.693 691.651 L805.253 691.651 L805.812 691.651 L806.371 691.651 L806.931 691.651 L807.49 691.651 L808.049 691.651 L808.608 691.651 L809.168 691.651 L809.727 691.651 L810.286 691.651 L810.845 691.651 L811.405 691.651 L811.964 691.651 L812.523 691.651 L813.082 691.651 L813.642 691.651 L814.201 691.651 L814.76 691.651 L815.319 691.651 L815.879 691.651 L816.438 691.651 L816.997 691.651 L817.556 691.651 L818.116 691.651 L818.675 691.651 L819.234 691.651 L819.793 691.651 L820.353 691.651 L820.912 691.651 L821.471 691.651 L822.03 691.651 L822.59 691.651 L823.149 691.651 L823.708 691.651 L824.267 691.651 L824.827 691.651 L825.386 691.651 L825.945 691.651 L826.504 691.651 L827.064 691.651 L827.623 691.651 L828.182 691.651 L828.741 691.651 L829.301 691.651 L829.86 691.651 L830.419 691.651 L830.978 691.651 L831.538 691.651 L832.097 691.651 L832.656 691.651 L833.215 691.651 L833.775 691.651 L834.334 691.651 L834.893 691.651 L835.452 691.651 L836.012 691.651 L836.571 691.651 L837.13 691.651 L837.689 691.651 L838.249 691.651 L838.808 691.651 L839.367 691.651 L839.926 691.651 L840.486 691.651 L841.045 691.651 L841.604 691.651 L842.163 691.651 L842.723 691.651 L843.282 691.651 L843.841 691.651 L844.4 691.651 L844.96 691.651 L845.519 691.651 L846.078 691.651 L846.637 691.651 L847.197 691.651 L847.756 691.651 L848.315 691.651 L848.874 691.651 L849.434 691.651 L849.993 691.651 L850.552 691.651 L851.111 691.651 L851.671 691.651 L852.23 691.651 L852.789 691.651 L853.348 691.651 L853.908 691.651 L854.467 691.651 L855.026 691.651 L855.585 691.651 L856.145 691.651 L856.704 691.651 L857.263 691.651 L857.822 691.651 L858.382 691.651 L858.941 691.651 L859.5 691.651 L860.059 691.651 L860.619 691.651 L861.178 691.651 L861.737 691.651 L862.296 691.651 L862.856 691.651 L863.415 691.651 L863.974 691.651 L864.533 691.651 L865.093 691.651 L865.652 691.651 L866.211 691.651 L866.77 691.651 L867.33 691.651 L867.889 691.651 L868.448 691.651 L869.007 691.651 L869.567 691.651 L870.126 691.651 L870.685 691.651 L871.244 691.651 L871.804 691.651 L872.363 691.651 L872.922 691.651 L873.481 691.651 L874.041 691.651 L874.6 691.651 L875.159 691.651 L875.718 691.651 L876.278 691.651 L876.837 691.651 L877.396 691.651 L877.955 691.651 L878.515 691.651 L879.074 691.651 L879.633 691.651 L880.192 691.651 L880.752 691.651 L881.311 691.651 L881.87 691.651 L882.429 691.651 L882.989 691.651 L883.548 691.651 L884.107 691.651 L884.666 691.651 L885.226 691.651 L885.785 691.651 L886.344 691.651 L886.903 691.651 L887.463 691.651 L888.022 691.651 L888.581 691.651 L889.14 691.651 L889.7 691.651 L890.259 691.651 L890.818 691.651 L891.377 691.651 L891.937 691.651 L892.496 691.651 L893.055 691.651 L893.614 691.651 L894.174 691.651 L894.733 691.651 L895.292 691.651 L895.851 691.651 L896.411 691.651 L896.97 691.651 L897.529 691.651 L898.088 691.651 L898.648 691.651 L899.207 691.651 L899.766 691.651 L900.325 691.651 L900.885 691.651 L901.444 691.651 L902.003 691.651 L902.562 691.651 L903.122 691.651 L903.681 691.651 L904.24 691.651 L904.799 691.651 L905.359 691.651 L905.918 691.651 L906.477 691.651 L907.036 691.651 L907.596 691.651 L908.155 691.651 L908.714 691.651 L909.273 691.651 L909.833 691.651 L910.392 691.651 L910.951 691.651 L911.51 691.651 L912.07 691.651 L912.629 691.651 L913.188 691.651 L913.747 691.651 L914.307 691.651 L914.866 691.651 L915.425 691.651 L915.984 691.651 L916.544 691.651 L917.103 691.651 L917.662 691.651 L918.221 691.651 L918.781 691.651 L919.34 691.651 L919.899 691.651 L920.458 691.651 L921.018 691.651 L921.577 691.651 L922.136 691.651 L922.695 691.651 L923.255 691.651 L923.814 691.651 L924.373 691.651 L924.932 691.651 L925.492 691.651 L926.051 691.651 L926.61 691.651 L927.169 691.651 L927.729 691.651 L928.288 691.651 L928.847 691.651 L929.406 691.651 L929.966 691.651 L930.525 691.651 L931.084 691.651 L931.644 691.651 L932.203 691.651 L932.762 691.651 L933.321 691.651 L933.881 691.651 L934.44 691.651 L934.999 691.651 L935.558 691.651 L936.118 691.651 L936.677 691.651 L937.236 691.651 L937.795 691.651 L938.355 691.651 L938.914 691.651 L939.473 691.651 L940.032 691.651 L940.592 691.651 L941.151 691.651 L941.71 691.651 L942.269 691.651 L942.829 691.651 L943.388 691.651 L943.947 691.651 L944.506 691.651 L945.066 691.651 L945.625 691.651 L946.184 691.651 L946.743 691.651 L947.303 691.651 L947.862 691.651 L948.421 691.651 L948.98 691.651 L949.54 691.651 L950.099 691.651 L950.658 691.651 L951.217 691.651 L951.777 691.651 L952.336 691.651 L952.895 691.651 L953.454 691.651 L954.014 691.651 L954.573 691.651 L955.132 691.651 L955.691 691.651 L956.251 691.651 L956.81 691.651 L957.369 691.651 L957.928 691.651 L958.488 691.651 L959.047 691.651 L959.606 691.651 L960.165 691.651 L960.725 691.651 L961.284 691.651 L961.843 691.651 L962.402 691.651 L962.962 691.651 L963.521 691.651 L964.08 691.651 L964.639 691.651 L965.199 691.651 L965.758 691.651 L966.317 691.651 L966.876 691.651 L967.436 691.651 L967.995 691.651 L968.554 691.651 L969.113 691.651 L969.673 691.651 L970.232 691.651 L970.791 691.651 L971.35 691.651 L971.91 691.651 L972.469 691.651 L973.028 691.651 L973.587 691.651 L974.147 691.651 L974.706 691.651 L975.265 691.651 L975.824 691.651 L976.384 691.651 L976.943 691.651 L977.502 691.651 L978.061 691.651 L978.621 691.651 L979.18 691.651 L979.739 691.651 L980.298 691.651 L980.858 691.651 L981.417 691.651 L981.976 691.651 L982.535 691.651 L983.095 691.651 L983.654 691.651 L984.213 691.651 L984.772 691.651 L985.332 691.651 L985.891 691.651 L986.45 691.651 L987.009 691.651 L987.569 691.651 L988.128 691.651 L988.687 691.651 L989.246 691.651 L989.806 691.651 L990.365 691.651 L990.924 691.651 L991.483 691.651 L992.043 691.651 L992.602 691.651 L993.161 691.651 L993.72 691.651 L994.28 691.651 L994.839 691.651 L995.398 691.651 L995.957 691.651 L996.517 691.651 L997.076 691.651 L997.635 691.651 L998.194 691.651 L998.754 691.651 L999.313 691.651 L999.872 691.651 L1000.43 691.651 L1000.99 691.651 L1001.55 691.651 L1002.11 691.651 L1002.67 691.651 L1003.23 691.651 L1003.79 691.651 L1004.35 691.651 L1004.91 691.651 L1005.46 691.651 L1006.02 691.651 L1006.58 691.651 L1007.14 691.651 L1007.7 691.651 L1008.26 691.651 L1008.82 691.651 L1009.38 691.651 L1009.94 691.651 L1010.5 691.651 L1011.06 691.651 L1011.62 691.651 L1012.18 691.651 L1012.73 691.651 L1013.29 691.651 L1013.85 691.651 L1014.41 691.651 L1014.97 691.651 L1015.53 691.651 L1016.09 691.651 L1016.65 691.651 L1017.21 691.651 L1017.77 691.651 L1018.33 691.651 L1018.89 691.651 L1019.45 691.651 L1020.01 691.651 L1020.56 691.651 L1021.12 691.651 L1021.68 691.651 L1022.24 691.651 L1022.8 691.651 L1023.36 691.651 L1023.92 691.651 L1024.48 691.651 L1025.04 691.651 L1025.6 691.651 L1026.16 691.651 L1026.72 691.651 L1027.28 691.651 L1027.83 691.651 L1028.39 691.651 L1028.95 691.651 L1029.51 691.651 L1030.07 691.651 L1030.63 691.651 L1031.19 691.651 L1031.75 691.651 L1032.31 691.651 L1032.87 691.651 L1033.43 691.651 L1033.99 691.651 L1034.55 691.651 L1035.1 691.651 L1035.66 691.651 L1036.22 691.651 L1036.78 691.651 L1037.34 691.651 L1037.9 691.651 L1038.46 691.651 L1039.02 691.651 L1039.58 691.651 L1040.14 691.651 L1040.7 691.651 L1041.26 691.651 L1041.82 691.651 L1042.38 691.651 L1042.93 691.651 L1043.49 691.651 L1044.05 691.651 L1044.61 691.651 L1045.17 691.651 L1045.73 691.651 L1046.29 691.651 L1046.85 691.651 L1047.41 691.651 L1047.97 691.651 L1048.53 691.651 L1049.09 691.651 L1049.65 691.651 L1050.2 691.651 L1050.76 691.651 L1051.32 691.651 L1051.88 691.651 L1052.44 691.651 L1053 691.651 L1053.56 691.651 L1054.12 691.651 L1054.68 691.651 L1055.24 691.651 L1055.8 691.651 L1056.36 691.651 L1056.92 691.651 L1057.48 691.651 L1058.03 691.651 L1058.59 691.651 L1059.15 691.651 L1059.71 691.651 L1060.27 691.651 L1060.83 691.651 L1061.39 691.651 L1061.95 691.651 L1062.51 691.651 L1063.07 691.651 L1063.63 691.651 L1064.19 691.651 L1064.75 691.651 L1065.3 691.651 L1065.86 691.651 L1066.42 691.651 L1066.98 691.651 L1067.54 691.651 L1068.1 691.651 L1068.66 691.651 L1069.22 691.651 L1069.78 691.651 L1070.34 691.651 L1070.9 691.651 L1071.46 691.651 L1072.02 691.651 L1072.57 691.651 L1073.13 691.651 L1073.69 691.651 L1074.25 691.651 L1074.81 691.651 L1075.37 691.651 L1075.93 691.651 L1076.49 691.651 L1077.05 691.651 L1077.61 691.651 L1078.17 691.651 L1078.73 691.651 L1079.29 691.651 L1079.85 691.651 L1080.4 691.651 L1080.96 691.651 L1081.52 691.651 L1082.08 691.651 L1082.64 691.651 L1083.2 691.651 L1083.76 691.651 L1084.32 691.651 L1084.88 691.651 L1085.44 691.651 L1086 691.651 L1086.56 691.651 L1087.12 691.651 L1087.67 691.651 L1088.23 691.651 L1088.79 691.651 L1089.35 691.651 L1089.91 691.651 L1090.47 691.651 L1091.03 691.651 L1091.59 691.651 L1092.15 691.651 L1092.71 691.651 L1093.27 691.651 L1093.83 691.651 L1094.39 691.651 L1094.94 691.651 L1095.5 691.651 L1096.06 691.651 L1096.62 691.651 L1097.18 691.651 L1097.74 691.651 L1098.3 691.651 L1098.86 691.651 L1099.42 691.651 L1099.98 691.651 L1100.54 691.651 L1101.1 691.651 L1101.66 691.651 L1102.22 691.651 L1102.77 691.651 L1103.33 691.651 L1103.89 691.651 L1104.45 691.651 L1105.01 691.651 L1105.57 691.651 L1106.13 691.651 L1106.69 691.651 L1107.25 691.651 L1107.81 691.651 L1108.37 691.651 L1108.93 691.651 L1109.49 691.651 L1110.04 691.651 L1110.6 691.651 L1111.16 691.651 L1111.72 691.651 L1112.28 691.651 L1112.84 691.651 L1113.4 691.651 L1113.96 691.651 L1114.52 691.651 L1115.08 691.651 L1115.64 691.651 L1116.2 691.651 L1116.76 691.651 L1117.31 691.651 L1117.87 691.651 L1118.43 691.651 L1118.99 691.651 L1119.55 691.651 L1120.11 691.651 L1120.67 691.651 L1121.23 691.651 L1121.79 691.651 L1122.35 691.651 L1122.91 691.651 L1123.47 691.651 L1124.03 691.651 L1124.59 691.651 L1125.14 691.651 L1125.7 691.651 L1126.26 691.651 L1126.82 691.651 L1127.38 691.651 L1127.94 691.651 L1128.5 691.651 L1129.06 691.651 L1129.62 691.651 L1130.18 691.651 L1130.74 691.651 L1131.3 691.651 L1131.86 691.651 L1132.41 691.651 L1132.97 691.651 L1133.53 691.651 L1134.09 691.651 L1134.65 691.651 L1135.21 691.651 L1135.77 691.651 L1136.33 691.651 L1136.89 691.651 L1137.45 691.651 L1138.01 691.651 L1138.57 691.651 L1139.13 691.651 L1139.68 691.651 L1140.24 691.651 L1140.8 691.651 L1141.36 691.651 L1141.92 691.651 L1142.48 691.651 L1143.04 691.651 L1143.6 691.651 L1144.16 691.651 L1144.72 691.651 L1145.28 691.651 L1145.84 691.651 L1146.4 691.651 L1146.96 691.651 L1147.51 691.651 L1148.07 691.651 L1148.63 691.651 L1149.19 691.651 L1149.75 691.651 L1150.31 691.651 L1150.87 691.651 L1151.43 691.651 L1151.99 691.651 L1152.55 691.651 L1153.11 691.651 L1153.67 691.651 L1154.23 691.651 L1154.78 691.651 L1155.34 691.651 L1155.9 691.651 L1156.46 691.651 L1157.02 691.651 L1157.58 691.651 L1158.14 691.651 L1158.7 691.651 L1159.26 691.651 L1159.82 691.651 L1160.38 691.651 L1160.94 691.651 L1161.5 691.651 L1162.05 691.651 L1162.61 691.651 L1163.17 691.651 L1163.73 691.651 L1164.29 691.651 L1164.85 691.651 L1165.41 691.651 L1165.97 691.651 L1166.53 691.651 L1167.09 691.651 L1167.65 691.651 L1168.21 691.651 L1168.77 691.651 L1169.33 691.651 L1169.88 691.651 L1170.44 691.651 L1171 691.651 L1171.56 691.651 L1172.12 691.651 L1172.68 691.651 L1173.24 691.651 L1173.8 691.651 L1174.36 691.651 L1174.92 691.651 L1175.48 691.651 L1176.04 691.651 L1176.6 691.651 L1177.15 691.651 L1177.71 691.651 L1178.27 691.651 L1178.83 691.651 L1179.39 691.651 L1179.95 691.651 L1180.51 691.651 L1181.07 691.651 L1181.63 691.651 L1182.19 691.651 L1182.75 691.651 L1183.31 691.651 L1183.87 691.651 L1184.43 691.651 L1184.98 691.651 L1185.54 691.651 L1186.1 691.651 L1186.66 691.651 L1187.22 691.651 L1187.78 691.651 L1188.34 691.651 L1188.9 691.651 L1189.46 691.651 L1190.02 691.651 L1190.58 691.651 L1191.14 691.651 L1191.7 691.651 L1192.25 691.651 L1192.81 691.651 L1193.37 691.651 L1193.93 691.651 L1194.49 691.651 L1195.05 691.651 L1195.61 691.651 L1196.17 691.651 L1196.73 691.651 L1197.29 691.651 L1197.85 691.651 L1198.41 691.651 L1198.97 691.651 L1199.52 691.651 L1200.08 691.651 L1200.64 691.651 L1201.2 691.651 L1201.76 691.651 L1202.32 691.651 L1202.88 691.651 L1203.44 691.651 L1204 691.651 L1204.56 691.651 L1205.12 691.651 L1205.68 691.651 L1206.24 691.651 L1206.8 691.651 L1207.35 691.651 L1207.91 691.651 L1208.47 691.651 L1209.03 691.651 L1209.59 691.651 L1210.15 691.651 L1210.71 691.651 L1211.27 691.651 L1211.83 691.651 L1212.39 691.651 L1212.95 691.651 L1213.51 691.651 L1214.07 691.651 L1214.62 691.651 L1215.18 691.651 L1215.74 691.651 L1216.3 691.651 L1216.86 691.651 L1217.42 691.651 L1217.98 691.651 L1218.54 691.651 L1219.1 691.651 L1219.66 691.651 L1220.22 691.651 L1220.78 691.651 L1221.34 691.651 L1221.89 691.651 L1222.45 691.651 L1223.01 691.651 L1223.57 691.651 L1224.13 691.651 L1224.69 691.651 L1225.25 691.651 L1225.81 691.651 L1226.37 691.651 L1226.93 691.651 L1227.49 691.651 L1228.05 691.651 L1228.61 691.651 L1229.17 691.651 L1229.72 691.651 L1230.28 691.651 L1230.84 691.651 L1231.4 691.651 L1231.96 691.651 L1232.52 691.651 L1233.08 691.651 L1233.64 691.651 L1234.2 691.651 L1234.76 691.651 L1235.32 691.651 L1235.88 691.651 L1236.44 691.651 L1236.99 691.651 L1237.55 691.651 L1238.11 691.651 L1238.67 691.651 L1239.23 691.651 L1239.79 691.651 L1240.35 691.651 L1240.91 691.651 L1241.47 691.651 L1242.03 691.651 L1242.59 691.651 L1243.15 691.651 L1243.71 691.651 L1244.26 691.651 L1244.82 691.651 L1245.38 691.651 L1245.94 691.651 L1246.5 691.651 L1247.06 691.651 L1247.62 691.651 L1248.18 691.651 L1248.74 691.651 L1249.3 691.651 L1249.86 691.651 L1250.42 691.651 L1250.98 691.651 L1251.54 691.651 L1252.09 691.651 L1252.65 691.651 L1253.21 691.651 L1253.77 691.651 L1254.33 691.651 L1254.89 691.651 L1255.45 691.651 L1256.01 691.651 L1256.57 691.651 L1257.13 691.651 L1257.69 691.651 L1258.25 691.651 L1258.81 691.651 L1259.36 691.651 L1259.92 691.651 L1260.48 691.651 L1261.04 691.651 L1261.6 691.651 L1262.16 691.651 L1262.72 691.651 L1263.28 691.651 L1263.84 691.651 L1264.4 691.651 L1264.96 691.651 L1265.52 691.651 L1266.08 691.651 L1266.63 691.651 L1267.19 691.651 L1267.75 691.651 L1268.31 691.651 L1268.87 691.651 L1269.43 691.651 L1269.99 691.651 L1270.55 691.651 L1271.11 691.651 L1271.67 691.651 L1272.23 691.651 L1272.79 691.651 L1273.35 691.651 L1273.91 691.651 L1274.46 691.651 L1275.02 691.651 L1275.58 691.651 L1276.14 691.651 L1276.7 691.651 L1277.26 691.651 L1277.82 691.651 L1278.38 691.651 L1278.94 691.651 L1279.5 691.651 L1280.06 691.651 L1280.62 691.651 L1281.18 691.651 L1281.73 691.651 L1282.29 691.651 L1282.85 691.651 L1283.41 691.651 L1283.97 691.651 L1284.53 691.651 L1285.09 691.651 L1285.65 691.651 L1286.21 691.651 L1286.77 691.651 L1287.33 691.651 L1287.89 691.651 L1288.45 691.651 L1289 691.651 L1289.56 691.651 L1290.12 691.651 L1290.68 691.651 L1291.24 691.651 L1291.8 691.651 L1292.36 691.651 L1292.92 691.651 L1293.48 691.651 L1294.04 691.651 L1294.6 691.651 L1295.16 691.651 L1295.72 691.651 L1296.28 691.651 L1296.83 691.651 L1297.39 691.651 L1297.95 691.651 L1298.51 691.651 L1299.07 691.651 L1299.63 691.651 L1300.19 691.651 L1300.75 691.651 L1301.31 691.651 L1301.87 691.651 L1302.43 691.651 L1302.99 691.651 L1303.55 691.651 L1304.1 691.651 L1304.66 691.651 L1305.22 691.651 L1305.78 691.651 L1306.34 691.651 L1306.9 691.651 L1307.46 691.651 L1308.02 691.651 L1308.58 691.651 L1309.14 691.651 L1309.7 691.651 L1310.26 691.651 L1310.82 691.651 L1311.38 691.651 L1311.93 691.651 L1312.49 691.651 L1313.05 691.651 L1313.61 691.651 L1314.17 691.651 L1314.73 691.651 L1315.29 691.651 L1315.85 691.651 L1316.41 691.651 L1316.97 691.651 L1317.53 691.651 L1318.09 691.651 L1318.65 691.651 L1319.2 691.651 L1319.76 691.651 L1320.32 691.651 L1320.88 691.651 L1321.44 691.651 L1322 691.651 L1322.56 691.651 L1323.12 691.651 L1323.68 691.651 L1324.24 691.651 L1324.8 691.651 L1325.36 691.651 L1325.92 691.651 L1326.47 691.651 L1327.03 691.651 L1327.59 691.651 L1328.15 691.651 L1328.71 691.651 L1329.27 691.651 L1329.83 691.651 L1330.39 691.651 L1330.95 691.651 L1331.51 691.651 L1332.07 691.651 L1332.63 691.651 L1333.19 691.651 L1333.75 691.651 L1334.3 691.651 L1334.86 691.651 L1335.42 691.651 L1335.98 691.651 L1336.54 691.651 L1337.1 691.651 L1337.66 691.651 L1338.22 691.651 L1338.78 691.651 L1339.34 691.651 L1339.9 691.651 L1340.46 691.651 L1341.02 691.651 L1341.57 691.651 L1342.13 691.651 L1342.69 691.651 L1343.25 691.651 L1343.81 691.651 L1344.37 691.651 L1344.93 691.651 L1345.49 691.651 L1346.05 691.651 L1346.61 691.651 L1347.17 691.651 L1347.73 691.651 L1348.29 691.651 L1348.84 691.651 L1349.4 691.651 L1349.96 691.651 L1350.52 691.651 L1351.08 691.651 L1351.64 691.651 L1352.2 691.651 L1352.76 691.651 L1353.32 691.651 L1353.88 691.651 L1354.44 691.651 L1355 691.651 L1355.56 691.651 L1356.12 691.651 L1356.67 691.651 L1357.23 691.651 L1357.79 691.651 L1358.35 691.651 L1358.91 691.651 L1359.47 691.651 L1360.03 691.651 L1360.59 691.651 L1361.15 691.651 L1361.71 691.651 L1362.27 691.651 L1362.83 691.651 L1363.39 691.651 L1363.94 691.651 L1364.5 691.651 L1365.06 691.651 L1365.62 691.651 L1366.18 691.651 L1366.74 691.651 L1367.3 691.651 L1367.86 691.651 L1368.42 691.651 L1368.98 691.651 L1369.54 691.651 L1370.1 691.651 L1370.66 691.651 L1371.21 691.651 L1371.77 691.651 L1372.33 691.651 L1372.89 691.651 L1373.45 691.651 L1374.01 691.651 L1374.57 691.651 L1375.13 691.651 L1375.69 691.651 L1376.25 691.651 L1376.81 691.651 L1377.37 691.651 L1377.93 691.651 L1378.49 691.651 L1379.04 691.651 L1379.6 691.651 L1380.16 691.651 L1380.72 691.651 L1381.28 691.651 L1381.84 691.651 L1382.4 691.651 L1382.96 691.651 L1383.52 691.651 L1384.08 691.651 L1384.64 691.651 L1385.2 691.651 L1385.76 691.651 L1386.31 691.651 L1386.87 691.651 L1387.43 691.651 L1387.99 691.651 L1388.55 691.651 L1389.11 691.651 L1389.67 691.651 L1390.23 691.651 L1390.79 691.651 L1391.35 691.651 L1391.91 691.651 L1392.47 691.651 L1393.03 691.651 L1393.58 691.651 L1394.14 691.651 L1394.7 691.651 L1395.26 691.651 L1395.82 691.651 L1396.38 691.651 L1396.94 691.651 L1397.5 691.651 L1398.06 691.651 L1398.62 691.651 L1399.18 691.651 L1399.74 691.651 L1400.3 691.651 L1400.86 691.651 L1401.41 691.651 L1401.97 691.651 L1402.53 691.651 L1403.09 691.651 L1403.65 691.651 L1404.21 691.651 L1404.77 691.651 L1405.33 691.651 L1405.89 691.651 L1406.45 691.651 L1407.01 691.651 L1407.57 691.651 L1408.13 691.651 L1408.68 691.651 L1409.24 691.651 L1409.8 691.651 L1410.36 691.651 L1410.92 691.651 L1411.48 691.651 L1412.04 691.651 L1412.6 691.651 L1413.16 691.651 L1413.72 691.651 L1414.28 691.651 L1414.84 691.651 L1415.4 691.651 L1415.95 691.651 L1416.51 691.651 L1417.07 691.651 L1417.63 691.651 L1418.19 691.651 L1418.75 691.651 L1419.31 691.651 L1419.87 691.651 L1420.43 691.651 L1420.99 691.651 L1421.55 691.651 L1422.11 691.651 L1422.67 691.651 L1423.23 691.651 L1423.78 691.651 L1424.34 691.651 L1424.9 691.651 L1425.46 691.651 L1426.02 691.651 L1426.58 691.651 L1427.14 691.651 L1427.7 691.651 L1428.26 691.651 L1428.82 691.651 L1429.38 691.651 L1429.94 691.651 L1430.5 691.651 L1431.05 691.651 L1431.61 691.651 L1432.17 691.651 L1432.73 691.651 L1433.29 691.651 L1433.85 691.651 L1434.41 691.651 L1434.97 691.651 L1435.53 691.651 L1436.09 691.651 L1436.65 691.651 L1437.21 691.651 L1437.77 691.651 L1438.33 691.651 L1438.88 691.651 L1439.44 691.651 L1440 691.651 L1440.56 691.651 L1441.12 691.651 L1441.68 691.651 L1442.24 691.651 L1442.8 691.651 L1443.36 691.651 L1443.92 691.651 L1444.48 691.651 L1445.04 691.651 L1445.6 691.651 L1446.15 691.651 L1446.71 691.651 L1447.27 691.651 L1447.83 691.651 L1448.39 691.651 L1448.95 691.651 L1449.51 691.651 L1450.07 691.651 L1450.63 691.651 L1451.19 691.651 L1451.75 691.651 L1452.31 691.651 L1452.87 691.651 L1453.42 691.651 L1453.98 691.651 L1454.54 691.651 L1455.1 691.651 L1455.66 691.651 L1456.22 691.651 L1456.78 691.651 L1457.34 691.651 L1457.9 691.651 L1458.46 691.651 L1459.02 691.651 L1459.58 691.651 L1460.14 691.651 L1460.7 691.651 L1461.25 691.651 L1461.81 691.651 L1462.37 691.651 L1462.93 691.651 L1463.49 691.651 L1464.05 691.651 L1464.61 691.651 L1465.17 691.651 L1465.73 691.651 L1466.29 691.651 L1466.85 691.651 L1467.41 691.651 L1467.97 691.651 L1468.52 691.651 L1469.08 691.651 L1469.64 691.651 L1470.2 691.651 L1470.76 691.651 L1471.32 691.651 L1471.88 691.651 L1472.44 691.651 L1473 691.651 L1473.56 691.651 L1474.12 691.651 L1474.68 691.651 L1475.24 691.651 L1475.79 691.651 L1476.35 691.651 L1476.91 691.651 L1477.47 691.651 L1478.03 691.651 L1478.59 691.651 L1479.15 691.651 L1479.71 691.651 L1480.27 691.651 L1480.83 691.651 L1481.39 691.651 L1481.95 691.651 L1482.51 691.651 L1483.07 691.651 L1483.62 691.651 L1484.18 691.651 L1484.74 691.651 L1485.3 691.651 L1485.86 691.651 L1486.42 691.651 L1486.98 691.651 L1487.54 691.651 L1488.1 691.651 L1488.66 691.651 L1489.22 691.651 L1489.78 691.651 L1490.34 691.651 L1490.89 691.651 L1491.45 691.651 L1492.01 691.651 L1492.57 691.651 L1493.13 691.651 L1493.69 691.651 L1494.25 691.651 L1494.81 691.651 L1495.37 691.651 L1495.93 691.651 L1496.49 691.651 L1497.05 691.651 L1497.61 691.651 L1498.16 691.651 L1498.72 691.651 L1499.28 691.651 L1499.84 691.651 L1500.4 691.651 L1500.96 691.651 L1501.52 691.651 L1502.08 691.651 L1502.64 691.651 L1503.2 691.651 L1503.76 691.651 L1504.32 691.651 L1504.88 691.651 L1505.44 691.651 L1505.99 691.651 L1506.55 691.651 L1507.11 691.651 L1507.67 691.651 L1508.23 691.651 L1508.79 691.651 L1509.35 691.651 L1509.91 691.651 L1510.47 691.651 L1511.03 691.651 L1511.59 691.651 L1512.15 691.651 L1512.71 691.651 L1513.26 691.651 L1513.82 691.651 L1514.38 691.651 L1514.94 691.651 L1515.5 691.651 L1516.06 691.651 L1516.62 691.651 L1517.18 691.651 L1517.74 691.651 L1518.3 691.651 L1518.86 691.651 L1519.42 691.651 L1519.98 691.651 L1520.53 691.651 L1521.09 691.651 L1521.65 691.651 L1522.21 691.651 L1522.77 691.651 L1523.33 691.651 L1523.89 691.651 L1524.45 691.651 L1525.01 691.651 L1525.57 691.651 L1526.13 691.651 L1526.69 691.651 L1527.25 691.651 L1527.81 691.651 L1528.36 691.651 L1528.92 691.651 L1529.48 691.651 L1530.04 691.651 L1530.6 691.651 L1531.16 691.651 L1531.72 691.651 L1532.28 691.651 L1532.84 691.651 L1533.4 691.651 L1533.96 691.651 L1534.52 691.651 L1535.08 691.651 L1535.63 691.651 L1536.19 691.651 L1536.75 691.651 L1537.31 691.651 L1537.87 691.651 L1538.43 691.651 L1538.99 691.651 L1539.55 691.651 L1540.11 691.651 L1540.67 691.651 L1541.23 691.651 L1541.79 691.651 L1542.35 691.651 L1542.9 691.651 L1543.46 691.651 L1544.02 691.651 L1544.58 691.651 L1545.14 691.651 L1545.7 691.651 L1546.26 691.651 L1546.82 691.651 L1547.38 691.651 L1547.94 691.651 L1548.5 691.651 L1549.06 691.651 L1549.62 691.651 L1550.18 691.651 L1550.73 691.651 L1551.29 691.651 L1551.85 691.651 L1552.41 691.651 L1552.97 691.651 L1553.53 691.651 L1554.09 691.651 L1554.65 691.651 L1555.21 691.651 L1555.77 691.651 L1556.33 691.651 L1556.89 691.651 L1557.45 691.651 L1558 691.651 L1558.56 691.651 L1559.12 691.651 L1559.68 691.651 L1560.24 691.651 L1560.8 691.651 L1561.36 691.651 L1561.92 691.651 L1562.48 691.651 L1563.04 691.651 L1563.6 691.651 L1564.16 691.651 L1564.72 691.651 L1565.28 691.651 L1565.83 691.651 L1566.39 691.651 L1566.95 691.651 L1567.51 691.651 L1568.07 691.651 L1568.63 691.651 L1569.19 691.651 L1569.75 691.651 L1570.31 691.651 L1570.87 691.651 L1571.43 691.651 L1571.99 691.651 L1572.55 691.651 L1573.1 691.651 L1573.66 691.651 L1574.22 691.651 L1574.78 691.651 L1575.34 691.651 L1575.9 691.651 L1576.46 691.651 L1577.02 691.651 L1577.58 691.651 L1578.14 691.651 L1578.7 691.651 L1579.26 691.651 L1579.82 691.651 L1580.37 691.651 L1580.93 691.651 L1581.49 691.651 L1582.05 691.651 L1582.61 691.651 L1583.17 691.651 L1583.73 691.651 L1584.29 691.651 L1584.85 691.651 L1585.41 691.651 L1585.97 691.651 L1586.53 691.651 L1587.09 691.651 L1587.65 691.651 L1588.2 691.651 L1588.76 691.651 L1589.32 691.651 L1589.88 691.651 L1590.44 691.651 L1591 691.651 L1591.56 691.651 L1592.12 691.651 L1592.68 691.651 L1593.24 691.651 L1593.8 691.651 L1594.36 691.651 L1594.92 691.651 L1595.47 691.651 L1596.03 691.651 L1596.59 691.651 L1597.15 691.651 L1597.71 691.651 L1598.27 691.651 L1598.83 691.651 L1599.39 691.651 L1599.95 691.651 L1600.51 691.651 L1601.07 691.651 L1601.63 691.651 L1602.19 691.651 L1602.74 691.651 L1603.3 691.651 L1603.86 691.651 L1604.42 691.651 L1604.98 691.651 L1605.54 691.651 L1606.1 691.651 L1606.66 691.651 L1607.22 691.651 L1607.78 691.651 L1608.34 691.651 L1608.9 691.651 L1609.46 691.651 L1610.02 691.651 L1610.57 691.651 L1611.13 691.651 L1611.69 691.651 L1612.25 691.651 L1612.81 691.651 L1613.37 691.651 L1613.93 691.651 L1614.49 691.651 L1615.05 691.651 L1615.61 691.651 L1616.17 691.651 L1616.73 691.651 L1617.29 691.651 L1617.84 691.651 L1618.4 691.651 L1618.96 691.651 L1619.52 691.651 L1620.08 691.651 L1620.64 691.651 L1621.2 691.651 L1621.76 691.651 L1622.32 691.651 L1622.88 691.651 L1623.44 691.651 L1624 691.651 L1624.56 691.651 L1625.11 691.651 L1625.67 691.651 L1626.23 691.651 L1626.79 691.651 L1627.35 691.651 L1627.91 691.651 L1628.47 691.651 L1629.03 691.651 L1629.59 691.651 L1630.15 691.651 L1630.71 691.651 L1631.27 691.651 L1631.83 691.651 L1632.39 691.651 L1632.94 691.651 L1633.5 691.651 L1634.06 691.651 L1634.62 691.651 L1635.18 691.651 L1635.74 691.651 L1636.3 691.651 L1636.86 691.651 L1637.42 691.651 L1637.98 691.651 L1638.54 691.651 L1639.1 691.651 L1639.66 691.651 L1640.21 691.651 L1640.77 691.651 L1641.33 691.651 L1641.89 691.651 L1642.45 691.651 L1643.01 691.651 L1643.57 691.651 L1644.13 691.651 L1644.69 691.651 L1645.25 691.651 L1645.81 691.651 L1646.37 691.651 L1646.93 691.651 L1647.48 691.651 L1648.04 691.651 L1648.6 691.651 L1649.16 691.651 L1649.72 691.651 L1650.28 691.651 L1650.84 691.651 L1651.4 691.651 L1651.96 691.651 L1652.52 691.651 L1653.08 691.651 L1653.64 691.651 L1654.2 691.651 L1654.76 691.651 L1655.31 691.651 L1655.87 691.651 L1656.43 691.651 L1656.99 691.651 L1657.55 691.651 L1658.11 691.651 L1658.67 691.651 L1659.23 691.651 L1659.79 691.651 L1660.35 691.651 L1660.91 691.651 L1661.47 691.651 L1662.03 691.651 L1662.58 691.651 L1663.14 691.651 L1663.7 691.651 L1664.26 691.651 L1664.82 691.651 L1665.38 691.651 L1665.94 691.651 L1666.5 691.651 L1667.06 691.651 L1667.62 691.651 L1668.18 691.651 L1668.74 691.651 L1669.3 691.651 L1669.85 691.651 L1670.41 691.651 L1670.97 691.651 L1671.53 691.651 L1672.09 691.651 L1672.65 691.651 L1673.21 691.651 L1673.77 691.651 L1674.33 691.651 L1674.89 691.651 L1675.45 691.651 L1676.01 691.651 L1676.57 691.651 L1677.13 691.651 L1677.68 691.651 L1678.24 691.651 L1678.8 691.651 L1679.36 691.651 L1679.92 691.651 L1680.48 691.651 L1681.04 691.651 L1681.6 691.651 L1682.16 691.651 L1682.72 691.651 L1683.28 691.651 L1683.84 691.651 L1684.4 691.651 L1684.95 691.651 L1685.51 691.651 L1686.07 691.651 L1686.63 691.651 L1687.19 691.651 L1687.75 691.651 L1688.31 691.651 L1688.87 691.651 L1689.43 691.651 L1689.99 691.651 L1690.55 691.651 L1691.11 691.651 L1691.67 691.651 L1692.23 691.651 L1692.78 691.651 L1693.34 691.651 L1693.9 691.651 L1694.46 691.651 L1695.02 691.651 L1695.58 691.651 L1696.14 691.651 L1696.7 691.651 L1697.26 691.651 L1697.82 691.651 L1698.38 691.651 L1698.94 691.651 L1699.5 691.651 L1700.05 691.651 L1700.61 691.651 L1701.17 691.651 L1701.73 691.651 L1702.29 691.651 L1702.85 691.651 L1703.41 691.651 L1703.97 691.651 L1704.53 691.651 L1705.09 691.651 L1705.65 691.651 L1706.21 691.651 L1706.77 691.651 L1707.32 691.651 L1707.88 691.651 L1708.44 691.651 L1709 691.651 L1709.56 691.651 L1710.12 691.651 L1710.68 691.651 L1711.24 691.651 L1711.8 691.651 L1712.36 691.651 L1712.92 691.651 L1713.48 691.651 L1714.04 691.651 L1714.6 691.651 L1715.15 691.651 L1715.71 691.651 L1716.27 691.651 L1716.83 691.651 L1717.39 691.651 L1717.95 691.651 L1718.51 691.651 L1719.07 691.651 L1719.63 691.651 L1720.19 691.651 L1720.75 691.651 L1721.31 691.651 L1721.87 691.651 L1722.42 691.651 L1722.98 691.651 L1723.54 691.651 L1724.1 691.651 L1724.66 691.651 L1725.22 691.651 L1725.78 691.651 L1726.34 691.651 L1726.9 691.651 L1727.46 691.651 L1728.02 691.651 L1728.58 691.651 L1729.14 691.651 L1729.69 691.651 L1730.25 691.651 L1730.81 691.651 L1731.37 691.651 L1731.93 691.651 L1732.49 691.651 L1733.05 691.651 L1733.61 691.651 L1734.17 691.651 L1734.73 691.651 L1735.29 691.651 L1735.85 691.651 L1736.41 691.651 L1736.97 691.651 L1737.52 691.651 L1738.08 691.651 L1738.64 691.651 L1739.2 691.651 L1739.76 691.651 L1740.32 691.651 L1740.88 691.651 L1741.44 691.651 L1742 691.651 L1742.56 691.651 L1743.12 691.651 L1743.68 691.651 L1744.24 691.651 L1744.79 691.651 L1745.35 691.651 L1745.91 691.651 L1746.47 691.651 L1747.03 691.651 L1747.59 691.651 L1748.15 691.651 L1748.71 691.651 L1749.27 691.651 L1749.83 691.651 L1750.39 691.651 L1750.95 691.651 L1751.51 691.651 L1752.06 691.651 L1752.62 691.651 L1753.18 691.651 L1753.74 691.651 L1754.3 691.651 L1754.86 691.651 L1755.42 691.651 L1755.98 691.651 L1756.54 691.651 L1757.1 691.651 L1757.66 691.651 L1758.22 691.651 L1758.78 691.651 L1759.34 691.651 L1759.89 691.651 L1760.45 691.651 L1761.01 691.651 L1761.57 691.651 L1762.13 691.651 L1762.69 691.651 L1763.25 691.651 L1763.81 691.651 L1764.37 691.651 L1764.93 691.651 L1765.49 691.651 L1766.05 691.651 L1766.61 691.651 L1767.16 691.651 L1767.72 691.651 L1768.28 691.651 L1768.84 691.651 L1769.4 691.651 L1769.96 691.651 L1770.52 691.651 L1771.08 691.651 L1771.64 691.651 L1772.2 691.651 L1772.76 691.651 L1773.32 691.651 L1773.88 691.651 L1774.43 691.651 L1774.99 691.651 L1775.55 691.651 L1776.11 691.651 L1776.67 691.651 L1777.23 691.651 L1777.79 691.651 L1778.35 691.651 L1778.91 691.651 L1779.47 691.651 L1780.03 691.651 L1780.59 691.651 L1781.15 691.651 L1781.71 691.651 L1782.26 691.651 L1782.82 691.651 L1783.38 691.651 L1783.94 691.651 L1784.5 691.651 L1785.06 691.651 L1785.62 691.651 L1786.18 691.651 L1786.74 691.651 L1787.3 691.651 L1787.86 691.651 L1788.42 691.651 L1788.98 691.651 L1789.53 691.651 L1790.09 691.651 L1790.65 691.651 L1791.21 691.651 L1791.77 691.651 L1792.33 691.651 L1792.89 691.651 L1793.45 691.651 L1794.01 691.651 L1794.57 691.651 L1795.13 691.651 L1795.69 691.651 L1796.25 691.651 L1796.8 691.651 L1797.36 691.651 L1797.92 691.651 L1798.48 691.651 L1799.04 691.651 L1799.6 691.651 L1800.16 691.651 L1800.72 691.651 L1801.28 691.651 L1801.84 691.651 L1802.4 691.651 L1802.96 691.651 L1803.52 691.651 L1804.08 691.651 L1804.63 691.651 L1805.19 691.651 L1805.75 691.651 L1806.31 691.651 L1806.87 691.651 L1807.43 691.651 L1807.99 691.651 L1808.55 691.651 L1809.11 691.651 L1809.67 691.651 L1810.23 691.651 L1810.79 691.651 L1811.35 691.651 L1811.9 691.651 L1812.46 691.651 L1813.02 691.651 L1813.58 691.651 L1814.14 691.651 L1814.7 691.651 L1815.26 691.651 L1815.82 691.651 L1816.38 691.651 L1816.94 691.651 L1817.5 691.651 L1818.06 691.651 L1818.62 691.651 L1819.18 691.651 L1819.73 691.651 L1820.29 691.651 L1820.85 691.651 L1821.41 691.651 L1821.97 691.651 L1822.53 691.651 L1823.09 691.651 L1823.65 691.651 L1824.21 691.651 L1824.77 691.651 L1825.33 691.651 L1825.89 691.651 L1826.45 691.651 L1827 691.651 L1827.56 691.651 L1828.12 691.651 L1828.68 691.651 L1829.24 691.651 L1829.8 691.651 L1830.36 691.651 L1830.92 691.651 L1831.48 691.651 L1832.04 691.651 L1832.6 691.651 L1833.16 691.651 L1833.72 691.651 L1834.27 691.651 L1834.83 691.651 L1835.39 691.651 L1835.95 691.651 L1836.51 691.651 L1837.07 691.651 L1837.63 691.651 L1838.19 691.651 L1838.19 682.148 L1837.63 682.148 L1837.07 682.148 L1836.51 682.148 L1835.95 682.148 L1835.39 682.148 L1834.83 682.148 L1834.27 682.148 L1833.72 682.148 L1833.16 682.148 L1832.6 682.148 L1832.04 682.148 L1831.48 682.148 L1830.92 682.148 L1830.36 682.148 L1829.8 682.148 L1829.24 682.148 L1828.68 682.148 L1828.12 682.148 L1827.56 682.148 L1827 682.148 L1826.45 682.148 L1825.89 682.148 L1825.33 682.148 L1824.77 682.148 L1824.21 682.148 L1823.65 682.148 L1823.09 682.148 L1822.53 682.148 L1821.97 682.148 L1821.41 682.148 L1820.85 682.148 L1820.29 682.148 L1819.73 682.148 L1819.18 682.148 L1818.62 682.148 L1818.06 682.148 L1817.5 682.148 L1816.94 682.148 L1816.38 682.148 L1815.82 682.148 L1815.26 682.148 L1814.7 682.148 L1814.14 682.148 L1813.58 682.148 L1813.02 682.148 L1812.46 682.148 L1811.9 682.148 L1811.35 682.148 L1810.79 682.148 L1810.23 682.148 L1809.67 682.148 L1809.11 682.148 L1808.55 682.148 L1807.99 682.148 L1807.43 682.148 L1806.87 682.148 L1806.31 682.148 L1805.75 682.148 L1805.19 682.148 L1804.63 682.148 L1804.08 682.148 L1803.52 682.148 L1802.96 682.148 L1802.4 682.148 L1801.84 682.148 L1801.28 682.148 L1800.72 682.148 L1800.16 682.148 L1799.6 682.148 L1799.04 682.148 L1798.48 682.148 L1797.92 682.148 L1797.36 682.148 L1796.8 682.148 L1796.25 682.148 L1795.69 682.148 L1795.13 682.148 L1794.57 682.148 L1794.01 682.148 L1793.45 682.148 L1792.89 682.148 L1792.33 682.148 L1791.77 682.148 L1791.21 682.148 L1790.65 682.148 L1790.09 682.148 L1789.53 682.148 L1788.98 682.148 L1788.42 682.148 L1787.86 682.148 L1787.3 682.148 L1786.74 682.148 L1786.18 682.148 L1785.62 682.148 L1785.06 682.148 L1784.5 682.148 L1783.94 682.148 L1783.38 682.148 L1782.82 682.148 L1782.26 682.148 L1781.71 682.148 L1781.15 682.148 L1780.59 682.148 L1780.03 682.148 L1779.47 682.148 L1778.91 682.148 L1778.35 682.148 L1777.79 682.148 L1777.23 682.148 L1776.67 682.148 L1776.11 682.148 L1775.55 682.148 L1774.99 682.148 L1774.43 682.148 L1773.88 682.148 L1773.32 682.148 L1772.76 682.148 L1772.2 682.148 L1771.64 682.148 L1771.08 682.148 L1770.52 682.148 L1769.96 682.148 L1769.4 682.148 L1768.84 682.148 L1768.28 682.148 L1767.72 682.148 L1767.16 682.148 L1766.61 682.148 L1766.05 682.148 L1765.49 682.148 L1764.93 682.148 L1764.37 682.148 L1763.81 682.148 L1763.25 682.148 L1762.69 682.148 L1762.13 682.148 L1761.57 682.148 L1761.01 682.148 L1760.45 682.148 L1759.89 682.148 L1759.34 682.148 L1758.78 682.148 L1758.22 682.148 L1757.66 682.148 L1757.1 682.148 L1756.54 682.148 L1755.98 682.148 L1755.42 682.148 L1754.86 682.148 L1754.3 682.148 L1753.74 682.148 L1753.18 682.148 L1752.62 682.148 L1752.06 682.148 L1751.51 682.148 L1750.95 682.148 L1750.39 682.148 L1749.83 682.148 L1749.27 682.148 L1748.71 682.148 L1748.15 682.148 L1747.59 682.148 L1747.03 682.148 L1746.47 682.148 L1745.91 682.148 L1745.35 682.148 L1744.79 682.148 L1744.24 682.148 L1743.68 682.148 L1743.12 682.148 L1742.56 682.148 L1742 682.148 L1741.44 682.148 L1740.88 682.148 L1740.32 682.148 L1739.76 682.148 L1739.2 682.148 L1738.64 682.148 L1738.08 682.148 L1737.52 682.148 L1736.97 682.148 L1736.41 682.148 L1735.85 682.148 L1735.29 682.148 L1734.73 682.148 L1734.17 682.148 L1733.61 682.148 L1733.05 682.148 L1732.49 682.148 L1731.93 682.148 L1731.37 682.148 L1730.81 682.148 L1730.25 682.148 L1729.69 682.148 L1729.14 682.148 L1728.58 682.148 L1728.02 682.148 L1727.46 682.148 L1726.9 682.148 L1726.34 682.148 L1725.78 682.148 L1725.22 682.148 L1724.66 682.148 L1724.1 682.148 L1723.54 682.148 L1722.98 682.148 L1722.42 682.148 L1721.87 682.148 L1721.31 682.148 L1720.75 682.148 L1720.19 682.148 L1719.63 682.148 L1719.07 682.148 L1718.51 682.148 L1717.95 682.148 L1717.39 682.148 L1716.83 682.148 L1716.27 682.148 L1715.71 682.148 L1715.15 682.148 L1714.6 682.148 L1714.04 682.148 L1713.48 682.148 L1712.92 682.148 L1712.36 682.148 L1711.8 682.148 L1711.24 682.148 L1710.68 682.148 L1710.12 682.148 L1709.56 682.148 L1709 682.148 L1708.44 682.148 L1707.88 682.148 L1707.32 682.148 L1706.77 682.148 L1706.21 682.148 L1705.65 682.148 L1705.09 682.148 L1704.53 682.148 L1703.97 682.148 L1703.41 682.148 L1702.85 682.148 L1702.29 682.148 L1701.73 682.148 L1701.17 682.148 L1700.61 682.148 L1700.05 682.148 L1699.5 682.148 L1698.94 682.148 L1698.38 682.148 L1697.82 682.148 L1697.26 682.148 L1696.7 682.148 L1696.14 682.148 L1695.58 682.148 L1695.02 682.148 L1694.46 682.148 L1693.9 682.148 L1693.34 682.148 L1692.78 682.148 L1692.23 682.148 L1691.67 682.148 L1691.11 682.148 L1690.55 682.148 L1689.99 682.148 L1689.43 682.148 L1688.87 682.148 L1688.31 682.148 L1687.75 682.148 L1687.19 682.148 L1686.63 682.148 L1686.07 682.148 L1685.51 682.148 L1684.95 682.148 L1684.4 682.148 L1683.84 682.148 L1683.28 682.148 L1682.72 682.148 L1682.16 682.148 L1681.6 682.148 L1681.04 682.148 L1680.48 682.148 L1679.92 682.148 L1679.36 682.148 L1678.8 682.148 L1678.24 682.148 L1677.68 682.148 L1677.13 682.148 L1676.57 682.148 L1676.01 682.148 L1675.45 682.148 L1674.89 682.148 L1674.33 682.148 L1673.77 682.148 L1673.21 682.148 L1672.65 682.148 L1672.09 682.148 L1671.53 682.148 L1670.97 682.148 L1670.41 682.148 L1669.85 682.148 L1669.3 682.148 L1668.74 682.148 L1668.18 682.148 L1667.62 682.148 L1667.06 682.148 L1666.5 682.148 L1665.94 682.148 L1665.38 682.148 L1664.82 682.148 L1664.26 682.148 L1663.7 682.148 L1663.14 682.148 L1662.58 682.148 L1662.03 682.148 L1661.47 682.148 L1660.91 682.148 L1660.35 682.148 L1659.79 682.148 L1659.23 682.148 L1658.67 682.148 L1658.11 682.148 L1657.55 682.148 L1656.99 682.148 L1656.43 682.148 L1655.87 682.148 L1655.31 682.148 L1654.76 682.148 L1654.2 682.148 L1653.64 682.148 L1653.08 682.148 L1652.52 682.148 L1651.96 682.148 L1651.4 682.148 L1650.84 682.148 L1650.28 682.148 L1649.72 682.148 L1649.16 682.148 L1648.6 682.148 L1648.04 682.148 L1647.48 682.148 L1646.93 682.148 L1646.37 682.148 L1645.81 682.148 L1645.25 682.148 L1644.69 682.148 L1644.13 682.148 L1643.57 682.148 L1643.01 682.148 L1642.45 682.148 L1641.89 682.148 L1641.33 682.148 L1640.77 682.148 L1640.21 682.148 L1639.66 682.148 L1639.1 682.148 L1638.54 682.148 L1637.98 682.148 L1637.42 682.148 L1636.86 682.148 L1636.3 682.148 L1635.74 682.148 L1635.18 682.148 L1634.62 682.148 L1634.06 682.148 L1633.5 682.148 L1632.94 682.148 L1632.39 682.148 L1631.83 682.148 L1631.27 682.148 L1630.71 682.148 L1630.15 682.148 L1629.59 682.148 L1629.03 682.148 L1628.47 682.148 L1627.91 682.148 L1627.35 682.148 L1626.79 682.148 L1626.23 682.148 L1625.67 682.148 L1625.11 682.148 L1624.56 682.148 L1624 682.148 L1623.44 682.148 L1622.88 682.148 L1622.32 682.148 L1621.76 682.148 L1621.2 682.148 L1620.64 682.148 L1620.08 682.148 L1619.52 682.148 L1618.96 682.148 L1618.4 682.148 L1617.84 682.148 L1617.29 682.148 L1616.73 682.148 L1616.17 682.148 L1615.61 682.148 L1615.05 682.148 L1614.49 682.148 L1613.93 682.148 L1613.37 682.148 L1612.81 682.148 L1612.25 682.148 L1611.69 682.148 L1611.13 682.148 L1610.57 682.148 L1610.02 682.148 L1609.46 682.148 L1608.9 682.148 L1608.34 682.148 L1607.78 682.148 L1607.22 682.148 L1606.66 682.148 L1606.1 682.148 L1605.54 682.148 L1604.98 682.148 L1604.42 682.148 L1603.86 682.148 L1603.3 682.148 L1602.74 682.148 L1602.19 682.148 L1601.63 682.148 L1601.07 682.148 L1600.51 682.148 L1599.95 682.148 L1599.39 682.148 L1598.83 682.148 L1598.27 682.148 L1597.71 682.148 L1597.15 682.148 L1596.59 682.148 L1596.03 682.148 L1595.47 682.148 L1594.92 682.148 L1594.36 682.148 L1593.8 682.148 L1593.24 682.148 L1592.68 682.148 L1592.12 682.148 L1591.56 682.148 L1591 682.148 L1590.44 682.148 L1589.88 682.148 L1589.32 682.148 L1588.76 682.148 L1588.2 682.148 L1587.65 682.148 L1587.09 682.148 L1586.53 682.148 L1585.97 682.148 L1585.41 682.148 L1584.85 682.148 L1584.29 682.148 L1583.73 682.148 L1583.17 682.148 L1582.61 682.148 L1582.05 682.148 L1581.49 682.148 L1580.93 682.148 L1580.37 682.148 L1579.82 682.148 L1579.26 682.148 L1578.7 682.148 L1578.14 682.148 L1577.58 682.148 L1577.02 682.148 L1576.46 682.148 L1575.9 682.148 L1575.34 682.148 L1574.78 682.148 L1574.22 682.148 L1573.66 682.148 L1573.1 682.148 L1572.55 682.148 L1571.99 682.148 L1571.43 682.148 L1570.87 682.148 L1570.31 682.148 L1569.75 682.148 L1569.19 682.148 L1568.63 682.148 L1568.07 682.148 L1567.51 682.148 L1566.95 682.148 L1566.39 682.148 L1565.83 682.148 L1565.28 682.148 L1564.72 682.148 L1564.16 682.148 L1563.6 682.148 L1563.04 682.148 L1562.48 682.148 L1561.92 682.148 L1561.36 682.148 L1560.8 682.148 L1560.24 682.148 L1559.68 682.148 L1559.12 682.148 L1558.56 682.148 L1558 682.148 L1557.45 682.148 L1556.89 682.148 L1556.33 682.148 L1555.77 682.148 L1555.21 682.148 L1554.65 682.148 L1554.09 682.148 L1553.53 682.148 L1552.97 682.148 L1552.41 682.148 L1551.85 682.148 L1551.29 682.148 L1550.73 682.148 L1550.18 682.148 L1549.62 682.148 L1549.06 682.148 L1548.5 682.148 L1547.94 682.148 L1547.38 682.148 L1546.82 682.148 L1546.26 682.148 L1545.7 682.148 L1545.14 682.148 L1544.58 682.148 L1544.02 682.148 L1543.46 682.148 L1542.9 682.148 L1542.35 682.148 L1541.79 682.148 L1541.23 682.148 L1540.67 682.148 L1540.11 682.148 L1539.55 682.148 L1538.99 682.148 L1538.43 682.148 L1537.87 682.148 L1537.31 682.148 L1536.75 682.148 L1536.19 682.148 L1535.63 682.148 L1535.08 682.148 L1534.52 682.148 L1533.96 682.148 L1533.4 682.148 L1532.84 682.148 L1532.28 682.148 L1531.72 682.148 L1531.16 682.148 L1530.6 682.148 L1530.04 682.148 L1529.48 682.148 L1528.92 682.148 L1528.36 682.148 L1527.81 682.148 L1527.25 682.148 L1526.69 682.148 L1526.13 682.148 L1525.57 682.148 L1525.01 682.148 L1524.45 682.148 L1523.89 682.148 L1523.33 682.148 L1522.77 682.148 L1522.21 682.148 L1521.65 682.148 L1521.09 682.148 L1520.53 682.148 L1519.98 682.148 L1519.42 682.148 L1518.86 682.148 L1518.3 682.148 L1517.74 682.148 L1517.18 682.148 L1516.62 682.148 L1516.06 682.148 L1515.5 682.148 L1514.94 682.148 L1514.38 682.148 L1513.82 682.148 L1513.26 682.148 L1512.71 682.148 L1512.15 682.148 L1511.59 682.148 L1511.03 682.148 L1510.47 682.148 L1509.91 682.148 L1509.35 682.148 L1508.79 682.148 L1508.23 682.148 L1507.67 682.148 L1507.11 682.148 L1506.55 682.148 L1505.99 682.148 L1505.44 682.148 L1504.88 682.148 L1504.32 682.148 L1503.76 682.148 L1503.2 682.148 L1502.64 682.148 L1502.08 682.148 L1501.52 682.148 L1500.96 682.148 L1500.4 682.148 L1499.84 682.148 L1499.28 682.148 L1498.72 682.148 L1498.16 682.148 L1497.61 682.148 L1497.05 682.148 L1496.49 682.148 L1495.93 682.148 L1495.37 682.148 L1494.81 682.148 L1494.25 682.148 L1493.69 682.148 L1493.13 682.148 L1492.57 682.148 L1492.01 682.148 L1491.45 682.148 L1490.89 682.148 L1490.34 682.148 L1489.78 682.148 L1489.22 682.148 L1488.66 682.148 L1488.1 682.148 L1487.54 682.148 L1486.98 682.148 L1486.42 682.148 L1485.86 682.148 L1485.3 682.148 L1484.74 682.148 L1484.18 682.148 L1483.62 682.148 L1483.07 682.148 L1482.51 682.148 L1481.95 682.148 L1481.39 682.148 L1480.83 682.148 L1480.27 682.148 L1479.71 682.148 L1479.15 682.148 L1478.59 682.148 L1478.03 682.148 L1477.47 682.148 L1476.91 682.148 L1476.35 682.148 L1475.79 682.148 L1475.24 682.148 L1474.68 682.148 L1474.12 682.148 L1473.56 682.148 L1473 682.148 L1472.44 682.148 L1471.88 682.148 L1471.32 682.148 L1470.76 682.148 L1470.2 682.148 L1469.64 682.148 L1469.08 682.148 L1468.52 682.148 L1467.97 682.148 L1467.41 682.148 L1466.85 682.148 L1466.29 682.148 L1465.73 682.148 L1465.17 682.148 L1464.61 682.148 L1464.05 682.148 L1463.49 682.148 L1462.93 682.148 L1462.37 682.148 L1461.81 682.148 L1461.25 682.148 L1460.7 682.148 L1460.14 682.148 L1459.58 682.148 L1459.02 682.148 L1458.46 682.148 L1457.9 682.148 L1457.34 682.148 L1456.78 682.148 L1456.22 682.148 L1455.66 682.148 L1455.1 682.148 L1454.54 682.148 L1453.98 682.148 L1453.42 682.148 L1452.87 682.148 L1452.31 682.148 L1451.75 682.148 L1451.19 682.148 L1450.63 682.148 L1450.07 682.148 L1449.51 682.148 L1448.95 682.148 L1448.39 682.148 L1447.83 682.148 L1447.27 682.148 L1446.71 682.148 L1446.15 682.148 L1445.6 682.148 L1445.04 682.148 L1444.48 682.148 L1443.92 682.148 L1443.36 682.148 L1442.8 682.148 L1442.24 682.148 L1441.68 682.148 L1441.12 682.148 L1440.56 682.148 L1440 682.148 L1439.44 682.148 L1438.88 682.148 L1438.33 682.148 L1437.77 682.148 L1437.21 682.148 L1436.65 682.148 L1436.09 682.148 L1435.53 682.148 L1434.97 682.148 L1434.41 682.148 L1433.85 682.148 L1433.29 682.148 L1432.73 682.148 L1432.17 682.148 L1431.61 682.148 L1431.05 682.148 L1430.5 682.148 L1429.94 682.148 L1429.38 682.148 L1428.82 682.148 L1428.26 682.148 L1427.7 682.148 L1427.14 682.148 L1426.58 682.148 L1426.02 682.148 L1425.46 682.148 L1424.9 682.148 L1424.34 682.148 L1423.78 682.148 L1423.23 682.148 L1422.67 682.148 L1422.11 682.148 L1421.55 682.148 L1420.99 682.148 L1420.43 682.148 L1419.87 682.148 L1419.31 682.148 L1418.75 682.148 L1418.19 682.148 L1417.63 682.148 L1417.07 682.148 L1416.51 682.148 L1415.95 682.148 L1415.4 682.148 L1414.84 682.148 L1414.28 682.148 L1413.72 682.148 L1413.16 682.148 L1412.6 682.148 L1412.04 682.148 L1411.48 682.148 L1410.92 682.148 L1410.36 682.148 L1409.8 682.148 L1409.24 682.148 L1408.68 682.148 L1408.13 682.148 L1407.57 682.148 L1407.01 682.148 L1406.45 682.148 L1405.89 682.148 L1405.33 682.148 L1404.77 682.148 L1404.21 682.148 L1403.65 682.148 L1403.09 682.148 L1402.53 682.148 L1401.97 682.148 L1401.41 682.148 L1400.86 682.148 L1400.3 682.148 L1399.74 682.148 L1399.18 682.148 L1398.62 682.148 L1398.06 682.148 L1397.5 682.148 L1396.94 682.148 L1396.38 682.148 L1395.82 682.148 L1395.26 682.148 L1394.7 682.148 L1394.14 682.148 L1393.58 682.148 L1393.03 682.148 L1392.47 682.148 L1391.91 682.148 L1391.35 682.148 L1390.79 682.148 L1390.23 682.148 L1389.67 682.148 L1389.11 682.148 L1388.55 682.148 L1387.99 682.148 L1387.43 682.148 L1386.87 682.148 L1386.31 682.148 L1385.76 682.148 L1385.2 682.148 L1384.64 682.148 L1384.08 682.148 L1383.52 682.148 L1382.96 682.148 L1382.4 682.148 L1381.84 682.148 L1381.28 682.148 L1380.72 682.148 L1380.16 682.148 L1379.6 682.148 L1379.04 682.148 L1378.49 682.148 L1377.93 682.148 L1377.37 682.148 L1376.81 682.148 L1376.25 682.148 L1375.69 682.148 L1375.13 682.148 L1374.57 682.148 L1374.01 682.148 L1373.45 682.148 L1372.89 682.148 L1372.33 682.148 L1371.77 682.148 L1371.21 682.148 L1370.66 682.148 L1370.1 682.148 L1369.54 682.148 L1368.98 682.148 L1368.42 682.148 L1367.86 682.148 L1367.3 682.148 L1366.74 682.148 L1366.18 682.148 L1365.62 682.148 L1365.06 682.148 L1364.5 682.148 L1363.94 682.148 L1363.39 682.148 L1362.83 682.148 L1362.27 682.148 L1361.71 682.148 L1361.15 682.148 L1360.59 682.148 L1360.03 682.148 L1359.47 682.148 L1358.91 682.148 L1358.35 682.148 L1357.79 682.148 L1357.23 682.148 L1356.67 682.148 L1356.12 682.148 L1355.56 682.148 L1355 682.148 L1354.44 682.148 L1353.88 682.148 L1353.32 682.148 L1352.76 682.148 L1352.2 682.148 L1351.64 682.148 L1351.08 682.148 L1350.52 682.148 L1349.96 682.148 L1349.4 682.148 L1348.84 682.148 L1348.29 682.148 L1347.73 682.148 L1347.17 682.148 L1346.61 682.148 L1346.05 682.148 L1345.49 682.148 L1344.93 682.148 L1344.37 682.148 L1343.81 682.148 L1343.25 682.148 L1342.69 682.148 L1342.13 682.148 L1341.57 682.148 L1341.02 682.148 L1340.46 682.148 L1339.9 682.148 L1339.34 682.148 L1338.78 682.148 L1338.22 682.148 L1337.66 682.148 L1337.1 682.148 L1336.54 682.148 L1335.98 682.148 L1335.42 682.148 L1334.86 682.148 L1334.3 682.148 L1333.75 682.148 L1333.19 682.148 L1332.63 682.148 L1332.07 682.148 L1331.51 682.148 L1330.95 682.148 L1330.39 682.148 L1329.83 682.148 L1329.27 682.148 L1328.71 682.148 L1328.15 682.148 L1327.59 682.148 L1327.03 682.148 L1326.47 682.148 L1325.92 682.148 L1325.36 682.148 L1324.8 682.148 L1324.24 682.148 L1323.68 682.148 L1323.12 682.148 L1322.56 682.148 L1322 682.148 L1321.44 682.148 L1320.88 682.148 L1320.32 682.148 L1319.76 682.148 L1319.2 682.148 L1318.65 682.148 L1318.09 682.148 L1317.53 682.148 L1316.97 682.148 L1316.41 682.148 L1315.85 682.148 L1315.29 682.148 L1314.73 682.148 L1314.17 682.148 L1313.61 682.148 L1313.05 682.148 L1312.49 682.148 L1311.93 682.148 L1311.38 682.148 L1310.82 682.148 L1310.26 682.148 L1309.7 682.148 L1309.14 682.148 L1308.58 682.148 L1308.02 682.148 L1307.46 682.148 L1306.9 682.148 L1306.34 682.148 L1305.78 682.148 L1305.22 682.148 L1304.66 682.148 L1304.1 682.148 L1303.55 682.148 L1302.99 682.148 L1302.43 682.148 L1301.87 682.148 L1301.31 682.148 L1300.75 682.148 L1300.19 682.148 L1299.63 682.148 L1299.07 682.148 L1298.51 682.148 L1297.95 682.148 L1297.39 682.148 L1296.83 682.148 L1296.28 682.148 L1295.72 682.148 L1295.16 682.148 L1294.6 682.148 L1294.04 682.148 L1293.48 682.148 L1292.92 682.148 L1292.36 682.148 L1291.8 682.148 L1291.24 682.148 L1290.68 682.148 L1290.12 682.148 L1289.56 682.148 L1289 682.148 L1288.45 682.148 L1287.89 682.148 L1287.33 682.148 L1286.77 682.148 L1286.21 682.148 L1285.65 682.148 L1285.09 682.148 L1284.53 682.148 L1283.97 682.148 L1283.41 682.148 L1282.85 682.148 L1282.29 682.148 L1281.73 682.148 L1281.18 682.148 L1280.62 682.148 L1280.06 682.148 L1279.5 682.148 L1278.94 682.148 L1278.38 682.148 L1277.82 682.148 L1277.26 682.148 L1276.7 682.148 L1276.14 682.148 L1275.58 682.148 L1275.02 682.148 L1274.46 682.148 L1273.91 682.148 L1273.35 682.148 L1272.79 682.148 L1272.23 682.148 L1271.67 682.148 L1271.11 682.148 L1270.55 682.148 L1269.99 682.148 L1269.43 682.148 L1268.87 682.148 L1268.31 682.148 L1267.75 682.148 L1267.19 682.148 L1266.63 682.148 L1266.08 682.148 L1265.52 682.148 L1264.96 682.148 L1264.4 682.148 L1263.84 682.148 L1263.28 682.148 L1262.72 682.148 L1262.16 682.148 L1261.6 682.148 L1261.04 682.148 L1260.48 682.148 L1259.92 682.148 L1259.36 682.148 L1258.81 682.148 L1258.25 682.148 L1257.69 682.148 L1257.13 682.148 L1256.57 682.148 L1256.01 682.148 L1255.45 682.148 L1254.89 682.148 L1254.33 682.148 L1253.77 682.148 L1253.21 682.148 L1252.65 682.148 L1252.09 682.148 L1251.54 682.148 L1250.98 682.148 L1250.42 682.148 L1249.86 682.148 L1249.3 682.148 L1248.74 682.148 L1248.18 682.148 L1247.62 682.148 L1247.06 682.148 L1246.5 682.148 L1245.94 682.148 L1245.38 682.148 L1244.82 682.148 L1244.26 682.148 L1243.71 682.148 L1243.15 682.148 L1242.59 682.148 L1242.03 682.148 L1241.47 682.148 L1240.91 682.148 L1240.35 682.148 L1239.79 682.148 L1239.23 682.148 L1238.67 682.148 L1238.11 682.148 L1237.55 682.148 L1236.99 682.148 L1236.44 682.148 L1235.88 682.148 L1235.32 682.148 L1234.76 682.148 L1234.2 682.148 L1233.64 682.148 L1233.08 682.148 L1232.52 682.148 L1231.96 682.148 L1231.4 682.148 L1230.84 682.148 L1230.28 682.148 L1229.72 682.148 L1229.17 682.148 L1228.61 682.148 L1228.05 682.148 L1227.49 682.148 L1226.93 682.148 L1226.37 682.148 L1225.81 682.148 L1225.25 682.148 L1224.69 682.148 L1224.13 682.148 L1223.57 682.148 L1223.01 682.148 L1222.45 682.148 L1221.89 682.148 L1221.34 682.148 L1220.78 682.148 L1220.22 682.148 L1219.66 682.148 L1219.1 682.148 L1218.54 682.148 L1217.98 682.148 L1217.42 682.148 L1216.86 682.148 L1216.3 682.148 L1215.74 682.148 L1215.18 682.148 L1214.62 682.148 L1214.07 682.148 L1213.51 682.148 L1212.95 682.148 L1212.39 682.148 L1211.83 682.148 L1211.27 682.148 L1210.71 682.148 L1210.15 682.148 L1209.59 682.148 L1209.03 682.148 L1208.47 682.148 L1207.91 682.148 L1207.35 682.148 L1206.8 682.148 L1206.24 682.148 L1205.68 682.148 L1205.12 682.148 L1204.56 682.148 L1204 682.148 L1203.44 682.148 L1202.88 682.148 L1202.32 682.148 L1201.76 682.148 L1201.2 682.148 L1200.64 682.148 L1200.08 682.148 L1199.52 682.148 L1198.97 682.148 L1198.41 682.148 L1197.85 682.148 L1197.29 682.148 L1196.73 682.148 L1196.17 682.148 L1195.61 682.148 L1195.05 682.148 L1194.49 682.148 L1193.93 682.148 L1193.37 682.148 L1192.81 682.148 L1192.25 682.148 L1191.7 682.148 L1191.14 682.148 L1190.58 682.148 L1190.02 682.148 L1189.46 682.148 L1188.9 682.148 L1188.34 682.148 L1187.78 682.148 L1187.22 682.148 L1186.66 682.148 L1186.1 682.148 L1185.54 682.148 L1184.98 682.148 L1184.43 682.148 L1183.87 682.148 L1183.31 682.148 L1182.75 682.148 L1182.19 682.148 L1181.63 682.148 L1181.07 682.148 L1180.51 682.148 L1179.95 682.148 L1179.39 682.148 L1178.83 682.148 L1178.27 682.148 L1177.71 682.148 L1177.15 682.148 L1176.6 682.148 L1176.04 682.148 L1175.48 682.148 L1174.92 682.148 L1174.36 682.148 L1173.8 682.148 L1173.24 682.148 L1172.68 682.148 L1172.12 682.148 L1171.56 682.148 L1171 682.148 L1170.44 682.148 L1169.88 682.148 L1169.33 682.148 L1168.77 682.148 L1168.21 682.148 L1167.65 682.148 L1167.09 682.148 L1166.53 682.148 L1165.97 682.148 L1165.41 682.148 L1164.85 682.148 L1164.29 682.148 L1163.73 682.148 L1163.17 682.148 L1162.61 682.148 L1162.05 682.148 L1161.5 682.148 L1160.94 682.148 L1160.38 682.148 L1159.82 682.148 L1159.26 682.148 L1158.7 682.148 L1158.14 682.148 L1157.58 682.148 L1157.02 682.148 L1156.46 682.148 L1155.9 682.148 L1155.34 682.148 L1154.78 682.148 L1154.23 682.148 L1153.67 682.148 L1153.11 682.148 L1152.55 682.148 L1151.99 682.148 L1151.43 682.148 L1150.87 682.148 L1150.31 682.148 L1149.75 682.148 L1149.19 682.148 L1148.63 682.148 L1148.07 682.148 L1147.51 682.148 L1146.96 682.148 L1146.4 682.148 L1145.84 682.148 L1145.28 682.148 L1144.72 682.148 L1144.16 682.148 L1143.6 682.148 L1143.04 682.148 L1142.48 682.148 L1141.92 682.148 L1141.36 682.148 L1140.8 682.148 L1140.24 682.148 L1139.68 682.148 L1139.13 682.148 L1138.57 682.148 L1138.01 682.148 L1137.45 682.148 L1136.89 682.148 L1136.33 682.148 L1135.77 682.148 L1135.21 682.148 L1134.65 682.148 L1134.09 682.148 L1133.53 682.148 L1132.97 682.148 L1132.41 682.148 L1131.86 682.148 L1131.3 682.148 L1130.74 682.148 L1130.18 682.148 L1129.62 682.148 L1129.06 682.148 L1128.5 682.148 L1127.94 682.148 L1127.38 682.148 L1126.82 682.148 L1126.26 682.148 L1125.7 682.148 L1125.14 682.148 L1124.59 682.148 L1124.03 682.148 L1123.47 682.148 L1122.91 682.148 L1122.35 682.148 L1121.79 682.148 L1121.23 682.148 L1120.67 682.148 L1120.11 682.148 L1119.55 682.148 L1118.99 682.148 L1118.43 682.148 L1117.87 682.148 L1117.31 682.148 L1116.76 682.148 L1116.2 682.148 L1115.64 682.148 L1115.08 682.148 L1114.52 682.148 L1113.96 682.148 L1113.4 682.148 L1112.84 682.148 L1112.28 682.148 L1111.72 682.148 L1111.16 682.148 L1110.6 682.148 L1110.04 682.148 L1109.49 682.148 L1108.93 682.148 L1108.37 682.148 L1107.81 682.148 L1107.25 682.148 L1106.69 682.148 L1106.13 682.148 L1105.57 682.148 L1105.01 682.148 L1104.45 682.148 L1103.89 682.148 L1103.33 682.148 L1102.77 682.148 L1102.22 682.148 L1101.66 682.148 L1101.1 682.148 L1100.54 682.148 L1099.98 682.148 L1099.42 682.148 L1098.86 682.148 L1098.3 682.148 L1097.74 682.148 L1097.18 682.148 L1096.62 682.148 L1096.06 682.148 L1095.5 682.148 L1094.94 682.148 L1094.39 682.148 L1093.83 682.148 L1093.27 682.148 L1092.71 682.148 L1092.15 682.148 L1091.59 682.148 L1091.03 682.148 L1090.47 682.148 L1089.91 682.148 L1089.35 682.148 L1088.79 682.148 L1088.23 682.148 L1087.67 682.148 L1087.12 682.148 L1086.56 682.148 L1086 682.148 L1085.44 682.148 L1084.88 682.148 L1084.32 682.148 L1083.76 682.148 L1083.2 682.148 L1082.64 682.148 L1082.08 682.148 L1081.52 682.148 L1080.96 682.148 L1080.4 682.148 L1079.85 682.148 L1079.29 682.148 L1078.73 682.148 L1078.17 682.148 L1077.61 682.148 L1077.05 682.148 L1076.49 682.148 L1075.93 682.148 L1075.37 682.148 L1074.81 682.148 L1074.25 682.148 L1073.69 682.148 L1073.13 682.148 L1072.57 682.148 L1072.02 682.148 L1071.46 682.148 L1070.9 682.148 L1070.34 682.148 L1069.78 682.148 L1069.22 682.148 L1068.66 682.148 L1068.1 682.148 L1067.54 682.148 L1066.98 682.148 L1066.42 682.148 L1065.86 682.148 L1065.3 682.148 L1064.75 682.148 L1064.19 682.148 L1063.63 682.148 L1063.07 682.148 L1062.51 682.148 L1061.95 682.148 L1061.39 682.148 L1060.83 682.148 L1060.27 682.148 L1059.71 682.148 L1059.15 682.148 L1058.59 682.148 L1058.03 682.148 L1057.48 682.148 L1056.92 682.148 L1056.36 682.148 L1055.8 682.148 L1055.24 682.148 L1054.68 682.148 L1054.12 682.148 L1053.56 682.148 L1053 682.148 L1052.44 682.148 L1051.88 682.148 L1051.32 682.148 L1050.76 682.148 L1050.2 682.148 L1049.65 682.148 L1049.09 682.148 L1048.53 682.148 L1047.97 682.148 L1047.41 682.148 L1046.85 682.148 L1046.29 682.148 L1045.73 682.148 L1045.17 682.148 L1044.61 682.148 L1044.05 682.148 L1043.49 682.148 L1042.93 682.148 L1042.38 682.148 L1041.82 682.148 L1041.26 682.148 L1040.7 682.148 L1040.14 682.148 L1039.58 682.148 L1039.02 682.148 L1038.46 682.148 L1037.9 682.148 L1037.34 682.148 L1036.78 682.148 L1036.22 682.148 L1035.66 682.148 L1035.1 682.148 L1034.55 682.148 L1033.99 682.148 L1033.43 682.148 L1032.87 682.148 L1032.31 682.148 L1031.75 682.148 L1031.19 682.148 L1030.63 682.148 L1030.07 682.148 L1029.51 682.148 L1028.95 682.148 L1028.39 682.148 L1027.83 682.148 L1027.28 682.148 L1026.72 682.148 L1026.16 682.148 L1025.6 682.148 L1025.04 682.148 L1024.48 682.148 L1023.92 682.148 L1023.36 682.148 L1022.8 682.148 L1022.24 682.148 L1021.68 682.148 L1021.12 682.148 L1020.56 682.148 L1020.01 682.148 L1019.45 682.148 L1018.89 682.148 L1018.33 682.148 L1017.77 682.148 L1017.21 682.148 L1016.65 682.148 L1016.09 682.148 L1015.53 682.148 L1014.97 682.148 L1014.41 682.148 L1013.85 682.148 L1013.29 682.148 L1012.73 682.148 L1012.18 682.148 L1011.62 682.148 L1011.06 682.148 L1010.5 682.148 L1009.94 682.148 L1009.38 682.148 L1008.82 682.148 L1008.26 682.148 L1007.7 682.148 L1007.14 682.148 L1006.58 682.148 L1006.02 682.148 L1005.46 682.148 L1004.91 682.148 L1004.35 682.148 L1003.79 682.148 L1003.23 682.148 L1002.67 682.148 L1002.11 682.148 L1001.55 682.148 L1000.99 682.148 L1000.43 682.148 L999.872 682.148 L999.313 682.148 L998.754 682.148 L998.194 682.148 L997.635 682.148 L997.076 682.148 L996.517 682.148 L995.957 682.148 L995.398 682.148 L994.839 682.148 L994.28 682.148 L993.72 682.148 L993.161 682.148 L992.602 682.148 L992.043 682.148 L991.483 682.148 L990.924 682.148 L990.365 682.148 L989.806 682.148 L989.246 682.148 L988.687 682.148 L988.128 682.148 L987.569 682.148 L987.009 682.148 L986.45 682.148 L985.891 682.148 L985.332 682.148 L984.772 682.148 L984.213 682.148 L983.654 682.148 L983.095 682.148 L982.535 682.148 L981.976 682.148 L981.417 682.148 L980.858 682.148 L980.298 682.148 L979.739 682.148 L979.18 682.148 L978.621 682.148 L978.061 682.148 L977.502 682.148 L976.943 682.148 L976.384 682.148 L975.824 682.148 L975.265 682.148 L974.706 682.148 L974.147 682.148 L973.587 682.148 L973.028 682.148 L972.469 682.148 L971.91 682.148 L971.35 682.148 L970.791 682.148 L970.232 682.148 L969.673 682.148 L969.113 682.148 L968.554 682.148 L967.995 682.148 L967.436 682.148 L966.876 682.148 L966.317 682.148 L965.758 682.148 L965.199 682.148 L964.639 682.148 L964.08 682.148 L963.521 682.148 L962.962 682.148 L962.402 682.148 L961.843 682.148 L961.284 682.148 L960.725 682.148 L960.165 682.148 L959.606 682.148 L959.047 682.148 L958.488 682.148 L957.928 682.148 L957.369 682.148 L956.81 682.148 L956.251 682.148 L955.691 682.148 L955.132 682.148 L954.573 682.148 L954.014 682.148 L953.454 682.148 L952.895 682.148 L952.336 682.148 L951.777 682.148 L951.217 682.148 L950.658 682.148 L950.099 682.148 L949.54 682.148 L948.98 682.148 L948.421 682.148 L947.862 682.148 L947.303 682.148 L946.743 682.148 L946.184 682.148 L945.625 682.148 L945.066 682.148 L944.506 682.148 L943.947 682.148 L943.388 682.148 L942.829 682.148 L942.269 682.148 L941.71 682.148 L941.151 682.148 L940.592 682.148 L940.032 682.148 L939.473 682.148 L938.914 682.148 L938.355 682.148 L937.795 682.148 L937.236 682.148 L936.677 682.148 L936.118 682.148 L935.558 682.148 L934.999 682.148 L934.44 682.148 L933.881 682.148 L933.321 682.148 L932.762 682.148 L932.203 682.148 L931.644 682.148 L931.084 682.148 L930.525 682.148 L929.966 682.148 L929.406 682.148 L928.847 682.148 L928.288 682.148 L927.729 682.148 L927.169 682.148 L926.61 682.148 L926.051 682.148 L925.492 682.148 L924.932 682.148 L924.373 682.148 L923.814 682.148 L923.255 682.148 L922.695 682.148 L922.136 682.148 L921.577 682.148 L921.018 682.148 L920.458 682.148 L919.899 682.148 L919.34 682.148 L918.781 682.148 L918.221 682.148 L917.662 682.148 L917.103 682.148 L916.544 682.148 L915.984 682.148 L915.425 682.148 L914.866 682.148 L914.307 682.148 L913.747 682.148 L913.188 682.148 L912.629 682.148 L912.07 682.148 L911.51 682.148 L910.951 682.148 L910.392 682.148 L909.833 682.148 L909.273 682.148 L908.714 682.148 L908.155 682.148 L907.596 682.148 L907.036 682.148 L906.477 682.148 L905.918 682.148 L905.359 682.148 L904.799 682.148 L904.24 682.148 L903.681 682.148 L903.122 682.148 L902.562 682.148 L902.003 682.148 L901.444 682.148 L900.885 682.148 L900.325 682.148 L899.766 682.148 L899.207 682.148 L898.648 682.148 L898.088 682.148 L897.529 682.148 L896.97 682.148 L896.411 682.148 L895.851 682.148 L895.292 682.148 L894.733 682.148 L894.174 682.148 L893.614 682.148 L893.055 682.148 L892.496 682.148 L891.937 682.148 L891.377 682.148 L890.818 682.148 L890.259 682.148 L889.7 682.148 L889.14 682.148 L888.581 682.148 L888.022 682.148 L887.463 682.148 L886.903 682.148 L886.344 682.148 L885.785 682.148 L885.226 682.148 L884.666 682.148 L884.107 682.148 L883.548 682.148 L882.989 682.148 L882.429 682.148 L881.87 682.148 L881.311 682.148 L880.752 682.148 L880.192 682.148 L879.633 682.148 L879.074 682.148 L878.515 682.148 L877.955 682.148 L877.396 682.148 L876.837 682.148 L876.278 682.148 L875.718 682.148 L875.159 682.148 L874.6 682.148 L874.041 682.148 L873.481 682.148 L872.922 682.148 L872.363 682.148 L871.804 682.148 L871.244 682.148 L870.685 682.148 L870.126 682.148 L869.567 682.148 L869.007 682.148 L868.448 682.148 L867.889 682.148 L867.33 682.148 L866.77 682.148 L866.211 682.148 L865.652 682.148 L865.093 682.148 L864.533 682.148 L863.974 682.148 L863.415 682.148 L862.856 682.148 L862.296 682.148 L861.737 682.148 L861.178 682.148 L860.619 682.148 L860.059 682.148 L859.5 682.148 L858.941 682.148 L858.382 682.148 L857.822 682.148 L857.263 682.148 L856.704 682.148 L856.145 682.148 L855.585 682.148 L855.026 682.148 L854.467 682.148 L853.908 682.148 L853.348 682.148 L852.789 682.148 L852.23 682.148 L851.671 682.148 L851.111 682.148 L850.552 682.148 L849.993 682.148 L849.434 682.148 L848.874 682.148 L848.315 682.148 L847.756 682.148 L847.197 682.148 L846.637 682.148 L846.078 682.148 L845.519 682.148 L844.96 682.148 L844.4 682.148 L843.841 682.148 L843.282 682.148 L842.723 682.148 L842.163 682.148 L841.604 682.148 L841.045 682.148 L840.486 682.148 L839.926 682.148 L839.367 682.148 L838.808 682.148 L838.249 682.148 L837.689 682.148 L837.13 682.148 L836.571 682.148 L836.012 682.148 L835.452 682.148 L834.893 682.148 L834.334 682.148 L833.775 682.148 L833.215 682.148 L832.656 682.148 L832.097 682.148 L831.538 682.148 L830.978 682.148 L830.419 682.148 L829.86 682.148 L829.301 682.148 L828.741 682.148 L828.182 682.148 L827.623 682.148 L827.064 682.148 L826.504 682.148 L825.945 682.148 L825.386 682.148 L824.827 682.148 L824.267 682.148 L823.708 682.148 L823.149 682.148 L822.59 682.148 L822.03 682.148 L821.471 682.148 L820.912 682.148 L820.353 682.148 L819.793 682.148 L819.234 682.148 L818.675 682.148 L818.116 682.148 L817.556 682.148 L816.997 682.148 L816.438 682.148 L815.879 682.148 L815.319 682.148 L814.76 682.148 L814.201 682.148 L813.642 682.148 L813.082 682.148 L812.523 682.148 L811.964 682.148 L811.405 682.148 L810.845 682.148 L810.286 682.148 L809.727 682.148 L809.168 682.148 L808.608 682.148 L808.049 682.148 L807.49 682.148 L806.931 682.148 L806.371 682.148 L805.812 682.148 L805.253 682.148 L804.693 682.148 L804.134 682.148 L803.575 682.148 L803.016 682.148 L802.456 682.148 L801.897 682.148 L801.338 682.148 L800.779 682.148 L800.219 682.148 L799.66 682.148 L799.101 682.148 L798.542 682.148 L797.982 682.148 L797.423 682.148 L796.864 682.148 L796.305 682.148 L795.745 682.148 L795.186 682.148 L794.627 682.148 L794.068 682.148 L793.508 682.148 L792.949 682.148 L792.39 682.148 L791.831 682.148 L791.271 682.148 L790.712 682.148 L790.153 682.148 L789.594 682.148 L789.034 682.148 L788.475 682.148 L787.916 682.148 L787.357 682.148 L786.797 682.148 L786.238 682.148 L785.679 682.148 L785.12 682.148 L784.56 682.148 L784.001 682.148 L783.442 682.148 L782.883 682.148 L782.323 682.148 L781.764 682.148 L781.205 682.148 L780.646 682.148 L780.086 682.148 L779.527 682.148 L778.968 682.148 L778.409 682.148 L777.849 682.148 L777.29 682.148 L776.731 682.148 L776.172 682.148 L775.612 682.148 L775.053 682.148 L774.494 682.148 L773.935 682.148 L773.375 682.148 L772.816 682.148 L772.257 682.148 L771.698 682.148 L771.138 682.148 L770.579 682.148 L770.02 682.148 L769.461 682.148 L768.901 682.148 L768.342 682.148 L767.783 682.148 L767.224 682.148 L766.664 682.148 L766.105 682.148 L765.546 682.148 L764.987 682.148 L764.427 682.148 L763.868 682.148 L763.309 682.148 L762.75 682.148 L762.19 682.148 L761.631 682.148 L761.072 682.148 L760.513 682.148 L759.953 682.148 L759.394 682.148 L758.835 682.148 L758.276 682.148 L757.716 682.148 L757.157 682.148 L756.598 682.148 L756.039 682.148 L755.479 682.148 L754.92 682.148 L754.361 682.148 L753.802 682.148 L753.242 682.148 L752.683 682.148 L752.124 682.148 L751.565 682.148 L751.005 682.148 L750.446 682.148 L749.887 682.148 L749.328 682.148 L748.768 682.148 L748.209 682.148 L747.65 682.148 L747.091 682.148 L746.531 682.148 L745.972 682.148 L745.413 682.148 L744.854 682.148 L744.294 682.148 L743.735 682.148 L743.176 682.148 L742.617 682.148 L742.057 682.148 L741.498 682.148 L740.939 682.148 L740.38 682.148 L739.82 682.148 L739.261 682.148 L738.702 682.148 L738.143 682.148 L737.583 682.148 L737.024 682.148 L736.465 682.148 L735.906 682.148 L735.346 682.148 L734.787 682.148 L734.228 682.148 L733.669 682.148 L733.109 682.148 L732.55 682.148 L731.991 682.148 L731.432 682.148 L730.872 682.148 L730.313 682.148 L729.754 682.148 L729.195 682.148 L728.635 682.148 L728.076 682.148 L727.517 682.148 L726.958 682.148 L726.398 682.148 L725.839 682.148 L725.28 682.148 L724.721 682.148 L724.161 682.148 L723.602 682.148 L723.043 682.148 L722.484 682.148 L721.924 682.148 L721.365 682.148 L720.806 682.148 L720.247 682.148  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip423)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.899 720.806,686.899 721.365,686.899 721.924,686.899 722.484,686.899 723.043,686.899 723.602,686.899 724.161,686.899 724.721,686.899 725.28,686.899 725.839,686.899 726.398,686.899 726.958,686.899 727.517,686.899 728.076,686.899 728.635,686.899 729.195,686.899 729.754,686.899 730.313,686.899 730.872,686.899 731.432,686.899 731.991,686.899 732.55,686.899 733.109,686.899 733.669,686.899 734.228,686.899 734.787,686.899 735.346,686.899 735.906,686.899 736.465,686.899 737.024,686.899 737.583,686.899 738.143,686.899 738.702,686.899 739.261,686.899 739.82,686.899 740.38,686.899 740.939,686.899 741.498,686.899 742.057,686.899 742.617,686.899 743.176,686.899 743.735,686.899 744.294,686.899 744.854,686.899 745.413,686.899 745.972,686.899 746.531,686.899 747.091,686.899 747.65,686.899 748.209,686.899 748.768,686.899 749.328,686.899 749.887,686.899 750.446,686.899 751.005,686.899 751.565,686.899 752.124,686.899 752.683,686.899 753.242,686.899 753.802,686.899 754.361,686.899 754.92,686.899 755.479,686.899 756.039,686.899 756.598,686.899 757.157,686.899 757.716,686.899 758.276,686.899 758.835,686.899 759.394,686.899 759.953,686.899 760.513,686.899 761.072,686.899 761.631,686.899 762.19,686.899 762.75,686.899 763.309,686.899 763.868,686.899 764.427,686.899 764.987,686.899 765.546,686.899 766.105,686.899 766.664,686.899 767.224,686.899 767.783,686.899 768.342,686.899 768.901,686.899 769.461,686.899 770.02,686.899 770.579,686.899 771.138,686.899 771.698,686.899 772.257,686.899 772.816,686.899 773.375,686.899 773.935,686.899 774.494,686.899 775.053,686.899 775.612,686.899 776.172,686.899 776.731,686.899 777.29,686.899 777.849,686.899 778.409,686.899 778.968,686.899 779.527,686.899 780.086,686.899 780.646,686.899 781.205,686.899 781.764,686.899 782.323,686.899 782.883,686.899 783.442,686.899 784.001,686.899 784.56,686.899 785.12,686.899 785.679,686.899 786.238,686.899 786.797,686.899 787.357,686.899 787.916,686.899 788.475,686.899 789.034,686.899 789.594,686.899 790.153,686.899 790.712,686.899 791.271,686.899 791.831,686.899 792.39,686.899 792.949,686.899 793.508,686.899 794.068,686.899 794.627,686.899 795.186,686.899 795.745,686.899 796.305,686.899 796.864,686.899 797.423,686.899 797.982,686.899 798.542,686.899 799.101,686.899 799.66,686.899 800.219,686.899 800.779,686.899 801.338,686.899 801.897,686.899 802.456,686.899 803.016,686.899 803.575,686.899 804.134,686.899 804.693,686.899 805.253,686.899 805.812,686.899 806.371,686.899 806.931,686.899 807.49,686.899 808.049,686.899 808.608,686.899 809.168,686.899 809.727,686.899 810.286,686.899 810.845,686.899 811.405,686.899 811.964,686.899 812.523,686.899 813.082,686.899 813.642,686.899 814.201,686.899 814.76,686.899 815.319,686.899 815.879,686.899 816.438,686.899 816.997,686.899 817.556,686.899 818.116,686.899 818.675,686.899 819.234,686.899 819.793,686.899 820.353,686.899 820.912,686.899 821.471,686.899 822.03,686.899 822.59,686.899 823.149,686.899 823.708,686.899 824.267,686.899 824.827,686.899 825.386,686.899 825.945,686.899 826.504,686.899 827.064,686.899 827.623,686.899 828.182,686.899 828.741,686.899 829.301,686.899 829.86,686.899 830.419,686.899 830.978,686.899 831.538,686.899 832.097,686.899 832.656,686.899 833.215,686.899 833.775,686.899 834.334,686.899 834.893,686.899 835.452,686.899 836.012,686.899 836.571,686.899 837.13,686.899 837.689,686.899 838.249,686.899 838.808,686.899 839.367,686.899 839.926,686.899 840.486,686.899 841.045,686.899 841.604,686.899 842.163,686.899 842.723,686.899 843.282,686.899 843.841,686.899 844.4,686.899 844.96,686.899 845.519,686.899 846.078,686.899 846.637,686.899 847.197,686.899 847.756,686.899 848.315,686.899 848.874,686.899 849.434,686.899 849.993,686.899 850.552,686.899 851.111,686.899 851.671,686.899 852.23,686.899 852.789,686.899 853.348,686.899 853.908,686.899 854.467,686.899 855.026,686.899 855.585,686.899 856.145,686.899 856.704,686.899 857.263,686.899 857.822,686.899 858.382,686.899 858.941,686.899 859.5,686.899 860.059,686.899 860.619,686.899 861.178,686.899 861.737,686.899 862.296,686.899 862.856,686.899 863.415,686.899 863.974,686.899 864.533,686.899 865.093,686.899 865.652,686.899 866.211,686.899 866.77,686.899 867.33,686.899 867.889,686.899 868.448,686.899 869.007,686.899 869.567,686.899 870.126,686.899 870.685,686.899 871.244,686.899 871.804,686.899 872.363,686.899 872.922,686.899 873.481,686.899 874.041,686.899 874.6,686.899 875.159,686.899 875.718,686.899 876.278,686.899 876.837,686.899 877.396,686.899 877.955,686.899 878.515,686.899 879.074,686.899 879.633,686.899 880.192,686.899 880.752,686.899 881.311,686.899 881.87,686.899 882.429,686.899 882.989,686.899 883.548,686.899 884.107,686.899 884.666,686.899 885.226,686.899 885.785,686.899 886.344,686.899 886.903,686.899 887.463,686.899 888.022,686.899 888.581,686.899 889.14,686.899 889.7,686.899 890.259,686.899 890.818,686.899 891.377,686.899 891.937,686.899 892.496,686.899 893.055,686.899 893.614,686.899 894.174,686.899 894.733,686.899 895.292,686.899 895.851,686.899 896.411,686.899 896.97,686.899 897.529,686.899 898.088,686.899 898.648,686.899 899.207,686.899 899.766,686.899 900.325,686.899 900.885,686.899 901.444,686.899 902.003,686.899 902.562,686.899 903.122,686.899 903.681,686.899 904.24,686.899 904.799,686.899 905.359,686.899 905.918,686.899 906.477,686.899 907.036,686.899 907.596,686.899 908.155,686.899 908.714,686.899 909.273,686.899 909.833,686.899 910.392,686.899 910.951,686.899 911.51,686.899 912.07,686.899 912.629,686.899 913.188,686.899 913.747,686.899 914.307,686.899 914.866,686.899 915.425,686.899 915.984,686.899 916.544,686.899 917.103,686.899 917.662,686.899 918.221,686.899 918.781,686.899 919.34,686.899 919.899,686.899 920.458,686.899 921.018,686.899 921.577,686.899 922.136,686.899 922.695,686.899 923.255,686.899 923.814,686.899 924.373,686.899 924.932,686.899 925.492,686.899 926.051,686.899 926.61,686.899 927.169,686.899 927.729,686.899 928.288,686.899 928.847,686.899 929.406,686.899 929.966,686.899 930.525,686.899 931.084,686.899 931.644,686.899 932.203,686.899 932.762,686.899 933.321,686.899 933.881,686.899 934.44,686.899 934.999,686.899 935.558,686.899 936.118,686.899 936.677,686.899 937.236,686.899 937.795,686.899 938.355,686.899 938.914,686.899 939.473,686.899 940.032,686.899 940.592,686.899 941.151,686.899 941.71,686.899 942.269,686.899 942.829,686.899 943.388,686.899 943.947,686.899 944.506,686.899 945.066,686.899 945.625,686.899 946.184,686.899 946.743,686.899 947.303,686.899 947.862,686.899 948.421,686.899 948.98,686.899 949.54,686.899 950.099,686.899 950.658,686.899 951.217,686.899 951.777,686.899 952.336,686.899 952.895,686.899 953.454,686.899 954.014,686.899 954.573,686.899 955.132,686.899 955.691,686.899 956.251,686.899 956.81,686.899 957.369,686.899 957.928,686.899 958.488,686.899 959.047,686.899 959.606,686.899 960.165,686.899 960.725,686.899 961.284,686.899 961.843,686.899 962.402,686.899 962.962,686.899 963.521,686.899 964.08,686.899 964.639,686.899 965.199,686.899 965.758,686.899 966.317,686.899 966.876,686.899 967.436,686.899 967.995,686.899 968.554,686.899 969.113,686.899 969.673,686.899 970.232,686.899 970.791,686.899 971.35,686.899 971.91,686.899 972.469,686.899 973.028,686.899 973.587,686.899 974.147,686.899 974.706,686.899 975.265,686.899 975.824,686.899 976.384,686.899 976.943,686.899 977.502,686.899 978.061,686.899 978.621,686.899 979.18,686.899 979.739,686.899 980.298,686.899 980.858,686.899 981.417,686.899 981.976,686.899 982.535,686.899 983.095,686.899 983.654,686.899 984.213,686.899 984.772,686.899 985.332,686.899 985.891,686.899 986.45,686.899 987.009,686.899 987.569,686.899 988.128,686.899 988.687,686.899 989.246,686.899 989.806,686.899 990.365,686.899 990.924,686.899 991.483,686.899 992.043,686.899 992.602,686.899 993.161,686.899 993.72,686.899 994.28,686.899 994.839,686.899 995.398,686.899 995.957,686.899 996.517,686.899 997.076,686.899 997.635,686.899 998.194,686.899 998.754,686.899 999.313,686.899 999.872,686.899 1000.43,686.899 1000.99,686.899 1001.55,686.899 1002.11,686.899 1002.67,686.899 1003.23,686.899 1003.79,686.899 1004.35,686.899 1004.91,686.899 1005.46,686.899 1006.02,686.899 1006.58,686.899 1007.14,686.899 1007.7,686.899 1008.26,686.899 1008.82,686.899 1009.38,686.899 1009.94,686.899 1010.5,686.899 1011.06,686.899 1011.62,686.899 1012.18,686.899 1012.73,686.899 1013.29,686.899 1013.85,686.899 1014.41,686.899 1014.97,686.899 1015.53,686.899 1016.09,686.899 1016.65,686.899 1017.21,686.899 1017.77,686.899 1018.33,686.899 1018.89,686.899 1019.45,686.899 1020.01,686.899 1020.56,686.899 1021.12,686.899 1021.68,686.899 1022.24,686.899 1022.8,686.899 1023.36,686.899 1023.92,686.899 1024.48,686.899 1025.04,686.899 1025.6,686.899 1026.16,686.899 1026.72,686.899 1027.28,686.899 1027.83,686.899 1028.39,686.899 1028.95,686.899 1029.51,686.899 1030.07,686.899 1030.63,686.899 1031.19,686.899 1031.75,686.899 1032.31,686.899 1032.87,686.899 1033.43,686.899 1033.99,686.899 1034.55,686.899 1035.1,686.899 1035.66,686.899 1036.22,686.899 1036.78,686.899 1037.34,686.899 1037.9,686.899 1038.46,686.899 1039.02,686.899 1039.58,686.899 1040.14,686.899 1040.7,686.899 1041.26,686.899 1041.82,686.899 1042.38,686.899 1042.93,686.899 1043.49,686.899 1044.05,686.899 1044.61,686.899 1045.17,686.899 1045.73,686.899 1046.29,686.899 1046.85,686.899 1047.41,686.899 1047.97,686.899 1048.53,686.899 1049.09,686.899 1049.65,686.899 1050.2,686.899 1050.76,686.899 1051.32,686.899 1051.88,686.899 1052.44,686.899 1053,686.899 1053.56,686.899 1054.12,686.899 1054.68,686.899 1055.24,686.899 1055.8,686.899 1056.36,686.899 1056.92,686.899 1057.48,686.899 1058.03,686.899 1058.59,686.899 1059.15,686.899 1059.71,686.899 1060.27,686.899 1060.83,686.899 1061.39,686.899 1061.95,686.899 1062.51,686.899 1063.07,686.899 1063.63,686.899 1064.19,686.899 1064.75,686.899 1065.3,686.899 1065.86,686.899 1066.42,686.899 1066.98,686.899 1067.54,686.899 1068.1,686.899 1068.66,686.899 1069.22,686.899 1069.78,686.899 1070.34,686.899 1070.9,686.899 1071.46,686.899 1072.02,686.899 1072.57,686.899 1073.13,686.899 1073.69,686.899 1074.25,686.899 1074.81,686.899 1075.37,686.899 1075.93,686.899 1076.49,686.899 1077.05,686.899 1077.61,686.899 1078.17,686.899 1078.73,686.899 1079.29,686.899 1079.85,686.899 1080.4,686.899 1080.96,686.899 1081.52,686.899 1082.08,686.899 1082.64,686.899 1083.2,686.899 1083.76,686.899 1084.32,686.899 1084.88,686.899 1085.44,686.899 1086,686.899 1086.56,686.899 1087.12,686.899 1087.67,686.899 1088.23,686.899 1088.79,686.899 1089.35,686.899 1089.91,686.899 1090.47,686.899 1091.03,686.899 1091.59,686.899 1092.15,686.899 1092.71,686.899 1093.27,686.899 1093.83,686.899 1094.39,686.899 1094.94,686.899 1095.5,686.899 1096.06,686.899 1096.62,686.899 1097.18,686.899 1097.74,686.899 1098.3,686.899 1098.86,686.899 1099.42,686.899 1099.98,686.899 1100.54,686.899 1101.1,686.899 1101.66,686.899 1102.22,686.899 1102.77,686.899 1103.33,686.899 1103.89,686.899 1104.45,686.899 1105.01,686.899 1105.57,686.899 1106.13,686.899 1106.69,686.899 1107.25,686.899 1107.81,686.899 1108.37,686.899 1108.93,686.899 1109.49,686.899 1110.04,686.899 1110.6,686.899 1111.16,686.899 1111.72,686.899 1112.28,686.899 1112.84,686.899 1113.4,686.899 1113.96,686.899 1114.52,686.899 1115.08,686.899 1115.64,686.899 1116.2,686.899 1116.76,686.899 1117.31,686.899 1117.87,686.899 1118.43,686.899 1118.99,686.899 1119.55,686.899 1120.11,686.899 1120.67,686.899 1121.23,686.899 1121.79,686.899 1122.35,686.899 1122.91,686.899 1123.47,686.899 1124.03,686.899 1124.59,686.899 1125.14,686.899 1125.7,686.899 1126.26,686.899 1126.82,686.899 1127.38,686.899 1127.94,686.899 1128.5,686.899 1129.06,686.899 1129.62,686.899 1130.18,686.899 1130.74,686.899 1131.3,686.899 1131.86,686.899 1132.41,686.899 1132.97,686.899 1133.53,686.899 1134.09,686.899 1134.65,686.899 1135.21,686.899 1135.77,686.899 1136.33,686.899 1136.89,686.899 1137.45,686.899 1138.01,686.899 1138.57,686.899 1139.13,686.899 1139.68,686.899 1140.24,686.899 1140.8,686.899 1141.36,686.899 1141.92,686.899 1142.48,686.899 1143.04,686.899 1143.6,686.899 1144.16,686.899 1144.72,686.899 1145.28,686.899 1145.84,686.899 1146.4,686.899 1146.96,686.899 1147.51,686.899 1148.07,686.899 1148.63,686.899 1149.19,686.899 1149.75,686.899 1150.31,686.899 1150.87,686.899 1151.43,686.899 1151.99,686.899 1152.55,686.899 1153.11,686.899 1153.67,686.899 1154.23,686.899 1154.78,686.899 1155.34,686.899 1155.9,686.899 1156.46,686.899 1157.02,686.899 1157.58,686.899 1158.14,686.899 1158.7,686.899 1159.26,686.899 1159.82,686.899 1160.38,686.899 1160.94,686.899 1161.5,686.899 1162.05,686.899 1162.61,686.899 1163.17,686.899 1163.73,686.899 1164.29,686.899 1164.85,686.899 1165.41,686.899 1165.97,686.899 1166.53,686.899 1167.09,686.899 1167.65,686.899 1168.21,686.899 1168.77,686.899 1169.33,686.899 1169.88,686.899 1170.44,686.899 1171,686.899 1171.56,686.899 1172.12,686.899 1172.68,686.899 1173.24,686.899 1173.8,686.899 1174.36,686.899 1174.92,686.899 1175.48,686.899 1176.04,686.899 1176.6,686.899 1177.15,686.899 1177.71,686.899 1178.27,686.899 1178.83,686.899 1179.39,686.899 1179.95,686.899 1180.51,686.899 1181.07,686.899 1181.63,686.899 1182.19,686.899 1182.75,686.899 1183.31,686.899 1183.87,686.899 1184.43,686.899 1184.98,686.899 1185.54,686.899 1186.1,686.899 1186.66,686.899 1187.22,686.899 1187.78,686.899 1188.34,686.899 1188.9,686.899 1189.46,686.899 1190.02,686.899 1190.58,686.899 1191.14,686.899 1191.7,686.899 1192.25,686.899 1192.81,686.899 1193.37,686.899 1193.93,686.899 1194.49,686.899 1195.05,686.899 1195.61,686.899 1196.17,686.899 1196.73,686.899 1197.29,686.899 1197.85,686.899 1198.41,686.899 1198.97,686.899 1199.52,686.899 1200.08,686.899 1200.64,686.899 1201.2,686.899 1201.76,686.899 1202.32,686.899 1202.88,686.899 1203.44,686.899 1204,686.899 1204.56,686.899 1205.12,686.899 1205.68,686.899 1206.24,686.899 1206.8,686.899 1207.35,686.899 1207.91,686.899 1208.47,686.899 1209.03,686.899 1209.59,686.899 1210.15,686.899 1210.71,686.899 1211.27,686.899 1211.83,686.899 1212.39,686.899 1212.95,686.899 1213.51,686.899 1214.07,686.899 1214.62,686.899 1215.18,686.899 1215.74,686.899 1216.3,686.899 1216.86,686.899 1217.42,686.899 1217.98,686.899 1218.54,686.899 1219.1,686.899 1219.66,686.899 1220.22,686.899 1220.78,686.899 1221.34,686.899 1221.89,686.899 1222.45,686.899 1223.01,686.899 1223.57,686.899 1224.13,686.899 1224.69,686.899 1225.25,686.899 1225.81,686.899 1226.37,686.899 1226.93,686.899 1227.49,686.899 1228.05,686.899 1228.61,686.899 1229.17,686.899 1229.72,686.899 1230.28,686.899 1230.84,686.899 1231.4,686.899 1231.96,686.899 1232.52,686.899 1233.08,686.899 1233.64,686.899 1234.2,686.899 1234.76,686.899 1235.32,686.899 1235.88,686.899 1236.44,686.899 1236.99,686.899 1237.55,686.899 1238.11,686.899 1238.67,686.899 1239.23,686.899 1239.79,686.899 1240.35,686.899 1240.91,686.899 1241.47,686.899 1242.03,686.899 1242.59,686.899 1243.15,686.899 1243.71,686.899 1244.26,686.899 1244.82,686.899 1245.38,686.899 1245.94,686.899 1246.5,686.899 1247.06,686.899 1247.62,686.899 1248.18,686.899 1248.74,686.899 1249.3,686.899 1249.86,686.899 1250.42,686.899 1250.98,686.899 1251.54,686.899 1252.09,686.899 1252.65,686.899 1253.21,686.899 1253.77,686.899 1254.33,686.899 1254.89,686.899 1255.45,686.899 1256.01,686.899 1256.57,686.899 1257.13,686.899 1257.69,686.899 1258.25,686.899 1258.81,686.899 1259.36,686.899 1259.92,686.899 1260.48,686.899 1261.04,686.899 1261.6,686.899 1262.16,686.899 1262.72,686.899 1263.28,686.899 1263.84,686.899 1264.4,686.899 1264.96,686.899 1265.52,686.899 1266.08,686.899 1266.63,686.899 1267.19,686.899 1267.75,686.899 1268.31,686.899 1268.87,686.899 1269.43,686.899 1269.99,686.899 1270.55,686.899 1271.11,686.899 1271.67,686.899 1272.23,686.899 1272.79,686.899 1273.35,686.899 1273.91,686.899 1274.46,686.899 1275.02,686.899 1275.58,686.899 1276.14,686.899 1276.7,686.899 1277.26,686.899 1277.82,686.899 1278.38,686.899 1278.94,686.899 1279.5,686.899 1280.06,686.899 1280.62,686.899 1281.18,686.899 1281.73,686.899 1282.29,686.899 1282.85,686.899 1283.41,686.899 1283.97,686.899 1284.53,686.899 1285.09,686.899 1285.65,686.899 1286.21,686.899 1286.77,686.899 1287.33,686.899 1287.89,686.899 1288.45,686.899 1289,686.899 1289.56,686.899 1290.12,686.899 1290.68,686.899 1291.24,686.899 1291.8,686.899 1292.36,686.899 1292.92,686.899 1293.48,686.899 1294.04,686.899 1294.6,686.899 1295.16,686.899 1295.72,686.899 1296.28,686.899 1296.83,686.899 1297.39,686.899 1297.95,686.899 1298.51,686.899 1299.07,686.899 1299.63,686.899 1300.19,686.899 1300.75,686.899 1301.31,686.899 1301.87,686.899 1302.43,686.899 1302.99,686.899 1303.55,686.899 1304.1,686.899 1304.66,686.899 1305.22,686.899 1305.78,686.899 1306.34,686.899 1306.9,686.899 1307.46,686.899 1308.02,686.899 1308.58,686.899 1309.14,686.899 1309.7,686.899 1310.26,686.899 1310.82,686.899 1311.38,686.899 1311.93,686.899 1312.49,686.899 1313.05,686.899 1313.61,686.899 1314.17,686.899 1314.73,686.899 1315.29,686.899 1315.85,686.899 1316.41,686.899 1316.97,686.899 1317.53,686.899 1318.09,686.899 1318.65,686.899 1319.2,686.899 1319.76,686.899 1320.32,686.899 1320.88,686.899 1321.44,686.899 1322,686.899 1322.56,686.899 1323.12,686.899 1323.68,686.899 1324.24,686.899 1324.8,686.899 1325.36,686.899 1325.92,686.899 1326.47,686.899 1327.03,686.899 1327.59,686.899 1328.15,686.899 1328.71,686.899 1329.27,686.899 1329.83,686.899 1330.39,686.899 1330.95,686.899 1331.51,686.899 1332.07,686.899 1332.63,686.899 1333.19,686.899 1333.75,686.899 1334.3,686.899 1334.86,686.899 1335.42,686.899 1335.98,686.899 1336.54,686.899 1337.1,686.899 1337.66,686.899 1338.22,686.899 1338.78,686.899 1339.34,686.899 1339.9,686.899 1340.46,686.899 1341.02,686.899 1341.57,686.899 1342.13,686.899 1342.69,686.899 1343.25,686.899 1343.81,686.899 1344.37,686.899 1344.93,686.899 1345.49,686.899 1346.05,686.899 1346.61,686.899 1347.17,686.899 1347.73,686.899 1348.29,686.899 1348.84,686.899 1349.4,686.899 1349.96,686.899 1350.52,686.899 1351.08,686.899 1351.64,686.899 1352.2,686.899 1352.76,686.899 1353.32,686.899 1353.88,686.899 1354.44,686.899 1355,686.899 1355.56,686.899 1356.12,686.899 1356.67,686.899 1357.23,686.899 1357.79,686.899 1358.35,686.899 1358.91,686.899 1359.47,686.899 1360.03,686.899 1360.59,686.899 1361.15,686.899 1361.71,686.899 1362.27,686.899 1362.83,686.899 1363.39,686.899 1363.94,686.899 1364.5,686.899 1365.06,686.899 1365.62,686.899 1366.18,686.899 1366.74,686.899 1367.3,686.899 1367.86,686.899 1368.42,686.899 1368.98,686.899 1369.54,686.899 1370.1,686.899 1370.66,686.899 1371.21,686.899 1371.77,686.899 1372.33,686.899 1372.89,686.899 1373.45,686.899 1374.01,686.899 1374.57,686.899 1375.13,686.899 1375.69,686.899 1376.25,686.899 1376.81,686.899 1377.37,686.899 1377.93,686.899 1378.49,686.899 1379.04,686.899 1379.6,686.899 1380.16,686.899 1380.72,686.899 1381.28,686.899 1381.84,686.899 1382.4,686.899 1382.96,686.899 1383.52,686.899 1384.08,686.899 1384.64,686.899 1385.2,686.899 1385.76,686.899 1386.31,686.899 1386.87,686.899 1387.43,686.899 1387.99,686.899 1388.55,686.899 1389.11,686.899 1389.67,686.899 1390.23,686.899 1390.79,686.899 1391.35,686.899 1391.91,686.899 1392.47,686.899 1393.03,686.899 1393.58,686.899 1394.14,686.899 1394.7,686.899 1395.26,686.899 1395.82,686.899 1396.38,686.899 1396.94,686.899 1397.5,686.899 1398.06,686.899 1398.62,686.899 1399.18,686.899 1399.74,686.899 1400.3,686.899 1400.86,686.899 1401.41,686.899 1401.97,686.899 1402.53,686.899 1403.09,686.899 1403.65,686.899 1404.21,686.899 1404.77,686.899 1405.33,686.899 1405.89,686.899 1406.45,686.899 1407.01,686.899 1407.57,686.899 1408.13,686.899 1408.68,686.899 1409.24,686.899 1409.8,686.899 1410.36,686.899 1410.92,686.899 1411.48,686.899 1412.04,686.899 1412.6,686.899 1413.16,686.899 1413.72,686.899 1414.28,686.899 1414.84,686.899 1415.4,686.899 1415.95,686.899 1416.51,686.899 1417.07,686.899 1417.63,686.899 1418.19,686.899 1418.75,686.899 1419.31,686.899 1419.87,686.899 1420.43,686.899 1420.99,686.899 1421.55,686.899 1422.11,686.899 1422.67,686.899 1423.23,686.899 1423.78,686.899 1424.34,686.899 1424.9,686.899 1425.46,686.899 1426.02,686.899 1426.58,686.899 1427.14,686.899 1427.7,686.899 1428.26,686.899 1428.82,686.899 1429.38,686.899 1429.94,686.899 1430.5,686.899 1431.05,686.899 1431.61,686.899 1432.17,686.899 1432.73,686.899 1433.29,686.899 1433.85,686.899 1434.41,686.899 1434.97,686.899 1435.53,686.899 1436.09,686.899 1436.65,686.899 1437.21,686.899 1437.77,686.899 1438.33,686.899 1438.88,686.899 1439.44,686.899 1440,686.899 1440.56,686.899 1441.12,686.899 1441.68,686.899 1442.24,686.899 1442.8,686.899 1443.36,686.899 1443.92,686.899 1444.48,686.899 1445.04,686.899 1445.6,686.899 1446.15,686.899 1446.71,686.899 1447.27,686.899 1447.83,686.899 1448.39,686.899 1448.95,686.899 1449.51,686.899 1450.07,686.899 1450.63,686.899 1451.19,686.899 1451.75,686.899 1452.31,686.899 1452.87,686.899 1453.42,686.899 1453.98,686.899 1454.54,686.899 1455.1,686.899 1455.66,686.899 1456.22,686.899 1456.78,686.899 1457.34,686.899 1457.9,686.899 1458.46,686.899 1459.02,686.899 1459.58,686.899 1460.14,686.899 1460.7,686.899 1461.25,686.899 1461.81,686.899 1462.37,686.899 1462.93,686.899 1463.49,686.899 1464.05,686.899 1464.61,686.899 1465.17,686.899 1465.73,686.899 1466.29,686.899 1466.85,686.899 1467.41,686.899 1467.97,686.899 1468.52,686.899 1469.08,686.899 1469.64,686.899 1470.2,686.899 1470.76,686.899 1471.32,686.899 1471.88,686.899 1472.44,686.899 1473,686.899 1473.56,686.899 1474.12,686.899 1474.68,686.899 1475.24,686.899 1475.79,686.899 1476.35,686.899 1476.91,686.899 1477.47,686.899 1478.03,686.899 1478.59,686.899 1479.15,686.899 1479.71,686.899 1480.27,686.899 1480.83,686.899 1481.39,686.899 1481.95,686.899 1482.51,686.899 1483.07,686.899 1483.62,686.899 1484.18,686.899 1484.74,686.899 1485.3,686.899 1485.86,686.899 1486.42,686.899 1486.98,686.899 1487.54,686.899 1488.1,686.899 1488.66,686.899 1489.22,686.899 1489.78,686.899 1490.34,686.899 1490.89,686.899 1491.45,686.899 1492.01,686.899 1492.57,686.899 1493.13,686.899 1493.69,686.899 1494.25,686.899 1494.81,686.899 1495.37,686.899 1495.93,686.899 1496.49,686.899 1497.05,686.899 1497.61,686.899 1498.16,686.899 1498.72,686.899 1499.28,686.899 1499.84,686.899 1500.4,686.899 1500.96,686.899 1501.52,686.899 1502.08,686.899 1502.64,686.899 1503.2,686.899 1503.76,686.899 1504.32,686.899 1504.88,686.899 1505.44,686.899 1505.99,686.899 1506.55,686.899 1507.11,686.899 1507.67,686.899 1508.23,686.899 1508.79,686.899 1509.35,686.899 1509.91,686.899 1510.47,686.899 1511.03,686.899 1511.59,686.899 1512.15,686.899 1512.71,686.899 1513.26,686.899 1513.82,686.899 1514.38,686.899 1514.94,686.899 1515.5,686.899 1516.06,686.899 1516.62,686.899 1517.18,686.899 1517.74,686.899 1518.3,686.899 1518.86,686.899 1519.42,686.899 1519.98,686.899 1520.53,686.899 1521.09,686.899 1521.65,686.899 1522.21,686.899 1522.77,686.899 1523.33,686.899 1523.89,686.899 1524.45,686.899 1525.01,686.899 1525.57,686.899 1526.13,686.899 1526.69,686.899 1527.25,686.899 1527.81,686.899 1528.36,686.899 1528.92,686.899 1529.48,686.899 1530.04,686.899 1530.6,686.899 1531.16,686.899 1531.72,686.899 1532.28,686.899 1532.84,686.899 1533.4,686.899 1533.96,686.899 1534.52,686.899 1535.08,686.899 1535.63,686.899 1536.19,686.899 1536.75,686.899 1537.31,686.899 1537.87,686.899 1538.43,686.899 1538.99,686.899 1539.55,686.899 1540.11,686.899 1540.67,686.899 1541.23,686.899 1541.79,686.899 1542.35,686.899 1542.9,686.899 1543.46,686.899 1544.02,686.899 1544.58,686.899 1545.14,686.899 1545.7,686.899 1546.26,686.899 1546.82,686.899 1547.38,686.899 1547.94,686.899 1548.5,686.899 1549.06,686.899 1549.62,686.899 1550.18,686.899 1550.73,686.899 1551.29,686.899 1551.85,686.899 1552.41,686.899 1552.97,686.899 1553.53,686.899 1554.09,686.899 1554.65,686.899 1555.21,686.899 1555.77,686.899 1556.33,686.899 1556.89,686.899 1557.45,686.899 1558,686.899 1558.56,686.899 1559.12,686.899 1559.68,686.899 1560.24,686.899 1560.8,686.899 1561.36,686.899 1561.92,686.899 1562.48,686.899 1563.04,686.899 1563.6,686.899 1564.16,686.899 1564.72,686.899 1565.28,686.899 1565.83,686.899 1566.39,686.899 1566.95,686.899 1567.51,686.899 1568.07,686.899 1568.63,686.899 1569.19,686.899 1569.75,686.899 1570.31,686.899 1570.87,686.899 1571.43,686.899 1571.99,686.899 1572.55,686.899 1573.1,686.899 1573.66,686.899 1574.22,686.899 1574.78,686.899 1575.34,686.899 1575.9,686.899 1576.46,686.899 1577.02,686.899 1577.58,686.899 1578.14,686.899 1578.7,686.899 1579.26,686.899 1579.82,686.899 1580.37,686.899 1580.93,686.899 1581.49,686.899 1582.05,686.899 1582.61,686.899 1583.17,686.899 1583.73,686.899 1584.29,686.899 1584.85,686.899 1585.41,686.899 1585.97,686.899 1586.53,686.899 1587.09,686.899 1587.65,686.899 1588.2,686.899 1588.76,686.899 1589.32,686.899 1589.88,686.899 1590.44,686.899 1591,686.899 1591.56,686.899 1592.12,686.899 1592.68,686.899 1593.24,686.899 1593.8,686.899 1594.36,686.899 1594.92,686.899 1595.47,686.899 1596.03,686.899 1596.59,686.899 1597.15,686.899 1597.71,686.899 1598.27,686.899 1598.83,686.899 1599.39,686.899 1599.95,686.899 1600.51,686.899 1601.07,686.899 1601.63,686.899 1602.19,686.899 1602.74,686.899 1603.3,686.899 1603.86,686.899 1604.42,686.899 1604.98,686.899 1605.54,686.899 1606.1,686.899 1606.66,686.899 1607.22,686.899 1607.78,686.899 1608.34,686.899 1608.9,686.899 1609.46,686.899 1610.02,686.899 1610.57,686.899 1611.13,686.899 1611.69,686.899 1612.25,686.899 1612.81,686.899 1613.37,686.899 1613.93,686.899 1614.49,686.899 1615.05,686.899 1615.61,686.899 1616.17,686.899 1616.73,686.899 1617.29,686.899 1617.84,686.899 1618.4,686.899 1618.96,686.899 1619.52,686.899 1620.08,686.899 1620.64,686.899 1621.2,686.899 1621.76,686.899 1622.32,686.899 1622.88,686.899 1623.44,686.899 1624,686.899 1624.56,686.899 1625.11,686.899 1625.67,686.899 1626.23,686.899 1626.79,686.899 1627.35,686.899 1627.91,686.899 1628.47,686.899 1629.03,686.899 1629.59,686.899 1630.15,686.899 1630.71,686.899 1631.27,686.899 1631.83,686.899 1632.39,686.899 1632.94,686.899 1633.5,686.899 1634.06,686.899 1634.62,686.899 1635.18,686.899 1635.74,686.899 1636.3,686.899 1636.86,686.899 1637.42,686.899 1637.98,686.899 1638.54,686.899 1639.1,686.899 1639.66,686.899 1640.21,686.899 1640.77,686.899 1641.33,686.899 1641.89,686.899 1642.45,686.899 1643.01,686.899 1643.57,686.899 1644.13,686.899 1644.69,686.899 1645.25,686.899 1645.81,686.899 1646.37,686.899 1646.93,686.899 1647.48,686.899 1648.04,686.899 1648.6,686.899 1649.16,686.899 1649.72,686.899 1650.28,686.899 1650.84,686.899 1651.4,686.899 1651.96,686.899 1652.52,686.899 1653.08,686.899 1653.64,686.899 1654.2,686.899 1654.76,686.899 1655.31,686.899 1655.87,686.899 1656.43,686.899 1656.99,686.899 1657.55,686.899 1658.11,686.899 1658.67,686.899 1659.23,686.899 1659.79,686.899 1660.35,686.899 1660.91,686.899 1661.47,686.899 1662.03,686.899 1662.58,686.899 1663.14,686.899 1663.7,686.899 1664.26,686.899 1664.82,686.899 1665.38,686.899 1665.94,686.899 1666.5,686.899 1667.06,686.899 1667.62,686.899 1668.18,686.899 1668.74,686.899 1669.3,686.899 1669.85,686.899 1670.41,686.899 1670.97,686.899 1671.53,686.899 1672.09,686.899 1672.65,686.899 1673.21,686.899 1673.77,686.899 1674.33,686.899 1674.89,686.899 1675.45,686.899 1676.01,686.899 1676.57,686.899 1677.13,686.899 1677.68,686.899 1678.24,686.899 1678.8,686.899 1679.36,686.899 1679.92,686.899 1680.48,686.899 1681.04,686.899 1681.6,686.899 1682.16,686.899 1682.72,686.899 1683.28,686.899 1683.84,686.899 1684.4,686.899 1684.95,686.899 1685.51,686.899 1686.07,686.899 1686.63,686.899 1687.19,686.899 1687.75,686.899 1688.31,686.899 1688.87,686.899 1689.43,686.899 1689.99,686.899 1690.55,686.899 1691.11,686.899 1691.67,686.899 1692.23,686.899 1692.78,686.899 1693.34,686.899 1693.9,686.899 1694.46,686.899 1695.02,686.899 1695.58,686.899 1696.14,686.899 1696.7,686.899 1697.26,686.899 1697.82,686.899 1698.38,686.899 1698.94,686.899 1699.5,686.899 1700.05,686.899 1700.61,686.899 1701.17,686.899 1701.73,686.899 1702.29,686.899 1702.85,686.899 1703.41,686.899 1703.97,686.899 1704.53,686.899 1705.09,686.899 1705.65,686.899 1706.21,686.899 1706.77,686.899 1707.32,686.899 1707.88,686.899 1708.44,686.899 1709,686.899 1709.56,686.899 1710.12,686.899 1710.68,686.899 1711.24,686.899 1711.8,686.899 1712.36,686.899 1712.92,686.899 1713.48,686.899 1714.04,686.899 1714.6,686.899 1715.15,686.899 1715.71,686.899 1716.27,686.899 1716.83,686.899 1717.39,686.899 1717.95,686.899 1718.51,686.899 1719.07,686.899 1719.63,686.899 1720.19,686.899 1720.75,686.899 1721.31,686.899 1721.87,686.899 1722.42,686.899 1722.98,686.899 1723.54,686.899 1724.1,686.899 1724.66,686.899 1725.22,686.899 1725.78,686.899 1726.34,686.899 1726.9,686.899 1727.46,686.899 1728.02,686.899 1728.58,686.899 1729.14,686.899 1729.69,686.899 1730.25,686.899 1730.81,686.899 1731.37,686.899 1731.93,686.899 1732.49,686.899 1733.05,686.899 1733.61,686.899 1734.17,686.899 1734.73,686.899 1735.29,686.899 1735.85,686.899 1736.41,686.899 1736.97,686.899 1737.52,686.899 1738.08,686.899 1738.64,686.899 1739.2,686.899 1739.76,686.899 1740.32,686.899 1740.88,686.899 1741.44,686.899 1742,686.899 1742.56,686.899 1743.12,686.899 1743.68,686.899 1744.24,686.899 1744.79,686.899 1745.35,686.899 1745.91,686.899 1746.47,686.899 1747.03,686.899 1747.59,686.899 1748.15,686.899 1748.71,686.899 1749.27,686.899 1749.83,686.899 1750.39,686.899 1750.95,686.899 1751.51,686.899 1752.06,686.899 1752.62,686.899 1753.18,686.899 1753.74,686.899 1754.3,686.899 1754.86,686.899 1755.42,686.899 1755.98,686.899 1756.54,686.899 1757.1,686.899 1757.66,686.899 1758.22,686.899 1758.78,686.899 1759.34,686.899 1759.89,686.899 1760.45,686.899 1761.01,686.899 1761.57,686.899 1762.13,686.899 1762.69,686.899 1763.25,686.899 1763.81,686.899 1764.37,686.899 1764.93,686.899 1765.49,686.899 1766.05,686.899 1766.61,686.899 1767.16,686.899 1767.72,686.899 1768.28,686.899 1768.84,686.899 1769.4,686.899 1769.96,686.899 1770.52,686.899 1771.08,686.899 1771.64,686.899 1772.2,686.899 1772.76,686.899 1773.32,686.899 1773.88,686.899 1774.43,686.899 1774.99,686.899 1775.55,686.899 1776.11,686.899 1776.67,686.899 1777.23,686.899 1777.79,686.899 1778.35,686.899 1778.91,686.899 1779.47,686.899 1780.03,686.899 1780.59,686.899 1781.15,686.899 1781.71,686.899 1782.26,686.899 1782.82,686.899 1783.38,686.899 1783.94,686.899 1784.5,686.899 1785.06,686.899 1785.62,686.899 1786.18,686.899 1786.74,686.899 1787.3,686.899 1787.86,686.899 1788.42,686.899 1788.98,686.899 1789.53,686.899 1790.09,686.899 1790.65,686.899 1791.21,686.899 1791.77,686.899 1792.33,686.899 1792.89,686.899 1793.45,686.899 1794.01,686.899 1794.57,686.899 1795.13,686.899 1795.69,686.899 1796.25,686.899 1796.8,686.899 1797.36,686.899 1797.92,686.899 1798.48,686.899 1799.04,686.899 1799.6,686.899 1800.16,686.899 1800.72,686.899 1801.28,686.899 1801.84,686.899 1802.4,686.899 1802.96,686.899 1803.52,686.899 1804.08,686.899 1804.63,686.899 1805.19,686.899 1805.75,686.899 1806.31,686.899 1806.87,686.899 1807.43,686.899 1807.99,686.899 1808.55,686.899 1809.11,686.899 1809.67,686.899 1810.23,686.899 1810.79,686.899 1811.35,686.899 1811.9,686.899 1812.46,686.899 1813.02,686.899 1813.58,686.899 1814.14,686.899 1814.7,686.899 1815.26,686.899 1815.82,686.899 1816.38,686.899 1816.94,686.899 1817.5,686.899 1818.06,686.899 1818.62,686.899 1819.18,686.899 1819.73,686.899 1820.29,686.899 1820.85,686.899 1821.41,686.899 1821.97,686.899 1822.53,686.899 1823.09,686.899 1823.65,686.899 1824.21,686.899 1824.77,686.899 1825.33,686.899 1825.89,686.899 1826.45,686.899 1827,686.899 1827.56,686.899 1828.12,686.899 1828.68,686.899 1829.24,686.899 1829.8,686.899 1830.36,686.899 1830.92,686.899 1831.48,686.899 1832.04,686.899 1832.6,686.899 1833.16,686.899 1833.72,686.899 1834.27,686.899 1834.83,686.899 1835.39,686.899 1835.95,686.899 1836.51,686.899 1837.07,686.899 1837.63,686.899 1838.19,686.899 \"/>\n<path clip-path=\"url(#clip423)\" d=\"M720.247 684.681 L720.806 684.681 L721.365 684.681 L721.924 684.681 L722.484 684.681 L723.043 684.681 L723.602 684.681 L724.161 684.681 L724.721 684.681 L725.28 684.681 L725.839 684.681 L726.398 684.681 L726.958 684.681 L727.517 684.681 L728.076 684.681 L728.635 684.681 L729.195 684.681 L729.754 684.681 L730.313 684.681 L730.872 684.681 L731.432 684.681 L731.991 684.681 L732.55 684.681 L733.109 684.681 L733.669 684.681 L734.228 684.681 L734.787 684.681 L735.346 684.681 L735.906 684.681 L736.465 684.681 L737.024 684.681 L737.583 684.681 L738.143 684.681 L738.702 684.681 L739.261 684.681 L739.82 684.681 L740.38 684.681 L740.939 684.681 L741.498 684.681 L742.057 684.681 L742.617 684.681 L743.176 684.681 L743.735 684.681 L744.294 684.681 L744.854 684.681 L745.413 684.681 L745.972 684.681 L746.531 684.681 L747.091 684.681 L747.65 684.681 L748.209 684.681 L748.768 684.681 L749.328 684.681 L749.887 684.681 L750.446 684.681 L751.005 684.681 L751.565 684.681 L752.124 684.681 L752.683 684.681 L753.242 684.681 L753.802 684.681 L754.361 684.681 L754.92 684.681 L755.479 684.681 L756.039 684.681 L756.598 684.681 L757.157 684.681 L757.716 684.681 L758.276 684.681 L758.835 684.681 L759.394 684.681 L759.953 684.681 L760.513 684.681 L761.072 684.681 L761.631 684.681 L762.19 684.681 L762.75 684.681 L763.309 684.681 L763.868 684.681 L764.427 684.681 L764.987 684.681 L765.546 684.681 L766.105 684.681 L766.664 684.681 L767.224 684.681 L767.783 684.681 L768.342 684.681 L768.901 684.681 L769.461 684.681 L770.02 684.681 L770.579 684.681 L771.138 684.681 L771.698 684.681 L772.257 684.681 L772.816 684.681 L773.375 684.681 L773.935 684.681 L774.494 684.681 L775.053 684.681 L775.612 684.681 L776.172 684.681 L776.731 684.681 L777.29 684.681 L777.849 684.681 L778.409 684.681 L778.968 684.681 L779.527 684.681 L780.086 684.681 L780.646 684.681 L781.205 684.681 L781.764 684.681 L782.323 684.681 L782.883 684.681 L783.442 684.681 L784.001 684.681 L784.56 684.681 L785.12 684.681 L785.679 684.681 L786.238 684.681 L786.797 684.681 L787.357 684.681 L787.916 684.681 L788.475 684.681 L789.034 684.681 L789.594 684.681 L790.153 684.681 L790.712 684.681 L791.271 684.681 L791.831 684.681 L792.39 684.681 L792.949 684.681 L793.508 684.681 L794.068 684.681 L794.627 684.681 L795.186 684.681 L795.745 684.681 L796.305 684.681 L796.864 684.681 L797.423 684.681 L797.982 684.681 L798.542 684.681 L799.101 684.681 L799.66 684.681 L800.219 684.681 L800.779 684.681 L801.338 684.681 L801.897 684.681 L802.456 684.681 L803.016 684.681 L803.575 684.681 L804.134 684.681 L804.693 684.681 L805.253 684.681 L805.812 684.681 L806.371 684.681 L806.931 684.681 L807.49 684.681 L808.049 684.681 L808.608 684.681 L809.168 684.681 L809.727 684.681 L810.286 684.681 L810.845 684.681 L811.405 684.681 L811.964 684.681 L812.523 684.681 L813.082 684.681 L813.642 684.681 L814.201 684.681 L814.76 684.681 L815.319 684.681 L815.879 684.681 L816.438 684.681 L816.997 684.681 L817.556 684.681 L818.116 684.681 L818.675 684.681 L819.234 684.681 L819.793 684.681 L820.353 684.681 L820.912 684.681 L821.471 684.681 L822.03 684.681 L822.59 684.681 L823.149 684.681 L823.708 684.681 L824.267 684.681 L824.827 684.681 L825.386 684.681 L825.945 684.681 L826.504 684.681 L827.064 684.681 L827.623 684.681 L828.182 684.681 L828.741 684.681 L829.301 684.681 L829.86 684.681 L830.419 684.681 L830.978 684.681 L831.538 684.681 L832.097 684.681 L832.656 684.681 L833.215 684.681 L833.775 684.681 L834.334 684.681 L834.893 684.681 L835.452 684.681 L836.012 684.681 L836.571 684.681 L837.13 684.681 L837.689 684.681 L838.249 684.681 L838.808 684.681 L839.367 684.681 L839.926 684.681 L840.486 684.681 L841.045 684.681 L841.604 684.681 L842.163 684.681 L842.723 684.681 L843.282 684.681 L843.841 684.681 L844.4 684.681 L844.96 684.681 L845.519 684.681 L846.078 684.681 L846.637 684.681 L847.197 684.681 L847.756 684.681 L848.315 684.681 L848.874 684.681 L849.434 684.681 L849.993 684.681 L850.552 684.681 L851.111 684.681 L851.671 684.681 L852.23 684.681 L852.789 684.681 L853.348 684.681 L853.908 684.681 L854.467 684.681 L855.026 684.681 L855.585 684.681 L856.145 684.681 L856.704 684.681 L857.263 684.681 L857.822 684.681 L858.382 684.681 L858.941 684.681 L859.5 684.681 L860.059 684.681 L860.619 684.681 L861.178 684.681 L861.737 684.681 L862.296 684.681 L862.856 684.681 L863.415 684.681 L863.974 684.681 L864.533 684.681 L865.093 684.681 L865.652 684.681 L866.211 684.681 L866.77 684.681 L867.33 684.681 L867.889 684.681 L868.448 684.681 L869.007 684.681 L869.567 684.681 L870.126 684.681 L870.685 684.681 L871.244 684.681 L871.804 684.681 L872.363 684.681 L872.922 684.681 L873.481 684.681 L874.041 684.681 L874.6 684.681 L875.159 684.681 L875.718 684.681 L876.278 684.681 L876.837 684.681 L877.396 684.681 L877.955 684.681 L878.515 684.681 L879.074 684.681 L879.633 684.681 L880.192 684.681 L880.752 684.681 L881.311 684.681 L881.87 684.681 L882.429 684.681 L882.989 684.681 L883.548 684.681 L884.107 684.681 L884.666 684.681 L885.226 684.681 L885.785 684.681 L886.344 684.681 L886.903 684.681 L887.463 684.681 L888.022 684.681 L888.581 684.681 L889.14 684.681 L889.7 684.681 L890.259 684.681 L890.818 684.681 L891.377 684.681 L891.937 684.681 L892.496 684.681 L893.055 684.681 L893.614 684.681 L894.174 684.681 L894.733 684.681 L895.292 684.681 L895.851 684.681 L896.411 684.681 L896.97 684.681 L897.529 684.681 L898.088 684.681 L898.648 684.681 L899.207 684.681 L899.766 684.681 L900.325 684.681 L900.885 684.681 L901.444 684.681 L902.003 684.681 L902.562 684.681 L903.122 684.681 L903.681 684.681 L904.24 684.681 L904.799 684.681 L905.359 684.681 L905.918 684.681 L906.477 684.681 L907.036 684.681 L907.596 684.681 L908.155 684.681 L908.714 684.681 L909.273 684.681 L909.833 684.681 L910.392 684.681 L910.951 684.681 L911.51 684.681 L912.07 684.681 L912.629 684.681 L913.188 684.681 L913.747 684.681 L914.307 684.681 L914.866 684.681 L915.425 684.681 L915.984 684.681 L916.544 684.681 L917.103 684.681 L917.662 684.681 L918.221 684.681 L918.781 684.681 L919.34 684.681 L919.899 684.681 L920.458 684.681 L921.018 684.681 L921.577 684.681 L922.136 684.681 L922.695 684.681 L923.255 684.681 L923.814 684.681 L924.373 684.681 L924.932 684.681 L925.492 684.681 L926.051 684.681 L926.61 684.681 L927.169 684.681 L927.729 684.681 L928.288 684.681 L928.847 684.681 L929.406 684.681 L929.966 684.681 L930.525 684.681 L931.084 684.681 L931.644 684.681 L932.203 684.681 L932.762 684.681 L933.321 684.681 L933.881 684.681 L934.44 684.681 L934.999 684.681 L935.558 684.681 L936.118 684.681 L936.677 684.681 L937.236 684.681 L937.795 684.681 L938.355 684.681 L938.914 684.681 L939.473 684.681 L940.032 684.681 L940.592 684.681 L941.151 684.681 L941.71 684.681 L942.269 684.681 L942.829 684.681 L943.388 684.681 L943.947 684.681 L944.506 684.681 L945.066 684.681 L945.625 684.681 L946.184 684.681 L946.743 684.681 L947.303 684.681 L947.862 684.681 L948.421 684.681 L948.98 684.681 L949.54 684.681 L950.099 684.681 L950.658 684.681 L951.217 684.681 L951.777 684.681 L952.336 684.681 L952.895 684.681 L953.454 684.681 L954.014 684.681 L954.573 684.681 L955.132 684.681 L955.691 684.681 L956.251 684.681 L956.81 684.681 L957.369 684.681 L957.928 684.681 L958.488 684.681 L959.047 684.681 L959.606 684.681 L960.165 684.681 L960.725 684.681 L961.284 684.681 L961.843 684.681 L962.402 684.681 L962.962 684.681 L963.521 684.681 L964.08 684.681 L964.639 684.681 L965.199 684.681 L965.758 684.681 L966.317 684.681 L966.876 684.681 L967.436 684.681 L967.995 684.681 L968.554 684.681 L969.113 684.681 L969.673 684.681 L970.232 684.681 L970.791 684.681 L971.35 684.681 L971.91 684.681 L972.469 684.681 L973.028 684.681 L973.587 684.681 L974.147 684.681 L974.706 684.681 L975.265 684.681 L975.824 684.681 L976.384 684.681 L976.943 684.681 L977.502 684.681 L978.061 684.681 L978.621 684.681 L979.18 684.681 L979.739 684.681 L980.298 684.681 L980.858 684.681 L981.417 684.681 L981.976 684.681 L982.535 684.681 L983.095 684.681 L983.654 684.681 L984.213 684.681 L984.772 684.681 L985.332 684.681 L985.891 684.681 L986.45 684.681 L987.009 684.681 L987.569 684.681 L988.128 684.681 L988.687 684.681 L989.246 684.681 L989.806 684.681 L990.365 684.681 L990.924 684.681 L991.483 684.681 L992.043 684.681 L992.602 684.681 L993.161 684.681 L993.72 684.681 L994.28 684.681 L994.839 684.681 L995.398 684.681 L995.957 684.681 L996.517 684.681 L997.076 684.681 L997.635 684.681 L998.194 684.681 L998.754 684.681 L999.313 684.681 L999.872 684.681 L1000.43 684.681 L1000.99 684.681 L1001.55 684.681 L1002.11 684.681 L1002.67 684.681 L1003.23 684.681 L1003.79 684.681 L1004.35 684.681 L1004.91 684.681 L1005.46 684.681 L1006.02 684.681 L1006.58 684.681 L1007.14 684.681 L1007.7 684.681 L1008.26 684.681 L1008.82 684.681 L1009.38 684.681 L1009.94 684.681 L1010.5 684.681 L1011.06 684.681 L1011.62 684.681 L1012.18 684.681 L1012.73 684.681 L1013.29 684.681 L1013.85 684.681 L1014.41 684.681 L1014.97 684.681 L1015.53 684.681 L1016.09 684.681 L1016.65 684.681 L1017.21 684.681 L1017.77 684.681 L1018.33 684.681 L1018.89 684.681 L1019.45 684.681 L1020.01 684.681 L1020.56 684.681 L1021.12 684.681 L1021.68 684.681 L1022.24 684.681 L1022.8 684.681 L1023.36 684.681 L1023.92 684.681 L1024.48 684.681 L1025.04 684.681 L1025.6 684.681 L1026.16 684.681 L1026.72 684.681 L1027.28 684.681 L1027.83 684.681 L1028.39 684.681 L1028.95 684.681 L1029.51 684.681 L1030.07 684.681 L1030.63 684.681 L1031.19 684.681 L1031.75 684.681 L1032.31 684.681 L1032.87 684.681 L1033.43 684.681 L1033.99 684.681 L1034.55 684.681 L1035.1 684.681 L1035.66 684.681 L1036.22 684.681 L1036.78 684.681 L1037.34 684.681 L1037.9 684.681 L1038.46 684.681 L1039.02 684.681 L1039.58 684.681 L1040.14 684.681 L1040.7 684.681 L1041.26 684.681 L1041.82 684.681 L1042.38 684.681 L1042.93 684.681 L1043.49 684.681 L1044.05 684.681 L1044.61 684.681 L1045.17 684.681 L1045.73 684.681 L1046.29 684.681 L1046.85 684.681 L1047.41 684.681 L1047.97 684.681 L1048.53 684.681 L1049.09 684.681 L1049.65 684.681 L1050.2 684.681 L1050.76 684.681 L1051.32 684.681 L1051.88 684.681 L1052.44 684.681 L1053 684.681 L1053.56 684.681 L1054.12 684.681 L1054.68 684.681 L1055.24 684.681 L1055.8 684.681 L1056.36 684.681 L1056.92 684.681 L1057.48 684.681 L1058.03 684.681 L1058.59 684.681 L1059.15 684.681 L1059.71 684.681 L1060.27 684.681 L1060.83 684.681 L1061.39 684.681 L1061.95 684.681 L1062.51 684.681 L1063.07 684.681 L1063.63 684.681 L1064.19 684.681 L1064.75 684.681 L1065.3 684.681 L1065.86 684.681 L1066.42 684.681 L1066.98 684.681 L1067.54 684.681 L1068.1 684.681 L1068.66 684.681 L1069.22 684.681 L1069.78 684.681 L1070.34 684.681 L1070.9 684.681 L1071.46 684.681 L1072.02 684.681 L1072.57 684.681 L1073.13 684.681 L1073.69 684.681 L1074.25 684.681 L1074.81 684.681 L1075.37 684.681 L1075.93 684.681 L1076.49 684.681 L1077.05 684.681 L1077.61 684.681 L1078.17 684.681 L1078.73 684.681 L1079.29 684.681 L1079.85 684.681 L1080.4 684.681 L1080.96 684.681 L1081.52 684.681 L1082.08 684.681 L1082.64 684.681 L1083.2 684.681 L1083.76 684.681 L1084.32 684.681 L1084.88 684.681 L1085.44 684.681 L1086 684.681 L1086.56 684.681 L1087.12 684.681 L1087.67 684.681 L1088.23 684.681 L1088.79 684.681 L1089.35 684.681 L1089.91 684.681 L1090.47 684.681 L1091.03 684.681 L1091.59 684.681 L1092.15 684.681 L1092.71 684.681 L1093.27 684.681 L1093.83 684.681 L1094.39 684.681 L1094.94 684.681 L1095.5 684.681 L1096.06 684.681 L1096.62 684.681 L1097.18 684.681 L1097.74 684.681 L1098.3 684.681 L1098.86 684.681 L1099.42 684.681 L1099.98 684.681 L1100.54 684.681 L1101.1 684.681 L1101.66 684.681 L1102.22 684.681 L1102.77 684.681 L1103.33 684.681 L1103.89 684.681 L1104.45 684.681 L1105.01 684.681 L1105.57 684.681 L1106.13 684.681 L1106.69 684.681 L1107.25 684.681 L1107.81 684.681 L1108.37 684.681 L1108.93 684.681 L1109.49 684.681 L1110.04 684.681 L1110.6 684.681 L1111.16 684.681 L1111.72 684.681 L1112.28 684.681 L1112.84 684.681 L1113.4 684.681 L1113.96 684.681 L1114.52 684.681 L1115.08 684.681 L1115.64 684.681 L1116.2 684.681 L1116.76 684.681 L1117.31 684.681 L1117.87 684.681 L1118.43 684.681 L1118.99 684.681 L1119.55 684.681 L1120.11 684.681 L1120.67 684.681 L1121.23 684.681 L1121.79 684.681 L1122.35 684.681 L1122.91 684.681 L1123.47 684.681 L1124.03 684.681 L1124.59 684.681 L1125.14 684.681 L1125.7 684.681 L1126.26 684.681 L1126.82 684.681 L1127.38 684.681 L1127.94 684.681 L1128.5 684.681 L1129.06 684.681 L1129.62 684.681 L1130.18 684.681 L1130.74 684.681 L1131.3 684.681 L1131.86 684.681 L1132.41 684.681 L1132.97 684.681 L1133.53 684.681 L1134.09 684.681 L1134.65 684.681 L1135.21 684.681 L1135.77 684.681 L1136.33 684.681 L1136.89 684.681 L1137.45 684.681 L1138.01 684.681 L1138.57 684.681 L1139.13 684.681 L1139.68 684.681 L1140.24 684.681 L1140.8 684.681 L1141.36 684.681 L1141.92 684.681 L1142.48 684.681 L1143.04 684.681 L1143.6 684.681 L1144.16 684.681 L1144.72 684.681 L1145.28 684.681 L1145.84 684.681 L1146.4 684.681 L1146.96 684.681 L1147.51 684.681 L1148.07 684.681 L1148.63 684.681 L1149.19 684.681 L1149.75 684.681 L1150.31 684.681 L1150.87 684.681 L1151.43 684.681 L1151.99 684.681 L1152.55 684.681 L1153.11 684.681 L1153.67 684.681 L1154.23 684.681 L1154.78 684.681 L1155.34 684.681 L1155.9 684.681 L1156.46 684.681 L1157.02 684.681 L1157.58 684.681 L1158.14 684.681 L1158.7 684.681 L1159.26 684.681 L1159.82 684.681 L1160.38 684.681 L1160.94 684.681 L1161.5 684.681 L1162.05 684.681 L1162.61 684.681 L1163.17 684.681 L1163.73 684.681 L1164.29 684.681 L1164.85 684.681 L1165.41 684.681 L1165.97 684.681 L1166.53 684.681 L1167.09 684.681 L1167.65 684.681 L1168.21 684.681 L1168.77 684.681 L1169.33 684.681 L1169.88 684.681 L1170.44 684.681 L1171 684.681 L1171.56 684.681 L1172.12 684.681 L1172.68 684.681 L1173.24 684.681 L1173.8 684.681 L1174.36 684.681 L1174.92 684.681 L1175.48 684.681 L1176.04 684.681 L1176.6 684.681 L1177.15 684.681 L1177.71 684.681 L1178.27 684.681 L1178.83 684.681 L1179.39 684.681 L1179.95 684.681 L1180.51 684.681 L1181.07 684.681 L1181.63 684.681 L1182.19 684.681 L1182.75 684.681 L1183.31 684.681 L1183.87 684.681 L1184.43 684.681 L1184.98 684.681 L1185.54 684.681 L1186.1 684.681 L1186.66 684.681 L1187.22 684.681 L1187.78 684.681 L1188.34 684.681 L1188.9 684.681 L1189.46 684.681 L1190.02 684.681 L1190.58 684.681 L1191.14 684.681 L1191.7 684.681 L1192.25 684.681 L1192.81 684.681 L1193.37 684.681 L1193.93 684.681 L1194.49 684.681 L1195.05 684.681 L1195.61 684.681 L1196.17 684.681 L1196.73 684.681 L1197.29 684.681 L1197.85 684.681 L1198.41 684.681 L1198.97 684.681 L1199.52 684.681 L1200.08 684.681 L1200.64 684.681 L1201.2 684.681 L1201.76 684.681 L1202.32 684.681 L1202.88 684.681 L1203.44 684.681 L1204 684.681 L1204.56 684.681 L1205.12 684.681 L1205.68 684.681 L1206.24 684.681 L1206.8 684.681 L1207.35 684.681 L1207.91 684.681 L1208.47 684.681 L1209.03 684.681 L1209.59 684.681 L1210.15 684.681 L1210.71 684.681 L1211.27 684.681 L1211.83 684.681 L1212.39 684.681 L1212.95 684.681 L1213.51 684.681 L1214.07 684.681 L1214.62 684.681 L1215.18 684.681 L1215.74 684.681 L1216.3 684.681 L1216.86 684.681 L1217.42 684.681 L1217.98 684.681 L1218.54 684.681 L1219.1 684.681 L1219.66 684.681 L1220.22 684.681 L1220.78 684.681 L1221.34 684.681 L1221.89 684.681 L1222.45 684.681 L1223.01 684.681 L1223.57 684.681 L1224.13 684.681 L1224.69 684.681 L1225.25 684.681 L1225.81 684.681 L1226.37 684.681 L1226.93 684.681 L1227.49 684.681 L1228.05 684.681 L1228.61 684.681 L1229.17 684.681 L1229.72 684.681 L1230.28 684.681 L1230.84 684.681 L1231.4 684.681 L1231.96 684.681 L1232.52 684.681 L1233.08 684.681 L1233.64 684.681 L1234.2 684.681 L1234.76 684.681 L1235.32 684.681 L1235.88 684.681 L1236.44 684.681 L1236.99 684.681 L1237.55 684.681 L1238.11 684.681 L1238.67 684.681 L1239.23 684.681 L1239.79 684.681 L1240.35 684.681 L1240.91 684.681 L1241.47 684.681 L1242.03 684.681 L1242.59 684.681 L1243.15 684.681 L1243.71 684.681 L1244.26 684.681 L1244.82 684.681 L1245.38 684.681 L1245.94 684.681 L1246.5 684.681 L1247.06 684.681 L1247.62 684.681 L1248.18 684.681 L1248.74 684.681 L1249.3 684.681 L1249.86 684.681 L1250.42 684.681 L1250.98 684.681 L1251.54 684.681 L1252.09 684.681 L1252.65 684.681 L1253.21 684.681 L1253.77 684.681 L1254.33 684.681 L1254.89 684.681 L1255.45 684.681 L1256.01 684.681 L1256.57 684.681 L1257.13 684.681 L1257.69 684.681 L1258.25 684.681 L1258.81 684.681 L1259.36 684.681 L1259.92 684.681 L1260.48 684.681 L1261.04 684.681 L1261.6 684.681 L1262.16 684.681 L1262.72 684.681 L1263.28 684.681 L1263.84 684.681 L1264.4 684.681 L1264.96 684.681 L1265.52 684.681 L1266.08 684.681 L1266.63 684.681 L1267.19 684.681 L1267.75 684.681 L1268.31 684.681 L1268.87 684.681 L1269.43 684.681 L1269.99 684.681 L1270.55 684.681 L1271.11 684.681 L1271.67 684.681 L1272.23 684.681 L1272.79 684.681 L1273.35 684.681 L1273.91 684.681 L1274.46 684.681 L1275.02 684.681 L1275.58 684.681 L1276.14 684.681 L1276.7 684.681 L1277.26 684.681 L1277.82 684.681 L1278.38 684.681 L1278.94 684.681 L1279.5 684.681 L1280.06 684.681 L1280.62 684.681 L1281.18 684.681 L1281.73 684.681 L1282.29 684.681 L1282.85 684.681 L1283.41 684.681 L1283.97 684.681 L1284.53 684.681 L1285.09 684.681 L1285.65 684.681 L1286.21 684.681 L1286.77 684.681 L1287.33 684.681 L1287.89 684.681 L1288.45 684.681 L1289 684.681 L1289.56 684.681 L1290.12 684.681 L1290.68 684.681 L1291.24 684.681 L1291.8 684.681 L1292.36 684.681 L1292.92 684.681 L1293.48 684.681 L1294.04 684.681 L1294.6 684.681 L1295.16 684.681 L1295.72 684.681 L1296.28 684.681 L1296.83 684.681 L1297.39 684.681 L1297.95 684.681 L1298.51 684.681 L1299.07 684.681 L1299.63 684.681 L1300.19 684.681 L1300.75 684.681 L1301.31 684.681 L1301.87 684.681 L1302.43 684.681 L1302.99 684.681 L1303.55 684.681 L1304.1 684.681 L1304.66 684.681 L1305.22 684.681 L1305.78 684.681 L1306.34 684.681 L1306.9 684.681 L1307.46 684.681 L1308.02 684.681 L1308.58 684.681 L1309.14 684.681 L1309.7 684.681 L1310.26 684.681 L1310.82 684.681 L1311.38 684.681 L1311.93 684.681 L1312.49 684.681 L1313.05 684.681 L1313.61 684.681 L1314.17 684.681 L1314.73 684.681 L1315.29 684.681 L1315.85 684.681 L1316.41 684.681 L1316.97 684.681 L1317.53 684.681 L1318.09 684.681 L1318.65 684.681 L1319.2 684.681 L1319.76 684.681 L1320.32 684.681 L1320.88 684.681 L1321.44 684.681 L1322 684.681 L1322.56 684.681 L1323.12 684.681 L1323.68 684.681 L1324.24 684.681 L1324.8 684.681 L1325.36 684.681 L1325.92 684.681 L1326.47 684.681 L1327.03 684.681 L1327.59 684.681 L1328.15 684.681 L1328.71 684.681 L1329.27 684.681 L1329.83 684.681 L1330.39 684.681 L1330.95 684.681 L1331.51 684.681 L1332.07 684.681 L1332.63 684.681 L1333.19 684.681 L1333.75 684.681 L1334.3 684.681 L1334.86 684.681 L1335.42 684.681 L1335.98 684.681 L1336.54 684.681 L1337.1 684.681 L1337.66 684.681 L1338.22 684.681 L1338.78 684.681 L1339.34 684.681 L1339.9 684.681 L1340.46 684.681 L1341.02 684.681 L1341.57 684.681 L1342.13 684.681 L1342.69 684.681 L1343.25 684.681 L1343.81 684.681 L1344.37 684.681 L1344.93 684.681 L1345.49 684.681 L1346.05 684.681 L1346.61 684.681 L1347.17 684.681 L1347.73 684.681 L1348.29 684.681 L1348.84 684.681 L1349.4 684.681 L1349.96 684.681 L1350.52 684.681 L1351.08 684.681 L1351.64 684.681 L1352.2 684.681 L1352.76 684.681 L1353.32 684.681 L1353.88 684.681 L1354.44 684.681 L1355 684.681 L1355.56 684.681 L1356.12 684.681 L1356.67 684.681 L1357.23 684.681 L1357.79 684.681 L1358.35 684.681 L1358.91 684.681 L1359.47 684.681 L1360.03 684.681 L1360.59 684.681 L1361.15 684.681 L1361.71 684.681 L1362.27 684.681 L1362.83 684.681 L1363.39 684.681 L1363.94 684.681 L1364.5 684.681 L1365.06 684.681 L1365.62 684.681 L1366.18 684.681 L1366.74 684.681 L1367.3 684.681 L1367.86 684.681 L1368.42 684.681 L1368.98 684.681 L1369.54 684.681 L1370.1 684.681 L1370.66 684.681 L1371.21 684.681 L1371.77 684.681 L1372.33 684.681 L1372.89 684.681 L1373.45 684.681 L1374.01 684.681 L1374.57 684.681 L1375.13 684.681 L1375.69 684.681 L1376.25 684.681 L1376.81 684.681 L1377.37 684.681 L1377.93 684.681 L1378.49 684.681 L1379.04 684.681 L1379.6 684.681 L1380.16 684.681 L1380.72 684.681 L1381.28 684.681 L1381.84 684.681 L1382.4 684.681 L1382.96 684.681 L1383.52 684.681 L1384.08 684.681 L1384.64 684.681 L1385.2 684.681 L1385.76 684.681 L1386.31 684.681 L1386.87 684.681 L1387.43 684.681 L1387.99 684.681 L1388.55 684.681 L1389.11 684.681 L1389.67 684.681 L1390.23 684.681 L1390.79 684.681 L1391.35 684.681 L1391.91 684.681 L1392.47 684.681 L1393.03 684.681 L1393.58 684.681 L1394.14 684.681 L1394.7 684.681 L1395.26 684.681 L1395.82 684.681 L1396.38 684.681 L1396.94 684.681 L1397.5 684.681 L1398.06 684.681 L1398.62 684.681 L1399.18 684.681 L1399.74 684.681 L1400.3 684.681 L1400.86 684.681 L1401.41 684.681 L1401.97 684.681 L1402.53 684.681 L1403.09 684.681 L1403.65 684.681 L1404.21 684.681 L1404.77 684.681 L1405.33 684.681 L1405.89 684.681 L1406.45 684.681 L1407.01 684.681 L1407.57 684.681 L1408.13 684.681 L1408.68 684.681 L1409.24 684.681 L1409.8 684.681 L1410.36 684.681 L1410.92 684.681 L1411.48 684.681 L1412.04 684.681 L1412.6 684.681 L1413.16 684.681 L1413.72 684.681 L1414.28 684.681 L1414.84 684.681 L1415.4 684.681 L1415.95 684.681 L1416.51 684.681 L1417.07 684.681 L1417.63 684.681 L1418.19 684.681 L1418.75 684.681 L1419.31 684.681 L1419.87 684.681 L1420.43 684.681 L1420.99 684.681 L1421.55 684.681 L1422.11 684.681 L1422.67 684.681 L1423.23 684.681 L1423.78 684.681 L1424.34 684.681 L1424.9 684.681 L1425.46 684.681 L1426.02 684.681 L1426.58 684.681 L1427.14 684.681 L1427.7 684.681 L1428.26 684.681 L1428.82 684.681 L1429.38 684.681 L1429.94 684.681 L1430.5 684.681 L1431.05 684.681 L1431.61 684.681 L1432.17 684.681 L1432.73 684.681 L1433.29 684.681 L1433.85 684.681 L1434.41 684.681 L1434.97 684.681 L1435.53 684.681 L1436.09 684.681 L1436.65 684.681 L1437.21 684.681 L1437.77 684.681 L1438.33 684.681 L1438.88 684.681 L1439.44 684.681 L1440 684.681 L1440.56 684.681 L1441.12 684.681 L1441.68 684.681 L1442.24 684.681 L1442.8 684.681 L1443.36 684.681 L1443.92 684.681 L1444.48 684.681 L1445.04 684.681 L1445.6 684.681 L1446.15 684.681 L1446.71 684.681 L1447.27 684.681 L1447.83 684.681 L1448.39 684.681 L1448.95 684.681 L1449.51 684.681 L1450.07 684.681 L1450.63 684.681 L1451.19 684.681 L1451.75 684.681 L1452.31 684.681 L1452.87 684.681 L1453.42 684.681 L1453.98 684.681 L1454.54 684.681 L1455.1 684.681 L1455.66 684.681 L1456.22 684.681 L1456.78 684.681 L1457.34 684.681 L1457.9 684.681 L1458.46 684.681 L1459.02 684.681 L1459.58 684.681 L1460.14 684.681 L1460.7 684.681 L1461.25 684.681 L1461.81 684.681 L1462.37 684.681 L1462.93 684.681 L1463.49 684.681 L1464.05 684.681 L1464.61 684.681 L1465.17 684.681 L1465.73 684.681 L1466.29 684.681 L1466.85 684.681 L1467.41 684.681 L1467.97 684.681 L1468.52 684.681 L1469.08 684.681 L1469.64 684.681 L1470.2 684.681 L1470.76 684.681 L1471.32 684.681 L1471.88 684.681 L1472.44 684.681 L1473 684.681 L1473.56 684.681 L1474.12 684.681 L1474.68 684.681 L1475.24 684.681 L1475.79 684.681 L1476.35 684.681 L1476.91 684.681 L1477.47 684.681 L1478.03 684.681 L1478.59 684.681 L1479.15 684.681 L1479.71 684.681 L1480.27 684.681 L1480.83 684.681 L1481.39 684.681 L1481.95 684.681 L1482.51 684.681 L1483.07 684.681 L1483.62 684.681 L1484.18 684.681 L1484.74 684.681 L1485.3 684.681 L1485.86 684.681 L1486.42 684.681 L1486.98 684.681 L1487.54 684.681 L1488.1 684.681 L1488.66 684.681 L1489.22 684.681 L1489.78 684.681 L1490.34 684.681 L1490.89 684.681 L1491.45 684.681 L1492.01 684.681 L1492.57 684.681 L1493.13 684.681 L1493.69 684.681 L1494.25 684.681 L1494.81 684.681 L1495.37 684.681 L1495.93 684.681 L1496.49 684.681 L1497.05 684.681 L1497.61 684.681 L1498.16 684.681 L1498.72 684.681 L1499.28 684.681 L1499.84 684.681 L1500.4 684.681 L1500.96 684.681 L1501.52 684.681 L1502.08 684.681 L1502.64 684.681 L1503.2 684.681 L1503.76 684.681 L1504.32 684.681 L1504.88 684.681 L1505.44 684.681 L1505.99 684.681 L1506.55 684.681 L1507.11 684.681 L1507.67 684.681 L1508.23 684.681 L1508.79 684.681 L1509.35 684.681 L1509.91 684.681 L1510.47 684.681 L1511.03 684.681 L1511.59 684.681 L1512.15 684.681 L1512.71 684.681 L1513.26 684.681 L1513.82 684.681 L1514.38 684.681 L1514.94 684.681 L1515.5 684.681 L1516.06 684.681 L1516.62 684.681 L1517.18 684.681 L1517.74 684.681 L1518.3 684.681 L1518.86 684.681 L1519.42 684.681 L1519.98 684.681 L1520.53 684.681 L1521.09 684.681 L1521.65 684.681 L1522.21 684.681 L1522.77 684.681 L1523.33 684.681 L1523.89 684.681 L1524.45 684.681 L1525.01 684.681 L1525.57 684.681 L1526.13 684.681 L1526.69 684.681 L1527.25 684.681 L1527.81 684.681 L1528.36 684.681 L1528.92 684.681 L1529.48 684.681 L1530.04 684.681 L1530.6 684.681 L1531.16 684.681 L1531.72 684.681 L1532.28 684.681 L1532.84 684.681 L1533.4 684.681 L1533.96 684.681 L1534.52 684.681 L1535.08 684.681 L1535.63 684.681 L1536.19 684.681 L1536.75 684.681 L1537.31 684.681 L1537.87 684.681 L1538.43 684.681 L1538.99 684.681 L1539.55 684.681 L1540.11 684.681 L1540.67 684.681 L1541.23 684.681 L1541.79 684.681 L1542.35 684.681 L1542.9 684.681 L1543.46 684.681 L1544.02 684.681 L1544.58 684.681 L1545.14 684.681 L1545.7 684.681 L1546.26 684.681 L1546.82 684.681 L1547.38 684.681 L1547.94 684.681 L1548.5 684.681 L1549.06 684.681 L1549.62 684.681 L1550.18 684.681 L1550.73 684.681 L1551.29 684.681 L1551.85 684.681 L1552.41 684.681 L1552.97 684.681 L1553.53 684.681 L1554.09 684.681 L1554.65 684.681 L1555.21 684.681 L1555.77 684.681 L1556.33 684.681 L1556.89 684.681 L1557.45 684.681 L1558 684.681 L1558.56 684.681 L1559.12 684.681 L1559.68 684.681 L1560.24 684.681 L1560.8 684.681 L1561.36 684.681 L1561.92 684.681 L1562.48 684.681 L1563.04 684.681 L1563.6 684.681 L1564.16 684.681 L1564.72 684.681 L1565.28 684.681 L1565.83 684.681 L1566.39 684.681 L1566.95 684.681 L1567.51 684.681 L1568.07 684.681 L1568.63 684.681 L1569.19 684.681 L1569.75 684.681 L1570.31 684.681 L1570.87 684.681 L1571.43 684.681 L1571.99 684.681 L1572.55 684.681 L1573.1 684.681 L1573.66 684.681 L1574.22 684.681 L1574.78 684.681 L1575.34 684.681 L1575.9 684.681 L1576.46 684.681 L1577.02 684.681 L1577.58 684.681 L1578.14 684.681 L1578.7 684.681 L1579.26 684.681 L1579.82 684.681 L1580.37 684.681 L1580.93 684.681 L1581.49 684.681 L1582.05 684.681 L1582.61 684.681 L1583.17 684.681 L1583.73 684.681 L1584.29 684.681 L1584.85 684.681 L1585.41 684.681 L1585.97 684.681 L1586.53 684.681 L1587.09 684.681 L1587.65 684.681 L1588.2 684.681 L1588.76 684.681 L1589.32 684.681 L1589.88 684.681 L1590.44 684.681 L1591 684.681 L1591.56 684.681 L1592.12 684.681 L1592.68 684.681 L1593.24 684.681 L1593.8 684.681 L1594.36 684.681 L1594.92 684.681 L1595.47 684.681 L1596.03 684.681 L1596.59 684.681 L1597.15 684.681 L1597.71 684.681 L1598.27 684.681 L1598.83 684.681 L1599.39 684.681 L1599.95 684.681 L1600.51 684.681 L1601.07 684.681 L1601.63 684.681 L1602.19 684.681 L1602.74 684.681 L1603.3 684.681 L1603.86 684.681 L1604.42 684.681 L1604.98 684.681 L1605.54 684.681 L1606.1 684.681 L1606.66 684.681 L1607.22 684.681 L1607.78 684.681 L1608.34 684.681 L1608.9 684.681 L1609.46 684.681 L1610.02 684.681 L1610.57 684.681 L1611.13 684.681 L1611.69 684.681 L1612.25 684.681 L1612.81 684.681 L1613.37 684.681 L1613.93 684.681 L1614.49 684.681 L1615.05 684.681 L1615.61 684.681 L1616.17 684.681 L1616.73 684.681 L1617.29 684.681 L1617.84 684.681 L1618.4 684.681 L1618.96 684.681 L1619.52 684.681 L1620.08 684.681 L1620.64 684.681 L1621.2 684.681 L1621.76 684.681 L1622.32 684.681 L1622.88 684.681 L1623.44 684.681 L1624 684.681 L1624.56 684.681 L1625.11 684.681 L1625.67 684.681 L1626.23 684.681 L1626.79 684.681 L1627.35 684.681 L1627.91 684.681 L1628.47 684.681 L1629.03 684.681 L1629.59 684.681 L1630.15 684.681 L1630.71 684.681 L1631.27 684.681 L1631.83 684.681 L1632.39 684.681 L1632.94 684.681 L1633.5 684.681 L1634.06 684.681 L1634.62 684.681 L1635.18 684.681 L1635.74 684.681 L1636.3 684.681 L1636.86 684.681 L1637.42 684.681 L1637.98 684.681 L1638.54 684.681 L1639.1 684.681 L1639.66 684.681 L1640.21 684.681 L1640.77 684.681 L1641.33 684.681 L1641.89 684.681 L1642.45 684.681 L1643.01 684.681 L1643.57 684.681 L1644.13 684.681 L1644.69 684.681 L1645.25 684.681 L1645.81 684.681 L1646.37 684.681 L1646.93 684.681 L1647.48 684.681 L1648.04 684.681 L1648.6 684.681 L1649.16 684.681 L1649.72 684.681 L1650.28 684.681 L1650.84 684.681 L1651.4 684.681 L1651.96 684.681 L1652.52 684.681 L1653.08 684.681 L1653.64 684.681 L1654.2 684.681 L1654.76 684.681 L1655.31 684.681 L1655.87 684.681 L1656.43 684.681 L1656.99 684.681 L1657.55 684.681 L1658.11 684.681 L1658.67 684.681 L1659.23 684.681 L1659.79 684.681 L1660.35 684.681 L1660.91 684.681 L1661.47 684.681 L1662.03 684.681 L1662.58 684.681 L1663.14 684.681 L1663.7 684.681 L1664.26 684.681 L1664.82 684.681 L1665.38 684.681 L1665.94 684.681 L1666.5 684.681 L1667.06 684.681 L1667.62 684.681 L1668.18 684.681 L1668.74 684.681 L1669.3 684.681 L1669.85 684.681 L1670.41 684.681 L1670.97 684.681 L1671.53 684.681 L1672.09 684.681 L1672.65 684.681 L1673.21 684.681 L1673.77 684.681 L1674.33 684.681 L1674.89 684.681 L1675.45 684.681 L1676.01 684.681 L1676.57 684.681 L1677.13 684.681 L1677.68 684.681 L1678.24 684.681 L1678.8 684.681 L1679.36 684.681 L1679.92 684.681 L1680.48 684.681 L1681.04 684.681 L1681.6 684.681 L1682.16 684.681 L1682.72 684.681 L1683.28 684.681 L1683.84 684.681 L1684.4 684.681 L1684.95 684.681 L1685.51 684.681 L1686.07 684.681 L1686.63 684.681 L1687.19 684.681 L1687.75 684.681 L1688.31 684.681 L1688.87 684.681 L1689.43 684.681 L1689.99 684.681 L1690.55 684.681 L1691.11 684.681 L1691.67 684.681 L1692.23 684.681 L1692.78 684.681 L1693.34 684.681 L1693.9 684.681 L1694.46 684.681 L1695.02 684.681 L1695.58 684.681 L1696.14 684.681 L1696.7 684.681 L1697.26 684.681 L1697.82 684.681 L1698.38 684.681 L1698.94 684.681 L1699.5 684.681 L1700.05 684.681 L1700.61 684.681 L1701.17 684.681 L1701.73 684.681 L1702.29 684.681 L1702.85 684.681 L1703.41 684.681 L1703.97 684.681 L1704.53 684.681 L1705.09 684.681 L1705.65 684.681 L1706.21 684.681 L1706.77 684.681 L1707.32 684.681 L1707.88 684.681 L1708.44 684.681 L1709 684.681 L1709.56 684.681 L1710.12 684.681 L1710.68 684.681 L1711.24 684.681 L1711.8 684.681 L1712.36 684.681 L1712.92 684.681 L1713.48 684.681 L1714.04 684.681 L1714.6 684.681 L1715.15 684.681 L1715.71 684.681 L1716.27 684.681 L1716.83 684.681 L1717.39 684.681 L1717.95 684.681 L1718.51 684.681 L1719.07 684.681 L1719.63 684.681 L1720.19 684.681 L1720.75 684.681 L1721.31 684.681 L1721.87 684.681 L1722.42 684.681 L1722.98 684.681 L1723.54 684.681 L1724.1 684.681 L1724.66 684.681 L1725.22 684.681 L1725.78 684.681 L1726.34 684.681 L1726.9 684.681 L1727.46 684.681 L1728.02 684.681 L1728.58 684.681 L1729.14 684.681 L1729.69 684.681 L1730.25 684.681 L1730.81 684.681 L1731.37 684.681 L1731.93 684.681 L1732.49 684.681 L1733.05 684.681 L1733.61 684.681 L1734.17 684.681 L1734.73 684.681 L1735.29 684.681 L1735.85 684.681 L1736.41 684.681 L1736.97 684.681 L1737.52 684.681 L1738.08 684.681 L1738.64 684.681 L1739.2 684.681 L1739.76 684.681 L1740.32 684.681 L1740.88 684.681 L1741.44 684.681 L1742 684.681 L1742.56 684.681 L1743.12 684.681 L1743.68 684.681 L1744.24 684.681 L1744.79 684.681 L1745.35 684.681 L1745.91 684.681 L1746.47 684.681 L1747.03 684.681 L1747.59 684.681 L1748.15 684.681 L1748.71 684.681 L1749.27 684.681 L1749.83 684.681 L1750.39 684.681 L1750.95 684.681 L1751.51 684.681 L1752.06 684.681 L1752.62 684.681 L1753.18 684.681 L1753.74 684.681 L1754.3 684.681 L1754.86 684.681 L1755.42 684.681 L1755.98 684.681 L1756.54 684.681 L1757.1 684.681 L1757.66 684.681 L1758.22 684.681 L1758.78 684.681 L1759.34 684.681 L1759.89 684.681 L1760.45 684.681 L1761.01 684.681 L1761.57 684.681 L1762.13 684.681 L1762.69 684.681 L1763.25 684.681 L1763.81 684.681 L1764.37 684.681 L1764.93 684.681 L1765.49 684.681 L1766.05 684.681 L1766.61 684.681 L1767.16 684.681 L1767.72 684.681 L1768.28 684.681 L1768.84 684.681 L1769.4 684.681 L1769.96 684.681 L1770.52 684.681 L1771.08 684.681 L1771.64 684.681 L1772.2 684.681 L1772.76 684.681 L1773.32 684.681 L1773.88 684.681 L1774.43 684.681 L1774.99 684.681 L1775.55 684.681 L1776.11 684.681 L1776.67 684.681 L1777.23 684.681 L1777.79 684.681 L1778.35 684.681 L1778.91 684.681 L1779.47 684.681 L1780.03 684.681 L1780.59 684.681 L1781.15 684.681 L1781.71 684.681 L1782.26 684.681 L1782.82 684.681 L1783.38 684.681 L1783.94 684.681 L1784.5 684.681 L1785.06 684.681 L1785.62 684.681 L1786.18 684.681 L1786.74 684.681 L1787.3 684.681 L1787.86 684.681 L1788.42 684.681 L1788.98 684.681 L1789.53 684.681 L1790.09 684.681 L1790.65 684.681 L1791.21 684.681 L1791.77 684.681 L1792.33 684.681 L1792.89 684.681 L1793.45 684.681 L1794.01 684.681 L1794.57 684.681 L1795.13 684.681 L1795.69 684.681 L1796.25 684.681 L1796.8 684.681 L1797.36 684.681 L1797.92 684.681 L1798.48 684.681 L1799.04 684.681 L1799.6 684.681 L1800.16 684.681 L1800.72 684.681 L1801.28 684.681 L1801.84 684.681 L1802.4 684.681 L1802.96 684.681 L1803.52 684.681 L1804.08 684.681 L1804.63 684.681 L1805.19 684.681 L1805.75 684.681 L1806.31 684.681 L1806.87 684.681 L1807.43 684.681 L1807.99 684.681 L1808.55 684.681 L1809.11 684.681 L1809.67 684.681 L1810.23 684.681 L1810.79 684.681 L1811.35 684.681 L1811.9 684.681 L1812.46 684.681 L1813.02 684.681 L1813.58 684.681 L1814.14 684.681 L1814.7 684.681 L1815.26 684.681 L1815.82 684.681 L1816.38 684.681 L1816.94 684.681 L1817.5 684.681 L1818.06 684.681 L1818.62 684.681 L1819.18 684.681 L1819.73 684.681 L1820.29 684.681 L1820.85 684.681 L1821.41 684.681 L1821.97 684.681 L1822.53 684.681 L1823.09 684.681 L1823.65 684.681 L1824.21 684.681 L1824.77 684.681 L1825.33 684.681 L1825.89 684.681 L1826.45 684.681 L1827 684.681 L1827.56 684.681 L1828.12 684.681 L1828.68 684.681 L1829.24 684.681 L1829.8 684.681 L1830.36 684.681 L1830.92 684.681 L1831.48 684.681 L1832.04 684.681 L1832.6 684.681 L1833.16 684.681 L1833.72 684.681 L1834.27 684.681 L1834.83 684.681 L1835.39 684.681 L1835.95 684.681 L1836.51 684.681 L1837.07 684.681 L1837.63 684.681 L1838.19 684.681 L1838.19 682.803 L1837.63 682.803 L1837.07 682.803 L1836.51 682.803 L1835.95 682.803 L1835.39 682.803 L1834.83 682.803 L1834.27 682.803 L1833.72 682.803 L1833.16 682.803 L1832.6 682.803 L1832.04 682.803 L1831.48 682.803 L1830.92 682.803 L1830.36 682.803 L1829.8 682.803 L1829.24 682.803 L1828.68 682.803 L1828.12 682.803 L1827.56 682.803 L1827 682.803 L1826.45 682.803 L1825.89 682.803 L1825.33 682.803 L1824.77 682.803 L1824.21 682.803 L1823.65 682.803 L1823.09 682.803 L1822.53 682.803 L1821.97 682.803 L1821.41 682.803 L1820.85 682.803 L1820.29 682.803 L1819.73 682.803 L1819.18 682.803 L1818.62 682.803 L1818.06 682.803 L1817.5 682.803 L1816.94 682.803 L1816.38 682.803 L1815.82 682.803 L1815.26 682.803 L1814.7 682.803 L1814.14 682.803 L1813.58 682.803 L1813.02 682.803 L1812.46 682.803 L1811.9 682.803 L1811.35 682.803 L1810.79 682.803 L1810.23 682.803 L1809.67 682.803 L1809.11 682.803 L1808.55 682.803 L1807.99 682.803 L1807.43 682.803 L1806.87 682.803 L1806.31 682.803 L1805.75 682.803 L1805.19 682.803 L1804.63 682.803 L1804.08 682.803 L1803.52 682.803 L1802.96 682.803 L1802.4 682.803 L1801.84 682.803 L1801.28 682.803 L1800.72 682.803 L1800.16 682.803 L1799.6 682.803 L1799.04 682.803 L1798.48 682.803 L1797.92 682.803 L1797.36 682.803 L1796.8 682.803 L1796.25 682.803 L1795.69 682.803 L1795.13 682.803 L1794.57 682.803 L1794.01 682.803 L1793.45 682.803 L1792.89 682.803 L1792.33 682.803 L1791.77 682.803 L1791.21 682.803 L1790.65 682.803 L1790.09 682.803 L1789.53 682.803 L1788.98 682.803 L1788.42 682.803 L1787.86 682.803 L1787.3 682.803 L1786.74 682.803 L1786.18 682.803 L1785.62 682.803 L1785.06 682.803 L1784.5 682.803 L1783.94 682.803 L1783.38 682.803 L1782.82 682.803 L1782.26 682.803 L1781.71 682.803 L1781.15 682.803 L1780.59 682.803 L1780.03 682.803 L1779.47 682.803 L1778.91 682.803 L1778.35 682.803 L1777.79 682.803 L1777.23 682.803 L1776.67 682.803 L1776.11 682.803 L1775.55 682.803 L1774.99 682.803 L1774.43 682.803 L1773.88 682.803 L1773.32 682.803 L1772.76 682.803 L1772.2 682.803 L1771.64 682.803 L1771.08 682.803 L1770.52 682.803 L1769.96 682.803 L1769.4 682.803 L1768.84 682.803 L1768.28 682.803 L1767.72 682.803 L1767.16 682.803 L1766.61 682.803 L1766.05 682.803 L1765.49 682.803 L1764.93 682.803 L1764.37 682.803 L1763.81 682.803 L1763.25 682.803 L1762.69 682.803 L1762.13 682.803 L1761.57 682.803 L1761.01 682.803 L1760.45 682.803 L1759.89 682.803 L1759.34 682.803 L1758.78 682.803 L1758.22 682.803 L1757.66 682.803 L1757.1 682.803 L1756.54 682.803 L1755.98 682.803 L1755.42 682.803 L1754.86 682.803 L1754.3 682.803 L1753.74 682.803 L1753.18 682.803 L1752.62 682.803 L1752.06 682.803 L1751.51 682.803 L1750.95 682.803 L1750.39 682.803 L1749.83 682.803 L1749.27 682.803 L1748.71 682.803 L1748.15 682.803 L1747.59 682.803 L1747.03 682.803 L1746.47 682.803 L1745.91 682.803 L1745.35 682.803 L1744.79 682.803 L1744.24 682.803 L1743.68 682.803 L1743.12 682.803 L1742.56 682.803 L1742 682.803 L1741.44 682.803 L1740.88 682.803 L1740.32 682.803 L1739.76 682.803 L1739.2 682.803 L1738.64 682.803 L1738.08 682.803 L1737.52 682.803 L1736.97 682.803 L1736.41 682.803 L1735.85 682.803 L1735.29 682.803 L1734.73 682.803 L1734.17 682.803 L1733.61 682.803 L1733.05 682.803 L1732.49 682.803 L1731.93 682.803 L1731.37 682.803 L1730.81 682.803 L1730.25 682.803 L1729.69 682.803 L1729.14 682.803 L1728.58 682.803 L1728.02 682.803 L1727.46 682.803 L1726.9 682.803 L1726.34 682.803 L1725.78 682.803 L1725.22 682.803 L1724.66 682.803 L1724.1 682.803 L1723.54 682.803 L1722.98 682.803 L1722.42 682.803 L1721.87 682.803 L1721.31 682.803 L1720.75 682.803 L1720.19 682.803 L1719.63 682.803 L1719.07 682.803 L1718.51 682.803 L1717.95 682.803 L1717.39 682.803 L1716.83 682.803 L1716.27 682.803 L1715.71 682.803 L1715.15 682.803 L1714.6 682.803 L1714.04 682.803 L1713.48 682.803 L1712.92 682.803 L1712.36 682.803 L1711.8 682.803 L1711.24 682.803 L1710.68 682.803 L1710.12 682.803 L1709.56 682.803 L1709 682.803 L1708.44 682.803 L1707.88 682.803 L1707.32 682.803 L1706.77 682.803 L1706.21 682.803 L1705.65 682.803 L1705.09 682.803 L1704.53 682.803 L1703.97 682.803 L1703.41 682.803 L1702.85 682.803 L1702.29 682.803 L1701.73 682.803 L1701.17 682.803 L1700.61 682.803 L1700.05 682.803 L1699.5 682.803 L1698.94 682.803 L1698.38 682.803 L1697.82 682.803 L1697.26 682.803 L1696.7 682.803 L1696.14 682.803 L1695.58 682.803 L1695.02 682.803 L1694.46 682.803 L1693.9 682.803 L1693.34 682.803 L1692.78 682.803 L1692.23 682.803 L1691.67 682.803 L1691.11 682.803 L1690.55 682.803 L1689.99 682.803 L1689.43 682.803 L1688.87 682.803 L1688.31 682.803 L1687.75 682.803 L1687.19 682.803 L1686.63 682.803 L1686.07 682.803 L1685.51 682.803 L1684.95 682.803 L1684.4 682.803 L1683.84 682.803 L1683.28 682.803 L1682.72 682.803 L1682.16 682.803 L1681.6 682.803 L1681.04 682.803 L1680.48 682.803 L1679.92 682.803 L1679.36 682.803 L1678.8 682.803 L1678.24 682.803 L1677.68 682.803 L1677.13 682.803 L1676.57 682.803 L1676.01 682.803 L1675.45 682.803 L1674.89 682.803 L1674.33 682.803 L1673.77 682.803 L1673.21 682.803 L1672.65 682.803 L1672.09 682.803 L1671.53 682.803 L1670.97 682.803 L1670.41 682.803 L1669.85 682.803 L1669.3 682.803 L1668.74 682.803 L1668.18 682.803 L1667.62 682.803 L1667.06 682.803 L1666.5 682.803 L1665.94 682.803 L1665.38 682.803 L1664.82 682.803 L1664.26 682.803 L1663.7 682.803 L1663.14 682.803 L1662.58 682.803 L1662.03 682.803 L1661.47 682.803 L1660.91 682.803 L1660.35 682.803 L1659.79 682.803 L1659.23 682.803 L1658.67 682.803 L1658.11 682.803 L1657.55 682.803 L1656.99 682.803 L1656.43 682.803 L1655.87 682.803 L1655.31 682.803 L1654.76 682.803 L1654.2 682.803 L1653.64 682.803 L1653.08 682.803 L1652.52 682.803 L1651.96 682.803 L1651.4 682.803 L1650.84 682.803 L1650.28 682.803 L1649.72 682.803 L1649.16 682.803 L1648.6 682.803 L1648.04 682.803 L1647.48 682.803 L1646.93 682.803 L1646.37 682.803 L1645.81 682.803 L1645.25 682.803 L1644.69 682.803 L1644.13 682.803 L1643.57 682.803 L1643.01 682.803 L1642.45 682.803 L1641.89 682.803 L1641.33 682.803 L1640.77 682.803 L1640.21 682.803 L1639.66 682.803 L1639.1 682.803 L1638.54 682.803 L1637.98 682.803 L1637.42 682.803 L1636.86 682.803 L1636.3 682.803 L1635.74 682.803 L1635.18 682.803 L1634.62 682.803 L1634.06 682.803 L1633.5 682.803 L1632.94 682.803 L1632.39 682.803 L1631.83 682.803 L1631.27 682.803 L1630.71 682.803 L1630.15 682.803 L1629.59 682.803 L1629.03 682.803 L1628.47 682.803 L1627.91 682.803 L1627.35 682.803 L1626.79 682.803 L1626.23 682.803 L1625.67 682.803 L1625.11 682.803 L1624.56 682.803 L1624 682.803 L1623.44 682.803 L1622.88 682.803 L1622.32 682.803 L1621.76 682.803 L1621.2 682.803 L1620.64 682.803 L1620.08 682.803 L1619.52 682.803 L1618.96 682.803 L1618.4 682.803 L1617.84 682.803 L1617.29 682.803 L1616.73 682.803 L1616.17 682.803 L1615.61 682.803 L1615.05 682.803 L1614.49 682.803 L1613.93 682.803 L1613.37 682.803 L1612.81 682.803 L1612.25 682.803 L1611.69 682.803 L1611.13 682.803 L1610.57 682.803 L1610.02 682.803 L1609.46 682.803 L1608.9 682.803 L1608.34 682.803 L1607.78 682.803 L1607.22 682.803 L1606.66 682.803 L1606.1 682.803 L1605.54 682.803 L1604.98 682.803 L1604.42 682.803 L1603.86 682.803 L1603.3 682.803 L1602.74 682.803 L1602.19 682.803 L1601.63 682.803 L1601.07 682.803 L1600.51 682.803 L1599.95 682.803 L1599.39 682.803 L1598.83 682.803 L1598.27 682.803 L1597.71 682.803 L1597.15 682.803 L1596.59 682.803 L1596.03 682.803 L1595.47 682.803 L1594.92 682.803 L1594.36 682.803 L1593.8 682.803 L1593.24 682.803 L1592.68 682.803 L1592.12 682.803 L1591.56 682.803 L1591 682.803 L1590.44 682.803 L1589.88 682.803 L1589.32 682.803 L1588.76 682.803 L1588.2 682.803 L1587.65 682.803 L1587.09 682.803 L1586.53 682.803 L1585.97 682.803 L1585.41 682.803 L1584.85 682.803 L1584.29 682.803 L1583.73 682.803 L1583.17 682.803 L1582.61 682.803 L1582.05 682.803 L1581.49 682.803 L1580.93 682.803 L1580.37 682.803 L1579.82 682.803 L1579.26 682.803 L1578.7 682.803 L1578.14 682.803 L1577.58 682.803 L1577.02 682.803 L1576.46 682.803 L1575.9 682.803 L1575.34 682.803 L1574.78 682.803 L1574.22 682.803 L1573.66 682.803 L1573.1 682.803 L1572.55 682.803 L1571.99 682.803 L1571.43 682.803 L1570.87 682.803 L1570.31 682.803 L1569.75 682.803 L1569.19 682.803 L1568.63 682.803 L1568.07 682.803 L1567.51 682.803 L1566.95 682.803 L1566.39 682.803 L1565.83 682.803 L1565.28 682.803 L1564.72 682.803 L1564.16 682.803 L1563.6 682.803 L1563.04 682.803 L1562.48 682.803 L1561.92 682.803 L1561.36 682.803 L1560.8 682.803 L1560.24 682.803 L1559.68 682.803 L1559.12 682.803 L1558.56 682.803 L1558 682.803 L1557.45 682.803 L1556.89 682.803 L1556.33 682.803 L1555.77 682.803 L1555.21 682.803 L1554.65 682.803 L1554.09 682.803 L1553.53 682.803 L1552.97 682.803 L1552.41 682.803 L1551.85 682.803 L1551.29 682.803 L1550.73 682.803 L1550.18 682.803 L1549.62 682.803 L1549.06 682.803 L1548.5 682.803 L1547.94 682.803 L1547.38 682.803 L1546.82 682.803 L1546.26 682.803 L1545.7 682.803 L1545.14 682.803 L1544.58 682.803 L1544.02 682.803 L1543.46 682.803 L1542.9 682.803 L1542.35 682.803 L1541.79 682.803 L1541.23 682.803 L1540.67 682.803 L1540.11 682.803 L1539.55 682.803 L1538.99 682.803 L1538.43 682.803 L1537.87 682.803 L1537.31 682.803 L1536.75 682.803 L1536.19 682.803 L1535.63 682.803 L1535.08 682.803 L1534.52 682.803 L1533.96 682.803 L1533.4 682.803 L1532.84 682.803 L1532.28 682.803 L1531.72 682.803 L1531.16 682.803 L1530.6 682.803 L1530.04 682.803 L1529.48 682.803 L1528.92 682.803 L1528.36 682.803 L1527.81 682.803 L1527.25 682.803 L1526.69 682.803 L1526.13 682.803 L1525.57 682.803 L1525.01 682.803 L1524.45 682.803 L1523.89 682.803 L1523.33 682.803 L1522.77 682.803 L1522.21 682.803 L1521.65 682.803 L1521.09 682.803 L1520.53 682.803 L1519.98 682.803 L1519.42 682.803 L1518.86 682.803 L1518.3 682.803 L1517.74 682.803 L1517.18 682.803 L1516.62 682.803 L1516.06 682.803 L1515.5 682.803 L1514.94 682.803 L1514.38 682.803 L1513.82 682.803 L1513.26 682.803 L1512.71 682.803 L1512.15 682.803 L1511.59 682.803 L1511.03 682.803 L1510.47 682.803 L1509.91 682.803 L1509.35 682.803 L1508.79 682.803 L1508.23 682.803 L1507.67 682.803 L1507.11 682.803 L1506.55 682.803 L1505.99 682.803 L1505.44 682.803 L1504.88 682.803 L1504.32 682.803 L1503.76 682.803 L1503.2 682.803 L1502.64 682.803 L1502.08 682.803 L1501.52 682.803 L1500.96 682.803 L1500.4 682.803 L1499.84 682.803 L1499.28 682.803 L1498.72 682.803 L1498.16 682.803 L1497.61 682.803 L1497.05 682.803 L1496.49 682.803 L1495.93 682.803 L1495.37 682.803 L1494.81 682.803 L1494.25 682.803 L1493.69 682.803 L1493.13 682.803 L1492.57 682.803 L1492.01 682.803 L1491.45 682.803 L1490.89 682.803 L1490.34 682.803 L1489.78 682.803 L1489.22 682.803 L1488.66 682.803 L1488.1 682.803 L1487.54 682.803 L1486.98 682.803 L1486.42 682.803 L1485.86 682.803 L1485.3 682.803 L1484.74 682.803 L1484.18 682.803 L1483.62 682.803 L1483.07 682.803 L1482.51 682.803 L1481.95 682.803 L1481.39 682.803 L1480.83 682.803 L1480.27 682.803 L1479.71 682.803 L1479.15 682.803 L1478.59 682.803 L1478.03 682.803 L1477.47 682.803 L1476.91 682.803 L1476.35 682.803 L1475.79 682.803 L1475.24 682.803 L1474.68 682.803 L1474.12 682.803 L1473.56 682.803 L1473 682.803 L1472.44 682.803 L1471.88 682.803 L1471.32 682.803 L1470.76 682.803 L1470.2 682.803 L1469.64 682.803 L1469.08 682.803 L1468.52 682.803 L1467.97 682.803 L1467.41 682.803 L1466.85 682.803 L1466.29 682.803 L1465.73 682.803 L1465.17 682.803 L1464.61 682.803 L1464.05 682.803 L1463.49 682.803 L1462.93 682.803 L1462.37 682.803 L1461.81 682.803 L1461.25 682.803 L1460.7 682.803 L1460.14 682.803 L1459.58 682.803 L1459.02 682.803 L1458.46 682.803 L1457.9 682.803 L1457.34 682.803 L1456.78 682.803 L1456.22 682.803 L1455.66 682.803 L1455.1 682.803 L1454.54 682.803 L1453.98 682.803 L1453.42 682.803 L1452.87 682.803 L1452.31 682.803 L1451.75 682.803 L1451.19 682.803 L1450.63 682.803 L1450.07 682.803 L1449.51 682.803 L1448.95 682.803 L1448.39 682.803 L1447.83 682.803 L1447.27 682.803 L1446.71 682.803 L1446.15 682.803 L1445.6 682.803 L1445.04 682.803 L1444.48 682.803 L1443.92 682.803 L1443.36 682.803 L1442.8 682.803 L1442.24 682.803 L1441.68 682.803 L1441.12 682.803 L1440.56 682.803 L1440 682.803 L1439.44 682.803 L1438.88 682.803 L1438.33 682.803 L1437.77 682.803 L1437.21 682.803 L1436.65 682.803 L1436.09 682.803 L1435.53 682.803 L1434.97 682.803 L1434.41 682.803 L1433.85 682.803 L1433.29 682.803 L1432.73 682.803 L1432.17 682.803 L1431.61 682.803 L1431.05 682.803 L1430.5 682.803 L1429.94 682.803 L1429.38 682.803 L1428.82 682.803 L1428.26 682.803 L1427.7 682.803 L1427.14 682.803 L1426.58 682.803 L1426.02 682.803 L1425.46 682.803 L1424.9 682.803 L1424.34 682.803 L1423.78 682.803 L1423.23 682.803 L1422.67 682.803 L1422.11 682.803 L1421.55 682.803 L1420.99 682.803 L1420.43 682.803 L1419.87 682.803 L1419.31 682.803 L1418.75 682.803 L1418.19 682.803 L1417.63 682.803 L1417.07 682.803 L1416.51 682.803 L1415.95 682.803 L1415.4 682.803 L1414.84 682.803 L1414.28 682.803 L1413.72 682.803 L1413.16 682.803 L1412.6 682.803 L1412.04 682.803 L1411.48 682.803 L1410.92 682.803 L1410.36 682.803 L1409.8 682.803 L1409.24 682.803 L1408.68 682.803 L1408.13 682.803 L1407.57 682.803 L1407.01 682.803 L1406.45 682.803 L1405.89 682.803 L1405.33 682.803 L1404.77 682.803 L1404.21 682.803 L1403.65 682.803 L1403.09 682.803 L1402.53 682.803 L1401.97 682.803 L1401.41 682.803 L1400.86 682.803 L1400.3 682.803 L1399.74 682.803 L1399.18 682.803 L1398.62 682.803 L1398.06 682.803 L1397.5 682.803 L1396.94 682.803 L1396.38 682.803 L1395.82 682.803 L1395.26 682.803 L1394.7 682.803 L1394.14 682.803 L1393.58 682.803 L1393.03 682.803 L1392.47 682.803 L1391.91 682.803 L1391.35 682.803 L1390.79 682.803 L1390.23 682.803 L1389.67 682.803 L1389.11 682.803 L1388.55 682.803 L1387.99 682.803 L1387.43 682.803 L1386.87 682.803 L1386.31 682.803 L1385.76 682.803 L1385.2 682.803 L1384.64 682.803 L1384.08 682.803 L1383.52 682.803 L1382.96 682.803 L1382.4 682.803 L1381.84 682.803 L1381.28 682.803 L1380.72 682.803 L1380.16 682.803 L1379.6 682.803 L1379.04 682.803 L1378.49 682.803 L1377.93 682.803 L1377.37 682.803 L1376.81 682.803 L1376.25 682.803 L1375.69 682.803 L1375.13 682.803 L1374.57 682.803 L1374.01 682.803 L1373.45 682.803 L1372.89 682.803 L1372.33 682.803 L1371.77 682.803 L1371.21 682.803 L1370.66 682.803 L1370.1 682.803 L1369.54 682.803 L1368.98 682.803 L1368.42 682.803 L1367.86 682.803 L1367.3 682.803 L1366.74 682.803 L1366.18 682.803 L1365.62 682.803 L1365.06 682.803 L1364.5 682.803 L1363.94 682.803 L1363.39 682.803 L1362.83 682.803 L1362.27 682.803 L1361.71 682.803 L1361.15 682.803 L1360.59 682.803 L1360.03 682.803 L1359.47 682.803 L1358.91 682.803 L1358.35 682.803 L1357.79 682.803 L1357.23 682.803 L1356.67 682.803 L1356.12 682.803 L1355.56 682.803 L1355 682.803 L1354.44 682.803 L1353.88 682.803 L1353.32 682.803 L1352.76 682.803 L1352.2 682.803 L1351.64 682.803 L1351.08 682.803 L1350.52 682.803 L1349.96 682.803 L1349.4 682.803 L1348.84 682.803 L1348.29 682.803 L1347.73 682.803 L1347.17 682.803 L1346.61 682.803 L1346.05 682.803 L1345.49 682.803 L1344.93 682.803 L1344.37 682.803 L1343.81 682.803 L1343.25 682.803 L1342.69 682.803 L1342.13 682.803 L1341.57 682.803 L1341.02 682.803 L1340.46 682.803 L1339.9 682.803 L1339.34 682.803 L1338.78 682.803 L1338.22 682.803 L1337.66 682.803 L1337.1 682.803 L1336.54 682.803 L1335.98 682.803 L1335.42 682.803 L1334.86 682.803 L1334.3 682.803 L1333.75 682.803 L1333.19 682.803 L1332.63 682.803 L1332.07 682.803 L1331.51 682.803 L1330.95 682.803 L1330.39 682.803 L1329.83 682.803 L1329.27 682.803 L1328.71 682.803 L1328.15 682.803 L1327.59 682.803 L1327.03 682.803 L1326.47 682.803 L1325.92 682.803 L1325.36 682.803 L1324.8 682.803 L1324.24 682.803 L1323.68 682.803 L1323.12 682.803 L1322.56 682.803 L1322 682.803 L1321.44 682.803 L1320.88 682.803 L1320.32 682.803 L1319.76 682.803 L1319.2 682.803 L1318.65 682.803 L1318.09 682.803 L1317.53 682.803 L1316.97 682.803 L1316.41 682.803 L1315.85 682.803 L1315.29 682.803 L1314.73 682.803 L1314.17 682.803 L1313.61 682.803 L1313.05 682.803 L1312.49 682.803 L1311.93 682.803 L1311.38 682.803 L1310.82 682.803 L1310.26 682.803 L1309.7 682.803 L1309.14 682.803 L1308.58 682.803 L1308.02 682.803 L1307.46 682.803 L1306.9 682.803 L1306.34 682.803 L1305.78 682.803 L1305.22 682.803 L1304.66 682.803 L1304.1 682.803 L1303.55 682.803 L1302.99 682.803 L1302.43 682.803 L1301.87 682.803 L1301.31 682.803 L1300.75 682.803 L1300.19 682.803 L1299.63 682.803 L1299.07 682.803 L1298.51 682.803 L1297.95 682.803 L1297.39 682.803 L1296.83 682.803 L1296.28 682.803 L1295.72 682.803 L1295.16 682.803 L1294.6 682.803 L1294.04 682.803 L1293.48 682.803 L1292.92 682.803 L1292.36 682.803 L1291.8 682.803 L1291.24 682.803 L1290.68 682.803 L1290.12 682.803 L1289.56 682.803 L1289 682.803 L1288.45 682.803 L1287.89 682.803 L1287.33 682.803 L1286.77 682.803 L1286.21 682.803 L1285.65 682.803 L1285.09 682.803 L1284.53 682.803 L1283.97 682.803 L1283.41 682.803 L1282.85 682.803 L1282.29 682.803 L1281.73 682.803 L1281.18 682.803 L1280.62 682.803 L1280.06 682.803 L1279.5 682.803 L1278.94 682.803 L1278.38 682.803 L1277.82 682.803 L1277.26 682.803 L1276.7 682.803 L1276.14 682.803 L1275.58 682.803 L1275.02 682.803 L1274.46 682.803 L1273.91 682.803 L1273.35 682.803 L1272.79 682.803 L1272.23 682.803 L1271.67 682.803 L1271.11 682.803 L1270.55 682.803 L1269.99 682.803 L1269.43 682.803 L1268.87 682.803 L1268.31 682.803 L1267.75 682.803 L1267.19 682.803 L1266.63 682.803 L1266.08 682.803 L1265.52 682.803 L1264.96 682.803 L1264.4 682.803 L1263.84 682.803 L1263.28 682.803 L1262.72 682.803 L1262.16 682.803 L1261.6 682.803 L1261.04 682.803 L1260.48 682.803 L1259.92 682.803 L1259.36 682.803 L1258.81 682.803 L1258.25 682.803 L1257.69 682.803 L1257.13 682.803 L1256.57 682.803 L1256.01 682.803 L1255.45 682.803 L1254.89 682.803 L1254.33 682.803 L1253.77 682.803 L1253.21 682.803 L1252.65 682.803 L1252.09 682.803 L1251.54 682.803 L1250.98 682.803 L1250.42 682.803 L1249.86 682.803 L1249.3 682.803 L1248.74 682.803 L1248.18 682.803 L1247.62 682.803 L1247.06 682.803 L1246.5 682.803 L1245.94 682.803 L1245.38 682.803 L1244.82 682.803 L1244.26 682.803 L1243.71 682.803 L1243.15 682.803 L1242.59 682.803 L1242.03 682.803 L1241.47 682.803 L1240.91 682.803 L1240.35 682.803 L1239.79 682.803 L1239.23 682.803 L1238.67 682.803 L1238.11 682.803 L1237.55 682.803 L1236.99 682.803 L1236.44 682.803 L1235.88 682.803 L1235.32 682.803 L1234.76 682.803 L1234.2 682.803 L1233.64 682.803 L1233.08 682.803 L1232.52 682.803 L1231.96 682.803 L1231.4 682.803 L1230.84 682.803 L1230.28 682.803 L1229.72 682.803 L1229.17 682.803 L1228.61 682.803 L1228.05 682.803 L1227.49 682.803 L1226.93 682.803 L1226.37 682.803 L1225.81 682.803 L1225.25 682.803 L1224.69 682.803 L1224.13 682.803 L1223.57 682.803 L1223.01 682.803 L1222.45 682.803 L1221.89 682.803 L1221.34 682.803 L1220.78 682.803 L1220.22 682.803 L1219.66 682.803 L1219.1 682.803 L1218.54 682.803 L1217.98 682.803 L1217.42 682.803 L1216.86 682.803 L1216.3 682.803 L1215.74 682.803 L1215.18 682.803 L1214.62 682.803 L1214.07 682.803 L1213.51 682.803 L1212.95 682.803 L1212.39 682.803 L1211.83 682.803 L1211.27 682.803 L1210.71 682.803 L1210.15 682.803 L1209.59 682.803 L1209.03 682.803 L1208.47 682.803 L1207.91 682.803 L1207.35 682.803 L1206.8 682.803 L1206.24 682.803 L1205.68 682.803 L1205.12 682.803 L1204.56 682.803 L1204 682.803 L1203.44 682.803 L1202.88 682.803 L1202.32 682.803 L1201.76 682.803 L1201.2 682.803 L1200.64 682.803 L1200.08 682.803 L1199.52 682.803 L1198.97 682.803 L1198.41 682.803 L1197.85 682.803 L1197.29 682.803 L1196.73 682.803 L1196.17 682.803 L1195.61 682.803 L1195.05 682.803 L1194.49 682.803 L1193.93 682.803 L1193.37 682.803 L1192.81 682.803 L1192.25 682.803 L1191.7 682.803 L1191.14 682.803 L1190.58 682.803 L1190.02 682.803 L1189.46 682.803 L1188.9 682.803 L1188.34 682.803 L1187.78 682.803 L1187.22 682.803 L1186.66 682.803 L1186.1 682.803 L1185.54 682.803 L1184.98 682.803 L1184.43 682.803 L1183.87 682.803 L1183.31 682.803 L1182.75 682.803 L1182.19 682.803 L1181.63 682.803 L1181.07 682.803 L1180.51 682.803 L1179.95 682.803 L1179.39 682.803 L1178.83 682.803 L1178.27 682.803 L1177.71 682.803 L1177.15 682.803 L1176.6 682.803 L1176.04 682.803 L1175.48 682.803 L1174.92 682.803 L1174.36 682.803 L1173.8 682.803 L1173.24 682.803 L1172.68 682.803 L1172.12 682.803 L1171.56 682.803 L1171 682.803 L1170.44 682.803 L1169.88 682.803 L1169.33 682.803 L1168.77 682.803 L1168.21 682.803 L1167.65 682.803 L1167.09 682.803 L1166.53 682.803 L1165.97 682.803 L1165.41 682.803 L1164.85 682.803 L1164.29 682.803 L1163.73 682.803 L1163.17 682.803 L1162.61 682.803 L1162.05 682.803 L1161.5 682.803 L1160.94 682.803 L1160.38 682.803 L1159.82 682.803 L1159.26 682.803 L1158.7 682.803 L1158.14 682.803 L1157.58 682.803 L1157.02 682.803 L1156.46 682.803 L1155.9 682.803 L1155.34 682.803 L1154.78 682.803 L1154.23 682.803 L1153.67 682.803 L1153.11 682.803 L1152.55 682.803 L1151.99 682.803 L1151.43 682.803 L1150.87 682.803 L1150.31 682.803 L1149.75 682.803 L1149.19 682.803 L1148.63 682.803 L1148.07 682.803 L1147.51 682.803 L1146.96 682.803 L1146.4 682.803 L1145.84 682.803 L1145.28 682.803 L1144.72 682.803 L1144.16 682.803 L1143.6 682.803 L1143.04 682.803 L1142.48 682.803 L1141.92 682.803 L1141.36 682.803 L1140.8 682.803 L1140.24 682.803 L1139.68 682.803 L1139.13 682.803 L1138.57 682.803 L1138.01 682.803 L1137.45 682.803 L1136.89 682.803 L1136.33 682.803 L1135.77 682.803 L1135.21 682.803 L1134.65 682.803 L1134.09 682.803 L1133.53 682.803 L1132.97 682.803 L1132.41 682.803 L1131.86 682.803 L1131.3 682.803 L1130.74 682.803 L1130.18 682.803 L1129.62 682.803 L1129.06 682.803 L1128.5 682.803 L1127.94 682.803 L1127.38 682.803 L1126.82 682.803 L1126.26 682.803 L1125.7 682.803 L1125.14 682.803 L1124.59 682.803 L1124.03 682.803 L1123.47 682.803 L1122.91 682.803 L1122.35 682.803 L1121.79 682.803 L1121.23 682.803 L1120.67 682.803 L1120.11 682.803 L1119.55 682.803 L1118.99 682.803 L1118.43 682.803 L1117.87 682.803 L1117.31 682.803 L1116.76 682.803 L1116.2 682.803 L1115.64 682.803 L1115.08 682.803 L1114.52 682.803 L1113.96 682.803 L1113.4 682.803 L1112.84 682.803 L1112.28 682.803 L1111.72 682.803 L1111.16 682.803 L1110.6 682.803 L1110.04 682.803 L1109.49 682.803 L1108.93 682.803 L1108.37 682.803 L1107.81 682.803 L1107.25 682.803 L1106.69 682.803 L1106.13 682.803 L1105.57 682.803 L1105.01 682.803 L1104.45 682.803 L1103.89 682.803 L1103.33 682.803 L1102.77 682.803 L1102.22 682.803 L1101.66 682.803 L1101.1 682.803 L1100.54 682.803 L1099.98 682.803 L1099.42 682.803 L1098.86 682.803 L1098.3 682.803 L1097.74 682.803 L1097.18 682.803 L1096.62 682.803 L1096.06 682.803 L1095.5 682.803 L1094.94 682.803 L1094.39 682.803 L1093.83 682.803 L1093.27 682.803 L1092.71 682.803 L1092.15 682.803 L1091.59 682.803 L1091.03 682.803 L1090.47 682.803 L1089.91 682.803 L1089.35 682.803 L1088.79 682.803 L1088.23 682.803 L1087.67 682.803 L1087.12 682.803 L1086.56 682.803 L1086 682.803 L1085.44 682.803 L1084.88 682.803 L1084.32 682.803 L1083.76 682.803 L1083.2 682.803 L1082.64 682.803 L1082.08 682.803 L1081.52 682.803 L1080.96 682.803 L1080.4 682.803 L1079.85 682.803 L1079.29 682.803 L1078.73 682.803 L1078.17 682.803 L1077.61 682.803 L1077.05 682.803 L1076.49 682.803 L1075.93 682.803 L1075.37 682.803 L1074.81 682.803 L1074.25 682.803 L1073.69 682.803 L1073.13 682.803 L1072.57 682.803 L1072.02 682.803 L1071.46 682.803 L1070.9 682.803 L1070.34 682.803 L1069.78 682.803 L1069.22 682.803 L1068.66 682.803 L1068.1 682.803 L1067.54 682.803 L1066.98 682.803 L1066.42 682.803 L1065.86 682.803 L1065.3 682.803 L1064.75 682.803 L1064.19 682.803 L1063.63 682.803 L1063.07 682.803 L1062.51 682.803 L1061.95 682.803 L1061.39 682.803 L1060.83 682.803 L1060.27 682.803 L1059.71 682.803 L1059.15 682.803 L1058.59 682.803 L1058.03 682.803 L1057.48 682.803 L1056.92 682.803 L1056.36 682.803 L1055.8 682.803 L1055.24 682.803 L1054.68 682.803 L1054.12 682.803 L1053.56 682.803 L1053 682.803 L1052.44 682.803 L1051.88 682.803 L1051.32 682.803 L1050.76 682.803 L1050.2 682.803 L1049.65 682.803 L1049.09 682.803 L1048.53 682.803 L1047.97 682.803 L1047.41 682.803 L1046.85 682.803 L1046.29 682.803 L1045.73 682.803 L1045.17 682.803 L1044.61 682.803 L1044.05 682.803 L1043.49 682.803 L1042.93 682.803 L1042.38 682.803 L1041.82 682.803 L1041.26 682.803 L1040.7 682.803 L1040.14 682.803 L1039.58 682.803 L1039.02 682.803 L1038.46 682.803 L1037.9 682.803 L1037.34 682.803 L1036.78 682.803 L1036.22 682.803 L1035.66 682.803 L1035.1 682.803 L1034.55 682.803 L1033.99 682.803 L1033.43 682.803 L1032.87 682.803 L1032.31 682.803 L1031.75 682.803 L1031.19 682.803 L1030.63 682.803 L1030.07 682.803 L1029.51 682.803 L1028.95 682.803 L1028.39 682.803 L1027.83 682.803 L1027.28 682.803 L1026.72 682.803 L1026.16 682.803 L1025.6 682.803 L1025.04 682.803 L1024.48 682.803 L1023.92 682.803 L1023.36 682.803 L1022.8 682.803 L1022.24 682.803 L1021.68 682.803 L1021.12 682.803 L1020.56 682.803 L1020.01 682.803 L1019.45 682.803 L1018.89 682.803 L1018.33 682.803 L1017.77 682.803 L1017.21 682.803 L1016.65 682.803 L1016.09 682.803 L1015.53 682.803 L1014.97 682.803 L1014.41 682.803 L1013.85 682.803 L1013.29 682.803 L1012.73 682.803 L1012.18 682.803 L1011.62 682.803 L1011.06 682.803 L1010.5 682.803 L1009.94 682.803 L1009.38 682.803 L1008.82 682.803 L1008.26 682.803 L1007.7 682.803 L1007.14 682.803 L1006.58 682.803 L1006.02 682.803 L1005.46 682.803 L1004.91 682.803 L1004.35 682.803 L1003.79 682.803 L1003.23 682.803 L1002.67 682.803 L1002.11 682.803 L1001.55 682.803 L1000.99 682.803 L1000.43 682.803 L999.872 682.803 L999.313 682.803 L998.754 682.803 L998.194 682.803 L997.635 682.803 L997.076 682.803 L996.517 682.803 L995.957 682.803 L995.398 682.803 L994.839 682.803 L994.28 682.803 L993.72 682.803 L993.161 682.803 L992.602 682.803 L992.043 682.803 L991.483 682.803 L990.924 682.803 L990.365 682.803 L989.806 682.803 L989.246 682.803 L988.687 682.803 L988.128 682.803 L987.569 682.803 L987.009 682.803 L986.45 682.803 L985.891 682.803 L985.332 682.803 L984.772 682.803 L984.213 682.803 L983.654 682.803 L983.095 682.803 L982.535 682.803 L981.976 682.803 L981.417 682.803 L980.858 682.803 L980.298 682.803 L979.739 682.803 L979.18 682.803 L978.621 682.803 L978.061 682.803 L977.502 682.803 L976.943 682.803 L976.384 682.803 L975.824 682.803 L975.265 682.803 L974.706 682.803 L974.147 682.803 L973.587 682.803 L973.028 682.803 L972.469 682.803 L971.91 682.803 L971.35 682.803 L970.791 682.803 L970.232 682.803 L969.673 682.803 L969.113 682.803 L968.554 682.803 L967.995 682.803 L967.436 682.803 L966.876 682.803 L966.317 682.803 L965.758 682.803 L965.199 682.803 L964.639 682.803 L964.08 682.803 L963.521 682.803 L962.962 682.803 L962.402 682.803 L961.843 682.803 L961.284 682.803 L960.725 682.803 L960.165 682.803 L959.606 682.803 L959.047 682.803 L958.488 682.803 L957.928 682.803 L957.369 682.803 L956.81 682.803 L956.251 682.803 L955.691 682.803 L955.132 682.803 L954.573 682.803 L954.014 682.803 L953.454 682.803 L952.895 682.803 L952.336 682.803 L951.777 682.803 L951.217 682.803 L950.658 682.803 L950.099 682.803 L949.54 682.803 L948.98 682.803 L948.421 682.803 L947.862 682.803 L947.303 682.803 L946.743 682.803 L946.184 682.803 L945.625 682.803 L945.066 682.803 L944.506 682.803 L943.947 682.803 L943.388 682.803 L942.829 682.803 L942.269 682.803 L941.71 682.803 L941.151 682.803 L940.592 682.803 L940.032 682.803 L939.473 682.803 L938.914 682.803 L938.355 682.803 L937.795 682.803 L937.236 682.803 L936.677 682.803 L936.118 682.803 L935.558 682.803 L934.999 682.803 L934.44 682.803 L933.881 682.803 L933.321 682.803 L932.762 682.803 L932.203 682.803 L931.644 682.803 L931.084 682.803 L930.525 682.803 L929.966 682.803 L929.406 682.803 L928.847 682.803 L928.288 682.803 L927.729 682.803 L927.169 682.803 L926.61 682.803 L926.051 682.803 L925.492 682.803 L924.932 682.803 L924.373 682.803 L923.814 682.803 L923.255 682.803 L922.695 682.803 L922.136 682.803 L921.577 682.803 L921.018 682.803 L920.458 682.803 L919.899 682.803 L919.34 682.803 L918.781 682.803 L918.221 682.803 L917.662 682.803 L917.103 682.803 L916.544 682.803 L915.984 682.803 L915.425 682.803 L914.866 682.803 L914.307 682.803 L913.747 682.803 L913.188 682.803 L912.629 682.803 L912.07 682.803 L911.51 682.803 L910.951 682.803 L910.392 682.803 L909.833 682.803 L909.273 682.803 L908.714 682.803 L908.155 682.803 L907.596 682.803 L907.036 682.803 L906.477 682.803 L905.918 682.803 L905.359 682.803 L904.799 682.803 L904.24 682.803 L903.681 682.803 L903.122 682.803 L902.562 682.803 L902.003 682.803 L901.444 682.803 L900.885 682.803 L900.325 682.803 L899.766 682.803 L899.207 682.803 L898.648 682.803 L898.088 682.803 L897.529 682.803 L896.97 682.803 L896.411 682.803 L895.851 682.803 L895.292 682.803 L894.733 682.803 L894.174 682.803 L893.614 682.803 L893.055 682.803 L892.496 682.803 L891.937 682.803 L891.377 682.803 L890.818 682.803 L890.259 682.803 L889.7 682.803 L889.14 682.803 L888.581 682.803 L888.022 682.803 L887.463 682.803 L886.903 682.803 L886.344 682.803 L885.785 682.803 L885.226 682.803 L884.666 682.803 L884.107 682.803 L883.548 682.803 L882.989 682.803 L882.429 682.803 L881.87 682.803 L881.311 682.803 L880.752 682.803 L880.192 682.803 L879.633 682.803 L879.074 682.803 L878.515 682.803 L877.955 682.803 L877.396 682.803 L876.837 682.803 L876.278 682.803 L875.718 682.803 L875.159 682.803 L874.6 682.803 L874.041 682.803 L873.481 682.803 L872.922 682.803 L872.363 682.803 L871.804 682.803 L871.244 682.803 L870.685 682.803 L870.126 682.803 L869.567 682.803 L869.007 682.803 L868.448 682.803 L867.889 682.803 L867.33 682.803 L866.77 682.803 L866.211 682.803 L865.652 682.803 L865.093 682.803 L864.533 682.803 L863.974 682.803 L863.415 682.803 L862.856 682.803 L862.296 682.803 L861.737 682.803 L861.178 682.803 L860.619 682.803 L860.059 682.803 L859.5 682.803 L858.941 682.803 L858.382 682.803 L857.822 682.803 L857.263 682.803 L856.704 682.803 L856.145 682.803 L855.585 682.803 L855.026 682.803 L854.467 682.803 L853.908 682.803 L853.348 682.803 L852.789 682.803 L852.23 682.803 L851.671 682.803 L851.111 682.803 L850.552 682.803 L849.993 682.803 L849.434 682.803 L848.874 682.803 L848.315 682.803 L847.756 682.803 L847.197 682.803 L846.637 682.803 L846.078 682.803 L845.519 682.803 L844.96 682.803 L844.4 682.803 L843.841 682.803 L843.282 682.803 L842.723 682.803 L842.163 682.803 L841.604 682.803 L841.045 682.803 L840.486 682.803 L839.926 682.803 L839.367 682.803 L838.808 682.803 L838.249 682.803 L837.689 682.803 L837.13 682.803 L836.571 682.803 L836.012 682.803 L835.452 682.803 L834.893 682.803 L834.334 682.803 L833.775 682.803 L833.215 682.803 L832.656 682.803 L832.097 682.803 L831.538 682.803 L830.978 682.803 L830.419 682.803 L829.86 682.803 L829.301 682.803 L828.741 682.803 L828.182 682.803 L827.623 682.803 L827.064 682.803 L826.504 682.803 L825.945 682.803 L825.386 682.803 L824.827 682.803 L824.267 682.803 L823.708 682.803 L823.149 682.803 L822.59 682.803 L822.03 682.803 L821.471 682.803 L820.912 682.803 L820.353 682.803 L819.793 682.803 L819.234 682.803 L818.675 682.803 L818.116 682.803 L817.556 682.803 L816.997 682.803 L816.438 682.803 L815.879 682.803 L815.319 682.803 L814.76 682.803 L814.201 682.803 L813.642 682.803 L813.082 682.803 L812.523 682.803 L811.964 682.803 L811.405 682.803 L810.845 682.803 L810.286 682.803 L809.727 682.803 L809.168 682.803 L808.608 682.803 L808.049 682.803 L807.49 682.803 L806.931 682.803 L806.371 682.803 L805.812 682.803 L805.253 682.803 L804.693 682.803 L804.134 682.803 L803.575 682.803 L803.016 682.803 L802.456 682.803 L801.897 682.803 L801.338 682.803 L800.779 682.803 L800.219 682.803 L799.66 682.803 L799.101 682.803 L798.542 682.803 L797.982 682.803 L797.423 682.803 L796.864 682.803 L796.305 682.803 L795.745 682.803 L795.186 682.803 L794.627 682.803 L794.068 682.803 L793.508 682.803 L792.949 682.803 L792.39 682.803 L791.831 682.803 L791.271 682.803 L790.712 682.803 L790.153 682.803 L789.594 682.803 L789.034 682.803 L788.475 682.803 L787.916 682.803 L787.357 682.803 L786.797 682.803 L786.238 682.803 L785.679 682.803 L785.12 682.803 L784.56 682.803 L784.001 682.803 L783.442 682.803 L782.883 682.803 L782.323 682.803 L781.764 682.803 L781.205 682.803 L780.646 682.803 L780.086 682.803 L779.527 682.803 L778.968 682.803 L778.409 682.803 L777.849 682.803 L777.29 682.803 L776.731 682.803 L776.172 682.803 L775.612 682.803 L775.053 682.803 L774.494 682.803 L773.935 682.803 L773.375 682.803 L772.816 682.803 L772.257 682.803 L771.698 682.803 L771.138 682.803 L770.579 682.803 L770.02 682.803 L769.461 682.803 L768.901 682.803 L768.342 682.803 L767.783 682.803 L767.224 682.803 L766.664 682.803 L766.105 682.803 L765.546 682.803 L764.987 682.803 L764.427 682.803 L763.868 682.803 L763.309 682.803 L762.75 682.803 L762.19 682.803 L761.631 682.803 L761.072 682.803 L760.513 682.803 L759.953 682.803 L759.394 682.803 L758.835 682.803 L758.276 682.803 L757.716 682.803 L757.157 682.803 L756.598 682.803 L756.039 682.803 L755.479 682.803 L754.92 682.803 L754.361 682.803 L753.802 682.803 L753.242 682.803 L752.683 682.803 L752.124 682.803 L751.565 682.803 L751.005 682.803 L750.446 682.803 L749.887 682.803 L749.328 682.803 L748.768 682.803 L748.209 682.803 L747.65 682.803 L747.091 682.803 L746.531 682.803 L745.972 682.803 L745.413 682.803 L744.854 682.803 L744.294 682.803 L743.735 682.803 L743.176 682.803 L742.617 682.803 L742.057 682.803 L741.498 682.803 L740.939 682.803 L740.38 682.803 L739.82 682.803 L739.261 682.803 L738.702 682.803 L738.143 682.803 L737.583 682.803 L737.024 682.803 L736.465 682.803 L735.906 682.803 L735.346 682.803 L734.787 682.803 L734.228 682.803 L733.669 682.803 L733.109 682.803 L732.55 682.803 L731.991 682.803 L731.432 682.803 L730.872 682.803 L730.313 682.803 L729.754 682.803 L729.195 682.803 L728.635 682.803 L728.076 682.803 L727.517 682.803 L726.958 682.803 L726.398 682.803 L725.839 682.803 L725.28 682.803 L724.721 682.803 L724.161 682.803 L723.602 682.803 L723.043 682.803 L722.484 682.803 L721.924 682.803 L721.365 682.803 L720.806 682.803 L720.247 682.803  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip423)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.728 720.806,683.728 721.365,683.728 721.924,683.728 722.484,683.728 723.043,683.728 723.602,683.728 724.161,683.728 724.721,683.728 725.28,683.728 725.839,683.728 726.398,683.728 726.958,683.728 727.517,683.728 728.076,683.728 728.635,683.728 729.195,683.728 729.754,683.728 730.313,683.728 730.872,683.728 731.432,683.728 731.991,683.728 732.55,683.728 733.109,683.728 733.669,683.728 734.228,683.728 734.787,683.728 735.346,683.728 735.906,683.728 736.465,683.728 737.024,683.728 737.583,683.728 738.143,683.728 738.702,683.728 739.261,683.728 739.82,683.728 740.38,683.728 740.939,683.728 741.498,683.728 742.057,683.728 742.617,683.728 743.176,683.728 743.735,683.728 744.294,683.728 744.854,683.728 745.413,683.728 745.972,683.728 746.531,683.728 747.091,683.728 747.65,683.728 748.209,683.728 748.768,683.728 749.328,683.728 749.887,683.728 750.446,683.728 751.005,683.728 751.565,683.728 752.124,683.728 752.683,683.728 753.242,683.728 753.802,683.728 754.361,683.728 754.92,683.728 755.479,683.728 756.039,683.728 756.598,683.728 757.157,683.728 757.716,683.728 758.276,683.728 758.835,683.728 759.394,683.728 759.953,683.728 760.513,683.728 761.072,683.728 761.631,683.728 762.19,683.728 762.75,683.728 763.309,683.728 763.868,683.728 764.427,683.728 764.987,683.728 765.546,683.728 766.105,683.728 766.664,683.728 767.224,683.728 767.783,683.728 768.342,683.728 768.901,683.728 769.461,683.728 770.02,683.728 770.579,683.728 771.138,683.728 771.698,683.728 772.257,683.728 772.816,683.728 773.375,683.728 773.935,683.728 774.494,683.728 775.053,683.728 775.612,683.728 776.172,683.728 776.731,683.728 777.29,683.728 777.849,683.728 778.409,683.728 778.968,683.728 779.527,683.728 780.086,683.728 780.646,683.728 781.205,683.728 781.764,683.728 782.323,683.728 782.883,683.728 783.442,683.728 784.001,683.728 784.56,683.728 785.12,683.728 785.679,683.728 786.238,683.728 786.797,683.728 787.357,683.728 787.916,683.728 788.475,683.728 789.034,683.728 789.594,683.728 790.153,683.728 790.712,683.728 791.271,683.728 791.831,683.728 792.39,683.728 792.949,683.728 793.508,683.728 794.068,683.728 794.627,683.728 795.186,683.728 795.745,683.728 796.305,683.728 796.864,683.728 797.423,683.728 797.982,683.728 798.542,683.728 799.101,683.728 799.66,683.728 800.219,683.728 800.779,683.728 801.338,683.728 801.897,683.728 802.456,683.728 803.016,683.728 803.575,683.728 804.134,683.728 804.693,683.728 805.253,683.728 805.812,683.728 806.371,683.728 806.931,683.728 807.49,683.728 808.049,683.728 808.608,683.728 809.168,683.728 809.727,683.728 810.286,683.728 810.845,683.728 811.405,683.728 811.964,683.728 812.523,683.728 813.082,683.728 813.642,683.728 814.201,683.728 814.76,683.728 815.319,683.728 815.879,683.728 816.438,683.728 816.997,683.728 817.556,683.728 818.116,683.728 818.675,683.728 819.234,683.728 819.793,683.728 820.353,683.728 820.912,683.728 821.471,683.728 822.03,683.728 822.59,683.728 823.149,683.728 823.708,683.728 824.267,683.728 824.827,683.728 825.386,683.728 825.945,683.728 826.504,683.728 827.064,683.728 827.623,683.728 828.182,683.728 828.741,683.728 829.301,683.728 829.86,683.728 830.419,683.728 830.978,683.728 831.538,683.728 832.097,683.728 832.656,683.728 833.215,683.728 833.775,683.728 834.334,683.728 834.893,683.728 835.452,683.728 836.012,683.728 836.571,683.728 837.13,683.728 837.689,683.728 838.249,683.728 838.808,683.728 839.367,683.728 839.926,683.728 840.486,683.728 841.045,683.728 841.604,683.728 842.163,683.728 842.723,683.728 843.282,683.728 843.841,683.728 844.4,683.728 844.96,683.728 845.519,683.728 846.078,683.728 846.637,683.728 847.197,683.728 847.756,683.728 848.315,683.728 848.874,683.728 849.434,683.728 849.993,683.728 850.552,683.728 851.111,683.728 851.671,683.728 852.23,683.728 852.789,683.728 853.348,683.728 853.908,683.728 854.467,683.728 855.026,683.728 855.585,683.728 856.145,683.728 856.704,683.728 857.263,683.728 857.822,683.728 858.382,683.728 858.941,683.728 859.5,683.728 860.059,683.728 860.619,683.728 861.178,683.728 861.737,683.728 862.296,683.728 862.856,683.728 863.415,683.728 863.974,683.728 864.533,683.728 865.093,683.728 865.652,683.728 866.211,683.728 866.77,683.728 867.33,683.728 867.889,683.728 868.448,683.728 869.007,683.728 869.567,683.728 870.126,683.728 870.685,683.728 871.244,683.728 871.804,683.728 872.363,683.728 872.922,683.728 873.481,683.728 874.041,683.728 874.6,683.728 875.159,683.728 875.718,683.728 876.278,683.728 876.837,683.728 877.396,683.728 877.955,683.728 878.515,683.728 879.074,683.728 879.633,683.728 880.192,683.728 880.752,683.728 881.311,683.728 881.87,683.728 882.429,683.728 882.989,683.728 883.548,683.728 884.107,683.728 884.666,683.728 885.226,683.728 885.785,683.728 886.344,683.728 886.903,683.728 887.463,683.728 888.022,683.728 888.581,683.728 889.14,683.728 889.7,683.728 890.259,683.728 890.818,683.728 891.377,683.728 891.937,683.728 892.496,683.728 893.055,683.728 893.614,683.728 894.174,683.728 894.733,683.728 895.292,683.728 895.851,683.728 896.411,683.728 896.97,683.728 897.529,683.728 898.088,683.728 898.648,683.728 899.207,683.728 899.766,683.728 900.325,683.728 900.885,683.728 901.444,683.728 902.003,683.728 902.562,683.728 903.122,683.728 903.681,683.728 904.24,683.728 904.799,683.728 905.359,683.728 905.918,683.728 906.477,683.728 907.036,683.728 907.596,683.728 908.155,683.728 908.714,683.728 909.273,683.728 909.833,683.728 910.392,683.728 910.951,683.728 911.51,683.728 912.07,683.728 912.629,683.728 913.188,683.728 913.747,683.728 914.307,683.728 914.866,683.728 915.425,683.728 915.984,683.728 916.544,683.728 917.103,683.728 917.662,683.728 918.221,683.728 918.781,683.728 919.34,683.728 919.899,683.728 920.458,683.728 921.018,683.728 921.577,683.728 922.136,683.728 922.695,683.728 923.255,683.728 923.814,683.728 924.373,683.728 924.932,683.728 925.492,683.728 926.051,683.728 926.61,683.728 927.169,683.728 927.729,683.728 928.288,683.728 928.847,683.728 929.406,683.728 929.966,683.728 930.525,683.728 931.084,683.728 931.644,683.728 932.203,683.728 932.762,683.728 933.321,683.728 933.881,683.728 934.44,683.728 934.999,683.728 935.558,683.728 936.118,683.728 936.677,683.728 937.236,683.728 937.795,683.728 938.355,683.728 938.914,683.728 939.473,683.728 940.032,683.728 940.592,683.728 941.151,683.728 941.71,683.728 942.269,683.728 942.829,683.728 943.388,683.728 943.947,683.728 944.506,683.728 945.066,683.728 945.625,683.728 946.184,683.728 946.743,683.728 947.303,683.728 947.862,683.728 948.421,683.728 948.98,683.728 949.54,683.728 950.099,683.728 950.658,683.728 951.217,683.728 951.777,683.728 952.336,683.728 952.895,683.728 953.454,683.728 954.014,683.728 954.573,683.728 955.132,683.728 955.691,683.728 956.251,683.728 956.81,683.728 957.369,683.728 957.928,683.728 958.488,683.728 959.047,683.728 959.606,683.728 960.165,683.728 960.725,683.728 961.284,683.728 961.843,683.728 962.402,683.728 962.962,683.728 963.521,683.728 964.08,683.728 964.639,683.728 965.199,683.728 965.758,683.728 966.317,683.728 966.876,683.728 967.436,683.728 967.995,683.728 968.554,683.728 969.113,683.728 969.673,683.728 970.232,683.728 970.791,683.728 971.35,683.728 971.91,683.728 972.469,683.728 973.028,683.728 973.587,683.728 974.147,683.728 974.706,683.728 975.265,683.728 975.824,683.728 976.384,683.728 976.943,683.728 977.502,683.728 978.061,683.728 978.621,683.728 979.18,683.728 979.739,683.728 980.298,683.728 980.858,683.728 981.417,683.728 981.976,683.728 982.535,683.728 983.095,683.728 983.654,683.728 984.213,683.728 984.772,683.728 985.332,683.728 985.891,683.728 986.45,683.728 987.009,683.728 987.569,683.728 988.128,683.728 988.687,683.728 989.246,683.728 989.806,683.728 990.365,683.728 990.924,683.728 991.483,683.728 992.043,683.728 992.602,683.728 993.161,683.728 993.72,683.728 994.28,683.728 994.839,683.728 995.398,683.728 995.957,683.728 996.517,683.728 997.076,683.728 997.635,683.728 998.194,683.728 998.754,683.728 999.313,683.728 999.872,683.728 1000.43,683.728 1000.99,683.728 1001.55,683.728 1002.11,683.728 1002.67,683.728 1003.23,683.728 1003.79,683.728 1004.35,683.728 1004.91,683.728 1005.46,683.728 1006.02,683.728 1006.58,683.728 1007.14,683.728 1007.7,683.728 1008.26,683.728 1008.82,683.728 1009.38,683.728 1009.94,683.728 1010.5,683.728 1011.06,683.728 1011.62,683.728 1012.18,683.728 1012.73,683.728 1013.29,683.728 1013.85,683.728 1014.41,683.728 1014.97,683.728 1015.53,683.728 1016.09,683.728 1016.65,683.728 1017.21,683.728 1017.77,683.728 1018.33,683.728 1018.89,683.728 1019.45,683.728 1020.01,683.728 1020.56,683.728 1021.12,683.728 1021.68,683.728 1022.24,683.728 1022.8,683.728 1023.36,683.728 1023.92,683.728 1024.48,683.728 1025.04,683.728 1025.6,683.728 1026.16,683.728 1026.72,683.728 1027.28,683.728 1027.83,683.728 1028.39,683.728 1028.95,683.728 1029.51,683.728 1030.07,683.728 1030.63,683.728 1031.19,683.728 1031.75,683.728 1032.31,683.728 1032.87,683.728 1033.43,683.728 1033.99,683.728 1034.55,683.728 1035.1,683.728 1035.66,683.728 1036.22,683.728 1036.78,683.728 1037.34,683.728 1037.9,683.728 1038.46,683.728 1039.02,683.728 1039.58,683.728 1040.14,683.728 1040.7,683.728 1041.26,683.728 1041.82,683.728 1042.38,683.728 1042.93,683.728 1043.49,683.728 1044.05,683.728 1044.61,683.728 1045.17,683.728 1045.73,683.728 1046.29,683.728 1046.85,683.728 1047.41,683.728 1047.97,683.728 1048.53,683.728 1049.09,683.728 1049.65,683.728 1050.2,683.728 1050.76,683.728 1051.32,683.728 1051.88,683.728 1052.44,683.728 1053,683.728 1053.56,683.728 1054.12,683.728 1054.68,683.728 1055.24,683.728 1055.8,683.728 1056.36,683.728 1056.92,683.728 1057.48,683.728 1058.03,683.728 1058.59,683.728 1059.15,683.728 1059.71,683.728 1060.27,683.728 1060.83,683.728 1061.39,683.728 1061.95,683.728 1062.51,683.728 1063.07,683.728 1063.63,683.728 1064.19,683.728 1064.75,683.728 1065.3,683.728 1065.86,683.728 1066.42,683.728 1066.98,683.728 1067.54,683.728 1068.1,683.728 1068.66,683.728 1069.22,683.728 1069.78,683.728 1070.34,683.728 1070.9,683.728 1071.46,683.728 1072.02,683.728 1072.57,683.728 1073.13,683.728 1073.69,683.728 1074.25,683.728 1074.81,683.728 1075.37,683.728 1075.93,683.728 1076.49,683.728 1077.05,683.728 1077.61,683.728 1078.17,683.728 1078.73,683.728 1079.29,683.728 1079.85,683.728 1080.4,683.728 1080.96,683.728 1081.52,683.728 1082.08,683.728 1082.64,683.728 1083.2,683.728 1083.76,683.728 1084.32,683.728 1084.88,683.728 1085.44,683.728 1086,683.728 1086.56,683.728 1087.12,683.728 1087.67,683.728 1088.23,683.728 1088.79,683.728 1089.35,683.728 1089.91,683.728 1090.47,683.728 1091.03,683.728 1091.59,683.728 1092.15,683.728 1092.71,683.728 1093.27,683.728 1093.83,683.728 1094.39,683.728 1094.94,683.728 1095.5,683.728 1096.06,683.728 1096.62,683.728 1097.18,683.728 1097.74,683.728 1098.3,683.728 1098.86,683.728 1099.42,683.728 1099.98,683.728 1100.54,683.728 1101.1,683.728 1101.66,683.728 1102.22,683.728 1102.77,683.728 1103.33,683.728 1103.89,683.728 1104.45,683.728 1105.01,683.728 1105.57,683.728 1106.13,683.728 1106.69,683.728 1107.25,683.728 1107.81,683.728 1108.37,683.728 1108.93,683.728 1109.49,683.728 1110.04,683.728 1110.6,683.728 1111.16,683.728 1111.72,683.728 1112.28,683.728 1112.84,683.728 1113.4,683.728 1113.96,683.728 1114.52,683.728 1115.08,683.728 1115.64,683.728 1116.2,683.728 1116.76,683.728 1117.31,683.728 1117.87,683.728 1118.43,683.728 1118.99,683.728 1119.55,683.728 1120.11,683.728 1120.67,683.728 1121.23,683.728 1121.79,683.728 1122.35,683.728 1122.91,683.728 1123.47,683.728 1124.03,683.728 1124.59,683.728 1125.14,683.728 1125.7,683.728 1126.26,683.728 1126.82,683.728 1127.38,683.728 1127.94,683.728 1128.5,683.728 1129.06,683.728 1129.62,683.728 1130.18,683.728 1130.74,683.728 1131.3,683.728 1131.86,683.728 1132.41,683.728 1132.97,683.728 1133.53,683.728 1134.09,683.728 1134.65,683.728 1135.21,683.728 1135.77,683.728 1136.33,683.728 1136.89,683.728 1137.45,683.728 1138.01,683.728 1138.57,683.728 1139.13,683.728 1139.68,683.728 1140.24,683.728 1140.8,683.728 1141.36,683.728 1141.92,683.728 1142.48,683.728 1143.04,683.728 1143.6,683.728 1144.16,683.728 1144.72,683.728 1145.28,683.728 1145.84,683.728 1146.4,683.728 1146.96,683.728 1147.51,683.728 1148.07,683.728 1148.63,683.728 1149.19,683.728 1149.75,683.728 1150.31,683.728 1150.87,683.728 1151.43,683.728 1151.99,683.728 1152.55,683.728 1153.11,683.728 1153.67,683.728 1154.23,683.728 1154.78,683.728 1155.34,683.728 1155.9,683.728 1156.46,683.728 1157.02,683.728 1157.58,683.728 1158.14,683.728 1158.7,683.728 1159.26,683.728 1159.82,683.728 1160.38,683.728 1160.94,683.728 1161.5,683.728 1162.05,683.728 1162.61,683.728 1163.17,683.728 1163.73,683.728 1164.29,683.728 1164.85,683.728 1165.41,683.728 1165.97,683.728 1166.53,683.728 1167.09,683.728 1167.65,683.728 1168.21,683.728 1168.77,683.728 1169.33,683.728 1169.88,683.728 1170.44,683.728 1171,683.728 1171.56,683.728 1172.12,683.728 1172.68,683.728 1173.24,683.728 1173.8,683.728 1174.36,683.728 1174.92,683.728 1175.48,683.728 1176.04,683.728 1176.6,683.728 1177.15,683.728 1177.71,683.728 1178.27,683.728 1178.83,683.728 1179.39,683.728 1179.95,683.728 1180.51,683.728 1181.07,683.728 1181.63,683.728 1182.19,683.728 1182.75,683.728 1183.31,683.728 1183.87,683.728 1184.43,683.728 1184.98,683.728 1185.54,683.728 1186.1,683.728 1186.66,683.728 1187.22,683.728 1187.78,683.728 1188.34,683.728 1188.9,683.728 1189.46,683.728 1190.02,683.728 1190.58,683.728 1191.14,683.728 1191.7,683.728 1192.25,683.728 1192.81,683.728 1193.37,683.728 1193.93,683.728 1194.49,683.728 1195.05,683.728 1195.61,683.728 1196.17,683.728 1196.73,683.728 1197.29,683.728 1197.85,683.728 1198.41,683.728 1198.97,683.728 1199.52,683.728 1200.08,683.728 1200.64,683.728 1201.2,683.728 1201.76,683.728 1202.32,683.728 1202.88,683.728 1203.44,683.728 1204,683.728 1204.56,683.728 1205.12,683.728 1205.68,683.728 1206.24,683.728 1206.8,683.728 1207.35,683.728 1207.91,683.728 1208.47,683.728 1209.03,683.728 1209.59,683.728 1210.15,683.728 1210.71,683.728 1211.27,683.728 1211.83,683.728 1212.39,683.728 1212.95,683.728 1213.51,683.728 1214.07,683.728 1214.62,683.728 1215.18,683.728 1215.74,683.728 1216.3,683.728 1216.86,683.728 1217.42,683.728 1217.98,683.728 1218.54,683.728 1219.1,683.728 1219.66,683.728 1220.22,683.728 1220.78,683.728 1221.34,683.728 1221.89,683.728 1222.45,683.728 1223.01,683.728 1223.57,683.728 1224.13,683.728 1224.69,683.728 1225.25,683.728 1225.81,683.728 1226.37,683.728 1226.93,683.728 1227.49,683.728 1228.05,683.728 1228.61,683.728 1229.17,683.728 1229.72,683.728 1230.28,683.728 1230.84,683.728 1231.4,683.728 1231.96,683.728 1232.52,683.728 1233.08,683.728 1233.64,683.728 1234.2,683.728 1234.76,683.728 1235.32,683.728 1235.88,683.728 1236.44,683.728 1236.99,683.728 1237.55,683.728 1238.11,683.728 1238.67,683.728 1239.23,683.728 1239.79,683.728 1240.35,683.728 1240.91,683.728 1241.47,683.728 1242.03,683.728 1242.59,683.728 1243.15,683.728 1243.71,683.728 1244.26,683.728 1244.82,683.728 1245.38,683.728 1245.94,683.728 1246.5,683.728 1247.06,683.728 1247.62,683.728 1248.18,683.728 1248.74,683.728 1249.3,683.728 1249.86,683.728 1250.42,683.728 1250.98,683.728 1251.54,683.728 1252.09,683.728 1252.65,683.728 1253.21,683.728 1253.77,683.728 1254.33,683.728 1254.89,683.728 1255.45,683.728 1256.01,683.728 1256.57,683.728 1257.13,683.728 1257.69,683.728 1258.25,683.728 1258.81,683.728 1259.36,683.728 1259.92,683.728 1260.48,683.728 1261.04,683.728 1261.6,683.728 1262.16,683.728 1262.72,683.728 1263.28,683.728 1263.84,683.728 1264.4,683.728 1264.96,683.728 1265.52,683.728 1266.08,683.728 1266.63,683.728 1267.19,683.728 1267.75,683.728 1268.31,683.728 1268.87,683.728 1269.43,683.728 1269.99,683.728 1270.55,683.728 1271.11,683.728 1271.67,683.728 1272.23,683.728 1272.79,683.728 1273.35,683.728 1273.91,683.728 1274.46,683.728 1275.02,683.728 1275.58,683.728 1276.14,683.728 1276.7,683.728 1277.26,683.728 1277.82,683.728 1278.38,683.728 1278.94,683.728 1279.5,683.728 1280.06,683.728 1280.62,683.728 1281.18,683.728 1281.73,683.728 1282.29,683.728 1282.85,683.728 1283.41,683.728 1283.97,683.728 1284.53,683.728 1285.09,683.728 1285.65,683.728 1286.21,683.728 1286.77,683.728 1287.33,683.728 1287.89,683.728 1288.45,683.728 1289,683.728 1289.56,683.728 1290.12,683.728 1290.68,683.728 1291.24,683.728 1291.8,683.728 1292.36,683.728 1292.92,683.728 1293.48,683.728 1294.04,683.728 1294.6,683.728 1295.16,683.728 1295.72,683.728 1296.28,683.728 1296.83,683.728 1297.39,683.728 1297.95,683.728 1298.51,683.728 1299.07,683.728 1299.63,683.728 1300.19,683.728 1300.75,683.728 1301.31,683.728 1301.87,683.728 1302.43,683.728 1302.99,683.728 1303.55,683.728 1304.1,683.728 1304.66,683.728 1305.22,683.728 1305.78,683.728 1306.34,683.728 1306.9,683.728 1307.46,683.728 1308.02,683.728 1308.58,683.728 1309.14,683.728 1309.7,683.728 1310.26,683.728 1310.82,683.728 1311.38,683.728 1311.93,683.728 1312.49,683.728 1313.05,683.728 1313.61,683.728 1314.17,683.728 1314.73,683.728 1315.29,683.728 1315.85,683.728 1316.41,683.728 1316.97,683.728 1317.53,683.728 1318.09,683.728 1318.65,683.728 1319.2,683.728 1319.76,683.728 1320.32,683.728 1320.88,683.728 1321.44,683.728 1322,683.728 1322.56,683.728 1323.12,683.728 1323.68,683.728 1324.24,683.728 1324.8,683.728 1325.36,683.728 1325.92,683.728 1326.47,683.728 1327.03,683.728 1327.59,683.728 1328.15,683.728 1328.71,683.728 1329.27,683.728 1329.83,683.728 1330.39,683.728 1330.95,683.728 1331.51,683.728 1332.07,683.728 1332.63,683.728 1333.19,683.728 1333.75,683.728 1334.3,683.728 1334.86,683.728 1335.42,683.728 1335.98,683.728 1336.54,683.728 1337.1,683.728 1337.66,683.728 1338.22,683.728 1338.78,683.728 1339.34,683.728 1339.9,683.728 1340.46,683.728 1341.02,683.728 1341.57,683.728 1342.13,683.728 1342.69,683.728 1343.25,683.728 1343.81,683.728 1344.37,683.728 1344.93,683.728 1345.49,683.728 1346.05,683.728 1346.61,683.728 1347.17,683.728 1347.73,683.728 1348.29,683.728 1348.84,683.728 1349.4,683.728 1349.96,683.728 1350.52,683.728 1351.08,683.728 1351.64,683.728 1352.2,683.728 1352.76,683.728 1353.32,683.728 1353.88,683.728 1354.44,683.728 1355,683.728 1355.56,683.728 1356.12,683.728 1356.67,683.728 1357.23,683.728 1357.79,683.728 1358.35,683.728 1358.91,683.728 1359.47,683.728 1360.03,683.728 1360.59,683.728 1361.15,683.728 1361.71,683.728 1362.27,683.728 1362.83,683.728 1363.39,683.728 1363.94,683.728 1364.5,683.728 1365.06,683.728 1365.62,683.728 1366.18,683.728 1366.74,683.728 1367.3,683.728 1367.86,683.728 1368.42,683.728 1368.98,683.728 1369.54,683.728 1370.1,683.728 1370.66,683.728 1371.21,683.728 1371.77,683.728 1372.33,683.728 1372.89,683.728 1373.45,683.728 1374.01,683.728 1374.57,683.728 1375.13,683.728 1375.69,683.728 1376.25,683.728 1376.81,683.728 1377.37,683.728 1377.93,683.728 1378.49,683.728 1379.04,683.728 1379.6,683.728 1380.16,683.728 1380.72,683.728 1381.28,683.728 1381.84,683.728 1382.4,683.728 1382.96,683.728 1383.52,683.728 1384.08,683.728 1384.64,683.728 1385.2,683.728 1385.76,683.728 1386.31,683.728 1386.87,683.728 1387.43,683.728 1387.99,683.728 1388.55,683.728 1389.11,683.728 1389.67,683.728 1390.23,683.728 1390.79,683.728 1391.35,683.728 1391.91,683.728 1392.47,683.728 1393.03,683.728 1393.58,683.728 1394.14,683.728 1394.7,683.728 1395.26,683.728 1395.82,683.728 1396.38,683.728 1396.94,683.728 1397.5,683.728 1398.06,683.728 1398.62,683.728 1399.18,683.728 1399.74,683.728 1400.3,683.728 1400.86,683.728 1401.41,683.728 1401.97,683.728 1402.53,683.728 1403.09,683.728 1403.65,683.728 1404.21,683.728 1404.77,683.728 1405.33,683.728 1405.89,683.728 1406.45,683.728 1407.01,683.728 1407.57,683.728 1408.13,683.728 1408.68,683.728 1409.24,683.728 1409.8,683.728 1410.36,683.728 1410.92,683.728 1411.48,683.728 1412.04,683.728 1412.6,683.728 1413.16,683.728 1413.72,683.728 1414.28,683.728 1414.84,683.728 1415.4,683.728 1415.95,683.728 1416.51,683.728 1417.07,683.728 1417.63,683.728 1418.19,683.728 1418.75,683.728 1419.31,683.728 1419.87,683.728 1420.43,683.728 1420.99,683.728 1421.55,683.728 1422.11,683.728 1422.67,683.728 1423.23,683.728 1423.78,683.728 1424.34,683.728 1424.9,683.728 1425.46,683.728 1426.02,683.728 1426.58,683.728 1427.14,683.728 1427.7,683.728 1428.26,683.728 1428.82,683.728 1429.38,683.728 1429.94,683.728 1430.5,683.728 1431.05,683.728 1431.61,683.728 1432.17,683.728 1432.73,683.728 1433.29,683.728 1433.85,683.728 1434.41,683.728 1434.97,683.728 1435.53,683.728 1436.09,683.728 1436.65,683.728 1437.21,683.728 1437.77,683.728 1438.33,683.728 1438.88,683.728 1439.44,683.728 1440,683.728 1440.56,683.728 1441.12,683.728 1441.68,683.728 1442.24,683.728 1442.8,683.728 1443.36,683.728 1443.92,683.728 1444.48,683.728 1445.04,683.728 1445.6,683.728 1446.15,683.728 1446.71,683.728 1447.27,683.728 1447.83,683.728 1448.39,683.728 1448.95,683.728 1449.51,683.728 1450.07,683.728 1450.63,683.728 1451.19,683.728 1451.75,683.728 1452.31,683.728 1452.87,683.728 1453.42,683.728 1453.98,683.728 1454.54,683.728 1455.1,683.728 1455.66,683.728 1456.22,683.728 1456.78,683.728 1457.34,683.728 1457.9,683.728 1458.46,683.728 1459.02,683.728 1459.58,683.728 1460.14,683.728 1460.7,683.728 1461.25,683.728 1461.81,683.728 1462.37,683.728 1462.93,683.728 1463.49,683.728 1464.05,683.728 1464.61,683.728 1465.17,683.728 1465.73,683.728 1466.29,683.728 1466.85,683.728 1467.41,683.728 1467.97,683.728 1468.52,683.728 1469.08,683.728 1469.64,683.728 1470.2,683.728 1470.76,683.728 1471.32,683.728 1471.88,683.728 1472.44,683.728 1473,683.728 1473.56,683.728 1474.12,683.728 1474.68,683.728 1475.24,683.728 1475.79,683.728 1476.35,683.728 1476.91,683.728 1477.47,683.728 1478.03,683.728 1478.59,683.728 1479.15,683.728 1479.71,683.728 1480.27,683.728 1480.83,683.728 1481.39,683.728 1481.95,683.728 1482.51,683.728 1483.07,683.728 1483.62,683.728 1484.18,683.728 1484.74,683.728 1485.3,683.728 1485.86,683.728 1486.42,683.728 1486.98,683.728 1487.54,683.728 1488.1,683.728 1488.66,683.728 1489.22,683.728 1489.78,683.728 1490.34,683.728 1490.89,683.728 1491.45,683.728 1492.01,683.728 1492.57,683.728 1493.13,683.728 1493.69,683.728 1494.25,683.728 1494.81,683.728 1495.37,683.728 1495.93,683.728 1496.49,683.728 1497.05,683.728 1497.61,683.728 1498.16,683.728 1498.72,683.728 1499.28,683.728 1499.84,683.728 1500.4,683.728 1500.96,683.728 1501.52,683.728 1502.08,683.728 1502.64,683.728 1503.2,683.728 1503.76,683.728 1504.32,683.728 1504.88,683.728 1505.44,683.728 1505.99,683.728 1506.55,683.728 1507.11,683.728 1507.67,683.728 1508.23,683.728 1508.79,683.728 1509.35,683.728 1509.91,683.728 1510.47,683.728 1511.03,683.728 1511.59,683.728 1512.15,683.728 1512.71,683.728 1513.26,683.728 1513.82,683.728 1514.38,683.728 1514.94,683.728 1515.5,683.728 1516.06,683.728 1516.62,683.728 1517.18,683.728 1517.74,683.728 1518.3,683.728 1518.86,683.728 1519.42,683.728 1519.98,683.728 1520.53,683.728 1521.09,683.728 1521.65,683.728 1522.21,683.728 1522.77,683.728 1523.33,683.728 1523.89,683.728 1524.45,683.728 1525.01,683.728 1525.57,683.728 1526.13,683.728 1526.69,683.728 1527.25,683.728 1527.81,683.728 1528.36,683.728 1528.92,683.728 1529.48,683.728 1530.04,683.728 1530.6,683.728 1531.16,683.728 1531.72,683.728 1532.28,683.728 1532.84,683.728 1533.4,683.728 1533.96,683.728 1534.52,683.728 1535.08,683.728 1535.63,683.728 1536.19,683.728 1536.75,683.728 1537.31,683.728 1537.87,683.728 1538.43,683.728 1538.99,683.728 1539.55,683.728 1540.11,683.728 1540.67,683.728 1541.23,683.728 1541.79,683.728 1542.35,683.728 1542.9,683.728 1543.46,683.728 1544.02,683.728 1544.58,683.728 1545.14,683.728 1545.7,683.728 1546.26,683.728 1546.82,683.728 1547.38,683.728 1547.94,683.728 1548.5,683.728 1549.06,683.728 1549.62,683.728 1550.18,683.728 1550.73,683.728 1551.29,683.728 1551.85,683.728 1552.41,683.728 1552.97,683.728 1553.53,683.728 1554.09,683.728 1554.65,683.728 1555.21,683.728 1555.77,683.728 1556.33,683.728 1556.89,683.728 1557.45,683.728 1558,683.728 1558.56,683.728 1559.12,683.728 1559.68,683.728 1560.24,683.728 1560.8,683.728 1561.36,683.728 1561.92,683.728 1562.48,683.728 1563.04,683.728 1563.6,683.728 1564.16,683.728 1564.72,683.728 1565.28,683.728 1565.83,683.728 1566.39,683.728 1566.95,683.728 1567.51,683.728 1568.07,683.728 1568.63,683.728 1569.19,683.728 1569.75,683.728 1570.31,683.728 1570.87,683.728 1571.43,683.728 1571.99,683.728 1572.55,683.728 1573.1,683.728 1573.66,683.728 1574.22,683.728 1574.78,683.728 1575.34,683.728 1575.9,683.728 1576.46,683.728 1577.02,683.728 1577.58,683.728 1578.14,683.728 1578.7,683.728 1579.26,683.728 1579.82,683.728 1580.37,683.728 1580.93,683.728 1581.49,683.728 1582.05,683.728 1582.61,683.728 1583.17,683.728 1583.73,683.728 1584.29,683.728 1584.85,683.728 1585.41,683.728 1585.97,683.728 1586.53,683.728 1587.09,683.728 1587.65,683.728 1588.2,683.728 1588.76,683.728 1589.32,683.728 1589.88,683.728 1590.44,683.728 1591,683.728 1591.56,683.728 1592.12,683.728 1592.68,683.728 1593.24,683.728 1593.8,683.728 1594.36,683.728 1594.92,683.728 1595.47,683.728 1596.03,683.728 1596.59,683.728 1597.15,683.728 1597.71,683.728 1598.27,683.728 1598.83,683.728 1599.39,683.728 1599.95,683.728 1600.51,683.728 1601.07,683.728 1601.63,683.728 1602.19,683.728 1602.74,683.728 1603.3,683.728 1603.86,683.728 1604.42,683.728 1604.98,683.728 1605.54,683.728 1606.1,683.728 1606.66,683.728 1607.22,683.728 1607.78,683.728 1608.34,683.728 1608.9,683.728 1609.46,683.728 1610.02,683.728 1610.57,683.728 1611.13,683.728 1611.69,683.728 1612.25,683.728 1612.81,683.728 1613.37,683.728 1613.93,683.728 1614.49,683.728 1615.05,683.728 1615.61,683.728 1616.17,683.728 1616.73,683.728 1617.29,683.728 1617.84,683.728 1618.4,683.728 1618.96,683.728 1619.52,683.728 1620.08,683.728 1620.64,683.728 1621.2,683.728 1621.76,683.728 1622.32,683.728 1622.88,683.728 1623.44,683.728 1624,683.728 1624.56,683.728 1625.11,683.728 1625.67,683.728 1626.23,683.728 1626.79,683.728 1627.35,683.728 1627.91,683.728 1628.47,683.728 1629.03,683.728 1629.59,683.728 1630.15,683.728 1630.71,683.728 1631.27,683.728 1631.83,683.728 1632.39,683.728 1632.94,683.728 1633.5,683.728 1634.06,683.728 1634.62,683.728 1635.18,683.728 1635.74,683.728 1636.3,683.728 1636.86,683.728 1637.42,683.728 1637.98,683.728 1638.54,683.728 1639.1,683.728 1639.66,683.728 1640.21,683.728 1640.77,683.728 1641.33,683.728 1641.89,683.728 1642.45,683.728 1643.01,683.728 1643.57,683.728 1644.13,683.728 1644.69,683.728 1645.25,683.728 1645.81,683.728 1646.37,683.728 1646.93,683.728 1647.48,683.728 1648.04,683.728 1648.6,683.728 1649.16,683.728 1649.72,683.728 1650.28,683.728 1650.84,683.728 1651.4,683.728 1651.96,683.728 1652.52,683.728 1653.08,683.728 1653.64,683.728 1654.2,683.728 1654.76,683.728 1655.31,683.728 1655.87,683.728 1656.43,683.728 1656.99,683.728 1657.55,683.728 1658.11,683.728 1658.67,683.728 1659.23,683.728 1659.79,683.728 1660.35,683.728 1660.91,683.728 1661.47,683.728 1662.03,683.728 1662.58,683.728 1663.14,683.728 1663.7,683.728 1664.26,683.728 1664.82,683.728 1665.38,683.728 1665.94,683.728 1666.5,683.728 1667.06,683.728 1667.62,683.728 1668.18,683.728 1668.74,683.728 1669.3,683.728 1669.85,683.728 1670.41,683.728 1670.97,683.728 1671.53,683.728 1672.09,683.728 1672.65,683.728 1673.21,683.728 1673.77,683.728 1674.33,683.728 1674.89,683.728 1675.45,683.728 1676.01,683.728 1676.57,683.728 1677.13,683.728 1677.68,683.728 1678.24,683.728 1678.8,683.728 1679.36,683.728 1679.92,683.728 1680.48,683.728 1681.04,683.728 1681.6,683.728 1682.16,683.728 1682.72,683.728 1683.28,683.728 1683.84,683.728 1684.4,683.728 1684.95,683.728 1685.51,683.728 1686.07,683.728 1686.63,683.728 1687.19,683.728 1687.75,683.728 1688.31,683.728 1688.87,683.728 1689.43,683.728 1689.99,683.728 1690.55,683.728 1691.11,683.728 1691.67,683.728 1692.23,683.728 1692.78,683.728 1693.34,683.728 1693.9,683.728 1694.46,683.728 1695.02,683.728 1695.58,683.728 1696.14,683.728 1696.7,683.728 1697.26,683.728 1697.82,683.728 1698.38,683.728 1698.94,683.728 1699.5,683.728 1700.05,683.728 1700.61,683.728 1701.17,683.728 1701.73,683.728 1702.29,683.728 1702.85,683.728 1703.41,683.728 1703.97,683.728 1704.53,683.728 1705.09,683.728 1705.65,683.728 1706.21,683.728 1706.77,683.728 1707.32,683.728 1707.88,683.728 1708.44,683.728 1709,683.728 1709.56,683.728 1710.12,683.728 1710.68,683.728 1711.24,683.728 1711.8,683.728 1712.36,683.728 1712.92,683.728 1713.48,683.728 1714.04,683.728 1714.6,683.728 1715.15,683.728 1715.71,683.728 1716.27,683.728 1716.83,683.728 1717.39,683.728 1717.95,683.728 1718.51,683.728 1719.07,683.728 1719.63,683.728 1720.19,683.728 1720.75,683.728 1721.31,683.728 1721.87,683.728 1722.42,683.728 1722.98,683.728 1723.54,683.728 1724.1,683.728 1724.66,683.728 1725.22,683.728 1725.78,683.728 1726.34,683.728 1726.9,683.728 1727.46,683.728 1728.02,683.728 1728.58,683.728 1729.14,683.728 1729.69,683.728 1730.25,683.728 1730.81,683.728 1731.37,683.728 1731.93,683.728 1732.49,683.728 1733.05,683.728 1733.61,683.728 1734.17,683.728 1734.73,683.728 1735.29,683.728 1735.85,683.728 1736.41,683.728 1736.97,683.728 1737.52,683.728 1738.08,683.728 1738.64,683.728 1739.2,683.728 1739.76,683.728 1740.32,683.728 1740.88,683.728 1741.44,683.728 1742,683.728 1742.56,683.728 1743.12,683.728 1743.68,683.728 1744.24,683.728 1744.79,683.728 1745.35,683.728 1745.91,683.728 1746.47,683.728 1747.03,683.728 1747.59,683.728 1748.15,683.728 1748.71,683.728 1749.27,683.728 1749.83,683.728 1750.39,683.728 1750.95,683.728 1751.51,683.728 1752.06,683.728 1752.62,683.728 1753.18,683.728 1753.74,683.728 1754.3,683.728 1754.86,683.728 1755.42,683.728 1755.98,683.728 1756.54,683.728 1757.1,683.728 1757.66,683.728 1758.22,683.728 1758.78,683.728 1759.34,683.728 1759.89,683.728 1760.45,683.728 1761.01,683.728 1761.57,683.728 1762.13,683.728 1762.69,683.728 1763.25,683.728 1763.81,683.728 1764.37,683.728 1764.93,683.728 1765.49,683.728 1766.05,683.728 1766.61,683.728 1767.16,683.728 1767.72,683.728 1768.28,683.728 1768.84,683.728 1769.4,683.728 1769.96,683.728 1770.52,683.728 1771.08,683.728 1771.64,683.728 1772.2,683.728 1772.76,683.728 1773.32,683.728 1773.88,683.728 1774.43,683.728 1774.99,683.728 1775.55,683.728 1776.11,683.728 1776.67,683.728 1777.23,683.728 1777.79,683.728 1778.35,683.728 1778.91,683.728 1779.47,683.728 1780.03,683.728 1780.59,683.728 1781.15,683.728 1781.71,683.728 1782.26,683.728 1782.82,683.728 1783.38,683.728 1783.94,683.728 1784.5,683.728 1785.06,683.728 1785.62,683.728 1786.18,683.728 1786.74,683.728 1787.3,683.728 1787.86,683.728 1788.42,683.728 1788.98,683.728 1789.53,683.728 1790.09,683.728 1790.65,683.728 1791.21,683.728 1791.77,683.728 1792.33,683.728 1792.89,683.728 1793.45,683.728 1794.01,683.728 1794.57,683.728 1795.13,683.728 1795.69,683.728 1796.25,683.728 1796.8,683.728 1797.36,683.728 1797.92,683.728 1798.48,683.728 1799.04,683.728 1799.6,683.728 1800.16,683.728 1800.72,683.728 1801.28,683.728 1801.84,683.728 1802.4,683.728 1802.96,683.728 1803.52,683.728 1804.08,683.728 1804.63,683.728 1805.19,683.728 1805.75,683.728 1806.31,683.728 1806.87,683.728 1807.43,683.728 1807.99,683.728 1808.55,683.728 1809.11,683.728 1809.67,683.728 1810.23,683.728 1810.79,683.728 1811.35,683.728 1811.9,683.728 1812.46,683.728 1813.02,683.728 1813.58,683.728 1814.14,683.728 1814.7,683.728 1815.26,683.728 1815.82,683.728 1816.38,683.728 1816.94,683.728 1817.5,683.728 1818.06,683.728 1818.62,683.728 1819.18,683.728 1819.73,683.728 1820.29,683.728 1820.85,683.728 1821.41,683.728 1821.97,683.728 1822.53,683.728 1823.09,683.728 1823.65,683.728 1824.21,683.728 1824.77,683.728 1825.33,683.728 1825.89,683.728 1826.45,683.728 1827,683.728 1827.56,683.728 1828.12,683.728 1828.68,683.728 1829.24,683.728 1829.8,683.728 1830.36,683.728 1830.92,683.728 1831.48,683.728 1832.04,683.728 1832.6,683.728 1833.16,683.728 1833.72,683.728 1834.27,683.728 1834.83,683.728 1835.39,683.728 1835.95,683.728 1836.51,683.728 1837.07,683.728 1837.63,683.728 1838.19,683.728 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.031772905912227 ± 0.02392222091113908\nProjected Energy: -4.015803927790426 ± (0.004798744734173077, 0.0046554684180053485)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\ntime_step = determine_constant_time_step(df) the time step\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\ntime_step = determine_constant_time_step(df) the time step\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.1109</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.6498e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.09e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5369e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.526e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">6.813e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3345e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321623\n -3.3631242916133672\n -0.759019192277087\n  0.13584182219622676\n  0.15789998694608975\n  0.8767114411781378\n  1.530592997097334\n  1.5835732611867295\n  3.0728703303258715\n  3.125672653951833\n  4.862107221562175\n  6.260694850380592\n  6.402671211183107\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087834\n 0.03307039977204201\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.DVecAsTable","page":"I/O","title":"Rimu.RimuIO.DVecAsTable","text":"struct DVecAsTable\n\nWrapper over the storage of a DVec that allows us to treat a DVec as a table from Tables.jl. Constructed with Tables.table(::DVec).\n\n\n\n\n\n","category":"type"},{"location":"rimuio.html#Rimu.RimuIO.PDVecAsTable","page":"I/O","title":"Rimu.RimuIO.PDVecAsTable","text":"struct PDVecAsTable\n\nWrapper over the storage of a PDVec that allows us to treat a PDVec as a table from Tables.jl. Constructed with Tables.table(::PDVec).\n\n\n\n\n\n","category":"type"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.load_state-Union{Tuple{D}, Tuple{Type{D}, Any}} where D","page":"I/O","title":"Rimu.RimuIO.load_state","text":"load_state(filename; kwargs...) -> PDVec, NamedTuple\nload_state(PDVec, filename; kwargs...) -> PDVec, NamedTuple\nload_state(DVec, filename; kwargs...) -> DVec, NamedTuple\n\nLoad the state saved in the Arrow file filename. kwargs are passed to the constructor of PDVec. Any metadata stored in the file is be parsed as a number (if possible) and returned alongside the vector in a NamedTuple.\n\nSee also save_state.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_state-Tuple","page":"I/O","title":"Rimu.RimuIO.save_state","text":"save_state(filename, vector; io, kwargs...)\n\nSave PDVec or DVec vector to an arrow file filename.\n\nio determines the output stream to write progress to. Defaults to stderr when MPI is enabled and devnull otherwise.\n\nAll other kwargs are saved as strings to the arrow file and will be parsed back when the state is loaded.\n\nSee also load_state.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates. Indexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nFields\n\nspectral_states: Tuple of SpectralStates\nmax_length::Ref{Int}: Maximum length of the simulation\nstep::Ref{Int}: Current step of the simulation\nsimulation_plan: Simulation plan\nreporting_strategy: Reporting strategy\npost_step_strategy: Post-step strategy\nreplica_strategy: Replica strategy\n\nSee also ReplicaStrategy, Rimu.SpectralState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy for ProjectorMonteCarloProblem. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\nSee also ProjectorMonteCarloProblem, ReportToFile.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy for ProjectorMonteCarloProblem that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df, save_df, ReportDFAndInfo, and ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data during a simulation of a ProjectorMonteCarloProblem.\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nExtended help\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nRimu.refine_reporting_strategy\nRimu.report!\nRimu.report_after_step!\nRimu.finalize_report!\nRimu.reporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with Rimu.advance!.\n\nFields\n\nhamiltonian: Hamiltonian\nalgorithm: Algorithm\nv: Vector\npv: Previous vector\nwm: Working memory\nshift_parameters: Shift parameters\nid::String: id is appended to column names\n\nSee also SpectralStrategy, ReplicaStrategy, Rimu.SpectralState, Rimu.ReplicaState, Rimu.replica_stats, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several Rimu.SingleStates representing the ground state and excited states of a single replica. Indexing the SpectralState state[i] returns the ith SingleState.\n\nFields\n\nsingle_states: Tuple of SingleStates\nspectral_strategy: Strategy for computing the spectral states\nid::String: Identifies the replica\n\nSee also SpectralStrategy, Rimu.ReplicaState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after Rimu.reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an r×s AbstractMatrix of configuration vectors from the state, or the result of solve(::ProjectorMonteCarloProblem). The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also ProjectorMonteCarloProblem, Rimu.PMCSimulation, Rimu.SingleState, Rimu.ReplicaState, Rimu.SpectralState.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
