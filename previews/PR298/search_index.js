var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21368341104992641 ± 0.001362842531902166\n   G2(1) = 0.917604544250598 ± 0.0007256434710348745\n   G2(2) = 0.981815095872688 ± 0.0005990229280147403\n   G2(3) = 0.9874773087035018 ± 0.0008111820785464926\n   G2(4) = 0.981815095872688 ± 0.0005990229280147403\n   G2(5) = 0.917604544250598 ± 0.0007256434710348745\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.0320937766380105 ± 0.14039183149727663\n   Replica 2: -4.002113706695316 ± 0.13314512332667075\n   Replica 3: -3.9876186229737067 ± 0.1435663267043825\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip470\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip471\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip472\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.81 2211.02,1260.81 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.86 2211.02,1003.86 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.919 2211.02,746.919 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.976 2211.02,489.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,233.032 2211.02,233.032 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.81 423.181,1260.81 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.86 423.181,1003.86 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.919 423.181,746.919 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.976 423.181,489.976 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,233.032 423.181,233.032 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M356.339 1246.6 Q352.728 1246.6 350.899 1250.17 Q349.094 1253.71 349.094 1260.84 Q349.094 1267.95 350.899 1271.51 Q352.728 1275.05 356.339 1275.05 Q359.973 1275.05 361.779 1271.51 Q363.608 1267.95 363.608 1260.84 Q363.608 1253.71 361.779 1250.17 Q359.973 1246.6 356.339 1246.6 M356.339 1242.9 Q362.149 1242.9 365.205 1247.51 Q368.284 1252.09 368.284 1260.84 Q368.284 1269.57 365.205 1274.17 Q362.149 1278.76 356.339 1278.76 Q350.529 1278.76 347.45 1274.17 Q344.395 1269.57 344.395 1260.84 Q344.395 1252.09 347.45 1247.51 Q350.529 1242.9 356.339 1242.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M290.043 1017.21 L306.363 1017.21 L306.363 1021.14 L284.418 1021.14 L284.418 1017.21 Q287.08 1014.45 291.664 1009.82 Q296.27 1005.17 297.451 1003.83 Q299.696 1001.3 300.576 999.569 Q301.478 997.81 301.478 996.12 Q301.478 993.365 299.534 991.629 Q297.613 989.893 294.511 989.893 Q292.312 989.893 289.858 990.657 Q287.427 991.421 284.65 992.972 L284.65 988.249 Q287.474 987.115 289.927 986.536 Q292.381 985.958 294.418 985.958 Q299.789 985.958 302.983 988.643 Q306.177 991.328 306.177 995.819 Q306.177 997.948 305.367 999.87 Q304.58 1001.77 302.474 1004.36 Q301.895 1005.03 298.793 1008.25 Q295.691 1011.44 290.043 1017.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M316.224 986.583 L334.58 986.583 L334.58 990.518 L320.506 990.518 L320.506 998.99 Q321.524 998.643 322.543 998.481 Q323.562 998.296 324.58 998.296 Q330.367 998.296 333.747 1001.47 Q337.126 1004.64 337.126 1010.05 Q337.126 1015.63 333.654 1018.74 Q330.182 1021.81 323.862 1021.81 Q321.687 1021.81 319.418 1021.44 Q317.173 1021.07 314.765 1020.33 L314.765 1015.63 Q316.849 1016.77 319.071 1017.32 Q321.293 1017.88 323.77 1017.88 Q327.774 1017.88 330.112 1015.77 Q332.45 1013.67 332.45 1010.05 Q332.45 1006.44 330.112 1004.34 Q327.774 1002.23 323.77 1002.23 Q321.895 1002.23 320.02 1002.65 Q318.168 1003.06 316.224 1003.94 L316.224 986.583 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 989.661 Q352.728 989.661 350.899 993.226 Q349.094 996.768 349.094 1003.9 Q349.094 1011 350.899 1014.57 Q352.728 1018.11 356.339 1018.11 Q359.973 1018.11 361.779 1014.57 Q363.608 1011 363.608 1003.9 Q363.608 996.768 361.779 993.226 Q359.973 989.661 356.339 989.661 M356.339 985.958 Q362.149 985.958 365.205 990.564 Q368.284 995.147 368.284 1003.9 Q368.284 1012.62 365.205 1017.23 Q362.149 1021.81 356.339 1021.81 Q350.529 1021.81 347.45 1017.23 Q344.395 1012.62 344.395 1003.9 Q344.395 995.147 347.45 990.564 Q350.529 985.958 356.339 985.958 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M286.062 729.639 L304.418 729.639 L304.418 733.574 L290.344 733.574 L290.344 742.046 Q291.363 741.699 292.381 741.537 Q293.4 741.352 294.418 741.352 Q300.205 741.352 303.585 744.523 Q306.964 747.695 306.964 753.111 Q306.964 758.69 303.492 761.792 Q300.02 764.87 293.701 764.87 Q291.525 764.87 289.256 764.5 Q287.011 764.13 284.603 763.389 L284.603 758.69 Q286.687 759.824 288.909 760.38 Q291.131 760.935 293.608 760.935 Q297.613 760.935 299.951 758.829 Q302.288 756.722 302.288 753.111 Q302.288 749.5 299.951 747.394 Q297.613 745.287 293.608 745.287 Q291.733 745.287 289.858 745.704 Q288.006 746.121 286.062 747 L286.062 729.639 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M326.177 732.718 Q322.566 732.718 320.737 736.283 Q318.932 739.824 318.932 746.954 Q318.932 754.06 320.737 757.625 Q322.566 761.167 326.177 761.167 Q329.811 761.167 331.617 757.625 Q333.446 754.06 333.446 746.954 Q333.446 739.824 331.617 736.283 Q329.811 732.718 326.177 732.718 M326.177 729.014 Q331.987 729.014 335.043 733.621 Q338.122 738.204 338.122 746.954 Q338.122 755.681 335.043 760.287 Q331.987 764.87 326.177 764.87 Q320.367 764.87 317.288 760.287 Q314.233 755.681 314.233 746.954 Q314.233 738.204 317.288 733.621 Q320.367 729.014 326.177 729.014 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 732.718 Q352.728 732.718 350.899 736.283 Q349.094 739.824 349.094 746.954 Q349.094 754.06 350.899 757.625 Q352.728 761.167 356.339 761.167 Q359.973 761.167 361.779 757.625 Q363.608 754.06 363.608 746.954 Q363.608 739.824 361.779 736.283 Q359.973 732.718 356.339 732.718 M356.339 729.014 Q362.149 729.014 365.205 733.621 Q368.284 738.204 368.284 746.954 Q368.284 755.681 365.205 760.287 Q362.149 764.87 356.339 764.87 Q350.529 764.87 347.45 760.287 Q344.395 755.681 344.395 746.954 Q344.395 738.204 347.45 733.621 Q350.529 729.014 356.339 729.014 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M284.835 472.696 L307.057 472.696 L307.057 474.686 L294.511 507.256 L289.627 507.256 L301.432 476.631 L284.835 476.631 L284.835 472.696 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M316.224 472.696 L334.58 472.696 L334.58 476.631 L320.506 476.631 L320.506 485.103 Q321.524 484.756 322.543 484.594 Q323.562 484.408 324.58 484.408 Q330.367 484.408 333.747 487.58 Q337.126 490.751 337.126 496.168 Q337.126 501.746 333.654 504.848 Q330.182 507.927 323.862 507.927 Q321.687 507.927 319.418 507.557 Q317.173 507.186 314.765 506.445 L314.765 501.746 Q316.849 502.881 319.071 503.436 Q321.293 503.992 323.77 503.992 Q327.774 503.992 330.112 501.885 Q332.45 499.779 332.45 496.168 Q332.45 492.557 330.112 490.45 Q327.774 488.344 323.77 488.344 Q321.895 488.344 320.02 488.76 Q318.168 489.177 316.224 490.057 L316.224 472.696 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 475.774 Q352.728 475.774 350.899 479.339 Q349.094 482.881 349.094 490.01 Q349.094 497.117 350.899 500.682 Q352.728 504.223 356.339 504.223 Q359.973 504.223 361.779 500.682 Q363.608 497.117 363.608 490.01 Q363.608 482.881 361.779 479.339 Q359.973 475.774 356.339 475.774 M356.339 472.071 Q362.149 472.071 365.205 476.677 Q368.284 481.26 368.284 490.01 Q368.284 498.737 365.205 503.344 Q362.149 507.927 356.339 507.927 Q350.529 507.927 347.45 503.344 Q344.395 498.737 344.395 490.01 Q344.395 481.26 347.45 476.677 Q350.529 472.071 356.339 472.071 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M256.664 246.377 L264.303 246.377 L264.303 220.011 L255.992 221.678 L255.992 217.419 L264.256 215.752 L268.932 215.752 L268.932 246.377 L276.571 246.377 L276.571 250.312 L256.664 250.312 L256.664 246.377 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M296.015 218.831 Q292.404 218.831 290.576 222.395 Q288.77 225.937 288.77 233.067 Q288.77 240.173 290.576 243.738 Q292.404 247.28 296.015 247.28 Q299.65 247.28 301.455 243.738 Q303.284 240.173 303.284 233.067 Q303.284 225.937 301.455 222.395 Q299.65 218.831 296.015 218.831 M296.015 215.127 Q301.826 215.127 304.881 219.733 Q307.96 224.317 307.96 233.067 Q307.96 241.794 304.881 246.4 Q301.826 250.983 296.015 250.983 Q290.205 250.983 287.127 246.4 Q284.071 241.794 284.071 233.067 Q284.071 224.317 287.127 219.733 Q290.205 215.127 296.015 215.127 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M326.177 218.831 Q322.566 218.831 320.737 222.395 Q318.932 225.937 318.932 233.067 Q318.932 240.173 320.737 243.738 Q322.566 247.28 326.177 247.28 Q329.811 247.28 331.617 243.738 Q333.446 240.173 333.446 233.067 Q333.446 225.937 331.617 222.395 Q329.811 218.831 326.177 218.831 M326.177 215.127 Q331.987 215.127 335.043 219.733 Q338.122 224.317 338.122 233.067 Q338.122 241.794 335.043 246.4 Q331.987 250.983 326.177 250.983 Q320.367 250.983 317.288 246.4 Q314.233 241.794 314.233 233.067 Q314.233 224.317 317.288 219.733 Q320.367 215.127 326.177 215.127 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 218.831 Q352.728 218.831 350.899 222.395 Q349.094 225.937 349.094 233.067 Q349.094 240.173 350.899 243.738 Q352.728 247.28 356.339 247.28 Q359.973 247.28 361.779 243.738 Q363.608 240.173 363.608 233.067 Q363.608 225.937 361.779 222.395 Q359.973 218.831 356.339 218.831 M356.339 215.127 Q362.149 215.127 365.205 219.733 Q368.284 224.317 368.284 233.067 Q368.284 241.794 365.205 246.4 Q362.149 250.983 356.339 250.983 Q350.529 250.983 347.45 246.4 Q344.395 241.794 344.395 233.067 Q344.395 224.317 347.45 219.733 Q350.529 215.127 356.339 215.127 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip472)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,233.032 4017.76,233.032 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1248.44 458.828,1248.09 459.396,1246.64 459.964,1245.14 460.533,1244.63 461.101,1244.01 461.669,1242.29 462.238,1241.59 462.806,1239.76 463.375,1238.9 463.943,1237.91 464.511,1236.79 465.08,1235.62 465.648,1232.26 466.216,1229.84 466.785,1227.32 467.353,1225.68 467.921,1223.95 468.49,1222.07 469.058,1219.02 469.626,1215.86 470.195,1213.62 470.763,1209.19 471.331,1205.61 471.9,1203 472.468,1200.13 473.036,1197.1 473.605,1193.79 474.173,1189.37 474.741,1184.82 475.31,1180.11 475.878,1176.12 476.446,1171.99 477.015,1166.69 477.583,1162.22 478.152,1156.57 478.72,1151.6 479.288,1146.5 479.857,1139.22 480.425,1130.68 480.993,1124.05 481.562,1116.12 482.13,1110.08 482.698,1104 483.267,1097.55 483.835,1088.9 484.403,1082.2 484.972,1071.13 485.54,1063.01 486.108,1055.86 486.677,1047.37 487.245,1038.86 487.813,1029.09 488.382,1019.18 488.95,1011.42 489.518,1000.15 490.087,992.124 490.655,981.73 491.224,973.457 491.792,964.948 492.36,954.312 492.929,945.335 493.497,933.175 494.065,923.154 494.634,910.02 495.202,901.079 495.77,890.923 496.339,880.585 496.907,870.405 497.475,859.127 498.044,848.877 498.612,839.675 499.18,828.376 499.749,819.312 500.317,810.132 500.885,796.827 501.454,783.779 502.022,772.854 502.59,762.202 503.159,752.612 503.727,742.964 504.295,734.367 504.864,723.712 505.432,714.414 506.001,702.037 506.569,691.726 507.137,681.721 507.706,673.852 508.274,664.016 508.842,655.171 509.411,646.491 509.979,638.024 510.547,629.526 511.116,622.033 511.684,613.819 512.252,606.605 512.821,598.612 513.389,590.545 513.957,582.559 514.526,573.497 515.094,565.77 515.662,558.017 516.231,548.463 516.799,542.402 517.367,536.306 517.936,530.061 518.504,522.828 519.072,513.808 519.641,506.003 520.209,501.474 520.778,496.794 521.346,492.358 521.914,484.698 522.483,478.342 523.051,471.963 523.619,462.807 524.188,455.903 524.756,448.254 525.324,444.772 525.893,439.085 526.461,434.531 527.029,431.045 527.598,425.695 528.166,420.251 528.734,413.105 529.303,406.941 529.871,400.193 530.439,395.728 531.008,389.358 531.576,386.187 532.144,382.169 532.713,380.203 533.281,375.264 533.85,371.288 534.418,365.343 534.986,362.803 535.555,359.48 536.123,357.058 536.691,354.458 537.26,351.211 537.828,347.825 538.396,345.592 538.965,343.591 539.533,339.367 540.101,337.464 540.67,335.302 541.238,332.346 541.806,331.427 542.375,328.448 542.943,327.687 543.511,323.759 544.08,319.85 544.648,315.181 545.216,313.654 545.785,311.973 546.353,309.575 546.921,307.316 547.49,308.257 548.058,306.785 548.627,304.388 549.195,303.264 549.763,300.059 550.332,297.958 550.9,296.982 551.468,296.318 552.037,290.105 552.605,291.347 553.173,287.412 553.742,286.817 554.31,284.336 554.878,282.7 555.447,282.345 556.015,282.201 556.583,279.793 557.152,280.388 557.72,280.027 558.288,278.393 558.857,274.9 559.425,274.692 559.993,272.328 560.562,270.984 561.13,269.683 561.698,271.695 562.267,272.309 562.835,272.007 563.404,271.623 563.972,272.157 564.54,271.377 565.109,268.824 565.677,266.196 566.245,268.119 566.814,266.798 567.382,265.551 567.95,265.326 568.519,265.998 569.087,265.772 569.655,265.478 570.224,262.09 570.792,261.894 571.36,262.698 571.929,262.688 572.497,260.291 573.065,259.065 573.634,256.85 574.202,258.827 574.77,259.507 575.339,259.422 575.907,259.275 576.476,260.098 577.044,258.642 577.612,257.424 578.181,256.12 578.749,254.907 579.317,255.97 579.886,256.774 580.454,256.52 581.022,255.364 581.591,256.308 582.159,255.053 582.727,253.778 583.296,252.825 583.864,252.83 584.432,250.658 585.001,247.488 585.569,249.638 586.137,248.745 586.706,246.72 587.274,245.052 587.842,245.286 588.411,245.64 588.979,247.917 589.547,247.123 590.116,246.274 590.684,247.481 591.253,248.513 591.821,248.485 592.389,249.559 592.958,251.311 593.526,249.064 594.094,250.061 594.663,251.88 595.231,252.49 595.799,252.193 596.368,249.866 596.936,249.554 597.504,249.383 598.073,249.17 598.641,248.843 599.209,247.816 599.778,246.471 600.346,246.233 600.914,245.224 601.483,244.118 602.051,243.202 602.619,245.657 603.188,247.702 603.756,247.315 604.325,247.195 604.893,246.085 605.461,246.044 606.03,242.855 606.598,239.831 607.166,239.208 607.735,239.255 608.303,238.569 608.871,239.825 609.44,238.007 610.008,239.547 610.576,238.869 611.145,239.159 611.713,239.498 612.281,238.8 612.85,240.038 613.418,238.309 613.986,238.687 614.555,237.975 615.123,238.477 615.691,236.699 616.26,235.192 616.828,234.819 617.396,236.43 617.965,236.995 618.533,238.484 619.102,238.903 619.67,241.171 620.238,242.292 620.807,243.328 621.375,242.212 621.943,240.292 622.512,239.525 623.08,239.66 623.648,238.662 624.217,239.124 624.785,239.404 625.353,240.155 625.922,242.315 626.49,239.271 627.058,237.555 627.627,237.667 628.195,236.966 628.763,237.285 629.332,236.587 629.9,240.118 630.468,239.024 631.037,238.367 631.605,240.579 632.173,242.722 632.742,241.547 633.31,240.552 633.879,240.655 634.447,241.674 635.015,238.578 635.584,239.699 636.152,239.917 636.72,239.24 637.289,237.472 637.857,240.845 638.425,238.948 638.994,240.899 639.562,242.093 640.13,243.071 640.699,241.819 641.267,240.579 641.835,238.687 642.404,239.743 642.972,240.772 643.54,240.773 644.109,240.589 644.677,240.407 645.245,238.685 645.814,237.81 646.382,237.874 646.951,238.009 647.519,237.962 648.087,240.098 648.656,242.358 649.224,241.258 649.792,243.173 650.361,241.834 650.929,240.423 651.497,239.545 652.066,240.332 652.634,240.07 653.202,240.113 653.771,239.875 654.339,236.908 654.907,238.212 655.476,237.133 656.044,233.976 656.612,234.595 657.181,234.898 657.749,233.191 658.317,230.633 658.886,231.036 659.454,231.671 660.022,231.126 660.591,231.739 661.159,231.182 661.728,230.951 662.296,230.373 662.864,235.127 663.433,234.659 664.001,233.91 664.569,234.734 665.138,234.113 665.706,231.51 666.274,233.284 666.843,233.728 667.411,234.185 667.979,233.394 668.548,234.823 669.116,235.092 669.684,235.411 670.253,234.613 670.821,237.03 671.389,237.102 671.958,236.996 672.526,235.028 673.094,235.132 673.663,234.322 674.231,232.705 674.799,234.32 675.368,235.699 675.936,234.749 676.505,234.966 677.073,235.232 677.641,234.489 678.21,235.804 678.778,235.104 679.346,236.482 679.915,237.939 680.483,239.129 681.051,240.137 681.62,239.029 682.188,236.816 682.756,237.924 683.325,241.073 683.893,239.989 684.461,236.907 685.03,233.89 685.598,235.415 686.166,234.509 686.735,234.729 687.303,233.785 687.871,232.162 688.44,230.517 689.008,231.259 689.577,232.922 690.145,232.612 690.713,233.251 691.282,233.636 691.85,233.137 692.418,231.543 692.987,230.945 693.555,233.396 694.123,235.992 694.692,237.378 695.26,237.396 695.828,239.822 696.397,239.776 696.965,238.855 697.533,238.026 698.102,235.173 698.67,235.191 699.238,236.317 699.807,237.768 700.375,235.785 700.943,233.952 701.512,237.173 702.08,240.345 702.648,243.135 703.217,244.8 703.785,245.271 704.354,242.668 704.922,242.033 705.49,242.885 706.059,242.37 706.627,243.129 707.195,242.8 707.764,241.316 708.332,240.899 708.9,239.666 709.469,238.744 710.037,238.456 710.605,240.343 711.174,240.016 711.742,237.67 712.31,238.595 712.879,241.35 713.447,241.188 714.015,239.802 714.584,240.675 715.152,239.194 715.72,238.756 716.289,237.526 716.857,237.502 717.425,237.107 717.994,235.813 718.562,235.622 719.131,232.546 719.699,235.866 720.267,236.887 720.836,235.721 721.404,235.799 721.972,236.611 722.541,235.387 723.109,230.975 723.677,231.177 724.246,231.618 724.814,229.863 725.382,229.266 725.951,231.923 726.519,231.24 727.087,232.439 727.656,232.783 728.224,233.929 728.792,233.654 729.361,234.821 729.929,233.787 730.497,233.781 731.066,233.977 731.634,234.193 732.203,237.528 732.771,237.538 733.339,234.335 733.908,236.591 734.476,238.458 735.044,236.243 735.613,238.039 736.181,238.685 736.749,239.39 737.318,236.906 737.886,235.79 738.454,233.671 739.023,236.934 739.591,236.956 740.159,237.991 740.728,237.638 741.296,239.528 741.864,236.092 742.433,236.964 743.001,237.95 743.569,236.896 744.138,235.688 744.706,236.567 745.274,238.524 745.843,237.189 746.411,239.977 746.98,239.503 747.548,239.061 748.116,237.758 748.685,238.389 749.253,237.099 749.821,236.781 750.39,236.67 750.958,234.503 751.526,232.598 752.095,231.962 752.663,233.167 753.231,232.239 753.8,231.445 754.368,231.892 754.936,232.95 755.505,234.125 756.073,235.13 756.641,235.882 757.21,233.827 757.778,234.64 758.346,234.698 758.915,234.703 759.483,233.799 760.052,233.77 760.62,231.505 761.188,230.634 761.757,228.772 762.325,229.165 762.893,229.55 763.462,228.926 764.03,230.325 764.598,230.808 765.167,233.18 765.735,232.314 766.303,230.367 766.872,230.717 767.44,231.919 768.008,235.15 768.577,234.906 769.145,236.121 769.713,236.249 770.282,236.175 770.85,239.012 771.418,238.744 771.987,238.352 772.555,235.987 773.123,236.051 773.692,235.939 774.26,235.029 774.829,235.268 775.397,233.04 775.965,236.18 776.534,233.865 777.102,229.892 777.67,230.186 778.239,231.282 778.807,232.49 779.375,231.595 779.944,231.735 780.512,229.902 781.08,229.867 781.649,232.305 782.217,231.542 782.785,229.475 783.354,228.877 783.922,231.249 784.49,231.742 785.059,233.083 785.627,234.085 786.195,235.305 786.764,237.178 787.332,237.999 787.9,237.651 788.469,235.215 789.037,234.009 789.606,237.171 790.174,236.092 790.742,233.871 791.311,231.827 791.879,231.885 792.447,232.966 793.016,232.152 793.584,228.283 794.152,227.711 794.721,228.172 795.289,230.578 795.857,231.606 796.426,231.775 796.994,232.065 797.562,232.397 798.131,232.48 798.699,230.485 799.267,232.792 799.836,232.822 800.404,231.989 800.972,230.17 801.541,227.353 802.109,227.814 802.678,227.461 803.246,230.083 803.814,230.448 804.383,233.034 804.951,234.255 805.519,233.411 806.088,235.451 806.656,236.459 807.224,235.082 807.793,233.172 808.361,234.522 808.929,234.762 809.498,234.817 810.066,235.112 810.634,236.286 811.203,236.089 811.771,237.951 812.339,238.751 812.908,238.612 813.476,238.265 814.044,236.004 814.613,234.946 815.181,236.051 815.749,235.836 816.318,236.824 816.886,232.626 817.455,234.755 818.023,235.787 818.591,235.917 819.16,236.811 819.728,236.701 820.296,234.51 820.865,234.615 821.433,236.401 822.001,234.433 822.57,233.306 823.138,231.152 823.706,230.375 824.275,232.907 824.843,233.956 825.411,234.173 825.98,234.31 826.548,235.162 827.116,235.191 827.685,236.143 828.253,238.225 828.821,238.953 829.39,238.695 829.958,237.327 830.526,236.083 831.095,234.832 831.663,233.625 832.232,234.675 832.8,238.702 833.368,240.257 833.937,241.831 834.505,240.221 835.073,238.533 835.642,238.131 836.21,237.01 836.778,235.762 837.347,235.618 837.915,235.512 838.483,234.36 839.052,234.305 839.62,234.252 840.188,237.117 840.757,235.684 841.325,234.561 841.893,234.594 842.462,234.417 843.03,235.391 843.598,234.29 844.167,232.901 844.735,231.775 845.304,230.948 845.872,230.057 846.44,229.131 847.009,231.432 847.577,232.637 848.145,234.664 848.714,234.513 849.282,234.205 849.85,232.337 850.419,234.358 850.987,234.46 851.555,232.428 852.124,231.488 852.692,234.545 853.26,234.53 853.829,234.243 854.397,234.208 854.965,236.293 855.534,234.092 856.102,234.015 856.67,234.053 857.239,234.122 857.807,236.024 858.375,232.644 858.944,232.775 859.512,232.651 860.081,233.752 860.649,233.711 861.217,230.691 861.786,228.936 862.354,229.146 862.922,229.497 863.491,229.686 864.059,228.009 864.627,227.595 865.196,227.987 865.764,229.439 866.332,228.689 866.901,227.015 867.469,228.465 868.037,228.707 868.606,229.082 869.174,229.356 869.742,228.782 870.311,233.142 870.879,233.248 871.447,232.312 872.016,232.197 872.584,232.422 873.152,232.574 873.721,232.587 874.289,232.694 874.858,231.61 875.426,231.705 875.994,231.707 876.563,228.772 877.131,229.138 877.699,228.463 878.268,228.97 878.836,229.594 879.404,228.845 879.973,228.08 880.541,227.588 881.109,228.056 881.678,228.465 882.246,227.882 882.814,228.308 883.383,230.793 883.951,229.175 884.519,229.635 885.088,231.091 885.656,231.334 886.224,234.675 886.793,235.818 887.361,235.925 887.93,235.74 888.498,235.864 889.066,235.137 889.635,235.063 890.203,233.032 890.771,234.365 891.34,234.304 891.908,236.233 892.476,237.085 893.045,234.954 893.613,232.883 894.181,234.126 894.75,235.402 895.318,236.457 895.886,236.327 896.455,236.274 897.023,236.429 897.591,236.178 898.16,235.199 898.728,233.189 899.296,235.493 899.865,235.38 900.433,234.396 901.001,234.527 901.57,234.766 902.138,234.829 902.707,233.687 903.275,231.979 903.843,232.252 904.412,232.45 904.98,232.573 905.548,233.725 906.117,236.996 906.685,236.743 907.253,235.681 907.822,235.489 908.39,233.256 908.958,235.492 909.527,235.456 910.095,236.221 910.663,236.112 911.232,235.219 911.8,235.363 912.368,235.203 912.937,238.355 913.505,238.999 914.073,239.52 914.642,241.092 915.21,240.338 915.779,241.082 916.347,240.535 916.915,239.901 917.484,239.32 918.052,239.787 918.62,239.234 919.189,238.734 919.757,240.464 920.325,242.206 920.894,239.439 921.462,238.875 922.03,239.558 922.599,236.903 923.167,236.398 923.735,236.076 924.304,232.947 924.872,232.784 925.44,231.711 926.009,232.787 926.577,231.613 927.145,232.591 927.714,232.649 928.282,233.569 928.85,234.516 929.419,234.443 929.987,234.234 930.556,235.979 931.124,233.597 931.692,234.467 932.261,235.357 932.829,234.152 933.397,235.027 933.966,231.759 934.534,231.969 935.102,231.824 935.671,232.963 936.239,232.999 936.807,234.085 937.376,234.919 937.944,233.636 938.512,235.639 939.081,235.658 939.649,236.35 940.217,234.239 940.786,234.099 941.354,231.109 941.922,230.121 942.491,229.43 943.059,227.82 943.627,228.024 944.196,229.149 944.764,230.468 945.333,227.558 945.901,229.037 946.469,229.338 947.038,227.824 947.606,229.238 948.174,229.402 948.743,230.623 949.311,229.824 949.879,230.099 950.448,230.324 951.016,229.417 951.584,228.697 952.153,228.822 952.721,230.128 953.289,231.428 953.858,230.547 954.426,228.972 954.994,230.306 955.563,230.663 956.131,231.02 956.699,233.991 957.268,233.92 957.836,235.025 958.405,232.878 958.973,234.892 959.541,237.203 960.11,236.943 960.678,236.763 961.246,235.522 961.815,232.373 962.383,231.466 962.951,231.743 963.52,231.865 964.088,232.117 964.656,233.135 965.225,234.263 965.793,232.057 966.361,233.454 966.93,233.463 967.498,235.295 968.066,234.146 968.635,235.27 969.203,236.398 969.771,236.202 970.34,236.027 970.908,235.59 971.476,239.399 972.045,236.776 972.613,235.589 973.182,236.252 973.75,235.831 974.318,235.816 974.887,235.551 975.455,235.597 976.023,235.57 976.592,234.226 977.16,233.119 977.728,234.073 978.297,233.134 978.865,235.27 979.433,234.051 980.002,232.984 980.57,231.076 981.138,230.022 981.707,230.053 982.275,230.998 982.843,231.12 983.412,234.397 983.98,233.133 984.548,233.076 985.117,233.037 985.685,234.12 986.253,232.067 986.822,234.427 987.39,235.533 987.959,234.187 988.527,235.888 989.095,232.378 989.664,234.29 990.232,234.283 990.8,234.143 991.369,233.929 991.937,232.966 992.505,233.144 993.074,234.926 993.642,230.707 994.21,228.982 994.779,227.273 995.347,227.715 995.915,230.183 996.484,233.308 997.052,232.438 997.62,234.483 998.189,235.47 998.757,233.292 999.325,231.327 999.894,231.322 1000.46,232.456 1001.03,228.374 1001.6,227.822 1002.17,228.321 1002.74,229.719 1003.3,232.279 1003.87,236.436 1004.44,235.302 1005.01,236.186 1005.58,235.112 1006.15,233.954 1006.71,234.802 1007.28,235.855 1007.85,235.718 1008.42,234.672 1008.99,233.623 1009.56,232.834 1010.12,232.584 1010.69,234.813 1011.26,234.934 1011.83,234.704 1012.4,235.63 1012.97,236.293 1013.53,236.031 1014.1,232.735 1014.67,234.793 1015.24,234.682 1015.81,233.699 1016.38,233.644 1016.94,233.746 1017.51,233.445 1018.08,230.369 1018.65,231.482 1019.22,230.508 1019.79,229.585 1020.35,230.114 1020.92,229.642 1021.49,228.968 1022.06,229.433 1022.63,229.806 1023.2,229.125 1023.76,232.609 1024.33,231.56 1024.9,234.989 1025.47,233.919 1026.04,238.135 1026.61,236.042 1027.17,233.761 1027.74,233.612 1028.31,233.479 1028.88,231.487 1029.45,229.629 1030.02,230.717 1030.58,228.668 1031.15,228.124 1031.72,229.462 1032.29,229.8 1032.86,230.206 1033.43,231.638 1033.99,230.82 1034.56,231.158 1035.13,230.299 1035.7,228.448 1036.27,229.938 1036.84,229.386 1037.4,228.642 1037.97,229.245 1038.54,231.708 1039.11,233.961 1039.68,233.982 1040.25,234.877 1040.81,233.945 1041.38,233.917 1041.95,231.883 1042.52,236.16 1043.09,238.233 1043.66,237.936 1044.22,237.568 1044.79,236.198 1045.36,234.013 1045.93,234.928 1046.5,234.995 1047.07,233.931 1047.63,234.93 1048.2,235.853 1048.77,234.732 1049.34,234.601 1049.91,236.458 1050.48,236.077 1051.05,234.72 1051.61,234.438 1052.18,234.437 1052.75,235.541 1053.32,235.435 1053.89,236.347 1054.46,236.006 1055.02,238.029 1055.59,236.873 1056.16,236.655 1056.73,236.12 1057.3,234.75 1057.87,235.619 1058.43,236.628 1059,234.387 1059.57,234.073 1060.14,233.024 1060.71,230.989 1061.28,232.121 1061.84,231.003 1062.41,230.693 1062.98,228.685 1063.55,227.971 1064.12,227.15 1064.69,227.785 1065.25,228.111 1065.82,229.659 1066.39,228.728 1066.96,230.084 1067.53,229.415 1068.1,229.822 1068.66,229.097 1069.23,228.618 1069.8,227.827 1070.37,228.162 1070.94,228.583 1071.51,229.067 1072.07,230.367 1072.64,230.617 1073.21,231.939 1073.78,233.301 1074.35,234.252 1074.92,234.13 1075.48,234.213 1076.05,235.174 1076.62,236.069 1077.19,235.983 1077.76,235.947 1078.33,234.771 1078.89,233.673 1079.46,235.87 1080.03,236.858 1080.6,237.779 1081.17,238.288 1081.74,236.927 1082.3,240.947 1082.87,241.514 1083.44,242.076 1084.01,239.45 1084.58,240.069 1085.15,239.449 1085.71,240.14 1086.28,238.793 1086.85,236.384 1087.42,235.265 1087.99,232.047 1088.56,229.865 1089.12,228.074 1089.69,228.253 1090.26,228.316 1090.83,228.728 1091.4,233.258 1091.97,233.308 1092.53,232.369 1093.1,231.229 1093.67,230.328 1094.24,232.724 1094.81,233.66 1095.38,235.477 1095.94,234.347 1096.51,232.011 1097.08,233.208 1097.65,231.053 1098.22,229.273 1098.79,230.321 1099.35,229.444 1099.92,229.681 1100.49,226.916 1101.06,229.318 1101.63,229.449 1102.2,229.639 1102.76,229.067 1103.33,228.243 1103.9,229.777 1104.47,229.943 1105.04,230.23 1105.61,229.391 1106.17,229.623 1106.74,229.649 1107.31,228.891 1107.88,229.138 1108.45,227.308 1109.02,229.859 1109.58,229.888 1110.15,233.408 1110.72,235.688 1111.29,235.405 1111.86,234.338 1112.43,233.448 1112.99,234.504 1113.56,233.624 1114.13,235.426 1114.7,235.483 1115.27,235.432 1115.84,237.325 1116.4,239.428 1116.97,235.835 1117.54,236.561 1118.11,233.517 1118.68,232.633 1119.25,233.721 1119.81,233.47 1120.38,229.417 1120.95,231.736 1121.52,229.903 1122.09,231.441 1122.66,231.741 1123.23,232.898 1123.79,234.93 1124.36,234.8 1124.93,236.744 1125.5,235.54 1126.07,237.303 1126.64,237.1 1127.2,237.723 1127.77,236.285 1128.34,238.035 1128.91,235.57 1129.48,235.478 1130.05,235.342 1130.61,237.325 1131.18,238.198 1131.75,240.727 1132.32,239.313 1132.89,238.839 1133.46,237.32 1134.02,238.253 1134.59,239.949 1135.16,239.429 1135.73,241.865 1136.3,237.984 1136.87,235.734 1137.43,233.434 1138,231.419 1138.57,231.378 1139.14,232.471 1139.71,230.534 1140.28,231.58 1140.84,230.472 1141.41,230.642 1141.98,230.851 1142.55,231.088 1143.12,232.293 1143.69,229.22 1144.25,231.653 1144.82,233.861 1145.39,231.876 1145.96,230.982 1146.53,231.207 1147.1,230.142 1147.66,231.285 1148.23,229.358 1148.8,230.504 1149.37,233.916 1149.94,234.945 1150.51,236.765 1151.07,237.725 1151.64,237.492 1152.21,236.832 1152.78,236.259 1153.35,237.045 1153.92,236.594 1154.48,235.239 1155.05,234.981 1155.62,234.761 1156.19,234.376 1156.76,236.121 1157.33,235.898 1157.89,234.78 1158.46,235.758 1159.03,237.598 1159.6,237.161 1160.17,236.827 1160.74,237.114 1161.3,235.672 1161.87,233.491 1162.44,232.285 1163.01,231.996 1163.58,234.168 1164.15,231.972 1164.71,230.952 1165.28,231.149 1165.85,230.119 1166.42,230.357 1166.99,231.52 1167.56,234.694 1168.12,234.467 1168.69,235.283 1169.26,233.959 1169.83,234.068 1170.4,234.113 1170.97,234.022 1171.53,231.06 1172.1,229.941 1172.67,228.887 1173.24,230.274 1173.81,230.597 1174.38,230.653 1174.94,231.794 1175.51,229.859 1176.08,229.897 1176.65,229.971 1177.22,230.267 1177.79,232.309 1178.35,231.372 1178.92,234.657 1179.49,233.436 1180.06,233.599 1180.63,234.464 1181.2,233.369 1181.76,231.32 1182.33,232.672 1182.9,234.724 1183.47,234.446 1184.04,233.987 1184.61,232.783 1185.17,233.883 1185.74,235.733 1186.31,235.459 1186.88,235.288 1187.45,235.098 1188.02,233.955 1188.58,232.795 1189.15,230.604 1189.72,229.58 1190.29,230.709 1190.86,229.707 1191.43,230.173 1192,226.192 1192.56,226.62 1193.13,228.11 1193.7,228.403 1194.27,228.599 1194.84,229.822 1195.41,229.94 1195.97,232.165 1196.54,232.175 1197.11,232.358 1197.68,232.36 1198.25,231.475 1198.82,232.532 1199.38,231.645 1199.95,230.486 1200.52,229.537 1201.09,228.661 1201.66,227.979 1202.23,230.422 1202.79,228.487 1203.36,231.123 1203.93,231.478 1204.5,231.682 1205.07,230.734 1205.64,230.015 1206.2,231.472 1206.77,231.595 1207.34,231.843 1207.91,229.8 1208.48,229.129 1209.05,228.531 1209.61,227.95 1210.18,228.295 1210.75,228.746 1211.32,229.084 1211.89,229.359 1212.46,230.795 1213.02,229.832 1213.59,231.464 1214.16,231.583 1214.73,232.017 1215.3,232.103 1215.87,232.443 1216.43,236.009 1217,235.944 1217.57,237.696 1218.14,238.408 1218.71,239.185 1219.28,237.887 1219.84,236.549 1220.41,237.335 1220.98,236.93 1221.55,238.811 1222.12,236.407 1222.69,235.182 1223.25,237.25 1223.82,238.11 1224.39,237.567 1224.96,237.165 1225.53,237.934 1226.1,237.245 1226.66,237.952 1227.23,238.559 1227.8,237.154 1228.37,236.855 1228.94,234.364 1229.51,233.39 1230.07,232.188 1230.64,235.029 1231.21,233.053 1231.78,234.107 1232.35,234.163 1232.92,232.233 1233.48,231.317 1234.05,231.242 1234.62,231.46 1235.19,231.626 1235.76,231.677 1236.33,232.725 1236.89,233.709 1237.46,232.693 1238.03,231.653 1238.6,231.897 1239.17,235.103 1239.74,234.972 1240.3,236.135 1240.87,235.899 1241.44,234.58 1242.01,234.361 1242.58,230.259 1243.15,228.696 1243.71,229.206 1244.28,227.239 1244.85,226.678 1245.42,224.989 1245.99,224.813 1246.56,226.245 1247.12,226.792 1247.69,227.51 1248.26,229.075 1248.83,229.644 1249.4,229.976 1249.97,230.298 1250.53,232.372 1251.1,231.568 1251.67,232.858 1252.24,233.905 1252.81,233.876 1253.38,230.937 1253.94,231.046 1254.51,227.246 1255.08,226.656 1255.65,228.371 1256.22,229.773 1256.79,230.016 1257.35,232.355 1257.92,229.415 1258.49,230.859 1259.06,229.292 1259.63,229.688 1260.2,229.955 1260.76,234.191 1261.33,238.222 1261.9,236.838 1262.47,235.622 1263.04,235.467 1263.61,237.309 1264.18,236.979 1264.74,234.834 1265.31,233.846 1265.88,233.635 1266.45,233.677 1267.02,236.767 1267.59,237.665 1268.15,237.577 1268.72,235.435 1269.29,234.289 1269.86,235.446 1270.43,237.566 1271,236.358 1271.56,235.051 1272.13,234.238 1272.7,234.258 1273.27,235.319 1273.84,232.314 1274.41,231.564 1274.97,230.707 1275.54,230.857 1276.11,230.119 1276.68,229.526 1277.25,229.853 1277.82,230.054 1278.38,230.429 1278.95,232.87 1279.52,233.106 1280.09,234.132 1280.66,234.189 1281.23,234.104 1281.79,233.939 1282.36,233.869 1282.93,234.945 1283.5,236.872 1284.07,235.718 1284.64,234.4 1285.2,233.271 1285.77,233.327 1286.34,232.338 1286.91,234.237 1287.48,235.984 1288.05,236.668 1288.61,234.365 1289.18,235.365 1289.75,237.314 1290.32,238.074 1290.89,235.561 1291.46,235.553 1292.02,237.607 1292.59,236.162 1293.16,234.876 1293.73,234.815 1294.3,234.772 1294.87,235.393 1295.43,237.253 1296,235.892 1296.57,234.779 1297.14,235.697 1297.71,234.087 1298.28,234.915 1298.84,234.071 1299.41,233.015 1299.98,232.879 1300.55,234.017 1301.12,232.943 1301.69,232.859 1302.25,231.898 1302.82,230.934 1303.39,230.968 1303.96,231.151 1304.53,230.055 1305.1,230.173 1305.66,231.481 1306.23,231.582 1306.8,233.92 1307.37,233.981 1307.94,233.853 1308.51,232.83 1309.07,234.803 1309.64,233.5 1310.21,231.554 1310.78,230.444 1311.35,234.624 1311.92,237.341 1312.48,238.103 1313.05,237.692 1313.62,237.052 1314.19,234.697 1314.76,234.45 1315.33,233.252 1315.89,234.348 1316.46,234.287 1317.03,234.311 1317.6,233.344 1318.17,234.437 1318.74,235.158 1319.3,236.906 1319.87,237.455 1320.44,236.915 1321.01,235.719 1321.58,234.186 1322.15,235.066 1322.71,236.867 1323.28,234.549 1323.85,235.352 1324.42,236.207 1324.99,236.944 1325.56,235.666 1326.12,234.434 1326.69,235.141 1327.26,235.954 1327.83,233.578 1328.4,232.207 1328.97,233.118 1329.53,232.009 1330.1,230.915 1330.67,230.061 1331.24,229.31 1331.81,230.424 1332.38,230.504 1332.94,232.809 1333.51,231.862 1334.08,231.919 1334.65,231.024 1335.22,232.068 1335.79,232.013 1336.36,230.729 1336.92,231.864 1337.49,231.878 1338.06,229.537 1338.63,230.775 1339.2,229.933 1339.77,232.184 1340.33,231.196 1340.9,227.995 1341.47,229.459 1342.04,232.731 1342.61,233.564 1343.18,233.523 1343.74,232.472 1344.31,229.544 1344.88,230.721 1345.45,229.876 1346.02,228.149 1346.59,227.602 1347.15,230.181 1347.72,230.45 1348.29,231.541 1348.86,230.654 1349.43,231.994 1350,233.116 1350.56,233.31 1351.13,233.368 1351.7,235.482 1352.27,236.296 1352.84,237.139 1353.41,235.76 1353.97,236.554 1354.54,234.882 1355.11,234.64 1355.68,236.437 1356.25,234.301 1356.82,234.998 1357.38,235.045 1357.95,235.882 1358.52,235.709 1359.09,234.401 1359.66,233.204 1360.23,233.076 1360.79,231.932 1361.36,232.772 1361.93,231.724 1362.5,231.911 1363.07,230.896 1363.64,228.963 1364.2,230.164 1364.77,231.136 1365.34,230.203 1365.91,230.628 1366.48,227.582 1367.05,225.746 1367.61,226.096 1368.18,223.582 1368.75,225.33 1369.32,227.183 1369.89,225.688 1370.46,225.455 1371.02,226.224 1371.59,227.742 1372.16,229.324 1372.73,230.714 1373.3,229.871 1373.87,230.141 1374.43,229.583 1375,228.077 1375.57,228.53 1376.14,225.812 1376.71,227.408 1377.28,227.841 1377.84,232.364 1378.41,232.461 1378.98,234.481 1379.55,233.524 1380.12,234.703 1380.69,233.881 1381.25,234.131 1381.82,234.218 1382.39,235.413 1382.96,235.353 1383.53,234.43 1384.1,234.59 1384.66,235.679 1385.23,233.613 1385.8,233.912 1386.37,233.632 1386.94,233.921 1387.51,234.944 1388.07,234.787 1388.64,234.78 1389.21,235.757 1389.78,235.798 1390.35,236.855 1390.92,240.899 1391.48,239.332 1392.05,238.736 1392.62,237.511 1393.19,237.336 1393.76,238.018 1394.33,237.939 1394.89,237.715 1395.46,236.461 1396.03,235.23 1396.6,235.934 1397.17,236.86 1397.74,237.557 1398.3,238.354 1398.87,238.834 1399.44,238.568 1400.01,236.125 1400.58,236.977 1401.15,236.683 1401.71,235.3 1402.28,235.189 1402.85,232.799 1403.42,233.773 1403.99,233.599 1404.56,233.471 1405.13,233.426 1405.69,234.333 1406.26,235.441 1406.83,237.348 1407.4,236.794 1407.97,236.551 1408.54,236.414 1409.1,236.149 1409.67,237.848 1410.24,237.321 1410.81,236.967 1411.38,236.5 1411.95,235.113 1412.51,235.955 1413.08,235.817 1413.65,235.361 1414.22,235.008 1414.79,233.59 1415.36,235.436 1415.92,235.083 1416.49,234.725 1417.06,231.492 1417.63,232.358 1418.2,231.168 1418.77,231.371 1419.33,230.441 1419.9,230.613 1420.47,231.941 1421.04,231.988 1421.61,229.827 1422.18,231.909 1422.74,231.769 1423.31,232.83 1423.88,234.113 1424.45,233.913 1425.02,232.786 1425.59,232.768 1426.15,232.755 1426.72,232.76 1427.29,230.782 1427.86,229.693 1428.43,228.587 1429,228.768 1429.56,229.978 1430.13,229.104 1430.7,229.176 1431.27,227.422 1431.84,227.737 1432.41,228.047 1432.97,226.241 1433.54,224.998 1434.11,223.54 1434.68,219.895 1435.25,220.671 1435.82,220.621 1436.38,222.68 1436.95,223.445 1437.52,223.238 1438.09,223.066 1438.66,223.967 1439.23,225.92 1439.79,227.719 1440.36,228.043 1440.93,229.449 1441.5,230.893 1442.07,229.948 1442.64,230.383 1443.2,229.74 1443.77,230.127 1444.34,230.562 1444.91,231.23 1445.48,230.799 1446.05,231.238 1446.61,235.436 1447.18,234.41 1447.75,235.608 1448.32,236.451 1448.89,237.414 1449.46,238.262 1450.02,241.158 1450.59,240.78 1451.16,243.554 1451.73,242.985 1452.3,243.498 1452.87,243.565 1453.43,243.158 1454,243.259 1454.57,243.569 1455.14,243.025 1455.71,240.215 1456.28,240.712 1456.84,237.316 1457.41,236.811 1457.98,236.314 1458.55,235.03 1459.12,234.153 1459.69,235.205 1460.25,236.14 1460.82,235.041 1461.39,234.965 1461.96,236.762 1462.53,234.45 1463.1,234.534 1463.66,234.478 1464.23,235.279 1464.8,236.28 1465.37,236.431 1465.94,233.31 1466.51,232.264 1467.07,235.17 1467.64,236.027 1468.21,235.659 1468.78,235.5 1469.35,232.484 1469.92,235.608 1470.48,239.502 1471.05,239.969 1471.62,238.205 1472.19,238.541 1472.76,239.245 1473.33,239.623 1473.89,240.094 1474.46,237.61 1475.03,237.082 1475.6,236.77 1476.17,235.204 1476.74,235.016 1477.31,233.721 1477.87,233.321 1478.44,232.173 1479.01,233.183 1479.58,235.282 1480.15,233.821 1480.72,233.374 1481.28,234.528 1481.85,234.274 1482.42,233.889 1482.99,233.52 1483.56,233.443 1484.13,233.338 1484.69,234.154 1485.26,236.155 1485.83,235.76 1486.4,236.377 1486.97,236.797 1487.54,236.491 1488.1,236.031 1488.67,233.342 1489.24,233.984 1489.81,234.739 1490.38,236.55 1490.95,235.222 1491.51,233.716 1492.08,234.345 1492.65,233.115 1493.22,233 1493.79,233.084 1494.36,233.855 1494.92,234.667 1495.49,232.339 1496.06,232.253 1496.63,234.131 1497.2,230.717 1497.77,231.69 1498.33,230.484 1498.9,230.531 1499.47,229.454 1500.04,226.381 1500.61,223.53 1501.18,225.078 1501.74,224.629 1502.31,223.826 1502.88,223.248 1503.45,226.021 1504.02,226.233 1504.59,227.559 1505.15,226.854 1505.72,226.334 1506.29,226.889 1506.86,231.44 1507.43,232.467 1508,232.533 1508.56,233.646 1509.13,234.626 1509.7,234.45 1510.27,233.2 1510.84,233.146 1511.41,232.236 1511.97,232.389 1512.54,232.391 1513.11,231.322 1513.68,231.616 1514.25,235.815 1514.82,235.607 1515.38,237.404 1515.95,236.071 1516.52,234.754 1517.09,233.351 1517.66,231.38 1518.23,230.419 1518.79,229.342 1519.36,229.655 1519.93,228.945 1520.5,230.326 1521.07,230.619 1521.64,230.848 1522.2,230.955 1522.77,230.209 1523.34,232.471 1523.91,233.253 1524.48,231.159 1525.05,232.391 1525.61,229.321 1526.18,230.765 1526.75,231.828 1527.32,231.041 1527.89,231.127 1528.46,231.462 1529.02,232.602 1529.59,233.842 1530.16,232.692 1530.73,232.574 1531.3,232.537 1531.87,231.318 1532.43,231.402 1533,230.674 1533.57,232.971 1534.14,234.005 1534.71,233.756 1535.28,233.606 1535.84,232.699 1536.41,230.632 1536.98,230.687 1537.55,229.936 1538.12,230.044 1538.69,230.286 1539.25,231.211 1539.82,232.557 1540.39,231.59 1540.96,228.493 1541.53,228.782 1542.1,232.1 1542.66,232.224 1543.23,231.388 1543.8,230.347 1544.37,232.604 1544.94,232.56 1545.51,234.558 1546.08,235.595 1546.64,236.241 1547.21,237.97 1547.78,238.64 1548.35,238.214 1548.92,238.98 1549.49,238.645 1550.05,236.881 1550.62,236.556 1551.19,234.389 1551.76,234.313 1552.33,235.217 1552.9,230.986 1553.46,232.177 1554.03,233.285 1554.6,231.423 1555.17,232.79 1555.74,230.927 1556.31,230.033 1556.87,231.351 1557.44,231.618 1558.01,231.663 1558.58,231.871 1559.15,232.749 1559.72,227.72 1560.28,228.007 1560.85,226.066 1561.42,226.606 1561.99,230.067 1562.56,230.397 1563.13,229.844 1563.69,229.119 1564.26,228.368 1564.83,230.73 1565.4,231.901 1565.97,232.861 1566.54,233.108 1567.1,232.076 1567.67,233.18 1568.24,233.075 1568.81,232.099 1569.38,228.111 1569.95,230.628 1570.51,231.073 1571.08,230.365 1571.65,231.787 1572.22,231.817 1572.79,231.009 1573.36,231.143 1573.92,232.299 1574.49,236.476 1575.06,235.413 1575.63,236.364 1576.2,237.127 1576.77,236.803 1577.33,236.465 1577.9,236.169 1578.47,236.058 1579.04,234.932 1579.61,234.783 1580.18,234.73 1580.74,233.663 1581.31,233.737 1581.88,235.938 1582.45,236.792 1583.02,235.567 1583.59,235.372 1584.15,235.365 1584.72,235.247 1585.29,235.16 1585.86,234.952 1586.43,234.737 1587,232.724 1587.56,231.683 1588.13,232.878 1588.7,230.711 1589.27,229.84 1589.84,228.993 1590.41,230.234 1590.97,229.312 1591.54,228.554 1592.11,228.873 1592.68,227.036 1593.25,229.564 1593.82,231.067 1594.38,231.259 1594.95,232.51 1595.52,232.754 1596.09,231.712 1596.66,230.923 1597.23,233.371 1597.79,233.363 1598.36,234.429 1598.93,233.288 1599.5,233.429 1600.07,233.308 1600.64,232.415 1601.2,234.609 1601.77,236.393 1602.34,236.337 1602.91,237.23 1603.48,238.068 1604.05,237.668 1604.61,236.34 1605.18,237.202 1605.75,235.961 1606.32,234.844 1606.89,234.534 1607.46,233.485 1608.02,232.522 1608.59,229.476 1609.16,230.638 1609.73,231.923 1610.3,230.007 1610.87,229.325 1611.43,228.719 1612,227.837 1612.57,231.195 1613.14,232.223 1613.71,233.453 1614.28,235.501 1614.84,234.314 1615.41,232.121 1615.98,230.021 1616.55,231.146 1617.12,230.24 1617.69,230.457 1618.26,231.609 1618.82,231.726 1619.39,235.111 1619.96,232.76 1620.53,232.861 1621.1,232.844 1621.67,232.231 1622.23,233.314 1622.8,233.146 1623.37,233.235 1623.94,236.255 1624.51,237.98 1625.08,237.636 1625.64,235.17 1626.21,237.021 1626.78,238.553 1627.35,236.061 1627.92,237.869 1628.49,236.676 1629.05,235.215 1629.62,236.083 1630.19,235.861 1630.76,235.608 1631.33,235.464 1631.9,233.978 1632.46,233.053 1633.03,233.272 1633.6,233.262 1634.17,233.251 1634.74,233.262 1635.31,235.486 1635.87,235.067 1636.44,235.118 1637.01,235.97 1637.58,235.892 1638.15,236.743 1638.72,236.321 1639.28,236.002 1639.85,235.773 1640.42,236.56 1640.99,236.603 1641.56,235.062 1642.13,234.934 1642.69,233.664 1643.26,232.598 1643.83,230.381 1644.4,228.703 1644.97,228 1645.54,230.207 1646.1,227.285 1646.67,229.87 1647.24,230.012 1647.81,229.314 1648.38,229.388 1648.95,229.412 1649.51,228.572 1650.08,228.785 1650.65,231.129 1651.22,231.428 1651.79,230.5 1652.36,229.648 1652.92,229.808 1653.49,231.004 1654.06,231.958 1654.63,230.843 1655.2,233.144 1655.77,234.253 1656.33,232.172 1656.9,231.222 1657.47,231.582 1658.04,230.79 1658.61,231.055 1659.18,232.377 1659.74,231.388 1660.31,229.473 1660.88,231.069 1661.45,231.154 1662.02,231.036 1662.59,231.069 1663.15,230.006 1663.72,230.314 1664.29,230.538 1664.86,229.515 1665.43,230.89 1666,230.82 1666.56,232.245 1667.13,231.478 1667.7,230.741 1668.27,237.942 1668.84,237.644 1669.41,238.137 1669.97,237.966 1670.54,238.879 1671.11,236.611 1671.68,236.475 1672.25,240.387 1672.82,240.766 1673.38,241.306 1673.95,240.693 1674.52,240.178 1675.09,241.767 1675.66,241.082 1676.23,239.476 1676.79,241.012 1677.36,241.41 1677.93,240.924 1678.5,239.227 1679.07,239.025 1679.64,236.441 1680.2,236.124 1680.77,236.633 1681.34,235.201 1681.91,234.963 1682.48,233.647 1683.05,232.716 1683.61,229.58 1684.18,229.61 1684.75,230.861 1685.32,230.695 1685.89,232.718 1686.46,230.698 1687.02,230.822 1687.59,232.033 1688.16,234.039 1688.73,232.002 1689.3,231.906 1689.87,233.983 1690.44,233.839 1691,234.755 1691.57,234.61 1692.14,235.372 1692.71,234.149 1693.28,233.045 1693.85,234.132 1694.41,232.901 1694.98,233.97 1695.55,233.78 1696.12,233.531 1696.69,232.536 1697.26,230.659 1697.82,230.604 1698.39,232.664 1698.96,233.832 1699.53,234.714 1700.1,230.706 1700.67,230.017 1701.23,230.281 1701.8,230.392 1702.37,231.862 1702.94,231.883 1703.51,230.906 1704.08,229.852 1704.64,230.029 1705.21,228.263 1705.78,229.502 1706.35,227.543 1706.92,227.813 1707.49,227.191 1708.05,228.691 1708.62,230.023 1709.19,230.228 1709.76,229.257 1710.33,230.483 1710.9,229.778 1711.46,227.973 1712.03,228.204 1712.6,225.542 1713.17,222.107 1713.74,223.02 1714.31,224.731 1714.87,223.518 1715.44,226.374 1716.01,226.984 1716.58,227.329 1717.15,227.74 1717.72,230.206 1718.28,228.618 1718.85,229.101 1719.42,230.628 1719.99,231.897 1720.56,229.899 1721.13,230.423 1721.69,227.712 1722.26,226.029 1722.83,226.75 1723.4,228.358 1723.97,229.661 1724.54,230.182 1725.1,232.569 1725.67,233.852 1726.24,233.02 1726.81,232.113 1727.38,231.227 1727.95,234.742 1728.51,237.913 1729.08,239.903 1729.65,240.529 1730.22,241.148 1730.79,239.778 1731.36,241.734 1731.92,241.266 1732.49,241.806 1733.06,240.379 1733.63,238.93 1734.2,237.66 1734.77,235.218 1735.33,236.083 1735.9,235.915 1736.47,234.897 1737.04,233.865 1737.61,234.94 1738.18,236.9 1738.74,238.739 1739.31,238.69 1739.88,237.318 1740.45,235.969 1741.02,236.04 1741.59,236.689 1742.15,235.565 1742.72,236.292 1743.29,236.083 1743.86,236.94 1744.43,237.677 1745,237.26 1745.56,237.815 1746.13,236.48 1746.7,236.187 1747.27,237.801 1747.84,237.253 1748.41,237.929 1748.97,237.227 1749.54,235.909 1750.11,237.742 1750.68,238.155 1751.25,237.583 1751.82,237.144 1752.38,237.664 1752.95,235.088 1753.52,233.723 1754.09,230.417 1754.66,234.392 1755.23,234.147 1755.79,232.906 1756.36,231.517 1756.93,232.277 1757.5,233 1758.07,230.7 1758.64,231.683 1759.21,231.556 1759.77,230.591 1760.34,229.851 1760.91,228.898 1761.48,230.991 1762.05,230.07 1762.62,232.054 1763.18,232.069 1763.75,230.83 1764.32,228.892 1764.89,229.991 1765.46,228.121 1766.03,228.278 1766.59,228.348 1767.16,226.78 1767.73,227.277 1768.3,225.906 1768.87,225.596 1769.44,226.003 1770,226.517 1770.57,227.021 1771.14,228.398 1771.71,227.58 1772.28,228.94 1772.85,230.402 1773.41,230.555 1773.98,230.629 1774.55,230.859 1775.12,233.213 1775.69,230.076 1776.26,232.518 1776.82,234.541 1777.39,234.59 1777.96,235.637 1778.53,235.514 1779.1,236.274 1779.67,234.255 1780.23,231.929 1780.8,231.14 1781.37,232.115 1781.94,232.351 1782.51,235.315 1783.08,234.227 1783.64,235.284 1784.21,236.293 1784.78,238.109 1785.35,236.642 1785.92,237.252 1786.49,238.104 1787.05,238.478 1787.62,235.827 1788.19,235.457 1788.76,236.367 1789.33,235.012 1789.9,234.155 1790.46,234.068 1791.03,233.987 1791.6,233.742 1792.17,229.691 1792.74,230.826 1793.31,232.134 1793.87,232.251 1794.44,233.539 1795.01,233.489 1795.58,233.47 1796.15,233.492 1796.72,232.518 1797.28,231.452 1797.85,231.704 1798.42,233.925 1798.99,233.879 1799.56,234.949 1800.13,234.681 1800.69,233.391 1801.26,234.289 1801.83,236.132 1802.4,238.006 1802.97,236.739 1803.54,237.592 1804.1,235.133 1804.67,235.803 1805.24,237.767 1805.81,238.239 1806.38,236.493 1806.95,234.309 1807.51,235.393 1808.08,237.123 1808.65,234.791 1809.22,234.603 1809.79,235.548 1810.36,236.625 1810.92,237.411 1811.49,239.229 1812.06,236.881 1812.63,235.422 1813.2,236.245 1813.77,233.684 1814.33,234.5 1814.9,233.496 1815.47,233.422 1816.04,233.141 1816.61,230.852 1817.18,231.043 1817.74,231.165 1818.31,230.054 1818.88,231.097 1819.45,230.181 1820.02,231.316 1820.59,233.412 1821.15,232.074 1821.72,232.158 1822.29,232.17 1822.86,231.214 1823.43,233.425 1824,233.519 1824.56,231.462 1825.13,230.449 1825.7,230.499 1826.27,229.646 1826.84,229.835 1827.41,225.964 1827.97,227.461 1828.54,225.829 1829.11,226.406 1829.68,225.76 1830.25,227.191 1830.82,228.71 1831.39,230.082 1831.95,230.479 1832.52,229.689 1833.09,228.135 1833.66,227.72 1834.23,227.084 1834.8,228.6 1835.36,227.85 1835.93,229.233 1836.5,228.492 1837.07,227.756 1837.64,229.554 1838.21,230.05 1838.77,228.369 1839.34,227.835 1839.91,227.242 1840.48,228.783 1841.05,230.442 1841.62,229.499 1842.18,229.703 1842.75,231.184 1843.32,231.629 1843.89,232.869 1844.46,232.87 1845.03,235.05 1845.59,235.75 1846.16,235.556 1846.73,236.457 1847.3,235.386 1847.87,236.35 1848.44,236.155 1849,235.055 1849.57,234.832 1850.14,234.694 1850.71,233.767 1851.28,234.835 1851.85,234.655 1852.41,234.54 1852.98,239.571 1853.55,239.077 1854.12,239.879 1854.69,239.216 1855.26,237.812 1855.82,237.368 1856.39,234.061 1856.96,231.866 1857.53,231.935 1858.1,230.859 1858.67,228.835 1859.23,225.922 1859.8,225.342 1860.37,227.084 1860.94,228.481 1861.51,227.836 1862.08,228.271 1862.64,227.467 1863.21,225.78 1863.78,227.329 1864.35,227.768 1864.92,227.168 1865.49,228.53 1866.05,231.061 1866.62,230.268 1867.19,230.651 1867.76,236.027 1868.33,234.92 1868.9,234.838 1869.46,234.822 1870.03,235.012 1870.6,236.355 1871.17,238.12 1871.74,236.919 1872.31,238.626 1872.87,238.44 1873.44,238.184 1874.01,237.073 1874.58,234.93 1875.15,233.814 1875.72,236.897 1876.28,236.669 1876.85,235.366 1877.42,236.319 1877.99,236.081 1878.56,231.792 1879.13,232.989 1879.69,234.118 1880.26,236.88 1880.83,236.474 1881.4,237.053 1881.97,236.882 1882.54,235.747 1883.1,235.469 1883.67,236.189 1884.24,235.965 1884.81,236.789 1885.38,235.564 1885.95,238.227 1886.51,239.975 1887.08,237.457 1887.65,237.224 1888.22,236.944 1888.79,236.639 1889.36,238.171 1889.92,238.624 1890.49,238.238 1891.06,235.777 1891.63,235.844 1892.2,237.718 1892.77,239.438 1893.33,237.904 1893.9,238.431 1894.47,239.157 1895.04,237.673 1895.61,237.401 1896.18,237.127 1896.74,233.384 1897.31,233.254 1897.88,233.035 1898.45,232.068 1899.02,232.946 1899.59,232.772 1900.16,231.715 1900.72,231.799 1901.29,229.776 1901.86,232.788 1902.43,234.822 1903,234.727 1903.57,236.345 1904.13,233.999 1904.7,234.918 1905.27,235.773 1905.84,234.582 1906.41,234.331 1906.98,235.175 1907.54,235.938 1908.11,237.709 1908.68,238.32 1909.25,238.587 1909.82,236.107 1910.39,232.794 1910.95,232.734 1911.52,231.568 1912.09,230.39 1912.66,230.515 1913.23,228.583 1913.8,226.779 1914.36,224.963 1914.93,224.381 1915.5,225.86 1916.07,225.366 1916.64,225.981 1917.21,227.409 1917.77,226.535 1918.34,225.938 1918.91,225.226 1919.48,224.638 1920.05,226.064 1920.62,225.498 1921.18,224.874 1921.75,225.366 1922.32,225.006 1922.89,228.799 1923.46,229.085 1924.03,230.423 1924.59,230.754 1925.16,230.011 1925.73,230.017 1926.3,230.295 1926.87,232.84 1927.44,233.951 1928,232.898 1928.57,231.677 1929.14,232.089 1929.71,234.257 1930.28,234.333 1930.85,234.494 1931.41,234.382 1931.98,232.092 1932.55,233.473 1933.12,231.383 1933.69,229.629 1934.26,229.914 1934.82,228.999 1935.39,228.357 1935.96,229.756 1936.53,229.949 1937.1,231.208 1937.67,229.199 1938.23,229.353 1938.8,231.863 1939.37,229.97 1939.94,229.21 1940.51,232.789 1941.08,236.067 1941.64,238.024 1942.21,237.601 1942.78,236.112 1943.35,236.048 1943.92,234.016 1944.49,232.931 1945.05,234.144 1945.62,234.022 1946.19,236.085 1946.76,235.913 1947.33,236.746 1947.9,236.559 1948.46,235.268 1949.03,233.099 1949.6,233.12 1950.17,228.858 1950.74,230.097 1951.31,231.49 1951.87,230.673 1952.44,232.068 1953.01,231.942 1953.58,234.094 1954.15,233.959 1954.72,236.947 1955.28,235.822 1955.85,237.707 1956.42,238.266 1956.99,236.813 1957.56,232.457 1958.13,233.403 1958.69,232.459 1959.26,234.692 1959.83,233.643 1960.4,233.811 1960.97,233.981 1961.54,230.835 1962.1,228.861 1962.67,229.279 1963.24,229.584 1963.81,229.795 1964.38,229.115 1964.95,231.324 1965.51,233.526 1966.08,234.516 1966.65,234.283 1967.22,234.266 1967.79,234.218 1968.36,234.216 1968.92,234.269 1969.49,234.177 1970.06,237.177 1970.63,238.06 1971.2,235.631 1971.77,235.549 1972.34,236.603 1972.9,236.361 1973.47,236.323 1974.04,236.276 1974.61,236.118 1975.18,235.735 1975.75,234.504 1976.31,234.36 1976.88,234.28 1977.45,235.124 1978.02,233.897 1978.59,233.588 1979.16,231.478 1979.72,231.746 1980.29,233.934 1980.86,235.883 1981.43,234.367 1982,233.568 1982.57,234.522 1983.13,235.392 1983.7,233.165 1984.27,233.016 1984.84,234.223 1985.41,234.95 1985.98,234.594 1986.54,234.261 1987.11,234.419 1987.68,234.243 1988.25,237.024 1988.82,237.842 1989.39,237.653 1989.95,237.36 1990.52,237.069 1991.09,236.851 1991.66,236.649 1992.23,236.41 1992.8,236.36 1993.36,237.322 1993.93,236.126 1994.5,237.06 1995.07,235.531 1995.64,233.258 1996.21,230.025 1996.77,231.224 1997.34,232.204 1997.91,231.06 1998.48,229.803 1999.05,231.93 1999.62,231.063 2000.18,232.12 2000.75,231.942 2001.32,231.895 2001.89,230.152 2002.46,230.594 2003.03,232.917 2003.59,234.995 2004.16,232.451 2004.73,231.403 2005.3,234.489 2005.87,234.437 2006.44,232.28 2007,232.23 2007.57,231.358 2008.14,234.654 2008.71,232.378 2009.28,232.482 2009.85,232.535 2010.41,232.524 2010.98,231.59 2011.55,232.739 2012.12,232.813 2012.69,232.918 2013.26,232.565 2013.82,234.407 2014.39,234.288 2014.96,236.117 2015.53,233.011 2016.1,230.761 2016.67,229.638 2017.23,233.996 2017.8,233.971 2018.37,232.743 2018.94,232.841 2019.51,232.969 2020.08,232.918 2020.64,235.976 2021.21,239.79 2021.78,240.109 2022.35,237.608 2022.92,237.033 2023.49,235.71 2024.05,234.458 2024.62,234.311 2025.19,235.196 2025.76,235.819 2026.33,238.647 2026.9,238.205 2027.46,237.6 2028.03,235.179 2028.6,235.162 2029.17,235.961 2029.74,236.484 2030.31,236.256 2030.87,235.905 2031.44,235.427 2032.01,236.17 2032.58,233.711 2033.15,232.538 2033.72,232.277 2034.28,232.999 2034.85,234.901 2035.42,234.789 2035.99,234.763 2036.56,234.508 2037.13,236.214 2037.69,235.877 2038.26,234.483 2038.83,236.213 2039.4,235.817 2039.97,235.389 2040.54,233.124 2041.11,232.11 2041.67,233.05 2042.24,231.769 2042.81,231.748 2043.38,229.864 2043.95,229.995 2044.52,232.096 2045.08,233.05 2045.65,232.888 2046.22,232.807 2046.79,231.746 2047.36,230.838 2047.93,227.875 2048.49,227.855 2049.06,229.232 2049.63,226.295 2050.2,227.978 2050.77,228.501 2051.34,230.627 2051.9,231.579 2052.47,230.646 2053.04,231.947 2053.61,234.891 2054.18,233.567 2054.75,231.113 2055.31,232.136 2055.88,230.234 2056.45,229.126 2057.02,230.229 2057.59,229.262 2058.16,228.336 2058.72,227.806 2059.29,228.201 2059.86,228.326 2060.43,227.722 2061,231.119 2061.57,228.165 2062.13,228.477 2062.7,226.678 2063.27,227.833 2063.84,229.242 2064.41,230.703 2064.98,233.031 2065.54,232.04 2066.11,233.164 2066.68,232.219 2067.25,231.205 2067.82,233.501 2068.39,231.366 2068.95,229.558 2069.52,231.755 2070.09,233.821 2070.66,232.706 2071.23,231.701 2071.8,232.832 2072.36,231.005 2072.93,230.997 2073.5,230.2 2074.07,230.5 2074.64,230.812 2075.21,229.991 2075.77,231.429 2076.34,229.588 2076.91,229.07 2077.48,229.429 2078.05,230.738 2078.62,230.932 2079.18,231.295 2079.75,232.652 2080.32,231.594 2080.89,231.611 2081.46,231.925 2082.03,233.238 2082.59,232.22 2083.16,233.307 2083.73,232.113 2084.3,231.06 2084.87,231.226 2085.44,230.29 2086,228.446 2086.57,225.704 2087.14,224.505 2087.71,224.915 2088.28,225.633 2088.85,227.236 2089.41,227.737 2089.98,228.236 2090.55,229.581 2091.12,229.842 2091.69,229.175 2092.26,227.568 2092.82,228.049 2093.39,230.683 2093.96,231.094 2094.53,230.181 2095.1,228.397 2095.67,228.969 2096.23,229.28 2096.8,230.626 2097.37,234.932 2097.94,234.949 2098.51,233.787 2099.08,234.824 2099.64,236.73 2100.21,235.686 2100.78,231.595 2101.35,232.925 2101.92,233.175 2102.49,233.027 2103.05,233.355 2103.62,234.443 2104.19,234.376 2104.76,235.517 2105.33,232.505 2105.9,233.773 2106.46,232.819 2107.03,234.019 2107.6,231.954 2108.17,232.102 2108.74,230.178 2109.31,230.615 2109.87,231.118 2110.44,232.196 2111.01,234.462 2111.58,234.298 2112.15,233.32 2112.72,233.42 2113.29,233.49 2113.85,233.582 2114.42,236.585 2114.99,236.555 2115.56,237.291 2116.13,236.063 2116.7,238.088 2117.26,236.788 2117.83,235.483 2118.4,234.45 2118.97,234.388 2119.54,236.146 2120.11,232.919 2120.67,235.105 2121.24,237.036 2121.81,236.967 2122.38,237.74 2122.95,238.575 2123.52,238.949 2124.08,240.72 2124.65,238.309 2125.22,239.046 2125.79,239.726 2126.36,241.359 2126.93,240.837 2127.49,240.347 2128.06,240.203 2128.63,237.749 2129.2,238.582 2129.77,239.103 2130.34,239.857 2130.9,240.363 2131.47,239.682 2132.04,240.148 2132.61,238.253 2133.18,234.728 2133.75,234.581 2134.31,233.24 2134.88,231.953 2135.45,230.917 2136.02,228.908 2136.59,229.22 2137.16,230.386 2137.72,230.46 2138.29,230.471 2138.86,230.533 2139.43,230.662 2140,230.618 2140.57,231.652 2141.13,231.762 2141.7,232.08 2142.27,233.035 2142.84,233.389 2143.41,233.336 2143.98,232.072 2144.54,232.238 2145.11,230.989 2145.68,230.021 2146.25,231.435 2146.82,229.29 2147.39,229.448 2147.95,226.56 2148.52,226.883 2149.09,226.332 2149.66,228.781 2150.23,229.001 2150.8,228.297 2151.36,227.586 2151.93,227.984 2152.5,226.178 2153.07,227.534 2153.64,223.834 2154.21,223.461 2154.77,225.281 2155.34,225.946 2155.91,224.418 2156.48,226.893 2157.05,228.319 2157.62,228.807 2158.18,230.322 2158.75,232.741 2159.32,234.952 2159.89,234.877 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.038 ± 0.025\n  with uncertainty of ± 0.002258651788453812\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01846 ± (0.00192767, 0.00187716) (MC)\n  95% confidence interval: [-4.02214, -4.01445] (MC)\n  linear error propagation: -4.01847 ± 0.0019481\n  |δ_y| = |0.00143138| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018458689238827, val_l = 0.003676805231322966, val_u = 0.004005408280733036)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip500\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip500)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip501\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip500)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip502\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1138.69 2211.02,1138.69 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,951.116 2211.02,951.116 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,763.545 2211.02,763.545 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,575.974 2211.02,575.974 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,388.404 2211.02,388.404 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,200.833 2211.02,200.833 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1138.69 365.751,1138.69 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,951.116 365.751,951.116 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,763.545 365.751,763.545 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,575.974 365.751,575.974 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,388.404 365.751,388.404 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,200.833 365.751,200.833 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M298.909 1124.48 Q295.298 1124.48 293.469 1128.05 Q291.664 1131.59 291.664 1138.72 Q291.664 1145.83 293.469 1149.39 Q295.298 1152.93 298.909 1152.93 Q302.543 1152.93 304.349 1149.39 Q306.177 1145.83 306.177 1138.72 Q306.177 1131.59 304.349 1128.05 Q302.543 1124.48 298.909 1124.48 M298.909 1120.78 Q304.719 1120.78 307.775 1125.39 Q310.853 1129.97 310.853 1138.72 Q310.853 1147.45 307.775 1152.05 Q304.719 1156.64 298.909 1156.64 Q293.099 1156.64 290.02 1152.05 Q286.964 1147.45 286.964 1138.72 Q286.964 1129.97 290.02 1125.39 Q293.099 1120.78 298.909 1120.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M259.557 964.46 L267.196 964.46 L267.196 938.095 L258.886 939.761 L258.886 935.502 L267.15 933.836 L271.826 933.836 L271.826 964.46 L279.465 964.46 L279.465 968.396 L259.557 968.396 L259.557 964.46 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 936.914 Q295.298 936.914 293.469 940.479 Q291.664 944.021 291.664 951.15 Q291.664 958.257 293.469 961.822 Q295.298 965.363 298.909 965.363 Q302.543 965.363 304.349 961.822 Q306.177 958.257 306.177 951.15 Q306.177 944.021 304.349 940.479 Q302.543 936.914 298.909 936.914 M298.909 933.211 Q304.719 933.211 307.775 937.817 Q310.853 942.4 310.853 951.15 Q310.853 959.877 307.775 964.484 Q304.719 969.067 298.909 969.067 Q293.099 969.067 290.02 964.484 Q286.964 959.877 286.964 951.15 Q286.964 942.4 290.02 937.817 Q293.099 933.211 298.909 933.211 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M262.775 776.89 L279.094 776.89 L279.094 780.825 L257.15 780.825 L257.15 776.89 Q259.812 774.135 264.395 769.506 Q269.002 764.853 270.182 763.51 Q272.428 760.987 273.307 759.251 Q274.21 757.492 274.21 755.802 Q274.21 753.047 272.266 751.311 Q270.344 749.575 267.242 749.575 Q265.043 749.575 262.59 750.339 Q260.159 751.103 257.381 752.654 L257.381 747.932 Q260.205 746.797 262.659 746.219 Q265.113 745.64 267.15 745.64 Q272.52 745.64 275.715 748.325 Q278.909 751.01 278.909 755.501 Q278.909 757.631 278.099 759.552 Q277.312 761.45 275.205 764.043 Q274.627 764.714 271.525 767.931 Q268.423 771.126 262.775 776.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 749.344 Q295.298 749.344 293.469 752.908 Q291.664 756.45 291.664 763.58 Q291.664 770.686 293.469 774.251 Q295.298 777.793 298.909 777.793 Q302.543 777.793 304.349 774.251 Q306.177 770.686 306.177 763.58 Q306.177 756.45 304.349 752.908 Q302.543 749.344 298.909 749.344 M298.909 745.64 Q304.719 745.64 307.775 750.246 Q310.853 754.83 310.853 763.58 Q310.853 772.306 307.775 776.913 Q304.719 781.496 298.909 781.496 Q293.099 781.496 290.02 776.913 Q286.964 772.306 286.964 763.58 Q286.964 754.83 290.02 750.246 Q293.099 745.64 298.909 745.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M272.914 574.62 Q276.27 575.338 278.145 577.606 Q280.043 579.875 280.043 583.208 Q280.043 588.324 276.525 591.125 Q273.006 593.926 266.525 593.926 Q264.349 593.926 262.034 593.486 Q259.742 593.069 257.289 592.213 L257.289 587.699 Q259.233 588.833 261.548 589.412 Q263.863 589.99 266.386 589.99 Q270.784 589.99 273.076 588.254 Q275.39 586.518 275.39 583.208 Q275.39 580.152 273.238 578.44 Q271.108 576.703 267.289 576.703 L263.261 576.703 L263.261 572.861 L267.474 572.861 Q270.923 572.861 272.752 571.495 Q274.58 570.106 274.58 567.514 Q274.58 564.852 272.682 563.44 Q270.807 562.004 267.289 562.004 Q265.367 562.004 263.168 562.421 Q260.969 562.838 258.33 563.717 L258.33 559.551 Q260.992 558.81 263.307 558.44 Q265.645 558.069 267.705 558.069 Q273.029 558.069 276.131 560.5 Q279.233 562.907 279.233 567.028 Q279.233 569.898 277.59 571.889 Q275.946 573.856 272.914 574.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 561.773 Q295.298 561.773 293.469 565.338 Q291.664 568.879 291.664 576.009 Q291.664 583.115 293.469 586.68 Q295.298 590.222 298.909 590.222 Q302.543 590.222 304.349 586.68 Q306.177 583.115 306.177 576.009 Q306.177 568.879 304.349 565.338 Q302.543 561.773 298.909 561.773 M298.909 558.069 Q304.719 558.069 307.775 562.676 Q310.853 567.259 310.853 576.009 Q310.853 584.736 307.775 589.342 Q304.719 593.926 298.909 593.926 Q293.099 593.926 290.02 589.342 Q286.964 584.736 286.964 576.009 Q286.964 567.259 290.02 562.676 Q293.099 558.069 298.909 558.069 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M271.594 375.198 L259.789 393.647 L271.594 393.647 L271.594 375.198 M270.367 371.124 L276.247 371.124 L276.247 393.647 L281.177 393.647 L281.177 397.535 L276.247 397.535 L276.247 405.684 L271.594 405.684 L271.594 397.535 L255.992 397.535 L255.992 393.022 L270.367 371.124 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 374.202 Q295.298 374.202 293.469 377.767 Q291.664 381.309 291.664 388.438 Q291.664 395.545 293.469 399.11 Q295.298 402.651 298.909 402.651 Q302.543 402.651 304.349 399.11 Q306.177 395.545 306.177 388.438 Q306.177 381.309 304.349 377.767 Q302.543 374.202 298.909 374.202 M298.909 370.499 Q304.719 370.499 307.775 375.105 Q310.853 379.688 310.853 388.438 Q310.853 397.165 307.775 401.772 Q304.719 406.355 298.909 406.355 Q293.099 406.355 290.02 401.772 Q286.964 397.165 286.964 388.438 Q286.964 379.688 290.02 375.105 Q293.099 370.499 298.909 370.499 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M258.793 183.553 L277.15 183.553 L277.15 187.488 L263.076 187.488 L263.076 195.96 Q264.094 195.613 265.113 195.451 Q266.131 195.266 267.15 195.266 Q272.937 195.266 276.316 198.437 Q279.696 201.608 279.696 207.025 Q279.696 212.604 276.224 215.706 Q272.752 218.784 266.432 218.784 Q264.256 218.784 261.988 218.414 Q259.742 218.043 257.335 217.303 L257.335 212.604 Q259.418 213.738 261.641 214.294 Q263.863 214.849 266.34 214.849 Q270.344 214.849 272.682 212.743 Q275.02 210.636 275.02 207.025 Q275.02 203.414 272.682 201.307 Q270.344 199.201 266.34 199.201 Q264.465 199.201 262.59 199.618 Q260.738 200.034 258.793 200.914 L258.793 183.553 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 186.632 Q295.298 186.632 293.469 190.196 Q291.664 193.738 291.664 200.868 Q291.664 207.974 293.469 211.539 Q295.298 215.081 298.909 215.081 Q302.543 215.081 304.349 211.539 Q306.177 207.974 306.177 200.868 Q306.177 193.738 304.349 190.196 Q302.543 186.632 298.909 186.632 M298.909 182.928 Q304.719 182.928 307.775 187.534 Q310.853 192.118 310.853 200.868 Q310.853 209.594 307.775 214.201 Q304.719 218.784 298.909 218.784 Q293.099 218.784 290.02 214.201 Q286.964 209.594 286.964 200.868 Q286.964 192.118 290.02 187.534 Q293.099 182.928 298.909 182.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip502)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1000.48 400.199,873.508 400.786,757.008 401.372,650.275 401.958,552.658 402.545,596.393 403.131,506.612 403.718,540.075 404.304,565.984 404.891,489.631 405.477,421.751 406.063,447.593 406.65,384.351 407.236,403.825 407.823,348.798 408.409,300.666 408.995,259.77 409.582,219.895 410.168,299.974 410.755,316.868 411.341,331.823 411.927,302.293 412.514,274.514 413.1,250.609 413.687,268.376 414.273,283.626 414.86,264.121 415.446,309.195 416.032,321.938 416.619,305.079 417.205,292.714 417.792,282.419 418.378,276.454 418.964,292.292 419.551,306.768 420.137,320.701 420.724,318.173 421.31,316.133 421.896,331.382 422.483,330.671 423.069,345.588 423.656,348.154 424.242,350.825 424.829,379.399 425.415,419.256 426.001,433.305 426.588,459.034 427.174,462.758 427.761,465.711 428.347,470.955 428.933,494.73 429.52,499.586 430.106,539.092 430.693,552.575 431.279,557.478 431.865,571.184 432.452,583.874 433.038,603.819 433.625,623.205 434.211,628.109 434.798,653.297 435.384,658.528 435.97,676.356 436.557,681.945 437.143,688.361 437.73,705.048 438.316,712.921 438.902,735.363 439.489,747.165 440.075,772.164 440.662,778.426 441.248,789.533 441.835,801.055 442.421,811.652 443.007,826.194 443.594,836.564 444.18,842.941 444.767,856.689 445.353,862.456 445.939,868.597 446.526,888.388 447.112,906.966 447.699,918.589 448.285,929.285 448.871,936.736 449.458,944.386 450.044,949.014 450.631,959.605 451.217,966.399 451.804,981.723 452.39,991.42 452.976,1000.35 453.563,1003.79 454.149,1012.42 454.736,1018.62 455.322,1024.53 455.908,1030.04 456.495,1035.75 457.081,1039.18 457.668,1044.46 458.254,1047.55 458.84,1052.57 459.427,1057.92 460.013,1063.21 460.6,1071.05 461.186,1076.09 461.773,1081.33 462.359,1090.59 462.945,1092.56 463.532,1094.74 464.118,1097.38 464.705,1102.22 465.291,1110.88 465.877,1117.21 466.464,1117.1 467.05,1117.42 467.637,1117.38 468.223,1123.84 468.809,1127.89 469.396,1132.13 469.982,1141.86 470.569,1147.45 471.155,1154.59 471.742,1154.08 472.328,1157.79 472.914,1159.53 473.501,1159.43 474.087,1162.84 474.674,1166.56 475.26,1173.48 475.846,1178.79 476.433,1185.27 477.019,1187.86 477.606,1193.92 478.192,1194.53 478.778,1196.7 479.365,1195.42 479.951,1199.34 480.538,1201.73 481.124,1207.59 481.711,1207.79 482.297,1209.39 482.883,1209.56 483.47,1210.09 484.056,1211.79 484.643,1213.81 485.229,1214 485.815,1213.86 486.402,1217.48 486.988,1217.36 487.575,1217.72 488.161,1219.46 488.748,1217.92 489.334,1219.8 489.92,1218.12 490.507,1221.66 491.093,1225.25 491.68,1230.18 492.266,1230.15 492.852,1230.41 493.439,1231.88 494.025,1233.18 494.612,1229.42 495.198,1229.5 495.784,1231.11 496.371,1230.75 496.957,1233.74 497.544,1235.06 498.13,1234.65 498.717,1233.78 499.303,1241.7 499.889,1238.02 500.476,1242.47 501.062,1241.77 501.649,1244.06 502.235,1245.08 502.821,1244.15 503.408,1242.9 503.994,1245.19 504.581,1242.86 505.167,1242.01 505.753,1243.15 506.34,1247.23 506.926,1246.31 507.513,1248.73 508.099,1249.64 508.686,1250.52 509.272,1246.32 509.858,1244.22 510.445,1243.52 511.031,1242.95 511.618,1240.98 512.204,1241.02 512.79,1243.82 513.377,1246.81 513.963,1242.86 514.55,1243.85 515.136,1244.77 515.722,1244.15 516.309,1242.16 516.895,1241.53 517.482,1241.01 518.068,1245.25 518.655,1244.69 519.241,1242.6 519.827,1241.74 520.414,1244.53 521,1245.6 521.587,1248.21 522.173,1244.49 522.759,1242.68 523.346,1242.03 523.932,1241.48 524.519,1239.44 525.105,1240.86 525.691,1241.97 526.278,1243.23 526.864,1244.4 527.451,1242.14 528.037,1240.23 528.624,1239.92 529.21,1240.98 529.796,1238.89 530.383,1240.11 530.969,1241.4 531.556,1242.24 532.142,1241.65 532.728,1244.36 533.315,1248.63 533.901,1244.96 534.488,1245.82 535.074,1248.42 535.661,1250.53 536.247,1249.82 536.833,1248.93 537.42,1245.12 538.006,1245.88 538.593,1246.75 539.179,1244.54 539.765,1242.55 540.352,1242.14 540.938,1240.06 541.525,1236.92 542.111,1239.79 542.697,1237.81 543.284,1234.55 543.87,1233.07 544.457,1232.94 545.043,1235.91 545.63,1235.88 546.216,1235.66 546.802,1235.5 547.389,1235.52 547.975,1236.6 548.562,1238.2 549.148,1238.16 549.734,1239.3 550.321,1240.6 550.907,1241.66 551.494,1237.66 552.08,1234.2 552.666,1234.36 553.253,1234.12 553.839,1235.38 554.426,1235.06 555.012,1239.48 555.599,1243.73 556.185,1244.46 556.771,1244.21 557.358,1245.06 557.944,1243.01 558.531,1245.54 559.117,1243.09 559.703,1243.91 560.29,1243.3 560.876,1242.62 561.463,1243.47 562.049,1241.45 562.635,1243.83 563.222,1243.11 563.808,1244.01 564.395,1243.12 564.981,1245.62 565.568,1247.76 566.154,1248.26 566.74,1245.8 567.327,1244.85 567.913,1242.51 568.5,1241.72 569.086,1238.15 569.672,1236.23 570.259,1234.4 570.845,1235.77 571.432,1238.39 572.018,1239.32 572.605,1238.93 573.191,1240.23 573.777,1239.38 574.364,1238.78 574.95,1237.47 575.537,1234.01 576.123,1238.31 576.709,1240.7 577.296,1240.4 577.882,1241.31 578.469,1240.72 579.055,1241.64 579.641,1236.25 580.228,1237.68 580.814,1238.49 581.401,1235.01 581.987,1231.58 582.574,1233.06 583.16,1234.3 583.746,1233.93 584.333,1232.17 584.919,1236.56 585.506,1234.72 586.092,1234.2 586.678,1235.01 587.265,1237.48 587.851,1232.29 588.438,1234.91 589.024,1231.81 589.61,1229.78 590.197,1228.05 590.783,1229.64 591.37,1231.24 591.956,1233.86 592.543,1232.11 593.129,1230.37 593.715,1230.14 594.302,1230.19 594.888,1230.24 595.475,1232.6 596.061,1233.75 596.647,1233.51 597.234,1233.17 597.82,1233.09 598.407,1229.75 598.993,1226.15 599.579,1227.53 600.166,1224.41 600.752,1226.13 601.339,1227.99 601.925,1229.09 602.512,1227.71 603.098,1227.89 603.684,1227.62 604.271,1227.77 604.857,1232.01 605.444,1229.95 606.03,1231.41 606.616,1236.01 607.203,1235.05 607.789,1234.56 608.376,1237.05 608.962,1240.85 609.548,1240.32 610.135,1239.43 610.721,1240.28 611.308,1239.43 611.894,1240.29 612.481,1240.69 613.067,1241.61 613.653,1234.61 614.24,1235.25 614.826,1236.32 615.413,1235.06 615.999,1235.94 616.585,1239.78 617.172,1237.19 617.758,1236.52 618.345,1235.81 618.931,1236.96 619.518,1234.82 620.104,1234.37 620.69,1233.83 621.277,1234.95 621.863,1231.29 622.45,1231.07 623.036,1231.11 623.622,1233.93 624.209,1233.72 624.795,1234.87 625.382,1237.24 625.968,1234.84 626.554,1232.75 627.141,1234.09 627.727,1233.71 628.314,1233.26 628.9,1234.3 629.487,1232.3 630.073,1233.26 630.659,1231.14 631.246,1228.86 631.832,1226.94 632.419,1225.25 633.005,1226.7 633.591,1229.84 634.178,1228.07 634.764,1223.21 635.351,1224.6 635.937,1229.01 636.523,1233.4 637.11,1231.1 637.696,1232.38 638.283,1232.01 638.869,1233.37 639.456,1235.76 640.042,1238.23 640.628,1237.2 641.215,1234.78 641.801,1235.25 642.388,1234.31 642.974,1233.73 643.56,1234.45 644.147,1236.82 644.733,1237.75 645.32,1234.17 645.906,1230.28 646.492,1228.13 647.079,1227.97 647.665,1224.21 648.252,1224.08 648.838,1225.27 649.425,1226.34 650.011,1230.45 650.597,1230.36 651.184,1228.62 651.77,1226.35 652.357,1229.18 652.943,1231.83 653.529,1227 654.116,1222.13 654.702,1217.72 655.289,1214.92 655.875,1213.86 656.462,1217.42 657.048,1218.09 657.634,1216.55 658.221,1217.03 658.807,1215.62 659.394,1215.82 659.98,1217.76 660.566,1218.14 661.153,1219.76 661.739,1220.95 662.326,1221.21 662.912,1218.23 663.498,1218.5 664.085,1221.81 664.671,1220.29 665.258,1216 665.844,1216 666.431,1217.84 667.017,1216.33 667.603,1218.33 668.19,1218.8 668.776,1220.48 669.363,1220.38 669.949,1220.84 670.535,1222.65 671.122,1222.86 671.708,1227.37 672.295,1222.43 672.881,1220.82 673.467,1222.45 674.054,1222.26 674.64,1220.96 675.227,1222.69 675.813,1229.19 676.4,1228.95 676.986,1228.35 677.572,1231 678.159,1231.97 678.745,1228.14 679.332,1229.19 679.918,1227.46 680.504,1226.96 681.091,1225.26 681.677,1225.64 682.264,1223.88 682.85,1225.37 683.436,1225.36 684.023,1225.05 684.609,1224.7 685.196,1219.68 685.782,1219.54 686.369,1224.19 686.955,1220.78 687.541,1217.89 688.128,1221.04 688.714,1218.26 689.301,1217.15 689.887,1215.93 690.473,1219.46 691.06,1221.01 691.646,1224.09 692.233,1219.2 692.819,1219.06 693.405,1217.39 693.992,1217.78 694.578,1214.81 695.165,1219.76 695.751,1218.37 696.338,1216.78 696.924,1218.21 697.51,1219.9 698.097,1218.51 698.683,1215.48 699.27,1217.32 699.856,1213.02 700.442,1213.53 701.029,1214 701.615,1215.78 702.202,1214.69 702.788,1216.47 703.375,1216.82 703.961,1216.88 704.547,1220.01 705.134,1222.8 705.72,1223.76 706.307,1222 706.893,1223.38 707.479,1224.58 708.066,1223.96 708.652,1222.42 709.239,1220.67 709.825,1219.14 710.411,1217.96 710.998,1220.94 711.584,1219.71 712.171,1219.57 712.757,1219.52 713.344,1220.82 713.93,1220.84 714.516,1224.19 715.103,1225.53 715.689,1228.36 716.276,1227.9 716.862,1227.44 717.448,1228.47 718.035,1226.51 718.621,1225.87 719.208,1222.41 719.794,1223.69 720.38,1226.61 720.967,1226.17 721.553,1224.45 722.14,1219.67 722.726,1219.97 723.313,1218.1 723.899,1217.82 724.485,1217.84 725.072,1213.5 725.658,1213.73 726.245,1214.15 726.831,1217.53 727.417,1217.34 728.004,1217.42 728.59,1218.7 729.177,1218.28 729.763,1221.54 730.349,1216.85 730.936,1220.22 731.522,1226.1 732.109,1225.76 732.695,1224.21 733.282,1222.47 733.868,1223.81 734.454,1223.65 735.041,1226.41 735.627,1226.55 736.214,1223.02 736.8,1224.18 737.386,1227.29 737.973,1228.28 738.559,1224.88 739.146,1224.2 739.732,1222.24 740.318,1220.75 740.905,1218.9 741.491,1216.03 742.078,1214.68 742.664,1215.06 743.251,1218.56 743.837,1220.3 744.423,1215.55 745.01,1217.04 745.596,1220.26 746.183,1223.28 746.769,1223.23 747.355,1221.66 747.942,1222.87 748.528,1228.64 749.115,1229.63 749.701,1229.1 750.288,1225.67 750.874,1224.21 751.46,1224 752.047,1223.61 752.633,1223.14 753.22,1223.04 753.806,1226.02 754.392,1222.67 754.979,1222.63 755.565,1223.87 756.152,1226.61 756.738,1230.87 757.324,1230.35 757.911,1231.03 758.497,1227.3 759.084,1226.84 759.67,1223.07 760.257,1221.25 760.843,1222.48 761.429,1219.42 762.016,1217.85 762.602,1219.8 763.189,1222.59 763.775,1220.57 764.361,1220.17 764.948,1220.04 765.534,1219.55 766.121,1217.73 766.707,1217.93 767.293,1215.06 767.88,1213.72 768.466,1213.76 769.053,1214.11 769.639,1217.34 770.226,1218.83 770.812,1217.13 771.398,1217.36 771.985,1215.8 772.571,1221.95 773.158,1218.79 773.744,1217.2 774.33,1216.93 774.917,1215.51 775.503,1215.56 776.09,1218.73 776.676,1218.53 777.262,1215.81 777.849,1218.65 778.435,1220.29 779.022,1223.49 779.608,1224.7 780.195,1221.01 780.781,1219.45 781.367,1219.1 781.954,1218.86 782.54,1217.56 783.127,1217.45 783.713,1215.97 784.299,1212.76 784.886,1211.52 785.472,1211.73 786.059,1213.61 786.645,1215.35 787.232,1217.13 787.818,1218.87 788.404,1217.29 788.991,1211.22 789.577,1208.73 790.164,1206.15 790.75,1208.31 791.336,1210.63 791.923,1211.07 792.509,1212.6 793.096,1214.35 793.682,1214.48 794.268,1214.56 794.855,1216.21 795.441,1216.25 796.028,1216.29 796.614,1211.98 797.201,1214 797.787,1215.6 798.373,1215.51 798.96,1215.73 799.546,1214.23 800.133,1215.81 800.719,1217.84 801.305,1219.52 801.892,1220.78 802.478,1222.17 803.065,1223.63 803.651,1220.33 804.237,1218.58 804.824,1215.57 805.41,1215.75 805.997,1216.17 806.583,1218.91 807.17,1215.92 807.756,1215.73 808.342,1218.72 808.929,1220.13 809.515,1215.63 810.102,1215.6 810.688,1215.99 811.274,1216 811.861,1212.86 812.447,1216.05 813.034,1216.13 813.62,1216.05 814.206,1215.91 814.793,1213.04 815.379,1218 815.966,1217.81 816.552,1218.01 817.139,1216.38 817.725,1216.42 818.311,1220.89 818.898,1223.56 819.484,1223.37 820.071,1222.96 820.657,1222.79 821.243,1225.37 821.83,1226.13 822.416,1225.71 823.003,1223.7 823.589,1224.92 824.175,1227.53 824.762,1225.55 825.348,1225.33 825.935,1224.9 826.521,1224.61 827.108,1225.57 827.694,1219.21 828.28,1219.05 828.867,1220.44 829.453,1220.63 830.04,1220.32 830.626,1220.11 831.212,1220.1 831.799,1219.96 832.385,1221.58 832.972,1221.48 833.558,1221.52 834.145,1225.91 834.731,1225.49 835.317,1226.61 835.904,1225.99 836.49,1225.18 837.077,1226.39 837.663,1227.65 838.249,1228.52 838.836,1227.99 839.422,1227.53 840.009,1228.52 840.595,1228.04 841.181,1224.49 841.768,1226.96 842.354,1226.39 842.941,1224.33 843.527,1224.02 844.114,1219.1 844.7,1217.34 845.286,1217.1 845.873,1217.29 846.459,1217.03 847.046,1218.03 847.632,1218.08 848.218,1221.05 848.805,1219.06 849.391,1219.11 849.978,1216.2 850.564,1214.83 851.15,1217.89 851.737,1220.93 852.323,1219.08 852.91,1217.14 853.496,1215.5 854.083,1215.59 854.669,1215.57 855.255,1215.25 855.842,1215.52 856.428,1216.89 857.015,1219.83 857.601,1216.39 858.187,1216.48 858.774,1217.88 859.36,1217.65 859.947,1217.25 860.533,1217.1 861.119,1218.75 861.706,1221.28 862.292,1220.9 862.879,1220.63 863.465,1220.46 864.052,1218.76 864.638,1213.86 865.224,1214.12 865.811,1215.6 866.397,1215.81 866.984,1219.06 867.57,1215.72 868.156,1215.71 868.743,1214.49 869.329,1214.56 869.916,1215.81 870.502,1215.53 871.089,1215.7 871.675,1210.92 872.261,1209.8 872.848,1208.85 873.434,1206.3 874.021,1207.19 874.607,1205.86 875.193,1206.45 875.78,1207.18 876.366,1207.85 876.953,1206.96 877.539,1207.6 878.125,1208.16 878.712,1205.4 879.298,1202.57 879.885,1206.45 880.471,1207.11 881.058,1205.92 881.644,1209.7 882.23,1210.34 882.817,1210.72 883.403,1215.3 883.99,1215.55 884.576,1217.15 885.162,1215.59 885.749,1217.34 886.335,1215.93 886.922,1215.85 887.508,1214.49 888.094,1213.07 888.681,1213.13 889.267,1213.4 889.854,1210.77 890.44,1214.23 891.027,1212.92 891.613,1211.55 892.199,1213.28 892.786,1211.94 893.372,1216.75 893.959,1216.48 894.545,1216.72 895.131,1215.06 895.718,1215.01 896.304,1213.39 896.891,1212.12 897.477,1213.98 898.063,1210.97 898.65,1210.87 899.236,1209.76 899.823,1212.81 900.409,1212.98 900.996,1217.4 901.582,1218.93 902.168,1220.04 902.755,1222.53 903.341,1222.38 903.928,1220.86 904.514,1219.01 905.1,1223.4 905.687,1221.37 906.273,1221.04 906.86,1223.39 907.446,1221.45 908.032,1221.32 908.619,1219.61 909.205,1220.87 909.792,1220.55 910.378,1220.3 910.965,1221.73 911.551,1222.9 912.137,1222.84 912.724,1221.03 913.31,1219.18 913.897,1220.54 914.483,1222.95 915.069,1221.08 915.656,1220.63 916.242,1220.17 916.829,1215.81 917.415,1215.89 918.002,1214.21 918.588,1217.36 919.174,1214.36 919.761,1210.85 920.347,1211.12 920.934,1211.27 921.52,1213.02 922.106,1217.64 922.693,1219.01 923.279,1218.64 923.866,1218.5 924.452,1218.16 925.038,1216.67 925.625,1214.98 926.211,1218.23 926.798,1216.18 927.384,1216.16 927.971,1213.41 928.557,1215.06 929.143,1213.35 929.73,1211.6 930.316,1211.79 930.903,1211.96 931.489,1212.53 932.075,1206.76 932.662,1210.49 933.248,1212.16 933.835,1211.09 934.421,1211.63 935.007,1211.57 935.594,1211.88 936.18,1211.74 936.767,1211.71 937.353,1213.64 937.94,1215.25 938.526,1213.83 939.112,1215.2 939.699,1212.01 940.285,1213.76 940.872,1215.32 941.458,1218.16 942.044,1219.79 942.631,1219.83 943.217,1218.51 943.804,1218.39 944.39,1213.57 944.976,1215.41 945.563,1215.49 946.149,1215.55 946.736,1213.93 947.322,1216.96 947.909,1213.47 948.495,1211.78 949.081,1213.72 949.668,1211.14 950.254,1216.29 950.841,1213.46 951.427,1213.44 952.013,1213.61 952.6,1213.9 953.186,1215.3 953.773,1215.04 954.359,1212.38 954.945,1218.61 955.532,1221.24 956.118,1223.89 956.705,1223.4 957.291,1219.9 957.878,1215.33 958.464,1216.62 959.05,1213.59 959.637,1212.07 960.223,1215.25 960.81,1218.17 961.396,1218.22 961.982,1216.59 962.569,1222.67 963.155,1223.62 963.742,1223.03 964.328,1221.1 964.915,1217.39 965.501,1211.21 966.087,1212.81 966.674,1211.42 967.26,1212.93 967.847,1214.6 968.433,1213.3 969.019,1211.68 969.606,1211.8 970.192,1213.29 970.779,1214.8 971.365,1215.96 971.951,1216.34 972.538,1213.03 973.124,1212.8 973.711,1213.08 974.297,1211.65 974.884,1210.59 975.47,1210.88 976.056,1215.71 976.643,1212.65 977.229,1212.77 977.816,1214.18 978.402,1214.25 978.988,1214.08 979.575,1214.5 980.161,1219.07 980.748,1217.49 981.334,1218.98 981.92,1220.43 982.507,1219.74 983.093,1220.53 983.68,1221.63 984.266,1221.06 984.853,1220.61 985.439,1221.71 986.025,1216.65 986.612,1218.22 987.198,1213.16 987.785,1214.7 988.371,1208.37 988.957,1211.35 989.544,1214.67 990.13,1214.87 990.717,1215.05 991.303,1218 991.889,1220.81 992.476,1219.29 993.062,1222.4 993.649,1223.33 994.235,1221.49 994.822,1221.1 995.408,1220.59 995.994,1218.54 996.581,1219.8 997.167,1219.36 997.754,1220.69 998.34,1223.52 998.926,1221.44 999.513,1222.35 1000.1,1223.56 1000.69,1222.79 1001.27,1219.24 1001.86,1215.93 1002.44,1215.87 1003.03,1214.51 1003.62,1215.84 1004.2,1215.86 1004.79,1218.86 1005.38,1212.52 1005.96,1209.33 1006.55,1209.62 1007.14,1210.03 1007.72,1211.94 1008.31,1215.11 1008.9,1213.72 1009.48,1213.56 1010.07,1215.09 1010.65,1213.58 1011.24,1212.14 1011.83,1213.73 1012.41,1213.88 1013,1211.06 1013.59,1211.53 1014.17,1213.47 1014.76,1213.84 1015.35,1213.8 1015.93,1212.11 1016.52,1212.19 1017.11,1210.76 1017.69,1211.17 1018.28,1208.06 1018.86,1209.65 1019.45,1209.86 1020.04,1210.55 1020.62,1212.51 1021.21,1211.16 1021.8,1209.58 1022.38,1212.82 1022.97,1213.25 1023.56,1214.78 1024.14,1217.81 1024.73,1216.18 1025.32,1217.87 1025.9,1218.39 1026.49,1221.44 1027.07,1222.63 1027.66,1223.99 1028.25,1223.22 1028.83,1222.89 1029.42,1220.74 1030.01,1222.22 1030.59,1220.33 1031.18,1221.41 1031.77,1220.91 1032.35,1222.08 1032.94,1222.91 1033.52,1224.21 1034.11,1223.86 1034.7,1223.38 1035.28,1222.79 1035.87,1220.98 1036.46,1220.68 1037.04,1218.79 1037.63,1216.79 1038.22,1215.37 1038.8,1215.51 1039.39,1215.36 1039.98,1213.89 1040.56,1212.49 1041.15,1212.53 1041.73,1212.5 1042.32,1214.17 1042.91,1215.75 1043.49,1212.46 1044.08,1210.9 1044.67,1209.41 1045.25,1208.51 1045.84,1210.39 1046.43,1204.25 1047.01,1203.17 1047.6,1202.08 1048.19,1205.75 1048.77,1204.64 1049.36,1205.36 1049.94,1204.14 1050.53,1205.95 1051.12,1209.38 1051.7,1210.96 1052.29,1215.69 1052.88,1218.96 1053.46,1221.71 1054.05,1221.59 1054.64,1221.63 1055.22,1221.16 1055.81,1214.55 1056.39,1214.47 1056.98,1215.86 1057.57,1217.57 1058.15,1218.97 1058.74,1215.48 1059.33,1214.1 1059.91,1211.37 1060.5,1212.98 1061.09,1216.42 1061.67,1214.67 1062.26,1217.87 1062.85,1220.57 1063.43,1219.13 1064.02,1220.51 1064.6,1220.26 1065.19,1224.46 1065.78,1221.08 1066.36,1220.99 1066.95,1220.81 1067.54,1221.76 1068.12,1223.1 1068.71,1220.96 1069.3,1220.81 1069.88,1220.47 1070.47,1221.8 1071.06,1221.56 1071.64,1221.62 1072.23,1222.85 1072.81,1222.6 1073.4,1225.43 1073.99,1221.81 1074.57,1221.86 1075.16,1216.72 1075.75,1213.31 1076.33,1213.65 1076.92,1215.17 1077.51,1216.46 1078.09,1214.88 1078.68,1216.14 1079.26,1213.44 1079.85,1213.29 1080.44,1213.29 1081.02,1210.39 1081.61,1207.12 1082.2,1212.3 1082.78,1211.14 1083.37,1215.58 1083.96,1216.88 1084.54,1215.27 1085.13,1215.62 1085.72,1221.64 1086.3,1218.3 1086.89,1221.06 1087.47,1218.87 1088.06,1218.47 1088.65,1216.78 1089.23,1213.76 1089.82,1213.9 1090.41,1210.94 1090.99,1212.63 1091.58,1209.92 1092.17,1210.1 1092.75,1209.05 1093.34,1211.06 1093.93,1208.35 1094.51,1211.89 1095.1,1211.95 1095.68,1212.08 1096.27,1209.05 1096.86,1207.62 1097.44,1203.68 1098.03,1205.58 1098.62,1206.1 1099.2,1208.21 1099.79,1206.68 1100.38,1203.99 1100.96,1204.57 1101.55,1200.72 1102.14,1206.29 1102.72,1209.5 1103.31,1212.85 1103.89,1215.84 1104.48,1215.95 1105.07,1214.37 1105.65,1217.27 1106.24,1215.79 1106.83,1217.48 1107.41,1217.3 1108,1217.06 1108.59,1216.77 1109.17,1215.03 1109.76,1219.62 1110.34,1216.12 1110.93,1212.87 1111.52,1215.8 1112.1,1217.17 1112.69,1216.89 1113.28,1218.53 1113.86,1216.91 1114.45,1219.83 1115.04,1218.23 1115.62,1213.23 1116.21,1211.67 1116.8,1208.89 1117.38,1207.35 1117.97,1207.56 1118.55,1208.42 1119.14,1209.16 1119.73,1207.89 1120.31,1208.45 1120.9,1210.37 1121.49,1210.69 1122.07,1210.96 1122.66,1211.48 1123.25,1208.84 1123.83,1209.08 1124.42,1210.67 1125.01,1209.16 1125.59,1206.33 1126.18,1206.85 1126.76,1207.23 1127.35,1206.69 1127.94,1208.72 1128.52,1211.9 1129.11,1213.68 1129.7,1214.13 1130.28,1210.93 1130.87,1214.16 1131.46,1215.71 1132.04,1215.48 1132.63,1217.07 1133.21,1216.8 1133.8,1215.15 1134.39,1210.46 1134.97,1210.75 1135.56,1209.49 1136.15,1211.4 1136.73,1211.21 1137.32,1211.12 1137.91,1211.22 1138.49,1215.6 1139.08,1217.32 1139.67,1218.97 1140.25,1217.04 1140.84,1216.64 1141.42,1216.62 1142.01,1215 1142.6,1217.91 1143.18,1217.94 1143.77,1217.93 1144.36,1217.58 1144.94,1214.62 1145.53,1216.04 1146.12,1211.19 1146.7,1212.97 1147.29,1212.71 1147.88,1211.4 1148.46,1212.99 1149.05,1216.03 1149.63,1214.07 1150.22,1211.03 1150.81,1211.39 1151.39,1212.03 1151.98,1213.8 1152.57,1212.17 1153.15,1209.38 1153.74,1209.71 1154.33,1209.9 1154.91,1210.12 1155.5,1211.76 1156.09,1213.46 1156.67,1216.73 1157.26,1218.32 1157.84,1216.74 1158.43,1218.3 1159.02,1217.7 1159.6,1223.69 1160.19,1223.25 1160.78,1221.23 1161.36,1220.94 1161.95,1220.79 1162.54,1219.1 1163.12,1219.02 1163.71,1215.8 1164.29,1215.81 1164.88,1215.56 1165.47,1215.58 1166.05,1216.92 1166.64,1215.39 1167.23,1216.72 1167.81,1218.49 1168.4,1219.97 1168.99,1221.37 1169.57,1222.51 1170.16,1219.03 1170.75,1221.98 1171.33,1218.2 1171.92,1217.73 1172.5,1217.47 1173.09,1218.92 1173.68,1220.05 1174.26,1217.98 1174.85,1217.84 1175.44,1217.51 1176.02,1220.58 1176.61,1221.67 1177.2,1222.67 1177.78,1223.67 1178.37,1223.3 1178.96,1222.77 1179.54,1222.4 1180.13,1222.1 1180.71,1220.08 1181.3,1221.57 1181.89,1219.24 1182.47,1219.11 1183.06,1218.51 1183.65,1218.41 1184.23,1217.93 1184.82,1212.63 1185.41,1212.64 1185.99,1209.94 1186.58,1208.74 1187.16,1207.41 1187.75,1209.18 1188.34,1211.04 1188.92,1209.76 1189.51,1210.24 1190.1,1207.31 1190.68,1210.74 1191.27,1212.47 1191.86,1209.31 1192.44,1207.9 1193.03,1208.57 1193.62,1209.04 1194.2,1207.76 1194.79,1208.65 1195.37,1207.47 1195.96,1206.42 1196.55,1208.36 1197.13,1208.69 1197.72,1212.29 1198.31,1213.71 1198.89,1215.48 1199.48,1211.28 1200.07,1214.16 1200.65,1212.59 1201.24,1212.48 1201.83,1215.32 1202.41,1216.7 1203,1216.87 1203.58,1216.59 1204.17,1216.39 1204.76,1216.36 1205.34,1214.84 1205.93,1213.38 1206.52,1214.88 1207.1,1216.43 1207.69,1216.11 1208.28,1211.37 1208.86,1211.5 1209.45,1209.71 1210.03,1209.97 1210.62,1211.86 1211.21,1212.14 1211.79,1218.2 1212.38,1220.6 1212.97,1219.97 1213.55,1223 1214.14,1224 1214.73,1226.68 1215.31,1227.18 1215.9,1225.3 1216.49,1224.69 1217.07,1223.8 1217.66,1221.65 1218.24,1220.92 1218.83,1220.52 1219.42,1220.13 1220,1217.13 1220.59,1218.34 1221.18,1216.47 1221.76,1214.91 1222.35,1214.93 1222.94,1219.28 1223.52,1219.18 1224.11,1224.88 1224.7,1225.92 1225.28,1223.56 1225.87,1221.62 1226.45,1221.35 1227.04,1217.96 1227.63,1222.35 1228.21,1220.31 1228.8,1222.7 1229.39,1222.23 1229.97,1221.93 1230.56,1215.71 1231.15,1209.66 1231.73,1211.58 1232.32,1213.28 1232.91,1213.44 1233.49,1210.61 1234.08,1210.98 1234.66,1214.07 1235.25,1215.49 1235.84,1215.78 1236.42,1215.7 1237.01,1211.07 1237.6,1209.62 1238.18,1209.61 1238.77,1212.68 1239.36,1214.32 1239.94,1212.56 1240.53,1209.32 1241.11,1210.99 1241.7,1212.85 1242.29,1214 1242.87,1213.94 1243.46,1212.32 1244.05,1216.73 1244.63,1217.87 1245.22,1219.18 1245.81,1219.03 1246.39,1220.19 1246.98,1221.15 1247.57,1220.77 1248.15,1220.56 1248.74,1220.09 1249.32,1216.54 1249.91,1216.19 1250.5,1214.66 1251.08,1214.54 1251.67,1214.64 1252.26,1214.85 1252.84,1214.93 1253.43,1213.3 1254.02,1210.37 1254.6,1211.98 1255.19,1213.87 1255.78,1215.51 1256.36,1215.42 1256.95,1216.88 1257.53,1214.08 1258.12,1211.43 1258.71,1210.32 1259.29,1213.66 1259.88,1212.13 1260.47,1209.15 1261.05,1207.88 1261.64,1211.49 1262.23,1211.43 1262.81,1208.29 1263.4,1210.31 1263.98,1212.14 1264.57,1212.18 1265.16,1212.19 1265.74,1211.21 1266.33,1208.36 1266.92,1210.27 1267.5,1211.85 1268.09,1210.43 1268.68,1212.76 1269.26,1211.49 1269.85,1212.69 1270.44,1214.24 1271.02,1214.44 1271.61,1212.75 1272.19,1214.32 1272.78,1214.45 1273.37,1215.88 1273.95,1217.35 1274.54,1217.36 1275.13,1217.15 1275.71,1218.83 1276.3,1218.74 1276.89,1216.88 1277.47,1216.78 1278.06,1213.34 1278.65,1213.22 1279.23,1213.39 1279.82,1214.89 1280.4,1211.95 1280.99,1213.84 1281.58,1216.72 1282.16,1218.42 1282.75,1212.27 1283.34,1208.17 1283.92,1206.9 1284.51,1207.37 1285.1,1208.19 1285.68,1211.59 1286.27,1211.91 1286.86,1213.65 1287.44,1212.01 1288.03,1212.06 1288.61,1211.99 1289.2,1213.39 1289.79,1211.76 1290.37,1210.64 1290.96,1207.97 1291.55,1207.03 1292.13,1207.71 1292.72,1209.38 1293.31,1211.59 1293.89,1210.25 1294.48,1207.5 1295.06,1210.85 1295.65,1209.6 1296.24,1208.26 1296.82,1207.06 1297.41,1208.86 1298,1210.62 1298.58,1209.53 1299.17,1208.25 1299.76,1211.71 1300.34,1213.73 1300.93,1212.4 1301.52,1214.05 1302.1,1215.71 1302.69,1217.04 1303.27,1218.24 1303.86,1216.69 1304.45,1216.65 1305.03,1213.3 1305.62,1214.71 1306.21,1214.66 1306.79,1216.02 1307.38,1214.53 1307.97,1214.64 1308.55,1216.58 1309.14,1214.96 1309.73,1214.97 1310.31,1218.48 1310.9,1216.75 1311.48,1218.06 1312.07,1214.81 1312.66,1216.3 1313.24,1221.11 1313.83,1219.08 1314.42,1214.32 1315,1213.09 1315.59,1213.14 1316.18,1214.69 1316.76,1219.06 1317.35,1217.41 1317.93,1218.73 1318.52,1221.39 1319.11,1222.34 1319.69,1218.67 1320.28,1218.36 1320.87,1216.81 1321.45,1218.17 1322.04,1216.25 1322.63,1214.61 1323.21,1214.32 1323.8,1214.22 1324.39,1211.06 1324.97,1209.77 1325.56,1208.42 1326.14,1210.36 1326.73,1209.09 1327.32,1211.49 1327.9,1211.79 1328.49,1209.06 1329.08,1212.15 1329.66,1211.08 1330.25,1210.95 1330.84,1209.64 1331.42,1209.82 1332.01,1211.69 1332.6,1213.43 1333.18,1213.62 1333.77,1215.32 1334.35,1214.1 1334.94,1215.67 1335.53,1215.43 1336.11,1216.97 1336.7,1219.9 1337.29,1218.24 1337.87,1216.88 1338.46,1218.32 1339.05,1217.77 1339.63,1222.36 1340.22,1225.24 1340.8,1224.93 1341.39,1228.85 1341.98,1226.54 1342.56,1224.02 1343.15,1226.4 1343.74,1226.96 1344.32,1226.05 1344.91,1224 1345.5,1221.81 1346.08,1219.85 1346.67,1221.17 1347.26,1220.86 1347.84,1221.77 1348.43,1224.11 1349.01,1223.58 1349.6,1227.74 1350.19,1225.58 1350.77,1225.11 1351.36,1218.54 1351.95,1218.42 1352.53,1215.42 1353.12,1216.81 1353.71,1215.03 1354.29,1216.21 1354.88,1215.81 1355.47,1215.65 1356.05,1213.84 1356.64,1213.86 1357.22,1215.16 1357.81,1214.89 1358.4,1213.21 1358.98,1216.22 1359.57,1215.76 1360.16,1216.15 1360.74,1215.7 1361.33,1214.15 1361.92,1214.33 1362.5,1214.29 1363.09,1212.78 1363.68,1212.64 1364.26,1210.97 1364.85,1204.81 1365.43,1206.93 1366.02,1207.63 1366.61,1209.3 1367.19,1209.43 1367.78,1208.29 1368.37,1208.26 1368.95,1208.45 1369.54,1210.19 1370.13,1211.93 1370.71,1210.81 1371.3,1209.34 1371.88,1208.19 1372.47,1206.86 1373.06,1205.99 1373.64,1206.22 1374.23,1209.71 1374.82,1208.34 1375.4,1208.67 1375.99,1210.63 1376.58,1210.73 1377.16,1214.22 1377.75,1212.78 1378.34,1213.02 1378.92,1213.19 1379.51,1213.25 1380.09,1211.88 1380.68,1210.19 1381.27,1207.27 1381.85,1207.98 1382.44,1208.23 1383.03,1208.33 1383.61,1208.63 1384.2,1206 1384.79,1206.64 1385.37,1207.05 1385.96,1207.63 1386.55,1209.6 1387.13,1208.28 1387.72,1208.4 1388.3,1209 1388.89,1209.46 1389.48,1211.52 1390.06,1208.75 1390.65,1209.2 1391.24,1209.68 1391.82,1214.44 1392.41,1213.2 1393,1214.99 1393.58,1214.74 1394.17,1216.17 1394.75,1215.99 1395.34,1214.09 1395.93,1214.05 1396.51,1217.29 1397.1,1214.29 1397.69,1214.53 1398.27,1212.99 1398.86,1211.09 1399.45,1211.35 1400.03,1213.01 1400.62,1213.04 1401.21,1213.07 1401.79,1213.07 1402.38,1216.02 1402.96,1217.7 1403.55,1219.44 1404.14,1219.3 1404.72,1217.63 1405.31,1219.01 1405.9,1219.02 1406.48,1221.73 1407.07,1221.43 1407.66,1221.13 1408.24,1223.95 1408.83,1225.98 1409.42,1228.37 1410,1234.01 1410.59,1233.25 1411.17,1233.69 1411.76,1231.01 1412.35,1230.19 1412.93,1230.77 1413.52,1231.31 1414.11,1230.27 1414.69,1227.65 1415.28,1225.19 1415.87,1224.86 1416.45,1222.92 1417.04,1220.88 1417.63,1222.35 1418.21,1221.79 1418.8,1222.83 1419.38,1222.35 1419.97,1221.79 1420.56,1220.87 1421.14,1221.56 1421.73,1220.97 1422.32,1214.77 1422.9,1216.23 1423.49,1214.4 1424.08,1213.07 1424.66,1211.53 1425.25,1210.13 1425.83,1205.64 1426.42,1205.97 1427.01,1201.57 1427.59,1202.12 1428.18,1201.06 1428.77,1200.65 1429.35,1200.95 1429.94,1200.5 1430.53,1199.73 1431.11,1200.24 1431.7,1204.17 1432.29,1203.21 1432.87,1208.08 1433.46,1208.71 1434.04,1209.34 1434.63,1211.16 1435.22,1212.41 1435.8,1210.81 1436.39,1209.35 1436.98,1210.9 1437.56,1210.95 1438.15,1208.21 1438.74,1211.55 1439.32,1211.39 1439.91,1211.43 1440.5,1210.19 1441.08,1208.63 1441.67,1208.31 1442.25,1212.87 1442.84,1214.41 1443.43,1210.11 1444.01,1208.76 1444.6,1209.23 1445.19,1209.39 1445.77,1213.81 1446.36,1209.17 1446.95,1203.27 1447.53,1202.38 1448.12,1204.82 1448.7,1204.16 1449.29,1202.95 1449.88,1202.2 1450.46,1201.3 1451.05,1204.81 1451.64,1205.47 1452.22,1205.82 1452.81,1208.05 1453.4,1208.26 1453.98,1210.14 1454.57,1210.71 1455.16,1212.41 1455.74,1210.94 1456.33,1207.8 1456.91,1209.92 1457.5,1210.56 1458.09,1208.83 1458.67,1209.16 1459.26,1209.7 1459.85,1210.23 1460.43,1210.33 1461.02,1210.47 1461.61,1209.25 1462.19,1206.23 1462.78,1206.73 1463.37,1205.73 1463.95,1205 1464.54,1205.35 1465.12,1205.93 1465.71,1209.86 1466.3,1208.89 1466.88,1207.74 1467.47,1204.98 1468.06,1206.86 1468.64,1209.04 1469.23,1208.09 1469.82,1209.88 1470.4,1210.05 1470.99,1209.93 1471.57,1208.78 1472.16,1207.54 1472.75,1210.96 1473.33,1211.11 1473.92,1208.34 1474.51,1213.38 1475.09,1212.01 1475.68,1213.84 1476.27,1213.84 1476.85,1215.51 1477.44,1220.17 1478.03,1224.58 1478.61,1222.57 1479.2,1223.46 1479.78,1224.89 1480.37,1226.01 1480.96,1222.2 1481.54,1222.09 1482.13,1220.33 1482.72,1221.53 1483.3,1222.48 1483.89,1221.85 1484.48,1215.28 1485.06,1213.8 1485.65,1213.72 1486.24,1212.07 1486.82,1210.6 1487.41,1210.81 1487.99,1212.63 1488.58,1212.71 1489.17,1214.06 1489.75,1213.86 1490.34,1213.87 1490.93,1215.48 1491.51,1215.09 1492.1,1208.88 1492.69,1209.11 1493.27,1206.35 1493.86,1208.21 1494.45,1210.09 1495.03,1212.13 1495.62,1215.05 1496.2,1216.53 1496.79,1218.2 1497.38,1217.85 1497.96,1219 1498.55,1217.07 1499.14,1216.71 1499.72,1216.44 1500.31,1216.35 1500.9,1217.52 1501.48,1214.23 1502.07,1213.09 1502.65,1216.2 1503.24,1214.42 1503.83,1219 1504.41,1216.96 1505,1215.45 1505.59,1216.65 1506.17,1216.58 1506.76,1216.14 1507.35,1214.49 1507.93,1212.66 1508.52,1214.35 1509.11,1214.53 1509.69,1214.6 1510.28,1216.43 1510.86,1216.35 1511.45,1217.48 1512.04,1214.14 1512.62,1212.6 1513.21,1212.94 1513.8,1213.14 1514.38,1214.48 1514.97,1217.56 1515.56,1217.55 1516.14,1218.73 1516.73,1218.66 1517.32,1218.39 1517.9,1217.09 1518.49,1215.15 1519.07,1216.6 1519.66,1221.24 1520.25,1220.94 1520.83,1216.14 1521.42,1215.98 1522.01,1217.25 1522.59,1218.84 1523.18,1215.56 1523.77,1215.64 1524.35,1212.68 1524.94,1211.09 1525.52,1210.05 1526.11,1207.37 1526.7,1206.22 1527.28,1206.69 1527.87,1205.4 1528.46,1205.72 1529.04,1208.2 1529.63,1208.57 1530.22,1211.7 1530.8,1211.78 1531.39,1210.39 1531.98,1216.63 1532.56,1214.92 1533.15,1213.29 1533.73,1216.06 1534.32,1214.07 1534.91,1216.85 1535.49,1218.24 1536.08,1216.37 1536.67,1216.02 1537.25,1215.99 1537.84,1215.72 1538.43,1214.45 1539.01,1221.93 1539.6,1221.66 1540.19,1224.68 1540.77,1224.08 1541.36,1219.14 1541.94,1218.73 1542.53,1219.63 1543.12,1220.8 1543.7,1222.03 1544.29,1218.66 1544.88,1216.98 1545.46,1215.59 1546.05,1215.23 1546.64,1216.76 1547.22,1215.15 1547.81,1215.3 1548.4,1216.75 1548.98,1222.7 1549.57,1219.11 1550.15,1218.52 1550.74,1219.62 1551.33,1217.59 1551.91,1217.58 1552.5,1218.82 1553.09,1218.68 1553.67,1217.01 1554.26,1210.81 1554.85,1212.29 1555.43,1210.8 1556.02,1209.56 1556.6,1209.93 1557.19,1210.32 1557.78,1210.67 1558.36,1210.74 1558.95,1212.33 1559.54,1212.5 1560.12,1212.53 1560.71,1214.07 1561.3,1213.94 1561.88,1210.63 1562.47,1209.27 1563.06,1210.99 1563.64,1211.21 1564.23,1211.15 1564.81,1211.26 1565.4,1211.33 1565.99,1211.57 1566.57,1211.84 1567.16,1214.79 1567.75,1216.35 1568.33,1214.61 1568.92,1217.84 1569.51,1219.2 1570.09,1220.55 1570.68,1218.82 1571.27,1220.27 1571.85,1221.51 1572.44,1221.16 1573.02,1224.01 1573.61,1220.43 1574.2,1218.3 1574.78,1218.07 1575.37,1216.27 1575.96,1215.92 1576.54,1217.48 1577.13,1218.69 1577.72,1215.11 1578.3,1215.11 1578.89,1213.51 1579.47,1215.17 1580.06,1214.95 1580.65,1215.12 1581.23,1216.44 1581.82,1213.19 1582.41,1210.48 1582.99,1210.47 1583.58,1209.04 1584.17,1207.66 1584.75,1208.11 1585.34,1209.96 1585.93,1208.58 1586.51,1210.31 1587.1,1211.89 1587.68,1212.3 1588.27,1213.82 1588.86,1215.24 1589.44,1219.78 1590.03,1218.16 1590.62,1216.32 1591.2,1219.2 1591.79,1220.3 1592.38,1221.31 1592.96,1222.74 1593.55,1217.91 1594.14,1216.43 1594.72,1214.62 1595.31,1211.56 1595.89,1213.26 1596.48,1216.49 1597.07,1219.63 1597.65,1218.05 1598.24,1219.45 1598.83,1219.21 1599.41,1217.57 1600,1217.44 1600.59,1212.44 1601.17,1215.88 1601.76,1215.74 1602.34,1215.77 1602.93,1216.68 1603.52,1215.1 1604.1,1215.34 1604.69,1215.2 1605.28,1210.69 1605.86,1208.02 1606.45,1208.39 1607.04,1211.94 1607.62,1209.11 1608.21,1206.7 1608.8,1210.27 1609.38,1207.48 1609.97,1209.12 1610.55,1211.19 1611.14,1209.83 1611.73,1210.08 1612.31,1210.37 1612.9,1210.51 1613.49,1212.66 1614.07,1214.01 1614.66,1213.68 1615.25,1213.69 1615.83,1213.7 1616.42,1213.67 1617.01,1210.35 1617.59,1210.9 1618.18,1210.77 1618.76,1209.44 1619.35,1209.47 1619.94,1208.11 1620.52,1208.63 1621.11,1209.01 1621.7,1209.27 1622.28,1208.01 1622.87,1207.85 1623.46,1210.04 1624.04,1210.17 1624.63,1212.01 1625.22,1213.58 1625.8,1216.89 1626.39,1219.46 1626.97,1220.63 1627.56,1217.5 1628.15,1221.92 1628.73,1218.25 1629.32,1218.13 1629.91,1219.26 1630.49,1219.25 1631.08,1219.32 1631.67,1220.68 1632.25,1220.49 1632.84,1217.13 1633.42,1216.74 1634.01,1218.17 1634.6,1219.51 1635.18,1219.37 1635.77,1217.69 1636.36,1216.33 1636.94,1218.02 1637.53,1214.66 1638.12,1213 1638.7,1216.07 1639.29,1217.5 1639.88,1217.02 1640.46,1218.24 1641.05,1217.91 1641.63,1216 1642.22,1217.5 1642.81,1220.39 1643.39,1218.12 1643.98,1218.05 1644.57,1218.28 1645.15,1218.29 1645.74,1219.93 1646.33,1219.56 1646.91,1219.3 1647.5,1220.9 1648.09,1218.96 1648.67,1219.12 1649.26,1217.07 1649.84,1218.23 1650.43,1219.37 1651.02,1208.7 1651.6,1209.01 1652.19,1208.13 1652.78,1208.24 1653.36,1206.73 1653.95,1209.95 1654.54,1210.05 1655.12,1204.09 1655.71,1203.31 1656.29,1202.27 1656.88,1202.95 1657.47,1203.49 1658.05,1200.9 1658.64,1201.67 1659.23,1203.85 1659.81,1201.35 1660.4,1200.52 1660.99,1201.01 1661.57,1203.32 1662.16,1203.44 1662.75,1207.13 1663.33,1207.5 1663.92,1206.65 1664.5,1208.69 1665.09,1208.98 1665.68,1210.88 1666.26,1212.25 1666.85,1216.92 1667.44,1216.98 1668.02,1215.22 1668.61,1215.53 1669.2,1212.59 1669.78,1215.6 1670.37,1215.49 1670.96,1213.75 1671.54,1210.79 1672.13,1213.8 1672.71,1213.97 1673.3,1210.91 1673.89,1211.1 1674.47,1209.71 1675.06,1209.87 1675.65,1208.69 1676.23,1210.45 1676.82,1212.06 1677.41,1210.44 1677.99,1212.24 1678.58,1210.65 1679.17,1210.91 1679.75,1211.26 1680.34,1212.73 1680.92,1215.53 1681.51,1215.68 1682.1,1212.69 1682.68,1210.96 1683.27,1209.62 1683.86,1215.54 1684.44,1216.63 1685.03,1216.33 1685.62,1216.24 1686.2,1214.13 1686.79,1214.14 1687.37,1215.62 1687.96,1217.25 1688.55,1217.08 1689.13,1219.79 1689.72,1218.09 1690.31,1221.1 1690.89,1220.86 1691.48,1221.93 1692.07,1219.88 1692.65,1218.03 1693.24,1217.81 1693.83,1219.33 1694.41,1217.62 1695,1218.75 1695.58,1221.52 1696.17,1221.32 1696.76,1225.4 1697.34,1230.69 1697.93,1229.66 1698.52,1227.43 1699.1,1229.46 1699.69,1225.52 1700.28,1224.81 1700.86,1224.47 1701.45,1224.03 1702.04,1220.53 1702.62,1222.97 1703.21,1222.38 1703.79,1220.22 1704.38,1218.41 1704.97,1221.41 1705.55,1220.72 1706.14,1224.82 1706.73,1227.47 1707.31,1226.61 1707.9,1224.41 1708.49,1222.61 1709.07,1221.93 1709.66,1218.47 1710.24,1216.57 1710.83,1217.79 1711.42,1219.14 1712,1220.48 1712.59,1215.3 1713.18,1210.51 1713.76,1207.39 1714.35,1206.25 1714.94,1205.1 1715.52,1206.92 1716.11,1203.78 1716.7,1204.23 1717.28,1203.18 1717.87,1205.07 1718.45,1207.02 1719.04,1208.75 1719.63,1212.26 1720.21,1210.91 1720.8,1211.07 1721.39,1212.5 1721.97,1213.99 1722.56,1212.36 1723.15,1209.38 1723.73,1206.51 1724.32,1206.42 1724.91,1208.31 1725.49,1210.2 1726.08,1210.01 1726.66,1208.95 1727.25,1210.52 1727.84,1209.36 1728.42,1209.58 1729.01,1208.21 1729.6,1206.99 1730.18,1207.48 1730.77,1206.52 1731.36,1208.38 1731.94,1208.72 1732.53,1206.21 1733.11,1206.89 1733.7,1205.76 1734.29,1206.67 1734.87,1208.51 1735.46,1205.69 1736.05,1204.93 1736.63,1205.64 1737.22,1206.16 1737.81,1205.26 1738.39,1208.98 1738.98,1210.95 1739.57,1215.85 1740.15,1210.01 1740.74,1210.34 1741.32,1212.15 1741.91,1214.22 1742.5,1213.14 1743.08,1212.08 1743.67,1215.5 1744.26,1214.11 1744.84,1214.34 1745.43,1215.82 1746.02,1216.99 1746.6,1218.49 1747.19,1215.51 1747.78,1216.94 1748.36,1214.07 1748.95,1214.08 1749.53,1215.95 1750.12,1218.89 1750.71,1217.38 1751.29,1220.24 1751.88,1220.15 1752.47,1220.19 1753.05,1222.65 1753.64,1222.09 1754.23,1224.29 1754.81,1224.96 1755.4,1224.57 1755.99,1224.01 1756.57,1223.46 1757.16,1221.59 1757.74,1222.94 1758.33,1221.08 1758.92,1219.03 1759.5,1218.88 1760.09,1218.84 1760.68,1218.57 1761.26,1215.13 1761.85,1219.79 1762.44,1216.25 1763.02,1213.25 1763.61,1213.13 1764.19,1211.52 1764.78,1211.63 1765.37,1210.42 1765.95,1213.34 1766.54,1216.77 1767.13,1217.98 1767.71,1216.58 1768.3,1216.26 1768.89,1211.86 1769.47,1213.42 1770.06,1211.8 1770.65,1210.23 1771.23,1207.42 1771.82,1209.47 1772.4,1208.45 1772.99,1207.05 1773.58,1206.34 1774.16,1210.15 1774.75,1210.62 1775.34,1209.19 1775.92,1211.11 1776.51,1212.33 1777.1,1212.43 1777.68,1212.52 1778.27,1212.86 1778.86,1218.86 1779.44,1217.28 1780.03,1215.39 1780.61,1215.25 1781.2,1213.35 1781.79,1213.41 1782.37,1213.43 1782.96,1213.38 1783.55,1214.82 1784.13,1216.42 1784.72,1216.09 1785.31,1212.82 1785.89,1212.86 1786.48,1211.24 1787.06,1211.59 1787.65,1213.46 1788.24,1212.11 1788.82,1209.33 1789.41,1206.43 1790,1208.18 1790.58,1206.8 1791.17,1210.34 1791.76,1209.28 1792.34,1206.26 1792.93,1205.42 1793.52,1207.88 1794.1,1211.03 1794.69,1209.38 1795.27,1206.73 1795.86,1210.09 1796.45,1210.32 1797.03,1208.86 1797.62,1207.18 1798.21,1205.9 1798.79,1203.05 1799.38,1206.38 1799.97,1208.45 1800.55,1207.15 1801.14,1210.88 1801.73,1209.64 1802.31,1211.1 1802.9,1211.19 1803.48,1211.6 1804.07,1215 1804.66,1214.78 1805.24,1214.66 1805.83,1216.36 1806.42,1214.9 1807,1216.32 1807.59,1214.72 1808.18,1211.65 1808.76,1213.63 1809.35,1213.53 1809.94,1213.54 1810.52,1214.98 1811.11,1211.75 1811.69,1211.59 1812.28,1214.64 1812.87,1216.19 1813.45,1216.2 1814.04,1217.54 1814.63,1217.35 1815.21,1223.18 1815.8,1221.17 1816.39,1223.75 1816.97,1223.11 1817.56,1224.25 1818.14,1222.35 1818.73,1220.27 1819.32,1218.36 1819.9,1217.85 1820.49,1219.1 1821.08,1221.5 1821.66,1222.26 1822.25,1223.36 1822.84,1221.29 1823.42,1222.53 1824.01,1220.63 1824.6,1221.84 1825.18,1223.06 1825.77,1220.55 1826.35,1219.91 1826.94,1222.49 1827.53,1223.42 1828.11,1224.45 1828.7,1222.33 1829.29,1220 1829.87,1221.47 1830.46,1221.27 1831.05,1219.17 1831.63,1218.56 1832.22,1216.76 1832.81,1216.76 1833.39,1213.52 1833.98,1212.41 1834.56,1212.62 1835.15,1211.2 1835.74,1212.7 1836.32,1211.19 1836.91,1211.39 1837.5,1212.94 1838.08,1213.21 1838.67,1213.37 1839.26,1214.7 1839.84,1213.09 1840.43,1213.3 1841.01,1213.43 1841.6,1205.86 1842.19,1206.41 1842.77,1205.03 1843.36,1205.82 1843.95,1207.74 1844.53,1208.27 1845.12,1213.08 1845.71,1216.32 1846.29,1216.25 1846.88,1217.88 1847.47,1220.95 1848.05,1225.38 1848.64,1226.45 1849.22,1224.1 1849.81,1222.2 1850.4,1223.29 1850.98,1222.8 1851.57,1224.12 1852.16,1226.78 1852.74,1224.7 1853.33,1224.22 1853.92,1225.26 1854.5,1223.41 1855.09,1219.79 1855.68,1221.02 1856.26,1220.53 1856.85,1212.6 1857.43,1214.16 1858.02,1214.23 1858.61,1214.2 1859.19,1213.86 1859.78,1211.8 1860.37,1209.06 1860.95,1210.71 1861.54,1208.04 1862.13,1208.16 1862.71,1208.38 1863.3,1209.89 1863.88,1212.98 1864.47,1214.58 1865.06,1209.96 1865.64,1210.19 1866.23,1212.03 1866.82,1210.54 1867.4,1210.8 1867.99,1217.1 1868.58,1215.35 1869.16,1213.67 1869.75,1209.52 1870.34,1210.01 1870.92,1209.05 1871.51,1209.18 1872.09,1210.77 1872.68,1211.1 1873.27,1209.96 1873.85,1210.2 1874.44,1208.88 1875.03,1210.6 1875.61,1206.55 1876.2,1203.78 1876.79,1207.34 1877.37,1207.56 1877.96,1207.86 1878.55,1208.2 1879.13,1205.8 1879.72,1204.98 1880.3,1205.39 1880.89,1208.92 1881.48,1208.73 1882.06,1205.85 1882.65,1203.14 1883.24,1205.25 1883.82,1204.32 1884.41,1203.07 1885,1205.11 1885.58,1205.39 1886.17,1205.67 1886.76,1211.13 1887.34,1211.32 1887.93,1211.64 1888.51,1213.08 1889.1,1211.8 1889.69,1212.06 1890.27,1213.64 1890.86,1213.55 1891.45,1216.59 1892.03,1212.21 1892.62,1209.19 1893.21,1209.28 1893.79,1206.81 1894.38,1210.22 1894.96,1208.82 1895.55,1207.49 1896.14,1209.18 1896.72,1209.51 1897.31,1208.22 1897.9,1207.01 1898.48,1204.28 1899.07,1203.23 1899.66,1202.68 1900.24,1206.22 1900.83,1211.07 1901.42,1211.17 1902,1212.91 1902.59,1214.71 1903.17,1214.6 1903.76,1217.54 1904.35,1220.34 1904.93,1223.21 1905.52,1224.3 1906.11,1222.37 1906.69,1223.31 1907.28,1222.62 1907.87,1220.71 1908.45,1222.17 1909.04,1223.24 1909.63,1224.5 1910.21,1225.6 1910.8,1223.73 1911.38,1224.77 1911.97,1225.92 1912.56,1225.43 1913.14,1226.18 1913.73,1220.8 1914.32,1220.5 1914.9,1218.63 1915.49,1218.21 1916.08,1219.38 1916.66,1219.46 1917.25,1219.14 1917.83,1215.43 1918.42,1213.78 1919.01,1215.32 1919.59,1217.14 1920.18,1216.57 1920.77,1213.37 1921.35,1213.22 1921.94,1212.94 1922.53,1213.07 1923.11,1216.44 1923.7,1214.41 1924.29,1217.51 1924.87,1220.16 1925.46,1219.84 1926.04,1221.29 1926.63,1222.35 1927.22,1220.42 1927.8,1220.22 1928.39,1218.45 1928.98,1221.48 1929.56,1221.36 1930.15,1217.74 1930.74,1220.59 1931.32,1221.81 1931.91,1216.6 1932.5,1211.72 1933.08,1208.7 1933.67,1209.19 1934.25,1211.28 1934.84,1211.29 1935.43,1214.23 1936.01,1215.82 1936.6,1214.02 1937.19,1214.16 1937.77,1211.06 1938.36,1211.22 1938.95,1209.9 1939.53,1210.07 1940.12,1211.89 1940.71,1215.06 1941.29,1215.03 1941.88,1221.36 1942.46,1219.64 1943.05,1217.66 1943.64,1218.92 1944.22,1216.91 1944.81,1217.13 1945.4,1213.95 1945.98,1214.12 1946.57,1209.64 1947.16,1211.2 1947.74,1208.3 1948.33,1207.33 1948.91,1209.35 1949.5,1215.74 1950.09,1214.35 1950.67,1215.74 1951.26,1212.43 1951.85,1213.95 1952.43,1213.68 1953.02,1213.4 1953.61,1218.06 1954.19,1221.05 1954.78,1220.55 1955.37,1220.21 1955.95,1220 1956.54,1221.1 1957.12,1217.93 1957.71,1214.71 1958.3,1213.22 1958.88,1213.52 1959.47,1213.51 1960.06,1213.54 1960.64,1213.51 1961.23,1213.4 1961.82,1213.5 1962.4,1208.99 1962.99,1207.54 1963.58,1211.03 1964.16,1211.08 1964.75,1209.43 1965.33,1209.68 1965.92,1209.64 1966.51,1209.62 1967.09,1209.76 1967.68,1210.24 1968.27,1212 1968.85,1212.17 1969.44,1212.25 1970.03,1210.95 1970.61,1212.72 1971.2,1213.16 1971.78,1216.28 1972.37,1215.93 1972.96,1212.71 1973.54,1209.78 1974.13,1211.95 1974.72,1213.11 1975.3,1211.67 1975.89,1210.33 1976.48,1213.58 1977.06,1213.8 1977.65,1212 1978.24,1210.88 1978.82,1211.35 1979.41,1211.81 1979.99,1211.53 1980.58,1211.76 1981.17,1207.57 1981.75,1206.23 1982.34,1206.37 1982.93,1206.67 1983.51,1206.98 1984.1,1207.19 1984.69,1207.38 1985.27,1207.63 1985.86,1207.61 1986.45,1206.07 1987.03,1207.73 1987.62,1206.25 1988.2,1208.41 1988.79,1211.73 1989.38,1216.53 1989.96,1214.84 1990.55,1213.43 1991.14,1215.16 1991.72,1217.08 1992.31,1214.02 1992.9,1215.34 1993.48,1213.82 1994.07,1214.11 1994.65,1214.22 1995.24,1216.84 1995.83,1216.27 1996.41,1212.88 1997,1209.79 1997.59,1213.52 1998.17,1215.1 1998.76,1210.55 1999.35,1210.59 1999.93,1213.76 2000.52,1213.86 2001.11,1215.18 2001.69,1210.32 2002.28,1213.66 2002.86,1213.52 2003.45,1213.46 2004.04,1213.49 2004.62,1214.9 2005.21,1213.23 2005.8,1213.13 2006.38,1212.98 2006.97,1213.51 2007.56,1210.78 2008.14,1210.91 2008.73,1208.15 2009.32,1212.69 2009.9,1216.04 2010.49,1217.77 2011.07,1211.39 2011.66,1211.4 2012.25,1213.2 2012.83,1213.06 2013.42,1212.88 2014.01,1212.95 2014.59,1208.4 2015.18,1202.6 2015.77,1201.93 2016.35,1205.47 2016.94,1206.19 2017.53,1208.05 2018.11,1209.84 2018.7,1210.02 2019.28,1208.66 2019.87,1207.67 2020.46,1203.36 2021.04,1203.86 2021.63,1204.61 2022.22,1208.09 2022.8,1208.05 2023.39,1206.8 2023.98,1205.93 2024.56,1206.17 2025.15,1206.6 2025.73,1207.23 2026.32,1206.05 2026.91,1209.63 2027.49,1211.36 2028.08,1211.76 2028.67,1210.71 2029.25,1207.87 2029.84,1207.99 2030.43,1207.97 2031.01,1208.3 2031.6,1205.71 2032.19,1206.12 2032.77,1208.12 2033.36,1205.5 2033.94,1205.99 2034.53,1206.55 2035.12,1209.86 2035.7,1211.37 2036.29,1209.99 2036.88,1211.9 2037.46,1211.97 2038.05,1214.81 2038.64,1214.7 2039.22,1211.67 2039.81,1210.28 2040.4,1210.52 2040.98,1210.64 2041.57,1212.23 2042.15,1213.62 2042.74,1218.08 2043.33,1218.26 2043.91,1216.36 2044.5,1220.83 2045.09,1218.53 2045.67,1217.9 2046.26,1214.88 2046.85,1213.54 2047.43,1214.96 2048.02,1213.1 2048.6,1208.74 2049.19,1210.67 2049.78,1214.3 2050.36,1212.84 2050.95,1215.69 2051.54,1217.42 2052.12,1215.89 2052.71,1217.41 2053.3,1218.89 2053.88,1219.81 2054.47,1219.38 2055.06,1219.34 2055.64,1220.37 2056.23,1215.48 2056.81,1219.92 2057.4,1219.6 2057.99,1222.4 2058.57,1220.88 2059.16,1218.94 2059.75,1216.88 2060.33,1213.48 2060.92,1214.96 2061.51,1213.31 2062.09,1214.72 2062.68,1216.25 2063.27,1212.89 2063.85,1216.05 2064.44,1218.78 2065.02,1215.62 2065.61,1212.58 2066.2,1214.22 2066.78,1215.72 2067.37,1214.08 2067.96,1216.8 2068.54,1216.88 2069.13,1218.12 2069.72,1217.76 2070.3,1217.37 2070.89,1218.65 2071.48,1216.6 2072.06,1219.38 2072.65,1220.25 2073.23,1219.84 2073.82,1218 2074.41,1217.78 2074.99,1217.3 2075.58,1215.33 2076.17,1216.92 2076.75,1216.93 2077.34,1216.51 2077.93,1214.58 2078.51,1216.09 2079.1,1214.5 2079.68,1216.27 2080.27,1217.86 2080.86,1217.67 2081.44,1219.11 2082.03,1221.93 2082.62,1226.13 2083.2,1228.11 2083.79,1227.75 2084.38,1226.93 2084.96,1224.77 2085.55,1224.2 2086.14,1223.61 2086.72,1221.76 2087.31,1221.47 2087.89,1222.55 2088.48,1225.05 2089.07,1224.49 2089.65,1220.73 2090.24,1220.19 2090.83,1221.6 2091.41,1224.33 2092,1223.62 2092.59,1223.28 2093.17,1221.39 2093.76,1215.04 2094.35,1214.96 2094.93,1216.64 2095.52,1215.07 2096.1,1212.17 2096.69,1213.63 2097.28,1219.64 2097.86,1217.71 2098.45,1217.34 2099.04,1217.55 2099.62,1217.07 2100.21,1215.44 2100.8,1215.49 2101.38,1213.75 2101.97,1218.17 2102.55,1216.3 2103.14,1217.69 2103.73,1215.91 2104.31,1218.96 2104.9,1218.77 2105.49,1221.66 2106.07,1221.09 2106.66,1220.42 2107.25,1218.87 2107.83,1215.52 2108.42,1215.72 2109.01,1217.14 2109.59,1216.98 2110.18,1216.87 2110.76,1216.72 2111.35,1212.22 2111.94,1212.16 2112.52,1210.96 2113.11,1212.67 2113.7,1209.55 2114.28,1211.35 2114.87,1213.19 2115.46,1214.66 2116.04,1214.71 2116.63,1212.04 2117.22,1216.77 2117.8,1213.51 2118.39,1210.57 2118.97,1210.55 2119.56,1209.28 2120.15,1207.89 2120.73,1207.17 2121.32,1204.34 2121.91,1207.73 2122.49,1206.47 2123.08,1205.28 2123.67,1202.63 2124.25,1203.17 2124.84,1203.68 2125.42,1203.68 2126.01,1207.14 2126.6,1205.76 2127.18,1204.82 2127.77,1203.51 2128.36,1202.55 2128.94,1203.36 2129.53,1202.46 2130.12,1205.09 2130.7,1210.21 2131.29,1210.38 2131.88,1212.33 2132.46,1214.24 2133.05,1215.81 2133.63,1218.86 2134.22,1218.52 2134.81,1216.9 2135.39,1216.86 2135.98,1216.92 2136.57,1216.9 2137.15,1216.79 2137.74,1216.92 2138.33,1215.45 2138.91,1215.33 2139.5,1214.89 2140.09,1213.5 2140.67,1212.97 2141.26,1213.04 2141.84,1214.91 2142.43,1214.7 2143.02,1216.58 2143.6,1218.07 2144.19,1216.06 2144.78,1219.29 2145.36,1219.17 2145.95,1223.55 2146.54,1223.26 2147.12,1224.26 2147.71,1220.82 2148.3,1220.62 2148.88,1221.78 2149.47,1222.97 2150.05,1222.54 2150.64,1225.36 2151.23,1223.56 2151.81,1229.19 2152.4,1230.01 2152.99,1227.6 2153.57,1226.84 2154.16,1229.3 2154.75,1225.89 2155.33,1223.96 2155.92,1223.37 2156.5,1221.25 2157.09,1217.73 2157.68,1214.44 2158.26,1214.5 \"/>\n<path clip-path=\"url(#clip502)\" d=\"M986.025 1214.89 L986.612 1214.89 L987.198 1214.89 L987.785 1214.89 L988.371 1214.89 L988.957 1214.89 L989.544 1214.89 L990.13 1214.89 L990.717 1214.89 L991.303 1214.89 L991.889 1214.89 L992.476 1214.89 L993.062 1214.89 L993.649 1214.89 L994.235 1214.89 L994.822 1214.89 L995.408 1214.89 L995.994 1214.89 L996.581 1214.89 L997.167 1214.89 L997.754 1214.89 L998.34 1214.89 L998.926 1214.89 L999.513 1214.89 L1000.1 1214.89 L1000.69 1214.89 L1001.27 1214.89 L1001.86 1214.89 L1002.44 1214.89 L1003.03 1214.89 L1003.62 1214.89 L1004.2 1214.89 L1004.79 1214.89 L1005.38 1214.89 L1005.96 1214.89 L1006.55 1214.89 L1007.14 1214.89 L1007.72 1214.89 L1008.31 1214.89 L1008.9 1214.89 L1009.48 1214.89 L1010.07 1214.89 L1010.65 1214.89 L1011.24 1214.89 L1011.83 1214.89 L1012.41 1214.89 L1013 1214.89 L1013.59 1214.89 L1014.17 1214.89 L1014.76 1214.89 L1015.35 1214.89 L1015.93 1214.89 L1016.52 1214.89 L1017.11 1214.89 L1017.69 1214.89 L1018.28 1214.89 L1018.86 1214.89 L1019.45 1214.89 L1020.04 1214.89 L1020.62 1214.89 L1021.21 1214.89 L1021.8 1214.89 L1022.38 1214.89 L1022.97 1214.89 L1023.56 1214.89 L1024.14 1214.89 L1024.73 1214.89 L1025.32 1214.89 L1025.9 1214.89 L1026.49 1214.89 L1027.07 1214.89 L1027.66 1214.89 L1028.25 1214.89 L1028.83 1214.89 L1029.42 1214.89 L1030.01 1214.89 L1030.59 1214.89 L1031.18 1214.89 L1031.77 1214.89 L1032.35 1214.89 L1032.94 1214.89 L1033.52 1214.89 L1034.11 1214.89 L1034.7 1214.89 L1035.28 1214.89 L1035.87 1214.89 L1036.46 1214.89 L1037.04 1214.89 L1037.63 1214.89 L1038.22 1214.89 L1038.8 1214.89 L1039.39 1214.89 L1039.98 1214.89 L1040.56 1214.89 L1041.15 1214.89 L1041.73 1214.89 L1042.32 1214.89 L1042.91 1214.89 L1043.49 1214.89 L1044.08 1214.89 L1044.67 1214.89 L1045.25 1214.89 L1045.84 1214.89 L1046.43 1214.89 L1047.01 1214.89 L1047.6 1214.89 L1048.19 1214.89 L1048.77 1214.89 L1049.36 1214.89 L1049.94 1214.89 L1050.53 1214.89 L1051.12 1214.89 L1051.7 1214.89 L1052.29 1214.89 L1052.88 1214.89 L1053.46 1214.89 L1054.05 1214.89 L1054.64 1214.89 L1055.22 1214.89 L1055.81 1214.89 L1056.39 1214.89 L1056.98 1214.89 L1057.57 1214.89 L1058.15 1214.89 L1058.74 1214.89 L1059.33 1214.89 L1059.91 1214.89 L1060.5 1214.89 L1061.09 1214.89 L1061.67 1214.89 L1062.26 1214.89 L1062.85 1214.89 L1063.43 1214.89 L1064.02 1214.89 L1064.6 1214.89 L1065.19 1214.89 L1065.78 1214.89 L1066.36 1214.89 L1066.95 1214.89 L1067.54 1214.89 L1068.12 1214.89 L1068.71 1214.89 L1069.3 1214.89 L1069.88 1214.89 L1070.47 1214.89 L1071.06 1214.89 L1071.64 1214.89 L1072.23 1214.89 L1072.81 1214.89 L1073.4 1214.89 L1073.99 1214.89 L1074.57 1214.89 L1075.16 1214.89 L1075.75 1214.89 L1076.33 1214.89 L1076.92 1214.89 L1077.51 1214.89 L1078.09 1214.89 L1078.68 1214.89 L1079.26 1214.89 L1079.85 1214.89 L1080.44 1214.89 L1081.02 1214.89 L1081.61 1214.89 L1082.2 1214.89 L1082.78 1214.89 L1083.37 1214.89 L1083.96 1214.89 L1084.54 1214.89 L1085.13 1214.89 L1085.72 1214.89 L1086.3 1214.89 L1086.89 1214.89 L1087.47 1214.89 L1088.06 1214.89 L1088.65 1214.89 L1089.23 1214.89 L1089.82 1214.89 L1090.41 1214.89 L1090.99 1214.89 L1091.58 1214.89 L1092.17 1214.89 L1092.75 1214.89 L1093.34 1214.89 L1093.93 1214.89 L1094.51 1214.89 L1095.1 1214.89 L1095.68 1214.89 L1096.27 1214.89 L1096.86 1214.89 L1097.44 1214.89 L1098.03 1214.89 L1098.62 1214.89 L1099.2 1214.89 L1099.79 1214.89 L1100.38 1214.89 L1100.96 1214.89 L1101.55 1214.89 L1102.14 1214.89 L1102.72 1214.89 L1103.31 1214.89 L1103.89 1214.89 L1104.48 1214.89 L1105.07 1214.89 L1105.65 1214.89 L1106.24 1214.89 L1106.83 1214.89 L1107.41 1214.89 L1108 1214.89 L1108.59 1214.89 L1109.17 1214.89 L1109.76 1214.89 L1110.34 1214.89 L1110.93 1214.89 L1111.52 1214.89 L1112.1 1214.89 L1112.69 1214.89 L1113.28 1214.89 L1113.86 1214.89 L1114.45 1214.89 L1115.04 1214.89 L1115.62 1214.89 L1116.21 1214.89 L1116.8 1214.89 L1117.38 1214.89 L1117.97 1214.89 L1118.55 1214.89 L1119.14 1214.89 L1119.73 1214.89 L1120.31 1214.89 L1120.9 1214.89 L1121.49 1214.89 L1122.07 1214.89 L1122.66 1214.89 L1123.25 1214.89 L1123.83 1214.89 L1124.42 1214.89 L1125.01 1214.89 L1125.59 1214.89 L1126.18 1214.89 L1126.76 1214.89 L1127.35 1214.89 L1127.94 1214.89 L1128.52 1214.89 L1129.11 1214.89 L1129.7 1214.89 L1130.28 1214.89 L1130.87 1214.89 L1131.46 1214.89 L1132.04 1214.89 L1132.63 1214.89 L1133.21 1214.89 L1133.8 1214.89 L1134.39 1214.89 L1134.97 1214.89 L1135.56 1214.89 L1136.15 1214.89 L1136.73 1214.89 L1137.32 1214.89 L1137.91 1214.89 L1138.49 1214.89 L1139.08 1214.89 L1139.67 1214.89 L1140.25 1214.89 L1140.84 1214.89 L1141.42 1214.89 L1142.01 1214.89 L1142.6 1214.89 L1143.18 1214.89 L1143.77 1214.89 L1144.36 1214.89 L1144.94 1214.89 L1145.53 1214.89 L1146.12 1214.89 L1146.7 1214.89 L1147.29 1214.89 L1147.88 1214.89 L1148.46 1214.89 L1149.05 1214.89 L1149.63 1214.89 L1150.22 1214.89 L1150.81 1214.89 L1151.39 1214.89 L1151.98 1214.89 L1152.57 1214.89 L1153.15 1214.89 L1153.74 1214.89 L1154.33 1214.89 L1154.91 1214.89 L1155.5 1214.89 L1156.09 1214.89 L1156.67 1214.89 L1157.26 1214.89 L1157.84 1214.89 L1158.43 1214.89 L1159.02 1214.89 L1159.6 1214.89 L1160.19 1214.89 L1160.78 1214.89 L1161.36 1214.89 L1161.95 1214.89 L1162.54 1214.89 L1163.12 1214.89 L1163.71 1214.89 L1164.29 1214.89 L1164.88 1214.89 L1165.47 1214.89 L1166.05 1214.89 L1166.64 1214.89 L1167.23 1214.89 L1167.81 1214.89 L1168.4 1214.89 L1168.99 1214.89 L1169.57 1214.89 L1170.16 1214.89 L1170.75 1214.89 L1171.33 1214.89 L1171.92 1214.89 L1172.5 1214.89 L1173.09 1214.89 L1173.68 1214.89 L1174.26 1214.89 L1174.85 1214.89 L1175.44 1214.89 L1176.02 1214.89 L1176.61 1214.89 L1177.2 1214.89 L1177.78 1214.89 L1178.37 1214.89 L1178.96 1214.89 L1179.54 1214.89 L1180.13 1214.89 L1180.71 1214.89 L1181.3 1214.89 L1181.89 1214.89 L1182.47 1214.89 L1183.06 1214.89 L1183.65 1214.89 L1184.23 1214.89 L1184.82 1214.89 L1185.41 1214.89 L1185.99 1214.89 L1186.58 1214.89 L1187.16 1214.89 L1187.75 1214.89 L1188.34 1214.89 L1188.92 1214.89 L1189.51 1214.89 L1190.1 1214.89 L1190.68 1214.89 L1191.27 1214.89 L1191.86 1214.89 L1192.44 1214.89 L1193.03 1214.89 L1193.62 1214.89 L1194.2 1214.89 L1194.79 1214.89 L1195.37 1214.89 L1195.96 1214.89 L1196.55 1214.89 L1197.13 1214.89 L1197.72 1214.89 L1198.31 1214.89 L1198.89 1214.89 L1199.48 1214.89 L1200.07 1214.89 L1200.65 1214.89 L1201.24 1214.89 L1201.83 1214.89 L1202.41 1214.89 L1203 1214.89 L1203.58 1214.89 L1204.17 1214.89 L1204.76 1214.89 L1205.34 1214.89 L1205.93 1214.89 L1206.52 1214.89 L1207.1 1214.89 L1207.69 1214.89 L1208.28 1214.89 L1208.86 1214.89 L1209.45 1214.89 L1210.03 1214.89 L1210.62 1214.89 L1211.21 1214.89 L1211.79 1214.89 L1212.38 1214.89 L1212.97 1214.89 L1213.55 1214.89 L1214.14 1214.89 L1214.73 1214.89 L1215.31 1214.89 L1215.9 1214.89 L1216.49 1214.89 L1217.07 1214.89 L1217.66 1214.89 L1218.24 1214.89 L1218.83 1214.89 L1219.42 1214.89 L1220 1214.89 L1220.59 1214.89 L1221.18 1214.89 L1221.76 1214.89 L1222.35 1214.89 L1222.94 1214.89 L1223.52 1214.89 L1224.11 1214.89 L1224.7 1214.89 L1225.28 1214.89 L1225.87 1214.89 L1226.45 1214.89 L1227.04 1214.89 L1227.63 1214.89 L1228.21 1214.89 L1228.8 1214.89 L1229.39 1214.89 L1229.97 1214.89 L1230.56 1214.89 L1231.15 1214.89 L1231.73 1214.89 L1232.32 1214.89 L1232.91 1214.89 L1233.49 1214.89 L1234.08 1214.89 L1234.66 1214.89 L1235.25 1214.89 L1235.84 1214.89 L1236.42 1214.89 L1237.01 1214.89 L1237.6 1214.89 L1238.18 1214.89 L1238.77 1214.89 L1239.36 1214.89 L1239.94 1214.89 L1240.53 1214.89 L1241.11 1214.89 L1241.7 1214.89 L1242.29 1214.89 L1242.87 1214.89 L1243.46 1214.89 L1244.05 1214.89 L1244.63 1214.89 L1245.22 1214.89 L1245.81 1214.89 L1246.39 1214.89 L1246.98 1214.89 L1247.57 1214.89 L1248.15 1214.89 L1248.74 1214.89 L1249.32 1214.89 L1249.91 1214.89 L1250.5 1214.89 L1251.08 1214.89 L1251.67 1214.89 L1252.26 1214.89 L1252.84 1214.89 L1253.43 1214.89 L1254.02 1214.89 L1254.6 1214.89 L1255.19 1214.89 L1255.78 1214.89 L1256.36 1214.89 L1256.95 1214.89 L1257.53 1214.89 L1258.12 1214.89 L1258.71 1214.89 L1259.29 1214.89 L1259.88 1214.89 L1260.47 1214.89 L1261.05 1214.89 L1261.64 1214.89 L1262.23 1214.89 L1262.81 1214.89 L1263.4 1214.89 L1263.98 1214.89 L1264.57 1214.89 L1265.16 1214.89 L1265.74 1214.89 L1266.33 1214.89 L1266.92 1214.89 L1267.5 1214.89 L1268.09 1214.89 L1268.68 1214.89 L1269.26 1214.89 L1269.85 1214.89 L1270.44 1214.89 L1271.02 1214.89 L1271.61 1214.89 L1272.19 1214.89 L1272.78 1214.89 L1273.37 1214.89 L1273.95 1214.89 L1274.54 1214.89 L1275.13 1214.89 L1275.71 1214.89 L1276.3 1214.89 L1276.89 1214.89 L1277.47 1214.89 L1278.06 1214.89 L1278.65 1214.89 L1279.23 1214.89 L1279.82 1214.89 L1280.4 1214.89 L1280.99 1214.89 L1281.58 1214.89 L1282.16 1214.89 L1282.75 1214.89 L1283.34 1214.89 L1283.92 1214.89 L1284.51 1214.89 L1285.1 1214.89 L1285.68 1214.89 L1286.27 1214.89 L1286.86 1214.89 L1287.44 1214.89 L1288.03 1214.89 L1288.61 1214.89 L1289.2 1214.89 L1289.79 1214.89 L1290.37 1214.89 L1290.96 1214.89 L1291.55 1214.89 L1292.13 1214.89 L1292.72 1214.89 L1293.31 1214.89 L1293.89 1214.89 L1294.48 1214.89 L1295.06 1214.89 L1295.65 1214.89 L1296.24 1214.89 L1296.82 1214.89 L1297.41 1214.89 L1298 1214.89 L1298.58 1214.89 L1299.17 1214.89 L1299.76 1214.89 L1300.34 1214.89 L1300.93 1214.89 L1301.52 1214.89 L1302.1 1214.89 L1302.69 1214.89 L1303.27 1214.89 L1303.86 1214.89 L1304.45 1214.89 L1305.03 1214.89 L1305.62 1214.89 L1306.21 1214.89 L1306.79 1214.89 L1307.38 1214.89 L1307.97 1214.89 L1308.55 1214.89 L1309.14 1214.89 L1309.73 1214.89 L1310.31 1214.89 L1310.9 1214.89 L1311.48 1214.89 L1312.07 1214.89 L1312.66 1214.89 L1313.24 1214.89 L1313.83 1214.89 L1314.42 1214.89 L1315 1214.89 L1315.59 1214.89 L1316.18 1214.89 L1316.76 1214.89 L1317.35 1214.89 L1317.93 1214.89 L1318.52 1214.89 L1319.11 1214.89 L1319.69 1214.89 L1320.28 1214.89 L1320.87 1214.89 L1321.45 1214.89 L1322.04 1214.89 L1322.63 1214.89 L1323.21 1214.89 L1323.8 1214.89 L1324.39 1214.89 L1324.97 1214.89 L1325.56 1214.89 L1326.14 1214.89 L1326.73 1214.89 L1327.32 1214.89 L1327.9 1214.89 L1328.49 1214.89 L1329.08 1214.89 L1329.66 1214.89 L1330.25 1214.89 L1330.84 1214.89 L1331.42 1214.89 L1332.01 1214.89 L1332.6 1214.89 L1333.18 1214.89 L1333.77 1214.89 L1334.35 1214.89 L1334.94 1214.89 L1335.53 1214.89 L1336.11 1214.89 L1336.7 1214.89 L1337.29 1214.89 L1337.87 1214.89 L1338.46 1214.89 L1339.05 1214.89 L1339.63 1214.89 L1340.22 1214.89 L1340.8 1214.89 L1341.39 1214.89 L1341.98 1214.89 L1342.56 1214.89 L1343.15 1214.89 L1343.74 1214.89 L1344.32 1214.89 L1344.91 1214.89 L1345.5 1214.89 L1346.08 1214.89 L1346.67 1214.89 L1347.26 1214.89 L1347.84 1214.89 L1348.43 1214.89 L1349.01 1214.89 L1349.6 1214.89 L1350.19 1214.89 L1350.77 1214.89 L1351.36 1214.89 L1351.95 1214.89 L1352.53 1214.89 L1353.12 1214.89 L1353.71 1214.89 L1354.29 1214.89 L1354.88 1214.89 L1355.47 1214.89 L1356.05 1214.89 L1356.64 1214.89 L1357.22 1214.89 L1357.81 1214.89 L1358.4 1214.89 L1358.98 1214.89 L1359.57 1214.89 L1360.16 1214.89 L1360.74 1214.89 L1361.33 1214.89 L1361.92 1214.89 L1362.5 1214.89 L1363.09 1214.89 L1363.68 1214.89 L1364.26 1214.89 L1364.85 1214.89 L1365.43 1214.89 L1366.02 1214.89 L1366.61 1214.89 L1367.19 1214.89 L1367.78 1214.89 L1368.37 1214.89 L1368.95 1214.89 L1369.54 1214.89 L1370.13 1214.89 L1370.71 1214.89 L1371.3 1214.89 L1371.88 1214.89 L1372.47 1214.89 L1373.06 1214.89 L1373.64 1214.89 L1374.23 1214.89 L1374.82 1214.89 L1375.4 1214.89 L1375.99 1214.89 L1376.58 1214.89 L1377.16 1214.89 L1377.75 1214.89 L1378.34 1214.89 L1378.92 1214.89 L1379.51 1214.89 L1380.09 1214.89 L1380.68 1214.89 L1381.27 1214.89 L1381.85 1214.89 L1382.44 1214.89 L1383.03 1214.89 L1383.61 1214.89 L1384.2 1214.89 L1384.79 1214.89 L1385.37 1214.89 L1385.96 1214.89 L1386.55 1214.89 L1387.13 1214.89 L1387.72 1214.89 L1388.3 1214.89 L1388.89 1214.89 L1389.48 1214.89 L1390.06 1214.89 L1390.65 1214.89 L1391.24 1214.89 L1391.82 1214.89 L1392.41 1214.89 L1393 1214.89 L1393.58 1214.89 L1394.17 1214.89 L1394.75 1214.89 L1395.34 1214.89 L1395.93 1214.89 L1396.51 1214.89 L1397.1 1214.89 L1397.69 1214.89 L1398.27 1214.89 L1398.86 1214.89 L1399.45 1214.89 L1400.03 1214.89 L1400.62 1214.89 L1401.21 1214.89 L1401.79 1214.89 L1402.38 1214.89 L1402.96 1214.89 L1403.55 1214.89 L1404.14 1214.89 L1404.72 1214.89 L1405.31 1214.89 L1405.9 1214.89 L1406.48 1214.89 L1407.07 1214.89 L1407.66 1214.89 L1408.24 1214.89 L1408.83 1214.89 L1409.42 1214.89 L1410 1214.89 L1410.59 1214.89 L1411.17 1214.89 L1411.76 1214.89 L1412.35 1214.89 L1412.93 1214.89 L1413.52 1214.89 L1414.11 1214.89 L1414.69 1214.89 L1415.28 1214.89 L1415.87 1214.89 L1416.45 1214.89 L1417.04 1214.89 L1417.63 1214.89 L1418.21 1214.89 L1418.8 1214.89 L1419.38 1214.89 L1419.97 1214.89 L1420.56 1214.89 L1421.14 1214.89 L1421.73 1214.89 L1422.32 1214.89 L1422.9 1214.89 L1423.49 1214.89 L1424.08 1214.89 L1424.66 1214.89 L1425.25 1214.89 L1425.83 1214.89 L1426.42 1214.89 L1427.01 1214.89 L1427.59 1214.89 L1428.18 1214.89 L1428.77 1214.89 L1429.35 1214.89 L1429.94 1214.89 L1430.53 1214.89 L1431.11 1214.89 L1431.7 1214.89 L1432.29 1214.89 L1432.87 1214.89 L1433.46 1214.89 L1434.04 1214.89 L1434.63 1214.89 L1435.22 1214.89 L1435.8 1214.89 L1436.39 1214.89 L1436.98 1214.89 L1437.56 1214.89 L1438.15 1214.89 L1438.74 1214.89 L1439.32 1214.89 L1439.91 1214.89 L1440.5 1214.89 L1441.08 1214.89 L1441.67 1214.89 L1442.25 1214.89 L1442.84 1214.89 L1443.43 1214.89 L1444.01 1214.89 L1444.6 1214.89 L1445.19 1214.89 L1445.77 1214.89 L1446.36 1214.89 L1446.95 1214.89 L1447.53 1214.89 L1448.12 1214.89 L1448.7 1214.89 L1449.29 1214.89 L1449.88 1214.89 L1450.46 1214.89 L1451.05 1214.89 L1451.64 1214.89 L1452.22 1214.89 L1452.81 1214.89 L1453.4 1214.89 L1453.98 1214.89 L1454.57 1214.89 L1455.16 1214.89 L1455.74 1214.89 L1456.33 1214.89 L1456.91 1214.89 L1457.5 1214.89 L1458.09 1214.89 L1458.67 1214.89 L1459.26 1214.89 L1459.85 1214.89 L1460.43 1214.89 L1461.02 1214.89 L1461.61 1214.89 L1462.19 1214.89 L1462.78 1214.89 L1463.37 1214.89 L1463.95 1214.89 L1464.54 1214.89 L1465.12 1214.89 L1465.71 1214.89 L1466.3 1214.89 L1466.88 1214.89 L1467.47 1214.89 L1468.06 1214.89 L1468.64 1214.89 L1469.23 1214.89 L1469.82 1214.89 L1470.4 1214.89 L1470.99 1214.89 L1471.57 1214.89 L1472.16 1214.89 L1472.75 1214.89 L1473.33 1214.89 L1473.92 1214.89 L1474.51 1214.89 L1475.09 1214.89 L1475.68 1214.89 L1476.27 1214.89 L1476.85 1214.89 L1477.44 1214.89 L1478.03 1214.89 L1478.61 1214.89 L1479.2 1214.89 L1479.78 1214.89 L1480.37 1214.89 L1480.96 1214.89 L1481.54 1214.89 L1482.13 1214.89 L1482.72 1214.89 L1483.3 1214.89 L1483.89 1214.89 L1484.48 1214.89 L1485.06 1214.89 L1485.65 1214.89 L1486.24 1214.89 L1486.82 1214.89 L1487.41 1214.89 L1487.99 1214.89 L1488.58 1214.89 L1489.17 1214.89 L1489.75 1214.89 L1490.34 1214.89 L1490.93 1214.89 L1491.51 1214.89 L1492.1 1214.89 L1492.69 1214.89 L1493.27 1214.89 L1493.86 1214.89 L1494.45 1214.89 L1495.03 1214.89 L1495.62 1214.89 L1496.2 1214.89 L1496.79 1214.89 L1497.38 1214.89 L1497.96 1214.89 L1498.55 1214.89 L1499.14 1214.89 L1499.72 1214.89 L1500.31 1214.89 L1500.9 1214.89 L1501.48 1214.89 L1502.07 1214.89 L1502.65 1214.89 L1503.24 1214.89 L1503.83 1214.89 L1504.41 1214.89 L1505 1214.89 L1505.59 1214.89 L1506.17 1214.89 L1506.76 1214.89 L1507.35 1214.89 L1507.93 1214.89 L1508.52 1214.89 L1509.11 1214.89 L1509.69 1214.89 L1510.28 1214.89 L1510.86 1214.89 L1511.45 1214.89 L1512.04 1214.89 L1512.62 1214.89 L1513.21 1214.89 L1513.8 1214.89 L1514.38 1214.89 L1514.97 1214.89 L1515.56 1214.89 L1516.14 1214.89 L1516.73 1214.89 L1517.32 1214.89 L1517.9 1214.89 L1518.49 1214.89 L1519.07 1214.89 L1519.66 1214.89 L1520.25 1214.89 L1520.83 1214.89 L1521.42 1214.89 L1522.01 1214.89 L1522.59 1214.89 L1523.18 1214.89 L1523.77 1214.89 L1524.35 1214.89 L1524.94 1214.89 L1525.52 1214.89 L1526.11 1214.89 L1526.7 1214.89 L1527.28 1214.89 L1527.87 1214.89 L1528.46 1214.89 L1529.04 1214.89 L1529.63 1214.89 L1530.22 1214.89 L1530.8 1214.89 L1531.39 1214.89 L1531.98 1214.89 L1532.56 1214.89 L1533.15 1214.89 L1533.73 1214.89 L1534.32 1214.89 L1534.91 1214.89 L1535.49 1214.89 L1536.08 1214.89 L1536.67 1214.89 L1537.25 1214.89 L1537.84 1214.89 L1538.43 1214.89 L1539.01 1214.89 L1539.6 1214.89 L1540.19 1214.89 L1540.77 1214.89 L1541.36 1214.89 L1541.94 1214.89 L1542.53 1214.89 L1543.12 1214.89 L1543.7 1214.89 L1544.29 1214.89 L1544.88 1214.89 L1545.46 1214.89 L1546.05 1214.89 L1546.64 1214.89 L1547.22 1214.89 L1547.81 1214.89 L1548.4 1214.89 L1548.98 1214.89 L1549.57 1214.89 L1550.15 1214.89 L1550.74 1214.89 L1551.33 1214.89 L1551.91 1214.89 L1552.5 1214.89 L1553.09 1214.89 L1553.67 1214.89 L1554.26 1214.89 L1554.85 1214.89 L1555.43 1214.89 L1556.02 1214.89 L1556.6 1214.89 L1557.19 1214.89 L1557.78 1214.89 L1558.36 1214.89 L1558.95 1214.89 L1559.54 1214.89 L1560.12 1214.89 L1560.71 1214.89 L1561.3 1214.89 L1561.88 1214.89 L1562.47 1214.89 L1563.06 1214.89 L1563.64 1214.89 L1564.23 1214.89 L1564.81 1214.89 L1565.4 1214.89 L1565.99 1214.89 L1566.57 1214.89 L1567.16 1214.89 L1567.75 1214.89 L1568.33 1214.89 L1568.92 1214.89 L1569.51 1214.89 L1570.09 1214.89 L1570.68 1214.89 L1571.27 1214.89 L1571.85 1214.89 L1572.44 1214.89 L1573.02 1214.89 L1573.61 1214.89 L1574.2 1214.89 L1574.78 1214.89 L1575.37 1214.89 L1575.96 1214.89 L1576.54 1214.89 L1577.13 1214.89 L1577.72 1214.89 L1578.3 1214.89 L1578.89 1214.89 L1579.47 1214.89 L1580.06 1214.89 L1580.65 1214.89 L1581.23 1214.89 L1581.82 1214.89 L1582.41 1214.89 L1582.99 1214.89 L1583.58 1214.89 L1584.17 1214.89 L1584.75 1214.89 L1585.34 1214.89 L1585.93 1214.89 L1586.51 1214.89 L1587.1 1214.89 L1587.68 1214.89 L1588.27 1214.89 L1588.86 1214.89 L1589.44 1214.89 L1590.03 1214.89 L1590.62 1214.89 L1591.2 1214.89 L1591.79 1214.89 L1592.38 1214.89 L1592.96 1214.89 L1593.55 1214.89 L1594.14 1214.89 L1594.72 1214.89 L1595.31 1214.89 L1595.89 1214.89 L1596.48 1214.89 L1597.07 1214.89 L1597.65 1214.89 L1598.24 1214.89 L1598.83 1214.89 L1599.41 1214.89 L1600 1214.89 L1600.59 1214.89 L1601.17 1214.89 L1601.76 1214.89 L1602.34 1214.89 L1602.93 1214.89 L1603.52 1214.89 L1604.1 1214.89 L1604.69 1214.89 L1605.28 1214.89 L1605.86 1214.89 L1606.45 1214.89 L1607.04 1214.89 L1607.62 1214.89 L1608.21 1214.89 L1608.8 1214.89 L1609.38 1214.89 L1609.97 1214.89 L1610.55 1214.89 L1611.14 1214.89 L1611.73 1214.89 L1612.31 1214.89 L1612.9 1214.89 L1613.49 1214.89 L1614.07 1214.89 L1614.66 1214.89 L1615.25 1214.89 L1615.83 1214.89 L1616.42 1214.89 L1617.01 1214.89 L1617.59 1214.89 L1618.18 1214.89 L1618.76 1214.89 L1619.35 1214.89 L1619.94 1214.89 L1620.52 1214.89 L1621.11 1214.89 L1621.7 1214.89 L1622.28 1214.89 L1622.87 1214.89 L1623.46 1214.89 L1624.04 1214.89 L1624.63 1214.89 L1625.22 1214.89 L1625.8 1214.89 L1626.39 1214.89 L1626.97 1214.89 L1627.56 1214.89 L1628.15 1214.89 L1628.73 1214.89 L1629.32 1214.89 L1629.91 1214.89 L1630.49 1214.89 L1631.08 1214.89 L1631.67 1214.89 L1632.25 1214.89 L1632.84 1214.89 L1633.42 1214.89 L1634.01 1214.89 L1634.6 1214.89 L1635.18 1214.89 L1635.77 1214.89 L1636.36 1214.89 L1636.94 1214.89 L1637.53 1214.89 L1638.12 1214.89 L1638.7 1214.89 L1639.29 1214.89 L1639.88 1214.89 L1640.46 1214.89 L1641.05 1214.89 L1641.63 1214.89 L1642.22 1214.89 L1642.81 1214.89 L1643.39 1214.89 L1643.98 1214.89 L1644.57 1214.89 L1645.15 1214.89 L1645.74 1214.89 L1646.33 1214.89 L1646.91 1214.89 L1647.5 1214.89 L1648.09 1214.89 L1648.67 1214.89 L1649.26 1214.89 L1649.84 1214.89 L1650.43 1214.89 L1651.02 1214.89 L1651.6 1214.89 L1652.19 1214.89 L1652.78 1214.89 L1653.36 1214.89 L1653.95 1214.89 L1654.54 1214.89 L1655.12 1214.89 L1655.71 1214.89 L1656.29 1214.89 L1656.88 1214.89 L1657.47 1214.89 L1658.05 1214.89 L1658.64 1214.89 L1659.23 1214.89 L1659.81 1214.89 L1660.4 1214.89 L1660.99 1214.89 L1661.57 1214.89 L1662.16 1214.89 L1662.75 1214.89 L1663.33 1214.89 L1663.92 1214.89 L1664.5 1214.89 L1665.09 1214.89 L1665.68 1214.89 L1666.26 1214.89 L1666.85 1214.89 L1667.44 1214.89 L1668.02 1214.89 L1668.61 1214.89 L1669.2 1214.89 L1669.78 1214.89 L1670.37 1214.89 L1670.96 1214.89 L1671.54 1214.89 L1672.13 1214.89 L1672.71 1214.89 L1673.3 1214.89 L1673.89 1214.89 L1674.47 1214.89 L1675.06 1214.89 L1675.65 1214.89 L1676.23 1214.89 L1676.82 1214.89 L1677.41 1214.89 L1677.99 1214.89 L1678.58 1214.89 L1679.17 1214.89 L1679.75 1214.89 L1680.34 1214.89 L1680.92 1214.89 L1681.51 1214.89 L1682.1 1214.89 L1682.68 1214.89 L1683.27 1214.89 L1683.86 1214.89 L1684.44 1214.89 L1685.03 1214.89 L1685.62 1214.89 L1686.2 1214.89 L1686.79 1214.89 L1687.37 1214.89 L1687.96 1214.89 L1688.55 1214.89 L1689.13 1214.89 L1689.72 1214.89 L1690.31 1214.89 L1690.89 1214.89 L1691.48 1214.89 L1692.07 1214.89 L1692.65 1214.89 L1693.24 1214.89 L1693.83 1214.89 L1694.41 1214.89 L1695 1214.89 L1695.58 1214.89 L1696.17 1214.89 L1696.76 1214.89 L1697.34 1214.89 L1697.93 1214.89 L1698.52 1214.89 L1699.1 1214.89 L1699.69 1214.89 L1700.28 1214.89 L1700.86 1214.89 L1701.45 1214.89 L1702.04 1214.89 L1702.62 1214.89 L1703.21 1214.89 L1703.79 1214.89 L1704.38 1214.89 L1704.97 1214.89 L1705.55 1214.89 L1706.14 1214.89 L1706.73 1214.89 L1707.31 1214.89 L1707.9 1214.89 L1708.49 1214.89 L1709.07 1214.89 L1709.66 1214.89 L1710.24 1214.89 L1710.83 1214.89 L1711.42 1214.89 L1712 1214.89 L1712.59 1214.89 L1713.18 1214.89 L1713.76 1214.89 L1714.35 1214.89 L1714.94 1214.89 L1715.52 1214.89 L1716.11 1214.89 L1716.7 1214.89 L1717.28 1214.89 L1717.87 1214.89 L1718.45 1214.89 L1719.04 1214.89 L1719.63 1214.89 L1720.21 1214.89 L1720.8 1214.89 L1721.39 1214.89 L1721.97 1214.89 L1722.56 1214.89 L1723.15 1214.89 L1723.73 1214.89 L1724.32 1214.89 L1724.91 1214.89 L1725.49 1214.89 L1726.08 1214.89 L1726.66 1214.89 L1727.25 1214.89 L1727.84 1214.89 L1728.42 1214.89 L1729.01 1214.89 L1729.6 1214.89 L1730.18 1214.89 L1730.77 1214.89 L1731.36 1214.89 L1731.94 1214.89 L1732.53 1214.89 L1733.11 1214.89 L1733.7 1214.89 L1734.29 1214.89 L1734.87 1214.89 L1735.46 1214.89 L1736.05 1214.89 L1736.63 1214.89 L1737.22 1214.89 L1737.81 1214.89 L1738.39 1214.89 L1738.98 1214.89 L1739.57 1214.89 L1740.15 1214.89 L1740.74 1214.89 L1741.32 1214.89 L1741.91 1214.89 L1742.5 1214.89 L1743.08 1214.89 L1743.67 1214.89 L1744.26 1214.89 L1744.84 1214.89 L1745.43 1214.89 L1746.02 1214.89 L1746.6 1214.89 L1747.19 1214.89 L1747.78 1214.89 L1748.36 1214.89 L1748.95 1214.89 L1749.53 1214.89 L1750.12 1214.89 L1750.71 1214.89 L1751.29 1214.89 L1751.88 1214.89 L1752.47 1214.89 L1753.05 1214.89 L1753.64 1214.89 L1754.23 1214.89 L1754.81 1214.89 L1755.4 1214.89 L1755.99 1214.89 L1756.57 1214.89 L1757.16 1214.89 L1757.74 1214.89 L1758.33 1214.89 L1758.92 1214.89 L1759.5 1214.89 L1760.09 1214.89 L1760.68 1214.89 L1761.26 1214.89 L1761.85 1214.89 L1762.44 1214.89 L1763.02 1214.89 L1763.61 1214.89 L1764.19 1214.89 L1764.78 1214.89 L1765.37 1214.89 L1765.95 1214.89 L1766.54 1214.89 L1767.13 1214.89 L1767.71 1214.89 L1768.3 1214.89 L1768.89 1214.89 L1769.47 1214.89 L1770.06 1214.89 L1770.65 1214.89 L1771.23 1214.89 L1771.82 1214.89 L1772.4 1214.89 L1772.99 1214.89 L1773.58 1214.89 L1774.16 1214.89 L1774.75 1214.89 L1775.34 1214.89 L1775.92 1214.89 L1776.51 1214.89 L1777.1 1214.89 L1777.68 1214.89 L1778.27 1214.89 L1778.86 1214.89 L1779.44 1214.89 L1780.03 1214.89 L1780.61 1214.89 L1781.2 1214.89 L1781.79 1214.89 L1782.37 1214.89 L1782.96 1214.89 L1783.55 1214.89 L1784.13 1214.89 L1784.72 1214.89 L1785.31 1214.89 L1785.89 1214.89 L1786.48 1214.89 L1787.06 1214.89 L1787.65 1214.89 L1788.24 1214.89 L1788.82 1214.89 L1789.41 1214.89 L1790 1214.89 L1790.58 1214.89 L1791.17 1214.89 L1791.76 1214.89 L1792.34 1214.89 L1792.93 1214.89 L1793.52 1214.89 L1794.1 1214.89 L1794.69 1214.89 L1795.27 1214.89 L1795.86 1214.89 L1796.45 1214.89 L1797.03 1214.89 L1797.62 1214.89 L1798.21 1214.89 L1798.79 1214.89 L1799.38 1214.89 L1799.97 1214.89 L1800.55 1214.89 L1801.14 1214.89 L1801.73 1214.89 L1802.31 1214.89 L1802.9 1214.89 L1803.48 1214.89 L1804.07 1214.89 L1804.66 1214.89 L1805.24 1214.89 L1805.83 1214.89 L1806.42 1214.89 L1807 1214.89 L1807.59 1214.89 L1808.18 1214.89 L1808.76 1214.89 L1809.35 1214.89 L1809.94 1214.89 L1810.52 1214.89 L1811.11 1214.89 L1811.69 1214.89 L1812.28 1214.89 L1812.87 1214.89 L1813.45 1214.89 L1814.04 1214.89 L1814.63 1214.89 L1815.21 1214.89 L1815.8 1214.89 L1816.39 1214.89 L1816.97 1214.89 L1817.56 1214.89 L1818.14 1214.89 L1818.73 1214.89 L1819.32 1214.89 L1819.9 1214.89 L1820.49 1214.89 L1821.08 1214.89 L1821.66 1214.89 L1822.25 1214.89 L1822.84 1214.89 L1823.42 1214.89 L1824.01 1214.89 L1824.6 1214.89 L1825.18 1214.89 L1825.77 1214.89 L1826.35 1214.89 L1826.94 1214.89 L1827.53 1214.89 L1828.11 1214.89 L1828.7 1214.89 L1829.29 1214.89 L1829.87 1214.89 L1830.46 1214.89 L1831.05 1214.89 L1831.63 1214.89 L1832.22 1214.89 L1832.81 1214.89 L1833.39 1214.89 L1833.98 1214.89 L1834.56 1214.89 L1835.15 1214.89 L1835.74 1214.89 L1836.32 1214.89 L1836.91 1214.89 L1837.5 1214.89 L1838.08 1214.89 L1838.67 1214.89 L1839.26 1214.89 L1839.84 1214.89 L1840.43 1214.89 L1841.01 1214.89 L1841.6 1214.89 L1842.19 1214.89 L1842.77 1214.89 L1843.36 1214.89 L1843.95 1214.89 L1844.53 1214.89 L1845.12 1214.89 L1845.71 1214.89 L1846.29 1214.89 L1846.88 1214.89 L1847.47 1214.89 L1848.05 1214.89 L1848.64 1214.89 L1849.22 1214.89 L1849.81 1214.89 L1850.4 1214.89 L1850.98 1214.89 L1851.57 1214.89 L1852.16 1214.89 L1852.74 1214.89 L1853.33 1214.89 L1853.92 1214.89 L1854.5 1214.89 L1855.09 1214.89 L1855.68 1214.89 L1856.26 1214.89 L1856.85 1214.89 L1857.43 1214.89 L1858.02 1214.89 L1858.61 1214.89 L1859.19 1214.89 L1859.78 1214.89 L1860.37 1214.89 L1860.95 1214.89 L1861.54 1214.89 L1862.13 1214.89 L1862.71 1214.89 L1863.3 1214.89 L1863.88 1214.89 L1864.47 1214.89 L1865.06 1214.89 L1865.64 1214.89 L1866.23 1214.89 L1866.82 1214.89 L1867.4 1214.89 L1867.99 1214.89 L1868.58 1214.89 L1869.16 1214.89 L1869.75 1214.89 L1870.34 1214.89 L1870.92 1214.89 L1871.51 1214.89 L1872.09 1214.89 L1872.68 1214.89 L1873.27 1214.89 L1873.85 1214.89 L1874.44 1214.89 L1875.03 1214.89 L1875.61 1214.89 L1876.2 1214.89 L1876.79 1214.89 L1877.37 1214.89 L1877.96 1214.89 L1878.55 1214.89 L1879.13 1214.89 L1879.72 1214.89 L1880.3 1214.89 L1880.89 1214.89 L1881.48 1214.89 L1882.06 1214.89 L1882.65 1214.89 L1883.24 1214.89 L1883.82 1214.89 L1884.41 1214.89 L1885 1214.89 L1885.58 1214.89 L1886.17 1214.89 L1886.76 1214.89 L1887.34 1214.89 L1887.93 1214.89 L1888.51 1214.89 L1889.1 1214.89 L1889.69 1214.89 L1890.27 1214.89 L1890.86 1214.89 L1891.45 1214.89 L1892.03 1214.89 L1892.62 1214.89 L1893.21 1214.89 L1893.79 1214.89 L1894.38 1214.89 L1894.96 1214.89 L1895.55 1214.89 L1896.14 1214.89 L1896.72 1214.89 L1897.31 1214.89 L1897.9 1214.89 L1898.48 1214.89 L1899.07 1214.89 L1899.66 1214.89 L1900.24 1214.89 L1900.83 1214.89 L1901.42 1214.89 L1902 1214.89 L1902.59 1214.89 L1903.17 1214.89 L1903.76 1214.89 L1904.35 1214.89 L1904.93 1214.89 L1905.52 1214.89 L1906.11 1214.89 L1906.69 1214.89 L1907.28 1214.89 L1907.87 1214.89 L1908.45 1214.89 L1909.04 1214.89 L1909.63 1214.89 L1910.21 1214.89 L1910.8 1214.89 L1911.38 1214.89 L1911.97 1214.89 L1912.56 1214.89 L1913.14 1214.89 L1913.73 1214.89 L1914.32 1214.89 L1914.9 1214.89 L1915.49 1214.89 L1916.08 1214.89 L1916.66 1214.89 L1917.25 1214.89 L1917.83 1214.89 L1918.42 1214.89 L1919.01 1214.89 L1919.59 1214.89 L1920.18 1214.89 L1920.77 1214.89 L1921.35 1214.89 L1921.94 1214.89 L1922.53 1214.89 L1923.11 1214.89 L1923.7 1214.89 L1924.29 1214.89 L1924.87 1214.89 L1925.46 1214.89 L1926.04 1214.89 L1926.63 1214.89 L1927.22 1214.89 L1927.8 1214.89 L1928.39 1214.89 L1928.98 1214.89 L1929.56 1214.89 L1930.15 1214.89 L1930.74 1214.89 L1931.32 1214.89 L1931.91 1214.89 L1932.5 1214.89 L1933.08 1214.89 L1933.67 1214.89 L1934.25 1214.89 L1934.84 1214.89 L1935.43 1214.89 L1936.01 1214.89 L1936.6 1214.89 L1937.19 1214.89 L1937.77 1214.89 L1938.36 1214.89 L1938.95 1214.89 L1939.53 1214.89 L1940.12 1214.89 L1940.71 1214.89 L1941.29 1214.89 L1941.88 1214.89 L1942.46 1214.89 L1943.05 1214.89 L1943.64 1214.89 L1944.22 1214.89 L1944.81 1214.89 L1945.4 1214.89 L1945.98 1214.89 L1946.57 1214.89 L1947.16 1214.89 L1947.74 1214.89 L1948.33 1214.89 L1948.91 1214.89 L1949.5 1214.89 L1950.09 1214.89 L1950.67 1214.89 L1951.26 1214.89 L1951.85 1214.89 L1952.43 1214.89 L1953.02 1214.89 L1953.61 1214.89 L1954.19 1214.89 L1954.78 1214.89 L1955.37 1214.89 L1955.95 1214.89 L1956.54 1214.89 L1957.12 1214.89 L1957.71 1214.89 L1958.3 1214.89 L1958.88 1214.89 L1959.47 1214.89 L1960.06 1214.89 L1960.64 1214.89 L1961.23 1214.89 L1961.82 1214.89 L1962.4 1214.89 L1962.99 1214.89 L1963.58 1214.89 L1964.16 1214.89 L1964.75 1214.89 L1965.33 1214.89 L1965.92 1214.89 L1966.51 1214.89 L1967.09 1214.89 L1967.68 1214.89 L1968.27 1214.89 L1968.85 1214.89 L1969.44 1214.89 L1970.03 1214.89 L1970.61 1214.89 L1971.2 1214.89 L1971.78 1214.89 L1972.37 1214.89 L1972.96 1214.89 L1973.54 1214.89 L1974.13 1214.89 L1974.72 1214.89 L1975.3 1214.89 L1975.89 1214.89 L1976.48 1214.89 L1977.06 1214.89 L1977.65 1214.89 L1978.24 1214.89 L1978.82 1214.89 L1979.41 1214.89 L1979.99 1214.89 L1980.58 1214.89 L1981.17 1214.89 L1981.75 1214.89 L1982.34 1214.89 L1982.93 1214.89 L1983.51 1214.89 L1984.1 1214.89 L1984.69 1214.89 L1985.27 1214.89 L1985.86 1214.89 L1986.45 1214.89 L1987.03 1214.89 L1987.62 1214.89 L1988.2 1214.89 L1988.79 1214.89 L1989.38 1214.89 L1989.96 1214.89 L1990.55 1214.89 L1991.14 1214.89 L1991.72 1214.89 L1992.31 1214.89 L1992.9 1214.89 L1993.48 1214.89 L1994.07 1214.89 L1994.65 1214.89 L1995.24 1214.89 L1995.83 1214.89 L1996.41 1214.89 L1997 1214.89 L1997.59 1214.89 L1998.17 1214.89 L1998.76 1214.89 L1999.35 1214.89 L1999.93 1214.89 L2000.52 1214.89 L2001.11 1214.89 L2001.69 1214.89 L2002.28 1214.89 L2002.86 1214.89 L2003.45 1214.89 L2004.04 1214.89 L2004.62 1214.89 L2005.21 1214.89 L2005.8 1214.89 L2006.38 1214.89 L2006.97 1214.89 L2007.56 1214.89 L2008.14 1214.89 L2008.73 1214.89 L2009.32 1214.89 L2009.9 1214.89 L2010.49 1214.89 L2011.07 1214.89 L2011.66 1214.89 L2012.25 1214.89 L2012.83 1214.89 L2013.42 1214.89 L2014.01 1214.89 L2014.59 1214.89 L2015.18 1214.89 L2015.77 1214.89 L2016.35 1214.89 L2016.94 1214.89 L2017.53 1214.89 L2018.11 1214.89 L2018.7 1214.89 L2019.28 1214.89 L2019.87 1214.89 L2020.46 1214.89 L2021.04 1214.89 L2021.63 1214.89 L2022.22 1214.89 L2022.8 1214.89 L2023.39 1214.89 L2023.98 1214.89 L2024.56 1214.89 L2025.15 1214.89 L2025.73 1214.89 L2026.32 1214.89 L2026.91 1214.89 L2027.49 1214.89 L2028.08 1214.89 L2028.67 1214.89 L2029.25 1214.89 L2029.84 1214.89 L2030.43 1214.89 L2031.01 1214.89 L2031.6 1214.89 L2032.19 1214.89 L2032.77 1214.89 L2033.36 1214.89 L2033.94 1214.89 L2034.53 1214.89 L2035.12 1214.89 L2035.7 1214.89 L2036.29 1214.89 L2036.88 1214.89 L2037.46 1214.89 L2038.05 1214.89 L2038.64 1214.89 L2039.22 1214.89 L2039.81 1214.89 L2040.4 1214.89 L2040.98 1214.89 L2041.57 1214.89 L2042.15 1214.89 L2042.74 1214.89 L2043.33 1214.89 L2043.91 1214.89 L2044.5 1214.89 L2045.09 1214.89 L2045.67 1214.89 L2046.26 1214.89 L2046.85 1214.89 L2047.43 1214.89 L2048.02 1214.89 L2048.6 1214.89 L2049.19 1214.89 L2049.78 1214.89 L2050.36 1214.89 L2050.95 1214.89 L2051.54 1214.89 L2052.12 1214.89 L2052.71 1214.89 L2053.3 1214.89 L2053.88 1214.89 L2054.47 1214.89 L2055.06 1214.89 L2055.64 1214.89 L2056.23 1214.89 L2056.81 1214.89 L2057.4 1214.89 L2057.99 1214.89 L2058.57 1214.89 L2059.16 1214.89 L2059.75 1214.89 L2060.33 1214.89 L2060.92 1214.89 L2061.51 1214.89 L2062.09 1214.89 L2062.68 1214.89 L2063.27 1214.89 L2063.85 1214.89 L2064.44 1214.89 L2065.02 1214.89 L2065.61 1214.89 L2066.2 1214.89 L2066.78 1214.89 L2067.37 1214.89 L2067.96 1214.89 L2068.54 1214.89 L2069.13 1214.89 L2069.72 1214.89 L2070.3 1214.89 L2070.89 1214.89 L2071.48 1214.89 L2072.06 1214.89 L2072.65 1214.89 L2073.23 1214.89 L2073.82 1214.89 L2074.41 1214.89 L2074.99 1214.89 L2075.58 1214.89 L2076.17 1214.89 L2076.75 1214.89 L2077.34 1214.89 L2077.93 1214.89 L2078.51 1214.89 L2079.1 1214.89 L2079.68 1214.89 L2080.27 1214.89 L2080.86 1214.89 L2081.44 1214.89 L2082.03 1214.89 L2082.62 1214.89 L2083.2 1214.89 L2083.79 1214.89 L2084.38 1214.89 L2084.96 1214.89 L2085.55 1214.89 L2086.14 1214.89 L2086.72 1214.89 L2087.31 1214.89 L2087.89 1214.89 L2088.48 1214.89 L2089.07 1214.89 L2089.65 1214.89 L2090.24 1214.89 L2090.83 1214.89 L2091.41 1214.89 L2092 1214.89 L2092.59 1214.89 L2093.17 1214.89 L2093.76 1214.89 L2094.35 1214.89 L2094.93 1214.89 L2095.52 1214.89 L2096.1 1214.89 L2096.69 1214.89 L2097.28 1214.89 L2097.86 1214.89 L2098.45 1214.89 L2099.04 1214.89 L2099.62 1214.89 L2100.21 1214.89 L2100.8 1214.89 L2101.38 1214.89 L2101.97 1214.89 L2102.55 1214.89 L2103.14 1214.89 L2103.73 1214.89 L2104.31 1214.89 L2104.9 1214.89 L2105.49 1214.89 L2106.07 1214.89 L2106.66 1214.89 L2107.25 1214.89 L2107.83 1214.89 L2108.42 1214.89 L2109.01 1214.89 L2109.59 1214.89 L2110.18 1214.89 L2110.76 1214.89 L2111.35 1214.89 L2111.94 1214.89 L2112.52 1214.89 L2113.11 1214.89 L2113.7 1214.89 L2114.28 1214.89 L2114.87 1214.89 L2115.46 1214.89 L2116.04 1214.89 L2116.63 1214.89 L2117.22 1214.89 L2117.8 1214.89 L2118.39 1214.89 L2118.97 1214.89 L2119.56 1214.89 L2120.15 1214.89 L2120.73 1214.89 L2121.32 1214.89 L2121.91 1214.89 L2122.49 1214.89 L2123.08 1214.89 L2123.67 1214.89 L2124.25 1214.89 L2124.84 1214.89 L2125.42 1214.89 L2126.01 1214.89 L2126.6 1214.89 L2127.18 1214.89 L2127.77 1214.89 L2128.36 1214.89 L2128.94 1214.89 L2129.53 1214.89 L2130.12 1214.89 L2130.7 1214.89 L2131.29 1214.89 L2131.88 1214.89 L2132.46 1214.89 L2133.05 1214.89 L2133.63 1214.89 L2134.22 1214.89 L2134.81 1214.89 L2135.39 1214.89 L2135.98 1214.89 L2136.57 1214.89 L2137.15 1214.89 L2137.74 1214.89 L2138.33 1214.89 L2138.91 1214.89 L2139.5 1214.89 L2140.09 1214.89 L2140.67 1214.89 L2141.26 1214.89 L2141.84 1214.89 L2142.43 1214.89 L2143.02 1214.89 L2143.6 1214.89 L2144.19 1214.89 L2144.78 1214.89 L2145.36 1214.89 L2145.95 1214.89 L2146.54 1214.89 L2147.12 1214.89 L2147.71 1214.89 L2148.3 1214.89 L2148.88 1214.89 L2149.47 1214.89 L2150.05 1214.89 L2150.64 1214.89 L2151.23 1214.89 L2151.81 1214.89 L2152.4 1214.89 L2152.99 1214.89 L2153.57 1214.89 L2154.16 1214.89 L2154.75 1214.89 L2155.33 1214.89 L2155.92 1214.89 L2156.5 1214.89 L2157.09 1214.89 L2157.68 1214.89 L2158.26 1214.89 L2158.26 1213.95 L2157.68 1213.95 L2157.09 1213.95 L2156.5 1213.95 L2155.92 1213.95 L2155.33 1213.95 L2154.75 1213.95 L2154.16 1213.95 L2153.57 1213.95 L2152.99 1213.95 L2152.4 1213.95 L2151.81 1213.95 L2151.23 1213.95 L2150.64 1213.95 L2150.05 1213.95 L2149.47 1213.95 L2148.88 1213.95 L2148.3 1213.95 L2147.71 1213.95 L2147.12 1213.95 L2146.54 1213.95 L2145.95 1213.95 L2145.36 1213.95 L2144.78 1213.95 L2144.19 1213.95 L2143.6 1213.95 L2143.02 1213.95 L2142.43 1213.95 L2141.84 1213.95 L2141.26 1213.95 L2140.67 1213.95 L2140.09 1213.95 L2139.5 1213.95 L2138.91 1213.95 L2138.33 1213.95 L2137.74 1213.95 L2137.15 1213.95 L2136.57 1213.95 L2135.98 1213.95 L2135.39 1213.95 L2134.81 1213.95 L2134.22 1213.95 L2133.63 1213.95 L2133.05 1213.95 L2132.46 1213.95 L2131.88 1213.95 L2131.29 1213.95 L2130.7 1213.95 L2130.12 1213.95 L2129.53 1213.95 L2128.94 1213.95 L2128.36 1213.95 L2127.77 1213.95 L2127.18 1213.95 L2126.6 1213.95 L2126.01 1213.95 L2125.42 1213.95 L2124.84 1213.95 L2124.25 1213.95 L2123.67 1213.95 L2123.08 1213.95 L2122.49 1213.95 L2121.91 1213.95 L2121.32 1213.95 L2120.73 1213.95 L2120.15 1213.95 L2119.56 1213.95 L2118.97 1213.95 L2118.39 1213.95 L2117.8 1213.95 L2117.22 1213.95 L2116.63 1213.95 L2116.04 1213.95 L2115.46 1213.95 L2114.87 1213.95 L2114.28 1213.95 L2113.7 1213.95 L2113.11 1213.95 L2112.52 1213.95 L2111.94 1213.95 L2111.35 1213.95 L2110.76 1213.95 L2110.18 1213.95 L2109.59 1213.95 L2109.01 1213.95 L2108.42 1213.95 L2107.83 1213.95 L2107.25 1213.95 L2106.66 1213.95 L2106.07 1213.95 L2105.49 1213.95 L2104.9 1213.95 L2104.31 1213.95 L2103.73 1213.95 L2103.14 1213.95 L2102.55 1213.95 L2101.97 1213.95 L2101.38 1213.95 L2100.8 1213.95 L2100.21 1213.95 L2099.62 1213.95 L2099.04 1213.95 L2098.45 1213.95 L2097.86 1213.95 L2097.28 1213.95 L2096.69 1213.95 L2096.1 1213.95 L2095.52 1213.95 L2094.93 1213.95 L2094.35 1213.95 L2093.76 1213.95 L2093.17 1213.95 L2092.59 1213.95 L2092 1213.95 L2091.41 1213.95 L2090.83 1213.95 L2090.24 1213.95 L2089.65 1213.95 L2089.07 1213.95 L2088.48 1213.95 L2087.89 1213.95 L2087.31 1213.95 L2086.72 1213.95 L2086.14 1213.95 L2085.55 1213.95 L2084.96 1213.95 L2084.38 1213.95 L2083.79 1213.95 L2083.2 1213.95 L2082.62 1213.95 L2082.03 1213.95 L2081.44 1213.95 L2080.86 1213.95 L2080.27 1213.95 L2079.68 1213.95 L2079.1 1213.95 L2078.51 1213.95 L2077.93 1213.95 L2077.34 1213.95 L2076.75 1213.95 L2076.17 1213.95 L2075.58 1213.95 L2074.99 1213.95 L2074.41 1213.95 L2073.82 1213.95 L2073.23 1213.95 L2072.65 1213.95 L2072.06 1213.95 L2071.48 1213.95 L2070.89 1213.95 L2070.3 1213.95 L2069.72 1213.95 L2069.13 1213.95 L2068.54 1213.95 L2067.96 1213.95 L2067.37 1213.95 L2066.78 1213.95 L2066.2 1213.95 L2065.61 1213.95 L2065.02 1213.95 L2064.44 1213.95 L2063.85 1213.95 L2063.27 1213.95 L2062.68 1213.95 L2062.09 1213.95 L2061.51 1213.95 L2060.92 1213.95 L2060.33 1213.95 L2059.75 1213.95 L2059.16 1213.95 L2058.57 1213.95 L2057.99 1213.95 L2057.4 1213.95 L2056.81 1213.95 L2056.23 1213.95 L2055.64 1213.95 L2055.06 1213.95 L2054.47 1213.95 L2053.88 1213.95 L2053.3 1213.95 L2052.71 1213.95 L2052.12 1213.95 L2051.54 1213.95 L2050.95 1213.95 L2050.36 1213.95 L2049.78 1213.95 L2049.19 1213.95 L2048.6 1213.95 L2048.02 1213.95 L2047.43 1213.95 L2046.85 1213.95 L2046.26 1213.95 L2045.67 1213.95 L2045.09 1213.95 L2044.5 1213.95 L2043.91 1213.95 L2043.33 1213.95 L2042.74 1213.95 L2042.15 1213.95 L2041.57 1213.95 L2040.98 1213.95 L2040.4 1213.95 L2039.81 1213.95 L2039.22 1213.95 L2038.64 1213.95 L2038.05 1213.95 L2037.46 1213.95 L2036.88 1213.95 L2036.29 1213.95 L2035.7 1213.95 L2035.12 1213.95 L2034.53 1213.95 L2033.94 1213.95 L2033.36 1213.95 L2032.77 1213.95 L2032.19 1213.95 L2031.6 1213.95 L2031.01 1213.95 L2030.43 1213.95 L2029.84 1213.95 L2029.25 1213.95 L2028.67 1213.95 L2028.08 1213.95 L2027.49 1213.95 L2026.91 1213.95 L2026.32 1213.95 L2025.73 1213.95 L2025.15 1213.95 L2024.56 1213.95 L2023.98 1213.95 L2023.39 1213.95 L2022.8 1213.95 L2022.22 1213.95 L2021.63 1213.95 L2021.04 1213.95 L2020.46 1213.95 L2019.87 1213.95 L2019.28 1213.95 L2018.7 1213.95 L2018.11 1213.95 L2017.53 1213.95 L2016.94 1213.95 L2016.35 1213.95 L2015.77 1213.95 L2015.18 1213.95 L2014.59 1213.95 L2014.01 1213.95 L2013.42 1213.95 L2012.83 1213.95 L2012.25 1213.95 L2011.66 1213.95 L2011.07 1213.95 L2010.49 1213.95 L2009.9 1213.95 L2009.32 1213.95 L2008.73 1213.95 L2008.14 1213.95 L2007.56 1213.95 L2006.97 1213.95 L2006.38 1213.95 L2005.8 1213.95 L2005.21 1213.95 L2004.62 1213.95 L2004.04 1213.95 L2003.45 1213.95 L2002.86 1213.95 L2002.28 1213.95 L2001.69 1213.95 L2001.11 1213.95 L2000.52 1213.95 L1999.93 1213.95 L1999.35 1213.95 L1998.76 1213.95 L1998.17 1213.95 L1997.59 1213.95 L1997 1213.95 L1996.41 1213.95 L1995.83 1213.95 L1995.24 1213.95 L1994.65 1213.95 L1994.07 1213.95 L1993.48 1213.95 L1992.9 1213.95 L1992.31 1213.95 L1991.72 1213.95 L1991.14 1213.95 L1990.55 1213.95 L1989.96 1213.95 L1989.38 1213.95 L1988.79 1213.95 L1988.2 1213.95 L1987.62 1213.95 L1987.03 1213.95 L1986.45 1213.95 L1985.86 1213.95 L1985.27 1213.95 L1984.69 1213.95 L1984.1 1213.95 L1983.51 1213.95 L1982.93 1213.95 L1982.34 1213.95 L1981.75 1213.95 L1981.17 1213.95 L1980.58 1213.95 L1979.99 1213.95 L1979.41 1213.95 L1978.82 1213.95 L1978.24 1213.95 L1977.65 1213.95 L1977.06 1213.95 L1976.48 1213.95 L1975.89 1213.95 L1975.3 1213.95 L1974.72 1213.95 L1974.13 1213.95 L1973.54 1213.95 L1972.96 1213.95 L1972.37 1213.95 L1971.78 1213.95 L1971.2 1213.95 L1970.61 1213.95 L1970.03 1213.95 L1969.44 1213.95 L1968.85 1213.95 L1968.27 1213.95 L1967.68 1213.95 L1967.09 1213.95 L1966.51 1213.95 L1965.92 1213.95 L1965.33 1213.95 L1964.75 1213.95 L1964.16 1213.95 L1963.58 1213.95 L1962.99 1213.95 L1962.4 1213.95 L1961.82 1213.95 L1961.23 1213.95 L1960.64 1213.95 L1960.06 1213.95 L1959.47 1213.95 L1958.88 1213.95 L1958.3 1213.95 L1957.71 1213.95 L1957.12 1213.95 L1956.54 1213.95 L1955.95 1213.95 L1955.37 1213.95 L1954.78 1213.95 L1954.19 1213.95 L1953.61 1213.95 L1953.02 1213.95 L1952.43 1213.95 L1951.85 1213.95 L1951.26 1213.95 L1950.67 1213.95 L1950.09 1213.95 L1949.5 1213.95 L1948.91 1213.95 L1948.33 1213.95 L1947.74 1213.95 L1947.16 1213.95 L1946.57 1213.95 L1945.98 1213.95 L1945.4 1213.95 L1944.81 1213.95 L1944.22 1213.95 L1943.64 1213.95 L1943.05 1213.95 L1942.46 1213.95 L1941.88 1213.95 L1941.29 1213.95 L1940.71 1213.95 L1940.12 1213.95 L1939.53 1213.95 L1938.95 1213.95 L1938.36 1213.95 L1937.77 1213.95 L1937.19 1213.95 L1936.6 1213.95 L1936.01 1213.95 L1935.43 1213.95 L1934.84 1213.95 L1934.25 1213.95 L1933.67 1213.95 L1933.08 1213.95 L1932.5 1213.95 L1931.91 1213.95 L1931.32 1213.95 L1930.74 1213.95 L1930.15 1213.95 L1929.56 1213.95 L1928.98 1213.95 L1928.39 1213.95 L1927.8 1213.95 L1927.22 1213.95 L1926.63 1213.95 L1926.04 1213.95 L1925.46 1213.95 L1924.87 1213.95 L1924.29 1213.95 L1923.7 1213.95 L1923.11 1213.95 L1922.53 1213.95 L1921.94 1213.95 L1921.35 1213.95 L1920.77 1213.95 L1920.18 1213.95 L1919.59 1213.95 L1919.01 1213.95 L1918.42 1213.95 L1917.83 1213.95 L1917.25 1213.95 L1916.66 1213.95 L1916.08 1213.95 L1915.49 1213.95 L1914.9 1213.95 L1914.32 1213.95 L1913.73 1213.95 L1913.14 1213.95 L1912.56 1213.95 L1911.97 1213.95 L1911.38 1213.95 L1910.8 1213.95 L1910.21 1213.95 L1909.63 1213.95 L1909.04 1213.95 L1908.45 1213.95 L1907.87 1213.95 L1907.28 1213.95 L1906.69 1213.95 L1906.11 1213.95 L1905.52 1213.95 L1904.93 1213.95 L1904.35 1213.95 L1903.76 1213.95 L1903.17 1213.95 L1902.59 1213.95 L1902 1213.95 L1901.42 1213.95 L1900.83 1213.95 L1900.24 1213.95 L1899.66 1213.95 L1899.07 1213.95 L1898.48 1213.95 L1897.9 1213.95 L1897.31 1213.95 L1896.72 1213.95 L1896.14 1213.95 L1895.55 1213.95 L1894.96 1213.95 L1894.38 1213.95 L1893.79 1213.95 L1893.21 1213.95 L1892.62 1213.95 L1892.03 1213.95 L1891.45 1213.95 L1890.86 1213.95 L1890.27 1213.95 L1889.69 1213.95 L1889.1 1213.95 L1888.51 1213.95 L1887.93 1213.95 L1887.34 1213.95 L1886.76 1213.95 L1886.17 1213.95 L1885.58 1213.95 L1885 1213.95 L1884.41 1213.95 L1883.82 1213.95 L1883.24 1213.95 L1882.65 1213.95 L1882.06 1213.95 L1881.48 1213.95 L1880.89 1213.95 L1880.3 1213.95 L1879.72 1213.95 L1879.13 1213.95 L1878.55 1213.95 L1877.96 1213.95 L1877.37 1213.95 L1876.79 1213.95 L1876.2 1213.95 L1875.61 1213.95 L1875.03 1213.95 L1874.44 1213.95 L1873.85 1213.95 L1873.27 1213.95 L1872.68 1213.95 L1872.09 1213.95 L1871.51 1213.95 L1870.92 1213.95 L1870.34 1213.95 L1869.75 1213.95 L1869.16 1213.95 L1868.58 1213.95 L1867.99 1213.95 L1867.4 1213.95 L1866.82 1213.95 L1866.23 1213.95 L1865.64 1213.95 L1865.06 1213.95 L1864.47 1213.95 L1863.88 1213.95 L1863.3 1213.95 L1862.71 1213.95 L1862.13 1213.95 L1861.54 1213.95 L1860.95 1213.95 L1860.37 1213.95 L1859.78 1213.95 L1859.19 1213.95 L1858.61 1213.95 L1858.02 1213.95 L1857.43 1213.95 L1856.85 1213.95 L1856.26 1213.95 L1855.68 1213.95 L1855.09 1213.95 L1854.5 1213.95 L1853.92 1213.95 L1853.33 1213.95 L1852.74 1213.95 L1852.16 1213.95 L1851.57 1213.95 L1850.98 1213.95 L1850.4 1213.95 L1849.81 1213.95 L1849.22 1213.95 L1848.64 1213.95 L1848.05 1213.95 L1847.47 1213.95 L1846.88 1213.95 L1846.29 1213.95 L1845.71 1213.95 L1845.12 1213.95 L1844.53 1213.95 L1843.95 1213.95 L1843.36 1213.95 L1842.77 1213.95 L1842.19 1213.95 L1841.6 1213.95 L1841.01 1213.95 L1840.43 1213.95 L1839.84 1213.95 L1839.26 1213.95 L1838.67 1213.95 L1838.08 1213.95 L1837.5 1213.95 L1836.91 1213.95 L1836.32 1213.95 L1835.74 1213.95 L1835.15 1213.95 L1834.56 1213.95 L1833.98 1213.95 L1833.39 1213.95 L1832.81 1213.95 L1832.22 1213.95 L1831.63 1213.95 L1831.05 1213.95 L1830.46 1213.95 L1829.87 1213.95 L1829.29 1213.95 L1828.7 1213.95 L1828.11 1213.95 L1827.53 1213.95 L1826.94 1213.95 L1826.35 1213.95 L1825.77 1213.95 L1825.18 1213.95 L1824.6 1213.95 L1824.01 1213.95 L1823.42 1213.95 L1822.84 1213.95 L1822.25 1213.95 L1821.66 1213.95 L1821.08 1213.95 L1820.49 1213.95 L1819.9 1213.95 L1819.32 1213.95 L1818.73 1213.95 L1818.14 1213.95 L1817.56 1213.95 L1816.97 1213.95 L1816.39 1213.95 L1815.8 1213.95 L1815.21 1213.95 L1814.63 1213.95 L1814.04 1213.95 L1813.45 1213.95 L1812.87 1213.95 L1812.28 1213.95 L1811.69 1213.95 L1811.11 1213.95 L1810.52 1213.95 L1809.94 1213.95 L1809.35 1213.95 L1808.76 1213.95 L1808.18 1213.95 L1807.59 1213.95 L1807 1213.95 L1806.42 1213.95 L1805.83 1213.95 L1805.24 1213.95 L1804.66 1213.95 L1804.07 1213.95 L1803.48 1213.95 L1802.9 1213.95 L1802.31 1213.95 L1801.73 1213.95 L1801.14 1213.95 L1800.55 1213.95 L1799.97 1213.95 L1799.38 1213.95 L1798.79 1213.95 L1798.21 1213.95 L1797.62 1213.95 L1797.03 1213.95 L1796.45 1213.95 L1795.86 1213.95 L1795.27 1213.95 L1794.69 1213.95 L1794.1 1213.95 L1793.52 1213.95 L1792.93 1213.95 L1792.34 1213.95 L1791.76 1213.95 L1791.17 1213.95 L1790.58 1213.95 L1790 1213.95 L1789.41 1213.95 L1788.82 1213.95 L1788.24 1213.95 L1787.65 1213.95 L1787.06 1213.95 L1786.48 1213.95 L1785.89 1213.95 L1785.31 1213.95 L1784.72 1213.95 L1784.13 1213.95 L1783.55 1213.95 L1782.96 1213.95 L1782.37 1213.95 L1781.79 1213.95 L1781.2 1213.95 L1780.61 1213.95 L1780.03 1213.95 L1779.44 1213.95 L1778.86 1213.95 L1778.27 1213.95 L1777.68 1213.95 L1777.1 1213.95 L1776.51 1213.95 L1775.92 1213.95 L1775.34 1213.95 L1774.75 1213.95 L1774.16 1213.95 L1773.58 1213.95 L1772.99 1213.95 L1772.4 1213.95 L1771.82 1213.95 L1771.23 1213.95 L1770.65 1213.95 L1770.06 1213.95 L1769.47 1213.95 L1768.89 1213.95 L1768.3 1213.95 L1767.71 1213.95 L1767.13 1213.95 L1766.54 1213.95 L1765.95 1213.95 L1765.37 1213.95 L1764.78 1213.95 L1764.19 1213.95 L1763.61 1213.95 L1763.02 1213.95 L1762.44 1213.95 L1761.85 1213.95 L1761.26 1213.95 L1760.68 1213.95 L1760.09 1213.95 L1759.5 1213.95 L1758.92 1213.95 L1758.33 1213.95 L1757.74 1213.95 L1757.16 1213.95 L1756.57 1213.95 L1755.99 1213.95 L1755.4 1213.95 L1754.81 1213.95 L1754.23 1213.95 L1753.64 1213.95 L1753.05 1213.95 L1752.47 1213.95 L1751.88 1213.95 L1751.29 1213.95 L1750.71 1213.95 L1750.12 1213.95 L1749.53 1213.95 L1748.95 1213.95 L1748.36 1213.95 L1747.78 1213.95 L1747.19 1213.95 L1746.6 1213.95 L1746.02 1213.95 L1745.43 1213.95 L1744.84 1213.95 L1744.26 1213.95 L1743.67 1213.95 L1743.08 1213.95 L1742.5 1213.95 L1741.91 1213.95 L1741.32 1213.95 L1740.74 1213.95 L1740.15 1213.95 L1739.57 1213.95 L1738.98 1213.95 L1738.39 1213.95 L1737.81 1213.95 L1737.22 1213.95 L1736.63 1213.95 L1736.05 1213.95 L1735.46 1213.95 L1734.87 1213.95 L1734.29 1213.95 L1733.7 1213.95 L1733.11 1213.95 L1732.53 1213.95 L1731.94 1213.95 L1731.36 1213.95 L1730.77 1213.95 L1730.18 1213.95 L1729.6 1213.95 L1729.01 1213.95 L1728.42 1213.95 L1727.84 1213.95 L1727.25 1213.95 L1726.66 1213.95 L1726.08 1213.95 L1725.49 1213.95 L1724.91 1213.95 L1724.32 1213.95 L1723.73 1213.95 L1723.15 1213.95 L1722.56 1213.95 L1721.97 1213.95 L1721.39 1213.95 L1720.8 1213.95 L1720.21 1213.95 L1719.63 1213.95 L1719.04 1213.95 L1718.45 1213.95 L1717.87 1213.95 L1717.28 1213.95 L1716.7 1213.95 L1716.11 1213.95 L1715.52 1213.95 L1714.94 1213.95 L1714.35 1213.95 L1713.76 1213.95 L1713.18 1213.95 L1712.59 1213.95 L1712 1213.95 L1711.42 1213.95 L1710.83 1213.95 L1710.24 1213.95 L1709.66 1213.95 L1709.07 1213.95 L1708.49 1213.95 L1707.9 1213.95 L1707.31 1213.95 L1706.73 1213.95 L1706.14 1213.95 L1705.55 1213.95 L1704.97 1213.95 L1704.38 1213.95 L1703.79 1213.95 L1703.21 1213.95 L1702.62 1213.95 L1702.04 1213.95 L1701.45 1213.95 L1700.86 1213.95 L1700.28 1213.95 L1699.69 1213.95 L1699.1 1213.95 L1698.52 1213.95 L1697.93 1213.95 L1697.34 1213.95 L1696.76 1213.95 L1696.17 1213.95 L1695.58 1213.95 L1695 1213.95 L1694.41 1213.95 L1693.83 1213.95 L1693.24 1213.95 L1692.65 1213.95 L1692.07 1213.95 L1691.48 1213.95 L1690.89 1213.95 L1690.31 1213.95 L1689.72 1213.95 L1689.13 1213.95 L1688.55 1213.95 L1687.96 1213.95 L1687.37 1213.95 L1686.79 1213.95 L1686.2 1213.95 L1685.62 1213.95 L1685.03 1213.95 L1684.44 1213.95 L1683.86 1213.95 L1683.27 1213.95 L1682.68 1213.95 L1682.1 1213.95 L1681.51 1213.95 L1680.92 1213.95 L1680.34 1213.95 L1679.75 1213.95 L1679.17 1213.95 L1678.58 1213.95 L1677.99 1213.95 L1677.41 1213.95 L1676.82 1213.95 L1676.23 1213.95 L1675.65 1213.95 L1675.06 1213.95 L1674.47 1213.95 L1673.89 1213.95 L1673.3 1213.95 L1672.71 1213.95 L1672.13 1213.95 L1671.54 1213.95 L1670.96 1213.95 L1670.37 1213.95 L1669.78 1213.95 L1669.2 1213.95 L1668.61 1213.95 L1668.02 1213.95 L1667.44 1213.95 L1666.85 1213.95 L1666.26 1213.95 L1665.68 1213.95 L1665.09 1213.95 L1664.5 1213.95 L1663.92 1213.95 L1663.33 1213.95 L1662.75 1213.95 L1662.16 1213.95 L1661.57 1213.95 L1660.99 1213.95 L1660.4 1213.95 L1659.81 1213.95 L1659.23 1213.95 L1658.64 1213.95 L1658.05 1213.95 L1657.47 1213.95 L1656.88 1213.95 L1656.29 1213.95 L1655.71 1213.95 L1655.12 1213.95 L1654.54 1213.95 L1653.95 1213.95 L1653.36 1213.95 L1652.78 1213.95 L1652.19 1213.95 L1651.6 1213.95 L1651.02 1213.95 L1650.43 1213.95 L1649.84 1213.95 L1649.26 1213.95 L1648.67 1213.95 L1648.09 1213.95 L1647.5 1213.95 L1646.91 1213.95 L1646.33 1213.95 L1645.74 1213.95 L1645.15 1213.95 L1644.57 1213.95 L1643.98 1213.95 L1643.39 1213.95 L1642.81 1213.95 L1642.22 1213.95 L1641.63 1213.95 L1641.05 1213.95 L1640.46 1213.95 L1639.88 1213.95 L1639.29 1213.95 L1638.7 1213.95 L1638.12 1213.95 L1637.53 1213.95 L1636.94 1213.95 L1636.36 1213.95 L1635.77 1213.95 L1635.18 1213.95 L1634.6 1213.95 L1634.01 1213.95 L1633.42 1213.95 L1632.84 1213.95 L1632.25 1213.95 L1631.67 1213.95 L1631.08 1213.95 L1630.49 1213.95 L1629.91 1213.95 L1629.32 1213.95 L1628.73 1213.95 L1628.15 1213.95 L1627.56 1213.95 L1626.97 1213.95 L1626.39 1213.95 L1625.8 1213.95 L1625.22 1213.95 L1624.63 1213.95 L1624.04 1213.95 L1623.46 1213.95 L1622.87 1213.95 L1622.28 1213.95 L1621.7 1213.95 L1621.11 1213.95 L1620.52 1213.95 L1619.94 1213.95 L1619.35 1213.95 L1618.76 1213.95 L1618.18 1213.95 L1617.59 1213.95 L1617.01 1213.95 L1616.42 1213.95 L1615.83 1213.95 L1615.25 1213.95 L1614.66 1213.95 L1614.07 1213.95 L1613.49 1213.95 L1612.9 1213.95 L1612.31 1213.95 L1611.73 1213.95 L1611.14 1213.95 L1610.55 1213.95 L1609.97 1213.95 L1609.38 1213.95 L1608.8 1213.95 L1608.21 1213.95 L1607.62 1213.95 L1607.04 1213.95 L1606.45 1213.95 L1605.86 1213.95 L1605.28 1213.95 L1604.69 1213.95 L1604.1 1213.95 L1603.52 1213.95 L1602.93 1213.95 L1602.34 1213.95 L1601.76 1213.95 L1601.17 1213.95 L1600.59 1213.95 L1600 1213.95 L1599.41 1213.95 L1598.83 1213.95 L1598.24 1213.95 L1597.65 1213.95 L1597.07 1213.95 L1596.48 1213.95 L1595.89 1213.95 L1595.31 1213.95 L1594.72 1213.95 L1594.14 1213.95 L1593.55 1213.95 L1592.96 1213.95 L1592.38 1213.95 L1591.79 1213.95 L1591.2 1213.95 L1590.62 1213.95 L1590.03 1213.95 L1589.44 1213.95 L1588.86 1213.95 L1588.27 1213.95 L1587.68 1213.95 L1587.1 1213.95 L1586.51 1213.95 L1585.93 1213.95 L1585.34 1213.95 L1584.75 1213.95 L1584.17 1213.95 L1583.58 1213.95 L1582.99 1213.95 L1582.41 1213.95 L1581.82 1213.95 L1581.23 1213.95 L1580.65 1213.95 L1580.06 1213.95 L1579.47 1213.95 L1578.89 1213.95 L1578.3 1213.95 L1577.72 1213.95 L1577.13 1213.95 L1576.54 1213.95 L1575.96 1213.95 L1575.37 1213.95 L1574.78 1213.95 L1574.2 1213.95 L1573.61 1213.95 L1573.02 1213.95 L1572.44 1213.95 L1571.85 1213.95 L1571.27 1213.95 L1570.68 1213.95 L1570.09 1213.95 L1569.51 1213.95 L1568.92 1213.95 L1568.33 1213.95 L1567.75 1213.95 L1567.16 1213.95 L1566.57 1213.95 L1565.99 1213.95 L1565.4 1213.95 L1564.81 1213.95 L1564.23 1213.95 L1563.64 1213.95 L1563.06 1213.95 L1562.47 1213.95 L1561.88 1213.95 L1561.3 1213.95 L1560.71 1213.95 L1560.12 1213.95 L1559.54 1213.95 L1558.95 1213.95 L1558.36 1213.95 L1557.78 1213.95 L1557.19 1213.95 L1556.6 1213.95 L1556.02 1213.95 L1555.43 1213.95 L1554.85 1213.95 L1554.26 1213.95 L1553.67 1213.95 L1553.09 1213.95 L1552.5 1213.95 L1551.91 1213.95 L1551.33 1213.95 L1550.74 1213.95 L1550.15 1213.95 L1549.57 1213.95 L1548.98 1213.95 L1548.4 1213.95 L1547.81 1213.95 L1547.22 1213.95 L1546.64 1213.95 L1546.05 1213.95 L1545.46 1213.95 L1544.88 1213.95 L1544.29 1213.95 L1543.7 1213.95 L1543.12 1213.95 L1542.53 1213.95 L1541.94 1213.95 L1541.36 1213.95 L1540.77 1213.95 L1540.19 1213.95 L1539.6 1213.95 L1539.01 1213.95 L1538.43 1213.95 L1537.84 1213.95 L1537.25 1213.95 L1536.67 1213.95 L1536.08 1213.95 L1535.49 1213.95 L1534.91 1213.95 L1534.32 1213.95 L1533.73 1213.95 L1533.15 1213.95 L1532.56 1213.95 L1531.98 1213.95 L1531.39 1213.95 L1530.8 1213.95 L1530.22 1213.95 L1529.63 1213.95 L1529.04 1213.95 L1528.46 1213.95 L1527.87 1213.95 L1527.28 1213.95 L1526.7 1213.95 L1526.11 1213.95 L1525.52 1213.95 L1524.94 1213.95 L1524.35 1213.95 L1523.77 1213.95 L1523.18 1213.95 L1522.59 1213.95 L1522.01 1213.95 L1521.42 1213.95 L1520.83 1213.95 L1520.25 1213.95 L1519.66 1213.95 L1519.07 1213.95 L1518.49 1213.95 L1517.9 1213.95 L1517.32 1213.95 L1516.73 1213.95 L1516.14 1213.95 L1515.56 1213.95 L1514.97 1213.95 L1514.38 1213.95 L1513.8 1213.95 L1513.21 1213.95 L1512.62 1213.95 L1512.04 1213.95 L1511.45 1213.95 L1510.86 1213.95 L1510.28 1213.95 L1509.69 1213.95 L1509.11 1213.95 L1508.52 1213.95 L1507.93 1213.95 L1507.35 1213.95 L1506.76 1213.95 L1506.17 1213.95 L1505.59 1213.95 L1505 1213.95 L1504.41 1213.95 L1503.83 1213.95 L1503.24 1213.95 L1502.65 1213.95 L1502.07 1213.95 L1501.48 1213.95 L1500.9 1213.95 L1500.31 1213.95 L1499.72 1213.95 L1499.14 1213.95 L1498.55 1213.95 L1497.96 1213.95 L1497.38 1213.95 L1496.79 1213.95 L1496.2 1213.95 L1495.62 1213.95 L1495.03 1213.95 L1494.45 1213.95 L1493.86 1213.95 L1493.27 1213.95 L1492.69 1213.95 L1492.1 1213.95 L1491.51 1213.95 L1490.93 1213.95 L1490.34 1213.95 L1489.75 1213.95 L1489.17 1213.95 L1488.58 1213.95 L1487.99 1213.95 L1487.41 1213.95 L1486.82 1213.95 L1486.24 1213.95 L1485.65 1213.95 L1485.06 1213.95 L1484.48 1213.95 L1483.89 1213.95 L1483.3 1213.95 L1482.72 1213.95 L1482.13 1213.95 L1481.54 1213.95 L1480.96 1213.95 L1480.37 1213.95 L1479.78 1213.95 L1479.2 1213.95 L1478.61 1213.95 L1478.03 1213.95 L1477.44 1213.95 L1476.85 1213.95 L1476.27 1213.95 L1475.68 1213.95 L1475.09 1213.95 L1474.51 1213.95 L1473.92 1213.95 L1473.33 1213.95 L1472.75 1213.95 L1472.16 1213.95 L1471.57 1213.95 L1470.99 1213.95 L1470.4 1213.95 L1469.82 1213.95 L1469.23 1213.95 L1468.64 1213.95 L1468.06 1213.95 L1467.47 1213.95 L1466.88 1213.95 L1466.3 1213.95 L1465.71 1213.95 L1465.12 1213.95 L1464.54 1213.95 L1463.95 1213.95 L1463.37 1213.95 L1462.78 1213.95 L1462.19 1213.95 L1461.61 1213.95 L1461.02 1213.95 L1460.43 1213.95 L1459.85 1213.95 L1459.26 1213.95 L1458.67 1213.95 L1458.09 1213.95 L1457.5 1213.95 L1456.91 1213.95 L1456.33 1213.95 L1455.74 1213.95 L1455.16 1213.95 L1454.57 1213.95 L1453.98 1213.95 L1453.4 1213.95 L1452.81 1213.95 L1452.22 1213.95 L1451.64 1213.95 L1451.05 1213.95 L1450.46 1213.95 L1449.88 1213.95 L1449.29 1213.95 L1448.7 1213.95 L1448.12 1213.95 L1447.53 1213.95 L1446.95 1213.95 L1446.36 1213.95 L1445.77 1213.95 L1445.19 1213.95 L1444.6 1213.95 L1444.01 1213.95 L1443.43 1213.95 L1442.84 1213.95 L1442.25 1213.95 L1441.67 1213.95 L1441.08 1213.95 L1440.5 1213.95 L1439.91 1213.95 L1439.32 1213.95 L1438.74 1213.95 L1438.15 1213.95 L1437.56 1213.95 L1436.98 1213.95 L1436.39 1213.95 L1435.8 1213.95 L1435.22 1213.95 L1434.63 1213.95 L1434.04 1213.95 L1433.46 1213.95 L1432.87 1213.95 L1432.29 1213.95 L1431.7 1213.95 L1431.11 1213.95 L1430.53 1213.95 L1429.94 1213.95 L1429.35 1213.95 L1428.77 1213.95 L1428.18 1213.95 L1427.59 1213.95 L1427.01 1213.95 L1426.42 1213.95 L1425.83 1213.95 L1425.25 1213.95 L1424.66 1213.95 L1424.08 1213.95 L1423.49 1213.95 L1422.9 1213.95 L1422.32 1213.95 L1421.73 1213.95 L1421.14 1213.95 L1420.56 1213.95 L1419.97 1213.95 L1419.38 1213.95 L1418.8 1213.95 L1418.21 1213.95 L1417.63 1213.95 L1417.04 1213.95 L1416.45 1213.95 L1415.87 1213.95 L1415.28 1213.95 L1414.69 1213.95 L1414.11 1213.95 L1413.52 1213.95 L1412.93 1213.95 L1412.35 1213.95 L1411.76 1213.95 L1411.17 1213.95 L1410.59 1213.95 L1410 1213.95 L1409.42 1213.95 L1408.83 1213.95 L1408.24 1213.95 L1407.66 1213.95 L1407.07 1213.95 L1406.48 1213.95 L1405.9 1213.95 L1405.31 1213.95 L1404.72 1213.95 L1404.14 1213.95 L1403.55 1213.95 L1402.96 1213.95 L1402.38 1213.95 L1401.79 1213.95 L1401.21 1213.95 L1400.62 1213.95 L1400.03 1213.95 L1399.45 1213.95 L1398.86 1213.95 L1398.27 1213.95 L1397.69 1213.95 L1397.1 1213.95 L1396.51 1213.95 L1395.93 1213.95 L1395.34 1213.95 L1394.75 1213.95 L1394.17 1213.95 L1393.58 1213.95 L1393 1213.95 L1392.41 1213.95 L1391.82 1213.95 L1391.24 1213.95 L1390.65 1213.95 L1390.06 1213.95 L1389.48 1213.95 L1388.89 1213.95 L1388.3 1213.95 L1387.72 1213.95 L1387.13 1213.95 L1386.55 1213.95 L1385.96 1213.95 L1385.37 1213.95 L1384.79 1213.95 L1384.2 1213.95 L1383.61 1213.95 L1383.03 1213.95 L1382.44 1213.95 L1381.85 1213.95 L1381.27 1213.95 L1380.68 1213.95 L1380.09 1213.95 L1379.51 1213.95 L1378.92 1213.95 L1378.34 1213.95 L1377.75 1213.95 L1377.16 1213.95 L1376.58 1213.95 L1375.99 1213.95 L1375.4 1213.95 L1374.82 1213.95 L1374.23 1213.95 L1373.64 1213.95 L1373.06 1213.95 L1372.47 1213.95 L1371.88 1213.95 L1371.3 1213.95 L1370.71 1213.95 L1370.13 1213.95 L1369.54 1213.95 L1368.95 1213.95 L1368.37 1213.95 L1367.78 1213.95 L1367.19 1213.95 L1366.61 1213.95 L1366.02 1213.95 L1365.43 1213.95 L1364.85 1213.95 L1364.26 1213.95 L1363.68 1213.95 L1363.09 1213.95 L1362.5 1213.95 L1361.92 1213.95 L1361.33 1213.95 L1360.74 1213.95 L1360.16 1213.95 L1359.57 1213.95 L1358.98 1213.95 L1358.4 1213.95 L1357.81 1213.95 L1357.22 1213.95 L1356.64 1213.95 L1356.05 1213.95 L1355.47 1213.95 L1354.88 1213.95 L1354.29 1213.95 L1353.71 1213.95 L1353.12 1213.95 L1352.53 1213.95 L1351.95 1213.95 L1351.36 1213.95 L1350.77 1213.95 L1350.19 1213.95 L1349.6 1213.95 L1349.01 1213.95 L1348.43 1213.95 L1347.84 1213.95 L1347.26 1213.95 L1346.67 1213.95 L1346.08 1213.95 L1345.5 1213.95 L1344.91 1213.95 L1344.32 1213.95 L1343.74 1213.95 L1343.15 1213.95 L1342.56 1213.95 L1341.98 1213.95 L1341.39 1213.95 L1340.8 1213.95 L1340.22 1213.95 L1339.63 1213.95 L1339.05 1213.95 L1338.46 1213.95 L1337.87 1213.95 L1337.29 1213.95 L1336.7 1213.95 L1336.11 1213.95 L1335.53 1213.95 L1334.94 1213.95 L1334.35 1213.95 L1333.77 1213.95 L1333.18 1213.95 L1332.6 1213.95 L1332.01 1213.95 L1331.42 1213.95 L1330.84 1213.95 L1330.25 1213.95 L1329.66 1213.95 L1329.08 1213.95 L1328.49 1213.95 L1327.9 1213.95 L1327.32 1213.95 L1326.73 1213.95 L1326.14 1213.95 L1325.56 1213.95 L1324.97 1213.95 L1324.39 1213.95 L1323.8 1213.95 L1323.21 1213.95 L1322.63 1213.95 L1322.04 1213.95 L1321.45 1213.95 L1320.87 1213.95 L1320.28 1213.95 L1319.69 1213.95 L1319.11 1213.95 L1318.52 1213.95 L1317.93 1213.95 L1317.35 1213.95 L1316.76 1213.95 L1316.18 1213.95 L1315.59 1213.95 L1315 1213.95 L1314.42 1213.95 L1313.83 1213.95 L1313.24 1213.95 L1312.66 1213.95 L1312.07 1213.95 L1311.48 1213.95 L1310.9 1213.95 L1310.31 1213.95 L1309.73 1213.95 L1309.14 1213.95 L1308.55 1213.95 L1307.97 1213.95 L1307.38 1213.95 L1306.79 1213.95 L1306.21 1213.95 L1305.62 1213.95 L1305.03 1213.95 L1304.45 1213.95 L1303.86 1213.95 L1303.27 1213.95 L1302.69 1213.95 L1302.1 1213.95 L1301.52 1213.95 L1300.93 1213.95 L1300.34 1213.95 L1299.76 1213.95 L1299.17 1213.95 L1298.58 1213.95 L1298 1213.95 L1297.41 1213.95 L1296.82 1213.95 L1296.24 1213.95 L1295.65 1213.95 L1295.06 1213.95 L1294.48 1213.95 L1293.89 1213.95 L1293.31 1213.95 L1292.72 1213.95 L1292.13 1213.95 L1291.55 1213.95 L1290.96 1213.95 L1290.37 1213.95 L1289.79 1213.95 L1289.2 1213.95 L1288.61 1213.95 L1288.03 1213.95 L1287.44 1213.95 L1286.86 1213.95 L1286.27 1213.95 L1285.68 1213.95 L1285.1 1213.95 L1284.51 1213.95 L1283.92 1213.95 L1283.34 1213.95 L1282.75 1213.95 L1282.16 1213.95 L1281.58 1213.95 L1280.99 1213.95 L1280.4 1213.95 L1279.82 1213.95 L1279.23 1213.95 L1278.65 1213.95 L1278.06 1213.95 L1277.47 1213.95 L1276.89 1213.95 L1276.3 1213.95 L1275.71 1213.95 L1275.13 1213.95 L1274.54 1213.95 L1273.95 1213.95 L1273.37 1213.95 L1272.78 1213.95 L1272.19 1213.95 L1271.61 1213.95 L1271.02 1213.95 L1270.44 1213.95 L1269.85 1213.95 L1269.26 1213.95 L1268.68 1213.95 L1268.09 1213.95 L1267.5 1213.95 L1266.92 1213.95 L1266.33 1213.95 L1265.74 1213.95 L1265.16 1213.95 L1264.57 1213.95 L1263.98 1213.95 L1263.4 1213.95 L1262.81 1213.95 L1262.23 1213.95 L1261.64 1213.95 L1261.05 1213.95 L1260.47 1213.95 L1259.88 1213.95 L1259.29 1213.95 L1258.71 1213.95 L1258.12 1213.95 L1257.53 1213.95 L1256.95 1213.95 L1256.36 1213.95 L1255.78 1213.95 L1255.19 1213.95 L1254.6 1213.95 L1254.02 1213.95 L1253.43 1213.95 L1252.84 1213.95 L1252.26 1213.95 L1251.67 1213.95 L1251.08 1213.95 L1250.5 1213.95 L1249.91 1213.95 L1249.32 1213.95 L1248.74 1213.95 L1248.15 1213.95 L1247.57 1213.95 L1246.98 1213.95 L1246.39 1213.95 L1245.81 1213.95 L1245.22 1213.95 L1244.63 1213.95 L1244.05 1213.95 L1243.46 1213.95 L1242.87 1213.95 L1242.29 1213.95 L1241.7 1213.95 L1241.11 1213.95 L1240.53 1213.95 L1239.94 1213.95 L1239.36 1213.95 L1238.77 1213.95 L1238.18 1213.95 L1237.6 1213.95 L1237.01 1213.95 L1236.42 1213.95 L1235.84 1213.95 L1235.25 1213.95 L1234.66 1213.95 L1234.08 1213.95 L1233.49 1213.95 L1232.91 1213.95 L1232.32 1213.95 L1231.73 1213.95 L1231.15 1213.95 L1230.56 1213.95 L1229.97 1213.95 L1229.39 1213.95 L1228.8 1213.95 L1228.21 1213.95 L1227.63 1213.95 L1227.04 1213.95 L1226.45 1213.95 L1225.87 1213.95 L1225.28 1213.95 L1224.7 1213.95 L1224.11 1213.95 L1223.52 1213.95 L1222.94 1213.95 L1222.35 1213.95 L1221.76 1213.95 L1221.18 1213.95 L1220.59 1213.95 L1220 1213.95 L1219.42 1213.95 L1218.83 1213.95 L1218.24 1213.95 L1217.66 1213.95 L1217.07 1213.95 L1216.49 1213.95 L1215.9 1213.95 L1215.31 1213.95 L1214.73 1213.95 L1214.14 1213.95 L1213.55 1213.95 L1212.97 1213.95 L1212.38 1213.95 L1211.79 1213.95 L1211.21 1213.95 L1210.62 1213.95 L1210.03 1213.95 L1209.45 1213.95 L1208.86 1213.95 L1208.28 1213.95 L1207.69 1213.95 L1207.1 1213.95 L1206.52 1213.95 L1205.93 1213.95 L1205.34 1213.95 L1204.76 1213.95 L1204.17 1213.95 L1203.58 1213.95 L1203 1213.95 L1202.41 1213.95 L1201.83 1213.95 L1201.24 1213.95 L1200.65 1213.95 L1200.07 1213.95 L1199.48 1213.95 L1198.89 1213.95 L1198.31 1213.95 L1197.72 1213.95 L1197.13 1213.95 L1196.55 1213.95 L1195.96 1213.95 L1195.37 1213.95 L1194.79 1213.95 L1194.2 1213.95 L1193.62 1213.95 L1193.03 1213.95 L1192.44 1213.95 L1191.86 1213.95 L1191.27 1213.95 L1190.68 1213.95 L1190.1 1213.95 L1189.51 1213.95 L1188.92 1213.95 L1188.34 1213.95 L1187.75 1213.95 L1187.16 1213.95 L1186.58 1213.95 L1185.99 1213.95 L1185.41 1213.95 L1184.82 1213.95 L1184.23 1213.95 L1183.65 1213.95 L1183.06 1213.95 L1182.47 1213.95 L1181.89 1213.95 L1181.3 1213.95 L1180.71 1213.95 L1180.13 1213.95 L1179.54 1213.95 L1178.96 1213.95 L1178.37 1213.95 L1177.78 1213.95 L1177.2 1213.95 L1176.61 1213.95 L1176.02 1213.95 L1175.44 1213.95 L1174.85 1213.95 L1174.26 1213.95 L1173.68 1213.95 L1173.09 1213.95 L1172.5 1213.95 L1171.92 1213.95 L1171.33 1213.95 L1170.75 1213.95 L1170.16 1213.95 L1169.57 1213.95 L1168.99 1213.95 L1168.4 1213.95 L1167.81 1213.95 L1167.23 1213.95 L1166.64 1213.95 L1166.05 1213.95 L1165.47 1213.95 L1164.88 1213.95 L1164.29 1213.95 L1163.71 1213.95 L1163.12 1213.95 L1162.54 1213.95 L1161.95 1213.95 L1161.36 1213.95 L1160.78 1213.95 L1160.19 1213.95 L1159.6 1213.95 L1159.02 1213.95 L1158.43 1213.95 L1157.84 1213.95 L1157.26 1213.95 L1156.67 1213.95 L1156.09 1213.95 L1155.5 1213.95 L1154.91 1213.95 L1154.33 1213.95 L1153.74 1213.95 L1153.15 1213.95 L1152.57 1213.95 L1151.98 1213.95 L1151.39 1213.95 L1150.81 1213.95 L1150.22 1213.95 L1149.63 1213.95 L1149.05 1213.95 L1148.46 1213.95 L1147.88 1213.95 L1147.29 1213.95 L1146.7 1213.95 L1146.12 1213.95 L1145.53 1213.95 L1144.94 1213.95 L1144.36 1213.95 L1143.77 1213.95 L1143.18 1213.95 L1142.6 1213.95 L1142.01 1213.95 L1141.42 1213.95 L1140.84 1213.95 L1140.25 1213.95 L1139.67 1213.95 L1139.08 1213.95 L1138.49 1213.95 L1137.91 1213.95 L1137.32 1213.95 L1136.73 1213.95 L1136.15 1213.95 L1135.56 1213.95 L1134.97 1213.95 L1134.39 1213.95 L1133.8 1213.95 L1133.21 1213.95 L1132.63 1213.95 L1132.04 1213.95 L1131.46 1213.95 L1130.87 1213.95 L1130.28 1213.95 L1129.7 1213.95 L1129.11 1213.95 L1128.52 1213.95 L1127.94 1213.95 L1127.35 1213.95 L1126.76 1213.95 L1126.18 1213.95 L1125.59 1213.95 L1125.01 1213.95 L1124.42 1213.95 L1123.83 1213.95 L1123.25 1213.95 L1122.66 1213.95 L1122.07 1213.95 L1121.49 1213.95 L1120.9 1213.95 L1120.31 1213.95 L1119.73 1213.95 L1119.14 1213.95 L1118.55 1213.95 L1117.97 1213.95 L1117.38 1213.95 L1116.8 1213.95 L1116.21 1213.95 L1115.62 1213.95 L1115.04 1213.95 L1114.45 1213.95 L1113.86 1213.95 L1113.28 1213.95 L1112.69 1213.95 L1112.1 1213.95 L1111.52 1213.95 L1110.93 1213.95 L1110.34 1213.95 L1109.76 1213.95 L1109.17 1213.95 L1108.59 1213.95 L1108 1213.95 L1107.41 1213.95 L1106.83 1213.95 L1106.24 1213.95 L1105.65 1213.95 L1105.07 1213.95 L1104.48 1213.95 L1103.89 1213.95 L1103.31 1213.95 L1102.72 1213.95 L1102.14 1213.95 L1101.55 1213.95 L1100.96 1213.95 L1100.38 1213.95 L1099.79 1213.95 L1099.2 1213.95 L1098.62 1213.95 L1098.03 1213.95 L1097.44 1213.95 L1096.86 1213.95 L1096.27 1213.95 L1095.68 1213.95 L1095.1 1213.95 L1094.51 1213.95 L1093.93 1213.95 L1093.34 1213.95 L1092.75 1213.95 L1092.17 1213.95 L1091.58 1213.95 L1090.99 1213.95 L1090.41 1213.95 L1089.82 1213.95 L1089.23 1213.95 L1088.65 1213.95 L1088.06 1213.95 L1087.47 1213.95 L1086.89 1213.95 L1086.3 1213.95 L1085.72 1213.95 L1085.13 1213.95 L1084.54 1213.95 L1083.96 1213.95 L1083.37 1213.95 L1082.78 1213.95 L1082.2 1213.95 L1081.61 1213.95 L1081.02 1213.95 L1080.44 1213.95 L1079.85 1213.95 L1079.26 1213.95 L1078.68 1213.95 L1078.09 1213.95 L1077.51 1213.95 L1076.92 1213.95 L1076.33 1213.95 L1075.75 1213.95 L1075.16 1213.95 L1074.57 1213.95 L1073.99 1213.95 L1073.4 1213.95 L1072.81 1213.95 L1072.23 1213.95 L1071.64 1213.95 L1071.06 1213.95 L1070.47 1213.95 L1069.88 1213.95 L1069.3 1213.95 L1068.71 1213.95 L1068.12 1213.95 L1067.54 1213.95 L1066.95 1213.95 L1066.36 1213.95 L1065.78 1213.95 L1065.19 1213.95 L1064.6 1213.95 L1064.02 1213.95 L1063.43 1213.95 L1062.85 1213.95 L1062.26 1213.95 L1061.67 1213.95 L1061.09 1213.95 L1060.5 1213.95 L1059.91 1213.95 L1059.33 1213.95 L1058.74 1213.95 L1058.15 1213.95 L1057.57 1213.95 L1056.98 1213.95 L1056.39 1213.95 L1055.81 1213.95 L1055.22 1213.95 L1054.64 1213.95 L1054.05 1213.95 L1053.46 1213.95 L1052.88 1213.95 L1052.29 1213.95 L1051.7 1213.95 L1051.12 1213.95 L1050.53 1213.95 L1049.94 1213.95 L1049.36 1213.95 L1048.77 1213.95 L1048.19 1213.95 L1047.6 1213.95 L1047.01 1213.95 L1046.43 1213.95 L1045.84 1213.95 L1045.25 1213.95 L1044.67 1213.95 L1044.08 1213.95 L1043.49 1213.95 L1042.91 1213.95 L1042.32 1213.95 L1041.73 1213.95 L1041.15 1213.95 L1040.56 1213.95 L1039.98 1213.95 L1039.39 1213.95 L1038.8 1213.95 L1038.22 1213.95 L1037.63 1213.95 L1037.04 1213.95 L1036.46 1213.95 L1035.87 1213.95 L1035.28 1213.95 L1034.7 1213.95 L1034.11 1213.95 L1033.52 1213.95 L1032.94 1213.95 L1032.35 1213.95 L1031.77 1213.95 L1031.18 1213.95 L1030.59 1213.95 L1030.01 1213.95 L1029.42 1213.95 L1028.83 1213.95 L1028.25 1213.95 L1027.66 1213.95 L1027.07 1213.95 L1026.49 1213.95 L1025.9 1213.95 L1025.32 1213.95 L1024.73 1213.95 L1024.14 1213.95 L1023.56 1213.95 L1022.97 1213.95 L1022.38 1213.95 L1021.8 1213.95 L1021.21 1213.95 L1020.62 1213.95 L1020.04 1213.95 L1019.45 1213.95 L1018.86 1213.95 L1018.28 1213.95 L1017.69 1213.95 L1017.11 1213.95 L1016.52 1213.95 L1015.93 1213.95 L1015.35 1213.95 L1014.76 1213.95 L1014.17 1213.95 L1013.59 1213.95 L1013 1213.95 L1012.41 1213.95 L1011.83 1213.95 L1011.24 1213.95 L1010.65 1213.95 L1010.07 1213.95 L1009.48 1213.95 L1008.9 1213.95 L1008.31 1213.95 L1007.72 1213.95 L1007.14 1213.95 L1006.55 1213.95 L1005.96 1213.95 L1005.38 1213.95 L1004.79 1213.95 L1004.2 1213.95 L1003.62 1213.95 L1003.03 1213.95 L1002.44 1213.95 L1001.86 1213.95 L1001.27 1213.95 L1000.69 1213.95 L1000.1 1213.95 L999.513 1213.95 L998.926 1213.95 L998.34 1213.95 L997.754 1213.95 L997.167 1213.95 L996.581 1213.95 L995.994 1213.95 L995.408 1213.95 L994.822 1213.95 L994.235 1213.95 L993.649 1213.95 L993.062 1213.95 L992.476 1213.95 L991.889 1213.95 L991.303 1213.95 L990.717 1213.95 L990.13 1213.95 L989.544 1213.95 L988.957 1213.95 L988.371 1213.95 L987.785 1213.95 L987.198 1213.95 L986.612 1213.95 L986.025 1213.95  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.42 986.612,1214.42 987.198,1214.42 987.785,1214.42 988.371,1214.42 988.957,1214.42 989.544,1214.42 990.13,1214.42 990.717,1214.42 991.303,1214.42 991.889,1214.42 992.476,1214.42 993.062,1214.42 993.649,1214.42 994.235,1214.42 994.822,1214.42 995.408,1214.42 995.994,1214.42 996.581,1214.42 997.167,1214.42 997.754,1214.42 998.34,1214.42 998.926,1214.42 999.513,1214.42 1000.1,1214.42 1000.69,1214.42 1001.27,1214.42 1001.86,1214.42 1002.44,1214.42 1003.03,1214.42 1003.62,1214.42 1004.2,1214.42 1004.79,1214.42 1005.38,1214.42 1005.96,1214.42 1006.55,1214.42 1007.14,1214.42 1007.72,1214.42 1008.31,1214.42 1008.9,1214.42 1009.48,1214.42 1010.07,1214.42 1010.65,1214.42 1011.24,1214.42 1011.83,1214.42 1012.41,1214.42 1013,1214.42 1013.59,1214.42 1014.17,1214.42 1014.76,1214.42 1015.35,1214.42 1015.93,1214.42 1016.52,1214.42 1017.11,1214.42 1017.69,1214.42 1018.28,1214.42 1018.86,1214.42 1019.45,1214.42 1020.04,1214.42 1020.62,1214.42 1021.21,1214.42 1021.8,1214.42 1022.38,1214.42 1022.97,1214.42 1023.56,1214.42 1024.14,1214.42 1024.73,1214.42 1025.32,1214.42 1025.9,1214.42 1026.49,1214.42 1027.07,1214.42 1027.66,1214.42 1028.25,1214.42 1028.83,1214.42 1029.42,1214.42 1030.01,1214.42 1030.59,1214.42 1031.18,1214.42 1031.77,1214.42 1032.35,1214.42 1032.94,1214.42 1033.52,1214.42 1034.11,1214.42 1034.7,1214.42 1035.28,1214.42 1035.87,1214.42 1036.46,1214.42 1037.04,1214.42 1037.63,1214.42 1038.22,1214.42 1038.8,1214.42 1039.39,1214.42 1039.98,1214.42 1040.56,1214.42 1041.15,1214.42 1041.73,1214.42 1042.32,1214.42 1042.91,1214.42 1043.49,1214.42 1044.08,1214.42 1044.67,1214.42 1045.25,1214.42 1045.84,1214.42 1046.43,1214.42 1047.01,1214.42 1047.6,1214.42 1048.19,1214.42 1048.77,1214.42 1049.36,1214.42 1049.94,1214.42 1050.53,1214.42 1051.12,1214.42 1051.7,1214.42 1052.29,1214.42 1052.88,1214.42 1053.46,1214.42 1054.05,1214.42 1054.64,1214.42 1055.22,1214.42 1055.81,1214.42 1056.39,1214.42 1056.98,1214.42 1057.57,1214.42 1058.15,1214.42 1058.74,1214.42 1059.33,1214.42 1059.91,1214.42 1060.5,1214.42 1061.09,1214.42 1061.67,1214.42 1062.26,1214.42 1062.85,1214.42 1063.43,1214.42 1064.02,1214.42 1064.6,1214.42 1065.19,1214.42 1065.78,1214.42 1066.36,1214.42 1066.95,1214.42 1067.54,1214.42 1068.12,1214.42 1068.71,1214.42 1069.3,1214.42 1069.88,1214.42 1070.47,1214.42 1071.06,1214.42 1071.64,1214.42 1072.23,1214.42 1072.81,1214.42 1073.4,1214.42 1073.99,1214.42 1074.57,1214.42 1075.16,1214.42 1075.75,1214.42 1076.33,1214.42 1076.92,1214.42 1077.51,1214.42 1078.09,1214.42 1078.68,1214.42 1079.26,1214.42 1079.85,1214.42 1080.44,1214.42 1081.02,1214.42 1081.61,1214.42 1082.2,1214.42 1082.78,1214.42 1083.37,1214.42 1083.96,1214.42 1084.54,1214.42 1085.13,1214.42 1085.72,1214.42 1086.3,1214.42 1086.89,1214.42 1087.47,1214.42 1088.06,1214.42 1088.65,1214.42 1089.23,1214.42 1089.82,1214.42 1090.41,1214.42 1090.99,1214.42 1091.58,1214.42 1092.17,1214.42 1092.75,1214.42 1093.34,1214.42 1093.93,1214.42 1094.51,1214.42 1095.1,1214.42 1095.68,1214.42 1096.27,1214.42 1096.86,1214.42 1097.44,1214.42 1098.03,1214.42 1098.62,1214.42 1099.2,1214.42 1099.79,1214.42 1100.38,1214.42 1100.96,1214.42 1101.55,1214.42 1102.14,1214.42 1102.72,1214.42 1103.31,1214.42 1103.89,1214.42 1104.48,1214.42 1105.07,1214.42 1105.65,1214.42 1106.24,1214.42 1106.83,1214.42 1107.41,1214.42 1108,1214.42 1108.59,1214.42 1109.17,1214.42 1109.76,1214.42 1110.34,1214.42 1110.93,1214.42 1111.52,1214.42 1112.1,1214.42 1112.69,1214.42 1113.28,1214.42 1113.86,1214.42 1114.45,1214.42 1115.04,1214.42 1115.62,1214.42 1116.21,1214.42 1116.8,1214.42 1117.38,1214.42 1117.97,1214.42 1118.55,1214.42 1119.14,1214.42 1119.73,1214.42 1120.31,1214.42 1120.9,1214.42 1121.49,1214.42 1122.07,1214.42 1122.66,1214.42 1123.25,1214.42 1123.83,1214.42 1124.42,1214.42 1125.01,1214.42 1125.59,1214.42 1126.18,1214.42 1126.76,1214.42 1127.35,1214.42 1127.94,1214.42 1128.52,1214.42 1129.11,1214.42 1129.7,1214.42 1130.28,1214.42 1130.87,1214.42 1131.46,1214.42 1132.04,1214.42 1132.63,1214.42 1133.21,1214.42 1133.8,1214.42 1134.39,1214.42 1134.97,1214.42 1135.56,1214.42 1136.15,1214.42 1136.73,1214.42 1137.32,1214.42 1137.91,1214.42 1138.49,1214.42 1139.08,1214.42 1139.67,1214.42 1140.25,1214.42 1140.84,1214.42 1141.42,1214.42 1142.01,1214.42 1142.6,1214.42 1143.18,1214.42 1143.77,1214.42 1144.36,1214.42 1144.94,1214.42 1145.53,1214.42 1146.12,1214.42 1146.7,1214.42 1147.29,1214.42 1147.88,1214.42 1148.46,1214.42 1149.05,1214.42 1149.63,1214.42 1150.22,1214.42 1150.81,1214.42 1151.39,1214.42 1151.98,1214.42 1152.57,1214.42 1153.15,1214.42 1153.74,1214.42 1154.33,1214.42 1154.91,1214.42 1155.5,1214.42 1156.09,1214.42 1156.67,1214.42 1157.26,1214.42 1157.84,1214.42 1158.43,1214.42 1159.02,1214.42 1159.6,1214.42 1160.19,1214.42 1160.78,1214.42 1161.36,1214.42 1161.95,1214.42 1162.54,1214.42 1163.12,1214.42 1163.71,1214.42 1164.29,1214.42 1164.88,1214.42 1165.47,1214.42 1166.05,1214.42 1166.64,1214.42 1167.23,1214.42 1167.81,1214.42 1168.4,1214.42 1168.99,1214.42 1169.57,1214.42 1170.16,1214.42 1170.75,1214.42 1171.33,1214.42 1171.92,1214.42 1172.5,1214.42 1173.09,1214.42 1173.68,1214.42 1174.26,1214.42 1174.85,1214.42 1175.44,1214.42 1176.02,1214.42 1176.61,1214.42 1177.2,1214.42 1177.78,1214.42 1178.37,1214.42 1178.96,1214.42 1179.54,1214.42 1180.13,1214.42 1180.71,1214.42 1181.3,1214.42 1181.89,1214.42 1182.47,1214.42 1183.06,1214.42 1183.65,1214.42 1184.23,1214.42 1184.82,1214.42 1185.41,1214.42 1185.99,1214.42 1186.58,1214.42 1187.16,1214.42 1187.75,1214.42 1188.34,1214.42 1188.92,1214.42 1189.51,1214.42 1190.1,1214.42 1190.68,1214.42 1191.27,1214.42 1191.86,1214.42 1192.44,1214.42 1193.03,1214.42 1193.62,1214.42 1194.2,1214.42 1194.79,1214.42 1195.37,1214.42 1195.96,1214.42 1196.55,1214.42 1197.13,1214.42 1197.72,1214.42 1198.31,1214.42 1198.89,1214.42 1199.48,1214.42 1200.07,1214.42 1200.65,1214.42 1201.24,1214.42 1201.83,1214.42 1202.41,1214.42 1203,1214.42 1203.58,1214.42 1204.17,1214.42 1204.76,1214.42 1205.34,1214.42 1205.93,1214.42 1206.52,1214.42 1207.1,1214.42 1207.69,1214.42 1208.28,1214.42 1208.86,1214.42 1209.45,1214.42 1210.03,1214.42 1210.62,1214.42 1211.21,1214.42 1211.79,1214.42 1212.38,1214.42 1212.97,1214.42 1213.55,1214.42 1214.14,1214.42 1214.73,1214.42 1215.31,1214.42 1215.9,1214.42 1216.49,1214.42 1217.07,1214.42 1217.66,1214.42 1218.24,1214.42 1218.83,1214.42 1219.42,1214.42 1220,1214.42 1220.59,1214.42 1221.18,1214.42 1221.76,1214.42 1222.35,1214.42 1222.94,1214.42 1223.52,1214.42 1224.11,1214.42 1224.7,1214.42 1225.28,1214.42 1225.87,1214.42 1226.45,1214.42 1227.04,1214.42 1227.63,1214.42 1228.21,1214.42 1228.8,1214.42 1229.39,1214.42 1229.97,1214.42 1230.56,1214.42 1231.15,1214.42 1231.73,1214.42 1232.32,1214.42 1232.91,1214.42 1233.49,1214.42 1234.08,1214.42 1234.66,1214.42 1235.25,1214.42 1235.84,1214.42 1236.42,1214.42 1237.01,1214.42 1237.6,1214.42 1238.18,1214.42 1238.77,1214.42 1239.36,1214.42 1239.94,1214.42 1240.53,1214.42 1241.11,1214.42 1241.7,1214.42 1242.29,1214.42 1242.87,1214.42 1243.46,1214.42 1244.05,1214.42 1244.63,1214.42 1245.22,1214.42 1245.81,1214.42 1246.39,1214.42 1246.98,1214.42 1247.57,1214.42 1248.15,1214.42 1248.74,1214.42 1249.32,1214.42 1249.91,1214.42 1250.5,1214.42 1251.08,1214.42 1251.67,1214.42 1252.26,1214.42 1252.84,1214.42 1253.43,1214.42 1254.02,1214.42 1254.6,1214.42 1255.19,1214.42 1255.78,1214.42 1256.36,1214.42 1256.95,1214.42 1257.53,1214.42 1258.12,1214.42 1258.71,1214.42 1259.29,1214.42 1259.88,1214.42 1260.47,1214.42 1261.05,1214.42 1261.64,1214.42 1262.23,1214.42 1262.81,1214.42 1263.4,1214.42 1263.98,1214.42 1264.57,1214.42 1265.16,1214.42 1265.74,1214.42 1266.33,1214.42 1266.92,1214.42 1267.5,1214.42 1268.09,1214.42 1268.68,1214.42 1269.26,1214.42 1269.85,1214.42 1270.44,1214.42 1271.02,1214.42 1271.61,1214.42 1272.19,1214.42 1272.78,1214.42 1273.37,1214.42 1273.95,1214.42 1274.54,1214.42 1275.13,1214.42 1275.71,1214.42 1276.3,1214.42 1276.89,1214.42 1277.47,1214.42 1278.06,1214.42 1278.65,1214.42 1279.23,1214.42 1279.82,1214.42 1280.4,1214.42 1280.99,1214.42 1281.58,1214.42 1282.16,1214.42 1282.75,1214.42 1283.34,1214.42 1283.92,1214.42 1284.51,1214.42 1285.1,1214.42 1285.68,1214.42 1286.27,1214.42 1286.86,1214.42 1287.44,1214.42 1288.03,1214.42 1288.61,1214.42 1289.2,1214.42 1289.79,1214.42 1290.37,1214.42 1290.96,1214.42 1291.55,1214.42 1292.13,1214.42 1292.72,1214.42 1293.31,1214.42 1293.89,1214.42 1294.48,1214.42 1295.06,1214.42 1295.65,1214.42 1296.24,1214.42 1296.82,1214.42 1297.41,1214.42 1298,1214.42 1298.58,1214.42 1299.17,1214.42 1299.76,1214.42 1300.34,1214.42 1300.93,1214.42 1301.52,1214.42 1302.1,1214.42 1302.69,1214.42 1303.27,1214.42 1303.86,1214.42 1304.45,1214.42 1305.03,1214.42 1305.62,1214.42 1306.21,1214.42 1306.79,1214.42 1307.38,1214.42 1307.97,1214.42 1308.55,1214.42 1309.14,1214.42 1309.73,1214.42 1310.31,1214.42 1310.9,1214.42 1311.48,1214.42 1312.07,1214.42 1312.66,1214.42 1313.24,1214.42 1313.83,1214.42 1314.42,1214.42 1315,1214.42 1315.59,1214.42 1316.18,1214.42 1316.76,1214.42 1317.35,1214.42 1317.93,1214.42 1318.52,1214.42 1319.11,1214.42 1319.69,1214.42 1320.28,1214.42 1320.87,1214.42 1321.45,1214.42 1322.04,1214.42 1322.63,1214.42 1323.21,1214.42 1323.8,1214.42 1324.39,1214.42 1324.97,1214.42 1325.56,1214.42 1326.14,1214.42 1326.73,1214.42 1327.32,1214.42 1327.9,1214.42 1328.49,1214.42 1329.08,1214.42 1329.66,1214.42 1330.25,1214.42 1330.84,1214.42 1331.42,1214.42 1332.01,1214.42 1332.6,1214.42 1333.18,1214.42 1333.77,1214.42 1334.35,1214.42 1334.94,1214.42 1335.53,1214.42 1336.11,1214.42 1336.7,1214.42 1337.29,1214.42 1337.87,1214.42 1338.46,1214.42 1339.05,1214.42 1339.63,1214.42 1340.22,1214.42 1340.8,1214.42 1341.39,1214.42 1341.98,1214.42 1342.56,1214.42 1343.15,1214.42 1343.74,1214.42 1344.32,1214.42 1344.91,1214.42 1345.5,1214.42 1346.08,1214.42 1346.67,1214.42 1347.26,1214.42 1347.84,1214.42 1348.43,1214.42 1349.01,1214.42 1349.6,1214.42 1350.19,1214.42 1350.77,1214.42 1351.36,1214.42 1351.95,1214.42 1352.53,1214.42 1353.12,1214.42 1353.71,1214.42 1354.29,1214.42 1354.88,1214.42 1355.47,1214.42 1356.05,1214.42 1356.64,1214.42 1357.22,1214.42 1357.81,1214.42 1358.4,1214.42 1358.98,1214.42 1359.57,1214.42 1360.16,1214.42 1360.74,1214.42 1361.33,1214.42 1361.92,1214.42 1362.5,1214.42 1363.09,1214.42 1363.68,1214.42 1364.26,1214.42 1364.85,1214.42 1365.43,1214.42 1366.02,1214.42 1366.61,1214.42 1367.19,1214.42 1367.78,1214.42 1368.37,1214.42 1368.95,1214.42 1369.54,1214.42 1370.13,1214.42 1370.71,1214.42 1371.3,1214.42 1371.88,1214.42 1372.47,1214.42 1373.06,1214.42 1373.64,1214.42 1374.23,1214.42 1374.82,1214.42 1375.4,1214.42 1375.99,1214.42 1376.58,1214.42 1377.16,1214.42 1377.75,1214.42 1378.34,1214.42 1378.92,1214.42 1379.51,1214.42 1380.09,1214.42 1380.68,1214.42 1381.27,1214.42 1381.85,1214.42 1382.44,1214.42 1383.03,1214.42 1383.61,1214.42 1384.2,1214.42 1384.79,1214.42 1385.37,1214.42 1385.96,1214.42 1386.55,1214.42 1387.13,1214.42 1387.72,1214.42 1388.3,1214.42 1388.89,1214.42 1389.48,1214.42 1390.06,1214.42 1390.65,1214.42 1391.24,1214.42 1391.82,1214.42 1392.41,1214.42 1393,1214.42 1393.58,1214.42 1394.17,1214.42 1394.75,1214.42 1395.34,1214.42 1395.93,1214.42 1396.51,1214.42 1397.1,1214.42 1397.69,1214.42 1398.27,1214.42 1398.86,1214.42 1399.45,1214.42 1400.03,1214.42 1400.62,1214.42 1401.21,1214.42 1401.79,1214.42 1402.38,1214.42 1402.96,1214.42 1403.55,1214.42 1404.14,1214.42 1404.72,1214.42 1405.31,1214.42 1405.9,1214.42 1406.48,1214.42 1407.07,1214.42 1407.66,1214.42 1408.24,1214.42 1408.83,1214.42 1409.42,1214.42 1410,1214.42 1410.59,1214.42 1411.17,1214.42 1411.76,1214.42 1412.35,1214.42 1412.93,1214.42 1413.52,1214.42 1414.11,1214.42 1414.69,1214.42 1415.28,1214.42 1415.87,1214.42 1416.45,1214.42 1417.04,1214.42 1417.63,1214.42 1418.21,1214.42 1418.8,1214.42 1419.38,1214.42 1419.97,1214.42 1420.56,1214.42 1421.14,1214.42 1421.73,1214.42 1422.32,1214.42 1422.9,1214.42 1423.49,1214.42 1424.08,1214.42 1424.66,1214.42 1425.25,1214.42 1425.83,1214.42 1426.42,1214.42 1427.01,1214.42 1427.59,1214.42 1428.18,1214.42 1428.77,1214.42 1429.35,1214.42 1429.94,1214.42 1430.53,1214.42 1431.11,1214.42 1431.7,1214.42 1432.29,1214.42 1432.87,1214.42 1433.46,1214.42 1434.04,1214.42 1434.63,1214.42 1435.22,1214.42 1435.8,1214.42 1436.39,1214.42 1436.98,1214.42 1437.56,1214.42 1438.15,1214.42 1438.74,1214.42 1439.32,1214.42 1439.91,1214.42 1440.5,1214.42 1441.08,1214.42 1441.67,1214.42 1442.25,1214.42 1442.84,1214.42 1443.43,1214.42 1444.01,1214.42 1444.6,1214.42 1445.19,1214.42 1445.77,1214.42 1446.36,1214.42 1446.95,1214.42 1447.53,1214.42 1448.12,1214.42 1448.7,1214.42 1449.29,1214.42 1449.88,1214.42 1450.46,1214.42 1451.05,1214.42 1451.64,1214.42 1452.22,1214.42 1452.81,1214.42 1453.4,1214.42 1453.98,1214.42 1454.57,1214.42 1455.16,1214.42 1455.74,1214.42 1456.33,1214.42 1456.91,1214.42 1457.5,1214.42 1458.09,1214.42 1458.67,1214.42 1459.26,1214.42 1459.85,1214.42 1460.43,1214.42 1461.02,1214.42 1461.61,1214.42 1462.19,1214.42 1462.78,1214.42 1463.37,1214.42 1463.95,1214.42 1464.54,1214.42 1465.12,1214.42 1465.71,1214.42 1466.3,1214.42 1466.88,1214.42 1467.47,1214.42 1468.06,1214.42 1468.64,1214.42 1469.23,1214.42 1469.82,1214.42 1470.4,1214.42 1470.99,1214.42 1471.57,1214.42 1472.16,1214.42 1472.75,1214.42 1473.33,1214.42 1473.92,1214.42 1474.51,1214.42 1475.09,1214.42 1475.68,1214.42 1476.27,1214.42 1476.85,1214.42 1477.44,1214.42 1478.03,1214.42 1478.61,1214.42 1479.2,1214.42 1479.78,1214.42 1480.37,1214.42 1480.96,1214.42 1481.54,1214.42 1482.13,1214.42 1482.72,1214.42 1483.3,1214.42 1483.89,1214.42 1484.48,1214.42 1485.06,1214.42 1485.65,1214.42 1486.24,1214.42 1486.82,1214.42 1487.41,1214.42 1487.99,1214.42 1488.58,1214.42 1489.17,1214.42 1489.75,1214.42 1490.34,1214.42 1490.93,1214.42 1491.51,1214.42 1492.1,1214.42 1492.69,1214.42 1493.27,1214.42 1493.86,1214.42 1494.45,1214.42 1495.03,1214.42 1495.62,1214.42 1496.2,1214.42 1496.79,1214.42 1497.38,1214.42 1497.96,1214.42 1498.55,1214.42 1499.14,1214.42 1499.72,1214.42 1500.31,1214.42 1500.9,1214.42 1501.48,1214.42 1502.07,1214.42 1502.65,1214.42 1503.24,1214.42 1503.83,1214.42 1504.41,1214.42 1505,1214.42 1505.59,1214.42 1506.17,1214.42 1506.76,1214.42 1507.35,1214.42 1507.93,1214.42 1508.52,1214.42 1509.11,1214.42 1509.69,1214.42 1510.28,1214.42 1510.86,1214.42 1511.45,1214.42 1512.04,1214.42 1512.62,1214.42 1513.21,1214.42 1513.8,1214.42 1514.38,1214.42 1514.97,1214.42 1515.56,1214.42 1516.14,1214.42 1516.73,1214.42 1517.32,1214.42 1517.9,1214.42 1518.49,1214.42 1519.07,1214.42 1519.66,1214.42 1520.25,1214.42 1520.83,1214.42 1521.42,1214.42 1522.01,1214.42 1522.59,1214.42 1523.18,1214.42 1523.77,1214.42 1524.35,1214.42 1524.94,1214.42 1525.52,1214.42 1526.11,1214.42 1526.7,1214.42 1527.28,1214.42 1527.87,1214.42 1528.46,1214.42 1529.04,1214.42 1529.63,1214.42 1530.22,1214.42 1530.8,1214.42 1531.39,1214.42 1531.98,1214.42 1532.56,1214.42 1533.15,1214.42 1533.73,1214.42 1534.32,1214.42 1534.91,1214.42 1535.49,1214.42 1536.08,1214.42 1536.67,1214.42 1537.25,1214.42 1537.84,1214.42 1538.43,1214.42 1539.01,1214.42 1539.6,1214.42 1540.19,1214.42 1540.77,1214.42 1541.36,1214.42 1541.94,1214.42 1542.53,1214.42 1543.12,1214.42 1543.7,1214.42 1544.29,1214.42 1544.88,1214.42 1545.46,1214.42 1546.05,1214.42 1546.64,1214.42 1547.22,1214.42 1547.81,1214.42 1548.4,1214.42 1548.98,1214.42 1549.57,1214.42 1550.15,1214.42 1550.74,1214.42 1551.33,1214.42 1551.91,1214.42 1552.5,1214.42 1553.09,1214.42 1553.67,1214.42 1554.26,1214.42 1554.85,1214.42 1555.43,1214.42 1556.02,1214.42 1556.6,1214.42 1557.19,1214.42 1557.78,1214.42 1558.36,1214.42 1558.95,1214.42 1559.54,1214.42 1560.12,1214.42 1560.71,1214.42 1561.3,1214.42 1561.88,1214.42 1562.47,1214.42 1563.06,1214.42 1563.64,1214.42 1564.23,1214.42 1564.81,1214.42 1565.4,1214.42 1565.99,1214.42 1566.57,1214.42 1567.16,1214.42 1567.75,1214.42 1568.33,1214.42 1568.92,1214.42 1569.51,1214.42 1570.09,1214.42 1570.68,1214.42 1571.27,1214.42 1571.85,1214.42 1572.44,1214.42 1573.02,1214.42 1573.61,1214.42 1574.2,1214.42 1574.78,1214.42 1575.37,1214.42 1575.96,1214.42 1576.54,1214.42 1577.13,1214.42 1577.72,1214.42 1578.3,1214.42 1578.89,1214.42 1579.47,1214.42 1580.06,1214.42 1580.65,1214.42 1581.23,1214.42 1581.82,1214.42 1582.41,1214.42 1582.99,1214.42 1583.58,1214.42 1584.17,1214.42 1584.75,1214.42 1585.34,1214.42 1585.93,1214.42 1586.51,1214.42 1587.1,1214.42 1587.68,1214.42 1588.27,1214.42 1588.86,1214.42 1589.44,1214.42 1590.03,1214.42 1590.62,1214.42 1591.2,1214.42 1591.79,1214.42 1592.38,1214.42 1592.96,1214.42 1593.55,1214.42 1594.14,1214.42 1594.72,1214.42 1595.31,1214.42 1595.89,1214.42 1596.48,1214.42 1597.07,1214.42 1597.65,1214.42 1598.24,1214.42 1598.83,1214.42 1599.41,1214.42 1600,1214.42 1600.59,1214.42 1601.17,1214.42 1601.76,1214.42 1602.34,1214.42 1602.93,1214.42 1603.52,1214.42 1604.1,1214.42 1604.69,1214.42 1605.28,1214.42 1605.86,1214.42 1606.45,1214.42 1607.04,1214.42 1607.62,1214.42 1608.21,1214.42 1608.8,1214.42 1609.38,1214.42 1609.97,1214.42 1610.55,1214.42 1611.14,1214.42 1611.73,1214.42 1612.31,1214.42 1612.9,1214.42 1613.49,1214.42 1614.07,1214.42 1614.66,1214.42 1615.25,1214.42 1615.83,1214.42 1616.42,1214.42 1617.01,1214.42 1617.59,1214.42 1618.18,1214.42 1618.76,1214.42 1619.35,1214.42 1619.94,1214.42 1620.52,1214.42 1621.11,1214.42 1621.7,1214.42 1622.28,1214.42 1622.87,1214.42 1623.46,1214.42 1624.04,1214.42 1624.63,1214.42 1625.22,1214.42 1625.8,1214.42 1626.39,1214.42 1626.97,1214.42 1627.56,1214.42 1628.15,1214.42 1628.73,1214.42 1629.32,1214.42 1629.91,1214.42 1630.49,1214.42 1631.08,1214.42 1631.67,1214.42 1632.25,1214.42 1632.84,1214.42 1633.42,1214.42 1634.01,1214.42 1634.6,1214.42 1635.18,1214.42 1635.77,1214.42 1636.36,1214.42 1636.94,1214.42 1637.53,1214.42 1638.12,1214.42 1638.7,1214.42 1639.29,1214.42 1639.88,1214.42 1640.46,1214.42 1641.05,1214.42 1641.63,1214.42 1642.22,1214.42 1642.81,1214.42 1643.39,1214.42 1643.98,1214.42 1644.57,1214.42 1645.15,1214.42 1645.74,1214.42 1646.33,1214.42 1646.91,1214.42 1647.5,1214.42 1648.09,1214.42 1648.67,1214.42 1649.26,1214.42 1649.84,1214.42 1650.43,1214.42 1651.02,1214.42 1651.6,1214.42 1652.19,1214.42 1652.78,1214.42 1653.36,1214.42 1653.95,1214.42 1654.54,1214.42 1655.12,1214.42 1655.71,1214.42 1656.29,1214.42 1656.88,1214.42 1657.47,1214.42 1658.05,1214.42 1658.64,1214.42 1659.23,1214.42 1659.81,1214.42 1660.4,1214.42 1660.99,1214.42 1661.57,1214.42 1662.16,1214.42 1662.75,1214.42 1663.33,1214.42 1663.92,1214.42 1664.5,1214.42 1665.09,1214.42 1665.68,1214.42 1666.26,1214.42 1666.85,1214.42 1667.44,1214.42 1668.02,1214.42 1668.61,1214.42 1669.2,1214.42 1669.78,1214.42 1670.37,1214.42 1670.96,1214.42 1671.54,1214.42 1672.13,1214.42 1672.71,1214.42 1673.3,1214.42 1673.89,1214.42 1674.47,1214.42 1675.06,1214.42 1675.65,1214.42 1676.23,1214.42 1676.82,1214.42 1677.41,1214.42 1677.99,1214.42 1678.58,1214.42 1679.17,1214.42 1679.75,1214.42 1680.34,1214.42 1680.92,1214.42 1681.51,1214.42 1682.1,1214.42 1682.68,1214.42 1683.27,1214.42 1683.86,1214.42 1684.44,1214.42 1685.03,1214.42 1685.62,1214.42 1686.2,1214.42 1686.79,1214.42 1687.37,1214.42 1687.96,1214.42 1688.55,1214.42 1689.13,1214.42 1689.72,1214.42 1690.31,1214.42 1690.89,1214.42 1691.48,1214.42 1692.07,1214.42 1692.65,1214.42 1693.24,1214.42 1693.83,1214.42 1694.41,1214.42 1695,1214.42 1695.58,1214.42 1696.17,1214.42 1696.76,1214.42 1697.34,1214.42 1697.93,1214.42 1698.52,1214.42 1699.1,1214.42 1699.69,1214.42 1700.28,1214.42 1700.86,1214.42 1701.45,1214.42 1702.04,1214.42 1702.62,1214.42 1703.21,1214.42 1703.79,1214.42 1704.38,1214.42 1704.97,1214.42 1705.55,1214.42 1706.14,1214.42 1706.73,1214.42 1707.31,1214.42 1707.9,1214.42 1708.49,1214.42 1709.07,1214.42 1709.66,1214.42 1710.24,1214.42 1710.83,1214.42 1711.42,1214.42 1712,1214.42 1712.59,1214.42 1713.18,1214.42 1713.76,1214.42 1714.35,1214.42 1714.94,1214.42 1715.52,1214.42 1716.11,1214.42 1716.7,1214.42 1717.28,1214.42 1717.87,1214.42 1718.45,1214.42 1719.04,1214.42 1719.63,1214.42 1720.21,1214.42 1720.8,1214.42 1721.39,1214.42 1721.97,1214.42 1722.56,1214.42 1723.15,1214.42 1723.73,1214.42 1724.32,1214.42 1724.91,1214.42 1725.49,1214.42 1726.08,1214.42 1726.66,1214.42 1727.25,1214.42 1727.84,1214.42 1728.42,1214.42 1729.01,1214.42 1729.6,1214.42 1730.18,1214.42 1730.77,1214.42 1731.36,1214.42 1731.94,1214.42 1732.53,1214.42 1733.11,1214.42 1733.7,1214.42 1734.29,1214.42 1734.87,1214.42 1735.46,1214.42 1736.05,1214.42 1736.63,1214.42 1737.22,1214.42 1737.81,1214.42 1738.39,1214.42 1738.98,1214.42 1739.57,1214.42 1740.15,1214.42 1740.74,1214.42 1741.32,1214.42 1741.91,1214.42 1742.5,1214.42 1743.08,1214.42 1743.67,1214.42 1744.26,1214.42 1744.84,1214.42 1745.43,1214.42 1746.02,1214.42 1746.6,1214.42 1747.19,1214.42 1747.78,1214.42 1748.36,1214.42 1748.95,1214.42 1749.53,1214.42 1750.12,1214.42 1750.71,1214.42 1751.29,1214.42 1751.88,1214.42 1752.47,1214.42 1753.05,1214.42 1753.64,1214.42 1754.23,1214.42 1754.81,1214.42 1755.4,1214.42 1755.99,1214.42 1756.57,1214.42 1757.16,1214.42 1757.74,1214.42 1758.33,1214.42 1758.92,1214.42 1759.5,1214.42 1760.09,1214.42 1760.68,1214.42 1761.26,1214.42 1761.85,1214.42 1762.44,1214.42 1763.02,1214.42 1763.61,1214.42 1764.19,1214.42 1764.78,1214.42 1765.37,1214.42 1765.95,1214.42 1766.54,1214.42 1767.13,1214.42 1767.71,1214.42 1768.3,1214.42 1768.89,1214.42 1769.47,1214.42 1770.06,1214.42 1770.65,1214.42 1771.23,1214.42 1771.82,1214.42 1772.4,1214.42 1772.99,1214.42 1773.58,1214.42 1774.16,1214.42 1774.75,1214.42 1775.34,1214.42 1775.92,1214.42 1776.51,1214.42 1777.1,1214.42 1777.68,1214.42 1778.27,1214.42 1778.86,1214.42 1779.44,1214.42 1780.03,1214.42 1780.61,1214.42 1781.2,1214.42 1781.79,1214.42 1782.37,1214.42 1782.96,1214.42 1783.55,1214.42 1784.13,1214.42 1784.72,1214.42 1785.31,1214.42 1785.89,1214.42 1786.48,1214.42 1787.06,1214.42 1787.65,1214.42 1788.24,1214.42 1788.82,1214.42 1789.41,1214.42 1790,1214.42 1790.58,1214.42 1791.17,1214.42 1791.76,1214.42 1792.34,1214.42 1792.93,1214.42 1793.52,1214.42 1794.1,1214.42 1794.69,1214.42 1795.27,1214.42 1795.86,1214.42 1796.45,1214.42 1797.03,1214.42 1797.62,1214.42 1798.21,1214.42 1798.79,1214.42 1799.38,1214.42 1799.97,1214.42 1800.55,1214.42 1801.14,1214.42 1801.73,1214.42 1802.31,1214.42 1802.9,1214.42 1803.48,1214.42 1804.07,1214.42 1804.66,1214.42 1805.24,1214.42 1805.83,1214.42 1806.42,1214.42 1807,1214.42 1807.59,1214.42 1808.18,1214.42 1808.76,1214.42 1809.35,1214.42 1809.94,1214.42 1810.52,1214.42 1811.11,1214.42 1811.69,1214.42 1812.28,1214.42 1812.87,1214.42 1813.45,1214.42 1814.04,1214.42 1814.63,1214.42 1815.21,1214.42 1815.8,1214.42 1816.39,1214.42 1816.97,1214.42 1817.56,1214.42 1818.14,1214.42 1818.73,1214.42 1819.32,1214.42 1819.9,1214.42 1820.49,1214.42 1821.08,1214.42 1821.66,1214.42 1822.25,1214.42 1822.84,1214.42 1823.42,1214.42 1824.01,1214.42 1824.6,1214.42 1825.18,1214.42 1825.77,1214.42 1826.35,1214.42 1826.94,1214.42 1827.53,1214.42 1828.11,1214.42 1828.7,1214.42 1829.29,1214.42 1829.87,1214.42 1830.46,1214.42 1831.05,1214.42 1831.63,1214.42 1832.22,1214.42 1832.81,1214.42 1833.39,1214.42 1833.98,1214.42 1834.56,1214.42 1835.15,1214.42 1835.74,1214.42 1836.32,1214.42 1836.91,1214.42 1837.5,1214.42 1838.08,1214.42 1838.67,1214.42 1839.26,1214.42 1839.84,1214.42 1840.43,1214.42 1841.01,1214.42 1841.6,1214.42 1842.19,1214.42 1842.77,1214.42 1843.36,1214.42 1843.95,1214.42 1844.53,1214.42 1845.12,1214.42 1845.71,1214.42 1846.29,1214.42 1846.88,1214.42 1847.47,1214.42 1848.05,1214.42 1848.64,1214.42 1849.22,1214.42 1849.81,1214.42 1850.4,1214.42 1850.98,1214.42 1851.57,1214.42 1852.16,1214.42 1852.74,1214.42 1853.33,1214.42 1853.92,1214.42 1854.5,1214.42 1855.09,1214.42 1855.68,1214.42 1856.26,1214.42 1856.85,1214.42 1857.43,1214.42 1858.02,1214.42 1858.61,1214.42 1859.19,1214.42 1859.78,1214.42 1860.37,1214.42 1860.95,1214.42 1861.54,1214.42 1862.13,1214.42 1862.71,1214.42 1863.3,1214.42 1863.88,1214.42 1864.47,1214.42 1865.06,1214.42 1865.64,1214.42 1866.23,1214.42 1866.82,1214.42 1867.4,1214.42 1867.99,1214.42 1868.58,1214.42 1869.16,1214.42 1869.75,1214.42 1870.34,1214.42 1870.92,1214.42 1871.51,1214.42 1872.09,1214.42 1872.68,1214.42 1873.27,1214.42 1873.85,1214.42 1874.44,1214.42 1875.03,1214.42 1875.61,1214.42 1876.2,1214.42 1876.79,1214.42 1877.37,1214.42 1877.96,1214.42 1878.55,1214.42 1879.13,1214.42 1879.72,1214.42 1880.3,1214.42 1880.89,1214.42 1881.48,1214.42 1882.06,1214.42 1882.65,1214.42 1883.24,1214.42 1883.82,1214.42 1884.41,1214.42 1885,1214.42 1885.58,1214.42 1886.17,1214.42 1886.76,1214.42 1887.34,1214.42 1887.93,1214.42 1888.51,1214.42 1889.1,1214.42 1889.69,1214.42 1890.27,1214.42 1890.86,1214.42 1891.45,1214.42 1892.03,1214.42 1892.62,1214.42 1893.21,1214.42 1893.79,1214.42 1894.38,1214.42 1894.96,1214.42 1895.55,1214.42 1896.14,1214.42 1896.72,1214.42 1897.31,1214.42 1897.9,1214.42 1898.48,1214.42 1899.07,1214.42 1899.66,1214.42 1900.24,1214.42 1900.83,1214.42 1901.42,1214.42 1902,1214.42 1902.59,1214.42 1903.17,1214.42 1903.76,1214.42 1904.35,1214.42 1904.93,1214.42 1905.52,1214.42 1906.11,1214.42 1906.69,1214.42 1907.28,1214.42 1907.87,1214.42 1908.45,1214.42 1909.04,1214.42 1909.63,1214.42 1910.21,1214.42 1910.8,1214.42 1911.38,1214.42 1911.97,1214.42 1912.56,1214.42 1913.14,1214.42 1913.73,1214.42 1914.32,1214.42 1914.9,1214.42 1915.49,1214.42 1916.08,1214.42 1916.66,1214.42 1917.25,1214.42 1917.83,1214.42 1918.42,1214.42 1919.01,1214.42 1919.59,1214.42 1920.18,1214.42 1920.77,1214.42 1921.35,1214.42 1921.94,1214.42 1922.53,1214.42 1923.11,1214.42 1923.7,1214.42 1924.29,1214.42 1924.87,1214.42 1925.46,1214.42 1926.04,1214.42 1926.63,1214.42 1927.22,1214.42 1927.8,1214.42 1928.39,1214.42 1928.98,1214.42 1929.56,1214.42 1930.15,1214.42 1930.74,1214.42 1931.32,1214.42 1931.91,1214.42 1932.5,1214.42 1933.08,1214.42 1933.67,1214.42 1934.25,1214.42 1934.84,1214.42 1935.43,1214.42 1936.01,1214.42 1936.6,1214.42 1937.19,1214.42 1937.77,1214.42 1938.36,1214.42 1938.95,1214.42 1939.53,1214.42 1940.12,1214.42 1940.71,1214.42 1941.29,1214.42 1941.88,1214.42 1942.46,1214.42 1943.05,1214.42 1943.64,1214.42 1944.22,1214.42 1944.81,1214.42 1945.4,1214.42 1945.98,1214.42 1946.57,1214.42 1947.16,1214.42 1947.74,1214.42 1948.33,1214.42 1948.91,1214.42 1949.5,1214.42 1950.09,1214.42 1950.67,1214.42 1951.26,1214.42 1951.85,1214.42 1952.43,1214.42 1953.02,1214.42 1953.61,1214.42 1954.19,1214.42 1954.78,1214.42 1955.37,1214.42 1955.95,1214.42 1956.54,1214.42 1957.12,1214.42 1957.71,1214.42 1958.3,1214.42 1958.88,1214.42 1959.47,1214.42 1960.06,1214.42 1960.64,1214.42 1961.23,1214.42 1961.82,1214.42 1962.4,1214.42 1962.99,1214.42 1963.58,1214.42 1964.16,1214.42 1964.75,1214.42 1965.33,1214.42 1965.92,1214.42 1966.51,1214.42 1967.09,1214.42 1967.68,1214.42 1968.27,1214.42 1968.85,1214.42 1969.44,1214.42 1970.03,1214.42 1970.61,1214.42 1971.2,1214.42 1971.78,1214.42 1972.37,1214.42 1972.96,1214.42 1973.54,1214.42 1974.13,1214.42 1974.72,1214.42 1975.3,1214.42 1975.89,1214.42 1976.48,1214.42 1977.06,1214.42 1977.65,1214.42 1978.24,1214.42 1978.82,1214.42 1979.41,1214.42 1979.99,1214.42 1980.58,1214.42 1981.17,1214.42 1981.75,1214.42 1982.34,1214.42 1982.93,1214.42 1983.51,1214.42 1984.1,1214.42 1984.69,1214.42 1985.27,1214.42 1985.86,1214.42 1986.45,1214.42 1987.03,1214.42 1987.62,1214.42 1988.2,1214.42 1988.79,1214.42 1989.38,1214.42 1989.96,1214.42 1990.55,1214.42 1991.14,1214.42 1991.72,1214.42 1992.31,1214.42 1992.9,1214.42 1993.48,1214.42 1994.07,1214.42 1994.65,1214.42 1995.24,1214.42 1995.83,1214.42 1996.41,1214.42 1997,1214.42 1997.59,1214.42 1998.17,1214.42 1998.76,1214.42 1999.35,1214.42 1999.93,1214.42 2000.52,1214.42 2001.11,1214.42 2001.69,1214.42 2002.28,1214.42 2002.86,1214.42 2003.45,1214.42 2004.04,1214.42 2004.62,1214.42 2005.21,1214.42 2005.8,1214.42 2006.38,1214.42 2006.97,1214.42 2007.56,1214.42 2008.14,1214.42 2008.73,1214.42 2009.32,1214.42 2009.9,1214.42 2010.49,1214.42 2011.07,1214.42 2011.66,1214.42 2012.25,1214.42 2012.83,1214.42 2013.42,1214.42 2014.01,1214.42 2014.59,1214.42 2015.18,1214.42 2015.77,1214.42 2016.35,1214.42 2016.94,1214.42 2017.53,1214.42 2018.11,1214.42 2018.7,1214.42 2019.28,1214.42 2019.87,1214.42 2020.46,1214.42 2021.04,1214.42 2021.63,1214.42 2022.22,1214.42 2022.8,1214.42 2023.39,1214.42 2023.98,1214.42 2024.56,1214.42 2025.15,1214.42 2025.73,1214.42 2026.32,1214.42 2026.91,1214.42 2027.49,1214.42 2028.08,1214.42 2028.67,1214.42 2029.25,1214.42 2029.84,1214.42 2030.43,1214.42 2031.01,1214.42 2031.6,1214.42 2032.19,1214.42 2032.77,1214.42 2033.36,1214.42 2033.94,1214.42 2034.53,1214.42 2035.12,1214.42 2035.7,1214.42 2036.29,1214.42 2036.88,1214.42 2037.46,1214.42 2038.05,1214.42 2038.64,1214.42 2039.22,1214.42 2039.81,1214.42 2040.4,1214.42 2040.98,1214.42 2041.57,1214.42 2042.15,1214.42 2042.74,1214.42 2043.33,1214.42 2043.91,1214.42 2044.5,1214.42 2045.09,1214.42 2045.67,1214.42 2046.26,1214.42 2046.85,1214.42 2047.43,1214.42 2048.02,1214.42 2048.6,1214.42 2049.19,1214.42 2049.78,1214.42 2050.36,1214.42 2050.95,1214.42 2051.54,1214.42 2052.12,1214.42 2052.71,1214.42 2053.3,1214.42 2053.88,1214.42 2054.47,1214.42 2055.06,1214.42 2055.64,1214.42 2056.23,1214.42 2056.81,1214.42 2057.4,1214.42 2057.99,1214.42 2058.57,1214.42 2059.16,1214.42 2059.75,1214.42 2060.33,1214.42 2060.92,1214.42 2061.51,1214.42 2062.09,1214.42 2062.68,1214.42 2063.27,1214.42 2063.85,1214.42 2064.44,1214.42 2065.02,1214.42 2065.61,1214.42 2066.2,1214.42 2066.78,1214.42 2067.37,1214.42 2067.96,1214.42 2068.54,1214.42 2069.13,1214.42 2069.72,1214.42 2070.3,1214.42 2070.89,1214.42 2071.48,1214.42 2072.06,1214.42 2072.65,1214.42 2073.23,1214.42 2073.82,1214.42 2074.41,1214.42 2074.99,1214.42 2075.58,1214.42 2076.17,1214.42 2076.75,1214.42 2077.34,1214.42 2077.93,1214.42 2078.51,1214.42 2079.1,1214.42 2079.68,1214.42 2080.27,1214.42 2080.86,1214.42 2081.44,1214.42 2082.03,1214.42 2082.62,1214.42 2083.2,1214.42 2083.79,1214.42 2084.38,1214.42 2084.96,1214.42 2085.55,1214.42 2086.14,1214.42 2086.72,1214.42 2087.31,1214.42 2087.89,1214.42 2088.48,1214.42 2089.07,1214.42 2089.65,1214.42 2090.24,1214.42 2090.83,1214.42 2091.41,1214.42 2092,1214.42 2092.59,1214.42 2093.17,1214.42 2093.76,1214.42 2094.35,1214.42 2094.93,1214.42 2095.52,1214.42 2096.1,1214.42 2096.69,1214.42 2097.28,1214.42 2097.86,1214.42 2098.45,1214.42 2099.04,1214.42 2099.62,1214.42 2100.21,1214.42 2100.8,1214.42 2101.38,1214.42 2101.97,1214.42 2102.55,1214.42 2103.14,1214.42 2103.73,1214.42 2104.31,1214.42 2104.9,1214.42 2105.49,1214.42 2106.07,1214.42 2106.66,1214.42 2107.25,1214.42 2107.83,1214.42 2108.42,1214.42 2109.01,1214.42 2109.59,1214.42 2110.18,1214.42 2110.76,1214.42 2111.35,1214.42 2111.94,1214.42 2112.52,1214.42 2113.11,1214.42 2113.7,1214.42 2114.28,1214.42 2114.87,1214.42 2115.46,1214.42 2116.04,1214.42 2116.63,1214.42 2117.22,1214.42 2117.8,1214.42 2118.39,1214.42 2118.97,1214.42 2119.56,1214.42 2120.15,1214.42 2120.73,1214.42 2121.32,1214.42 2121.91,1214.42 2122.49,1214.42 2123.08,1214.42 2123.67,1214.42 2124.25,1214.42 2124.84,1214.42 2125.42,1214.42 2126.01,1214.42 2126.6,1214.42 2127.18,1214.42 2127.77,1214.42 2128.36,1214.42 2128.94,1214.42 2129.53,1214.42 2130.12,1214.42 2130.7,1214.42 2131.29,1214.42 2131.88,1214.42 2132.46,1214.42 2133.05,1214.42 2133.63,1214.42 2134.22,1214.42 2134.81,1214.42 2135.39,1214.42 2135.98,1214.42 2136.57,1214.42 2137.15,1214.42 2137.74,1214.42 2138.33,1214.42 2138.91,1214.42 2139.5,1214.42 2140.09,1214.42 2140.67,1214.42 2141.26,1214.42 2141.84,1214.42 2142.43,1214.42 2143.02,1214.42 2143.6,1214.42 2144.19,1214.42 2144.78,1214.42 2145.36,1214.42 2145.95,1214.42 2146.54,1214.42 2147.12,1214.42 2147.71,1214.42 2148.3,1214.42 2148.88,1214.42 2149.47,1214.42 2150.05,1214.42 2150.64,1214.42 2151.23,1214.42 2151.81,1214.42 2152.4,1214.42 2152.99,1214.42 2153.57,1214.42 2154.16,1214.42 2154.75,1214.42 2155.33,1214.42 2155.92,1214.42 2156.5,1214.42 2157.09,1214.42 2157.68,1214.42 2158.26,1214.42 \"/>\n<path clip-path=\"url(#clip502)\" d=\"M986.025 1214.13 L986.612 1214.13 L987.198 1214.13 L987.785 1214.13 L988.371 1214.13 L988.957 1214.13 L989.544 1214.13 L990.13 1214.13 L990.717 1214.13 L991.303 1214.13 L991.889 1214.13 L992.476 1214.13 L993.062 1214.13 L993.649 1214.13 L994.235 1214.13 L994.822 1214.13 L995.408 1214.13 L995.994 1214.13 L996.581 1214.13 L997.167 1214.13 L997.754 1214.13 L998.34 1214.13 L998.926 1214.13 L999.513 1214.13 L1000.1 1214.13 L1000.69 1214.13 L1001.27 1214.13 L1001.86 1214.13 L1002.44 1214.13 L1003.03 1214.13 L1003.62 1214.13 L1004.2 1214.13 L1004.79 1214.13 L1005.38 1214.13 L1005.96 1214.13 L1006.55 1214.13 L1007.14 1214.13 L1007.72 1214.13 L1008.31 1214.13 L1008.9 1214.13 L1009.48 1214.13 L1010.07 1214.13 L1010.65 1214.13 L1011.24 1214.13 L1011.83 1214.13 L1012.41 1214.13 L1013 1214.13 L1013.59 1214.13 L1014.17 1214.13 L1014.76 1214.13 L1015.35 1214.13 L1015.93 1214.13 L1016.52 1214.13 L1017.11 1214.13 L1017.69 1214.13 L1018.28 1214.13 L1018.86 1214.13 L1019.45 1214.13 L1020.04 1214.13 L1020.62 1214.13 L1021.21 1214.13 L1021.8 1214.13 L1022.38 1214.13 L1022.97 1214.13 L1023.56 1214.13 L1024.14 1214.13 L1024.73 1214.13 L1025.32 1214.13 L1025.9 1214.13 L1026.49 1214.13 L1027.07 1214.13 L1027.66 1214.13 L1028.25 1214.13 L1028.83 1214.13 L1029.42 1214.13 L1030.01 1214.13 L1030.59 1214.13 L1031.18 1214.13 L1031.77 1214.13 L1032.35 1214.13 L1032.94 1214.13 L1033.52 1214.13 L1034.11 1214.13 L1034.7 1214.13 L1035.28 1214.13 L1035.87 1214.13 L1036.46 1214.13 L1037.04 1214.13 L1037.63 1214.13 L1038.22 1214.13 L1038.8 1214.13 L1039.39 1214.13 L1039.98 1214.13 L1040.56 1214.13 L1041.15 1214.13 L1041.73 1214.13 L1042.32 1214.13 L1042.91 1214.13 L1043.49 1214.13 L1044.08 1214.13 L1044.67 1214.13 L1045.25 1214.13 L1045.84 1214.13 L1046.43 1214.13 L1047.01 1214.13 L1047.6 1214.13 L1048.19 1214.13 L1048.77 1214.13 L1049.36 1214.13 L1049.94 1214.13 L1050.53 1214.13 L1051.12 1214.13 L1051.7 1214.13 L1052.29 1214.13 L1052.88 1214.13 L1053.46 1214.13 L1054.05 1214.13 L1054.64 1214.13 L1055.22 1214.13 L1055.81 1214.13 L1056.39 1214.13 L1056.98 1214.13 L1057.57 1214.13 L1058.15 1214.13 L1058.74 1214.13 L1059.33 1214.13 L1059.91 1214.13 L1060.5 1214.13 L1061.09 1214.13 L1061.67 1214.13 L1062.26 1214.13 L1062.85 1214.13 L1063.43 1214.13 L1064.02 1214.13 L1064.6 1214.13 L1065.19 1214.13 L1065.78 1214.13 L1066.36 1214.13 L1066.95 1214.13 L1067.54 1214.13 L1068.12 1214.13 L1068.71 1214.13 L1069.3 1214.13 L1069.88 1214.13 L1070.47 1214.13 L1071.06 1214.13 L1071.64 1214.13 L1072.23 1214.13 L1072.81 1214.13 L1073.4 1214.13 L1073.99 1214.13 L1074.57 1214.13 L1075.16 1214.13 L1075.75 1214.13 L1076.33 1214.13 L1076.92 1214.13 L1077.51 1214.13 L1078.09 1214.13 L1078.68 1214.13 L1079.26 1214.13 L1079.85 1214.13 L1080.44 1214.13 L1081.02 1214.13 L1081.61 1214.13 L1082.2 1214.13 L1082.78 1214.13 L1083.37 1214.13 L1083.96 1214.13 L1084.54 1214.13 L1085.13 1214.13 L1085.72 1214.13 L1086.3 1214.13 L1086.89 1214.13 L1087.47 1214.13 L1088.06 1214.13 L1088.65 1214.13 L1089.23 1214.13 L1089.82 1214.13 L1090.41 1214.13 L1090.99 1214.13 L1091.58 1214.13 L1092.17 1214.13 L1092.75 1214.13 L1093.34 1214.13 L1093.93 1214.13 L1094.51 1214.13 L1095.1 1214.13 L1095.68 1214.13 L1096.27 1214.13 L1096.86 1214.13 L1097.44 1214.13 L1098.03 1214.13 L1098.62 1214.13 L1099.2 1214.13 L1099.79 1214.13 L1100.38 1214.13 L1100.96 1214.13 L1101.55 1214.13 L1102.14 1214.13 L1102.72 1214.13 L1103.31 1214.13 L1103.89 1214.13 L1104.48 1214.13 L1105.07 1214.13 L1105.65 1214.13 L1106.24 1214.13 L1106.83 1214.13 L1107.41 1214.13 L1108 1214.13 L1108.59 1214.13 L1109.17 1214.13 L1109.76 1214.13 L1110.34 1214.13 L1110.93 1214.13 L1111.52 1214.13 L1112.1 1214.13 L1112.69 1214.13 L1113.28 1214.13 L1113.86 1214.13 L1114.45 1214.13 L1115.04 1214.13 L1115.62 1214.13 L1116.21 1214.13 L1116.8 1214.13 L1117.38 1214.13 L1117.97 1214.13 L1118.55 1214.13 L1119.14 1214.13 L1119.73 1214.13 L1120.31 1214.13 L1120.9 1214.13 L1121.49 1214.13 L1122.07 1214.13 L1122.66 1214.13 L1123.25 1214.13 L1123.83 1214.13 L1124.42 1214.13 L1125.01 1214.13 L1125.59 1214.13 L1126.18 1214.13 L1126.76 1214.13 L1127.35 1214.13 L1127.94 1214.13 L1128.52 1214.13 L1129.11 1214.13 L1129.7 1214.13 L1130.28 1214.13 L1130.87 1214.13 L1131.46 1214.13 L1132.04 1214.13 L1132.63 1214.13 L1133.21 1214.13 L1133.8 1214.13 L1134.39 1214.13 L1134.97 1214.13 L1135.56 1214.13 L1136.15 1214.13 L1136.73 1214.13 L1137.32 1214.13 L1137.91 1214.13 L1138.49 1214.13 L1139.08 1214.13 L1139.67 1214.13 L1140.25 1214.13 L1140.84 1214.13 L1141.42 1214.13 L1142.01 1214.13 L1142.6 1214.13 L1143.18 1214.13 L1143.77 1214.13 L1144.36 1214.13 L1144.94 1214.13 L1145.53 1214.13 L1146.12 1214.13 L1146.7 1214.13 L1147.29 1214.13 L1147.88 1214.13 L1148.46 1214.13 L1149.05 1214.13 L1149.63 1214.13 L1150.22 1214.13 L1150.81 1214.13 L1151.39 1214.13 L1151.98 1214.13 L1152.57 1214.13 L1153.15 1214.13 L1153.74 1214.13 L1154.33 1214.13 L1154.91 1214.13 L1155.5 1214.13 L1156.09 1214.13 L1156.67 1214.13 L1157.26 1214.13 L1157.84 1214.13 L1158.43 1214.13 L1159.02 1214.13 L1159.6 1214.13 L1160.19 1214.13 L1160.78 1214.13 L1161.36 1214.13 L1161.95 1214.13 L1162.54 1214.13 L1163.12 1214.13 L1163.71 1214.13 L1164.29 1214.13 L1164.88 1214.13 L1165.47 1214.13 L1166.05 1214.13 L1166.64 1214.13 L1167.23 1214.13 L1167.81 1214.13 L1168.4 1214.13 L1168.99 1214.13 L1169.57 1214.13 L1170.16 1214.13 L1170.75 1214.13 L1171.33 1214.13 L1171.92 1214.13 L1172.5 1214.13 L1173.09 1214.13 L1173.68 1214.13 L1174.26 1214.13 L1174.85 1214.13 L1175.44 1214.13 L1176.02 1214.13 L1176.61 1214.13 L1177.2 1214.13 L1177.78 1214.13 L1178.37 1214.13 L1178.96 1214.13 L1179.54 1214.13 L1180.13 1214.13 L1180.71 1214.13 L1181.3 1214.13 L1181.89 1214.13 L1182.47 1214.13 L1183.06 1214.13 L1183.65 1214.13 L1184.23 1214.13 L1184.82 1214.13 L1185.41 1214.13 L1185.99 1214.13 L1186.58 1214.13 L1187.16 1214.13 L1187.75 1214.13 L1188.34 1214.13 L1188.92 1214.13 L1189.51 1214.13 L1190.1 1214.13 L1190.68 1214.13 L1191.27 1214.13 L1191.86 1214.13 L1192.44 1214.13 L1193.03 1214.13 L1193.62 1214.13 L1194.2 1214.13 L1194.79 1214.13 L1195.37 1214.13 L1195.96 1214.13 L1196.55 1214.13 L1197.13 1214.13 L1197.72 1214.13 L1198.31 1214.13 L1198.89 1214.13 L1199.48 1214.13 L1200.07 1214.13 L1200.65 1214.13 L1201.24 1214.13 L1201.83 1214.13 L1202.41 1214.13 L1203 1214.13 L1203.58 1214.13 L1204.17 1214.13 L1204.76 1214.13 L1205.34 1214.13 L1205.93 1214.13 L1206.52 1214.13 L1207.1 1214.13 L1207.69 1214.13 L1208.28 1214.13 L1208.86 1214.13 L1209.45 1214.13 L1210.03 1214.13 L1210.62 1214.13 L1211.21 1214.13 L1211.79 1214.13 L1212.38 1214.13 L1212.97 1214.13 L1213.55 1214.13 L1214.14 1214.13 L1214.73 1214.13 L1215.31 1214.13 L1215.9 1214.13 L1216.49 1214.13 L1217.07 1214.13 L1217.66 1214.13 L1218.24 1214.13 L1218.83 1214.13 L1219.42 1214.13 L1220 1214.13 L1220.59 1214.13 L1221.18 1214.13 L1221.76 1214.13 L1222.35 1214.13 L1222.94 1214.13 L1223.52 1214.13 L1224.11 1214.13 L1224.7 1214.13 L1225.28 1214.13 L1225.87 1214.13 L1226.45 1214.13 L1227.04 1214.13 L1227.63 1214.13 L1228.21 1214.13 L1228.8 1214.13 L1229.39 1214.13 L1229.97 1214.13 L1230.56 1214.13 L1231.15 1214.13 L1231.73 1214.13 L1232.32 1214.13 L1232.91 1214.13 L1233.49 1214.13 L1234.08 1214.13 L1234.66 1214.13 L1235.25 1214.13 L1235.84 1214.13 L1236.42 1214.13 L1237.01 1214.13 L1237.6 1214.13 L1238.18 1214.13 L1238.77 1214.13 L1239.36 1214.13 L1239.94 1214.13 L1240.53 1214.13 L1241.11 1214.13 L1241.7 1214.13 L1242.29 1214.13 L1242.87 1214.13 L1243.46 1214.13 L1244.05 1214.13 L1244.63 1214.13 L1245.22 1214.13 L1245.81 1214.13 L1246.39 1214.13 L1246.98 1214.13 L1247.57 1214.13 L1248.15 1214.13 L1248.74 1214.13 L1249.32 1214.13 L1249.91 1214.13 L1250.5 1214.13 L1251.08 1214.13 L1251.67 1214.13 L1252.26 1214.13 L1252.84 1214.13 L1253.43 1214.13 L1254.02 1214.13 L1254.6 1214.13 L1255.19 1214.13 L1255.78 1214.13 L1256.36 1214.13 L1256.95 1214.13 L1257.53 1214.13 L1258.12 1214.13 L1258.71 1214.13 L1259.29 1214.13 L1259.88 1214.13 L1260.47 1214.13 L1261.05 1214.13 L1261.64 1214.13 L1262.23 1214.13 L1262.81 1214.13 L1263.4 1214.13 L1263.98 1214.13 L1264.57 1214.13 L1265.16 1214.13 L1265.74 1214.13 L1266.33 1214.13 L1266.92 1214.13 L1267.5 1214.13 L1268.09 1214.13 L1268.68 1214.13 L1269.26 1214.13 L1269.85 1214.13 L1270.44 1214.13 L1271.02 1214.13 L1271.61 1214.13 L1272.19 1214.13 L1272.78 1214.13 L1273.37 1214.13 L1273.95 1214.13 L1274.54 1214.13 L1275.13 1214.13 L1275.71 1214.13 L1276.3 1214.13 L1276.89 1214.13 L1277.47 1214.13 L1278.06 1214.13 L1278.65 1214.13 L1279.23 1214.13 L1279.82 1214.13 L1280.4 1214.13 L1280.99 1214.13 L1281.58 1214.13 L1282.16 1214.13 L1282.75 1214.13 L1283.34 1214.13 L1283.92 1214.13 L1284.51 1214.13 L1285.1 1214.13 L1285.68 1214.13 L1286.27 1214.13 L1286.86 1214.13 L1287.44 1214.13 L1288.03 1214.13 L1288.61 1214.13 L1289.2 1214.13 L1289.79 1214.13 L1290.37 1214.13 L1290.96 1214.13 L1291.55 1214.13 L1292.13 1214.13 L1292.72 1214.13 L1293.31 1214.13 L1293.89 1214.13 L1294.48 1214.13 L1295.06 1214.13 L1295.65 1214.13 L1296.24 1214.13 L1296.82 1214.13 L1297.41 1214.13 L1298 1214.13 L1298.58 1214.13 L1299.17 1214.13 L1299.76 1214.13 L1300.34 1214.13 L1300.93 1214.13 L1301.52 1214.13 L1302.1 1214.13 L1302.69 1214.13 L1303.27 1214.13 L1303.86 1214.13 L1304.45 1214.13 L1305.03 1214.13 L1305.62 1214.13 L1306.21 1214.13 L1306.79 1214.13 L1307.38 1214.13 L1307.97 1214.13 L1308.55 1214.13 L1309.14 1214.13 L1309.73 1214.13 L1310.31 1214.13 L1310.9 1214.13 L1311.48 1214.13 L1312.07 1214.13 L1312.66 1214.13 L1313.24 1214.13 L1313.83 1214.13 L1314.42 1214.13 L1315 1214.13 L1315.59 1214.13 L1316.18 1214.13 L1316.76 1214.13 L1317.35 1214.13 L1317.93 1214.13 L1318.52 1214.13 L1319.11 1214.13 L1319.69 1214.13 L1320.28 1214.13 L1320.87 1214.13 L1321.45 1214.13 L1322.04 1214.13 L1322.63 1214.13 L1323.21 1214.13 L1323.8 1214.13 L1324.39 1214.13 L1324.97 1214.13 L1325.56 1214.13 L1326.14 1214.13 L1326.73 1214.13 L1327.32 1214.13 L1327.9 1214.13 L1328.49 1214.13 L1329.08 1214.13 L1329.66 1214.13 L1330.25 1214.13 L1330.84 1214.13 L1331.42 1214.13 L1332.01 1214.13 L1332.6 1214.13 L1333.18 1214.13 L1333.77 1214.13 L1334.35 1214.13 L1334.94 1214.13 L1335.53 1214.13 L1336.11 1214.13 L1336.7 1214.13 L1337.29 1214.13 L1337.87 1214.13 L1338.46 1214.13 L1339.05 1214.13 L1339.63 1214.13 L1340.22 1214.13 L1340.8 1214.13 L1341.39 1214.13 L1341.98 1214.13 L1342.56 1214.13 L1343.15 1214.13 L1343.74 1214.13 L1344.32 1214.13 L1344.91 1214.13 L1345.5 1214.13 L1346.08 1214.13 L1346.67 1214.13 L1347.26 1214.13 L1347.84 1214.13 L1348.43 1214.13 L1349.01 1214.13 L1349.6 1214.13 L1350.19 1214.13 L1350.77 1214.13 L1351.36 1214.13 L1351.95 1214.13 L1352.53 1214.13 L1353.12 1214.13 L1353.71 1214.13 L1354.29 1214.13 L1354.88 1214.13 L1355.47 1214.13 L1356.05 1214.13 L1356.64 1214.13 L1357.22 1214.13 L1357.81 1214.13 L1358.4 1214.13 L1358.98 1214.13 L1359.57 1214.13 L1360.16 1214.13 L1360.74 1214.13 L1361.33 1214.13 L1361.92 1214.13 L1362.5 1214.13 L1363.09 1214.13 L1363.68 1214.13 L1364.26 1214.13 L1364.85 1214.13 L1365.43 1214.13 L1366.02 1214.13 L1366.61 1214.13 L1367.19 1214.13 L1367.78 1214.13 L1368.37 1214.13 L1368.95 1214.13 L1369.54 1214.13 L1370.13 1214.13 L1370.71 1214.13 L1371.3 1214.13 L1371.88 1214.13 L1372.47 1214.13 L1373.06 1214.13 L1373.64 1214.13 L1374.23 1214.13 L1374.82 1214.13 L1375.4 1214.13 L1375.99 1214.13 L1376.58 1214.13 L1377.16 1214.13 L1377.75 1214.13 L1378.34 1214.13 L1378.92 1214.13 L1379.51 1214.13 L1380.09 1214.13 L1380.68 1214.13 L1381.27 1214.13 L1381.85 1214.13 L1382.44 1214.13 L1383.03 1214.13 L1383.61 1214.13 L1384.2 1214.13 L1384.79 1214.13 L1385.37 1214.13 L1385.96 1214.13 L1386.55 1214.13 L1387.13 1214.13 L1387.72 1214.13 L1388.3 1214.13 L1388.89 1214.13 L1389.48 1214.13 L1390.06 1214.13 L1390.65 1214.13 L1391.24 1214.13 L1391.82 1214.13 L1392.41 1214.13 L1393 1214.13 L1393.58 1214.13 L1394.17 1214.13 L1394.75 1214.13 L1395.34 1214.13 L1395.93 1214.13 L1396.51 1214.13 L1397.1 1214.13 L1397.69 1214.13 L1398.27 1214.13 L1398.86 1214.13 L1399.45 1214.13 L1400.03 1214.13 L1400.62 1214.13 L1401.21 1214.13 L1401.79 1214.13 L1402.38 1214.13 L1402.96 1214.13 L1403.55 1214.13 L1404.14 1214.13 L1404.72 1214.13 L1405.31 1214.13 L1405.9 1214.13 L1406.48 1214.13 L1407.07 1214.13 L1407.66 1214.13 L1408.24 1214.13 L1408.83 1214.13 L1409.42 1214.13 L1410 1214.13 L1410.59 1214.13 L1411.17 1214.13 L1411.76 1214.13 L1412.35 1214.13 L1412.93 1214.13 L1413.52 1214.13 L1414.11 1214.13 L1414.69 1214.13 L1415.28 1214.13 L1415.87 1214.13 L1416.45 1214.13 L1417.04 1214.13 L1417.63 1214.13 L1418.21 1214.13 L1418.8 1214.13 L1419.38 1214.13 L1419.97 1214.13 L1420.56 1214.13 L1421.14 1214.13 L1421.73 1214.13 L1422.32 1214.13 L1422.9 1214.13 L1423.49 1214.13 L1424.08 1214.13 L1424.66 1214.13 L1425.25 1214.13 L1425.83 1214.13 L1426.42 1214.13 L1427.01 1214.13 L1427.59 1214.13 L1428.18 1214.13 L1428.77 1214.13 L1429.35 1214.13 L1429.94 1214.13 L1430.53 1214.13 L1431.11 1214.13 L1431.7 1214.13 L1432.29 1214.13 L1432.87 1214.13 L1433.46 1214.13 L1434.04 1214.13 L1434.63 1214.13 L1435.22 1214.13 L1435.8 1214.13 L1436.39 1214.13 L1436.98 1214.13 L1437.56 1214.13 L1438.15 1214.13 L1438.74 1214.13 L1439.32 1214.13 L1439.91 1214.13 L1440.5 1214.13 L1441.08 1214.13 L1441.67 1214.13 L1442.25 1214.13 L1442.84 1214.13 L1443.43 1214.13 L1444.01 1214.13 L1444.6 1214.13 L1445.19 1214.13 L1445.77 1214.13 L1446.36 1214.13 L1446.95 1214.13 L1447.53 1214.13 L1448.12 1214.13 L1448.7 1214.13 L1449.29 1214.13 L1449.88 1214.13 L1450.46 1214.13 L1451.05 1214.13 L1451.64 1214.13 L1452.22 1214.13 L1452.81 1214.13 L1453.4 1214.13 L1453.98 1214.13 L1454.57 1214.13 L1455.16 1214.13 L1455.74 1214.13 L1456.33 1214.13 L1456.91 1214.13 L1457.5 1214.13 L1458.09 1214.13 L1458.67 1214.13 L1459.26 1214.13 L1459.85 1214.13 L1460.43 1214.13 L1461.02 1214.13 L1461.61 1214.13 L1462.19 1214.13 L1462.78 1214.13 L1463.37 1214.13 L1463.95 1214.13 L1464.54 1214.13 L1465.12 1214.13 L1465.71 1214.13 L1466.3 1214.13 L1466.88 1214.13 L1467.47 1214.13 L1468.06 1214.13 L1468.64 1214.13 L1469.23 1214.13 L1469.82 1214.13 L1470.4 1214.13 L1470.99 1214.13 L1471.57 1214.13 L1472.16 1214.13 L1472.75 1214.13 L1473.33 1214.13 L1473.92 1214.13 L1474.51 1214.13 L1475.09 1214.13 L1475.68 1214.13 L1476.27 1214.13 L1476.85 1214.13 L1477.44 1214.13 L1478.03 1214.13 L1478.61 1214.13 L1479.2 1214.13 L1479.78 1214.13 L1480.37 1214.13 L1480.96 1214.13 L1481.54 1214.13 L1482.13 1214.13 L1482.72 1214.13 L1483.3 1214.13 L1483.89 1214.13 L1484.48 1214.13 L1485.06 1214.13 L1485.65 1214.13 L1486.24 1214.13 L1486.82 1214.13 L1487.41 1214.13 L1487.99 1214.13 L1488.58 1214.13 L1489.17 1214.13 L1489.75 1214.13 L1490.34 1214.13 L1490.93 1214.13 L1491.51 1214.13 L1492.1 1214.13 L1492.69 1214.13 L1493.27 1214.13 L1493.86 1214.13 L1494.45 1214.13 L1495.03 1214.13 L1495.62 1214.13 L1496.2 1214.13 L1496.79 1214.13 L1497.38 1214.13 L1497.96 1214.13 L1498.55 1214.13 L1499.14 1214.13 L1499.72 1214.13 L1500.31 1214.13 L1500.9 1214.13 L1501.48 1214.13 L1502.07 1214.13 L1502.65 1214.13 L1503.24 1214.13 L1503.83 1214.13 L1504.41 1214.13 L1505 1214.13 L1505.59 1214.13 L1506.17 1214.13 L1506.76 1214.13 L1507.35 1214.13 L1507.93 1214.13 L1508.52 1214.13 L1509.11 1214.13 L1509.69 1214.13 L1510.28 1214.13 L1510.86 1214.13 L1511.45 1214.13 L1512.04 1214.13 L1512.62 1214.13 L1513.21 1214.13 L1513.8 1214.13 L1514.38 1214.13 L1514.97 1214.13 L1515.56 1214.13 L1516.14 1214.13 L1516.73 1214.13 L1517.32 1214.13 L1517.9 1214.13 L1518.49 1214.13 L1519.07 1214.13 L1519.66 1214.13 L1520.25 1214.13 L1520.83 1214.13 L1521.42 1214.13 L1522.01 1214.13 L1522.59 1214.13 L1523.18 1214.13 L1523.77 1214.13 L1524.35 1214.13 L1524.94 1214.13 L1525.52 1214.13 L1526.11 1214.13 L1526.7 1214.13 L1527.28 1214.13 L1527.87 1214.13 L1528.46 1214.13 L1529.04 1214.13 L1529.63 1214.13 L1530.22 1214.13 L1530.8 1214.13 L1531.39 1214.13 L1531.98 1214.13 L1532.56 1214.13 L1533.15 1214.13 L1533.73 1214.13 L1534.32 1214.13 L1534.91 1214.13 L1535.49 1214.13 L1536.08 1214.13 L1536.67 1214.13 L1537.25 1214.13 L1537.84 1214.13 L1538.43 1214.13 L1539.01 1214.13 L1539.6 1214.13 L1540.19 1214.13 L1540.77 1214.13 L1541.36 1214.13 L1541.94 1214.13 L1542.53 1214.13 L1543.12 1214.13 L1543.7 1214.13 L1544.29 1214.13 L1544.88 1214.13 L1545.46 1214.13 L1546.05 1214.13 L1546.64 1214.13 L1547.22 1214.13 L1547.81 1214.13 L1548.4 1214.13 L1548.98 1214.13 L1549.57 1214.13 L1550.15 1214.13 L1550.74 1214.13 L1551.33 1214.13 L1551.91 1214.13 L1552.5 1214.13 L1553.09 1214.13 L1553.67 1214.13 L1554.26 1214.13 L1554.85 1214.13 L1555.43 1214.13 L1556.02 1214.13 L1556.6 1214.13 L1557.19 1214.13 L1557.78 1214.13 L1558.36 1214.13 L1558.95 1214.13 L1559.54 1214.13 L1560.12 1214.13 L1560.71 1214.13 L1561.3 1214.13 L1561.88 1214.13 L1562.47 1214.13 L1563.06 1214.13 L1563.64 1214.13 L1564.23 1214.13 L1564.81 1214.13 L1565.4 1214.13 L1565.99 1214.13 L1566.57 1214.13 L1567.16 1214.13 L1567.75 1214.13 L1568.33 1214.13 L1568.92 1214.13 L1569.51 1214.13 L1570.09 1214.13 L1570.68 1214.13 L1571.27 1214.13 L1571.85 1214.13 L1572.44 1214.13 L1573.02 1214.13 L1573.61 1214.13 L1574.2 1214.13 L1574.78 1214.13 L1575.37 1214.13 L1575.96 1214.13 L1576.54 1214.13 L1577.13 1214.13 L1577.72 1214.13 L1578.3 1214.13 L1578.89 1214.13 L1579.47 1214.13 L1580.06 1214.13 L1580.65 1214.13 L1581.23 1214.13 L1581.82 1214.13 L1582.41 1214.13 L1582.99 1214.13 L1583.58 1214.13 L1584.17 1214.13 L1584.75 1214.13 L1585.34 1214.13 L1585.93 1214.13 L1586.51 1214.13 L1587.1 1214.13 L1587.68 1214.13 L1588.27 1214.13 L1588.86 1214.13 L1589.44 1214.13 L1590.03 1214.13 L1590.62 1214.13 L1591.2 1214.13 L1591.79 1214.13 L1592.38 1214.13 L1592.96 1214.13 L1593.55 1214.13 L1594.14 1214.13 L1594.72 1214.13 L1595.31 1214.13 L1595.89 1214.13 L1596.48 1214.13 L1597.07 1214.13 L1597.65 1214.13 L1598.24 1214.13 L1598.83 1214.13 L1599.41 1214.13 L1600 1214.13 L1600.59 1214.13 L1601.17 1214.13 L1601.76 1214.13 L1602.34 1214.13 L1602.93 1214.13 L1603.52 1214.13 L1604.1 1214.13 L1604.69 1214.13 L1605.28 1214.13 L1605.86 1214.13 L1606.45 1214.13 L1607.04 1214.13 L1607.62 1214.13 L1608.21 1214.13 L1608.8 1214.13 L1609.38 1214.13 L1609.97 1214.13 L1610.55 1214.13 L1611.14 1214.13 L1611.73 1214.13 L1612.31 1214.13 L1612.9 1214.13 L1613.49 1214.13 L1614.07 1214.13 L1614.66 1214.13 L1615.25 1214.13 L1615.83 1214.13 L1616.42 1214.13 L1617.01 1214.13 L1617.59 1214.13 L1618.18 1214.13 L1618.76 1214.13 L1619.35 1214.13 L1619.94 1214.13 L1620.52 1214.13 L1621.11 1214.13 L1621.7 1214.13 L1622.28 1214.13 L1622.87 1214.13 L1623.46 1214.13 L1624.04 1214.13 L1624.63 1214.13 L1625.22 1214.13 L1625.8 1214.13 L1626.39 1214.13 L1626.97 1214.13 L1627.56 1214.13 L1628.15 1214.13 L1628.73 1214.13 L1629.32 1214.13 L1629.91 1214.13 L1630.49 1214.13 L1631.08 1214.13 L1631.67 1214.13 L1632.25 1214.13 L1632.84 1214.13 L1633.42 1214.13 L1634.01 1214.13 L1634.6 1214.13 L1635.18 1214.13 L1635.77 1214.13 L1636.36 1214.13 L1636.94 1214.13 L1637.53 1214.13 L1638.12 1214.13 L1638.7 1214.13 L1639.29 1214.13 L1639.88 1214.13 L1640.46 1214.13 L1641.05 1214.13 L1641.63 1214.13 L1642.22 1214.13 L1642.81 1214.13 L1643.39 1214.13 L1643.98 1214.13 L1644.57 1214.13 L1645.15 1214.13 L1645.74 1214.13 L1646.33 1214.13 L1646.91 1214.13 L1647.5 1214.13 L1648.09 1214.13 L1648.67 1214.13 L1649.26 1214.13 L1649.84 1214.13 L1650.43 1214.13 L1651.02 1214.13 L1651.6 1214.13 L1652.19 1214.13 L1652.78 1214.13 L1653.36 1214.13 L1653.95 1214.13 L1654.54 1214.13 L1655.12 1214.13 L1655.71 1214.13 L1656.29 1214.13 L1656.88 1214.13 L1657.47 1214.13 L1658.05 1214.13 L1658.64 1214.13 L1659.23 1214.13 L1659.81 1214.13 L1660.4 1214.13 L1660.99 1214.13 L1661.57 1214.13 L1662.16 1214.13 L1662.75 1214.13 L1663.33 1214.13 L1663.92 1214.13 L1664.5 1214.13 L1665.09 1214.13 L1665.68 1214.13 L1666.26 1214.13 L1666.85 1214.13 L1667.44 1214.13 L1668.02 1214.13 L1668.61 1214.13 L1669.2 1214.13 L1669.78 1214.13 L1670.37 1214.13 L1670.96 1214.13 L1671.54 1214.13 L1672.13 1214.13 L1672.71 1214.13 L1673.3 1214.13 L1673.89 1214.13 L1674.47 1214.13 L1675.06 1214.13 L1675.65 1214.13 L1676.23 1214.13 L1676.82 1214.13 L1677.41 1214.13 L1677.99 1214.13 L1678.58 1214.13 L1679.17 1214.13 L1679.75 1214.13 L1680.34 1214.13 L1680.92 1214.13 L1681.51 1214.13 L1682.1 1214.13 L1682.68 1214.13 L1683.27 1214.13 L1683.86 1214.13 L1684.44 1214.13 L1685.03 1214.13 L1685.62 1214.13 L1686.2 1214.13 L1686.79 1214.13 L1687.37 1214.13 L1687.96 1214.13 L1688.55 1214.13 L1689.13 1214.13 L1689.72 1214.13 L1690.31 1214.13 L1690.89 1214.13 L1691.48 1214.13 L1692.07 1214.13 L1692.65 1214.13 L1693.24 1214.13 L1693.83 1214.13 L1694.41 1214.13 L1695 1214.13 L1695.58 1214.13 L1696.17 1214.13 L1696.76 1214.13 L1697.34 1214.13 L1697.93 1214.13 L1698.52 1214.13 L1699.1 1214.13 L1699.69 1214.13 L1700.28 1214.13 L1700.86 1214.13 L1701.45 1214.13 L1702.04 1214.13 L1702.62 1214.13 L1703.21 1214.13 L1703.79 1214.13 L1704.38 1214.13 L1704.97 1214.13 L1705.55 1214.13 L1706.14 1214.13 L1706.73 1214.13 L1707.31 1214.13 L1707.9 1214.13 L1708.49 1214.13 L1709.07 1214.13 L1709.66 1214.13 L1710.24 1214.13 L1710.83 1214.13 L1711.42 1214.13 L1712 1214.13 L1712.59 1214.13 L1713.18 1214.13 L1713.76 1214.13 L1714.35 1214.13 L1714.94 1214.13 L1715.52 1214.13 L1716.11 1214.13 L1716.7 1214.13 L1717.28 1214.13 L1717.87 1214.13 L1718.45 1214.13 L1719.04 1214.13 L1719.63 1214.13 L1720.21 1214.13 L1720.8 1214.13 L1721.39 1214.13 L1721.97 1214.13 L1722.56 1214.13 L1723.15 1214.13 L1723.73 1214.13 L1724.32 1214.13 L1724.91 1214.13 L1725.49 1214.13 L1726.08 1214.13 L1726.66 1214.13 L1727.25 1214.13 L1727.84 1214.13 L1728.42 1214.13 L1729.01 1214.13 L1729.6 1214.13 L1730.18 1214.13 L1730.77 1214.13 L1731.36 1214.13 L1731.94 1214.13 L1732.53 1214.13 L1733.11 1214.13 L1733.7 1214.13 L1734.29 1214.13 L1734.87 1214.13 L1735.46 1214.13 L1736.05 1214.13 L1736.63 1214.13 L1737.22 1214.13 L1737.81 1214.13 L1738.39 1214.13 L1738.98 1214.13 L1739.57 1214.13 L1740.15 1214.13 L1740.74 1214.13 L1741.32 1214.13 L1741.91 1214.13 L1742.5 1214.13 L1743.08 1214.13 L1743.67 1214.13 L1744.26 1214.13 L1744.84 1214.13 L1745.43 1214.13 L1746.02 1214.13 L1746.6 1214.13 L1747.19 1214.13 L1747.78 1214.13 L1748.36 1214.13 L1748.95 1214.13 L1749.53 1214.13 L1750.12 1214.13 L1750.71 1214.13 L1751.29 1214.13 L1751.88 1214.13 L1752.47 1214.13 L1753.05 1214.13 L1753.64 1214.13 L1754.23 1214.13 L1754.81 1214.13 L1755.4 1214.13 L1755.99 1214.13 L1756.57 1214.13 L1757.16 1214.13 L1757.74 1214.13 L1758.33 1214.13 L1758.92 1214.13 L1759.5 1214.13 L1760.09 1214.13 L1760.68 1214.13 L1761.26 1214.13 L1761.85 1214.13 L1762.44 1214.13 L1763.02 1214.13 L1763.61 1214.13 L1764.19 1214.13 L1764.78 1214.13 L1765.37 1214.13 L1765.95 1214.13 L1766.54 1214.13 L1767.13 1214.13 L1767.71 1214.13 L1768.3 1214.13 L1768.89 1214.13 L1769.47 1214.13 L1770.06 1214.13 L1770.65 1214.13 L1771.23 1214.13 L1771.82 1214.13 L1772.4 1214.13 L1772.99 1214.13 L1773.58 1214.13 L1774.16 1214.13 L1774.75 1214.13 L1775.34 1214.13 L1775.92 1214.13 L1776.51 1214.13 L1777.1 1214.13 L1777.68 1214.13 L1778.27 1214.13 L1778.86 1214.13 L1779.44 1214.13 L1780.03 1214.13 L1780.61 1214.13 L1781.2 1214.13 L1781.79 1214.13 L1782.37 1214.13 L1782.96 1214.13 L1783.55 1214.13 L1784.13 1214.13 L1784.72 1214.13 L1785.31 1214.13 L1785.89 1214.13 L1786.48 1214.13 L1787.06 1214.13 L1787.65 1214.13 L1788.24 1214.13 L1788.82 1214.13 L1789.41 1214.13 L1790 1214.13 L1790.58 1214.13 L1791.17 1214.13 L1791.76 1214.13 L1792.34 1214.13 L1792.93 1214.13 L1793.52 1214.13 L1794.1 1214.13 L1794.69 1214.13 L1795.27 1214.13 L1795.86 1214.13 L1796.45 1214.13 L1797.03 1214.13 L1797.62 1214.13 L1798.21 1214.13 L1798.79 1214.13 L1799.38 1214.13 L1799.97 1214.13 L1800.55 1214.13 L1801.14 1214.13 L1801.73 1214.13 L1802.31 1214.13 L1802.9 1214.13 L1803.48 1214.13 L1804.07 1214.13 L1804.66 1214.13 L1805.24 1214.13 L1805.83 1214.13 L1806.42 1214.13 L1807 1214.13 L1807.59 1214.13 L1808.18 1214.13 L1808.76 1214.13 L1809.35 1214.13 L1809.94 1214.13 L1810.52 1214.13 L1811.11 1214.13 L1811.69 1214.13 L1812.28 1214.13 L1812.87 1214.13 L1813.45 1214.13 L1814.04 1214.13 L1814.63 1214.13 L1815.21 1214.13 L1815.8 1214.13 L1816.39 1214.13 L1816.97 1214.13 L1817.56 1214.13 L1818.14 1214.13 L1818.73 1214.13 L1819.32 1214.13 L1819.9 1214.13 L1820.49 1214.13 L1821.08 1214.13 L1821.66 1214.13 L1822.25 1214.13 L1822.84 1214.13 L1823.42 1214.13 L1824.01 1214.13 L1824.6 1214.13 L1825.18 1214.13 L1825.77 1214.13 L1826.35 1214.13 L1826.94 1214.13 L1827.53 1214.13 L1828.11 1214.13 L1828.7 1214.13 L1829.29 1214.13 L1829.87 1214.13 L1830.46 1214.13 L1831.05 1214.13 L1831.63 1214.13 L1832.22 1214.13 L1832.81 1214.13 L1833.39 1214.13 L1833.98 1214.13 L1834.56 1214.13 L1835.15 1214.13 L1835.74 1214.13 L1836.32 1214.13 L1836.91 1214.13 L1837.5 1214.13 L1838.08 1214.13 L1838.67 1214.13 L1839.26 1214.13 L1839.84 1214.13 L1840.43 1214.13 L1841.01 1214.13 L1841.6 1214.13 L1842.19 1214.13 L1842.77 1214.13 L1843.36 1214.13 L1843.95 1214.13 L1844.53 1214.13 L1845.12 1214.13 L1845.71 1214.13 L1846.29 1214.13 L1846.88 1214.13 L1847.47 1214.13 L1848.05 1214.13 L1848.64 1214.13 L1849.22 1214.13 L1849.81 1214.13 L1850.4 1214.13 L1850.98 1214.13 L1851.57 1214.13 L1852.16 1214.13 L1852.74 1214.13 L1853.33 1214.13 L1853.92 1214.13 L1854.5 1214.13 L1855.09 1214.13 L1855.68 1214.13 L1856.26 1214.13 L1856.85 1214.13 L1857.43 1214.13 L1858.02 1214.13 L1858.61 1214.13 L1859.19 1214.13 L1859.78 1214.13 L1860.37 1214.13 L1860.95 1214.13 L1861.54 1214.13 L1862.13 1214.13 L1862.71 1214.13 L1863.3 1214.13 L1863.88 1214.13 L1864.47 1214.13 L1865.06 1214.13 L1865.64 1214.13 L1866.23 1214.13 L1866.82 1214.13 L1867.4 1214.13 L1867.99 1214.13 L1868.58 1214.13 L1869.16 1214.13 L1869.75 1214.13 L1870.34 1214.13 L1870.92 1214.13 L1871.51 1214.13 L1872.09 1214.13 L1872.68 1214.13 L1873.27 1214.13 L1873.85 1214.13 L1874.44 1214.13 L1875.03 1214.13 L1875.61 1214.13 L1876.2 1214.13 L1876.79 1214.13 L1877.37 1214.13 L1877.96 1214.13 L1878.55 1214.13 L1879.13 1214.13 L1879.72 1214.13 L1880.3 1214.13 L1880.89 1214.13 L1881.48 1214.13 L1882.06 1214.13 L1882.65 1214.13 L1883.24 1214.13 L1883.82 1214.13 L1884.41 1214.13 L1885 1214.13 L1885.58 1214.13 L1886.17 1214.13 L1886.76 1214.13 L1887.34 1214.13 L1887.93 1214.13 L1888.51 1214.13 L1889.1 1214.13 L1889.69 1214.13 L1890.27 1214.13 L1890.86 1214.13 L1891.45 1214.13 L1892.03 1214.13 L1892.62 1214.13 L1893.21 1214.13 L1893.79 1214.13 L1894.38 1214.13 L1894.96 1214.13 L1895.55 1214.13 L1896.14 1214.13 L1896.72 1214.13 L1897.31 1214.13 L1897.9 1214.13 L1898.48 1214.13 L1899.07 1214.13 L1899.66 1214.13 L1900.24 1214.13 L1900.83 1214.13 L1901.42 1214.13 L1902 1214.13 L1902.59 1214.13 L1903.17 1214.13 L1903.76 1214.13 L1904.35 1214.13 L1904.93 1214.13 L1905.52 1214.13 L1906.11 1214.13 L1906.69 1214.13 L1907.28 1214.13 L1907.87 1214.13 L1908.45 1214.13 L1909.04 1214.13 L1909.63 1214.13 L1910.21 1214.13 L1910.8 1214.13 L1911.38 1214.13 L1911.97 1214.13 L1912.56 1214.13 L1913.14 1214.13 L1913.73 1214.13 L1914.32 1214.13 L1914.9 1214.13 L1915.49 1214.13 L1916.08 1214.13 L1916.66 1214.13 L1917.25 1214.13 L1917.83 1214.13 L1918.42 1214.13 L1919.01 1214.13 L1919.59 1214.13 L1920.18 1214.13 L1920.77 1214.13 L1921.35 1214.13 L1921.94 1214.13 L1922.53 1214.13 L1923.11 1214.13 L1923.7 1214.13 L1924.29 1214.13 L1924.87 1214.13 L1925.46 1214.13 L1926.04 1214.13 L1926.63 1214.13 L1927.22 1214.13 L1927.8 1214.13 L1928.39 1214.13 L1928.98 1214.13 L1929.56 1214.13 L1930.15 1214.13 L1930.74 1214.13 L1931.32 1214.13 L1931.91 1214.13 L1932.5 1214.13 L1933.08 1214.13 L1933.67 1214.13 L1934.25 1214.13 L1934.84 1214.13 L1935.43 1214.13 L1936.01 1214.13 L1936.6 1214.13 L1937.19 1214.13 L1937.77 1214.13 L1938.36 1214.13 L1938.95 1214.13 L1939.53 1214.13 L1940.12 1214.13 L1940.71 1214.13 L1941.29 1214.13 L1941.88 1214.13 L1942.46 1214.13 L1943.05 1214.13 L1943.64 1214.13 L1944.22 1214.13 L1944.81 1214.13 L1945.4 1214.13 L1945.98 1214.13 L1946.57 1214.13 L1947.16 1214.13 L1947.74 1214.13 L1948.33 1214.13 L1948.91 1214.13 L1949.5 1214.13 L1950.09 1214.13 L1950.67 1214.13 L1951.26 1214.13 L1951.85 1214.13 L1952.43 1214.13 L1953.02 1214.13 L1953.61 1214.13 L1954.19 1214.13 L1954.78 1214.13 L1955.37 1214.13 L1955.95 1214.13 L1956.54 1214.13 L1957.12 1214.13 L1957.71 1214.13 L1958.3 1214.13 L1958.88 1214.13 L1959.47 1214.13 L1960.06 1214.13 L1960.64 1214.13 L1961.23 1214.13 L1961.82 1214.13 L1962.4 1214.13 L1962.99 1214.13 L1963.58 1214.13 L1964.16 1214.13 L1964.75 1214.13 L1965.33 1214.13 L1965.92 1214.13 L1966.51 1214.13 L1967.09 1214.13 L1967.68 1214.13 L1968.27 1214.13 L1968.85 1214.13 L1969.44 1214.13 L1970.03 1214.13 L1970.61 1214.13 L1971.2 1214.13 L1971.78 1214.13 L1972.37 1214.13 L1972.96 1214.13 L1973.54 1214.13 L1974.13 1214.13 L1974.72 1214.13 L1975.3 1214.13 L1975.89 1214.13 L1976.48 1214.13 L1977.06 1214.13 L1977.65 1214.13 L1978.24 1214.13 L1978.82 1214.13 L1979.41 1214.13 L1979.99 1214.13 L1980.58 1214.13 L1981.17 1214.13 L1981.75 1214.13 L1982.34 1214.13 L1982.93 1214.13 L1983.51 1214.13 L1984.1 1214.13 L1984.69 1214.13 L1985.27 1214.13 L1985.86 1214.13 L1986.45 1214.13 L1987.03 1214.13 L1987.62 1214.13 L1988.2 1214.13 L1988.79 1214.13 L1989.38 1214.13 L1989.96 1214.13 L1990.55 1214.13 L1991.14 1214.13 L1991.72 1214.13 L1992.31 1214.13 L1992.9 1214.13 L1993.48 1214.13 L1994.07 1214.13 L1994.65 1214.13 L1995.24 1214.13 L1995.83 1214.13 L1996.41 1214.13 L1997 1214.13 L1997.59 1214.13 L1998.17 1214.13 L1998.76 1214.13 L1999.35 1214.13 L1999.93 1214.13 L2000.52 1214.13 L2001.11 1214.13 L2001.69 1214.13 L2002.28 1214.13 L2002.86 1214.13 L2003.45 1214.13 L2004.04 1214.13 L2004.62 1214.13 L2005.21 1214.13 L2005.8 1214.13 L2006.38 1214.13 L2006.97 1214.13 L2007.56 1214.13 L2008.14 1214.13 L2008.73 1214.13 L2009.32 1214.13 L2009.9 1214.13 L2010.49 1214.13 L2011.07 1214.13 L2011.66 1214.13 L2012.25 1214.13 L2012.83 1214.13 L2013.42 1214.13 L2014.01 1214.13 L2014.59 1214.13 L2015.18 1214.13 L2015.77 1214.13 L2016.35 1214.13 L2016.94 1214.13 L2017.53 1214.13 L2018.11 1214.13 L2018.7 1214.13 L2019.28 1214.13 L2019.87 1214.13 L2020.46 1214.13 L2021.04 1214.13 L2021.63 1214.13 L2022.22 1214.13 L2022.8 1214.13 L2023.39 1214.13 L2023.98 1214.13 L2024.56 1214.13 L2025.15 1214.13 L2025.73 1214.13 L2026.32 1214.13 L2026.91 1214.13 L2027.49 1214.13 L2028.08 1214.13 L2028.67 1214.13 L2029.25 1214.13 L2029.84 1214.13 L2030.43 1214.13 L2031.01 1214.13 L2031.6 1214.13 L2032.19 1214.13 L2032.77 1214.13 L2033.36 1214.13 L2033.94 1214.13 L2034.53 1214.13 L2035.12 1214.13 L2035.7 1214.13 L2036.29 1214.13 L2036.88 1214.13 L2037.46 1214.13 L2038.05 1214.13 L2038.64 1214.13 L2039.22 1214.13 L2039.81 1214.13 L2040.4 1214.13 L2040.98 1214.13 L2041.57 1214.13 L2042.15 1214.13 L2042.74 1214.13 L2043.33 1214.13 L2043.91 1214.13 L2044.5 1214.13 L2045.09 1214.13 L2045.67 1214.13 L2046.26 1214.13 L2046.85 1214.13 L2047.43 1214.13 L2048.02 1214.13 L2048.6 1214.13 L2049.19 1214.13 L2049.78 1214.13 L2050.36 1214.13 L2050.95 1214.13 L2051.54 1214.13 L2052.12 1214.13 L2052.71 1214.13 L2053.3 1214.13 L2053.88 1214.13 L2054.47 1214.13 L2055.06 1214.13 L2055.64 1214.13 L2056.23 1214.13 L2056.81 1214.13 L2057.4 1214.13 L2057.99 1214.13 L2058.57 1214.13 L2059.16 1214.13 L2059.75 1214.13 L2060.33 1214.13 L2060.92 1214.13 L2061.51 1214.13 L2062.09 1214.13 L2062.68 1214.13 L2063.27 1214.13 L2063.85 1214.13 L2064.44 1214.13 L2065.02 1214.13 L2065.61 1214.13 L2066.2 1214.13 L2066.78 1214.13 L2067.37 1214.13 L2067.96 1214.13 L2068.54 1214.13 L2069.13 1214.13 L2069.72 1214.13 L2070.3 1214.13 L2070.89 1214.13 L2071.48 1214.13 L2072.06 1214.13 L2072.65 1214.13 L2073.23 1214.13 L2073.82 1214.13 L2074.41 1214.13 L2074.99 1214.13 L2075.58 1214.13 L2076.17 1214.13 L2076.75 1214.13 L2077.34 1214.13 L2077.93 1214.13 L2078.51 1214.13 L2079.1 1214.13 L2079.68 1214.13 L2080.27 1214.13 L2080.86 1214.13 L2081.44 1214.13 L2082.03 1214.13 L2082.62 1214.13 L2083.2 1214.13 L2083.79 1214.13 L2084.38 1214.13 L2084.96 1214.13 L2085.55 1214.13 L2086.14 1214.13 L2086.72 1214.13 L2087.31 1214.13 L2087.89 1214.13 L2088.48 1214.13 L2089.07 1214.13 L2089.65 1214.13 L2090.24 1214.13 L2090.83 1214.13 L2091.41 1214.13 L2092 1214.13 L2092.59 1214.13 L2093.17 1214.13 L2093.76 1214.13 L2094.35 1214.13 L2094.93 1214.13 L2095.52 1214.13 L2096.1 1214.13 L2096.69 1214.13 L2097.28 1214.13 L2097.86 1214.13 L2098.45 1214.13 L2099.04 1214.13 L2099.62 1214.13 L2100.21 1214.13 L2100.8 1214.13 L2101.38 1214.13 L2101.97 1214.13 L2102.55 1214.13 L2103.14 1214.13 L2103.73 1214.13 L2104.31 1214.13 L2104.9 1214.13 L2105.49 1214.13 L2106.07 1214.13 L2106.66 1214.13 L2107.25 1214.13 L2107.83 1214.13 L2108.42 1214.13 L2109.01 1214.13 L2109.59 1214.13 L2110.18 1214.13 L2110.76 1214.13 L2111.35 1214.13 L2111.94 1214.13 L2112.52 1214.13 L2113.11 1214.13 L2113.7 1214.13 L2114.28 1214.13 L2114.87 1214.13 L2115.46 1214.13 L2116.04 1214.13 L2116.63 1214.13 L2117.22 1214.13 L2117.8 1214.13 L2118.39 1214.13 L2118.97 1214.13 L2119.56 1214.13 L2120.15 1214.13 L2120.73 1214.13 L2121.32 1214.13 L2121.91 1214.13 L2122.49 1214.13 L2123.08 1214.13 L2123.67 1214.13 L2124.25 1214.13 L2124.84 1214.13 L2125.42 1214.13 L2126.01 1214.13 L2126.6 1214.13 L2127.18 1214.13 L2127.77 1214.13 L2128.36 1214.13 L2128.94 1214.13 L2129.53 1214.13 L2130.12 1214.13 L2130.7 1214.13 L2131.29 1214.13 L2131.88 1214.13 L2132.46 1214.13 L2133.05 1214.13 L2133.63 1214.13 L2134.22 1214.13 L2134.81 1214.13 L2135.39 1214.13 L2135.98 1214.13 L2136.57 1214.13 L2137.15 1214.13 L2137.74 1214.13 L2138.33 1214.13 L2138.91 1214.13 L2139.5 1214.13 L2140.09 1214.13 L2140.67 1214.13 L2141.26 1214.13 L2141.84 1214.13 L2142.43 1214.13 L2143.02 1214.13 L2143.6 1214.13 L2144.19 1214.13 L2144.78 1214.13 L2145.36 1214.13 L2145.95 1214.13 L2146.54 1214.13 L2147.12 1214.13 L2147.71 1214.13 L2148.3 1214.13 L2148.88 1214.13 L2149.47 1214.13 L2150.05 1214.13 L2150.64 1214.13 L2151.23 1214.13 L2151.81 1214.13 L2152.4 1214.13 L2152.99 1214.13 L2153.57 1214.13 L2154.16 1214.13 L2154.75 1214.13 L2155.33 1214.13 L2155.92 1214.13 L2156.5 1214.13 L2157.09 1214.13 L2157.68 1214.13 L2158.26 1214.13 L2158.26 1213.99 L2157.68 1213.99 L2157.09 1213.99 L2156.5 1213.99 L2155.92 1213.99 L2155.33 1213.99 L2154.75 1213.99 L2154.16 1213.99 L2153.57 1213.99 L2152.99 1213.99 L2152.4 1213.99 L2151.81 1213.99 L2151.23 1213.99 L2150.64 1213.99 L2150.05 1213.99 L2149.47 1213.99 L2148.88 1213.99 L2148.3 1213.99 L2147.71 1213.99 L2147.12 1213.99 L2146.54 1213.99 L2145.95 1213.99 L2145.36 1213.99 L2144.78 1213.99 L2144.19 1213.99 L2143.6 1213.99 L2143.02 1213.99 L2142.43 1213.99 L2141.84 1213.99 L2141.26 1213.99 L2140.67 1213.99 L2140.09 1213.99 L2139.5 1213.99 L2138.91 1213.99 L2138.33 1213.99 L2137.74 1213.99 L2137.15 1213.99 L2136.57 1213.99 L2135.98 1213.99 L2135.39 1213.99 L2134.81 1213.99 L2134.22 1213.99 L2133.63 1213.99 L2133.05 1213.99 L2132.46 1213.99 L2131.88 1213.99 L2131.29 1213.99 L2130.7 1213.99 L2130.12 1213.99 L2129.53 1213.99 L2128.94 1213.99 L2128.36 1213.99 L2127.77 1213.99 L2127.18 1213.99 L2126.6 1213.99 L2126.01 1213.99 L2125.42 1213.99 L2124.84 1213.99 L2124.25 1213.99 L2123.67 1213.99 L2123.08 1213.99 L2122.49 1213.99 L2121.91 1213.99 L2121.32 1213.99 L2120.73 1213.99 L2120.15 1213.99 L2119.56 1213.99 L2118.97 1213.99 L2118.39 1213.99 L2117.8 1213.99 L2117.22 1213.99 L2116.63 1213.99 L2116.04 1213.99 L2115.46 1213.99 L2114.87 1213.99 L2114.28 1213.99 L2113.7 1213.99 L2113.11 1213.99 L2112.52 1213.99 L2111.94 1213.99 L2111.35 1213.99 L2110.76 1213.99 L2110.18 1213.99 L2109.59 1213.99 L2109.01 1213.99 L2108.42 1213.99 L2107.83 1213.99 L2107.25 1213.99 L2106.66 1213.99 L2106.07 1213.99 L2105.49 1213.99 L2104.9 1213.99 L2104.31 1213.99 L2103.73 1213.99 L2103.14 1213.99 L2102.55 1213.99 L2101.97 1213.99 L2101.38 1213.99 L2100.8 1213.99 L2100.21 1213.99 L2099.62 1213.99 L2099.04 1213.99 L2098.45 1213.99 L2097.86 1213.99 L2097.28 1213.99 L2096.69 1213.99 L2096.1 1213.99 L2095.52 1213.99 L2094.93 1213.99 L2094.35 1213.99 L2093.76 1213.99 L2093.17 1213.99 L2092.59 1213.99 L2092 1213.99 L2091.41 1213.99 L2090.83 1213.99 L2090.24 1213.99 L2089.65 1213.99 L2089.07 1213.99 L2088.48 1213.99 L2087.89 1213.99 L2087.31 1213.99 L2086.72 1213.99 L2086.14 1213.99 L2085.55 1213.99 L2084.96 1213.99 L2084.38 1213.99 L2083.79 1213.99 L2083.2 1213.99 L2082.62 1213.99 L2082.03 1213.99 L2081.44 1213.99 L2080.86 1213.99 L2080.27 1213.99 L2079.68 1213.99 L2079.1 1213.99 L2078.51 1213.99 L2077.93 1213.99 L2077.34 1213.99 L2076.75 1213.99 L2076.17 1213.99 L2075.58 1213.99 L2074.99 1213.99 L2074.41 1213.99 L2073.82 1213.99 L2073.23 1213.99 L2072.65 1213.99 L2072.06 1213.99 L2071.48 1213.99 L2070.89 1213.99 L2070.3 1213.99 L2069.72 1213.99 L2069.13 1213.99 L2068.54 1213.99 L2067.96 1213.99 L2067.37 1213.99 L2066.78 1213.99 L2066.2 1213.99 L2065.61 1213.99 L2065.02 1213.99 L2064.44 1213.99 L2063.85 1213.99 L2063.27 1213.99 L2062.68 1213.99 L2062.09 1213.99 L2061.51 1213.99 L2060.92 1213.99 L2060.33 1213.99 L2059.75 1213.99 L2059.16 1213.99 L2058.57 1213.99 L2057.99 1213.99 L2057.4 1213.99 L2056.81 1213.99 L2056.23 1213.99 L2055.64 1213.99 L2055.06 1213.99 L2054.47 1213.99 L2053.88 1213.99 L2053.3 1213.99 L2052.71 1213.99 L2052.12 1213.99 L2051.54 1213.99 L2050.95 1213.99 L2050.36 1213.99 L2049.78 1213.99 L2049.19 1213.99 L2048.6 1213.99 L2048.02 1213.99 L2047.43 1213.99 L2046.85 1213.99 L2046.26 1213.99 L2045.67 1213.99 L2045.09 1213.99 L2044.5 1213.99 L2043.91 1213.99 L2043.33 1213.99 L2042.74 1213.99 L2042.15 1213.99 L2041.57 1213.99 L2040.98 1213.99 L2040.4 1213.99 L2039.81 1213.99 L2039.22 1213.99 L2038.64 1213.99 L2038.05 1213.99 L2037.46 1213.99 L2036.88 1213.99 L2036.29 1213.99 L2035.7 1213.99 L2035.12 1213.99 L2034.53 1213.99 L2033.94 1213.99 L2033.36 1213.99 L2032.77 1213.99 L2032.19 1213.99 L2031.6 1213.99 L2031.01 1213.99 L2030.43 1213.99 L2029.84 1213.99 L2029.25 1213.99 L2028.67 1213.99 L2028.08 1213.99 L2027.49 1213.99 L2026.91 1213.99 L2026.32 1213.99 L2025.73 1213.99 L2025.15 1213.99 L2024.56 1213.99 L2023.98 1213.99 L2023.39 1213.99 L2022.8 1213.99 L2022.22 1213.99 L2021.63 1213.99 L2021.04 1213.99 L2020.46 1213.99 L2019.87 1213.99 L2019.28 1213.99 L2018.7 1213.99 L2018.11 1213.99 L2017.53 1213.99 L2016.94 1213.99 L2016.35 1213.99 L2015.77 1213.99 L2015.18 1213.99 L2014.59 1213.99 L2014.01 1213.99 L2013.42 1213.99 L2012.83 1213.99 L2012.25 1213.99 L2011.66 1213.99 L2011.07 1213.99 L2010.49 1213.99 L2009.9 1213.99 L2009.32 1213.99 L2008.73 1213.99 L2008.14 1213.99 L2007.56 1213.99 L2006.97 1213.99 L2006.38 1213.99 L2005.8 1213.99 L2005.21 1213.99 L2004.62 1213.99 L2004.04 1213.99 L2003.45 1213.99 L2002.86 1213.99 L2002.28 1213.99 L2001.69 1213.99 L2001.11 1213.99 L2000.52 1213.99 L1999.93 1213.99 L1999.35 1213.99 L1998.76 1213.99 L1998.17 1213.99 L1997.59 1213.99 L1997 1213.99 L1996.41 1213.99 L1995.83 1213.99 L1995.24 1213.99 L1994.65 1213.99 L1994.07 1213.99 L1993.48 1213.99 L1992.9 1213.99 L1992.31 1213.99 L1991.72 1213.99 L1991.14 1213.99 L1990.55 1213.99 L1989.96 1213.99 L1989.38 1213.99 L1988.79 1213.99 L1988.2 1213.99 L1987.62 1213.99 L1987.03 1213.99 L1986.45 1213.99 L1985.86 1213.99 L1985.27 1213.99 L1984.69 1213.99 L1984.1 1213.99 L1983.51 1213.99 L1982.93 1213.99 L1982.34 1213.99 L1981.75 1213.99 L1981.17 1213.99 L1980.58 1213.99 L1979.99 1213.99 L1979.41 1213.99 L1978.82 1213.99 L1978.24 1213.99 L1977.65 1213.99 L1977.06 1213.99 L1976.48 1213.99 L1975.89 1213.99 L1975.3 1213.99 L1974.72 1213.99 L1974.13 1213.99 L1973.54 1213.99 L1972.96 1213.99 L1972.37 1213.99 L1971.78 1213.99 L1971.2 1213.99 L1970.61 1213.99 L1970.03 1213.99 L1969.44 1213.99 L1968.85 1213.99 L1968.27 1213.99 L1967.68 1213.99 L1967.09 1213.99 L1966.51 1213.99 L1965.92 1213.99 L1965.33 1213.99 L1964.75 1213.99 L1964.16 1213.99 L1963.58 1213.99 L1962.99 1213.99 L1962.4 1213.99 L1961.82 1213.99 L1961.23 1213.99 L1960.64 1213.99 L1960.06 1213.99 L1959.47 1213.99 L1958.88 1213.99 L1958.3 1213.99 L1957.71 1213.99 L1957.12 1213.99 L1956.54 1213.99 L1955.95 1213.99 L1955.37 1213.99 L1954.78 1213.99 L1954.19 1213.99 L1953.61 1213.99 L1953.02 1213.99 L1952.43 1213.99 L1951.85 1213.99 L1951.26 1213.99 L1950.67 1213.99 L1950.09 1213.99 L1949.5 1213.99 L1948.91 1213.99 L1948.33 1213.99 L1947.74 1213.99 L1947.16 1213.99 L1946.57 1213.99 L1945.98 1213.99 L1945.4 1213.99 L1944.81 1213.99 L1944.22 1213.99 L1943.64 1213.99 L1943.05 1213.99 L1942.46 1213.99 L1941.88 1213.99 L1941.29 1213.99 L1940.71 1213.99 L1940.12 1213.99 L1939.53 1213.99 L1938.95 1213.99 L1938.36 1213.99 L1937.77 1213.99 L1937.19 1213.99 L1936.6 1213.99 L1936.01 1213.99 L1935.43 1213.99 L1934.84 1213.99 L1934.25 1213.99 L1933.67 1213.99 L1933.08 1213.99 L1932.5 1213.99 L1931.91 1213.99 L1931.32 1213.99 L1930.74 1213.99 L1930.15 1213.99 L1929.56 1213.99 L1928.98 1213.99 L1928.39 1213.99 L1927.8 1213.99 L1927.22 1213.99 L1926.63 1213.99 L1926.04 1213.99 L1925.46 1213.99 L1924.87 1213.99 L1924.29 1213.99 L1923.7 1213.99 L1923.11 1213.99 L1922.53 1213.99 L1921.94 1213.99 L1921.35 1213.99 L1920.77 1213.99 L1920.18 1213.99 L1919.59 1213.99 L1919.01 1213.99 L1918.42 1213.99 L1917.83 1213.99 L1917.25 1213.99 L1916.66 1213.99 L1916.08 1213.99 L1915.49 1213.99 L1914.9 1213.99 L1914.32 1213.99 L1913.73 1213.99 L1913.14 1213.99 L1912.56 1213.99 L1911.97 1213.99 L1911.38 1213.99 L1910.8 1213.99 L1910.21 1213.99 L1909.63 1213.99 L1909.04 1213.99 L1908.45 1213.99 L1907.87 1213.99 L1907.28 1213.99 L1906.69 1213.99 L1906.11 1213.99 L1905.52 1213.99 L1904.93 1213.99 L1904.35 1213.99 L1903.76 1213.99 L1903.17 1213.99 L1902.59 1213.99 L1902 1213.99 L1901.42 1213.99 L1900.83 1213.99 L1900.24 1213.99 L1899.66 1213.99 L1899.07 1213.99 L1898.48 1213.99 L1897.9 1213.99 L1897.31 1213.99 L1896.72 1213.99 L1896.14 1213.99 L1895.55 1213.99 L1894.96 1213.99 L1894.38 1213.99 L1893.79 1213.99 L1893.21 1213.99 L1892.62 1213.99 L1892.03 1213.99 L1891.45 1213.99 L1890.86 1213.99 L1890.27 1213.99 L1889.69 1213.99 L1889.1 1213.99 L1888.51 1213.99 L1887.93 1213.99 L1887.34 1213.99 L1886.76 1213.99 L1886.17 1213.99 L1885.58 1213.99 L1885 1213.99 L1884.41 1213.99 L1883.82 1213.99 L1883.24 1213.99 L1882.65 1213.99 L1882.06 1213.99 L1881.48 1213.99 L1880.89 1213.99 L1880.3 1213.99 L1879.72 1213.99 L1879.13 1213.99 L1878.55 1213.99 L1877.96 1213.99 L1877.37 1213.99 L1876.79 1213.99 L1876.2 1213.99 L1875.61 1213.99 L1875.03 1213.99 L1874.44 1213.99 L1873.85 1213.99 L1873.27 1213.99 L1872.68 1213.99 L1872.09 1213.99 L1871.51 1213.99 L1870.92 1213.99 L1870.34 1213.99 L1869.75 1213.99 L1869.16 1213.99 L1868.58 1213.99 L1867.99 1213.99 L1867.4 1213.99 L1866.82 1213.99 L1866.23 1213.99 L1865.64 1213.99 L1865.06 1213.99 L1864.47 1213.99 L1863.88 1213.99 L1863.3 1213.99 L1862.71 1213.99 L1862.13 1213.99 L1861.54 1213.99 L1860.95 1213.99 L1860.37 1213.99 L1859.78 1213.99 L1859.19 1213.99 L1858.61 1213.99 L1858.02 1213.99 L1857.43 1213.99 L1856.85 1213.99 L1856.26 1213.99 L1855.68 1213.99 L1855.09 1213.99 L1854.5 1213.99 L1853.92 1213.99 L1853.33 1213.99 L1852.74 1213.99 L1852.16 1213.99 L1851.57 1213.99 L1850.98 1213.99 L1850.4 1213.99 L1849.81 1213.99 L1849.22 1213.99 L1848.64 1213.99 L1848.05 1213.99 L1847.47 1213.99 L1846.88 1213.99 L1846.29 1213.99 L1845.71 1213.99 L1845.12 1213.99 L1844.53 1213.99 L1843.95 1213.99 L1843.36 1213.99 L1842.77 1213.99 L1842.19 1213.99 L1841.6 1213.99 L1841.01 1213.99 L1840.43 1213.99 L1839.84 1213.99 L1839.26 1213.99 L1838.67 1213.99 L1838.08 1213.99 L1837.5 1213.99 L1836.91 1213.99 L1836.32 1213.99 L1835.74 1213.99 L1835.15 1213.99 L1834.56 1213.99 L1833.98 1213.99 L1833.39 1213.99 L1832.81 1213.99 L1832.22 1213.99 L1831.63 1213.99 L1831.05 1213.99 L1830.46 1213.99 L1829.87 1213.99 L1829.29 1213.99 L1828.7 1213.99 L1828.11 1213.99 L1827.53 1213.99 L1826.94 1213.99 L1826.35 1213.99 L1825.77 1213.99 L1825.18 1213.99 L1824.6 1213.99 L1824.01 1213.99 L1823.42 1213.99 L1822.84 1213.99 L1822.25 1213.99 L1821.66 1213.99 L1821.08 1213.99 L1820.49 1213.99 L1819.9 1213.99 L1819.32 1213.99 L1818.73 1213.99 L1818.14 1213.99 L1817.56 1213.99 L1816.97 1213.99 L1816.39 1213.99 L1815.8 1213.99 L1815.21 1213.99 L1814.63 1213.99 L1814.04 1213.99 L1813.45 1213.99 L1812.87 1213.99 L1812.28 1213.99 L1811.69 1213.99 L1811.11 1213.99 L1810.52 1213.99 L1809.94 1213.99 L1809.35 1213.99 L1808.76 1213.99 L1808.18 1213.99 L1807.59 1213.99 L1807 1213.99 L1806.42 1213.99 L1805.83 1213.99 L1805.24 1213.99 L1804.66 1213.99 L1804.07 1213.99 L1803.48 1213.99 L1802.9 1213.99 L1802.31 1213.99 L1801.73 1213.99 L1801.14 1213.99 L1800.55 1213.99 L1799.97 1213.99 L1799.38 1213.99 L1798.79 1213.99 L1798.21 1213.99 L1797.62 1213.99 L1797.03 1213.99 L1796.45 1213.99 L1795.86 1213.99 L1795.27 1213.99 L1794.69 1213.99 L1794.1 1213.99 L1793.52 1213.99 L1792.93 1213.99 L1792.34 1213.99 L1791.76 1213.99 L1791.17 1213.99 L1790.58 1213.99 L1790 1213.99 L1789.41 1213.99 L1788.82 1213.99 L1788.24 1213.99 L1787.65 1213.99 L1787.06 1213.99 L1786.48 1213.99 L1785.89 1213.99 L1785.31 1213.99 L1784.72 1213.99 L1784.13 1213.99 L1783.55 1213.99 L1782.96 1213.99 L1782.37 1213.99 L1781.79 1213.99 L1781.2 1213.99 L1780.61 1213.99 L1780.03 1213.99 L1779.44 1213.99 L1778.86 1213.99 L1778.27 1213.99 L1777.68 1213.99 L1777.1 1213.99 L1776.51 1213.99 L1775.92 1213.99 L1775.34 1213.99 L1774.75 1213.99 L1774.16 1213.99 L1773.58 1213.99 L1772.99 1213.99 L1772.4 1213.99 L1771.82 1213.99 L1771.23 1213.99 L1770.65 1213.99 L1770.06 1213.99 L1769.47 1213.99 L1768.89 1213.99 L1768.3 1213.99 L1767.71 1213.99 L1767.13 1213.99 L1766.54 1213.99 L1765.95 1213.99 L1765.37 1213.99 L1764.78 1213.99 L1764.19 1213.99 L1763.61 1213.99 L1763.02 1213.99 L1762.44 1213.99 L1761.85 1213.99 L1761.26 1213.99 L1760.68 1213.99 L1760.09 1213.99 L1759.5 1213.99 L1758.92 1213.99 L1758.33 1213.99 L1757.74 1213.99 L1757.16 1213.99 L1756.57 1213.99 L1755.99 1213.99 L1755.4 1213.99 L1754.81 1213.99 L1754.23 1213.99 L1753.64 1213.99 L1753.05 1213.99 L1752.47 1213.99 L1751.88 1213.99 L1751.29 1213.99 L1750.71 1213.99 L1750.12 1213.99 L1749.53 1213.99 L1748.95 1213.99 L1748.36 1213.99 L1747.78 1213.99 L1747.19 1213.99 L1746.6 1213.99 L1746.02 1213.99 L1745.43 1213.99 L1744.84 1213.99 L1744.26 1213.99 L1743.67 1213.99 L1743.08 1213.99 L1742.5 1213.99 L1741.91 1213.99 L1741.32 1213.99 L1740.74 1213.99 L1740.15 1213.99 L1739.57 1213.99 L1738.98 1213.99 L1738.39 1213.99 L1737.81 1213.99 L1737.22 1213.99 L1736.63 1213.99 L1736.05 1213.99 L1735.46 1213.99 L1734.87 1213.99 L1734.29 1213.99 L1733.7 1213.99 L1733.11 1213.99 L1732.53 1213.99 L1731.94 1213.99 L1731.36 1213.99 L1730.77 1213.99 L1730.18 1213.99 L1729.6 1213.99 L1729.01 1213.99 L1728.42 1213.99 L1727.84 1213.99 L1727.25 1213.99 L1726.66 1213.99 L1726.08 1213.99 L1725.49 1213.99 L1724.91 1213.99 L1724.32 1213.99 L1723.73 1213.99 L1723.15 1213.99 L1722.56 1213.99 L1721.97 1213.99 L1721.39 1213.99 L1720.8 1213.99 L1720.21 1213.99 L1719.63 1213.99 L1719.04 1213.99 L1718.45 1213.99 L1717.87 1213.99 L1717.28 1213.99 L1716.7 1213.99 L1716.11 1213.99 L1715.52 1213.99 L1714.94 1213.99 L1714.35 1213.99 L1713.76 1213.99 L1713.18 1213.99 L1712.59 1213.99 L1712 1213.99 L1711.42 1213.99 L1710.83 1213.99 L1710.24 1213.99 L1709.66 1213.99 L1709.07 1213.99 L1708.49 1213.99 L1707.9 1213.99 L1707.31 1213.99 L1706.73 1213.99 L1706.14 1213.99 L1705.55 1213.99 L1704.97 1213.99 L1704.38 1213.99 L1703.79 1213.99 L1703.21 1213.99 L1702.62 1213.99 L1702.04 1213.99 L1701.45 1213.99 L1700.86 1213.99 L1700.28 1213.99 L1699.69 1213.99 L1699.1 1213.99 L1698.52 1213.99 L1697.93 1213.99 L1697.34 1213.99 L1696.76 1213.99 L1696.17 1213.99 L1695.58 1213.99 L1695 1213.99 L1694.41 1213.99 L1693.83 1213.99 L1693.24 1213.99 L1692.65 1213.99 L1692.07 1213.99 L1691.48 1213.99 L1690.89 1213.99 L1690.31 1213.99 L1689.72 1213.99 L1689.13 1213.99 L1688.55 1213.99 L1687.96 1213.99 L1687.37 1213.99 L1686.79 1213.99 L1686.2 1213.99 L1685.62 1213.99 L1685.03 1213.99 L1684.44 1213.99 L1683.86 1213.99 L1683.27 1213.99 L1682.68 1213.99 L1682.1 1213.99 L1681.51 1213.99 L1680.92 1213.99 L1680.34 1213.99 L1679.75 1213.99 L1679.17 1213.99 L1678.58 1213.99 L1677.99 1213.99 L1677.41 1213.99 L1676.82 1213.99 L1676.23 1213.99 L1675.65 1213.99 L1675.06 1213.99 L1674.47 1213.99 L1673.89 1213.99 L1673.3 1213.99 L1672.71 1213.99 L1672.13 1213.99 L1671.54 1213.99 L1670.96 1213.99 L1670.37 1213.99 L1669.78 1213.99 L1669.2 1213.99 L1668.61 1213.99 L1668.02 1213.99 L1667.44 1213.99 L1666.85 1213.99 L1666.26 1213.99 L1665.68 1213.99 L1665.09 1213.99 L1664.5 1213.99 L1663.92 1213.99 L1663.33 1213.99 L1662.75 1213.99 L1662.16 1213.99 L1661.57 1213.99 L1660.99 1213.99 L1660.4 1213.99 L1659.81 1213.99 L1659.23 1213.99 L1658.64 1213.99 L1658.05 1213.99 L1657.47 1213.99 L1656.88 1213.99 L1656.29 1213.99 L1655.71 1213.99 L1655.12 1213.99 L1654.54 1213.99 L1653.95 1213.99 L1653.36 1213.99 L1652.78 1213.99 L1652.19 1213.99 L1651.6 1213.99 L1651.02 1213.99 L1650.43 1213.99 L1649.84 1213.99 L1649.26 1213.99 L1648.67 1213.99 L1648.09 1213.99 L1647.5 1213.99 L1646.91 1213.99 L1646.33 1213.99 L1645.74 1213.99 L1645.15 1213.99 L1644.57 1213.99 L1643.98 1213.99 L1643.39 1213.99 L1642.81 1213.99 L1642.22 1213.99 L1641.63 1213.99 L1641.05 1213.99 L1640.46 1213.99 L1639.88 1213.99 L1639.29 1213.99 L1638.7 1213.99 L1638.12 1213.99 L1637.53 1213.99 L1636.94 1213.99 L1636.36 1213.99 L1635.77 1213.99 L1635.18 1213.99 L1634.6 1213.99 L1634.01 1213.99 L1633.42 1213.99 L1632.84 1213.99 L1632.25 1213.99 L1631.67 1213.99 L1631.08 1213.99 L1630.49 1213.99 L1629.91 1213.99 L1629.32 1213.99 L1628.73 1213.99 L1628.15 1213.99 L1627.56 1213.99 L1626.97 1213.99 L1626.39 1213.99 L1625.8 1213.99 L1625.22 1213.99 L1624.63 1213.99 L1624.04 1213.99 L1623.46 1213.99 L1622.87 1213.99 L1622.28 1213.99 L1621.7 1213.99 L1621.11 1213.99 L1620.52 1213.99 L1619.94 1213.99 L1619.35 1213.99 L1618.76 1213.99 L1618.18 1213.99 L1617.59 1213.99 L1617.01 1213.99 L1616.42 1213.99 L1615.83 1213.99 L1615.25 1213.99 L1614.66 1213.99 L1614.07 1213.99 L1613.49 1213.99 L1612.9 1213.99 L1612.31 1213.99 L1611.73 1213.99 L1611.14 1213.99 L1610.55 1213.99 L1609.97 1213.99 L1609.38 1213.99 L1608.8 1213.99 L1608.21 1213.99 L1607.62 1213.99 L1607.04 1213.99 L1606.45 1213.99 L1605.86 1213.99 L1605.28 1213.99 L1604.69 1213.99 L1604.1 1213.99 L1603.52 1213.99 L1602.93 1213.99 L1602.34 1213.99 L1601.76 1213.99 L1601.17 1213.99 L1600.59 1213.99 L1600 1213.99 L1599.41 1213.99 L1598.83 1213.99 L1598.24 1213.99 L1597.65 1213.99 L1597.07 1213.99 L1596.48 1213.99 L1595.89 1213.99 L1595.31 1213.99 L1594.72 1213.99 L1594.14 1213.99 L1593.55 1213.99 L1592.96 1213.99 L1592.38 1213.99 L1591.79 1213.99 L1591.2 1213.99 L1590.62 1213.99 L1590.03 1213.99 L1589.44 1213.99 L1588.86 1213.99 L1588.27 1213.99 L1587.68 1213.99 L1587.1 1213.99 L1586.51 1213.99 L1585.93 1213.99 L1585.34 1213.99 L1584.75 1213.99 L1584.17 1213.99 L1583.58 1213.99 L1582.99 1213.99 L1582.41 1213.99 L1581.82 1213.99 L1581.23 1213.99 L1580.65 1213.99 L1580.06 1213.99 L1579.47 1213.99 L1578.89 1213.99 L1578.3 1213.99 L1577.72 1213.99 L1577.13 1213.99 L1576.54 1213.99 L1575.96 1213.99 L1575.37 1213.99 L1574.78 1213.99 L1574.2 1213.99 L1573.61 1213.99 L1573.02 1213.99 L1572.44 1213.99 L1571.85 1213.99 L1571.27 1213.99 L1570.68 1213.99 L1570.09 1213.99 L1569.51 1213.99 L1568.92 1213.99 L1568.33 1213.99 L1567.75 1213.99 L1567.16 1213.99 L1566.57 1213.99 L1565.99 1213.99 L1565.4 1213.99 L1564.81 1213.99 L1564.23 1213.99 L1563.64 1213.99 L1563.06 1213.99 L1562.47 1213.99 L1561.88 1213.99 L1561.3 1213.99 L1560.71 1213.99 L1560.12 1213.99 L1559.54 1213.99 L1558.95 1213.99 L1558.36 1213.99 L1557.78 1213.99 L1557.19 1213.99 L1556.6 1213.99 L1556.02 1213.99 L1555.43 1213.99 L1554.85 1213.99 L1554.26 1213.99 L1553.67 1213.99 L1553.09 1213.99 L1552.5 1213.99 L1551.91 1213.99 L1551.33 1213.99 L1550.74 1213.99 L1550.15 1213.99 L1549.57 1213.99 L1548.98 1213.99 L1548.4 1213.99 L1547.81 1213.99 L1547.22 1213.99 L1546.64 1213.99 L1546.05 1213.99 L1545.46 1213.99 L1544.88 1213.99 L1544.29 1213.99 L1543.7 1213.99 L1543.12 1213.99 L1542.53 1213.99 L1541.94 1213.99 L1541.36 1213.99 L1540.77 1213.99 L1540.19 1213.99 L1539.6 1213.99 L1539.01 1213.99 L1538.43 1213.99 L1537.84 1213.99 L1537.25 1213.99 L1536.67 1213.99 L1536.08 1213.99 L1535.49 1213.99 L1534.91 1213.99 L1534.32 1213.99 L1533.73 1213.99 L1533.15 1213.99 L1532.56 1213.99 L1531.98 1213.99 L1531.39 1213.99 L1530.8 1213.99 L1530.22 1213.99 L1529.63 1213.99 L1529.04 1213.99 L1528.46 1213.99 L1527.87 1213.99 L1527.28 1213.99 L1526.7 1213.99 L1526.11 1213.99 L1525.52 1213.99 L1524.94 1213.99 L1524.35 1213.99 L1523.77 1213.99 L1523.18 1213.99 L1522.59 1213.99 L1522.01 1213.99 L1521.42 1213.99 L1520.83 1213.99 L1520.25 1213.99 L1519.66 1213.99 L1519.07 1213.99 L1518.49 1213.99 L1517.9 1213.99 L1517.32 1213.99 L1516.73 1213.99 L1516.14 1213.99 L1515.56 1213.99 L1514.97 1213.99 L1514.38 1213.99 L1513.8 1213.99 L1513.21 1213.99 L1512.62 1213.99 L1512.04 1213.99 L1511.45 1213.99 L1510.86 1213.99 L1510.28 1213.99 L1509.69 1213.99 L1509.11 1213.99 L1508.52 1213.99 L1507.93 1213.99 L1507.35 1213.99 L1506.76 1213.99 L1506.17 1213.99 L1505.59 1213.99 L1505 1213.99 L1504.41 1213.99 L1503.83 1213.99 L1503.24 1213.99 L1502.65 1213.99 L1502.07 1213.99 L1501.48 1213.99 L1500.9 1213.99 L1500.31 1213.99 L1499.72 1213.99 L1499.14 1213.99 L1498.55 1213.99 L1497.96 1213.99 L1497.38 1213.99 L1496.79 1213.99 L1496.2 1213.99 L1495.62 1213.99 L1495.03 1213.99 L1494.45 1213.99 L1493.86 1213.99 L1493.27 1213.99 L1492.69 1213.99 L1492.1 1213.99 L1491.51 1213.99 L1490.93 1213.99 L1490.34 1213.99 L1489.75 1213.99 L1489.17 1213.99 L1488.58 1213.99 L1487.99 1213.99 L1487.41 1213.99 L1486.82 1213.99 L1486.24 1213.99 L1485.65 1213.99 L1485.06 1213.99 L1484.48 1213.99 L1483.89 1213.99 L1483.3 1213.99 L1482.72 1213.99 L1482.13 1213.99 L1481.54 1213.99 L1480.96 1213.99 L1480.37 1213.99 L1479.78 1213.99 L1479.2 1213.99 L1478.61 1213.99 L1478.03 1213.99 L1477.44 1213.99 L1476.85 1213.99 L1476.27 1213.99 L1475.68 1213.99 L1475.09 1213.99 L1474.51 1213.99 L1473.92 1213.99 L1473.33 1213.99 L1472.75 1213.99 L1472.16 1213.99 L1471.57 1213.99 L1470.99 1213.99 L1470.4 1213.99 L1469.82 1213.99 L1469.23 1213.99 L1468.64 1213.99 L1468.06 1213.99 L1467.47 1213.99 L1466.88 1213.99 L1466.3 1213.99 L1465.71 1213.99 L1465.12 1213.99 L1464.54 1213.99 L1463.95 1213.99 L1463.37 1213.99 L1462.78 1213.99 L1462.19 1213.99 L1461.61 1213.99 L1461.02 1213.99 L1460.43 1213.99 L1459.85 1213.99 L1459.26 1213.99 L1458.67 1213.99 L1458.09 1213.99 L1457.5 1213.99 L1456.91 1213.99 L1456.33 1213.99 L1455.74 1213.99 L1455.16 1213.99 L1454.57 1213.99 L1453.98 1213.99 L1453.4 1213.99 L1452.81 1213.99 L1452.22 1213.99 L1451.64 1213.99 L1451.05 1213.99 L1450.46 1213.99 L1449.88 1213.99 L1449.29 1213.99 L1448.7 1213.99 L1448.12 1213.99 L1447.53 1213.99 L1446.95 1213.99 L1446.36 1213.99 L1445.77 1213.99 L1445.19 1213.99 L1444.6 1213.99 L1444.01 1213.99 L1443.43 1213.99 L1442.84 1213.99 L1442.25 1213.99 L1441.67 1213.99 L1441.08 1213.99 L1440.5 1213.99 L1439.91 1213.99 L1439.32 1213.99 L1438.74 1213.99 L1438.15 1213.99 L1437.56 1213.99 L1436.98 1213.99 L1436.39 1213.99 L1435.8 1213.99 L1435.22 1213.99 L1434.63 1213.99 L1434.04 1213.99 L1433.46 1213.99 L1432.87 1213.99 L1432.29 1213.99 L1431.7 1213.99 L1431.11 1213.99 L1430.53 1213.99 L1429.94 1213.99 L1429.35 1213.99 L1428.77 1213.99 L1428.18 1213.99 L1427.59 1213.99 L1427.01 1213.99 L1426.42 1213.99 L1425.83 1213.99 L1425.25 1213.99 L1424.66 1213.99 L1424.08 1213.99 L1423.49 1213.99 L1422.9 1213.99 L1422.32 1213.99 L1421.73 1213.99 L1421.14 1213.99 L1420.56 1213.99 L1419.97 1213.99 L1419.38 1213.99 L1418.8 1213.99 L1418.21 1213.99 L1417.63 1213.99 L1417.04 1213.99 L1416.45 1213.99 L1415.87 1213.99 L1415.28 1213.99 L1414.69 1213.99 L1414.11 1213.99 L1413.52 1213.99 L1412.93 1213.99 L1412.35 1213.99 L1411.76 1213.99 L1411.17 1213.99 L1410.59 1213.99 L1410 1213.99 L1409.42 1213.99 L1408.83 1213.99 L1408.24 1213.99 L1407.66 1213.99 L1407.07 1213.99 L1406.48 1213.99 L1405.9 1213.99 L1405.31 1213.99 L1404.72 1213.99 L1404.14 1213.99 L1403.55 1213.99 L1402.96 1213.99 L1402.38 1213.99 L1401.79 1213.99 L1401.21 1213.99 L1400.62 1213.99 L1400.03 1213.99 L1399.45 1213.99 L1398.86 1213.99 L1398.27 1213.99 L1397.69 1213.99 L1397.1 1213.99 L1396.51 1213.99 L1395.93 1213.99 L1395.34 1213.99 L1394.75 1213.99 L1394.17 1213.99 L1393.58 1213.99 L1393 1213.99 L1392.41 1213.99 L1391.82 1213.99 L1391.24 1213.99 L1390.65 1213.99 L1390.06 1213.99 L1389.48 1213.99 L1388.89 1213.99 L1388.3 1213.99 L1387.72 1213.99 L1387.13 1213.99 L1386.55 1213.99 L1385.96 1213.99 L1385.37 1213.99 L1384.79 1213.99 L1384.2 1213.99 L1383.61 1213.99 L1383.03 1213.99 L1382.44 1213.99 L1381.85 1213.99 L1381.27 1213.99 L1380.68 1213.99 L1380.09 1213.99 L1379.51 1213.99 L1378.92 1213.99 L1378.34 1213.99 L1377.75 1213.99 L1377.16 1213.99 L1376.58 1213.99 L1375.99 1213.99 L1375.4 1213.99 L1374.82 1213.99 L1374.23 1213.99 L1373.64 1213.99 L1373.06 1213.99 L1372.47 1213.99 L1371.88 1213.99 L1371.3 1213.99 L1370.71 1213.99 L1370.13 1213.99 L1369.54 1213.99 L1368.95 1213.99 L1368.37 1213.99 L1367.78 1213.99 L1367.19 1213.99 L1366.61 1213.99 L1366.02 1213.99 L1365.43 1213.99 L1364.85 1213.99 L1364.26 1213.99 L1363.68 1213.99 L1363.09 1213.99 L1362.5 1213.99 L1361.92 1213.99 L1361.33 1213.99 L1360.74 1213.99 L1360.16 1213.99 L1359.57 1213.99 L1358.98 1213.99 L1358.4 1213.99 L1357.81 1213.99 L1357.22 1213.99 L1356.64 1213.99 L1356.05 1213.99 L1355.47 1213.99 L1354.88 1213.99 L1354.29 1213.99 L1353.71 1213.99 L1353.12 1213.99 L1352.53 1213.99 L1351.95 1213.99 L1351.36 1213.99 L1350.77 1213.99 L1350.19 1213.99 L1349.6 1213.99 L1349.01 1213.99 L1348.43 1213.99 L1347.84 1213.99 L1347.26 1213.99 L1346.67 1213.99 L1346.08 1213.99 L1345.5 1213.99 L1344.91 1213.99 L1344.32 1213.99 L1343.74 1213.99 L1343.15 1213.99 L1342.56 1213.99 L1341.98 1213.99 L1341.39 1213.99 L1340.8 1213.99 L1340.22 1213.99 L1339.63 1213.99 L1339.05 1213.99 L1338.46 1213.99 L1337.87 1213.99 L1337.29 1213.99 L1336.7 1213.99 L1336.11 1213.99 L1335.53 1213.99 L1334.94 1213.99 L1334.35 1213.99 L1333.77 1213.99 L1333.18 1213.99 L1332.6 1213.99 L1332.01 1213.99 L1331.42 1213.99 L1330.84 1213.99 L1330.25 1213.99 L1329.66 1213.99 L1329.08 1213.99 L1328.49 1213.99 L1327.9 1213.99 L1327.32 1213.99 L1326.73 1213.99 L1326.14 1213.99 L1325.56 1213.99 L1324.97 1213.99 L1324.39 1213.99 L1323.8 1213.99 L1323.21 1213.99 L1322.63 1213.99 L1322.04 1213.99 L1321.45 1213.99 L1320.87 1213.99 L1320.28 1213.99 L1319.69 1213.99 L1319.11 1213.99 L1318.52 1213.99 L1317.93 1213.99 L1317.35 1213.99 L1316.76 1213.99 L1316.18 1213.99 L1315.59 1213.99 L1315 1213.99 L1314.42 1213.99 L1313.83 1213.99 L1313.24 1213.99 L1312.66 1213.99 L1312.07 1213.99 L1311.48 1213.99 L1310.9 1213.99 L1310.31 1213.99 L1309.73 1213.99 L1309.14 1213.99 L1308.55 1213.99 L1307.97 1213.99 L1307.38 1213.99 L1306.79 1213.99 L1306.21 1213.99 L1305.62 1213.99 L1305.03 1213.99 L1304.45 1213.99 L1303.86 1213.99 L1303.27 1213.99 L1302.69 1213.99 L1302.1 1213.99 L1301.52 1213.99 L1300.93 1213.99 L1300.34 1213.99 L1299.76 1213.99 L1299.17 1213.99 L1298.58 1213.99 L1298 1213.99 L1297.41 1213.99 L1296.82 1213.99 L1296.24 1213.99 L1295.65 1213.99 L1295.06 1213.99 L1294.48 1213.99 L1293.89 1213.99 L1293.31 1213.99 L1292.72 1213.99 L1292.13 1213.99 L1291.55 1213.99 L1290.96 1213.99 L1290.37 1213.99 L1289.79 1213.99 L1289.2 1213.99 L1288.61 1213.99 L1288.03 1213.99 L1287.44 1213.99 L1286.86 1213.99 L1286.27 1213.99 L1285.68 1213.99 L1285.1 1213.99 L1284.51 1213.99 L1283.92 1213.99 L1283.34 1213.99 L1282.75 1213.99 L1282.16 1213.99 L1281.58 1213.99 L1280.99 1213.99 L1280.4 1213.99 L1279.82 1213.99 L1279.23 1213.99 L1278.65 1213.99 L1278.06 1213.99 L1277.47 1213.99 L1276.89 1213.99 L1276.3 1213.99 L1275.71 1213.99 L1275.13 1213.99 L1274.54 1213.99 L1273.95 1213.99 L1273.37 1213.99 L1272.78 1213.99 L1272.19 1213.99 L1271.61 1213.99 L1271.02 1213.99 L1270.44 1213.99 L1269.85 1213.99 L1269.26 1213.99 L1268.68 1213.99 L1268.09 1213.99 L1267.5 1213.99 L1266.92 1213.99 L1266.33 1213.99 L1265.74 1213.99 L1265.16 1213.99 L1264.57 1213.99 L1263.98 1213.99 L1263.4 1213.99 L1262.81 1213.99 L1262.23 1213.99 L1261.64 1213.99 L1261.05 1213.99 L1260.47 1213.99 L1259.88 1213.99 L1259.29 1213.99 L1258.71 1213.99 L1258.12 1213.99 L1257.53 1213.99 L1256.95 1213.99 L1256.36 1213.99 L1255.78 1213.99 L1255.19 1213.99 L1254.6 1213.99 L1254.02 1213.99 L1253.43 1213.99 L1252.84 1213.99 L1252.26 1213.99 L1251.67 1213.99 L1251.08 1213.99 L1250.5 1213.99 L1249.91 1213.99 L1249.32 1213.99 L1248.74 1213.99 L1248.15 1213.99 L1247.57 1213.99 L1246.98 1213.99 L1246.39 1213.99 L1245.81 1213.99 L1245.22 1213.99 L1244.63 1213.99 L1244.05 1213.99 L1243.46 1213.99 L1242.87 1213.99 L1242.29 1213.99 L1241.7 1213.99 L1241.11 1213.99 L1240.53 1213.99 L1239.94 1213.99 L1239.36 1213.99 L1238.77 1213.99 L1238.18 1213.99 L1237.6 1213.99 L1237.01 1213.99 L1236.42 1213.99 L1235.84 1213.99 L1235.25 1213.99 L1234.66 1213.99 L1234.08 1213.99 L1233.49 1213.99 L1232.91 1213.99 L1232.32 1213.99 L1231.73 1213.99 L1231.15 1213.99 L1230.56 1213.99 L1229.97 1213.99 L1229.39 1213.99 L1228.8 1213.99 L1228.21 1213.99 L1227.63 1213.99 L1227.04 1213.99 L1226.45 1213.99 L1225.87 1213.99 L1225.28 1213.99 L1224.7 1213.99 L1224.11 1213.99 L1223.52 1213.99 L1222.94 1213.99 L1222.35 1213.99 L1221.76 1213.99 L1221.18 1213.99 L1220.59 1213.99 L1220 1213.99 L1219.42 1213.99 L1218.83 1213.99 L1218.24 1213.99 L1217.66 1213.99 L1217.07 1213.99 L1216.49 1213.99 L1215.9 1213.99 L1215.31 1213.99 L1214.73 1213.99 L1214.14 1213.99 L1213.55 1213.99 L1212.97 1213.99 L1212.38 1213.99 L1211.79 1213.99 L1211.21 1213.99 L1210.62 1213.99 L1210.03 1213.99 L1209.45 1213.99 L1208.86 1213.99 L1208.28 1213.99 L1207.69 1213.99 L1207.1 1213.99 L1206.52 1213.99 L1205.93 1213.99 L1205.34 1213.99 L1204.76 1213.99 L1204.17 1213.99 L1203.58 1213.99 L1203 1213.99 L1202.41 1213.99 L1201.83 1213.99 L1201.24 1213.99 L1200.65 1213.99 L1200.07 1213.99 L1199.48 1213.99 L1198.89 1213.99 L1198.31 1213.99 L1197.72 1213.99 L1197.13 1213.99 L1196.55 1213.99 L1195.96 1213.99 L1195.37 1213.99 L1194.79 1213.99 L1194.2 1213.99 L1193.62 1213.99 L1193.03 1213.99 L1192.44 1213.99 L1191.86 1213.99 L1191.27 1213.99 L1190.68 1213.99 L1190.1 1213.99 L1189.51 1213.99 L1188.92 1213.99 L1188.34 1213.99 L1187.75 1213.99 L1187.16 1213.99 L1186.58 1213.99 L1185.99 1213.99 L1185.41 1213.99 L1184.82 1213.99 L1184.23 1213.99 L1183.65 1213.99 L1183.06 1213.99 L1182.47 1213.99 L1181.89 1213.99 L1181.3 1213.99 L1180.71 1213.99 L1180.13 1213.99 L1179.54 1213.99 L1178.96 1213.99 L1178.37 1213.99 L1177.78 1213.99 L1177.2 1213.99 L1176.61 1213.99 L1176.02 1213.99 L1175.44 1213.99 L1174.85 1213.99 L1174.26 1213.99 L1173.68 1213.99 L1173.09 1213.99 L1172.5 1213.99 L1171.92 1213.99 L1171.33 1213.99 L1170.75 1213.99 L1170.16 1213.99 L1169.57 1213.99 L1168.99 1213.99 L1168.4 1213.99 L1167.81 1213.99 L1167.23 1213.99 L1166.64 1213.99 L1166.05 1213.99 L1165.47 1213.99 L1164.88 1213.99 L1164.29 1213.99 L1163.71 1213.99 L1163.12 1213.99 L1162.54 1213.99 L1161.95 1213.99 L1161.36 1213.99 L1160.78 1213.99 L1160.19 1213.99 L1159.6 1213.99 L1159.02 1213.99 L1158.43 1213.99 L1157.84 1213.99 L1157.26 1213.99 L1156.67 1213.99 L1156.09 1213.99 L1155.5 1213.99 L1154.91 1213.99 L1154.33 1213.99 L1153.74 1213.99 L1153.15 1213.99 L1152.57 1213.99 L1151.98 1213.99 L1151.39 1213.99 L1150.81 1213.99 L1150.22 1213.99 L1149.63 1213.99 L1149.05 1213.99 L1148.46 1213.99 L1147.88 1213.99 L1147.29 1213.99 L1146.7 1213.99 L1146.12 1213.99 L1145.53 1213.99 L1144.94 1213.99 L1144.36 1213.99 L1143.77 1213.99 L1143.18 1213.99 L1142.6 1213.99 L1142.01 1213.99 L1141.42 1213.99 L1140.84 1213.99 L1140.25 1213.99 L1139.67 1213.99 L1139.08 1213.99 L1138.49 1213.99 L1137.91 1213.99 L1137.32 1213.99 L1136.73 1213.99 L1136.15 1213.99 L1135.56 1213.99 L1134.97 1213.99 L1134.39 1213.99 L1133.8 1213.99 L1133.21 1213.99 L1132.63 1213.99 L1132.04 1213.99 L1131.46 1213.99 L1130.87 1213.99 L1130.28 1213.99 L1129.7 1213.99 L1129.11 1213.99 L1128.52 1213.99 L1127.94 1213.99 L1127.35 1213.99 L1126.76 1213.99 L1126.18 1213.99 L1125.59 1213.99 L1125.01 1213.99 L1124.42 1213.99 L1123.83 1213.99 L1123.25 1213.99 L1122.66 1213.99 L1122.07 1213.99 L1121.49 1213.99 L1120.9 1213.99 L1120.31 1213.99 L1119.73 1213.99 L1119.14 1213.99 L1118.55 1213.99 L1117.97 1213.99 L1117.38 1213.99 L1116.8 1213.99 L1116.21 1213.99 L1115.62 1213.99 L1115.04 1213.99 L1114.45 1213.99 L1113.86 1213.99 L1113.28 1213.99 L1112.69 1213.99 L1112.1 1213.99 L1111.52 1213.99 L1110.93 1213.99 L1110.34 1213.99 L1109.76 1213.99 L1109.17 1213.99 L1108.59 1213.99 L1108 1213.99 L1107.41 1213.99 L1106.83 1213.99 L1106.24 1213.99 L1105.65 1213.99 L1105.07 1213.99 L1104.48 1213.99 L1103.89 1213.99 L1103.31 1213.99 L1102.72 1213.99 L1102.14 1213.99 L1101.55 1213.99 L1100.96 1213.99 L1100.38 1213.99 L1099.79 1213.99 L1099.2 1213.99 L1098.62 1213.99 L1098.03 1213.99 L1097.44 1213.99 L1096.86 1213.99 L1096.27 1213.99 L1095.68 1213.99 L1095.1 1213.99 L1094.51 1213.99 L1093.93 1213.99 L1093.34 1213.99 L1092.75 1213.99 L1092.17 1213.99 L1091.58 1213.99 L1090.99 1213.99 L1090.41 1213.99 L1089.82 1213.99 L1089.23 1213.99 L1088.65 1213.99 L1088.06 1213.99 L1087.47 1213.99 L1086.89 1213.99 L1086.3 1213.99 L1085.72 1213.99 L1085.13 1213.99 L1084.54 1213.99 L1083.96 1213.99 L1083.37 1213.99 L1082.78 1213.99 L1082.2 1213.99 L1081.61 1213.99 L1081.02 1213.99 L1080.44 1213.99 L1079.85 1213.99 L1079.26 1213.99 L1078.68 1213.99 L1078.09 1213.99 L1077.51 1213.99 L1076.92 1213.99 L1076.33 1213.99 L1075.75 1213.99 L1075.16 1213.99 L1074.57 1213.99 L1073.99 1213.99 L1073.4 1213.99 L1072.81 1213.99 L1072.23 1213.99 L1071.64 1213.99 L1071.06 1213.99 L1070.47 1213.99 L1069.88 1213.99 L1069.3 1213.99 L1068.71 1213.99 L1068.12 1213.99 L1067.54 1213.99 L1066.95 1213.99 L1066.36 1213.99 L1065.78 1213.99 L1065.19 1213.99 L1064.6 1213.99 L1064.02 1213.99 L1063.43 1213.99 L1062.85 1213.99 L1062.26 1213.99 L1061.67 1213.99 L1061.09 1213.99 L1060.5 1213.99 L1059.91 1213.99 L1059.33 1213.99 L1058.74 1213.99 L1058.15 1213.99 L1057.57 1213.99 L1056.98 1213.99 L1056.39 1213.99 L1055.81 1213.99 L1055.22 1213.99 L1054.64 1213.99 L1054.05 1213.99 L1053.46 1213.99 L1052.88 1213.99 L1052.29 1213.99 L1051.7 1213.99 L1051.12 1213.99 L1050.53 1213.99 L1049.94 1213.99 L1049.36 1213.99 L1048.77 1213.99 L1048.19 1213.99 L1047.6 1213.99 L1047.01 1213.99 L1046.43 1213.99 L1045.84 1213.99 L1045.25 1213.99 L1044.67 1213.99 L1044.08 1213.99 L1043.49 1213.99 L1042.91 1213.99 L1042.32 1213.99 L1041.73 1213.99 L1041.15 1213.99 L1040.56 1213.99 L1039.98 1213.99 L1039.39 1213.99 L1038.8 1213.99 L1038.22 1213.99 L1037.63 1213.99 L1037.04 1213.99 L1036.46 1213.99 L1035.87 1213.99 L1035.28 1213.99 L1034.7 1213.99 L1034.11 1213.99 L1033.52 1213.99 L1032.94 1213.99 L1032.35 1213.99 L1031.77 1213.99 L1031.18 1213.99 L1030.59 1213.99 L1030.01 1213.99 L1029.42 1213.99 L1028.83 1213.99 L1028.25 1213.99 L1027.66 1213.99 L1027.07 1213.99 L1026.49 1213.99 L1025.9 1213.99 L1025.32 1213.99 L1024.73 1213.99 L1024.14 1213.99 L1023.56 1213.99 L1022.97 1213.99 L1022.38 1213.99 L1021.8 1213.99 L1021.21 1213.99 L1020.62 1213.99 L1020.04 1213.99 L1019.45 1213.99 L1018.86 1213.99 L1018.28 1213.99 L1017.69 1213.99 L1017.11 1213.99 L1016.52 1213.99 L1015.93 1213.99 L1015.35 1213.99 L1014.76 1213.99 L1014.17 1213.99 L1013.59 1213.99 L1013 1213.99 L1012.41 1213.99 L1011.83 1213.99 L1011.24 1213.99 L1010.65 1213.99 L1010.07 1213.99 L1009.48 1213.99 L1008.9 1213.99 L1008.31 1213.99 L1007.72 1213.99 L1007.14 1213.99 L1006.55 1213.99 L1005.96 1213.99 L1005.38 1213.99 L1004.79 1213.99 L1004.2 1213.99 L1003.62 1213.99 L1003.03 1213.99 L1002.44 1213.99 L1001.86 1213.99 L1001.27 1213.99 L1000.69 1213.99 L1000.1 1213.99 L999.513 1213.99 L998.926 1213.99 L998.34 1213.99 L997.754 1213.99 L997.167 1213.99 L996.581 1213.99 L995.994 1213.99 L995.408 1213.99 L994.822 1213.99 L994.235 1213.99 L993.649 1213.99 L993.062 1213.99 L992.476 1213.99 L991.889 1213.99 L991.303 1213.99 L990.717 1213.99 L990.13 1213.99 L989.544 1213.99 L988.957 1213.99 L988.371 1213.99 L987.785 1213.99 L987.198 1213.99 L986.612 1213.99 L986.025 1213.99  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.06 986.612,1214.06 987.198,1214.06 987.785,1214.06 988.371,1214.06 988.957,1214.06 989.544,1214.06 990.13,1214.06 990.717,1214.06 991.303,1214.06 991.889,1214.06 992.476,1214.06 993.062,1214.06 993.649,1214.06 994.235,1214.06 994.822,1214.06 995.408,1214.06 995.994,1214.06 996.581,1214.06 997.167,1214.06 997.754,1214.06 998.34,1214.06 998.926,1214.06 999.513,1214.06 1000.1,1214.06 1000.69,1214.06 1001.27,1214.06 1001.86,1214.06 1002.44,1214.06 1003.03,1214.06 1003.62,1214.06 1004.2,1214.06 1004.79,1214.06 1005.38,1214.06 1005.96,1214.06 1006.55,1214.06 1007.14,1214.06 1007.72,1214.06 1008.31,1214.06 1008.9,1214.06 1009.48,1214.06 1010.07,1214.06 1010.65,1214.06 1011.24,1214.06 1011.83,1214.06 1012.41,1214.06 1013,1214.06 1013.59,1214.06 1014.17,1214.06 1014.76,1214.06 1015.35,1214.06 1015.93,1214.06 1016.52,1214.06 1017.11,1214.06 1017.69,1214.06 1018.28,1214.06 1018.86,1214.06 1019.45,1214.06 1020.04,1214.06 1020.62,1214.06 1021.21,1214.06 1021.8,1214.06 1022.38,1214.06 1022.97,1214.06 1023.56,1214.06 1024.14,1214.06 1024.73,1214.06 1025.32,1214.06 1025.9,1214.06 1026.49,1214.06 1027.07,1214.06 1027.66,1214.06 1028.25,1214.06 1028.83,1214.06 1029.42,1214.06 1030.01,1214.06 1030.59,1214.06 1031.18,1214.06 1031.77,1214.06 1032.35,1214.06 1032.94,1214.06 1033.52,1214.06 1034.11,1214.06 1034.7,1214.06 1035.28,1214.06 1035.87,1214.06 1036.46,1214.06 1037.04,1214.06 1037.63,1214.06 1038.22,1214.06 1038.8,1214.06 1039.39,1214.06 1039.98,1214.06 1040.56,1214.06 1041.15,1214.06 1041.73,1214.06 1042.32,1214.06 1042.91,1214.06 1043.49,1214.06 1044.08,1214.06 1044.67,1214.06 1045.25,1214.06 1045.84,1214.06 1046.43,1214.06 1047.01,1214.06 1047.6,1214.06 1048.19,1214.06 1048.77,1214.06 1049.36,1214.06 1049.94,1214.06 1050.53,1214.06 1051.12,1214.06 1051.7,1214.06 1052.29,1214.06 1052.88,1214.06 1053.46,1214.06 1054.05,1214.06 1054.64,1214.06 1055.22,1214.06 1055.81,1214.06 1056.39,1214.06 1056.98,1214.06 1057.57,1214.06 1058.15,1214.06 1058.74,1214.06 1059.33,1214.06 1059.91,1214.06 1060.5,1214.06 1061.09,1214.06 1061.67,1214.06 1062.26,1214.06 1062.85,1214.06 1063.43,1214.06 1064.02,1214.06 1064.6,1214.06 1065.19,1214.06 1065.78,1214.06 1066.36,1214.06 1066.95,1214.06 1067.54,1214.06 1068.12,1214.06 1068.71,1214.06 1069.3,1214.06 1069.88,1214.06 1070.47,1214.06 1071.06,1214.06 1071.64,1214.06 1072.23,1214.06 1072.81,1214.06 1073.4,1214.06 1073.99,1214.06 1074.57,1214.06 1075.16,1214.06 1075.75,1214.06 1076.33,1214.06 1076.92,1214.06 1077.51,1214.06 1078.09,1214.06 1078.68,1214.06 1079.26,1214.06 1079.85,1214.06 1080.44,1214.06 1081.02,1214.06 1081.61,1214.06 1082.2,1214.06 1082.78,1214.06 1083.37,1214.06 1083.96,1214.06 1084.54,1214.06 1085.13,1214.06 1085.72,1214.06 1086.3,1214.06 1086.89,1214.06 1087.47,1214.06 1088.06,1214.06 1088.65,1214.06 1089.23,1214.06 1089.82,1214.06 1090.41,1214.06 1090.99,1214.06 1091.58,1214.06 1092.17,1214.06 1092.75,1214.06 1093.34,1214.06 1093.93,1214.06 1094.51,1214.06 1095.1,1214.06 1095.68,1214.06 1096.27,1214.06 1096.86,1214.06 1097.44,1214.06 1098.03,1214.06 1098.62,1214.06 1099.2,1214.06 1099.79,1214.06 1100.38,1214.06 1100.96,1214.06 1101.55,1214.06 1102.14,1214.06 1102.72,1214.06 1103.31,1214.06 1103.89,1214.06 1104.48,1214.06 1105.07,1214.06 1105.65,1214.06 1106.24,1214.06 1106.83,1214.06 1107.41,1214.06 1108,1214.06 1108.59,1214.06 1109.17,1214.06 1109.76,1214.06 1110.34,1214.06 1110.93,1214.06 1111.52,1214.06 1112.1,1214.06 1112.69,1214.06 1113.28,1214.06 1113.86,1214.06 1114.45,1214.06 1115.04,1214.06 1115.62,1214.06 1116.21,1214.06 1116.8,1214.06 1117.38,1214.06 1117.97,1214.06 1118.55,1214.06 1119.14,1214.06 1119.73,1214.06 1120.31,1214.06 1120.9,1214.06 1121.49,1214.06 1122.07,1214.06 1122.66,1214.06 1123.25,1214.06 1123.83,1214.06 1124.42,1214.06 1125.01,1214.06 1125.59,1214.06 1126.18,1214.06 1126.76,1214.06 1127.35,1214.06 1127.94,1214.06 1128.52,1214.06 1129.11,1214.06 1129.7,1214.06 1130.28,1214.06 1130.87,1214.06 1131.46,1214.06 1132.04,1214.06 1132.63,1214.06 1133.21,1214.06 1133.8,1214.06 1134.39,1214.06 1134.97,1214.06 1135.56,1214.06 1136.15,1214.06 1136.73,1214.06 1137.32,1214.06 1137.91,1214.06 1138.49,1214.06 1139.08,1214.06 1139.67,1214.06 1140.25,1214.06 1140.84,1214.06 1141.42,1214.06 1142.01,1214.06 1142.6,1214.06 1143.18,1214.06 1143.77,1214.06 1144.36,1214.06 1144.94,1214.06 1145.53,1214.06 1146.12,1214.06 1146.7,1214.06 1147.29,1214.06 1147.88,1214.06 1148.46,1214.06 1149.05,1214.06 1149.63,1214.06 1150.22,1214.06 1150.81,1214.06 1151.39,1214.06 1151.98,1214.06 1152.57,1214.06 1153.15,1214.06 1153.74,1214.06 1154.33,1214.06 1154.91,1214.06 1155.5,1214.06 1156.09,1214.06 1156.67,1214.06 1157.26,1214.06 1157.84,1214.06 1158.43,1214.06 1159.02,1214.06 1159.6,1214.06 1160.19,1214.06 1160.78,1214.06 1161.36,1214.06 1161.95,1214.06 1162.54,1214.06 1163.12,1214.06 1163.71,1214.06 1164.29,1214.06 1164.88,1214.06 1165.47,1214.06 1166.05,1214.06 1166.64,1214.06 1167.23,1214.06 1167.81,1214.06 1168.4,1214.06 1168.99,1214.06 1169.57,1214.06 1170.16,1214.06 1170.75,1214.06 1171.33,1214.06 1171.92,1214.06 1172.5,1214.06 1173.09,1214.06 1173.68,1214.06 1174.26,1214.06 1174.85,1214.06 1175.44,1214.06 1176.02,1214.06 1176.61,1214.06 1177.2,1214.06 1177.78,1214.06 1178.37,1214.06 1178.96,1214.06 1179.54,1214.06 1180.13,1214.06 1180.71,1214.06 1181.3,1214.06 1181.89,1214.06 1182.47,1214.06 1183.06,1214.06 1183.65,1214.06 1184.23,1214.06 1184.82,1214.06 1185.41,1214.06 1185.99,1214.06 1186.58,1214.06 1187.16,1214.06 1187.75,1214.06 1188.34,1214.06 1188.92,1214.06 1189.51,1214.06 1190.1,1214.06 1190.68,1214.06 1191.27,1214.06 1191.86,1214.06 1192.44,1214.06 1193.03,1214.06 1193.62,1214.06 1194.2,1214.06 1194.79,1214.06 1195.37,1214.06 1195.96,1214.06 1196.55,1214.06 1197.13,1214.06 1197.72,1214.06 1198.31,1214.06 1198.89,1214.06 1199.48,1214.06 1200.07,1214.06 1200.65,1214.06 1201.24,1214.06 1201.83,1214.06 1202.41,1214.06 1203,1214.06 1203.58,1214.06 1204.17,1214.06 1204.76,1214.06 1205.34,1214.06 1205.93,1214.06 1206.52,1214.06 1207.1,1214.06 1207.69,1214.06 1208.28,1214.06 1208.86,1214.06 1209.45,1214.06 1210.03,1214.06 1210.62,1214.06 1211.21,1214.06 1211.79,1214.06 1212.38,1214.06 1212.97,1214.06 1213.55,1214.06 1214.14,1214.06 1214.73,1214.06 1215.31,1214.06 1215.9,1214.06 1216.49,1214.06 1217.07,1214.06 1217.66,1214.06 1218.24,1214.06 1218.83,1214.06 1219.42,1214.06 1220,1214.06 1220.59,1214.06 1221.18,1214.06 1221.76,1214.06 1222.35,1214.06 1222.94,1214.06 1223.52,1214.06 1224.11,1214.06 1224.7,1214.06 1225.28,1214.06 1225.87,1214.06 1226.45,1214.06 1227.04,1214.06 1227.63,1214.06 1228.21,1214.06 1228.8,1214.06 1229.39,1214.06 1229.97,1214.06 1230.56,1214.06 1231.15,1214.06 1231.73,1214.06 1232.32,1214.06 1232.91,1214.06 1233.49,1214.06 1234.08,1214.06 1234.66,1214.06 1235.25,1214.06 1235.84,1214.06 1236.42,1214.06 1237.01,1214.06 1237.6,1214.06 1238.18,1214.06 1238.77,1214.06 1239.36,1214.06 1239.94,1214.06 1240.53,1214.06 1241.11,1214.06 1241.7,1214.06 1242.29,1214.06 1242.87,1214.06 1243.46,1214.06 1244.05,1214.06 1244.63,1214.06 1245.22,1214.06 1245.81,1214.06 1246.39,1214.06 1246.98,1214.06 1247.57,1214.06 1248.15,1214.06 1248.74,1214.06 1249.32,1214.06 1249.91,1214.06 1250.5,1214.06 1251.08,1214.06 1251.67,1214.06 1252.26,1214.06 1252.84,1214.06 1253.43,1214.06 1254.02,1214.06 1254.6,1214.06 1255.19,1214.06 1255.78,1214.06 1256.36,1214.06 1256.95,1214.06 1257.53,1214.06 1258.12,1214.06 1258.71,1214.06 1259.29,1214.06 1259.88,1214.06 1260.47,1214.06 1261.05,1214.06 1261.64,1214.06 1262.23,1214.06 1262.81,1214.06 1263.4,1214.06 1263.98,1214.06 1264.57,1214.06 1265.16,1214.06 1265.74,1214.06 1266.33,1214.06 1266.92,1214.06 1267.5,1214.06 1268.09,1214.06 1268.68,1214.06 1269.26,1214.06 1269.85,1214.06 1270.44,1214.06 1271.02,1214.06 1271.61,1214.06 1272.19,1214.06 1272.78,1214.06 1273.37,1214.06 1273.95,1214.06 1274.54,1214.06 1275.13,1214.06 1275.71,1214.06 1276.3,1214.06 1276.89,1214.06 1277.47,1214.06 1278.06,1214.06 1278.65,1214.06 1279.23,1214.06 1279.82,1214.06 1280.4,1214.06 1280.99,1214.06 1281.58,1214.06 1282.16,1214.06 1282.75,1214.06 1283.34,1214.06 1283.92,1214.06 1284.51,1214.06 1285.1,1214.06 1285.68,1214.06 1286.27,1214.06 1286.86,1214.06 1287.44,1214.06 1288.03,1214.06 1288.61,1214.06 1289.2,1214.06 1289.79,1214.06 1290.37,1214.06 1290.96,1214.06 1291.55,1214.06 1292.13,1214.06 1292.72,1214.06 1293.31,1214.06 1293.89,1214.06 1294.48,1214.06 1295.06,1214.06 1295.65,1214.06 1296.24,1214.06 1296.82,1214.06 1297.41,1214.06 1298,1214.06 1298.58,1214.06 1299.17,1214.06 1299.76,1214.06 1300.34,1214.06 1300.93,1214.06 1301.52,1214.06 1302.1,1214.06 1302.69,1214.06 1303.27,1214.06 1303.86,1214.06 1304.45,1214.06 1305.03,1214.06 1305.62,1214.06 1306.21,1214.06 1306.79,1214.06 1307.38,1214.06 1307.97,1214.06 1308.55,1214.06 1309.14,1214.06 1309.73,1214.06 1310.31,1214.06 1310.9,1214.06 1311.48,1214.06 1312.07,1214.06 1312.66,1214.06 1313.24,1214.06 1313.83,1214.06 1314.42,1214.06 1315,1214.06 1315.59,1214.06 1316.18,1214.06 1316.76,1214.06 1317.35,1214.06 1317.93,1214.06 1318.52,1214.06 1319.11,1214.06 1319.69,1214.06 1320.28,1214.06 1320.87,1214.06 1321.45,1214.06 1322.04,1214.06 1322.63,1214.06 1323.21,1214.06 1323.8,1214.06 1324.39,1214.06 1324.97,1214.06 1325.56,1214.06 1326.14,1214.06 1326.73,1214.06 1327.32,1214.06 1327.9,1214.06 1328.49,1214.06 1329.08,1214.06 1329.66,1214.06 1330.25,1214.06 1330.84,1214.06 1331.42,1214.06 1332.01,1214.06 1332.6,1214.06 1333.18,1214.06 1333.77,1214.06 1334.35,1214.06 1334.94,1214.06 1335.53,1214.06 1336.11,1214.06 1336.7,1214.06 1337.29,1214.06 1337.87,1214.06 1338.46,1214.06 1339.05,1214.06 1339.63,1214.06 1340.22,1214.06 1340.8,1214.06 1341.39,1214.06 1341.98,1214.06 1342.56,1214.06 1343.15,1214.06 1343.74,1214.06 1344.32,1214.06 1344.91,1214.06 1345.5,1214.06 1346.08,1214.06 1346.67,1214.06 1347.26,1214.06 1347.84,1214.06 1348.43,1214.06 1349.01,1214.06 1349.6,1214.06 1350.19,1214.06 1350.77,1214.06 1351.36,1214.06 1351.95,1214.06 1352.53,1214.06 1353.12,1214.06 1353.71,1214.06 1354.29,1214.06 1354.88,1214.06 1355.47,1214.06 1356.05,1214.06 1356.64,1214.06 1357.22,1214.06 1357.81,1214.06 1358.4,1214.06 1358.98,1214.06 1359.57,1214.06 1360.16,1214.06 1360.74,1214.06 1361.33,1214.06 1361.92,1214.06 1362.5,1214.06 1363.09,1214.06 1363.68,1214.06 1364.26,1214.06 1364.85,1214.06 1365.43,1214.06 1366.02,1214.06 1366.61,1214.06 1367.19,1214.06 1367.78,1214.06 1368.37,1214.06 1368.95,1214.06 1369.54,1214.06 1370.13,1214.06 1370.71,1214.06 1371.3,1214.06 1371.88,1214.06 1372.47,1214.06 1373.06,1214.06 1373.64,1214.06 1374.23,1214.06 1374.82,1214.06 1375.4,1214.06 1375.99,1214.06 1376.58,1214.06 1377.16,1214.06 1377.75,1214.06 1378.34,1214.06 1378.92,1214.06 1379.51,1214.06 1380.09,1214.06 1380.68,1214.06 1381.27,1214.06 1381.85,1214.06 1382.44,1214.06 1383.03,1214.06 1383.61,1214.06 1384.2,1214.06 1384.79,1214.06 1385.37,1214.06 1385.96,1214.06 1386.55,1214.06 1387.13,1214.06 1387.72,1214.06 1388.3,1214.06 1388.89,1214.06 1389.48,1214.06 1390.06,1214.06 1390.65,1214.06 1391.24,1214.06 1391.82,1214.06 1392.41,1214.06 1393,1214.06 1393.58,1214.06 1394.17,1214.06 1394.75,1214.06 1395.34,1214.06 1395.93,1214.06 1396.51,1214.06 1397.1,1214.06 1397.69,1214.06 1398.27,1214.06 1398.86,1214.06 1399.45,1214.06 1400.03,1214.06 1400.62,1214.06 1401.21,1214.06 1401.79,1214.06 1402.38,1214.06 1402.96,1214.06 1403.55,1214.06 1404.14,1214.06 1404.72,1214.06 1405.31,1214.06 1405.9,1214.06 1406.48,1214.06 1407.07,1214.06 1407.66,1214.06 1408.24,1214.06 1408.83,1214.06 1409.42,1214.06 1410,1214.06 1410.59,1214.06 1411.17,1214.06 1411.76,1214.06 1412.35,1214.06 1412.93,1214.06 1413.52,1214.06 1414.11,1214.06 1414.69,1214.06 1415.28,1214.06 1415.87,1214.06 1416.45,1214.06 1417.04,1214.06 1417.63,1214.06 1418.21,1214.06 1418.8,1214.06 1419.38,1214.06 1419.97,1214.06 1420.56,1214.06 1421.14,1214.06 1421.73,1214.06 1422.32,1214.06 1422.9,1214.06 1423.49,1214.06 1424.08,1214.06 1424.66,1214.06 1425.25,1214.06 1425.83,1214.06 1426.42,1214.06 1427.01,1214.06 1427.59,1214.06 1428.18,1214.06 1428.77,1214.06 1429.35,1214.06 1429.94,1214.06 1430.53,1214.06 1431.11,1214.06 1431.7,1214.06 1432.29,1214.06 1432.87,1214.06 1433.46,1214.06 1434.04,1214.06 1434.63,1214.06 1435.22,1214.06 1435.8,1214.06 1436.39,1214.06 1436.98,1214.06 1437.56,1214.06 1438.15,1214.06 1438.74,1214.06 1439.32,1214.06 1439.91,1214.06 1440.5,1214.06 1441.08,1214.06 1441.67,1214.06 1442.25,1214.06 1442.84,1214.06 1443.43,1214.06 1444.01,1214.06 1444.6,1214.06 1445.19,1214.06 1445.77,1214.06 1446.36,1214.06 1446.95,1214.06 1447.53,1214.06 1448.12,1214.06 1448.7,1214.06 1449.29,1214.06 1449.88,1214.06 1450.46,1214.06 1451.05,1214.06 1451.64,1214.06 1452.22,1214.06 1452.81,1214.06 1453.4,1214.06 1453.98,1214.06 1454.57,1214.06 1455.16,1214.06 1455.74,1214.06 1456.33,1214.06 1456.91,1214.06 1457.5,1214.06 1458.09,1214.06 1458.67,1214.06 1459.26,1214.06 1459.85,1214.06 1460.43,1214.06 1461.02,1214.06 1461.61,1214.06 1462.19,1214.06 1462.78,1214.06 1463.37,1214.06 1463.95,1214.06 1464.54,1214.06 1465.12,1214.06 1465.71,1214.06 1466.3,1214.06 1466.88,1214.06 1467.47,1214.06 1468.06,1214.06 1468.64,1214.06 1469.23,1214.06 1469.82,1214.06 1470.4,1214.06 1470.99,1214.06 1471.57,1214.06 1472.16,1214.06 1472.75,1214.06 1473.33,1214.06 1473.92,1214.06 1474.51,1214.06 1475.09,1214.06 1475.68,1214.06 1476.27,1214.06 1476.85,1214.06 1477.44,1214.06 1478.03,1214.06 1478.61,1214.06 1479.2,1214.06 1479.78,1214.06 1480.37,1214.06 1480.96,1214.06 1481.54,1214.06 1482.13,1214.06 1482.72,1214.06 1483.3,1214.06 1483.89,1214.06 1484.48,1214.06 1485.06,1214.06 1485.65,1214.06 1486.24,1214.06 1486.82,1214.06 1487.41,1214.06 1487.99,1214.06 1488.58,1214.06 1489.17,1214.06 1489.75,1214.06 1490.34,1214.06 1490.93,1214.06 1491.51,1214.06 1492.1,1214.06 1492.69,1214.06 1493.27,1214.06 1493.86,1214.06 1494.45,1214.06 1495.03,1214.06 1495.62,1214.06 1496.2,1214.06 1496.79,1214.06 1497.38,1214.06 1497.96,1214.06 1498.55,1214.06 1499.14,1214.06 1499.72,1214.06 1500.31,1214.06 1500.9,1214.06 1501.48,1214.06 1502.07,1214.06 1502.65,1214.06 1503.24,1214.06 1503.83,1214.06 1504.41,1214.06 1505,1214.06 1505.59,1214.06 1506.17,1214.06 1506.76,1214.06 1507.35,1214.06 1507.93,1214.06 1508.52,1214.06 1509.11,1214.06 1509.69,1214.06 1510.28,1214.06 1510.86,1214.06 1511.45,1214.06 1512.04,1214.06 1512.62,1214.06 1513.21,1214.06 1513.8,1214.06 1514.38,1214.06 1514.97,1214.06 1515.56,1214.06 1516.14,1214.06 1516.73,1214.06 1517.32,1214.06 1517.9,1214.06 1518.49,1214.06 1519.07,1214.06 1519.66,1214.06 1520.25,1214.06 1520.83,1214.06 1521.42,1214.06 1522.01,1214.06 1522.59,1214.06 1523.18,1214.06 1523.77,1214.06 1524.35,1214.06 1524.94,1214.06 1525.52,1214.06 1526.11,1214.06 1526.7,1214.06 1527.28,1214.06 1527.87,1214.06 1528.46,1214.06 1529.04,1214.06 1529.63,1214.06 1530.22,1214.06 1530.8,1214.06 1531.39,1214.06 1531.98,1214.06 1532.56,1214.06 1533.15,1214.06 1533.73,1214.06 1534.32,1214.06 1534.91,1214.06 1535.49,1214.06 1536.08,1214.06 1536.67,1214.06 1537.25,1214.06 1537.84,1214.06 1538.43,1214.06 1539.01,1214.06 1539.6,1214.06 1540.19,1214.06 1540.77,1214.06 1541.36,1214.06 1541.94,1214.06 1542.53,1214.06 1543.12,1214.06 1543.7,1214.06 1544.29,1214.06 1544.88,1214.06 1545.46,1214.06 1546.05,1214.06 1546.64,1214.06 1547.22,1214.06 1547.81,1214.06 1548.4,1214.06 1548.98,1214.06 1549.57,1214.06 1550.15,1214.06 1550.74,1214.06 1551.33,1214.06 1551.91,1214.06 1552.5,1214.06 1553.09,1214.06 1553.67,1214.06 1554.26,1214.06 1554.85,1214.06 1555.43,1214.06 1556.02,1214.06 1556.6,1214.06 1557.19,1214.06 1557.78,1214.06 1558.36,1214.06 1558.95,1214.06 1559.54,1214.06 1560.12,1214.06 1560.71,1214.06 1561.3,1214.06 1561.88,1214.06 1562.47,1214.06 1563.06,1214.06 1563.64,1214.06 1564.23,1214.06 1564.81,1214.06 1565.4,1214.06 1565.99,1214.06 1566.57,1214.06 1567.16,1214.06 1567.75,1214.06 1568.33,1214.06 1568.92,1214.06 1569.51,1214.06 1570.09,1214.06 1570.68,1214.06 1571.27,1214.06 1571.85,1214.06 1572.44,1214.06 1573.02,1214.06 1573.61,1214.06 1574.2,1214.06 1574.78,1214.06 1575.37,1214.06 1575.96,1214.06 1576.54,1214.06 1577.13,1214.06 1577.72,1214.06 1578.3,1214.06 1578.89,1214.06 1579.47,1214.06 1580.06,1214.06 1580.65,1214.06 1581.23,1214.06 1581.82,1214.06 1582.41,1214.06 1582.99,1214.06 1583.58,1214.06 1584.17,1214.06 1584.75,1214.06 1585.34,1214.06 1585.93,1214.06 1586.51,1214.06 1587.1,1214.06 1587.68,1214.06 1588.27,1214.06 1588.86,1214.06 1589.44,1214.06 1590.03,1214.06 1590.62,1214.06 1591.2,1214.06 1591.79,1214.06 1592.38,1214.06 1592.96,1214.06 1593.55,1214.06 1594.14,1214.06 1594.72,1214.06 1595.31,1214.06 1595.89,1214.06 1596.48,1214.06 1597.07,1214.06 1597.65,1214.06 1598.24,1214.06 1598.83,1214.06 1599.41,1214.06 1600,1214.06 1600.59,1214.06 1601.17,1214.06 1601.76,1214.06 1602.34,1214.06 1602.93,1214.06 1603.52,1214.06 1604.1,1214.06 1604.69,1214.06 1605.28,1214.06 1605.86,1214.06 1606.45,1214.06 1607.04,1214.06 1607.62,1214.06 1608.21,1214.06 1608.8,1214.06 1609.38,1214.06 1609.97,1214.06 1610.55,1214.06 1611.14,1214.06 1611.73,1214.06 1612.31,1214.06 1612.9,1214.06 1613.49,1214.06 1614.07,1214.06 1614.66,1214.06 1615.25,1214.06 1615.83,1214.06 1616.42,1214.06 1617.01,1214.06 1617.59,1214.06 1618.18,1214.06 1618.76,1214.06 1619.35,1214.06 1619.94,1214.06 1620.52,1214.06 1621.11,1214.06 1621.7,1214.06 1622.28,1214.06 1622.87,1214.06 1623.46,1214.06 1624.04,1214.06 1624.63,1214.06 1625.22,1214.06 1625.8,1214.06 1626.39,1214.06 1626.97,1214.06 1627.56,1214.06 1628.15,1214.06 1628.73,1214.06 1629.32,1214.06 1629.91,1214.06 1630.49,1214.06 1631.08,1214.06 1631.67,1214.06 1632.25,1214.06 1632.84,1214.06 1633.42,1214.06 1634.01,1214.06 1634.6,1214.06 1635.18,1214.06 1635.77,1214.06 1636.36,1214.06 1636.94,1214.06 1637.53,1214.06 1638.12,1214.06 1638.7,1214.06 1639.29,1214.06 1639.88,1214.06 1640.46,1214.06 1641.05,1214.06 1641.63,1214.06 1642.22,1214.06 1642.81,1214.06 1643.39,1214.06 1643.98,1214.06 1644.57,1214.06 1645.15,1214.06 1645.74,1214.06 1646.33,1214.06 1646.91,1214.06 1647.5,1214.06 1648.09,1214.06 1648.67,1214.06 1649.26,1214.06 1649.84,1214.06 1650.43,1214.06 1651.02,1214.06 1651.6,1214.06 1652.19,1214.06 1652.78,1214.06 1653.36,1214.06 1653.95,1214.06 1654.54,1214.06 1655.12,1214.06 1655.71,1214.06 1656.29,1214.06 1656.88,1214.06 1657.47,1214.06 1658.05,1214.06 1658.64,1214.06 1659.23,1214.06 1659.81,1214.06 1660.4,1214.06 1660.99,1214.06 1661.57,1214.06 1662.16,1214.06 1662.75,1214.06 1663.33,1214.06 1663.92,1214.06 1664.5,1214.06 1665.09,1214.06 1665.68,1214.06 1666.26,1214.06 1666.85,1214.06 1667.44,1214.06 1668.02,1214.06 1668.61,1214.06 1669.2,1214.06 1669.78,1214.06 1670.37,1214.06 1670.96,1214.06 1671.54,1214.06 1672.13,1214.06 1672.71,1214.06 1673.3,1214.06 1673.89,1214.06 1674.47,1214.06 1675.06,1214.06 1675.65,1214.06 1676.23,1214.06 1676.82,1214.06 1677.41,1214.06 1677.99,1214.06 1678.58,1214.06 1679.17,1214.06 1679.75,1214.06 1680.34,1214.06 1680.92,1214.06 1681.51,1214.06 1682.1,1214.06 1682.68,1214.06 1683.27,1214.06 1683.86,1214.06 1684.44,1214.06 1685.03,1214.06 1685.62,1214.06 1686.2,1214.06 1686.79,1214.06 1687.37,1214.06 1687.96,1214.06 1688.55,1214.06 1689.13,1214.06 1689.72,1214.06 1690.31,1214.06 1690.89,1214.06 1691.48,1214.06 1692.07,1214.06 1692.65,1214.06 1693.24,1214.06 1693.83,1214.06 1694.41,1214.06 1695,1214.06 1695.58,1214.06 1696.17,1214.06 1696.76,1214.06 1697.34,1214.06 1697.93,1214.06 1698.52,1214.06 1699.1,1214.06 1699.69,1214.06 1700.28,1214.06 1700.86,1214.06 1701.45,1214.06 1702.04,1214.06 1702.62,1214.06 1703.21,1214.06 1703.79,1214.06 1704.38,1214.06 1704.97,1214.06 1705.55,1214.06 1706.14,1214.06 1706.73,1214.06 1707.31,1214.06 1707.9,1214.06 1708.49,1214.06 1709.07,1214.06 1709.66,1214.06 1710.24,1214.06 1710.83,1214.06 1711.42,1214.06 1712,1214.06 1712.59,1214.06 1713.18,1214.06 1713.76,1214.06 1714.35,1214.06 1714.94,1214.06 1715.52,1214.06 1716.11,1214.06 1716.7,1214.06 1717.28,1214.06 1717.87,1214.06 1718.45,1214.06 1719.04,1214.06 1719.63,1214.06 1720.21,1214.06 1720.8,1214.06 1721.39,1214.06 1721.97,1214.06 1722.56,1214.06 1723.15,1214.06 1723.73,1214.06 1724.32,1214.06 1724.91,1214.06 1725.49,1214.06 1726.08,1214.06 1726.66,1214.06 1727.25,1214.06 1727.84,1214.06 1728.42,1214.06 1729.01,1214.06 1729.6,1214.06 1730.18,1214.06 1730.77,1214.06 1731.36,1214.06 1731.94,1214.06 1732.53,1214.06 1733.11,1214.06 1733.7,1214.06 1734.29,1214.06 1734.87,1214.06 1735.46,1214.06 1736.05,1214.06 1736.63,1214.06 1737.22,1214.06 1737.81,1214.06 1738.39,1214.06 1738.98,1214.06 1739.57,1214.06 1740.15,1214.06 1740.74,1214.06 1741.32,1214.06 1741.91,1214.06 1742.5,1214.06 1743.08,1214.06 1743.67,1214.06 1744.26,1214.06 1744.84,1214.06 1745.43,1214.06 1746.02,1214.06 1746.6,1214.06 1747.19,1214.06 1747.78,1214.06 1748.36,1214.06 1748.95,1214.06 1749.53,1214.06 1750.12,1214.06 1750.71,1214.06 1751.29,1214.06 1751.88,1214.06 1752.47,1214.06 1753.05,1214.06 1753.64,1214.06 1754.23,1214.06 1754.81,1214.06 1755.4,1214.06 1755.99,1214.06 1756.57,1214.06 1757.16,1214.06 1757.74,1214.06 1758.33,1214.06 1758.92,1214.06 1759.5,1214.06 1760.09,1214.06 1760.68,1214.06 1761.26,1214.06 1761.85,1214.06 1762.44,1214.06 1763.02,1214.06 1763.61,1214.06 1764.19,1214.06 1764.78,1214.06 1765.37,1214.06 1765.95,1214.06 1766.54,1214.06 1767.13,1214.06 1767.71,1214.06 1768.3,1214.06 1768.89,1214.06 1769.47,1214.06 1770.06,1214.06 1770.65,1214.06 1771.23,1214.06 1771.82,1214.06 1772.4,1214.06 1772.99,1214.06 1773.58,1214.06 1774.16,1214.06 1774.75,1214.06 1775.34,1214.06 1775.92,1214.06 1776.51,1214.06 1777.1,1214.06 1777.68,1214.06 1778.27,1214.06 1778.86,1214.06 1779.44,1214.06 1780.03,1214.06 1780.61,1214.06 1781.2,1214.06 1781.79,1214.06 1782.37,1214.06 1782.96,1214.06 1783.55,1214.06 1784.13,1214.06 1784.72,1214.06 1785.31,1214.06 1785.89,1214.06 1786.48,1214.06 1787.06,1214.06 1787.65,1214.06 1788.24,1214.06 1788.82,1214.06 1789.41,1214.06 1790,1214.06 1790.58,1214.06 1791.17,1214.06 1791.76,1214.06 1792.34,1214.06 1792.93,1214.06 1793.52,1214.06 1794.1,1214.06 1794.69,1214.06 1795.27,1214.06 1795.86,1214.06 1796.45,1214.06 1797.03,1214.06 1797.62,1214.06 1798.21,1214.06 1798.79,1214.06 1799.38,1214.06 1799.97,1214.06 1800.55,1214.06 1801.14,1214.06 1801.73,1214.06 1802.31,1214.06 1802.9,1214.06 1803.48,1214.06 1804.07,1214.06 1804.66,1214.06 1805.24,1214.06 1805.83,1214.06 1806.42,1214.06 1807,1214.06 1807.59,1214.06 1808.18,1214.06 1808.76,1214.06 1809.35,1214.06 1809.94,1214.06 1810.52,1214.06 1811.11,1214.06 1811.69,1214.06 1812.28,1214.06 1812.87,1214.06 1813.45,1214.06 1814.04,1214.06 1814.63,1214.06 1815.21,1214.06 1815.8,1214.06 1816.39,1214.06 1816.97,1214.06 1817.56,1214.06 1818.14,1214.06 1818.73,1214.06 1819.32,1214.06 1819.9,1214.06 1820.49,1214.06 1821.08,1214.06 1821.66,1214.06 1822.25,1214.06 1822.84,1214.06 1823.42,1214.06 1824.01,1214.06 1824.6,1214.06 1825.18,1214.06 1825.77,1214.06 1826.35,1214.06 1826.94,1214.06 1827.53,1214.06 1828.11,1214.06 1828.7,1214.06 1829.29,1214.06 1829.87,1214.06 1830.46,1214.06 1831.05,1214.06 1831.63,1214.06 1832.22,1214.06 1832.81,1214.06 1833.39,1214.06 1833.98,1214.06 1834.56,1214.06 1835.15,1214.06 1835.74,1214.06 1836.32,1214.06 1836.91,1214.06 1837.5,1214.06 1838.08,1214.06 1838.67,1214.06 1839.26,1214.06 1839.84,1214.06 1840.43,1214.06 1841.01,1214.06 1841.6,1214.06 1842.19,1214.06 1842.77,1214.06 1843.36,1214.06 1843.95,1214.06 1844.53,1214.06 1845.12,1214.06 1845.71,1214.06 1846.29,1214.06 1846.88,1214.06 1847.47,1214.06 1848.05,1214.06 1848.64,1214.06 1849.22,1214.06 1849.81,1214.06 1850.4,1214.06 1850.98,1214.06 1851.57,1214.06 1852.16,1214.06 1852.74,1214.06 1853.33,1214.06 1853.92,1214.06 1854.5,1214.06 1855.09,1214.06 1855.68,1214.06 1856.26,1214.06 1856.85,1214.06 1857.43,1214.06 1858.02,1214.06 1858.61,1214.06 1859.19,1214.06 1859.78,1214.06 1860.37,1214.06 1860.95,1214.06 1861.54,1214.06 1862.13,1214.06 1862.71,1214.06 1863.3,1214.06 1863.88,1214.06 1864.47,1214.06 1865.06,1214.06 1865.64,1214.06 1866.23,1214.06 1866.82,1214.06 1867.4,1214.06 1867.99,1214.06 1868.58,1214.06 1869.16,1214.06 1869.75,1214.06 1870.34,1214.06 1870.92,1214.06 1871.51,1214.06 1872.09,1214.06 1872.68,1214.06 1873.27,1214.06 1873.85,1214.06 1874.44,1214.06 1875.03,1214.06 1875.61,1214.06 1876.2,1214.06 1876.79,1214.06 1877.37,1214.06 1877.96,1214.06 1878.55,1214.06 1879.13,1214.06 1879.72,1214.06 1880.3,1214.06 1880.89,1214.06 1881.48,1214.06 1882.06,1214.06 1882.65,1214.06 1883.24,1214.06 1883.82,1214.06 1884.41,1214.06 1885,1214.06 1885.58,1214.06 1886.17,1214.06 1886.76,1214.06 1887.34,1214.06 1887.93,1214.06 1888.51,1214.06 1889.1,1214.06 1889.69,1214.06 1890.27,1214.06 1890.86,1214.06 1891.45,1214.06 1892.03,1214.06 1892.62,1214.06 1893.21,1214.06 1893.79,1214.06 1894.38,1214.06 1894.96,1214.06 1895.55,1214.06 1896.14,1214.06 1896.72,1214.06 1897.31,1214.06 1897.9,1214.06 1898.48,1214.06 1899.07,1214.06 1899.66,1214.06 1900.24,1214.06 1900.83,1214.06 1901.42,1214.06 1902,1214.06 1902.59,1214.06 1903.17,1214.06 1903.76,1214.06 1904.35,1214.06 1904.93,1214.06 1905.52,1214.06 1906.11,1214.06 1906.69,1214.06 1907.28,1214.06 1907.87,1214.06 1908.45,1214.06 1909.04,1214.06 1909.63,1214.06 1910.21,1214.06 1910.8,1214.06 1911.38,1214.06 1911.97,1214.06 1912.56,1214.06 1913.14,1214.06 1913.73,1214.06 1914.32,1214.06 1914.9,1214.06 1915.49,1214.06 1916.08,1214.06 1916.66,1214.06 1917.25,1214.06 1917.83,1214.06 1918.42,1214.06 1919.01,1214.06 1919.59,1214.06 1920.18,1214.06 1920.77,1214.06 1921.35,1214.06 1921.94,1214.06 1922.53,1214.06 1923.11,1214.06 1923.7,1214.06 1924.29,1214.06 1924.87,1214.06 1925.46,1214.06 1926.04,1214.06 1926.63,1214.06 1927.22,1214.06 1927.8,1214.06 1928.39,1214.06 1928.98,1214.06 1929.56,1214.06 1930.15,1214.06 1930.74,1214.06 1931.32,1214.06 1931.91,1214.06 1932.5,1214.06 1933.08,1214.06 1933.67,1214.06 1934.25,1214.06 1934.84,1214.06 1935.43,1214.06 1936.01,1214.06 1936.6,1214.06 1937.19,1214.06 1937.77,1214.06 1938.36,1214.06 1938.95,1214.06 1939.53,1214.06 1940.12,1214.06 1940.71,1214.06 1941.29,1214.06 1941.88,1214.06 1942.46,1214.06 1943.05,1214.06 1943.64,1214.06 1944.22,1214.06 1944.81,1214.06 1945.4,1214.06 1945.98,1214.06 1946.57,1214.06 1947.16,1214.06 1947.74,1214.06 1948.33,1214.06 1948.91,1214.06 1949.5,1214.06 1950.09,1214.06 1950.67,1214.06 1951.26,1214.06 1951.85,1214.06 1952.43,1214.06 1953.02,1214.06 1953.61,1214.06 1954.19,1214.06 1954.78,1214.06 1955.37,1214.06 1955.95,1214.06 1956.54,1214.06 1957.12,1214.06 1957.71,1214.06 1958.3,1214.06 1958.88,1214.06 1959.47,1214.06 1960.06,1214.06 1960.64,1214.06 1961.23,1214.06 1961.82,1214.06 1962.4,1214.06 1962.99,1214.06 1963.58,1214.06 1964.16,1214.06 1964.75,1214.06 1965.33,1214.06 1965.92,1214.06 1966.51,1214.06 1967.09,1214.06 1967.68,1214.06 1968.27,1214.06 1968.85,1214.06 1969.44,1214.06 1970.03,1214.06 1970.61,1214.06 1971.2,1214.06 1971.78,1214.06 1972.37,1214.06 1972.96,1214.06 1973.54,1214.06 1974.13,1214.06 1974.72,1214.06 1975.3,1214.06 1975.89,1214.06 1976.48,1214.06 1977.06,1214.06 1977.65,1214.06 1978.24,1214.06 1978.82,1214.06 1979.41,1214.06 1979.99,1214.06 1980.58,1214.06 1981.17,1214.06 1981.75,1214.06 1982.34,1214.06 1982.93,1214.06 1983.51,1214.06 1984.1,1214.06 1984.69,1214.06 1985.27,1214.06 1985.86,1214.06 1986.45,1214.06 1987.03,1214.06 1987.62,1214.06 1988.2,1214.06 1988.79,1214.06 1989.38,1214.06 1989.96,1214.06 1990.55,1214.06 1991.14,1214.06 1991.72,1214.06 1992.31,1214.06 1992.9,1214.06 1993.48,1214.06 1994.07,1214.06 1994.65,1214.06 1995.24,1214.06 1995.83,1214.06 1996.41,1214.06 1997,1214.06 1997.59,1214.06 1998.17,1214.06 1998.76,1214.06 1999.35,1214.06 1999.93,1214.06 2000.52,1214.06 2001.11,1214.06 2001.69,1214.06 2002.28,1214.06 2002.86,1214.06 2003.45,1214.06 2004.04,1214.06 2004.62,1214.06 2005.21,1214.06 2005.8,1214.06 2006.38,1214.06 2006.97,1214.06 2007.56,1214.06 2008.14,1214.06 2008.73,1214.06 2009.32,1214.06 2009.9,1214.06 2010.49,1214.06 2011.07,1214.06 2011.66,1214.06 2012.25,1214.06 2012.83,1214.06 2013.42,1214.06 2014.01,1214.06 2014.59,1214.06 2015.18,1214.06 2015.77,1214.06 2016.35,1214.06 2016.94,1214.06 2017.53,1214.06 2018.11,1214.06 2018.7,1214.06 2019.28,1214.06 2019.87,1214.06 2020.46,1214.06 2021.04,1214.06 2021.63,1214.06 2022.22,1214.06 2022.8,1214.06 2023.39,1214.06 2023.98,1214.06 2024.56,1214.06 2025.15,1214.06 2025.73,1214.06 2026.32,1214.06 2026.91,1214.06 2027.49,1214.06 2028.08,1214.06 2028.67,1214.06 2029.25,1214.06 2029.84,1214.06 2030.43,1214.06 2031.01,1214.06 2031.6,1214.06 2032.19,1214.06 2032.77,1214.06 2033.36,1214.06 2033.94,1214.06 2034.53,1214.06 2035.12,1214.06 2035.7,1214.06 2036.29,1214.06 2036.88,1214.06 2037.46,1214.06 2038.05,1214.06 2038.64,1214.06 2039.22,1214.06 2039.81,1214.06 2040.4,1214.06 2040.98,1214.06 2041.57,1214.06 2042.15,1214.06 2042.74,1214.06 2043.33,1214.06 2043.91,1214.06 2044.5,1214.06 2045.09,1214.06 2045.67,1214.06 2046.26,1214.06 2046.85,1214.06 2047.43,1214.06 2048.02,1214.06 2048.6,1214.06 2049.19,1214.06 2049.78,1214.06 2050.36,1214.06 2050.95,1214.06 2051.54,1214.06 2052.12,1214.06 2052.71,1214.06 2053.3,1214.06 2053.88,1214.06 2054.47,1214.06 2055.06,1214.06 2055.64,1214.06 2056.23,1214.06 2056.81,1214.06 2057.4,1214.06 2057.99,1214.06 2058.57,1214.06 2059.16,1214.06 2059.75,1214.06 2060.33,1214.06 2060.92,1214.06 2061.51,1214.06 2062.09,1214.06 2062.68,1214.06 2063.27,1214.06 2063.85,1214.06 2064.44,1214.06 2065.02,1214.06 2065.61,1214.06 2066.2,1214.06 2066.78,1214.06 2067.37,1214.06 2067.96,1214.06 2068.54,1214.06 2069.13,1214.06 2069.72,1214.06 2070.3,1214.06 2070.89,1214.06 2071.48,1214.06 2072.06,1214.06 2072.65,1214.06 2073.23,1214.06 2073.82,1214.06 2074.41,1214.06 2074.99,1214.06 2075.58,1214.06 2076.17,1214.06 2076.75,1214.06 2077.34,1214.06 2077.93,1214.06 2078.51,1214.06 2079.1,1214.06 2079.68,1214.06 2080.27,1214.06 2080.86,1214.06 2081.44,1214.06 2082.03,1214.06 2082.62,1214.06 2083.2,1214.06 2083.79,1214.06 2084.38,1214.06 2084.96,1214.06 2085.55,1214.06 2086.14,1214.06 2086.72,1214.06 2087.31,1214.06 2087.89,1214.06 2088.48,1214.06 2089.07,1214.06 2089.65,1214.06 2090.24,1214.06 2090.83,1214.06 2091.41,1214.06 2092,1214.06 2092.59,1214.06 2093.17,1214.06 2093.76,1214.06 2094.35,1214.06 2094.93,1214.06 2095.52,1214.06 2096.1,1214.06 2096.69,1214.06 2097.28,1214.06 2097.86,1214.06 2098.45,1214.06 2099.04,1214.06 2099.62,1214.06 2100.21,1214.06 2100.8,1214.06 2101.38,1214.06 2101.97,1214.06 2102.55,1214.06 2103.14,1214.06 2103.73,1214.06 2104.31,1214.06 2104.9,1214.06 2105.49,1214.06 2106.07,1214.06 2106.66,1214.06 2107.25,1214.06 2107.83,1214.06 2108.42,1214.06 2109.01,1214.06 2109.59,1214.06 2110.18,1214.06 2110.76,1214.06 2111.35,1214.06 2111.94,1214.06 2112.52,1214.06 2113.11,1214.06 2113.7,1214.06 2114.28,1214.06 2114.87,1214.06 2115.46,1214.06 2116.04,1214.06 2116.63,1214.06 2117.22,1214.06 2117.8,1214.06 2118.39,1214.06 2118.97,1214.06 2119.56,1214.06 2120.15,1214.06 2120.73,1214.06 2121.32,1214.06 2121.91,1214.06 2122.49,1214.06 2123.08,1214.06 2123.67,1214.06 2124.25,1214.06 2124.84,1214.06 2125.42,1214.06 2126.01,1214.06 2126.6,1214.06 2127.18,1214.06 2127.77,1214.06 2128.36,1214.06 2128.94,1214.06 2129.53,1214.06 2130.12,1214.06 2130.7,1214.06 2131.29,1214.06 2131.88,1214.06 2132.46,1214.06 2133.05,1214.06 2133.63,1214.06 2134.22,1214.06 2134.81,1214.06 2135.39,1214.06 2135.98,1214.06 2136.57,1214.06 2137.15,1214.06 2137.74,1214.06 2138.33,1214.06 2138.91,1214.06 2139.5,1214.06 2140.09,1214.06 2140.67,1214.06 2141.26,1214.06 2141.84,1214.06 2142.43,1214.06 2143.02,1214.06 2143.6,1214.06 2144.19,1214.06 2144.78,1214.06 2145.36,1214.06 2145.95,1214.06 2146.54,1214.06 2147.12,1214.06 2147.71,1214.06 2148.3,1214.06 2148.88,1214.06 2149.47,1214.06 2150.05,1214.06 2150.64,1214.06 2151.23,1214.06 2151.81,1214.06 2152.4,1214.06 2152.99,1214.06 2153.57,1214.06 2154.16,1214.06 2154.75,1214.06 2155.33,1214.06 2155.92,1214.06 2156.5,1214.06 2157.09,1214.06 2157.68,1214.06 2158.26,1214.06 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560.52,1193.08 1398.98,899.083 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1234.35 985.439,1193.08 2158.26,1193.08 2158.26,1234.35 985.439,1234.35 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip503\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip503)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-5856.65 164.351,-6807.39 164.91,-6453.04 165.469,-6178.67 166.029,-6987.22 166.588,-7706.05 167.147,-7432.38 167.706,-8102.1 168.266,-7895.87 168.825,-8478.59 169.384,-8988.29 169.943,-9421.37 170.503,-9843.63 171.062,-8995.62 171.621,-8816.71 172.18,-8658.35 172.74,-8971.07 173.299,-9265.24 173.858,-9518.38 174.417,-9330.23 174.977,-9168.74 175.536,-9375.3 176.095,-8897.98 176.655,-8763.03 177.214,-8941.56 177.773,-9072.5 178.332,-9181.53 178.892,-9244.69 179.451,-9076.98 180.01,-8923.67 180.569,-8776.13 181.129,-8802.9 181.688,-8824.5 182.247,-8663.02 182.806,-8670.55 183.366,-8512.58 183.925,-8485.41 184.484,-8457.12 185.043,-8154.54 185.603,-7732.46 186.162,-7583.69 186.721,-7311.23 187.28,-7271.79 187.84,-7240.52 188.399,-7184.99 188.958,-6933.22 189.517,-6881.79 190.077,-6463.44 190.636,-6320.66 191.195,-6268.73 191.754,-6123.6 192.314,-5989.22 192.873,-5778 193.432,-5572.71 193.991,-5520.78 194.551,-5254.05 195.11,-5198.65 195.669,-5009.86 196.228,-4950.67 196.788,-4882.73 197.347,-4706.03 197.906,-4622.65 198.465,-4385 199.025,-4260.02 199.584,-3995.28 200.143,-3928.97 200.702,-3811.35 201.262,-3689.34 201.821,-3577.12 202.38,-3423.13 202.939,-3313.31 203.499,-3245.78 204.058,-3100.19 204.617,-3039.12 205.176,-2974.09 205.736,-2764.51 206.295,-2567.78 206.854,-2444.69 207.413,-2331.43 207.973,-2252.52 208.532,-2171.51 209.091,-2122.5 209.65,-2010.35 210.21,-1938.4 210.769,-1776.13 211.328,-1673.44 211.887,-1578.83 212.447,-1542.4 213.006,-1451.08 213.565,-1385.37 214.124,-1322.79 214.684,-1264.5 215.243,-1204.01 215.802,-1167.68 216.361,-1111.72 216.921,-1079.09 217.48,-1025.83 218.039,-969.274 218.598,-913.162 219.158,-830.136 219.717,-776.801 220.276,-721.332 220.835,-623.261 221.395,-602.446 221.954,-579.294 222.513,-551.31 223.072,-500.071 223.632,-408.445 224.191,-341.383 224.75,-342.524 225.309,-339.125 225.869,-339.539 226.428,-271.201 226.987,-228.26 227.546,-183.33 228.106,-80.359 228.665,-21.1603 229.224,54.4665 229.783,49.0994 230.343,88.3366 230.902,106.806 231.461,105.703 232.02,141.846 232.58,181.185 233.139,254.506 233.698,310.72 234.257,379.384 234.817,406.85 235.376,470.995 235.935,477.418 236.494,500.435 237.054,486.829 237.613,528.376 238.172,553.639 238.731,615.697 239.291,617.81 239.85,634.78 240.409,636.554 240.968,642.253 241.528,660.249 242.087,681.652 242.646,683.612 243.205,682.139 243.765,720.451 244.324,719.181 244.883,723.038 245.442,741.407 246.002,725.152 246.561,745.032 247.12,727.287 247.679,764.676 248.239,802.778 248.798,854.957 249.357,854.631 249.916,857.403 250.476,872.914 251.035,886.769 251.594,846.925 252.153,847.792 252.713,864.799 253.272,860.973 253.831,892.645 254.39,906.607 254.95,902.288 255.509,893.045 256.068,976.909 256.627,938.013 257.187,985.105 257.746,977.72 258.305,1001.88 258.864,1012.74 259.424,1002.88 259.983,989.637 260.542,1013.88 261.101,989.259 261.661,980.232 262.22,992.333 262.779,1035.51 263.338,1025.72 263.898,1051.38 264.457,1061.01 265.016,1070.34 265.575,1025.86 266.135,1003.61 266.694,996.183 267.253,990.195 267.812,969.271 268.372,969.722 268.931,999.405 269.49,1031.03 270.049,989.238 270.609,999.757 271.168,1009.46 271.727,1002.9 272.286,981.81 272.846,975.127 273.405,969.631 273.964,1014.52 274.523,1008.58 275.083,986.47 275.642,977.326 276.201,1006.89 276.76,1018.2 277.32,1045.85 277.879,1006.45 278.438,987.369 278.997,980.446 279.557,974.572 280.116,953.024 280.675,968.102 281.234,979.774 281.794,993.184 282.353,1005.53 282.912,981.553 283.471,961.4 284.031,958.074 284.59,969.371 285.149,947.17 285.708,960.132 286.268,973.78 286.827,982.635 287.386,976.37 287.945,1005.07 288.505,1050.36 289.064,1011.43 289.623,1020.56 290.182,1048.07 290.742,1070.44 291.301,1062.98 291.86,1053.51 292.419,1013.19 292.979,1021.25 293.538,1030.44 294.097,1007.03 294.656,985.999 295.216,981.626 295.775,959.612 296.334,926.355 296.893,956.68 297.453,935.715 298.012,901.196 298.571,885.522 299.13,884.218 299.69,915.582 300.249,915.339 300.808,912.938 301.368,911.243 301.927,911.46 302.486,922.971 303.045,939.866 303.605,939.484 304.164,951.498 304.723,965.337 305.282,976.495 305.842,934.18 306.401,897.566 306.96,899.197 307.519,896.658 308.079,909.997 308.638,906.59 309.197,953.391 309.756,998.413 310.316,1006.2 310.875,1003.54 311.434,1012.49 311.993,990.834 312.553,1017.58 313.112,991.613 313.671,1000.34 314.23,993.926 314.79,986.649 315.349,995.715 315.908,974.284 316.467,999.534 317.027,991.907 317.586,1001.45 318.145,991.953 318.704,1018.44 319.264,1041.13 319.823,1046.36 320.382,1020.34 320.941,1010.34 321.501,985.515 322.06,977.184 322.619,939.346 323.178,918.993 323.738,899.625 324.297,914.195 324.856,941.86 325.415,951.79 325.975,947.639 326.534,961.412 327.093,952.335 327.652,945.998 328.212,932.102 328.771,895.559 329.33,941.038 329.889,966.31 330.449,963.133 331.008,972.797 331.567,966.534 332.126,976.27 332.686,919.181 333.245,934.353 333.804,942.913 334.363,906.149 334.923,869.732 335.482,885.415 336.041,898.591 336.6,894.615 337.16,876.057 337.719,922.531 338.278,903.024 338.837,897.493 339.397,906.112 339.956,932.217 340.515,877.315 341.074,905.02 341.634,872.201 342.193,850.769 342.752,832.389 343.311,849.206 343.871,866.188 344.43,893.877 344.989,875.362 345.548,856.932 346.108,854.523 346.667,855.042 347.226,855.594 347.785,880.63 348.345,892.751 348.904,890.252 349.463,886.606 350.022,885.81 350.582,850.407 351.141,812.278 351.7,826.888 352.259,793.853 352.819,812.022 353.378,831.715 353.937,843.365 354.496,828.838 355.056,830.739 355.615,827.875 356.174,829.455 356.733,874.36 357.293,852.514 357.852,868.002 358.411,916.641 358.97,906.564 359.53,901.301 360.089,927.674 360.648,967.916 361.207,962.317 361.767,952.942 362.326,961.935 362.885,952.877 363.444,962.038 364.004,966.244 364.563,975.987 365.122,901.864 365.681,908.608 366.241,919.931 366.8,906.639 367.359,915.929 367.918,956.626 368.478,929.147 369.037,922.06 369.596,914.623 370.155,926.76 370.715,904.082 371.274,899.285 371.833,893.594 372.392,905.472 372.952,866.76 373.511,864.378 374.07,864.803 374.629,894.701 375.189,892.434 375.748,904.583 376.307,929.7 376.866,904.323 377.426,882.125 377.985,896.323 378.544,892.366 379.103,887.558 379.663,898.612 380.222,877.387 380.781,887.594 381.34,865.153 381.9,841.019 382.459,820.626 383.018,802.737 383.577,818.121 384.137,851.332 384.696,832.599 385.255,781.111 385.814,795.847 386.374,842.541 386.933,889.027 387.492,864.681 388.051,878.249 388.611,874.325 389.17,888.701 389.729,914.071 390.288,940.236 390.848,929.337 391.407,903.674 391.966,908.599 392.525,898.653 393.085,892.518 393.644,900.192 394.203,925.284 394.762,935.152 395.322,897.182 395.881,856.059 396.44,833.209 396.999,831.585 397.559,791.757 398.118,790.379 398.677,802.914 399.236,814.238 399.796,857.838 400.355,856.892 400.914,838.419 401.473,814.432 402.033,844.355 402.592,872.458 403.151,821.253 403.71,769.666 404.27,723.014 404.829,693.336 405.388,682.163 405.947,719.859 406.507,726.969 407.066,710.608 407.625,715.75 408.184,700.753 408.744,702.868 409.303,723.44 409.862,727.493 410.421,744.632 410.981,757.196 411.54,760.002 412.099,728.376 412.658,731.292 413.218,766.344 413.777,750.238 414.336,704.775 414.895,704.769 415.455,724.256 416.014,708.286 416.573,729.421 417.132,734.468 417.692,752.19 418.251,751.173 418.81,756.046 419.369,775.251 419.929,777.406 420.488,825.171 421.047,772.901 421.606,755.868 422.166,773.118 422.725,771.051 423.284,757.356 423.843,775.599 424.403,844.458 424.962,841.915 425.521,835.552 426.08,863.604 426.64,873.961 427.199,833.316 427.758,844.425 428.318,826.097 428.877,820.843 429.436,802.851 429.995,806.916 430.555,788.287 431.114,804.063 431.673,803.932 432.232,800.607 432.792,796.9 433.351,743.795 433.91,742.25 434.469,791.511 435.029,755.438 435.588,724.766 436.147,758.157 436.706,728.738 437.266,716.935 437.825,703.998 438.384,741.4 438.943,757.861 439.503,790.474 440.062,738.704 440.621,737.143 441.18,719.534 441.74,723.595 442.299,692.198 442.858,744.618 443.417,729.876 443.977,713.05 444.536,728.207 445.095,746.127 445.654,731.396 446.214,699.309 446.773,718.764 447.332,673.265 447.891,678.632 448.451,683.645 449.01,702.43 449.569,690.965 450.128,709.732 450.688,713.512 451.247,714.102 451.806,747.239 452.365,776.84 452.925,787 453.484,768.334 454.043,782.924 454.602,795.668 455.162,789.131 455.721,772.801 456.28,754.295 456.839,738.076 457.399,725.536 457.958,757.125 458.517,744.04 459.076,742.62 459.636,742.035 460.195,755.788 460.754,756.013 461.313,791.486 461.873,805.669 462.432,835.677 462.991,830.818 463.55,825.966 464.11,836.844 464.669,816.122 465.228,809.349 465.787,772.668 466.347,786.275 466.906,817.156 467.465,812.475 468.024,794.271 468.584,743.625 469.143,746.834 469.702,727.05 470.261,724.068 470.821,724.232 471.38,678.318 471.939,680.712 472.498,685.158 473.058,720.961 473.617,719.027 474.176,719.876 474.735,733.353 475.295,728.956 475.854,763.444 476.413,713.842 476.972,749.442 477.532,811.782 478.091,808.127 478.65,791.752 479.209,773.272 479.769,787.529 480.328,785.779 480.887,815.024 481.446,816.53 482.006,779.147 482.565,791.378 483.124,824.358 483.683,834.85 484.243,798.832 484.802,791.625 485.361,770.887 485.92,755.07 486.48,735.465 487.039,705.125 487.598,690.843 488.157,694.81 488.717,731.931 489.276,750.297 489.835,700.015 490.394,715.807 490.954,749.942 491.513,781.912 492.072,781.369 492.631,764.689 493.191,777.541 493.75,838.66 494.309,849.108 494.868,843.51 495.428,807.202 495.987,791.781 496.546,789.556 497.105,785.372 497.665,780.453 498.224,779.335 498.783,810.918 499.342,775.378 499.902,774.967 500.461,788.161 501.02,817.117 501.579,862.254 502.139,856.772 502.698,863.908 503.257,824.453 503.816,819.624 504.376,779.685 504.935,760.422 505.494,773.363 506.053,741.024 506.613,724.343 507.172,745.052 507.731,774.567 508.29,753.226 508.85,748.966 509.409,747.561 509.968,742.358 510.527,723.142 511.087,725.258 511.646,694.824 512.205,680.617 512.764,681.049 513.324,684.818 513.883,719.003 514.442,734.801 515.001,716.748 515.561,719.21 516.12,702.718 516.679,767.851 517.238,734.377 517.798,717.539 518.357,714.621 518.916,699.584 519.475,700.165 520.035,733.657 520.594,731.545 521.153,702.821 521.712,732.887 522.272,750.238 522.831,784.094 523.39,796.9 523.949,757.848 524.509,741.342 525.068,737.622 525.627,735.114 526.186,721.261 526.746,720.143 527.305,704.425 527.864,670.496 528.423,657.341 528.983,659.59 529.542,679.516 530.101,697.876 530.66,716.706 531.22,735.196 531.779,718.438 532.338,654.2 532.897,627.76 533.457,600.509 534.016,623.365 534.575,647.919 535.134,652.586 535.694,668.766 536.253,687.276 536.812,688.71 537.371,689.585 537.931,707.012 538.49,707.47 539.049,707.914 539.608,662.242 540.168,683.647 540.727,700.573 541.286,699.577 541.845,701.881 542.405,686.068 542.964,702.732 543.523,724.263 544.082,742.04 544.642,755.461 545.201,770.125 545.76,785.59 546.319,750.606 546.879,732.109 547.438,700.245 547.997,702.123 548.556,706.539 549.116,735.645 549.675,703.973 550.234,701.954 550.793,733.574 551.353,748.566 551.912,700.829 552.471,700.596 553.031,704.664 553.59,704.842 554.149,671.527 554.708,705.297 555.268,706.186 555.827,705.287 556.386,703.878 556.945,673.494 557.505,725.928 558.064,723.994 558.623,726.028 559.182,708.771 559.742,709.192 560.301,756.573 560.86,784.884 561.419,782.861 561.979,778.546 562.538,776.659 563.097,804.033 563.656,812.081 564.216,807.609 564.775,786.361 565.334,799.257 565.893,826.858 566.453,805.964 567.012,803.57 567.571,799.013 568.13,795.929 568.69,806.084 569.249,738.773 569.808,737.066 570.367,751.761 570.927,753.784 571.486,750.497 572.045,748.292 572.604,748.231 573.164,746.689 573.723,763.865 574.282,762.812 574.841,763.197 575.401,809.765 575.96,805.334 576.519,817.122 577.078,810.581 577.638,802.02 578.197,814.859 578.756,828.158 579.315,837.402 579.875,831.749 580.434,826.856 580.993,837.421 581.552,832.32 582.112,794.713 582.671,820.847 583.23,814.808 583.789,792.964 584.349,789.727 584.908,737.575 585.467,718.992 586.026,716.44 586.586,718.469 587.145,715.673 587.704,726.293 588.263,726.815 588.823,758.244 589.382,737.198 589.941,737.762 590.5,706.876 591.06,692.406 591.619,724.854 592.178,756.946 592.737,737.375 593.297,716.882 593.856,699.465 594.415,700.452 594.974,700.271 595.534,696.827 596.093,699.747 596.652,714.248 597.211,745.301 597.771,708.882 598.33,709.899 598.889,724.72 599.448,722.236 600.008,717.993 600.567,716.465 601.126,733.941 601.685,760.659 602.245,756.694 602.804,753.815 603.363,752.047 603.922,734.018 604.482,682.108 605.041,684.877 605.6,700.529 606.159,702.744 606.719,737.245 607.278,701.87 607.837,701.674 608.396,688.828 608.956,689.574 609.515,702.734 610.074,699.776 610.633,701.586 611.193,651.019 611.752,639.157 612.311,629.045 612.87,602.065 613.43,611.542 613.989,597.455 614.548,603.645 615.107,611.392 615.667,618.473 616.226,609.113 616.785,615.795 617.344,621.81 617.904,592.573 618.463,562.579 619.022,603.699 619.581,610.653 620.141,598.014 620.7,638.064 621.259,644.866 621.818,648.919 622.378,697.392 622.937,699.988 623.496,716.972 624.055,700.42 624.615,719.002 625.174,704.026 625.733,703.247 626.292,688.853 626.852,673.737 627.411,674.429 627.97,677.3 628.529,649.355 629.089,686.072 629.648,672.153 630.207,657.66 630.766,675.973 631.326,661.808 631.885,712.743 632.444,709.83 633.003,712.439 633.563,694.864 634.122,694.313 634.681,677.187 635.24,663.686 635.8,683.364 636.359,651.546 636.918,650.44 637.477,638.672 638.037,671.019 638.596,672.853 639.155,719.647 639.714,735.799 640.274,747.554 640.833,773.94 641.392,772.347 641.951,756.232 642.511,736.701 643.07,783.196 643.629,761.678 644.188,758.176 644.748,783.082 645.307,762.486 645.866,761.089 646.425,743.009 646.985,756.315 647.544,752.982 648.103,750.348 648.662,765.455 649.222,777.867 649.781,777.247 650.34,758.029 650.899,738.464 651.459,752.831 652.018,778.349 652.577,758.629 653.136,753.865 653.696,748.976 654.255,702.764 654.814,703.586 655.373,685.87 655.933,719.142 656.492,687.394 657.051,650.266 657.61,653.099 658.17,654.74 658.729,673.208 659.288,722.143 659.847,736.625 660.407,732.749 660.966,731.236 661.525,727.627 662.084,711.857 662.644,694.024 663.203,728.443 663.762,706.721 664.321,706.443 664.881,677.376 665.44,694.824 665.999,676.723 666.558,658.198 667.118,660.249 667.677,662.047 668.236,668.021 668.795,606.895 669.355,646.494 669.914,664.12 670.473,652.832 671.032,658.5 671.592,657.864 672.151,661.2 672.71,659.69 673.269,659.324 673.829,679.768 674.388,696.875 674.947,681.79 675.506,696.289 676.066,662.532 676.625,681.09 677.184,697.611 677.743,727.683 678.303,744.873 678.862,745.317 679.421,731.375 679.981,730.077 680.54,679.008 681.099,698.53 681.658,699.388 682.218,699.992 682.777,682.906 683.336,714.946 683.895,678.027 684.455,660.12 685.014,680.604 685.573,653.371 686.132,707.902 686.692,677.938 687.251,677.659 687.81,679.488 688.369,682.51 688.929,697.429 689.488,694.639 690.047,666.477 690.606,732.422 691.166,760.253 691.725,788.325 692.284,783.164 692.843,746.039 693.403,697.702 693.962,711.336 694.521,679.255 695.08,663.205 695.64,696.848 696.199,727.732 696.758,728.337 697.317,711.007 697.877,775.399 698.436,785.5 698.995,779.264 699.554,758.759 700.114,719.498 700.673,654.078 701.232,670.958 701.791,656.289 702.351,672.28 702.91,689.934 703.469,676.25 704.028,659.056 704.588,660.347 705.147,676.047 705.706,692.111 706.265,704.367 706.825,708.372 707.384,673.336 707.943,670.879 708.502,673.917 709.062,658.77 709.621,647.475 710.18,650.615 710.739,701.725 711.299,669.336 711.858,670.551 712.417,685.561 712.976,686.217 713.536,684.421 714.095,688.948 714.654,737.281 715.213,720.581 715.773,736.401 716.332,751.69 716.891,744.436 717.45,752.763 718.01,764.392 718.569,758.339 719.128,753.584 719.687,765.291 720.247,711.659 720.806,728.327 721.365,674.686 721.924,690.988 722.484,624.023 723.043,655.59 723.602,690.682 724.161,692.812 724.721,694.738 725.28,725.99 725.839,755.701 726.398,739.646 726.958,772.558 727.517,782.454 728.076,762.954 728.635,758.746 729.195,753.355 729.754,731.696 730.313,745.007 730.872,740.368 731.432,754.464 731.991,784.386 732.55,762.396 733.109,772.021 733.669,784.845 734.228,776.719 734.787,739.15 735.346,704.024 735.906,703.419 736.465,688.982 737.024,703.123 737.583,703.282 738.143,735.093 738.702,667.934 739.261,634.132 739.82,637.23 740.38,641.537 740.939,661.815 741.498,695.361 742.057,680.621 742.617,678.965 743.176,695.162 743.735,679.114 744.294,663.929 744.854,680.777 745.413,682.327 745.972,652.472 746.531,657.451 747.091,677.956 747.65,681.888 748.209,681.467 748.768,663.592 749.328,664.488 749.887,649.312 750.446,653.691 751.005,620.734 751.565,637.498 752.124,639.758 752.683,647.097 753.242,667.794 753.802,653.532 754.361,636.774 754.92,671.094 755.479,675.622 756.039,691.853 756.598,723.921 757.157,706.728 757.716,724.608 758.276,730.118 758.835,762.408 759.394,774.949 759.953,789.389 760.513,781.252 761.072,777.744 761.631,754.955 762.19,770.615 762.75,750.641 763.309,762.072 763.868,756.779 764.427,769.168 764.987,777.915 765.546,791.689 766.105,788.037 766.664,782.921 767.224,776.691 767.783,757.487 768.342,754.382 768.901,734.311 769.461,713.175 770.02,698.08 770.579,699.639 771.138,697.98 771.698,682.433 772.257,667.626 772.816,668.05 773.375,667.697 773.935,685.378 774.494,702.189 775.053,667.284 775.612,650.775 776.172,634.991 776.731,625.456 777.29,645.383 777.849,580.415 778.409,568.954 778.968,557.381 779.527,596.295 780.086,584.476 780.646,592.138 781.205,579.182 781.764,598.355 782.323,634.714 782.883,651.384 783.442,701.474 784.001,736.119 784.56,765.225 785.12,763.95 785.679,764.423 786.238,759.41 786.797,689.442 787.357,688.581 787.916,703.304 788.475,721.467 789.034,736.196 789.594,699.311 790.153,684.643 790.712,655.75 791.271,672.839 791.831,709.278 792.39,690.729 792.949,724.628 793.508,753.232 794.068,737.913 794.627,752.545 795.186,749.919 795.745,794.372 796.305,758.548 796.864,757.636 797.423,755.764 797.982,765.798 798.542,779.96 799.101,757.341 799.66,755.73 800.219,752.175 800.779,766.224 801.338,763.711 801.897,764.352 802.456,777.302 803.016,774.695 803.575,804.622 804.134,766.342 804.693,766.858 805.253,712.401 805.812,676.271 806.371,679.92 806.931,696.039 807.49,709.692 808.049,692.888 808.608,706.325 809.168,677.684 809.727,676.041 810.286,676.096 810.845,645.39 811.405,610.724 811.964,665.659 812.523,653.313 813.082,700.315 813.642,714.097 814.201,697.071 814.76,700.81 815.319,764.495 815.879,729.124 816.438,758.378 816.997,735.143 817.556,730.902 818.116,713.072 818.675,681.036 819.234,682.508 819.793,651.217 820.353,669.113 820.912,640.449 821.471,642.333 822.03,631.208 822.59,652.528 823.149,623.805 823.708,661.264 824.267,661.942 824.827,663.326 825.386,631.236 825.945,616.085 826.504,574.338 827.064,594.41 827.623,599.979 828.182,622.255 828.741,606.135 829.301,577.622 829.86,583.732 830.419,543.031 830.978,601.917 831.538,635.988 832.097,671.48 832.656,703.111 833.215,704.267 833.775,687.561 834.334,718.235 834.893,702.538 835.452,720.433 836.012,718.544 836.571,715.997 837.13,712.932 837.689,694.56 838.249,743.143 838.808,706.049 839.367,671.657 839.926,702.708 840.486,717.134 841.045,714.234 841.604,731.548 842.163,714.457 842.723,745.298 843.282,728.42 843.841,675.429 844.4,658.906 844.96,629.534 845.519,613.18 846.078,615.424 846.637,624.48 847.197,632.379 847.756,618.931 848.315,624.837 848.874,645.156 849.434,648.549 849.993,651.432 850.552,656.976 851.111,628.972 851.671,631.549 852.23,648.332 852.789,632.333 853.348,602.373 853.908,607.867 854.467,611.882 855.026,606.17 855.585,627.716 856.145,661.345 856.704,680.21 857.263,684.994 857.822,651.073 858.382,685.341 858.941,701.739 859.5,699.282 860.059,716.069 860.619,713.221 861.178,695.753 861.737,646.159 862.296,649.224 862.856,635.892 863.415,656.104 863.974,654.101 864.533,653.069 865.093,654.161 865.652,700.549 866.211,718.761 866.77,736.281 867.33,715.767 867.889,711.539 868.448,711.406 869.007,694.174 869.567,725.015 870.126,725.386 870.685,725.187 871.244,721.487 871.804,690.198 872.363,705.175 872.922,653.885 873.481,672.653 874.041,669.956 874.6,656.127 875.159,672.967 875.718,705.152 876.278,684.388 876.837,652.116 877.396,655.981 877.955,662.793 878.515,681.495 879.074,664.214 879.633,634.724 880.192,638.215 880.752,640.176 881.311,642.476 881.87,659.89 882.429,677.898 882.989,712.483 883.548,729.329 884.107,712.652 884.666,729.12 885.226,722.82 885.785,786.186 886.344,781.6 886.903,760.195 887.463,757.12 888.022,755.473 888.581,737.627 889.14,736.763 889.7,702.688 890.259,702.803 890.818,700.178 891.377,700.355 891.937,714.511 892.496,698.331 893.055,712.463 893.614,731.143 894.174,746.85 894.733,761.691 895.292,773.736 895.851,736.925 896.411,768.128 896.97,728.089 897.529,723.096 898.088,720.365 898.648,735.713 899.207,747.722 899.766,725.729 900.325,724.268 900.885,720.81 901.444,753.325 902.003,764.869 902.562,775.474 903.122,785.979 903.681,782.13 904.24,776.511 904.799,772.52 905.359,769.416 905.918,747.977 906.477,763.817 907.036,739.13 907.596,737.731 908.155,731.351 908.714,730.306 909.273,725.226 909.833,669.12 910.392,669.222 910.951,640.583 911.51,627.863 912.07,613.872 912.629,632.547 913.188,652.224 913.747,638.683 914.307,643.776 914.866,612.756 915.425,649.043 915.984,667.371 916.544,633.986 917.103,619.056 917.662,626.093 918.221,631.048 918.781,617.584 919.34,626.979 919.899,614.486 920.458,603.33 921.018,623.885 921.577,627.34 922.136,665.542 922.695,680.499 923.255,699.333 923.814,654.771 924.373,685.345 924.932,668.702 925.492,667.485 926.051,697.581 926.61,712.256 927.169,713.959 927.729,711.088 928.288,708.957 928.847,708.585 929.406,692.5 929.966,677.062 930.525,692.881 931.084,709.383 931.644,705.959 932.203,655.722 932.762,657.151 933.321,638.171 933.881,640.949 934.44,660.908 934.999,663.886 935.558,728.115 936.118,753.531 936.677,746.862 937.236,778.912 937.795,789.499 938.355,817.913 938.914,823.144 939.473,803.246 940.032,796.77 940.592,787.432 941.151,764.57 941.71,756.859 942.269,752.674 942.829,748.563 943.388,716.749 943.947,729.616 944.506,709.746 945.066,693.282 945.625,693.469 946.184,739.53 946.743,738.467 947.303,798.778 947.862,809.816 948.421,784.869 948.98,764.285 949.54,761.47 950.099,725.577 950.658,772.061 951.217,750.467 951.777,775.784 952.336,770.714 952.895,767.542 953.454,701.762 954.014,637.626 954.573,657.947 955.132,676.003 955.691,677.649 956.251,647.749 956.81,651.648 957.369,684.35 957.928,699.4 958.488,702.467 959.047,701.624 959.606,652.593 960.165,637.206 960.725,637.173 961.284,669.655 961.843,687.014 962.402,668.356 962.962,634.055 963.521,651.766 964.08,671.407 964.639,683.628 965.199,682.94 965.758,665.802 966.317,712.507 966.876,724.547 967.436,738.502 967.995,736.856 968.554,749.131 969.113,759.361 969.673,755.302 970.232,753.114 970.791,748.146 971.35,710.503 971.91,706.833 972.469,690.616 973.028,689.372 973.587,690.355 974.147,692.635 974.706,693.453 975.265,676.216 975.824,645.139 976.384,662.209 976.943,682.204 977.502,699.598 978.061,698.64 978.621,714.143 979.18,684.409 979.739,656.416 980.298,644.685 980.858,679.975 981.417,663.761 981.976,632.202 982.535,618.838 983.095,657.05 983.654,656.39 984.213,623.108 984.772,644.565 985.332,663.921 985.891,664.317 986.45,664.447 987.009,654.086 987.569,623.934 988.128,644.159 988.687,660.868 989.246,645.822 989.806,670.434 990.365,657.033 990.924,669.78 991.483,686.111 992.043,688.263 992.602,670.366 993.161,687.006 993.72,688.354 994.28,703.552 994.839,719.086 995.398,719.194 995.957,716.953 996.517,734.771 997.076,733.845 997.635,714.136 998.194,713.019 998.754,676.615 999.313,675.372 999.872,677.103 1000.43,692.994 1000.99,661.914 1001.55,681.934 1002.11,712.462 1002.67,730.384 1003.23,665.294 1003.79,621.83 1004.35,608.426 1004.91,613.373 1005.46,622.064 1006.02,658.066 1006.58,661.446 1007.14,679.909 1007.7,662.552 1008.26,663.105 1008.82,662.333 1009.38,677.202 1009.94,659.85 1010.5,648.025 1011.06,619.72 1011.62,609.827 1012.18,617.011 1012.73,634.733 1013.29,658.112 1013.85,643.865 1014.41,614.752 1014.97,650.214 1015.53,637.063 1016.09,622.826 1016.65,610.164 1017.21,629.179 1017.77,647.837 1018.33,636.226 1018.89,622.724 1019.45,659.357 1020.01,680.798 1020.56,666.693 1021.12,684.15 1021.68,701.691 1022.24,715.785 1022.8,728.496 1023.36,712.137 1023.92,711.676 1024.48,676.167 1025.04,691.157 1025.6,690.616 1026.16,705.052 1026.72,689.232 1027.28,690.398 1027.83,710.935 1028.39,693.782 1028.95,693.922 1029.51,731.103 1030.07,712.718 1030.63,726.659 1031.19,692.188 1031.75,708.002 1032.31,758.88 1032.87,737.45 1033.43,687.047 1033.99,673.999 1034.55,674.48 1035.1,690.901 1035.66,737.166 1036.22,719.731 1036.78,733.742 1037.34,761.834 1037.9,771.933 1038.46,733.098 1039.02,729.741 1039.58,713.372 1040.14,727.799 1040.7,707.435 1041.26,690.065 1041.82,686.984 1042.38,685.983 1042.93,652.486 1043.49,638.862 1044.05,624.512 1044.61,645.051 1045.17,631.645 1045.73,656.988 1046.29,660.247 1046.85,631.337 1047.41,664.048 1047.97,652.645 1048.53,651.296 1049.09,637.435 1049.65,639.295 1050.2,659.132 1050.76,677.601 1051.32,679.567 1051.88,697.586 1052.44,684.68 1053,701.288 1053.56,698.746 1054.12,715.064 1054.68,746.113 1055.24,728.492 1055.8,714.084 1056.36,729.354 1056.92,723.548 1057.48,772.144 1058.03,802.591 1058.59,799.36 1059.15,840.836 1059.71,816.407 1060.27,789.742 1060.83,814.973 1061.39,820.881 1061.95,811.181 1062.51,789.474 1063.07,766.273 1063.63,745.558 1064.19,759.525 1064.75,756.263 1065.3,765.933 1065.86,790.641 1066.42,785.057 1066.98,829.066 1067.54,806.277 1068.1,801.225 1068.66,731.699 1069.22,730.38 1069.78,698.686 1070.34,713.343 1070.9,694.568 1071.46,707.031 1072.02,702.825 1072.57,701.118 1073.13,681.866 1073.69,682.076 1074.25,695.948 1074.81,692.988 1075.37,675.298 1075.93,707.111 1076.49,702.202 1077.05,706.353 1077.61,701.606 1078.17,685.173 1078.73,687.063 1079.29,686.643 1079.85,670.658 1080.4,669.163 1080.96,651.577 1081.52,586.26 1082.08,608.696 1082.64,616.207 1083.2,633.841 1083.76,635.233 1084.32,623.092 1084.88,622.802 1085.44,624.818 1086,643.232 1086.56,661.64 1087.12,649.817 1087.67,634.28 1088.23,622.049 1088.79,608.017 1089.35,598.761 1089.91,601.179 1090.47,638.153 1091.03,623.712 1091.59,627.14 1092.15,647.881 1092.71,648.934 1093.27,685.986 1093.83,670.706 1094.39,673.212 1094.94,675.058 1095.5,675.632 1096.06,661.202 1096.62,643.285 1097.18,612.375 1097.74,619.809 1098.3,622.494 1098.86,623.56 1099.42,626.715 1099.98,598.843 1100.54,605.696 1101.1,609.981 1101.66,616.145 1102.22,637.017 1102.77,623.06 1103.33,624.335 1103.89,630.671 1104.45,635.53 1105.01,657.321 1105.57,627.991 1106.13,632.818 1106.69,637.843 1107.25,688.309 1107.81,675.15 1108.37,694.097 1108.93,691.469 1109.49,706.626 1110.04,704.715 1110.6,684.56 1111.16,684.162 1111.72,718.488 1112.28,686.715 1112.84,689.259 1113.4,672.929 1113.96,652.749 1114.52,655.58 1115.08,673.08 1115.64,673.449 1116.2,673.735 1116.76,673.731 1117.31,704.975 1117.87,722.795 1118.43,741.209 1118.99,739.738 1119.55,722.029 1120.11,736.715 1120.67,736.798 1121.23,765.516 1121.79,762.302 1122.35,759.077 1122.91,788.939 1123.47,810.496 1124.03,835.761 1124.59,895.535 1125.14,887.493 1125.7,892.073 1126.26,863.761 1126.82,855.011 1127.38,861.187 1127.94,866.886 1128.5,855.875 1129.06,828.115 1129.62,802.105 1130.18,798.659 1130.74,778.113 1131.3,756.509 1131.86,772.043 1132.41,766.151 1132.97,777.075 1133.53,772.007 1134.09,766.067 1134.65,756.312 1135.21,763.653 1135.77,757.44 1136.33,691.758 1136.89,707.236 1137.45,687.877 1138.01,673.738 1138.57,657.446 1139.13,642.645 1139.68,595.059 1140.24,598.539 1140.8,551.99 1141.36,557.797 1141.92,546.533 1142.48,542.212 1143.04,545.412 1143.6,540.66 1144.16,532.545 1144.72,537.933 1145.28,579.515 1145.84,569.396 1146.4,620.875 1146.96,627.542 1147.51,634.236 1148.07,653.527 1148.63,666.757 1149.19,649.788 1149.75,634.333 1150.31,650.746 1150.87,651.326 1151.43,622.311 1151.99,657.704 1152.55,655.94 1153.11,656.365 1153.67,643.269 1154.23,626.744 1154.78,623.339 1155.34,671.599 1155.9,687.999 1156.46,642.39 1157.02,628.17 1157.58,633.066 1158.14,634.768 1158.7,681.61 1159.26,632.457 1159.82,569.984 1160.38,560.557 1160.94,586.393 1161.5,579.46 1162.05,566.596 1162.61,558.667 1163.17,549.141 1163.73,586.342 1164.29,593.29 1164.85,596.98 1165.41,620.586 1165.97,622.879 1166.53,642.717 1167.09,648.814 1167.65,666.821 1168.21,651.176 1168.77,617.985 1169.33,640.363 1169.88,647.175 1170.44,628.846 1171,632.4 1171.56,638.085 1172.12,643.645 1172.68,644.708 1173.24,646.248 1173.8,633.264 1174.36,601.302 1174.92,606.581 1175.48,595.983 1176.04,588.295 1176.6,591.977 1177.15,598.169 1177.71,639.728 1178.27,629.495 1178.83,617.276 1179.39,588.11 1179.95,608.032 1180.51,631.13 1181.07,620.999 1181.63,639.997 1182.19,641.783 1182.75,640.473 1183.31,628.297 1183.87,615.214 1184.43,651.447 1184.98,653.01 1185.54,623.626 1186.1,677.091 1186.66,662.498 1187.22,681.892 1187.78,681.943 1188.34,699.645 1188.9,748.976 1189.46,795.63 1190.02,774.36 1190.58,783.823 1191.14,798.974 1191.7,810.829 1192.25,770.475 1192.81,769.309 1193.37,750.612 1193.93,763.365 1194.49,773.414 1195.05,766.783 1195.61,697.173 1196.17,681.486 1196.73,680.615 1197.29,663.219 1197.85,647.563 1198.41,649.844 1198.97,669.132 1199.52,669.94 1200.08,684.252 1200.64,682.085 1201.2,682.247 1201.76,699.291 1202.32,695.183 1202.88,629.359 1203.44,631.793 1204,602.55 1204.56,622.292 1205.12,642.179 1205.68,663.783 1206.24,694.746 1206.8,710.39 1207.35,728.122 1207.91,724.35 1208.47,736.547 1209.03,716.107 1209.59,712.33 1210.15,709.473 1210.71,708.459 1211.27,720.838 1211.83,686.09 1212.39,673.937 1212.95,706.874 1213.51,688.035 1214.07,736.543 1214.62,714.994 1215.18,698.949 1215.74,711.712 1216.3,710.986 1216.86,706.3 1217.42,688.82 1217.98,669.398 1218.54,687.29 1219.1,689.251 1219.66,689.966 1220.22,709.335 1220.78,708.54 1221.34,720.497 1221.89,685.049 1222.45,668.75 1223.01,672.386 1223.57,674.525 1224.13,688.652 1224.69,721.301 1225.25,721.178 1225.81,733.718 1226.37,732.979 1226.93,730.087 1227.49,716.382 1228.05,695.746 1228.61,711.133 1229.17,760.28 1229.72,757.14 1230.28,706.259 1230.84,704.593 1231.4,718.001 1231.96,734.895 1232.52,700.177 1233.08,701.014 1233.64,669.637 1234.2,652.768 1234.76,641.77 1235.32,613.395 1235.88,601.236 1236.44,606.253 1236.99,592.511 1237.55,595.975 1238.11,622.177 1238.67,626.128 1239.23,659.298 1239.79,660.083 1240.35,645.399 1240.91,711.457 1241.47,693.32 1242.03,676.124 1242.59,705.396 1243.15,684.342 1243.71,713.775 1244.26,728.486 1244.82,708.668 1245.38,704.984 1245.94,704.713 1246.5,701.857 1247.06,688.386 1247.62,767.569 1248.18,764.696 1248.74,796.679 1249.3,790.363 1249.86,738.01 1250.42,733.735 1250.98,743.251 1251.54,755.623 1252.09,768.63 1252.65,732.944 1253.21,715.217 1253.77,700.44 1254.33,696.596 1254.89,712.851 1255.45,695.74 1256.01,697.35 1256.57,712.712 1257.13,775.717 1257.69,737.689 1258.25,731.425 1258.81,743.17 1259.36,721.604 1259.92,721.522 1260.48,734.614 1261.04,733.144 1261.6,715.515 1262.16,649.779 1262.72,665.524 1263.28,649.75 1263.84,636.639 1264.4,640.5 1264.96,644.687 1265.52,648.302 1266.08,649.079 1266.63,665.951 1267.19,667.71 1267.75,668.008 1268.31,684.322 1268.87,682.965 1269.43,647.972 1269.99,633.566 1270.55,651.775 1271.11,654.076 1271.67,653.457 1272.23,654.609 1272.79,655.3 1273.35,657.917 1273.91,660.729 1274.46,691.972 1275.02,708.46 1275.58,690.046 1276.14,724.228 1276.7,738.652 1277.26,752.941 1277.82,734.685 1278.38,750.038 1278.94,763.091 1279.5,759.462 1280.06,789.573 1280.62,751.738 1281.18,729.174 1281.73,726.753 1282.29,707.605 1282.85,703.908 1283.41,720.419 1283.97,733.252 1284.53,695.324 1285.09,695.353 1285.65,678.423 1286.21,695.991 1286.77,693.701 1287.33,695.488 1287.89,709.483 1288.45,675.046 1289,646.359 1289.56,646.21 1290.12,631.042 1290.68,616.463 1291.24,621.253 1291.8,640.841 1292.36,626.169 1292.92,644.518 1293.48,661.269 1294.04,665.592 1294.6,681.688 1295.16,696.745 1295.72,744.834 1296.28,727.664 1296.83,708.175 1297.39,738.673 1297.95,750.325 1298.51,760.992 1299.07,776.16 1299.63,724.993 1300.19,709.371 1300.75,690.224 1301.31,657.753 1301.87,675.736 1302.43,709.929 1302.99,743.274 1303.55,726.504 1304.1,741.335 1304.66,738.792 1305.22,721.447 1305.78,720.051 1306.34,667.052 1306.9,703.521 1307.46,702.01 1308.02,702.334 1308.58,712.041 1309.14,695.222 1309.7,697.776 1310.26,696.35 1310.82,648.583 1311.38,620.272 1311.93,624.174 1312.49,661.773 1313.05,631.834 1313.61,606.332 1314.17,644.081 1314.73,614.516 1315.29,631.91 1315.85,653.887 1316.41,639.479 1316.97,642.055 1317.53,645.181 1318.09,646.656 1318.65,669.378 1319.2,683.679 1319.76,680.214 1320.32,680.307 1320.88,680.407 1321.44,680.158 1322,644.969 1322.56,650.827 1323.12,649.394 1323.68,635.282 1324.24,635.609 1324.8,621.254 1325.36,626.787 1325.92,630.819 1326.47,633.509 1327.03,620.214 1327.59,618.45 1328.15,641.706 1328.71,643.1 1329.27,662.571 1329.83,679.186 1330.39,714.223 1330.95,741.415 1331.51,753.798 1332.07,720.666 1332.63,767.434 1333.19,728.621 1333.75,727.356 1334.3,739.261 1334.86,739.246 1335.42,739.988 1335.98,754.301 1336.54,752.332 1337.1,716.797 1337.66,712.673 1338.22,727.777 1338.78,741.961 1339.34,740.488 1339.9,722.665 1340.46,708.269 1341.02,726.156 1341.57,690.578 1342.13,673.051 1342.69,705.493 1343.25,720.716 1343.81,715.607 1344.37,728.525 1344.93,725.054 1345.49,704.835 1346.05,720.625 1346.61,751.25 1347.17,727.257 1347.73,726.514 1348.29,728.949 1348.84,729.055 1349.4,746.384 1349.96,742.47 1350.52,739.788 1351.08,756.653 1351.64,736.104 1352.2,737.873 1352.76,716.121 1353.32,728.436 1353.88,740.526 1354.44,627.521 1355,630.727 1355.56,621.484 1356.12,622.599 1356.67,606.609 1357.23,640.723 1357.79,641.766 1358.35,578.675 1358.91,570.375 1359.47,559.384 1360.03,566.563 1360.59,572.364 1361.15,544.895 1361.71,553.069 1362.27,576.09 1362.83,549.698 1363.39,540.889 1363.94,546.012 1364.5,570.503 1365.06,571.79 1365.62,610.876 1366.18,614.826 1366.74,605.812 1367.3,627.355 1367.86,630.446 1368.42,650.617 1368.98,665.108 1369.54,714.578 1370.1,715.18 1370.66,696.546 1371.21,699.836 1371.77,668.704 1372.33,700.608 1372.89,699.373 1373.45,680.987 1374.01,649.664 1374.57,681.483 1375.13,683.313 1375.69,650.907 1376.25,652.88 1376.81,638.162 1377.37,639.926 1377.93,627.395 1378.49,645.992 1379.04,663.075 1379.6,645.917 1380.16,664.989 1380.72,648.163 1381.28,650.881 1381.84,654.584 1382.4,670.112 1382.96,699.83 1383.52,701.432 1384.08,669.73 1384.64,651.42 1385.2,637.25 1385.76,699.921 1386.31,711.473 1386.87,708.247 1387.43,707.354 1387.99,685.027 1388.55,685.056 1389.11,700.796 1389.67,718.037 1390.23,716.24 1390.79,744.902 1391.35,726.917 1391.91,758.765 1392.47,756.221 1393.03,767.59 1393.58,745.858 1394.14,726.256 1394.7,723.966 1395.26,740.103 1395.82,721.99 1396.38,733.863 1396.94,763.209 1397.5,761.151 1398.06,804.375 1398.62,860.37 1399.18,849.469 1399.74,825.812 1400.3,847.329 1400.86,805.57 1401.41,798.065 1401.97,794.52 1402.53,789.829 1403.09,752.722 1403.65,778.558 1404.21,772.323 1404.77,749.529 1405.33,730.294 1405.89,762.09 1406.45,754.824 1407.01,798.213 1407.57,826.242 1408.13,817.107 1408.68,793.806 1409.24,774.79 1409.8,767.636 1410.36,730.939 1410.92,710.833 1411.48,723.705 1412.04,738.006 1412.6,752.249 1413.16,697.382 1413.72,646.675 1414.28,613.598 1414.84,601.535 1415.4,589.362 1415.95,608.611 1416.51,575.438 1417.07,580.174 1417.63,569.039 1418.19,588.996 1418.75,609.714 1419.31,628.005 1419.87,665.209 1420.43,650.858 1420.99,652.573 1421.55,667.77 1422.11,683.494 1422.67,666.254 1423.23,634.675 1423.78,604.331 1424.34,603.351 1424.9,623.333 1425.46,643.346 1426.02,641.317 1426.58,630.114 1427.14,646.77 1427.7,634.491 1428.26,636.78 1428.82,622.274 1429.38,609.4 1429.94,614.556 1430.5,604.453 1431.05,624.12 1431.61,627.676 1432.17,601.145 1432.73,608.347 1433.29,596.332 1433.85,605.937 1434.41,625.501 1434.97,595.585 1435.53,587.582 1436.09,595.071 1436.65,600.6 1437.21,591.102 1437.77,630.412 1438.33,651.338 1438.88,703.212 1439.44,641.376 1440,644.82 1440.56,664.044 1441.12,685.984 1441.68,674.482 1442.24,663.303 1442.8,699.547 1443.36,684.797 1443.92,687.209 1444.48,702.859 1445.04,715.256 1445.6,731.211 1446.15,699.582 1446.71,714.694 1447.27,684.379 1447.83,684.443 1448.39,704.256 1448.95,735.398 1449.51,719.405 1450.07,749.719 1450.63,748.772 1451.19,749.14 1451.75,775.179 1452.31,769.323 1452.87,792.584 1453.42,799.628 1453.98,795.554 1454.54,789.656 1455.1,783.767 1455.66,764.022 1456.22,778.281 1456.78,758.618 1457.34,736.895 1457.9,735.301 1458.46,734.906 1459.02,732.023 1459.58,695.611 1460.14,744.969 1460.7,707.423 1461.25,675.666 1461.81,674.425 1462.37,657.394 1462.93,658.541 1463.49,645.747 1464.05,676.652 1464.61,712.963 1465.17,725.723 1465.73,710.961 1466.29,707.528 1466.85,660.956 1467.41,677.441 1467.97,660.36 1468.52,643.711 1469.08,613.951 1469.64,635.613 1470.2,624.836 1470.76,610.026 1471.32,602.535 1471.88,642.813 1472.44,647.803 1473,632.65 1473.56,653.042 1474.12,665.975 1474.68,667 1475.24,667.952 1475.79,671.533 1476.35,735.106 1476.91,718.297 1477.47,698.372 1478.03,696.804 1478.59,676.741 1479.15,677.368 1479.71,677.538 1480.27,677.052 1480.83,692.266 1481.39,709.213 1481.95,705.735 1482.51,671.129 1483.07,671.584 1483.62,654.427 1484.18,658.062 1484.74,677.919 1485.3,663.628 1485.86,634.111 1486.42,603.491 1486.98,622.017 1487.54,607.354 1488.1,644.845 1488.66,633.612 1489.22,601.662 1489.78,592.722 1490.34,618.756 1490.89,652.202 1491.45,634.678 1492.01,606.585 1492.57,642.203 1493.13,644.628 1493.69,629.204 1494.25,611.392 1494.81,597.827 1495.37,567.656 1495.93,602.938 1496.49,624.837 1497.05,611.082 1497.61,650.554 1498.16,637.463 1498.72,652.86 1499.28,653.886 1499.84,658.196 1500.4,694.223 1500.96,691.884 1501.52,690.575 1502.08,708.635 1502.64,693.147 1503.2,708.159 1503.76,691.186 1504.32,658.677 1504.88,679.657 1505.44,678.619 1505.99,678.711 1506.55,694.032 1507.11,659.741 1507.67,658.136 1508.23,690.413 1508.79,706.838 1509.35,706.856 1509.91,721.047 1510.47,719.128 1511.03,780.849 1511.59,759.576 1512.15,786.87 1512.71,780.043 1513.26,792.201 1513.82,772.023 1514.38,749.985 1514.94,729.761 1515.5,724.434 1516.06,737.646 1516.62,763.082 1517.18,771.097 1517.74,782.723 1518.3,760.761 1518.86,773.907 1519.42,753.786 1519.98,766.598 1520.53,779.544 1521.09,752.944 1521.65,746.22 1522.21,773.544 1522.77,783.375 1523.33,794.269 1523.89,771.871 1524.45,747.116 1525.01,762.738 1525.57,760.624 1526.13,738.36 1526.69,731.912 1527.25,712.818 1527.81,712.851 1528.36,678.494 1528.92,666.797 1529.48,669.022 1530.04,653.984 1530.6,669.864 1531.16,653.899 1531.72,655.952 1532.28,672.378 1532.84,675.269 1533.4,676.894 1533.96,691.017 1534.52,673.928 1535.08,676.218 1535.63,677.523 1536.19,597.408 1536.75,603.215 1537.31,588.617 1537.87,597.009 1538.43,617.357 1538.99,622.911 1539.55,673.846 1540.11,708.152 1540.67,707.414 1541.23,724.709 1541.79,757.19 1542.35,804.168 1542.9,815.452 1543.46,790.528 1544.02,770.443 1544.58,781.963 1545.14,776.748 1545.7,790.828 1546.26,818.989 1546.82,796.939 1547.38,791.821 1547.94,802.858 1548.5,783.288 1549.06,744.889 1549.62,757.979 1550.18,752.8 1550.73,668.736 1551.29,685.302 1551.85,686.012 1552.41,685.714 1552.97,682.148 1553.53,660.3 1554.09,631.323 1554.65,648.774 1555.21,620.524 1555.77,621.744 1556.33,624.119 1556.89,640.121 1557.45,672.765 1558,689.802 1558.56,640.822 1559.12,643.238 1559.68,662.72 1560.24,646.922 1560.8,649.675 1561.36,716.428 1561.92,697.951 1562.48,680.146 1563.04,636.153 1563.6,641.389 1564.16,631.15 1564.72,632.607 1565.28,649.379 1565.83,652.933 1566.39,640.788 1566.95,643.363 1567.51,629.405 1568.07,647.62 1568.63,604.683 1569.19,575.342 1569.75,613.115 1570.31,615.439 1570.87,618.572 1571.43,622.191 1571.99,596.809 1572.55,588.04 1573.1,592.428 1573.66,629.769 1574.22,627.853 1574.78,597.321 1575.34,568.601 1575.9,590.933 1576.46,581.074 1577.02,567.888 1577.58,589.519 1578.14,592.386 1578.7,595.372 1579.26,653.262 1579.82,655.199 1580.37,658.588 1580.93,673.825 1581.49,660.279 1582.05,663.062 1582.61,679.798 1583.17,678.875 1583.73,711.091 1584.29,664.673 1584.85,632.658 1585.41,633.591 1585.97,607.491 1586.53,643.551 1587.09,628.734 1587.65,614.633 1588.2,632.603 1588.76,636.098 1589.32,622.356 1589.88,609.626 1590.44,580.694 1591,569.571 1591.56,563.694 1592.12,601.254 1592.68,652.615 1593.24,653.631 1593.8,672.094 1594.36,691.09 1594.92,689.948 1595.47,721.076 1596.03,750.765 1596.59,781.124 1597.15,792.719 1597.71,772.233 1598.27,782.181 1598.83,774.918 1599.39,754.701 1599.95,770.133 1600.51,781.494 1601.07,794.834 1601.63,806.436 1602.19,786.696 1602.74,797.701 1603.3,809.793 1603.86,804.601 1604.42,812.602 1604.98,755.608 1605.54,752.422 1606.1,732.608 1606.66,728.205 1607.22,740.601 1607.78,741.433 1608.34,737.999 1608.9,698.767 1609.46,681.291 1610.02,697.619 1610.57,716.915 1611.13,710.841 1611.69,676.937 1612.25,675.353 1612.81,672.407 1613.37,673.718 1613.93,709.432 1614.49,687.941 1615.05,720.751 1615.61,748.853 1616.17,745.418 1616.73,760.762 1617.29,772.086 1617.84,751.563 1618.4,749.53 1618.96,730.683 1619.52,762.841 1620.08,761.603 1620.64,723.242 1621.2,753.395 1621.76,766.293 1622.32,711.134 1622.88,659.447 1623.44,627.519 1624,632.674 1624.56,654.832 1625.11,654.897 1625.67,686.07 1626.23,702.876 1626.79,683.778 1627.35,685.347 1627.91,652.444 1628.47,654.221 1629.03,640.155 1629.59,641.961 1630.15,661.292 1630.71,694.831 1631.27,694.492 1631.83,761.534 1632.39,743.359 1632.94,722.339 1633.5,735.676 1634.06,714.439 1634.62,716.728 1635.18,683.128 1635.74,684.926 1636.3,637.415 1636.86,653.986 1637.42,623.302 1637.98,612.985 1638.54,634.376 1639.1,702.011 1639.66,687.27 1640.21,702.048 1640.77,666.986 1641.33,683.037 1641.89,680.188 1642.45,677.273 1643.01,726.558 1643.57,758.265 1644.13,752.992 1644.69,749.357 1645.25,747.11 1645.81,758.785 1646.37,725.258 1646.93,691.087 1647.48,675.308 1648.04,678.528 1648.6,678.402 1649.16,678.782 1649.72,678.449 1650.28,677.24 1650.84,678.312 1651.4,630.52 1651.96,615.247 1652.52,652.141 1653.08,652.639 1653.64,635.183 1654.2,637.908 1654.76,637.483 1655.31,637.2 1655.87,638.698 1656.43,643.793 1656.99,662.409 1657.55,664.23 1658.11,665.075 1658.67,651.362 1659.23,670.102 1659.79,674.698 1660.35,707.785 1660.91,704.056 1661.47,669.952 1662.03,638.882 1662.58,661.954 1663.14,674.156 1663.7,658.932 1664.26,644.722 1664.82,679.151 1665.38,681.459 1665.94,662.421 1666.5,650.561 1667.06,655.593 1667.62,660.373 1668.18,657.499 1668.74,659.842 1669.3,615.511 1669.85,601.311 1670.41,602.816 1670.97,606.023 1671.53,609.289 1672.09,611.484 1672.65,613.507 1673.21,616.161 1673.77,615.906 1674.33,599.658 1674.89,617.253 1675.45,601.51 1676.01,624.449 1676.57,659.573 1677.13,710.421 1677.68,692.483 1678.24,677.606 1678.8,695.881 1679.36,716.267 1679.92,683.783 1680.48,697.786 1681.04,681.737 1681.6,684.829 1682.16,685.912 1682.72,713.697 1683.28,707.622 1683.84,671.792 1684.4,639.022 1684.95,678.574 1685.51,695.261 1686.07,647.102 1686.63,647.462 1687.19,681.057 1687.75,682.082 1688.31,696.07 1688.87,644.601 1689.43,680.008 1689.99,678.575 1690.55,677.906 1691.11,678.234 1691.67,693.109 1692.23,675.442 1692.78,674.374 1693.34,672.79 1693.9,678.391 1694.46,649.466 1695.02,650.927 1695.58,621.631 1696.14,669.728 1696.7,705.182 1697.26,723.542 1697.82,655.95 1698.38,656.041 1698.94,675.126 1699.5,673.671 1700.05,671.709 1700.61,672.532 1701.17,624.272 1701.73,562.928 1702.29,555.776 1702.85,593.239 1703.41,600.925 1703.97,620.625 1704.53,639.577 1705.09,641.459 1705.65,627.079 1706.21,616.563 1706.77,570.92 1707.32,576.186 1707.88,584.161 1708.44,621.046 1709,620.655 1709.56,607.368 1710.12,598.182 1710.68,600.724 1711.24,605.28 1711.8,611.943 1712.36,599.463 1712.92,637.335 1713.48,655.622 1714.04,659.889 1714.6,648.741 1715.15,618.737 1715.71,619.926 1716.27,619.788 1716.83,623.28 1717.39,595.857 1717.95,600.205 1718.51,621.359 1719.07,593.558 1719.63,598.832 1720.19,604.743 1720.75,639.777 1721.31,655.725 1721.87,641.199 1722.42,661.385 1722.98,662.102 1723.54,692.142 1724.1,691.069 1724.66,658.936 1725.22,644.186 1725.78,646.729 1726.34,648.053 1726.9,664.839 1727.46,679.541 1728.02,726.784 1728.58,728.684 1729.14,708.655 1729.69,755.908 1730.25,731.596 1730.81,724.95 1731.37,692.925 1731.93,678.691 1732.49,693.815 1733.05,674.081 1733.61,627.962 1734.17,648.3 1734.73,686.807 1735.29,671.284 1735.85,701.497 1736.41,719.779 1736.97,703.655 1737.52,719.717 1738.08,735.427 1738.64,745.185 1739.2,740.612 1739.76,740.138 1740.32,751.064 1740.88,699.314 1741.44,746.347 1742,742.944 1742.56,772.576 1743.12,756.419 1743.68,735.901 1744.24,714.088 1744.79,678.146 1745.35,693.761 1745.91,676.346 1746.47,691.218 1747.03,707.433 1747.59,671.809 1748.15,705.31 1748.71,734.28 1749.27,700.785 1749.83,668.591 1750.39,685.95 1750.95,701.874 1751.51,684.472 1752.06,713.307 1752.62,714.066 1753.18,727.227 1753.74,723.38 1754.3,719.253 1754.86,732.864 1755.42,711.17 1755.98,740.632 1756.54,749.826 1757.1,745.413 1757.66,725.943 1758.22,723.595 1758.78,718.535 1759.34,697.688 1759.89,714.482 1760.45,714.65 1761.01,710.147 1761.57,689.787 1762.13,705.776 1762.69,688.893 1763.25,707.633 1763.81,724.504 1764.37,722.501 1764.93,737.774 1765.49,767.602 1766.05,812.015 1766.61,833.038 1767.16,829.246 1767.72,820.509 1768.28,797.669 1768.84,791.594 1769.4,785.403 1769.96,765.749 1770.52,762.718 1771.08,774.179 1771.64,800.599 1772.2,794.745 1772.76,754.892 1773.32,749.146 1773.88,764.102 1774.43,793.023 1774.99,785.462 1775.55,781.841 1776.11,761.825 1776.67,694.676 1777.23,693.823 1777.79,711.583 1778.35,694.98 1778.91,664.285 1779.47,679.648 1780.03,743.38 1780.59,722.872 1781.15,718.966 1781.71,721.252 1782.26,716.082 1782.82,698.812 1783.38,699.422 1783.94,680.982 1784.5,727.764 1785.06,707.924 1785.62,722.738 1786.18,703.87 1786.74,736.133 1787.3,734.131 1787.86,764.712 1788.42,758.719 1788.98,751.554 1789.53,735.163 1790.09,699.678 1790.65,701.818 1791.21,716.864 1791.77,715.196 1792.33,713.98 1792.89,712.376 1793.45,664.754 1794.01,664.138 1794.57,651.397 1795.13,669.513 1795.69,636.506 1796.25,655.53 1796.8,675.014 1797.36,690.576 1797.92,691.113 1798.48,662.9 1799.04,712.91 1799.6,678.433 1800.16,647.243 1800.72,647.104 1801.28,633.639 1801.84,618.942 1802.4,611.3 1802.96,581.341 1803.52,617.221 1804.08,603.898 1804.63,591.244 1805.19,563.222 1805.75,568.932 1806.31,574.305 1806.87,574.313 1807.43,611.013 1807.99,596.35 1808.55,586.373 1809.11,572.522 1809.67,562.376 1810.23,570.911 1810.79,561.44 1811.35,589.305 1811.9,643.463 1812.46,645.262 1813.02,665.94 1813.58,686.174 1814.14,702.815 1814.7,735.055 1815.26,731.429 1815.82,714.27 1816.38,713.924 1816.94,714.548 1817.5,714.359 1818.06,713.112 1818.62,714.53 1819.18,699.002 1819.73,697.687 1820.29,693.079 1820.85,678.321 1821.41,672.726 1821.97,673.451 1822.53,693.297 1823.09,690.972 1823.65,710.889 1824.21,726.742 1824.77,705.433 1825.33,739.66 1825.89,738.332 1826.45,784.755 1827,781.69 1827.56,792.219 1828.12,755.875 1828.68,753.725 1829.24,766.023 1829.8,778.639 1830.36,774.076 1830.92,803.95 1831.48,784.817 1832.04,844.441 1832.6,853.109 1833.16,827.584 1833.72,819.557 1834.27,845.655 1834.83,809.562 1835.39,789.082 1835.95,782.879 1836.51,760.367 1837.07,723.103 1837.63,688.305 1838.19,688.888 \"/>\n<path clip-path=\"url(#clip503)\" d=\"M720.247 693.015 L720.806 693.015 L721.365 693.015 L721.924 693.015 L722.484 693.015 L723.043 693.015 L723.602 693.015 L724.161 693.015 L724.721 693.015 L725.28 693.015 L725.839 693.015 L726.398 693.015 L726.958 693.015 L727.517 693.015 L728.076 693.015 L728.635 693.015 L729.195 693.015 L729.754 693.015 L730.313 693.015 L730.872 693.015 L731.432 693.015 L731.991 693.015 L732.55 693.015 L733.109 693.015 L733.669 693.015 L734.228 693.015 L734.787 693.015 L735.346 693.015 L735.906 693.015 L736.465 693.015 L737.024 693.015 L737.583 693.015 L738.143 693.015 L738.702 693.015 L739.261 693.015 L739.82 693.015 L740.38 693.015 L740.939 693.015 L741.498 693.015 L742.057 693.015 L742.617 693.015 L743.176 693.015 L743.735 693.015 L744.294 693.015 L744.854 693.015 L745.413 693.015 L745.972 693.015 L746.531 693.015 L747.091 693.015 L747.65 693.015 L748.209 693.015 L748.768 693.015 L749.328 693.015 L749.887 693.015 L750.446 693.015 L751.005 693.015 L751.565 693.015 L752.124 693.015 L752.683 693.015 L753.242 693.015 L753.802 693.015 L754.361 693.015 L754.92 693.015 L755.479 693.015 L756.039 693.015 L756.598 693.015 L757.157 693.015 L757.716 693.015 L758.276 693.015 L758.835 693.015 L759.394 693.015 L759.953 693.015 L760.513 693.015 L761.072 693.015 L761.631 693.015 L762.19 693.015 L762.75 693.015 L763.309 693.015 L763.868 693.015 L764.427 693.015 L764.987 693.015 L765.546 693.015 L766.105 693.015 L766.664 693.015 L767.224 693.015 L767.783 693.015 L768.342 693.015 L768.901 693.015 L769.461 693.015 L770.02 693.015 L770.579 693.015 L771.138 693.015 L771.698 693.015 L772.257 693.015 L772.816 693.015 L773.375 693.015 L773.935 693.015 L774.494 693.015 L775.053 693.015 L775.612 693.015 L776.172 693.015 L776.731 693.015 L777.29 693.015 L777.849 693.015 L778.409 693.015 L778.968 693.015 L779.527 693.015 L780.086 693.015 L780.646 693.015 L781.205 693.015 L781.764 693.015 L782.323 693.015 L782.883 693.015 L783.442 693.015 L784.001 693.015 L784.56 693.015 L785.12 693.015 L785.679 693.015 L786.238 693.015 L786.797 693.015 L787.357 693.015 L787.916 693.015 L788.475 693.015 L789.034 693.015 L789.594 693.015 L790.153 693.015 L790.712 693.015 L791.271 693.015 L791.831 693.015 L792.39 693.015 L792.949 693.015 L793.508 693.015 L794.068 693.015 L794.627 693.015 L795.186 693.015 L795.745 693.015 L796.305 693.015 L796.864 693.015 L797.423 693.015 L797.982 693.015 L798.542 693.015 L799.101 693.015 L799.66 693.015 L800.219 693.015 L800.779 693.015 L801.338 693.015 L801.897 693.015 L802.456 693.015 L803.016 693.015 L803.575 693.015 L804.134 693.015 L804.693 693.015 L805.253 693.015 L805.812 693.015 L806.371 693.015 L806.931 693.015 L807.49 693.015 L808.049 693.015 L808.608 693.015 L809.168 693.015 L809.727 693.015 L810.286 693.015 L810.845 693.015 L811.405 693.015 L811.964 693.015 L812.523 693.015 L813.082 693.015 L813.642 693.015 L814.201 693.015 L814.76 693.015 L815.319 693.015 L815.879 693.015 L816.438 693.015 L816.997 693.015 L817.556 693.015 L818.116 693.015 L818.675 693.015 L819.234 693.015 L819.793 693.015 L820.353 693.015 L820.912 693.015 L821.471 693.015 L822.03 693.015 L822.59 693.015 L823.149 693.015 L823.708 693.015 L824.267 693.015 L824.827 693.015 L825.386 693.015 L825.945 693.015 L826.504 693.015 L827.064 693.015 L827.623 693.015 L828.182 693.015 L828.741 693.015 L829.301 693.015 L829.86 693.015 L830.419 693.015 L830.978 693.015 L831.538 693.015 L832.097 693.015 L832.656 693.015 L833.215 693.015 L833.775 693.015 L834.334 693.015 L834.893 693.015 L835.452 693.015 L836.012 693.015 L836.571 693.015 L837.13 693.015 L837.689 693.015 L838.249 693.015 L838.808 693.015 L839.367 693.015 L839.926 693.015 L840.486 693.015 L841.045 693.015 L841.604 693.015 L842.163 693.015 L842.723 693.015 L843.282 693.015 L843.841 693.015 L844.4 693.015 L844.96 693.015 L845.519 693.015 L846.078 693.015 L846.637 693.015 L847.197 693.015 L847.756 693.015 L848.315 693.015 L848.874 693.015 L849.434 693.015 L849.993 693.015 L850.552 693.015 L851.111 693.015 L851.671 693.015 L852.23 693.015 L852.789 693.015 L853.348 693.015 L853.908 693.015 L854.467 693.015 L855.026 693.015 L855.585 693.015 L856.145 693.015 L856.704 693.015 L857.263 693.015 L857.822 693.015 L858.382 693.015 L858.941 693.015 L859.5 693.015 L860.059 693.015 L860.619 693.015 L861.178 693.015 L861.737 693.015 L862.296 693.015 L862.856 693.015 L863.415 693.015 L863.974 693.015 L864.533 693.015 L865.093 693.015 L865.652 693.015 L866.211 693.015 L866.77 693.015 L867.33 693.015 L867.889 693.015 L868.448 693.015 L869.007 693.015 L869.567 693.015 L870.126 693.015 L870.685 693.015 L871.244 693.015 L871.804 693.015 L872.363 693.015 L872.922 693.015 L873.481 693.015 L874.041 693.015 L874.6 693.015 L875.159 693.015 L875.718 693.015 L876.278 693.015 L876.837 693.015 L877.396 693.015 L877.955 693.015 L878.515 693.015 L879.074 693.015 L879.633 693.015 L880.192 693.015 L880.752 693.015 L881.311 693.015 L881.87 693.015 L882.429 693.015 L882.989 693.015 L883.548 693.015 L884.107 693.015 L884.666 693.015 L885.226 693.015 L885.785 693.015 L886.344 693.015 L886.903 693.015 L887.463 693.015 L888.022 693.015 L888.581 693.015 L889.14 693.015 L889.7 693.015 L890.259 693.015 L890.818 693.015 L891.377 693.015 L891.937 693.015 L892.496 693.015 L893.055 693.015 L893.614 693.015 L894.174 693.015 L894.733 693.015 L895.292 693.015 L895.851 693.015 L896.411 693.015 L896.97 693.015 L897.529 693.015 L898.088 693.015 L898.648 693.015 L899.207 693.015 L899.766 693.015 L900.325 693.015 L900.885 693.015 L901.444 693.015 L902.003 693.015 L902.562 693.015 L903.122 693.015 L903.681 693.015 L904.24 693.015 L904.799 693.015 L905.359 693.015 L905.918 693.015 L906.477 693.015 L907.036 693.015 L907.596 693.015 L908.155 693.015 L908.714 693.015 L909.273 693.015 L909.833 693.015 L910.392 693.015 L910.951 693.015 L911.51 693.015 L912.07 693.015 L912.629 693.015 L913.188 693.015 L913.747 693.015 L914.307 693.015 L914.866 693.015 L915.425 693.015 L915.984 693.015 L916.544 693.015 L917.103 693.015 L917.662 693.015 L918.221 693.015 L918.781 693.015 L919.34 693.015 L919.899 693.015 L920.458 693.015 L921.018 693.015 L921.577 693.015 L922.136 693.015 L922.695 693.015 L923.255 693.015 L923.814 693.015 L924.373 693.015 L924.932 693.015 L925.492 693.015 L926.051 693.015 L926.61 693.015 L927.169 693.015 L927.729 693.015 L928.288 693.015 L928.847 693.015 L929.406 693.015 L929.966 693.015 L930.525 693.015 L931.084 693.015 L931.644 693.015 L932.203 693.015 L932.762 693.015 L933.321 693.015 L933.881 693.015 L934.44 693.015 L934.999 693.015 L935.558 693.015 L936.118 693.015 L936.677 693.015 L937.236 693.015 L937.795 693.015 L938.355 693.015 L938.914 693.015 L939.473 693.015 L940.032 693.015 L940.592 693.015 L941.151 693.015 L941.71 693.015 L942.269 693.015 L942.829 693.015 L943.388 693.015 L943.947 693.015 L944.506 693.015 L945.066 693.015 L945.625 693.015 L946.184 693.015 L946.743 693.015 L947.303 693.015 L947.862 693.015 L948.421 693.015 L948.98 693.015 L949.54 693.015 L950.099 693.015 L950.658 693.015 L951.217 693.015 L951.777 693.015 L952.336 693.015 L952.895 693.015 L953.454 693.015 L954.014 693.015 L954.573 693.015 L955.132 693.015 L955.691 693.015 L956.251 693.015 L956.81 693.015 L957.369 693.015 L957.928 693.015 L958.488 693.015 L959.047 693.015 L959.606 693.015 L960.165 693.015 L960.725 693.015 L961.284 693.015 L961.843 693.015 L962.402 693.015 L962.962 693.015 L963.521 693.015 L964.08 693.015 L964.639 693.015 L965.199 693.015 L965.758 693.015 L966.317 693.015 L966.876 693.015 L967.436 693.015 L967.995 693.015 L968.554 693.015 L969.113 693.015 L969.673 693.015 L970.232 693.015 L970.791 693.015 L971.35 693.015 L971.91 693.015 L972.469 693.015 L973.028 693.015 L973.587 693.015 L974.147 693.015 L974.706 693.015 L975.265 693.015 L975.824 693.015 L976.384 693.015 L976.943 693.015 L977.502 693.015 L978.061 693.015 L978.621 693.015 L979.18 693.015 L979.739 693.015 L980.298 693.015 L980.858 693.015 L981.417 693.015 L981.976 693.015 L982.535 693.015 L983.095 693.015 L983.654 693.015 L984.213 693.015 L984.772 693.015 L985.332 693.015 L985.891 693.015 L986.45 693.015 L987.009 693.015 L987.569 693.015 L988.128 693.015 L988.687 693.015 L989.246 693.015 L989.806 693.015 L990.365 693.015 L990.924 693.015 L991.483 693.015 L992.043 693.015 L992.602 693.015 L993.161 693.015 L993.72 693.015 L994.28 693.015 L994.839 693.015 L995.398 693.015 L995.957 693.015 L996.517 693.015 L997.076 693.015 L997.635 693.015 L998.194 693.015 L998.754 693.015 L999.313 693.015 L999.872 693.015 L1000.43 693.015 L1000.99 693.015 L1001.55 693.015 L1002.11 693.015 L1002.67 693.015 L1003.23 693.015 L1003.79 693.015 L1004.35 693.015 L1004.91 693.015 L1005.46 693.015 L1006.02 693.015 L1006.58 693.015 L1007.14 693.015 L1007.7 693.015 L1008.26 693.015 L1008.82 693.015 L1009.38 693.015 L1009.94 693.015 L1010.5 693.015 L1011.06 693.015 L1011.62 693.015 L1012.18 693.015 L1012.73 693.015 L1013.29 693.015 L1013.85 693.015 L1014.41 693.015 L1014.97 693.015 L1015.53 693.015 L1016.09 693.015 L1016.65 693.015 L1017.21 693.015 L1017.77 693.015 L1018.33 693.015 L1018.89 693.015 L1019.45 693.015 L1020.01 693.015 L1020.56 693.015 L1021.12 693.015 L1021.68 693.015 L1022.24 693.015 L1022.8 693.015 L1023.36 693.015 L1023.92 693.015 L1024.48 693.015 L1025.04 693.015 L1025.6 693.015 L1026.16 693.015 L1026.72 693.015 L1027.28 693.015 L1027.83 693.015 L1028.39 693.015 L1028.95 693.015 L1029.51 693.015 L1030.07 693.015 L1030.63 693.015 L1031.19 693.015 L1031.75 693.015 L1032.31 693.015 L1032.87 693.015 L1033.43 693.015 L1033.99 693.015 L1034.55 693.015 L1035.1 693.015 L1035.66 693.015 L1036.22 693.015 L1036.78 693.015 L1037.34 693.015 L1037.9 693.015 L1038.46 693.015 L1039.02 693.015 L1039.58 693.015 L1040.14 693.015 L1040.7 693.015 L1041.26 693.015 L1041.82 693.015 L1042.38 693.015 L1042.93 693.015 L1043.49 693.015 L1044.05 693.015 L1044.61 693.015 L1045.17 693.015 L1045.73 693.015 L1046.29 693.015 L1046.85 693.015 L1047.41 693.015 L1047.97 693.015 L1048.53 693.015 L1049.09 693.015 L1049.65 693.015 L1050.2 693.015 L1050.76 693.015 L1051.32 693.015 L1051.88 693.015 L1052.44 693.015 L1053 693.015 L1053.56 693.015 L1054.12 693.015 L1054.68 693.015 L1055.24 693.015 L1055.8 693.015 L1056.36 693.015 L1056.92 693.015 L1057.48 693.015 L1058.03 693.015 L1058.59 693.015 L1059.15 693.015 L1059.71 693.015 L1060.27 693.015 L1060.83 693.015 L1061.39 693.015 L1061.95 693.015 L1062.51 693.015 L1063.07 693.015 L1063.63 693.015 L1064.19 693.015 L1064.75 693.015 L1065.3 693.015 L1065.86 693.015 L1066.42 693.015 L1066.98 693.015 L1067.54 693.015 L1068.1 693.015 L1068.66 693.015 L1069.22 693.015 L1069.78 693.015 L1070.34 693.015 L1070.9 693.015 L1071.46 693.015 L1072.02 693.015 L1072.57 693.015 L1073.13 693.015 L1073.69 693.015 L1074.25 693.015 L1074.81 693.015 L1075.37 693.015 L1075.93 693.015 L1076.49 693.015 L1077.05 693.015 L1077.61 693.015 L1078.17 693.015 L1078.73 693.015 L1079.29 693.015 L1079.85 693.015 L1080.4 693.015 L1080.96 693.015 L1081.52 693.015 L1082.08 693.015 L1082.64 693.015 L1083.2 693.015 L1083.76 693.015 L1084.32 693.015 L1084.88 693.015 L1085.44 693.015 L1086 693.015 L1086.56 693.015 L1087.12 693.015 L1087.67 693.015 L1088.23 693.015 L1088.79 693.015 L1089.35 693.015 L1089.91 693.015 L1090.47 693.015 L1091.03 693.015 L1091.59 693.015 L1092.15 693.015 L1092.71 693.015 L1093.27 693.015 L1093.83 693.015 L1094.39 693.015 L1094.94 693.015 L1095.5 693.015 L1096.06 693.015 L1096.62 693.015 L1097.18 693.015 L1097.74 693.015 L1098.3 693.015 L1098.86 693.015 L1099.42 693.015 L1099.98 693.015 L1100.54 693.015 L1101.1 693.015 L1101.66 693.015 L1102.22 693.015 L1102.77 693.015 L1103.33 693.015 L1103.89 693.015 L1104.45 693.015 L1105.01 693.015 L1105.57 693.015 L1106.13 693.015 L1106.69 693.015 L1107.25 693.015 L1107.81 693.015 L1108.37 693.015 L1108.93 693.015 L1109.49 693.015 L1110.04 693.015 L1110.6 693.015 L1111.16 693.015 L1111.72 693.015 L1112.28 693.015 L1112.84 693.015 L1113.4 693.015 L1113.96 693.015 L1114.52 693.015 L1115.08 693.015 L1115.64 693.015 L1116.2 693.015 L1116.76 693.015 L1117.31 693.015 L1117.87 693.015 L1118.43 693.015 L1118.99 693.015 L1119.55 693.015 L1120.11 693.015 L1120.67 693.015 L1121.23 693.015 L1121.79 693.015 L1122.35 693.015 L1122.91 693.015 L1123.47 693.015 L1124.03 693.015 L1124.59 693.015 L1125.14 693.015 L1125.7 693.015 L1126.26 693.015 L1126.82 693.015 L1127.38 693.015 L1127.94 693.015 L1128.5 693.015 L1129.06 693.015 L1129.62 693.015 L1130.18 693.015 L1130.74 693.015 L1131.3 693.015 L1131.86 693.015 L1132.41 693.015 L1132.97 693.015 L1133.53 693.015 L1134.09 693.015 L1134.65 693.015 L1135.21 693.015 L1135.77 693.015 L1136.33 693.015 L1136.89 693.015 L1137.45 693.015 L1138.01 693.015 L1138.57 693.015 L1139.13 693.015 L1139.68 693.015 L1140.24 693.015 L1140.8 693.015 L1141.36 693.015 L1141.92 693.015 L1142.48 693.015 L1143.04 693.015 L1143.6 693.015 L1144.16 693.015 L1144.72 693.015 L1145.28 693.015 L1145.84 693.015 L1146.4 693.015 L1146.96 693.015 L1147.51 693.015 L1148.07 693.015 L1148.63 693.015 L1149.19 693.015 L1149.75 693.015 L1150.31 693.015 L1150.87 693.015 L1151.43 693.015 L1151.99 693.015 L1152.55 693.015 L1153.11 693.015 L1153.67 693.015 L1154.23 693.015 L1154.78 693.015 L1155.34 693.015 L1155.9 693.015 L1156.46 693.015 L1157.02 693.015 L1157.58 693.015 L1158.14 693.015 L1158.7 693.015 L1159.26 693.015 L1159.82 693.015 L1160.38 693.015 L1160.94 693.015 L1161.5 693.015 L1162.05 693.015 L1162.61 693.015 L1163.17 693.015 L1163.73 693.015 L1164.29 693.015 L1164.85 693.015 L1165.41 693.015 L1165.97 693.015 L1166.53 693.015 L1167.09 693.015 L1167.65 693.015 L1168.21 693.015 L1168.77 693.015 L1169.33 693.015 L1169.88 693.015 L1170.44 693.015 L1171 693.015 L1171.56 693.015 L1172.12 693.015 L1172.68 693.015 L1173.24 693.015 L1173.8 693.015 L1174.36 693.015 L1174.92 693.015 L1175.48 693.015 L1176.04 693.015 L1176.6 693.015 L1177.15 693.015 L1177.71 693.015 L1178.27 693.015 L1178.83 693.015 L1179.39 693.015 L1179.95 693.015 L1180.51 693.015 L1181.07 693.015 L1181.63 693.015 L1182.19 693.015 L1182.75 693.015 L1183.31 693.015 L1183.87 693.015 L1184.43 693.015 L1184.98 693.015 L1185.54 693.015 L1186.1 693.015 L1186.66 693.015 L1187.22 693.015 L1187.78 693.015 L1188.34 693.015 L1188.9 693.015 L1189.46 693.015 L1190.02 693.015 L1190.58 693.015 L1191.14 693.015 L1191.7 693.015 L1192.25 693.015 L1192.81 693.015 L1193.37 693.015 L1193.93 693.015 L1194.49 693.015 L1195.05 693.015 L1195.61 693.015 L1196.17 693.015 L1196.73 693.015 L1197.29 693.015 L1197.85 693.015 L1198.41 693.015 L1198.97 693.015 L1199.52 693.015 L1200.08 693.015 L1200.64 693.015 L1201.2 693.015 L1201.76 693.015 L1202.32 693.015 L1202.88 693.015 L1203.44 693.015 L1204 693.015 L1204.56 693.015 L1205.12 693.015 L1205.68 693.015 L1206.24 693.015 L1206.8 693.015 L1207.35 693.015 L1207.91 693.015 L1208.47 693.015 L1209.03 693.015 L1209.59 693.015 L1210.15 693.015 L1210.71 693.015 L1211.27 693.015 L1211.83 693.015 L1212.39 693.015 L1212.95 693.015 L1213.51 693.015 L1214.07 693.015 L1214.62 693.015 L1215.18 693.015 L1215.74 693.015 L1216.3 693.015 L1216.86 693.015 L1217.42 693.015 L1217.98 693.015 L1218.54 693.015 L1219.1 693.015 L1219.66 693.015 L1220.22 693.015 L1220.78 693.015 L1221.34 693.015 L1221.89 693.015 L1222.45 693.015 L1223.01 693.015 L1223.57 693.015 L1224.13 693.015 L1224.69 693.015 L1225.25 693.015 L1225.81 693.015 L1226.37 693.015 L1226.93 693.015 L1227.49 693.015 L1228.05 693.015 L1228.61 693.015 L1229.17 693.015 L1229.72 693.015 L1230.28 693.015 L1230.84 693.015 L1231.4 693.015 L1231.96 693.015 L1232.52 693.015 L1233.08 693.015 L1233.64 693.015 L1234.2 693.015 L1234.76 693.015 L1235.32 693.015 L1235.88 693.015 L1236.44 693.015 L1236.99 693.015 L1237.55 693.015 L1238.11 693.015 L1238.67 693.015 L1239.23 693.015 L1239.79 693.015 L1240.35 693.015 L1240.91 693.015 L1241.47 693.015 L1242.03 693.015 L1242.59 693.015 L1243.15 693.015 L1243.71 693.015 L1244.26 693.015 L1244.82 693.015 L1245.38 693.015 L1245.94 693.015 L1246.5 693.015 L1247.06 693.015 L1247.62 693.015 L1248.18 693.015 L1248.74 693.015 L1249.3 693.015 L1249.86 693.015 L1250.42 693.015 L1250.98 693.015 L1251.54 693.015 L1252.09 693.015 L1252.65 693.015 L1253.21 693.015 L1253.77 693.015 L1254.33 693.015 L1254.89 693.015 L1255.45 693.015 L1256.01 693.015 L1256.57 693.015 L1257.13 693.015 L1257.69 693.015 L1258.25 693.015 L1258.81 693.015 L1259.36 693.015 L1259.92 693.015 L1260.48 693.015 L1261.04 693.015 L1261.6 693.015 L1262.16 693.015 L1262.72 693.015 L1263.28 693.015 L1263.84 693.015 L1264.4 693.015 L1264.96 693.015 L1265.52 693.015 L1266.08 693.015 L1266.63 693.015 L1267.19 693.015 L1267.75 693.015 L1268.31 693.015 L1268.87 693.015 L1269.43 693.015 L1269.99 693.015 L1270.55 693.015 L1271.11 693.015 L1271.67 693.015 L1272.23 693.015 L1272.79 693.015 L1273.35 693.015 L1273.91 693.015 L1274.46 693.015 L1275.02 693.015 L1275.58 693.015 L1276.14 693.015 L1276.7 693.015 L1277.26 693.015 L1277.82 693.015 L1278.38 693.015 L1278.94 693.015 L1279.5 693.015 L1280.06 693.015 L1280.62 693.015 L1281.18 693.015 L1281.73 693.015 L1282.29 693.015 L1282.85 693.015 L1283.41 693.015 L1283.97 693.015 L1284.53 693.015 L1285.09 693.015 L1285.65 693.015 L1286.21 693.015 L1286.77 693.015 L1287.33 693.015 L1287.89 693.015 L1288.45 693.015 L1289 693.015 L1289.56 693.015 L1290.12 693.015 L1290.68 693.015 L1291.24 693.015 L1291.8 693.015 L1292.36 693.015 L1292.92 693.015 L1293.48 693.015 L1294.04 693.015 L1294.6 693.015 L1295.16 693.015 L1295.72 693.015 L1296.28 693.015 L1296.83 693.015 L1297.39 693.015 L1297.95 693.015 L1298.51 693.015 L1299.07 693.015 L1299.63 693.015 L1300.19 693.015 L1300.75 693.015 L1301.31 693.015 L1301.87 693.015 L1302.43 693.015 L1302.99 693.015 L1303.55 693.015 L1304.1 693.015 L1304.66 693.015 L1305.22 693.015 L1305.78 693.015 L1306.34 693.015 L1306.9 693.015 L1307.46 693.015 L1308.02 693.015 L1308.58 693.015 L1309.14 693.015 L1309.7 693.015 L1310.26 693.015 L1310.82 693.015 L1311.38 693.015 L1311.93 693.015 L1312.49 693.015 L1313.05 693.015 L1313.61 693.015 L1314.17 693.015 L1314.73 693.015 L1315.29 693.015 L1315.85 693.015 L1316.41 693.015 L1316.97 693.015 L1317.53 693.015 L1318.09 693.015 L1318.65 693.015 L1319.2 693.015 L1319.76 693.015 L1320.32 693.015 L1320.88 693.015 L1321.44 693.015 L1322 693.015 L1322.56 693.015 L1323.12 693.015 L1323.68 693.015 L1324.24 693.015 L1324.8 693.015 L1325.36 693.015 L1325.92 693.015 L1326.47 693.015 L1327.03 693.015 L1327.59 693.015 L1328.15 693.015 L1328.71 693.015 L1329.27 693.015 L1329.83 693.015 L1330.39 693.015 L1330.95 693.015 L1331.51 693.015 L1332.07 693.015 L1332.63 693.015 L1333.19 693.015 L1333.75 693.015 L1334.3 693.015 L1334.86 693.015 L1335.42 693.015 L1335.98 693.015 L1336.54 693.015 L1337.1 693.015 L1337.66 693.015 L1338.22 693.015 L1338.78 693.015 L1339.34 693.015 L1339.9 693.015 L1340.46 693.015 L1341.02 693.015 L1341.57 693.015 L1342.13 693.015 L1342.69 693.015 L1343.25 693.015 L1343.81 693.015 L1344.37 693.015 L1344.93 693.015 L1345.49 693.015 L1346.05 693.015 L1346.61 693.015 L1347.17 693.015 L1347.73 693.015 L1348.29 693.015 L1348.84 693.015 L1349.4 693.015 L1349.96 693.015 L1350.52 693.015 L1351.08 693.015 L1351.64 693.015 L1352.2 693.015 L1352.76 693.015 L1353.32 693.015 L1353.88 693.015 L1354.44 693.015 L1355 693.015 L1355.56 693.015 L1356.12 693.015 L1356.67 693.015 L1357.23 693.015 L1357.79 693.015 L1358.35 693.015 L1358.91 693.015 L1359.47 693.015 L1360.03 693.015 L1360.59 693.015 L1361.15 693.015 L1361.71 693.015 L1362.27 693.015 L1362.83 693.015 L1363.39 693.015 L1363.94 693.015 L1364.5 693.015 L1365.06 693.015 L1365.62 693.015 L1366.18 693.015 L1366.74 693.015 L1367.3 693.015 L1367.86 693.015 L1368.42 693.015 L1368.98 693.015 L1369.54 693.015 L1370.1 693.015 L1370.66 693.015 L1371.21 693.015 L1371.77 693.015 L1372.33 693.015 L1372.89 693.015 L1373.45 693.015 L1374.01 693.015 L1374.57 693.015 L1375.13 693.015 L1375.69 693.015 L1376.25 693.015 L1376.81 693.015 L1377.37 693.015 L1377.93 693.015 L1378.49 693.015 L1379.04 693.015 L1379.6 693.015 L1380.16 693.015 L1380.72 693.015 L1381.28 693.015 L1381.84 693.015 L1382.4 693.015 L1382.96 693.015 L1383.52 693.015 L1384.08 693.015 L1384.64 693.015 L1385.2 693.015 L1385.76 693.015 L1386.31 693.015 L1386.87 693.015 L1387.43 693.015 L1387.99 693.015 L1388.55 693.015 L1389.11 693.015 L1389.67 693.015 L1390.23 693.015 L1390.79 693.015 L1391.35 693.015 L1391.91 693.015 L1392.47 693.015 L1393.03 693.015 L1393.58 693.015 L1394.14 693.015 L1394.7 693.015 L1395.26 693.015 L1395.82 693.015 L1396.38 693.015 L1396.94 693.015 L1397.5 693.015 L1398.06 693.015 L1398.62 693.015 L1399.18 693.015 L1399.74 693.015 L1400.3 693.015 L1400.86 693.015 L1401.41 693.015 L1401.97 693.015 L1402.53 693.015 L1403.09 693.015 L1403.65 693.015 L1404.21 693.015 L1404.77 693.015 L1405.33 693.015 L1405.89 693.015 L1406.45 693.015 L1407.01 693.015 L1407.57 693.015 L1408.13 693.015 L1408.68 693.015 L1409.24 693.015 L1409.8 693.015 L1410.36 693.015 L1410.92 693.015 L1411.48 693.015 L1412.04 693.015 L1412.6 693.015 L1413.16 693.015 L1413.72 693.015 L1414.28 693.015 L1414.84 693.015 L1415.4 693.015 L1415.95 693.015 L1416.51 693.015 L1417.07 693.015 L1417.63 693.015 L1418.19 693.015 L1418.75 693.015 L1419.31 693.015 L1419.87 693.015 L1420.43 693.015 L1420.99 693.015 L1421.55 693.015 L1422.11 693.015 L1422.67 693.015 L1423.23 693.015 L1423.78 693.015 L1424.34 693.015 L1424.9 693.015 L1425.46 693.015 L1426.02 693.015 L1426.58 693.015 L1427.14 693.015 L1427.7 693.015 L1428.26 693.015 L1428.82 693.015 L1429.38 693.015 L1429.94 693.015 L1430.5 693.015 L1431.05 693.015 L1431.61 693.015 L1432.17 693.015 L1432.73 693.015 L1433.29 693.015 L1433.85 693.015 L1434.41 693.015 L1434.97 693.015 L1435.53 693.015 L1436.09 693.015 L1436.65 693.015 L1437.21 693.015 L1437.77 693.015 L1438.33 693.015 L1438.88 693.015 L1439.44 693.015 L1440 693.015 L1440.56 693.015 L1441.12 693.015 L1441.68 693.015 L1442.24 693.015 L1442.8 693.015 L1443.36 693.015 L1443.92 693.015 L1444.48 693.015 L1445.04 693.015 L1445.6 693.015 L1446.15 693.015 L1446.71 693.015 L1447.27 693.015 L1447.83 693.015 L1448.39 693.015 L1448.95 693.015 L1449.51 693.015 L1450.07 693.015 L1450.63 693.015 L1451.19 693.015 L1451.75 693.015 L1452.31 693.015 L1452.87 693.015 L1453.42 693.015 L1453.98 693.015 L1454.54 693.015 L1455.1 693.015 L1455.66 693.015 L1456.22 693.015 L1456.78 693.015 L1457.34 693.015 L1457.9 693.015 L1458.46 693.015 L1459.02 693.015 L1459.58 693.015 L1460.14 693.015 L1460.7 693.015 L1461.25 693.015 L1461.81 693.015 L1462.37 693.015 L1462.93 693.015 L1463.49 693.015 L1464.05 693.015 L1464.61 693.015 L1465.17 693.015 L1465.73 693.015 L1466.29 693.015 L1466.85 693.015 L1467.41 693.015 L1467.97 693.015 L1468.52 693.015 L1469.08 693.015 L1469.64 693.015 L1470.2 693.015 L1470.76 693.015 L1471.32 693.015 L1471.88 693.015 L1472.44 693.015 L1473 693.015 L1473.56 693.015 L1474.12 693.015 L1474.68 693.015 L1475.24 693.015 L1475.79 693.015 L1476.35 693.015 L1476.91 693.015 L1477.47 693.015 L1478.03 693.015 L1478.59 693.015 L1479.15 693.015 L1479.71 693.015 L1480.27 693.015 L1480.83 693.015 L1481.39 693.015 L1481.95 693.015 L1482.51 693.015 L1483.07 693.015 L1483.62 693.015 L1484.18 693.015 L1484.74 693.015 L1485.3 693.015 L1485.86 693.015 L1486.42 693.015 L1486.98 693.015 L1487.54 693.015 L1488.1 693.015 L1488.66 693.015 L1489.22 693.015 L1489.78 693.015 L1490.34 693.015 L1490.89 693.015 L1491.45 693.015 L1492.01 693.015 L1492.57 693.015 L1493.13 693.015 L1493.69 693.015 L1494.25 693.015 L1494.81 693.015 L1495.37 693.015 L1495.93 693.015 L1496.49 693.015 L1497.05 693.015 L1497.61 693.015 L1498.16 693.015 L1498.72 693.015 L1499.28 693.015 L1499.84 693.015 L1500.4 693.015 L1500.96 693.015 L1501.52 693.015 L1502.08 693.015 L1502.64 693.015 L1503.2 693.015 L1503.76 693.015 L1504.32 693.015 L1504.88 693.015 L1505.44 693.015 L1505.99 693.015 L1506.55 693.015 L1507.11 693.015 L1507.67 693.015 L1508.23 693.015 L1508.79 693.015 L1509.35 693.015 L1509.91 693.015 L1510.47 693.015 L1511.03 693.015 L1511.59 693.015 L1512.15 693.015 L1512.71 693.015 L1513.26 693.015 L1513.82 693.015 L1514.38 693.015 L1514.94 693.015 L1515.5 693.015 L1516.06 693.015 L1516.62 693.015 L1517.18 693.015 L1517.74 693.015 L1518.3 693.015 L1518.86 693.015 L1519.42 693.015 L1519.98 693.015 L1520.53 693.015 L1521.09 693.015 L1521.65 693.015 L1522.21 693.015 L1522.77 693.015 L1523.33 693.015 L1523.89 693.015 L1524.45 693.015 L1525.01 693.015 L1525.57 693.015 L1526.13 693.015 L1526.69 693.015 L1527.25 693.015 L1527.81 693.015 L1528.36 693.015 L1528.92 693.015 L1529.48 693.015 L1530.04 693.015 L1530.6 693.015 L1531.16 693.015 L1531.72 693.015 L1532.28 693.015 L1532.84 693.015 L1533.4 693.015 L1533.96 693.015 L1534.52 693.015 L1535.08 693.015 L1535.63 693.015 L1536.19 693.015 L1536.75 693.015 L1537.31 693.015 L1537.87 693.015 L1538.43 693.015 L1538.99 693.015 L1539.55 693.015 L1540.11 693.015 L1540.67 693.015 L1541.23 693.015 L1541.79 693.015 L1542.35 693.015 L1542.9 693.015 L1543.46 693.015 L1544.02 693.015 L1544.58 693.015 L1545.14 693.015 L1545.7 693.015 L1546.26 693.015 L1546.82 693.015 L1547.38 693.015 L1547.94 693.015 L1548.5 693.015 L1549.06 693.015 L1549.62 693.015 L1550.18 693.015 L1550.73 693.015 L1551.29 693.015 L1551.85 693.015 L1552.41 693.015 L1552.97 693.015 L1553.53 693.015 L1554.09 693.015 L1554.65 693.015 L1555.21 693.015 L1555.77 693.015 L1556.33 693.015 L1556.89 693.015 L1557.45 693.015 L1558 693.015 L1558.56 693.015 L1559.12 693.015 L1559.68 693.015 L1560.24 693.015 L1560.8 693.015 L1561.36 693.015 L1561.92 693.015 L1562.48 693.015 L1563.04 693.015 L1563.6 693.015 L1564.16 693.015 L1564.72 693.015 L1565.28 693.015 L1565.83 693.015 L1566.39 693.015 L1566.95 693.015 L1567.51 693.015 L1568.07 693.015 L1568.63 693.015 L1569.19 693.015 L1569.75 693.015 L1570.31 693.015 L1570.87 693.015 L1571.43 693.015 L1571.99 693.015 L1572.55 693.015 L1573.1 693.015 L1573.66 693.015 L1574.22 693.015 L1574.78 693.015 L1575.34 693.015 L1575.9 693.015 L1576.46 693.015 L1577.02 693.015 L1577.58 693.015 L1578.14 693.015 L1578.7 693.015 L1579.26 693.015 L1579.82 693.015 L1580.37 693.015 L1580.93 693.015 L1581.49 693.015 L1582.05 693.015 L1582.61 693.015 L1583.17 693.015 L1583.73 693.015 L1584.29 693.015 L1584.85 693.015 L1585.41 693.015 L1585.97 693.015 L1586.53 693.015 L1587.09 693.015 L1587.65 693.015 L1588.2 693.015 L1588.76 693.015 L1589.32 693.015 L1589.88 693.015 L1590.44 693.015 L1591 693.015 L1591.56 693.015 L1592.12 693.015 L1592.68 693.015 L1593.24 693.015 L1593.8 693.015 L1594.36 693.015 L1594.92 693.015 L1595.47 693.015 L1596.03 693.015 L1596.59 693.015 L1597.15 693.015 L1597.71 693.015 L1598.27 693.015 L1598.83 693.015 L1599.39 693.015 L1599.95 693.015 L1600.51 693.015 L1601.07 693.015 L1601.63 693.015 L1602.19 693.015 L1602.74 693.015 L1603.3 693.015 L1603.86 693.015 L1604.42 693.015 L1604.98 693.015 L1605.54 693.015 L1606.1 693.015 L1606.66 693.015 L1607.22 693.015 L1607.78 693.015 L1608.34 693.015 L1608.9 693.015 L1609.46 693.015 L1610.02 693.015 L1610.57 693.015 L1611.13 693.015 L1611.69 693.015 L1612.25 693.015 L1612.81 693.015 L1613.37 693.015 L1613.93 693.015 L1614.49 693.015 L1615.05 693.015 L1615.61 693.015 L1616.17 693.015 L1616.73 693.015 L1617.29 693.015 L1617.84 693.015 L1618.4 693.015 L1618.96 693.015 L1619.52 693.015 L1620.08 693.015 L1620.64 693.015 L1621.2 693.015 L1621.76 693.015 L1622.32 693.015 L1622.88 693.015 L1623.44 693.015 L1624 693.015 L1624.56 693.015 L1625.11 693.015 L1625.67 693.015 L1626.23 693.015 L1626.79 693.015 L1627.35 693.015 L1627.91 693.015 L1628.47 693.015 L1629.03 693.015 L1629.59 693.015 L1630.15 693.015 L1630.71 693.015 L1631.27 693.015 L1631.83 693.015 L1632.39 693.015 L1632.94 693.015 L1633.5 693.015 L1634.06 693.015 L1634.62 693.015 L1635.18 693.015 L1635.74 693.015 L1636.3 693.015 L1636.86 693.015 L1637.42 693.015 L1637.98 693.015 L1638.54 693.015 L1639.1 693.015 L1639.66 693.015 L1640.21 693.015 L1640.77 693.015 L1641.33 693.015 L1641.89 693.015 L1642.45 693.015 L1643.01 693.015 L1643.57 693.015 L1644.13 693.015 L1644.69 693.015 L1645.25 693.015 L1645.81 693.015 L1646.37 693.015 L1646.93 693.015 L1647.48 693.015 L1648.04 693.015 L1648.6 693.015 L1649.16 693.015 L1649.72 693.015 L1650.28 693.015 L1650.84 693.015 L1651.4 693.015 L1651.96 693.015 L1652.52 693.015 L1653.08 693.015 L1653.64 693.015 L1654.2 693.015 L1654.76 693.015 L1655.31 693.015 L1655.87 693.015 L1656.43 693.015 L1656.99 693.015 L1657.55 693.015 L1658.11 693.015 L1658.67 693.015 L1659.23 693.015 L1659.79 693.015 L1660.35 693.015 L1660.91 693.015 L1661.47 693.015 L1662.03 693.015 L1662.58 693.015 L1663.14 693.015 L1663.7 693.015 L1664.26 693.015 L1664.82 693.015 L1665.38 693.015 L1665.94 693.015 L1666.5 693.015 L1667.06 693.015 L1667.62 693.015 L1668.18 693.015 L1668.74 693.015 L1669.3 693.015 L1669.85 693.015 L1670.41 693.015 L1670.97 693.015 L1671.53 693.015 L1672.09 693.015 L1672.65 693.015 L1673.21 693.015 L1673.77 693.015 L1674.33 693.015 L1674.89 693.015 L1675.45 693.015 L1676.01 693.015 L1676.57 693.015 L1677.13 693.015 L1677.68 693.015 L1678.24 693.015 L1678.8 693.015 L1679.36 693.015 L1679.92 693.015 L1680.48 693.015 L1681.04 693.015 L1681.6 693.015 L1682.16 693.015 L1682.72 693.015 L1683.28 693.015 L1683.84 693.015 L1684.4 693.015 L1684.95 693.015 L1685.51 693.015 L1686.07 693.015 L1686.63 693.015 L1687.19 693.015 L1687.75 693.015 L1688.31 693.015 L1688.87 693.015 L1689.43 693.015 L1689.99 693.015 L1690.55 693.015 L1691.11 693.015 L1691.67 693.015 L1692.23 693.015 L1692.78 693.015 L1693.34 693.015 L1693.9 693.015 L1694.46 693.015 L1695.02 693.015 L1695.58 693.015 L1696.14 693.015 L1696.7 693.015 L1697.26 693.015 L1697.82 693.015 L1698.38 693.015 L1698.94 693.015 L1699.5 693.015 L1700.05 693.015 L1700.61 693.015 L1701.17 693.015 L1701.73 693.015 L1702.29 693.015 L1702.85 693.015 L1703.41 693.015 L1703.97 693.015 L1704.53 693.015 L1705.09 693.015 L1705.65 693.015 L1706.21 693.015 L1706.77 693.015 L1707.32 693.015 L1707.88 693.015 L1708.44 693.015 L1709 693.015 L1709.56 693.015 L1710.12 693.015 L1710.68 693.015 L1711.24 693.015 L1711.8 693.015 L1712.36 693.015 L1712.92 693.015 L1713.48 693.015 L1714.04 693.015 L1714.6 693.015 L1715.15 693.015 L1715.71 693.015 L1716.27 693.015 L1716.83 693.015 L1717.39 693.015 L1717.95 693.015 L1718.51 693.015 L1719.07 693.015 L1719.63 693.015 L1720.19 693.015 L1720.75 693.015 L1721.31 693.015 L1721.87 693.015 L1722.42 693.015 L1722.98 693.015 L1723.54 693.015 L1724.1 693.015 L1724.66 693.015 L1725.22 693.015 L1725.78 693.015 L1726.34 693.015 L1726.9 693.015 L1727.46 693.015 L1728.02 693.015 L1728.58 693.015 L1729.14 693.015 L1729.69 693.015 L1730.25 693.015 L1730.81 693.015 L1731.37 693.015 L1731.93 693.015 L1732.49 693.015 L1733.05 693.015 L1733.61 693.015 L1734.17 693.015 L1734.73 693.015 L1735.29 693.015 L1735.85 693.015 L1736.41 693.015 L1736.97 693.015 L1737.52 693.015 L1738.08 693.015 L1738.64 693.015 L1739.2 693.015 L1739.76 693.015 L1740.32 693.015 L1740.88 693.015 L1741.44 693.015 L1742 693.015 L1742.56 693.015 L1743.12 693.015 L1743.68 693.015 L1744.24 693.015 L1744.79 693.015 L1745.35 693.015 L1745.91 693.015 L1746.47 693.015 L1747.03 693.015 L1747.59 693.015 L1748.15 693.015 L1748.71 693.015 L1749.27 693.015 L1749.83 693.015 L1750.39 693.015 L1750.95 693.015 L1751.51 693.015 L1752.06 693.015 L1752.62 693.015 L1753.18 693.015 L1753.74 693.015 L1754.3 693.015 L1754.86 693.015 L1755.42 693.015 L1755.98 693.015 L1756.54 693.015 L1757.1 693.015 L1757.66 693.015 L1758.22 693.015 L1758.78 693.015 L1759.34 693.015 L1759.89 693.015 L1760.45 693.015 L1761.01 693.015 L1761.57 693.015 L1762.13 693.015 L1762.69 693.015 L1763.25 693.015 L1763.81 693.015 L1764.37 693.015 L1764.93 693.015 L1765.49 693.015 L1766.05 693.015 L1766.61 693.015 L1767.16 693.015 L1767.72 693.015 L1768.28 693.015 L1768.84 693.015 L1769.4 693.015 L1769.96 693.015 L1770.52 693.015 L1771.08 693.015 L1771.64 693.015 L1772.2 693.015 L1772.76 693.015 L1773.32 693.015 L1773.88 693.015 L1774.43 693.015 L1774.99 693.015 L1775.55 693.015 L1776.11 693.015 L1776.67 693.015 L1777.23 693.015 L1777.79 693.015 L1778.35 693.015 L1778.91 693.015 L1779.47 693.015 L1780.03 693.015 L1780.59 693.015 L1781.15 693.015 L1781.71 693.015 L1782.26 693.015 L1782.82 693.015 L1783.38 693.015 L1783.94 693.015 L1784.5 693.015 L1785.06 693.015 L1785.62 693.015 L1786.18 693.015 L1786.74 693.015 L1787.3 693.015 L1787.86 693.015 L1788.42 693.015 L1788.98 693.015 L1789.53 693.015 L1790.09 693.015 L1790.65 693.015 L1791.21 693.015 L1791.77 693.015 L1792.33 693.015 L1792.89 693.015 L1793.45 693.015 L1794.01 693.015 L1794.57 693.015 L1795.13 693.015 L1795.69 693.015 L1796.25 693.015 L1796.8 693.015 L1797.36 693.015 L1797.92 693.015 L1798.48 693.015 L1799.04 693.015 L1799.6 693.015 L1800.16 693.015 L1800.72 693.015 L1801.28 693.015 L1801.84 693.015 L1802.4 693.015 L1802.96 693.015 L1803.52 693.015 L1804.08 693.015 L1804.63 693.015 L1805.19 693.015 L1805.75 693.015 L1806.31 693.015 L1806.87 693.015 L1807.43 693.015 L1807.99 693.015 L1808.55 693.015 L1809.11 693.015 L1809.67 693.015 L1810.23 693.015 L1810.79 693.015 L1811.35 693.015 L1811.9 693.015 L1812.46 693.015 L1813.02 693.015 L1813.58 693.015 L1814.14 693.015 L1814.7 693.015 L1815.26 693.015 L1815.82 693.015 L1816.38 693.015 L1816.94 693.015 L1817.5 693.015 L1818.06 693.015 L1818.62 693.015 L1819.18 693.015 L1819.73 693.015 L1820.29 693.015 L1820.85 693.015 L1821.41 693.015 L1821.97 693.015 L1822.53 693.015 L1823.09 693.015 L1823.65 693.015 L1824.21 693.015 L1824.77 693.015 L1825.33 693.015 L1825.89 693.015 L1826.45 693.015 L1827 693.015 L1827.56 693.015 L1828.12 693.015 L1828.68 693.015 L1829.24 693.015 L1829.8 693.015 L1830.36 693.015 L1830.92 693.015 L1831.48 693.015 L1832.04 693.015 L1832.6 693.015 L1833.16 693.015 L1833.72 693.015 L1834.27 693.015 L1834.83 693.015 L1835.39 693.015 L1835.95 693.015 L1836.51 693.015 L1837.07 693.015 L1837.63 693.015 L1838.19 693.015 L1838.19 683.104 L1837.63 683.104 L1837.07 683.104 L1836.51 683.104 L1835.95 683.104 L1835.39 683.104 L1834.83 683.104 L1834.27 683.104 L1833.72 683.104 L1833.16 683.104 L1832.6 683.104 L1832.04 683.104 L1831.48 683.104 L1830.92 683.104 L1830.36 683.104 L1829.8 683.104 L1829.24 683.104 L1828.68 683.104 L1828.12 683.104 L1827.56 683.104 L1827 683.104 L1826.45 683.104 L1825.89 683.104 L1825.33 683.104 L1824.77 683.104 L1824.21 683.104 L1823.65 683.104 L1823.09 683.104 L1822.53 683.104 L1821.97 683.104 L1821.41 683.104 L1820.85 683.104 L1820.29 683.104 L1819.73 683.104 L1819.18 683.104 L1818.62 683.104 L1818.06 683.104 L1817.5 683.104 L1816.94 683.104 L1816.38 683.104 L1815.82 683.104 L1815.26 683.104 L1814.7 683.104 L1814.14 683.104 L1813.58 683.104 L1813.02 683.104 L1812.46 683.104 L1811.9 683.104 L1811.35 683.104 L1810.79 683.104 L1810.23 683.104 L1809.67 683.104 L1809.11 683.104 L1808.55 683.104 L1807.99 683.104 L1807.43 683.104 L1806.87 683.104 L1806.31 683.104 L1805.75 683.104 L1805.19 683.104 L1804.63 683.104 L1804.08 683.104 L1803.52 683.104 L1802.96 683.104 L1802.4 683.104 L1801.84 683.104 L1801.28 683.104 L1800.72 683.104 L1800.16 683.104 L1799.6 683.104 L1799.04 683.104 L1798.48 683.104 L1797.92 683.104 L1797.36 683.104 L1796.8 683.104 L1796.25 683.104 L1795.69 683.104 L1795.13 683.104 L1794.57 683.104 L1794.01 683.104 L1793.45 683.104 L1792.89 683.104 L1792.33 683.104 L1791.77 683.104 L1791.21 683.104 L1790.65 683.104 L1790.09 683.104 L1789.53 683.104 L1788.98 683.104 L1788.42 683.104 L1787.86 683.104 L1787.3 683.104 L1786.74 683.104 L1786.18 683.104 L1785.62 683.104 L1785.06 683.104 L1784.5 683.104 L1783.94 683.104 L1783.38 683.104 L1782.82 683.104 L1782.26 683.104 L1781.71 683.104 L1781.15 683.104 L1780.59 683.104 L1780.03 683.104 L1779.47 683.104 L1778.91 683.104 L1778.35 683.104 L1777.79 683.104 L1777.23 683.104 L1776.67 683.104 L1776.11 683.104 L1775.55 683.104 L1774.99 683.104 L1774.43 683.104 L1773.88 683.104 L1773.32 683.104 L1772.76 683.104 L1772.2 683.104 L1771.64 683.104 L1771.08 683.104 L1770.52 683.104 L1769.96 683.104 L1769.4 683.104 L1768.84 683.104 L1768.28 683.104 L1767.72 683.104 L1767.16 683.104 L1766.61 683.104 L1766.05 683.104 L1765.49 683.104 L1764.93 683.104 L1764.37 683.104 L1763.81 683.104 L1763.25 683.104 L1762.69 683.104 L1762.13 683.104 L1761.57 683.104 L1761.01 683.104 L1760.45 683.104 L1759.89 683.104 L1759.34 683.104 L1758.78 683.104 L1758.22 683.104 L1757.66 683.104 L1757.1 683.104 L1756.54 683.104 L1755.98 683.104 L1755.42 683.104 L1754.86 683.104 L1754.3 683.104 L1753.74 683.104 L1753.18 683.104 L1752.62 683.104 L1752.06 683.104 L1751.51 683.104 L1750.95 683.104 L1750.39 683.104 L1749.83 683.104 L1749.27 683.104 L1748.71 683.104 L1748.15 683.104 L1747.59 683.104 L1747.03 683.104 L1746.47 683.104 L1745.91 683.104 L1745.35 683.104 L1744.79 683.104 L1744.24 683.104 L1743.68 683.104 L1743.12 683.104 L1742.56 683.104 L1742 683.104 L1741.44 683.104 L1740.88 683.104 L1740.32 683.104 L1739.76 683.104 L1739.2 683.104 L1738.64 683.104 L1738.08 683.104 L1737.52 683.104 L1736.97 683.104 L1736.41 683.104 L1735.85 683.104 L1735.29 683.104 L1734.73 683.104 L1734.17 683.104 L1733.61 683.104 L1733.05 683.104 L1732.49 683.104 L1731.93 683.104 L1731.37 683.104 L1730.81 683.104 L1730.25 683.104 L1729.69 683.104 L1729.14 683.104 L1728.58 683.104 L1728.02 683.104 L1727.46 683.104 L1726.9 683.104 L1726.34 683.104 L1725.78 683.104 L1725.22 683.104 L1724.66 683.104 L1724.1 683.104 L1723.54 683.104 L1722.98 683.104 L1722.42 683.104 L1721.87 683.104 L1721.31 683.104 L1720.75 683.104 L1720.19 683.104 L1719.63 683.104 L1719.07 683.104 L1718.51 683.104 L1717.95 683.104 L1717.39 683.104 L1716.83 683.104 L1716.27 683.104 L1715.71 683.104 L1715.15 683.104 L1714.6 683.104 L1714.04 683.104 L1713.48 683.104 L1712.92 683.104 L1712.36 683.104 L1711.8 683.104 L1711.24 683.104 L1710.68 683.104 L1710.12 683.104 L1709.56 683.104 L1709 683.104 L1708.44 683.104 L1707.88 683.104 L1707.32 683.104 L1706.77 683.104 L1706.21 683.104 L1705.65 683.104 L1705.09 683.104 L1704.53 683.104 L1703.97 683.104 L1703.41 683.104 L1702.85 683.104 L1702.29 683.104 L1701.73 683.104 L1701.17 683.104 L1700.61 683.104 L1700.05 683.104 L1699.5 683.104 L1698.94 683.104 L1698.38 683.104 L1697.82 683.104 L1697.26 683.104 L1696.7 683.104 L1696.14 683.104 L1695.58 683.104 L1695.02 683.104 L1694.46 683.104 L1693.9 683.104 L1693.34 683.104 L1692.78 683.104 L1692.23 683.104 L1691.67 683.104 L1691.11 683.104 L1690.55 683.104 L1689.99 683.104 L1689.43 683.104 L1688.87 683.104 L1688.31 683.104 L1687.75 683.104 L1687.19 683.104 L1686.63 683.104 L1686.07 683.104 L1685.51 683.104 L1684.95 683.104 L1684.4 683.104 L1683.84 683.104 L1683.28 683.104 L1682.72 683.104 L1682.16 683.104 L1681.6 683.104 L1681.04 683.104 L1680.48 683.104 L1679.92 683.104 L1679.36 683.104 L1678.8 683.104 L1678.24 683.104 L1677.68 683.104 L1677.13 683.104 L1676.57 683.104 L1676.01 683.104 L1675.45 683.104 L1674.89 683.104 L1674.33 683.104 L1673.77 683.104 L1673.21 683.104 L1672.65 683.104 L1672.09 683.104 L1671.53 683.104 L1670.97 683.104 L1670.41 683.104 L1669.85 683.104 L1669.3 683.104 L1668.74 683.104 L1668.18 683.104 L1667.62 683.104 L1667.06 683.104 L1666.5 683.104 L1665.94 683.104 L1665.38 683.104 L1664.82 683.104 L1664.26 683.104 L1663.7 683.104 L1663.14 683.104 L1662.58 683.104 L1662.03 683.104 L1661.47 683.104 L1660.91 683.104 L1660.35 683.104 L1659.79 683.104 L1659.23 683.104 L1658.67 683.104 L1658.11 683.104 L1657.55 683.104 L1656.99 683.104 L1656.43 683.104 L1655.87 683.104 L1655.31 683.104 L1654.76 683.104 L1654.2 683.104 L1653.64 683.104 L1653.08 683.104 L1652.52 683.104 L1651.96 683.104 L1651.4 683.104 L1650.84 683.104 L1650.28 683.104 L1649.72 683.104 L1649.16 683.104 L1648.6 683.104 L1648.04 683.104 L1647.48 683.104 L1646.93 683.104 L1646.37 683.104 L1645.81 683.104 L1645.25 683.104 L1644.69 683.104 L1644.13 683.104 L1643.57 683.104 L1643.01 683.104 L1642.45 683.104 L1641.89 683.104 L1641.33 683.104 L1640.77 683.104 L1640.21 683.104 L1639.66 683.104 L1639.1 683.104 L1638.54 683.104 L1637.98 683.104 L1637.42 683.104 L1636.86 683.104 L1636.3 683.104 L1635.74 683.104 L1635.18 683.104 L1634.62 683.104 L1634.06 683.104 L1633.5 683.104 L1632.94 683.104 L1632.39 683.104 L1631.83 683.104 L1631.27 683.104 L1630.71 683.104 L1630.15 683.104 L1629.59 683.104 L1629.03 683.104 L1628.47 683.104 L1627.91 683.104 L1627.35 683.104 L1626.79 683.104 L1626.23 683.104 L1625.67 683.104 L1625.11 683.104 L1624.56 683.104 L1624 683.104 L1623.44 683.104 L1622.88 683.104 L1622.32 683.104 L1621.76 683.104 L1621.2 683.104 L1620.64 683.104 L1620.08 683.104 L1619.52 683.104 L1618.96 683.104 L1618.4 683.104 L1617.84 683.104 L1617.29 683.104 L1616.73 683.104 L1616.17 683.104 L1615.61 683.104 L1615.05 683.104 L1614.49 683.104 L1613.93 683.104 L1613.37 683.104 L1612.81 683.104 L1612.25 683.104 L1611.69 683.104 L1611.13 683.104 L1610.57 683.104 L1610.02 683.104 L1609.46 683.104 L1608.9 683.104 L1608.34 683.104 L1607.78 683.104 L1607.22 683.104 L1606.66 683.104 L1606.1 683.104 L1605.54 683.104 L1604.98 683.104 L1604.42 683.104 L1603.86 683.104 L1603.3 683.104 L1602.74 683.104 L1602.19 683.104 L1601.63 683.104 L1601.07 683.104 L1600.51 683.104 L1599.95 683.104 L1599.39 683.104 L1598.83 683.104 L1598.27 683.104 L1597.71 683.104 L1597.15 683.104 L1596.59 683.104 L1596.03 683.104 L1595.47 683.104 L1594.92 683.104 L1594.36 683.104 L1593.8 683.104 L1593.24 683.104 L1592.68 683.104 L1592.12 683.104 L1591.56 683.104 L1591 683.104 L1590.44 683.104 L1589.88 683.104 L1589.32 683.104 L1588.76 683.104 L1588.2 683.104 L1587.65 683.104 L1587.09 683.104 L1586.53 683.104 L1585.97 683.104 L1585.41 683.104 L1584.85 683.104 L1584.29 683.104 L1583.73 683.104 L1583.17 683.104 L1582.61 683.104 L1582.05 683.104 L1581.49 683.104 L1580.93 683.104 L1580.37 683.104 L1579.82 683.104 L1579.26 683.104 L1578.7 683.104 L1578.14 683.104 L1577.58 683.104 L1577.02 683.104 L1576.46 683.104 L1575.9 683.104 L1575.34 683.104 L1574.78 683.104 L1574.22 683.104 L1573.66 683.104 L1573.1 683.104 L1572.55 683.104 L1571.99 683.104 L1571.43 683.104 L1570.87 683.104 L1570.31 683.104 L1569.75 683.104 L1569.19 683.104 L1568.63 683.104 L1568.07 683.104 L1567.51 683.104 L1566.95 683.104 L1566.39 683.104 L1565.83 683.104 L1565.28 683.104 L1564.72 683.104 L1564.16 683.104 L1563.6 683.104 L1563.04 683.104 L1562.48 683.104 L1561.92 683.104 L1561.36 683.104 L1560.8 683.104 L1560.24 683.104 L1559.68 683.104 L1559.12 683.104 L1558.56 683.104 L1558 683.104 L1557.45 683.104 L1556.89 683.104 L1556.33 683.104 L1555.77 683.104 L1555.21 683.104 L1554.65 683.104 L1554.09 683.104 L1553.53 683.104 L1552.97 683.104 L1552.41 683.104 L1551.85 683.104 L1551.29 683.104 L1550.73 683.104 L1550.18 683.104 L1549.62 683.104 L1549.06 683.104 L1548.5 683.104 L1547.94 683.104 L1547.38 683.104 L1546.82 683.104 L1546.26 683.104 L1545.7 683.104 L1545.14 683.104 L1544.58 683.104 L1544.02 683.104 L1543.46 683.104 L1542.9 683.104 L1542.35 683.104 L1541.79 683.104 L1541.23 683.104 L1540.67 683.104 L1540.11 683.104 L1539.55 683.104 L1538.99 683.104 L1538.43 683.104 L1537.87 683.104 L1537.31 683.104 L1536.75 683.104 L1536.19 683.104 L1535.63 683.104 L1535.08 683.104 L1534.52 683.104 L1533.96 683.104 L1533.4 683.104 L1532.84 683.104 L1532.28 683.104 L1531.72 683.104 L1531.16 683.104 L1530.6 683.104 L1530.04 683.104 L1529.48 683.104 L1528.92 683.104 L1528.36 683.104 L1527.81 683.104 L1527.25 683.104 L1526.69 683.104 L1526.13 683.104 L1525.57 683.104 L1525.01 683.104 L1524.45 683.104 L1523.89 683.104 L1523.33 683.104 L1522.77 683.104 L1522.21 683.104 L1521.65 683.104 L1521.09 683.104 L1520.53 683.104 L1519.98 683.104 L1519.42 683.104 L1518.86 683.104 L1518.3 683.104 L1517.74 683.104 L1517.18 683.104 L1516.62 683.104 L1516.06 683.104 L1515.5 683.104 L1514.94 683.104 L1514.38 683.104 L1513.82 683.104 L1513.26 683.104 L1512.71 683.104 L1512.15 683.104 L1511.59 683.104 L1511.03 683.104 L1510.47 683.104 L1509.91 683.104 L1509.35 683.104 L1508.79 683.104 L1508.23 683.104 L1507.67 683.104 L1507.11 683.104 L1506.55 683.104 L1505.99 683.104 L1505.44 683.104 L1504.88 683.104 L1504.32 683.104 L1503.76 683.104 L1503.2 683.104 L1502.64 683.104 L1502.08 683.104 L1501.52 683.104 L1500.96 683.104 L1500.4 683.104 L1499.84 683.104 L1499.28 683.104 L1498.72 683.104 L1498.16 683.104 L1497.61 683.104 L1497.05 683.104 L1496.49 683.104 L1495.93 683.104 L1495.37 683.104 L1494.81 683.104 L1494.25 683.104 L1493.69 683.104 L1493.13 683.104 L1492.57 683.104 L1492.01 683.104 L1491.45 683.104 L1490.89 683.104 L1490.34 683.104 L1489.78 683.104 L1489.22 683.104 L1488.66 683.104 L1488.1 683.104 L1487.54 683.104 L1486.98 683.104 L1486.42 683.104 L1485.86 683.104 L1485.3 683.104 L1484.74 683.104 L1484.18 683.104 L1483.62 683.104 L1483.07 683.104 L1482.51 683.104 L1481.95 683.104 L1481.39 683.104 L1480.83 683.104 L1480.27 683.104 L1479.71 683.104 L1479.15 683.104 L1478.59 683.104 L1478.03 683.104 L1477.47 683.104 L1476.91 683.104 L1476.35 683.104 L1475.79 683.104 L1475.24 683.104 L1474.68 683.104 L1474.12 683.104 L1473.56 683.104 L1473 683.104 L1472.44 683.104 L1471.88 683.104 L1471.32 683.104 L1470.76 683.104 L1470.2 683.104 L1469.64 683.104 L1469.08 683.104 L1468.52 683.104 L1467.97 683.104 L1467.41 683.104 L1466.85 683.104 L1466.29 683.104 L1465.73 683.104 L1465.17 683.104 L1464.61 683.104 L1464.05 683.104 L1463.49 683.104 L1462.93 683.104 L1462.37 683.104 L1461.81 683.104 L1461.25 683.104 L1460.7 683.104 L1460.14 683.104 L1459.58 683.104 L1459.02 683.104 L1458.46 683.104 L1457.9 683.104 L1457.34 683.104 L1456.78 683.104 L1456.22 683.104 L1455.66 683.104 L1455.1 683.104 L1454.54 683.104 L1453.98 683.104 L1453.42 683.104 L1452.87 683.104 L1452.31 683.104 L1451.75 683.104 L1451.19 683.104 L1450.63 683.104 L1450.07 683.104 L1449.51 683.104 L1448.95 683.104 L1448.39 683.104 L1447.83 683.104 L1447.27 683.104 L1446.71 683.104 L1446.15 683.104 L1445.6 683.104 L1445.04 683.104 L1444.48 683.104 L1443.92 683.104 L1443.36 683.104 L1442.8 683.104 L1442.24 683.104 L1441.68 683.104 L1441.12 683.104 L1440.56 683.104 L1440 683.104 L1439.44 683.104 L1438.88 683.104 L1438.33 683.104 L1437.77 683.104 L1437.21 683.104 L1436.65 683.104 L1436.09 683.104 L1435.53 683.104 L1434.97 683.104 L1434.41 683.104 L1433.85 683.104 L1433.29 683.104 L1432.73 683.104 L1432.17 683.104 L1431.61 683.104 L1431.05 683.104 L1430.5 683.104 L1429.94 683.104 L1429.38 683.104 L1428.82 683.104 L1428.26 683.104 L1427.7 683.104 L1427.14 683.104 L1426.58 683.104 L1426.02 683.104 L1425.46 683.104 L1424.9 683.104 L1424.34 683.104 L1423.78 683.104 L1423.23 683.104 L1422.67 683.104 L1422.11 683.104 L1421.55 683.104 L1420.99 683.104 L1420.43 683.104 L1419.87 683.104 L1419.31 683.104 L1418.75 683.104 L1418.19 683.104 L1417.63 683.104 L1417.07 683.104 L1416.51 683.104 L1415.95 683.104 L1415.4 683.104 L1414.84 683.104 L1414.28 683.104 L1413.72 683.104 L1413.16 683.104 L1412.6 683.104 L1412.04 683.104 L1411.48 683.104 L1410.92 683.104 L1410.36 683.104 L1409.8 683.104 L1409.24 683.104 L1408.68 683.104 L1408.13 683.104 L1407.57 683.104 L1407.01 683.104 L1406.45 683.104 L1405.89 683.104 L1405.33 683.104 L1404.77 683.104 L1404.21 683.104 L1403.65 683.104 L1403.09 683.104 L1402.53 683.104 L1401.97 683.104 L1401.41 683.104 L1400.86 683.104 L1400.3 683.104 L1399.74 683.104 L1399.18 683.104 L1398.62 683.104 L1398.06 683.104 L1397.5 683.104 L1396.94 683.104 L1396.38 683.104 L1395.82 683.104 L1395.26 683.104 L1394.7 683.104 L1394.14 683.104 L1393.58 683.104 L1393.03 683.104 L1392.47 683.104 L1391.91 683.104 L1391.35 683.104 L1390.79 683.104 L1390.23 683.104 L1389.67 683.104 L1389.11 683.104 L1388.55 683.104 L1387.99 683.104 L1387.43 683.104 L1386.87 683.104 L1386.31 683.104 L1385.76 683.104 L1385.2 683.104 L1384.64 683.104 L1384.08 683.104 L1383.52 683.104 L1382.96 683.104 L1382.4 683.104 L1381.84 683.104 L1381.28 683.104 L1380.72 683.104 L1380.16 683.104 L1379.6 683.104 L1379.04 683.104 L1378.49 683.104 L1377.93 683.104 L1377.37 683.104 L1376.81 683.104 L1376.25 683.104 L1375.69 683.104 L1375.13 683.104 L1374.57 683.104 L1374.01 683.104 L1373.45 683.104 L1372.89 683.104 L1372.33 683.104 L1371.77 683.104 L1371.21 683.104 L1370.66 683.104 L1370.1 683.104 L1369.54 683.104 L1368.98 683.104 L1368.42 683.104 L1367.86 683.104 L1367.3 683.104 L1366.74 683.104 L1366.18 683.104 L1365.62 683.104 L1365.06 683.104 L1364.5 683.104 L1363.94 683.104 L1363.39 683.104 L1362.83 683.104 L1362.27 683.104 L1361.71 683.104 L1361.15 683.104 L1360.59 683.104 L1360.03 683.104 L1359.47 683.104 L1358.91 683.104 L1358.35 683.104 L1357.79 683.104 L1357.23 683.104 L1356.67 683.104 L1356.12 683.104 L1355.56 683.104 L1355 683.104 L1354.44 683.104 L1353.88 683.104 L1353.32 683.104 L1352.76 683.104 L1352.2 683.104 L1351.64 683.104 L1351.08 683.104 L1350.52 683.104 L1349.96 683.104 L1349.4 683.104 L1348.84 683.104 L1348.29 683.104 L1347.73 683.104 L1347.17 683.104 L1346.61 683.104 L1346.05 683.104 L1345.49 683.104 L1344.93 683.104 L1344.37 683.104 L1343.81 683.104 L1343.25 683.104 L1342.69 683.104 L1342.13 683.104 L1341.57 683.104 L1341.02 683.104 L1340.46 683.104 L1339.9 683.104 L1339.34 683.104 L1338.78 683.104 L1338.22 683.104 L1337.66 683.104 L1337.1 683.104 L1336.54 683.104 L1335.98 683.104 L1335.42 683.104 L1334.86 683.104 L1334.3 683.104 L1333.75 683.104 L1333.19 683.104 L1332.63 683.104 L1332.07 683.104 L1331.51 683.104 L1330.95 683.104 L1330.39 683.104 L1329.83 683.104 L1329.27 683.104 L1328.71 683.104 L1328.15 683.104 L1327.59 683.104 L1327.03 683.104 L1326.47 683.104 L1325.92 683.104 L1325.36 683.104 L1324.8 683.104 L1324.24 683.104 L1323.68 683.104 L1323.12 683.104 L1322.56 683.104 L1322 683.104 L1321.44 683.104 L1320.88 683.104 L1320.32 683.104 L1319.76 683.104 L1319.2 683.104 L1318.65 683.104 L1318.09 683.104 L1317.53 683.104 L1316.97 683.104 L1316.41 683.104 L1315.85 683.104 L1315.29 683.104 L1314.73 683.104 L1314.17 683.104 L1313.61 683.104 L1313.05 683.104 L1312.49 683.104 L1311.93 683.104 L1311.38 683.104 L1310.82 683.104 L1310.26 683.104 L1309.7 683.104 L1309.14 683.104 L1308.58 683.104 L1308.02 683.104 L1307.46 683.104 L1306.9 683.104 L1306.34 683.104 L1305.78 683.104 L1305.22 683.104 L1304.66 683.104 L1304.1 683.104 L1303.55 683.104 L1302.99 683.104 L1302.43 683.104 L1301.87 683.104 L1301.31 683.104 L1300.75 683.104 L1300.19 683.104 L1299.63 683.104 L1299.07 683.104 L1298.51 683.104 L1297.95 683.104 L1297.39 683.104 L1296.83 683.104 L1296.28 683.104 L1295.72 683.104 L1295.16 683.104 L1294.6 683.104 L1294.04 683.104 L1293.48 683.104 L1292.92 683.104 L1292.36 683.104 L1291.8 683.104 L1291.24 683.104 L1290.68 683.104 L1290.12 683.104 L1289.56 683.104 L1289 683.104 L1288.45 683.104 L1287.89 683.104 L1287.33 683.104 L1286.77 683.104 L1286.21 683.104 L1285.65 683.104 L1285.09 683.104 L1284.53 683.104 L1283.97 683.104 L1283.41 683.104 L1282.85 683.104 L1282.29 683.104 L1281.73 683.104 L1281.18 683.104 L1280.62 683.104 L1280.06 683.104 L1279.5 683.104 L1278.94 683.104 L1278.38 683.104 L1277.82 683.104 L1277.26 683.104 L1276.7 683.104 L1276.14 683.104 L1275.58 683.104 L1275.02 683.104 L1274.46 683.104 L1273.91 683.104 L1273.35 683.104 L1272.79 683.104 L1272.23 683.104 L1271.67 683.104 L1271.11 683.104 L1270.55 683.104 L1269.99 683.104 L1269.43 683.104 L1268.87 683.104 L1268.31 683.104 L1267.75 683.104 L1267.19 683.104 L1266.63 683.104 L1266.08 683.104 L1265.52 683.104 L1264.96 683.104 L1264.4 683.104 L1263.84 683.104 L1263.28 683.104 L1262.72 683.104 L1262.16 683.104 L1261.6 683.104 L1261.04 683.104 L1260.48 683.104 L1259.92 683.104 L1259.36 683.104 L1258.81 683.104 L1258.25 683.104 L1257.69 683.104 L1257.13 683.104 L1256.57 683.104 L1256.01 683.104 L1255.45 683.104 L1254.89 683.104 L1254.33 683.104 L1253.77 683.104 L1253.21 683.104 L1252.65 683.104 L1252.09 683.104 L1251.54 683.104 L1250.98 683.104 L1250.42 683.104 L1249.86 683.104 L1249.3 683.104 L1248.74 683.104 L1248.18 683.104 L1247.62 683.104 L1247.06 683.104 L1246.5 683.104 L1245.94 683.104 L1245.38 683.104 L1244.82 683.104 L1244.26 683.104 L1243.71 683.104 L1243.15 683.104 L1242.59 683.104 L1242.03 683.104 L1241.47 683.104 L1240.91 683.104 L1240.35 683.104 L1239.79 683.104 L1239.23 683.104 L1238.67 683.104 L1238.11 683.104 L1237.55 683.104 L1236.99 683.104 L1236.44 683.104 L1235.88 683.104 L1235.32 683.104 L1234.76 683.104 L1234.2 683.104 L1233.64 683.104 L1233.08 683.104 L1232.52 683.104 L1231.96 683.104 L1231.4 683.104 L1230.84 683.104 L1230.28 683.104 L1229.72 683.104 L1229.17 683.104 L1228.61 683.104 L1228.05 683.104 L1227.49 683.104 L1226.93 683.104 L1226.37 683.104 L1225.81 683.104 L1225.25 683.104 L1224.69 683.104 L1224.13 683.104 L1223.57 683.104 L1223.01 683.104 L1222.45 683.104 L1221.89 683.104 L1221.34 683.104 L1220.78 683.104 L1220.22 683.104 L1219.66 683.104 L1219.1 683.104 L1218.54 683.104 L1217.98 683.104 L1217.42 683.104 L1216.86 683.104 L1216.3 683.104 L1215.74 683.104 L1215.18 683.104 L1214.62 683.104 L1214.07 683.104 L1213.51 683.104 L1212.95 683.104 L1212.39 683.104 L1211.83 683.104 L1211.27 683.104 L1210.71 683.104 L1210.15 683.104 L1209.59 683.104 L1209.03 683.104 L1208.47 683.104 L1207.91 683.104 L1207.35 683.104 L1206.8 683.104 L1206.24 683.104 L1205.68 683.104 L1205.12 683.104 L1204.56 683.104 L1204 683.104 L1203.44 683.104 L1202.88 683.104 L1202.32 683.104 L1201.76 683.104 L1201.2 683.104 L1200.64 683.104 L1200.08 683.104 L1199.52 683.104 L1198.97 683.104 L1198.41 683.104 L1197.85 683.104 L1197.29 683.104 L1196.73 683.104 L1196.17 683.104 L1195.61 683.104 L1195.05 683.104 L1194.49 683.104 L1193.93 683.104 L1193.37 683.104 L1192.81 683.104 L1192.25 683.104 L1191.7 683.104 L1191.14 683.104 L1190.58 683.104 L1190.02 683.104 L1189.46 683.104 L1188.9 683.104 L1188.34 683.104 L1187.78 683.104 L1187.22 683.104 L1186.66 683.104 L1186.1 683.104 L1185.54 683.104 L1184.98 683.104 L1184.43 683.104 L1183.87 683.104 L1183.31 683.104 L1182.75 683.104 L1182.19 683.104 L1181.63 683.104 L1181.07 683.104 L1180.51 683.104 L1179.95 683.104 L1179.39 683.104 L1178.83 683.104 L1178.27 683.104 L1177.71 683.104 L1177.15 683.104 L1176.6 683.104 L1176.04 683.104 L1175.48 683.104 L1174.92 683.104 L1174.36 683.104 L1173.8 683.104 L1173.24 683.104 L1172.68 683.104 L1172.12 683.104 L1171.56 683.104 L1171 683.104 L1170.44 683.104 L1169.88 683.104 L1169.33 683.104 L1168.77 683.104 L1168.21 683.104 L1167.65 683.104 L1167.09 683.104 L1166.53 683.104 L1165.97 683.104 L1165.41 683.104 L1164.85 683.104 L1164.29 683.104 L1163.73 683.104 L1163.17 683.104 L1162.61 683.104 L1162.05 683.104 L1161.5 683.104 L1160.94 683.104 L1160.38 683.104 L1159.82 683.104 L1159.26 683.104 L1158.7 683.104 L1158.14 683.104 L1157.58 683.104 L1157.02 683.104 L1156.46 683.104 L1155.9 683.104 L1155.34 683.104 L1154.78 683.104 L1154.23 683.104 L1153.67 683.104 L1153.11 683.104 L1152.55 683.104 L1151.99 683.104 L1151.43 683.104 L1150.87 683.104 L1150.31 683.104 L1149.75 683.104 L1149.19 683.104 L1148.63 683.104 L1148.07 683.104 L1147.51 683.104 L1146.96 683.104 L1146.4 683.104 L1145.84 683.104 L1145.28 683.104 L1144.72 683.104 L1144.16 683.104 L1143.6 683.104 L1143.04 683.104 L1142.48 683.104 L1141.92 683.104 L1141.36 683.104 L1140.8 683.104 L1140.24 683.104 L1139.68 683.104 L1139.13 683.104 L1138.57 683.104 L1138.01 683.104 L1137.45 683.104 L1136.89 683.104 L1136.33 683.104 L1135.77 683.104 L1135.21 683.104 L1134.65 683.104 L1134.09 683.104 L1133.53 683.104 L1132.97 683.104 L1132.41 683.104 L1131.86 683.104 L1131.3 683.104 L1130.74 683.104 L1130.18 683.104 L1129.62 683.104 L1129.06 683.104 L1128.5 683.104 L1127.94 683.104 L1127.38 683.104 L1126.82 683.104 L1126.26 683.104 L1125.7 683.104 L1125.14 683.104 L1124.59 683.104 L1124.03 683.104 L1123.47 683.104 L1122.91 683.104 L1122.35 683.104 L1121.79 683.104 L1121.23 683.104 L1120.67 683.104 L1120.11 683.104 L1119.55 683.104 L1118.99 683.104 L1118.43 683.104 L1117.87 683.104 L1117.31 683.104 L1116.76 683.104 L1116.2 683.104 L1115.64 683.104 L1115.08 683.104 L1114.52 683.104 L1113.96 683.104 L1113.4 683.104 L1112.84 683.104 L1112.28 683.104 L1111.72 683.104 L1111.16 683.104 L1110.6 683.104 L1110.04 683.104 L1109.49 683.104 L1108.93 683.104 L1108.37 683.104 L1107.81 683.104 L1107.25 683.104 L1106.69 683.104 L1106.13 683.104 L1105.57 683.104 L1105.01 683.104 L1104.45 683.104 L1103.89 683.104 L1103.33 683.104 L1102.77 683.104 L1102.22 683.104 L1101.66 683.104 L1101.1 683.104 L1100.54 683.104 L1099.98 683.104 L1099.42 683.104 L1098.86 683.104 L1098.3 683.104 L1097.74 683.104 L1097.18 683.104 L1096.62 683.104 L1096.06 683.104 L1095.5 683.104 L1094.94 683.104 L1094.39 683.104 L1093.83 683.104 L1093.27 683.104 L1092.71 683.104 L1092.15 683.104 L1091.59 683.104 L1091.03 683.104 L1090.47 683.104 L1089.91 683.104 L1089.35 683.104 L1088.79 683.104 L1088.23 683.104 L1087.67 683.104 L1087.12 683.104 L1086.56 683.104 L1086 683.104 L1085.44 683.104 L1084.88 683.104 L1084.32 683.104 L1083.76 683.104 L1083.2 683.104 L1082.64 683.104 L1082.08 683.104 L1081.52 683.104 L1080.96 683.104 L1080.4 683.104 L1079.85 683.104 L1079.29 683.104 L1078.73 683.104 L1078.17 683.104 L1077.61 683.104 L1077.05 683.104 L1076.49 683.104 L1075.93 683.104 L1075.37 683.104 L1074.81 683.104 L1074.25 683.104 L1073.69 683.104 L1073.13 683.104 L1072.57 683.104 L1072.02 683.104 L1071.46 683.104 L1070.9 683.104 L1070.34 683.104 L1069.78 683.104 L1069.22 683.104 L1068.66 683.104 L1068.1 683.104 L1067.54 683.104 L1066.98 683.104 L1066.42 683.104 L1065.86 683.104 L1065.3 683.104 L1064.75 683.104 L1064.19 683.104 L1063.63 683.104 L1063.07 683.104 L1062.51 683.104 L1061.95 683.104 L1061.39 683.104 L1060.83 683.104 L1060.27 683.104 L1059.71 683.104 L1059.15 683.104 L1058.59 683.104 L1058.03 683.104 L1057.48 683.104 L1056.92 683.104 L1056.36 683.104 L1055.8 683.104 L1055.24 683.104 L1054.68 683.104 L1054.12 683.104 L1053.56 683.104 L1053 683.104 L1052.44 683.104 L1051.88 683.104 L1051.32 683.104 L1050.76 683.104 L1050.2 683.104 L1049.65 683.104 L1049.09 683.104 L1048.53 683.104 L1047.97 683.104 L1047.41 683.104 L1046.85 683.104 L1046.29 683.104 L1045.73 683.104 L1045.17 683.104 L1044.61 683.104 L1044.05 683.104 L1043.49 683.104 L1042.93 683.104 L1042.38 683.104 L1041.82 683.104 L1041.26 683.104 L1040.7 683.104 L1040.14 683.104 L1039.58 683.104 L1039.02 683.104 L1038.46 683.104 L1037.9 683.104 L1037.34 683.104 L1036.78 683.104 L1036.22 683.104 L1035.66 683.104 L1035.1 683.104 L1034.55 683.104 L1033.99 683.104 L1033.43 683.104 L1032.87 683.104 L1032.31 683.104 L1031.75 683.104 L1031.19 683.104 L1030.63 683.104 L1030.07 683.104 L1029.51 683.104 L1028.95 683.104 L1028.39 683.104 L1027.83 683.104 L1027.28 683.104 L1026.72 683.104 L1026.16 683.104 L1025.6 683.104 L1025.04 683.104 L1024.48 683.104 L1023.92 683.104 L1023.36 683.104 L1022.8 683.104 L1022.24 683.104 L1021.68 683.104 L1021.12 683.104 L1020.56 683.104 L1020.01 683.104 L1019.45 683.104 L1018.89 683.104 L1018.33 683.104 L1017.77 683.104 L1017.21 683.104 L1016.65 683.104 L1016.09 683.104 L1015.53 683.104 L1014.97 683.104 L1014.41 683.104 L1013.85 683.104 L1013.29 683.104 L1012.73 683.104 L1012.18 683.104 L1011.62 683.104 L1011.06 683.104 L1010.5 683.104 L1009.94 683.104 L1009.38 683.104 L1008.82 683.104 L1008.26 683.104 L1007.7 683.104 L1007.14 683.104 L1006.58 683.104 L1006.02 683.104 L1005.46 683.104 L1004.91 683.104 L1004.35 683.104 L1003.79 683.104 L1003.23 683.104 L1002.67 683.104 L1002.11 683.104 L1001.55 683.104 L1000.99 683.104 L1000.43 683.104 L999.872 683.104 L999.313 683.104 L998.754 683.104 L998.194 683.104 L997.635 683.104 L997.076 683.104 L996.517 683.104 L995.957 683.104 L995.398 683.104 L994.839 683.104 L994.28 683.104 L993.72 683.104 L993.161 683.104 L992.602 683.104 L992.043 683.104 L991.483 683.104 L990.924 683.104 L990.365 683.104 L989.806 683.104 L989.246 683.104 L988.687 683.104 L988.128 683.104 L987.569 683.104 L987.009 683.104 L986.45 683.104 L985.891 683.104 L985.332 683.104 L984.772 683.104 L984.213 683.104 L983.654 683.104 L983.095 683.104 L982.535 683.104 L981.976 683.104 L981.417 683.104 L980.858 683.104 L980.298 683.104 L979.739 683.104 L979.18 683.104 L978.621 683.104 L978.061 683.104 L977.502 683.104 L976.943 683.104 L976.384 683.104 L975.824 683.104 L975.265 683.104 L974.706 683.104 L974.147 683.104 L973.587 683.104 L973.028 683.104 L972.469 683.104 L971.91 683.104 L971.35 683.104 L970.791 683.104 L970.232 683.104 L969.673 683.104 L969.113 683.104 L968.554 683.104 L967.995 683.104 L967.436 683.104 L966.876 683.104 L966.317 683.104 L965.758 683.104 L965.199 683.104 L964.639 683.104 L964.08 683.104 L963.521 683.104 L962.962 683.104 L962.402 683.104 L961.843 683.104 L961.284 683.104 L960.725 683.104 L960.165 683.104 L959.606 683.104 L959.047 683.104 L958.488 683.104 L957.928 683.104 L957.369 683.104 L956.81 683.104 L956.251 683.104 L955.691 683.104 L955.132 683.104 L954.573 683.104 L954.014 683.104 L953.454 683.104 L952.895 683.104 L952.336 683.104 L951.777 683.104 L951.217 683.104 L950.658 683.104 L950.099 683.104 L949.54 683.104 L948.98 683.104 L948.421 683.104 L947.862 683.104 L947.303 683.104 L946.743 683.104 L946.184 683.104 L945.625 683.104 L945.066 683.104 L944.506 683.104 L943.947 683.104 L943.388 683.104 L942.829 683.104 L942.269 683.104 L941.71 683.104 L941.151 683.104 L940.592 683.104 L940.032 683.104 L939.473 683.104 L938.914 683.104 L938.355 683.104 L937.795 683.104 L937.236 683.104 L936.677 683.104 L936.118 683.104 L935.558 683.104 L934.999 683.104 L934.44 683.104 L933.881 683.104 L933.321 683.104 L932.762 683.104 L932.203 683.104 L931.644 683.104 L931.084 683.104 L930.525 683.104 L929.966 683.104 L929.406 683.104 L928.847 683.104 L928.288 683.104 L927.729 683.104 L927.169 683.104 L926.61 683.104 L926.051 683.104 L925.492 683.104 L924.932 683.104 L924.373 683.104 L923.814 683.104 L923.255 683.104 L922.695 683.104 L922.136 683.104 L921.577 683.104 L921.018 683.104 L920.458 683.104 L919.899 683.104 L919.34 683.104 L918.781 683.104 L918.221 683.104 L917.662 683.104 L917.103 683.104 L916.544 683.104 L915.984 683.104 L915.425 683.104 L914.866 683.104 L914.307 683.104 L913.747 683.104 L913.188 683.104 L912.629 683.104 L912.07 683.104 L911.51 683.104 L910.951 683.104 L910.392 683.104 L909.833 683.104 L909.273 683.104 L908.714 683.104 L908.155 683.104 L907.596 683.104 L907.036 683.104 L906.477 683.104 L905.918 683.104 L905.359 683.104 L904.799 683.104 L904.24 683.104 L903.681 683.104 L903.122 683.104 L902.562 683.104 L902.003 683.104 L901.444 683.104 L900.885 683.104 L900.325 683.104 L899.766 683.104 L899.207 683.104 L898.648 683.104 L898.088 683.104 L897.529 683.104 L896.97 683.104 L896.411 683.104 L895.851 683.104 L895.292 683.104 L894.733 683.104 L894.174 683.104 L893.614 683.104 L893.055 683.104 L892.496 683.104 L891.937 683.104 L891.377 683.104 L890.818 683.104 L890.259 683.104 L889.7 683.104 L889.14 683.104 L888.581 683.104 L888.022 683.104 L887.463 683.104 L886.903 683.104 L886.344 683.104 L885.785 683.104 L885.226 683.104 L884.666 683.104 L884.107 683.104 L883.548 683.104 L882.989 683.104 L882.429 683.104 L881.87 683.104 L881.311 683.104 L880.752 683.104 L880.192 683.104 L879.633 683.104 L879.074 683.104 L878.515 683.104 L877.955 683.104 L877.396 683.104 L876.837 683.104 L876.278 683.104 L875.718 683.104 L875.159 683.104 L874.6 683.104 L874.041 683.104 L873.481 683.104 L872.922 683.104 L872.363 683.104 L871.804 683.104 L871.244 683.104 L870.685 683.104 L870.126 683.104 L869.567 683.104 L869.007 683.104 L868.448 683.104 L867.889 683.104 L867.33 683.104 L866.77 683.104 L866.211 683.104 L865.652 683.104 L865.093 683.104 L864.533 683.104 L863.974 683.104 L863.415 683.104 L862.856 683.104 L862.296 683.104 L861.737 683.104 L861.178 683.104 L860.619 683.104 L860.059 683.104 L859.5 683.104 L858.941 683.104 L858.382 683.104 L857.822 683.104 L857.263 683.104 L856.704 683.104 L856.145 683.104 L855.585 683.104 L855.026 683.104 L854.467 683.104 L853.908 683.104 L853.348 683.104 L852.789 683.104 L852.23 683.104 L851.671 683.104 L851.111 683.104 L850.552 683.104 L849.993 683.104 L849.434 683.104 L848.874 683.104 L848.315 683.104 L847.756 683.104 L847.197 683.104 L846.637 683.104 L846.078 683.104 L845.519 683.104 L844.96 683.104 L844.4 683.104 L843.841 683.104 L843.282 683.104 L842.723 683.104 L842.163 683.104 L841.604 683.104 L841.045 683.104 L840.486 683.104 L839.926 683.104 L839.367 683.104 L838.808 683.104 L838.249 683.104 L837.689 683.104 L837.13 683.104 L836.571 683.104 L836.012 683.104 L835.452 683.104 L834.893 683.104 L834.334 683.104 L833.775 683.104 L833.215 683.104 L832.656 683.104 L832.097 683.104 L831.538 683.104 L830.978 683.104 L830.419 683.104 L829.86 683.104 L829.301 683.104 L828.741 683.104 L828.182 683.104 L827.623 683.104 L827.064 683.104 L826.504 683.104 L825.945 683.104 L825.386 683.104 L824.827 683.104 L824.267 683.104 L823.708 683.104 L823.149 683.104 L822.59 683.104 L822.03 683.104 L821.471 683.104 L820.912 683.104 L820.353 683.104 L819.793 683.104 L819.234 683.104 L818.675 683.104 L818.116 683.104 L817.556 683.104 L816.997 683.104 L816.438 683.104 L815.879 683.104 L815.319 683.104 L814.76 683.104 L814.201 683.104 L813.642 683.104 L813.082 683.104 L812.523 683.104 L811.964 683.104 L811.405 683.104 L810.845 683.104 L810.286 683.104 L809.727 683.104 L809.168 683.104 L808.608 683.104 L808.049 683.104 L807.49 683.104 L806.931 683.104 L806.371 683.104 L805.812 683.104 L805.253 683.104 L804.693 683.104 L804.134 683.104 L803.575 683.104 L803.016 683.104 L802.456 683.104 L801.897 683.104 L801.338 683.104 L800.779 683.104 L800.219 683.104 L799.66 683.104 L799.101 683.104 L798.542 683.104 L797.982 683.104 L797.423 683.104 L796.864 683.104 L796.305 683.104 L795.745 683.104 L795.186 683.104 L794.627 683.104 L794.068 683.104 L793.508 683.104 L792.949 683.104 L792.39 683.104 L791.831 683.104 L791.271 683.104 L790.712 683.104 L790.153 683.104 L789.594 683.104 L789.034 683.104 L788.475 683.104 L787.916 683.104 L787.357 683.104 L786.797 683.104 L786.238 683.104 L785.679 683.104 L785.12 683.104 L784.56 683.104 L784.001 683.104 L783.442 683.104 L782.883 683.104 L782.323 683.104 L781.764 683.104 L781.205 683.104 L780.646 683.104 L780.086 683.104 L779.527 683.104 L778.968 683.104 L778.409 683.104 L777.849 683.104 L777.29 683.104 L776.731 683.104 L776.172 683.104 L775.612 683.104 L775.053 683.104 L774.494 683.104 L773.935 683.104 L773.375 683.104 L772.816 683.104 L772.257 683.104 L771.698 683.104 L771.138 683.104 L770.579 683.104 L770.02 683.104 L769.461 683.104 L768.901 683.104 L768.342 683.104 L767.783 683.104 L767.224 683.104 L766.664 683.104 L766.105 683.104 L765.546 683.104 L764.987 683.104 L764.427 683.104 L763.868 683.104 L763.309 683.104 L762.75 683.104 L762.19 683.104 L761.631 683.104 L761.072 683.104 L760.513 683.104 L759.953 683.104 L759.394 683.104 L758.835 683.104 L758.276 683.104 L757.716 683.104 L757.157 683.104 L756.598 683.104 L756.039 683.104 L755.479 683.104 L754.92 683.104 L754.361 683.104 L753.802 683.104 L753.242 683.104 L752.683 683.104 L752.124 683.104 L751.565 683.104 L751.005 683.104 L750.446 683.104 L749.887 683.104 L749.328 683.104 L748.768 683.104 L748.209 683.104 L747.65 683.104 L747.091 683.104 L746.531 683.104 L745.972 683.104 L745.413 683.104 L744.854 683.104 L744.294 683.104 L743.735 683.104 L743.176 683.104 L742.617 683.104 L742.057 683.104 L741.498 683.104 L740.939 683.104 L740.38 683.104 L739.82 683.104 L739.261 683.104 L738.702 683.104 L738.143 683.104 L737.583 683.104 L737.024 683.104 L736.465 683.104 L735.906 683.104 L735.346 683.104 L734.787 683.104 L734.228 683.104 L733.669 683.104 L733.109 683.104 L732.55 683.104 L731.991 683.104 L731.432 683.104 L730.872 683.104 L730.313 683.104 L729.754 683.104 L729.195 683.104 L728.635 683.104 L728.076 683.104 L727.517 683.104 L726.958 683.104 L726.398 683.104 L725.839 683.104 L725.28 683.104 L724.721 683.104 L724.161 683.104 L723.602 683.104 L723.043 683.104 L722.484 683.104 L721.924 683.104 L721.365 683.104 L720.806 683.104 L720.247 683.104  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.059 720.806,688.059 721.365,688.059 721.924,688.059 722.484,688.059 723.043,688.059 723.602,688.059 724.161,688.059 724.721,688.059 725.28,688.059 725.839,688.059 726.398,688.059 726.958,688.059 727.517,688.059 728.076,688.059 728.635,688.059 729.195,688.059 729.754,688.059 730.313,688.059 730.872,688.059 731.432,688.059 731.991,688.059 732.55,688.059 733.109,688.059 733.669,688.059 734.228,688.059 734.787,688.059 735.346,688.059 735.906,688.059 736.465,688.059 737.024,688.059 737.583,688.059 738.143,688.059 738.702,688.059 739.261,688.059 739.82,688.059 740.38,688.059 740.939,688.059 741.498,688.059 742.057,688.059 742.617,688.059 743.176,688.059 743.735,688.059 744.294,688.059 744.854,688.059 745.413,688.059 745.972,688.059 746.531,688.059 747.091,688.059 747.65,688.059 748.209,688.059 748.768,688.059 749.328,688.059 749.887,688.059 750.446,688.059 751.005,688.059 751.565,688.059 752.124,688.059 752.683,688.059 753.242,688.059 753.802,688.059 754.361,688.059 754.92,688.059 755.479,688.059 756.039,688.059 756.598,688.059 757.157,688.059 757.716,688.059 758.276,688.059 758.835,688.059 759.394,688.059 759.953,688.059 760.513,688.059 761.072,688.059 761.631,688.059 762.19,688.059 762.75,688.059 763.309,688.059 763.868,688.059 764.427,688.059 764.987,688.059 765.546,688.059 766.105,688.059 766.664,688.059 767.224,688.059 767.783,688.059 768.342,688.059 768.901,688.059 769.461,688.059 770.02,688.059 770.579,688.059 771.138,688.059 771.698,688.059 772.257,688.059 772.816,688.059 773.375,688.059 773.935,688.059 774.494,688.059 775.053,688.059 775.612,688.059 776.172,688.059 776.731,688.059 777.29,688.059 777.849,688.059 778.409,688.059 778.968,688.059 779.527,688.059 780.086,688.059 780.646,688.059 781.205,688.059 781.764,688.059 782.323,688.059 782.883,688.059 783.442,688.059 784.001,688.059 784.56,688.059 785.12,688.059 785.679,688.059 786.238,688.059 786.797,688.059 787.357,688.059 787.916,688.059 788.475,688.059 789.034,688.059 789.594,688.059 790.153,688.059 790.712,688.059 791.271,688.059 791.831,688.059 792.39,688.059 792.949,688.059 793.508,688.059 794.068,688.059 794.627,688.059 795.186,688.059 795.745,688.059 796.305,688.059 796.864,688.059 797.423,688.059 797.982,688.059 798.542,688.059 799.101,688.059 799.66,688.059 800.219,688.059 800.779,688.059 801.338,688.059 801.897,688.059 802.456,688.059 803.016,688.059 803.575,688.059 804.134,688.059 804.693,688.059 805.253,688.059 805.812,688.059 806.371,688.059 806.931,688.059 807.49,688.059 808.049,688.059 808.608,688.059 809.168,688.059 809.727,688.059 810.286,688.059 810.845,688.059 811.405,688.059 811.964,688.059 812.523,688.059 813.082,688.059 813.642,688.059 814.201,688.059 814.76,688.059 815.319,688.059 815.879,688.059 816.438,688.059 816.997,688.059 817.556,688.059 818.116,688.059 818.675,688.059 819.234,688.059 819.793,688.059 820.353,688.059 820.912,688.059 821.471,688.059 822.03,688.059 822.59,688.059 823.149,688.059 823.708,688.059 824.267,688.059 824.827,688.059 825.386,688.059 825.945,688.059 826.504,688.059 827.064,688.059 827.623,688.059 828.182,688.059 828.741,688.059 829.301,688.059 829.86,688.059 830.419,688.059 830.978,688.059 831.538,688.059 832.097,688.059 832.656,688.059 833.215,688.059 833.775,688.059 834.334,688.059 834.893,688.059 835.452,688.059 836.012,688.059 836.571,688.059 837.13,688.059 837.689,688.059 838.249,688.059 838.808,688.059 839.367,688.059 839.926,688.059 840.486,688.059 841.045,688.059 841.604,688.059 842.163,688.059 842.723,688.059 843.282,688.059 843.841,688.059 844.4,688.059 844.96,688.059 845.519,688.059 846.078,688.059 846.637,688.059 847.197,688.059 847.756,688.059 848.315,688.059 848.874,688.059 849.434,688.059 849.993,688.059 850.552,688.059 851.111,688.059 851.671,688.059 852.23,688.059 852.789,688.059 853.348,688.059 853.908,688.059 854.467,688.059 855.026,688.059 855.585,688.059 856.145,688.059 856.704,688.059 857.263,688.059 857.822,688.059 858.382,688.059 858.941,688.059 859.5,688.059 860.059,688.059 860.619,688.059 861.178,688.059 861.737,688.059 862.296,688.059 862.856,688.059 863.415,688.059 863.974,688.059 864.533,688.059 865.093,688.059 865.652,688.059 866.211,688.059 866.77,688.059 867.33,688.059 867.889,688.059 868.448,688.059 869.007,688.059 869.567,688.059 870.126,688.059 870.685,688.059 871.244,688.059 871.804,688.059 872.363,688.059 872.922,688.059 873.481,688.059 874.041,688.059 874.6,688.059 875.159,688.059 875.718,688.059 876.278,688.059 876.837,688.059 877.396,688.059 877.955,688.059 878.515,688.059 879.074,688.059 879.633,688.059 880.192,688.059 880.752,688.059 881.311,688.059 881.87,688.059 882.429,688.059 882.989,688.059 883.548,688.059 884.107,688.059 884.666,688.059 885.226,688.059 885.785,688.059 886.344,688.059 886.903,688.059 887.463,688.059 888.022,688.059 888.581,688.059 889.14,688.059 889.7,688.059 890.259,688.059 890.818,688.059 891.377,688.059 891.937,688.059 892.496,688.059 893.055,688.059 893.614,688.059 894.174,688.059 894.733,688.059 895.292,688.059 895.851,688.059 896.411,688.059 896.97,688.059 897.529,688.059 898.088,688.059 898.648,688.059 899.207,688.059 899.766,688.059 900.325,688.059 900.885,688.059 901.444,688.059 902.003,688.059 902.562,688.059 903.122,688.059 903.681,688.059 904.24,688.059 904.799,688.059 905.359,688.059 905.918,688.059 906.477,688.059 907.036,688.059 907.596,688.059 908.155,688.059 908.714,688.059 909.273,688.059 909.833,688.059 910.392,688.059 910.951,688.059 911.51,688.059 912.07,688.059 912.629,688.059 913.188,688.059 913.747,688.059 914.307,688.059 914.866,688.059 915.425,688.059 915.984,688.059 916.544,688.059 917.103,688.059 917.662,688.059 918.221,688.059 918.781,688.059 919.34,688.059 919.899,688.059 920.458,688.059 921.018,688.059 921.577,688.059 922.136,688.059 922.695,688.059 923.255,688.059 923.814,688.059 924.373,688.059 924.932,688.059 925.492,688.059 926.051,688.059 926.61,688.059 927.169,688.059 927.729,688.059 928.288,688.059 928.847,688.059 929.406,688.059 929.966,688.059 930.525,688.059 931.084,688.059 931.644,688.059 932.203,688.059 932.762,688.059 933.321,688.059 933.881,688.059 934.44,688.059 934.999,688.059 935.558,688.059 936.118,688.059 936.677,688.059 937.236,688.059 937.795,688.059 938.355,688.059 938.914,688.059 939.473,688.059 940.032,688.059 940.592,688.059 941.151,688.059 941.71,688.059 942.269,688.059 942.829,688.059 943.388,688.059 943.947,688.059 944.506,688.059 945.066,688.059 945.625,688.059 946.184,688.059 946.743,688.059 947.303,688.059 947.862,688.059 948.421,688.059 948.98,688.059 949.54,688.059 950.099,688.059 950.658,688.059 951.217,688.059 951.777,688.059 952.336,688.059 952.895,688.059 953.454,688.059 954.014,688.059 954.573,688.059 955.132,688.059 955.691,688.059 956.251,688.059 956.81,688.059 957.369,688.059 957.928,688.059 958.488,688.059 959.047,688.059 959.606,688.059 960.165,688.059 960.725,688.059 961.284,688.059 961.843,688.059 962.402,688.059 962.962,688.059 963.521,688.059 964.08,688.059 964.639,688.059 965.199,688.059 965.758,688.059 966.317,688.059 966.876,688.059 967.436,688.059 967.995,688.059 968.554,688.059 969.113,688.059 969.673,688.059 970.232,688.059 970.791,688.059 971.35,688.059 971.91,688.059 972.469,688.059 973.028,688.059 973.587,688.059 974.147,688.059 974.706,688.059 975.265,688.059 975.824,688.059 976.384,688.059 976.943,688.059 977.502,688.059 978.061,688.059 978.621,688.059 979.18,688.059 979.739,688.059 980.298,688.059 980.858,688.059 981.417,688.059 981.976,688.059 982.535,688.059 983.095,688.059 983.654,688.059 984.213,688.059 984.772,688.059 985.332,688.059 985.891,688.059 986.45,688.059 987.009,688.059 987.569,688.059 988.128,688.059 988.687,688.059 989.246,688.059 989.806,688.059 990.365,688.059 990.924,688.059 991.483,688.059 992.043,688.059 992.602,688.059 993.161,688.059 993.72,688.059 994.28,688.059 994.839,688.059 995.398,688.059 995.957,688.059 996.517,688.059 997.076,688.059 997.635,688.059 998.194,688.059 998.754,688.059 999.313,688.059 999.872,688.059 1000.43,688.059 1000.99,688.059 1001.55,688.059 1002.11,688.059 1002.67,688.059 1003.23,688.059 1003.79,688.059 1004.35,688.059 1004.91,688.059 1005.46,688.059 1006.02,688.059 1006.58,688.059 1007.14,688.059 1007.7,688.059 1008.26,688.059 1008.82,688.059 1009.38,688.059 1009.94,688.059 1010.5,688.059 1011.06,688.059 1011.62,688.059 1012.18,688.059 1012.73,688.059 1013.29,688.059 1013.85,688.059 1014.41,688.059 1014.97,688.059 1015.53,688.059 1016.09,688.059 1016.65,688.059 1017.21,688.059 1017.77,688.059 1018.33,688.059 1018.89,688.059 1019.45,688.059 1020.01,688.059 1020.56,688.059 1021.12,688.059 1021.68,688.059 1022.24,688.059 1022.8,688.059 1023.36,688.059 1023.92,688.059 1024.48,688.059 1025.04,688.059 1025.6,688.059 1026.16,688.059 1026.72,688.059 1027.28,688.059 1027.83,688.059 1028.39,688.059 1028.95,688.059 1029.51,688.059 1030.07,688.059 1030.63,688.059 1031.19,688.059 1031.75,688.059 1032.31,688.059 1032.87,688.059 1033.43,688.059 1033.99,688.059 1034.55,688.059 1035.1,688.059 1035.66,688.059 1036.22,688.059 1036.78,688.059 1037.34,688.059 1037.9,688.059 1038.46,688.059 1039.02,688.059 1039.58,688.059 1040.14,688.059 1040.7,688.059 1041.26,688.059 1041.82,688.059 1042.38,688.059 1042.93,688.059 1043.49,688.059 1044.05,688.059 1044.61,688.059 1045.17,688.059 1045.73,688.059 1046.29,688.059 1046.85,688.059 1047.41,688.059 1047.97,688.059 1048.53,688.059 1049.09,688.059 1049.65,688.059 1050.2,688.059 1050.76,688.059 1051.32,688.059 1051.88,688.059 1052.44,688.059 1053,688.059 1053.56,688.059 1054.12,688.059 1054.68,688.059 1055.24,688.059 1055.8,688.059 1056.36,688.059 1056.92,688.059 1057.48,688.059 1058.03,688.059 1058.59,688.059 1059.15,688.059 1059.71,688.059 1060.27,688.059 1060.83,688.059 1061.39,688.059 1061.95,688.059 1062.51,688.059 1063.07,688.059 1063.63,688.059 1064.19,688.059 1064.75,688.059 1065.3,688.059 1065.86,688.059 1066.42,688.059 1066.98,688.059 1067.54,688.059 1068.1,688.059 1068.66,688.059 1069.22,688.059 1069.78,688.059 1070.34,688.059 1070.9,688.059 1071.46,688.059 1072.02,688.059 1072.57,688.059 1073.13,688.059 1073.69,688.059 1074.25,688.059 1074.81,688.059 1075.37,688.059 1075.93,688.059 1076.49,688.059 1077.05,688.059 1077.61,688.059 1078.17,688.059 1078.73,688.059 1079.29,688.059 1079.85,688.059 1080.4,688.059 1080.96,688.059 1081.52,688.059 1082.08,688.059 1082.64,688.059 1083.2,688.059 1083.76,688.059 1084.32,688.059 1084.88,688.059 1085.44,688.059 1086,688.059 1086.56,688.059 1087.12,688.059 1087.67,688.059 1088.23,688.059 1088.79,688.059 1089.35,688.059 1089.91,688.059 1090.47,688.059 1091.03,688.059 1091.59,688.059 1092.15,688.059 1092.71,688.059 1093.27,688.059 1093.83,688.059 1094.39,688.059 1094.94,688.059 1095.5,688.059 1096.06,688.059 1096.62,688.059 1097.18,688.059 1097.74,688.059 1098.3,688.059 1098.86,688.059 1099.42,688.059 1099.98,688.059 1100.54,688.059 1101.1,688.059 1101.66,688.059 1102.22,688.059 1102.77,688.059 1103.33,688.059 1103.89,688.059 1104.45,688.059 1105.01,688.059 1105.57,688.059 1106.13,688.059 1106.69,688.059 1107.25,688.059 1107.81,688.059 1108.37,688.059 1108.93,688.059 1109.49,688.059 1110.04,688.059 1110.6,688.059 1111.16,688.059 1111.72,688.059 1112.28,688.059 1112.84,688.059 1113.4,688.059 1113.96,688.059 1114.52,688.059 1115.08,688.059 1115.64,688.059 1116.2,688.059 1116.76,688.059 1117.31,688.059 1117.87,688.059 1118.43,688.059 1118.99,688.059 1119.55,688.059 1120.11,688.059 1120.67,688.059 1121.23,688.059 1121.79,688.059 1122.35,688.059 1122.91,688.059 1123.47,688.059 1124.03,688.059 1124.59,688.059 1125.14,688.059 1125.7,688.059 1126.26,688.059 1126.82,688.059 1127.38,688.059 1127.94,688.059 1128.5,688.059 1129.06,688.059 1129.62,688.059 1130.18,688.059 1130.74,688.059 1131.3,688.059 1131.86,688.059 1132.41,688.059 1132.97,688.059 1133.53,688.059 1134.09,688.059 1134.65,688.059 1135.21,688.059 1135.77,688.059 1136.33,688.059 1136.89,688.059 1137.45,688.059 1138.01,688.059 1138.57,688.059 1139.13,688.059 1139.68,688.059 1140.24,688.059 1140.8,688.059 1141.36,688.059 1141.92,688.059 1142.48,688.059 1143.04,688.059 1143.6,688.059 1144.16,688.059 1144.72,688.059 1145.28,688.059 1145.84,688.059 1146.4,688.059 1146.96,688.059 1147.51,688.059 1148.07,688.059 1148.63,688.059 1149.19,688.059 1149.75,688.059 1150.31,688.059 1150.87,688.059 1151.43,688.059 1151.99,688.059 1152.55,688.059 1153.11,688.059 1153.67,688.059 1154.23,688.059 1154.78,688.059 1155.34,688.059 1155.9,688.059 1156.46,688.059 1157.02,688.059 1157.58,688.059 1158.14,688.059 1158.7,688.059 1159.26,688.059 1159.82,688.059 1160.38,688.059 1160.94,688.059 1161.5,688.059 1162.05,688.059 1162.61,688.059 1163.17,688.059 1163.73,688.059 1164.29,688.059 1164.85,688.059 1165.41,688.059 1165.97,688.059 1166.53,688.059 1167.09,688.059 1167.65,688.059 1168.21,688.059 1168.77,688.059 1169.33,688.059 1169.88,688.059 1170.44,688.059 1171,688.059 1171.56,688.059 1172.12,688.059 1172.68,688.059 1173.24,688.059 1173.8,688.059 1174.36,688.059 1174.92,688.059 1175.48,688.059 1176.04,688.059 1176.6,688.059 1177.15,688.059 1177.71,688.059 1178.27,688.059 1178.83,688.059 1179.39,688.059 1179.95,688.059 1180.51,688.059 1181.07,688.059 1181.63,688.059 1182.19,688.059 1182.75,688.059 1183.31,688.059 1183.87,688.059 1184.43,688.059 1184.98,688.059 1185.54,688.059 1186.1,688.059 1186.66,688.059 1187.22,688.059 1187.78,688.059 1188.34,688.059 1188.9,688.059 1189.46,688.059 1190.02,688.059 1190.58,688.059 1191.14,688.059 1191.7,688.059 1192.25,688.059 1192.81,688.059 1193.37,688.059 1193.93,688.059 1194.49,688.059 1195.05,688.059 1195.61,688.059 1196.17,688.059 1196.73,688.059 1197.29,688.059 1197.85,688.059 1198.41,688.059 1198.97,688.059 1199.52,688.059 1200.08,688.059 1200.64,688.059 1201.2,688.059 1201.76,688.059 1202.32,688.059 1202.88,688.059 1203.44,688.059 1204,688.059 1204.56,688.059 1205.12,688.059 1205.68,688.059 1206.24,688.059 1206.8,688.059 1207.35,688.059 1207.91,688.059 1208.47,688.059 1209.03,688.059 1209.59,688.059 1210.15,688.059 1210.71,688.059 1211.27,688.059 1211.83,688.059 1212.39,688.059 1212.95,688.059 1213.51,688.059 1214.07,688.059 1214.62,688.059 1215.18,688.059 1215.74,688.059 1216.3,688.059 1216.86,688.059 1217.42,688.059 1217.98,688.059 1218.54,688.059 1219.1,688.059 1219.66,688.059 1220.22,688.059 1220.78,688.059 1221.34,688.059 1221.89,688.059 1222.45,688.059 1223.01,688.059 1223.57,688.059 1224.13,688.059 1224.69,688.059 1225.25,688.059 1225.81,688.059 1226.37,688.059 1226.93,688.059 1227.49,688.059 1228.05,688.059 1228.61,688.059 1229.17,688.059 1229.72,688.059 1230.28,688.059 1230.84,688.059 1231.4,688.059 1231.96,688.059 1232.52,688.059 1233.08,688.059 1233.64,688.059 1234.2,688.059 1234.76,688.059 1235.32,688.059 1235.88,688.059 1236.44,688.059 1236.99,688.059 1237.55,688.059 1238.11,688.059 1238.67,688.059 1239.23,688.059 1239.79,688.059 1240.35,688.059 1240.91,688.059 1241.47,688.059 1242.03,688.059 1242.59,688.059 1243.15,688.059 1243.71,688.059 1244.26,688.059 1244.82,688.059 1245.38,688.059 1245.94,688.059 1246.5,688.059 1247.06,688.059 1247.62,688.059 1248.18,688.059 1248.74,688.059 1249.3,688.059 1249.86,688.059 1250.42,688.059 1250.98,688.059 1251.54,688.059 1252.09,688.059 1252.65,688.059 1253.21,688.059 1253.77,688.059 1254.33,688.059 1254.89,688.059 1255.45,688.059 1256.01,688.059 1256.57,688.059 1257.13,688.059 1257.69,688.059 1258.25,688.059 1258.81,688.059 1259.36,688.059 1259.92,688.059 1260.48,688.059 1261.04,688.059 1261.6,688.059 1262.16,688.059 1262.72,688.059 1263.28,688.059 1263.84,688.059 1264.4,688.059 1264.96,688.059 1265.52,688.059 1266.08,688.059 1266.63,688.059 1267.19,688.059 1267.75,688.059 1268.31,688.059 1268.87,688.059 1269.43,688.059 1269.99,688.059 1270.55,688.059 1271.11,688.059 1271.67,688.059 1272.23,688.059 1272.79,688.059 1273.35,688.059 1273.91,688.059 1274.46,688.059 1275.02,688.059 1275.58,688.059 1276.14,688.059 1276.7,688.059 1277.26,688.059 1277.82,688.059 1278.38,688.059 1278.94,688.059 1279.5,688.059 1280.06,688.059 1280.62,688.059 1281.18,688.059 1281.73,688.059 1282.29,688.059 1282.85,688.059 1283.41,688.059 1283.97,688.059 1284.53,688.059 1285.09,688.059 1285.65,688.059 1286.21,688.059 1286.77,688.059 1287.33,688.059 1287.89,688.059 1288.45,688.059 1289,688.059 1289.56,688.059 1290.12,688.059 1290.68,688.059 1291.24,688.059 1291.8,688.059 1292.36,688.059 1292.92,688.059 1293.48,688.059 1294.04,688.059 1294.6,688.059 1295.16,688.059 1295.72,688.059 1296.28,688.059 1296.83,688.059 1297.39,688.059 1297.95,688.059 1298.51,688.059 1299.07,688.059 1299.63,688.059 1300.19,688.059 1300.75,688.059 1301.31,688.059 1301.87,688.059 1302.43,688.059 1302.99,688.059 1303.55,688.059 1304.1,688.059 1304.66,688.059 1305.22,688.059 1305.78,688.059 1306.34,688.059 1306.9,688.059 1307.46,688.059 1308.02,688.059 1308.58,688.059 1309.14,688.059 1309.7,688.059 1310.26,688.059 1310.82,688.059 1311.38,688.059 1311.93,688.059 1312.49,688.059 1313.05,688.059 1313.61,688.059 1314.17,688.059 1314.73,688.059 1315.29,688.059 1315.85,688.059 1316.41,688.059 1316.97,688.059 1317.53,688.059 1318.09,688.059 1318.65,688.059 1319.2,688.059 1319.76,688.059 1320.32,688.059 1320.88,688.059 1321.44,688.059 1322,688.059 1322.56,688.059 1323.12,688.059 1323.68,688.059 1324.24,688.059 1324.8,688.059 1325.36,688.059 1325.92,688.059 1326.47,688.059 1327.03,688.059 1327.59,688.059 1328.15,688.059 1328.71,688.059 1329.27,688.059 1329.83,688.059 1330.39,688.059 1330.95,688.059 1331.51,688.059 1332.07,688.059 1332.63,688.059 1333.19,688.059 1333.75,688.059 1334.3,688.059 1334.86,688.059 1335.42,688.059 1335.98,688.059 1336.54,688.059 1337.1,688.059 1337.66,688.059 1338.22,688.059 1338.78,688.059 1339.34,688.059 1339.9,688.059 1340.46,688.059 1341.02,688.059 1341.57,688.059 1342.13,688.059 1342.69,688.059 1343.25,688.059 1343.81,688.059 1344.37,688.059 1344.93,688.059 1345.49,688.059 1346.05,688.059 1346.61,688.059 1347.17,688.059 1347.73,688.059 1348.29,688.059 1348.84,688.059 1349.4,688.059 1349.96,688.059 1350.52,688.059 1351.08,688.059 1351.64,688.059 1352.2,688.059 1352.76,688.059 1353.32,688.059 1353.88,688.059 1354.44,688.059 1355,688.059 1355.56,688.059 1356.12,688.059 1356.67,688.059 1357.23,688.059 1357.79,688.059 1358.35,688.059 1358.91,688.059 1359.47,688.059 1360.03,688.059 1360.59,688.059 1361.15,688.059 1361.71,688.059 1362.27,688.059 1362.83,688.059 1363.39,688.059 1363.94,688.059 1364.5,688.059 1365.06,688.059 1365.62,688.059 1366.18,688.059 1366.74,688.059 1367.3,688.059 1367.86,688.059 1368.42,688.059 1368.98,688.059 1369.54,688.059 1370.1,688.059 1370.66,688.059 1371.21,688.059 1371.77,688.059 1372.33,688.059 1372.89,688.059 1373.45,688.059 1374.01,688.059 1374.57,688.059 1375.13,688.059 1375.69,688.059 1376.25,688.059 1376.81,688.059 1377.37,688.059 1377.93,688.059 1378.49,688.059 1379.04,688.059 1379.6,688.059 1380.16,688.059 1380.72,688.059 1381.28,688.059 1381.84,688.059 1382.4,688.059 1382.96,688.059 1383.52,688.059 1384.08,688.059 1384.64,688.059 1385.2,688.059 1385.76,688.059 1386.31,688.059 1386.87,688.059 1387.43,688.059 1387.99,688.059 1388.55,688.059 1389.11,688.059 1389.67,688.059 1390.23,688.059 1390.79,688.059 1391.35,688.059 1391.91,688.059 1392.47,688.059 1393.03,688.059 1393.58,688.059 1394.14,688.059 1394.7,688.059 1395.26,688.059 1395.82,688.059 1396.38,688.059 1396.94,688.059 1397.5,688.059 1398.06,688.059 1398.62,688.059 1399.18,688.059 1399.74,688.059 1400.3,688.059 1400.86,688.059 1401.41,688.059 1401.97,688.059 1402.53,688.059 1403.09,688.059 1403.65,688.059 1404.21,688.059 1404.77,688.059 1405.33,688.059 1405.89,688.059 1406.45,688.059 1407.01,688.059 1407.57,688.059 1408.13,688.059 1408.68,688.059 1409.24,688.059 1409.8,688.059 1410.36,688.059 1410.92,688.059 1411.48,688.059 1412.04,688.059 1412.6,688.059 1413.16,688.059 1413.72,688.059 1414.28,688.059 1414.84,688.059 1415.4,688.059 1415.95,688.059 1416.51,688.059 1417.07,688.059 1417.63,688.059 1418.19,688.059 1418.75,688.059 1419.31,688.059 1419.87,688.059 1420.43,688.059 1420.99,688.059 1421.55,688.059 1422.11,688.059 1422.67,688.059 1423.23,688.059 1423.78,688.059 1424.34,688.059 1424.9,688.059 1425.46,688.059 1426.02,688.059 1426.58,688.059 1427.14,688.059 1427.7,688.059 1428.26,688.059 1428.82,688.059 1429.38,688.059 1429.94,688.059 1430.5,688.059 1431.05,688.059 1431.61,688.059 1432.17,688.059 1432.73,688.059 1433.29,688.059 1433.85,688.059 1434.41,688.059 1434.97,688.059 1435.53,688.059 1436.09,688.059 1436.65,688.059 1437.21,688.059 1437.77,688.059 1438.33,688.059 1438.88,688.059 1439.44,688.059 1440,688.059 1440.56,688.059 1441.12,688.059 1441.68,688.059 1442.24,688.059 1442.8,688.059 1443.36,688.059 1443.92,688.059 1444.48,688.059 1445.04,688.059 1445.6,688.059 1446.15,688.059 1446.71,688.059 1447.27,688.059 1447.83,688.059 1448.39,688.059 1448.95,688.059 1449.51,688.059 1450.07,688.059 1450.63,688.059 1451.19,688.059 1451.75,688.059 1452.31,688.059 1452.87,688.059 1453.42,688.059 1453.98,688.059 1454.54,688.059 1455.1,688.059 1455.66,688.059 1456.22,688.059 1456.78,688.059 1457.34,688.059 1457.9,688.059 1458.46,688.059 1459.02,688.059 1459.58,688.059 1460.14,688.059 1460.7,688.059 1461.25,688.059 1461.81,688.059 1462.37,688.059 1462.93,688.059 1463.49,688.059 1464.05,688.059 1464.61,688.059 1465.17,688.059 1465.73,688.059 1466.29,688.059 1466.85,688.059 1467.41,688.059 1467.97,688.059 1468.52,688.059 1469.08,688.059 1469.64,688.059 1470.2,688.059 1470.76,688.059 1471.32,688.059 1471.88,688.059 1472.44,688.059 1473,688.059 1473.56,688.059 1474.12,688.059 1474.68,688.059 1475.24,688.059 1475.79,688.059 1476.35,688.059 1476.91,688.059 1477.47,688.059 1478.03,688.059 1478.59,688.059 1479.15,688.059 1479.71,688.059 1480.27,688.059 1480.83,688.059 1481.39,688.059 1481.95,688.059 1482.51,688.059 1483.07,688.059 1483.62,688.059 1484.18,688.059 1484.74,688.059 1485.3,688.059 1485.86,688.059 1486.42,688.059 1486.98,688.059 1487.54,688.059 1488.1,688.059 1488.66,688.059 1489.22,688.059 1489.78,688.059 1490.34,688.059 1490.89,688.059 1491.45,688.059 1492.01,688.059 1492.57,688.059 1493.13,688.059 1493.69,688.059 1494.25,688.059 1494.81,688.059 1495.37,688.059 1495.93,688.059 1496.49,688.059 1497.05,688.059 1497.61,688.059 1498.16,688.059 1498.72,688.059 1499.28,688.059 1499.84,688.059 1500.4,688.059 1500.96,688.059 1501.52,688.059 1502.08,688.059 1502.64,688.059 1503.2,688.059 1503.76,688.059 1504.32,688.059 1504.88,688.059 1505.44,688.059 1505.99,688.059 1506.55,688.059 1507.11,688.059 1507.67,688.059 1508.23,688.059 1508.79,688.059 1509.35,688.059 1509.91,688.059 1510.47,688.059 1511.03,688.059 1511.59,688.059 1512.15,688.059 1512.71,688.059 1513.26,688.059 1513.82,688.059 1514.38,688.059 1514.94,688.059 1515.5,688.059 1516.06,688.059 1516.62,688.059 1517.18,688.059 1517.74,688.059 1518.3,688.059 1518.86,688.059 1519.42,688.059 1519.98,688.059 1520.53,688.059 1521.09,688.059 1521.65,688.059 1522.21,688.059 1522.77,688.059 1523.33,688.059 1523.89,688.059 1524.45,688.059 1525.01,688.059 1525.57,688.059 1526.13,688.059 1526.69,688.059 1527.25,688.059 1527.81,688.059 1528.36,688.059 1528.92,688.059 1529.48,688.059 1530.04,688.059 1530.6,688.059 1531.16,688.059 1531.72,688.059 1532.28,688.059 1532.84,688.059 1533.4,688.059 1533.96,688.059 1534.52,688.059 1535.08,688.059 1535.63,688.059 1536.19,688.059 1536.75,688.059 1537.31,688.059 1537.87,688.059 1538.43,688.059 1538.99,688.059 1539.55,688.059 1540.11,688.059 1540.67,688.059 1541.23,688.059 1541.79,688.059 1542.35,688.059 1542.9,688.059 1543.46,688.059 1544.02,688.059 1544.58,688.059 1545.14,688.059 1545.7,688.059 1546.26,688.059 1546.82,688.059 1547.38,688.059 1547.94,688.059 1548.5,688.059 1549.06,688.059 1549.62,688.059 1550.18,688.059 1550.73,688.059 1551.29,688.059 1551.85,688.059 1552.41,688.059 1552.97,688.059 1553.53,688.059 1554.09,688.059 1554.65,688.059 1555.21,688.059 1555.77,688.059 1556.33,688.059 1556.89,688.059 1557.45,688.059 1558,688.059 1558.56,688.059 1559.12,688.059 1559.68,688.059 1560.24,688.059 1560.8,688.059 1561.36,688.059 1561.92,688.059 1562.48,688.059 1563.04,688.059 1563.6,688.059 1564.16,688.059 1564.72,688.059 1565.28,688.059 1565.83,688.059 1566.39,688.059 1566.95,688.059 1567.51,688.059 1568.07,688.059 1568.63,688.059 1569.19,688.059 1569.75,688.059 1570.31,688.059 1570.87,688.059 1571.43,688.059 1571.99,688.059 1572.55,688.059 1573.1,688.059 1573.66,688.059 1574.22,688.059 1574.78,688.059 1575.34,688.059 1575.9,688.059 1576.46,688.059 1577.02,688.059 1577.58,688.059 1578.14,688.059 1578.7,688.059 1579.26,688.059 1579.82,688.059 1580.37,688.059 1580.93,688.059 1581.49,688.059 1582.05,688.059 1582.61,688.059 1583.17,688.059 1583.73,688.059 1584.29,688.059 1584.85,688.059 1585.41,688.059 1585.97,688.059 1586.53,688.059 1587.09,688.059 1587.65,688.059 1588.2,688.059 1588.76,688.059 1589.32,688.059 1589.88,688.059 1590.44,688.059 1591,688.059 1591.56,688.059 1592.12,688.059 1592.68,688.059 1593.24,688.059 1593.8,688.059 1594.36,688.059 1594.92,688.059 1595.47,688.059 1596.03,688.059 1596.59,688.059 1597.15,688.059 1597.71,688.059 1598.27,688.059 1598.83,688.059 1599.39,688.059 1599.95,688.059 1600.51,688.059 1601.07,688.059 1601.63,688.059 1602.19,688.059 1602.74,688.059 1603.3,688.059 1603.86,688.059 1604.42,688.059 1604.98,688.059 1605.54,688.059 1606.1,688.059 1606.66,688.059 1607.22,688.059 1607.78,688.059 1608.34,688.059 1608.9,688.059 1609.46,688.059 1610.02,688.059 1610.57,688.059 1611.13,688.059 1611.69,688.059 1612.25,688.059 1612.81,688.059 1613.37,688.059 1613.93,688.059 1614.49,688.059 1615.05,688.059 1615.61,688.059 1616.17,688.059 1616.73,688.059 1617.29,688.059 1617.84,688.059 1618.4,688.059 1618.96,688.059 1619.52,688.059 1620.08,688.059 1620.64,688.059 1621.2,688.059 1621.76,688.059 1622.32,688.059 1622.88,688.059 1623.44,688.059 1624,688.059 1624.56,688.059 1625.11,688.059 1625.67,688.059 1626.23,688.059 1626.79,688.059 1627.35,688.059 1627.91,688.059 1628.47,688.059 1629.03,688.059 1629.59,688.059 1630.15,688.059 1630.71,688.059 1631.27,688.059 1631.83,688.059 1632.39,688.059 1632.94,688.059 1633.5,688.059 1634.06,688.059 1634.62,688.059 1635.18,688.059 1635.74,688.059 1636.3,688.059 1636.86,688.059 1637.42,688.059 1637.98,688.059 1638.54,688.059 1639.1,688.059 1639.66,688.059 1640.21,688.059 1640.77,688.059 1641.33,688.059 1641.89,688.059 1642.45,688.059 1643.01,688.059 1643.57,688.059 1644.13,688.059 1644.69,688.059 1645.25,688.059 1645.81,688.059 1646.37,688.059 1646.93,688.059 1647.48,688.059 1648.04,688.059 1648.6,688.059 1649.16,688.059 1649.72,688.059 1650.28,688.059 1650.84,688.059 1651.4,688.059 1651.96,688.059 1652.52,688.059 1653.08,688.059 1653.64,688.059 1654.2,688.059 1654.76,688.059 1655.31,688.059 1655.87,688.059 1656.43,688.059 1656.99,688.059 1657.55,688.059 1658.11,688.059 1658.67,688.059 1659.23,688.059 1659.79,688.059 1660.35,688.059 1660.91,688.059 1661.47,688.059 1662.03,688.059 1662.58,688.059 1663.14,688.059 1663.7,688.059 1664.26,688.059 1664.82,688.059 1665.38,688.059 1665.94,688.059 1666.5,688.059 1667.06,688.059 1667.62,688.059 1668.18,688.059 1668.74,688.059 1669.3,688.059 1669.85,688.059 1670.41,688.059 1670.97,688.059 1671.53,688.059 1672.09,688.059 1672.65,688.059 1673.21,688.059 1673.77,688.059 1674.33,688.059 1674.89,688.059 1675.45,688.059 1676.01,688.059 1676.57,688.059 1677.13,688.059 1677.68,688.059 1678.24,688.059 1678.8,688.059 1679.36,688.059 1679.92,688.059 1680.48,688.059 1681.04,688.059 1681.6,688.059 1682.16,688.059 1682.72,688.059 1683.28,688.059 1683.84,688.059 1684.4,688.059 1684.95,688.059 1685.51,688.059 1686.07,688.059 1686.63,688.059 1687.19,688.059 1687.75,688.059 1688.31,688.059 1688.87,688.059 1689.43,688.059 1689.99,688.059 1690.55,688.059 1691.11,688.059 1691.67,688.059 1692.23,688.059 1692.78,688.059 1693.34,688.059 1693.9,688.059 1694.46,688.059 1695.02,688.059 1695.58,688.059 1696.14,688.059 1696.7,688.059 1697.26,688.059 1697.82,688.059 1698.38,688.059 1698.94,688.059 1699.5,688.059 1700.05,688.059 1700.61,688.059 1701.17,688.059 1701.73,688.059 1702.29,688.059 1702.85,688.059 1703.41,688.059 1703.97,688.059 1704.53,688.059 1705.09,688.059 1705.65,688.059 1706.21,688.059 1706.77,688.059 1707.32,688.059 1707.88,688.059 1708.44,688.059 1709,688.059 1709.56,688.059 1710.12,688.059 1710.68,688.059 1711.24,688.059 1711.8,688.059 1712.36,688.059 1712.92,688.059 1713.48,688.059 1714.04,688.059 1714.6,688.059 1715.15,688.059 1715.71,688.059 1716.27,688.059 1716.83,688.059 1717.39,688.059 1717.95,688.059 1718.51,688.059 1719.07,688.059 1719.63,688.059 1720.19,688.059 1720.75,688.059 1721.31,688.059 1721.87,688.059 1722.42,688.059 1722.98,688.059 1723.54,688.059 1724.1,688.059 1724.66,688.059 1725.22,688.059 1725.78,688.059 1726.34,688.059 1726.9,688.059 1727.46,688.059 1728.02,688.059 1728.58,688.059 1729.14,688.059 1729.69,688.059 1730.25,688.059 1730.81,688.059 1731.37,688.059 1731.93,688.059 1732.49,688.059 1733.05,688.059 1733.61,688.059 1734.17,688.059 1734.73,688.059 1735.29,688.059 1735.85,688.059 1736.41,688.059 1736.97,688.059 1737.52,688.059 1738.08,688.059 1738.64,688.059 1739.2,688.059 1739.76,688.059 1740.32,688.059 1740.88,688.059 1741.44,688.059 1742,688.059 1742.56,688.059 1743.12,688.059 1743.68,688.059 1744.24,688.059 1744.79,688.059 1745.35,688.059 1745.91,688.059 1746.47,688.059 1747.03,688.059 1747.59,688.059 1748.15,688.059 1748.71,688.059 1749.27,688.059 1749.83,688.059 1750.39,688.059 1750.95,688.059 1751.51,688.059 1752.06,688.059 1752.62,688.059 1753.18,688.059 1753.74,688.059 1754.3,688.059 1754.86,688.059 1755.42,688.059 1755.98,688.059 1756.54,688.059 1757.1,688.059 1757.66,688.059 1758.22,688.059 1758.78,688.059 1759.34,688.059 1759.89,688.059 1760.45,688.059 1761.01,688.059 1761.57,688.059 1762.13,688.059 1762.69,688.059 1763.25,688.059 1763.81,688.059 1764.37,688.059 1764.93,688.059 1765.49,688.059 1766.05,688.059 1766.61,688.059 1767.16,688.059 1767.72,688.059 1768.28,688.059 1768.84,688.059 1769.4,688.059 1769.96,688.059 1770.52,688.059 1771.08,688.059 1771.64,688.059 1772.2,688.059 1772.76,688.059 1773.32,688.059 1773.88,688.059 1774.43,688.059 1774.99,688.059 1775.55,688.059 1776.11,688.059 1776.67,688.059 1777.23,688.059 1777.79,688.059 1778.35,688.059 1778.91,688.059 1779.47,688.059 1780.03,688.059 1780.59,688.059 1781.15,688.059 1781.71,688.059 1782.26,688.059 1782.82,688.059 1783.38,688.059 1783.94,688.059 1784.5,688.059 1785.06,688.059 1785.62,688.059 1786.18,688.059 1786.74,688.059 1787.3,688.059 1787.86,688.059 1788.42,688.059 1788.98,688.059 1789.53,688.059 1790.09,688.059 1790.65,688.059 1791.21,688.059 1791.77,688.059 1792.33,688.059 1792.89,688.059 1793.45,688.059 1794.01,688.059 1794.57,688.059 1795.13,688.059 1795.69,688.059 1796.25,688.059 1796.8,688.059 1797.36,688.059 1797.92,688.059 1798.48,688.059 1799.04,688.059 1799.6,688.059 1800.16,688.059 1800.72,688.059 1801.28,688.059 1801.84,688.059 1802.4,688.059 1802.96,688.059 1803.52,688.059 1804.08,688.059 1804.63,688.059 1805.19,688.059 1805.75,688.059 1806.31,688.059 1806.87,688.059 1807.43,688.059 1807.99,688.059 1808.55,688.059 1809.11,688.059 1809.67,688.059 1810.23,688.059 1810.79,688.059 1811.35,688.059 1811.9,688.059 1812.46,688.059 1813.02,688.059 1813.58,688.059 1814.14,688.059 1814.7,688.059 1815.26,688.059 1815.82,688.059 1816.38,688.059 1816.94,688.059 1817.5,688.059 1818.06,688.059 1818.62,688.059 1819.18,688.059 1819.73,688.059 1820.29,688.059 1820.85,688.059 1821.41,688.059 1821.97,688.059 1822.53,688.059 1823.09,688.059 1823.65,688.059 1824.21,688.059 1824.77,688.059 1825.33,688.059 1825.89,688.059 1826.45,688.059 1827,688.059 1827.56,688.059 1828.12,688.059 1828.68,688.059 1829.24,688.059 1829.8,688.059 1830.36,688.059 1830.92,688.059 1831.48,688.059 1832.04,688.059 1832.6,688.059 1833.16,688.059 1833.72,688.059 1834.27,688.059 1834.83,688.059 1835.39,688.059 1835.95,688.059 1836.51,688.059 1837.07,688.059 1837.63,688.059 1838.19,688.059 \"/>\n<path clip-path=\"url(#clip503)\" d=\"M720.247 684.985 L720.806 684.985 L721.365 684.985 L721.924 684.985 L722.484 684.985 L723.043 684.985 L723.602 684.985 L724.161 684.985 L724.721 684.985 L725.28 684.985 L725.839 684.985 L726.398 684.985 L726.958 684.985 L727.517 684.985 L728.076 684.985 L728.635 684.985 L729.195 684.985 L729.754 684.985 L730.313 684.985 L730.872 684.985 L731.432 684.985 L731.991 684.985 L732.55 684.985 L733.109 684.985 L733.669 684.985 L734.228 684.985 L734.787 684.985 L735.346 684.985 L735.906 684.985 L736.465 684.985 L737.024 684.985 L737.583 684.985 L738.143 684.985 L738.702 684.985 L739.261 684.985 L739.82 684.985 L740.38 684.985 L740.939 684.985 L741.498 684.985 L742.057 684.985 L742.617 684.985 L743.176 684.985 L743.735 684.985 L744.294 684.985 L744.854 684.985 L745.413 684.985 L745.972 684.985 L746.531 684.985 L747.091 684.985 L747.65 684.985 L748.209 684.985 L748.768 684.985 L749.328 684.985 L749.887 684.985 L750.446 684.985 L751.005 684.985 L751.565 684.985 L752.124 684.985 L752.683 684.985 L753.242 684.985 L753.802 684.985 L754.361 684.985 L754.92 684.985 L755.479 684.985 L756.039 684.985 L756.598 684.985 L757.157 684.985 L757.716 684.985 L758.276 684.985 L758.835 684.985 L759.394 684.985 L759.953 684.985 L760.513 684.985 L761.072 684.985 L761.631 684.985 L762.19 684.985 L762.75 684.985 L763.309 684.985 L763.868 684.985 L764.427 684.985 L764.987 684.985 L765.546 684.985 L766.105 684.985 L766.664 684.985 L767.224 684.985 L767.783 684.985 L768.342 684.985 L768.901 684.985 L769.461 684.985 L770.02 684.985 L770.579 684.985 L771.138 684.985 L771.698 684.985 L772.257 684.985 L772.816 684.985 L773.375 684.985 L773.935 684.985 L774.494 684.985 L775.053 684.985 L775.612 684.985 L776.172 684.985 L776.731 684.985 L777.29 684.985 L777.849 684.985 L778.409 684.985 L778.968 684.985 L779.527 684.985 L780.086 684.985 L780.646 684.985 L781.205 684.985 L781.764 684.985 L782.323 684.985 L782.883 684.985 L783.442 684.985 L784.001 684.985 L784.56 684.985 L785.12 684.985 L785.679 684.985 L786.238 684.985 L786.797 684.985 L787.357 684.985 L787.916 684.985 L788.475 684.985 L789.034 684.985 L789.594 684.985 L790.153 684.985 L790.712 684.985 L791.271 684.985 L791.831 684.985 L792.39 684.985 L792.949 684.985 L793.508 684.985 L794.068 684.985 L794.627 684.985 L795.186 684.985 L795.745 684.985 L796.305 684.985 L796.864 684.985 L797.423 684.985 L797.982 684.985 L798.542 684.985 L799.101 684.985 L799.66 684.985 L800.219 684.985 L800.779 684.985 L801.338 684.985 L801.897 684.985 L802.456 684.985 L803.016 684.985 L803.575 684.985 L804.134 684.985 L804.693 684.985 L805.253 684.985 L805.812 684.985 L806.371 684.985 L806.931 684.985 L807.49 684.985 L808.049 684.985 L808.608 684.985 L809.168 684.985 L809.727 684.985 L810.286 684.985 L810.845 684.985 L811.405 684.985 L811.964 684.985 L812.523 684.985 L813.082 684.985 L813.642 684.985 L814.201 684.985 L814.76 684.985 L815.319 684.985 L815.879 684.985 L816.438 684.985 L816.997 684.985 L817.556 684.985 L818.116 684.985 L818.675 684.985 L819.234 684.985 L819.793 684.985 L820.353 684.985 L820.912 684.985 L821.471 684.985 L822.03 684.985 L822.59 684.985 L823.149 684.985 L823.708 684.985 L824.267 684.985 L824.827 684.985 L825.386 684.985 L825.945 684.985 L826.504 684.985 L827.064 684.985 L827.623 684.985 L828.182 684.985 L828.741 684.985 L829.301 684.985 L829.86 684.985 L830.419 684.985 L830.978 684.985 L831.538 684.985 L832.097 684.985 L832.656 684.985 L833.215 684.985 L833.775 684.985 L834.334 684.985 L834.893 684.985 L835.452 684.985 L836.012 684.985 L836.571 684.985 L837.13 684.985 L837.689 684.985 L838.249 684.985 L838.808 684.985 L839.367 684.985 L839.926 684.985 L840.486 684.985 L841.045 684.985 L841.604 684.985 L842.163 684.985 L842.723 684.985 L843.282 684.985 L843.841 684.985 L844.4 684.985 L844.96 684.985 L845.519 684.985 L846.078 684.985 L846.637 684.985 L847.197 684.985 L847.756 684.985 L848.315 684.985 L848.874 684.985 L849.434 684.985 L849.993 684.985 L850.552 684.985 L851.111 684.985 L851.671 684.985 L852.23 684.985 L852.789 684.985 L853.348 684.985 L853.908 684.985 L854.467 684.985 L855.026 684.985 L855.585 684.985 L856.145 684.985 L856.704 684.985 L857.263 684.985 L857.822 684.985 L858.382 684.985 L858.941 684.985 L859.5 684.985 L860.059 684.985 L860.619 684.985 L861.178 684.985 L861.737 684.985 L862.296 684.985 L862.856 684.985 L863.415 684.985 L863.974 684.985 L864.533 684.985 L865.093 684.985 L865.652 684.985 L866.211 684.985 L866.77 684.985 L867.33 684.985 L867.889 684.985 L868.448 684.985 L869.007 684.985 L869.567 684.985 L870.126 684.985 L870.685 684.985 L871.244 684.985 L871.804 684.985 L872.363 684.985 L872.922 684.985 L873.481 684.985 L874.041 684.985 L874.6 684.985 L875.159 684.985 L875.718 684.985 L876.278 684.985 L876.837 684.985 L877.396 684.985 L877.955 684.985 L878.515 684.985 L879.074 684.985 L879.633 684.985 L880.192 684.985 L880.752 684.985 L881.311 684.985 L881.87 684.985 L882.429 684.985 L882.989 684.985 L883.548 684.985 L884.107 684.985 L884.666 684.985 L885.226 684.985 L885.785 684.985 L886.344 684.985 L886.903 684.985 L887.463 684.985 L888.022 684.985 L888.581 684.985 L889.14 684.985 L889.7 684.985 L890.259 684.985 L890.818 684.985 L891.377 684.985 L891.937 684.985 L892.496 684.985 L893.055 684.985 L893.614 684.985 L894.174 684.985 L894.733 684.985 L895.292 684.985 L895.851 684.985 L896.411 684.985 L896.97 684.985 L897.529 684.985 L898.088 684.985 L898.648 684.985 L899.207 684.985 L899.766 684.985 L900.325 684.985 L900.885 684.985 L901.444 684.985 L902.003 684.985 L902.562 684.985 L903.122 684.985 L903.681 684.985 L904.24 684.985 L904.799 684.985 L905.359 684.985 L905.918 684.985 L906.477 684.985 L907.036 684.985 L907.596 684.985 L908.155 684.985 L908.714 684.985 L909.273 684.985 L909.833 684.985 L910.392 684.985 L910.951 684.985 L911.51 684.985 L912.07 684.985 L912.629 684.985 L913.188 684.985 L913.747 684.985 L914.307 684.985 L914.866 684.985 L915.425 684.985 L915.984 684.985 L916.544 684.985 L917.103 684.985 L917.662 684.985 L918.221 684.985 L918.781 684.985 L919.34 684.985 L919.899 684.985 L920.458 684.985 L921.018 684.985 L921.577 684.985 L922.136 684.985 L922.695 684.985 L923.255 684.985 L923.814 684.985 L924.373 684.985 L924.932 684.985 L925.492 684.985 L926.051 684.985 L926.61 684.985 L927.169 684.985 L927.729 684.985 L928.288 684.985 L928.847 684.985 L929.406 684.985 L929.966 684.985 L930.525 684.985 L931.084 684.985 L931.644 684.985 L932.203 684.985 L932.762 684.985 L933.321 684.985 L933.881 684.985 L934.44 684.985 L934.999 684.985 L935.558 684.985 L936.118 684.985 L936.677 684.985 L937.236 684.985 L937.795 684.985 L938.355 684.985 L938.914 684.985 L939.473 684.985 L940.032 684.985 L940.592 684.985 L941.151 684.985 L941.71 684.985 L942.269 684.985 L942.829 684.985 L943.388 684.985 L943.947 684.985 L944.506 684.985 L945.066 684.985 L945.625 684.985 L946.184 684.985 L946.743 684.985 L947.303 684.985 L947.862 684.985 L948.421 684.985 L948.98 684.985 L949.54 684.985 L950.099 684.985 L950.658 684.985 L951.217 684.985 L951.777 684.985 L952.336 684.985 L952.895 684.985 L953.454 684.985 L954.014 684.985 L954.573 684.985 L955.132 684.985 L955.691 684.985 L956.251 684.985 L956.81 684.985 L957.369 684.985 L957.928 684.985 L958.488 684.985 L959.047 684.985 L959.606 684.985 L960.165 684.985 L960.725 684.985 L961.284 684.985 L961.843 684.985 L962.402 684.985 L962.962 684.985 L963.521 684.985 L964.08 684.985 L964.639 684.985 L965.199 684.985 L965.758 684.985 L966.317 684.985 L966.876 684.985 L967.436 684.985 L967.995 684.985 L968.554 684.985 L969.113 684.985 L969.673 684.985 L970.232 684.985 L970.791 684.985 L971.35 684.985 L971.91 684.985 L972.469 684.985 L973.028 684.985 L973.587 684.985 L974.147 684.985 L974.706 684.985 L975.265 684.985 L975.824 684.985 L976.384 684.985 L976.943 684.985 L977.502 684.985 L978.061 684.985 L978.621 684.985 L979.18 684.985 L979.739 684.985 L980.298 684.985 L980.858 684.985 L981.417 684.985 L981.976 684.985 L982.535 684.985 L983.095 684.985 L983.654 684.985 L984.213 684.985 L984.772 684.985 L985.332 684.985 L985.891 684.985 L986.45 684.985 L987.009 684.985 L987.569 684.985 L988.128 684.985 L988.687 684.985 L989.246 684.985 L989.806 684.985 L990.365 684.985 L990.924 684.985 L991.483 684.985 L992.043 684.985 L992.602 684.985 L993.161 684.985 L993.72 684.985 L994.28 684.985 L994.839 684.985 L995.398 684.985 L995.957 684.985 L996.517 684.985 L997.076 684.985 L997.635 684.985 L998.194 684.985 L998.754 684.985 L999.313 684.985 L999.872 684.985 L1000.43 684.985 L1000.99 684.985 L1001.55 684.985 L1002.11 684.985 L1002.67 684.985 L1003.23 684.985 L1003.79 684.985 L1004.35 684.985 L1004.91 684.985 L1005.46 684.985 L1006.02 684.985 L1006.58 684.985 L1007.14 684.985 L1007.7 684.985 L1008.26 684.985 L1008.82 684.985 L1009.38 684.985 L1009.94 684.985 L1010.5 684.985 L1011.06 684.985 L1011.62 684.985 L1012.18 684.985 L1012.73 684.985 L1013.29 684.985 L1013.85 684.985 L1014.41 684.985 L1014.97 684.985 L1015.53 684.985 L1016.09 684.985 L1016.65 684.985 L1017.21 684.985 L1017.77 684.985 L1018.33 684.985 L1018.89 684.985 L1019.45 684.985 L1020.01 684.985 L1020.56 684.985 L1021.12 684.985 L1021.68 684.985 L1022.24 684.985 L1022.8 684.985 L1023.36 684.985 L1023.92 684.985 L1024.48 684.985 L1025.04 684.985 L1025.6 684.985 L1026.16 684.985 L1026.72 684.985 L1027.28 684.985 L1027.83 684.985 L1028.39 684.985 L1028.95 684.985 L1029.51 684.985 L1030.07 684.985 L1030.63 684.985 L1031.19 684.985 L1031.75 684.985 L1032.31 684.985 L1032.87 684.985 L1033.43 684.985 L1033.99 684.985 L1034.55 684.985 L1035.1 684.985 L1035.66 684.985 L1036.22 684.985 L1036.78 684.985 L1037.34 684.985 L1037.9 684.985 L1038.46 684.985 L1039.02 684.985 L1039.58 684.985 L1040.14 684.985 L1040.7 684.985 L1041.26 684.985 L1041.82 684.985 L1042.38 684.985 L1042.93 684.985 L1043.49 684.985 L1044.05 684.985 L1044.61 684.985 L1045.17 684.985 L1045.73 684.985 L1046.29 684.985 L1046.85 684.985 L1047.41 684.985 L1047.97 684.985 L1048.53 684.985 L1049.09 684.985 L1049.65 684.985 L1050.2 684.985 L1050.76 684.985 L1051.32 684.985 L1051.88 684.985 L1052.44 684.985 L1053 684.985 L1053.56 684.985 L1054.12 684.985 L1054.68 684.985 L1055.24 684.985 L1055.8 684.985 L1056.36 684.985 L1056.92 684.985 L1057.48 684.985 L1058.03 684.985 L1058.59 684.985 L1059.15 684.985 L1059.71 684.985 L1060.27 684.985 L1060.83 684.985 L1061.39 684.985 L1061.95 684.985 L1062.51 684.985 L1063.07 684.985 L1063.63 684.985 L1064.19 684.985 L1064.75 684.985 L1065.3 684.985 L1065.86 684.985 L1066.42 684.985 L1066.98 684.985 L1067.54 684.985 L1068.1 684.985 L1068.66 684.985 L1069.22 684.985 L1069.78 684.985 L1070.34 684.985 L1070.9 684.985 L1071.46 684.985 L1072.02 684.985 L1072.57 684.985 L1073.13 684.985 L1073.69 684.985 L1074.25 684.985 L1074.81 684.985 L1075.37 684.985 L1075.93 684.985 L1076.49 684.985 L1077.05 684.985 L1077.61 684.985 L1078.17 684.985 L1078.73 684.985 L1079.29 684.985 L1079.85 684.985 L1080.4 684.985 L1080.96 684.985 L1081.52 684.985 L1082.08 684.985 L1082.64 684.985 L1083.2 684.985 L1083.76 684.985 L1084.32 684.985 L1084.88 684.985 L1085.44 684.985 L1086 684.985 L1086.56 684.985 L1087.12 684.985 L1087.67 684.985 L1088.23 684.985 L1088.79 684.985 L1089.35 684.985 L1089.91 684.985 L1090.47 684.985 L1091.03 684.985 L1091.59 684.985 L1092.15 684.985 L1092.71 684.985 L1093.27 684.985 L1093.83 684.985 L1094.39 684.985 L1094.94 684.985 L1095.5 684.985 L1096.06 684.985 L1096.62 684.985 L1097.18 684.985 L1097.74 684.985 L1098.3 684.985 L1098.86 684.985 L1099.42 684.985 L1099.98 684.985 L1100.54 684.985 L1101.1 684.985 L1101.66 684.985 L1102.22 684.985 L1102.77 684.985 L1103.33 684.985 L1103.89 684.985 L1104.45 684.985 L1105.01 684.985 L1105.57 684.985 L1106.13 684.985 L1106.69 684.985 L1107.25 684.985 L1107.81 684.985 L1108.37 684.985 L1108.93 684.985 L1109.49 684.985 L1110.04 684.985 L1110.6 684.985 L1111.16 684.985 L1111.72 684.985 L1112.28 684.985 L1112.84 684.985 L1113.4 684.985 L1113.96 684.985 L1114.52 684.985 L1115.08 684.985 L1115.64 684.985 L1116.2 684.985 L1116.76 684.985 L1117.31 684.985 L1117.87 684.985 L1118.43 684.985 L1118.99 684.985 L1119.55 684.985 L1120.11 684.985 L1120.67 684.985 L1121.23 684.985 L1121.79 684.985 L1122.35 684.985 L1122.91 684.985 L1123.47 684.985 L1124.03 684.985 L1124.59 684.985 L1125.14 684.985 L1125.7 684.985 L1126.26 684.985 L1126.82 684.985 L1127.38 684.985 L1127.94 684.985 L1128.5 684.985 L1129.06 684.985 L1129.62 684.985 L1130.18 684.985 L1130.74 684.985 L1131.3 684.985 L1131.86 684.985 L1132.41 684.985 L1132.97 684.985 L1133.53 684.985 L1134.09 684.985 L1134.65 684.985 L1135.21 684.985 L1135.77 684.985 L1136.33 684.985 L1136.89 684.985 L1137.45 684.985 L1138.01 684.985 L1138.57 684.985 L1139.13 684.985 L1139.68 684.985 L1140.24 684.985 L1140.8 684.985 L1141.36 684.985 L1141.92 684.985 L1142.48 684.985 L1143.04 684.985 L1143.6 684.985 L1144.16 684.985 L1144.72 684.985 L1145.28 684.985 L1145.84 684.985 L1146.4 684.985 L1146.96 684.985 L1147.51 684.985 L1148.07 684.985 L1148.63 684.985 L1149.19 684.985 L1149.75 684.985 L1150.31 684.985 L1150.87 684.985 L1151.43 684.985 L1151.99 684.985 L1152.55 684.985 L1153.11 684.985 L1153.67 684.985 L1154.23 684.985 L1154.78 684.985 L1155.34 684.985 L1155.9 684.985 L1156.46 684.985 L1157.02 684.985 L1157.58 684.985 L1158.14 684.985 L1158.7 684.985 L1159.26 684.985 L1159.82 684.985 L1160.38 684.985 L1160.94 684.985 L1161.5 684.985 L1162.05 684.985 L1162.61 684.985 L1163.17 684.985 L1163.73 684.985 L1164.29 684.985 L1164.85 684.985 L1165.41 684.985 L1165.97 684.985 L1166.53 684.985 L1167.09 684.985 L1167.65 684.985 L1168.21 684.985 L1168.77 684.985 L1169.33 684.985 L1169.88 684.985 L1170.44 684.985 L1171 684.985 L1171.56 684.985 L1172.12 684.985 L1172.68 684.985 L1173.24 684.985 L1173.8 684.985 L1174.36 684.985 L1174.92 684.985 L1175.48 684.985 L1176.04 684.985 L1176.6 684.985 L1177.15 684.985 L1177.71 684.985 L1178.27 684.985 L1178.83 684.985 L1179.39 684.985 L1179.95 684.985 L1180.51 684.985 L1181.07 684.985 L1181.63 684.985 L1182.19 684.985 L1182.75 684.985 L1183.31 684.985 L1183.87 684.985 L1184.43 684.985 L1184.98 684.985 L1185.54 684.985 L1186.1 684.985 L1186.66 684.985 L1187.22 684.985 L1187.78 684.985 L1188.34 684.985 L1188.9 684.985 L1189.46 684.985 L1190.02 684.985 L1190.58 684.985 L1191.14 684.985 L1191.7 684.985 L1192.25 684.985 L1192.81 684.985 L1193.37 684.985 L1193.93 684.985 L1194.49 684.985 L1195.05 684.985 L1195.61 684.985 L1196.17 684.985 L1196.73 684.985 L1197.29 684.985 L1197.85 684.985 L1198.41 684.985 L1198.97 684.985 L1199.52 684.985 L1200.08 684.985 L1200.64 684.985 L1201.2 684.985 L1201.76 684.985 L1202.32 684.985 L1202.88 684.985 L1203.44 684.985 L1204 684.985 L1204.56 684.985 L1205.12 684.985 L1205.68 684.985 L1206.24 684.985 L1206.8 684.985 L1207.35 684.985 L1207.91 684.985 L1208.47 684.985 L1209.03 684.985 L1209.59 684.985 L1210.15 684.985 L1210.71 684.985 L1211.27 684.985 L1211.83 684.985 L1212.39 684.985 L1212.95 684.985 L1213.51 684.985 L1214.07 684.985 L1214.62 684.985 L1215.18 684.985 L1215.74 684.985 L1216.3 684.985 L1216.86 684.985 L1217.42 684.985 L1217.98 684.985 L1218.54 684.985 L1219.1 684.985 L1219.66 684.985 L1220.22 684.985 L1220.78 684.985 L1221.34 684.985 L1221.89 684.985 L1222.45 684.985 L1223.01 684.985 L1223.57 684.985 L1224.13 684.985 L1224.69 684.985 L1225.25 684.985 L1225.81 684.985 L1226.37 684.985 L1226.93 684.985 L1227.49 684.985 L1228.05 684.985 L1228.61 684.985 L1229.17 684.985 L1229.72 684.985 L1230.28 684.985 L1230.84 684.985 L1231.4 684.985 L1231.96 684.985 L1232.52 684.985 L1233.08 684.985 L1233.64 684.985 L1234.2 684.985 L1234.76 684.985 L1235.32 684.985 L1235.88 684.985 L1236.44 684.985 L1236.99 684.985 L1237.55 684.985 L1238.11 684.985 L1238.67 684.985 L1239.23 684.985 L1239.79 684.985 L1240.35 684.985 L1240.91 684.985 L1241.47 684.985 L1242.03 684.985 L1242.59 684.985 L1243.15 684.985 L1243.71 684.985 L1244.26 684.985 L1244.82 684.985 L1245.38 684.985 L1245.94 684.985 L1246.5 684.985 L1247.06 684.985 L1247.62 684.985 L1248.18 684.985 L1248.74 684.985 L1249.3 684.985 L1249.86 684.985 L1250.42 684.985 L1250.98 684.985 L1251.54 684.985 L1252.09 684.985 L1252.65 684.985 L1253.21 684.985 L1253.77 684.985 L1254.33 684.985 L1254.89 684.985 L1255.45 684.985 L1256.01 684.985 L1256.57 684.985 L1257.13 684.985 L1257.69 684.985 L1258.25 684.985 L1258.81 684.985 L1259.36 684.985 L1259.92 684.985 L1260.48 684.985 L1261.04 684.985 L1261.6 684.985 L1262.16 684.985 L1262.72 684.985 L1263.28 684.985 L1263.84 684.985 L1264.4 684.985 L1264.96 684.985 L1265.52 684.985 L1266.08 684.985 L1266.63 684.985 L1267.19 684.985 L1267.75 684.985 L1268.31 684.985 L1268.87 684.985 L1269.43 684.985 L1269.99 684.985 L1270.55 684.985 L1271.11 684.985 L1271.67 684.985 L1272.23 684.985 L1272.79 684.985 L1273.35 684.985 L1273.91 684.985 L1274.46 684.985 L1275.02 684.985 L1275.58 684.985 L1276.14 684.985 L1276.7 684.985 L1277.26 684.985 L1277.82 684.985 L1278.38 684.985 L1278.94 684.985 L1279.5 684.985 L1280.06 684.985 L1280.62 684.985 L1281.18 684.985 L1281.73 684.985 L1282.29 684.985 L1282.85 684.985 L1283.41 684.985 L1283.97 684.985 L1284.53 684.985 L1285.09 684.985 L1285.65 684.985 L1286.21 684.985 L1286.77 684.985 L1287.33 684.985 L1287.89 684.985 L1288.45 684.985 L1289 684.985 L1289.56 684.985 L1290.12 684.985 L1290.68 684.985 L1291.24 684.985 L1291.8 684.985 L1292.36 684.985 L1292.92 684.985 L1293.48 684.985 L1294.04 684.985 L1294.6 684.985 L1295.16 684.985 L1295.72 684.985 L1296.28 684.985 L1296.83 684.985 L1297.39 684.985 L1297.95 684.985 L1298.51 684.985 L1299.07 684.985 L1299.63 684.985 L1300.19 684.985 L1300.75 684.985 L1301.31 684.985 L1301.87 684.985 L1302.43 684.985 L1302.99 684.985 L1303.55 684.985 L1304.1 684.985 L1304.66 684.985 L1305.22 684.985 L1305.78 684.985 L1306.34 684.985 L1306.9 684.985 L1307.46 684.985 L1308.02 684.985 L1308.58 684.985 L1309.14 684.985 L1309.7 684.985 L1310.26 684.985 L1310.82 684.985 L1311.38 684.985 L1311.93 684.985 L1312.49 684.985 L1313.05 684.985 L1313.61 684.985 L1314.17 684.985 L1314.73 684.985 L1315.29 684.985 L1315.85 684.985 L1316.41 684.985 L1316.97 684.985 L1317.53 684.985 L1318.09 684.985 L1318.65 684.985 L1319.2 684.985 L1319.76 684.985 L1320.32 684.985 L1320.88 684.985 L1321.44 684.985 L1322 684.985 L1322.56 684.985 L1323.12 684.985 L1323.68 684.985 L1324.24 684.985 L1324.8 684.985 L1325.36 684.985 L1325.92 684.985 L1326.47 684.985 L1327.03 684.985 L1327.59 684.985 L1328.15 684.985 L1328.71 684.985 L1329.27 684.985 L1329.83 684.985 L1330.39 684.985 L1330.95 684.985 L1331.51 684.985 L1332.07 684.985 L1332.63 684.985 L1333.19 684.985 L1333.75 684.985 L1334.3 684.985 L1334.86 684.985 L1335.42 684.985 L1335.98 684.985 L1336.54 684.985 L1337.1 684.985 L1337.66 684.985 L1338.22 684.985 L1338.78 684.985 L1339.34 684.985 L1339.9 684.985 L1340.46 684.985 L1341.02 684.985 L1341.57 684.985 L1342.13 684.985 L1342.69 684.985 L1343.25 684.985 L1343.81 684.985 L1344.37 684.985 L1344.93 684.985 L1345.49 684.985 L1346.05 684.985 L1346.61 684.985 L1347.17 684.985 L1347.73 684.985 L1348.29 684.985 L1348.84 684.985 L1349.4 684.985 L1349.96 684.985 L1350.52 684.985 L1351.08 684.985 L1351.64 684.985 L1352.2 684.985 L1352.76 684.985 L1353.32 684.985 L1353.88 684.985 L1354.44 684.985 L1355 684.985 L1355.56 684.985 L1356.12 684.985 L1356.67 684.985 L1357.23 684.985 L1357.79 684.985 L1358.35 684.985 L1358.91 684.985 L1359.47 684.985 L1360.03 684.985 L1360.59 684.985 L1361.15 684.985 L1361.71 684.985 L1362.27 684.985 L1362.83 684.985 L1363.39 684.985 L1363.94 684.985 L1364.5 684.985 L1365.06 684.985 L1365.62 684.985 L1366.18 684.985 L1366.74 684.985 L1367.3 684.985 L1367.86 684.985 L1368.42 684.985 L1368.98 684.985 L1369.54 684.985 L1370.1 684.985 L1370.66 684.985 L1371.21 684.985 L1371.77 684.985 L1372.33 684.985 L1372.89 684.985 L1373.45 684.985 L1374.01 684.985 L1374.57 684.985 L1375.13 684.985 L1375.69 684.985 L1376.25 684.985 L1376.81 684.985 L1377.37 684.985 L1377.93 684.985 L1378.49 684.985 L1379.04 684.985 L1379.6 684.985 L1380.16 684.985 L1380.72 684.985 L1381.28 684.985 L1381.84 684.985 L1382.4 684.985 L1382.96 684.985 L1383.52 684.985 L1384.08 684.985 L1384.64 684.985 L1385.2 684.985 L1385.76 684.985 L1386.31 684.985 L1386.87 684.985 L1387.43 684.985 L1387.99 684.985 L1388.55 684.985 L1389.11 684.985 L1389.67 684.985 L1390.23 684.985 L1390.79 684.985 L1391.35 684.985 L1391.91 684.985 L1392.47 684.985 L1393.03 684.985 L1393.58 684.985 L1394.14 684.985 L1394.7 684.985 L1395.26 684.985 L1395.82 684.985 L1396.38 684.985 L1396.94 684.985 L1397.5 684.985 L1398.06 684.985 L1398.62 684.985 L1399.18 684.985 L1399.74 684.985 L1400.3 684.985 L1400.86 684.985 L1401.41 684.985 L1401.97 684.985 L1402.53 684.985 L1403.09 684.985 L1403.65 684.985 L1404.21 684.985 L1404.77 684.985 L1405.33 684.985 L1405.89 684.985 L1406.45 684.985 L1407.01 684.985 L1407.57 684.985 L1408.13 684.985 L1408.68 684.985 L1409.24 684.985 L1409.8 684.985 L1410.36 684.985 L1410.92 684.985 L1411.48 684.985 L1412.04 684.985 L1412.6 684.985 L1413.16 684.985 L1413.72 684.985 L1414.28 684.985 L1414.84 684.985 L1415.4 684.985 L1415.95 684.985 L1416.51 684.985 L1417.07 684.985 L1417.63 684.985 L1418.19 684.985 L1418.75 684.985 L1419.31 684.985 L1419.87 684.985 L1420.43 684.985 L1420.99 684.985 L1421.55 684.985 L1422.11 684.985 L1422.67 684.985 L1423.23 684.985 L1423.78 684.985 L1424.34 684.985 L1424.9 684.985 L1425.46 684.985 L1426.02 684.985 L1426.58 684.985 L1427.14 684.985 L1427.7 684.985 L1428.26 684.985 L1428.82 684.985 L1429.38 684.985 L1429.94 684.985 L1430.5 684.985 L1431.05 684.985 L1431.61 684.985 L1432.17 684.985 L1432.73 684.985 L1433.29 684.985 L1433.85 684.985 L1434.41 684.985 L1434.97 684.985 L1435.53 684.985 L1436.09 684.985 L1436.65 684.985 L1437.21 684.985 L1437.77 684.985 L1438.33 684.985 L1438.88 684.985 L1439.44 684.985 L1440 684.985 L1440.56 684.985 L1441.12 684.985 L1441.68 684.985 L1442.24 684.985 L1442.8 684.985 L1443.36 684.985 L1443.92 684.985 L1444.48 684.985 L1445.04 684.985 L1445.6 684.985 L1446.15 684.985 L1446.71 684.985 L1447.27 684.985 L1447.83 684.985 L1448.39 684.985 L1448.95 684.985 L1449.51 684.985 L1450.07 684.985 L1450.63 684.985 L1451.19 684.985 L1451.75 684.985 L1452.31 684.985 L1452.87 684.985 L1453.42 684.985 L1453.98 684.985 L1454.54 684.985 L1455.1 684.985 L1455.66 684.985 L1456.22 684.985 L1456.78 684.985 L1457.34 684.985 L1457.9 684.985 L1458.46 684.985 L1459.02 684.985 L1459.58 684.985 L1460.14 684.985 L1460.7 684.985 L1461.25 684.985 L1461.81 684.985 L1462.37 684.985 L1462.93 684.985 L1463.49 684.985 L1464.05 684.985 L1464.61 684.985 L1465.17 684.985 L1465.73 684.985 L1466.29 684.985 L1466.85 684.985 L1467.41 684.985 L1467.97 684.985 L1468.52 684.985 L1469.08 684.985 L1469.64 684.985 L1470.2 684.985 L1470.76 684.985 L1471.32 684.985 L1471.88 684.985 L1472.44 684.985 L1473 684.985 L1473.56 684.985 L1474.12 684.985 L1474.68 684.985 L1475.24 684.985 L1475.79 684.985 L1476.35 684.985 L1476.91 684.985 L1477.47 684.985 L1478.03 684.985 L1478.59 684.985 L1479.15 684.985 L1479.71 684.985 L1480.27 684.985 L1480.83 684.985 L1481.39 684.985 L1481.95 684.985 L1482.51 684.985 L1483.07 684.985 L1483.62 684.985 L1484.18 684.985 L1484.74 684.985 L1485.3 684.985 L1485.86 684.985 L1486.42 684.985 L1486.98 684.985 L1487.54 684.985 L1488.1 684.985 L1488.66 684.985 L1489.22 684.985 L1489.78 684.985 L1490.34 684.985 L1490.89 684.985 L1491.45 684.985 L1492.01 684.985 L1492.57 684.985 L1493.13 684.985 L1493.69 684.985 L1494.25 684.985 L1494.81 684.985 L1495.37 684.985 L1495.93 684.985 L1496.49 684.985 L1497.05 684.985 L1497.61 684.985 L1498.16 684.985 L1498.72 684.985 L1499.28 684.985 L1499.84 684.985 L1500.4 684.985 L1500.96 684.985 L1501.52 684.985 L1502.08 684.985 L1502.64 684.985 L1503.2 684.985 L1503.76 684.985 L1504.32 684.985 L1504.88 684.985 L1505.44 684.985 L1505.99 684.985 L1506.55 684.985 L1507.11 684.985 L1507.67 684.985 L1508.23 684.985 L1508.79 684.985 L1509.35 684.985 L1509.91 684.985 L1510.47 684.985 L1511.03 684.985 L1511.59 684.985 L1512.15 684.985 L1512.71 684.985 L1513.26 684.985 L1513.82 684.985 L1514.38 684.985 L1514.94 684.985 L1515.5 684.985 L1516.06 684.985 L1516.62 684.985 L1517.18 684.985 L1517.74 684.985 L1518.3 684.985 L1518.86 684.985 L1519.42 684.985 L1519.98 684.985 L1520.53 684.985 L1521.09 684.985 L1521.65 684.985 L1522.21 684.985 L1522.77 684.985 L1523.33 684.985 L1523.89 684.985 L1524.45 684.985 L1525.01 684.985 L1525.57 684.985 L1526.13 684.985 L1526.69 684.985 L1527.25 684.985 L1527.81 684.985 L1528.36 684.985 L1528.92 684.985 L1529.48 684.985 L1530.04 684.985 L1530.6 684.985 L1531.16 684.985 L1531.72 684.985 L1532.28 684.985 L1532.84 684.985 L1533.4 684.985 L1533.96 684.985 L1534.52 684.985 L1535.08 684.985 L1535.63 684.985 L1536.19 684.985 L1536.75 684.985 L1537.31 684.985 L1537.87 684.985 L1538.43 684.985 L1538.99 684.985 L1539.55 684.985 L1540.11 684.985 L1540.67 684.985 L1541.23 684.985 L1541.79 684.985 L1542.35 684.985 L1542.9 684.985 L1543.46 684.985 L1544.02 684.985 L1544.58 684.985 L1545.14 684.985 L1545.7 684.985 L1546.26 684.985 L1546.82 684.985 L1547.38 684.985 L1547.94 684.985 L1548.5 684.985 L1549.06 684.985 L1549.62 684.985 L1550.18 684.985 L1550.73 684.985 L1551.29 684.985 L1551.85 684.985 L1552.41 684.985 L1552.97 684.985 L1553.53 684.985 L1554.09 684.985 L1554.65 684.985 L1555.21 684.985 L1555.77 684.985 L1556.33 684.985 L1556.89 684.985 L1557.45 684.985 L1558 684.985 L1558.56 684.985 L1559.12 684.985 L1559.68 684.985 L1560.24 684.985 L1560.8 684.985 L1561.36 684.985 L1561.92 684.985 L1562.48 684.985 L1563.04 684.985 L1563.6 684.985 L1564.16 684.985 L1564.72 684.985 L1565.28 684.985 L1565.83 684.985 L1566.39 684.985 L1566.95 684.985 L1567.51 684.985 L1568.07 684.985 L1568.63 684.985 L1569.19 684.985 L1569.75 684.985 L1570.31 684.985 L1570.87 684.985 L1571.43 684.985 L1571.99 684.985 L1572.55 684.985 L1573.1 684.985 L1573.66 684.985 L1574.22 684.985 L1574.78 684.985 L1575.34 684.985 L1575.9 684.985 L1576.46 684.985 L1577.02 684.985 L1577.58 684.985 L1578.14 684.985 L1578.7 684.985 L1579.26 684.985 L1579.82 684.985 L1580.37 684.985 L1580.93 684.985 L1581.49 684.985 L1582.05 684.985 L1582.61 684.985 L1583.17 684.985 L1583.73 684.985 L1584.29 684.985 L1584.85 684.985 L1585.41 684.985 L1585.97 684.985 L1586.53 684.985 L1587.09 684.985 L1587.65 684.985 L1588.2 684.985 L1588.76 684.985 L1589.32 684.985 L1589.88 684.985 L1590.44 684.985 L1591 684.985 L1591.56 684.985 L1592.12 684.985 L1592.68 684.985 L1593.24 684.985 L1593.8 684.985 L1594.36 684.985 L1594.92 684.985 L1595.47 684.985 L1596.03 684.985 L1596.59 684.985 L1597.15 684.985 L1597.71 684.985 L1598.27 684.985 L1598.83 684.985 L1599.39 684.985 L1599.95 684.985 L1600.51 684.985 L1601.07 684.985 L1601.63 684.985 L1602.19 684.985 L1602.74 684.985 L1603.3 684.985 L1603.86 684.985 L1604.42 684.985 L1604.98 684.985 L1605.54 684.985 L1606.1 684.985 L1606.66 684.985 L1607.22 684.985 L1607.78 684.985 L1608.34 684.985 L1608.9 684.985 L1609.46 684.985 L1610.02 684.985 L1610.57 684.985 L1611.13 684.985 L1611.69 684.985 L1612.25 684.985 L1612.81 684.985 L1613.37 684.985 L1613.93 684.985 L1614.49 684.985 L1615.05 684.985 L1615.61 684.985 L1616.17 684.985 L1616.73 684.985 L1617.29 684.985 L1617.84 684.985 L1618.4 684.985 L1618.96 684.985 L1619.52 684.985 L1620.08 684.985 L1620.64 684.985 L1621.2 684.985 L1621.76 684.985 L1622.32 684.985 L1622.88 684.985 L1623.44 684.985 L1624 684.985 L1624.56 684.985 L1625.11 684.985 L1625.67 684.985 L1626.23 684.985 L1626.79 684.985 L1627.35 684.985 L1627.91 684.985 L1628.47 684.985 L1629.03 684.985 L1629.59 684.985 L1630.15 684.985 L1630.71 684.985 L1631.27 684.985 L1631.83 684.985 L1632.39 684.985 L1632.94 684.985 L1633.5 684.985 L1634.06 684.985 L1634.62 684.985 L1635.18 684.985 L1635.74 684.985 L1636.3 684.985 L1636.86 684.985 L1637.42 684.985 L1637.98 684.985 L1638.54 684.985 L1639.1 684.985 L1639.66 684.985 L1640.21 684.985 L1640.77 684.985 L1641.33 684.985 L1641.89 684.985 L1642.45 684.985 L1643.01 684.985 L1643.57 684.985 L1644.13 684.985 L1644.69 684.985 L1645.25 684.985 L1645.81 684.985 L1646.37 684.985 L1646.93 684.985 L1647.48 684.985 L1648.04 684.985 L1648.6 684.985 L1649.16 684.985 L1649.72 684.985 L1650.28 684.985 L1650.84 684.985 L1651.4 684.985 L1651.96 684.985 L1652.52 684.985 L1653.08 684.985 L1653.64 684.985 L1654.2 684.985 L1654.76 684.985 L1655.31 684.985 L1655.87 684.985 L1656.43 684.985 L1656.99 684.985 L1657.55 684.985 L1658.11 684.985 L1658.67 684.985 L1659.23 684.985 L1659.79 684.985 L1660.35 684.985 L1660.91 684.985 L1661.47 684.985 L1662.03 684.985 L1662.58 684.985 L1663.14 684.985 L1663.7 684.985 L1664.26 684.985 L1664.82 684.985 L1665.38 684.985 L1665.94 684.985 L1666.5 684.985 L1667.06 684.985 L1667.62 684.985 L1668.18 684.985 L1668.74 684.985 L1669.3 684.985 L1669.85 684.985 L1670.41 684.985 L1670.97 684.985 L1671.53 684.985 L1672.09 684.985 L1672.65 684.985 L1673.21 684.985 L1673.77 684.985 L1674.33 684.985 L1674.89 684.985 L1675.45 684.985 L1676.01 684.985 L1676.57 684.985 L1677.13 684.985 L1677.68 684.985 L1678.24 684.985 L1678.8 684.985 L1679.36 684.985 L1679.92 684.985 L1680.48 684.985 L1681.04 684.985 L1681.6 684.985 L1682.16 684.985 L1682.72 684.985 L1683.28 684.985 L1683.84 684.985 L1684.4 684.985 L1684.95 684.985 L1685.51 684.985 L1686.07 684.985 L1686.63 684.985 L1687.19 684.985 L1687.75 684.985 L1688.31 684.985 L1688.87 684.985 L1689.43 684.985 L1689.99 684.985 L1690.55 684.985 L1691.11 684.985 L1691.67 684.985 L1692.23 684.985 L1692.78 684.985 L1693.34 684.985 L1693.9 684.985 L1694.46 684.985 L1695.02 684.985 L1695.58 684.985 L1696.14 684.985 L1696.7 684.985 L1697.26 684.985 L1697.82 684.985 L1698.38 684.985 L1698.94 684.985 L1699.5 684.985 L1700.05 684.985 L1700.61 684.985 L1701.17 684.985 L1701.73 684.985 L1702.29 684.985 L1702.85 684.985 L1703.41 684.985 L1703.97 684.985 L1704.53 684.985 L1705.09 684.985 L1705.65 684.985 L1706.21 684.985 L1706.77 684.985 L1707.32 684.985 L1707.88 684.985 L1708.44 684.985 L1709 684.985 L1709.56 684.985 L1710.12 684.985 L1710.68 684.985 L1711.24 684.985 L1711.8 684.985 L1712.36 684.985 L1712.92 684.985 L1713.48 684.985 L1714.04 684.985 L1714.6 684.985 L1715.15 684.985 L1715.71 684.985 L1716.27 684.985 L1716.83 684.985 L1717.39 684.985 L1717.95 684.985 L1718.51 684.985 L1719.07 684.985 L1719.63 684.985 L1720.19 684.985 L1720.75 684.985 L1721.31 684.985 L1721.87 684.985 L1722.42 684.985 L1722.98 684.985 L1723.54 684.985 L1724.1 684.985 L1724.66 684.985 L1725.22 684.985 L1725.78 684.985 L1726.34 684.985 L1726.9 684.985 L1727.46 684.985 L1728.02 684.985 L1728.58 684.985 L1729.14 684.985 L1729.69 684.985 L1730.25 684.985 L1730.81 684.985 L1731.37 684.985 L1731.93 684.985 L1732.49 684.985 L1733.05 684.985 L1733.61 684.985 L1734.17 684.985 L1734.73 684.985 L1735.29 684.985 L1735.85 684.985 L1736.41 684.985 L1736.97 684.985 L1737.52 684.985 L1738.08 684.985 L1738.64 684.985 L1739.2 684.985 L1739.76 684.985 L1740.32 684.985 L1740.88 684.985 L1741.44 684.985 L1742 684.985 L1742.56 684.985 L1743.12 684.985 L1743.68 684.985 L1744.24 684.985 L1744.79 684.985 L1745.35 684.985 L1745.91 684.985 L1746.47 684.985 L1747.03 684.985 L1747.59 684.985 L1748.15 684.985 L1748.71 684.985 L1749.27 684.985 L1749.83 684.985 L1750.39 684.985 L1750.95 684.985 L1751.51 684.985 L1752.06 684.985 L1752.62 684.985 L1753.18 684.985 L1753.74 684.985 L1754.3 684.985 L1754.86 684.985 L1755.42 684.985 L1755.98 684.985 L1756.54 684.985 L1757.1 684.985 L1757.66 684.985 L1758.22 684.985 L1758.78 684.985 L1759.34 684.985 L1759.89 684.985 L1760.45 684.985 L1761.01 684.985 L1761.57 684.985 L1762.13 684.985 L1762.69 684.985 L1763.25 684.985 L1763.81 684.985 L1764.37 684.985 L1764.93 684.985 L1765.49 684.985 L1766.05 684.985 L1766.61 684.985 L1767.16 684.985 L1767.72 684.985 L1768.28 684.985 L1768.84 684.985 L1769.4 684.985 L1769.96 684.985 L1770.52 684.985 L1771.08 684.985 L1771.64 684.985 L1772.2 684.985 L1772.76 684.985 L1773.32 684.985 L1773.88 684.985 L1774.43 684.985 L1774.99 684.985 L1775.55 684.985 L1776.11 684.985 L1776.67 684.985 L1777.23 684.985 L1777.79 684.985 L1778.35 684.985 L1778.91 684.985 L1779.47 684.985 L1780.03 684.985 L1780.59 684.985 L1781.15 684.985 L1781.71 684.985 L1782.26 684.985 L1782.82 684.985 L1783.38 684.985 L1783.94 684.985 L1784.5 684.985 L1785.06 684.985 L1785.62 684.985 L1786.18 684.985 L1786.74 684.985 L1787.3 684.985 L1787.86 684.985 L1788.42 684.985 L1788.98 684.985 L1789.53 684.985 L1790.09 684.985 L1790.65 684.985 L1791.21 684.985 L1791.77 684.985 L1792.33 684.985 L1792.89 684.985 L1793.45 684.985 L1794.01 684.985 L1794.57 684.985 L1795.13 684.985 L1795.69 684.985 L1796.25 684.985 L1796.8 684.985 L1797.36 684.985 L1797.92 684.985 L1798.48 684.985 L1799.04 684.985 L1799.6 684.985 L1800.16 684.985 L1800.72 684.985 L1801.28 684.985 L1801.84 684.985 L1802.4 684.985 L1802.96 684.985 L1803.52 684.985 L1804.08 684.985 L1804.63 684.985 L1805.19 684.985 L1805.75 684.985 L1806.31 684.985 L1806.87 684.985 L1807.43 684.985 L1807.99 684.985 L1808.55 684.985 L1809.11 684.985 L1809.67 684.985 L1810.23 684.985 L1810.79 684.985 L1811.35 684.985 L1811.9 684.985 L1812.46 684.985 L1813.02 684.985 L1813.58 684.985 L1814.14 684.985 L1814.7 684.985 L1815.26 684.985 L1815.82 684.985 L1816.38 684.985 L1816.94 684.985 L1817.5 684.985 L1818.06 684.985 L1818.62 684.985 L1819.18 684.985 L1819.73 684.985 L1820.29 684.985 L1820.85 684.985 L1821.41 684.985 L1821.97 684.985 L1822.53 684.985 L1823.09 684.985 L1823.65 684.985 L1824.21 684.985 L1824.77 684.985 L1825.33 684.985 L1825.89 684.985 L1826.45 684.985 L1827 684.985 L1827.56 684.985 L1828.12 684.985 L1828.68 684.985 L1829.24 684.985 L1829.8 684.985 L1830.36 684.985 L1830.92 684.985 L1831.48 684.985 L1832.04 684.985 L1832.6 684.985 L1833.16 684.985 L1833.72 684.985 L1834.27 684.985 L1834.83 684.985 L1835.39 684.985 L1835.95 684.985 L1836.51 684.985 L1837.07 684.985 L1837.63 684.985 L1838.19 684.985 L1838.19 683.459 L1837.63 683.459 L1837.07 683.459 L1836.51 683.459 L1835.95 683.459 L1835.39 683.459 L1834.83 683.459 L1834.27 683.459 L1833.72 683.459 L1833.16 683.459 L1832.6 683.459 L1832.04 683.459 L1831.48 683.459 L1830.92 683.459 L1830.36 683.459 L1829.8 683.459 L1829.24 683.459 L1828.68 683.459 L1828.12 683.459 L1827.56 683.459 L1827 683.459 L1826.45 683.459 L1825.89 683.459 L1825.33 683.459 L1824.77 683.459 L1824.21 683.459 L1823.65 683.459 L1823.09 683.459 L1822.53 683.459 L1821.97 683.459 L1821.41 683.459 L1820.85 683.459 L1820.29 683.459 L1819.73 683.459 L1819.18 683.459 L1818.62 683.459 L1818.06 683.459 L1817.5 683.459 L1816.94 683.459 L1816.38 683.459 L1815.82 683.459 L1815.26 683.459 L1814.7 683.459 L1814.14 683.459 L1813.58 683.459 L1813.02 683.459 L1812.46 683.459 L1811.9 683.459 L1811.35 683.459 L1810.79 683.459 L1810.23 683.459 L1809.67 683.459 L1809.11 683.459 L1808.55 683.459 L1807.99 683.459 L1807.43 683.459 L1806.87 683.459 L1806.31 683.459 L1805.75 683.459 L1805.19 683.459 L1804.63 683.459 L1804.08 683.459 L1803.52 683.459 L1802.96 683.459 L1802.4 683.459 L1801.84 683.459 L1801.28 683.459 L1800.72 683.459 L1800.16 683.459 L1799.6 683.459 L1799.04 683.459 L1798.48 683.459 L1797.92 683.459 L1797.36 683.459 L1796.8 683.459 L1796.25 683.459 L1795.69 683.459 L1795.13 683.459 L1794.57 683.459 L1794.01 683.459 L1793.45 683.459 L1792.89 683.459 L1792.33 683.459 L1791.77 683.459 L1791.21 683.459 L1790.65 683.459 L1790.09 683.459 L1789.53 683.459 L1788.98 683.459 L1788.42 683.459 L1787.86 683.459 L1787.3 683.459 L1786.74 683.459 L1786.18 683.459 L1785.62 683.459 L1785.06 683.459 L1784.5 683.459 L1783.94 683.459 L1783.38 683.459 L1782.82 683.459 L1782.26 683.459 L1781.71 683.459 L1781.15 683.459 L1780.59 683.459 L1780.03 683.459 L1779.47 683.459 L1778.91 683.459 L1778.35 683.459 L1777.79 683.459 L1777.23 683.459 L1776.67 683.459 L1776.11 683.459 L1775.55 683.459 L1774.99 683.459 L1774.43 683.459 L1773.88 683.459 L1773.32 683.459 L1772.76 683.459 L1772.2 683.459 L1771.64 683.459 L1771.08 683.459 L1770.52 683.459 L1769.96 683.459 L1769.4 683.459 L1768.84 683.459 L1768.28 683.459 L1767.72 683.459 L1767.16 683.459 L1766.61 683.459 L1766.05 683.459 L1765.49 683.459 L1764.93 683.459 L1764.37 683.459 L1763.81 683.459 L1763.25 683.459 L1762.69 683.459 L1762.13 683.459 L1761.57 683.459 L1761.01 683.459 L1760.45 683.459 L1759.89 683.459 L1759.34 683.459 L1758.78 683.459 L1758.22 683.459 L1757.66 683.459 L1757.1 683.459 L1756.54 683.459 L1755.98 683.459 L1755.42 683.459 L1754.86 683.459 L1754.3 683.459 L1753.74 683.459 L1753.18 683.459 L1752.62 683.459 L1752.06 683.459 L1751.51 683.459 L1750.95 683.459 L1750.39 683.459 L1749.83 683.459 L1749.27 683.459 L1748.71 683.459 L1748.15 683.459 L1747.59 683.459 L1747.03 683.459 L1746.47 683.459 L1745.91 683.459 L1745.35 683.459 L1744.79 683.459 L1744.24 683.459 L1743.68 683.459 L1743.12 683.459 L1742.56 683.459 L1742 683.459 L1741.44 683.459 L1740.88 683.459 L1740.32 683.459 L1739.76 683.459 L1739.2 683.459 L1738.64 683.459 L1738.08 683.459 L1737.52 683.459 L1736.97 683.459 L1736.41 683.459 L1735.85 683.459 L1735.29 683.459 L1734.73 683.459 L1734.17 683.459 L1733.61 683.459 L1733.05 683.459 L1732.49 683.459 L1731.93 683.459 L1731.37 683.459 L1730.81 683.459 L1730.25 683.459 L1729.69 683.459 L1729.14 683.459 L1728.58 683.459 L1728.02 683.459 L1727.46 683.459 L1726.9 683.459 L1726.34 683.459 L1725.78 683.459 L1725.22 683.459 L1724.66 683.459 L1724.1 683.459 L1723.54 683.459 L1722.98 683.459 L1722.42 683.459 L1721.87 683.459 L1721.31 683.459 L1720.75 683.459 L1720.19 683.459 L1719.63 683.459 L1719.07 683.459 L1718.51 683.459 L1717.95 683.459 L1717.39 683.459 L1716.83 683.459 L1716.27 683.459 L1715.71 683.459 L1715.15 683.459 L1714.6 683.459 L1714.04 683.459 L1713.48 683.459 L1712.92 683.459 L1712.36 683.459 L1711.8 683.459 L1711.24 683.459 L1710.68 683.459 L1710.12 683.459 L1709.56 683.459 L1709 683.459 L1708.44 683.459 L1707.88 683.459 L1707.32 683.459 L1706.77 683.459 L1706.21 683.459 L1705.65 683.459 L1705.09 683.459 L1704.53 683.459 L1703.97 683.459 L1703.41 683.459 L1702.85 683.459 L1702.29 683.459 L1701.73 683.459 L1701.17 683.459 L1700.61 683.459 L1700.05 683.459 L1699.5 683.459 L1698.94 683.459 L1698.38 683.459 L1697.82 683.459 L1697.26 683.459 L1696.7 683.459 L1696.14 683.459 L1695.58 683.459 L1695.02 683.459 L1694.46 683.459 L1693.9 683.459 L1693.34 683.459 L1692.78 683.459 L1692.23 683.459 L1691.67 683.459 L1691.11 683.459 L1690.55 683.459 L1689.99 683.459 L1689.43 683.459 L1688.87 683.459 L1688.31 683.459 L1687.75 683.459 L1687.19 683.459 L1686.63 683.459 L1686.07 683.459 L1685.51 683.459 L1684.95 683.459 L1684.4 683.459 L1683.84 683.459 L1683.28 683.459 L1682.72 683.459 L1682.16 683.459 L1681.6 683.459 L1681.04 683.459 L1680.48 683.459 L1679.92 683.459 L1679.36 683.459 L1678.8 683.459 L1678.24 683.459 L1677.68 683.459 L1677.13 683.459 L1676.57 683.459 L1676.01 683.459 L1675.45 683.459 L1674.89 683.459 L1674.33 683.459 L1673.77 683.459 L1673.21 683.459 L1672.65 683.459 L1672.09 683.459 L1671.53 683.459 L1670.97 683.459 L1670.41 683.459 L1669.85 683.459 L1669.3 683.459 L1668.74 683.459 L1668.18 683.459 L1667.62 683.459 L1667.06 683.459 L1666.5 683.459 L1665.94 683.459 L1665.38 683.459 L1664.82 683.459 L1664.26 683.459 L1663.7 683.459 L1663.14 683.459 L1662.58 683.459 L1662.03 683.459 L1661.47 683.459 L1660.91 683.459 L1660.35 683.459 L1659.79 683.459 L1659.23 683.459 L1658.67 683.459 L1658.11 683.459 L1657.55 683.459 L1656.99 683.459 L1656.43 683.459 L1655.87 683.459 L1655.31 683.459 L1654.76 683.459 L1654.2 683.459 L1653.64 683.459 L1653.08 683.459 L1652.52 683.459 L1651.96 683.459 L1651.4 683.459 L1650.84 683.459 L1650.28 683.459 L1649.72 683.459 L1649.16 683.459 L1648.6 683.459 L1648.04 683.459 L1647.48 683.459 L1646.93 683.459 L1646.37 683.459 L1645.81 683.459 L1645.25 683.459 L1644.69 683.459 L1644.13 683.459 L1643.57 683.459 L1643.01 683.459 L1642.45 683.459 L1641.89 683.459 L1641.33 683.459 L1640.77 683.459 L1640.21 683.459 L1639.66 683.459 L1639.1 683.459 L1638.54 683.459 L1637.98 683.459 L1637.42 683.459 L1636.86 683.459 L1636.3 683.459 L1635.74 683.459 L1635.18 683.459 L1634.62 683.459 L1634.06 683.459 L1633.5 683.459 L1632.94 683.459 L1632.39 683.459 L1631.83 683.459 L1631.27 683.459 L1630.71 683.459 L1630.15 683.459 L1629.59 683.459 L1629.03 683.459 L1628.47 683.459 L1627.91 683.459 L1627.35 683.459 L1626.79 683.459 L1626.23 683.459 L1625.67 683.459 L1625.11 683.459 L1624.56 683.459 L1624 683.459 L1623.44 683.459 L1622.88 683.459 L1622.32 683.459 L1621.76 683.459 L1621.2 683.459 L1620.64 683.459 L1620.08 683.459 L1619.52 683.459 L1618.96 683.459 L1618.4 683.459 L1617.84 683.459 L1617.29 683.459 L1616.73 683.459 L1616.17 683.459 L1615.61 683.459 L1615.05 683.459 L1614.49 683.459 L1613.93 683.459 L1613.37 683.459 L1612.81 683.459 L1612.25 683.459 L1611.69 683.459 L1611.13 683.459 L1610.57 683.459 L1610.02 683.459 L1609.46 683.459 L1608.9 683.459 L1608.34 683.459 L1607.78 683.459 L1607.22 683.459 L1606.66 683.459 L1606.1 683.459 L1605.54 683.459 L1604.98 683.459 L1604.42 683.459 L1603.86 683.459 L1603.3 683.459 L1602.74 683.459 L1602.19 683.459 L1601.63 683.459 L1601.07 683.459 L1600.51 683.459 L1599.95 683.459 L1599.39 683.459 L1598.83 683.459 L1598.27 683.459 L1597.71 683.459 L1597.15 683.459 L1596.59 683.459 L1596.03 683.459 L1595.47 683.459 L1594.92 683.459 L1594.36 683.459 L1593.8 683.459 L1593.24 683.459 L1592.68 683.459 L1592.12 683.459 L1591.56 683.459 L1591 683.459 L1590.44 683.459 L1589.88 683.459 L1589.32 683.459 L1588.76 683.459 L1588.2 683.459 L1587.65 683.459 L1587.09 683.459 L1586.53 683.459 L1585.97 683.459 L1585.41 683.459 L1584.85 683.459 L1584.29 683.459 L1583.73 683.459 L1583.17 683.459 L1582.61 683.459 L1582.05 683.459 L1581.49 683.459 L1580.93 683.459 L1580.37 683.459 L1579.82 683.459 L1579.26 683.459 L1578.7 683.459 L1578.14 683.459 L1577.58 683.459 L1577.02 683.459 L1576.46 683.459 L1575.9 683.459 L1575.34 683.459 L1574.78 683.459 L1574.22 683.459 L1573.66 683.459 L1573.1 683.459 L1572.55 683.459 L1571.99 683.459 L1571.43 683.459 L1570.87 683.459 L1570.31 683.459 L1569.75 683.459 L1569.19 683.459 L1568.63 683.459 L1568.07 683.459 L1567.51 683.459 L1566.95 683.459 L1566.39 683.459 L1565.83 683.459 L1565.28 683.459 L1564.72 683.459 L1564.16 683.459 L1563.6 683.459 L1563.04 683.459 L1562.48 683.459 L1561.92 683.459 L1561.36 683.459 L1560.8 683.459 L1560.24 683.459 L1559.68 683.459 L1559.12 683.459 L1558.56 683.459 L1558 683.459 L1557.45 683.459 L1556.89 683.459 L1556.33 683.459 L1555.77 683.459 L1555.21 683.459 L1554.65 683.459 L1554.09 683.459 L1553.53 683.459 L1552.97 683.459 L1552.41 683.459 L1551.85 683.459 L1551.29 683.459 L1550.73 683.459 L1550.18 683.459 L1549.62 683.459 L1549.06 683.459 L1548.5 683.459 L1547.94 683.459 L1547.38 683.459 L1546.82 683.459 L1546.26 683.459 L1545.7 683.459 L1545.14 683.459 L1544.58 683.459 L1544.02 683.459 L1543.46 683.459 L1542.9 683.459 L1542.35 683.459 L1541.79 683.459 L1541.23 683.459 L1540.67 683.459 L1540.11 683.459 L1539.55 683.459 L1538.99 683.459 L1538.43 683.459 L1537.87 683.459 L1537.31 683.459 L1536.75 683.459 L1536.19 683.459 L1535.63 683.459 L1535.08 683.459 L1534.52 683.459 L1533.96 683.459 L1533.4 683.459 L1532.84 683.459 L1532.28 683.459 L1531.72 683.459 L1531.16 683.459 L1530.6 683.459 L1530.04 683.459 L1529.48 683.459 L1528.92 683.459 L1528.36 683.459 L1527.81 683.459 L1527.25 683.459 L1526.69 683.459 L1526.13 683.459 L1525.57 683.459 L1525.01 683.459 L1524.45 683.459 L1523.89 683.459 L1523.33 683.459 L1522.77 683.459 L1522.21 683.459 L1521.65 683.459 L1521.09 683.459 L1520.53 683.459 L1519.98 683.459 L1519.42 683.459 L1518.86 683.459 L1518.3 683.459 L1517.74 683.459 L1517.18 683.459 L1516.62 683.459 L1516.06 683.459 L1515.5 683.459 L1514.94 683.459 L1514.38 683.459 L1513.82 683.459 L1513.26 683.459 L1512.71 683.459 L1512.15 683.459 L1511.59 683.459 L1511.03 683.459 L1510.47 683.459 L1509.91 683.459 L1509.35 683.459 L1508.79 683.459 L1508.23 683.459 L1507.67 683.459 L1507.11 683.459 L1506.55 683.459 L1505.99 683.459 L1505.44 683.459 L1504.88 683.459 L1504.32 683.459 L1503.76 683.459 L1503.2 683.459 L1502.64 683.459 L1502.08 683.459 L1501.52 683.459 L1500.96 683.459 L1500.4 683.459 L1499.84 683.459 L1499.28 683.459 L1498.72 683.459 L1498.16 683.459 L1497.61 683.459 L1497.05 683.459 L1496.49 683.459 L1495.93 683.459 L1495.37 683.459 L1494.81 683.459 L1494.25 683.459 L1493.69 683.459 L1493.13 683.459 L1492.57 683.459 L1492.01 683.459 L1491.45 683.459 L1490.89 683.459 L1490.34 683.459 L1489.78 683.459 L1489.22 683.459 L1488.66 683.459 L1488.1 683.459 L1487.54 683.459 L1486.98 683.459 L1486.42 683.459 L1485.86 683.459 L1485.3 683.459 L1484.74 683.459 L1484.18 683.459 L1483.62 683.459 L1483.07 683.459 L1482.51 683.459 L1481.95 683.459 L1481.39 683.459 L1480.83 683.459 L1480.27 683.459 L1479.71 683.459 L1479.15 683.459 L1478.59 683.459 L1478.03 683.459 L1477.47 683.459 L1476.91 683.459 L1476.35 683.459 L1475.79 683.459 L1475.24 683.459 L1474.68 683.459 L1474.12 683.459 L1473.56 683.459 L1473 683.459 L1472.44 683.459 L1471.88 683.459 L1471.32 683.459 L1470.76 683.459 L1470.2 683.459 L1469.64 683.459 L1469.08 683.459 L1468.52 683.459 L1467.97 683.459 L1467.41 683.459 L1466.85 683.459 L1466.29 683.459 L1465.73 683.459 L1465.17 683.459 L1464.61 683.459 L1464.05 683.459 L1463.49 683.459 L1462.93 683.459 L1462.37 683.459 L1461.81 683.459 L1461.25 683.459 L1460.7 683.459 L1460.14 683.459 L1459.58 683.459 L1459.02 683.459 L1458.46 683.459 L1457.9 683.459 L1457.34 683.459 L1456.78 683.459 L1456.22 683.459 L1455.66 683.459 L1455.1 683.459 L1454.54 683.459 L1453.98 683.459 L1453.42 683.459 L1452.87 683.459 L1452.31 683.459 L1451.75 683.459 L1451.19 683.459 L1450.63 683.459 L1450.07 683.459 L1449.51 683.459 L1448.95 683.459 L1448.39 683.459 L1447.83 683.459 L1447.27 683.459 L1446.71 683.459 L1446.15 683.459 L1445.6 683.459 L1445.04 683.459 L1444.48 683.459 L1443.92 683.459 L1443.36 683.459 L1442.8 683.459 L1442.24 683.459 L1441.68 683.459 L1441.12 683.459 L1440.56 683.459 L1440 683.459 L1439.44 683.459 L1438.88 683.459 L1438.33 683.459 L1437.77 683.459 L1437.21 683.459 L1436.65 683.459 L1436.09 683.459 L1435.53 683.459 L1434.97 683.459 L1434.41 683.459 L1433.85 683.459 L1433.29 683.459 L1432.73 683.459 L1432.17 683.459 L1431.61 683.459 L1431.05 683.459 L1430.5 683.459 L1429.94 683.459 L1429.38 683.459 L1428.82 683.459 L1428.26 683.459 L1427.7 683.459 L1427.14 683.459 L1426.58 683.459 L1426.02 683.459 L1425.46 683.459 L1424.9 683.459 L1424.34 683.459 L1423.78 683.459 L1423.23 683.459 L1422.67 683.459 L1422.11 683.459 L1421.55 683.459 L1420.99 683.459 L1420.43 683.459 L1419.87 683.459 L1419.31 683.459 L1418.75 683.459 L1418.19 683.459 L1417.63 683.459 L1417.07 683.459 L1416.51 683.459 L1415.95 683.459 L1415.4 683.459 L1414.84 683.459 L1414.28 683.459 L1413.72 683.459 L1413.16 683.459 L1412.6 683.459 L1412.04 683.459 L1411.48 683.459 L1410.92 683.459 L1410.36 683.459 L1409.8 683.459 L1409.24 683.459 L1408.68 683.459 L1408.13 683.459 L1407.57 683.459 L1407.01 683.459 L1406.45 683.459 L1405.89 683.459 L1405.33 683.459 L1404.77 683.459 L1404.21 683.459 L1403.65 683.459 L1403.09 683.459 L1402.53 683.459 L1401.97 683.459 L1401.41 683.459 L1400.86 683.459 L1400.3 683.459 L1399.74 683.459 L1399.18 683.459 L1398.62 683.459 L1398.06 683.459 L1397.5 683.459 L1396.94 683.459 L1396.38 683.459 L1395.82 683.459 L1395.26 683.459 L1394.7 683.459 L1394.14 683.459 L1393.58 683.459 L1393.03 683.459 L1392.47 683.459 L1391.91 683.459 L1391.35 683.459 L1390.79 683.459 L1390.23 683.459 L1389.67 683.459 L1389.11 683.459 L1388.55 683.459 L1387.99 683.459 L1387.43 683.459 L1386.87 683.459 L1386.31 683.459 L1385.76 683.459 L1385.2 683.459 L1384.64 683.459 L1384.08 683.459 L1383.52 683.459 L1382.96 683.459 L1382.4 683.459 L1381.84 683.459 L1381.28 683.459 L1380.72 683.459 L1380.16 683.459 L1379.6 683.459 L1379.04 683.459 L1378.49 683.459 L1377.93 683.459 L1377.37 683.459 L1376.81 683.459 L1376.25 683.459 L1375.69 683.459 L1375.13 683.459 L1374.57 683.459 L1374.01 683.459 L1373.45 683.459 L1372.89 683.459 L1372.33 683.459 L1371.77 683.459 L1371.21 683.459 L1370.66 683.459 L1370.1 683.459 L1369.54 683.459 L1368.98 683.459 L1368.42 683.459 L1367.86 683.459 L1367.3 683.459 L1366.74 683.459 L1366.18 683.459 L1365.62 683.459 L1365.06 683.459 L1364.5 683.459 L1363.94 683.459 L1363.39 683.459 L1362.83 683.459 L1362.27 683.459 L1361.71 683.459 L1361.15 683.459 L1360.59 683.459 L1360.03 683.459 L1359.47 683.459 L1358.91 683.459 L1358.35 683.459 L1357.79 683.459 L1357.23 683.459 L1356.67 683.459 L1356.12 683.459 L1355.56 683.459 L1355 683.459 L1354.44 683.459 L1353.88 683.459 L1353.32 683.459 L1352.76 683.459 L1352.2 683.459 L1351.64 683.459 L1351.08 683.459 L1350.52 683.459 L1349.96 683.459 L1349.4 683.459 L1348.84 683.459 L1348.29 683.459 L1347.73 683.459 L1347.17 683.459 L1346.61 683.459 L1346.05 683.459 L1345.49 683.459 L1344.93 683.459 L1344.37 683.459 L1343.81 683.459 L1343.25 683.459 L1342.69 683.459 L1342.13 683.459 L1341.57 683.459 L1341.02 683.459 L1340.46 683.459 L1339.9 683.459 L1339.34 683.459 L1338.78 683.459 L1338.22 683.459 L1337.66 683.459 L1337.1 683.459 L1336.54 683.459 L1335.98 683.459 L1335.42 683.459 L1334.86 683.459 L1334.3 683.459 L1333.75 683.459 L1333.19 683.459 L1332.63 683.459 L1332.07 683.459 L1331.51 683.459 L1330.95 683.459 L1330.39 683.459 L1329.83 683.459 L1329.27 683.459 L1328.71 683.459 L1328.15 683.459 L1327.59 683.459 L1327.03 683.459 L1326.47 683.459 L1325.92 683.459 L1325.36 683.459 L1324.8 683.459 L1324.24 683.459 L1323.68 683.459 L1323.12 683.459 L1322.56 683.459 L1322 683.459 L1321.44 683.459 L1320.88 683.459 L1320.32 683.459 L1319.76 683.459 L1319.2 683.459 L1318.65 683.459 L1318.09 683.459 L1317.53 683.459 L1316.97 683.459 L1316.41 683.459 L1315.85 683.459 L1315.29 683.459 L1314.73 683.459 L1314.17 683.459 L1313.61 683.459 L1313.05 683.459 L1312.49 683.459 L1311.93 683.459 L1311.38 683.459 L1310.82 683.459 L1310.26 683.459 L1309.7 683.459 L1309.14 683.459 L1308.58 683.459 L1308.02 683.459 L1307.46 683.459 L1306.9 683.459 L1306.34 683.459 L1305.78 683.459 L1305.22 683.459 L1304.66 683.459 L1304.1 683.459 L1303.55 683.459 L1302.99 683.459 L1302.43 683.459 L1301.87 683.459 L1301.31 683.459 L1300.75 683.459 L1300.19 683.459 L1299.63 683.459 L1299.07 683.459 L1298.51 683.459 L1297.95 683.459 L1297.39 683.459 L1296.83 683.459 L1296.28 683.459 L1295.72 683.459 L1295.16 683.459 L1294.6 683.459 L1294.04 683.459 L1293.48 683.459 L1292.92 683.459 L1292.36 683.459 L1291.8 683.459 L1291.24 683.459 L1290.68 683.459 L1290.12 683.459 L1289.56 683.459 L1289 683.459 L1288.45 683.459 L1287.89 683.459 L1287.33 683.459 L1286.77 683.459 L1286.21 683.459 L1285.65 683.459 L1285.09 683.459 L1284.53 683.459 L1283.97 683.459 L1283.41 683.459 L1282.85 683.459 L1282.29 683.459 L1281.73 683.459 L1281.18 683.459 L1280.62 683.459 L1280.06 683.459 L1279.5 683.459 L1278.94 683.459 L1278.38 683.459 L1277.82 683.459 L1277.26 683.459 L1276.7 683.459 L1276.14 683.459 L1275.58 683.459 L1275.02 683.459 L1274.46 683.459 L1273.91 683.459 L1273.35 683.459 L1272.79 683.459 L1272.23 683.459 L1271.67 683.459 L1271.11 683.459 L1270.55 683.459 L1269.99 683.459 L1269.43 683.459 L1268.87 683.459 L1268.31 683.459 L1267.75 683.459 L1267.19 683.459 L1266.63 683.459 L1266.08 683.459 L1265.52 683.459 L1264.96 683.459 L1264.4 683.459 L1263.84 683.459 L1263.28 683.459 L1262.72 683.459 L1262.16 683.459 L1261.6 683.459 L1261.04 683.459 L1260.48 683.459 L1259.92 683.459 L1259.36 683.459 L1258.81 683.459 L1258.25 683.459 L1257.69 683.459 L1257.13 683.459 L1256.57 683.459 L1256.01 683.459 L1255.45 683.459 L1254.89 683.459 L1254.33 683.459 L1253.77 683.459 L1253.21 683.459 L1252.65 683.459 L1252.09 683.459 L1251.54 683.459 L1250.98 683.459 L1250.42 683.459 L1249.86 683.459 L1249.3 683.459 L1248.74 683.459 L1248.18 683.459 L1247.62 683.459 L1247.06 683.459 L1246.5 683.459 L1245.94 683.459 L1245.38 683.459 L1244.82 683.459 L1244.26 683.459 L1243.71 683.459 L1243.15 683.459 L1242.59 683.459 L1242.03 683.459 L1241.47 683.459 L1240.91 683.459 L1240.35 683.459 L1239.79 683.459 L1239.23 683.459 L1238.67 683.459 L1238.11 683.459 L1237.55 683.459 L1236.99 683.459 L1236.44 683.459 L1235.88 683.459 L1235.32 683.459 L1234.76 683.459 L1234.2 683.459 L1233.64 683.459 L1233.08 683.459 L1232.52 683.459 L1231.96 683.459 L1231.4 683.459 L1230.84 683.459 L1230.28 683.459 L1229.72 683.459 L1229.17 683.459 L1228.61 683.459 L1228.05 683.459 L1227.49 683.459 L1226.93 683.459 L1226.37 683.459 L1225.81 683.459 L1225.25 683.459 L1224.69 683.459 L1224.13 683.459 L1223.57 683.459 L1223.01 683.459 L1222.45 683.459 L1221.89 683.459 L1221.34 683.459 L1220.78 683.459 L1220.22 683.459 L1219.66 683.459 L1219.1 683.459 L1218.54 683.459 L1217.98 683.459 L1217.42 683.459 L1216.86 683.459 L1216.3 683.459 L1215.74 683.459 L1215.18 683.459 L1214.62 683.459 L1214.07 683.459 L1213.51 683.459 L1212.95 683.459 L1212.39 683.459 L1211.83 683.459 L1211.27 683.459 L1210.71 683.459 L1210.15 683.459 L1209.59 683.459 L1209.03 683.459 L1208.47 683.459 L1207.91 683.459 L1207.35 683.459 L1206.8 683.459 L1206.24 683.459 L1205.68 683.459 L1205.12 683.459 L1204.56 683.459 L1204 683.459 L1203.44 683.459 L1202.88 683.459 L1202.32 683.459 L1201.76 683.459 L1201.2 683.459 L1200.64 683.459 L1200.08 683.459 L1199.52 683.459 L1198.97 683.459 L1198.41 683.459 L1197.85 683.459 L1197.29 683.459 L1196.73 683.459 L1196.17 683.459 L1195.61 683.459 L1195.05 683.459 L1194.49 683.459 L1193.93 683.459 L1193.37 683.459 L1192.81 683.459 L1192.25 683.459 L1191.7 683.459 L1191.14 683.459 L1190.58 683.459 L1190.02 683.459 L1189.46 683.459 L1188.9 683.459 L1188.34 683.459 L1187.78 683.459 L1187.22 683.459 L1186.66 683.459 L1186.1 683.459 L1185.54 683.459 L1184.98 683.459 L1184.43 683.459 L1183.87 683.459 L1183.31 683.459 L1182.75 683.459 L1182.19 683.459 L1181.63 683.459 L1181.07 683.459 L1180.51 683.459 L1179.95 683.459 L1179.39 683.459 L1178.83 683.459 L1178.27 683.459 L1177.71 683.459 L1177.15 683.459 L1176.6 683.459 L1176.04 683.459 L1175.48 683.459 L1174.92 683.459 L1174.36 683.459 L1173.8 683.459 L1173.24 683.459 L1172.68 683.459 L1172.12 683.459 L1171.56 683.459 L1171 683.459 L1170.44 683.459 L1169.88 683.459 L1169.33 683.459 L1168.77 683.459 L1168.21 683.459 L1167.65 683.459 L1167.09 683.459 L1166.53 683.459 L1165.97 683.459 L1165.41 683.459 L1164.85 683.459 L1164.29 683.459 L1163.73 683.459 L1163.17 683.459 L1162.61 683.459 L1162.05 683.459 L1161.5 683.459 L1160.94 683.459 L1160.38 683.459 L1159.82 683.459 L1159.26 683.459 L1158.7 683.459 L1158.14 683.459 L1157.58 683.459 L1157.02 683.459 L1156.46 683.459 L1155.9 683.459 L1155.34 683.459 L1154.78 683.459 L1154.23 683.459 L1153.67 683.459 L1153.11 683.459 L1152.55 683.459 L1151.99 683.459 L1151.43 683.459 L1150.87 683.459 L1150.31 683.459 L1149.75 683.459 L1149.19 683.459 L1148.63 683.459 L1148.07 683.459 L1147.51 683.459 L1146.96 683.459 L1146.4 683.459 L1145.84 683.459 L1145.28 683.459 L1144.72 683.459 L1144.16 683.459 L1143.6 683.459 L1143.04 683.459 L1142.48 683.459 L1141.92 683.459 L1141.36 683.459 L1140.8 683.459 L1140.24 683.459 L1139.68 683.459 L1139.13 683.459 L1138.57 683.459 L1138.01 683.459 L1137.45 683.459 L1136.89 683.459 L1136.33 683.459 L1135.77 683.459 L1135.21 683.459 L1134.65 683.459 L1134.09 683.459 L1133.53 683.459 L1132.97 683.459 L1132.41 683.459 L1131.86 683.459 L1131.3 683.459 L1130.74 683.459 L1130.18 683.459 L1129.62 683.459 L1129.06 683.459 L1128.5 683.459 L1127.94 683.459 L1127.38 683.459 L1126.82 683.459 L1126.26 683.459 L1125.7 683.459 L1125.14 683.459 L1124.59 683.459 L1124.03 683.459 L1123.47 683.459 L1122.91 683.459 L1122.35 683.459 L1121.79 683.459 L1121.23 683.459 L1120.67 683.459 L1120.11 683.459 L1119.55 683.459 L1118.99 683.459 L1118.43 683.459 L1117.87 683.459 L1117.31 683.459 L1116.76 683.459 L1116.2 683.459 L1115.64 683.459 L1115.08 683.459 L1114.52 683.459 L1113.96 683.459 L1113.4 683.459 L1112.84 683.459 L1112.28 683.459 L1111.72 683.459 L1111.16 683.459 L1110.6 683.459 L1110.04 683.459 L1109.49 683.459 L1108.93 683.459 L1108.37 683.459 L1107.81 683.459 L1107.25 683.459 L1106.69 683.459 L1106.13 683.459 L1105.57 683.459 L1105.01 683.459 L1104.45 683.459 L1103.89 683.459 L1103.33 683.459 L1102.77 683.459 L1102.22 683.459 L1101.66 683.459 L1101.1 683.459 L1100.54 683.459 L1099.98 683.459 L1099.42 683.459 L1098.86 683.459 L1098.3 683.459 L1097.74 683.459 L1097.18 683.459 L1096.62 683.459 L1096.06 683.459 L1095.5 683.459 L1094.94 683.459 L1094.39 683.459 L1093.83 683.459 L1093.27 683.459 L1092.71 683.459 L1092.15 683.459 L1091.59 683.459 L1091.03 683.459 L1090.47 683.459 L1089.91 683.459 L1089.35 683.459 L1088.79 683.459 L1088.23 683.459 L1087.67 683.459 L1087.12 683.459 L1086.56 683.459 L1086 683.459 L1085.44 683.459 L1084.88 683.459 L1084.32 683.459 L1083.76 683.459 L1083.2 683.459 L1082.64 683.459 L1082.08 683.459 L1081.52 683.459 L1080.96 683.459 L1080.4 683.459 L1079.85 683.459 L1079.29 683.459 L1078.73 683.459 L1078.17 683.459 L1077.61 683.459 L1077.05 683.459 L1076.49 683.459 L1075.93 683.459 L1075.37 683.459 L1074.81 683.459 L1074.25 683.459 L1073.69 683.459 L1073.13 683.459 L1072.57 683.459 L1072.02 683.459 L1071.46 683.459 L1070.9 683.459 L1070.34 683.459 L1069.78 683.459 L1069.22 683.459 L1068.66 683.459 L1068.1 683.459 L1067.54 683.459 L1066.98 683.459 L1066.42 683.459 L1065.86 683.459 L1065.3 683.459 L1064.75 683.459 L1064.19 683.459 L1063.63 683.459 L1063.07 683.459 L1062.51 683.459 L1061.95 683.459 L1061.39 683.459 L1060.83 683.459 L1060.27 683.459 L1059.71 683.459 L1059.15 683.459 L1058.59 683.459 L1058.03 683.459 L1057.48 683.459 L1056.92 683.459 L1056.36 683.459 L1055.8 683.459 L1055.24 683.459 L1054.68 683.459 L1054.12 683.459 L1053.56 683.459 L1053 683.459 L1052.44 683.459 L1051.88 683.459 L1051.32 683.459 L1050.76 683.459 L1050.2 683.459 L1049.65 683.459 L1049.09 683.459 L1048.53 683.459 L1047.97 683.459 L1047.41 683.459 L1046.85 683.459 L1046.29 683.459 L1045.73 683.459 L1045.17 683.459 L1044.61 683.459 L1044.05 683.459 L1043.49 683.459 L1042.93 683.459 L1042.38 683.459 L1041.82 683.459 L1041.26 683.459 L1040.7 683.459 L1040.14 683.459 L1039.58 683.459 L1039.02 683.459 L1038.46 683.459 L1037.9 683.459 L1037.34 683.459 L1036.78 683.459 L1036.22 683.459 L1035.66 683.459 L1035.1 683.459 L1034.55 683.459 L1033.99 683.459 L1033.43 683.459 L1032.87 683.459 L1032.31 683.459 L1031.75 683.459 L1031.19 683.459 L1030.63 683.459 L1030.07 683.459 L1029.51 683.459 L1028.95 683.459 L1028.39 683.459 L1027.83 683.459 L1027.28 683.459 L1026.72 683.459 L1026.16 683.459 L1025.6 683.459 L1025.04 683.459 L1024.48 683.459 L1023.92 683.459 L1023.36 683.459 L1022.8 683.459 L1022.24 683.459 L1021.68 683.459 L1021.12 683.459 L1020.56 683.459 L1020.01 683.459 L1019.45 683.459 L1018.89 683.459 L1018.33 683.459 L1017.77 683.459 L1017.21 683.459 L1016.65 683.459 L1016.09 683.459 L1015.53 683.459 L1014.97 683.459 L1014.41 683.459 L1013.85 683.459 L1013.29 683.459 L1012.73 683.459 L1012.18 683.459 L1011.62 683.459 L1011.06 683.459 L1010.5 683.459 L1009.94 683.459 L1009.38 683.459 L1008.82 683.459 L1008.26 683.459 L1007.7 683.459 L1007.14 683.459 L1006.58 683.459 L1006.02 683.459 L1005.46 683.459 L1004.91 683.459 L1004.35 683.459 L1003.79 683.459 L1003.23 683.459 L1002.67 683.459 L1002.11 683.459 L1001.55 683.459 L1000.99 683.459 L1000.43 683.459 L999.872 683.459 L999.313 683.459 L998.754 683.459 L998.194 683.459 L997.635 683.459 L997.076 683.459 L996.517 683.459 L995.957 683.459 L995.398 683.459 L994.839 683.459 L994.28 683.459 L993.72 683.459 L993.161 683.459 L992.602 683.459 L992.043 683.459 L991.483 683.459 L990.924 683.459 L990.365 683.459 L989.806 683.459 L989.246 683.459 L988.687 683.459 L988.128 683.459 L987.569 683.459 L987.009 683.459 L986.45 683.459 L985.891 683.459 L985.332 683.459 L984.772 683.459 L984.213 683.459 L983.654 683.459 L983.095 683.459 L982.535 683.459 L981.976 683.459 L981.417 683.459 L980.858 683.459 L980.298 683.459 L979.739 683.459 L979.18 683.459 L978.621 683.459 L978.061 683.459 L977.502 683.459 L976.943 683.459 L976.384 683.459 L975.824 683.459 L975.265 683.459 L974.706 683.459 L974.147 683.459 L973.587 683.459 L973.028 683.459 L972.469 683.459 L971.91 683.459 L971.35 683.459 L970.791 683.459 L970.232 683.459 L969.673 683.459 L969.113 683.459 L968.554 683.459 L967.995 683.459 L967.436 683.459 L966.876 683.459 L966.317 683.459 L965.758 683.459 L965.199 683.459 L964.639 683.459 L964.08 683.459 L963.521 683.459 L962.962 683.459 L962.402 683.459 L961.843 683.459 L961.284 683.459 L960.725 683.459 L960.165 683.459 L959.606 683.459 L959.047 683.459 L958.488 683.459 L957.928 683.459 L957.369 683.459 L956.81 683.459 L956.251 683.459 L955.691 683.459 L955.132 683.459 L954.573 683.459 L954.014 683.459 L953.454 683.459 L952.895 683.459 L952.336 683.459 L951.777 683.459 L951.217 683.459 L950.658 683.459 L950.099 683.459 L949.54 683.459 L948.98 683.459 L948.421 683.459 L947.862 683.459 L947.303 683.459 L946.743 683.459 L946.184 683.459 L945.625 683.459 L945.066 683.459 L944.506 683.459 L943.947 683.459 L943.388 683.459 L942.829 683.459 L942.269 683.459 L941.71 683.459 L941.151 683.459 L940.592 683.459 L940.032 683.459 L939.473 683.459 L938.914 683.459 L938.355 683.459 L937.795 683.459 L937.236 683.459 L936.677 683.459 L936.118 683.459 L935.558 683.459 L934.999 683.459 L934.44 683.459 L933.881 683.459 L933.321 683.459 L932.762 683.459 L932.203 683.459 L931.644 683.459 L931.084 683.459 L930.525 683.459 L929.966 683.459 L929.406 683.459 L928.847 683.459 L928.288 683.459 L927.729 683.459 L927.169 683.459 L926.61 683.459 L926.051 683.459 L925.492 683.459 L924.932 683.459 L924.373 683.459 L923.814 683.459 L923.255 683.459 L922.695 683.459 L922.136 683.459 L921.577 683.459 L921.018 683.459 L920.458 683.459 L919.899 683.459 L919.34 683.459 L918.781 683.459 L918.221 683.459 L917.662 683.459 L917.103 683.459 L916.544 683.459 L915.984 683.459 L915.425 683.459 L914.866 683.459 L914.307 683.459 L913.747 683.459 L913.188 683.459 L912.629 683.459 L912.07 683.459 L911.51 683.459 L910.951 683.459 L910.392 683.459 L909.833 683.459 L909.273 683.459 L908.714 683.459 L908.155 683.459 L907.596 683.459 L907.036 683.459 L906.477 683.459 L905.918 683.459 L905.359 683.459 L904.799 683.459 L904.24 683.459 L903.681 683.459 L903.122 683.459 L902.562 683.459 L902.003 683.459 L901.444 683.459 L900.885 683.459 L900.325 683.459 L899.766 683.459 L899.207 683.459 L898.648 683.459 L898.088 683.459 L897.529 683.459 L896.97 683.459 L896.411 683.459 L895.851 683.459 L895.292 683.459 L894.733 683.459 L894.174 683.459 L893.614 683.459 L893.055 683.459 L892.496 683.459 L891.937 683.459 L891.377 683.459 L890.818 683.459 L890.259 683.459 L889.7 683.459 L889.14 683.459 L888.581 683.459 L888.022 683.459 L887.463 683.459 L886.903 683.459 L886.344 683.459 L885.785 683.459 L885.226 683.459 L884.666 683.459 L884.107 683.459 L883.548 683.459 L882.989 683.459 L882.429 683.459 L881.87 683.459 L881.311 683.459 L880.752 683.459 L880.192 683.459 L879.633 683.459 L879.074 683.459 L878.515 683.459 L877.955 683.459 L877.396 683.459 L876.837 683.459 L876.278 683.459 L875.718 683.459 L875.159 683.459 L874.6 683.459 L874.041 683.459 L873.481 683.459 L872.922 683.459 L872.363 683.459 L871.804 683.459 L871.244 683.459 L870.685 683.459 L870.126 683.459 L869.567 683.459 L869.007 683.459 L868.448 683.459 L867.889 683.459 L867.33 683.459 L866.77 683.459 L866.211 683.459 L865.652 683.459 L865.093 683.459 L864.533 683.459 L863.974 683.459 L863.415 683.459 L862.856 683.459 L862.296 683.459 L861.737 683.459 L861.178 683.459 L860.619 683.459 L860.059 683.459 L859.5 683.459 L858.941 683.459 L858.382 683.459 L857.822 683.459 L857.263 683.459 L856.704 683.459 L856.145 683.459 L855.585 683.459 L855.026 683.459 L854.467 683.459 L853.908 683.459 L853.348 683.459 L852.789 683.459 L852.23 683.459 L851.671 683.459 L851.111 683.459 L850.552 683.459 L849.993 683.459 L849.434 683.459 L848.874 683.459 L848.315 683.459 L847.756 683.459 L847.197 683.459 L846.637 683.459 L846.078 683.459 L845.519 683.459 L844.96 683.459 L844.4 683.459 L843.841 683.459 L843.282 683.459 L842.723 683.459 L842.163 683.459 L841.604 683.459 L841.045 683.459 L840.486 683.459 L839.926 683.459 L839.367 683.459 L838.808 683.459 L838.249 683.459 L837.689 683.459 L837.13 683.459 L836.571 683.459 L836.012 683.459 L835.452 683.459 L834.893 683.459 L834.334 683.459 L833.775 683.459 L833.215 683.459 L832.656 683.459 L832.097 683.459 L831.538 683.459 L830.978 683.459 L830.419 683.459 L829.86 683.459 L829.301 683.459 L828.741 683.459 L828.182 683.459 L827.623 683.459 L827.064 683.459 L826.504 683.459 L825.945 683.459 L825.386 683.459 L824.827 683.459 L824.267 683.459 L823.708 683.459 L823.149 683.459 L822.59 683.459 L822.03 683.459 L821.471 683.459 L820.912 683.459 L820.353 683.459 L819.793 683.459 L819.234 683.459 L818.675 683.459 L818.116 683.459 L817.556 683.459 L816.997 683.459 L816.438 683.459 L815.879 683.459 L815.319 683.459 L814.76 683.459 L814.201 683.459 L813.642 683.459 L813.082 683.459 L812.523 683.459 L811.964 683.459 L811.405 683.459 L810.845 683.459 L810.286 683.459 L809.727 683.459 L809.168 683.459 L808.608 683.459 L808.049 683.459 L807.49 683.459 L806.931 683.459 L806.371 683.459 L805.812 683.459 L805.253 683.459 L804.693 683.459 L804.134 683.459 L803.575 683.459 L803.016 683.459 L802.456 683.459 L801.897 683.459 L801.338 683.459 L800.779 683.459 L800.219 683.459 L799.66 683.459 L799.101 683.459 L798.542 683.459 L797.982 683.459 L797.423 683.459 L796.864 683.459 L796.305 683.459 L795.745 683.459 L795.186 683.459 L794.627 683.459 L794.068 683.459 L793.508 683.459 L792.949 683.459 L792.39 683.459 L791.831 683.459 L791.271 683.459 L790.712 683.459 L790.153 683.459 L789.594 683.459 L789.034 683.459 L788.475 683.459 L787.916 683.459 L787.357 683.459 L786.797 683.459 L786.238 683.459 L785.679 683.459 L785.12 683.459 L784.56 683.459 L784.001 683.459 L783.442 683.459 L782.883 683.459 L782.323 683.459 L781.764 683.459 L781.205 683.459 L780.646 683.459 L780.086 683.459 L779.527 683.459 L778.968 683.459 L778.409 683.459 L777.849 683.459 L777.29 683.459 L776.731 683.459 L776.172 683.459 L775.612 683.459 L775.053 683.459 L774.494 683.459 L773.935 683.459 L773.375 683.459 L772.816 683.459 L772.257 683.459 L771.698 683.459 L771.138 683.459 L770.579 683.459 L770.02 683.459 L769.461 683.459 L768.901 683.459 L768.342 683.459 L767.783 683.459 L767.224 683.459 L766.664 683.459 L766.105 683.459 L765.546 683.459 L764.987 683.459 L764.427 683.459 L763.868 683.459 L763.309 683.459 L762.75 683.459 L762.19 683.459 L761.631 683.459 L761.072 683.459 L760.513 683.459 L759.953 683.459 L759.394 683.459 L758.835 683.459 L758.276 683.459 L757.716 683.459 L757.157 683.459 L756.598 683.459 L756.039 683.459 L755.479 683.459 L754.92 683.459 L754.361 683.459 L753.802 683.459 L753.242 683.459 L752.683 683.459 L752.124 683.459 L751.565 683.459 L751.005 683.459 L750.446 683.459 L749.887 683.459 L749.328 683.459 L748.768 683.459 L748.209 683.459 L747.65 683.459 L747.091 683.459 L746.531 683.459 L745.972 683.459 L745.413 683.459 L744.854 683.459 L744.294 683.459 L743.735 683.459 L743.176 683.459 L742.617 683.459 L742.057 683.459 L741.498 683.459 L740.939 683.459 L740.38 683.459 L739.82 683.459 L739.261 683.459 L738.702 683.459 L738.143 683.459 L737.583 683.459 L737.024 683.459 L736.465 683.459 L735.906 683.459 L735.346 683.459 L734.787 683.459 L734.228 683.459 L733.669 683.459 L733.109 683.459 L732.55 683.459 L731.991 683.459 L731.432 683.459 L730.872 683.459 L730.313 683.459 L729.754 683.459 L729.195 683.459 L728.635 683.459 L728.076 683.459 L727.517 683.459 L726.958 683.459 L726.398 683.459 L725.839 683.459 L725.28 683.459 L724.721 683.459 L724.161 683.459 L723.602 683.459 L723.043 683.459 L722.484 683.459 L721.924 683.459 L721.365 683.459 L720.806 683.459 L720.247 683.459  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.255 720.806,684.255 721.365,684.255 721.924,684.255 722.484,684.255 723.043,684.255 723.602,684.255 724.161,684.255 724.721,684.255 725.28,684.255 725.839,684.255 726.398,684.255 726.958,684.255 727.517,684.255 728.076,684.255 728.635,684.255 729.195,684.255 729.754,684.255 730.313,684.255 730.872,684.255 731.432,684.255 731.991,684.255 732.55,684.255 733.109,684.255 733.669,684.255 734.228,684.255 734.787,684.255 735.346,684.255 735.906,684.255 736.465,684.255 737.024,684.255 737.583,684.255 738.143,684.255 738.702,684.255 739.261,684.255 739.82,684.255 740.38,684.255 740.939,684.255 741.498,684.255 742.057,684.255 742.617,684.255 743.176,684.255 743.735,684.255 744.294,684.255 744.854,684.255 745.413,684.255 745.972,684.255 746.531,684.255 747.091,684.255 747.65,684.255 748.209,684.255 748.768,684.255 749.328,684.255 749.887,684.255 750.446,684.255 751.005,684.255 751.565,684.255 752.124,684.255 752.683,684.255 753.242,684.255 753.802,684.255 754.361,684.255 754.92,684.255 755.479,684.255 756.039,684.255 756.598,684.255 757.157,684.255 757.716,684.255 758.276,684.255 758.835,684.255 759.394,684.255 759.953,684.255 760.513,684.255 761.072,684.255 761.631,684.255 762.19,684.255 762.75,684.255 763.309,684.255 763.868,684.255 764.427,684.255 764.987,684.255 765.546,684.255 766.105,684.255 766.664,684.255 767.224,684.255 767.783,684.255 768.342,684.255 768.901,684.255 769.461,684.255 770.02,684.255 770.579,684.255 771.138,684.255 771.698,684.255 772.257,684.255 772.816,684.255 773.375,684.255 773.935,684.255 774.494,684.255 775.053,684.255 775.612,684.255 776.172,684.255 776.731,684.255 777.29,684.255 777.849,684.255 778.409,684.255 778.968,684.255 779.527,684.255 780.086,684.255 780.646,684.255 781.205,684.255 781.764,684.255 782.323,684.255 782.883,684.255 783.442,684.255 784.001,684.255 784.56,684.255 785.12,684.255 785.679,684.255 786.238,684.255 786.797,684.255 787.357,684.255 787.916,684.255 788.475,684.255 789.034,684.255 789.594,684.255 790.153,684.255 790.712,684.255 791.271,684.255 791.831,684.255 792.39,684.255 792.949,684.255 793.508,684.255 794.068,684.255 794.627,684.255 795.186,684.255 795.745,684.255 796.305,684.255 796.864,684.255 797.423,684.255 797.982,684.255 798.542,684.255 799.101,684.255 799.66,684.255 800.219,684.255 800.779,684.255 801.338,684.255 801.897,684.255 802.456,684.255 803.016,684.255 803.575,684.255 804.134,684.255 804.693,684.255 805.253,684.255 805.812,684.255 806.371,684.255 806.931,684.255 807.49,684.255 808.049,684.255 808.608,684.255 809.168,684.255 809.727,684.255 810.286,684.255 810.845,684.255 811.405,684.255 811.964,684.255 812.523,684.255 813.082,684.255 813.642,684.255 814.201,684.255 814.76,684.255 815.319,684.255 815.879,684.255 816.438,684.255 816.997,684.255 817.556,684.255 818.116,684.255 818.675,684.255 819.234,684.255 819.793,684.255 820.353,684.255 820.912,684.255 821.471,684.255 822.03,684.255 822.59,684.255 823.149,684.255 823.708,684.255 824.267,684.255 824.827,684.255 825.386,684.255 825.945,684.255 826.504,684.255 827.064,684.255 827.623,684.255 828.182,684.255 828.741,684.255 829.301,684.255 829.86,684.255 830.419,684.255 830.978,684.255 831.538,684.255 832.097,684.255 832.656,684.255 833.215,684.255 833.775,684.255 834.334,684.255 834.893,684.255 835.452,684.255 836.012,684.255 836.571,684.255 837.13,684.255 837.689,684.255 838.249,684.255 838.808,684.255 839.367,684.255 839.926,684.255 840.486,684.255 841.045,684.255 841.604,684.255 842.163,684.255 842.723,684.255 843.282,684.255 843.841,684.255 844.4,684.255 844.96,684.255 845.519,684.255 846.078,684.255 846.637,684.255 847.197,684.255 847.756,684.255 848.315,684.255 848.874,684.255 849.434,684.255 849.993,684.255 850.552,684.255 851.111,684.255 851.671,684.255 852.23,684.255 852.789,684.255 853.348,684.255 853.908,684.255 854.467,684.255 855.026,684.255 855.585,684.255 856.145,684.255 856.704,684.255 857.263,684.255 857.822,684.255 858.382,684.255 858.941,684.255 859.5,684.255 860.059,684.255 860.619,684.255 861.178,684.255 861.737,684.255 862.296,684.255 862.856,684.255 863.415,684.255 863.974,684.255 864.533,684.255 865.093,684.255 865.652,684.255 866.211,684.255 866.77,684.255 867.33,684.255 867.889,684.255 868.448,684.255 869.007,684.255 869.567,684.255 870.126,684.255 870.685,684.255 871.244,684.255 871.804,684.255 872.363,684.255 872.922,684.255 873.481,684.255 874.041,684.255 874.6,684.255 875.159,684.255 875.718,684.255 876.278,684.255 876.837,684.255 877.396,684.255 877.955,684.255 878.515,684.255 879.074,684.255 879.633,684.255 880.192,684.255 880.752,684.255 881.311,684.255 881.87,684.255 882.429,684.255 882.989,684.255 883.548,684.255 884.107,684.255 884.666,684.255 885.226,684.255 885.785,684.255 886.344,684.255 886.903,684.255 887.463,684.255 888.022,684.255 888.581,684.255 889.14,684.255 889.7,684.255 890.259,684.255 890.818,684.255 891.377,684.255 891.937,684.255 892.496,684.255 893.055,684.255 893.614,684.255 894.174,684.255 894.733,684.255 895.292,684.255 895.851,684.255 896.411,684.255 896.97,684.255 897.529,684.255 898.088,684.255 898.648,684.255 899.207,684.255 899.766,684.255 900.325,684.255 900.885,684.255 901.444,684.255 902.003,684.255 902.562,684.255 903.122,684.255 903.681,684.255 904.24,684.255 904.799,684.255 905.359,684.255 905.918,684.255 906.477,684.255 907.036,684.255 907.596,684.255 908.155,684.255 908.714,684.255 909.273,684.255 909.833,684.255 910.392,684.255 910.951,684.255 911.51,684.255 912.07,684.255 912.629,684.255 913.188,684.255 913.747,684.255 914.307,684.255 914.866,684.255 915.425,684.255 915.984,684.255 916.544,684.255 917.103,684.255 917.662,684.255 918.221,684.255 918.781,684.255 919.34,684.255 919.899,684.255 920.458,684.255 921.018,684.255 921.577,684.255 922.136,684.255 922.695,684.255 923.255,684.255 923.814,684.255 924.373,684.255 924.932,684.255 925.492,684.255 926.051,684.255 926.61,684.255 927.169,684.255 927.729,684.255 928.288,684.255 928.847,684.255 929.406,684.255 929.966,684.255 930.525,684.255 931.084,684.255 931.644,684.255 932.203,684.255 932.762,684.255 933.321,684.255 933.881,684.255 934.44,684.255 934.999,684.255 935.558,684.255 936.118,684.255 936.677,684.255 937.236,684.255 937.795,684.255 938.355,684.255 938.914,684.255 939.473,684.255 940.032,684.255 940.592,684.255 941.151,684.255 941.71,684.255 942.269,684.255 942.829,684.255 943.388,684.255 943.947,684.255 944.506,684.255 945.066,684.255 945.625,684.255 946.184,684.255 946.743,684.255 947.303,684.255 947.862,684.255 948.421,684.255 948.98,684.255 949.54,684.255 950.099,684.255 950.658,684.255 951.217,684.255 951.777,684.255 952.336,684.255 952.895,684.255 953.454,684.255 954.014,684.255 954.573,684.255 955.132,684.255 955.691,684.255 956.251,684.255 956.81,684.255 957.369,684.255 957.928,684.255 958.488,684.255 959.047,684.255 959.606,684.255 960.165,684.255 960.725,684.255 961.284,684.255 961.843,684.255 962.402,684.255 962.962,684.255 963.521,684.255 964.08,684.255 964.639,684.255 965.199,684.255 965.758,684.255 966.317,684.255 966.876,684.255 967.436,684.255 967.995,684.255 968.554,684.255 969.113,684.255 969.673,684.255 970.232,684.255 970.791,684.255 971.35,684.255 971.91,684.255 972.469,684.255 973.028,684.255 973.587,684.255 974.147,684.255 974.706,684.255 975.265,684.255 975.824,684.255 976.384,684.255 976.943,684.255 977.502,684.255 978.061,684.255 978.621,684.255 979.18,684.255 979.739,684.255 980.298,684.255 980.858,684.255 981.417,684.255 981.976,684.255 982.535,684.255 983.095,684.255 983.654,684.255 984.213,684.255 984.772,684.255 985.332,684.255 985.891,684.255 986.45,684.255 987.009,684.255 987.569,684.255 988.128,684.255 988.687,684.255 989.246,684.255 989.806,684.255 990.365,684.255 990.924,684.255 991.483,684.255 992.043,684.255 992.602,684.255 993.161,684.255 993.72,684.255 994.28,684.255 994.839,684.255 995.398,684.255 995.957,684.255 996.517,684.255 997.076,684.255 997.635,684.255 998.194,684.255 998.754,684.255 999.313,684.255 999.872,684.255 1000.43,684.255 1000.99,684.255 1001.55,684.255 1002.11,684.255 1002.67,684.255 1003.23,684.255 1003.79,684.255 1004.35,684.255 1004.91,684.255 1005.46,684.255 1006.02,684.255 1006.58,684.255 1007.14,684.255 1007.7,684.255 1008.26,684.255 1008.82,684.255 1009.38,684.255 1009.94,684.255 1010.5,684.255 1011.06,684.255 1011.62,684.255 1012.18,684.255 1012.73,684.255 1013.29,684.255 1013.85,684.255 1014.41,684.255 1014.97,684.255 1015.53,684.255 1016.09,684.255 1016.65,684.255 1017.21,684.255 1017.77,684.255 1018.33,684.255 1018.89,684.255 1019.45,684.255 1020.01,684.255 1020.56,684.255 1021.12,684.255 1021.68,684.255 1022.24,684.255 1022.8,684.255 1023.36,684.255 1023.92,684.255 1024.48,684.255 1025.04,684.255 1025.6,684.255 1026.16,684.255 1026.72,684.255 1027.28,684.255 1027.83,684.255 1028.39,684.255 1028.95,684.255 1029.51,684.255 1030.07,684.255 1030.63,684.255 1031.19,684.255 1031.75,684.255 1032.31,684.255 1032.87,684.255 1033.43,684.255 1033.99,684.255 1034.55,684.255 1035.1,684.255 1035.66,684.255 1036.22,684.255 1036.78,684.255 1037.34,684.255 1037.9,684.255 1038.46,684.255 1039.02,684.255 1039.58,684.255 1040.14,684.255 1040.7,684.255 1041.26,684.255 1041.82,684.255 1042.38,684.255 1042.93,684.255 1043.49,684.255 1044.05,684.255 1044.61,684.255 1045.17,684.255 1045.73,684.255 1046.29,684.255 1046.85,684.255 1047.41,684.255 1047.97,684.255 1048.53,684.255 1049.09,684.255 1049.65,684.255 1050.2,684.255 1050.76,684.255 1051.32,684.255 1051.88,684.255 1052.44,684.255 1053,684.255 1053.56,684.255 1054.12,684.255 1054.68,684.255 1055.24,684.255 1055.8,684.255 1056.36,684.255 1056.92,684.255 1057.48,684.255 1058.03,684.255 1058.59,684.255 1059.15,684.255 1059.71,684.255 1060.27,684.255 1060.83,684.255 1061.39,684.255 1061.95,684.255 1062.51,684.255 1063.07,684.255 1063.63,684.255 1064.19,684.255 1064.75,684.255 1065.3,684.255 1065.86,684.255 1066.42,684.255 1066.98,684.255 1067.54,684.255 1068.1,684.255 1068.66,684.255 1069.22,684.255 1069.78,684.255 1070.34,684.255 1070.9,684.255 1071.46,684.255 1072.02,684.255 1072.57,684.255 1073.13,684.255 1073.69,684.255 1074.25,684.255 1074.81,684.255 1075.37,684.255 1075.93,684.255 1076.49,684.255 1077.05,684.255 1077.61,684.255 1078.17,684.255 1078.73,684.255 1079.29,684.255 1079.85,684.255 1080.4,684.255 1080.96,684.255 1081.52,684.255 1082.08,684.255 1082.64,684.255 1083.2,684.255 1083.76,684.255 1084.32,684.255 1084.88,684.255 1085.44,684.255 1086,684.255 1086.56,684.255 1087.12,684.255 1087.67,684.255 1088.23,684.255 1088.79,684.255 1089.35,684.255 1089.91,684.255 1090.47,684.255 1091.03,684.255 1091.59,684.255 1092.15,684.255 1092.71,684.255 1093.27,684.255 1093.83,684.255 1094.39,684.255 1094.94,684.255 1095.5,684.255 1096.06,684.255 1096.62,684.255 1097.18,684.255 1097.74,684.255 1098.3,684.255 1098.86,684.255 1099.42,684.255 1099.98,684.255 1100.54,684.255 1101.1,684.255 1101.66,684.255 1102.22,684.255 1102.77,684.255 1103.33,684.255 1103.89,684.255 1104.45,684.255 1105.01,684.255 1105.57,684.255 1106.13,684.255 1106.69,684.255 1107.25,684.255 1107.81,684.255 1108.37,684.255 1108.93,684.255 1109.49,684.255 1110.04,684.255 1110.6,684.255 1111.16,684.255 1111.72,684.255 1112.28,684.255 1112.84,684.255 1113.4,684.255 1113.96,684.255 1114.52,684.255 1115.08,684.255 1115.64,684.255 1116.2,684.255 1116.76,684.255 1117.31,684.255 1117.87,684.255 1118.43,684.255 1118.99,684.255 1119.55,684.255 1120.11,684.255 1120.67,684.255 1121.23,684.255 1121.79,684.255 1122.35,684.255 1122.91,684.255 1123.47,684.255 1124.03,684.255 1124.59,684.255 1125.14,684.255 1125.7,684.255 1126.26,684.255 1126.82,684.255 1127.38,684.255 1127.94,684.255 1128.5,684.255 1129.06,684.255 1129.62,684.255 1130.18,684.255 1130.74,684.255 1131.3,684.255 1131.86,684.255 1132.41,684.255 1132.97,684.255 1133.53,684.255 1134.09,684.255 1134.65,684.255 1135.21,684.255 1135.77,684.255 1136.33,684.255 1136.89,684.255 1137.45,684.255 1138.01,684.255 1138.57,684.255 1139.13,684.255 1139.68,684.255 1140.24,684.255 1140.8,684.255 1141.36,684.255 1141.92,684.255 1142.48,684.255 1143.04,684.255 1143.6,684.255 1144.16,684.255 1144.72,684.255 1145.28,684.255 1145.84,684.255 1146.4,684.255 1146.96,684.255 1147.51,684.255 1148.07,684.255 1148.63,684.255 1149.19,684.255 1149.75,684.255 1150.31,684.255 1150.87,684.255 1151.43,684.255 1151.99,684.255 1152.55,684.255 1153.11,684.255 1153.67,684.255 1154.23,684.255 1154.78,684.255 1155.34,684.255 1155.9,684.255 1156.46,684.255 1157.02,684.255 1157.58,684.255 1158.14,684.255 1158.7,684.255 1159.26,684.255 1159.82,684.255 1160.38,684.255 1160.94,684.255 1161.5,684.255 1162.05,684.255 1162.61,684.255 1163.17,684.255 1163.73,684.255 1164.29,684.255 1164.85,684.255 1165.41,684.255 1165.97,684.255 1166.53,684.255 1167.09,684.255 1167.65,684.255 1168.21,684.255 1168.77,684.255 1169.33,684.255 1169.88,684.255 1170.44,684.255 1171,684.255 1171.56,684.255 1172.12,684.255 1172.68,684.255 1173.24,684.255 1173.8,684.255 1174.36,684.255 1174.92,684.255 1175.48,684.255 1176.04,684.255 1176.6,684.255 1177.15,684.255 1177.71,684.255 1178.27,684.255 1178.83,684.255 1179.39,684.255 1179.95,684.255 1180.51,684.255 1181.07,684.255 1181.63,684.255 1182.19,684.255 1182.75,684.255 1183.31,684.255 1183.87,684.255 1184.43,684.255 1184.98,684.255 1185.54,684.255 1186.1,684.255 1186.66,684.255 1187.22,684.255 1187.78,684.255 1188.34,684.255 1188.9,684.255 1189.46,684.255 1190.02,684.255 1190.58,684.255 1191.14,684.255 1191.7,684.255 1192.25,684.255 1192.81,684.255 1193.37,684.255 1193.93,684.255 1194.49,684.255 1195.05,684.255 1195.61,684.255 1196.17,684.255 1196.73,684.255 1197.29,684.255 1197.85,684.255 1198.41,684.255 1198.97,684.255 1199.52,684.255 1200.08,684.255 1200.64,684.255 1201.2,684.255 1201.76,684.255 1202.32,684.255 1202.88,684.255 1203.44,684.255 1204,684.255 1204.56,684.255 1205.12,684.255 1205.68,684.255 1206.24,684.255 1206.8,684.255 1207.35,684.255 1207.91,684.255 1208.47,684.255 1209.03,684.255 1209.59,684.255 1210.15,684.255 1210.71,684.255 1211.27,684.255 1211.83,684.255 1212.39,684.255 1212.95,684.255 1213.51,684.255 1214.07,684.255 1214.62,684.255 1215.18,684.255 1215.74,684.255 1216.3,684.255 1216.86,684.255 1217.42,684.255 1217.98,684.255 1218.54,684.255 1219.1,684.255 1219.66,684.255 1220.22,684.255 1220.78,684.255 1221.34,684.255 1221.89,684.255 1222.45,684.255 1223.01,684.255 1223.57,684.255 1224.13,684.255 1224.69,684.255 1225.25,684.255 1225.81,684.255 1226.37,684.255 1226.93,684.255 1227.49,684.255 1228.05,684.255 1228.61,684.255 1229.17,684.255 1229.72,684.255 1230.28,684.255 1230.84,684.255 1231.4,684.255 1231.96,684.255 1232.52,684.255 1233.08,684.255 1233.64,684.255 1234.2,684.255 1234.76,684.255 1235.32,684.255 1235.88,684.255 1236.44,684.255 1236.99,684.255 1237.55,684.255 1238.11,684.255 1238.67,684.255 1239.23,684.255 1239.79,684.255 1240.35,684.255 1240.91,684.255 1241.47,684.255 1242.03,684.255 1242.59,684.255 1243.15,684.255 1243.71,684.255 1244.26,684.255 1244.82,684.255 1245.38,684.255 1245.94,684.255 1246.5,684.255 1247.06,684.255 1247.62,684.255 1248.18,684.255 1248.74,684.255 1249.3,684.255 1249.86,684.255 1250.42,684.255 1250.98,684.255 1251.54,684.255 1252.09,684.255 1252.65,684.255 1253.21,684.255 1253.77,684.255 1254.33,684.255 1254.89,684.255 1255.45,684.255 1256.01,684.255 1256.57,684.255 1257.13,684.255 1257.69,684.255 1258.25,684.255 1258.81,684.255 1259.36,684.255 1259.92,684.255 1260.48,684.255 1261.04,684.255 1261.6,684.255 1262.16,684.255 1262.72,684.255 1263.28,684.255 1263.84,684.255 1264.4,684.255 1264.96,684.255 1265.52,684.255 1266.08,684.255 1266.63,684.255 1267.19,684.255 1267.75,684.255 1268.31,684.255 1268.87,684.255 1269.43,684.255 1269.99,684.255 1270.55,684.255 1271.11,684.255 1271.67,684.255 1272.23,684.255 1272.79,684.255 1273.35,684.255 1273.91,684.255 1274.46,684.255 1275.02,684.255 1275.58,684.255 1276.14,684.255 1276.7,684.255 1277.26,684.255 1277.82,684.255 1278.38,684.255 1278.94,684.255 1279.5,684.255 1280.06,684.255 1280.62,684.255 1281.18,684.255 1281.73,684.255 1282.29,684.255 1282.85,684.255 1283.41,684.255 1283.97,684.255 1284.53,684.255 1285.09,684.255 1285.65,684.255 1286.21,684.255 1286.77,684.255 1287.33,684.255 1287.89,684.255 1288.45,684.255 1289,684.255 1289.56,684.255 1290.12,684.255 1290.68,684.255 1291.24,684.255 1291.8,684.255 1292.36,684.255 1292.92,684.255 1293.48,684.255 1294.04,684.255 1294.6,684.255 1295.16,684.255 1295.72,684.255 1296.28,684.255 1296.83,684.255 1297.39,684.255 1297.95,684.255 1298.51,684.255 1299.07,684.255 1299.63,684.255 1300.19,684.255 1300.75,684.255 1301.31,684.255 1301.87,684.255 1302.43,684.255 1302.99,684.255 1303.55,684.255 1304.1,684.255 1304.66,684.255 1305.22,684.255 1305.78,684.255 1306.34,684.255 1306.9,684.255 1307.46,684.255 1308.02,684.255 1308.58,684.255 1309.14,684.255 1309.7,684.255 1310.26,684.255 1310.82,684.255 1311.38,684.255 1311.93,684.255 1312.49,684.255 1313.05,684.255 1313.61,684.255 1314.17,684.255 1314.73,684.255 1315.29,684.255 1315.85,684.255 1316.41,684.255 1316.97,684.255 1317.53,684.255 1318.09,684.255 1318.65,684.255 1319.2,684.255 1319.76,684.255 1320.32,684.255 1320.88,684.255 1321.44,684.255 1322,684.255 1322.56,684.255 1323.12,684.255 1323.68,684.255 1324.24,684.255 1324.8,684.255 1325.36,684.255 1325.92,684.255 1326.47,684.255 1327.03,684.255 1327.59,684.255 1328.15,684.255 1328.71,684.255 1329.27,684.255 1329.83,684.255 1330.39,684.255 1330.95,684.255 1331.51,684.255 1332.07,684.255 1332.63,684.255 1333.19,684.255 1333.75,684.255 1334.3,684.255 1334.86,684.255 1335.42,684.255 1335.98,684.255 1336.54,684.255 1337.1,684.255 1337.66,684.255 1338.22,684.255 1338.78,684.255 1339.34,684.255 1339.9,684.255 1340.46,684.255 1341.02,684.255 1341.57,684.255 1342.13,684.255 1342.69,684.255 1343.25,684.255 1343.81,684.255 1344.37,684.255 1344.93,684.255 1345.49,684.255 1346.05,684.255 1346.61,684.255 1347.17,684.255 1347.73,684.255 1348.29,684.255 1348.84,684.255 1349.4,684.255 1349.96,684.255 1350.52,684.255 1351.08,684.255 1351.64,684.255 1352.2,684.255 1352.76,684.255 1353.32,684.255 1353.88,684.255 1354.44,684.255 1355,684.255 1355.56,684.255 1356.12,684.255 1356.67,684.255 1357.23,684.255 1357.79,684.255 1358.35,684.255 1358.91,684.255 1359.47,684.255 1360.03,684.255 1360.59,684.255 1361.15,684.255 1361.71,684.255 1362.27,684.255 1362.83,684.255 1363.39,684.255 1363.94,684.255 1364.5,684.255 1365.06,684.255 1365.62,684.255 1366.18,684.255 1366.74,684.255 1367.3,684.255 1367.86,684.255 1368.42,684.255 1368.98,684.255 1369.54,684.255 1370.1,684.255 1370.66,684.255 1371.21,684.255 1371.77,684.255 1372.33,684.255 1372.89,684.255 1373.45,684.255 1374.01,684.255 1374.57,684.255 1375.13,684.255 1375.69,684.255 1376.25,684.255 1376.81,684.255 1377.37,684.255 1377.93,684.255 1378.49,684.255 1379.04,684.255 1379.6,684.255 1380.16,684.255 1380.72,684.255 1381.28,684.255 1381.84,684.255 1382.4,684.255 1382.96,684.255 1383.52,684.255 1384.08,684.255 1384.64,684.255 1385.2,684.255 1385.76,684.255 1386.31,684.255 1386.87,684.255 1387.43,684.255 1387.99,684.255 1388.55,684.255 1389.11,684.255 1389.67,684.255 1390.23,684.255 1390.79,684.255 1391.35,684.255 1391.91,684.255 1392.47,684.255 1393.03,684.255 1393.58,684.255 1394.14,684.255 1394.7,684.255 1395.26,684.255 1395.82,684.255 1396.38,684.255 1396.94,684.255 1397.5,684.255 1398.06,684.255 1398.62,684.255 1399.18,684.255 1399.74,684.255 1400.3,684.255 1400.86,684.255 1401.41,684.255 1401.97,684.255 1402.53,684.255 1403.09,684.255 1403.65,684.255 1404.21,684.255 1404.77,684.255 1405.33,684.255 1405.89,684.255 1406.45,684.255 1407.01,684.255 1407.57,684.255 1408.13,684.255 1408.68,684.255 1409.24,684.255 1409.8,684.255 1410.36,684.255 1410.92,684.255 1411.48,684.255 1412.04,684.255 1412.6,684.255 1413.16,684.255 1413.72,684.255 1414.28,684.255 1414.84,684.255 1415.4,684.255 1415.95,684.255 1416.51,684.255 1417.07,684.255 1417.63,684.255 1418.19,684.255 1418.75,684.255 1419.31,684.255 1419.87,684.255 1420.43,684.255 1420.99,684.255 1421.55,684.255 1422.11,684.255 1422.67,684.255 1423.23,684.255 1423.78,684.255 1424.34,684.255 1424.9,684.255 1425.46,684.255 1426.02,684.255 1426.58,684.255 1427.14,684.255 1427.7,684.255 1428.26,684.255 1428.82,684.255 1429.38,684.255 1429.94,684.255 1430.5,684.255 1431.05,684.255 1431.61,684.255 1432.17,684.255 1432.73,684.255 1433.29,684.255 1433.85,684.255 1434.41,684.255 1434.97,684.255 1435.53,684.255 1436.09,684.255 1436.65,684.255 1437.21,684.255 1437.77,684.255 1438.33,684.255 1438.88,684.255 1439.44,684.255 1440,684.255 1440.56,684.255 1441.12,684.255 1441.68,684.255 1442.24,684.255 1442.8,684.255 1443.36,684.255 1443.92,684.255 1444.48,684.255 1445.04,684.255 1445.6,684.255 1446.15,684.255 1446.71,684.255 1447.27,684.255 1447.83,684.255 1448.39,684.255 1448.95,684.255 1449.51,684.255 1450.07,684.255 1450.63,684.255 1451.19,684.255 1451.75,684.255 1452.31,684.255 1452.87,684.255 1453.42,684.255 1453.98,684.255 1454.54,684.255 1455.1,684.255 1455.66,684.255 1456.22,684.255 1456.78,684.255 1457.34,684.255 1457.9,684.255 1458.46,684.255 1459.02,684.255 1459.58,684.255 1460.14,684.255 1460.7,684.255 1461.25,684.255 1461.81,684.255 1462.37,684.255 1462.93,684.255 1463.49,684.255 1464.05,684.255 1464.61,684.255 1465.17,684.255 1465.73,684.255 1466.29,684.255 1466.85,684.255 1467.41,684.255 1467.97,684.255 1468.52,684.255 1469.08,684.255 1469.64,684.255 1470.2,684.255 1470.76,684.255 1471.32,684.255 1471.88,684.255 1472.44,684.255 1473,684.255 1473.56,684.255 1474.12,684.255 1474.68,684.255 1475.24,684.255 1475.79,684.255 1476.35,684.255 1476.91,684.255 1477.47,684.255 1478.03,684.255 1478.59,684.255 1479.15,684.255 1479.71,684.255 1480.27,684.255 1480.83,684.255 1481.39,684.255 1481.95,684.255 1482.51,684.255 1483.07,684.255 1483.62,684.255 1484.18,684.255 1484.74,684.255 1485.3,684.255 1485.86,684.255 1486.42,684.255 1486.98,684.255 1487.54,684.255 1488.1,684.255 1488.66,684.255 1489.22,684.255 1489.78,684.255 1490.34,684.255 1490.89,684.255 1491.45,684.255 1492.01,684.255 1492.57,684.255 1493.13,684.255 1493.69,684.255 1494.25,684.255 1494.81,684.255 1495.37,684.255 1495.93,684.255 1496.49,684.255 1497.05,684.255 1497.61,684.255 1498.16,684.255 1498.72,684.255 1499.28,684.255 1499.84,684.255 1500.4,684.255 1500.96,684.255 1501.52,684.255 1502.08,684.255 1502.64,684.255 1503.2,684.255 1503.76,684.255 1504.32,684.255 1504.88,684.255 1505.44,684.255 1505.99,684.255 1506.55,684.255 1507.11,684.255 1507.67,684.255 1508.23,684.255 1508.79,684.255 1509.35,684.255 1509.91,684.255 1510.47,684.255 1511.03,684.255 1511.59,684.255 1512.15,684.255 1512.71,684.255 1513.26,684.255 1513.82,684.255 1514.38,684.255 1514.94,684.255 1515.5,684.255 1516.06,684.255 1516.62,684.255 1517.18,684.255 1517.74,684.255 1518.3,684.255 1518.86,684.255 1519.42,684.255 1519.98,684.255 1520.53,684.255 1521.09,684.255 1521.65,684.255 1522.21,684.255 1522.77,684.255 1523.33,684.255 1523.89,684.255 1524.45,684.255 1525.01,684.255 1525.57,684.255 1526.13,684.255 1526.69,684.255 1527.25,684.255 1527.81,684.255 1528.36,684.255 1528.92,684.255 1529.48,684.255 1530.04,684.255 1530.6,684.255 1531.16,684.255 1531.72,684.255 1532.28,684.255 1532.84,684.255 1533.4,684.255 1533.96,684.255 1534.52,684.255 1535.08,684.255 1535.63,684.255 1536.19,684.255 1536.75,684.255 1537.31,684.255 1537.87,684.255 1538.43,684.255 1538.99,684.255 1539.55,684.255 1540.11,684.255 1540.67,684.255 1541.23,684.255 1541.79,684.255 1542.35,684.255 1542.9,684.255 1543.46,684.255 1544.02,684.255 1544.58,684.255 1545.14,684.255 1545.7,684.255 1546.26,684.255 1546.82,684.255 1547.38,684.255 1547.94,684.255 1548.5,684.255 1549.06,684.255 1549.62,684.255 1550.18,684.255 1550.73,684.255 1551.29,684.255 1551.85,684.255 1552.41,684.255 1552.97,684.255 1553.53,684.255 1554.09,684.255 1554.65,684.255 1555.21,684.255 1555.77,684.255 1556.33,684.255 1556.89,684.255 1557.45,684.255 1558,684.255 1558.56,684.255 1559.12,684.255 1559.68,684.255 1560.24,684.255 1560.8,684.255 1561.36,684.255 1561.92,684.255 1562.48,684.255 1563.04,684.255 1563.6,684.255 1564.16,684.255 1564.72,684.255 1565.28,684.255 1565.83,684.255 1566.39,684.255 1566.95,684.255 1567.51,684.255 1568.07,684.255 1568.63,684.255 1569.19,684.255 1569.75,684.255 1570.31,684.255 1570.87,684.255 1571.43,684.255 1571.99,684.255 1572.55,684.255 1573.1,684.255 1573.66,684.255 1574.22,684.255 1574.78,684.255 1575.34,684.255 1575.9,684.255 1576.46,684.255 1577.02,684.255 1577.58,684.255 1578.14,684.255 1578.7,684.255 1579.26,684.255 1579.82,684.255 1580.37,684.255 1580.93,684.255 1581.49,684.255 1582.05,684.255 1582.61,684.255 1583.17,684.255 1583.73,684.255 1584.29,684.255 1584.85,684.255 1585.41,684.255 1585.97,684.255 1586.53,684.255 1587.09,684.255 1587.65,684.255 1588.2,684.255 1588.76,684.255 1589.32,684.255 1589.88,684.255 1590.44,684.255 1591,684.255 1591.56,684.255 1592.12,684.255 1592.68,684.255 1593.24,684.255 1593.8,684.255 1594.36,684.255 1594.92,684.255 1595.47,684.255 1596.03,684.255 1596.59,684.255 1597.15,684.255 1597.71,684.255 1598.27,684.255 1598.83,684.255 1599.39,684.255 1599.95,684.255 1600.51,684.255 1601.07,684.255 1601.63,684.255 1602.19,684.255 1602.74,684.255 1603.3,684.255 1603.86,684.255 1604.42,684.255 1604.98,684.255 1605.54,684.255 1606.1,684.255 1606.66,684.255 1607.22,684.255 1607.78,684.255 1608.34,684.255 1608.9,684.255 1609.46,684.255 1610.02,684.255 1610.57,684.255 1611.13,684.255 1611.69,684.255 1612.25,684.255 1612.81,684.255 1613.37,684.255 1613.93,684.255 1614.49,684.255 1615.05,684.255 1615.61,684.255 1616.17,684.255 1616.73,684.255 1617.29,684.255 1617.84,684.255 1618.4,684.255 1618.96,684.255 1619.52,684.255 1620.08,684.255 1620.64,684.255 1621.2,684.255 1621.76,684.255 1622.32,684.255 1622.88,684.255 1623.44,684.255 1624,684.255 1624.56,684.255 1625.11,684.255 1625.67,684.255 1626.23,684.255 1626.79,684.255 1627.35,684.255 1627.91,684.255 1628.47,684.255 1629.03,684.255 1629.59,684.255 1630.15,684.255 1630.71,684.255 1631.27,684.255 1631.83,684.255 1632.39,684.255 1632.94,684.255 1633.5,684.255 1634.06,684.255 1634.62,684.255 1635.18,684.255 1635.74,684.255 1636.3,684.255 1636.86,684.255 1637.42,684.255 1637.98,684.255 1638.54,684.255 1639.1,684.255 1639.66,684.255 1640.21,684.255 1640.77,684.255 1641.33,684.255 1641.89,684.255 1642.45,684.255 1643.01,684.255 1643.57,684.255 1644.13,684.255 1644.69,684.255 1645.25,684.255 1645.81,684.255 1646.37,684.255 1646.93,684.255 1647.48,684.255 1648.04,684.255 1648.6,684.255 1649.16,684.255 1649.72,684.255 1650.28,684.255 1650.84,684.255 1651.4,684.255 1651.96,684.255 1652.52,684.255 1653.08,684.255 1653.64,684.255 1654.2,684.255 1654.76,684.255 1655.31,684.255 1655.87,684.255 1656.43,684.255 1656.99,684.255 1657.55,684.255 1658.11,684.255 1658.67,684.255 1659.23,684.255 1659.79,684.255 1660.35,684.255 1660.91,684.255 1661.47,684.255 1662.03,684.255 1662.58,684.255 1663.14,684.255 1663.7,684.255 1664.26,684.255 1664.82,684.255 1665.38,684.255 1665.94,684.255 1666.5,684.255 1667.06,684.255 1667.62,684.255 1668.18,684.255 1668.74,684.255 1669.3,684.255 1669.85,684.255 1670.41,684.255 1670.97,684.255 1671.53,684.255 1672.09,684.255 1672.65,684.255 1673.21,684.255 1673.77,684.255 1674.33,684.255 1674.89,684.255 1675.45,684.255 1676.01,684.255 1676.57,684.255 1677.13,684.255 1677.68,684.255 1678.24,684.255 1678.8,684.255 1679.36,684.255 1679.92,684.255 1680.48,684.255 1681.04,684.255 1681.6,684.255 1682.16,684.255 1682.72,684.255 1683.28,684.255 1683.84,684.255 1684.4,684.255 1684.95,684.255 1685.51,684.255 1686.07,684.255 1686.63,684.255 1687.19,684.255 1687.75,684.255 1688.31,684.255 1688.87,684.255 1689.43,684.255 1689.99,684.255 1690.55,684.255 1691.11,684.255 1691.67,684.255 1692.23,684.255 1692.78,684.255 1693.34,684.255 1693.9,684.255 1694.46,684.255 1695.02,684.255 1695.58,684.255 1696.14,684.255 1696.7,684.255 1697.26,684.255 1697.82,684.255 1698.38,684.255 1698.94,684.255 1699.5,684.255 1700.05,684.255 1700.61,684.255 1701.17,684.255 1701.73,684.255 1702.29,684.255 1702.85,684.255 1703.41,684.255 1703.97,684.255 1704.53,684.255 1705.09,684.255 1705.65,684.255 1706.21,684.255 1706.77,684.255 1707.32,684.255 1707.88,684.255 1708.44,684.255 1709,684.255 1709.56,684.255 1710.12,684.255 1710.68,684.255 1711.24,684.255 1711.8,684.255 1712.36,684.255 1712.92,684.255 1713.48,684.255 1714.04,684.255 1714.6,684.255 1715.15,684.255 1715.71,684.255 1716.27,684.255 1716.83,684.255 1717.39,684.255 1717.95,684.255 1718.51,684.255 1719.07,684.255 1719.63,684.255 1720.19,684.255 1720.75,684.255 1721.31,684.255 1721.87,684.255 1722.42,684.255 1722.98,684.255 1723.54,684.255 1724.1,684.255 1724.66,684.255 1725.22,684.255 1725.78,684.255 1726.34,684.255 1726.9,684.255 1727.46,684.255 1728.02,684.255 1728.58,684.255 1729.14,684.255 1729.69,684.255 1730.25,684.255 1730.81,684.255 1731.37,684.255 1731.93,684.255 1732.49,684.255 1733.05,684.255 1733.61,684.255 1734.17,684.255 1734.73,684.255 1735.29,684.255 1735.85,684.255 1736.41,684.255 1736.97,684.255 1737.52,684.255 1738.08,684.255 1738.64,684.255 1739.2,684.255 1739.76,684.255 1740.32,684.255 1740.88,684.255 1741.44,684.255 1742,684.255 1742.56,684.255 1743.12,684.255 1743.68,684.255 1744.24,684.255 1744.79,684.255 1745.35,684.255 1745.91,684.255 1746.47,684.255 1747.03,684.255 1747.59,684.255 1748.15,684.255 1748.71,684.255 1749.27,684.255 1749.83,684.255 1750.39,684.255 1750.95,684.255 1751.51,684.255 1752.06,684.255 1752.62,684.255 1753.18,684.255 1753.74,684.255 1754.3,684.255 1754.86,684.255 1755.42,684.255 1755.98,684.255 1756.54,684.255 1757.1,684.255 1757.66,684.255 1758.22,684.255 1758.78,684.255 1759.34,684.255 1759.89,684.255 1760.45,684.255 1761.01,684.255 1761.57,684.255 1762.13,684.255 1762.69,684.255 1763.25,684.255 1763.81,684.255 1764.37,684.255 1764.93,684.255 1765.49,684.255 1766.05,684.255 1766.61,684.255 1767.16,684.255 1767.72,684.255 1768.28,684.255 1768.84,684.255 1769.4,684.255 1769.96,684.255 1770.52,684.255 1771.08,684.255 1771.64,684.255 1772.2,684.255 1772.76,684.255 1773.32,684.255 1773.88,684.255 1774.43,684.255 1774.99,684.255 1775.55,684.255 1776.11,684.255 1776.67,684.255 1777.23,684.255 1777.79,684.255 1778.35,684.255 1778.91,684.255 1779.47,684.255 1780.03,684.255 1780.59,684.255 1781.15,684.255 1781.71,684.255 1782.26,684.255 1782.82,684.255 1783.38,684.255 1783.94,684.255 1784.5,684.255 1785.06,684.255 1785.62,684.255 1786.18,684.255 1786.74,684.255 1787.3,684.255 1787.86,684.255 1788.42,684.255 1788.98,684.255 1789.53,684.255 1790.09,684.255 1790.65,684.255 1791.21,684.255 1791.77,684.255 1792.33,684.255 1792.89,684.255 1793.45,684.255 1794.01,684.255 1794.57,684.255 1795.13,684.255 1795.69,684.255 1796.25,684.255 1796.8,684.255 1797.36,684.255 1797.92,684.255 1798.48,684.255 1799.04,684.255 1799.6,684.255 1800.16,684.255 1800.72,684.255 1801.28,684.255 1801.84,684.255 1802.4,684.255 1802.96,684.255 1803.52,684.255 1804.08,684.255 1804.63,684.255 1805.19,684.255 1805.75,684.255 1806.31,684.255 1806.87,684.255 1807.43,684.255 1807.99,684.255 1808.55,684.255 1809.11,684.255 1809.67,684.255 1810.23,684.255 1810.79,684.255 1811.35,684.255 1811.9,684.255 1812.46,684.255 1813.02,684.255 1813.58,684.255 1814.14,684.255 1814.7,684.255 1815.26,684.255 1815.82,684.255 1816.38,684.255 1816.94,684.255 1817.5,684.255 1818.06,684.255 1818.62,684.255 1819.18,684.255 1819.73,684.255 1820.29,684.255 1820.85,684.255 1821.41,684.255 1821.97,684.255 1822.53,684.255 1823.09,684.255 1823.65,684.255 1824.21,684.255 1824.77,684.255 1825.33,684.255 1825.89,684.255 1826.45,684.255 1827,684.255 1827.56,684.255 1828.12,684.255 1828.68,684.255 1829.24,684.255 1829.8,684.255 1830.36,684.255 1830.92,684.255 1831.48,684.255 1832.04,684.255 1832.6,684.255 1833.16,684.255 1833.72,684.255 1834.27,684.255 1834.83,684.255 1835.39,684.255 1835.95,684.255 1836.51,684.255 1837.07,684.255 1837.63,684.255 1838.19,684.255 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.037612120022444 ± 0.024947624415588027\nProjected Energy: -4.018458689238827 ± (0.003676805231322966, 0.004005408280733036)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\ntime_step = determine_constant_time_step(df) the time step\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\ntime_step = determine_constant_time_step(df) the time step\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.13059</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.4184e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.3934e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5359e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.627e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">6.833e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3455e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.363124291613369\n -0.7590191922770853\n  0.1358418221962161\n  0.15789998694608087\n  0.8767114411781307\n  1.530592997097334\n  1.583573261186734\n  3.0728703303258627\n  3.125672653951839\n  4.8621072215621695\n  6.260694850380597\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates. Indexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nFields\n\nspectral_states: Tuple of SpectralStates\nmax_length::Ref{Int}: Maximum length of the simulation\nstep::Ref{Int}: Current step of the simulation\nsimulation_plan: Simulation plan\nreporting_strategy: Reporting strategy\npost_step_strategy: Post-step strategy\nreplica_strategy: Replica strategy\n\nSee also ReplicaStrategy, Rimu.SpectralState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy for ProjectorMonteCarloProblem. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\nSee also ProjectorMonteCarloProblem, ReportToFile.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy for ProjectorMonteCarloProblem that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df, save_df, ReportDFAndInfo, and ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data during a simulation of a ProjectorMonteCarloProblem.\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nExtended help\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nRimu.refine_reporting_strategy\nRimu.report!\nRimu.report_after_step!\nRimu.finalize_report!\nRimu.reporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with Rimu.advance!.\n\nFields\n\nhamiltonian: Hamiltonian\nalgorithm: Algorithm\nv: Vector\npv: Previous vector\nwm: Working memory\nshift_parameters: Shift parameters\nid::String: id is appended to column names\n\nSee also SpectralStrategy, ReplicaStrategy, Rimu.SpectralState, Rimu.ReplicaState, Rimu.replica_stats, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several Rimu.SingleStates representing the ground state and excited states of a single replica. Indexing the SpectralState state[i] returns the ith SingleState.\n\nFields\n\nsingle_states: Tuple of SingleStates\nspectral_strategy: Strategy for computing the spectral states\nid::String: Identifies the replica\n\nSee also SpectralStrategy, Rimu.ReplicaState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after Rimu.reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an r×s AbstractMatrix of configuration vectors from the state, or the result of solve(::ProjectorMonteCarloProblem). The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also ProjectorMonteCarloProblem, Rimu.PMCSimulation, Rimu.SingleState, Rimu.ReplicaState, Rimu.SpectralState.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
