var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21638770040302407 ± 0.0013273372175762281\n   G2(1) = 0.9165942390162679 ± 0.0006998272974110984\n   G2(2) = 0.9806763965478463 ± 0.0005903875859978829\n   G2(3) = 0.9890710284687472 ± 0.0009351513313412883\n   G2(4) = 0.9806763965478463 ± 0.0005903875859978829\n   G2(5) = 0.9165942390162679 ± 0.0006998272974110984\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.994797372987496 ± 0.13622128175876427\n   Replica 2: -4.047426817107383 ± 0.1346442686724543\n   Replica 3: -4.040307160429971 ± 0.13241944366322078\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip180\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip180)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip181\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip180)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip182\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.2 2211.02,1003.2 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.569 2211.02,745.569 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.937 2211.02,487.937 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.305 2211.02,230.305 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip180)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.2 423.181,1003.2 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.569 423.181,745.569 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.937 423.181,487.937 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.305 423.181,230.305 \"/>\n<path clip-path=\"url(#clip180)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M290.043 1016.55 L306.363 1016.55 L306.363 1020.48 L284.418 1020.48 L284.418 1016.55 Q287.08 1013.79 291.664 1009.16 Q296.27 1004.51 297.451 1003.17 Q299.696 1000.64 300.576 998.908 Q301.478 997.148 301.478 995.459 Q301.478 992.704 299.534 990.968 Q297.613 989.232 294.511 989.232 Q292.312 989.232 289.858 989.996 Q287.427 990.76 284.65 992.31 L284.65 987.588 Q287.474 986.454 289.927 985.875 Q292.381 985.297 294.418 985.297 Q299.789 985.297 302.983 987.982 Q306.177 990.667 306.177 995.158 Q306.177 997.287 305.367 999.209 Q304.58 1001.11 302.474 1003.7 Q301.895 1004.37 298.793 1007.59 Q295.691 1010.78 290.043 1016.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M316.224 985.922 L334.58 985.922 L334.58 989.857 L320.506 989.857 L320.506 998.329 Q321.524 997.982 322.543 997.82 Q323.562 997.635 324.58 997.635 Q330.367 997.635 333.747 1000.81 Q337.126 1003.98 337.126 1009.39 Q337.126 1014.97 333.654 1018.07 Q330.182 1021.15 323.862 1021.15 Q321.687 1021.15 319.418 1020.78 Q317.173 1020.41 314.765 1019.67 L314.765 1014.97 Q316.849 1016.11 319.071 1016.66 Q321.293 1017.22 323.77 1017.22 Q327.774 1017.22 330.112 1015.11 Q332.45 1013 332.45 1009.39 Q332.45 1005.78 330.112 1003.68 Q327.774 1001.57 323.77 1001.57 Q321.895 1001.57 320.02 1001.99 Q318.168 1002.4 316.224 1003.28 L316.224 985.922 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M356.339 989 Q352.728 989 350.899 992.565 Q349.094 996.107 349.094 1003.24 Q349.094 1010.34 350.899 1013.91 Q352.728 1017.45 356.339 1017.45 Q359.973 1017.45 361.779 1013.91 Q363.608 1010.34 363.608 1003.24 Q363.608 996.107 361.779 992.565 Q359.973 989 356.339 989 M356.339 985.297 Q362.149 985.297 365.205 989.903 Q368.284 994.486 368.284 1003.24 Q368.284 1011.96 365.205 1016.57 Q362.149 1021.15 356.339 1021.15 Q350.529 1021.15 347.45 1016.57 Q344.395 1011.96 344.395 1003.24 Q344.395 994.486 347.45 989.903 Q350.529 985.297 356.339 985.297 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M286.062 728.289 L304.418 728.289 L304.418 732.225 L290.344 732.225 L290.344 740.697 Q291.363 740.35 292.381 740.187 Q293.4 740.002 294.418 740.002 Q300.205 740.002 303.585 743.174 Q306.964 746.345 306.964 751.761 Q306.964 757.34 303.492 760.442 Q300.02 763.521 293.701 763.521 Q291.525 763.521 289.256 763.15 Q287.011 762.78 284.603 762.039 L284.603 757.34 Q286.687 758.474 288.909 759.03 Q291.131 759.586 293.608 759.586 Q297.613 759.586 299.951 757.479 Q302.288 755.373 302.288 751.761 Q302.288 748.15 299.951 746.044 Q297.613 743.937 293.608 743.937 Q291.733 743.937 289.858 744.354 Q288.006 744.771 286.062 745.65 L286.062 728.289 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M326.177 731.368 Q322.566 731.368 320.737 734.933 Q318.932 738.475 318.932 745.604 Q318.932 752.711 320.737 756.275 Q322.566 759.817 326.177 759.817 Q329.811 759.817 331.617 756.275 Q333.446 752.711 333.446 745.604 Q333.446 738.475 331.617 734.933 Q329.811 731.368 326.177 731.368 M326.177 727.664 Q331.987 727.664 335.043 732.271 Q338.122 736.854 338.122 745.604 Q338.122 754.331 335.043 758.937 Q331.987 763.521 326.177 763.521 Q320.367 763.521 317.288 758.937 Q314.233 754.331 314.233 745.604 Q314.233 736.854 317.288 732.271 Q320.367 727.664 326.177 727.664 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M356.339 731.368 Q352.728 731.368 350.899 734.933 Q349.094 738.475 349.094 745.604 Q349.094 752.711 350.899 756.275 Q352.728 759.817 356.339 759.817 Q359.973 759.817 361.779 756.275 Q363.608 752.711 363.608 745.604 Q363.608 738.475 361.779 734.933 Q359.973 731.368 356.339 731.368 M356.339 727.664 Q362.149 727.664 365.205 732.271 Q368.284 736.854 368.284 745.604 Q368.284 754.331 365.205 758.937 Q362.149 763.521 356.339 763.521 Q350.529 763.521 347.45 758.937 Q344.395 754.331 344.395 745.604 Q344.395 736.854 347.45 732.271 Q350.529 727.664 356.339 727.664 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M284.835 470.657 L307.057 470.657 L307.057 472.648 L294.511 505.217 L289.627 505.217 L301.432 474.592 L284.835 474.592 L284.835 470.657 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M316.224 470.657 L334.58 470.657 L334.58 474.592 L320.506 474.592 L320.506 483.064 Q321.524 482.717 322.543 482.555 Q323.562 482.37 324.58 482.37 Q330.367 482.37 333.747 485.541 Q337.126 488.713 337.126 494.129 Q337.126 499.708 333.654 502.81 Q330.182 505.888 323.862 505.888 Q321.687 505.888 319.418 505.518 Q317.173 505.148 314.765 504.407 L314.765 499.708 Q316.849 500.842 319.071 501.398 Q321.293 501.953 323.77 501.953 Q327.774 501.953 330.112 499.847 Q332.45 497.74 332.45 494.129 Q332.45 490.518 330.112 488.412 Q327.774 486.305 323.77 486.305 Q321.895 486.305 320.02 486.722 Q318.168 487.139 316.224 488.018 L316.224 470.657 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M356.339 473.736 Q352.728 473.736 350.899 477.301 Q349.094 480.842 349.094 487.972 Q349.094 495.078 350.899 498.643 Q352.728 502.185 356.339 502.185 Q359.973 502.185 361.779 498.643 Q363.608 495.078 363.608 487.972 Q363.608 480.842 361.779 477.301 Q359.973 473.736 356.339 473.736 M356.339 470.032 Q362.149 470.032 365.205 474.639 Q368.284 479.222 368.284 487.972 Q368.284 496.699 365.205 501.305 Q362.149 505.888 356.339 505.888 Q350.529 505.888 347.45 501.305 Q344.395 496.699 344.395 487.972 Q344.395 479.222 347.45 474.639 Q350.529 470.032 356.339 470.032 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M256.664 243.65 L264.303 243.65 L264.303 217.284 L255.992 218.951 L255.992 214.692 L264.256 213.025 L268.932 213.025 L268.932 243.65 L276.571 243.65 L276.571 247.585 L256.664 247.585 L256.664 243.65 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M296.015 216.104 Q292.404 216.104 290.576 219.668 Q288.77 223.21 288.77 230.34 Q288.77 237.446 290.576 241.011 Q292.404 244.553 296.015 244.553 Q299.65 244.553 301.455 241.011 Q303.284 237.446 303.284 230.34 Q303.284 223.21 301.455 219.668 Q299.65 216.104 296.015 216.104 M296.015 212.4 Q301.826 212.4 304.881 217.006 Q307.96 221.59 307.96 230.34 Q307.96 239.066 304.881 243.673 Q301.826 248.256 296.015 248.256 Q290.205 248.256 287.127 243.673 Q284.071 239.066 284.071 230.34 Q284.071 221.59 287.127 217.006 Q290.205 212.4 296.015 212.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M326.177 216.104 Q322.566 216.104 320.737 219.668 Q318.932 223.21 318.932 230.34 Q318.932 237.446 320.737 241.011 Q322.566 244.553 326.177 244.553 Q329.811 244.553 331.617 241.011 Q333.446 237.446 333.446 230.34 Q333.446 223.21 331.617 219.668 Q329.811 216.104 326.177 216.104 M326.177 212.4 Q331.987 212.4 335.043 217.006 Q338.122 221.59 338.122 230.34 Q338.122 239.066 335.043 243.673 Q331.987 248.256 326.177 248.256 Q320.367 248.256 317.288 243.673 Q314.233 239.066 314.233 230.34 Q314.233 221.59 317.288 217.006 Q320.367 212.4 326.177 212.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M356.339 216.104 Q352.728 216.104 350.899 219.668 Q349.094 223.21 349.094 230.34 Q349.094 237.446 350.899 241.011 Q352.728 244.553 356.339 244.553 Q359.973 244.553 361.779 241.011 Q363.608 237.446 363.608 230.34 Q363.608 223.21 361.779 219.668 Q359.973 216.104 356.339 216.104 M356.339 212.4 Q362.149 212.4 365.205 217.006 Q368.284 221.59 368.284 230.34 Q368.284 239.066 365.205 243.673 Q362.149 248.256 356.339 248.256 Q350.529 248.256 347.45 243.673 Q344.395 239.066 344.395 230.34 Q344.395 221.59 347.45 217.006 Q350.529 212.4 356.339 212.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip182)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.305 4017.76,230.305 \"/>\n<polyline clip-path=\"url(#clip182)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1247.01 460.533,1246.43 461.101,1244.73 461.669,1241.96 462.238,1240.17 462.806,1239.35 463.375,1238.41 463.943,1237.41 464.511,1236.3 465.08,1235.09 465.648,1233.76 466.216,1232.32 466.785,1230.76 467.353,1228.04 467.921,1225.19 468.49,1223.21 469.058,1221.07 469.626,1217.79 470.195,1215.43 470.763,1211.88 471.331,1208.17 471.9,1204.32 472.468,1200.34 473.036,1197.21 473.605,1193.89 474.173,1190.37 474.741,1186.6 475.31,1182.73 475.878,1177.58 476.446,1173.27 477.015,1168.7 477.583,1163.96 478.152,1159.06 478.72,1152.92 479.288,1147.57 479.857,1139.95 480.425,1133.09 480.993,1126.07 481.562,1116.71 482.13,1109.22 482.698,1101.58 483.267,1093.82 483.835,1085.67 484.403,1076.33 484.972,1067.89 485.54,1060.28 486.108,1049.41 486.677,1041.49 487.245,1031.32 487.813,1023.16 488.382,1013.81 488.95,1005.28 489.518,996.626 490.087,984.884 490.655,975.987 491.224,966.017 491.792,953.938 492.36,939.883 492.929,930.006 493.497,916.837 494.065,907.86 494.634,897.874 495.202,885.634 495.77,875.597 496.339,862.403 496.907,851.542 497.475,840.528 498.044,831.705 498.612,821.634 499.18,811.703 499.749,802.872 500.317,793.865 500.885,783.858 501.454,774.839 502.022,764.898 502.59,755.861 503.159,744.857 503.727,733.913 504.295,719.04 504.864,709.535 505.432,701.285 506.001,691.816 506.569,678.474 507.137,669.504 507.706,660.413 508.274,649.729 508.842,641.175 509.411,633.858 509.979,625.311 510.547,617.977 511.116,607.591 511.684,599.51 512.252,592.514 512.821,582.59 513.389,575.982 513.957,566.239 514.526,559.636 515.094,552.232 515.662,541.78 516.231,532.509 516.799,524.58 517.367,515.907 517.936,509.352 518.504,502.151 519.072,493.958 519.641,488.939 520.209,483.033 520.778,476.14 521.346,470.528 521.914,465.82 522.483,459.256 523.051,455.01 523.619,450.943 524.188,444.826 524.756,440.572 525.324,435.595 525.893,431.677 526.461,424.577 527.029,419.977 527.598,416.377 528.166,411.953 528.734,407.386 529.303,401.978 529.871,398.844 530.439,395.697 531.008,392.474 531.576,390.484 532.144,386.168 532.713,380.146 533.281,376.252 533.85,373.328 534.418,368.5 534.986,365.806 535.555,363.047 536.123,359.277 536.691,355.968 537.26,353.637 537.828,350.418 538.396,348.314 538.965,345.22 539.533,341.07 540.101,339.225 540.67,337.15 541.238,335.251 541.806,331.387 542.375,329.635 542.943,326.764 543.511,325.032 544.08,321.233 544.648,318.732 545.216,317.231 545.785,313.683 546.353,311.418 546.921,309.956 547.49,304.378 548.058,302.5 548.627,301.412 549.195,300.558 549.763,298.523 550.332,299.973 550.9,300.91 551.468,298.619 552.037,294.38 552.605,294.467 553.173,293.435 553.742,292.629 554.31,293.727 554.878,292.306 555.447,290.298 556.015,288.117 556.583,286.198 557.152,283.468 557.72,282.898 558.288,281.99 558.857,279.111 559.425,276.306 559.993,277.781 560.562,279.148 561.13,276.388 561.698,273.749 562.267,274.325 562.835,272.665 563.404,272.067 563.972,271.52 564.54,272.167 565.109,272.596 565.677,271.806 566.245,271.158 566.814,270.445 567.382,267.865 567.95,267.513 568.519,264.897 569.087,264.539 569.655,263.145 570.224,263.911 570.792,263.487 571.36,263.13 571.929,264.809 572.497,262.137 573.065,260.566 573.634,262.11 574.202,262.57 574.77,262.03 575.339,262.566 575.907,262.719 576.476,261.837 577.044,261.177 577.612,257.27 578.181,254.899 578.749,255.816 579.317,254.386 579.886,251.875 580.454,250.759 581.022,249.706 581.591,246.794 582.159,249.226 582.727,250.354 583.296,250.153 583.864,251.076 584.432,249.914 585.001,247.658 585.569,246.53 586.137,245.715 586.706,244.621 587.274,243.752 587.842,239.843 588.411,239.138 588.979,239.669 589.547,240.083 590.116,239.569 590.684,240.093 591.253,239.595 591.821,240.17 592.389,239.63 592.958,239.155 593.526,238.58 594.094,239.263 594.663,239.856 595.231,238.269 595.799,237.833 596.368,236.552 596.936,237.128 597.504,236.555 598.073,236.261 598.641,240.021 599.209,241.633 599.778,240.915 600.346,241.162 600.914,241.479 601.483,240.532 602.051,240.82 602.619,240.11 603.188,241.411 603.756,243.768 604.325,242.933 604.893,244.242 605.461,244.407 606.03,240.398 606.598,239.765 607.166,242.233 607.735,242.344 608.303,242.347 608.871,241.56 609.44,242.613 610.008,241.522 610.576,242.931 611.145,240.831 611.713,239.779 612.281,239.961 612.85,240.542 613.418,240.719 613.986,242.833 614.555,243.962 615.123,242.814 615.691,244.843 616.26,242.529 616.828,243.557 617.396,242.443 617.965,243.429 618.533,244.426 619.102,244.402 619.67,243.316 620.238,244.328 620.807,243.1 621.375,243.13 621.943,243.014 622.512,242.782 623.08,240.429 623.648,240.242 624.217,242.369 624.785,243.168 625.353,241.816 625.922,239.708 626.49,239.726 627.058,240.707 627.627,239.641 628.195,236.555 628.763,234.742 629.332,234.028 629.9,233.432 630.468,233.792 631.037,234.238 631.605,233.331 632.173,233.713 632.742,231.944 633.31,231.457 633.879,231.685 634.447,232.263 635.015,233.668 635.584,233.989 636.152,236.468 636.72,233.818 637.289,233.909 637.857,234.123 638.425,234.451 638.994,233.647 639.562,235.05 640.13,235.304 640.699,235.355 641.267,235.503 641.835,235.849 642.404,235.143 642.972,233.097 643.54,232.594 644.109,233.937 644.677,236.348 645.245,235.523 645.814,235.708 646.382,236.819 646.951,236.948 647.519,236.2 648.087,234.161 648.656,234.51 649.224,235.682 649.792,234.745 650.361,233.806 650.929,234.142 651.497,233.466 652.066,232.89 652.634,233.248 653.202,233.595 653.771,234.793 654.339,234.016 654.907,234.333 655.476,235.724 656.044,230.685 656.612,230.038 657.181,230.642 657.749,231.241 658.317,223.396 658.886,224.469 659.454,227.484 660.022,228.3 660.591,230.975 661.159,231.645 661.728,231.014 662.296,231.72 662.864,231.384 663.433,234.269 664.001,234.684 664.569,234.111 665.138,234.272 665.706,234.517 666.274,234.852 666.843,235.01 667.411,234.943 667.979,237.475 668.548,237.337 669.116,237.605 669.684,237.498 670.253,237.492 670.821,236.436 671.389,236.66 671.958,237.827 672.526,237.693 673.094,238.73 673.663,240.839 674.231,240.587 674.799,239.324 675.368,238.227 675.936,238.026 676.505,236.05 677.073,236.172 677.641,236.132 678.21,234.137 678.778,232.134 679.346,233.317 679.915,235.569 680.483,234.701 681.051,235.881 681.62,238.778 682.188,238.53 682.756,235.235 683.325,235.987 683.893,236.694 684.461,235.75 685.03,234.665 685.598,233.986 686.166,234.246 686.735,234.267 687.303,233.235 687.871,234.308 688.44,234.42 689.008,233.53 689.577,233.465 690.145,232.627 690.713,232.692 691.282,231.947 691.85,232.201 692.418,229.277 692.987,229.621 693.555,229.215 694.123,229.675 694.692,230.015 695.26,230.324 695.828,230.614 696.397,230.751 696.965,232.014 697.533,233.413 698.102,235.346 698.67,235.598 699.238,234.572 699.807,234.684 700.375,234.42 700.943,233.463 701.512,233.485 702.08,232.411 702.648,232.672 703.217,230.731 703.785,231.301 704.354,231.709 704.922,233.042 705.49,235.315 706.059,234.08 706.627,236.102 707.195,234.881 707.764,231.629 708.332,230.727 708.9,231.879 709.469,233.157 710.037,232.56 710.605,233.564 711.174,232.671 711.742,233.78 712.31,231.516 712.879,232.474 713.447,233.646 714.015,233.726 714.584,237.892 715.152,236.544 715.72,237.336 716.289,236.347 716.857,236.325 717.425,232.116 717.994,230.246 718.562,232.853 719.131,231.92 719.699,232.106 720.267,233.197 720.836,231.273 721.404,232.573 721.972,233.891 722.541,233.28 723.109,236.497 723.677,239.321 724.246,238.039 724.814,239.908 725.382,237.41 725.951,238.133 726.519,235.753 727.087,236.496 727.656,237.212 728.224,235.767 728.792,236.648 729.361,235.435 729.929,235.272 730.497,236.371 731.066,236.073 731.634,235.732 732.203,237.631 732.771,239.309 733.339,240.999 733.908,238.321 734.476,237.701 735.044,241.303 735.613,242.651 736.181,241.93 736.749,241.111 737.318,239.418 737.886,238.791 738.454,237.311 739.023,235.824 739.591,237.7 740.159,238.282 740.728,235.62 741.296,235.43 741.864,235.353 742.433,232.787 743.001,232.556 743.569,233.576 744.138,235.562 744.706,234.16 745.274,233.915 745.843,232.537 746.411,232.589 746.98,232.514 747.548,233.659 748.116,231.387 748.685,231.308 749.253,231.215 749.821,229.097 750.39,227.27 750.958,226.243 751.526,229.835 752.095,228.929 752.663,230.003 753.231,231.275 753.8,230.284 754.368,231.413 754.936,232.49 755.505,237.599 756.073,237.198 756.641,236.802 757.21,236.64 757.778,236.153 758.346,235.723 758.915,233.39 759.483,233.276 760.052,230.939 760.62,229.801 761.188,230.828 761.757,230.654 762.325,231.691 762.893,232.811 763.462,233.674 764.03,234.273 764.598,232.792 765.167,233.632 765.735,231.525 766.303,232.497 766.872,233.303 767.44,232.176 768.008,229.799 768.577,228.701 769.145,228.643 769.713,227.471 770.282,226.587 770.85,228.092 771.418,227.216 771.987,227.464 772.555,228.546 773.123,229.864 773.692,232.028 774.26,234.125 774.829,234.868 775.397,234.706 775.965,233.482 776.534,232.246 777.102,233.23 777.67,233.877 778.239,234.765 778.807,231.537 779.375,231.582 779.944,231.435 780.512,231.375 781.08,231.138 781.649,231.093 782.217,230.883 782.785,231.792 783.354,230.562 783.922,228.391 784.49,231.495 785.059,231.239 785.627,232.057 786.195,230.851 786.764,230.946 787.332,229.865 787.9,228.97 788.469,229.385 789.037,228.252 789.606,228.218 790.174,228.425 790.742,229.76 791.311,228.958 791.879,229.019 792.447,228.027 793.016,230.176 793.584,229.112 794.152,229.015 794.721,227.856 795.289,229.09 795.857,228.111 796.426,228.348 796.994,223.437 797.562,225.059 798.131,228.403 798.699,227.483 799.267,227.738 799.836,229.074 800.404,230.225 800.972,229.285 801.541,230.422 802.109,231.586 802.678,230.399 803.246,232.506 803.814,233.314 804.383,233.247 804.951,234.116 805.519,233.734 806.088,233.825 806.656,234.919 807.224,234.771 807.793,235.63 808.361,234.34 808.929,234.048 809.498,234.933 810.066,235.636 810.634,235.079 811.203,234.608 811.771,231.132 812.339,232.035 812.908,230.756 813.476,229.677 814.044,228.771 814.613,228.825 815.181,226.751 815.749,226.165 816.318,225.578 816.886,225.828 817.455,225.308 818.023,226.637 818.591,227.944 819.16,228.107 819.728,230.299 820.296,230.307 820.865,230.158 821.433,229.193 822.001,229.589 822.57,227.806 823.138,227.048 823.706,226.113 824.275,225.586 824.843,224.082 825.411,223.805 825.98,220.265 826.548,221.256 827.116,220.974 827.685,221.874 828.253,221.683 828.821,222.506 829.39,222.202 829.958,220.098 830.526,222.067 831.095,221.852 831.663,222.437 832.232,221.11 832.8,223.138 833.368,222.574 833.937,222.384 834.505,223.158 835.073,227.167 835.642,228.562 836.21,227.983 836.778,229.236 837.347,231.622 837.915,230.562 838.483,231.734 839.052,230.946 839.62,229.905 840.188,232.271 840.757,230.294 841.325,230.564 841.893,229.731 842.462,230.965 843.03,232.091 843.598,232.057 844.167,231.162 844.735,231.241 845.304,231.392 845.872,231.751 846.44,232.115 847.009,231.458 847.577,231.668 848.145,232.736 848.714,232.702 849.282,232.706 849.85,232.77 850.419,233.854 850.987,236.887 851.555,237.731 852.124,237.69 852.692,240.504 853.26,239.92 853.829,238.452 854.397,239.158 854.965,237.577 855.534,237.272 856.102,236.98 856.67,233.683 857.239,233.538 857.807,230.345 858.375,233.692 858.944,233.561 859.512,233.54 860.081,235.482 860.649,236.07 861.217,235.643 861.786,236.353 862.354,237.938 862.922,239.369 863.491,238.766 864.059,239.307 864.627,241.785 865.196,240.91 865.764,238.064 866.332,237.599 866.901,237.121 867.469,234.447 868.037,232.973 868.606,231.741 869.174,230.619 869.742,228.425 870.311,227.662 870.879,229.053 871.447,228.128 872.016,226.046 872.584,225.526 873.152,227.093 873.721,227.374 874.289,227.453 874.858,224.699 875.426,226.152 875.994,225.645 876.563,225.146 877.131,226.447 877.699,227.74 878.268,228.058 878.836,228.222 879.404,230.437 879.973,228.77 880.541,227.881 881.109,228.015 881.678,228.039 882.246,229.322 882.814,230.536 883.383,229.425 883.951,229.458 884.519,228.412 885.088,228.889 885.656,228.176 886.224,227.445 886.793,227.702 887.361,229.2 887.93,229.503 888.498,231.774 889.066,232.741 889.635,230.792 890.203,233.908 890.771,233.688 891.34,235.468 891.908,232.959 892.476,233.985 893.045,233.726 893.613,235.671 894.181,234.44 894.75,234.04 895.318,232.857 895.886,234.876 896.455,235.684 897.023,235.361 897.591,235.062 898.16,232.663 898.728,232.302 899.296,234.321 899.865,233.064 900.433,231.893 901.001,231.918 901.57,230.594 902.138,229.616 902.707,228.673 903.275,230.967 903.843,230.089 904.412,230.406 904.98,230.405 905.548,230.391 906.117,231.548 906.685,231.424 907.253,229.273 907.822,228.462 908.39,227.373 908.958,227.594 909.527,227.76 910.095,225.753 910.663,228.17 911.232,227.226 911.8,227.307 912.368,227.636 912.937,228.897 913.505,228.183 914.073,227.255 914.642,227.59 915.21,227.773 915.779,227.229 916.347,228.635 916.915,227.08 917.484,230.509 918.052,230.924 918.62,231.09 919.189,232.165 919.757,232.396 920.325,232.489 920.894,233.49 921.462,231.301 922.03,229.18 922.599,229.303 923.167,229.465 923.735,228.58 924.304,231.964 924.872,231.729 925.44,230.768 926.009,230.651 926.577,228.657 927.145,227.887 927.714,228.239 928.282,231.683 928.85,230.524 929.419,230.675 929.987,229.811 930.556,230.114 931.124,231.073 931.692,227.96 932.261,227.211 932.829,228.397 933.397,229.616 933.966,227.673 934.534,228.035 935.102,230.371 935.671,228.385 936.239,226.618 936.807,228.963 937.376,229.206 937.944,230.553 938.512,230.797 939.081,232.017 939.649,234.969 940.217,233.556 940.786,231.27 941.354,232.267 941.922,232.156 942.491,233.097 943.059,233.906 943.627,232.79 944.196,231.674 944.764,233.896 945.333,232.618 945.901,230.649 946.469,230.893 947.038,228.816 947.606,230.15 948.174,231.189 948.743,230.356 949.311,229.418 949.879,229.74 950.448,228 951.016,231.18 951.584,230.288 952.153,230.104 952.721,231.294 953.289,232.27 953.858,232.523 954.426,232.419 954.994,230.491 955.563,229.417 956.131,229.629 956.699,228.882 957.268,229.182 957.836,229.374 958.405,229.664 958.973,232.006 959.541,231.941 960.11,231.639 960.678,233.927 961.246,233.763 961.815,234.529 962.383,232.226 962.951,231.082 963.52,230.135 964.088,228.138 964.656,228.26 965.225,227.473 965.793,228.856 966.361,228.018 966.93,229.401 967.498,230.278 968.066,231.26 968.635,230.298 969.203,232.438 969.771,232.229 970.34,232.181 970.908,235.22 971.476,236.057 972.045,237.666 972.613,235.113 973.182,232.842 973.75,234.801 974.318,234.808 974.887,234.726 975.455,233.318 976.023,230.116 976.592,228.922 977.16,229.096 977.728,230.147 978.297,231.29 978.865,231.187 979.433,230.054 980.002,232.992 980.57,233.597 981.138,233.527 981.707,233.457 982.275,233.226 982.843,233.021 983.412,231.847 983.98,234.888 984.548,235.685 985.117,234.383 985.685,232.881 986.253,234.929 986.822,233.523 987.39,230.039 987.959,228.907 988.527,228.987 989.095,230.981 989.664,230.994 990.232,231.346 990.8,232.115 991.369,231.95 991.937,233.966 992.505,233.675 993.074,233.583 993.642,232.373 994.21,231.128 994.779,231.887 995.347,231.732 995.915,229.556 996.484,230.408 997.052,231.329 997.62,231.307 998.189,233.319 998.757,235.092 999.325,233.723 999.894,232.442 1000.46,235.079 1001.03,233.655 1001.6,233.363 1002.17,231.975 1002.74,231.804 1003.3,230.423 1003.87,229.176 1004.44,229.074 1005.01,230.294 1005.58,232.213 1006.15,231.066 1006.71,231.857 1007.28,230.568 1007.85,228.341 1008.42,228.441 1008.99,229.632 1009.56,231.909 1010.12,229.6 1010.69,230.549 1011.26,230.706 1011.83,230.687 1012.4,230.718 1012.97,229.688 1013.53,226.736 1014.1,225.921 1014.67,228.194 1015.24,227.236 1015.81,229.456 1016.38,229.49 1016.94,229.563 1017.51,231.64 1018.08,231.664 1018.65,232.487 1019.22,230.841 1019.79,231.629 1020.35,232.416 1020.92,232.269 1021.49,232.173 1022.06,233.076 1022.63,232.727 1023.2,233.55 1023.76,234.185 1024.33,234.817 1024.9,234.313 1025.47,234.661 1026.04,235.224 1026.61,236.844 1027.17,235.224 1027.74,234.685 1028.31,235.033 1028.88,233.522 1029.45,236.336 1030.02,236.895 1030.58,235.017 1031.15,234.604 1031.72,233.008 1032.29,231.645 1032.86,231.123 1033.43,231.831 1033.99,230.39 1034.56,229.17 1035.13,230.132 1035.7,230.008 1036.27,229.998 1036.84,229.853 1037.4,230.695 1037.97,228.59 1038.54,227.415 1039.11,227.412 1039.68,227.41 1040.25,228.445 1040.81,227.365 1041.38,227.376 1041.95,224.415 1042.52,224.679 1043.09,225.027 1043.66,224.137 1044.22,224.481 1044.79,224.741 1045.36,223.984 1045.93,221.51 1046.5,222.887 1047.07,223.385 1047.63,223.846 1048.2,223.521 1048.77,223.147 1049.34,223.696 1049.91,225.212 1050.48,226.686 1051.05,226.218 1051.61,226.634 1052.18,228.141 1052.75,227.253 1053.32,225.613 1053.89,228.99 1054.46,229.091 1055.02,228.335 1055.59,228.326 1056.16,226.32 1056.73,225.743 1057.3,225.183 1057.87,227.786 1058.43,229.963 1059,231.1 1059.57,231.244 1060.14,232.301 1060.71,231.404 1061.28,231.198 1061.84,229.12 1062.41,228.13 1062.98,228.304 1063.55,229.75 1064.12,230.91 1064.69,228.645 1065.25,226.696 1065.82,227.957 1066.39,228.185 1066.96,228.633 1067.53,227.917 1068.1,228.232 1068.66,230.44 1069.23,229.507 1069.8,226.533 1070.37,227.802 1070.94,227.181 1071.51,225.428 1072.07,228.012 1072.64,229.267 1073.21,231.648 1073.78,231.752 1074.35,231.508 1074.92,230.54 1075.48,231.874 1076.05,232.803 1076.62,232.714 1077.19,232.597 1077.76,231.313 1078.33,232.223 1078.89,231.098 1079.46,233.126 1080.03,233.077 1080.6,234.054 1081.17,233.807 1081.74,234.822 1082.3,234.568 1082.87,234.175 1083.44,235.876 1084.01,234.336 1084.58,233.084 1085.15,233.899 1085.71,233.02 1086.28,231.929 1086.85,234.752 1087.42,233.578 1087.99,237.736 1088.56,237.019 1089.12,235.534 1089.69,236.262 1090.26,235.92 1090.83,236.536 1091.4,236.127 1091.97,235.709 1092.53,237.361 1093.1,235.86 1093.67,235.398 1094.24,234.033 1094.81,234.718 1095.38,235.169 1095.94,236.928 1096.51,236.389 1097.08,235.691 1097.65,235.214 1098.22,234.697 1098.79,233.074 1099.35,232.876 1099.92,230.547 1100.49,229.402 1101.06,229.148 1101.63,232.111 1102.2,233.729 1102.76,234.421 1103.33,231.877 1103.9,228.39 1104.47,228.432 1105.04,228.402 1105.61,226.338 1106.17,225.407 1106.74,227.801 1107.31,227.713 1107.88,227.796 1108.45,228.843 1109.02,226.815 1109.58,224.896 1110.15,224.279 1110.72,225.678 1111.29,225.875 1111.86,224.128 1112.43,223.581 1112.99,225.104 1113.56,224.371 1114.13,224.909 1114.7,224.276 1115.27,221.884 1115.84,222.365 1116.4,221.994 1116.97,222.771 1117.54,223.509 1118.11,224.995 1118.68,225.461 1119.25,225.09 1119.81,227.601 1120.38,227.884 1120.95,228.33 1121.52,230.561 1122.09,231.82 1122.66,231.637 1123.23,231.475 1123.79,231.398 1124.36,231.527 1124.93,230.637 1125.5,230.68 1126.07,230.756 1126.64,231.935 1127.2,232.123 1127.77,231.97 1128.34,230.984 1128.91,229.98 1129.48,230.152 1130.05,226.231 1130.61,225.493 1131.18,226.857 1131.75,228.267 1132.32,228.408 1132.89,227.406 1133.46,227.496 1134.02,227.882 1134.59,227.98 1135.16,229.124 1135.73,230.629 1136.3,232.897 1136.87,233.83 1137.43,231.598 1138,232.403 1138.57,231.354 1139.14,230.21 1139.71,229.325 1140.28,232.796 1140.84,231.44 1141.41,232.36 1141.98,231.208 1142.55,232.238 1143.12,232.117 1143.69,230.878 1144.25,231.974 1144.82,231.738 1145.39,228.497 1145.96,229.709 1146.53,228.555 1147.1,228.562 1147.66,228.838 1148.23,227.923 1148.8,225.988 1149.37,225.619 1149.94,226.205 1150.51,225.658 1151.07,226.826 1151.64,227.205 1152.21,227.417 1152.78,227.7 1153.35,228.144 1153.92,225.216 1154.48,227.811 1155.05,229.151 1155.62,229.336 1156.19,229.717 1156.76,228.819 1157.33,229.833 1157.89,229.905 1158.46,234.052 1159.03,233.815 1159.6,233.607 1160.17,234.46 1160.74,235.367 1161.3,236.069 1161.87,235.814 1162.44,235.496 1163.01,234.222 1163.58,233.877 1164.15,233.53 1164.71,232.269 1165.28,231.239 1165.85,232.176 1166.42,232.979 1166.99,230.817 1167.56,232.653 1168.12,232.506 1168.69,232.275 1169.26,230.179 1169.83,229.023 1170.4,227.057 1170.97,225.196 1171.53,224.594 1172.1,224.997 1172.67,227.277 1173.24,228.689 1173.81,227.882 1174.38,230.264 1174.94,232.409 1175.51,232.295 1176.08,232.211 1176.65,233.179 1177.22,233.125 1177.79,233.081 1178.35,230.81 1178.92,231.007 1179.49,231.959 1180.06,233.154 1180.63,230.901 1181.2,232.773 1181.76,234.491 1182.33,234.195 1182.9,235.094 1183.47,233.756 1184.04,235.618 1184.61,238.468 1185.17,238.973 1185.74,240.659 1186.31,240.332 1186.88,239.656 1187.45,238.992 1188.02,237.253 1188.58,237.806 1189.15,237.053 1189.72,237.464 1190.29,237.953 1190.86,236.261 1191.43,237.933 1192,237.207 1192.56,236.767 1193.13,238.14 1193.7,236.354 1194.27,235.818 1194.84,234.407 1195.41,234.154 1195.97,231.772 1196.54,229.466 1197.11,228.591 1197.68,227.734 1198.25,227.841 1198.82,225.794 1199.38,227.343 1199.95,227.397 1200.52,227.506 1201.09,229.659 1201.66,230.654 1202.23,233.441 1202.79,232.86 1203.36,232.35 1203.93,231.93 1204.5,232.685 1205.07,233.557 1205.64,230.272 1206.2,230.212 1206.77,229.284 1207.34,230.065 1207.91,230.748 1208.48,229.724 1209.05,229.497 1209.61,229.564 1210.18,229.572 1210.75,228.513 1211.32,228.489 1211.89,230.46 1212.46,230.389 1213.02,232.281 1213.59,231.103 1214.16,231.937 1214.73,230.617 1215.3,229.378 1215.87,227.447 1216.43,227.49 1217,225.568 1217.57,228.009 1218.14,227.886 1218.71,228.191 1219.28,227.167 1219.84,227.177 1220.41,228.326 1220.98,229.985 1221.55,229.042 1222.12,229.05 1222.69,229.957 1223.25,229.904 1223.82,231.094 1224.39,231.082 1224.96,231.968 1225.53,230.785 1226.1,231.794 1226.66,230.466 1227.23,232.301 1227.8,233.024 1228.37,231.619 1228.94,231.388 1229.51,232.27 1230.07,232.856 1230.64,230.426 1231.21,228.72 1231.78,226.628 1232.35,225.803 1232.92,224.048 1233.48,221.178 1234.05,222.726 1234.62,220.207 1235.19,220.792 1235.76,221.343 1236.33,223.038 1236.89,224.462 1237.46,225.973 1238.03,225.347 1238.6,225.649 1239.17,223.834 1239.74,227.575 1240.3,226.569 1240.87,228.026 1241.44,228.406 1242.01,228.628 1242.58,227.842 1243.15,228.022 1243.71,226.065 1244.28,229.545 1244.85,228.517 1245.42,231.656 1245.99,227.536 1246.56,227.787 1247.12,227.953 1247.69,231.258 1248.26,232.138 1248.83,230.752 1249.4,228.486 1249.97,230.776 1250.53,230.918 1251.1,233.015 1251.67,230.857 1252.24,231.916 1252.81,231.636 1253.38,231.233 1253.94,232.113 1254.51,232.053 1255.08,231.91 1255.65,232.747 1256.22,233.454 1256.79,233.181 1257.35,231.951 1257.92,231.846 1258.49,231.656 1259.06,230.396 1259.63,230.212 1260.2,230.395 1260.76,231.422 1261.33,232.414 1261.9,229.071 1262.47,232.463 1263.04,233.54 1263.61,234.363 1264.18,234.062 1264.74,231.752 1265.31,231.568 1265.88,229.431 1266.45,227.468 1267.02,228.523 1267.59,228.665 1268.15,227.956 1268.72,227.174 1269.29,227.313 1269.86,226.552 1270.43,229.799 1271,228.677 1271.56,228.705 1272.13,226.766 1272.7,226.847 1273.27,227.051 1273.84,227.323 1274.41,230.805 1274.97,229.929 1275.54,229.997 1276.11,228.944 1276.68,229.835 1277.25,232.078 1277.82,232.134 1278.38,231.038 1278.95,230.895 1279.52,231.784 1280.09,230.617 1280.66,231.542 1281.23,228.513 1281.79,228.52 1282.36,226.543 1282.93,225.827 1283.5,226.068 1284.07,227.284 1284.64,228.458 1285.2,229.329 1285.77,228.221 1286.34,225.179 1286.91,222.451 1287.48,224.264 1288.05,226.662 1288.61,228.05 1289.18,228.207 1289.75,227.275 1290.32,227.514 1290.89,226.765 1291.46,227.011 1292.02,225.287 1292.59,225.928 1293.16,229.364 1293.73,230.772 1294.3,230.878 1294.87,230.906 1295.43,230.075 1296,231.275 1296.57,231.392 1297.14,232.527 1297.71,231.434 1298.28,231.489 1298.84,227.419 1299.41,227.777 1299.98,225.003 1300.55,225.525 1301.12,225.783 1301.69,228.473 1302.25,228.907 1302.82,230.239 1303.39,230.498 1303.96,229.588 1304.53,229.726 1305.1,229.201 1305.66,227.133 1306.23,226.385 1306.8,227.681 1307.37,227.911 1307.94,225.087 1308.51,228.888 1309.07,228.175 1309.64,229.482 1310.21,229.796 1310.78,230.084 1311.35,235.453 1311.92,233.239 1312.48,231.963 1313.05,234.156 1313.62,234.924 1314.19,234.621 1314.76,234.531 1315.33,231.02 1315.89,230.147 1316.46,232.185 1317.03,231.097 1317.6,230.184 1318.17,234.417 1318.74,235.343 1319.3,238.375 1319.87,235.506 1320.44,233.192 1321.01,231.996 1321.58,228.938 1322.15,231.424 1322.71,233.484 1323.28,232.399 1323.85,231.46 1324.42,232.554 1324.99,232.414 1325.56,231.229 1326.12,228.141 1326.69,228.464 1327.26,230.552 1327.83,230.589 1328.4,230.535 1328.97,229.512 1329.53,235.724 1330.1,235.403 1330.67,236.173 1331.24,236.115 1331.81,233.89 1332.38,233.954 1332.94,233.543 1333.51,231.274 1334.08,232.367 1334.65,231.381 1335.22,229.461 1335.79,226.484 1336.36,227.816 1336.92,229.276 1337.49,231.068 1338.06,230.633 1338.63,230.426 1339.2,230.591 1339.77,228.528 1340.33,229.593 1340.9,232.747 1341.47,230.601 1342.04,231.711 1342.61,231.842 1343.18,232.967 1343.74,230.686 1344.31,230.613 1344.88,231.222 1345.45,234.153 1346.02,234.03 1346.59,233.823 1347.15,233.508 1347.72,231.061 1348.29,232.297 1348.86,231.009 1349.43,231.03 1350,231.194 1350.56,228.91 1351.13,230.051 1351.7,229.934 1352.27,233.169 1352.84,233.242 1353.41,232.816 1353.97,233.782 1354.54,234.494 1355.11,233.12 1355.68,232.697 1356.25,233.406 1356.82,233.041 1357.38,233.877 1357.95,232.701 1358.52,232.521 1359.09,230.195 1359.66,231.26 1360.23,231.01 1360.79,231.663 1361.36,233.484 1361.93,234.472 1362.5,234.3 1363.07,230.822 1363.64,229.882 1364.2,229.749 1364.77,231.542 1365.34,231.485 1365.91,231.325 1366.48,230.166 1367.05,230.028 1367.61,232.15 1368.18,229.864 1368.75,230.984 1369.32,230.794 1369.89,231.677 1370.46,230.468 1371.02,230.241 1371.59,231.186 1372.16,230.065 1372.73,228.024 1373.3,228.006 1373.87,226.83 1374.43,227.099 1375,227.382 1375.57,227.533 1376.14,228.508 1376.71,227.466 1377.28,228.736 1377.84,228.732 1378.41,228.91 1378.98,228.158 1379.55,226.256 1380.12,225.375 1380.69,225.938 1381.25,224.995 1381.82,225.399 1382.39,225.7 1382.96,226.209 1383.53,223.338 1384.1,225.607 1384.66,224.758 1385.23,226.031 1385.8,226.296 1386.37,227.6 1386.94,230.15 1387.51,230.201 1388.07,229.032 1388.64,228.351 1389.21,227.571 1389.78,227.833 1390.35,226.899 1390.92,229.214 1391.48,229.349 1392.05,230.625 1392.62,229.608 1393.19,228.673 1393.76,229.888 1394.33,228.107 1394.89,226.223 1395.46,225.543 1396.03,225.926 1396.6,226.288 1397.17,225.677 1397.74,225.099 1398.3,226.659 1398.87,228.939 1399.44,229.09 1400.01,228.11 1400.58,229.456 1401.15,229.4 1401.71,228.449 1402.28,231.896 1402.85,230.811 1403.42,231.651 1403.99,233.783 1404.56,234.592 1405.13,233.137 1405.69,233.156 1406.26,233.133 1406.83,235.015 1407.4,233.956 1407.97,235.864 1408.54,232.255 1409.1,232.03 1409.67,236.18 1410.24,235.929 1410.81,235.499 1411.38,236.374 1411.95,236.841 1412.51,235.458 1413.08,235.923 1413.65,235.531 1414.22,235.026 1414.79,234.548 1415.36,234.942 1415.92,235.666 1416.49,233.035 1417.06,230.704 1417.63,229.4 1418.2,229.433 1418.77,229.581 1419.33,230.73 1419.9,229.619 1420.47,229.921 1421.04,229.864 1421.61,228.826 1422.18,229.992 1422.74,227.924 1423.31,227.991 1423.88,230.129 1424.45,229.018 1425.02,227.046 1425.59,226.248 1426.15,226.848 1426.72,227.255 1427.29,226.419 1427.86,227.688 1428.43,228.903 1429,228.996 1429.56,229.086 1430.13,231.176 1430.7,231.509 1431.27,233.532 1431.84,234.338 1432.41,235.007 1432.97,234.947 1433.54,235.755 1434.11,235.348 1434.68,233.948 1435.25,232.601 1435.82,230.159 1436.38,230.092 1436.95,230.288 1437.52,231.209 1438.09,231.126 1438.66,233.327 1439.23,232.167 1439.79,230.776 1440.36,230.721 1440.93,233.67 1441.5,232.301 1442.07,233.154 1442.64,235.902 1443.2,236.528 1443.77,235.125 1444.34,233.733 1444.91,233.462 1445.48,234.196 1446.05,233.941 1446.61,233.749 1447.18,234.296 1447.75,232.882 1448.32,231.693 1448.89,230.593 1449.46,232.438 1450.02,230.117 1450.59,228.971 1451.16,226.924 1451.73,224.942 1452.3,226.142 1452.87,225.61 1453.43,225.736 1454,225.951 1454.57,227.195 1455.14,229.188 1455.71,229.277 1456.28,230.005 1456.84,227.842 1457.41,227.925 1457.98,228.199 1458.55,227.231 1459.12,227.524 1459.69,227.595 1460.25,227.862 1460.82,228.079 1461.39,228.306 1461.96,226.535 1462.53,226.677 1463.1,226.994 1463.66,227.184 1464.23,227.425 1464.8,227.521 1465.37,227.542 1465.94,229.772 1466.51,230.826 1467.07,233.953 1467.64,231.605 1468.21,231.494 1468.78,231.648 1469.35,231.325 1469.92,231.466 1470.48,229.428 1471.05,230.394 1471.62,230.401 1472.19,231.481 1472.76,232.435 1473.33,232.314 1473.89,234.199 1474.46,234.068 1475.03,232.714 1475.6,230.483 1476.17,229.445 1476.74,229.454 1477.31,229.562 1477.87,229.574 1478.44,229.454 1479.01,230.501 1479.58,229.5 1480.15,228.501 1480.72,227.668 1481.28,228.062 1481.85,228.303 1482.42,229.479 1482.99,228.596 1483.56,226.75 1484.13,227.098 1484.69,227.162 1485.26,228.243 1485.83,225.273 1486.4,224.623 1486.97,226.408 1487.54,225.656 1488.1,225.902 1488.67,225.383 1489.24,226.726 1489.81,227.919 1490.38,229.242 1490.95,230.274 1491.51,230.516 1492.08,229.644 1492.65,230.786 1493.22,231.822 1493.79,230.741 1494.36,229.732 1494.92,231.702 1495.49,232.028 1496.06,232.857 1496.63,231.915 1497.2,230.803 1497.77,231.974 1498.33,233.929 1498.9,233.856 1499.47,233.618 1500.04,231.471 1500.61,231.267 1501.18,231.002 1501.74,229.056 1502.31,231.171 1502.88,229.222 1503.45,229.535 1504.02,228.638 1504.59,228.609 1505.15,228.716 1505.72,227.706 1506.29,232 1506.86,230.813 1507.43,230.741 1508,228.796 1508.56,228.848 1509.13,227.896 1509.7,230.162 1510.27,231.012 1510.84,229.768 1511.41,230.794 1511.97,231.72 1512.54,231.542 1513.11,233.491 1513.68,232.404 1514.25,232.001 1514.82,230.927 1515.38,229.958 1515.95,231.979 1516.52,231.926 1517.09,231.823 1517.66,231.845 1518.23,231.986 1518.79,231.885 1519.36,231.597 1519.93,231.577 1520.5,231.4 1521.07,230.171 1521.64,230.322 1522.2,231.372 1522.77,231.268 1523.34,230.23 1523.91,230.088 1524.48,229.061 1525.05,228.159 1525.61,227.373 1526.18,227.727 1526.75,228.015 1527.32,226.099 1527.89,227.293 1528.46,227.481 1529.02,229.577 1529.59,229.794 1530.16,231.029 1530.73,229.124 1531.3,229.471 1531.87,229.771 1532.43,227.984 1533,228.402 1533.57,228.552 1534.14,225.658 1534.71,227.146 1535.28,229.443 1535.84,231.76 1536.41,231.882 1536.98,230.849 1537.55,229.657 1538.12,228.739 1538.69,232.916 1539.25,234.622 1539.82,233.161 1540.39,234.032 1540.96,234.631 1541.53,233.262 1542.1,234.213 1542.66,233.955 1543.23,234.569 1543.8,236.359 1544.37,234.973 1544.94,234.399 1545.51,232.689 1546.08,231.317 1546.64,230.979 1547.21,231.062 1547.78,230.007 1548.35,232.007 1548.92,228.817 1549.49,228.736 1550.05,228.964 1550.62,228.929 1551.19,228.975 1551.76,229.047 1552.33,230.231 1552.9,228.257 1553.46,226.464 1554.03,225.625 1554.6,226.169 1555.17,223.454 1555.74,226.169 1556.31,224.492 1556.87,223.917 1557.44,225.453 1558.01,225.734 1558.58,226.165 1559.15,228.491 1559.72,230.767 1560.28,230.735 1560.85,231.544 1561.42,230.528 1561.99,231.394 1562.56,231.352 1563.13,230.44 1563.69,229.331 1564.26,229.399 1564.83,228.495 1565.4,228.707 1565.97,229.136 1566.54,229.256 1567.1,231.369 1567.67,232.379 1568.24,230.164 1568.81,229.198 1569.38,228.18 1569.95,229.431 1570.51,229.331 1571.08,230.306 1571.65,230.656 1572.22,229.68 1572.79,229.841 1573.36,229.905 1573.92,228.931 1574.49,230.018 1575.06,229.061 1575.63,228.185 1576.2,228.517 1576.77,228.467 1577.33,226.637 1577.9,228.033 1578.47,226.384 1579.04,227.699 1579.61,228.871 1580.18,228.757 1580.74,228.989 1581.31,228.378 1581.88,229.57 1582.45,229.968 1583.02,229.172 1583.59,228.38 1584.15,231.725 1584.72,228.572 1585.29,230.798 1585.86,230.773 1586.43,230.802 1587,228.977 1587.56,231.352 1588.13,231.354 1588.7,230.402 1589.27,230.441 1589.84,231.463 1590.41,232.432 1590.97,232.5 1591.54,233.599 1592.11,234.56 1592.68,236.372 1593.25,237.318 1593.82,235.781 1594.38,237.43 1594.95,237.974 1595.52,237.333 1596.09,235.837 1596.66,238.358 1597.23,235.844 1597.79,235.516 1598.36,236.166 1598.93,238.844 1599.5,236.03 1600.07,234.729 1600.64,234.168 1601.2,235.035 1601.77,234.525 1602.34,233.086 1602.91,233.874 1603.48,232.449 1604.05,231.137 1604.61,232.031 1605.18,230.957 1605.75,232.94 1606.32,232.796 1606.89,231.628 1607.46,233.413 1608.02,234.076 1608.59,233.711 1609.16,231.345 1609.73,231.089 1610.3,228.64 1610.87,230.664 1611.43,232.712 1612,232.302 1612.57,233.265 1613.14,232.947 1613.71,233.69 1614.28,233.325 1614.84,233.049 1615.41,232.018 1615.98,231.992 1616.55,229.731 1617.12,229.493 1617.69,232.604 1618.26,233.144 1618.82,233.841 1619.39,234.635 1619.96,234.197 1620.53,235.906 1621.1,236.578 1621.67,237.266 1622.23,235.644 1622.8,234.214 1623.37,233.763 1623.94,234.465 1624.51,234.005 1625.08,235.649 1625.64,233.122 1626.21,231.768 1626.78,230.448 1627.35,230.383 1627.92,232.265 1628.49,232.096 1629.05,234.141 1629.62,233.786 1630.19,234.347 1630.76,233.982 1631.33,233.37 1631.9,231.82 1632.46,233.792 1633.03,231.413 1633.6,233.065 1634.17,232.551 1634.74,232.25 1635.31,231.811 1635.87,234.554 1636.44,232.943 1637.01,232.418 1637.58,233.995 1638.15,233.737 1638.72,232.282 1639.28,233.033 1639.85,231.597 1640.42,230.16 1640.99,230.057 1641.56,230.904 1642.13,229.629 1642.69,229.445 1643.26,229.098 1643.83,226.843 1644.4,226.896 1644.97,227.726 1645.54,225.522 1646.1,225.724 1646.67,222.83 1647.24,221.211 1647.81,220.569 1648.38,221.976 1648.95,220.304 1649.51,219.895 1650.08,222.596 1650.65,220.968 1651.22,220.576 1651.79,220.018 1652.36,222.717 1652.92,224.266 1653.49,225.603 1654.06,227.204 1654.63,224.171 1655.2,224.466 1655.77,224.853 1656.33,225.39 1656.9,224.626 1657.47,225.243 1658.04,225.459 1658.61,225.952 1659.18,229.325 1659.74,229.52 1660.31,230.612 1660.88,228.403 1661.45,230.637 1662.02,231.73 1662.59,231.644 1663.15,231.586 1663.72,230.582 1664.29,231.592 1664.86,231.373 1665.43,232.229 1666,228.952 1666.56,227.075 1667.13,228.305 1667.7,228.336 1668.27,227.408 1668.84,226.578 1669.41,228.77 1669.97,229.938 1670.54,228.009 1671.11,228.006 1671.68,228.164 1672.25,230.189 1672.82,230.289 1673.38,229.46 1673.95,230.725 1674.52,230.879 1675.09,230.84 1675.66,230.41 1676.23,231.174 1676.79,230.955 1677.36,230.888 1677.93,230.716 1678.5,229.852 1679.07,228.885 1679.64,228.114 1680.2,227.491 1680.77,227.448 1681.34,226.838 1681.91,227.121 1682.48,228.427 1683.05,228.428 1683.61,226.354 1684.18,223.537 1684.75,223.889 1685.32,225.416 1685.89,225.756 1686.46,228.135 1687.02,228.281 1687.59,224.294 1688.16,225.844 1688.73,225.235 1689.3,226.574 1689.87,225.887 1690.44,228.468 1691,229.687 1691.57,230.814 1692.14,230.895 1692.71,230.797 1693.28,229.875 1693.85,230.897 1694.41,232.673 1694.98,231.484 1695.55,230.53 1696.12,230.49 1696.69,231.491 1697.26,230.587 1697.82,231.885 1698.39,231.702 1698.96,230.349 1699.53,231.388 1700.1,230.411 1700.67,233.628 1701.23,233.558 1701.8,234.254 1702.37,233.089 1702.94,232.897 1703.51,232.794 1704.08,231.674 1704.64,230.627 1705.21,229.67 1705.78,230.436 1706.35,230.43 1706.92,226.369 1707.49,225.831 1708.05,227.437 1708.62,227.951 1709.19,228.165 1709.76,224.278 1710.33,226.849 1710.9,226.216 1711.46,228.626 1712.03,231.973 1712.6,229.929 1713.17,228.061 1713.74,228.169 1714.31,229.336 1714.87,231.454 1715.44,230.273 1716.01,232.448 1716.58,233.382 1717.15,234.189 1717.72,233.938 1718.28,234.927 1718.85,233.749 1719.42,232.751 1719.99,232.631 1720.56,231.443 1721.13,229.225 1721.69,230.177 1722.26,228.407 1722.83,229.482 1723.4,228.379 1723.97,228.53 1724.54,228.797 1725.1,229.876 1725.67,227.811 1726.24,227.974 1726.81,229.226 1727.38,229.262 1727.95,228.19 1728.51,228.41 1729.08,229.444 1729.65,231.708 1730.22,231.613 1730.79,231.327 1731.36,231.35 1731.92,230.401 1732.49,228.189 1733.06,228.279 1733.63,229.603 1734.2,230.762 1734.77,228.719 1735.33,228.632 1735.9,228.801 1736.47,228.867 1737.04,229.89 1737.61,230.873 1738.18,231.077 1738.74,233.169 1739.31,230.991 1739.88,230.697 1740.45,231.825 1741.02,232.81 1741.59,231.724 1742.15,232.603 1742.72,233.525 1743.29,234.23 1743.86,234.068 1744.43,233.666 1745,233.675 1745.56,233.397 1746.13,233.346 1746.7,232.198 1747.27,232.238 1747.84,232.248 1748.41,232.213 1748.97,232.127 1749.54,231.776 1750.11,233.869 1750.68,233.569 1751.25,232.373 1751.82,232.322 1752.38,232.156 1752.95,233.087 1753.52,233.559 1754.09,235.538 1754.66,233.944 1755.23,234.699 1755.79,234.461 1756.36,236.26 1756.93,233.823 1757.5,234.516 1758.07,234.067 1758.64,232.75 1759.21,234.291 1759.77,232.146 1760.34,233.159 1760.91,232.994 1761.48,235.88 1762.05,234.312 1762.62,231.836 1763.18,233.797 1763.75,233.409 1764.32,232.15 1764.89,230.851 1765.46,231.967 1766.03,234.86 1766.59,232.447 1767.16,233.301 1767.73,232.857 1768.3,232.771 1768.87,232.498 1769.44,232.165 1770,231.995 1770.57,234.033 1771.14,233.541 1771.71,235.251 1772.28,234.609 1772.85,232.979 1773.41,233.762 1773.98,234.512 1774.55,233.214 1775.12,232.949 1775.69,233.658 1776.26,233.366 1776.82,231.825 1777.39,231.578 1777.96,231.095 1778.53,230.745 1779.1,230.507 1779.67,229.42 1780.23,227.519 1780.8,228.581 1781.37,227.563 1781.94,227.674 1782.51,227.552 1783.08,228.721 1783.64,227.531 1784.21,226.488 1784.78,227.748 1785.35,230.879 1785.92,228.719 1786.49,226.545 1787.05,225.546 1787.62,225.803 1788.19,225.025 1788.76,225.431 1789.33,225.712 1789.9,226.066 1790.46,223.307 1791.03,222.89 1791.6,222.224 1792.17,220.831 1792.74,220.523 1793.31,222.01 1793.87,222.617 1794.44,222.059 1795.01,222.834 1795.58,223.236 1796.15,224.812 1796.72,224.203 1797.28,224.746 1797.85,223.306 1798.42,224.106 1798.99,220.51 1799.56,222.211 1800.13,222.598 1800.69,221.229 1801.26,222.06 1801.83,223.742 1802.4,222.24 1802.97,222.752 1803.54,221.379 1804.1,222.2 1804.67,223.098 1805.24,223.979 1805.81,224.454 1806.38,227.972 1806.95,229.546 1807.51,232.769 1808.08,234.775 1808.65,234.459 1809.22,233.407 1809.79,233.501 1810.36,232.406 1810.92,230.505 1811.49,228.543 1812.06,228.923 1812.63,228.075 1813.2,226.126 1813.77,226.366 1814.33,226.912 1814.9,228.433 1815.47,229.574 1816.04,230.921 1816.61,229.96 1817.18,230.394 1817.74,230.422 1818.31,230.665 1818.88,228.825 1819.45,229.252 1820.02,231.457 1820.59,231.478 1821.15,229.599 1821.72,230.987 1822.29,234.265 1822.86,234.393 1823.43,232.219 1824,230.106 1824.56,233.454 1825.13,233.227 1825.7,233.971 1826.27,235.78 1826.84,237.758 1827.41,236.519 1827.97,238.429 1828.54,237.978 1829.11,238.427 1829.68,237.969 1830.25,237.305 1830.82,238.825 1831.39,240.249 1831.95,240.732 1832.52,238.967 1833.09,238.245 1833.66,234.36 1834.23,233.924 1834.8,232.767 1835.36,233.688 1835.93,234.478 1836.5,231.095 1837.07,228.913 1837.64,228.142 1838.21,230.125 1838.77,231.275 1839.34,232.111 1839.91,234.069 1840.48,233.76 1841.05,231.503 1841.62,232.677 1842.18,231.62 1842.75,232.604 1843.32,231.396 1843.89,231.282 1844.46,230.964 1845.03,230.07 1845.59,230.162 1846.16,229.05 1846.73,228.985 1847.3,229.218 1847.87,228.244 1848.44,228.135 1849,229.455 1849.57,230.512 1850.14,229.418 1850.71,229.586 1851.28,229.77 1851.85,226.661 1852.41,228.013 1852.98,227.093 1853.55,230.352 1854.12,232.069 1854.69,231.935 1855.26,231.791 1855.82,232.621 1856.39,231.431 1856.96,232.264 1857.53,232.985 1858.1,233.835 1858.67,236.732 1859.23,237.259 1859.8,234.834 1860.37,236.458 1860.94,235.775 1861.51,235.473 1862.08,233.913 1862.64,234.794 1863.21,234.03 1863.78,233.927 1864.35,234.818 1864.92,232.43 1865.49,231.118 1866.05,231.039 1866.62,232.649 1867.19,232.344 1867.76,232.127 1868.33,232.124 1868.9,233.001 1869.46,230.576 1870.03,229.337 1870.6,230.554 1871.17,230.705 1871.74,232.741 1872.31,233.144 1872.87,232.055 1873.44,232.848 1874.01,232.826 1874.58,232.517 1875.15,231.388 1875.72,232.362 1876.28,231.854 1876.85,233.655 1877.42,233.286 1877.99,233.04 1878.56,233.91 1879.13,233.813 1879.69,234.339 1880.26,232.951 1880.83,232.561 1881.4,233.39 1881.97,235.097 1882.54,235.512 1883.1,234.87 1883.67,234.264 1884.24,235.85 1884.81,234.276 1885.38,231.798 1885.95,231.675 1886.51,231.284 1887.08,231.074 1887.65,230.963 1888.22,228.554 1888.79,225.569 1889.36,224.533 1889.92,226.748 1890.49,225.873 1891.06,226.869 1891.63,227.089 1892.2,223.16 1892.77,222.494 1893.33,222.89 1893.9,222.366 1894.47,224.898 1895.04,225.095 1895.61,225.397 1896.18,225.757 1896.74,226.831 1897.31,230.123 1897.88,230.051 1898.45,228.804 1899.02,228.603 1899.59,228.301 1900.16,228.273 1900.72,226.178 1901.29,224.489 1901.86,224.942 1902.43,224.189 1903,223.621 1903.57,224.212 1904.13,223.522 1904.7,223.844 1905.27,222.062 1905.84,225.729 1906.41,225.124 1906.98,222.429 1907.54,223.001 1908.11,224.554 1908.68,224.889 1909.25,226.433 1909.82,228.832 1910.39,227.827 1910.95,228.269 1911.52,228.61 1912.09,228.122 1912.66,229.268 1913.23,228.623 1913.8,228.004 1914.36,227.221 1914.93,226.539 1915.5,228.963 1916.07,228.002 1916.64,229.019 1917.21,229.193 1917.77,229.252 1918.34,228.643 1918.91,225.683 1919.48,223.988 1920.05,222.663 1920.62,224.417 1921.18,227.056 1921.75,227.336 1922.32,230.822 1922.89,228.737 1923.46,226.286 1924.03,228.58 1924.59,229.675 1925.16,227.581 1925.73,227.973 1926.3,228.262 1926.87,227.456 1927.44,227.84 1928,230.061 1928.57,230.251 1929.14,231.353 1929.71,229.138 1930.28,230.457 1930.85,230.527 1931.41,230.563 1931.98,228.721 1932.55,229.874 1933.12,230.186 1933.69,228.295 1934.26,227.672 1934.82,227.961 1935.39,232.311 1935.96,232.174 1936.53,232.211 1937.1,231.214 1937.67,232.193 1938.23,232.135 1938.8,233.134 1939.37,234.158 1939.94,232.84 1940.51,230.677 1941.08,229.775 1941.64,233.134 1942.21,233.954 1942.78,234.849 1943.35,231.699 1943.92,232.78 1944.49,232.676 1945.05,232.666 1945.62,232.559 1946.19,234.406 1946.76,234.156 1947.33,234.963 1947.9,234.422 1948.46,232.998 1949.03,232.752 1949.6,232.506 1950.17,230.573 1950.74,231.497 1951.31,231.434 1951.87,231.389 1952.44,230.54 1953.01,228.505 1953.58,229.741 1954.15,230.92 1954.72,232.145 1955.28,228.892 1955.85,227.798 1956.42,227.992 1956.99,228.159 1957.56,229.517 1958.13,229.547 1958.69,229.603 1959.26,232.806 1959.83,233.705 1960.4,232.276 1960.97,235.401 1961.54,238.25 1962.1,239.851 1962.67,240.148 1963.24,239.455 1963.81,237.619 1964.38,238.221 1964.95,236.583 1965.51,235.853 1966.08,234.387 1966.65,234.971 1967.22,232.514 1967.79,232.164 1968.36,232.112 1968.92,230.795 1969.49,229.443 1970.06,228.423 1970.63,230.563 1971.2,230.674 1971.77,230.822 1972.34,231.69 1972.9,231.608 1973.47,231.449 1974.04,231.452 1974.61,230.282 1975.18,229.287 1975.75,228.5 1976.31,225.522 1976.88,228.003 1977.45,227.274 1978.02,226.625 1978.59,224.815 1979.16,224.202 1979.72,225.644 1980.29,225.899 1980.86,225.197 1981.43,227.717 1982,228.797 1982.57,229.022 1983.13,229.018 1983.7,231.252 1984.27,230.338 1984.84,231.363 1985.41,233.194 1985.98,232.92 1986.54,232.904 1987.11,230.743 1987.68,231.807 1988.25,231.626 1988.82,231.522 1989.39,232.429 1989.95,231.001 1990.52,230.886 1991.09,230.968 1991.66,231.94 1992.23,232.829 1992.8,233.83 1993.36,234.445 1993.93,233.97 1994.5,231.54 1995.07,232.638 1995.64,232.443 1996.21,233.368 1996.77,232.26 1997.34,229.867 1997.91,226.583 1998.48,227.61 1999.05,227.77 1999.62,229.004 2000.18,229.096 2000.75,229.272 2001.32,229.274 2001.89,229.462 2002.46,226.462 2003.03,226.564 2003.59,230.005 2004.16,232.119 2004.73,230.883 2005.3,230.903 2005.87,230.693 2006.44,232.813 2007,232.47 2007.57,232.258 2008.14,230.052 2008.71,230.065 2009.28,231.207 2009.85,232.037 2010.41,231.91 2010.98,230.993 2011.55,231.024 2012.12,230.696 2012.69,229.274 2013.26,228.374 2013.82,228.325 2014.39,230.444 2014.96,230.528 2015.53,232.455 2016.1,234.268 2016.67,232.744 2017.23,231.527 2017.8,227.173 2018.37,227.342 2018.94,227.559 2019.51,227.81 2020.08,227.023 2020.64,224.361 2021.21,226.862 2021.78,229.228 2022.35,230.335 2022.92,231.249 2023.49,230.315 2024.05,230.343 2024.62,231.713 2025.19,232.469 2025.76,229.424 2026.33,230.845 2026.9,227.924 2027.46,228.15 2028.03,229.424 2028.6,228.546 2029.17,227.58 2029.74,227.916 2030.31,229.125 2030.87,228.04 2031.44,227.223 2032.01,226.335 2032.58,226.402 2033.15,222.655 2033.72,222.146 2034.28,222.926 2034.85,224.417 2035.42,223.702 2035.99,224.046 2036.56,226.626 2037.13,225.042 2037.69,227.681 2038.26,228.846 2038.83,230.195 2039.4,230.38 2039.97,231.462 2040.54,232.212 2041.11,230.036 2041.67,229.032 2042.24,229.15 2042.81,228.371 2043.38,233.492 2043.95,234.268 2044.52,236.034 2045.08,236.436 2045.65,236.033 2046.22,235.761 2046.79,235.267 2047.36,233.902 2047.93,233.848 2048.49,233.831 2049.06,230.549 2049.63,227.454 2050.2,227.737 2050.77,225.075 2051.34,225.559 2051.9,224.871 2052.47,225.221 2053.04,222.539 2053.61,221.848 2054.18,221.294 2054.75,225.077 2055.31,227.547 2055.88,228.825 2056.45,230.009 2057.02,230.223 2057.59,230.394 2058.16,231.432 2058.72,229.199 2059.29,227.549 2059.86,229.026 2060.43,228.267 2061,227.365 2061.57,232.75 2062.13,233.833 2062.7,233.583 2063.27,233.47 2063.84,234.332 2064.41,233.209 2064.98,233.786 2065.54,233.745 2066.11,232.527 2066.68,231.256 2067.25,231.157 2067.82,231.19 2068.39,230.55 2068.95,230.569 2069.52,230.608 2070.09,229.477 2070.66,231.747 2071.23,232.576 2071.8,234.675 2072.36,233.459 2072.93,236.636 2073.5,236.093 2074.07,234.758 2074.64,232.417 2075.21,232.224 2075.77,233.004 2076.34,234.629 2076.91,234.434 2077.48,233.157 2078.05,232.671 2078.62,234.595 2079.18,234.317 2079.75,233.919 2080.32,232.818 2080.89,234.437 2081.46,235.328 2082.03,236.244 2082.59,234.864 2083.16,235.631 2083.73,235.242 2084.3,234.118 2084.87,232.646 2085.44,232.546 2086,229.351 2086.57,232.163 2087.14,231.006 2087.71,233.965 2088.28,231.47 2088.85,229.139 2089.41,230.209 2089.98,229.978 2090.55,230.884 2091.12,229.638 2091.69,230.623 2092.26,229.501 2092.82,228.616 2093.39,229.925 2093.96,231.091 2094.53,231.927 2095.1,230.502 2095.67,228.426 2096.23,229.442 2096.8,229.357 2097.37,229.195 2097.94,227.257 2098.51,227.412 2099.08,227.416 2099.64,229.69 2100.21,229.77 2100.78,228.837 2101.35,228.953 2101.92,228.851 2102.49,226.923 2103.05,226.266 2103.62,230.721 2104.19,231.424 2104.76,231.345 2105.33,231.353 2105.9,232.095 2106.46,230.168 2107.03,229.055 2107.6,229.339 2108.17,230.57 2108.74,228.313 2109.31,228.629 2109.87,228.692 2110.44,227.681 2111.01,228.999 2111.58,229.342 2112.15,231.535 2112.72,232.348 2113.29,231.098 2113.85,230.044 2114.42,230.956 2114.99,233.063 2115.56,232.767 2116.13,229.45 2116.7,230.469 2117.26,232.599 2117.83,230.639 2118.4,230.617 2118.97,228.481 2119.54,227.605 2120.11,229.935 2120.67,228.981 2121.24,228.962 2121.81,231.176 2122.38,233.305 2122.95,233.035 2123.52,231.583 2124.08,233.752 2124.65,234.663 2125.22,234.246 2125.79,234.798 2126.36,233.496 2126.93,233.07 2127.49,233.947 2128.06,234.539 2128.63,235.044 2129.2,235.589 2129.77,236.071 2130.34,235.6 2130.9,234.047 2131.47,232.645 2132.04,229.482 2132.61,229.775 2133.18,230.778 2133.75,228.583 2134.31,229.7 2134.88,230.51 2135.45,229.338 2136.02,227.237 2136.59,224.505 2137.16,224.746 2137.72,226.112 2138.29,224.238 2138.86,222.617 2139.43,223.161 2140,223.568 2140.57,222.865 2141.13,222.45 2141.7,222.978 2142.27,223.432 2142.84,223.919 2143.41,222.241 2143.98,222.799 2144.54,225.414 2145.11,225.716 2145.68,228.05 2146.25,229.334 2146.82,226.498 2147.39,226.733 2147.95,227.782 2148.52,228.885 2149.09,230.103 2149.66,229.052 2150.23,232.462 2150.8,232.356 2151.36,232.247 2151.93,232.287 2152.5,233.333 2153.07,231.213 2153.64,230.226 2154.21,231.259 2154.77,230.009 2155.34,229.107 2155.91,230.155 2156.48,229.313 2157.05,230.403 2157.62,229.31 2158.18,229.353 2158.75,229.429 2159.32,228.41 2159.89,225.434 \"/>\n<path clip-path=\"url(#clip180)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip180)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip180)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip180)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip180)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip180)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.034 ± 0.026\n  with uncertainty of ± 0.00236752263522731\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01904 ± (0.00149429, 0.00165049) (MC)\n  95% confidence interval: [-4.02227, -4.01591] (MC)\n  linear error propagation: -4.01915 ± 0.00162369\n  |δ_y| = |0.00153902| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.019043838010459, val_l = 0.00322497622803386, val_u = 0.0031326951591221786)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip210\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip210)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip211\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip210)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip212\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1141.12 2211.02,1141.12 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,966.978 2211.02,966.978 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,792.835 2211.02,792.835 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,618.691 2211.02,618.691 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,444.548 2211.02,444.548 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,270.405 2211.02,270.405 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1141.12 365.751,1141.12 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,966.978 365.751,966.978 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,792.835 365.751,792.835 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,618.691 365.751,618.691 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,444.548 365.751,444.548 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,270.405 365.751,270.405 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M298.909 1126.92 Q295.298 1126.92 293.469 1130.48 Q291.664 1134.03 291.664 1141.16 Q291.664 1148.26 293.469 1151.83 Q295.298 1155.37 298.909 1155.37 Q302.543 1155.37 304.349 1151.83 Q306.177 1148.26 306.177 1141.16 Q306.177 1134.03 304.349 1130.48 Q302.543 1126.92 298.909 1126.92 M298.909 1123.22 Q304.719 1123.22 307.775 1127.82 Q310.853 1132.41 310.853 1141.16 Q310.853 1149.88 307.775 1154.49 Q304.719 1159.07 298.909 1159.07 Q293.099 1159.07 290.02 1154.49 Q286.964 1149.88 286.964 1141.16 Q286.964 1132.41 290.02 1127.82 Q293.099 1123.22 298.909 1123.22 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M259.557 980.323 L267.196 980.323 L267.196 953.957 L258.886 955.624 L258.886 951.364 L267.15 949.698 L271.826 949.698 L271.826 980.323 L279.465 980.323 L279.465 984.258 L259.557 984.258 L259.557 980.323 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M298.909 952.777 Q295.298 952.777 293.469 956.341 Q291.664 959.883 291.664 967.013 Q291.664 974.119 293.469 977.684 Q295.298 981.225 298.909 981.225 Q302.543 981.225 304.349 977.684 Q306.177 974.119 306.177 967.013 Q306.177 959.883 304.349 956.341 Q302.543 952.777 298.909 952.777 M298.909 949.073 Q304.719 949.073 307.775 953.679 Q310.853 958.263 310.853 967.013 Q310.853 975.739 307.775 980.346 Q304.719 984.929 298.909 984.929 Q293.099 984.929 290.02 980.346 Q286.964 975.739 286.964 967.013 Q286.964 958.263 290.02 953.679 Q293.099 949.073 298.909 949.073 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M262.775 806.179 L279.094 806.179 L279.094 810.115 L257.15 810.115 L257.15 806.179 Q259.812 803.425 264.395 798.795 Q269.002 794.142 270.182 792.8 Q272.428 790.277 273.307 788.541 Q274.21 786.781 274.21 785.091 Q274.21 782.337 272.266 780.601 Q270.344 778.865 267.242 778.865 Q265.043 778.865 262.59 779.629 Q260.159 780.392 257.381 781.943 L257.381 777.221 Q260.205 776.087 262.659 775.508 Q265.113 774.93 267.15 774.93 Q272.52 774.93 275.715 777.615 Q278.909 780.3 278.909 784.791 Q278.909 786.92 278.099 788.841 Q277.312 790.74 275.205 793.332 Q274.627 794.003 271.525 797.221 Q268.423 800.415 262.775 806.179 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M298.909 778.633 Q295.298 778.633 293.469 782.198 Q291.664 785.74 291.664 792.869 Q291.664 799.976 293.469 803.54 Q295.298 807.082 298.909 807.082 Q302.543 807.082 304.349 803.54 Q306.177 799.976 306.177 792.869 Q306.177 785.74 304.349 782.198 Q302.543 778.633 298.909 778.633 M298.909 774.93 Q304.719 774.93 307.775 779.536 Q310.853 784.119 310.853 792.869 Q310.853 801.596 307.775 806.202 Q304.719 810.786 298.909 810.786 Q293.099 810.786 290.02 806.202 Q286.964 801.596 286.964 792.869 Q286.964 784.119 290.02 779.536 Q293.099 774.93 298.909 774.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M272.914 617.337 Q276.27 618.055 278.145 620.323 Q280.043 622.592 280.043 625.925 Q280.043 631.041 276.525 633.842 Q273.006 636.642 266.525 636.642 Q264.349 636.642 262.034 636.203 Q259.742 635.786 257.289 634.93 L257.289 630.416 Q259.233 631.55 261.548 632.129 Q263.863 632.707 266.386 632.707 Q270.784 632.707 273.076 630.971 Q275.39 629.235 275.39 625.925 Q275.39 622.869 273.238 621.156 Q271.108 619.42 267.289 619.42 L263.261 619.42 L263.261 615.578 L267.474 615.578 Q270.923 615.578 272.752 614.212 Q274.58 612.823 274.58 610.231 Q274.58 607.569 272.682 606.157 Q270.807 604.721 267.289 604.721 Q265.367 604.721 263.168 605.138 Q260.969 605.555 258.33 606.434 L258.33 602.268 Q260.992 601.527 263.307 601.157 Q265.645 600.786 267.705 600.786 Q273.029 600.786 276.131 603.217 Q279.233 605.624 279.233 609.744 Q279.233 612.615 277.59 614.606 Q275.946 616.573 272.914 617.337 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M298.909 604.49 Q295.298 604.49 293.469 608.055 Q291.664 611.596 291.664 618.726 Q291.664 625.832 293.469 629.397 Q295.298 632.939 298.909 632.939 Q302.543 632.939 304.349 629.397 Q306.177 625.832 306.177 618.726 Q306.177 611.596 304.349 608.055 Q302.543 604.49 298.909 604.49 M298.909 600.786 Q304.719 600.786 307.775 605.393 Q310.853 609.976 310.853 618.726 Q310.853 627.453 307.775 632.059 Q304.719 636.642 298.909 636.642 Q293.099 636.642 290.02 632.059 Q286.964 627.453 286.964 618.726 Q286.964 609.976 290.02 605.393 Q293.099 600.786 298.909 600.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M271.594 431.342 L259.789 449.791 L271.594 449.791 L271.594 431.342 M270.367 427.268 L276.247 427.268 L276.247 449.791 L281.177 449.791 L281.177 453.68 L276.247 453.68 L276.247 461.828 L271.594 461.828 L271.594 453.68 L255.992 453.68 L255.992 449.166 L270.367 427.268 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M298.909 430.347 Q295.298 430.347 293.469 433.911 Q291.664 437.453 291.664 444.583 Q291.664 451.689 293.469 455.254 Q295.298 458.795 298.909 458.795 Q302.543 458.795 304.349 455.254 Q306.177 451.689 306.177 444.583 Q306.177 437.453 304.349 433.911 Q302.543 430.347 298.909 430.347 M298.909 426.643 Q304.719 426.643 307.775 431.249 Q310.853 435.833 310.853 444.583 Q310.853 453.309 307.775 457.916 Q304.719 462.499 298.909 462.499 Q293.099 462.499 290.02 457.916 Q286.964 453.309 286.964 444.583 Q286.964 435.833 290.02 431.249 Q293.099 426.643 298.909 426.643 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M258.793 253.125 L277.15 253.125 L277.15 257.06 L263.076 257.06 L263.076 265.532 Q264.094 265.185 265.113 265.023 Q266.131 264.837 267.15 264.837 Q272.937 264.837 276.316 268.009 Q279.696 271.18 279.696 276.597 Q279.696 282.175 276.224 285.277 Q272.752 288.356 266.432 288.356 Q264.256 288.356 261.988 287.985 Q259.742 287.615 257.335 286.874 L257.335 282.175 Q259.418 283.31 261.641 283.865 Q263.863 284.421 266.34 284.421 Q270.344 284.421 272.682 282.314 Q275.02 280.208 275.02 276.597 Q275.02 272.986 272.682 270.879 Q270.344 268.773 266.34 268.773 Q264.465 268.773 262.59 269.189 Q260.738 269.606 258.793 270.486 L258.793 253.125 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M298.909 256.203 Q295.298 256.203 293.469 259.768 Q291.664 263.31 291.664 270.439 Q291.664 277.546 293.469 281.11 Q295.298 284.652 298.909 284.652 Q302.543 284.652 304.349 281.11 Q306.177 277.546 306.177 270.439 Q306.177 263.31 304.349 259.768 Q302.543 256.203 298.909 256.203 M298.909 252.5 Q304.719 252.5 307.775 257.106 Q310.853 261.689 310.853 270.439 Q310.853 279.166 307.775 283.773 Q304.719 288.356 298.909 288.356 Q293.099 288.356 290.02 283.773 Q286.964 279.166 286.964 270.439 Q286.964 261.689 290.02 257.106 Q293.099 252.5 298.909 252.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip212)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1012.81 400.199,894.926 400.786,786.766 401.372,687.673 401.958,597.044 402.545,514.321 403.131,438.986 403.718,370.558 404.304,418.685 404.891,357.49 405.477,396.226 406.063,506.396 406.65,523.799 407.236,470.221 407.823,422.914 408.409,378.421 408.995,338.574 409.582,303.073 410.168,271.634 410.755,243.992 411.341,219.895 411.927,244.474 412.514,266.763 413.1,249.813 413.687,236.214 414.273,257.979 414.86,245.435 415.446,265.526 416.032,284.201 416.619,301.731 417.205,317.582 417.792,310.091 418.378,304.866 418.964,301.467 419.551,300.8 420.137,299.802 420.724,318.671 421.31,320.209 421.896,323.87 422.483,327.865 423.069,332.083 423.656,350.854 424.242,356.723 424.829,387.663 425.415,406.483 426.001,424.314 426.588,463.031 427.174,480.197 427.761,496.668 428.347,512.283 428.933,529.247 429.52,553.682 430.106,569.305 430.693,577.629 431.279,607.034 431.865,615.129 432.452,636.415 433.038,644.198 433.625,658.155 434.211,666.629 434.798,675.096 435.384,698.96 435.97,707.34 436.557,720.4 437.143,742.588 437.73,772.472 438.316,783.038 438.902,806.85 439.489,812.885 440.075,822.676 440.662,840.73 441.248,850.09 441.835,870.528 442.421,882.266 443.007,894.273 443.594,898.804 444.18,907.36 444.767,915.367 445.353,919.898 445.939,924.976 446.526,933.05 447.112,938.206 447.699,946.036 448.285,951.318 448.871,962.076 449.458,972.626 450.044,993.489 450.631,1000.29 451.217,1003.97 451.804,1010.8 452.39,1027.18 452.976,1033 453.563,1039.2 454.149,1049.22 454.736,1054.41 455.322,1056.92 455.908,1062.31 456.495,1065.15 457.081,1074.77 457.668,1079.54 458.254,1082.14 458.84,1091.02 459.427,1093.14 460.013,1101.83 460.6,1104.28 461.186,1108.48 461.773,1118.85 462.359,1127.03 462.945,1132.74 463.532,1140.01 464.118,1143.42 464.705,1148.17 465.291,1154.9 465.877,1155.94 466.464,1158.72 467.05,1163.42 467.637,1165.95 468.223,1167 468.809,1171.45 469.396,1171.96 469.982,1172.26 470.569,1176.24 471.155,1177.12 471.742,1179.36 472.328,1179.9 472.914,1185.96 473.501,1187.94 474.087,1188.34 474.674,1190.21 475.26,1192.44 475.846,1196.16 476.433,1196.26 477.019,1196.46 477.606,1196.87 478.192,1195.35 478.778,1197.67 479.365,1202.86 479.951,1204.75 480.538,1205.18 481.124,1208.73 481.711,1209 482.297,1209.45 482.883,1211.56 483.47,1213.04 484.056,1213.07 484.643,1214.55 485.229,1214.38 485.815,1215.8 486.402,1218.93 486.988,1218.61 487.575,1218.69 488.161,1218.56 488.748,1221.49 489.334,1221.29 489.92,1222.84 490.507,1222.74 491.093,1225.81 491.68,1227.01 492.266,1226.77 492.852,1229.65 493.439,1230.69 494.025,1230.6 494.612,1236.66 495.198,1237.37 495.784,1236.96 496.371,1236.24 496.957,1237.28 497.544,1233.22 498.13,1229.89 498.717,1231.3 499.303,1235.63 499.889,1233.72 500.476,1233.44 501.062,1232.86 501.649,1229.51 502.235,1229.83 502.821,1231.04 503.408,1232.56 503.994,1233.76 504.581,1236.18 505.167,1235.53 505.753,1235.39 506.34,1238.13 506.926,1240.83 507.513,1237.43 508.099,1234.14 508.686,1236.77 509.272,1239.3 509.858,1237.27 510.445,1238.44 511.031,1238.14 511.618,1237.77 512.204,1235.7 512.79,1233.93 513.377,1233.9 513.963,1233.68 514.55,1233.58 515.136,1236.17 515.722,1235.64 516.309,1238.35 516.895,1237.91 517.482,1238.96 518.068,1236.96 518.655,1236.64 519.241,1236.24 519.827,1232.94 520.414,1235.8 521,1237.16 521.587,1234.14 522.173,1232.61 522.759,1232.49 523.346,1230.86 523.932,1229.75 524.519,1230.12 525.105,1230.19 525.691,1234.88 526.278,1237.5 526.864,1235.53 527.451,1236.85 528.037,1239.73 528.624,1240.72 529.21,1241.64 529.796,1245.19 530.383,1241.33 530.969,1239.23 531.556,1238.97 532.142,1237.13 532.728,1238.19 533.315,1240.83 533.901,1241.93 534.488,1242.63 535.074,1243.74 535.661,1244.57 536.247,1249.65 536.833,1250.38 537.42,1249.4 538.006,1248.57 538.593,1249.02 539.179,1248.03 539.765,1248.46 540.352,1247.41 540.938,1247.89 541.525,1248.3 542.111,1248.86 542.697,1247.69 543.284,1246.62 543.87,1248.57 544.457,1248.95 545.043,1250.53 545.63,1249.56 546.216,1250.17 546.802,1250.41 547.389,1245.02 547.975,1242.51 548.562,1243.21 549.148,1242.57 549.734,1241.84 550.321,1242.85 550.907,1242.17 551.494,1242.88 552.08,1240.8 552.666,1237.21 553.253,1238.01 553.839,1235.83 554.426,1235.22 555.012,1240.43 555.599,1241.04 556.185,1237.34 556.771,1236.87 557.358,1236.53 557.944,1237.3 558.531,1235.53 559.117,1236.72 559.703,1234.45 560.29,1237.03 560.876,1238.21 561.463,1237.7 562.049,1236.63 562.635,1236.1 563.222,1232.87 563.808,1230.95 564.395,1232.19 564.981,1229.01 565.568,1231.85 566.154,1230.08 566.74,1231.27 567.327,1229.57 567.913,1227.82 568.5,1227.47 569.086,1228.6 569.672,1226.83 570.259,1228.17 570.845,1227.78 571.432,1227.59 572.018,1227.57 572.605,1230.51 573.191,1230.49 573.777,1227.26 574.364,1225.82 574.95,1227.35 575.537,1229.98 576.123,1229.69 576.709,1228.07 577.296,1229.27 577.882,1233.31 578.469,1235.65 579.055,1236.52 579.641,1237.24 580.228,1236.66 580.814,1235.95 581.401,1237.1 581.987,1236.49 582.574,1238.84 583.16,1239.47 583.746,1239.12 584.333,1238.29 584.919,1236.29 585.506,1235.76 586.092,1232.22 586.678,1235.73 587.265,1235.51 587.851,1235.11 588.438,1234.55 589.024,1235.55 589.61,1233.52 590.197,1233.04 590.783,1232.84 591.37,1232.49 591.956,1231.87 592.543,1232.7 593.129,1235.4 593.715,1236.02 594.302,1234.1 594.888,1230.66 595.475,1231.64 596.061,1231.25 596.647,1229.56 597.234,1229.2 597.82,1230.06 598.407,1232.73 598.993,1232.14 599.579,1230.4 600.166,1231.55 600.752,1232.73 601.339,1232.17 601.925,1233 602.512,1233.71 603.098,1233.15 603.684,1232.59 604.271,1230.84 604.857,1231.8 605.444,1231.26 606.03,1229.22 606.616,1236.04 607.203,1236.92 607.789,1236.1 608.376,1235.26 608.962,1246.02 609.548,1244.74 610.135,1240.76 610.721,1239.71 611.308,1236.08 611.894,1235.14 612.481,1235.97 613.067,1234.98 613.653,1235.4 614.24,1231.39 614.826,1230.7 615.413,1231.38 615.999,1231.05 616.585,1230.61 617.172,1230.03 617.758,1229.68 618.345,1229.65 618.931,1226.01 619.518,1226.01 620.104,1225.45 620.69,1225.4 621.277,1225.21 621.863,1226.48 622.45,1226 623.036,1224.21 623.622,1224.19 624.209,1222.55 624.795,1219.39 625.382,1219.45 625.968,1220.93 626.554,1222.21 627.141,1222.28 627.727,1224.81 628.314,1224.48 628.9,1224.38 629.487,1226.99 630.073,1229.65 630.659,1227.97 631.246,1224.77 631.832,1225.83 632.419,1224.07 633.005,1219.9 633.591,1220.02 634.178,1224.37 634.764,1223.19 635.351,1222.06 635.937,1223.19 636.523,1224.55 637.11,1225.37 637.696,1224.91 638.283,1224.77 638.869,1226.09 639.456,1224.53 640.042,1224.27 640.628,1225.39 641.215,1225.39 641.801,1226.46 642.388,1226.31 642.974,1227.27 643.56,1226.88 644.147,1230.86 644.733,1230.42 645.32,1230.99 645.906,1230.39 646.492,1229.94 647.079,1229.52 647.665,1229.12 648.252,1228.92 648.838,1227.16 649.425,1225.19 650.011,1222.43 650.597,1221.94 651.184,1223.22 651.77,1222.95 652.357,1223.19 652.943,1224.41 653.529,1224.29 654.116,1225.69 654.702,1225.27 655.289,1227.89 655.875,1227.09 656.462,1226.5 657.048,1224.62 657.634,1221.4 658.221,1222.97 658.807,1220.07 659.394,1221.61 659.98,1225.98 660.566,1227.19 661.153,1225.59 661.739,1223.78 662.326,1224.53 662.912,1223.08 663.498,1224.22 664.085,1222.62 664.671,1225.66 665.258,1224.3 665.844,1222.62 666.431,1222.42 667.017,1216.56 667.603,1218.22 668.19,1216.95 668.776,1218.13 669.363,1218 669.949,1223.66 670.535,1226.19 671.122,1222.6 671.708,1223.82 672.295,1223.52 672.881,1221.96 673.467,1224.54 674.054,1222.72 674.64,1220.84 675.227,1221.58 675.813,1217.05 676.4,1212.96 676.986,1214.49 677.572,1211.68 678.159,1214.9 678.745,1213.7 679.332,1216.79 679.918,1215.61 680.504,1214.45 681.091,1216.27 681.677,1214.9 682.264,1216.41 682.85,1216.49 683.436,1214.84 684.023,1215.08 684.609,1215.4 685.196,1212.62 685.782,1210.09 686.369,1207.49 686.955,1210.93 687.541,1211.57 688.128,1206.36 688.714,1204.18 689.301,1204.85 689.887,1205.67 690.473,1207.74 691.06,1208.36 691.646,1210.19 692.233,1212.06 692.819,1209.31 693.405,1208.3 693.992,1211.78 694.578,1211.9 695.165,1211.86 695.751,1215.28 696.338,1215.53 696.924,1214.06 697.51,1211.22 698.097,1213.02 698.683,1213.26 699.27,1215.06 699.856,1214.93 700.442,1214.97 701.029,1213.33 701.615,1216.38 702.202,1216.46 702.788,1216.56 703.375,1219.46 703.961,1222 704.547,1223.49 705.134,1218.66 705.72,1219.92 706.307,1218.48 706.893,1216.73 707.479,1218.08 708.066,1216.52 708.652,1215 709.239,1207.86 709.825,1208.22 710.411,1208.59 710.998,1208.63 711.584,1209.14 712.171,1209.58 712.757,1212.66 713.344,1212.73 713.93,1215.88 714.516,1217.43 715.103,1216.03 715.689,1216.26 716.276,1214.82 716.862,1213.23 717.448,1211.97 718.035,1211.05 718.621,1212.99 719.208,1211.76 719.794,1214.58 720.38,1213.21 720.967,1212.03 721.553,1213.51 722.14,1216.74 722.726,1218.27 723.313,1218.39 723.899,1220.05 724.485,1221.34 725.072,1219.37 725.658,1220.63 726.245,1220.38 726.831,1218.96 727.417,1217.2 728.004,1214.22 728.59,1211.28 729.177,1210.14 729.763,1210.25 730.349,1211.82 730.936,1213.44 731.522,1212.03 732.109,1211.06 732.695,1209.73 733.282,1214.07 733.868,1213.98 734.454,1214.15 735.041,1214.2 735.627,1214.5 736.214,1214.54 736.8,1214.8 737.386,1213.53 737.973,1215.19 738.559,1218.18 739.146,1213.95 739.732,1214.27 740.318,1213.12 740.905,1214.73 741.491,1214.59 742.078,1216.06 742.664,1217.3 743.251,1216.77 743.837,1218.35 744.423,1218.46 745.01,1218.23 745.596,1216.44 746.183,1217.56 746.769,1217.51 747.355,1218.91 747.942,1216.01 748.528,1217.48 749.115,1217.65 749.701,1219.28 750.288,1217.65 750.874,1219.03 751.46,1218.76 752.047,1225.56 752.633,1223.52 753.22,1219.06 753.806,1220.38 754.392,1220.11 754.979,1218.34 755.565,1216.78 756.152,1218.08 756.738,1216.54 757.324,1214.93 757.911,1216.54 758.497,1213.63 759.084,1212.45 759.67,1212.46 760.257,1211.18 760.843,1211.6 761.429,1211.38 762.016,1209.77 762.602,1209.85 763.189,1208.54 763.775,1210.19 764.361,1210.48 764.948,1209.16 765.534,1208.05 766.121,1208.68 766.707,1209.2 767.293,1213.89 767.88,1212.62 768.466,1214.34 769.053,1215.82 769.639,1217.08 770.226,1217.05 770.812,1219.94 771.398,1220.84 771.985,1221.76 772.571,1221.55 773.158,1222.38 773.744,1220.69 774.33,1218.99 774.917,1218.83 775.503,1215.87 776.09,1215.86 776.676,1216.07 777.262,1217.4 777.849,1216.89 778.435,1219.36 779.022,1220.47 779.608,1221.84 780.195,1222.68 780.781,1224.87 781.367,1225.42 781.954,1230.43 782.54,1229.35 783.127,1229.98 783.713,1229 784.299,1229.49 784.886,1228.59 785.472,1229.22 786.059,1232.31 786.645,1229.9 787.232,1230.41 787.818,1229.84 788.404,1231.87 788.991,1229.34 789.577,1230.31 790.164,1230.77 790.75,1229.93 791.336,1224.62 791.923,1222.79 792.509,1223.63 793.096,1221.97 793.682,1218.71 794.268,1220.13 794.855,1218.51 795.441,1219.56 796.028,1220.98 796.614,1217.72 797.201,1220.4 797.787,1220.03 798.373,1221.17 798.96,1219.48 799.546,1217.91 800.133,1217.91 800.719,1219.1 801.305,1218.96 801.892,1218.73 802.478,1218.2 803.065,1217.66 803.651,1218.52 804.237,1218.2 804.824,1216.69 805.41,1216.67 805.997,1216.6 806.583,1216.44 807.17,1214.88 807.756,1210.58 808.342,1209.23 808.929,1209.08 809.515,1204.97 810.102,1205.51 810.688,1207.29 811.274,1206.08 811.861,1208.04 812.447,1208.27 813.034,1208.48 813.62,1212.87 814.206,1212.98 814.793,1217.3 815.379,1212.68 815.966,1212.77 816.552,1212.71 817.139,1209.93 817.725,1208.98 818.311,1209.41 818.898,1208.28 819.484,1205.92 820.071,1203.72 820.657,1204.32 821.243,1203.33 821.83,1199.64 822.416,1200.55 823.003,1204.22 823.589,1204.65 824.175,1205.12 824.762,1208.64 825.348,1210.57 825.935,1212.2 826.521,1213.71 827.108,1216.72 827.694,1217.82 828.28,1215.98 828.867,1217.29 829.453,1220.21 830.04,1221.04 830.626,1219.01 831.212,1218.71 831.799,1218.68 832.385,1222.54 832.972,1220.7 833.558,1221.51 834.145,1222.32 834.731,1220.67 835.317,1219 835.904,1218.63 836.49,1218.46 837.077,1215.47 837.663,1217.76 838.249,1219.03 838.836,1218.91 839.422,1218.94 840.009,1217.23 840.595,1215.59 841.181,1217.11 841.768,1217.09 842.354,1218.55 842.941,1217.95 843.527,1218.97 844.114,1220.03 844.7,1219.75 845.286,1217.76 845.873,1217.37 846.459,1214.26 847.046,1212.89 847.632,1215.51 848.218,1211.19 848.805,1211.4 849.391,1208.84 849.978,1212.18 850.564,1210.69 851.15,1210.94 851.737,1208.16 852.323,1209.72 852.91,1210.16 853.496,1211.7 854.083,1208.83 854.669,1207.59 855.255,1207.89 855.842,1208.17 856.428,1211.36 857.015,1211.79 857.601,1208.95 858.187,1210.58 858.774,1212.12 859.36,1212.04 859.947,1213.83 860.533,1215.17 861.119,1216.49 861.706,1213.37 862.292,1214.56 862.879,1214.13 863.465,1214.13 864.052,1214.15 864.638,1212.55 865.224,1212.68 865.811,1215.62 866.397,1216.77 866.984,1218.31 867.57,1218.09 868.156,1217.93 868.743,1220.76 869.329,1217.56 869.916,1218.92 870.502,1218.89 871.089,1218.52 871.675,1216.85 872.261,1217.87 872.848,1219.21 873.434,1218.83 874.021,1218.65 874.607,1219.47 875.193,1217.62 875.78,1219.8 876.366,1215.17 876.953,1214.59 877.539,1214.34 878.125,1212.84 878.712,1212.47 879.298,1212.28 879.885,1210.84 880.471,1213.78 881.058,1216.68 881.644,1216.54 882.23,1216.34 882.817,1217.58 883.403,1212.96 883.99,1213.24 884.576,1214.53 885.162,1214.68 885.749,1217.42 886.335,1218.52 886.922,1218.1 887.508,1213.41 888.094,1214.97 888.681,1214.76 889.267,1215.94 889.854,1215.53 890.44,1214.22 891.027,1218.49 891.613,1219.58 892.199,1218.03 892.786,1216.4 893.372,1219.1 893.959,1218.67 894.545,1215.51 895.131,1218.25 895.718,1220.73 896.304,1217.6 896.891,1217.31 897.477,1215.48 898.063,1215.14 898.65,1213.44 899.236,1209.31 899.823,1211.14 900.409,1214.21 900.996,1212.81 901.582,1212.91 902.168,1211.56 902.755,1210.36 903.341,1211.81 903.928,1213.28 904.514,1210.17 905.1,1211.84 905.687,1214.5 906.273,1214.15 906.86,1217 907.446,1215.2 908.032,1213.77 908.619,1214.9 909.205,1216.19 909.792,1215.77 910.378,1218.18 910.965,1213.86 911.551,1215.07 912.137,1215.32 912.724,1213.69 913.31,1212.31 913.897,1211.91 914.483,1211.99 915.069,1214.6 915.656,1216.07 916.242,1215.81 916.829,1216.85 917.415,1216.48 918.002,1216.24 918.588,1215.87 919.174,1212.66 919.761,1212.7 920.347,1213.07 920.934,1209.87 921.52,1210 922.106,1208.85 922.693,1211.92 923.279,1213.45 923.866,1214.73 924.452,1217.49 925.038,1217.38 925.625,1218.51 926.211,1216.69 926.798,1217.88 927.384,1216.04 927.971,1214.85 928.557,1213.5 929.143,1214.8 929.73,1211.85 930.316,1212.08 930.903,1212.09 931.489,1207.84 932.075,1206.54 932.662,1204.16 933.248,1207.5 933.835,1210.51 934.421,1207.73 935.007,1207.6 935.594,1207.59 936.18,1209.42 936.767,1213.76 937.353,1215.41 937.94,1215.21 938.526,1213.79 939.112,1212.22 939.699,1212.33 940.285,1213.87 940.872,1209.82 941.458,1208.91 942.044,1208.92 942.631,1208.93 943.217,1209.17 943.804,1209.37 944.39,1210.92 944.976,1206.67 945.563,1205.44 946.149,1207.1 946.736,1209.07 947.322,1206.16 947.909,1207.99 948.495,1212.71 949.081,1214.28 949.668,1214.2 950.254,1211.49 950.841,1211.45 951.427,1210.95 952.013,1209.86 952.6,1210.04 953.186,1207.21 953.773,1207.51 954.359,1207.55 954.945,1209.13 955.532,1210.79 956.118,1209.72 956.705,1209.9 957.291,1212.86 957.878,1211.7 958.464,1210.43 959.05,1210.43 959.637,1207.63 960.223,1205.09 960.81,1206.86 961.396,1208.53 961.982,1204.83 962.569,1206.67 963.155,1206.98 963.742,1208.82 964.328,1209.01 964.915,1210.88 965.501,1212.59 966.087,1212.76 966.674,1211.11 967.26,1208.46 967.847,1210 968.433,1208.89 969.019,1210.62 969.606,1213.68 970.192,1213.6 970.779,1212.01 971.365,1208.89 971.951,1212.03 972.538,1210.74 973.124,1210.52 973.711,1210.53 974.297,1210.48 974.884,1211.89 975.47,1215.97 976.056,1217.18 976.643,1214.17 977.229,1215.55 977.816,1212.58 978.402,1212.55 978.988,1212.47 979.575,1209.63 980.161,1209.56 980.748,1208.39 981.334,1210.6 981.92,1209.5 982.507,1208.38 983.093,1208.52 983.68,1208.6 984.266,1207.3 984.853,1207.71 985.439,1206.51 986.025,1205.54 986.612,1204.56 987.198,1205.14 987.785,1204.54 988.371,1203.65 988.957,1201.27 989.544,1203.34 990.13,1203.95 990.717,1203.35 991.303,1205.31 991.889,1201.33 992.476,1200.39 993.062,1202.81 993.649,1203.26 994.235,1205.35 994.822,1207.16 995.408,1207.84 995.994,1206.84 996.581,1208.79 997.167,1210.47 997.754,1209.18 998.34,1209.35 998.926,1209.37 999.513,1209.58 1000.1,1208.43 1000.69,1211.32 1001.27,1212.99 1001.86,1213.07 1002.44,1213.15 1003.03,1211.8 1003.62,1213.34 1004.2,1213.4 1004.79,1217.55 1005.38,1217.34 1005.96,1217.02 1006.55,1218.38 1007.14,1218.08 1007.72,1217.88 1008.31,1219.07 1008.9,1222.62 1009.48,1220.98 1010.07,1220.49 1010.65,1220.05 1011.24,1220.67 1011.83,1221.36 1012.41,1220.8 1013,1218.9 1013.59,1217.02 1014.17,1217.76 1014.76,1217.3 1015.35,1215.32 1015.93,1216.6 1016.52,1218.94 1017.11,1214.42 1017.69,1214.32 1018.28,1215.39 1018.86,1215.46 1019.45,1218.27 1020.04,1219.17 1020.62,1220.06 1021.21,1216.62 1021.8,1213.69 1022.38,1212.13 1022.97,1211.91 1023.56,1210.43 1024.14,1211.61 1024.73,1211.87 1025.32,1214.71 1025.9,1216.1 1026.49,1215.92 1027.07,1213.98 1027.66,1212.4 1028.25,1215.51 1028.83,1218.23 1029.42,1216.6 1030.01,1216.35 1030.59,1215.78 1031.18,1216.82 1031.77,1216.45 1032.35,1213.46 1032.94,1214.74 1033.52,1218.86 1034.11,1217.21 1034.7,1218.14 1035.28,1220.63 1035.87,1217.21 1036.46,1215.54 1037.04,1212.29 1037.63,1212.11 1038.22,1212.41 1038.8,1213.71 1039.39,1211.86 1039.98,1210.53 1040.56,1210.59 1041.15,1210.69 1041.73,1212.4 1042.32,1211.11 1042.91,1212.62 1043.49,1209.79 1044.08,1209.78 1044.67,1208.36 1045.25,1208.6 1045.84,1207.1 1046.43,1207.33 1047.01,1207.76 1047.6,1205.29 1048.19,1207.28 1048.77,1208.9 1049.36,1207.7 1049.94,1208.82 1050.53,1210.25 1051.12,1206.3 1051.7,1207.81 1052.29,1201.95 1052.88,1202.75 1053.46,1204.63 1054.05,1203.47 1054.64,1203.79 1055.22,1202.78 1055.81,1203.18 1056.39,1203.6 1056.98,1201.16 1057.57,1203.05 1058.15,1203.54 1058.74,1205.3 1059.33,1204.25 1059.91,1203.5 1060.5,1200.93 1061.09,1201.5 1061.67,1202.3 1062.26,1202.82 1062.85,1203.4 1063.43,1205.53 1064.02,1205.73 1064.6,1208.87 1065.19,1210.44 1065.78,1210.82 1066.36,1206.76 1066.95,1204.48 1067.54,1203.43 1068.12,1206.83 1068.71,1211.6 1069.3,1211.59 1069.88,1211.68 1070.47,1214.57 1071.06,1215.96 1071.64,1212.8 1072.23,1212.99 1072.81,1212.94 1073.4,1211.57 1073.99,1214.4 1074.57,1217.13 1075.16,1218.12 1075.75,1216.36 1076.33,1216.22 1076.92,1218.74 1077.51,1219.65 1078.09,1217.74 1078.68,1218.89 1079.26,1218.31 1079.85,1219.33 1080.44,1222.76 1081.02,1222.33 1081.61,1223.05 1082.2,1222.21 1082.78,1221.41 1083.37,1219.55 1083.96,1219.06 1084.54,1219.7 1085.13,1216.39 1085.72,1216.07 1086.3,1215.52 1086.89,1212.5 1087.47,1210.76 1088.06,1210.97 1088.65,1211.16 1089.23,1211.23 1089.82,1211.03 1090.41,1212.22 1090.99,1212.15 1091.58,1212.04 1092.17,1210.4 1092.75,1210.09 1093.34,1210.26 1093.93,1211.57 1094.51,1212.94 1095.1,1212.71 1095.68,1218.11 1096.27,1219.23 1096.86,1217.49 1097.44,1215.64 1098.03,1215.5 1098.62,1216.93 1099.2,1216.89 1099.79,1216.43 1100.38,1216.36 1100.96,1214.85 1101.55,1212.81 1102.14,1209.67 1102.72,1208.31 1103.31,1211.3 1103.89,1210.15 1104.48,1211.54 1105.07,1213.09 1105.65,1214.32 1106.24,1209.55 1106.83,1211.36 1107.41,1210.06 1108,1211.59 1108.59,1210.14 1109.17,1210.26 1109.76,1211.92 1110.34,1210.39 1110.93,1210.67 1111.52,1215.1 1112.1,1213.48 1112.69,1215.09 1113.28,1215.13 1113.86,1214.79 1114.45,1216.09 1115.04,1218.82 1115.62,1219.44 1116.21,1218.76 1116.8,1219.62 1117.38,1218.14 1117.97,1217.72 1118.55,1217.51 1119.14,1217.2 1119.73,1216.66 1120.31,1220.74 1120.9,1217.31 1121.49,1215.53 1122.07,1215.31 1122.66,1214.81 1123.25,1216.06 1123.83,1214.71 1124.42,1214.62 1125.01,1208.9 1125.59,1209.13 1126.18,1209.32 1126.76,1208.05 1127.35,1206.68 1127.94,1205.57 1128.52,1205.77 1129.11,1206.06 1129.7,1207.69 1130.28,1208.06 1130.87,1208.44 1131.46,1210.1 1132.04,1211.47 1132.63,1210.15 1133.21,1208.99 1133.8,1211.9 1134.39,1209.35 1134.97,1209.49 1135.56,1209.75 1136.15,1212.59 1136.73,1214.19 1137.32,1216.93 1137.91,1219.57 1138.49,1220.53 1139.08,1220.13 1139.67,1217.15 1140.25,1215.28 1140.84,1216.44 1141.42,1213.22 1142.01,1210.26 1142.6,1210.36 1143.18,1210.43 1143.77,1209.04 1144.36,1209.03 1144.94,1209.02 1145.53,1212.08 1146.12,1211.8 1146.7,1210.46 1147.29,1208.76 1147.88,1211.8 1148.46,1209.2 1149.05,1206.76 1149.63,1207.05 1150.22,1205.7 1150.81,1207.42 1151.39,1204.75 1151.98,1200.65 1152.57,1199.73 1153.15,1197.15 1153.74,1197.32 1154.33,1197.99 1154.91,1198.66 1155.5,1200.84 1156.09,1199.88 1156.67,1200.72 1157.26,1199.97 1157.84,1199.1 1158.43,1201.24 1159.02,1198.76 1159.6,1199.56 1160.19,1199.98 1160.78,1197.9 1161.36,1200.17 1161.95,1200.75 1162.54,1202.55 1163.12,1202.79 1163.71,1205.98 1164.29,1209.12 1164.88,1210.35 1165.47,1211.57 1166.05,1211.5 1166.64,1214.38 1167.23,1212.37 1167.81,1212.37 1168.4,1212.3 1168.99,1209.42 1169.57,1208.06 1170.16,1204.2 1170.75,1204.92 1171.33,1205.56 1171.92,1206.08 1172.5,1204.99 1173.09,1203.72 1173.68,1208.17 1174.26,1208.26 1174.85,1209.54 1175.44,1208.49 1176.02,1207.55 1176.61,1208.95 1177.2,1209.28 1177.78,1209.21 1178.37,1209.22 1178.96,1210.7 1179.54,1210.78 1180.13,1208.11 1180.71,1208.21 1181.3,1205.59 1181.89,1207.17 1182.47,1205.99 1183.06,1207.77 1183.65,1209.47 1184.23,1212.15 1184.82,1212.17 1185.41,1214.89 1185.99,1211.66 1186.58,1211.89 1187.16,1211.54 1187.75,1213 1188.34,1213.07 1188.92,1211.58 1189.51,1209.35 1190.1,1210.65 1190.68,1210.68 1191.27,1209.46 1191.86,1209.54 1192.44,1207.91 1193.03,1207.91 1193.62,1206.66 1194.2,1208.25 1194.79,1206.85 1195.37,1208.64 1195.96,1206.1 1196.55,1205.05 1197.13,1206.92 1197.72,1207.2 1198.31,1205.95 1198.89,1205.09 1199.48,1208.38 1200.07,1210.72 1200.65,1213.64 1201.24,1214.88 1201.83,1217.41 1202.41,1221.5 1203,1219.63 1203.58,1223.28 1204.17,1222.75 1204.76,1222.25 1205.34,1220.18 1205.93,1218.42 1206.52,1216.5 1207.1,1217.48 1207.69,1217.2 1208.28,1219.82 1208.86,1214.85 1209.45,1216.31 1210.03,1214.41 1210.62,1213.95 1211.21,1213.69 1211.79,1214.82 1212.38,1214.64 1212.97,1217.39 1213.55,1212.72 1214.14,1214.15 1214.73,1209.87 1215.31,1215.51 1215.9,1215.24 1216.49,1215.08 1217.07,1210.59 1217.66,1209.35 1218.24,1211.22 1218.83,1214.33 1219.42,1211.22 1220,1211.01 1220.59,1208.1 1221.18,1211.01 1221.76,1209.53 1222.35,1209.87 1222.94,1210.39 1223.52,1209.15 1224.11,1209.19 1224.7,1209.34 1225.28,1208.14 1225.87,1207.09 1226.45,1207.38 1227.04,1209.01 1227.63,1209.11 1228.21,1209.33 1228.8,1211.03 1229.39,1211.28 1229.97,1211.03 1230.56,1209.61 1231.15,1208.21 1231.73,1212.77 1232.32,1208.12 1232.91,1206.57 1233.49,1205.35 1234.08,1205.65 1234.66,1208.74 1235.25,1208.96 1235.84,1211.87 1236.42,1214.6 1237.01,1213.22 1237.6,1213.08 1238.18,1214.1 1238.77,1215.24 1239.36,1215.13 1239.94,1216.26 1240.53,1211.89 1241.11,1213.45 1241.7,1213.45 1242.29,1216.16 1242.87,1216.15 1243.46,1215.96 1244.05,1215.67 1244.63,1210.96 1245.22,1212.15 1245.81,1212.07 1246.39,1213.53 1246.98,1212.34 1247.57,1209.26 1248.15,1209.13 1248.74,1210.59 1249.32,1210.77 1249.91,1209.53 1250.5,1211.1 1251.08,1209.81 1251.67,1213.96 1252.26,1214 1252.84,1216.76 1253.43,1217.85 1254.02,1217.64 1254.6,1216.08 1255.19,1214.55 1255.78,1213.4 1256.36,1214.95 1256.95,1219.19 1257.53,1223.06 1258.12,1220.79 1258.71,1217.66 1259.29,1215.85 1259.88,1215.7 1260.47,1217.04 1261.05,1216.79 1261.64,1217.89 1262.23,1217.65 1262.81,1220.11 1263.4,1219.36 1263.98,1214.76 1264.57,1212.84 1265.16,1212.68 1265.74,1212.63 1266.33,1213.76 1266.92,1212.11 1267.5,1211.92 1268.09,1210.32 1268.68,1211.77 1269.26,1211.67 1269.85,1217.24 1270.44,1216.83 1271.02,1220.71 1271.61,1220.13 1272.19,1219.91 1272.78,1216.33 1273.37,1215.78 1273.95,1213.99 1274.54,1213.63 1275.13,1214.88 1275.71,1214.71 1276.3,1215.45 1276.89,1218.32 1277.47,1219.44 1278.06,1217.76 1278.65,1217.52 1279.23,1221.46 1279.82,1216.38 1280.4,1217.4 1280.99,1215.65 1281.58,1215.24 1282.16,1214.86 1282.75,1207.45 1283.34,1210.37 1283.92,1212.06 1284.51,1208.98 1285.1,1207.81 1285.68,1208.11 1286.27,1208.11 1286.86,1212.85 1287.44,1214.04 1288.03,1211.23 1288.61,1212.68 1289.2,1213.92 1289.79,1208.07 1290.37,1206.68 1290.96,1202.33 1291.55,1206.1 1292.13,1209.16 1292.72,1210.73 1293.31,1214.91 1293.89,1211.51 1294.48,1208.64 1295.06,1210.05 1295.65,1211.29 1296.24,1209.75 1296.82,1209.88 1297.41,1211.46 1298,1215.69 1298.58,1215.31 1299.17,1212.48 1299.76,1212.42 1300.34,1212.49 1300.93,1213.89 1301.52,1205.33 1302.1,1205.63 1302.69,1204.42 1303.27,1204.34 1303.86,1207.27 1304.45,1207.08 1305.03,1207.55 1305.62,1210.6 1306.21,1209.06 1306.79,1210.37 1307.38,1212.99 1307.97,1217.11 1308.55,1215.38 1309.14,1213.44 1309.73,1210.99 1310.31,1211.57 1310.9,1211.85 1311.48,1211.62 1312.07,1214.45 1312.66,1213.03 1313.24,1208.7 1313.83,1211.6 1314.42,1210.06 1315,1209.84 1315.59,1208.24 1316.18,1211.32 1316.76,1211.41 1317.35,1210.56 1317.93,1206.49 1318.52,1206.55 1319.11,1206.74 1319.69,1207.08 1320.28,1210.37 1320.87,1208.65 1321.45,1210.37 1322.04,1210.32 1322.63,1210.08 1323.21,1213.2 1323.8,1211.67 1324.39,1211.83 1324.97,1207.38 1325.56,1207.2 1326.14,1207.71 1326.73,1206.3 1327.32,1205.23 1327.9,1207.01 1328.49,1207.52 1329.08,1206.48 1329.66,1206.9 1330.25,1205.67 1330.84,1207.2 1331.42,1207.38 1332.01,1210.53 1332.6,1209.07 1333.18,1209.38 1333.77,1208.46 1334.35,1205.91 1334.94,1204.46 1335.53,1204.58 1336.11,1209.28 1336.7,1210.56 1337.29,1210.76 1337.87,1208.3 1338.46,1208.34 1339.05,1208.53 1339.63,1210.1 1340.22,1210.3 1340.8,1207.38 1341.39,1210.48 1341.98,1208.95 1342.56,1209.19 1343.15,1207.96 1343.74,1209.59 1344.32,1209.9 1344.91,1208.6 1345.5,1210.12 1346.08,1212.94 1346.67,1213.03 1347.26,1214.71 1347.84,1214.43 1348.43,1214.13 1349.01,1214 1349.6,1212.73 1350.19,1214.21 1350.77,1212.54 1351.36,1212.59 1351.95,1212.39 1352.53,1213.46 1353.12,1216.13 1353.71,1217.45 1354.29,1216.81 1354.88,1218.22 1355.47,1217.81 1356.05,1217.53 1356.64,1216.96 1357.22,1221.01 1357.81,1218.08 1358.4,1219.37 1358.98,1217.78 1359.57,1217.53 1360.16,1215.84 1360.74,1212.41 1361.33,1212.34 1361.92,1213.95 1362.5,1214.92 1363.09,1216.05 1363.68,1215.76 1364.26,1217.11 1364.85,1214.02 1365.43,1213.87 1366.02,1212.13 1366.61,1213.53 1367.19,1214.83 1367.78,1213.2 1368.37,1215.67 1368.95,1218.32 1369.54,1219.36 1370.13,1218.96 1370.71,1218.58 1371.3,1219.53 1371.88,1220.45 1372.47,1218.45 1373.06,1215.41 1373.64,1215.24 1374.23,1216.62 1374.82,1214.83 1375.4,1214.93 1375.99,1216.26 1376.58,1211.56 1377.16,1213.01 1377.75,1211.84 1378.34,1208.86 1378.92,1207.64 1379.51,1209.54 1380.09,1209.44 1380.68,1209.39 1381.27,1206.71 1381.85,1208.05 1382.44,1205.31 1383.03,1210.15 1383.61,1210.41 1384.2,1204.62 1384.79,1204.81 1385.37,1205.25 1385.96,1203.9 1386.55,1203.09 1387.13,1204.83 1387.72,1204.04 1388.3,1204.43 1388.89,1204.99 1389.48,1205.52 1390.06,1204.86 1390.65,1203.74 1391.24,1207.23 1391.82,1210.38 1392.41,1212.16 1393,1212.14 1393.58,1211.96 1394.17,1210.4 1394.75,1211.92 1395.34,1211.52 1395.93,1211.61 1396.51,1213.05 1397.1,1211.48 1397.69,1214.34 1398.27,1214.31 1398.86,1211.43 1399.45,1212.97 1400.03,1215.72 1400.62,1216.9 1401.21,1216.18 1401.79,1215.72 1402.38,1216.95 1402.96,1215.31 1403.55,1213.71 1404.14,1213.62 1404.72,1213.53 1405.31,1210.68 1405.9,1210.2 1406.48,1207.37 1407.07,1206.17 1407.66,1205.13 1408.24,1205.09 1408.83,1203.84 1409.42,1204.26 1410,1206.06 1410.59,1207.82 1411.17,1211.13 1411.76,1211.23 1412.35,1210.97 1412.93,1209.69 1413.52,1209.78 1414.11,1206.72 1414.69,1208.24 1415.28,1210.11 1415.87,1210.18 1416.45,1206.09 1417.04,1207.89 1417.63,1206.66 1418.21,1202.78 1418.8,1201.76 1419.38,1203.54 1419.97,1205.33 1420.56,1205.61 1421.14,1204.51 1421.73,1204.76 1422.32,1204.93 1422.9,1204.08 1423.49,1205.92 1424.08,1207.5 1424.66,1208.98 1425.25,1206.42 1425.83,1209.57 1426.42,1211.15 1427.01,1214 1427.59,1216.82 1428.18,1215.31 1428.77,1216.16 1429.35,1216.11 1429.94,1215.94 1430.53,1214.35 1431.11,1211.69 1431.7,1211.6 1432.29,1210.62 1432.87,1213.61 1433.46,1213.56 1434.04,1213.25 1434.63,1214.64 1435.22,1214.32 1435.8,1214.29 1436.39,1214 1436.98,1213.77 1437.56,1213.52 1438.15,1216 1438.74,1215.91 1439.32,1215.57 1439.91,1215.4 1440.5,1215.15 1441.08,1215.1 1441.67,1215.15 1442.25,1212.15 1442.84,1210.71 1443.43,1206.38 1444.01,1209.52 1444.6,1209.64 1445.19,1209.4 1445.77,1209.81 1446.36,1209.58 1446.95,1212.36 1447.53,1211.06 1448.12,1211.04 1448.7,1209.55 1449.29,1208.2 1449.88,1208.31 1450.46,1205.65 1451.05,1205.73 1451.64,1207.5 1452.22,1210.51 1452.81,1211.94 1453.4,1211.95 1453.98,1211.82 1454.57,1211.83 1455.16,1212.01 1455.74,1210.59 1456.33,1211.97 1456.91,1213.36 1457.5,1214.56 1458.09,1214.09 1458.67,1213.82 1459.26,1212.25 1459.85,1213.49 1460.43,1216.07 1461.02,1215.69 1461.61,1215.69 1462.19,1214.29 1462.78,1218.43 1463.37,1219.45 1463.95,1217.16 1464.54,1218.29 1465.12,1218.08 1465.71,1218.91 1466.3,1217.2 1466.88,1215.66 1467.47,1213.9 1468.06,1212.51 1468.64,1212.17 1469.23,1213.37 1469.82,1211.81 1470.4,1210.37 1470.99,1211.82 1471.57,1213.2 1472.16,1210.5 1472.75,1210.01 1473.33,1208.82 1473.92,1210.05 1474.51,1211.54 1475.09,1209.91 1475.68,1207.17 1476.27,1207.17 1476.85,1207.4 1477.44,1210.28 1478.03,1210.53 1478.61,1210.87 1479.2,1213.53 1479.78,1210.65 1480.37,1213.31 1480.96,1212.91 1481.54,1214.17 1482.13,1214.25 1482.72,1214.15 1483.3,1215.58 1483.89,1209.74 1484.48,1211.33 1485.06,1211.41 1485.65,1214.08 1486.24,1214.05 1486.82,1215.4 1487.41,1212.35 1487.99,1211.18 1488.58,1212.87 1489.17,1211.47 1489.75,1210.18 1490.34,1210.39 1490.93,1207.66 1491.51,1209.08 1492.1,1209.58 1492.69,1211.02 1493.27,1212.34 1493.86,1209.56 1494.45,1209.58 1495.03,1209.68 1495.62,1209.61 1496.2,1209.38 1496.79,1209.47 1497.38,1209.82 1497.96,1209.82 1498.55,1210.03 1499.14,1211.69 1499.72,1211.49 1500.31,1210.04 1500.9,1210.15 1501.48,1211.56 1502.07,1211.76 1502.65,1213.18 1503.24,1214.45 1503.83,1215.59 1504.41,1215.19 1505,1214.86 1505.59,1217.55 1506.17,1216.03 1506.76,1215.85 1507.35,1213.04 1507.93,1212.76 1508.52,1211.07 1509.11,1213.68 1509.69,1213.23 1510.28,1212.84 1510.86,1215.32 1511.45,1214.8 1512.04,1214.65 1512.62,1218.67 1513.21,1216.76 1513.8,1213.68 1514.38,1210.51 1514.97,1210.3 1515.56,1211.68 1516.14,1213.31 1516.73,1214.59 1517.32,1208.87 1517.9,1206.44 1518.49,1208.35 1519.07,1207.06 1519.66,1206.14 1520.25,1207.91 1520.83,1206.52 1521.42,1206.77 1522.01,1205.82 1522.59,1203.22 1523.18,1204.98 1523.77,1205.65 1524.35,1207.9 1524.94,1209.73 1525.52,1210.17 1526.11,1210.04 1526.7,1211.47 1527.28,1208.72 1527.87,1213.08 1528.46,1213.23 1529.04,1212.96 1529.63,1213.04 1530.22,1213.01 1530.8,1212.95 1531.39,1211.35 1531.98,1214.07 1532.56,1216.59 1533.15,1217.85 1533.73,1217.23 1534.32,1221.06 1534.91,1217.53 1535.49,1219.94 1536.08,1220.88 1536.67,1218.95 1537.25,1218.69 1537.84,1218.23 1538.43,1215.14 1539.01,1212.05 1539.6,1212.08 1540.19,1210.96 1540.77,1212.32 1541.36,1211.12 1541.94,1211.15 1542.53,1212.38 1543.12,1213.91 1543.7,1213.84 1544.29,1215.11 1544.88,1214.87 1545.46,1214.32 1546.05,1214.18 1546.64,1211.3 1547.22,1209.88 1547.81,1212.88 1548.4,1214.21 1548.98,1215.64 1549.57,1213.98 1550.15,1214.14 1550.74,1212.82 1551.33,1212.34 1551.91,1213.68 1552.5,1213.47 1553.09,1213.39 1553.67,1214.75 1554.26,1213.29 1554.85,1214.61 1555.43,1215.85 1556.02,1215.45 1556.6,1215.57 1557.19,1218.14 1557.78,1216.32 1558.36,1218.64 1558.95,1216.94 1559.54,1215.4 1560.12,1215.6 1560.71,1215.32 1561.3,1216.19 1561.88,1214.61 1562.47,1214.08 1563.06,1215.18 1563.64,1216.3 1564.23,1211.75 1564.81,1216.05 1565.4,1213.03 1565.99,1213.05 1566.57,1213 1567.16,1215.5 1567.75,1212.26 1568.33,1212.23 1568.92,1213.52 1569.51,1213.46 1570.09,1212.05 1570.68,1210.68 1571.27,1210.53 1571.85,1208.95 1572.44,1207.53 1573.02,1204.9 1573.61,1203.43 1574.2,1205.37 1574.78,1202.93 1575.37,1201.98 1575.96,1202.66 1576.54,1204.55 1577.13,1200.9 1577.72,1204.17 1578.3,1204.48 1578.89,1203.43 1579.47,1199.56 1580.06,1203.23 1580.65,1204.88 1581.23,1205.54 1581.82,1204.23 1582.41,1204.81 1582.99,1206.68 1583.58,1205.52 1584.17,1207.39 1584.75,1209.15 1585.34,1207.89 1585.93,1209.33 1586.51,1206.57 1587.1,1206.7 1587.68,1208.24 1588.27,1205.74 1588.86,1204.74 1589.44,1205.14 1590.03,1208.32 1590.62,1208.65 1591.2,1212 1591.79,1209.26 1592.38,1206.42 1592.96,1206.92 1593.55,1205.53 1594.14,1205.89 1594.72,1204.79 1595.31,1205.21 1595.89,1205.51 1596.48,1206.86 1597.07,1206.85 1597.65,1209.92 1598.24,1210.26 1598.83,1205.99 1599.41,1205.19 1600,1204.14 1600.59,1202.95 1601.17,1203.44 1601.76,1200.97 1602.34,1199.88 1602.93,1198.76 1603.52,1200.82 1604.1,1202.65 1604.69,1203.17 1605.28,1202.11 1605.86,1202.63 1606.45,1200.25 1607.04,1203.61 1607.62,1205.4 1608.21,1207.18 1608.8,1207.27 1609.38,1204.67 1609.97,1204.85 1610.55,1201.97 1611.14,1202.36 1611.73,1201.49 1612.31,1201.89 1612.9,1202.63 1613.49,1204.69 1614.07,1201.93 1614.66,1205.12 1615.25,1202.81 1615.83,1203.44 1616.42,1203.8 1617.01,1204.35 1617.59,1200.52 1618.18,1202.63 1618.76,1203.29 1619.35,1201.05 1619.94,1201.3 1620.52,1203.22 1621.11,1202.13 1621.7,1204.04 1622.28,1205.99 1622.87,1206.14 1623.46,1204.98 1624.04,1206.72 1624.63,1206.99 1625.22,1207.49 1625.8,1210.62 1626.39,1210.64 1626.97,1209.6 1627.56,1212.69 1628.15,1212.55 1628.73,1216.64 1629.32,1219.05 1629.91,1220.17 1630.49,1218.51 1631.08,1221.02 1631.67,1221.85 1632.25,1218.44 1632.84,1220.87 1633.42,1221.66 1634.01,1222.68 1634.6,1219.27 1635.18,1217.35 1635.77,1215.68 1636.36,1213.61 1636.94,1217.86 1637.53,1217.62 1638.12,1217.24 1638.7,1216.65 1639.29,1217.83 1639.88,1217.14 1640.46,1216.98 1641.05,1216.44 1641.63,1211.91 1642.22,1211.67 1642.81,1210.19 1643.39,1213.22 1643.98,1210.2 1644.57,1208.68 1645.15,1208.76 1645.74,1208.8 1646.33,1210.15 1646.91,1208.75 1647.5,1209.02 1648.09,1207.81 1648.67,1212.28 1649.26,1214.9 1649.84,1213.29 1650.43,1213.3 1651.02,1214.63 1651.6,1215.85 1652.19,1212.94 1652.78,1211.37 1653.36,1214.04 1653.95,1214.1 1654.54,1213.95 1655.12,1211.22 1655.71,1211.08 1656.29,1212.22 1656.88,1210.5 1657.47,1210.28 1658.05,1210.32 1658.64,1210.9 1659.23,1209.84 1659.81,1210.12 1660.4,1210.19 1660.99,1210.41 1661.57,1211.59 1662.16,1212.94 1662.75,1214.04 1663.33,1214.95 1663.92,1215.09 1664.5,1216.01 1665.09,1215.71 1665.68,1214 1666.26,1214.05 1666.85,1216.95 1667.44,1220.92 1668.02,1220.62 1668.61,1218.7 1669.2,1218.37 1669.78,1215.22 1670.37,1215.08 1670.96,1220.61 1671.54,1218.64 1672.13,1219.6 1672.71,1217.9 1673.3,1218.94 1673.89,1215.51 1674.47,1213.88 1675.06,1212.35 1675.65,1212.22 1676.23,1212.34 1676.82,1213.6 1677.41,1212.2 1677.99,1209.73 1678.58,1211.31 1679.17,1212.6 1679.75,1212.64 1680.34,1211.26 1680.92,1212.47 1681.51,1210.67 1682.1,1210.88 1682.68,1212.71 1683.27,1211.28 1683.86,1212.6 1684.44,1208.15 1685.03,1208.16 1685.62,1207.11 1686.2,1208.61 1686.79,1208.8 1687.37,1208.87 1687.96,1210.35 1688.55,1211.76 1689.13,1213.07 1689.72,1212.03 1690.31,1212.04 1690.89,1217.62 1691.48,1218.47 1692.07,1216.38 1692.65,1215.75 1693.24,1215.52 1693.83,1220.92 1694.41,1217.55 1695,1218.52 1695.58,1215.31 1696.17,1210.74 1696.76,1213.52 1697.34,1216.1 1697.93,1216.01 1698.52,1214.46 1699.1,1211.57 1699.69,1213.17 1700.28,1210.17 1700.86,1208.82 1701.45,1207.62 1702.04,1207.86 1702.62,1206.39 1703.21,1207.9 1703.79,1209.18 1704.38,1209.28 1704.97,1210.86 1705.55,1213.89 1706.14,1212.61 1706.73,1215.05 1707.31,1213.62 1707.9,1215.16 1708.49,1215 1709.07,1214.68 1709.66,1213.24 1710.24,1216.09 1710.83,1215.94 1711.42,1214.28 1712,1214.25 1712.59,1215.76 1713.18,1215.51 1713.76,1214.14 1714.35,1211.04 1714.94,1211.13 1715.52,1211.49 1716.11,1211.43 1716.7,1212.72 1717.28,1215.76 1717.87,1215.69 1718.45,1213.93 1719.04,1212.35 1719.63,1215.15 1720.21,1215.31 1720.8,1215.13 1721.39,1215.07 1721.97,1213.7 1722.56,1212.36 1723.15,1212.06 1723.73,1209.15 1724.32,1212.08 1724.91,1212.47 1725.49,1210.9 1726.08,1209.5 1726.66,1210.93 1727.25,1209.68 1727.84,1208.34 1728.42,1207.28 1729.01,1207.4 1729.6,1207.85 1730.18,1207.75 1730.77,1208.04 1731.36,1208.03 1731.94,1209.53 1732.53,1209.43 1733.11,1209.36 1733.7,1209.36 1734.29,1209.42 1734.87,1209.86 1735.46,1206.93 1736.05,1207.24 1736.63,1208.81 1737.22,1208.83 1737.81,1209 1738.39,1207.66 1738.98,1206.93 1739.57,1204.11 1740.15,1206.17 1740.74,1205.03 1741.32,1205.24 1741.91,1202.63 1742.5,1205.85 1743.08,1204.79 1743.67,1205.3 1744.26,1207.02 1744.84,1204.82 1745.43,1207.68 1746.02,1206.23 1746.6,1206.38 1747.19,1202.31 1747.78,1204.33 1748.36,1207.65 1748.95,1204.9 1749.53,1205.34 1750.12,1207 1750.71,1208.74 1751.29,1207.18 1751.88,1203.14 1752.47,1206.35 1753.05,1205.11 1753.64,1205.65 1754.23,1205.7 1754.81,1206.01 1755.4,1206.41 1755.99,1206.59 1756.57,1203.73 1757.16,1204.31 1757.74,1201.85 1758.33,1202.61 1758.92,1204.75 1759.5,1203.59 1760.09,1202.46 1760.68,1204.14 1761.26,1204.43 1761.85,1203.38 1762.44,1203.69 1763.02,1205.74 1763.61,1206.04 1764.19,1206.67 1764.78,1207.13 1765.37,1207.45 1765.95,1208.94 1766.54,1211.58 1767.13,1210.2 1767.71,1211.64 1768.3,1211.56 1768.89,1211.8 1769.47,1210.27 1770.06,1211.95 1770.65,1213.46 1771.23,1211.83 1771.82,1207.58 1772.4,1210.55 1772.99,1213.58 1773.58,1215.05 1774.16,1214.83 1774.75,1216.02 1775.34,1215.6 1775.92,1215.35 1776.51,1214.98 1777.1,1218.88 1777.68,1219.64 1778.27,1220.75 1778.86,1222.88 1779.44,1223.55 1780.03,1221.78 1780.61,1221.18 1781.2,1222.15 1781.79,1221.31 1782.37,1220.96 1782.96,1218.99 1783.55,1219.97 1784.13,1219.39 1784.72,1221.52 1785.31,1220.61 1785.89,1225.7 1786.48,1223.63 1787.06,1223.32 1787.65,1225.4 1788.24,1224.51 1788.82,1222.43 1789.41,1224.66 1790,1224.18 1790.58,1226.26 1791.17,1225.38 1791.76,1224.37 1792.34,1223.36 1792.93,1222.87 1793.52,1218.2 1794.1,1216.1 1794.69,1211.67 1795.27,1208.83 1795.86,1209.14 1796.45,1210.49 1797.03,1210.27 1797.62,1211.7 1798.21,1214.27 1798.79,1216.97 1799.38,1216.49 1799.97,1217.69 1800.55,1220.43 1801.14,1220.22 1801.73,1219.57 1802.31,1217.57 1802.9,1216.05 1803.48,1214.21 1804.07,1215.52 1804.66,1214.93 1805.24,1214.89 1805.83,1214.55 1806.42,1217.08 1807,1216.53 1807.59,1213.52 1808.18,1213.46 1808.76,1216.02 1809.35,1214.13 1809.94,1209.58 1810.52,1209.29 1811.11,1212.19 1811.69,1215.05 1812.28,1210.43 1812.87,1210.66 1813.45,1209.55 1814.04,1206.95 1814.63,1204.06 1815.21,1205.57 1815.8,1202.75 1816.39,1203.16 1816.97,1202.33 1817.56,1202.74 1818.14,1203.46 1818.73,1201.16 1819.32,1198.94 1819.9,1198 1820.49,1200.17 1821.08,1200.94 1821.66,1206.11 1822.25,1206.61 1822.84,1208.11 1823.42,1206.77 1824.01,1205.59 1824.6,1210.15 1825.18,1213.13 1825.77,1214.23 1826.35,1211.56 1826.94,1209.98 1827.53,1208.8 1828.11,1206.04 1828.7,1206.37 1829.29,1209.39 1829.87,1207.74 1830.46,1209.14 1831.05,1207.74 1831.63,1209.35 1832.22,1209.47 1832.81,1209.89 1833.39,1211.1 1833.98,1210.98 1834.56,1212.52 1835.15,1212.64 1835.74,1212.36 1836.32,1213.73 1836.91,1213.93 1837.5,1212.17 1838.08,1210.74 1838.67,1212.24 1839.26,1212.03 1839.84,1211.8 1840.43,1216.09 1841.01,1214.33 1841.6,1215.66 1842.19,1211.26 1842.77,1208.89 1843.36,1209.03 1843.95,1209.18 1844.53,1207.99 1845.12,1209.57 1845.71,1208.39 1846.29,1207.34 1846.88,1206.1 1847.47,1201.99 1848.05,1201.08 1848.64,1204.25 1849.22,1201.88 1849.81,1202.66 1850.4,1202.93 1850.98,1204.95 1851.57,1203.63 1852.16,1204.57 1852.74,1204.61 1853.33,1203.28 1853.92,1206.46 1854.5,1208.22 1855.09,1208.3 1855.68,1206.06 1856.26,1206.42 1856.85,1206.66 1857.43,1206.62 1858.02,1205.36 1858.61,1208.63 1859.19,1210.33 1859.78,1208.68 1860.37,1208.47 1860.95,1205.64 1861.54,1205.02 1862.13,1206.45 1862.71,1205.31 1863.3,1205.27 1863.88,1205.63 1864.47,1207.12 1865.06,1205.75 1865.64,1206.4 1866.23,1203.87 1866.82,1204.29 1867.4,1204.55 1867.99,1203.27 1868.58,1203.3 1869.16,1202.48 1869.75,1204.29 1870.34,1204.76 1870.92,1203.55 1871.51,1201.11 1872.09,1200.4 1872.68,1201.15 1873.27,1201.86 1873.85,1199.56 1874.44,1201.59 1875.03,1204.91 1875.61,1205.04 1876.2,1205.54 1876.79,1205.8 1877.37,1205.94 1877.96,1209.24 1878.55,1213.39 1879.13,1214.94 1879.72,1212.05 1880.3,1213.35 1880.89,1212.1 1881.48,1211.89 1882.06,1217.37 1882.65,1218.47 1883.24,1218.14 1883.82,1219.06 1884.41,1215.81 1885,1215.68 1885.58,1215.41 1886.17,1215.04 1886.76,1213.69 1887.34,1209.26 1887.93,1209.36 1888.51,1211.08 1889.1,1211.4 1889.69,1211.86 1890.27,1211.96 1890.86,1214.89 1891.45,1217.32 1892.03,1216.85 1892.62,1218.03 1893.21,1218.98 1893.79,1218.35 1894.38,1219.46 1894.96,1219.2 1895.55,1221.81 1896.14,1217.01 1896.72,1217.96 1897.31,1221.79 1897.9,1221.22 1898.48,1219.29 1899.07,1218.99 1899.66,1217.01 1900.24,1213.82 1900.83,1215.24 1901.42,1214.7 1902,1214.29 1902.59,1215.01 1903.17,1213.49 1903.76,1214.4 1904.35,1215.3 1904.93,1216.44 1905.52,1217.46 1906.11,1214.23 1906.69,1215.58 1907.28,1214.25 1907.87,1214.04 1908.45,1213.99 1909.04,1214.86 1909.63,1218.97 1910.21,1221.42 1910.8,1223.41 1911.38,1221.21 1911.97,1217.75 1912.56,1217.45 1913.14,1212.73 1913.73,1215.59 1914.32,1219 1914.9,1215.95 1915.49,1214.49 1916.08,1217.39 1916.66,1216.93 1917.25,1216.59 1917.83,1217.76 1918.42,1217.3 1919.01,1214.31 1919.59,1214.06 1920.18,1212.54 1920.77,1215.56 1921.35,1213.78 1921.94,1213.68 1922.53,1213.62 1923.11,1216.15 1923.7,1214.61 1924.29,1214.19 1924.87,1216.8 1925.46,1217.71 1926.04,1217.38 1926.63,1211.45 1927.22,1211.58 1927.8,1211.48 1928.39,1212.81 1928.98,1211.43 1929.56,1211.46 1930.15,1210.03 1930.74,1208.54 1931.32,1210.25 1931.91,1213.17 1932.5,1214.41 1933.08,1209.78 1933.67,1208.57 1934.25,1207.23 1934.84,1211.47 1935.43,1209.94 1936.01,1210.01 1936.6,1209.96 1937.19,1210.05 1937.77,1207.43 1938.36,1207.67 1938.95,1206.44 1939.53,1207.07 1940.12,1208.93 1940.71,1209.19 1941.29,1209.47 1941.88,1212.08 1942.46,1210.79 1943.05,1210.85 1943.64,1210.88 1944.22,1212.02 1944.81,1214.82 1945.4,1213.17 1945.98,1211.56 1946.57,1209.85 1947.16,1214.28 1947.74,1215.83 1948.33,1215.63 1948.91,1215.46 1949.5,1213.65 1950.09,1213.63 1950.67,1213.57 1951.26,1209.17 1951.85,1207.86 1952.43,1209.74 1953.02,1205.37 1953.61,1201.28 1954.19,1198.83 1954.78,1198.16 1955.37,1198.86 1955.95,1201.16 1956.54,1200.13 1957.12,1202.19 1957.71,1203.03 1958.3,1204.91 1958.88,1203.99 1959.47,1207.26 1960.06,1207.69 1960.64,1207.71 1961.23,1209.48 1961.82,1211.33 1962.4,1212.76 1962.99,1209.86 1963.58,1209.7 1964.16,1209.48 1964.75,1208.27 1965.33,1208.35 1965.92,1208.53 1966.51,1208.5 1967.09,1210.08 1967.68,1211.45 1968.27,1212.56 1968.85,1216.7 1969.44,1213.42 1970.03,1214.49 1970.61,1215.46 1971.2,1218.05 1971.78,1219.04 1972.37,1217.22 1972.96,1217 1973.54,1218.08 1974.13,1214.76 1974.72,1213.34 1975.3,1213.07 1975.89,1213.11 1976.48,1210.07 1977.06,1211.3 1977.65,1209.89 1978.24,1207.33 1978.82,1207.63 1979.41,1207.58 1979.99,1210.49 1980.58,1209.01 1981.17,1209.22 1981.75,1209.33 1982.34,1208.04 1982.93,1209.96 1983.51,1210.1 1984.1,1209.97 1984.69,1208.61 1985.27,1207.34 1985.86,1205.88 1986.45,1204.94 1987.03,1205.48 1987.62,1208.74 1988.2,1207.19 1988.79,1207.4 1989.38,1206.06 1989.96,1207.51 1990.55,1210.76 1991.14,1215.29 1991.72,1213.98 1992.31,1213.83 1992.9,1212.2 1993.48,1212.11 1994.07,1211.9 1994.65,1211.93 1995.24,1211.69 1995.83,1215.85 1996.41,1215.81 1997,1211.17 1997.59,1208.26 1998.17,1209.92 1998.76,1209.88 1999.35,1210.15 1999.93,1207.22 2000.52,1207.62 2001.11,1207.85 2001.69,1210.85 2002.28,1210.84 2002.86,1209.27 2003.45,1208.1 2004.04,1208.23 2004.62,1209.45 2005.21,1209.39 2005.8,1209.82 2006.38,1211.77 2006.97,1213.04 2007.56,1213.16 2008.14,1210.29 2008.73,1210.17 2009.32,1207.5 2009.9,1204.94 2010.49,1206.94 2011.07,1208.55 2011.66,1214.52 2012.25,1214.37 2012.83,1214.15 2013.42,1213.88 2014.01,1215.03 2014.59,1218.77 2015.18,1215.5 2015.77,1212.34 2016.35,1210.84 2016.94,1209.58 2017.53,1210.84 2018.11,1210.8 2018.7,1208.91 2019.28,1207.83 2019.87,1211.97 2020.46,1210.04 2021.04,1214.05 2021.63,1213.8 2022.22,1212.11 2022.8,1213.34 2023.39,1214.71 2023.98,1214.33 2024.56,1212.73 2025.15,1214.25 2025.73,1215.44 2026.32,1216.74 2026.91,1216.76 2027.49,1222 2028.08,1222.9 2028.67,1222.05 2029.25,1220.21 2029.84,1221.35 2030.43,1221.06 2031.01,1217.68 2031.6,1219.96 2032.19,1216.47 2032.77,1214.94 2033.36,1213.12 2033.94,1212.87 2034.53,1211.38 2035.12,1210.31 2035.7,1213.26 2036.29,1214.65 2036.88,1214.52 2037.46,1215.63 2038.05,1208.61 2038.64,1207.45 2039.22,1204.9 2039.81,1204.19 2040.4,1204.58 2040.98,1204.8 2041.57,1205.34 2042.15,1207.09 2042.74,1207.07 2043.33,1207 2043.91,1211.44 2044.5,1215.69 2045.09,1215.38 2045.67,1219.11 2046.26,1218.58 2046.85,1219.65 2047.43,1219.32 2048.02,1223.13 2048.6,1224.29 2049.19,1225.27 2049.78,1220.34 2050.36,1217.08 2050.95,1215.4 2051.54,1213.81 2052.12,1213.52 2052.71,1213.29 2053.3,1211.85 2053.88,1214.9 2054.47,1217.2 2055.06,1215.24 2055.64,1216.32 2056.23,1217.62 2056.81,1210.27 2057.4,1208.71 2057.99,1208.96 2058.57,1209.03 2059.16,1207.75 2059.75,1209.19 2060.33,1208.32 2060.92,1208.28 2061.51,1209.87 2062.09,1211.57 2062.68,1211.68 2063.27,1211.61 2063.85,1212.47 2064.44,1212.43 2065.02,1212.37 2065.61,1213.93 2066.2,1210.82 2066.78,1209.63 2067.37,1206.67 2067.96,1208.23 2068.54,1203.75 2069.13,1204.33 2069.72,1206.02 2070.3,1209.14 2070.89,1209.35 2071.48,1208.22 2072.06,1205.9 2072.65,1206.05 2073.23,1207.7 2073.82,1208.3 2074.41,1205.57 2074.99,1205.84 2075.58,1206.28 2076.17,1207.71 2076.75,1205.4 2077.34,1204.05 2077.93,1202.65 2078.51,1204.4 2079.1,1203.21 2079.68,1203.61 2080.27,1205.03 2080.86,1206.96 2081.44,1207.04 2082.03,1211.39 2082.62,1207.53 2083.2,1209.08 2083.79,1204.97 2084.38,1208.32 2084.96,1211.5 2085.55,1210.06 2086.14,1210.38 2086.72,1209.14 2087.31,1210.84 2087.89,1209.5 2088.48,1211.04 2089.07,1212.28 2089.65,1210.53 2090.24,1208.93 2090.83,1207.75 2091.41,1209.68 2092,1212.53 2092.59,1211.18 2093.17,1211.32 2093.76,1211.57 2094.35,1214.27 2094.93,1214.14 2095.52,1214.21 2096.1,1211.16 2096.69,1211.06 2097.28,1212.36 2097.86,1212.24 2098.45,1212.42 2099.04,1215.11 2099.62,1216.11 2100.21,1210.08 2100.8,1209.1 2101.38,1209.18 2101.97,1209.14 2102.55,1208.09 2103.14,1210.7 2103.73,1212.24 2104.31,1211.88 2104.9,1210.21 2105.49,1213.31 2106.07,1212.93 2106.66,1212.89 2107.25,1214.32 2107.83,1212.58 2108.42,1212.14 2109.01,1209.14 2109.59,1207.99 2110.18,1209.66 2110.76,1211.09 2111.35,1209.84 2111.94,1206.91 2112.52,1207.25 2113.11,1211.76 2113.7,1210.38 2114.28,1207.43 2114.87,1210.08 2115.46,1210.1 2116.04,1213.03 2116.63,1214.29 2117.22,1211.15 2117.8,1212.47 2118.39,1212.54 2118.97,1209.52 2119.56,1206.56 2120.15,1206.85 2120.73,1208.78 2121.32,1205.75 2121.91,1204.39 2122.49,1204.85 2123.08,1203.98 2123.67,1205.66 2124.25,1206.16 2124.84,1204.88 2125.42,1203.96 2126.01,1203.14 2126.6,1202.26 2127.18,1201.45 2127.77,1201.95 2128.36,1203.95 2128.94,1205.79 2129.53,1210.09 2130.12,1209.71 2130.7,1208.34 2131.29,1211.35 2131.88,1209.86 2132.46,1208.76 2133.05,1210.37 2133.63,1213.29 2134.22,1217.12 2134.81,1216.95 2135.39,1215.22 2135.98,1217.91 2136.57,1220.29 2137.15,1219.75 2137.74,1219.39 2138.33,1220.53 2138.91,1221.3 2139.5,1220.79 2140.09,1220.37 2140.67,1219.88 2141.26,1222.36 2141.84,1221.81 2142.43,1218.43 2143.02,1218.14 2143.6,1215.06 2144.19,1213.35 2144.78,1217.28 2145.36,1217.06 2145.95,1215.72 2146.54,1214.27 2147.12,1212.63 2147.71,1214.08 2148.3,1209.41 2148.88,1209.5 2149.47,1209.59 2150.05,1209.48 2150.64,1207.99 2151.23,1210.83 2151.81,1212.17 2152.4,1210.75 2152.99,1212.44 2153.57,1213.69 2154.16,1212.28 2154.75,1213.45 2155.33,1211.97 2155.92,1213.48 2156.5,1213.44 2157.09,1213.36 2157.68,1214.79 2158.26,1218.93 \"/>\n<path clip-path=\"url(#clip212)\" d=\"M986.025 1211.82 L986.612 1211.82 L987.198 1211.82 L987.785 1211.82 L988.371 1211.82 L988.957 1211.82 L989.544 1211.82 L990.13 1211.82 L990.717 1211.82 L991.303 1211.82 L991.889 1211.82 L992.476 1211.82 L993.062 1211.82 L993.649 1211.82 L994.235 1211.82 L994.822 1211.82 L995.408 1211.82 L995.994 1211.82 L996.581 1211.82 L997.167 1211.82 L997.754 1211.82 L998.34 1211.82 L998.926 1211.82 L999.513 1211.82 L1000.1 1211.82 L1000.69 1211.82 L1001.27 1211.82 L1001.86 1211.82 L1002.44 1211.82 L1003.03 1211.82 L1003.62 1211.82 L1004.2 1211.82 L1004.79 1211.82 L1005.38 1211.82 L1005.96 1211.82 L1006.55 1211.82 L1007.14 1211.82 L1007.72 1211.82 L1008.31 1211.82 L1008.9 1211.82 L1009.48 1211.82 L1010.07 1211.82 L1010.65 1211.82 L1011.24 1211.82 L1011.83 1211.82 L1012.41 1211.82 L1013 1211.82 L1013.59 1211.82 L1014.17 1211.82 L1014.76 1211.82 L1015.35 1211.82 L1015.93 1211.82 L1016.52 1211.82 L1017.11 1211.82 L1017.69 1211.82 L1018.28 1211.82 L1018.86 1211.82 L1019.45 1211.82 L1020.04 1211.82 L1020.62 1211.82 L1021.21 1211.82 L1021.8 1211.82 L1022.38 1211.82 L1022.97 1211.82 L1023.56 1211.82 L1024.14 1211.82 L1024.73 1211.82 L1025.32 1211.82 L1025.9 1211.82 L1026.49 1211.82 L1027.07 1211.82 L1027.66 1211.82 L1028.25 1211.82 L1028.83 1211.82 L1029.42 1211.82 L1030.01 1211.82 L1030.59 1211.82 L1031.18 1211.82 L1031.77 1211.82 L1032.35 1211.82 L1032.94 1211.82 L1033.52 1211.82 L1034.11 1211.82 L1034.7 1211.82 L1035.28 1211.82 L1035.87 1211.82 L1036.46 1211.82 L1037.04 1211.82 L1037.63 1211.82 L1038.22 1211.82 L1038.8 1211.82 L1039.39 1211.82 L1039.98 1211.82 L1040.56 1211.82 L1041.15 1211.82 L1041.73 1211.82 L1042.32 1211.82 L1042.91 1211.82 L1043.49 1211.82 L1044.08 1211.82 L1044.67 1211.82 L1045.25 1211.82 L1045.84 1211.82 L1046.43 1211.82 L1047.01 1211.82 L1047.6 1211.82 L1048.19 1211.82 L1048.77 1211.82 L1049.36 1211.82 L1049.94 1211.82 L1050.53 1211.82 L1051.12 1211.82 L1051.7 1211.82 L1052.29 1211.82 L1052.88 1211.82 L1053.46 1211.82 L1054.05 1211.82 L1054.64 1211.82 L1055.22 1211.82 L1055.81 1211.82 L1056.39 1211.82 L1056.98 1211.82 L1057.57 1211.82 L1058.15 1211.82 L1058.74 1211.82 L1059.33 1211.82 L1059.91 1211.82 L1060.5 1211.82 L1061.09 1211.82 L1061.67 1211.82 L1062.26 1211.82 L1062.85 1211.82 L1063.43 1211.82 L1064.02 1211.82 L1064.6 1211.82 L1065.19 1211.82 L1065.78 1211.82 L1066.36 1211.82 L1066.95 1211.82 L1067.54 1211.82 L1068.12 1211.82 L1068.71 1211.82 L1069.3 1211.82 L1069.88 1211.82 L1070.47 1211.82 L1071.06 1211.82 L1071.64 1211.82 L1072.23 1211.82 L1072.81 1211.82 L1073.4 1211.82 L1073.99 1211.82 L1074.57 1211.82 L1075.16 1211.82 L1075.75 1211.82 L1076.33 1211.82 L1076.92 1211.82 L1077.51 1211.82 L1078.09 1211.82 L1078.68 1211.82 L1079.26 1211.82 L1079.85 1211.82 L1080.44 1211.82 L1081.02 1211.82 L1081.61 1211.82 L1082.2 1211.82 L1082.78 1211.82 L1083.37 1211.82 L1083.96 1211.82 L1084.54 1211.82 L1085.13 1211.82 L1085.72 1211.82 L1086.3 1211.82 L1086.89 1211.82 L1087.47 1211.82 L1088.06 1211.82 L1088.65 1211.82 L1089.23 1211.82 L1089.82 1211.82 L1090.41 1211.82 L1090.99 1211.82 L1091.58 1211.82 L1092.17 1211.82 L1092.75 1211.82 L1093.34 1211.82 L1093.93 1211.82 L1094.51 1211.82 L1095.1 1211.82 L1095.68 1211.82 L1096.27 1211.82 L1096.86 1211.82 L1097.44 1211.82 L1098.03 1211.82 L1098.62 1211.82 L1099.2 1211.82 L1099.79 1211.82 L1100.38 1211.82 L1100.96 1211.82 L1101.55 1211.82 L1102.14 1211.82 L1102.72 1211.82 L1103.31 1211.82 L1103.89 1211.82 L1104.48 1211.82 L1105.07 1211.82 L1105.65 1211.82 L1106.24 1211.82 L1106.83 1211.82 L1107.41 1211.82 L1108 1211.82 L1108.59 1211.82 L1109.17 1211.82 L1109.76 1211.82 L1110.34 1211.82 L1110.93 1211.82 L1111.52 1211.82 L1112.1 1211.82 L1112.69 1211.82 L1113.28 1211.82 L1113.86 1211.82 L1114.45 1211.82 L1115.04 1211.82 L1115.62 1211.82 L1116.21 1211.82 L1116.8 1211.82 L1117.38 1211.82 L1117.97 1211.82 L1118.55 1211.82 L1119.14 1211.82 L1119.73 1211.82 L1120.31 1211.82 L1120.9 1211.82 L1121.49 1211.82 L1122.07 1211.82 L1122.66 1211.82 L1123.25 1211.82 L1123.83 1211.82 L1124.42 1211.82 L1125.01 1211.82 L1125.59 1211.82 L1126.18 1211.82 L1126.76 1211.82 L1127.35 1211.82 L1127.94 1211.82 L1128.52 1211.82 L1129.11 1211.82 L1129.7 1211.82 L1130.28 1211.82 L1130.87 1211.82 L1131.46 1211.82 L1132.04 1211.82 L1132.63 1211.82 L1133.21 1211.82 L1133.8 1211.82 L1134.39 1211.82 L1134.97 1211.82 L1135.56 1211.82 L1136.15 1211.82 L1136.73 1211.82 L1137.32 1211.82 L1137.91 1211.82 L1138.49 1211.82 L1139.08 1211.82 L1139.67 1211.82 L1140.25 1211.82 L1140.84 1211.82 L1141.42 1211.82 L1142.01 1211.82 L1142.6 1211.82 L1143.18 1211.82 L1143.77 1211.82 L1144.36 1211.82 L1144.94 1211.82 L1145.53 1211.82 L1146.12 1211.82 L1146.7 1211.82 L1147.29 1211.82 L1147.88 1211.82 L1148.46 1211.82 L1149.05 1211.82 L1149.63 1211.82 L1150.22 1211.82 L1150.81 1211.82 L1151.39 1211.82 L1151.98 1211.82 L1152.57 1211.82 L1153.15 1211.82 L1153.74 1211.82 L1154.33 1211.82 L1154.91 1211.82 L1155.5 1211.82 L1156.09 1211.82 L1156.67 1211.82 L1157.26 1211.82 L1157.84 1211.82 L1158.43 1211.82 L1159.02 1211.82 L1159.6 1211.82 L1160.19 1211.82 L1160.78 1211.82 L1161.36 1211.82 L1161.95 1211.82 L1162.54 1211.82 L1163.12 1211.82 L1163.71 1211.82 L1164.29 1211.82 L1164.88 1211.82 L1165.47 1211.82 L1166.05 1211.82 L1166.64 1211.82 L1167.23 1211.82 L1167.81 1211.82 L1168.4 1211.82 L1168.99 1211.82 L1169.57 1211.82 L1170.16 1211.82 L1170.75 1211.82 L1171.33 1211.82 L1171.92 1211.82 L1172.5 1211.82 L1173.09 1211.82 L1173.68 1211.82 L1174.26 1211.82 L1174.85 1211.82 L1175.44 1211.82 L1176.02 1211.82 L1176.61 1211.82 L1177.2 1211.82 L1177.78 1211.82 L1178.37 1211.82 L1178.96 1211.82 L1179.54 1211.82 L1180.13 1211.82 L1180.71 1211.82 L1181.3 1211.82 L1181.89 1211.82 L1182.47 1211.82 L1183.06 1211.82 L1183.65 1211.82 L1184.23 1211.82 L1184.82 1211.82 L1185.41 1211.82 L1185.99 1211.82 L1186.58 1211.82 L1187.16 1211.82 L1187.75 1211.82 L1188.34 1211.82 L1188.92 1211.82 L1189.51 1211.82 L1190.1 1211.82 L1190.68 1211.82 L1191.27 1211.82 L1191.86 1211.82 L1192.44 1211.82 L1193.03 1211.82 L1193.62 1211.82 L1194.2 1211.82 L1194.79 1211.82 L1195.37 1211.82 L1195.96 1211.82 L1196.55 1211.82 L1197.13 1211.82 L1197.72 1211.82 L1198.31 1211.82 L1198.89 1211.82 L1199.48 1211.82 L1200.07 1211.82 L1200.65 1211.82 L1201.24 1211.82 L1201.83 1211.82 L1202.41 1211.82 L1203 1211.82 L1203.58 1211.82 L1204.17 1211.82 L1204.76 1211.82 L1205.34 1211.82 L1205.93 1211.82 L1206.52 1211.82 L1207.1 1211.82 L1207.69 1211.82 L1208.28 1211.82 L1208.86 1211.82 L1209.45 1211.82 L1210.03 1211.82 L1210.62 1211.82 L1211.21 1211.82 L1211.79 1211.82 L1212.38 1211.82 L1212.97 1211.82 L1213.55 1211.82 L1214.14 1211.82 L1214.73 1211.82 L1215.31 1211.82 L1215.9 1211.82 L1216.49 1211.82 L1217.07 1211.82 L1217.66 1211.82 L1218.24 1211.82 L1218.83 1211.82 L1219.42 1211.82 L1220 1211.82 L1220.59 1211.82 L1221.18 1211.82 L1221.76 1211.82 L1222.35 1211.82 L1222.94 1211.82 L1223.52 1211.82 L1224.11 1211.82 L1224.7 1211.82 L1225.28 1211.82 L1225.87 1211.82 L1226.45 1211.82 L1227.04 1211.82 L1227.63 1211.82 L1228.21 1211.82 L1228.8 1211.82 L1229.39 1211.82 L1229.97 1211.82 L1230.56 1211.82 L1231.15 1211.82 L1231.73 1211.82 L1232.32 1211.82 L1232.91 1211.82 L1233.49 1211.82 L1234.08 1211.82 L1234.66 1211.82 L1235.25 1211.82 L1235.84 1211.82 L1236.42 1211.82 L1237.01 1211.82 L1237.6 1211.82 L1238.18 1211.82 L1238.77 1211.82 L1239.36 1211.82 L1239.94 1211.82 L1240.53 1211.82 L1241.11 1211.82 L1241.7 1211.82 L1242.29 1211.82 L1242.87 1211.82 L1243.46 1211.82 L1244.05 1211.82 L1244.63 1211.82 L1245.22 1211.82 L1245.81 1211.82 L1246.39 1211.82 L1246.98 1211.82 L1247.57 1211.82 L1248.15 1211.82 L1248.74 1211.82 L1249.32 1211.82 L1249.91 1211.82 L1250.5 1211.82 L1251.08 1211.82 L1251.67 1211.82 L1252.26 1211.82 L1252.84 1211.82 L1253.43 1211.82 L1254.02 1211.82 L1254.6 1211.82 L1255.19 1211.82 L1255.78 1211.82 L1256.36 1211.82 L1256.95 1211.82 L1257.53 1211.82 L1258.12 1211.82 L1258.71 1211.82 L1259.29 1211.82 L1259.88 1211.82 L1260.47 1211.82 L1261.05 1211.82 L1261.64 1211.82 L1262.23 1211.82 L1262.81 1211.82 L1263.4 1211.82 L1263.98 1211.82 L1264.57 1211.82 L1265.16 1211.82 L1265.74 1211.82 L1266.33 1211.82 L1266.92 1211.82 L1267.5 1211.82 L1268.09 1211.82 L1268.68 1211.82 L1269.26 1211.82 L1269.85 1211.82 L1270.44 1211.82 L1271.02 1211.82 L1271.61 1211.82 L1272.19 1211.82 L1272.78 1211.82 L1273.37 1211.82 L1273.95 1211.82 L1274.54 1211.82 L1275.13 1211.82 L1275.71 1211.82 L1276.3 1211.82 L1276.89 1211.82 L1277.47 1211.82 L1278.06 1211.82 L1278.65 1211.82 L1279.23 1211.82 L1279.82 1211.82 L1280.4 1211.82 L1280.99 1211.82 L1281.58 1211.82 L1282.16 1211.82 L1282.75 1211.82 L1283.34 1211.82 L1283.92 1211.82 L1284.51 1211.82 L1285.1 1211.82 L1285.68 1211.82 L1286.27 1211.82 L1286.86 1211.82 L1287.44 1211.82 L1288.03 1211.82 L1288.61 1211.82 L1289.2 1211.82 L1289.79 1211.82 L1290.37 1211.82 L1290.96 1211.82 L1291.55 1211.82 L1292.13 1211.82 L1292.72 1211.82 L1293.31 1211.82 L1293.89 1211.82 L1294.48 1211.82 L1295.06 1211.82 L1295.65 1211.82 L1296.24 1211.82 L1296.82 1211.82 L1297.41 1211.82 L1298 1211.82 L1298.58 1211.82 L1299.17 1211.82 L1299.76 1211.82 L1300.34 1211.82 L1300.93 1211.82 L1301.52 1211.82 L1302.1 1211.82 L1302.69 1211.82 L1303.27 1211.82 L1303.86 1211.82 L1304.45 1211.82 L1305.03 1211.82 L1305.62 1211.82 L1306.21 1211.82 L1306.79 1211.82 L1307.38 1211.82 L1307.97 1211.82 L1308.55 1211.82 L1309.14 1211.82 L1309.73 1211.82 L1310.31 1211.82 L1310.9 1211.82 L1311.48 1211.82 L1312.07 1211.82 L1312.66 1211.82 L1313.24 1211.82 L1313.83 1211.82 L1314.42 1211.82 L1315 1211.82 L1315.59 1211.82 L1316.18 1211.82 L1316.76 1211.82 L1317.35 1211.82 L1317.93 1211.82 L1318.52 1211.82 L1319.11 1211.82 L1319.69 1211.82 L1320.28 1211.82 L1320.87 1211.82 L1321.45 1211.82 L1322.04 1211.82 L1322.63 1211.82 L1323.21 1211.82 L1323.8 1211.82 L1324.39 1211.82 L1324.97 1211.82 L1325.56 1211.82 L1326.14 1211.82 L1326.73 1211.82 L1327.32 1211.82 L1327.9 1211.82 L1328.49 1211.82 L1329.08 1211.82 L1329.66 1211.82 L1330.25 1211.82 L1330.84 1211.82 L1331.42 1211.82 L1332.01 1211.82 L1332.6 1211.82 L1333.18 1211.82 L1333.77 1211.82 L1334.35 1211.82 L1334.94 1211.82 L1335.53 1211.82 L1336.11 1211.82 L1336.7 1211.82 L1337.29 1211.82 L1337.87 1211.82 L1338.46 1211.82 L1339.05 1211.82 L1339.63 1211.82 L1340.22 1211.82 L1340.8 1211.82 L1341.39 1211.82 L1341.98 1211.82 L1342.56 1211.82 L1343.15 1211.82 L1343.74 1211.82 L1344.32 1211.82 L1344.91 1211.82 L1345.5 1211.82 L1346.08 1211.82 L1346.67 1211.82 L1347.26 1211.82 L1347.84 1211.82 L1348.43 1211.82 L1349.01 1211.82 L1349.6 1211.82 L1350.19 1211.82 L1350.77 1211.82 L1351.36 1211.82 L1351.95 1211.82 L1352.53 1211.82 L1353.12 1211.82 L1353.71 1211.82 L1354.29 1211.82 L1354.88 1211.82 L1355.47 1211.82 L1356.05 1211.82 L1356.64 1211.82 L1357.22 1211.82 L1357.81 1211.82 L1358.4 1211.82 L1358.98 1211.82 L1359.57 1211.82 L1360.16 1211.82 L1360.74 1211.82 L1361.33 1211.82 L1361.92 1211.82 L1362.5 1211.82 L1363.09 1211.82 L1363.68 1211.82 L1364.26 1211.82 L1364.85 1211.82 L1365.43 1211.82 L1366.02 1211.82 L1366.61 1211.82 L1367.19 1211.82 L1367.78 1211.82 L1368.37 1211.82 L1368.95 1211.82 L1369.54 1211.82 L1370.13 1211.82 L1370.71 1211.82 L1371.3 1211.82 L1371.88 1211.82 L1372.47 1211.82 L1373.06 1211.82 L1373.64 1211.82 L1374.23 1211.82 L1374.82 1211.82 L1375.4 1211.82 L1375.99 1211.82 L1376.58 1211.82 L1377.16 1211.82 L1377.75 1211.82 L1378.34 1211.82 L1378.92 1211.82 L1379.51 1211.82 L1380.09 1211.82 L1380.68 1211.82 L1381.27 1211.82 L1381.85 1211.82 L1382.44 1211.82 L1383.03 1211.82 L1383.61 1211.82 L1384.2 1211.82 L1384.79 1211.82 L1385.37 1211.82 L1385.96 1211.82 L1386.55 1211.82 L1387.13 1211.82 L1387.72 1211.82 L1388.3 1211.82 L1388.89 1211.82 L1389.48 1211.82 L1390.06 1211.82 L1390.65 1211.82 L1391.24 1211.82 L1391.82 1211.82 L1392.41 1211.82 L1393 1211.82 L1393.58 1211.82 L1394.17 1211.82 L1394.75 1211.82 L1395.34 1211.82 L1395.93 1211.82 L1396.51 1211.82 L1397.1 1211.82 L1397.69 1211.82 L1398.27 1211.82 L1398.86 1211.82 L1399.45 1211.82 L1400.03 1211.82 L1400.62 1211.82 L1401.21 1211.82 L1401.79 1211.82 L1402.38 1211.82 L1402.96 1211.82 L1403.55 1211.82 L1404.14 1211.82 L1404.72 1211.82 L1405.31 1211.82 L1405.9 1211.82 L1406.48 1211.82 L1407.07 1211.82 L1407.66 1211.82 L1408.24 1211.82 L1408.83 1211.82 L1409.42 1211.82 L1410 1211.82 L1410.59 1211.82 L1411.17 1211.82 L1411.76 1211.82 L1412.35 1211.82 L1412.93 1211.82 L1413.52 1211.82 L1414.11 1211.82 L1414.69 1211.82 L1415.28 1211.82 L1415.87 1211.82 L1416.45 1211.82 L1417.04 1211.82 L1417.63 1211.82 L1418.21 1211.82 L1418.8 1211.82 L1419.38 1211.82 L1419.97 1211.82 L1420.56 1211.82 L1421.14 1211.82 L1421.73 1211.82 L1422.32 1211.82 L1422.9 1211.82 L1423.49 1211.82 L1424.08 1211.82 L1424.66 1211.82 L1425.25 1211.82 L1425.83 1211.82 L1426.42 1211.82 L1427.01 1211.82 L1427.59 1211.82 L1428.18 1211.82 L1428.77 1211.82 L1429.35 1211.82 L1429.94 1211.82 L1430.53 1211.82 L1431.11 1211.82 L1431.7 1211.82 L1432.29 1211.82 L1432.87 1211.82 L1433.46 1211.82 L1434.04 1211.82 L1434.63 1211.82 L1435.22 1211.82 L1435.8 1211.82 L1436.39 1211.82 L1436.98 1211.82 L1437.56 1211.82 L1438.15 1211.82 L1438.74 1211.82 L1439.32 1211.82 L1439.91 1211.82 L1440.5 1211.82 L1441.08 1211.82 L1441.67 1211.82 L1442.25 1211.82 L1442.84 1211.82 L1443.43 1211.82 L1444.01 1211.82 L1444.6 1211.82 L1445.19 1211.82 L1445.77 1211.82 L1446.36 1211.82 L1446.95 1211.82 L1447.53 1211.82 L1448.12 1211.82 L1448.7 1211.82 L1449.29 1211.82 L1449.88 1211.82 L1450.46 1211.82 L1451.05 1211.82 L1451.64 1211.82 L1452.22 1211.82 L1452.81 1211.82 L1453.4 1211.82 L1453.98 1211.82 L1454.57 1211.82 L1455.16 1211.82 L1455.74 1211.82 L1456.33 1211.82 L1456.91 1211.82 L1457.5 1211.82 L1458.09 1211.82 L1458.67 1211.82 L1459.26 1211.82 L1459.85 1211.82 L1460.43 1211.82 L1461.02 1211.82 L1461.61 1211.82 L1462.19 1211.82 L1462.78 1211.82 L1463.37 1211.82 L1463.95 1211.82 L1464.54 1211.82 L1465.12 1211.82 L1465.71 1211.82 L1466.3 1211.82 L1466.88 1211.82 L1467.47 1211.82 L1468.06 1211.82 L1468.64 1211.82 L1469.23 1211.82 L1469.82 1211.82 L1470.4 1211.82 L1470.99 1211.82 L1471.57 1211.82 L1472.16 1211.82 L1472.75 1211.82 L1473.33 1211.82 L1473.92 1211.82 L1474.51 1211.82 L1475.09 1211.82 L1475.68 1211.82 L1476.27 1211.82 L1476.85 1211.82 L1477.44 1211.82 L1478.03 1211.82 L1478.61 1211.82 L1479.2 1211.82 L1479.78 1211.82 L1480.37 1211.82 L1480.96 1211.82 L1481.54 1211.82 L1482.13 1211.82 L1482.72 1211.82 L1483.3 1211.82 L1483.89 1211.82 L1484.48 1211.82 L1485.06 1211.82 L1485.65 1211.82 L1486.24 1211.82 L1486.82 1211.82 L1487.41 1211.82 L1487.99 1211.82 L1488.58 1211.82 L1489.17 1211.82 L1489.75 1211.82 L1490.34 1211.82 L1490.93 1211.82 L1491.51 1211.82 L1492.1 1211.82 L1492.69 1211.82 L1493.27 1211.82 L1493.86 1211.82 L1494.45 1211.82 L1495.03 1211.82 L1495.62 1211.82 L1496.2 1211.82 L1496.79 1211.82 L1497.38 1211.82 L1497.96 1211.82 L1498.55 1211.82 L1499.14 1211.82 L1499.72 1211.82 L1500.31 1211.82 L1500.9 1211.82 L1501.48 1211.82 L1502.07 1211.82 L1502.65 1211.82 L1503.24 1211.82 L1503.83 1211.82 L1504.41 1211.82 L1505 1211.82 L1505.59 1211.82 L1506.17 1211.82 L1506.76 1211.82 L1507.35 1211.82 L1507.93 1211.82 L1508.52 1211.82 L1509.11 1211.82 L1509.69 1211.82 L1510.28 1211.82 L1510.86 1211.82 L1511.45 1211.82 L1512.04 1211.82 L1512.62 1211.82 L1513.21 1211.82 L1513.8 1211.82 L1514.38 1211.82 L1514.97 1211.82 L1515.56 1211.82 L1516.14 1211.82 L1516.73 1211.82 L1517.32 1211.82 L1517.9 1211.82 L1518.49 1211.82 L1519.07 1211.82 L1519.66 1211.82 L1520.25 1211.82 L1520.83 1211.82 L1521.42 1211.82 L1522.01 1211.82 L1522.59 1211.82 L1523.18 1211.82 L1523.77 1211.82 L1524.35 1211.82 L1524.94 1211.82 L1525.52 1211.82 L1526.11 1211.82 L1526.7 1211.82 L1527.28 1211.82 L1527.87 1211.82 L1528.46 1211.82 L1529.04 1211.82 L1529.63 1211.82 L1530.22 1211.82 L1530.8 1211.82 L1531.39 1211.82 L1531.98 1211.82 L1532.56 1211.82 L1533.15 1211.82 L1533.73 1211.82 L1534.32 1211.82 L1534.91 1211.82 L1535.49 1211.82 L1536.08 1211.82 L1536.67 1211.82 L1537.25 1211.82 L1537.84 1211.82 L1538.43 1211.82 L1539.01 1211.82 L1539.6 1211.82 L1540.19 1211.82 L1540.77 1211.82 L1541.36 1211.82 L1541.94 1211.82 L1542.53 1211.82 L1543.12 1211.82 L1543.7 1211.82 L1544.29 1211.82 L1544.88 1211.82 L1545.46 1211.82 L1546.05 1211.82 L1546.64 1211.82 L1547.22 1211.82 L1547.81 1211.82 L1548.4 1211.82 L1548.98 1211.82 L1549.57 1211.82 L1550.15 1211.82 L1550.74 1211.82 L1551.33 1211.82 L1551.91 1211.82 L1552.5 1211.82 L1553.09 1211.82 L1553.67 1211.82 L1554.26 1211.82 L1554.85 1211.82 L1555.43 1211.82 L1556.02 1211.82 L1556.6 1211.82 L1557.19 1211.82 L1557.78 1211.82 L1558.36 1211.82 L1558.95 1211.82 L1559.54 1211.82 L1560.12 1211.82 L1560.71 1211.82 L1561.3 1211.82 L1561.88 1211.82 L1562.47 1211.82 L1563.06 1211.82 L1563.64 1211.82 L1564.23 1211.82 L1564.81 1211.82 L1565.4 1211.82 L1565.99 1211.82 L1566.57 1211.82 L1567.16 1211.82 L1567.75 1211.82 L1568.33 1211.82 L1568.92 1211.82 L1569.51 1211.82 L1570.09 1211.82 L1570.68 1211.82 L1571.27 1211.82 L1571.85 1211.82 L1572.44 1211.82 L1573.02 1211.82 L1573.61 1211.82 L1574.2 1211.82 L1574.78 1211.82 L1575.37 1211.82 L1575.96 1211.82 L1576.54 1211.82 L1577.13 1211.82 L1577.72 1211.82 L1578.3 1211.82 L1578.89 1211.82 L1579.47 1211.82 L1580.06 1211.82 L1580.65 1211.82 L1581.23 1211.82 L1581.82 1211.82 L1582.41 1211.82 L1582.99 1211.82 L1583.58 1211.82 L1584.17 1211.82 L1584.75 1211.82 L1585.34 1211.82 L1585.93 1211.82 L1586.51 1211.82 L1587.1 1211.82 L1587.68 1211.82 L1588.27 1211.82 L1588.86 1211.82 L1589.44 1211.82 L1590.03 1211.82 L1590.62 1211.82 L1591.2 1211.82 L1591.79 1211.82 L1592.38 1211.82 L1592.96 1211.82 L1593.55 1211.82 L1594.14 1211.82 L1594.72 1211.82 L1595.31 1211.82 L1595.89 1211.82 L1596.48 1211.82 L1597.07 1211.82 L1597.65 1211.82 L1598.24 1211.82 L1598.83 1211.82 L1599.41 1211.82 L1600 1211.82 L1600.59 1211.82 L1601.17 1211.82 L1601.76 1211.82 L1602.34 1211.82 L1602.93 1211.82 L1603.52 1211.82 L1604.1 1211.82 L1604.69 1211.82 L1605.28 1211.82 L1605.86 1211.82 L1606.45 1211.82 L1607.04 1211.82 L1607.62 1211.82 L1608.21 1211.82 L1608.8 1211.82 L1609.38 1211.82 L1609.97 1211.82 L1610.55 1211.82 L1611.14 1211.82 L1611.73 1211.82 L1612.31 1211.82 L1612.9 1211.82 L1613.49 1211.82 L1614.07 1211.82 L1614.66 1211.82 L1615.25 1211.82 L1615.83 1211.82 L1616.42 1211.82 L1617.01 1211.82 L1617.59 1211.82 L1618.18 1211.82 L1618.76 1211.82 L1619.35 1211.82 L1619.94 1211.82 L1620.52 1211.82 L1621.11 1211.82 L1621.7 1211.82 L1622.28 1211.82 L1622.87 1211.82 L1623.46 1211.82 L1624.04 1211.82 L1624.63 1211.82 L1625.22 1211.82 L1625.8 1211.82 L1626.39 1211.82 L1626.97 1211.82 L1627.56 1211.82 L1628.15 1211.82 L1628.73 1211.82 L1629.32 1211.82 L1629.91 1211.82 L1630.49 1211.82 L1631.08 1211.82 L1631.67 1211.82 L1632.25 1211.82 L1632.84 1211.82 L1633.42 1211.82 L1634.01 1211.82 L1634.6 1211.82 L1635.18 1211.82 L1635.77 1211.82 L1636.36 1211.82 L1636.94 1211.82 L1637.53 1211.82 L1638.12 1211.82 L1638.7 1211.82 L1639.29 1211.82 L1639.88 1211.82 L1640.46 1211.82 L1641.05 1211.82 L1641.63 1211.82 L1642.22 1211.82 L1642.81 1211.82 L1643.39 1211.82 L1643.98 1211.82 L1644.57 1211.82 L1645.15 1211.82 L1645.74 1211.82 L1646.33 1211.82 L1646.91 1211.82 L1647.5 1211.82 L1648.09 1211.82 L1648.67 1211.82 L1649.26 1211.82 L1649.84 1211.82 L1650.43 1211.82 L1651.02 1211.82 L1651.6 1211.82 L1652.19 1211.82 L1652.78 1211.82 L1653.36 1211.82 L1653.95 1211.82 L1654.54 1211.82 L1655.12 1211.82 L1655.71 1211.82 L1656.29 1211.82 L1656.88 1211.82 L1657.47 1211.82 L1658.05 1211.82 L1658.64 1211.82 L1659.23 1211.82 L1659.81 1211.82 L1660.4 1211.82 L1660.99 1211.82 L1661.57 1211.82 L1662.16 1211.82 L1662.75 1211.82 L1663.33 1211.82 L1663.92 1211.82 L1664.5 1211.82 L1665.09 1211.82 L1665.68 1211.82 L1666.26 1211.82 L1666.85 1211.82 L1667.44 1211.82 L1668.02 1211.82 L1668.61 1211.82 L1669.2 1211.82 L1669.78 1211.82 L1670.37 1211.82 L1670.96 1211.82 L1671.54 1211.82 L1672.13 1211.82 L1672.71 1211.82 L1673.3 1211.82 L1673.89 1211.82 L1674.47 1211.82 L1675.06 1211.82 L1675.65 1211.82 L1676.23 1211.82 L1676.82 1211.82 L1677.41 1211.82 L1677.99 1211.82 L1678.58 1211.82 L1679.17 1211.82 L1679.75 1211.82 L1680.34 1211.82 L1680.92 1211.82 L1681.51 1211.82 L1682.1 1211.82 L1682.68 1211.82 L1683.27 1211.82 L1683.86 1211.82 L1684.44 1211.82 L1685.03 1211.82 L1685.62 1211.82 L1686.2 1211.82 L1686.79 1211.82 L1687.37 1211.82 L1687.96 1211.82 L1688.55 1211.82 L1689.13 1211.82 L1689.72 1211.82 L1690.31 1211.82 L1690.89 1211.82 L1691.48 1211.82 L1692.07 1211.82 L1692.65 1211.82 L1693.24 1211.82 L1693.83 1211.82 L1694.41 1211.82 L1695 1211.82 L1695.58 1211.82 L1696.17 1211.82 L1696.76 1211.82 L1697.34 1211.82 L1697.93 1211.82 L1698.52 1211.82 L1699.1 1211.82 L1699.69 1211.82 L1700.28 1211.82 L1700.86 1211.82 L1701.45 1211.82 L1702.04 1211.82 L1702.62 1211.82 L1703.21 1211.82 L1703.79 1211.82 L1704.38 1211.82 L1704.97 1211.82 L1705.55 1211.82 L1706.14 1211.82 L1706.73 1211.82 L1707.31 1211.82 L1707.9 1211.82 L1708.49 1211.82 L1709.07 1211.82 L1709.66 1211.82 L1710.24 1211.82 L1710.83 1211.82 L1711.42 1211.82 L1712 1211.82 L1712.59 1211.82 L1713.18 1211.82 L1713.76 1211.82 L1714.35 1211.82 L1714.94 1211.82 L1715.52 1211.82 L1716.11 1211.82 L1716.7 1211.82 L1717.28 1211.82 L1717.87 1211.82 L1718.45 1211.82 L1719.04 1211.82 L1719.63 1211.82 L1720.21 1211.82 L1720.8 1211.82 L1721.39 1211.82 L1721.97 1211.82 L1722.56 1211.82 L1723.15 1211.82 L1723.73 1211.82 L1724.32 1211.82 L1724.91 1211.82 L1725.49 1211.82 L1726.08 1211.82 L1726.66 1211.82 L1727.25 1211.82 L1727.84 1211.82 L1728.42 1211.82 L1729.01 1211.82 L1729.6 1211.82 L1730.18 1211.82 L1730.77 1211.82 L1731.36 1211.82 L1731.94 1211.82 L1732.53 1211.82 L1733.11 1211.82 L1733.7 1211.82 L1734.29 1211.82 L1734.87 1211.82 L1735.46 1211.82 L1736.05 1211.82 L1736.63 1211.82 L1737.22 1211.82 L1737.81 1211.82 L1738.39 1211.82 L1738.98 1211.82 L1739.57 1211.82 L1740.15 1211.82 L1740.74 1211.82 L1741.32 1211.82 L1741.91 1211.82 L1742.5 1211.82 L1743.08 1211.82 L1743.67 1211.82 L1744.26 1211.82 L1744.84 1211.82 L1745.43 1211.82 L1746.02 1211.82 L1746.6 1211.82 L1747.19 1211.82 L1747.78 1211.82 L1748.36 1211.82 L1748.95 1211.82 L1749.53 1211.82 L1750.12 1211.82 L1750.71 1211.82 L1751.29 1211.82 L1751.88 1211.82 L1752.47 1211.82 L1753.05 1211.82 L1753.64 1211.82 L1754.23 1211.82 L1754.81 1211.82 L1755.4 1211.82 L1755.99 1211.82 L1756.57 1211.82 L1757.16 1211.82 L1757.74 1211.82 L1758.33 1211.82 L1758.92 1211.82 L1759.5 1211.82 L1760.09 1211.82 L1760.68 1211.82 L1761.26 1211.82 L1761.85 1211.82 L1762.44 1211.82 L1763.02 1211.82 L1763.61 1211.82 L1764.19 1211.82 L1764.78 1211.82 L1765.37 1211.82 L1765.95 1211.82 L1766.54 1211.82 L1767.13 1211.82 L1767.71 1211.82 L1768.3 1211.82 L1768.89 1211.82 L1769.47 1211.82 L1770.06 1211.82 L1770.65 1211.82 L1771.23 1211.82 L1771.82 1211.82 L1772.4 1211.82 L1772.99 1211.82 L1773.58 1211.82 L1774.16 1211.82 L1774.75 1211.82 L1775.34 1211.82 L1775.92 1211.82 L1776.51 1211.82 L1777.1 1211.82 L1777.68 1211.82 L1778.27 1211.82 L1778.86 1211.82 L1779.44 1211.82 L1780.03 1211.82 L1780.61 1211.82 L1781.2 1211.82 L1781.79 1211.82 L1782.37 1211.82 L1782.96 1211.82 L1783.55 1211.82 L1784.13 1211.82 L1784.72 1211.82 L1785.31 1211.82 L1785.89 1211.82 L1786.48 1211.82 L1787.06 1211.82 L1787.65 1211.82 L1788.24 1211.82 L1788.82 1211.82 L1789.41 1211.82 L1790 1211.82 L1790.58 1211.82 L1791.17 1211.82 L1791.76 1211.82 L1792.34 1211.82 L1792.93 1211.82 L1793.52 1211.82 L1794.1 1211.82 L1794.69 1211.82 L1795.27 1211.82 L1795.86 1211.82 L1796.45 1211.82 L1797.03 1211.82 L1797.62 1211.82 L1798.21 1211.82 L1798.79 1211.82 L1799.38 1211.82 L1799.97 1211.82 L1800.55 1211.82 L1801.14 1211.82 L1801.73 1211.82 L1802.31 1211.82 L1802.9 1211.82 L1803.48 1211.82 L1804.07 1211.82 L1804.66 1211.82 L1805.24 1211.82 L1805.83 1211.82 L1806.42 1211.82 L1807 1211.82 L1807.59 1211.82 L1808.18 1211.82 L1808.76 1211.82 L1809.35 1211.82 L1809.94 1211.82 L1810.52 1211.82 L1811.11 1211.82 L1811.69 1211.82 L1812.28 1211.82 L1812.87 1211.82 L1813.45 1211.82 L1814.04 1211.82 L1814.63 1211.82 L1815.21 1211.82 L1815.8 1211.82 L1816.39 1211.82 L1816.97 1211.82 L1817.56 1211.82 L1818.14 1211.82 L1818.73 1211.82 L1819.32 1211.82 L1819.9 1211.82 L1820.49 1211.82 L1821.08 1211.82 L1821.66 1211.82 L1822.25 1211.82 L1822.84 1211.82 L1823.42 1211.82 L1824.01 1211.82 L1824.6 1211.82 L1825.18 1211.82 L1825.77 1211.82 L1826.35 1211.82 L1826.94 1211.82 L1827.53 1211.82 L1828.11 1211.82 L1828.7 1211.82 L1829.29 1211.82 L1829.87 1211.82 L1830.46 1211.82 L1831.05 1211.82 L1831.63 1211.82 L1832.22 1211.82 L1832.81 1211.82 L1833.39 1211.82 L1833.98 1211.82 L1834.56 1211.82 L1835.15 1211.82 L1835.74 1211.82 L1836.32 1211.82 L1836.91 1211.82 L1837.5 1211.82 L1838.08 1211.82 L1838.67 1211.82 L1839.26 1211.82 L1839.84 1211.82 L1840.43 1211.82 L1841.01 1211.82 L1841.6 1211.82 L1842.19 1211.82 L1842.77 1211.82 L1843.36 1211.82 L1843.95 1211.82 L1844.53 1211.82 L1845.12 1211.82 L1845.71 1211.82 L1846.29 1211.82 L1846.88 1211.82 L1847.47 1211.82 L1848.05 1211.82 L1848.64 1211.82 L1849.22 1211.82 L1849.81 1211.82 L1850.4 1211.82 L1850.98 1211.82 L1851.57 1211.82 L1852.16 1211.82 L1852.74 1211.82 L1853.33 1211.82 L1853.92 1211.82 L1854.5 1211.82 L1855.09 1211.82 L1855.68 1211.82 L1856.26 1211.82 L1856.85 1211.82 L1857.43 1211.82 L1858.02 1211.82 L1858.61 1211.82 L1859.19 1211.82 L1859.78 1211.82 L1860.37 1211.82 L1860.95 1211.82 L1861.54 1211.82 L1862.13 1211.82 L1862.71 1211.82 L1863.3 1211.82 L1863.88 1211.82 L1864.47 1211.82 L1865.06 1211.82 L1865.64 1211.82 L1866.23 1211.82 L1866.82 1211.82 L1867.4 1211.82 L1867.99 1211.82 L1868.58 1211.82 L1869.16 1211.82 L1869.75 1211.82 L1870.34 1211.82 L1870.92 1211.82 L1871.51 1211.82 L1872.09 1211.82 L1872.68 1211.82 L1873.27 1211.82 L1873.85 1211.82 L1874.44 1211.82 L1875.03 1211.82 L1875.61 1211.82 L1876.2 1211.82 L1876.79 1211.82 L1877.37 1211.82 L1877.96 1211.82 L1878.55 1211.82 L1879.13 1211.82 L1879.72 1211.82 L1880.3 1211.82 L1880.89 1211.82 L1881.48 1211.82 L1882.06 1211.82 L1882.65 1211.82 L1883.24 1211.82 L1883.82 1211.82 L1884.41 1211.82 L1885 1211.82 L1885.58 1211.82 L1886.17 1211.82 L1886.76 1211.82 L1887.34 1211.82 L1887.93 1211.82 L1888.51 1211.82 L1889.1 1211.82 L1889.69 1211.82 L1890.27 1211.82 L1890.86 1211.82 L1891.45 1211.82 L1892.03 1211.82 L1892.62 1211.82 L1893.21 1211.82 L1893.79 1211.82 L1894.38 1211.82 L1894.96 1211.82 L1895.55 1211.82 L1896.14 1211.82 L1896.72 1211.82 L1897.31 1211.82 L1897.9 1211.82 L1898.48 1211.82 L1899.07 1211.82 L1899.66 1211.82 L1900.24 1211.82 L1900.83 1211.82 L1901.42 1211.82 L1902 1211.82 L1902.59 1211.82 L1903.17 1211.82 L1903.76 1211.82 L1904.35 1211.82 L1904.93 1211.82 L1905.52 1211.82 L1906.11 1211.82 L1906.69 1211.82 L1907.28 1211.82 L1907.87 1211.82 L1908.45 1211.82 L1909.04 1211.82 L1909.63 1211.82 L1910.21 1211.82 L1910.8 1211.82 L1911.38 1211.82 L1911.97 1211.82 L1912.56 1211.82 L1913.14 1211.82 L1913.73 1211.82 L1914.32 1211.82 L1914.9 1211.82 L1915.49 1211.82 L1916.08 1211.82 L1916.66 1211.82 L1917.25 1211.82 L1917.83 1211.82 L1918.42 1211.82 L1919.01 1211.82 L1919.59 1211.82 L1920.18 1211.82 L1920.77 1211.82 L1921.35 1211.82 L1921.94 1211.82 L1922.53 1211.82 L1923.11 1211.82 L1923.7 1211.82 L1924.29 1211.82 L1924.87 1211.82 L1925.46 1211.82 L1926.04 1211.82 L1926.63 1211.82 L1927.22 1211.82 L1927.8 1211.82 L1928.39 1211.82 L1928.98 1211.82 L1929.56 1211.82 L1930.15 1211.82 L1930.74 1211.82 L1931.32 1211.82 L1931.91 1211.82 L1932.5 1211.82 L1933.08 1211.82 L1933.67 1211.82 L1934.25 1211.82 L1934.84 1211.82 L1935.43 1211.82 L1936.01 1211.82 L1936.6 1211.82 L1937.19 1211.82 L1937.77 1211.82 L1938.36 1211.82 L1938.95 1211.82 L1939.53 1211.82 L1940.12 1211.82 L1940.71 1211.82 L1941.29 1211.82 L1941.88 1211.82 L1942.46 1211.82 L1943.05 1211.82 L1943.64 1211.82 L1944.22 1211.82 L1944.81 1211.82 L1945.4 1211.82 L1945.98 1211.82 L1946.57 1211.82 L1947.16 1211.82 L1947.74 1211.82 L1948.33 1211.82 L1948.91 1211.82 L1949.5 1211.82 L1950.09 1211.82 L1950.67 1211.82 L1951.26 1211.82 L1951.85 1211.82 L1952.43 1211.82 L1953.02 1211.82 L1953.61 1211.82 L1954.19 1211.82 L1954.78 1211.82 L1955.37 1211.82 L1955.95 1211.82 L1956.54 1211.82 L1957.12 1211.82 L1957.71 1211.82 L1958.3 1211.82 L1958.88 1211.82 L1959.47 1211.82 L1960.06 1211.82 L1960.64 1211.82 L1961.23 1211.82 L1961.82 1211.82 L1962.4 1211.82 L1962.99 1211.82 L1963.58 1211.82 L1964.16 1211.82 L1964.75 1211.82 L1965.33 1211.82 L1965.92 1211.82 L1966.51 1211.82 L1967.09 1211.82 L1967.68 1211.82 L1968.27 1211.82 L1968.85 1211.82 L1969.44 1211.82 L1970.03 1211.82 L1970.61 1211.82 L1971.2 1211.82 L1971.78 1211.82 L1972.37 1211.82 L1972.96 1211.82 L1973.54 1211.82 L1974.13 1211.82 L1974.72 1211.82 L1975.3 1211.82 L1975.89 1211.82 L1976.48 1211.82 L1977.06 1211.82 L1977.65 1211.82 L1978.24 1211.82 L1978.82 1211.82 L1979.41 1211.82 L1979.99 1211.82 L1980.58 1211.82 L1981.17 1211.82 L1981.75 1211.82 L1982.34 1211.82 L1982.93 1211.82 L1983.51 1211.82 L1984.1 1211.82 L1984.69 1211.82 L1985.27 1211.82 L1985.86 1211.82 L1986.45 1211.82 L1987.03 1211.82 L1987.62 1211.82 L1988.2 1211.82 L1988.79 1211.82 L1989.38 1211.82 L1989.96 1211.82 L1990.55 1211.82 L1991.14 1211.82 L1991.72 1211.82 L1992.31 1211.82 L1992.9 1211.82 L1993.48 1211.82 L1994.07 1211.82 L1994.65 1211.82 L1995.24 1211.82 L1995.83 1211.82 L1996.41 1211.82 L1997 1211.82 L1997.59 1211.82 L1998.17 1211.82 L1998.76 1211.82 L1999.35 1211.82 L1999.93 1211.82 L2000.52 1211.82 L2001.11 1211.82 L2001.69 1211.82 L2002.28 1211.82 L2002.86 1211.82 L2003.45 1211.82 L2004.04 1211.82 L2004.62 1211.82 L2005.21 1211.82 L2005.8 1211.82 L2006.38 1211.82 L2006.97 1211.82 L2007.56 1211.82 L2008.14 1211.82 L2008.73 1211.82 L2009.32 1211.82 L2009.9 1211.82 L2010.49 1211.82 L2011.07 1211.82 L2011.66 1211.82 L2012.25 1211.82 L2012.83 1211.82 L2013.42 1211.82 L2014.01 1211.82 L2014.59 1211.82 L2015.18 1211.82 L2015.77 1211.82 L2016.35 1211.82 L2016.94 1211.82 L2017.53 1211.82 L2018.11 1211.82 L2018.7 1211.82 L2019.28 1211.82 L2019.87 1211.82 L2020.46 1211.82 L2021.04 1211.82 L2021.63 1211.82 L2022.22 1211.82 L2022.8 1211.82 L2023.39 1211.82 L2023.98 1211.82 L2024.56 1211.82 L2025.15 1211.82 L2025.73 1211.82 L2026.32 1211.82 L2026.91 1211.82 L2027.49 1211.82 L2028.08 1211.82 L2028.67 1211.82 L2029.25 1211.82 L2029.84 1211.82 L2030.43 1211.82 L2031.01 1211.82 L2031.6 1211.82 L2032.19 1211.82 L2032.77 1211.82 L2033.36 1211.82 L2033.94 1211.82 L2034.53 1211.82 L2035.12 1211.82 L2035.7 1211.82 L2036.29 1211.82 L2036.88 1211.82 L2037.46 1211.82 L2038.05 1211.82 L2038.64 1211.82 L2039.22 1211.82 L2039.81 1211.82 L2040.4 1211.82 L2040.98 1211.82 L2041.57 1211.82 L2042.15 1211.82 L2042.74 1211.82 L2043.33 1211.82 L2043.91 1211.82 L2044.5 1211.82 L2045.09 1211.82 L2045.67 1211.82 L2046.26 1211.82 L2046.85 1211.82 L2047.43 1211.82 L2048.02 1211.82 L2048.6 1211.82 L2049.19 1211.82 L2049.78 1211.82 L2050.36 1211.82 L2050.95 1211.82 L2051.54 1211.82 L2052.12 1211.82 L2052.71 1211.82 L2053.3 1211.82 L2053.88 1211.82 L2054.47 1211.82 L2055.06 1211.82 L2055.64 1211.82 L2056.23 1211.82 L2056.81 1211.82 L2057.4 1211.82 L2057.99 1211.82 L2058.57 1211.82 L2059.16 1211.82 L2059.75 1211.82 L2060.33 1211.82 L2060.92 1211.82 L2061.51 1211.82 L2062.09 1211.82 L2062.68 1211.82 L2063.27 1211.82 L2063.85 1211.82 L2064.44 1211.82 L2065.02 1211.82 L2065.61 1211.82 L2066.2 1211.82 L2066.78 1211.82 L2067.37 1211.82 L2067.96 1211.82 L2068.54 1211.82 L2069.13 1211.82 L2069.72 1211.82 L2070.3 1211.82 L2070.89 1211.82 L2071.48 1211.82 L2072.06 1211.82 L2072.65 1211.82 L2073.23 1211.82 L2073.82 1211.82 L2074.41 1211.82 L2074.99 1211.82 L2075.58 1211.82 L2076.17 1211.82 L2076.75 1211.82 L2077.34 1211.82 L2077.93 1211.82 L2078.51 1211.82 L2079.1 1211.82 L2079.68 1211.82 L2080.27 1211.82 L2080.86 1211.82 L2081.44 1211.82 L2082.03 1211.82 L2082.62 1211.82 L2083.2 1211.82 L2083.79 1211.82 L2084.38 1211.82 L2084.96 1211.82 L2085.55 1211.82 L2086.14 1211.82 L2086.72 1211.82 L2087.31 1211.82 L2087.89 1211.82 L2088.48 1211.82 L2089.07 1211.82 L2089.65 1211.82 L2090.24 1211.82 L2090.83 1211.82 L2091.41 1211.82 L2092 1211.82 L2092.59 1211.82 L2093.17 1211.82 L2093.76 1211.82 L2094.35 1211.82 L2094.93 1211.82 L2095.52 1211.82 L2096.1 1211.82 L2096.69 1211.82 L2097.28 1211.82 L2097.86 1211.82 L2098.45 1211.82 L2099.04 1211.82 L2099.62 1211.82 L2100.21 1211.82 L2100.8 1211.82 L2101.38 1211.82 L2101.97 1211.82 L2102.55 1211.82 L2103.14 1211.82 L2103.73 1211.82 L2104.31 1211.82 L2104.9 1211.82 L2105.49 1211.82 L2106.07 1211.82 L2106.66 1211.82 L2107.25 1211.82 L2107.83 1211.82 L2108.42 1211.82 L2109.01 1211.82 L2109.59 1211.82 L2110.18 1211.82 L2110.76 1211.82 L2111.35 1211.82 L2111.94 1211.82 L2112.52 1211.82 L2113.11 1211.82 L2113.7 1211.82 L2114.28 1211.82 L2114.87 1211.82 L2115.46 1211.82 L2116.04 1211.82 L2116.63 1211.82 L2117.22 1211.82 L2117.8 1211.82 L2118.39 1211.82 L2118.97 1211.82 L2119.56 1211.82 L2120.15 1211.82 L2120.73 1211.82 L2121.32 1211.82 L2121.91 1211.82 L2122.49 1211.82 L2123.08 1211.82 L2123.67 1211.82 L2124.25 1211.82 L2124.84 1211.82 L2125.42 1211.82 L2126.01 1211.82 L2126.6 1211.82 L2127.18 1211.82 L2127.77 1211.82 L2128.36 1211.82 L2128.94 1211.82 L2129.53 1211.82 L2130.12 1211.82 L2130.7 1211.82 L2131.29 1211.82 L2131.88 1211.82 L2132.46 1211.82 L2133.05 1211.82 L2133.63 1211.82 L2134.22 1211.82 L2134.81 1211.82 L2135.39 1211.82 L2135.98 1211.82 L2136.57 1211.82 L2137.15 1211.82 L2137.74 1211.82 L2138.33 1211.82 L2138.91 1211.82 L2139.5 1211.82 L2140.09 1211.82 L2140.67 1211.82 L2141.26 1211.82 L2141.84 1211.82 L2142.43 1211.82 L2143.02 1211.82 L2143.6 1211.82 L2144.19 1211.82 L2144.78 1211.82 L2145.36 1211.82 L2145.95 1211.82 L2146.54 1211.82 L2147.12 1211.82 L2147.71 1211.82 L2148.3 1211.82 L2148.88 1211.82 L2149.47 1211.82 L2150.05 1211.82 L2150.64 1211.82 L2151.23 1211.82 L2151.81 1211.82 L2152.4 1211.82 L2152.99 1211.82 L2153.57 1211.82 L2154.16 1211.82 L2154.75 1211.82 L2155.33 1211.82 L2155.92 1211.82 L2156.5 1211.82 L2157.09 1211.82 L2157.68 1211.82 L2158.26 1211.82 L2158.26 1210.91 L2157.68 1210.91 L2157.09 1210.91 L2156.5 1210.91 L2155.92 1210.91 L2155.33 1210.91 L2154.75 1210.91 L2154.16 1210.91 L2153.57 1210.91 L2152.99 1210.91 L2152.4 1210.91 L2151.81 1210.91 L2151.23 1210.91 L2150.64 1210.91 L2150.05 1210.91 L2149.47 1210.91 L2148.88 1210.91 L2148.3 1210.91 L2147.71 1210.91 L2147.12 1210.91 L2146.54 1210.91 L2145.95 1210.91 L2145.36 1210.91 L2144.78 1210.91 L2144.19 1210.91 L2143.6 1210.91 L2143.02 1210.91 L2142.43 1210.91 L2141.84 1210.91 L2141.26 1210.91 L2140.67 1210.91 L2140.09 1210.91 L2139.5 1210.91 L2138.91 1210.91 L2138.33 1210.91 L2137.74 1210.91 L2137.15 1210.91 L2136.57 1210.91 L2135.98 1210.91 L2135.39 1210.91 L2134.81 1210.91 L2134.22 1210.91 L2133.63 1210.91 L2133.05 1210.91 L2132.46 1210.91 L2131.88 1210.91 L2131.29 1210.91 L2130.7 1210.91 L2130.12 1210.91 L2129.53 1210.91 L2128.94 1210.91 L2128.36 1210.91 L2127.77 1210.91 L2127.18 1210.91 L2126.6 1210.91 L2126.01 1210.91 L2125.42 1210.91 L2124.84 1210.91 L2124.25 1210.91 L2123.67 1210.91 L2123.08 1210.91 L2122.49 1210.91 L2121.91 1210.91 L2121.32 1210.91 L2120.73 1210.91 L2120.15 1210.91 L2119.56 1210.91 L2118.97 1210.91 L2118.39 1210.91 L2117.8 1210.91 L2117.22 1210.91 L2116.63 1210.91 L2116.04 1210.91 L2115.46 1210.91 L2114.87 1210.91 L2114.28 1210.91 L2113.7 1210.91 L2113.11 1210.91 L2112.52 1210.91 L2111.94 1210.91 L2111.35 1210.91 L2110.76 1210.91 L2110.18 1210.91 L2109.59 1210.91 L2109.01 1210.91 L2108.42 1210.91 L2107.83 1210.91 L2107.25 1210.91 L2106.66 1210.91 L2106.07 1210.91 L2105.49 1210.91 L2104.9 1210.91 L2104.31 1210.91 L2103.73 1210.91 L2103.14 1210.91 L2102.55 1210.91 L2101.97 1210.91 L2101.38 1210.91 L2100.8 1210.91 L2100.21 1210.91 L2099.62 1210.91 L2099.04 1210.91 L2098.45 1210.91 L2097.86 1210.91 L2097.28 1210.91 L2096.69 1210.91 L2096.1 1210.91 L2095.52 1210.91 L2094.93 1210.91 L2094.35 1210.91 L2093.76 1210.91 L2093.17 1210.91 L2092.59 1210.91 L2092 1210.91 L2091.41 1210.91 L2090.83 1210.91 L2090.24 1210.91 L2089.65 1210.91 L2089.07 1210.91 L2088.48 1210.91 L2087.89 1210.91 L2087.31 1210.91 L2086.72 1210.91 L2086.14 1210.91 L2085.55 1210.91 L2084.96 1210.91 L2084.38 1210.91 L2083.79 1210.91 L2083.2 1210.91 L2082.62 1210.91 L2082.03 1210.91 L2081.44 1210.91 L2080.86 1210.91 L2080.27 1210.91 L2079.68 1210.91 L2079.1 1210.91 L2078.51 1210.91 L2077.93 1210.91 L2077.34 1210.91 L2076.75 1210.91 L2076.17 1210.91 L2075.58 1210.91 L2074.99 1210.91 L2074.41 1210.91 L2073.82 1210.91 L2073.23 1210.91 L2072.65 1210.91 L2072.06 1210.91 L2071.48 1210.91 L2070.89 1210.91 L2070.3 1210.91 L2069.72 1210.91 L2069.13 1210.91 L2068.54 1210.91 L2067.96 1210.91 L2067.37 1210.91 L2066.78 1210.91 L2066.2 1210.91 L2065.61 1210.91 L2065.02 1210.91 L2064.44 1210.91 L2063.85 1210.91 L2063.27 1210.91 L2062.68 1210.91 L2062.09 1210.91 L2061.51 1210.91 L2060.92 1210.91 L2060.33 1210.91 L2059.75 1210.91 L2059.16 1210.91 L2058.57 1210.91 L2057.99 1210.91 L2057.4 1210.91 L2056.81 1210.91 L2056.23 1210.91 L2055.64 1210.91 L2055.06 1210.91 L2054.47 1210.91 L2053.88 1210.91 L2053.3 1210.91 L2052.71 1210.91 L2052.12 1210.91 L2051.54 1210.91 L2050.95 1210.91 L2050.36 1210.91 L2049.78 1210.91 L2049.19 1210.91 L2048.6 1210.91 L2048.02 1210.91 L2047.43 1210.91 L2046.85 1210.91 L2046.26 1210.91 L2045.67 1210.91 L2045.09 1210.91 L2044.5 1210.91 L2043.91 1210.91 L2043.33 1210.91 L2042.74 1210.91 L2042.15 1210.91 L2041.57 1210.91 L2040.98 1210.91 L2040.4 1210.91 L2039.81 1210.91 L2039.22 1210.91 L2038.64 1210.91 L2038.05 1210.91 L2037.46 1210.91 L2036.88 1210.91 L2036.29 1210.91 L2035.7 1210.91 L2035.12 1210.91 L2034.53 1210.91 L2033.94 1210.91 L2033.36 1210.91 L2032.77 1210.91 L2032.19 1210.91 L2031.6 1210.91 L2031.01 1210.91 L2030.43 1210.91 L2029.84 1210.91 L2029.25 1210.91 L2028.67 1210.91 L2028.08 1210.91 L2027.49 1210.91 L2026.91 1210.91 L2026.32 1210.91 L2025.73 1210.91 L2025.15 1210.91 L2024.56 1210.91 L2023.98 1210.91 L2023.39 1210.91 L2022.8 1210.91 L2022.22 1210.91 L2021.63 1210.91 L2021.04 1210.91 L2020.46 1210.91 L2019.87 1210.91 L2019.28 1210.91 L2018.7 1210.91 L2018.11 1210.91 L2017.53 1210.91 L2016.94 1210.91 L2016.35 1210.91 L2015.77 1210.91 L2015.18 1210.91 L2014.59 1210.91 L2014.01 1210.91 L2013.42 1210.91 L2012.83 1210.91 L2012.25 1210.91 L2011.66 1210.91 L2011.07 1210.91 L2010.49 1210.91 L2009.9 1210.91 L2009.32 1210.91 L2008.73 1210.91 L2008.14 1210.91 L2007.56 1210.91 L2006.97 1210.91 L2006.38 1210.91 L2005.8 1210.91 L2005.21 1210.91 L2004.62 1210.91 L2004.04 1210.91 L2003.45 1210.91 L2002.86 1210.91 L2002.28 1210.91 L2001.69 1210.91 L2001.11 1210.91 L2000.52 1210.91 L1999.93 1210.91 L1999.35 1210.91 L1998.76 1210.91 L1998.17 1210.91 L1997.59 1210.91 L1997 1210.91 L1996.41 1210.91 L1995.83 1210.91 L1995.24 1210.91 L1994.65 1210.91 L1994.07 1210.91 L1993.48 1210.91 L1992.9 1210.91 L1992.31 1210.91 L1991.72 1210.91 L1991.14 1210.91 L1990.55 1210.91 L1989.96 1210.91 L1989.38 1210.91 L1988.79 1210.91 L1988.2 1210.91 L1987.62 1210.91 L1987.03 1210.91 L1986.45 1210.91 L1985.86 1210.91 L1985.27 1210.91 L1984.69 1210.91 L1984.1 1210.91 L1983.51 1210.91 L1982.93 1210.91 L1982.34 1210.91 L1981.75 1210.91 L1981.17 1210.91 L1980.58 1210.91 L1979.99 1210.91 L1979.41 1210.91 L1978.82 1210.91 L1978.24 1210.91 L1977.65 1210.91 L1977.06 1210.91 L1976.48 1210.91 L1975.89 1210.91 L1975.3 1210.91 L1974.72 1210.91 L1974.13 1210.91 L1973.54 1210.91 L1972.96 1210.91 L1972.37 1210.91 L1971.78 1210.91 L1971.2 1210.91 L1970.61 1210.91 L1970.03 1210.91 L1969.44 1210.91 L1968.85 1210.91 L1968.27 1210.91 L1967.68 1210.91 L1967.09 1210.91 L1966.51 1210.91 L1965.92 1210.91 L1965.33 1210.91 L1964.75 1210.91 L1964.16 1210.91 L1963.58 1210.91 L1962.99 1210.91 L1962.4 1210.91 L1961.82 1210.91 L1961.23 1210.91 L1960.64 1210.91 L1960.06 1210.91 L1959.47 1210.91 L1958.88 1210.91 L1958.3 1210.91 L1957.71 1210.91 L1957.12 1210.91 L1956.54 1210.91 L1955.95 1210.91 L1955.37 1210.91 L1954.78 1210.91 L1954.19 1210.91 L1953.61 1210.91 L1953.02 1210.91 L1952.43 1210.91 L1951.85 1210.91 L1951.26 1210.91 L1950.67 1210.91 L1950.09 1210.91 L1949.5 1210.91 L1948.91 1210.91 L1948.33 1210.91 L1947.74 1210.91 L1947.16 1210.91 L1946.57 1210.91 L1945.98 1210.91 L1945.4 1210.91 L1944.81 1210.91 L1944.22 1210.91 L1943.64 1210.91 L1943.05 1210.91 L1942.46 1210.91 L1941.88 1210.91 L1941.29 1210.91 L1940.71 1210.91 L1940.12 1210.91 L1939.53 1210.91 L1938.95 1210.91 L1938.36 1210.91 L1937.77 1210.91 L1937.19 1210.91 L1936.6 1210.91 L1936.01 1210.91 L1935.43 1210.91 L1934.84 1210.91 L1934.25 1210.91 L1933.67 1210.91 L1933.08 1210.91 L1932.5 1210.91 L1931.91 1210.91 L1931.32 1210.91 L1930.74 1210.91 L1930.15 1210.91 L1929.56 1210.91 L1928.98 1210.91 L1928.39 1210.91 L1927.8 1210.91 L1927.22 1210.91 L1926.63 1210.91 L1926.04 1210.91 L1925.46 1210.91 L1924.87 1210.91 L1924.29 1210.91 L1923.7 1210.91 L1923.11 1210.91 L1922.53 1210.91 L1921.94 1210.91 L1921.35 1210.91 L1920.77 1210.91 L1920.18 1210.91 L1919.59 1210.91 L1919.01 1210.91 L1918.42 1210.91 L1917.83 1210.91 L1917.25 1210.91 L1916.66 1210.91 L1916.08 1210.91 L1915.49 1210.91 L1914.9 1210.91 L1914.32 1210.91 L1913.73 1210.91 L1913.14 1210.91 L1912.56 1210.91 L1911.97 1210.91 L1911.38 1210.91 L1910.8 1210.91 L1910.21 1210.91 L1909.63 1210.91 L1909.04 1210.91 L1908.45 1210.91 L1907.87 1210.91 L1907.28 1210.91 L1906.69 1210.91 L1906.11 1210.91 L1905.52 1210.91 L1904.93 1210.91 L1904.35 1210.91 L1903.76 1210.91 L1903.17 1210.91 L1902.59 1210.91 L1902 1210.91 L1901.42 1210.91 L1900.83 1210.91 L1900.24 1210.91 L1899.66 1210.91 L1899.07 1210.91 L1898.48 1210.91 L1897.9 1210.91 L1897.31 1210.91 L1896.72 1210.91 L1896.14 1210.91 L1895.55 1210.91 L1894.96 1210.91 L1894.38 1210.91 L1893.79 1210.91 L1893.21 1210.91 L1892.62 1210.91 L1892.03 1210.91 L1891.45 1210.91 L1890.86 1210.91 L1890.27 1210.91 L1889.69 1210.91 L1889.1 1210.91 L1888.51 1210.91 L1887.93 1210.91 L1887.34 1210.91 L1886.76 1210.91 L1886.17 1210.91 L1885.58 1210.91 L1885 1210.91 L1884.41 1210.91 L1883.82 1210.91 L1883.24 1210.91 L1882.65 1210.91 L1882.06 1210.91 L1881.48 1210.91 L1880.89 1210.91 L1880.3 1210.91 L1879.72 1210.91 L1879.13 1210.91 L1878.55 1210.91 L1877.96 1210.91 L1877.37 1210.91 L1876.79 1210.91 L1876.2 1210.91 L1875.61 1210.91 L1875.03 1210.91 L1874.44 1210.91 L1873.85 1210.91 L1873.27 1210.91 L1872.68 1210.91 L1872.09 1210.91 L1871.51 1210.91 L1870.92 1210.91 L1870.34 1210.91 L1869.75 1210.91 L1869.16 1210.91 L1868.58 1210.91 L1867.99 1210.91 L1867.4 1210.91 L1866.82 1210.91 L1866.23 1210.91 L1865.64 1210.91 L1865.06 1210.91 L1864.47 1210.91 L1863.88 1210.91 L1863.3 1210.91 L1862.71 1210.91 L1862.13 1210.91 L1861.54 1210.91 L1860.95 1210.91 L1860.37 1210.91 L1859.78 1210.91 L1859.19 1210.91 L1858.61 1210.91 L1858.02 1210.91 L1857.43 1210.91 L1856.85 1210.91 L1856.26 1210.91 L1855.68 1210.91 L1855.09 1210.91 L1854.5 1210.91 L1853.92 1210.91 L1853.33 1210.91 L1852.74 1210.91 L1852.16 1210.91 L1851.57 1210.91 L1850.98 1210.91 L1850.4 1210.91 L1849.81 1210.91 L1849.22 1210.91 L1848.64 1210.91 L1848.05 1210.91 L1847.47 1210.91 L1846.88 1210.91 L1846.29 1210.91 L1845.71 1210.91 L1845.12 1210.91 L1844.53 1210.91 L1843.95 1210.91 L1843.36 1210.91 L1842.77 1210.91 L1842.19 1210.91 L1841.6 1210.91 L1841.01 1210.91 L1840.43 1210.91 L1839.84 1210.91 L1839.26 1210.91 L1838.67 1210.91 L1838.08 1210.91 L1837.5 1210.91 L1836.91 1210.91 L1836.32 1210.91 L1835.74 1210.91 L1835.15 1210.91 L1834.56 1210.91 L1833.98 1210.91 L1833.39 1210.91 L1832.81 1210.91 L1832.22 1210.91 L1831.63 1210.91 L1831.05 1210.91 L1830.46 1210.91 L1829.87 1210.91 L1829.29 1210.91 L1828.7 1210.91 L1828.11 1210.91 L1827.53 1210.91 L1826.94 1210.91 L1826.35 1210.91 L1825.77 1210.91 L1825.18 1210.91 L1824.6 1210.91 L1824.01 1210.91 L1823.42 1210.91 L1822.84 1210.91 L1822.25 1210.91 L1821.66 1210.91 L1821.08 1210.91 L1820.49 1210.91 L1819.9 1210.91 L1819.32 1210.91 L1818.73 1210.91 L1818.14 1210.91 L1817.56 1210.91 L1816.97 1210.91 L1816.39 1210.91 L1815.8 1210.91 L1815.21 1210.91 L1814.63 1210.91 L1814.04 1210.91 L1813.45 1210.91 L1812.87 1210.91 L1812.28 1210.91 L1811.69 1210.91 L1811.11 1210.91 L1810.52 1210.91 L1809.94 1210.91 L1809.35 1210.91 L1808.76 1210.91 L1808.18 1210.91 L1807.59 1210.91 L1807 1210.91 L1806.42 1210.91 L1805.83 1210.91 L1805.24 1210.91 L1804.66 1210.91 L1804.07 1210.91 L1803.48 1210.91 L1802.9 1210.91 L1802.31 1210.91 L1801.73 1210.91 L1801.14 1210.91 L1800.55 1210.91 L1799.97 1210.91 L1799.38 1210.91 L1798.79 1210.91 L1798.21 1210.91 L1797.62 1210.91 L1797.03 1210.91 L1796.45 1210.91 L1795.86 1210.91 L1795.27 1210.91 L1794.69 1210.91 L1794.1 1210.91 L1793.52 1210.91 L1792.93 1210.91 L1792.34 1210.91 L1791.76 1210.91 L1791.17 1210.91 L1790.58 1210.91 L1790 1210.91 L1789.41 1210.91 L1788.82 1210.91 L1788.24 1210.91 L1787.65 1210.91 L1787.06 1210.91 L1786.48 1210.91 L1785.89 1210.91 L1785.31 1210.91 L1784.72 1210.91 L1784.13 1210.91 L1783.55 1210.91 L1782.96 1210.91 L1782.37 1210.91 L1781.79 1210.91 L1781.2 1210.91 L1780.61 1210.91 L1780.03 1210.91 L1779.44 1210.91 L1778.86 1210.91 L1778.27 1210.91 L1777.68 1210.91 L1777.1 1210.91 L1776.51 1210.91 L1775.92 1210.91 L1775.34 1210.91 L1774.75 1210.91 L1774.16 1210.91 L1773.58 1210.91 L1772.99 1210.91 L1772.4 1210.91 L1771.82 1210.91 L1771.23 1210.91 L1770.65 1210.91 L1770.06 1210.91 L1769.47 1210.91 L1768.89 1210.91 L1768.3 1210.91 L1767.71 1210.91 L1767.13 1210.91 L1766.54 1210.91 L1765.95 1210.91 L1765.37 1210.91 L1764.78 1210.91 L1764.19 1210.91 L1763.61 1210.91 L1763.02 1210.91 L1762.44 1210.91 L1761.85 1210.91 L1761.26 1210.91 L1760.68 1210.91 L1760.09 1210.91 L1759.5 1210.91 L1758.92 1210.91 L1758.33 1210.91 L1757.74 1210.91 L1757.16 1210.91 L1756.57 1210.91 L1755.99 1210.91 L1755.4 1210.91 L1754.81 1210.91 L1754.23 1210.91 L1753.64 1210.91 L1753.05 1210.91 L1752.47 1210.91 L1751.88 1210.91 L1751.29 1210.91 L1750.71 1210.91 L1750.12 1210.91 L1749.53 1210.91 L1748.95 1210.91 L1748.36 1210.91 L1747.78 1210.91 L1747.19 1210.91 L1746.6 1210.91 L1746.02 1210.91 L1745.43 1210.91 L1744.84 1210.91 L1744.26 1210.91 L1743.67 1210.91 L1743.08 1210.91 L1742.5 1210.91 L1741.91 1210.91 L1741.32 1210.91 L1740.74 1210.91 L1740.15 1210.91 L1739.57 1210.91 L1738.98 1210.91 L1738.39 1210.91 L1737.81 1210.91 L1737.22 1210.91 L1736.63 1210.91 L1736.05 1210.91 L1735.46 1210.91 L1734.87 1210.91 L1734.29 1210.91 L1733.7 1210.91 L1733.11 1210.91 L1732.53 1210.91 L1731.94 1210.91 L1731.36 1210.91 L1730.77 1210.91 L1730.18 1210.91 L1729.6 1210.91 L1729.01 1210.91 L1728.42 1210.91 L1727.84 1210.91 L1727.25 1210.91 L1726.66 1210.91 L1726.08 1210.91 L1725.49 1210.91 L1724.91 1210.91 L1724.32 1210.91 L1723.73 1210.91 L1723.15 1210.91 L1722.56 1210.91 L1721.97 1210.91 L1721.39 1210.91 L1720.8 1210.91 L1720.21 1210.91 L1719.63 1210.91 L1719.04 1210.91 L1718.45 1210.91 L1717.87 1210.91 L1717.28 1210.91 L1716.7 1210.91 L1716.11 1210.91 L1715.52 1210.91 L1714.94 1210.91 L1714.35 1210.91 L1713.76 1210.91 L1713.18 1210.91 L1712.59 1210.91 L1712 1210.91 L1711.42 1210.91 L1710.83 1210.91 L1710.24 1210.91 L1709.66 1210.91 L1709.07 1210.91 L1708.49 1210.91 L1707.9 1210.91 L1707.31 1210.91 L1706.73 1210.91 L1706.14 1210.91 L1705.55 1210.91 L1704.97 1210.91 L1704.38 1210.91 L1703.79 1210.91 L1703.21 1210.91 L1702.62 1210.91 L1702.04 1210.91 L1701.45 1210.91 L1700.86 1210.91 L1700.28 1210.91 L1699.69 1210.91 L1699.1 1210.91 L1698.52 1210.91 L1697.93 1210.91 L1697.34 1210.91 L1696.76 1210.91 L1696.17 1210.91 L1695.58 1210.91 L1695 1210.91 L1694.41 1210.91 L1693.83 1210.91 L1693.24 1210.91 L1692.65 1210.91 L1692.07 1210.91 L1691.48 1210.91 L1690.89 1210.91 L1690.31 1210.91 L1689.72 1210.91 L1689.13 1210.91 L1688.55 1210.91 L1687.96 1210.91 L1687.37 1210.91 L1686.79 1210.91 L1686.2 1210.91 L1685.62 1210.91 L1685.03 1210.91 L1684.44 1210.91 L1683.86 1210.91 L1683.27 1210.91 L1682.68 1210.91 L1682.1 1210.91 L1681.51 1210.91 L1680.92 1210.91 L1680.34 1210.91 L1679.75 1210.91 L1679.17 1210.91 L1678.58 1210.91 L1677.99 1210.91 L1677.41 1210.91 L1676.82 1210.91 L1676.23 1210.91 L1675.65 1210.91 L1675.06 1210.91 L1674.47 1210.91 L1673.89 1210.91 L1673.3 1210.91 L1672.71 1210.91 L1672.13 1210.91 L1671.54 1210.91 L1670.96 1210.91 L1670.37 1210.91 L1669.78 1210.91 L1669.2 1210.91 L1668.61 1210.91 L1668.02 1210.91 L1667.44 1210.91 L1666.85 1210.91 L1666.26 1210.91 L1665.68 1210.91 L1665.09 1210.91 L1664.5 1210.91 L1663.92 1210.91 L1663.33 1210.91 L1662.75 1210.91 L1662.16 1210.91 L1661.57 1210.91 L1660.99 1210.91 L1660.4 1210.91 L1659.81 1210.91 L1659.23 1210.91 L1658.64 1210.91 L1658.05 1210.91 L1657.47 1210.91 L1656.88 1210.91 L1656.29 1210.91 L1655.71 1210.91 L1655.12 1210.91 L1654.54 1210.91 L1653.95 1210.91 L1653.36 1210.91 L1652.78 1210.91 L1652.19 1210.91 L1651.6 1210.91 L1651.02 1210.91 L1650.43 1210.91 L1649.84 1210.91 L1649.26 1210.91 L1648.67 1210.91 L1648.09 1210.91 L1647.5 1210.91 L1646.91 1210.91 L1646.33 1210.91 L1645.74 1210.91 L1645.15 1210.91 L1644.57 1210.91 L1643.98 1210.91 L1643.39 1210.91 L1642.81 1210.91 L1642.22 1210.91 L1641.63 1210.91 L1641.05 1210.91 L1640.46 1210.91 L1639.88 1210.91 L1639.29 1210.91 L1638.7 1210.91 L1638.12 1210.91 L1637.53 1210.91 L1636.94 1210.91 L1636.36 1210.91 L1635.77 1210.91 L1635.18 1210.91 L1634.6 1210.91 L1634.01 1210.91 L1633.42 1210.91 L1632.84 1210.91 L1632.25 1210.91 L1631.67 1210.91 L1631.08 1210.91 L1630.49 1210.91 L1629.91 1210.91 L1629.32 1210.91 L1628.73 1210.91 L1628.15 1210.91 L1627.56 1210.91 L1626.97 1210.91 L1626.39 1210.91 L1625.8 1210.91 L1625.22 1210.91 L1624.63 1210.91 L1624.04 1210.91 L1623.46 1210.91 L1622.87 1210.91 L1622.28 1210.91 L1621.7 1210.91 L1621.11 1210.91 L1620.52 1210.91 L1619.94 1210.91 L1619.35 1210.91 L1618.76 1210.91 L1618.18 1210.91 L1617.59 1210.91 L1617.01 1210.91 L1616.42 1210.91 L1615.83 1210.91 L1615.25 1210.91 L1614.66 1210.91 L1614.07 1210.91 L1613.49 1210.91 L1612.9 1210.91 L1612.31 1210.91 L1611.73 1210.91 L1611.14 1210.91 L1610.55 1210.91 L1609.97 1210.91 L1609.38 1210.91 L1608.8 1210.91 L1608.21 1210.91 L1607.62 1210.91 L1607.04 1210.91 L1606.45 1210.91 L1605.86 1210.91 L1605.28 1210.91 L1604.69 1210.91 L1604.1 1210.91 L1603.52 1210.91 L1602.93 1210.91 L1602.34 1210.91 L1601.76 1210.91 L1601.17 1210.91 L1600.59 1210.91 L1600 1210.91 L1599.41 1210.91 L1598.83 1210.91 L1598.24 1210.91 L1597.65 1210.91 L1597.07 1210.91 L1596.48 1210.91 L1595.89 1210.91 L1595.31 1210.91 L1594.72 1210.91 L1594.14 1210.91 L1593.55 1210.91 L1592.96 1210.91 L1592.38 1210.91 L1591.79 1210.91 L1591.2 1210.91 L1590.62 1210.91 L1590.03 1210.91 L1589.44 1210.91 L1588.86 1210.91 L1588.27 1210.91 L1587.68 1210.91 L1587.1 1210.91 L1586.51 1210.91 L1585.93 1210.91 L1585.34 1210.91 L1584.75 1210.91 L1584.17 1210.91 L1583.58 1210.91 L1582.99 1210.91 L1582.41 1210.91 L1581.82 1210.91 L1581.23 1210.91 L1580.65 1210.91 L1580.06 1210.91 L1579.47 1210.91 L1578.89 1210.91 L1578.3 1210.91 L1577.72 1210.91 L1577.13 1210.91 L1576.54 1210.91 L1575.96 1210.91 L1575.37 1210.91 L1574.78 1210.91 L1574.2 1210.91 L1573.61 1210.91 L1573.02 1210.91 L1572.44 1210.91 L1571.85 1210.91 L1571.27 1210.91 L1570.68 1210.91 L1570.09 1210.91 L1569.51 1210.91 L1568.92 1210.91 L1568.33 1210.91 L1567.75 1210.91 L1567.16 1210.91 L1566.57 1210.91 L1565.99 1210.91 L1565.4 1210.91 L1564.81 1210.91 L1564.23 1210.91 L1563.64 1210.91 L1563.06 1210.91 L1562.47 1210.91 L1561.88 1210.91 L1561.3 1210.91 L1560.71 1210.91 L1560.12 1210.91 L1559.54 1210.91 L1558.95 1210.91 L1558.36 1210.91 L1557.78 1210.91 L1557.19 1210.91 L1556.6 1210.91 L1556.02 1210.91 L1555.43 1210.91 L1554.85 1210.91 L1554.26 1210.91 L1553.67 1210.91 L1553.09 1210.91 L1552.5 1210.91 L1551.91 1210.91 L1551.33 1210.91 L1550.74 1210.91 L1550.15 1210.91 L1549.57 1210.91 L1548.98 1210.91 L1548.4 1210.91 L1547.81 1210.91 L1547.22 1210.91 L1546.64 1210.91 L1546.05 1210.91 L1545.46 1210.91 L1544.88 1210.91 L1544.29 1210.91 L1543.7 1210.91 L1543.12 1210.91 L1542.53 1210.91 L1541.94 1210.91 L1541.36 1210.91 L1540.77 1210.91 L1540.19 1210.91 L1539.6 1210.91 L1539.01 1210.91 L1538.43 1210.91 L1537.84 1210.91 L1537.25 1210.91 L1536.67 1210.91 L1536.08 1210.91 L1535.49 1210.91 L1534.91 1210.91 L1534.32 1210.91 L1533.73 1210.91 L1533.15 1210.91 L1532.56 1210.91 L1531.98 1210.91 L1531.39 1210.91 L1530.8 1210.91 L1530.22 1210.91 L1529.63 1210.91 L1529.04 1210.91 L1528.46 1210.91 L1527.87 1210.91 L1527.28 1210.91 L1526.7 1210.91 L1526.11 1210.91 L1525.52 1210.91 L1524.94 1210.91 L1524.35 1210.91 L1523.77 1210.91 L1523.18 1210.91 L1522.59 1210.91 L1522.01 1210.91 L1521.42 1210.91 L1520.83 1210.91 L1520.25 1210.91 L1519.66 1210.91 L1519.07 1210.91 L1518.49 1210.91 L1517.9 1210.91 L1517.32 1210.91 L1516.73 1210.91 L1516.14 1210.91 L1515.56 1210.91 L1514.97 1210.91 L1514.38 1210.91 L1513.8 1210.91 L1513.21 1210.91 L1512.62 1210.91 L1512.04 1210.91 L1511.45 1210.91 L1510.86 1210.91 L1510.28 1210.91 L1509.69 1210.91 L1509.11 1210.91 L1508.52 1210.91 L1507.93 1210.91 L1507.35 1210.91 L1506.76 1210.91 L1506.17 1210.91 L1505.59 1210.91 L1505 1210.91 L1504.41 1210.91 L1503.83 1210.91 L1503.24 1210.91 L1502.65 1210.91 L1502.07 1210.91 L1501.48 1210.91 L1500.9 1210.91 L1500.31 1210.91 L1499.72 1210.91 L1499.14 1210.91 L1498.55 1210.91 L1497.96 1210.91 L1497.38 1210.91 L1496.79 1210.91 L1496.2 1210.91 L1495.62 1210.91 L1495.03 1210.91 L1494.45 1210.91 L1493.86 1210.91 L1493.27 1210.91 L1492.69 1210.91 L1492.1 1210.91 L1491.51 1210.91 L1490.93 1210.91 L1490.34 1210.91 L1489.75 1210.91 L1489.17 1210.91 L1488.58 1210.91 L1487.99 1210.91 L1487.41 1210.91 L1486.82 1210.91 L1486.24 1210.91 L1485.65 1210.91 L1485.06 1210.91 L1484.48 1210.91 L1483.89 1210.91 L1483.3 1210.91 L1482.72 1210.91 L1482.13 1210.91 L1481.54 1210.91 L1480.96 1210.91 L1480.37 1210.91 L1479.78 1210.91 L1479.2 1210.91 L1478.61 1210.91 L1478.03 1210.91 L1477.44 1210.91 L1476.85 1210.91 L1476.27 1210.91 L1475.68 1210.91 L1475.09 1210.91 L1474.51 1210.91 L1473.92 1210.91 L1473.33 1210.91 L1472.75 1210.91 L1472.16 1210.91 L1471.57 1210.91 L1470.99 1210.91 L1470.4 1210.91 L1469.82 1210.91 L1469.23 1210.91 L1468.64 1210.91 L1468.06 1210.91 L1467.47 1210.91 L1466.88 1210.91 L1466.3 1210.91 L1465.71 1210.91 L1465.12 1210.91 L1464.54 1210.91 L1463.95 1210.91 L1463.37 1210.91 L1462.78 1210.91 L1462.19 1210.91 L1461.61 1210.91 L1461.02 1210.91 L1460.43 1210.91 L1459.85 1210.91 L1459.26 1210.91 L1458.67 1210.91 L1458.09 1210.91 L1457.5 1210.91 L1456.91 1210.91 L1456.33 1210.91 L1455.74 1210.91 L1455.16 1210.91 L1454.57 1210.91 L1453.98 1210.91 L1453.4 1210.91 L1452.81 1210.91 L1452.22 1210.91 L1451.64 1210.91 L1451.05 1210.91 L1450.46 1210.91 L1449.88 1210.91 L1449.29 1210.91 L1448.7 1210.91 L1448.12 1210.91 L1447.53 1210.91 L1446.95 1210.91 L1446.36 1210.91 L1445.77 1210.91 L1445.19 1210.91 L1444.6 1210.91 L1444.01 1210.91 L1443.43 1210.91 L1442.84 1210.91 L1442.25 1210.91 L1441.67 1210.91 L1441.08 1210.91 L1440.5 1210.91 L1439.91 1210.91 L1439.32 1210.91 L1438.74 1210.91 L1438.15 1210.91 L1437.56 1210.91 L1436.98 1210.91 L1436.39 1210.91 L1435.8 1210.91 L1435.22 1210.91 L1434.63 1210.91 L1434.04 1210.91 L1433.46 1210.91 L1432.87 1210.91 L1432.29 1210.91 L1431.7 1210.91 L1431.11 1210.91 L1430.53 1210.91 L1429.94 1210.91 L1429.35 1210.91 L1428.77 1210.91 L1428.18 1210.91 L1427.59 1210.91 L1427.01 1210.91 L1426.42 1210.91 L1425.83 1210.91 L1425.25 1210.91 L1424.66 1210.91 L1424.08 1210.91 L1423.49 1210.91 L1422.9 1210.91 L1422.32 1210.91 L1421.73 1210.91 L1421.14 1210.91 L1420.56 1210.91 L1419.97 1210.91 L1419.38 1210.91 L1418.8 1210.91 L1418.21 1210.91 L1417.63 1210.91 L1417.04 1210.91 L1416.45 1210.91 L1415.87 1210.91 L1415.28 1210.91 L1414.69 1210.91 L1414.11 1210.91 L1413.52 1210.91 L1412.93 1210.91 L1412.35 1210.91 L1411.76 1210.91 L1411.17 1210.91 L1410.59 1210.91 L1410 1210.91 L1409.42 1210.91 L1408.83 1210.91 L1408.24 1210.91 L1407.66 1210.91 L1407.07 1210.91 L1406.48 1210.91 L1405.9 1210.91 L1405.31 1210.91 L1404.72 1210.91 L1404.14 1210.91 L1403.55 1210.91 L1402.96 1210.91 L1402.38 1210.91 L1401.79 1210.91 L1401.21 1210.91 L1400.62 1210.91 L1400.03 1210.91 L1399.45 1210.91 L1398.86 1210.91 L1398.27 1210.91 L1397.69 1210.91 L1397.1 1210.91 L1396.51 1210.91 L1395.93 1210.91 L1395.34 1210.91 L1394.75 1210.91 L1394.17 1210.91 L1393.58 1210.91 L1393 1210.91 L1392.41 1210.91 L1391.82 1210.91 L1391.24 1210.91 L1390.65 1210.91 L1390.06 1210.91 L1389.48 1210.91 L1388.89 1210.91 L1388.3 1210.91 L1387.72 1210.91 L1387.13 1210.91 L1386.55 1210.91 L1385.96 1210.91 L1385.37 1210.91 L1384.79 1210.91 L1384.2 1210.91 L1383.61 1210.91 L1383.03 1210.91 L1382.44 1210.91 L1381.85 1210.91 L1381.27 1210.91 L1380.68 1210.91 L1380.09 1210.91 L1379.51 1210.91 L1378.92 1210.91 L1378.34 1210.91 L1377.75 1210.91 L1377.16 1210.91 L1376.58 1210.91 L1375.99 1210.91 L1375.4 1210.91 L1374.82 1210.91 L1374.23 1210.91 L1373.64 1210.91 L1373.06 1210.91 L1372.47 1210.91 L1371.88 1210.91 L1371.3 1210.91 L1370.71 1210.91 L1370.13 1210.91 L1369.54 1210.91 L1368.95 1210.91 L1368.37 1210.91 L1367.78 1210.91 L1367.19 1210.91 L1366.61 1210.91 L1366.02 1210.91 L1365.43 1210.91 L1364.85 1210.91 L1364.26 1210.91 L1363.68 1210.91 L1363.09 1210.91 L1362.5 1210.91 L1361.92 1210.91 L1361.33 1210.91 L1360.74 1210.91 L1360.16 1210.91 L1359.57 1210.91 L1358.98 1210.91 L1358.4 1210.91 L1357.81 1210.91 L1357.22 1210.91 L1356.64 1210.91 L1356.05 1210.91 L1355.47 1210.91 L1354.88 1210.91 L1354.29 1210.91 L1353.71 1210.91 L1353.12 1210.91 L1352.53 1210.91 L1351.95 1210.91 L1351.36 1210.91 L1350.77 1210.91 L1350.19 1210.91 L1349.6 1210.91 L1349.01 1210.91 L1348.43 1210.91 L1347.84 1210.91 L1347.26 1210.91 L1346.67 1210.91 L1346.08 1210.91 L1345.5 1210.91 L1344.91 1210.91 L1344.32 1210.91 L1343.74 1210.91 L1343.15 1210.91 L1342.56 1210.91 L1341.98 1210.91 L1341.39 1210.91 L1340.8 1210.91 L1340.22 1210.91 L1339.63 1210.91 L1339.05 1210.91 L1338.46 1210.91 L1337.87 1210.91 L1337.29 1210.91 L1336.7 1210.91 L1336.11 1210.91 L1335.53 1210.91 L1334.94 1210.91 L1334.35 1210.91 L1333.77 1210.91 L1333.18 1210.91 L1332.6 1210.91 L1332.01 1210.91 L1331.42 1210.91 L1330.84 1210.91 L1330.25 1210.91 L1329.66 1210.91 L1329.08 1210.91 L1328.49 1210.91 L1327.9 1210.91 L1327.32 1210.91 L1326.73 1210.91 L1326.14 1210.91 L1325.56 1210.91 L1324.97 1210.91 L1324.39 1210.91 L1323.8 1210.91 L1323.21 1210.91 L1322.63 1210.91 L1322.04 1210.91 L1321.45 1210.91 L1320.87 1210.91 L1320.28 1210.91 L1319.69 1210.91 L1319.11 1210.91 L1318.52 1210.91 L1317.93 1210.91 L1317.35 1210.91 L1316.76 1210.91 L1316.18 1210.91 L1315.59 1210.91 L1315 1210.91 L1314.42 1210.91 L1313.83 1210.91 L1313.24 1210.91 L1312.66 1210.91 L1312.07 1210.91 L1311.48 1210.91 L1310.9 1210.91 L1310.31 1210.91 L1309.73 1210.91 L1309.14 1210.91 L1308.55 1210.91 L1307.97 1210.91 L1307.38 1210.91 L1306.79 1210.91 L1306.21 1210.91 L1305.62 1210.91 L1305.03 1210.91 L1304.45 1210.91 L1303.86 1210.91 L1303.27 1210.91 L1302.69 1210.91 L1302.1 1210.91 L1301.52 1210.91 L1300.93 1210.91 L1300.34 1210.91 L1299.76 1210.91 L1299.17 1210.91 L1298.58 1210.91 L1298 1210.91 L1297.41 1210.91 L1296.82 1210.91 L1296.24 1210.91 L1295.65 1210.91 L1295.06 1210.91 L1294.48 1210.91 L1293.89 1210.91 L1293.31 1210.91 L1292.72 1210.91 L1292.13 1210.91 L1291.55 1210.91 L1290.96 1210.91 L1290.37 1210.91 L1289.79 1210.91 L1289.2 1210.91 L1288.61 1210.91 L1288.03 1210.91 L1287.44 1210.91 L1286.86 1210.91 L1286.27 1210.91 L1285.68 1210.91 L1285.1 1210.91 L1284.51 1210.91 L1283.92 1210.91 L1283.34 1210.91 L1282.75 1210.91 L1282.16 1210.91 L1281.58 1210.91 L1280.99 1210.91 L1280.4 1210.91 L1279.82 1210.91 L1279.23 1210.91 L1278.65 1210.91 L1278.06 1210.91 L1277.47 1210.91 L1276.89 1210.91 L1276.3 1210.91 L1275.71 1210.91 L1275.13 1210.91 L1274.54 1210.91 L1273.95 1210.91 L1273.37 1210.91 L1272.78 1210.91 L1272.19 1210.91 L1271.61 1210.91 L1271.02 1210.91 L1270.44 1210.91 L1269.85 1210.91 L1269.26 1210.91 L1268.68 1210.91 L1268.09 1210.91 L1267.5 1210.91 L1266.92 1210.91 L1266.33 1210.91 L1265.74 1210.91 L1265.16 1210.91 L1264.57 1210.91 L1263.98 1210.91 L1263.4 1210.91 L1262.81 1210.91 L1262.23 1210.91 L1261.64 1210.91 L1261.05 1210.91 L1260.47 1210.91 L1259.88 1210.91 L1259.29 1210.91 L1258.71 1210.91 L1258.12 1210.91 L1257.53 1210.91 L1256.95 1210.91 L1256.36 1210.91 L1255.78 1210.91 L1255.19 1210.91 L1254.6 1210.91 L1254.02 1210.91 L1253.43 1210.91 L1252.84 1210.91 L1252.26 1210.91 L1251.67 1210.91 L1251.08 1210.91 L1250.5 1210.91 L1249.91 1210.91 L1249.32 1210.91 L1248.74 1210.91 L1248.15 1210.91 L1247.57 1210.91 L1246.98 1210.91 L1246.39 1210.91 L1245.81 1210.91 L1245.22 1210.91 L1244.63 1210.91 L1244.05 1210.91 L1243.46 1210.91 L1242.87 1210.91 L1242.29 1210.91 L1241.7 1210.91 L1241.11 1210.91 L1240.53 1210.91 L1239.94 1210.91 L1239.36 1210.91 L1238.77 1210.91 L1238.18 1210.91 L1237.6 1210.91 L1237.01 1210.91 L1236.42 1210.91 L1235.84 1210.91 L1235.25 1210.91 L1234.66 1210.91 L1234.08 1210.91 L1233.49 1210.91 L1232.91 1210.91 L1232.32 1210.91 L1231.73 1210.91 L1231.15 1210.91 L1230.56 1210.91 L1229.97 1210.91 L1229.39 1210.91 L1228.8 1210.91 L1228.21 1210.91 L1227.63 1210.91 L1227.04 1210.91 L1226.45 1210.91 L1225.87 1210.91 L1225.28 1210.91 L1224.7 1210.91 L1224.11 1210.91 L1223.52 1210.91 L1222.94 1210.91 L1222.35 1210.91 L1221.76 1210.91 L1221.18 1210.91 L1220.59 1210.91 L1220 1210.91 L1219.42 1210.91 L1218.83 1210.91 L1218.24 1210.91 L1217.66 1210.91 L1217.07 1210.91 L1216.49 1210.91 L1215.9 1210.91 L1215.31 1210.91 L1214.73 1210.91 L1214.14 1210.91 L1213.55 1210.91 L1212.97 1210.91 L1212.38 1210.91 L1211.79 1210.91 L1211.21 1210.91 L1210.62 1210.91 L1210.03 1210.91 L1209.45 1210.91 L1208.86 1210.91 L1208.28 1210.91 L1207.69 1210.91 L1207.1 1210.91 L1206.52 1210.91 L1205.93 1210.91 L1205.34 1210.91 L1204.76 1210.91 L1204.17 1210.91 L1203.58 1210.91 L1203 1210.91 L1202.41 1210.91 L1201.83 1210.91 L1201.24 1210.91 L1200.65 1210.91 L1200.07 1210.91 L1199.48 1210.91 L1198.89 1210.91 L1198.31 1210.91 L1197.72 1210.91 L1197.13 1210.91 L1196.55 1210.91 L1195.96 1210.91 L1195.37 1210.91 L1194.79 1210.91 L1194.2 1210.91 L1193.62 1210.91 L1193.03 1210.91 L1192.44 1210.91 L1191.86 1210.91 L1191.27 1210.91 L1190.68 1210.91 L1190.1 1210.91 L1189.51 1210.91 L1188.92 1210.91 L1188.34 1210.91 L1187.75 1210.91 L1187.16 1210.91 L1186.58 1210.91 L1185.99 1210.91 L1185.41 1210.91 L1184.82 1210.91 L1184.23 1210.91 L1183.65 1210.91 L1183.06 1210.91 L1182.47 1210.91 L1181.89 1210.91 L1181.3 1210.91 L1180.71 1210.91 L1180.13 1210.91 L1179.54 1210.91 L1178.96 1210.91 L1178.37 1210.91 L1177.78 1210.91 L1177.2 1210.91 L1176.61 1210.91 L1176.02 1210.91 L1175.44 1210.91 L1174.85 1210.91 L1174.26 1210.91 L1173.68 1210.91 L1173.09 1210.91 L1172.5 1210.91 L1171.92 1210.91 L1171.33 1210.91 L1170.75 1210.91 L1170.16 1210.91 L1169.57 1210.91 L1168.99 1210.91 L1168.4 1210.91 L1167.81 1210.91 L1167.23 1210.91 L1166.64 1210.91 L1166.05 1210.91 L1165.47 1210.91 L1164.88 1210.91 L1164.29 1210.91 L1163.71 1210.91 L1163.12 1210.91 L1162.54 1210.91 L1161.95 1210.91 L1161.36 1210.91 L1160.78 1210.91 L1160.19 1210.91 L1159.6 1210.91 L1159.02 1210.91 L1158.43 1210.91 L1157.84 1210.91 L1157.26 1210.91 L1156.67 1210.91 L1156.09 1210.91 L1155.5 1210.91 L1154.91 1210.91 L1154.33 1210.91 L1153.74 1210.91 L1153.15 1210.91 L1152.57 1210.91 L1151.98 1210.91 L1151.39 1210.91 L1150.81 1210.91 L1150.22 1210.91 L1149.63 1210.91 L1149.05 1210.91 L1148.46 1210.91 L1147.88 1210.91 L1147.29 1210.91 L1146.7 1210.91 L1146.12 1210.91 L1145.53 1210.91 L1144.94 1210.91 L1144.36 1210.91 L1143.77 1210.91 L1143.18 1210.91 L1142.6 1210.91 L1142.01 1210.91 L1141.42 1210.91 L1140.84 1210.91 L1140.25 1210.91 L1139.67 1210.91 L1139.08 1210.91 L1138.49 1210.91 L1137.91 1210.91 L1137.32 1210.91 L1136.73 1210.91 L1136.15 1210.91 L1135.56 1210.91 L1134.97 1210.91 L1134.39 1210.91 L1133.8 1210.91 L1133.21 1210.91 L1132.63 1210.91 L1132.04 1210.91 L1131.46 1210.91 L1130.87 1210.91 L1130.28 1210.91 L1129.7 1210.91 L1129.11 1210.91 L1128.52 1210.91 L1127.94 1210.91 L1127.35 1210.91 L1126.76 1210.91 L1126.18 1210.91 L1125.59 1210.91 L1125.01 1210.91 L1124.42 1210.91 L1123.83 1210.91 L1123.25 1210.91 L1122.66 1210.91 L1122.07 1210.91 L1121.49 1210.91 L1120.9 1210.91 L1120.31 1210.91 L1119.73 1210.91 L1119.14 1210.91 L1118.55 1210.91 L1117.97 1210.91 L1117.38 1210.91 L1116.8 1210.91 L1116.21 1210.91 L1115.62 1210.91 L1115.04 1210.91 L1114.45 1210.91 L1113.86 1210.91 L1113.28 1210.91 L1112.69 1210.91 L1112.1 1210.91 L1111.52 1210.91 L1110.93 1210.91 L1110.34 1210.91 L1109.76 1210.91 L1109.17 1210.91 L1108.59 1210.91 L1108 1210.91 L1107.41 1210.91 L1106.83 1210.91 L1106.24 1210.91 L1105.65 1210.91 L1105.07 1210.91 L1104.48 1210.91 L1103.89 1210.91 L1103.31 1210.91 L1102.72 1210.91 L1102.14 1210.91 L1101.55 1210.91 L1100.96 1210.91 L1100.38 1210.91 L1099.79 1210.91 L1099.2 1210.91 L1098.62 1210.91 L1098.03 1210.91 L1097.44 1210.91 L1096.86 1210.91 L1096.27 1210.91 L1095.68 1210.91 L1095.1 1210.91 L1094.51 1210.91 L1093.93 1210.91 L1093.34 1210.91 L1092.75 1210.91 L1092.17 1210.91 L1091.58 1210.91 L1090.99 1210.91 L1090.41 1210.91 L1089.82 1210.91 L1089.23 1210.91 L1088.65 1210.91 L1088.06 1210.91 L1087.47 1210.91 L1086.89 1210.91 L1086.3 1210.91 L1085.72 1210.91 L1085.13 1210.91 L1084.54 1210.91 L1083.96 1210.91 L1083.37 1210.91 L1082.78 1210.91 L1082.2 1210.91 L1081.61 1210.91 L1081.02 1210.91 L1080.44 1210.91 L1079.85 1210.91 L1079.26 1210.91 L1078.68 1210.91 L1078.09 1210.91 L1077.51 1210.91 L1076.92 1210.91 L1076.33 1210.91 L1075.75 1210.91 L1075.16 1210.91 L1074.57 1210.91 L1073.99 1210.91 L1073.4 1210.91 L1072.81 1210.91 L1072.23 1210.91 L1071.64 1210.91 L1071.06 1210.91 L1070.47 1210.91 L1069.88 1210.91 L1069.3 1210.91 L1068.71 1210.91 L1068.12 1210.91 L1067.54 1210.91 L1066.95 1210.91 L1066.36 1210.91 L1065.78 1210.91 L1065.19 1210.91 L1064.6 1210.91 L1064.02 1210.91 L1063.43 1210.91 L1062.85 1210.91 L1062.26 1210.91 L1061.67 1210.91 L1061.09 1210.91 L1060.5 1210.91 L1059.91 1210.91 L1059.33 1210.91 L1058.74 1210.91 L1058.15 1210.91 L1057.57 1210.91 L1056.98 1210.91 L1056.39 1210.91 L1055.81 1210.91 L1055.22 1210.91 L1054.64 1210.91 L1054.05 1210.91 L1053.46 1210.91 L1052.88 1210.91 L1052.29 1210.91 L1051.7 1210.91 L1051.12 1210.91 L1050.53 1210.91 L1049.94 1210.91 L1049.36 1210.91 L1048.77 1210.91 L1048.19 1210.91 L1047.6 1210.91 L1047.01 1210.91 L1046.43 1210.91 L1045.84 1210.91 L1045.25 1210.91 L1044.67 1210.91 L1044.08 1210.91 L1043.49 1210.91 L1042.91 1210.91 L1042.32 1210.91 L1041.73 1210.91 L1041.15 1210.91 L1040.56 1210.91 L1039.98 1210.91 L1039.39 1210.91 L1038.8 1210.91 L1038.22 1210.91 L1037.63 1210.91 L1037.04 1210.91 L1036.46 1210.91 L1035.87 1210.91 L1035.28 1210.91 L1034.7 1210.91 L1034.11 1210.91 L1033.52 1210.91 L1032.94 1210.91 L1032.35 1210.91 L1031.77 1210.91 L1031.18 1210.91 L1030.59 1210.91 L1030.01 1210.91 L1029.42 1210.91 L1028.83 1210.91 L1028.25 1210.91 L1027.66 1210.91 L1027.07 1210.91 L1026.49 1210.91 L1025.9 1210.91 L1025.32 1210.91 L1024.73 1210.91 L1024.14 1210.91 L1023.56 1210.91 L1022.97 1210.91 L1022.38 1210.91 L1021.8 1210.91 L1021.21 1210.91 L1020.62 1210.91 L1020.04 1210.91 L1019.45 1210.91 L1018.86 1210.91 L1018.28 1210.91 L1017.69 1210.91 L1017.11 1210.91 L1016.52 1210.91 L1015.93 1210.91 L1015.35 1210.91 L1014.76 1210.91 L1014.17 1210.91 L1013.59 1210.91 L1013 1210.91 L1012.41 1210.91 L1011.83 1210.91 L1011.24 1210.91 L1010.65 1210.91 L1010.07 1210.91 L1009.48 1210.91 L1008.9 1210.91 L1008.31 1210.91 L1007.72 1210.91 L1007.14 1210.91 L1006.55 1210.91 L1005.96 1210.91 L1005.38 1210.91 L1004.79 1210.91 L1004.2 1210.91 L1003.62 1210.91 L1003.03 1210.91 L1002.44 1210.91 L1001.86 1210.91 L1001.27 1210.91 L1000.69 1210.91 L1000.1 1210.91 L999.513 1210.91 L998.926 1210.91 L998.34 1210.91 L997.754 1210.91 L997.167 1210.91 L996.581 1210.91 L995.994 1210.91 L995.408 1210.91 L994.822 1210.91 L994.235 1210.91 L993.649 1210.91 L993.062 1210.91 L992.476 1210.91 L991.889 1210.91 L991.303 1210.91 L990.717 1210.91 L990.13 1210.91 L989.544 1210.91 L988.957 1210.91 L988.371 1210.91 L987.785 1210.91 L987.198 1210.91 L986.612 1210.91 L986.025 1210.91  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.37 986.612,1211.37 987.198,1211.37 987.785,1211.37 988.371,1211.37 988.957,1211.37 989.544,1211.37 990.13,1211.37 990.717,1211.37 991.303,1211.37 991.889,1211.37 992.476,1211.37 993.062,1211.37 993.649,1211.37 994.235,1211.37 994.822,1211.37 995.408,1211.37 995.994,1211.37 996.581,1211.37 997.167,1211.37 997.754,1211.37 998.34,1211.37 998.926,1211.37 999.513,1211.37 1000.1,1211.37 1000.69,1211.37 1001.27,1211.37 1001.86,1211.37 1002.44,1211.37 1003.03,1211.37 1003.62,1211.37 1004.2,1211.37 1004.79,1211.37 1005.38,1211.37 1005.96,1211.37 1006.55,1211.37 1007.14,1211.37 1007.72,1211.37 1008.31,1211.37 1008.9,1211.37 1009.48,1211.37 1010.07,1211.37 1010.65,1211.37 1011.24,1211.37 1011.83,1211.37 1012.41,1211.37 1013,1211.37 1013.59,1211.37 1014.17,1211.37 1014.76,1211.37 1015.35,1211.37 1015.93,1211.37 1016.52,1211.37 1017.11,1211.37 1017.69,1211.37 1018.28,1211.37 1018.86,1211.37 1019.45,1211.37 1020.04,1211.37 1020.62,1211.37 1021.21,1211.37 1021.8,1211.37 1022.38,1211.37 1022.97,1211.37 1023.56,1211.37 1024.14,1211.37 1024.73,1211.37 1025.32,1211.37 1025.9,1211.37 1026.49,1211.37 1027.07,1211.37 1027.66,1211.37 1028.25,1211.37 1028.83,1211.37 1029.42,1211.37 1030.01,1211.37 1030.59,1211.37 1031.18,1211.37 1031.77,1211.37 1032.35,1211.37 1032.94,1211.37 1033.52,1211.37 1034.11,1211.37 1034.7,1211.37 1035.28,1211.37 1035.87,1211.37 1036.46,1211.37 1037.04,1211.37 1037.63,1211.37 1038.22,1211.37 1038.8,1211.37 1039.39,1211.37 1039.98,1211.37 1040.56,1211.37 1041.15,1211.37 1041.73,1211.37 1042.32,1211.37 1042.91,1211.37 1043.49,1211.37 1044.08,1211.37 1044.67,1211.37 1045.25,1211.37 1045.84,1211.37 1046.43,1211.37 1047.01,1211.37 1047.6,1211.37 1048.19,1211.37 1048.77,1211.37 1049.36,1211.37 1049.94,1211.37 1050.53,1211.37 1051.12,1211.37 1051.7,1211.37 1052.29,1211.37 1052.88,1211.37 1053.46,1211.37 1054.05,1211.37 1054.64,1211.37 1055.22,1211.37 1055.81,1211.37 1056.39,1211.37 1056.98,1211.37 1057.57,1211.37 1058.15,1211.37 1058.74,1211.37 1059.33,1211.37 1059.91,1211.37 1060.5,1211.37 1061.09,1211.37 1061.67,1211.37 1062.26,1211.37 1062.85,1211.37 1063.43,1211.37 1064.02,1211.37 1064.6,1211.37 1065.19,1211.37 1065.78,1211.37 1066.36,1211.37 1066.95,1211.37 1067.54,1211.37 1068.12,1211.37 1068.71,1211.37 1069.3,1211.37 1069.88,1211.37 1070.47,1211.37 1071.06,1211.37 1071.64,1211.37 1072.23,1211.37 1072.81,1211.37 1073.4,1211.37 1073.99,1211.37 1074.57,1211.37 1075.16,1211.37 1075.75,1211.37 1076.33,1211.37 1076.92,1211.37 1077.51,1211.37 1078.09,1211.37 1078.68,1211.37 1079.26,1211.37 1079.85,1211.37 1080.44,1211.37 1081.02,1211.37 1081.61,1211.37 1082.2,1211.37 1082.78,1211.37 1083.37,1211.37 1083.96,1211.37 1084.54,1211.37 1085.13,1211.37 1085.72,1211.37 1086.3,1211.37 1086.89,1211.37 1087.47,1211.37 1088.06,1211.37 1088.65,1211.37 1089.23,1211.37 1089.82,1211.37 1090.41,1211.37 1090.99,1211.37 1091.58,1211.37 1092.17,1211.37 1092.75,1211.37 1093.34,1211.37 1093.93,1211.37 1094.51,1211.37 1095.1,1211.37 1095.68,1211.37 1096.27,1211.37 1096.86,1211.37 1097.44,1211.37 1098.03,1211.37 1098.62,1211.37 1099.2,1211.37 1099.79,1211.37 1100.38,1211.37 1100.96,1211.37 1101.55,1211.37 1102.14,1211.37 1102.72,1211.37 1103.31,1211.37 1103.89,1211.37 1104.48,1211.37 1105.07,1211.37 1105.65,1211.37 1106.24,1211.37 1106.83,1211.37 1107.41,1211.37 1108,1211.37 1108.59,1211.37 1109.17,1211.37 1109.76,1211.37 1110.34,1211.37 1110.93,1211.37 1111.52,1211.37 1112.1,1211.37 1112.69,1211.37 1113.28,1211.37 1113.86,1211.37 1114.45,1211.37 1115.04,1211.37 1115.62,1211.37 1116.21,1211.37 1116.8,1211.37 1117.38,1211.37 1117.97,1211.37 1118.55,1211.37 1119.14,1211.37 1119.73,1211.37 1120.31,1211.37 1120.9,1211.37 1121.49,1211.37 1122.07,1211.37 1122.66,1211.37 1123.25,1211.37 1123.83,1211.37 1124.42,1211.37 1125.01,1211.37 1125.59,1211.37 1126.18,1211.37 1126.76,1211.37 1127.35,1211.37 1127.94,1211.37 1128.52,1211.37 1129.11,1211.37 1129.7,1211.37 1130.28,1211.37 1130.87,1211.37 1131.46,1211.37 1132.04,1211.37 1132.63,1211.37 1133.21,1211.37 1133.8,1211.37 1134.39,1211.37 1134.97,1211.37 1135.56,1211.37 1136.15,1211.37 1136.73,1211.37 1137.32,1211.37 1137.91,1211.37 1138.49,1211.37 1139.08,1211.37 1139.67,1211.37 1140.25,1211.37 1140.84,1211.37 1141.42,1211.37 1142.01,1211.37 1142.6,1211.37 1143.18,1211.37 1143.77,1211.37 1144.36,1211.37 1144.94,1211.37 1145.53,1211.37 1146.12,1211.37 1146.7,1211.37 1147.29,1211.37 1147.88,1211.37 1148.46,1211.37 1149.05,1211.37 1149.63,1211.37 1150.22,1211.37 1150.81,1211.37 1151.39,1211.37 1151.98,1211.37 1152.57,1211.37 1153.15,1211.37 1153.74,1211.37 1154.33,1211.37 1154.91,1211.37 1155.5,1211.37 1156.09,1211.37 1156.67,1211.37 1157.26,1211.37 1157.84,1211.37 1158.43,1211.37 1159.02,1211.37 1159.6,1211.37 1160.19,1211.37 1160.78,1211.37 1161.36,1211.37 1161.95,1211.37 1162.54,1211.37 1163.12,1211.37 1163.71,1211.37 1164.29,1211.37 1164.88,1211.37 1165.47,1211.37 1166.05,1211.37 1166.64,1211.37 1167.23,1211.37 1167.81,1211.37 1168.4,1211.37 1168.99,1211.37 1169.57,1211.37 1170.16,1211.37 1170.75,1211.37 1171.33,1211.37 1171.92,1211.37 1172.5,1211.37 1173.09,1211.37 1173.68,1211.37 1174.26,1211.37 1174.85,1211.37 1175.44,1211.37 1176.02,1211.37 1176.61,1211.37 1177.2,1211.37 1177.78,1211.37 1178.37,1211.37 1178.96,1211.37 1179.54,1211.37 1180.13,1211.37 1180.71,1211.37 1181.3,1211.37 1181.89,1211.37 1182.47,1211.37 1183.06,1211.37 1183.65,1211.37 1184.23,1211.37 1184.82,1211.37 1185.41,1211.37 1185.99,1211.37 1186.58,1211.37 1187.16,1211.37 1187.75,1211.37 1188.34,1211.37 1188.92,1211.37 1189.51,1211.37 1190.1,1211.37 1190.68,1211.37 1191.27,1211.37 1191.86,1211.37 1192.44,1211.37 1193.03,1211.37 1193.62,1211.37 1194.2,1211.37 1194.79,1211.37 1195.37,1211.37 1195.96,1211.37 1196.55,1211.37 1197.13,1211.37 1197.72,1211.37 1198.31,1211.37 1198.89,1211.37 1199.48,1211.37 1200.07,1211.37 1200.65,1211.37 1201.24,1211.37 1201.83,1211.37 1202.41,1211.37 1203,1211.37 1203.58,1211.37 1204.17,1211.37 1204.76,1211.37 1205.34,1211.37 1205.93,1211.37 1206.52,1211.37 1207.1,1211.37 1207.69,1211.37 1208.28,1211.37 1208.86,1211.37 1209.45,1211.37 1210.03,1211.37 1210.62,1211.37 1211.21,1211.37 1211.79,1211.37 1212.38,1211.37 1212.97,1211.37 1213.55,1211.37 1214.14,1211.37 1214.73,1211.37 1215.31,1211.37 1215.9,1211.37 1216.49,1211.37 1217.07,1211.37 1217.66,1211.37 1218.24,1211.37 1218.83,1211.37 1219.42,1211.37 1220,1211.37 1220.59,1211.37 1221.18,1211.37 1221.76,1211.37 1222.35,1211.37 1222.94,1211.37 1223.52,1211.37 1224.11,1211.37 1224.7,1211.37 1225.28,1211.37 1225.87,1211.37 1226.45,1211.37 1227.04,1211.37 1227.63,1211.37 1228.21,1211.37 1228.8,1211.37 1229.39,1211.37 1229.97,1211.37 1230.56,1211.37 1231.15,1211.37 1231.73,1211.37 1232.32,1211.37 1232.91,1211.37 1233.49,1211.37 1234.08,1211.37 1234.66,1211.37 1235.25,1211.37 1235.84,1211.37 1236.42,1211.37 1237.01,1211.37 1237.6,1211.37 1238.18,1211.37 1238.77,1211.37 1239.36,1211.37 1239.94,1211.37 1240.53,1211.37 1241.11,1211.37 1241.7,1211.37 1242.29,1211.37 1242.87,1211.37 1243.46,1211.37 1244.05,1211.37 1244.63,1211.37 1245.22,1211.37 1245.81,1211.37 1246.39,1211.37 1246.98,1211.37 1247.57,1211.37 1248.15,1211.37 1248.74,1211.37 1249.32,1211.37 1249.91,1211.37 1250.5,1211.37 1251.08,1211.37 1251.67,1211.37 1252.26,1211.37 1252.84,1211.37 1253.43,1211.37 1254.02,1211.37 1254.6,1211.37 1255.19,1211.37 1255.78,1211.37 1256.36,1211.37 1256.95,1211.37 1257.53,1211.37 1258.12,1211.37 1258.71,1211.37 1259.29,1211.37 1259.88,1211.37 1260.47,1211.37 1261.05,1211.37 1261.64,1211.37 1262.23,1211.37 1262.81,1211.37 1263.4,1211.37 1263.98,1211.37 1264.57,1211.37 1265.16,1211.37 1265.74,1211.37 1266.33,1211.37 1266.92,1211.37 1267.5,1211.37 1268.09,1211.37 1268.68,1211.37 1269.26,1211.37 1269.85,1211.37 1270.44,1211.37 1271.02,1211.37 1271.61,1211.37 1272.19,1211.37 1272.78,1211.37 1273.37,1211.37 1273.95,1211.37 1274.54,1211.37 1275.13,1211.37 1275.71,1211.37 1276.3,1211.37 1276.89,1211.37 1277.47,1211.37 1278.06,1211.37 1278.65,1211.37 1279.23,1211.37 1279.82,1211.37 1280.4,1211.37 1280.99,1211.37 1281.58,1211.37 1282.16,1211.37 1282.75,1211.37 1283.34,1211.37 1283.92,1211.37 1284.51,1211.37 1285.1,1211.37 1285.68,1211.37 1286.27,1211.37 1286.86,1211.37 1287.44,1211.37 1288.03,1211.37 1288.61,1211.37 1289.2,1211.37 1289.79,1211.37 1290.37,1211.37 1290.96,1211.37 1291.55,1211.37 1292.13,1211.37 1292.72,1211.37 1293.31,1211.37 1293.89,1211.37 1294.48,1211.37 1295.06,1211.37 1295.65,1211.37 1296.24,1211.37 1296.82,1211.37 1297.41,1211.37 1298,1211.37 1298.58,1211.37 1299.17,1211.37 1299.76,1211.37 1300.34,1211.37 1300.93,1211.37 1301.52,1211.37 1302.1,1211.37 1302.69,1211.37 1303.27,1211.37 1303.86,1211.37 1304.45,1211.37 1305.03,1211.37 1305.62,1211.37 1306.21,1211.37 1306.79,1211.37 1307.38,1211.37 1307.97,1211.37 1308.55,1211.37 1309.14,1211.37 1309.73,1211.37 1310.31,1211.37 1310.9,1211.37 1311.48,1211.37 1312.07,1211.37 1312.66,1211.37 1313.24,1211.37 1313.83,1211.37 1314.42,1211.37 1315,1211.37 1315.59,1211.37 1316.18,1211.37 1316.76,1211.37 1317.35,1211.37 1317.93,1211.37 1318.52,1211.37 1319.11,1211.37 1319.69,1211.37 1320.28,1211.37 1320.87,1211.37 1321.45,1211.37 1322.04,1211.37 1322.63,1211.37 1323.21,1211.37 1323.8,1211.37 1324.39,1211.37 1324.97,1211.37 1325.56,1211.37 1326.14,1211.37 1326.73,1211.37 1327.32,1211.37 1327.9,1211.37 1328.49,1211.37 1329.08,1211.37 1329.66,1211.37 1330.25,1211.37 1330.84,1211.37 1331.42,1211.37 1332.01,1211.37 1332.6,1211.37 1333.18,1211.37 1333.77,1211.37 1334.35,1211.37 1334.94,1211.37 1335.53,1211.37 1336.11,1211.37 1336.7,1211.37 1337.29,1211.37 1337.87,1211.37 1338.46,1211.37 1339.05,1211.37 1339.63,1211.37 1340.22,1211.37 1340.8,1211.37 1341.39,1211.37 1341.98,1211.37 1342.56,1211.37 1343.15,1211.37 1343.74,1211.37 1344.32,1211.37 1344.91,1211.37 1345.5,1211.37 1346.08,1211.37 1346.67,1211.37 1347.26,1211.37 1347.84,1211.37 1348.43,1211.37 1349.01,1211.37 1349.6,1211.37 1350.19,1211.37 1350.77,1211.37 1351.36,1211.37 1351.95,1211.37 1352.53,1211.37 1353.12,1211.37 1353.71,1211.37 1354.29,1211.37 1354.88,1211.37 1355.47,1211.37 1356.05,1211.37 1356.64,1211.37 1357.22,1211.37 1357.81,1211.37 1358.4,1211.37 1358.98,1211.37 1359.57,1211.37 1360.16,1211.37 1360.74,1211.37 1361.33,1211.37 1361.92,1211.37 1362.5,1211.37 1363.09,1211.37 1363.68,1211.37 1364.26,1211.37 1364.85,1211.37 1365.43,1211.37 1366.02,1211.37 1366.61,1211.37 1367.19,1211.37 1367.78,1211.37 1368.37,1211.37 1368.95,1211.37 1369.54,1211.37 1370.13,1211.37 1370.71,1211.37 1371.3,1211.37 1371.88,1211.37 1372.47,1211.37 1373.06,1211.37 1373.64,1211.37 1374.23,1211.37 1374.82,1211.37 1375.4,1211.37 1375.99,1211.37 1376.58,1211.37 1377.16,1211.37 1377.75,1211.37 1378.34,1211.37 1378.92,1211.37 1379.51,1211.37 1380.09,1211.37 1380.68,1211.37 1381.27,1211.37 1381.85,1211.37 1382.44,1211.37 1383.03,1211.37 1383.61,1211.37 1384.2,1211.37 1384.79,1211.37 1385.37,1211.37 1385.96,1211.37 1386.55,1211.37 1387.13,1211.37 1387.72,1211.37 1388.3,1211.37 1388.89,1211.37 1389.48,1211.37 1390.06,1211.37 1390.65,1211.37 1391.24,1211.37 1391.82,1211.37 1392.41,1211.37 1393,1211.37 1393.58,1211.37 1394.17,1211.37 1394.75,1211.37 1395.34,1211.37 1395.93,1211.37 1396.51,1211.37 1397.1,1211.37 1397.69,1211.37 1398.27,1211.37 1398.86,1211.37 1399.45,1211.37 1400.03,1211.37 1400.62,1211.37 1401.21,1211.37 1401.79,1211.37 1402.38,1211.37 1402.96,1211.37 1403.55,1211.37 1404.14,1211.37 1404.72,1211.37 1405.31,1211.37 1405.9,1211.37 1406.48,1211.37 1407.07,1211.37 1407.66,1211.37 1408.24,1211.37 1408.83,1211.37 1409.42,1211.37 1410,1211.37 1410.59,1211.37 1411.17,1211.37 1411.76,1211.37 1412.35,1211.37 1412.93,1211.37 1413.52,1211.37 1414.11,1211.37 1414.69,1211.37 1415.28,1211.37 1415.87,1211.37 1416.45,1211.37 1417.04,1211.37 1417.63,1211.37 1418.21,1211.37 1418.8,1211.37 1419.38,1211.37 1419.97,1211.37 1420.56,1211.37 1421.14,1211.37 1421.73,1211.37 1422.32,1211.37 1422.9,1211.37 1423.49,1211.37 1424.08,1211.37 1424.66,1211.37 1425.25,1211.37 1425.83,1211.37 1426.42,1211.37 1427.01,1211.37 1427.59,1211.37 1428.18,1211.37 1428.77,1211.37 1429.35,1211.37 1429.94,1211.37 1430.53,1211.37 1431.11,1211.37 1431.7,1211.37 1432.29,1211.37 1432.87,1211.37 1433.46,1211.37 1434.04,1211.37 1434.63,1211.37 1435.22,1211.37 1435.8,1211.37 1436.39,1211.37 1436.98,1211.37 1437.56,1211.37 1438.15,1211.37 1438.74,1211.37 1439.32,1211.37 1439.91,1211.37 1440.5,1211.37 1441.08,1211.37 1441.67,1211.37 1442.25,1211.37 1442.84,1211.37 1443.43,1211.37 1444.01,1211.37 1444.6,1211.37 1445.19,1211.37 1445.77,1211.37 1446.36,1211.37 1446.95,1211.37 1447.53,1211.37 1448.12,1211.37 1448.7,1211.37 1449.29,1211.37 1449.88,1211.37 1450.46,1211.37 1451.05,1211.37 1451.64,1211.37 1452.22,1211.37 1452.81,1211.37 1453.4,1211.37 1453.98,1211.37 1454.57,1211.37 1455.16,1211.37 1455.74,1211.37 1456.33,1211.37 1456.91,1211.37 1457.5,1211.37 1458.09,1211.37 1458.67,1211.37 1459.26,1211.37 1459.85,1211.37 1460.43,1211.37 1461.02,1211.37 1461.61,1211.37 1462.19,1211.37 1462.78,1211.37 1463.37,1211.37 1463.95,1211.37 1464.54,1211.37 1465.12,1211.37 1465.71,1211.37 1466.3,1211.37 1466.88,1211.37 1467.47,1211.37 1468.06,1211.37 1468.64,1211.37 1469.23,1211.37 1469.82,1211.37 1470.4,1211.37 1470.99,1211.37 1471.57,1211.37 1472.16,1211.37 1472.75,1211.37 1473.33,1211.37 1473.92,1211.37 1474.51,1211.37 1475.09,1211.37 1475.68,1211.37 1476.27,1211.37 1476.85,1211.37 1477.44,1211.37 1478.03,1211.37 1478.61,1211.37 1479.2,1211.37 1479.78,1211.37 1480.37,1211.37 1480.96,1211.37 1481.54,1211.37 1482.13,1211.37 1482.72,1211.37 1483.3,1211.37 1483.89,1211.37 1484.48,1211.37 1485.06,1211.37 1485.65,1211.37 1486.24,1211.37 1486.82,1211.37 1487.41,1211.37 1487.99,1211.37 1488.58,1211.37 1489.17,1211.37 1489.75,1211.37 1490.34,1211.37 1490.93,1211.37 1491.51,1211.37 1492.1,1211.37 1492.69,1211.37 1493.27,1211.37 1493.86,1211.37 1494.45,1211.37 1495.03,1211.37 1495.62,1211.37 1496.2,1211.37 1496.79,1211.37 1497.38,1211.37 1497.96,1211.37 1498.55,1211.37 1499.14,1211.37 1499.72,1211.37 1500.31,1211.37 1500.9,1211.37 1501.48,1211.37 1502.07,1211.37 1502.65,1211.37 1503.24,1211.37 1503.83,1211.37 1504.41,1211.37 1505,1211.37 1505.59,1211.37 1506.17,1211.37 1506.76,1211.37 1507.35,1211.37 1507.93,1211.37 1508.52,1211.37 1509.11,1211.37 1509.69,1211.37 1510.28,1211.37 1510.86,1211.37 1511.45,1211.37 1512.04,1211.37 1512.62,1211.37 1513.21,1211.37 1513.8,1211.37 1514.38,1211.37 1514.97,1211.37 1515.56,1211.37 1516.14,1211.37 1516.73,1211.37 1517.32,1211.37 1517.9,1211.37 1518.49,1211.37 1519.07,1211.37 1519.66,1211.37 1520.25,1211.37 1520.83,1211.37 1521.42,1211.37 1522.01,1211.37 1522.59,1211.37 1523.18,1211.37 1523.77,1211.37 1524.35,1211.37 1524.94,1211.37 1525.52,1211.37 1526.11,1211.37 1526.7,1211.37 1527.28,1211.37 1527.87,1211.37 1528.46,1211.37 1529.04,1211.37 1529.63,1211.37 1530.22,1211.37 1530.8,1211.37 1531.39,1211.37 1531.98,1211.37 1532.56,1211.37 1533.15,1211.37 1533.73,1211.37 1534.32,1211.37 1534.91,1211.37 1535.49,1211.37 1536.08,1211.37 1536.67,1211.37 1537.25,1211.37 1537.84,1211.37 1538.43,1211.37 1539.01,1211.37 1539.6,1211.37 1540.19,1211.37 1540.77,1211.37 1541.36,1211.37 1541.94,1211.37 1542.53,1211.37 1543.12,1211.37 1543.7,1211.37 1544.29,1211.37 1544.88,1211.37 1545.46,1211.37 1546.05,1211.37 1546.64,1211.37 1547.22,1211.37 1547.81,1211.37 1548.4,1211.37 1548.98,1211.37 1549.57,1211.37 1550.15,1211.37 1550.74,1211.37 1551.33,1211.37 1551.91,1211.37 1552.5,1211.37 1553.09,1211.37 1553.67,1211.37 1554.26,1211.37 1554.85,1211.37 1555.43,1211.37 1556.02,1211.37 1556.6,1211.37 1557.19,1211.37 1557.78,1211.37 1558.36,1211.37 1558.95,1211.37 1559.54,1211.37 1560.12,1211.37 1560.71,1211.37 1561.3,1211.37 1561.88,1211.37 1562.47,1211.37 1563.06,1211.37 1563.64,1211.37 1564.23,1211.37 1564.81,1211.37 1565.4,1211.37 1565.99,1211.37 1566.57,1211.37 1567.16,1211.37 1567.75,1211.37 1568.33,1211.37 1568.92,1211.37 1569.51,1211.37 1570.09,1211.37 1570.68,1211.37 1571.27,1211.37 1571.85,1211.37 1572.44,1211.37 1573.02,1211.37 1573.61,1211.37 1574.2,1211.37 1574.78,1211.37 1575.37,1211.37 1575.96,1211.37 1576.54,1211.37 1577.13,1211.37 1577.72,1211.37 1578.3,1211.37 1578.89,1211.37 1579.47,1211.37 1580.06,1211.37 1580.65,1211.37 1581.23,1211.37 1581.82,1211.37 1582.41,1211.37 1582.99,1211.37 1583.58,1211.37 1584.17,1211.37 1584.75,1211.37 1585.34,1211.37 1585.93,1211.37 1586.51,1211.37 1587.1,1211.37 1587.68,1211.37 1588.27,1211.37 1588.86,1211.37 1589.44,1211.37 1590.03,1211.37 1590.62,1211.37 1591.2,1211.37 1591.79,1211.37 1592.38,1211.37 1592.96,1211.37 1593.55,1211.37 1594.14,1211.37 1594.72,1211.37 1595.31,1211.37 1595.89,1211.37 1596.48,1211.37 1597.07,1211.37 1597.65,1211.37 1598.24,1211.37 1598.83,1211.37 1599.41,1211.37 1600,1211.37 1600.59,1211.37 1601.17,1211.37 1601.76,1211.37 1602.34,1211.37 1602.93,1211.37 1603.52,1211.37 1604.1,1211.37 1604.69,1211.37 1605.28,1211.37 1605.86,1211.37 1606.45,1211.37 1607.04,1211.37 1607.62,1211.37 1608.21,1211.37 1608.8,1211.37 1609.38,1211.37 1609.97,1211.37 1610.55,1211.37 1611.14,1211.37 1611.73,1211.37 1612.31,1211.37 1612.9,1211.37 1613.49,1211.37 1614.07,1211.37 1614.66,1211.37 1615.25,1211.37 1615.83,1211.37 1616.42,1211.37 1617.01,1211.37 1617.59,1211.37 1618.18,1211.37 1618.76,1211.37 1619.35,1211.37 1619.94,1211.37 1620.52,1211.37 1621.11,1211.37 1621.7,1211.37 1622.28,1211.37 1622.87,1211.37 1623.46,1211.37 1624.04,1211.37 1624.63,1211.37 1625.22,1211.37 1625.8,1211.37 1626.39,1211.37 1626.97,1211.37 1627.56,1211.37 1628.15,1211.37 1628.73,1211.37 1629.32,1211.37 1629.91,1211.37 1630.49,1211.37 1631.08,1211.37 1631.67,1211.37 1632.25,1211.37 1632.84,1211.37 1633.42,1211.37 1634.01,1211.37 1634.6,1211.37 1635.18,1211.37 1635.77,1211.37 1636.36,1211.37 1636.94,1211.37 1637.53,1211.37 1638.12,1211.37 1638.7,1211.37 1639.29,1211.37 1639.88,1211.37 1640.46,1211.37 1641.05,1211.37 1641.63,1211.37 1642.22,1211.37 1642.81,1211.37 1643.39,1211.37 1643.98,1211.37 1644.57,1211.37 1645.15,1211.37 1645.74,1211.37 1646.33,1211.37 1646.91,1211.37 1647.5,1211.37 1648.09,1211.37 1648.67,1211.37 1649.26,1211.37 1649.84,1211.37 1650.43,1211.37 1651.02,1211.37 1651.6,1211.37 1652.19,1211.37 1652.78,1211.37 1653.36,1211.37 1653.95,1211.37 1654.54,1211.37 1655.12,1211.37 1655.71,1211.37 1656.29,1211.37 1656.88,1211.37 1657.47,1211.37 1658.05,1211.37 1658.64,1211.37 1659.23,1211.37 1659.81,1211.37 1660.4,1211.37 1660.99,1211.37 1661.57,1211.37 1662.16,1211.37 1662.75,1211.37 1663.33,1211.37 1663.92,1211.37 1664.5,1211.37 1665.09,1211.37 1665.68,1211.37 1666.26,1211.37 1666.85,1211.37 1667.44,1211.37 1668.02,1211.37 1668.61,1211.37 1669.2,1211.37 1669.78,1211.37 1670.37,1211.37 1670.96,1211.37 1671.54,1211.37 1672.13,1211.37 1672.71,1211.37 1673.3,1211.37 1673.89,1211.37 1674.47,1211.37 1675.06,1211.37 1675.65,1211.37 1676.23,1211.37 1676.82,1211.37 1677.41,1211.37 1677.99,1211.37 1678.58,1211.37 1679.17,1211.37 1679.75,1211.37 1680.34,1211.37 1680.92,1211.37 1681.51,1211.37 1682.1,1211.37 1682.68,1211.37 1683.27,1211.37 1683.86,1211.37 1684.44,1211.37 1685.03,1211.37 1685.62,1211.37 1686.2,1211.37 1686.79,1211.37 1687.37,1211.37 1687.96,1211.37 1688.55,1211.37 1689.13,1211.37 1689.72,1211.37 1690.31,1211.37 1690.89,1211.37 1691.48,1211.37 1692.07,1211.37 1692.65,1211.37 1693.24,1211.37 1693.83,1211.37 1694.41,1211.37 1695,1211.37 1695.58,1211.37 1696.17,1211.37 1696.76,1211.37 1697.34,1211.37 1697.93,1211.37 1698.52,1211.37 1699.1,1211.37 1699.69,1211.37 1700.28,1211.37 1700.86,1211.37 1701.45,1211.37 1702.04,1211.37 1702.62,1211.37 1703.21,1211.37 1703.79,1211.37 1704.38,1211.37 1704.97,1211.37 1705.55,1211.37 1706.14,1211.37 1706.73,1211.37 1707.31,1211.37 1707.9,1211.37 1708.49,1211.37 1709.07,1211.37 1709.66,1211.37 1710.24,1211.37 1710.83,1211.37 1711.42,1211.37 1712,1211.37 1712.59,1211.37 1713.18,1211.37 1713.76,1211.37 1714.35,1211.37 1714.94,1211.37 1715.52,1211.37 1716.11,1211.37 1716.7,1211.37 1717.28,1211.37 1717.87,1211.37 1718.45,1211.37 1719.04,1211.37 1719.63,1211.37 1720.21,1211.37 1720.8,1211.37 1721.39,1211.37 1721.97,1211.37 1722.56,1211.37 1723.15,1211.37 1723.73,1211.37 1724.32,1211.37 1724.91,1211.37 1725.49,1211.37 1726.08,1211.37 1726.66,1211.37 1727.25,1211.37 1727.84,1211.37 1728.42,1211.37 1729.01,1211.37 1729.6,1211.37 1730.18,1211.37 1730.77,1211.37 1731.36,1211.37 1731.94,1211.37 1732.53,1211.37 1733.11,1211.37 1733.7,1211.37 1734.29,1211.37 1734.87,1211.37 1735.46,1211.37 1736.05,1211.37 1736.63,1211.37 1737.22,1211.37 1737.81,1211.37 1738.39,1211.37 1738.98,1211.37 1739.57,1211.37 1740.15,1211.37 1740.74,1211.37 1741.32,1211.37 1741.91,1211.37 1742.5,1211.37 1743.08,1211.37 1743.67,1211.37 1744.26,1211.37 1744.84,1211.37 1745.43,1211.37 1746.02,1211.37 1746.6,1211.37 1747.19,1211.37 1747.78,1211.37 1748.36,1211.37 1748.95,1211.37 1749.53,1211.37 1750.12,1211.37 1750.71,1211.37 1751.29,1211.37 1751.88,1211.37 1752.47,1211.37 1753.05,1211.37 1753.64,1211.37 1754.23,1211.37 1754.81,1211.37 1755.4,1211.37 1755.99,1211.37 1756.57,1211.37 1757.16,1211.37 1757.74,1211.37 1758.33,1211.37 1758.92,1211.37 1759.5,1211.37 1760.09,1211.37 1760.68,1211.37 1761.26,1211.37 1761.85,1211.37 1762.44,1211.37 1763.02,1211.37 1763.61,1211.37 1764.19,1211.37 1764.78,1211.37 1765.37,1211.37 1765.95,1211.37 1766.54,1211.37 1767.13,1211.37 1767.71,1211.37 1768.3,1211.37 1768.89,1211.37 1769.47,1211.37 1770.06,1211.37 1770.65,1211.37 1771.23,1211.37 1771.82,1211.37 1772.4,1211.37 1772.99,1211.37 1773.58,1211.37 1774.16,1211.37 1774.75,1211.37 1775.34,1211.37 1775.92,1211.37 1776.51,1211.37 1777.1,1211.37 1777.68,1211.37 1778.27,1211.37 1778.86,1211.37 1779.44,1211.37 1780.03,1211.37 1780.61,1211.37 1781.2,1211.37 1781.79,1211.37 1782.37,1211.37 1782.96,1211.37 1783.55,1211.37 1784.13,1211.37 1784.72,1211.37 1785.31,1211.37 1785.89,1211.37 1786.48,1211.37 1787.06,1211.37 1787.65,1211.37 1788.24,1211.37 1788.82,1211.37 1789.41,1211.37 1790,1211.37 1790.58,1211.37 1791.17,1211.37 1791.76,1211.37 1792.34,1211.37 1792.93,1211.37 1793.52,1211.37 1794.1,1211.37 1794.69,1211.37 1795.27,1211.37 1795.86,1211.37 1796.45,1211.37 1797.03,1211.37 1797.62,1211.37 1798.21,1211.37 1798.79,1211.37 1799.38,1211.37 1799.97,1211.37 1800.55,1211.37 1801.14,1211.37 1801.73,1211.37 1802.31,1211.37 1802.9,1211.37 1803.48,1211.37 1804.07,1211.37 1804.66,1211.37 1805.24,1211.37 1805.83,1211.37 1806.42,1211.37 1807,1211.37 1807.59,1211.37 1808.18,1211.37 1808.76,1211.37 1809.35,1211.37 1809.94,1211.37 1810.52,1211.37 1811.11,1211.37 1811.69,1211.37 1812.28,1211.37 1812.87,1211.37 1813.45,1211.37 1814.04,1211.37 1814.63,1211.37 1815.21,1211.37 1815.8,1211.37 1816.39,1211.37 1816.97,1211.37 1817.56,1211.37 1818.14,1211.37 1818.73,1211.37 1819.32,1211.37 1819.9,1211.37 1820.49,1211.37 1821.08,1211.37 1821.66,1211.37 1822.25,1211.37 1822.84,1211.37 1823.42,1211.37 1824.01,1211.37 1824.6,1211.37 1825.18,1211.37 1825.77,1211.37 1826.35,1211.37 1826.94,1211.37 1827.53,1211.37 1828.11,1211.37 1828.7,1211.37 1829.29,1211.37 1829.87,1211.37 1830.46,1211.37 1831.05,1211.37 1831.63,1211.37 1832.22,1211.37 1832.81,1211.37 1833.39,1211.37 1833.98,1211.37 1834.56,1211.37 1835.15,1211.37 1835.74,1211.37 1836.32,1211.37 1836.91,1211.37 1837.5,1211.37 1838.08,1211.37 1838.67,1211.37 1839.26,1211.37 1839.84,1211.37 1840.43,1211.37 1841.01,1211.37 1841.6,1211.37 1842.19,1211.37 1842.77,1211.37 1843.36,1211.37 1843.95,1211.37 1844.53,1211.37 1845.12,1211.37 1845.71,1211.37 1846.29,1211.37 1846.88,1211.37 1847.47,1211.37 1848.05,1211.37 1848.64,1211.37 1849.22,1211.37 1849.81,1211.37 1850.4,1211.37 1850.98,1211.37 1851.57,1211.37 1852.16,1211.37 1852.74,1211.37 1853.33,1211.37 1853.92,1211.37 1854.5,1211.37 1855.09,1211.37 1855.68,1211.37 1856.26,1211.37 1856.85,1211.37 1857.43,1211.37 1858.02,1211.37 1858.61,1211.37 1859.19,1211.37 1859.78,1211.37 1860.37,1211.37 1860.95,1211.37 1861.54,1211.37 1862.13,1211.37 1862.71,1211.37 1863.3,1211.37 1863.88,1211.37 1864.47,1211.37 1865.06,1211.37 1865.64,1211.37 1866.23,1211.37 1866.82,1211.37 1867.4,1211.37 1867.99,1211.37 1868.58,1211.37 1869.16,1211.37 1869.75,1211.37 1870.34,1211.37 1870.92,1211.37 1871.51,1211.37 1872.09,1211.37 1872.68,1211.37 1873.27,1211.37 1873.85,1211.37 1874.44,1211.37 1875.03,1211.37 1875.61,1211.37 1876.2,1211.37 1876.79,1211.37 1877.37,1211.37 1877.96,1211.37 1878.55,1211.37 1879.13,1211.37 1879.72,1211.37 1880.3,1211.37 1880.89,1211.37 1881.48,1211.37 1882.06,1211.37 1882.65,1211.37 1883.24,1211.37 1883.82,1211.37 1884.41,1211.37 1885,1211.37 1885.58,1211.37 1886.17,1211.37 1886.76,1211.37 1887.34,1211.37 1887.93,1211.37 1888.51,1211.37 1889.1,1211.37 1889.69,1211.37 1890.27,1211.37 1890.86,1211.37 1891.45,1211.37 1892.03,1211.37 1892.62,1211.37 1893.21,1211.37 1893.79,1211.37 1894.38,1211.37 1894.96,1211.37 1895.55,1211.37 1896.14,1211.37 1896.72,1211.37 1897.31,1211.37 1897.9,1211.37 1898.48,1211.37 1899.07,1211.37 1899.66,1211.37 1900.24,1211.37 1900.83,1211.37 1901.42,1211.37 1902,1211.37 1902.59,1211.37 1903.17,1211.37 1903.76,1211.37 1904.35,1211.37 1904.93,1211.37 1905.52,1211.37 1906.11,1211.37 1906.69,1211.37 1907.28,1211.37 1907.87,1211.37 1908.45,1211.37 1909.04,1211.37 1909.63,1211.37 1910.21,1211.37 1910.8,1211.37 1911.38,1211.37 1911.97,1211.37 1912.56,1211.37 1913.14,1211.37 1913.73,1211.37 1914.32,1211.37 1914.9,1211.37 1915.49,1211.37 1916.08,1211.37 1916.66,1211.37 1917.25,1211.37 1917.83,1211.37 1918.42,1211.37 1919.01,1211.37 1919.59,1211.37 1920.18,1211.37 1920.77,1211.37 1921.35,1211.37 1921.94,1211.37 1922.53,1211.37 1923.11,1211.37 1923.7,1211.37 1924.29,1211.37 1924.87,1211.37 1925.46,1211.37 1926.04,1211.37 1926.63,1211.37 1927.22,1211.37 1927.8,1211.37 1928.39,1211.37 1928.98,1211.37 1929.56,1211.37 1930.15,1211.37 1930.74,1211.37 1931.32,1211.37 1931.91,1211.37 1932.5,1211.37 1933.08,1211.37 1933.67,1211.37 1934.25,1211.37 1934.84,1211.37 1935.43,1211.37 1936.01,1211.37 1936.6,1211.37 1937.19,1211.37 1937.77,1211.37 1938.36,1211.37 1938.95,1211.37 1939.53,1211.37 1940.12,1211.37 1940.71,1211.37 1941.29,1211.37 1941.88,1211.37 1942.46,1211.37 1943.05,1211.37 1943.64,1211.37 1944.22,1211.37 1944.81,1211.37 1945.4,1211.37 1945.98,1211.37 1946.57,1211.37 1947.16,1211.37 1947.74,1211.37 1948.33,1211.37 1948.91,1211.37 1949.5,1211.37 1950.09,1211.37 1950.67,1211.37 1951.26,1211.37 1951.85,1211.37 1952.43,1211.37 1953.02,1211.37 1953.61,1211.37 1954.19,1211.37 1954.78,1211.37 1955.37,1211.37 1955.95,1211.37 1956.54,1211.37 1957.12,1211.37 1957.71,1211.37 1958.3,1211.37 1958.88,1211.37 1959.47,1211.37 1960.06,1211.37 1960.64,1211.37 1961.23,1211.37 1961.82,1211.37 1962.4,1211.37 1962.99,1211.37 1963.58,1211.37 1964.16,1211.37 1964.75,1211.37 1965.33,1211.37 1965.92,1211.37 1966.51,1211.37 1967.09,1211.37 1967.68,1211.37 1968.27,1211.37 1968.85,1211.37 1969.44,1211.37 1970.03,1211.37 1970.61,1211.37 1971.2,1211.37 1971.78,1211.37 1972.37,1211.37 1972.96,1211.37 1973.54,1211.37 1974.13,1211.37 1974.72,1211.37 1975.3,1211.37 1975.89,1211.37 1976.48,1211.37 1977.06,1211.37 1977.65,1211.37 1978.24,1211.37 1978.82,1211.37 1979.41,1211.37 1979.99,1211.37 1980.58,1211.37 1981.17,1211.37 1981.75,1211.37 1982.34,1211.37 1982.93,1211.37 1983.51,1211.37 1984.1,1211.37 1984.69,1211.37 1985.27,1211.37 1985.86,1211.37 1986.45,1211.37 1987.03,1211.37 1987.62,1211.37 1988.2,1211.37 1988.79,1211.37 1989.38,1211.37 1989.96,1211.37 1990.55,1211.37 1991.14,1211.37 1991.72,1211.37 1992.31,1211.37 1992.9,1211.37 1993.48,1211.37 1994.07,1211.37 1994.65,1211.37 1995.24,1211.37 1995.83,1211.37 1996.41,1211.37 1997,1211.37 1997.59,1211.37 1998.17,1211.37 1998.76,1211.37 1999.35,1211.37 1999.93,1211.37 2000.52,1211.37 2001.11,1211.37 2001.69,1211.37 2002.28,1211.37 2002.86,1211.37 2003.45,1211.37 2004.04,1211.37 2004.62,1211.37 2005.21,1211.37 2005.8,1211.37 2006.38,1211.37 2006.97,1211.37 2007.56,1211.37 2008.14,1211.37 2008.73,1211.37 2009.32,1211.37 2009.9,1211.37 2010.49,1211.37 2011.07,1211.37 2011.66,1211.37 2012.25,1211.37 2012.83,1211.37 2013.42,1211.37 2014.01,1211.37 2014.59,1211.37 2015.18,1211.37 2015.77,1211.37 2016.35,1211.37 2016.94,1211.37 2017.53,1211.37 2018.11,1211.37 2018.7,1211.37 2019.28,1211.37 2019.87,1211.37 2020.46,1211.37 2021.04,1211.37 2021.63,1211.37 2022.22,1211.37 2022.8,1211.37 2023.39,1211.37 2023.98,1211.37 2024.56,1211.37 2025.15,1211.37 2025.73,1211.37 2026.32,1211.37 2026.91,1211.37 2027.49,1211.37 2028.08,1211.37 2028.67,1211.37 2029.25,1211.37 2029.84,1211.37 2030.43,1211.37 2031.01,1211.37 2031.6,1211.37 2032.19,1211.37 2032.77,1211.37 2033.36,1211.37 2033.94,1211.37 2034.53,1211.37 2035.12,1211.37 2035.7,1211.37 2036.29,1211.37 2036.88,1211.37 2037.46,1211.37 2038.05,1211.37 2038.64,1211.37 2039.22,1211.37 2039.81,1211.37 2040.4,1211.37 2040.98,1211.37 2041.57,1211.37 2042.15,1211.37 2042.74,1211.37 2043.33,1211.37 2043.91,1211.37 2044.5,1211.37 2045.09,1211.37 2045.67,1211.37 2046.26,1211.37 2046.85,1211.37 2047.43,1211.37 2048.02,1211.37 2048.6,1211.37 2049.19,1211.37 2049.78,1211.37 2050.36,1211.37 2050.95,1211.37 2051.54,1211.37 2052.12,1211.37 2052.71,1211.37 2053.3,1211.37 2053.88,1211.37 2054.47,1211.37 2055.06,1211.37 2055.64,1211.37 2056.23,1211.37 2056.81,1211.37 2057.4,1211.37 2057.99,1211.37 2058.57,1211.37 2059.16,1211.37 2059.75,1211.37 2060.33,1211.37 2060.92,1211.37 2061.51,1211.37 2062.09,1211.37 2062.68,1211.37 2063.27,1211.37 2063.85,1211.37 2064.44,1211.37 2065.02,1211.37 2065.61,1211.37 2066.2,1211.37 2066.78,1211.37 2067.37,1211.37 2067.96,1211.37 2068.54,1211.37 2069.13,1211.37 2069.72,1211.37 2070.3,1211.37 2070.89,1211.37 2071.48,1211.37 2072.06,1211.37 2072.65,1211.37 2073.23,1211.37 2073.82,1211.37 2074.41,1211.37 2074.99,1211.37 2075.58,1211.37 2076.17,1211.37 2076.75,1211.37 2077.34,1211.37 2077.93,1211.37 2078.51,1211.37 2079.1,1211.37 2079.68,1211.37 2080.27,1211.37 2080.86,1211.37 2081.44,1211.37 2082.03,1211.37 2082.62,1211.37 2083.2,1211.37 2083.79,1211.37 2084.38,1211.37 2084.96,1211.37 2085.55,1211.37 2086.14,1211.37 2086.72,1211.37 2087.31,1211.37 2087.89,1211.37 2088.48,1211.37 2089.07,1211.37 2089.65,1211.37 2090.24,1211.37 2090.83,1211.37 2091.41,1211.37 2092,1211.37 2092.59,1211.37 2093.17,1211.37 2093.76,1211.37 2094.35,1211.37 2094.93,1211.37 2095.52,1211.37 2096.1,1211.37 2096.69,1211.37 2097.28,1211.37 2097.86,1211.37 2098.45,1211.37 2099.04,1211.37 2099.62,1211.37 2100.21,1211.37 2100.8,1211.37 2101.38,1211.37 2101.97,1211.37 2102.55,1211.37 2103.14,1211.37 2103.73,1211.37 2104.31,1211.37 2104.9,1211.37 2105.49,1211.37 2106.07,1211.37 2106.66,1211.37 2107.25,1211.37 2107.83,1211.37 2108.42,1211.37 2109.01,1211.37 2109.59,1211.37 2110.18,1211.37 2110.76,1211.37 2111.35,1211.37 2111.94,1211.37 2112.52,1211.37 2113.11,1211.37 2113.7,1211.37 2114.28,1211.37 2114.87,1211.37 2115.46,1211.37 2116.04,1211.37 2116.63,1211.37 2117.22,1211.37 2117.8,1211.37 2118.39,1211.37 2118.97,1211.37 2119.56,1211.37 2120.15,1211.37 2120.73,1211.37 2121.32,1211.37 2121.91,1211.37 2122.49,1211.37 2123.08,1211.37 2123.67,1211.37 2124.25,1211.37 2124.84,1211.37 2125.42,1211.37 2126.01,1211.37 2126.6,1211.37 2127.18,1211.37 2127.77,1211.37 2128.36,1211.37 2128.94,1211.37 2129.53,1211.37 2130.12,1211.37 2130.7,1211.37 2131.29,1211.37 2131.88,1211.37 2132.46,1211.37 2133.05,1211.37 2133.63,1211.37 2134.22,1211.37 2134.81,1211.37 2135.39,1211.37 2135.98,1211.37 2136.57,1211.37 2137.15,1211.37 2137.74,1211.37 2138.33,1211.37 2138.91,1211.37 2139.5,1211.37 2140.09,1211.37 2140.67,1211.37 2141.26,1211.37 2141.84,1211.37 2142.43,1211.37 2143.02,1211.37 2143.6,1211.37 2144.19,1211.37 2144.78,1211.37 2145.36,1211.37 2145.95,1211.37 2146.54,1211.37 2147.12,1211.37 2147.71,1211.37 2148.3,1211.37 2148.88,1211.37 2149.47,1211.37 2150.05,1211.37 2150.64,1211.37 2151.23,1211.37 2151.81,1211.37 2152.4,1211.37 2152.99,1211.37 2153.57,1211.37 2154.16,1211.37 2154.75,1211.37 2155.33,1211.37 2155.92,1211.37 2156.5,1211.37 2157.09,1211.37 2157.68,1211.37 2158.26,1211.37 \"/>\n<path clip-path=\"url(#clip212)\" d=\"M986.025 1211.17 L986.612 1211.17 L987.198 1211.17 L987.785 1211.17 L988.371 1211.17 L988.957 1211.17 L989.544 1211.17 L990.13 1211.17 L990.717 1211.17 L991.303 1211.17 L991.889 1211.17 L992.476 1211.17 L993.062 1211.17 L993.649 1211.17 L994.235 1211.17 L994.822 1211.17 L995.408 1211.17 L995.994 1211.17 L996.581 1211.17 L997.167 1211.17 L997.754 1211.17 L998.34 1211.17 L998.926 1211.17 L999.513 1211.17 L1000.1 1211.17 L1000.69 1211.17 L1001.27 1211.17 L1001.86 1211.17 L1002.44 1211.17 L1003.03 1211.17 L1003.62 1211.17 L1004.2 1211.17 L1004.79 1211.17 L1005.38 1211.17 L1005.96 1211.17 L1006.55 1211.17 L1007.14 1211.17 L1007.72 1211.17 L1008.31 1211.17 L1008.9 1211.17 L1009.48 1211.17 L1010.07 1211.17 L1010.65 1211.17 L1011.24 1211.17 L1011.83 1211.17 L1012.41 1211.17 L1013 1211.17 L1013.59 1211.17 L1014.17 1211.17 L1014.76 1211.17 L1015.35 1211.17 L1015.93 1211.17 L1016.52 1211.17 L1017.11 1211.17 L1017.69 1211.17 L1018.28 1211.17 L1018.86 1211.17 L1019.45 1211.17 L1020.04 1211.17 L1020.62 1211.17 L1021.21 1211.17 L1021.8 1211.17 L1022.38 1211.17 L1022.97 1211.17 L1023.56 1211.17 L1024.14 1211.17 L1024.73 1211.17 L1025.32 1211.17 L1025.9 1211.17 L1026.49 1211.17 L1027.07 1211.17 L1027.66 1211.17 L1028.25 1211.17 L1028.83 1211.17 L1029.42 1211.17 L1030.01 1211.17 L1030.59 1211.17 L1031.18 1211.17 L1031.77 1211.17 L1032.35 1211.17 L1032.94 1211.17 L1033.52 1211.17 L1034.11 1211.17 L1034.7 1211.17 L1035.28 1211.17 L1035.87 1211.17 L1036.46 1211.17 L1037.04 1211.17 L1037.63 1211.17 L1038.22 1211.17 L1038.8 1211.17 L1039.39 1211.17 L1039.98 1211.17 L1040.56 1211.17 L1041.15 1211.17 L1041.73 1211.17 L1042.32 1211.17 L1042.91 1211.17 L1043.49 1211.17 L1044.08 1211.17 L1044.67 1211.17 L1045.25 1211.17 L1045.84 1211.17 L1046.43 1211.17 L1047.01 1211.17 L1047.6 1211.17 L1048.19 1211.17 L1048.77 1211.17 L1049.36 1211.17 L1049.94 1211.17 L1050.53 1211.17 L1051.12 1211.17 L1051.7 1211.17 L1052.29 1211.17 L1052.88 1211.17 L1053.46 1211.17 L1054.05 1211.17 L1054.64 1211.17 L1055.22 1211.17 L1055.81 1211.17 L1056.39 1211.17 L1056.98 1211.17 L1057.57 1211.17 L1058.15 1211.17 L1058.74 1211.17 L1059.33 1211.17 L1059.91 1211.17 L1060.5 1211.17 L1061.09 1211.17 L1061.67 1211.17 L1062.26 1211.17 L1062.85 1211.17 L1063.43 1211.17 L1064.02 1211.17 L1064.6 1211.17 L1065.19 1211.17 L1065.78 1211.17 L1066.36 1211.17 L1066.95 1211.17 L1067.54 1211.17 L1068.12 1211.17 L1068.71 1211.17 L1069.3 1211.17 L1069.88 1211.17 L1070.47 1211.17 L1071.06 1211.17 L1071.64 1211.17 L1072.23 1211.17 L1072.81 1211.17 L1073.4 1211.17 L1073.99 1211.17 L1074.57 1211.17 L1075.16 1211.17 L1075.75 1211.17 L1076.33 1211.17 L1076.92 1211.17 L1077.51 1211.17 L1078.09 1211.17 L1078.68 1211.17 L1079.26 1211.17 L1079.85 1211.17 L1080.44 1211.17 L1081.02 1211.17 L1081.61 1211.17 L1082.2 1211.17 L1082.78 1211.17 L1083.37 1211.17 L1083.96 1211.17 L1084.54 1211.17 L1085.13 1211.17 L1085.72 1211.17 L1086.3 1211.17 L1086.89 1211.17 L1087.47 1211.17 L1088.06 1211.17 L1088.65 1211.17 L1089.23 1211.17 L1089.82 1211.17 L1090.41 1211.17 L1090.99 1211.17 L1091.58 1211.17 L1092.17 1211.17 L1092.75 1211.17 L1093.34 1211.17 L1093.93 1211.17 L1094.51 1211.17 L1095.1 1211.17 L1095.68 1211.17 L1096.27 1211.17 L1096.86 1211.17 L1097.44 1211.17 L1098.03 1211.17 L1098.62 1211.17 L1099.2 1211.17 L1099.79 1211.17 L1100.38 1211.17 L1100.96 1211.17 L1101.55 1211.17 L1102.14 1211.17 L1102.72 1211.17 L1103.31 1211.17 L1103.89 1211.17 L1104.48 1211.17 L1105.07 1211.17 L1105.65 1211.17 L1106.24 1211.17 L1106.83 1211.17 L1107.41 1211.17 L1108 1211.17 L1108.59 1211.17 L1109.17 1211.17 L1109.76 1211.17 L1110.34 1211.17 L1110.93 1211.17 L1111.52 1211.17 L1112.1 1211.17 L1112.69 1211.17 L1113.28 1211.17 L1113.86 1211.17 L1114.45 1211.17 L1115.04 1211.17 L1115.62 1211.17 L1116.21 1211.17 L1116.8 1211.17 L1117.38 1211.17 L1117.97 1211.17 L1118.55 1211.17 L1119.14 1211.17 L1119.73 1211.17 L1120.31 1211.17 L1120.9 1211.17 L1121.49 1211.17 L1122.07 1211.17 L1122.66 1211.17 L1123.25 1211.17 L1123.83 1211.17 L1124.42 1211.17 L1125.01 1211.17 L1125.59 1211.17 L1126.18 1211.17 L1126.76 1211.17 L1127.35 1211.17 L1127.94 1211.17 L1128.52 1211.17 L1129.11 1211.17 L1129.7 1211.17 L1130.28 1211.17 L1130.87 1211.17 L1131.46 1211.17 L1132.04 1211.17 L1132.63 1211.17 L1133.21 1211.17 L1133.8 1211.17 L1134.39 1211.17 L1134.97 1211.17 L1135.56 1211.17 L1136.15 1211.17 L1136.73 1211.17 L1137.32 1211.17 L1137.91 1211.17 L1138.49 1211.17 L1139.08 1211.17 L1139.67 1211.17 L1140.25 1211.17 L1140.84 1211.17 L1141.42 1211.17 L1142.01 1211.17 L1142.6 1211.17 L1143.18 1211.17 L1143.77 1211.17 L1144.36 1211.17 L1144.94 1211.17 L1145.53 1211.17 L1146.12 1211.17 L1146.7 1211.17 L1147.29 1211.17 L1147.88 1211.17 L1148.46 1211.17 L1149.05 1211.17 L1149.63 1211.17 L1150.22 1211.17 L1150.81 1211.17 L1151.39 1211.17 L1151.98 1211.17 L1152.57 1211.17 L1153.15 1211.17 L1153.74 1211.17 L1154.33 1211.17 L1154.91 1211.17 L1155.5 1211.17 L1156.09 1211.17 L1156.67 1211.17 L1157.26 1211.17 L1157.84 1211.17 L1158.43 1211.17 L1159.02 1211.17 L1159.6 1211.17 L1160.19 1211.17 L1160.78 1211.17 L1161.36 1211.17 L1161.95 1211.17 L1162.54 1211.17 L1163.12 1211.17 L1163.71 1211.17 L1164.29 1211.17 L1164.88 1211.17 L1165.47 1211.17 L1166.05 1211.17 L1166.64 1211.17 L1167.23 1211.17 L1167.81 1211.17 L1168.4 1211.17 L1168.99 1211.17 L1169.57 1211.17 L1170.16 1211.17 L1170.75 1211.17 L1171.33 1211.17 L1171.92 1211.17 L1172.5 1211.17 L1173.09 1211.17 L1173.68 1211.17 L1174.26 1211.17 L1174.85 1211.17 L1175.44 1211.17 L1176.02 1211.17 L1176.61 1211.17 L1177.2 1211.17 L1177.78 1211.17 L1178.37 1211.17 L1178.96 1211.17 L1179.54 1211.17 L1180.13 1211.17 L1180.71 1211.17 L1181.3 1211.17 L1181.89 1211.17 L1182.47 1211.17 L1183.06 1211.17 L1183.65 1211.17 L1184.23 1211.17 L1184.82 1211.17 L1185.41 1211.17 L1185.99 1211.17 L1186.58 1211.17 L1187.16 1211.17 L1187.75 1211.17 L1188.34 1211.17 L1188.92 1211.17 L1189.51 1211.17 L1190.1 1211.17 L1190.68 1211.17 L1191.27 1211.17 L1191.86 1211.17 L1192.44 1211.17 L1193.03 1211.17 L1193.62 1211.17 L1194.2 1211.17 L1194.79 1211.17 L1195.37 1211.17 L1195.96 1211.17 L1196.55 1211.17 L1197.13 1211.17 L1197.72 1211.17 L1198.31 1211.17 L1198.89 1211.17 L1199.48 1211.17 L1200.07 1211.17 L1200.65 1211.17 L1201.24 1211.17 L1201.83 1211.17 L1202.41 1211.17 L1203 1211.17 L1203.58 1211.17 L1204.17 1211.17 L1204.76 1211.17 L1205.34 1211.17 L1205.93 1211.17 L1206.52 1211.17 L1207.1 1211.17 L1207.69 1211.17 L1208.28 1211.17 L1208.86 1211.17 L1209.45 1211.17 L1210.03 1211.17 L1210.62 1211.17 L1211.21 1211.17 L1211.79 1211.17 L1212.38 1211.17 L1212.97 1211.17 L1213.55 1211.17 L1214.14 1211.17 L1214.73 1211.17 L1215.31 1211.17 L1215.9 1211.17 L1216.49 1211.17 L1217.07 1211.17 L1217.66 1211.17 L1218.24 1211.17 L1218.83 1211.17 L1219.42 1211.17 L1220 1211.17 L1220.59 1211.17 L1221.18 1211.17 L1221.76 1211.17 L1222.35 1211.17 L1222.94 1211.17 L1223.52 1211.17 L1224.11 1211.17 L1224.7 1211.17 L1225.28 1211.17 L1225.87 1211.17 L1226.45 1211.17 L1227.04 1211.17 L1227.63 1211.17 L1228.21 1211.17 L1228.8 1211.17 L1229.39 1211.17 L1229.97 1211.17 L1230.56 1211.17 L1231.15 1211.17 L1231.73 1211.17 L1232.32 1211.17 L1232.91 1211.17 L1233.49 1211.17 L1234.08 1211.17 L1234.66 1211.17 L1235.25 1211.17 L1235.84 1211.17 L1236.42 1211.17 L1237.01 1211.17 L1237.6 1211.17 L1238.18 1211.17 L1238.77 1211.17 L1239.36 1211.17 L1239.94 1211.17 L1240.53 1211.17 L1241.11 1211.17 L1241.7 1211.17 L1242.29 1211.17 L1242.87 1211.17 L1243.46 1211.17 L1244.05 1211.17 L1244.63 1211.17 L1245.22 1211.17 L1245.81 1211.17 L1246.39 1211.17 L1246.98 1211.17 L1247.57 1211.17 L1248.15 1211.17 L1248.74 1211.17 L1249.32 1211.17 L1249.91 1211.17 L1250.5 1211.17 L1251.08 1211.17 L1251.67 1211.17 L1252.26 1211.17 L1252.84 1211.17 L1253.43 1211.17 L1254.02 1211.17 L1254.6 1211.17 L1255.19 1211.17 L1255.78 1211.17 L1256.36 1211.17 L1256.95 1211.17 L1257.53 1211.17 L1258.12 1211.17 L1258.71 1211.17 L1259.29 1211.17 L1259.88 1211.17 L1260.47 1211.17 L1261.05 1211.17 L1261.64 1211.17 L1262.23 1211.17 L1262.81 1211.17 L1263.4 1211.17 L1263.98 1211.17 L1264.57 1211.17 L1265.16 1211.17 L1265.74 1211.17 L1266.33 1211.17 L1266.92 1211.17 L1267.5 1211.17 L1268.09 1211.17 L1268.68 1211.17 L1269.26 1211.17 L1269.85 1211.17 L1270.44 1211.17 L1271.02 1211.17 L1271.61 1211.17 L1272.19 1211.17 L1272.78 1211.17 L1273.37 1211.17 L1273.95 1211.17 L1274.54 1211.17 L1275.13 1211.17 L1275.71 1211.17 L1276.3 1211.17 L1276.89 1211.17 L1277.47 1211.17 L1278.06 1211.17 L1278.65 1211.17 L1279.23 1211.17 L1279.82 1211.17 L1280.4 1211.17 L1280.99 1211.17 L1281.58 1211.17 L1282.16 1211.17 L1282.75 1211.17 L1283.34 1211.17 L1283.92 1211.17 L1284.51 1211.17 L1285.1 1211.17 L1285.68 1211.17 L1286.27 1211.17 L1286.86 1211.17 L1287.44 1211.17 L1288.03 1211.17 L1288.61 1211.17 L1289.2 1211.17 L1289.79 1211.17 L1290.37 1211.17 L1290.96 1211.17 L1291.55 1211.17 L1292.13 1211.17 L1292.72 1211.17 L1293.31 1211.17 L1293.89 1211.17 L1294.48 1211.17 L1295.06 1211.17 L1295.65 1211.17 L1296.24 1211.17 L1296.82 1211.17 L1297.41 1211.17 L1298 1211.17 L1298.58 1211.17 L1299.17 1211.17 L1299.76 1211.17 L1300.34 1211.17 L1300.93 1211.17 L1301.52 1211.17 L1302.1 1211.17 L1302.69 1211.17 L1303.27 1211.17 L1303.86 1211.17 L1304.45 1211.17 L1305.03 1211.17 L1305.62 1211.17 L1306.21 1211.17 L1306.79 1211.17 L1307.38 1211.17 L1307.97 1211.17 L1308.55 1211.17 L1309.14 1211.17 L1309.73 1211.17 L1310.31 1211.17 L1310.9 1211.17 L1311.48 1211.17 L1312.07 1211.17 L1312.66 1211.17 L1313.24 1211.17 L1313.83 1211.17 L1314.42 1211.17 L1315 1211.17 L1315.59 1211.17 L1316.18 1211.17 L1316.76 1211.17 L1317.35 1211.17 L1317.93 1211.17 L1318.52 1211.17 L1319.11 1211.17 L1319.69 1211.17 L1320.28 1211.17 L1320.87 1211.17 L1321.45 1211.17 L1322.04 1211.17 L1322.63 1211.17 L1323.21 1211.17 L1323.8 1211.17 L1324.39 1211.17 L1324.97 1211.17 L1325.56 1211.17 L1326.14 1211.17 L1326.73 1211.17 L1327.32 1211.17 L1327.9 1211.17 L1328.49 1211.17 L1329.08 1211.17 L1329.66 1211.17 L1330.25 1211.17 L1330.84 1211.17 L1331.42 1211.17 L1332.01 1211.17 L1332.6 1211.17 L1333.18 1211.17 L1333.77 1211.17 L1334.35 1211.17 L1334.94 1211.17 L1335.53 1211.17 L1336.11 1211.17 L1336.7 1211.17 L1337.29 1211.17 L1337.87 1211.17 L1338.46 1211.17 L1339.05 1211.17 L1339.63 1211.17 L1340.22 1211.17 L1340.8 1211.17 L1341.39 1211.17 L1341.98 1211.17 L1342.56 1211.17 L1343.15 1211.17 L1343.74 1211.17 L1344.32 1211.17 L1344.91 1211.17 L1345.5 1211.17 L1346.08 1211.17 L1346.67 1211.17 L1347.26 1211.17 L1347.84 1211.17 L1348.43 1211.17 L1349.01 1211.17 L1349.6 1211.17 L1350.19 1211.17 L1350.77 1211.17 L1351.36 1211.17 L1351.95 1211.17 L1352.53 1211.17 L1353.12 1211.17 L1353.71 1211.17 L1354.29 1211.17 L1354.88 1211.17 L1355.47 1211.17 L1356.05 1211.17 L1356.64 1211.17 L1357.22 1211.17 L1357.81 1211.17 L1358.4 1211.17 L1358.98 1211.17 L1359.57 1211.17 L1360.16 1211.17 L1360.74 1211.17 L1361.33 1211.17 L1361.92 1211.17 L1362.5 1211.17 L1363.09 1211.17 L1363.68 1211.17 L1364.26 1211.17 L1364.85 1211.17 L1365.43 1211.17 L1366.02 1211.17 L1366.61 1211.17 L1367.19 1211.17 L1367.78 1211.17 L1368.37 1211.17 L1368.95 1211.17 L1369.54 1211.17 L1370.13 1211.17 L1370.71 1211.17 L1371.3 1211.17 L1371.88 1211.17 L1372.47 1211.17 L1373.06 1211.17 L1373.64 1211.17 L1374.23 1211.17 L1374.82 1211.17 L1375.4 1211.17 L1375.99 1211.17 L1376.58 1211.17 L1377.16 1211.17 L1377.75 1211.17 L1378.34 1211.17 L1378.92 1211.17 L1379.51 1211.17 L1380.09 1211.17 L1380.68 1211.17 L1381.27 1211.17 L1381.85 1211.17 L1382.44 1211.17 L1383.03 1211.17 L1383.61 1211.17 L1384.2 1211.17 L1384.79 1211.17 L1385.37 1211.17 L1385.96 1211.17 L1386.55 1211.17 L1387.13 1211.17 L1387.72 1211.17 L1388.3 1211.17 L1388.89 1211.17 L1389.48 1211.17 L1390.06 1211.17 L1390.65 1211.17 L1391.24 1211.17 L1391.82 1211.17 L1392.41 1211.17 L1393 1211.17 L1393.58 1211.17 L1394.17 1211.17 L1394.75 1211.17 L1395.34 1211.17 L1395.93 1211.17 L1396.51 1211.17 L1397.1 1211.17 L1397.69 1211.17 L1398.27 1211.17 L1398.86 1211.17 L1399.45 1211.17 L1400.03 1211.17 L1400.62 1211.17 L1401.21 1211.17 L1401.79 1211.17 L1402.38 1211.17 L1402.96 1211.17 L1403.55 1211.17 L1404.14 1211.17 L1404.72 1211.17 L1405.31 1211.17 L1405.9 1211.17 L1406.48 1211.17 L1407.07 1211.17 L1407.66 1211.17 L1408.24 1211.17 L1408.83 1211.17 L1409.42 1211.17 L1410 1211.17 L1410.59 1211.17 L1411.17 1211.17 L1411.76 1211.17 L1412.35 1211.17 L1412.93 1211.17 L1413.52 1211.17 L1414.11 1211.17 L1414.69 1211.17 L1415.28 1211.17 L1415.87 1211.17 L1416.45 1211.17 L1417.04 1211.17 L1417.63 1211.17 L1418.21 1211.17 L1418.8 1211.17 L1419.38 1211.17 L1419.97 1211.17 L1420.56 1211.17 L1421.14 1211.17 L1421.73 1211.17 L1422.32 1211.17 L1422.9 1211.17 L1423.49 1211.17 L1424.08 1211.17 L1424.66 1211.17 L1425.25 1211.17 L1425.83 1211.17 L1426.42 1211.17 L1427.01 1211.17 L1427.59 1211.17 L1428.18 1211.17 L1428.77 1211.17 L1429.35 1211.17 L1429.94 1211.17 L1430.53 1211.17 L1431.11 1211.17 L1431.7 1211.17 L1432.29 1211.17 L1432.87 1211.17 L1433.46 1211.17 L1434.04 1211.17 L1434.63 1211.17 L1435.22 1211.17 L1435.8 1211.17 L1436.39 1211.17 L1436.98 1211.17 L1437.56 1211.17 L1438.15 1211.17 L1438.74 1211.17 L1439.32 1211.17 L1439.91 1211.17 L1440.5 1211.17 L1441.08 1211.17 L1441.67 1211.17 L1442.25 1211.17 L1442.84 1211.17 L1443.43 1211.17 L1444.01 1211.17 L1444.6 1211.17 L1445.19 1211.17 L1445.77 1211.17 L1446.36 1211.17 L1446.95 1211.17 L1447.53 1211.17 L1448.12 1211.17 L1448.7 1211.17 L1449.29 1211.17 L1449.88 1211.17 L1450.46 1211.17 L1451.05 1211.17 L1451.64 1211.17 L1452.22 1211.17 L1452.81 1211.17 L1453.4 1211.17 L1453.98 1211.17 L1454.57 1211.17 L1455.16 1211.17 L1455.74 1211.17 L1456.33 1211.17 L1456.91 1211.17 L1457.5 1211.17 L1458.09 1211.17 L1458.67 1211.17 L1459.26 1211.17 L1459.85 1211.17 L1460.43 1211.17 L1461.02 1211.17 L1461.61 1211.17 L1462.19 1211.17 L1462.78 1211.17 L1463.37 1211.17 L1463.95 1211.17 L1464.54 1211.17 L1465.12 1211.17 L1465.71 1211.17 L1466.3 1211.17 L1466.88 1211.17 L1467.47 1211.17 L1468.06 1211.17 L1468.64 1211.17 L1469.23 1211.17 L1469.82 1211.17 L1470.4 1211.17 L1470.99 1211.17 L1471.57 1211.17 L1472.16 1211.17 L1472.75 1211.17 L1473.33 1211.17 L1473.92 1211.17 L1474.51 1211.17 L1475.09 1211.17 L1475.68 1211.17 L1476.27 1211.17 L1476.85 1211.17 L1477.44 1211.17 L1478.03 1211.17 L1478.61 1211.17 L1479.2 1211.17 L1479.78 1211.17 L1480.37 1211.17 L1480.96 1211.17 L1481.54 1211.17 L1482.13 1211.17 L1482.72 1211.17 L1483.3 1211.17 L1483.89 1211.17 L1484.48 1211.17 L1485.06 1211.17 L1485.65 1211.17 L1486.24 1211.17 L1486.82 1211.17 L1487.41 1211.17 L1487.99 1211.17 L1488.58 1211.17 L1489.17 1211.17 L1489.75 1211.17 L1490.34 1211.17 L1490.93 1211.17 L1491.51 1211.17 L1492.1 1211.17 L1492.69 1211.17 L1493.27 1211.17 L1493.86 1211.17 L1494.45 1211.17 L1495.03 1211.17 L1495.62 1211.17 L1496.2 1211.17 L1496.79 1211.17 L1497.38 1211.17 L1497.96 1211.17 L1498.55 1211.17 L1499.14 1211.17 L1499.72 1211.17 L1500.31 1211.17 L1500.9 1211.17 L1501.48 1211.17 L1502.07 1211.17 L1502.65 1211.17 L1503.24 1211.17 L1503.83 1211.17 L1504.41 1211.17 L1505 1211.17 L1505.59 1211.17 L1506.17 1211.17 L1506.76 1211.17 L1507.35 1211.17 L1507.93 1211.17 L1508.52 1211.17 L1509.11 1211.17 L1509.69 1211.17 L1510.28 1211.17 L1510.86 1211.17 L1511.45 1211.17 L1512.04 1211.17 L1512.62 1211.17 L1513.21 1211.17 L1513.8 1211.17 L1514.38 1211.17 L1514.97 1211.17 L1515.56 1211.17 L1516.14 1211.17 L1516.73 1211.17 L1517.32 1211.17 L1517.9 1211.17 L1518.49 1211.17 L1519.07 1211.17 L1519.66 1211.17 L1520.25 1211.17 L1520.83 1211.17 L1521.42 1211.17 L1522.01 1211.17 L1522.59 1211.17 L1523.18 1211.17 L1523.77 1211.17 L1524.35 1211.17 L1524.94 1211.17 L1525.52 1211.17 L1526.11 1211.17 L1526.7 1211.17 L1527.28 1211.17 L1527.87 1211.17 L1528.46 1211.17 L1529.04 1211.17 L1529.63 1211.17 L1530.22 1211.17 L1530.8 1211.17 L1531.39 1211.17 L1531.98 1211.17 L1532.56 1211.17 L1533.15 1211.17 L1533.73 1211.17 L1534.32 1211.17 L1534.91 1211.17 L1535.49 1211.17 L1536.08 1211.17 L1536.67 1211.17 L1537.25 1211.17 L1537.84 1211.17 L1538.43 1211.17 L1539.01 1211.17 L1539.6 1211.17 L1540.19 1211.17 L1540.77 1211.17 L1541.36 1211.17 L1541.94 1211.17 L1542.53 1211.17 L1543.12 1211.17 L1543.7 1211.17 L1544.29 1211.17 L1544.88 1211.17 L1545.46 1211.17 L1546.05 1211.17 L1546.64 1211.17 L1547.22 1211.17 L1547.81 1211.17 L1548.4 1211.17 L1548.98 1211.17 L1549.57 1211.17 L1550.15 1211.17 L1550.74 1211.17 L1551.33 1211.17 L1551.91 1211.17 L1552.5 1211.17 L1553.09 1211.17 L1553.67 1211.17 L1554.26 1211.17 L1554.85 1211.17 L1555.43 1211.17 L1556.02 1211.17 L1556.6 1211.17 L1557.19 1211.17 L1557.78 1211.17 L1558.36 1211.17 L1558.95 1211.17 L1559.54 1211.17 L1560.12 1211.17 L1560.71 1211.17 L1561.3 1211.17 L1561.88 1211.17 L1562.47 1211.17 L1563.06 1211.17 L1563.64 1211.17 L1564.23 1211.17 L1564.81 1211.17 L1565.4 1211.17 L1565.99 1211.17 L1566.57 1211.17 L1567.16 1211.17 L1567.75 1211.17 L1568.33 1211.17 L1568.92 1211.17 L1569.51 1211.17 L1570.09 1211.17 L1570.68 1211.17 L1571.27 1211.17 L1571.85 1211.17 L1572.44 1211.17 L1573.02 1211.17 L1573.61 1211.17 L1574.2 1211.17 L1574.78 1211.17 L1575.37 1211.17 L1575.96 1211.17 L1576.54 1211.17 L1577.13 1211.17 L1577.72 1211.17 L1578.3 1211.17 L1578.89 1211.17 L1579.47 1211.17 L1580.06 1211.17 L1580.65 1211.17 L1581.23 1211.17 L1581.82 1211.17 L1582.41 1211.17 L1582.99 1211.17 L1583.58 1211.17 L1584.17 1211.17 L1584.75 1211.17 L1585.34 1211.17 L1585.93 1211.17 L1586.51 1211.17 L1587.1 1211.17 L1587.68 1211.17 L1588.27 1211.17 L1588.86 1211.17 L1589.44 1211.17 L1590.03 1211.17 L1590.62 1211.17 L1591.2 1211.17 L1591.79 1211.17 L1592.38 1211.17 L1592.96 1211.17 L1593.55 1211.17 L1594.14 1211.17 L1594.72 1211.17 L1595.31 1211.17 L1595.89 1211.17 L1596.48 1211.17 L1597.07 1211.17 L1597.65 1211.17 L1598.24 1211.17 L1598.83 1211.17 L1599.41 1211.17 L1600 1211.17 L1600.59 1211.17 L1601.17 1211.17 L1601.76 1211.17 L1602.34 1211.17 L1602.93 1211.17 L1603.52 1211.17 L1604.1 1211.17 L1604.69 1211.17 L1605.28 1211.17 L1605.86 1211.17 L1606.45 1211.17 L1607.04 1211.17 L1607.62 1211.17 L1608.21 1211.17 L1608.8 1211.17 L1609.38 1211.17 L1609.97 1211.17 L1610.55 1211.17 L1611.14 1211.17 L1611.73 1211.17 L1612.31 1211.17 L1612.9 1211.17 L1613.49 1211.17 L1614.07 1211.17 L1614.66 1211.17 L1615.25 1211.17 L1615.83 1211.17 L1616.42 1211.17 L1617.01 1211.17 L1617.59 1211.17 L1618.18 1211.17 L1618.76 1211.17 L1619.35 1211.17 L1619.94 1211.17 L1620.52 1211.17 L1621.11 1211.17 L1621.7 1211.17 L1622.28 1211.17 L1622.87 1211.17 L1623.46 1211.17 L1624.04 1211.17 L1624.63 1211.17 L1625.22 1211.17 L1625.8 1211.17 L1626.39 1211.17 L1626.97 1211.17 L1627.56 1211.17 L1628.15 1211.17 L1628.73 1211.17 L1629.32 1211.17 L1629.91 1211.17 L1630.49 1211.17 L1631.08 1211.17 L1631.67 1211.17 L1632.25 1211.17 L1632.84 1211.17 L1633.42 1211.17 L1634.01 1211.17 L1634.6 1211.17 L1635.18 1211.17 L1635.77 1211.17 L1636.36 1211.17 L1636.94 1211.17 L1637.53 1211.17 L1638.12 1211.17 L1638.7 1211.17 L1639.29 1211.17 L1639.88 1211.17 L1640.46 1211.17 L1641.05 1211.17 L1641.63 1211.17 L1642.22 1211.17 L1642.81 1211.17 L1643.39 1211.17 L1643.98 1211.17 L1644.57 1211.17 L1645.15 1211.17 L1645.74 1211.17 L1646.33 1211.17 L1646.91 1211.17 L1647.5 1211.17 L1648.09 1211.17 L1648.67 1211.17 L1649.26 1211.17 L1649.84 1211.17 L1650.43 1211.17 L1651.02 1211.17 L1651.6 1211.17 L1652.19 1211.17 L1652.78 1211.17 L1653.36 1211.17 L1653.95 1211.17 L1654.54 1211.17 L1655.12 1211.17 L1655.71 1211.17 L1656.29 1211.17 L1656.88 1211.17 L1657.47 1211.17 L1658.05 1211.17 L1658.64 1211.17 L1659.23 1211.17 L1659.81 1211.17 L1660.4 1211.17 L1660.99 1211.17 L1661.57 1211.17 L1662.16 1211.17 L1662.75 1211.17 L1663.33 1211.17 L1663.92 1211.17 L1664.5 1211.17 L1665.09 1211.17 L1665.68 1211.17 L1666.26 1211.17 L1666.85 1211.17 L1667.44 1211.17 L1668.02 1211.17 L1668.61 1211.17 L1669.2 1211.17 L1669.78 1211.17 L1670.37 1211.17 L1670.96 1211.17 L1671.54 1211.17 L1672.13 1211.17 L1672.71 1211.17 L1673.3 1211.17 L1673.89 1211.17 L1674.47 1211.17 L1675.06 1211.17 L1675.65 1211.17 L1676.23 1211.17 L1676.82 1211.17 L1677.41 1211.17 L1677.99 1211.17 L1678.58 1211.17 L1679.17 1211.17 L1679.75 1211.17 L1680.34 1211.17 L1680.92 1211.17 L1681.51 1211.17 L1682.1 1211.17 L1682.68 1211.17 L1683.27 1211.17 L1683.86 1211.17 L1684.44 1211.17 L1685.03 1211.17 L1685.62 1211.17 L1686.2 1211.17 L1686.79 1211.17 L1687.37 1211.17 L1687.96 1211.17 L1688.55 1211.17 L1689.13 1211.17 L1689.72 1211.17 L1690.31 1211.17 L1690.89 1211.17 L1691.48 1211.17 L1692.07 1211.17 L1692.65 1211.17 L1693.24 1211.17 L1693.83 1211.17 L1694.41 1211.17 L1695 1211.17 L1695.58 1211.17 L1696.17 1211.17 L1696.76 1211.17 L1697.34 1211.17 L1697.93 1211.17 L1698.52 1211.17 L1699.1 1211.17 L1699.69 1211.17 L1700.28 1211.17 L1700.86 1211.17 L1701.45 1211.17 L1702.04 1211.17 L1702.62 1211.17 L1703.21 1211.17 L1703.79 1211.17 L1704.38 1211.17 L1704.97 1211.17 L1705.55 1211.17 L1706.14 1211.17 L1706.73 1211.17 L1707.31 1211.17 L1707.9 1211.17 L1708.49 1211.17 L1709.07 1211.17 L1709.66 1211.17 L1710.24 1211.17 L1710.83 1211.17 L1711.42 1211.17 L1712 1211.17 L1712.59 1211.17 L1713.18 1211.17 L1713.76 1211.17 L1714.35 1211.17 L1714.94 1211.17 L1715.52 1211.17 L1716.11 1211.17 L1716.7 1211.17 L1717.28 1211.17 L1717.87 1211.17 L1718.45 1211.17 L1719.04 1211.17 L1719.63 1211.17 L1720.21 1211.17 L1720.8 1211.17 L1721.39 1211.17 L1721.97 1211.17 L1722.56 1211.17 L1723.15 1211.17 L1723.73 1211.17 L1724.32 1211.17 L1724.91 1211.17 L1725.49 1211.17 L1726.08 1211.17 L1726.66 1211.17 L1727.25 1211.17 L1727.84 1211.17 L1728.42 1211.17 L1729.01 1211.17 L1729.6 1211.17 L1730.18 1211.17 L1730.77 1211.17 L1731.36 1211.17 L1731.94 1211.17 L1732.53 1211.17 L1733.11 1211.17 L1733.7 1211.17 L1734.29 1211.17 L1734.87 1211.17 L1735.46 1211.17 L1736.05 1211.17 L1736.63 1211.17 L1737.22 1211.17 L1737.81 1211.17 L1738.39 1211.17 L1738.98 1211.17 L1739.57 1211.17 L1740.15 1211.17 L1740.74 1211.17 L1741.32 1211.17 L1741.91 1211.17 L1742.5 1211.17 L1743.08 1211.17 L1743.67 1211.17 L1744.26 1211.17 L1744.84 1211.17 L1745.43 1211.17 L1746.02 1211.17 L1746.6 1211.17 L1747.19 1211.17 L1747.78 1211.17 L1748.36 1211.17 L1748.95 1211.17 L1749.53 1211.17 L1750.12 1211.17 L1750.71 1211.17 L1751.29 1211.17 L1751.88 1211.17 L1752.47 1211.17 L1753.05 1211.17 L1753.64 1211.17 L1754.23 1211.17 L1754.81 1211.17 L1755.4 1211.17 L1755.99 1211.17 L1756.57 1211.17 L1757.16 1211.17 L1757.74 1211.17 L1758.33 1211.17 L1758.92 1211.17 L1759.5 1211.17 L1760.09 1211.17 L1760.68 1211.17 L1761.26 1211.17 L1761.85 1211.17 L1762.44 1211.17 L1763.02 1211.17 L1763.61 1211.17 L1764.19 1211.17 L1764.78 1211.17 L1765.37 1211.17 L1765.95 1211.17 L1766.54 1211.17 L1767.13 1211.17 L1767.71 1211.17 L1768.3 1211.17 L1768.89 1211.17 L1769.47 1211.17 L1770.06 1211.17 L1770.65 1211.17 L1771.23 1211.17 L1771.82 1211.17 L1772.4 1211.17 L1772.99 1211.17 L1773.58 1211.17 L1774.16 1211.17 L1774.75 1211.17 L1775.34 1211.17 L1775.92 1211.17 L1776.51 1211.17 L1777.1 1211.17 L1777.68 1211.17 L1778.27 1211.17 L1778.86 1211.17 L1779.44 1211.17 L1780.03 1211.17 L1780.61 1211.17 L1781.2 1211.17 L1781.79 1211.17 L1782.37 1211.17 L1782.96 1211.17 L1783.55 1211.17 L1784.13 1211.17 L1784.72 1211.17 L1785.31 1211.17 L1785.89 1211.17 L1786.48 1211.17 L1787.06 1211.17 L1787.65 1211.17 L1788.24 1211.17 L1788.82 1211.17 L1789.41 1211.17 L1790 1211.17 L1790.58 1211.17 L1791.17 1211.17 L1791.76 1211.17 L1792.34 1211.17 L1792.93 1211.17 L1793.52 1211.17 L1794.1 1211.17 L1794.69 1211.17 L1795.27 1211.17 L1795.86 1211.17 L1796.45 1211.17 L1797.03 1211.17 L1797.62 1211.17 L1798.21 1211.17 L1798.79 1211.17 L1799.38 1211.17 L1799.97 1211.17 L1800.55 1211.17 L1801.14 1211.17 L1801.73 1211.17 L1802.31 1211.17 L1802.9 1211.17 L1803.48 1211.17 L1804.07 1211.17 L1804.66 1211.17 L1805.24 1211.17 L1805.83 1211.17 L1806.42 1211.17 L1807 1211.17 L1807.59 1211.17 L1808.18 1211.17 L1808.76 1211.17 L1809.35 1211.17 L1809.94 1211.17 L1810.52 1211.17 L1811.11 1211.17 L1811.69 1211.17 L1812.28 1211.17 L1812.87 1211.17 L1813.45 1211.17 L1814.04 1211.17 L1814.63 1211.17 L1815.21 1211.17 L1815.8 1211.17 L1816.39 1211.17 L1816.97 1211.17 L1817.56 1211.17 L1818.14 1211.17 L1818.73 1211.17 L1819.32 1211.17 L1819.9 1211.17 L1820.49 1211.17 L1821.08 1211.17 L1821.66 1211.17 L1822.25 1211.17 L1822.84 1211.17 L1823.42 1211.17 L1824.01 1211.17 L1824.6 1211.17 L1825.18 1211.17 L1825.77 1211.17 L1826.35 1211.17 L1826.94 1211.17 L1827.53 1211.17 L1828.11 1211.17 L1828.7 1211.17 L1829.29 1211.17 L1829.87 1211.17 L1830.46 1211.17 L1831.05 1211.17 L1831.63 1211.17 L1832.22 1211.17 L1832.81 1211.17 L1833.39 1211.17 L1833.98 1211.17 L1834.56 1211.17 L1835.15 1211.17 L1835.74 1211.17 L1836.32 1211.17 L1836.91 1211.17 L1837.5 1211.17 L1838.08 1211.17 L1838.67 1211.17 L1839.26 1211.17 L1839.84 1211.17 L1840.43 1211.17 L1841.01 1211.17 L1841.6 1211.17 L1842.19 1211.17 L1842.77 1211.17 L1843.36 1211.17 L1843.95 1211.17 L1844.53 1211.17 L1845.12 1211.17 L1845.71 1211.17 L1846.29 1211.17 L1846.88 1211.17 L1847.47 1211.17 L1848.05 1211.17 L1848.64 1211.17 L1849.22 1211.17 L1849.81 1211.17 L1850.4 1211.17 L1850.98 1211.17 L1851.57 1211.17 L1852.16 1211.17 L1852.74 1211.17 L1853.33 1211.17 L1853.92 1211.17 L1854.5 1211.17 L1855.09 1211.17 L1855.68 1211.17 L1856.26 1211.17 L1856.85 1211.17 L1857.43 1211.17 L1858.02 1211.17 L1858.61 1211.17 L1859.19 1211.17 L1859.78 1211.17 L1860.37 1211.17 L1860.95 1211.17 L1861.54 1211.17 L1862.13 1211.17 L1862.71 1211.17 L1863.3 1211.17 L1863.88 1211.17 L1864.47 1211.17 L1865.06 1211.17 L1865.64 1211.17 L1866.23 1211.17 L1866.82 1211.17 L1867.4 1211.17 L1867.99 1211.17 L1868.58 1211.17 L1869.16 1211.17 L1869.75 1211.17 L1870.34 1211.17 L1870.92 1211.17 L1871.51 1211.17 L1872.09 1211.17 L1872.68 1211.17 L1873.27 1211.17 L1873.85 1211.17 L1874.44 1211.17 L1875.03 1211.17 L1875.61 1211.17 L1876.2 1211.17 L1876.79 1211.17 L1877.37 1211.17 L1877.96 1211.17 L1878.55 1211.17 L1879.13 1211.17 L1879.72 1211.17 L1880.3 1211.17 L1880.89 1211.17 L1881.48 1211.17 L1882.06 1211.17 L1882.65 1211.17 L1883.24 1211.17 L1883.82 1211.17 L1884.41 1211.17 L1885 1211.17 L1885.58 1211.17 L1886.17 1211.17 L1886.76 1211.17 L1887.34 1211.17 L1887.93 1211.17 L1888.51 1211.17 L1889.1 1211.17 L1889.69 1211.17 L1890.27 1211.17 L1890.86 1211.17 L1891.45 1211.17 L1892.03 1211.17 L1892.62 1211.17 L1893.21 1211.17 L1893.79 1211.17 L1894.38 1211.17 L1894.96 1211.17 L1895.55 1211.17 L1896.14 1211.17 L1896.72 1211.17 L1897.31 1211.17 L1897.9 1211.17 L1898.48 1211.17 L1899.07 1211.17 L1899.66 1211.17 L1900.24 1211.17 L1900.83 1211.17 L1901.42 1211.17 L1902 1211.17 L1902.59 1211.17 L1903.17 1211.17 L1903.76 1211.17 L1904.35 1211.17 L1904.93 1211.17 L1905.52 1211.17 L1906.11 1211.17 L1906.69 1211.17 L1907.28 1211.17 L1907.87 1211.17 L1908.45 1211.17 L1909.04 1211.17 L1909.63 1211.17 L1910.21 1211.17 L1910.8 1211.17 L1911.38 1211.17 L1911.97 1211.17 L1912.56 1211.17 L1913.14 1211.17 L1913.73 1211.17 L1914.32 1211.17 L1914.9 1211.17 L1915.49 1211.17 L1916.08 1211.17 L1916.66 1211.17 L1917.25 1211.17 L1917.83 1211.17 L1918.42 1211.17 L1919.01 1211.17 L1919.59 1211.17 L1920.18 1211.17 L1920.77 1211.17 L1921.35 1211.17 L1921.94 1211.17 L1922.53 1211.17 L1923.11 1211.17 L1923.7 1211.17 L1924.29 1211.17 L1924.87 1211.17 L1925.46 1211.17 L1926.04 1211.17 L1926.63 1211.17 L1927.22 1211.17 L1927.8 1211.17 L1928.39 1211.17 L1928.98 1211.17 L1929.56 1211.17 L1930.15 1211.17 L1930.74 1211.17 L1931.32 1211.17 L1931.91 1211.17 L1932.5 1211.17 L1933.08 1211.17 L1933.67 1211.17 L1934.25 1211.17 L1934.84 1211.17 L1935.43 1211.17 L1936.01 1211.17 L1936.6 1211.17 L1937.19 1211.17 L1937.77 1211.17 L1938.36 1211.17 L1938.95 1211.17 L1939.53 1211.17 L1940.12 1211.17 L1940.71 1211.17 L1941.29 1211.17 L1941.88 1211.17 L1942.46 1211.17 L1943.05 1211.17 L1943.64 1211.17 L1944.22 1211.17 L1944.81 1211.17 L1945.4 1211.17 L1945.98 1211.17 L1946.57 1211.17 L1947.16 1211.17 L1947.74 1211.17 L1948.33 1211.17 L1948.91 1211.17 L1949.5 1211.17 L1950.09 1211.17 L1950.67 1211.17 L1951.26 1211.17 L1951.85 1211.17 L1952.43 1211.17 L1953.02 1211.17 L1953.61 1211.17 L1954.19 1211.17 L1954.78 1211.17 L1955.37 1211.17 L1955.95 1211.17 L1956.54 1211.17 L1957.12 1211.17 L1957.71 1211.17 L1958.3 1211.17 L1958.88 1211.17 L1959.47 1211.17 L1960.06 1211.17 L1960.64 1211.17 L1961.23 1211.17 L1961.82 1211.17 L1962.4 1211.17 L1962.99 1211.17 L1963.58 1211.17 L1964.16 1211.17 L1964.75 1211.17 L1965.33 1211.17 L1965.92 1211.17 L1966.51 1211.17 L1967.09 1211.17 L1967.68 1211.17 L1968.27 1211.17 L1968.85 1211.17 L1969.44 1211.17 L1970.03 1211.17 L1970.61 1211.17 L1971.2 1211.17 L1971.78 1211.17 L1972.37 1211.17 L1972.96 1211.17 L1973.54 1211.17 L1974.13 1211.17 L1974.72 1211.17 L1975.3 1211.17 L1975.89 1211.17 L1976.48 1211.17 L1977.06 1211.17 L1977.65 1211.17 L1978.24 1211.17 L1978.82 1211.17 L1979.41 1211.17 L1979.99 1211.17 L1980.58 1211.17 L1981.17 1211.17 L1981.75 1211.17 L1982.34 1211.17 L1982.93 1211.17 L1983.51 1211.17 L1984.1 1211.17 L1984.69 1211.17 L1985.27 1211.17 L1985.86 1211.17 L1986.45 1211.17 L1987.03 1211.17 L1987.62 1211.17 L1988.2 1211.17 L1988.79 1211.17 L1989.38 1211.17 L1989.96 1211.17 L1990.55 1211.17 L1991.14 1211.17 L1991.72 1211.17 L1992.31 1211.17 L1992.9 1211.17 L1993.48 1211.17 L1994.07 1211.17 L1994.65 1211.17 L1995.24 1211.17 L1995.83 1211.17 L1996.41 1211.17 L1997 1211.17 L1997.59 1211.17 L1998.17 1211.17 L1998.76 1211.17 L1999.35 1211.17 L1999.93 1211.17 L2000.52 1211.17 L2001.11 1211.17 L2001.69 1211.17 L2002.28 1211.17 L2002.86 1211.17 L2003.45 1211.17 L2004.04 1211.17 L2004.62 1211.17 L2005.21 1211.17 L2005.8 1211.17 L2006.38 1211.17 L2006.97 1211.17 L2007.56 1211.17 L2008.14 1211.17 L2008.73 1211.17 L2009.32 1211.17 L2009.9 1211.17 L2010.49 1211.17 L2011.07 1211.17 L2011.66 1211.17 L2012.25 1211.17 L2012.83 1211.17 L2013.42 1211.17 L2014.01 1211.17 L2014.59 1211.17 L2015.18 1211.17 L2015.77 1211.17 L2016.35 1211.17 L2016.94 1211.17 L2017.53 1211.17 L2018.11 1211.17 L2018.7 1211.17 L2019.28 1211.17 L2019.87 1211.17 L2020.46 1211.17 L2021.04 1211.17 L2021.63 1211.17 L2022.22 1211.17 L2022.8 1211.17 L2023.39 1211.17 L2023.98 1211.17 L2024.56 1211.17 L2025.15 1211.17 L2025.73 1211.17 L2026.32 1211.17 L2026.91 1211.17 L2027.49 1211.17 L2028.08 1211.17 L2028.67 1211.17 L2029.25 1211.17 L2029.84 1211.17 L2030.43 1211.17 L2031.01 1211.17 L2031.6 1211.17 L2032.19 1211.17 L2032.77 1211.17 L2033.36 1211.17 L2033.94 1211.17 L2034.53 1211.17 L2035.12 1211.17 L2035.7 1211.17 L2036.29 1211.17 L2036.88 1211.17 L2037.46 1211.17 L2038.05 1211.17 L2038.64 1211.17 L2039.22 1211.17 L2039.81 1211.17 L2040.4 1211.17 L2040.98 1211.17 L2041.57 1211.17 L2042.15 1211.17 L2042.74 1211.17 L2043.33 1211.17 L2043.91 1211.17 L2044.5 1211.17 L2045.09 1211.17 L2045.67 1211.17 L2046.26 1211.17 L2046.85 1211.17 L2047.43 1211.17 L2048.02 1211.17 L2048.6 1211.17 L2049.19 1211.17 L2049.78 1211.17 L2050.36 1211.17 L2050.95 1211.17 L2051.54 1211.17 L2052.12 1211.17 L2052.71 1211.17 L2053.3 1211.17 L2053.88 1211.17 L2054.47 1211.17 L2055.06 1211.17 L2055.64 1211.17 L2056.23 1211.17 L2056.81 1211.17 L2057.4 1211.17 L2057.99 1211.17 L2058.57 1211.17 L2059.16 1211.17 L2059.75 1211.17 L2060.33 1211.17 L2060.92 1211.17 L2061.51 1211.17 L2062.09 1211.17 L2062.68 1211.17 L2063.27 1211.17 L2063.85 1211.17 L2064.44 1211.17 L2065.02 1211.17 L2065.61 1211.17 L2066.2 1211.17 L2066.78 1211.17 L2067.37 1211.17 L2067.96 1211.17 L2068.54 1211.17 L2069.13 1211.17 L2069.72 1211.17 L2070.3 1211.17 L2070.89 1211.17 L2071.48 1211.17 L2072.06 1211.17 L2072.65 1211.17 L2073.23 1211.17 L2073.82 1211.17 L2074.41 1211.17 L2074.99 1211.17 L2075.58 1211.17 L2076.17 1211.17 L2076.75 1211.17 L2077.34 1211.17 L2077.93 1211.17 L2078.51 1211.17 L2079.1 1211.17 L2079.68 1211.17 L2080.27 1211.17 L2080.86 1211.17 L2081.44 1211.17 L2082.03 1211.17 L2082.62 1211.17 L2083.2 1211.17 L2083.79 1211.17 L2084.38 1211.17 L2084.96 1211.17 L2085.55 1211.17 L2086.14 1211.17 L2086.72 1211.17 L2087.31 1211.17 L2087.89 1211.17 L2088.48 1211.17 L2089.07 1211.17 L2089.65 1211.17 L2090.24 1211.17 L2090.83 1211.17 L2091.41 1211.17 L2092 1211.17 L2092.59 1211.17 L2093.17 1211.17 L2093.76 1211.17 L2094.35 1211.17 L2094.93 1211.17 L2095.52 1211.17 L2096.1 1211.17 L2096.69 1211.17 L2097.28 1211.17 L2097.86 1211.17 L2098.45 1211.17 L2099.04 1211.17 L2099.62 1211.17 L2100.21 1211.17 L2100.8 1211.17 L2101.38 1211.17 L2101.97 1211.17 L2102.55 1211.17 L2103.14 1211.17 L2103.73 1211.17 L2104.31 1211.17 L2104.9 1211.17 L2105.49 1211.17 L2106.07 1211.17 L2106.66 1211.17 L2107.25 1211.17 L2107.83 1211.17 L2108.42 1211.17 L2109.01 1211.17 L2109.59 1211.17 L2110.18 1211.17 L2110.76 1211.17 L2111.35 1211.17 L2111.94 1211.17 L2112.52 1211.17 L2113.11 1211.17 L2113.7 1211.17 L2114.28 1211.17 L2114.87 1211.17 L2115.46 1211.17 L2116.04 1211.17 L2116.63 1211.17 L2117.22 1211.17 L2117.8 1211.17 L2118.39 1211.17 L2118.97 1211.17 L2119.56 1211.17 L2120.15 1211.17 L2120.73 1211.17 L2121.32 1211.17 L2121.91 1211.17 L2122.49 1211.17 L2123.08 1211.17 L2123.67 1211.17 L2124.25 1211.17 L2124.84 1211.17 L2125.42 1211.17 L2126.01 1211.17 L2126.6 1211.17 L2127.18 1211.17 L2127.77 1211.17 L2128.36 1211.17 L2128.94 1211.17 L2129.53 1211.17 L2130.12 1211.17 L2130.7 1211.17 L2131.29 1211.17 L2131.88 1211.17 L2132.46 1211.17 L2133.05 1211.17 L2133.63 1211.17 L2134.22 1211.17 L2134.81 1211.17 L2135.39 1211.17 L2135.98 1211.17 L2136.57 1211.17 L2137.15 1211.17 L2137.74 1211.17 L2138.33 1211.17 L2138.91 1211.17 L2139.5 1211.17 L2140.09 1211.17 L2140.67 1211.17 L2141.26 1211.17 L2141.84 1211.17 L2142.43 1211.17 L2143.02 1211.17 L2143.6 1211.17 L2144.19 1211.17 L2144.78 1211.17 L2145.36 1211.17 L2145.95 1211.17 L2146.54 1211.17 L2147.12 1211.17 L2147.71 1211.17 L2148.3 1211.17 L2148.88 1211.17 L2149.47 1211.17 L2150.05 1211.17 L2150.64 1211.17 L2151.23 1211.17 L2151.81 1211.17 L2152.4 1211.17 L2152.99 1211.17 L2153.57 1211.17 L2154.16 1211.17 L2154.75 1211.17 L2155.33 1211.17 L2155.92 1211.17 L2156.5 1211.17 L2157.09 1211.17 L2157.68 1211.17 L2158.26 1211.17 L2158.26 1211.06 L2157.68 1211.06 L2157.09 1211.06 L2156.5 1211.06 L2155.92 1211.06 L2155.33 1211.06 L2154.75 1211.06 L2154.16 1211.06 L2153.57 1211.06 L2152.99 1211.06 L2152.4 1211.06 L2151.81 1211.06 L2151.23 1211.06 L2150.64 1211.06 L2150.05 1211.06 L2149.47 1211.06 L2148.88 1211.06 L2148.3 1211.06 L2147.71 1211.06 L2147.12 1211.06 L2146.54 1211.06 L2145.95 1211.06 L2145.36 1211.06 L2144.78 1211.06 L2144.19 1211.06 L2143.6 1211.06 L2143.02 1211.06 L2142.43 1211.06 L2141.84 1211.06 L2141.26 1211.06 L2140.67 1211.06 L2140.09 1211.06 L2139.5 1211.06 L2138.91 1211.06 L2138.33 1211.06 L2137.74 1211.06 L2137.15 1211.06 L2136.57 1211.06 L2135.98 1211.06 L2135.39 1211.06 L2134.81 1211.06 L2134.22 1211.06 L2133.63 1211.06 L2133.05 1211.06 L2132.46 1211.06 L2131.88 1211.06 L2131.29 1211.06 L2130.7 1211.06 L2130.12 1211.06 L2129.53 1211.06 L2128.94 1211.06 L2128.36 1211.06 L2127.77 1211.06 L2127.18 1211.06 L2126.6 1211.06 L2126.01 1211.06 L2125.42 1211.06 L2124.84 1211.06 L2124.25 1211.06 L2123.67 1211.06 L2123.08 1211.06 L2122.49 1211.06 L2121.91 1211.06 L2121.32 1211.06 L2120.73 1211.06 L2120.15 1211.06 L2119.56 1211.06 L2118.97 1211.06 L2118.39 1211.06 L2117.8 1211.06 L2117.22 1211.06 L2116.63 1211.06 L2116.04 1211.06 L2115.46 1211.06 L2114.87 1211.06 L2114.28 1211.06 L2113.7 1211.06 L2113.11 1211.06 L2112.52 1211.06 L2111.94 1211.06 L2111.35 1211.06 L2110.76 1211.06 L2110.18 1211.06 L2109.59 1211.06 L2109.01 1211.06 L2108.42 1211.06 L2107.83 1211.06 L2107.25 1211.06 L2106.66 1211.06 L2106.07 1211.06 L2105.49 1211.06 L2104.9 1211.06 L2104.31 1211.06 L2103.73 1211.06 L2103.14 1211.06 L2102.55 1211.06 L2101.97 1211.06 L2101.38 1211.06 L2100.8 1211.06 L2100.21 1211.06 L2099.62 1211.06 L2099.04 1211.06 L2098.45 1211.06 L2097.86 1211.06 L2097.28 1211.06 L2096.69 1211.06 L2096.1 1211.06 L2095.52 1211.06 L2094.93 1211.06 L2094.35 1211.06 L2093.76 1211.06 L2093.17 1211.06 L2092.59 1211.06 L2092 1211.06 L2091.41 1211.06 L2090.83 1211.06 L2090.24 1211.06 L2089.65 1211.06 L2089.07 1211.06 L2088.48 1211.06 L2087.89 1211.06 L2087.31 1211.06 L2086.72 1211.06 L2086.14 1211.06 L2085.55 1211.06 L2084.96 1211.06 L2084.38 1211.06 L2083.79 1211.06 L2083.2 1211.06 L2082.62 1211.06 L2082.03 1211.06 L2081.44 1211.06 L2080.86 1211.06 L2080.27 1211.06 L2079.68 1211.06 L2079.1 1211.06 L2078.51 1211.06 L2077.93 1211.06 L2077.34 1211.06 L2076.75 1211.06 L2076.17 1211.06 L2075.58 1211.06 L2074.99 1211.06 L2074.41 1211.06 L2073.82 1211.06 L2073.23 1211.06 L2072.65 1211.06 L2072.06 1211.06 L2071.48 1211.06 L2070.89 1211.06 L2070.3 1211.06 L2069.72 1211.06 L2069.13 1211.06 L2068.54 1211.06 L2067.96 1211.06 L2067.37 1211.06 L2066.78 1211.06 L2066.2 1211.06 L2065.61 1211.06 L2065.02 1211.06 L2064.44 1211.06 L2063.85 1211.06 L2063.27 1211.06 L2062.68 1211.06 L2062.09 1211.06 L2061.51 1211.06 L2060.92 1211.06 L2060.33 1211.06 L2059.75 1211.06 L2059.16 1211.06 L2058.57 1211.06 L2057.99 1211.06 L2057.4 1211.06 L2056.81 1211.06 L2056.23 1211.06 L2055.64 1211.06 L2055.06 1211.06 L2054.47 1211.06 L2053.88 1211.06 L2053.3 1211.06 L2052.71 1211.06 L2052.12 1211.06 L2051.54 1211.06 L2050.95 1211.06 L2050.36 1211.06 L2049.78 1211.06 L2049.19 1211.06 L2048.6 1211.06 L2048.02 1211.06 L2047.43 1211.06 L2046.85 1211.06 L2046.26 1211.06 L2045.67 1211.06 L2045.09 1211.06 L2044.5 1211.06 L2043.91 1211.06 L2043.33 1211.06 L2042.74 1211.06 L2042.15 1211.06 L2041.57 1211.06 L2040.98 1211.06 L2040.4 1211.06 L2039.81 1211.06 L2039.22 1211.06 L2038.64 1211.06 L2038.05 1211.06 L2037.46 1211.06 L2036.88 1211.06 L2036.29 1211.06 L2035.7 1211.06 L2035.12 1211.06 L2034.53 1211.06 L2033.94 1211.06 L2033.36 1211.06 L2032.77 1211.06 L2032.19 1211.06 L2031.6 1211.06 L2031.01 1211.06 L2030.43 1211.06 L2029.84 1211.06 L2029.25 1211.06 L2028.67 1211.06 L2028.08 1211.06 L2027.49 1211.06 L2026.91 1211.06 L2026.32 1211.06 L2025.73 1211.06 L2025.15 1211.06 L2024.56 1211.06 L2023.98 1211.06 L2023.39 1211.06 L2022.8 1211.06 L2022.22 1211.06 L2021.63 1211.06 L2021.04 1211.06 L2020.46 1211.06 L2019.87 1211.06 L2019.28 1211.06 L2018.7 1211.06 L2018.11 1211.06 L2017.53 1211.06 L2016.94 1211.06 L2016.35 1211.06 L2015.77 1211.06 L2015.18 1211.06 L2014.59 1211.06 L2014.01 1211.06 L2013.42 1211.06 L2012.83 1211.06 L2012.25 1211.06 L2011.66 1211.06 L2011.07 1211.06 L2010.49 1211.06 L2009.9 1211.06 L2009.32 1211.06 L2008.73 1211.06 L2008.14 1211.06 L2007.56 1211.06 L2006.97 1211.06 L2006.38 1211.06 L2005.8 1211.06 L2005.21 1211.06 L2004.62 1211.06 L2004.04 1211.06 L2003.45 1211.06 L2002.86 1211.06 L2002.28 1211.06 L2001.69 1211.06 L2001.11 1211.06 L2000.52 1211.06 L1999.93 1211.06 L1999.35 1211.06 L1998.76 1211.06 L1998.17 1211.06 L1997.59 1211.06 L1997 1211.06 L1996.41 1211.06 L1995.83 1211.06 L1995.24 1211.06 L1994.65 1211.06 L1994.07 1211.06 L1993.48 1211.06 L1992.9 1211.06 L1992.31 1211.06 L1991.72 1211.06 L1991.14 1211.06 L1990.55 1211.06 L1989.96 1211.06 L1989.38 1211.06 L1988.79 1211.06 L1988.2 1211.06 L1987.62 1211.06 L1987.03 1211.06 L1986.45 1211.06 L1985.86 1211.06 L1985.27 1211.06 L1984.69 1211.06 L1984.1 1211.06 L1983.51 1211.06 L1982.93 1211.06 L1982.34 1211.06 L1981.75 1211.06 L1981.17 1211.06 L1980.58 1211.06 L1979.99 1211.06 L1979.41 1211.06 L1978.82 1211.06 L1978.24 1211.06 L1977.65 1211.06 L1977.06 1211.06 L1976.48 1211.06 L1975.89 1211.06 L1975.3 1211.06 L1974.72 1211.06 L1974.13 1211.06 L1973.54 1211.06 L1972.96 1211.06 L1972.37 1211.06 L1971.78 1211.06 L1971.2 1211.06 L1970.61 1211.06 L1970.03 1211.06 L1969.44 1211.06 L1968.85 1211.06 L1968.27 1211.06 L1967.68 1211.06 L1967.09 1211.06 L1966.51 1211.06 L1965.92 1211.06 L1965.33 1211.06 L1964.75 1211.06 L1964.16 1211.06 L1963.58 1211.06 L1962.99 1211.06 L1962.4 1211.06 L1961.82 1211.06 L1961.23 1211.06 L1960.64 1211.06 L1960.06 1211.06 L1959.47 1211.06 L1958.88 1211.06 L1958.3 1211.06 L1957.71 1211.06 L1957.12 1211.06 L1956.54 1211.06 L1955.95 1211.06 L1955.37 1211.06 L1954.78 1211.06 L1954.19 1211.06 L1953.61 1211.06 L1953.02 1211.06 L1952.43 1211.06 L1951.85 1211.06 L1951.26 1211.06 L1950.67 1211.06 L1950.09 1211.06 L1949.5 1211.06 L1948.91 1211.06 L1948.33 1211.06 L1947.74 1211.06 L1947.16 1211.06 L1946.57 1211.06 L1945.98 1211.06 L1945.4 1211.06 L1944.81 1211.06 L1944.22 1211.06 L1943.64 1211.06 L1943.05 1211.06 L1942.46 1211.06 L1941.88 1211.06 L1941.29 1211.06 L1940.71 1211.06 L1940.12 1211.06 L1939.53 1211.06 L1938.95 1211.06 L1938.36 1211.06 L1937.77 1211.06 L1937.19 1211.06 L1936.6 1211.06 L1936.01 1211.06 L1935.43 1211.06 L1934.84 1211.06 L1934.25 1211.06 L1933.67 1211.06 L1933.08 1211.06 L1932.5 1211.06 L1931.91 1211.06 L1931.32 1211.06 L1930.74 1211.06 L1930.15 1211.06 L1929.56 1211.06 L1928.98 1211.06 L1928.39 1211.06 L1927.8 1211.06 L1927.22 1211.06 L1926.63 1211.06 L1926.04 1211.06 L1925.46 1211.06 L1924.87 1211.06 L1924.29 1211.06 L1923.7 1211.06 L1923.11 1211.06 L1922.53 1211.06 L1921.94 1211.06 L1921.35 1211.06 L1920.77 1211.06 L1920.18 1211.06 L1919.59 1211.06 L1919.01 1211.06 L1918.42 1211.06 L1917.83 1211.06 L1917.25 1211.06 L1916.66 1211.06 L1916.08 1211.06 L1915.49 1211.06 L1914.9 1211.06 L1914.32 1211.06 L1913.73 1211.06 L1913.14 1211.06 L1912.56 1211.06 L1911.97 1211.06 L1911.38 1211.06 L1910.8 1211.06 L1910.21 1211.06 L1909.63 1211.06 L1909.04 1211.06 L1908.45 1211.06 L1907.87 1211.06 L1907.28 1211.06 L1906.69 1211.06 L1906.11 1211.06 L1905.52 1211.06 L1904.93 1211.06 L1904.35 1211.06 L1903.76 1211.06 L1903.17 1211.06 L1902.59 1211.06 L1902 1211.06 L1901.42 1211.06 L1900.83 1211.06 L1900.24 1211.06 L1899.66 1211.06 L1899.07 1211.06 L1898.48 1211.06 L1897.9 1211.06 L1897.31 1211.06 L1896.72 1211.06 L1896.14 1211.06 L1895.55 1211.06 L1894.96 1211.06 L1894.38 1211.06 L1893.79 1211.06 L1893.21 1211.06 L1892.62 1211.06 L1892.03 1211.06 L1891.45 1211.06 L1890.86 1211.06 L1890.27 1211.06 L1889.69 1211.06 L1889.1 1211.06 L1888.51 1211.06 L1887.93 1211.06 L1887.34 1211.06 L1886.76 1211.06 L1886.17 1211.06 L1885.58 1211.06 L1885 1211.06 L1884.41 1211.06 L1883.82 1211.06 L1883.24 1211.06 L1882.65 1211.06 L1882.06 1211.06 L1881.48 1211.06 L1880.89 1211.06 L1880.3 1211.06 L1879.72 1211.06 L1879.13 1211.06 L1878.55 1211.06 L1877.96 1211.06 L1877.37 1211.06 L1876.79 1211.06 L1876.2 1211.06 L1875.61 1211.06 L1875.03 1211.06 L1874.44 1211.06 L1873.85 1211.06 L1873.27 1211.06 L1872.68 1211.06 L1872.09 1211.06 L1871.51 1211.06 L1870.92 1211.06 L1870.34 1211.06 L1869.75 1211.06 L1869.16 1211.06 L1868.58 1211.06 L1867.99 1211.06 L1867.4 1211.06 L1866.82 1211.06 L1866.23 1211.06 L1865.64 1211.06 L1865.06 1211.06 L1864.47 1211.06 L1863.88 1211.06 L1863.3 1211.06 L1862.71 1211.06 L1862.13 1211.06 L1861.54 1211.06 L1860.95 1211.06 L1860.37 1211.06 L1859.78 1211.06 L1859.19 1211.06 L1858.61 1211.06 L1858.02 1211.06 L1857.43 1211.06 L1856.85 1211.06 L1856.26 1211.06 L1855.68 1211.06 L1855.09 1211.06 L1854.5 1211.06 L1853.92 1211.06 L1853.33 1211.06 L1852.74 1211.06 L1852.16 1211.06 L1851.57 1211.06 L1850.98 1211.06 L1850.4 1211.06 L1849.81 1211.06 L1849.22 1211.06 L1848.64 1211.06 L1848.05 1211.06 L1847.47 1211.06 L1846.88 1211.06 L1846.29 1211.06 L1845.71 1211.06 L1845.12 1211.06 L1844.53 1211.06 L1843.95 1211.06 L1843.36 1211.06 L1842.77 1211.06 L1842.19 1211.06 L1841.6 1211.06 L1841.01 1211.06 L1840.43 1211.06 L1839.84 1211.06 L1839.26 1211.06 L1838.67 1211.06 L1838.08 1211.06 L1837.5 1211.06 L1836.91 1211.06 L1836.32 1211.06 L1835.74 1211.06 L1835.15 1211.06 L1834.56 1211.06 L1833.98 1211.06 L1833.39 1211.06 L1832.81 1211.06 L1832.22 1211.06 L1831.63 1211.06 L1831.05 1211.06 L1830.46 1211.06 L1829.87 1211.06 L1829.29 1211.06 L1828.7 1211.06 L1828.11 1211.06 L1827.53 1211.06 L1826.94 1211.06 L1826.35 1211.06 L1825.77 1211.06 L1825.18 1211.06 L1824.6 1211.06 L1824.01 1211.06 L1823.42 1211.06 L1822.84 1211.06 L1822.25 1211.06 L1821.66 1211.06 L1821.08 1211.06 L1820.49 1211.06 L1819.9 1211.06 L1819.32 1211.06 L1818.73 1211.06 L1818.14 1211.06 L1817.56 1211.06 L1816.97 1211.06 L1816.39 1211.06 L1815.8 1211.06 L1815.21 1211.06 L1814.63 1211.06 L1814.04 1211.06 L1813.45 1211.06 L1812.87 1211.06 L1812.28 1211.06 L1811.69 1211.06 L1811.11 1211.06 L1810.52 1211.06 L1809.94 1211.06 L1809.35 1211.06 L1808.76 1211.06 L1808.18 1211.06 L1807.59 1211.06 L1807 1211.06 L1806.42 1211.06 L1805.83 1211.06 L1805.24 1211.06 L1804.66 1211.06 L1804.07 1211.06 L1803.48 1211.06 L1802.9 1211.06 L1802.31 1211.06 L1801.73 1211.06 L1801.14 1211.06 L1800.55 1211.06 L1799.97 1211.06 L1799.38 1211.06 L1798.79 1211.06 L1798.21 1211.06 L1797.62 1211.06 L1797.03 1211.06 L1796.45 1211.06 L1795.86 1211.06 L1795.27 1211.06 L1794.69 1211.06 L1794.1 1211.06 L1793.52 1211.06 L1792.93 1211.06 L1792.34 1211.06 L1791.76 1211.06 L1791.17 1211.06 L1790.58 1211.06 L1790 1211.06 L1789.41 1211.06 L1788.82 1211.06 L1788.24 1211.06 L1787.65 1211.06 L1787.06 1211.06 L1786.48 1211.06 L1785.89 1211.06 L1785.31 1211.06 L1784.72 1211.06 L1784.13 1211.06 L1783.55 1211.06 L1782.96 1211.06 L1782.37 1211.06 L1781.79 1211.06 L1781.2 1211.06 L1780.61 1211.06 L1780.03 1211.06 L1779.44 1211.06 L1778.86 1211.06 L1778.27 1211.06 L1777.68 1211.06 L1777.1 1211.06 L1776.51 1211.06 L1775.92 1211.06 L1775.34 1211.06 L1774.75 1211.06 L1774.16 1211.06 L1773.58 1211.06 L1772.99 1211.06 L1772.4 1211.06 L1771.82 1211.06 L1771.23 1211.06 L1770.65 1211.06 L1770.06 1211.06 L1769.47 1211.06 L1768.89 1211.06 L1768.3 1211.06 L1767.71 1211.06 L1767.13 1211.06 L1766.54 1211.06 L1765.95 1211.06 L1765.37 1211.06 L1764.78 1211.06 L1764.19 1211.06 L1763.61 1211.06 L1763.02 1211.06 L1762.44 1211.06 L1761.85 1211.06 L1761.26 1211.06 L1760.68 1211.06 L1760.09 1211.06 L1759.5 1211.06 L1758.92 1211.06 L1758.33 1211.06 L1757.74 1211.06 L1757.16 1211.06 L1756.57 1211.06 L1755.99 1211.06 L1755.4 1211.06 L1754.81 1211.06 L1754.23 1211.06 L1753.64 1211.06 L1753.05 1211.06 L1752.47 1211.06 L1751.88 1211.06 L1751.29 1211.06 L1750.71 1211.06 L1750.12 1211.06 L1749.53 1211.06 L1748.95 1211.06 L1748.36 1211.06 L1747.78 1211.06 L1747.19 1211.06 L1746.6 1211.06 L1746.02 1211.06 L1745.43 1211.06 L1744.84 1211.06 L1744.26 1211.06 L1743.67 1211.06 L1743.08 1211.06 L1742.5 1211.06 L1741.91 1211.06 L1741.32 1211.06 L1740.74 1211.06 L1740.15 1211.06 L1739.57 1211.06 L1738.98 1211.06 L1738.39 1211.06 L1737.81 1211.06 L1737.22 1211.06 L1736.63 1211.06 L1736.05 1211.06 L1735.46 1211.06 L1734.87 1211.06 L1734.29 1211.06 L1733.7 1211.06 L1733.11 1211.06 L1732.53 1211.06 L1731.94 1211.06 L1731.36 1211.06 L1730.77 1211.06 L1730.18 1211.06 L1729.6 1211.06 L1729.01 1211.06 L1728.42 1211.06 L1727.84 1211.06 L1727.25 1211.06 L1726.66 1211.06 L1726.08 1211.06 L1725.49 1211.06 L1724.91 1211.06 L1724.32 1211.06 L1723.73 1211.06 L1723.15 1211.06 L1722.56 1211.06 L1721.97 1211.06 L1721.39 1211.06 L1720.8 1211.06 L1720.21 1211.06 L1719.63 1211.06 L1719.04 1211.06 L1718.45 1211.06 L1717.87 1211.06 L1717.28 1211.06 L1716.7 1211.06 L1716.11 1211.06 L1715.52 1211.06 L1714.94 1211.06 L1714.35 1211.06 L1713.76 1211.06 L1713.18 1211.06 L1712.59 1211.06 L1712 1211.06 L1711.42 1211.06 L1710.83 1211.06 L1710.24 1211.06 L1709.66 1211.06 L1709.07 1211.06 L1708.49 1211.06 L1707.9 1211.06 L1707.31 1211.06 L1706.73 1211.06 L1706.14 1211.06 L1705.55 1211.06 L1704.97 1211.06 L1704.38 1211.06 L1703.79 1211.06 L1703.21 1211.06 L1702.62 1211.06 L1702.04 1211.06 L1701.45 1211.06 L1700.86 1211.06 L1700.28 1211.06 L1699.69 1211.06 L1699.1 1211.06 L1698.52 1211.06 L1697.93 1211.06 L1697.34 1211.06 L1696.76 1211.06 L1696.17 1211.06 L1695.58 1211.06 L1695 1211.06 L1694.41 1211.06 L1693.83 1211.06 L1693.24 1211.06 L1692.65 1211.06 L1692.07 1211.06 L1691.48 1211.06 L1690.89 1211.06 L1690.31 1211.06 L1689.72 1211.06 L1689.13 1211.06 L1688.55 1211.06 L1687.96 1211.06 L1687.37 1211.06 L1686.79 1211.06 L1686.2 1211.06 L1685.62 1211.06 L1685.03 1211.06 L1684.44 1211.06 L1683.86 1211.06 L1683.27 1211.06 L1682.68 1211.06 L1682.1 1211.06 L1681.51 1211.06 L1680.92 1211.06 L1680.34 1211.06 L1679.75 1211.06 L1679.17 1211.06 L1678.58 1211.06 L1677.99 1211.06 L1677.41 1211.06 L1676.82 1211.06 L1676.23 1211.06 L1675.65 1211.06 L1675.06 1211.06 L1674.47 1211.06 L1673.89 1211.06 L1673.3 1211.06 L1672.71 1211.06 L1672.13 1211.06 L1671.54 1211.06 L1670.96 1211.06 L1670.37 1211.06 L1669.78 1211.06 L1669.2 1211.06 L1668.61 1211.06 L1668.02 1211.06 L1667.44 1211.06 L1666.85 1211.06 L1666.26 1211.06 L1665.68 1211.06 L1665.09 1211.06 L1664.5 1211.06 L1663.92 1211.06 L1663.33 1211.06 L1662.75 1211.06 L1662.16 1211.06 L1661.57 1211.06 L1660.99 1211.06 L1660.4 1211.06 L1659.81 1211.06 L1659.23 1211.06 L1658.64 1211.06 L1658.05 1211.06 L1657.47 1211.06 L1656.88 1211.06 L1656.29 1211.06 L1655.71 1211.06 L1655.12 1211.06 L1654.54 1211.06 L1653.95 1211.06 L1653.36 1211.06 L1652.78 1211.06 L1652.19 1211.06 L1651.6 1211.06 L1651.02 1211.06 L1650.43 1211.06 L1649.84 1211.06 L1649.26 1211.06 L1648.67 1211.06 L1648.09 1211.06 L1647.5 1211.06 L1646.91 1211.06 L1646.33 1211.06 L1645.74 1211.06 L1645.15 1211.06 L1644.57 1211.06 L1643.98 1211.06 L1643.39 1211.06 L1642.81 1211.06 L1642.22 1211.06 L1641.63 1211.06 L1641.05 1211.06 L1640.46 1211.06 L1639.88 1211.06 L1639.29 1211.06 L1638.7 1211.06 L1638.12 1211.06 L1637.53 1211.06 L1636.94 1211.06 L1636.36 1211.06 L1635.77 1211.06 L1635.18 1211.06 L1634.6 1211.06 L1634.01 1211.06 L1633.42 1211.06 L1632.84 1211.06 L1632.25 1211.06 L1631.67 1211.06 L1631.08 1211.06 L1630.49 1211.06 L1629.91 1211.06 L1629.32 1211.06 L1628.73 1211.06 L1628.15 1211.06 L1627.56 1211.06 L1626.97 1211.06 L1626.39 1211.06 L1625.8 1211.06 L1625.22 1211.06 L1624.63 1211.06 L1624.04 1211.06 L1623.46 1211.06 L1622.87 1211.06 L1622.28 1211.06 L1621.7 1211.06 L1621.11 1211.06 L1620.52 1211.06 L1619.94 1211.06 L1619.35 1211.06 L1618.76 1211.06 L1618.18 1211.06 L1617.59 1211.06 L1617.01 1211.06 L1616.42 1211.06 L1615.83 1211.06 L1615.25 1211.06 L1614.66 1211.06 L1614.07 1211.06 L1613.49 1211.06 L1612.9 1211.06 L1612.31 1211.06 L1611.73 1211.06 L1611.14 1211.06 L1610.55 1211.06 L1609.97 1211.06 L1609.38 1211.06 L1608.8 1211.06 L1608.21 1211.06 L1607.62 1211.06 L1607.04 1211.06 L1606.45 1211.06 L1605.86 1211.06 L1605.28 1211.06 L1604.69 1211.06 L1604.1 1211.06 L1603.52 1211.06 L1602.93 1211.06 L1602.34 1211.06 L1601.76 1211.06 L1601.17 1211.06 L1600.59 1211.06 L1600 1211.06 L1599.41 1211.06 L1598.83 1211.06 L1598.24 1211.06 L1597.65 1211.06 L1597.07 1211.06 L1596.48 1211.06 L1595.89 1211.06 L1595.31 1211.06 L1594.72 1211.06 L1594.14 1211.06 L1593.55 1211.06 L1592.96 1211.06 L1592.38 1211.06 L1591.79 1211.06 L1591.2 1211.06 L1590.62 1211.06 L1590.03 1211.06 L1589.44 1211.06 L1588.86 1211.06 L1588.27 1211.06 L1587.68 1211.06 L1587.1 1211.06 L1586.51 1211.06 L1585.93 1211.06 L1585.34 1211.06 L1584.75 1211.06 L1584.17 1211.06 L1583.58 1211.06 L1582.99 1211.06 L1582.41 1211.06 L1581.82 1211.06 L1581.23 1211.06 L1580.65 1211.06 L1580.06 1211.06 L1579.47 1211.06 L1578.89 1211.06 L1578.3 1211.06 L1577.72 1211.06 L1577.13 1211.06 L1576.54 1211.06 L1575.96 1211.06 L1575.37 1211.06 L1574.78 1211.06 L1574.2 1211.06 L1573.61 1211.06 L1573.02 1211.06 L1572.44 1211.06 L1571.85 1211.06 L1571.27 1211.06 L1570.68 1211.06 L1570.09 1211.06 L1569.51 1211.06 L1568.92 1211.06 L1568.33 1211.06 L1567.75 1211.06 L1567.16 1211.06 L1566.57 1211.06 L1565.99 1211.06 L1565.4 1211.06 L1564.81 1211.06 L1564.23 1211.06 L1563.64 1211.06 L1563.06 1211.06 L1562.47 1211.06 L1561.88 1211.06 L1561.3 1211.06 L1560.71 1211.06 L1560.12 1211.06 L1559.54 1211.06 L1558.95 1211.06 L1558.36 1211.06 L1557.78 1211.06 L1557.19 1211.06 L1556.6 1211.06 L1556.02 1211.06 L1555.43 1211.06 L1554.85 1211.06 L1554.26 1211.06 L1553.67 1211.06 L1553.09 1211.06 L1552.5 1211.06 L1551.91 1211.06 L1551.33 1211.06 L1550.74 1211.06 L1550.15 1211.06 L1549.57 1211.06 L1548.98 1211.06 L1548.4 1211.06 L1547.81 1211.06 L1547.22 1211.06 L1546.64 1211.06 L1546.05 1211.06 L1545.46 1211.06 L1544.88 1211.06 L1544.29 1211.06 L1543.7 1211.06 L1543.12 1211.06 L1542.53 1211.06 L1541.94 1211.06 L1541.36 1211.06 L1540.77 1211.06 L1540.19 1211.06 L1539.6 1211.06 L1539.01 1211.06 L1538.43 1211.06 L1537.84 1211.06 L1537.25 1211.06 L1536.67 1211.06 L1536.08 1211.06 L1535.49 1211.06 L1534.91 1211.06 L1534.32 1211.06 L1533.73 1211.06 L1533.15 1211.06 L1532.56 1211.06 L1531.98 1211.06 L1531.39 1211.06 L1530.8 1211.06 L1530.22 1211.06 L1529.63 1211.06 L1529.04 1211.06 L1528.46 1211.06 L1527.87 1211.06 L1527.28 1211.06 L1526.7 1211.06 L1526.11 1211.06 L1525.52 1211.06 L1524.94 1211.06 L1524.35 1211.06 L1523.77 1211.06 L1523.18 1211.06 L1522.59 1211.06 L1522.01 1211.06 L1521.42 1211.06 L1520.83 1211.06 L1520.25 1211.06 L1519.66 1211.06 L1519.07 1211.06 L1518.49 1211.06 L1517.9 1211.06 L1517.32 1211.06 L1516.73 1211.06 L1516.14 1211.06 L1515.56 1211.06 L1514.97 1211.06 L1514.38 1211.06 L1513.8 1211.06 L1513.21 1211.06 L1512.62 1211.06 L1512.04 1211.06 L1511.45 1211.06 L1510.86 1211.06 L1510.28 1211.06 L1509.69 1211.06 L1509.11 1211.06 L1508.52 1211.06 L1507.93 1211.06 L1507.35 1211.06 L1506.76 1211.06 L1506.17 1211.06 L1505.59 1211.06 L1505 1211.06 L1504.41 1211.06 L1503.83 1211.06 L1503.24 1211.06 L1502.65 1211.06 L1502.07 1211.06 L1501.48 1211.06 L1500.9 1211.06 L1500.31 1211.06 L1499.72 1211.06 L1499.14 1211.06 L1498.55 1211.06 L1497.96 1211.06 L1497.38 1211.06 L1496.79 1211.06 L1496.2 1211.06 L1495.62 1211.06 L1495.03 1211.06 L1494.45 1211.06 L1493.86 1211.06 L1493.27 1211.06 L1492.69 1211.06 L1492.1 1211.06 L1491.51 1211.06 L1490.93 1211.06 L1490.34 1211.06 L1489.75 1211.06 L1489.17 1211.06 L1488.58 1211.06 L1487.99 1211.06 L1487.41 1211.06 L1486.82 1211.06 L1486.24 1211.06 L1485.65 1211.06 L1485.06 1211.06 L1484.48 1211.06 L1483.89 1211.06 L1483.3 1211.06 L1482.72 1211.06 L1482.13 1211.06 L1481.54 1211.06 L1480.96 1211.06 L1480.37 1211.06 L1479.78 1211.06 L1479.2 1211.06 L1478.61 1211.06 L1478.03 1211.06 L1477.44 1211.06 L1476.85 1211.06 L1476.27 1211.06 L1475.68 1211.06 L1475.09 1211.06 L1474.51 1211.06 L1473.92 1211.06 L1473.33 1211.06 L1472.75 1211.06 L1472.16 1211.06 L1471.57 1211.06 L1470.99 1211.06 L1470.4 1211.06 L1469.82 1211.06 L1469.23 1211.06 L1468.64 1211.06 L1468.06 1211.06 L1467.47 1211.06 L1466.88 1211.06 L1466.3 1211.06 L1465.71 1211.06 L1465.12 1211.06 L1464.54 1211.06 L1463.95 1211.06 L1463.37 1211.06 L1462.78 1211.06 L1462.19 1211.06 L1461.61 1211.06 L1461.02 1211.06 L1460.43 1211.06 L1459.85 1211.06 L1459.26 1211.06 L1458.67 1211.06 L1458.09 1211.06 L1457.5 1211.06 L1456.91 1211.06 L1456.33 1211.06 L1455.74 1211.06 L1455.16 1211.06 L1454.57 1211.06 L1453.98 1211.06 L1453.4 1211.06 L1452.81 1211.06 L1452.22 1211.06 L1451.64 1211.06 L1451.05 1211.06 L1450.46 1211.06 L1449.88 1211.06 L1449.29 1211.06 L1448.7 1211.06 L1448.12 1211.06 L1447.53 1211.06 L1446.95 1211.06 L1446.36 1211.06 L1445.77 1211.06 L1445.19 1211.06 L1444.6 1211.06 L1444.01 1211.06 L1443.43 1211.06 L1442.84 1211.06 L1442.25 1211.06 L1441.67 1211.06 L1441.08 1211.06 L1440.5 1211.06 L1439.91 1211.06 L1439.32 1211.06 L1438.74 1211.06 L1438.15 1211.06 L1437.56 1211.06 L1436.98 1211.06 L1436.39 1211.06 L1435.8 1211.06 L1435.22 1211.06 L1434.63 1211.06 L1434.04 1211.06 L1433.46 1211.06 L1432.87 1211.06 L1432.29 1211.06 L1431.7 1211.06 L1431.11 1211.06 L1430.53 1211.06 L1429.94 1211.06 L1429.35 1211.06 L1428.77 1211.06 L1428.18 1211.06 L1427.59 1211.06 L1427.01 1211.06 L1426.42 1211.06 L1425.83 1211.06 L1425.25 1211.06 L1424.66 1211.06 L1424.08 1211.06 L1423.49 1211.06 L1422.9 1211.06 L1422.32 1211.06 L1421.73 1211.06 L1421.14 1211.06 L1420.56 1211.06 L1419.97 1211.06 L1419.38 1211.06 L1418.8 1211.06 L1418.21 1211.06 L1417.63 1211.06 L1417.04 1211.06 L1416.45 1211.06 L1415.87 1211.06 L1415.28 1211.06 L1414.69 1211.06 L1414.11 1211.06 L1413.52 1211.06 L1412.93 1211.06 L1412.35 1211.06 L1411.76 1211.06 L1411.17 1211.06 L1410.59 1211.06 L1410 1211.06 L1409.42 1211.06 L1408.83 1211.06 L1408.24 1211.06 L1407.66 1211.06 L1407.07 1211.06 L1406.48 1211.06 L1405.9 1211.06 L1405.31 1211.06 L1404.72 1211.06 L1404.14 1211.06 L1403.55 1211.06 L1402.96 1211.06 L1402.38 1211.06 L1401.79 1211.06 L1401.21 1211.06 L1400.62 1211.06 L1400.03 1211.06 L1399.45 1211.06 L1398.86 1211.06 L1398.27 1211.06 L1397.69 1211.06 L1397.1 1211.06 L1396.51 1211.06 L1395.93 1211.06 L1395.34 1211.06 L1394.75 1211.06 L1394.17 1211.06 L1393.58 1211.06 L1393 1211.06 L1392.41 1211.06 L1391.82 1211.06 L1391.24 1211.06 L1390.65 1211.06 L1390.06 1211.06 L1389.48 1211.06 L1388.89 1211.06 L1388.3 1211.06 L1387.72 1211.06 L1387.13 1211.06 L1386.55 1211.06 L1385.96 1211.06 L1385.37 1211.06 L1384.79 1211.06 L1384.2 1211.06 L1383.61 1211.06 L1383.03 1211.06 L1382.44 1211.06 L1381.85 1211.06 L1381.27 1211.06 L1380.68 1211.06 L1380.09 1211.06 L1379.51 1211.06 L1378.92 1211.06 L1378.34 1211.06 L1377.75 1211.06 L1377.16 1211.06 L1376.58 1211.06 L1375.99 1211.06 L1375.4 1211.06 L1374.82 1211.06 L1374.23 1211.06 L1373.64 1211.06 L1373.06 1211.06 L1372.47 1211.06 L1371.88 1211.06 L1371.3 1211.06 L1370.71 1211.06 L1370.13 1211.06 L1369.54 1211.06 L1368.95 1211.06 L1368.37 1211.06 L1367.78 1211.06 L1367.19 1211.06 L1366.61 1211.06 L1366.02 1211.06 L1365.43 1211.06 L1364.85 1211.06 L1364.26 1211.06 L1363.68 1211.06 L1363.09 1211.06 L1362.5 1211.06 L1361.92 1211.06 L1361.33 1211.06 L1360.74 1211.06 L1360.16 1211.06 L1359.57 1211.06 L1358.98 1211.06 L1358.4 1211.06 L1357.81 1211.06 L1357.22 1211.06 L1356.64 1211.06 L1356.05 1211.06 L1355.47 1211.06 L1354.88 1211.06 L1354.29 1211.06 L1353.71 1211.06 L1353.12 1211.06 L1352.53 1211.06 L1351.95 1211.06 L1351.36 1211.06 L1350.77 1211.06 L1350.19 1211.06 L1349.6 1211.06 L1349.01 1211.06 L1348.43 1211.06 L1347.84 1211.06 L1347.26 1211.06 L1346.67 1211.06 L1346.08 1211.06 L1345.5 1211.06 L1344.91 1211.06 L1344.32 1211.06 L1343.74 1211.06 L1343.15 1211.06 L1342.56 1211.06 L1341.98 1211.06 L1341.39 1211.06 L1340.8 1211.06 L1340.22 1211.06 L1339.63 1211.06 L1339.05 1211.06 L1338.46 1211.06 L1337.87 1211.06 L1337.29 1211.06 L1336.7 1211.06 L1336.11 1211.06 L1335.53 1211.06 L1334.94 1211.06 L1334.35 1211.06 L1333.77 1211.06 L1333.18 1211.06 L1332.6 1211.06 L1332.01 1211.06 L1331.42 1211.06 L1330.84 1211.06 L1330.25 1211.06 L1329.66 1211.06 L1329.08 1211.06 L1328.49 1211.06 L1327.9 1211.06 L1327.32 1211.06 L1326.73 1211.06 L1326.14 1211.06 L1325.56 1211.06 L1324.97 1211.06 L1324.39 1211.06 L1323.8 1211.06 L1323.21 1211.06 L1322.63 1211.06 L1322.04 1211.06 L1321.45 1211.06 L1320.87 1211.06 L1320.28 1211.06 L1319.69 1211.06 L1319.11 1211.06 L1318.52 1211.06 L1317.93 1211.06 L1317.35 1211.06 L1316.76 1211.06 L1316.18 1211.06 L1315.59 1211.06 L1315 1211.06 L1314.42 1211.06 L1313.83 1211.06 L1313.24 1211.06 L1312.66 1211.06 L1312.07 1211.06 L1311.48 1211.06 L1310.9 1211.06 L1310.31 1211.06 L1309.73 1211.06 L1309.14 1211.06 L1308.55 1211.06 L1307.97 1211.06 L1307.38 1211.06 L1306.79 1211.06 L1306.21 1211.06 L1305.62 1211.06 L1305.03 1211.06 L1304.45 1211.06 L1303.86 1211.06 L1303.27 1211.06 L1302.69 1211.06 L1302.1 1211.06 L1301.52 1211.06 L1300.93 1211.06 L1300.34 1211.06 L1299.76 1211.06 L1299.17 1211.06 L1298.58 1211.06 L1298 1211.06 L1297.41 1211.06 L1296.82 1211.06 L1296.24 1211.06 L1295.65 1211.06 L1295.06 1211.06 L1294.48 1211.06 L1293.89 1211.06 L1293.31 1211.06 L1292.72 1211.06 L1292.13 1211.06 L1291.55 1211.06 L1290.96 1211.06 L1290.37 1211.06 L1289.79 1211.06 L1289.2 1211.06 L1288.61 1211.06 L1288.03 1211.06 L1287.44 1211.06 L1286.86 1211.06 L1286.27 1211.06 L1285.68 1211.06 L1285.1 1211.06 L1284.51 1211.06 L1283.92 1211.06 L1283.34 1211.06 L1282.75 1211.06 L1282.16 1211.06 L1281.58 1211.06 L1280.99 1211.06 L1280.4 1211.06 L1279.82 1211.06 L1279.23 1211.06 L1278.65 1211.06 L1278.06 1211.06 L1277.47 1211.06 L1276.89 1211.06 L1276.3 1211.06 L1275.71 1211.06 L1275.13 1211.06 L1274.54 1211.06 L1273.95 1211.06 L1273.37 1211.06 L1272.78 1211.06 L1272.19 1211.06 L1271.61 1211.06 L1271.02 1211.06 L1270.44 1211.06 L1269.85 1211.06 L1269.26 1211.06 L1268.68 1211.06 L1268.09 1211.06 L1267.5 1211.06 L1266.92 1211.06 L1266.33 1211.06 L1265.74 1211.06 L1265.16 1211.06 L1264.57 1211.06 L1263.98 1211.06 L1263.4 1211.06 L1262.81 1211.06 L1262.23 1211.06 L1261.64 1211.06 L1261.05 1211.06 L1260.47 1211.06 L1259.88 1211.06 L1259.29 1211.06 L1258.71 1211.06 L1258.12 1211.06 L1257.53 1211.06 L1256.95 1211.06 L1256.36 1211.06 L1255.78 1211.06 L1255.19 1211.06 L1254.6 1211.06 L1254.02 1211.06 L1253.43 1211.06 L1252.84 1211.06 L1252.26 1211.06 L1251.67 1211.06 L1251.08 1211.06 L1250.5 1211.06 L1249.91 1211.06 L1249.32 1211.06 L1248.74 1211.06 L1248.15 1211.06 L1247.57 1211.06 L1246.98 1211.06 L1246.39 1211.06 L1245.81 1211.06 L1245.22 1211.06 L1244.63 1211.06 L1244.05 1211.06 L1243.46 1211.06 L1242.87 1211.06 L1242.29 1211.06 L1241.7 1211.06 L1241.11 1211.06 L1240.53 1211.06 L1239.94 1211.06 L1239.36 1211.06 L1238.77 1211.06 L1238.18 1211.06 L1237.6 1211.06 L1237.01 1211.06 L1236.42 1211.06 L1235.84 1211.06 L1235.25 1211.06 L1234.66 1211.06 L1234.08 1211.06 L1233.49 1211.06 L1232.91 1211.06 L1232.32 1211.06 L1231.73 1211.06 L1231.15 1211.06 L1230.56 1211.06 L1229.97 1211.06 L1229.39 1211.06 L1228.8 1211.06 L1228.21 1211.06 L1227.63 1211.06 L1227.04 1211.06 L1226.45 1211.06 L1225.87 1211.06 L1225.28 1211.06 L1224.7 1211.06 L1224.11 1211.06 L1223.52 1211.06 L1222.94 1211.06 L1222.35 1211.06 L1221.76 1211.06 L1221.18 1211.06 L1220.59 1211.06 L1220 1211.06 L1219.42 1211.06 L1218.83 1211.06 L1218.24 1211.06 L1217.66 1211.06 L1217.07 1211.06 L1216.49 1211.06 L1215.9 1211.06 L1215.31 1211.06 L1214.73 1211.06 L1214.14 1211.06 L1213.55 1211.06 L1212.97 1211.06 L1212.38 1211.06 L1211.79 1211.06 L1211.21 1211.06 L1210.62 1211.06 L1210.03 1211.06 L1209.45 1211.06 L1208.86 1211.06 L1208.28 1211.06 L1207.69 1211.06 L1207.1 1211.06 L1206.52 1211.06 L1205.93 1211.06 L1205.34 1211.06 L1204.76 1211.06 L1204.17 1211.06 L1203.58 1211.06 L1203 1211.06 L1202.41 1211.06 L1201.83 1211.06 L1201.24 1211.06 L1200.65 1211.06 L1200.07 1211.06 L1199.48 1211.06 L1198.89 1211.06 L1198.31 1211.06 L1197.72 1211.06 L1197.13 1211.06 L1196.55 1211.06 L1195.96 1211.06 L1195.37 1211.06 L1194.79 1211.06 L1194.2 1211.06 L1193.62 1211.06 L1193.03 1211.06 L1192.44 1211.06 L1191.86 1211.06 L1191.27 1211.06 L1190.68 1211.06 L1190.1 1211.06 L1189.51 1211.06 L1188.92 1211.06 L1188.34 1211.06 L1187.75 1211.06 L1187.16 1211.06 L1186.58 1211.06 L1185.99 1211.06 L1185.41 1211.06 L1184.82 1211.06 L1184.23 1211.06 L1183.65 1211.06 L1183.06 1211.06 L1182.47 1211.06 L1181.89 1211.06 L1181.3 1211.06 L1180.71 1211.06 L1180.13 1211.06 L1179.54 1211.06 L1178.96 1211.06 L1178.37 1211.06 L1177.78 1211.06 L1177.2 1211.06 L1176.61 1211.06 L1176.02 1211.06 L1175.44 1211.06 L1174.85 1211.06 L1174.26 1211.06 L1173.68 1211.06 L1173.09 1211.06 L1172.5 1211.06 L1171.92 1211.06 L1171.33 1211.06 L1170.75 1211.06 L1170.16 1211.06 L1169.57 1211.06 L1168.99 1211.06 L1168.4 1211.06 L1167.81 1211.06 L1167.23 1211.06 L1166.64 1211.06 L1166.05 1211.06 L1165.47 1211.06 L1164.88 1211.06 L1164.29 1211.06 L1163.71 1211.06 L1163.12 1211.06 L1162.54 1211.06 L1161.95 1211.06 L1161.36 1211.06 L1160.78 1211.06 L1160.19 1211.06 L1159.6 1211.06 L1159.02 1211.06 L1158.43 1211.06 L1157.84 1211.06 L1157.26 1211.06 L1156.67 1211.06 L1156.09 1211.06 L1155.5 1211.06 L1154.91 1211.06 L1154.33 1211.06 L1153.74 1211.06 L1153.15 1211.06 L1152.57 1211.06 L1151.98 1211.06 L1151.39 1211.06 L1150.81 1211.06 L1150.22 1211.06 L1149.63 1211.06 L1149.05 1211.06 L1148.46 1211.06 L1147.88 1211.06 L1147.29 1211.06 L1146.7 1211.06 L1146.12 1211.06 L1145.53 1211.06 L1144.94 1211.06 L1144.36 1211.06 L1143.77 1211.06 L1143.18 1211.06 L1142.6 1211.06 L1142.01 1211.06 L1141.42 1211.06 L1140.84 1211.06 L1140.25 1211.06 L1139.67 1211.06 L1139.08 1211.06 L1138.49 1211.06 L1137.91 1211.06 L1137.32 1211.06 L1136.73 1211.06 L1136.15 1211.06 L1135.56 1211.06 L1134.97 1211.06 L1134.39 1211.06 L1133.8 1211.06 L1133.21 1211.06 L1132.63 1211.06 L1132.04 1211.06 L1131.46 1211.06 L1130.87 1211.06 L1130.28 1211.06 L1129.7 1211.06 L1129.11 1211.06 L1128.52 1211.06 L1127.94 1211.06 L1127.35 1211.06 L1126.76 1211.06 L1126.18 1211.06 L1125.59 1211.06 L1125.01 1211.06 L1124.42 1211.06 L1123.83 1211.06 L1123.25 1211.06 L1122.66 1211.06 L1122.07 1211.06 L1121.49 1211.06 L1120.9 1211.06 L1120.31 1211.06 L1119.73 1211.06 L1119.14 1211.06 L1118.55 1211.06 L1117.97 1211.06 L1117.38 1211.06 L1116.8 1211.06 L1116.21 1211.06 L1115.62 1211.06 L1115.04 1211.06 L1114.45 1211.06 L1113.86 1211.06 L1113.28 1211.06 L1112.69 1211.06 L1112.1 1211.06 L1111.52 1211.06 L1110.93 1211.06 L1110.34 1211.06 L1109.76 1211.06 L1109.17 1211.06 L1108.59 1211.06 L1108 1211.06 L1107.41 1211.06 L1106.83 1211.06 L1106.24 1211.06 L1105.65 1211.06 L1105.07 1211.06 L1104.48 1211.06 L1103.89 1211.06 L1103.31 1211.06 L1102.72 1211.06 L1102.14 1211.06 L1101.55 1211.06 L1100.96 1211.06 L1100.38 1211.06 L1099.79 1211.06 L1099.2 1211.06 L1098.62 1211.06 L1098.03 1211.06 L1097.44 1211.06 L1096.86 1211.06 L1096.27 1211.06 L1095.68 1211.06 L1095.1 1211.06 L1094.51 1211.06 L1093.93 1211.06 L1093.34 1211.06 L1092.75 1211.06 L1092.17 1211.06 L1091.58 1211.06 L1090.99 1211.06 L1090.41 1211.06 L1089.82 1211.06 L1089.23 1211.06 L1088.65 1211.06 L1088.06 1211.06 L1087.47 1211.06 L1086.89 1211.06 L1086.3 1211.06 L1085.72 1211.06 L1085.13 1211.06 L1084.54 1211.06 L1083.96 1211.06 L1083.37 1211.06 L1082.78 1211.06 L1082.2 1211.06 L1081.61 1211.06 L1081.02 1211.06 L1080.44 1211.06 L1079.85 1211.06 L1079.26 1211.06 L1078.68 1211.06 L1078.09 1211.06 L1077.51 1211.06 L1076.92 1211.06 L1076.33 1211.06 L1075.75 1211.06 L1075.16 1211.06 L1074.57 1211.06 L1073.99 1211.06 L1073.4 1211.06 L1072.81 1211.06 L1072.23 1211.06 L1071.64 1211.06 L1071.06 1211.06 L1070.47 1211.06 L1069.88 1211.06 L1069.3 1211.06 L1068.71 1211.06 L1068.12 1211.06 L1067.54 1211.06 L1066.95 1211.06 L1066.36 1211.06 L1065.78 1211.06 L1065.19 1211.06 L1064.6 1211.06 L1064.02 1211.06 L1063.43 1211.06 L1062.85 1211.06 L1062.26 1211.06 L1061.67 1211.06 L1061.09 1211.06 L1060.5 1211.06 L1059.91 1211.06 L1059.33 1211.06 L1058.74 1211.06 L1058.15 1211.06 L1057.57 1211.06 L1056.98 1211.06 L1056.39 1211.06 L1055.81 1211.06 L1055.22 1211.06 L1054.64 1211.06 L1054.05 1211.06 L1053.46 1211.06 L1052.88 1211.06 L1052.29 1211.06 L1051.7 1211.06 L1051.12 1211.06 L1050.53 1211.06 L1049.94 1211.06 L1049.36 1211.06 L1048.77 1211.06 L1048.19 1211.06 L1047.6 1211.06 L1047.01 1211.06 L1046.43 1211.06 L1045.84 1211.06 L1045.25 1211.06 L1044.67 1211.06 L1044.08 1211.06 L1043.49 1211.06 L1042.91 1211.06 L1042.32 1211.06 L1041.73 1211.06 L1041.15 1211.06 L1040.56 1211.06 L1039.98 1211.06 L1039.39 1211.06 L1038.8 1211.06 L1038.22 1211.06 L1037.63 1211.06 L1037.04 1211.06 L1036.46 1211.06 L1035.87 1211.06 L1035.28 1211.06 L1034.7 1211.06 L1034.11 1211.06 L1033.52 1211.06 L1032.94 1211.06 L1032.35 1211.06 L1031.77 1211.06 L1031.18 1211.06 L1030.59 1211.06 L1030.01 1211.06 L1029.42 1211.06 L1028.83 1211.06 L1028.25 1211.06 L1027.66 1211.06 L1027.07 1211.06 L1026.49 1211.06 L1025.9 1211.06 L1025.32 1211.06 L1024.73 1211.06 L1024.14 1211.06 L1023.56 1211.06 L1022.97 1211.06 L1022.38 1211.06 L1021.8 1211.06 L1021.21 1211.06 L1020.62 1211.06 L1020.04 1211.06 L1019.45 1211.06 L1018.86 1211.06 L1018.28 1211.06 L1017.69 1211.06 L1017.11 1211.06 L1016.52 1211.06 L1015.93 1211.06 L1015.35 1211.06 L1014.76 1211.06 L1014.17 1211.06 L1013.59 1211.06 L1013 1211.06 L1012.41 1211.06 L1011.83 1211.06 L1011.24 1211.06 L1010.65 1211.06 L1010.07 1211.06 L1009.48 1211.06 L1008.9 1211.06 L1008.31 1211.06 L1007.72 1211.06 L1007.14 1211.06 L1006.55 1211.06 L1005.96 1211.06 L1005.38 1211.06 L1004.79 1211.06 L1004.2 1211.06 L1003.62 1211.06 L1003.03 1211.06 L1002.44 1211.06 L1001.86 1211.06 L1001.27 1211.06 L1000.69 1211.06 L1000.1 1211.06 L999.513 1211.06 L998.926 1211.06 L998.34 1211.06 L997.754 1211.06 L997.167 1211.06 L996.581 1211.06 L995.994 1211.06 L995.408 1211.06 L994.822 1211.06 L994.235 1211.06 L993.649 1211.06 L993.062 1211.06 L992.476 1211.06 L991.889 1211.06 L991.303 1211.06 L990.717 1211.06 L990.13 1211.06 L989.544 1211.06 L988.957 1211.06 L988.371 1211.06 L987.785 1211.06 L987.198 1211.06 L986.612 1211.06 L986.025 1211.06  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.11 986.612,1211.11 987.198,1211.11 987.785,1211.11 988.371,1211.11 988.957,1211.11 989.544,1211.11 990.13,1211.11 990.717,1211.11 991.303,1211.11 991.889,1211.11 992.476,1211.11 993.062,1211.11 993.649,1211.11 994.235,1211.11 994.822,1211.11 995.408,1211.11 995.994,1211.11 996.581,1211.11 997.167,1211.11 997.754,1211.11 998.34,1211.11 998.926,1211.11 999.513,1211.11 1000.1,1211.11 1000.69,1211.11 1001.27,1211.11 1001.86,1211.11 1002.44,1211.11 1003.03,1211.11 1003.62,1211.11 1004.2,1211.11 1004.79,1211.11 1005.38,1211.11 1005.96,1211.11 1006.55,1211.11 1007.14,1211.11 1007.72,1211.11 1008.31,1211.11 1008.9,1211.11 1009.48,1211.11 1010.07,1211.11 1010.65,1211.11 1011.24,1211.11 1011.83,1211.11 1012.41,1211.11 1013,1211.11 1013.59,1211.11 1014.17,1211.11 1014.76,1211.11 1015.35,1211.11 1015.93,1211.11 1016.52,1211.11 1017.11,1211.11 1017.69,1211.11 1018.28,1211.11 1018.86,1211.11 1019.45,1211.11 1020.04,1211.11 1020.62,1211.11 1021.21,1211.11 1021.8,1211.11 1022.38,1211.11 1022.97,1211.11 1023.56,1211.11 1024.14,1211.11 1024.73,1211.11 1025.32,1211.11 1025.9,1211.11 1026.49,1211.11 1027.07,1211.11 1027.66,1211.11 1028.25,1211.11 1028.83,1211.11 1029.42,1211.11 1030.01,1211.11 1030.59,1211.11 1031.18,1211.11 1031.77,1211.11 1032.35,1211.11 1032.94,1211.11 1033.52,1211.11 1034.11,1211.11 1034.7,1211.11 1035.28,1211.11 1035.87,1211.11 1036.46,1211.11 1037.04,1211.11 1037.63,1211.11 1038.22,1211.11 1038.8,1211.11 1039.39,1211.11 1039.98,1211.11 1040.56,1211.11 1041.15,1211.11 1041.73,1211.11 1042.32,1211.11 1042.91,1211.11 1043.49,1211.11 1044.08,1211.11 1044.67,1211.11 1045.25,1211.11 1045.84,1211.11 1046.43,1211.11 1047.01,1211.11 1047.6,1211.11 1048.19,1211.11 1048.77,1211.11 1049.36,1211.11 1049.94,1211.11 1050.53,1211.11 1051.12,1211.11 1051.7,1211.11 1052.29,1211.11 1052.88,1211.11 1053.46,1211.11 1054.05,1211.11 1054.64,1211.11 1055.22,1211.11 1055.81,1211.11 1056.39,1211.11 1056.98,1211.11 1057.57,1211.11 1058.15,1211.11 1058.74,1211.11 1059.33,1211.11 1059.91,1211.11 1060.5,1211.11 1061.09,1211.11 1061.67,1211.11 1062.26,1211.11 1062.85,1211.11 1063.43,1211.11 1064.02,1211.11 1064.6,1211.11 1065.19,1211.11 1065.78,1211.11 1066.36,1211.11 1066.95,1211.11 1067.54,1211.11 1068.12,1211.11 1068.71,1211.11 1069.3,1211.11 1069.88,1211.11 1070.47,1211.11 1071.06,1211.11 1071.64,1211.11 1072.23,1211.11 1072.81,1211.11 1073.4,1211.11 1073.99,1211.11 1074.57,1211.11 1075.16,1211.11 1075.75,1211.11 1076.33,1211.11 1076.92,1211.11 1077.51,1211.11 1078.09,1211.11 1078.68,1211.11 1079.26,1211.11 1079.85,1211.11 1080.44,1211.11 1081.02,1211.11 1081.61,1211.11 1082.2,1211.11 1082.78,1211.11 1083.37,1211.11 1083.96,1211.11 1084.54,1211.11 1085.13,1211.11 1085.72,1211.11 1086.3,1211.11 1086.89,1211.11 1087.47,1211.11 1088.06,1211.11 1088.65,1211.11 1089.23,1211.11 1089.82,1211.11 1090.41,1211.11 1090.99,1211.11 1091.58,1211.11 1092.17,1211.11 1092.75,1211.11 1093.34,1211.11 1093.93,1211.11 1094.51,1211.11 1095.1,1211.11 1095.68,1211.11 1096.27,1211.11 1096.86,1211.11 1097.44,1211.11 1098.03,1211.11 1098.62,1211.11 1099.2,1211.11 1099.79,1211.11 1100.38,1211.11 1100.96,1211.11 1101.55,1211.11 1102.14,1211.11 1102.72,1211.11 1103.31,1211.11 1103.89,1211.11 1104.48,1211.11 1105.07,1211.11 1105.65,1211.11 1106.24,1211.11 1106.83,1211.11 1107.41,1211.11 1108,1211.11 1108.59,1211.11 1109.17,1211.11 1109.76,1211.11 1110.34,1211.11 1110.93,1211.11 1111.52,1211.11 1112.1,1211.11 1112.69,1211.11 1113.28,1211.11 1113.86,1211.11 1114.45,1211.11 1115.04,1211.11 1115.62,1211.11 1116.21,1211.11 1116.8,1211.11 1117.38,1211.11 1117.97,1211.11 1118.55,1211.11 1119.14,1211.11 1119.73,1211.11 1120.31,1211.11 1120.9,1211.11 1121.49,1211.11 1122.07,1211.11 1122.66,1211.11 1123.25,1211.11 1123.83,1211.11 1124.42,1211.11 1125.01,1211.11 1125.59,1211.11 1126.18,1211.11 1126.76,1211.11 1127.35,1211.11 1127.94,1211.11 1128.52,1211.11 1129.11,1211.11 1129.7,1211.11 1130.28,1211.11 1130.87,1211.11 1131.46,1211.11 1132.04,1211.11 1132.63,1211.11 1133.21,1211.11 1133.8,1211.11 1134.39,1211.11 1134.97,1211.11 1135.56,1211.11 1136.15,1211.11 1136.73,1211.11 1137.32,1211.11 1137.91,1211.11 1138.49,1211.11 1139.08,1211.11 1139.67,1211.11 1140.25,1211.11 1140.84,1211.11 1141.42,1211.11 1142.01,1211.11 1142.6,1211.11 1143.18,1211.11 1143.77,1211.11 1144.36,1211.11 1144.94,1211.11 1145.53,1211.11 1146.12,1211.11 1146.7,1211.11 1147.29,1211.11 1147.88,1211.11 1148.46,1211.11 1149.05,1211.11 1149.63,1211.11 1150.22,1211.11 1150.81,1211.11 1151.39,1211.11 1151.98,1211.11 1152.57,1211.11 1153.15,1211.11 1153.74,1211.11 1154.33,1211.11 1154.91,1211.11 1155.5,1211.11 1156.09,1211.11 1156.67,1211.11 1157.26,1211.11 1157.84,1211.11 1158.43,1211.11 1159.02,1211.11 1159.6,1211.11 1160.19,1211.11 1160.78,1211.11 1161.36,1211.11 1161.95,1211.11 1162.54,1211.11 1163.12,1211.11 1163.71,1211.11 1164.29,1211.11 1164.88,1211.11 1165.47,1211.11 1166.05,1211.11 1166.64,1211.11 1167.23,1211.11 1167.81,1211.11 1168.4,1211.11 1168.99,1211.11 1169.57,1211.11 1170.16,1211.11 1170.75,1211.11 1171.33,1211.11 1171.92,1211.11 1172.5,1211.11 1173.09,1211.11 1173.68,1211.11 1174.26,1211.11 1174.85,1211.11 1175.44,1211.11 1176.02,1211.11 1176.61,1211.11 1177.2,1211.11 1177.78,1211.11 1178.37,1211.11 1178.96,1211.11 1179.54,1211.11 1180.13,1211.11 1180.71,1211.11 1181.3,1211.11 1181.89,1211.11 1182.47,1211.11 1183.06,1211.11 1183.65,1211.11 1184.23,1211.11 1184.82,1211.11 1185.41,1211.11 1185.99,1211.11 1186.58,1211.11 1187.16,1211.11 1187.75,1211.11 1188.34,1211.11 1188.92,1211.11 1189.51,1211.11 1190.1,1211.11 1190.68,1211.11 1191.27,1211.11 1191.86,1211.11 1192.44,1211.11 1193.03,1211.11 1193.62,1211.11 1194.2,1211.11 1194.79,1211.11 1195.37,1211.11 1195.96,1211.11 1196.55,1211.11 1197.13,1211.11 1197.72,1211.11 1198.31,1211.11 1198.89,1211.11 1199.48,1211.11 1200.07,1211.11 1200.65,1211.11 1201.24,1211.11 1201.83,1211.11 1202.41,1211.11 1203,1211.11 1203.58,1211.11 1204.17,1211.11 1204.76,1211.11 1205.34,1211.11 1205.93,1211.11 1206.52,1211.11 1207.1,1211.11 1207.69,1211.11 1208.28,1211.11 1208.86,1211.11 1209.45,1211.11 1210.03,1211.11 1210.62,1211.11 1211.21,1211.11 1211.79,1211.11 1212.38,1211.11 1212.97,1211.11 1213.55,1211.11 1214.14,1211.11 1214.73,1211.11 1215.31,1211.11 1215.9,1211.11 1216.49,1211.11 1217.07,1211.11 1217.66,1211.11 1218.24,1211.11 1218.83,1211.11 1219.42,1211.11 1220,1211.11 1220.59,1211.11 1221.18,1211.11 1221.76,1211.11 1222.35,1211.11 1222.94,1211.11 1223.52,1211.11 1224.11,1211.11 1224.7,1211.11 1225.28,1211.11 1225.87,1211.11 1226.45,1211.11 1227.04,1211.11 1227.63,1211.11 1228.21,1211.11 1228.8,1211.11 1229.39,1211.11 1229.97,1211.11 1230.56,1211.11 1231.15,1211.11 1231.73,1211.11 1232.32,1211.11 1232.91,1211.11 1233.49,1211.11 1234.08,1211.11 1234.66,1211.11 1235.25,1211.11 1235.84,1211.11 1236.42,1211.11 1237.01,1211.11 1237.6,1211.11 1238.18,1211.11 1238.77,1211.11 1239.36,1211.11 1239.94,1211.11 1240.53,1211.11 1241.11,1211.11 1241.7,1211.11 1242.29,1211.11 1242.87,1211.11 1243.46,1211.11 1244.05,1211.11 1244.63,1211.11 1245.22,1211.11 1245.81,1211.11 1246.39,1211.11 1246.98,1211.11 1247.57,1211.11 1248.15,1211.11 1248.74,1211.11 1249.32,1211.11 1249.91,1211.11 1250.5,1211.11 1251.08,1211.11 1251.67,1211.11 1252.26,1211.11 1252.84,1211.11 1253.43,1211.11 1254.02,1211.11 1254.6,1211.11 1255.19,1211.11 1255.78,1211.11 1256.36,1211.11 1256.95,1211.11 1257.53,1211.11 1258.12,1211.11 1258.71,1211.11 1259.29,1211.11 1259.88,1211.11 1260.47,1211.11 1261.05,1211.11 1261.64,1211.11 1262.23,1211.11 1262.81,1211.11 1263.4,1211.11 1263.98,1211.11 1264.57,1211.11 1265.16,1211.11 1265.74,1211.11 1266.33,1211.11 1266.92,1211.11 1267.5,1211.11 1268.09,1211.11 1268.68,1211.11 1269.26,1211.11 1269.85,1211.11 1270.44,1211.11 1271.02,1211.11 1271.61,1211.11 1272.19,1211.11 1272.78,1211.11 1273.37,1211.11 1273.95,1211.11 1274.54,1211.11 1275.13,1211.11 1275.71,1211.11 1276.3,1211.11 1276.89,1211.11 1277.47,1211.11 1278.06,1211.11 1278.65,1211.11 1279.23,1211.11 1279.82,1211.11 1280.4,1211.11 1280.99,1211.11 1281.58,1211.11 1282.16,1211.11 1282.75,1211.11 1283.34,1211.11 1283.92,1211.11 1284.51,1211.11 1285.1,1211.11 1285.68,1211.11 1286.27,1211.11 1286.86,1211.11 1287.44,1211.11 1288.03,1211.11 1288.61,1211.11 1289.2,1211.11 1289.79,1211.11 1290.37,1211.11 1290.96,1211.11 1291.55,1211.11 1292.13,1211.11 1292.72,1211.11 1293.31,1211.11 1293.89,1211.11 1294.48,1211.11 1295.06,1211.11 1295.65,1211.11 1296.24,1211.11 1296.82,1211.11 1297.41,1211.11 1298,1211.11 1298.58,1211.11 1299.17,1211.11 1299.76,1211.11 1300.34,1211.11 1300.93,1211.11 1301.52,1211.11 1302.1,1211.11 1302.69,1211.11 1303.27,1211.11 1303.86,1211.11 1304.45,1211.11 1305.03,1211.11 1305.62,1211.11 1306.21,1211.11 1306.79,1211.11 1307.38,1211.11 1307.97,1211.11 1308.55,1211.11 1309.14,1211.11 1309.73,1211.11 1310.31,1211.11 1310.9,1211.11 1311.48,1211.11 1312.07,1211.11 1312.66,1211.11 1313.24,1211.11 1313.83,1211.11 1314.42,1211.11 1315,1211.11 1315.59,1211.11 1316.18,1211.11 1316.76,1211.11 1317.35,1211.11 1317.93,1211.11 1318.52,1211.11 1319.11,1211.11 1319.69,1211.11 1320.28,1211.11 1320.87,1211.11 1321.45,1211.11 1322.04,1211.11 1322.63,1211.11 1323.21,1211.11 1323.8,1211.11 1324.39,1211.11 1324.97,1211.11 1325.56,1211.11 1326.14,1211.11 1326.73,1211.11 1327.32,1211.11 1327.9,1211.11 1328.49,1211.11 1329.08,1211.11 1329.66,1211.11 1330.25,1211.11 1330.84,1211.11 1331.42,1211.11 1332.01,1211.11 1332.6,1211.11 1333.18,1211.11 1333.77,1211.11 1334.35,1211.11 1334.94,1211.11 1335.53,1211.11 1336.11,1211.11 1336.7,1211.11 1337.29,1211.11 1337.87,1211.11 1338.46,1211.11 1339.05,1211.11 1339.63,1211.11 1340.22,1211.11 1340.8,1211.11 1341.39,1211.11 1341.98,1211.11 1342.56,1211.11 1343.15,1211.11 1343.74,1211.11 1344.32,1211.11 1344.91,1211.11 1345.5,1211.11 1346.08,1211.11 1346.67,1211.11 1347.26,1211.11 1347.84,1211.11 1348.43,1211.11 1349.01,1211.11 1349.6,1211.11 1350.19,1211.11 1350.77,1211.11 1351.36,1211.11 1351.95,1211.11 1352.53,1211.11 1353.12,1211.11 1353.71,1211.11 1354.29,1211.11 1354.88,1211.11 1355.47,1211.11 1356.05,1211.11 1356.64,1211.11 1357.22,1211.11 1357.81,1211.11 1358.4,1211.11 1358.98,1211.11 1359.57,1211.11 1360.16,1211.11 1360.74,1211.11 1361.33,1211.11 1361.92,1211.11 1362.5,1211.11 1363.09,1211.11 1363.68,1211.11 1364.26,1211.11 1364.85,1211.11 1365.43,1211.11 1366.02,1211.11 1366.61,1211.11 1367.19,1211.11 1367.78,1211.11 1368.37,1211.11 1368.95,1211.11 1369.54,1211.11 1370.13,1211.11 1370.71,1211.11 1371.3,1211.11 1371.88,1211.11 1372.47,1211.11 1373.06,1211.11 1373.64,1211.11 1374.23,1211.11 1374.82,1211.11 1375.4,1211.11 1375.99,1211.11 1376.58,1211.11 1377.16,1211.11 1377.75,1211.11 1378.34,1211.11 1378.92,1211.11 1379.51,1211.11 1380.09,1211.11 1380.68,1211.11 1381.27,1211.11 1381.85,1211.11 1382.44,1211.11 1383.03,1211.11 1383.61,1211.11 1384.2,1211.11 1384.79,1211.11 1385.37,1211.11 1385.96,1211.11 1386.55,1211.11 1387.13,1211.11 1387.72,1211.11 1388.3,1211.11 1388.89,1211.11 1389.48,1211.11 1390.06,1211.11 1390.65,1211.11 1391.24,1211.11 1391.82,1211.11 1392.41,1211.11 1393,1211.11 1393.58,1211.11 1394.17,1211.11 1394.75,1211.11 1395.34,1211.11 1395.93,1211.11 1396.51,1211.11 1397.1,1211.11 1397.69,1211.11 1398.27,1211.11 1398.86,1211.11 1399.45,1211.11 1400.03,1211.11 1400.62,1211.11 1401.21,1211.11 1401.79,1211.11 1402.38,1211.11 1402.96,1211.11 1403.55,1211.11 1404.14,1211.11 1404.72,1211.11 1405.31,1211.11 1405.9,1211.11 1406.48,1211.11 1407.07,1211.11 1407.66,1211.11 1408.24,1211.11 1408.83,1211.11 1409.42,1211.11 1410,1211.11 1410.59,1211.11 1411.17,1211.11 1411.76,1211.11 1412.35,1211.11 1412.93,1211.11 1413.52,1211.11 1414.11,1211.11 1414.69,1211.11 1415.28,1211.11 1415.87,1211.11 1416.45,1211.11 1417.04,1211.11 1417.63,1211.11 1418.21,1211.11 1418.8,1211.11 1419.38,1211.11 1419.97,1211.11 1420.56,1211.11 1421.14,1211.11 1421.73,1211.11 1422.32,1211.11 1422.9,1211.11 1423.49,1211.11 1424.08,1211.11 1424.66,1211.11 1425.25,1211.11 1425.83,1211.11 1426.42,1211.11 1427.01,1211.11 1427.59,1211.11 1428.18,1211.11 1428.77,1211.11 1429.35,1211.11 1429.94,1211.11 1430.53,1211.11 1431.11,1211.11 1431.7,1211.11 1432.29,1211.11 1432.87,1211.11 1433.46,1211.11 1434.04,1211.11 1434.63,1211.11 1435.22,1211.11 1435.8,1211.11 1436.39,1211.11 1436.98,1211.11 1437.56,1211.11 1438.15,1211.11 1438.74,1211.11 1439.32,1211.11 1439.91,1211.11 1440.5,1211.11 1441.08,1211.11 1441.67,1211.11 1442.25,1211.11 1442.84,1211.11 1443.43,1211.11 1444.01,1211.11 1444.6,1211.11 1445.19,1211.11 1445.77,1211.11 1446.36,1211.11 1446.95,1211.11 1447.53,1211.11 1448.12,1211.11 1448.7,1211.11 1449.29,1211.11 1449.88,1211.11 1450.46,1211.11 1451.05,1211.11 1451.64,1211.11 1452.22,1211.11 1452.81,1211.11 1453.4,1211.11 1453.98,1211.11 1454.57,1211.11 1455.16,1211.11 1455.74,1211.11 1456.33,1211.11 1456.91,1211.11 1457.5,1211.11 1458.09,1211.11 1458.67,1211.11 1459.26,1211.11 1459.85,1211.11 1460.43,1211.11 1461.02,1211.11 1461.61,1211.11 1462.19,1211.11 1462.78,1211.11 1463.37,1211.11 1463.95,1211.11 1464.54,1211.11 1465.12,1211.11 1465.71,1211.11 1466.3,1211.11 1466.88,1211.11 1467.47,1211.11 1468.06,1211.11 1468.64,1211.11 1469.23,1211.11 1469.82,1211.11 1470.4,1211.11 1470.99,1211.11 1471.57,1211.11 1472.16,1211.11 1472.75,1211.11 1473.33,1211.11 1473.92,1211.11 1474.51,1211.11 1475.09,1211.11 1475.68,1211.11 1476.27,1211.11 1476.85,1211.11 1477.44,1211.11 1478.03,1211.11 1478.61,1211.11 1479.2,1211.11 1479.78,1211.11 1480.37,1211.11 1480.96,1211.11 1481.54,1211.11 1482.13,1211.11 1482.72,1211.11 1483.3,1211.11 1483.89,1211.11 1484.48,1211.11 1485.06,1211.11 1485.65,1211.11 1486.24,1211.11 1486.82,1211.11 1487.41,1211.11 1487.99,1211.11 1488.58,1211.11 1489.17,1211.11 1489.75,1211.11 1490.34,1211.11 1490.93,1211.11 1491.51,1211.11 1492.1,1211.11 1492.69,1211.11 1493.27,1211.11 1493.86,1211.11 1494.45,1211.11 1495.03,1211.11 1495.62,1211.11 1496.2,1211.11 1496.79,1211.11 1497.38,1211.11 1497.96,1211.11 1498.55,1211.11 1499.14,1211.11 1499.72,1211.11 1500.31,1211.11 1500.9,1211.11 1501.48,1211.11 1502.07,1211.11 1502.65,1211.11 1503.24,1211.11 1503.83,1211.11 1504.41,1211.11 1505,1211.11 1505.59,1211.11 1506.17,1211.11 1506.76,1211.11 1507.35,1211.11 1507.93,1211.11 1508.52,1211.11 1509.11,1211.11 1509.69,1211.11 1510.28,1211.11 1510.86,1211.11 1511.45,1211.11 1512.04,1211.11 1512.62,1211.11 1513.21,1211.11 1513.8,1211.11 1514.38,1211.11 1514.97,1211.11 1515.56,1211.11 1516.14,1211.11 1516.73,1211.11 1517.32,1211.11 1517.9,1211.11 1518.49,1211.11 1519.07,1211.11 1519.66,1211.11 1520.25,1211.11 1520.83,1211.11 1521.42,1211.11 1522.01,1211.11 1522.59,1211.11 1523.18,1211.11 1523.77,1211.11 1524.35,1211.11 1524.94,1211.11 1525.52,1211.11 1526.11,1211.11 1526.7,1211.11 1527.28,1211.11 1527.87,1211.11 1528.46,1211.11 1529.04,1211.11 1529.63,1211.11 1530.22,1211.11 1530.8,1211.11 1531.39,1211.11 1531.98,1211.11 1532.56,1211.11 1533.15,1211.11 1533.73,1211.11 1534.32,1211.11 1534.91,1211.11 1535.49,1211.11 1536.08,1211.11 1536.67,1211.11 1537.25,1211.11 1537.84,1211.11 1538.43,1211.11 1539.01,1211.11 1539.6,1211.11 1540.19,1211.11 1540.77,1211.11 1541.36,1211.11 1541.94,1211.11 1542.53,1211.11 1543.12,1211.11 1543.7,1211.11 1544.29,1211.11 1544.88,1211.11 1545.46,1211.11 1546.05,1211.11 1546.64,1211.11 1547.22,1211.11 1547.81,1211.11 1548.4,1211.11 1548.98,1211.11 1549.57,1211.11 1550.15,1211.11 1550.74,1211.11 1551.33,1211.11 1551.91,1211.11 1552.5,1211.11 1553.09,1211.11 1553.67,1211.11 1554.26,1211.11 1554.85,1211.11 1555.43,1211.11 1556.02,1211.11 1556.6,1211.11 1557.19,1211.11 1557.78,1211.11 1558.36,1211.11 1558.95,1211.11 1559.54,1211.11 1560.12,1211.11 1560.71,1211.11 1561.3,1211.11 1561.88,1211.11 1562.47,1211.11 1563.06,1211.11 1563.64,1211.11 1564.23,1211.11 1564.81,1211.11 1565.4,1211.11 1565.99,1211.11 1566.57,1211.11 1567.16,1211.11 1567.75,1211.11 1568.33,1211.11 1568.92,1211.11 1569.51,1211.11 1570.09,1211.11 1570.68,1211.11 1571.27,1211.11 1571.85,1211.11 1572.44,1211.11 1573.02,1211.11 1573.61,1211.11 1574.2,1211.11 1574.78,1211.11 1575.37,1211.11 1575.96,1211.11 1576.54,1211.11 1577.13,1211.11 1577.72,1211.11 1578.3,1211.11 1578.89,1211.11 1579.47,1211.11 1580.06,1211.11 1580.65,1211.11 1581.23,1211.11 1581.82,1211.11 1582.41,1211.11 1582.99,1211.11 1583.58,1211.11 1584.17,1211.11 1584.75,1211.11 1585.34,1211.11 1585.93,1211.11 1586.51,1211.11 1587.1,1211.11 1587.68,1211.11 1588.27,1211.11 1588.86,1211.11 1589.44,1211.11 1590.03,1211.11 1590.62,1211.11 1591.2,1211.11 1591.79,1211.11 1592.38,1211.11 1592.96,1211.11 1593.55,1211.11 1594.14,1211.11 1594.72,1211.11 1595.31,1211.11 1595.89,1211.11 1596.48,1211.11 1597.07,1211.11 1597.65,1211.11 1598.24,1211.11 1598.83,1211.11 1599.41,1211.11 1600,1211.11 1600.59,1211.11 1601.17,1211.11 1601.76,1211.11 1602.34,1211.11 1602.93,1211.11 1603.52,1211.11 1604.1,1211.11 1604.69,1211.11 1605.28,1211.11 1605.86,1211.11 1606.45,1211.11 1607.04,1211.11 1607.62,1211.11 1608.21,1211.11 1608.8,1211.11 1609.38,1211.11 1609.97,1211.11 1610.55,1211.11 1611.14,1211.11 1611.73,1211.11 1612.31,1211.11 1612.9,1211.11 1613.49,1211.11 1614.07,1211.11 1614.66,1211.11 1615.25,1211.11 1615.83,1211.11 1616.42,1211.11 1617.01,1211.11 1617.59,1211.11 1618.18,1211.11 1618.76,1211.11 1619.35,1211.11 1619.94,1211.11 1620.52,1211.11 1621.11,1211.11 1621.7,1211.11 1622.28,1211.11 1622.87,1211.11 1623.46,1211.11 1624.04,1211.11 1624.63,1211.11 1625.22,1211.11 1625.8,1211.11 1626.39,1211.11 1626.97,1211.11 1627.56,1211.11 1628.15,1211.11 1628.73,1211.11 1629.32,1211.11 1629.91,1211.11 1630.49,1211.11 1631.08,1211.11 1631.67,1211.11 1632.25,1211.11 1632.84,1211.11 1633.42,1211.11 1634.01,1211.11 1634.6,1211.11 1635.18,1211.11 1635.77,1211.11 1636.36,1211.11 1636.94,1211.11 1637.53,1211.11 1638.12,1211.11 1638.7,1211.11 1639.29,1211.11 1639.88,1211.11 1640.46,1211.11 1641.05,1211.11 1641.63,1211.11 1642.22,1211.11 1642.81,1211.11 1643.39,1211.11 1643.98,1211.11 1644.57,1211.11 1645.15,1211.11 1645.74,1211.11 1646.33,1211.11 1646.91,1211.11 1647.5,1211.11 1648.09,1211.11 1648.67,1211.11 1649.26,1211.11 1649.84,1211.11 1650.43,1211.11 1651.02,1211.11 1651.6,1211.11 1652.19,1211.11 1652.78,1211.11 1653.36,1211.11 1653.95,1211.11 1654.54,1211.11 1655.12,1211.11 1655.71,1211.11 1656.29,1211.11 1656.88,1211.11 1657.47,1211.11 1658.05,1211.11 1658.64,1211.11 1659.23,1211.11 1659.81,1211.11 1660.4,1211.11 1660.99,1211.11 1661.57,1211.11 1662.16,1211.11 1662.75,1211.11 1663.33,1211.11 1663.92,1211.11 1664.5,1211.11 1665.09,1211.11 1665.68,1211.11 1666.26,1211.11 1666.85,1211.11 1667.44,1211.11 1668.02,1211.11 1668.61,1211.11 1669.2,1211.11 1669.78,1211.11 1670.37,1211.11 1670.96,1211.11 1671.54,1211.11 1672.13,1211.11 1672.71,1211.11 1673.3,1211.11 1673.89,1211.11 1674.47,1211.11 1675.06,1211.11 1675.65,1211.11 1676.23,1211.11 1676.82,1211.11 1677.41,1211.11 1677.99,1211.11 1678.58,1211.11 1679.17,1211.11 1679.75,1211.11 1680.34,1211.11 1680.92,1211.11 1681.51,1211.11 1682.1,1211.11 1682.68,1211.11 1683.27,1211.11 1683.86,1211.11 1684.44,1211.11 1685.03,1211.11 1685.62,1211.11 1686.2,1211.11 1686.79,1211.11 1687.37,1211.11 1687.96,1211.11 1688.55,1211.11 1689.13,1211.11 1689.72,1211.11 1690.31,1211.11 1690.89,1211.11 1691.48,1211.11 1692.07,1211.11 1692.65,1211.11 1693.24,1211.11 1693.83,1211.11 1694.41,1211.11 1695,1211.11 1695.58,1211.11 1696.17,1211.11 1696.76,1211.11 1697.34,1211.11 1697.93,1211.11 1698.52,1211.11 1699.1,1211.11 1699.69,1211.11 1700.28,1211.11 1700.86,1211.11 1701.45,1211.11 1702.04,1211.11 1702.62,1211.11 1703.21,1211.11 1703.79,1211.11 1704.38,1211.11 1704.97,1211.11 1705.55,1211.11 1706.14,1211.11 1706.73,1211.11 1707.31,1211.11 1707.9,1211.11 1708.49,1211.11 1709.07,1211.11 1709.66,1211.11 1710.24,1211.11 1710.83,1211.11 1711.42,1211.11 1712,1211.11 1712.59,1211.11 1713.18,1211.11 1713.76,1211.11 1714.35,1211.11 1714.94,1211.11 1715.52,1211.11 1716.11,1211.11 1716.7,1211.11 1717.28,1211.11 1717.87,1211.11 1718.45,1211.11 1719.04,1211.11 1719.63,1211.11 1720.21,1211.11 1720.8,1211.11 1721.39,1211.11 1721.97,1211.11 1722.56,1211.11 1723.15,1211.11 1723.73,1211.11 1724.32,1211.11 1724.91,1211.11 1725.49,1211.11 1726.08,1211.11 1726.66,1211.11 1727.25,1211.11 1727.84,1211.11 1728.42,1211.11 1729.01,1211.11 1729.6,1211.11 1730.18,1211.11 1730.77,1211.11 1731.36,1211.11 1731.94,1211.11 1732.53,1211.11 1733.11,1211.11 1733.7,1211.11 1734.29,1211.11 1734.87,1211.11 1735.46,1211.11 1736.05,1211.11 1736.63,1211.11 1737.22,1211.11 1737.81,1211.11 1738.39,1211.11 1738.98,1211.11 1739.57,1211.11 1740.15,1211.11 1740.74,1211.11 1741.32,1211.11 1741.91,1211.11 1742.5,1211.11 1743.08,1211.11 1743.67,1211.11 1744.26,1211.11 1744.84,1211.11 1745.43,1211.11 1746.02,1211.11 1746.6,1211.11 1747.19,1211.11 1747.78,1211.11 1748.36,1211.11 1748.95,1211.11 1749.53,1211.11 1750.12,1211.11 1750.71,1211.11 1751.29,1211.11 1751.88,1211.11 1752.47,1211.11 1753.05,1211.11 1753.64,1211.11 1754.23,1211.11 1754.81,1211.11 1755.4,1211.11 1755.99,1211.11 1756.57,1211.11 1757.16,1211.11 1757.74,1211.11 1758.33,1211.11 1758.92,1211.11 1759.5,1211.11 1760.09,1211.11 1760.68,1211.11 1761.26,1211.11 1761.85,1211.11 1762.44,1211.11 1763.02,1211.11 1763.61,1211.11 1764.19,1211.11 1764.78,1211.11 1765.37,1211.11 1765.95,1211.11 1766.54,1211.11 1767.13,1211.11 1767.71,1211.11 1768.3,1211.11 1768.89,1211.11 1769.47,1211.11 1770.06,1211.11 1770.65,1211.11 1771.23,1211.11 1771.82,1211.11 1772.4,1211.11 1772.99,1211.11 1773.58,1211.11 1774.16,1211.11 1774.75,1211.11 1775.34,1211.11 1775.92,1211.11 1776.51,1211.11 1777.1,1211.11 1777.68,1211.11 1778.27,1211.11 1778.86,1211.11 1779.44,1211.11 1780.03,1211.11 1780.61,1211.11 1781.2,1211.11 1781.79,1211.11 1782.37,1211.11 1782.96,1211.11 1783.55,1211.11 1784.13,1211.11 1784.72,1211.11 1785.31,1211.11 1785.89,1211.11 1786.48,1211.11 1787.06,1211.11 1787.65,1211.11 1788.24,1211.11 1788.82,1211.11 1789.41,1211.11 1790,1211.11 1790.58,1211.11 1791.17,1211.11 1791.76,1211.11 1792.34,1211.11 1792.93,1211.11 1793.52,1211.11 1794.1,1211.11 1794.69,1211.11 1795.27,1211.11 1795.86,1211.11 1796.45,1211.11 1797.03,1211.11 1797.62,1211.11 1798.21,1211.11 1798.79,1211.11 1799.38,1211.11 1799.97,1211.11 1800.55,1211.11 1801.14,1211.11 1801.73,1211.11 1802.31,1211.11 1802.9,1211.11 1803.48,1211.11 1804.07,1211.11 1804.66,1211.11 1805.24,1211.11 1805.83,1211.11 1806.42,1211.11 1807,1211.11 1807.59,1211.11 1808.18,1211.11 1808.76,1211.11 1809.35,1211.11 1809.94,1211.11 1810.52,1211.11 1811.11,1211.11 1811.69,1211.11 1812.28,1211.11 1812.87,1211.11 1813.45,1211.11 1814.04,1211.11 1814.63,1211.11 1815.21,1211.11 1815.8,1211.11 1816.39,1211.11 1816.97,1211.11 1817.56,1211.11 1818.14,1211.11 1818.73,1211.11 1819.32,1211.11 1819.9,1211.11 1820.49,1211.11 1821.08,1211.11 1821.66,1211.11 1822.25,1211.11 1822.84,1211.11 1823.42,1211.11 1824.01,1211.11 1824.6,1211.11 1825.18,1211.11 1825.77,1211.11 1826.35,1211.11 1826.94,1211.11 1827.53,1211.11 1828.11,1211.11 1828.7,1211.11 1829.29,1211.11 1829.87,1211.11 1830.46,1211.11 1831.05,1211.11 1831.63,1211.11 1832.22,1211.11 1832.81,1211.11 1833.39,1211.11 1833.98,1211.11 1834.56,1211.11 1835.15,1211.11 1835.74,1211.11 1836.32,1211.11 1836.91,1211.11 1837.5,1211.11 1838.08,1211.11 1838.67,1211.11 1839.26,1211.11 1839.84,1211.11 1840.43,1211.11 1841.01,1211.11 1841.6,1211.11 1842.19,1211.11 1842.77,1211.11 1843.36,1211.11 1843.95,1211.11 1844.53,1211.11 1845.12,1211.11 1845.71,1211.11 1846.29,1211.11 1846.88,1211.11 1847.47,1211.11 1848.05,1211.11 1848.64,1211.11 1849.22,1211.11 1849.81,1211.11 1850.4,1211.11 1850.98,1211.11 1851.57,1211.11 1852.16,1211.11 1852.74,1211.11 1853.33,1211.11 1853.92,1211.11 1854.5,1211.11 1855.09,1211.11 1855.68,1211.11 1856.26,1211.11 1856.85,1211.11 1857.43,1211.11 1858.02,1211.11 1858.61,1211.11 1859.19,1211.11 1859.78,1211.11 1860.37,1211.11 1860.95,1211.11 1861.54,1211.11 1862.13,1211.11 1862.71,1211.11 1863.3,1211.11 1863.88,1211.11 1864.47,1211.11 1865.06,1211.11 1865.64,1211.11 1866.23,1211.11 1866.82,1211.11 1867.4,1211.11 1867.99,1211.11 1868.58,1211.11 1869.16,1211.11 1869.75,1211.11 1870.34,1211.11 1870.92,1211.11 1871.51,1211.11 1872.09,1211.11 1872.68,1211.11 1873.27,1211.11 1873.85,1211.11 1874.44,1211.11 1875.03,1211.11 1875.61,1211.11 1876.2,1211.11 1876.79,1211.11 1877.37,1211.11 1877.96,1211.11 1878.55,1211.11 1879.13,1211.11 1879.72,1211.11 1880.3,1211.11 1880.89,1211.11 1881.48,1211.11 1882.06,1211.11 1882.65,1211.11 1883.24,1211.11 1883.82,1211.11 1884.41,1211.11 1885,1211.11 1885.58,1211.11 1886.17,1211.11 1886.76,1211.11 1887.34,1211.11 1887.93,1211.11 1888.51,1211.11 1889.1,1211.11 1889.69,1211.11 1890.27,1211.11 1890.86,1211.11 1891.45,1211.11 1892.03,1211.11 1892.62,1211.11 1893.21,1211.11 1893.79,1211.11 1894.38,1211.11 1894.96,1211.11 1895.55,1211.11 1896.14,1211.11 1896.72,1211.11 1897.31,1211.11 1897.9,1211.11 1898.48,1211.11 1899.07,1211.11 1899.66,1211.11 1900.24,1211.11 1900.83,1211.11 1901.42,1211.11 1902,1211.11 1902.59,1211.11 1903.17,1211.11 1903.76,1211.11 1904.35,1211.11 1904.93,1211.11 1905.52,1211.11 1906.11,1211.11 1906.69,1211.11 1907.28,1211.11 1907.87,1211.11 1908.45,1211.11 1909.04,1211.11 1909.63,1211.11 1910.21,1211.11 1910.8,1211.11 1911.38,1211.11 1911.97,1211.11 1912.56,1211.11 1913.14,1211.11 1913.73,1211.11 1914.32,1211.11 1914.9,1211.11 1915.49,1211.11 1916.08,1211.11 1916.66,1211.11 1917.25,1211.11 1917.83,1211.11 1918.42,1211.11 1919.01,1211.11 1919.59,1211.11 1920.18,1211.11 1920.77,1211.11 1921.35,1211.11 1921.94,1211.11 1922.53,1211.11 1923.11,1211.11 1923.7,1211.11 1924.29,1211.11 1924.87,1211.11 1925.46,1211.11 1926.04,1211.11 1926.63,1211.11 1927.22,1211.11 1927.8,1211.11 1928.39,1211.11 1928.98,1211.11 1929.56,1211.11 1930.15,1211.11 1930.74,1211.11 1931.32,1211.11 1931.91,1211.11 1932.5,1211.11 1933.08,1211.11 1933.67,1211.11 1934.25,1211.11 1934.84,1211.11 1935.43,1211.11 1936.01,1211.11 1936.6,1211.11 1937.19,1211.11 1937.77,1211.11 1938.36,1211.11 1938.95,1211.11 1939.53,1211.11 1940.12,1211.11 1940.71,1211.11 1941.29,1211.11 1941.88,1211.11 1942.46,1211.11 1943.05,1211.11 1943.64,1211.11 1944.22,1211.11 1944.81,1211.11 1945.4,1211.11 1945.98,1211.11 1946.57,1211.11 1947.16,1211.11 1947.74,1211.11 1948.33,1211.11 1948.91,1211.11 1949.5,1211.11 1950.09,1211.11 1950.67,1211.11 1951.26,1211.11 1951.85,1211.11 1952.43,1211.11 1953.02,1211.11 1953.61,1211.11 1954.19,1211.11 1954.78,1211.11 1955.37,1211.11 1955.95,1211.11 1956.54,1211.11 1957.12,1211.11 1957.71,1211.11 1958.3,1211.11 1958.88,1211.11 1959.47,1211.11 1960.06,1211.11 1960.64,1211.11 1961.23,1211.11 1961.82,1211.11 1962.4,1211.11 1962.99,1211.11 1963.58,1211.11 1964.16,1211.11 1964.75,1211.11 1965.33,1211.11 1965.92,1211.11 1966.51,1211.11 1967.09,1211.11 1967.68,1211.11 1968.27,1211.11 1968.85,1211.11 1969.44,1211.11 1970.03,1211.11 1970.61,1211.11 1971.2,1211.11 1971.78,1211.11 1972.37,1211.11 1972.96,1211.11 1973.54,1211.11 1974.13,1211.11 1974.72,1211.11 1975.3,1211.11 1975.89,1211.11 1976.48,1211.11 1977.06,1211.11 1977.65,1211.11 1978.24,1211.11 1978.82,1211.11 1979.41,1211.11 1979.99,1211.11 1980.58,1211.11 1981.17,1211.11 1981.75,1211.11 1982.34,1211.11 1982.93,1211.11 1983.51,1211.11 1984.1,1211.11 1984.69,1211.11 1985.27,1211.11 1985.86,1211.11 1986.45,1211.11 1987.03,1211.11 1987.62,1211.11 1988.2,1211.11 1988.79,1211.11 1989.38,1211.11 1989.96,1211.11 1990.55,1211.11 1991.14,1211.11 1991.72,1211.11 1992.31,1211.11 1992.9,1211.11 1993.48,1211.11 1994.07,1211.11 1994.65,1211.11 1995.24,1211.11 1995.83,1211.11 1996.41,1211.11 1997,1211.11 1997.59,1211.11 1998.17,1211.11 1998.76,1211.11 1999.35,1211.11 1999.93,1211.11 2000.52,1211.11 2001.11,1211.11 2001.69,1211.11 2002.28,1211.11 2002.86,1211.11 2003.45,1211.11 2004.04,1211.11 2004.62,1211.11 2005.21,1211.11 2005.8,1211.11 2006.38,1211.11 2006.97,1211.11 2007.56,1211.11 2008.14,1211.11 2008.73,1211.11 2009.32,1211.11 2009.9,1211.11 2010.49,1211.11 2011.07,1211.11 2011.66,1211.11 2012.25,1211.11 2012.83,1211.11 2013.42,1211.11 2014.01,1211.11 2014.59,1211.11 2015.18,1211.11 2015.77,1211.11 2016.35,1211.11 2016.94,1211.11 2017.53,1211.11 2018.11,1211.11 2018.7,1211.11 2019.28,1211.11 2019.87,1211.11 2020.46,1211.11 2021.04,1211.11 2021.63,1211.11 2022.22,1211.11 2022.8,1211.11 2023.39,1211.11 2023.98,1211.11 2024.56,1211.11 2025.15,1211.11 2025.73,1211.11 2026.32,1211.11 2026.91,1211.11 2027.49,1211.11 2028.08,1211.11 2028.67,1211.11 2029.25,1211.11 2029.84,1211.11 2030.43,1211.11 2031.01,1211.11 2031.6,1211.11 2032.19,1211.11 2032.77,1211.11 2033.36,1211.11 2033.94,1211.11 2034.53,1211.11 2035.12,1211.11 2035.7,1211.11 2036.29,1211.11 2036.88,1211.11 2037.46,1211.11 2038.05,1211.11 2038.64,1211.11 2039.22,1211.11 2039.81,1211.11 2040.4,1211.11 2040.98,1211.11 2041.57,1211.11 2042.15,1211.11 2042.74,1211.11 2043.33,1211.11 2043.91,1211.11 2044.5,1211.11 2045.09,1211.11 2045.67,1211.11 2046.26,1211.11 2046.85,1211.11 2047.43,1211.11 2048.02,1211.11 2048.6,1211.11 2049.19,1211.11 2049.78,1211.11 2050.36,1211.11 2050.95,1211.11 2051.54,1211.11 2052.12,1211.11 2052.71,1211.11 2053.3,1211.11 2053.88,1211.11 2054.47,1211.11 2055.06,1211.11 2055.64,1211.11 2056.23,1211.11 2056.81,1211.11 2057.4,1211.11 2057.99,1211.11 2058.57,1211.11 2059.16,1211.11 2059.75,1211.11 2060.33,1211.11 2060.92,1211.11 2061.51,1211.11 2062.09,1211.11 2062.68,1211.11 2063.27,1211.11 2063.85,1211.11 2064.44,1211.11 2065.02,1211.11 2065.61,1211.11 2066.2,1211.11 2066.78,1211.11 2067.37,1211.11 2067.96,1211.11 2068.54,1211.11 2069.13,1211.11 2069.72,1211.11 2070.3,1211.11 2070.89,1211.11 2071.48,1211.11 2072.06,1211.11 2072.65,1211.11 2073.23,1211.11 2073.82,1211.11 2074.41,1211.11 2074.99,1211.11 2075.58,1211.11 2076.17,1211.11 2076.75,1211.11 2077.34,1211.11 2077.93,1211.11 2078.51,1211.11 2079.1,1211.11 2079.68,1211.11 2080.27,1211.11 2080.86,1211.11 2081.44,1211.11 2082.03,1211.11 2082.62,1211.11 2083.2,1211.11 2083.79,1211.11 2084.38,1211.11 2084.96,1211.11 2085.55,1211.11 2086.14,1211.11 2086.72,1211.11 2087.31,1211.11 2087.89,1211.11 2088.48,1211.11 2089.07,1211.11 2089.65,1211.11 2090.24,1211.11 2090.83,1211.11 2091.41,1211.11 2092,1211.11 2092.59,1211.11 2093.17,1211.11 2093.76,1211.11 2094.35,1211.11 2094.93,1211.11 2095.52,1211.11 2096.1,1211.11 2096.69,1211.11 2097.28,1211.11 2097.86,1211.11 2098.45,1211.11 2099.04,1211.11 2099.62,1211.11 2100.21,1211.11 2100.8,1211.11 2101.38,1211.11 2101.97,1211.11 2102.55,1211.11 2103.14,1211.11 2103.73,1211.11 2104.31,1211.11 2104.9,1211.11 2105.49,1211.11 2106.07,1211.11 2106.66,1211.11 2107.25,1211.11 2107.83,1211.11 2108.42,1211.11 2109.01,1211.11 2109.59,1211.11 2110.18,1211.11 2110.76,1211.11 2111.35,1211.11 2111.94,1211.11 2112.52,1211.11 2113.11,1211.11 2113.7,1211.11 2114.28,1211.11 2114.87,1211.11 2115.46,1211.11 2116.04,1211.11 2116.63,1211.11 2117.22,1211.11 2117.8,1211.11 2118.39,1211.11 2118.97,1211.11 2119.56,1211.11 2120.15,1211.11 2120.73,1211.11 2121.32,1211.11 2121.91,1211.11 2122.49,1211.11 2123.08,1211.11 2123.67,1211.11 2124.25,1211.11 2124.84,1211.11 2125.42,1211.11 2126.01,1211.11 2126.6,1211.11 2127.18,1211.11 2127.77,1211.11 2128.36,1211.11 2128.94,1211.11 2129.53,1211.11 2130.12,1211.11 2130.7,1211.11 2131.29,1211.11 2131.88,1211.11 2132.46,1211.11 2133.05,1211.11 2133.63,1211.11 2134.22,1211.11 2134.81,1211.11 2135.39,1211.11 2135.98,1211.11 2136.57,1211.11 2137.15,1211.11 2137.74,1211.11 2138.33,1211.11 2138.91,1211.11 2139.5,1211.11 2140.09,1211.11 2140.67,1211.11 2141.26,1211.11 2141.84,1211.11 2142.43,1211.11 2143.02,1211.11 2143.6,1211.11 2144.19,1211.11 2144.78,1211.11 2145.36,1211.11 2145.95,1211.11 2146.54,1211.11 2147.12,1211.11 2147.71,1211.11 2148.3,1211.11 2148.88,1211.11 2149.47,1211.11 2150.05,1211.11 2150.64,1211.11 2151.23,1211.11 2151.81,1211.11 2152.4,1211.11 2152.99,1211.11 2153.57,1211.11 2154.16,1211.11 2154.75,1211.11 2155.33,1211.11 2155.92,1211.11 2156.5,1211.11 2157.09,1211.11 2157.68,1211.11 2158.26,1211.11 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.27,1191.62 1399.65,899.083 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.93 985.439,1191.62 2158.26,1191.62 2158.26,1229.93 985.439,1229.93 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip210)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip210)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip213\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip213)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip213)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip213)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip213)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip213)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip213)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip213)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip213)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip213)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip213)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip213)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-8354.17 166.029,-9052.18 166.588,-8610.35 167.147,-7353.73 167.706,-7155.23 168.266,-7766.34 168.825,-8305.94 169.384,-8813.44 169.943,-9267.94 170.503,-9672.87 171.062,-10031.5 171.621,-10346.8 172.18,-10621.6 172.74,-10341.3 173.299,-10087 173.858,-10280.4 174.417,-10435.5 174.977,-10187.2 175.536,-10330.3 176.095,-10101.1 176.655,-9888.13 177.214,-9688.18 177.773,-9507.38 178.332,-9592.82 178.892,-9652.42 179.451,-9691.18 180.01,-9698.8 180.569,-9710.18 181.129,-9494.96 181.688,-9477.42 182.247,-9435.65 182.806,-9390.09 183.366,-9341.98 183.925,-9127.87 184.484,-9060.93 185.043,-8708.03 185.603,-8493.36 186.162,-8289.97 186.721,-7848.36 187.28,-7652.56 187.84,-7464.69 188.399,-7286.58 188.958,-7093.09 189.517,-6814.38 190.077,-6636.18 190.636,-6541.23 191.195,-6205.84 191.754,-6113.51 192.314,-5870.71 192.873,-5781.93 193.432,-5622.73 193.991,-5526.08 194.551,-5429.5 195.11,-5157.3 195.669,-5061.72 196.228,-4912.76 196.788,-4659.67 197.347,-4318.81 197.906,-4198.3 198.465,-3926.69 199.025,-3857.86 199.584,-3746.18 200.143,-3540.26 200.702,-3433.49 201.262,-3200.38 201.821,-3066.49 202.38,-2929.53 202.939,-2877.85 203.499,-2780.26 204.058,-2688.93 204.617,-2637.25 205.176,-2579.33 205.736,-2487.24 206.295,-2428.43 206.854,-2339.11 207.413,-2278.87 207.973,-2156.16 208.532,-2035.83 209.091,-1797.85 209.65,-1720.28 210.21,-1678.35 210.769,-1600.44 211.328,-1413.52 211.887,-1347.17 212.447,-1276.42 213.006,-1162.2 213.565,-1102.98 214.124,-1074.37 214.684,-1012.85 215.243,-980.494 215.802,-870.703 216.361,-816.298 216.921,-786.713 217.48,-685.436 218.039,-661.236 218.598,-562.138 219.158,-534.153 219.717,-486.265 220.276,-367.982 220.835,-274.714 221.395,-209.511 221.954,-126.56 222.513,-87.7042 223.072,-33.4808 223.632,43.2714 224.191,55.0926 224.75,86.7954 225.309,140.381 225.869,169.285 226.428,181.203 226.987,232.013 227.546,237.794 228.106,241.224 228.665,286.616 229.224,296.711 229.783,322.234 230.343,328.411 230.902,397.514 231.461,420.041 232.02,424.629 232.58,446.029 233.139,471.37 233.698,513.841 234.257,514.961 234.817,517.277 235.376,521.941 235.935,504.64 236.494,531.125 237.054,590.215 237.613,611.788 238.172,616.742 238.731,657.187 239.291,660.297 239.85,665.381 240.409,689.468 240.968,706.351 241.528,706.723 242.087,723.632 242.646,721.653 243.205,737.876 243.765,773.593 244.324,769.928 244.883,770.882 245.442,769.381 246.002,802.784 246.561,800.484 247.12,818.172 247.679,816.97 248.239,851.998 248.798,865.711 249.357,863.005 249.916,895.833 250.476,907.731 251.035,906.623 251.594,975.854 252.153,983.95 252.713,979.254 253.272,970.952 253.831,982.822 254.39,936.616 254.95,898.557 255.509,914.638 256.068,964.087 256.627,942.233 257.187,939.103 257.746,932.51 258.305,894.282 258.864,897.896 259.424,911.752 259.983,929.065 260.542,942.665 261.101,970.282 261.661,962.9 262.22,961.296 262.779,992.539 263.338,1023.37 263.898,984.547 264.457,947.012 265.016,977.084 265.575,1005.94 266.135,982.776 266.694,996.153 267.253,992.63 267.812,988.444 268.372,964.873 268.931,944.655 269.49,944.287 270.049,941.834 270.609,940.655 271.168,970.203 271.727,964.139 272.286,995.089 272.846,990.055 273.405,1001.98 273.964,979.242 274.523,975.601 275.083,971.003 275.642,933.419 276.201,966.018 276.76,981.52 277.32,947.009 277.879,929.583 278.438,928.23 278.997,909.601 279.557,896.998 280.116,901.168 280.675,901.988 281.234,955.551 281.794,985.366 282.353,962.908 282.912,977.996 283.471,1010.87 284.031,1022.05 284.59,1032.58 285.149,1073.14 285.708,1029.11 286.268,1005.13 286.827,1002.11 287.386,981.121 287.945,993.294 288.505,1023.31 289.064,1035.95 289.623,1043.93 290.182,1056.6 290.742,1066.01 291.301,1124.01 291.86,1132.24 292.419,1121.08 292.979,1111.61 293.538,1116.73 294.097,1105.54 294.656,1110.42 295.216,1098.42 295.775,1103.92 296.334,1108.57 296.893,1114.96 297.453,1101.57 298.012,1089.37 298.571,1111.59 299.13,1116.03 299.69,1133.99 300.249,1122.93 300.808,1129.89 301.368,1132.61 301.927,1071.18 302.486,1042.55 303.045,1050.46 303.605,1043.24 304.164,1034.83 304.723,1046.41 305.282,1038.68 305.842,1046.69 306.401,1022.98 306.96,982.024 307.519,991.15 308.079,966.36 308.638,959.401 309.197,1018.82 309.756,1025.76 310.316,983.599 310.875,978.14 311.434,974.347 311.993,983.142 312.553,962.897 313.112,976.427 313.671,950.54 314.23,980.02 314.79,993.46 315.349,987.643 315.908,975.427 316.467,969.444 317.027,932.592 317.586,910.716 318.145,924.767 318.704,888.538 319.264,920.896 319.823,900.743 320.382,914.36 320.941,894.894 321.501,874.928 322.06,870.925 322.619,883.858 323.178,863.698 323.738,878.908 324.297,874.462 324.856,872.332 325.415,872.071 325.975,905.62 326.534,905.465 327.093,868.565 327.652,852.106 328.212,869.628 328.771,899.548 329.33,896.352 329.889,877.855 330.449,891.554 331.008,937.578 331.567,964.307 332.126,974.213 332.686,982.466 333.245,975.821 333.804,967.704 334.363,980.803 334.923,973.84 335.482,1000.68 336.041,1007.83 336.6,1003.89 337.16,994.369 337.719,971.611 338.278,965.494 338.837,925.175 339.397,965.149 339.956,962.629 340.515,958.144 341.074,951.773 341.634,963.185 342.193,940.009 342.752,934.517 343.311,932.176 343.871,928.265 344.43,921.193 344.989,930.636 345.548,961.449 346.108,968.519 346.667,946.618 347.226,907.394 347.785,918.572 348.345,914.039 348.904,894.798 349.463,890.737 350.022,900.522 350.582,930.915 351.141,924.208 351.7,904.396 352.259,917.545 352.819,931.001 353.378,924.606 353.937,934.099 354.496,942.2 355.056,935.752 355.615,929.37 356.174,909.444 356.733,920.325 357.293,914.181 357.852,890.958 358.411,968.754 358.97,978.815 359.53,969.399 360.089,959.869 360.648,1082.6 361.207,1067.95 361.767,1022.53 362.326,1010.6 362.885,969.169 363.444,958.417 364.004,967.937 364.563,956.599 365.122,961.453 365.681,915.641 366.241,907.856 366.8,915.554 367.359,911.836 367.918,906.744 368.478,900.146 369.037,896.236 369.596,895.842 370.155,854.365 370.715,854.328 371.274,847.913 371.833,847.335 372.392,845.217 372.952,859.699 373.511,854.264 374.07,833.823 374.629,833.607 375.189,814.89 375.748,778.8 376.307,779.548 376.866,796.412 377.426,811.009 377.985,811.741 378.544,840.642 379.103,836.924 379.663,835.745 380.222,865.474 380.781,895.882 381.34,876.656 381.9,840.17 382.459,852.253 383.018,832.251 383.577,784.647 384.137,785.951 384.696,835.561 385.255,822.155 385.814,809.218 386.374,822.167 386.933,837.636 387.492,847.001 388.051,841.757 388.611,840.213 389.17,855.268 389.729,837.44 390.288,834.434 390.848,847.215 391.407,847.237 391.966,859.482 392.525,857.742 393.085,868.745 393.644,864.226 394.203,909.659 394.762,904.569 395.322,911.151 395.881,904.259 396.44,899.107 396.999,894.337 397.559,889.781 398.118,887.526 398.677,867.494 399.236,844.92 399.796,813.435 400.355,807.886 400.914,822.46 401.473,819.375 402.033,822.191 402.592,836.033 403.151,834.699 403.71,850.661 404.27,845.901 404.829,875.731 405.388,866.631 405.947,859.9 406.507,838.455 407.066,801.724 407.625,819.691 408.184,786.571 408.744,804.085 409.303,853.957 409.862,867.749 410.421,849.479 410.981,828.859 411.54,837.393 412.099,820.852 412.658,833.938 413.218,815.703 413.777,850.329 414.336,834.854 414.895,815.705 415.455,813.413 416.014,746.484 416.573,765.478 417.132,751.018 417.692,764.494 418.251,762.97 418.81,827.565 419.369,856.431 419.929,815.409 420.488,829.319 421.047,825.895 421.606,808.129 422.166,837.559 422.725,816.785 423.284,795.3 423.843,803.827 424.403,752.079 424.962,705.42 425.521,722.952 426.08,690.92 426.64,727.546 427.199,713.899 427.758,749.155 428.318,735.722 428.877,722.461 429.436,743.202 429.995,727.566 430.555,744.797 431.114,745.776 431.673,726.862 432.232,729.701 432.792,733.322 433.351,701.584 433.91,672.713 434.469,643.087 435.029,682.271 435.588,689.621 436.147,630.166 436.706,605.311 437.266,612.965 437.825,622.375 438.384,645.918 438.943,653.04 439.503,673.863 440.062,695.217 440.621,663.828 441.18,652.31 441.74,691.991 442.299,693.342 442.858,692.973 443.417,731.928 443.977,734.803 444.536,718.012 445.095,685.635 445.654,706.167 446.214,708.836 446.773,729.462 447.332,727.956 447.891,728.422 448.451,709.691 449.01,744.46 449.569,745.369 450.128,746.531 450.688,779.554 451.247,808.598 451.806,825.629 452.365,770.507 452.925,784.901 453.484,768.444 454.043,748.528 454.602,763.823 455.162,746.057 455.721,728.756 456.28,647.354 456.839,651.441 457.399,655.582 457.958,656.132 458.517,661.88 459.076,666.869 459.636,702.039 460.195,702.887 460.754,738.792 461.313,756.5 461.873,740.498 462.432,743.068 462.991,726.648 463.55,708.562 464.11,694.179 464.669,683.685 465.228,705.83 465.787,691.812 466.347,723.989 466.906,708.307 467.465,694.912 468.024,711.763 468.584,748.592 469.143,765.999 469.702,767.396 470.261,786.315 470.821,801.036 471.38,778.585 471.939,793.01 472.498,790.071 473.058,773.959 473.617,753.799 474.176,719.876 474.735,686.273 475.295,673.357 475.854,674.514 476.413,692.475 476.972,710.974 477.532,694.873 478.091,683.75 478.65,668.623 479.209,718.166 479.769,717.073 480.328,718.992 480.887,719.598 481.446,722.993 482.006,723.448 482.565,726.51 483.124,712.01 483.683,730.919 484.243,764.964 484.802,716.742 485.361,720.41 485.92,707.242 486.48,725.684 487.039,724.02 487.598,740.821 488.157,755.025 488.717,748.914 489.276,766.991 489.835,768.157 490.394,765.552 490.954,745.159 491.513,757.938 492.072,757.391 492.631,773.356 493.191,740.31 493.75,757.059 494.309,758.957 494.868,777.555 495.428,758.938 495.987,774.682 496.546,771.632 497.105,849.154 497.665,825.9 498.224,775.094 498.783,790.121 499.342,786.996 499.902,766.804 500.461,749.092 501.02,763.9 501.579,746.328 502.139,727.973 502.698,746.268 503.257,713.06 503.816,699.648 504.376,699.762 504.935,685.152 505.494,689.996 506.053,687.5 506.613,669.135 507.172,670.053 507.731,655.099 508.29,673.832 508.85,677.194 509.409,662.071 509.968,649.516 510.527,656.682 511.087,662.638 511.646,716.114 512.205,701.64 512.764,721.244 513.324,738.077 513.883,752.514 514.442,752.134 515.001,785.136 515.561,795.399 516.12,805.869 516.679,803.415 517.238,812.923 517.798,793.647 518.357,774.286 518.916,772.459 519.475,738.694 520.035,738.572 520.594,740.907 521.153,756.119 521.712,750.252 522.272,778.468 522.831,791.123 523.39,806.778 523.949,816.321 524.509,841.304 525.068,847.552 525.627,904.775 526.186,892.411 526.746,899.597 527.305,888.424 527.864,893.993 528.423,883.8 528.983,890.935 529.542,926.226 530.101,898.67 530.66,904.545 531.22,898.011 531.779,921.132 532.338,892.308 532.897,903.329 533.457,908.671 534.016,899.011 534.575,838.463 535.134,817.539 535.694,827.166 536.253,808.215 536.812,771.008 537.371,787.291 537.931,768.761 538.49,780.72 539.049,796.897 539.608,759.777 540.168,790.299 540.727,786.064 541.286,799.071 541.845,779.842 542.405,761.908 542.964,761.891 543.523,775.452 544.082,773.936 544.642,771.278 545.201,765.286 545.76,759.105 546.319,768.89 546.879,765.235 547.438,747.974 547.997,747.767 548.556,746.969 549.116,745.214 549.675,727.357 550.234,678.319 550.793,662.913 551.353,661.267 551.912,614.341 552.471,620.456 553.031,640.759 553.59,627.047 554.149,649.36 554.708,651.94 555.268,654.417 555.827,704.454 556.386,705.703 556.945,755.003 557.505,702.264 558.064,703.28 558.623,702.614 559.182,670.941 559.742,660.035 560.301,665.013 560.86,652.124 561.419,625.159 561.979,600.116 562.538,606.874 563.097,595.666 563.656,553.517 564.216,563.868 564.775,605.744 565.334,610.701 565.893,616.022 566.453,656.195 567.012,678.173 567.571,696.764 568.13,713.976 568.69,748.372 569.249,760.915 569.808,739.901 570.367,754.805 570.927,788.129 571.486,797.582 572.045,774.501 572.604,771.073 573.164,770.745 573.723,814.766 574.282,793.743 574.841,802.963 575.401,812.203 575.96,793.41 576.519,774.332 577.078,770.124 577.638,768.245 578.197,734.092 578.756,760.245 579.315,774.667 579.875,773.315 580.434,773.65 580.993,754.204 581.552,735.416 582.112,752.816 582.671,752.559 583.23,769.258 583.789,762.354 584.349,773.984 584.908,786.1 585.467,782.955 586.026,760.231 586.586,755.818 587.145,720.334 587.704,704.636 588.263,734.581 588.823,685.323 589.382,687.69 589.941,658.524 590.5,696.542 591.06,679.539 591.619,682.487 592.178,650.717 592.737,668.51 593.297,673.543 593.856,691.048 594.415,658.4 594.974,644.22 595.534,647.653 596.093,650.82 596.652,687.207 597.211,692.172 597.771,659.703 598.33,678.307 598.889,695.913 599.448,695.02 600.008,715.368 600.567,730.655 601.126,745.691 601.685,710.124 602.245,723.738 602.804,718.809 603.363,718.798 603.922,718.99 604.482,700.755 605.041,702.315 605.6,735.81 606.159,748.873 606.719,766.518 607.278,763.951 607.837,762.184 608.396,794.429 608.956,757.94 609.515,773.411 610.074,773.088 610.633,768.85 611.193,749.871 611.752,761.525 612.311,776.737 612.87,772.425 613.43,770.38 613.989,779.696 614.548,758.577 615.107,783.492 615.667,730.633 616.226,724.034 616.785,721.244 617.344,704.063 617.904,699.856 618.463,697.748 619.022,681.275 619.581,714.797 620.141,747.853 620.7,746.264 621.259,744.024 621.818,758.182 622.378,705.498 622.937,708.679 623.496,723.375 624.055,725.069 624.615,756.307 625.174,768.9 625.733,764.122 626.292,710.612 626.852,728.422 627.411,725.983 627.97,739.452 628.529,734.838 629.089,719.818 629.648,768.497 630.207,780.972 630.766,763.323 631.326,744.761 631.885,775.487 632.444,770.617 633.003,734.607 633.563,765.796 634.122,794.099 634.681,758.44 635.24,755.043 635.8,734.209 636.359,730.297 636.918,710.933 637.477,663.832 638.037,684.689 638.596,719.719 639.155,703.723 639.714,704.863 640.274,689.458 640.833,675.825 641.392,692.318 641.951,709.142 642.511,673.682 643.07,692.73 643.629,723.022 644.188,719.086 644.748,751.552 645.307,731.053 645.866,714.755 646.425,727.583 646.985,742.312 647.544,737.529 648.103,765.024 648.662,715.759 649.222,729.521 649.781,732.428 650.34,713.766 650.899,698.086 651.459,693.496 652.018,694.453 652.577,724.153 653.136,740.975 653.696,737.929 654.255,749.868 654.814,745.589 655.373,742.917 655.933,738.645 656.492,701.994 657.051,702.495 657.61,706.743 658.17,670.266 658.729,671.726 659.288,658.562 659.847,693.595 660.407,711.01 660.966,725.673 661.525,757.098 662.084,755.849 662.644,768.827 663.203,748.004 663.762,761.608 664.321,740.588 664.881,727.084 665.44,711.63 665.999,726.484 666.558,692.794 667.118,695.415 667.677,695.589 668.236,647.043 668.795,632.296 669.355,605.047 669.914,643.159 670.473,677.53 671.032,645.821 671.592,644.322 672.151,644.227 672.71,665.092 673.269,714.588 673.829,733.412 674.388,731.104 674.947,714.953 675.506,697.021 676.066,698.333 676.625,715.892 677.184,669.712 677.743,659.329 678.303,659.413 678.862,659.526 679.421,662.196 679.981,664.536 680.54,682.195 681.099,633.739 681.658,619.731 682.218,638.639 682.777,661.089 683.336,627.955 683.895,648.729 684.455,702.619 685.014,720.477 685.573,719.659 686.132,688.72 686.692,688.304 687.251,682.539 687.81,670.119 688.369,672.161 688.929,639.859 689.488,643.315 690.047,643.729 690.606,661.802 691.166,680.769 691.725,668.555 692.284,670.513 692.843,704.305 693.403,691.151 693.962,676.617 694.521,676.658 695.08,644.634 695.64,615.716 696.199,635.842 696.758,654.992 697.317,612.72 697.877,633.737 698.436,637.306 698.995,658.238 699.554,660.416 700.114,681.694 700.673,701.262 701.232,703.211 701.791,684.415 702.351,654.199 702.91,671.676 703.469,658.992 704.028,678.796 704.588,713.726 705.147,712.748 705.706,694.625 706.265,658.999 706.825,694.843 707.384,680.124 707.943,677.587 708.502,677.753 709.062,677.155 709.621,693.225 710.18,739.756 710.739,753.623 711.299,719.327 711.858,735.015 712.417,701.101 712.976,700.84 713.536,699.939 714.095,667.486 714.654,666.7 715.213,653.309 715.773,678.559 716.332,665.997 716.891,653.185 717.45,654.854 718.01,655.749 718.569,640.943 719.128,645.591 719.687,631.866 720.247,620.847 720.806,609.661 721.365,616.218 721.924,609.485 722.484,599.25 723.043,572.105 723.602,595.7 724.161,602.694 724.721,595.843 725.28,618.243 725.839,572.786 726.398,562.079 726.958,589.747 727.517,594.811 728.076,618.666 728.635,639.311 729.195,647.118 729.754,635.719 730.313,657.934 730.872,677.077 731.432,662.305 731.991,664.317 732.55,664.566 733.109,666.938 733.669,653.83 734.228,686.798 734.787,705.761 735.346,706.711 735.906,707.622 736.465,692.28 737.024,709.8 737.583,710.529 738.143,757.805 738.702,755.479 739.261,751.768 739.82,767.317 740.38,763.836 740.939,761.563 741.498,775.11 742.057,815.672 742.617,796.897 743.176,791.395 743.735,786.31 744.294,793.377 744.854,801.307 745.413,794.937 745.972,773.245 746.531,751.738 747.091,760.186 747.65,754.917 748.209,732.423 748.768,747.02 749.328,773.645 749.887,722.135 750.446,720.958 751.005,733.2 751.565,733.947 752.124,766.022 752.683,776.275 753.242,786.456 753.802,747.236 754.361,713.826 754.92,696.048 755.479,693.524 756.039,676.584 756.598,690.11 757.157,693.009 757.716,725.411 758.276,741.317 758.835,739.252 759.394,717.158 759.953,699.094 760.513,734.511 761.072,765.59 761.631,746.934 762.19,744.082 762.75,737.687 763.309,749.456 763.868,745.236 764.427,711.188 764.987,725.813 765.546,772.728 766.105,753.985 766.664,764.504 767.224,792.934 767.783,753.937 768.342,734.933 768.901,697.802 769.461,695.751 770.02,699.144 770.579,714.01 771.138,692.94 771.698,677.808 772.257,678.442 772.816,679.537 773.375,699.061 773.935,684.421 774.494,701.543 775.053,669.337 775.612,669.238 776.172,652.978 776.731,655.719 777.29,638.61 777.849,641.223 778.409,646.118 778.968,618.042 779.527,640.658 780.086,659.162 780.646,645.452 781.205,658.204 781.764,674.554 782.323,629.526 782.883,646.682 783.442,579.941 784.001,588.992 784.56,610.405 785.12,597.278 785.679,600.848 786.238,589.36 786.797,593.9 787.357,598.709 787.916,570.899 788.475,592.476 789.034,598.057 789.594,618.049 790.153,606.079 790.712,597.582 791.271,568.269 791.831,574.752 792.39,583.899 792.949,589.775 793.508,596.421 794.068,620.683 794.627,622.952 795.186,658.836 795.745,676.767 796.305,681.045 796.864,634.782 797.423,608.706 797.982,596.732 798.542,635.573 799.101,689.926 799.66,689.853 800.219,690.898 800.779,723.857 801.338,739.67 801.897,703.658 802.456,705.798 803.016,705.299 803.575,689.633 804.134,721.914 804.693,753.039 805.253,764.35 805.812,744.307 806.371,742.646 806.931,771.355 807.49,781.795 808.049,760.043 808.608,773.113 809.168,766.53 809.727,778.087 810.286,817.3 810.845,812.38 811.405,820.615 811.964,811.035 812.523,801.823 813.082,780.683 813.642,775.014 814.201,782.312 814.76,744.573 815.319,740.967 815.879,734.713 816.438,700.27 816.997,680.36 817.556,682.778 818.116,684.922 818.675,685.777 819.234,683.406 819.793,697.037 820.353,696.253 820.912,694.95 821.471,676.241 822.03,672.779 822.59,674.632 823.149,689.643 823.708,705.23 824.267,702.623 824.827,764.208 825.386,777.017 825.945,757.135 826.504,736.073 827.064,734.489 827.623,750.802 828.182,750.273 828.741,745.087 829.301,744.294 829.86,727.046 830.419,703.759 830.978,667.934 831.538,652.415 832.097,686.514 832.656,673.438 833.215,689.31 833.775,706.991 834.334,720.933 834.893,666.595 835.452,687.192 836.012,672.348 836.571,689.86 837.13,673.362 837.689,674.666 838.249,693.619 838.808,676.179 839.367,679.393 839.926,729.914 840.486,711.426 841.045,729.738 841.604,730.169 842.163,726.369 842.723,741.196 843.282,772.266 843.841,779.373 844.4,771.629 844.96,781.46 845.519,764.599 846.078,759.721 846.637,757.356 847.197,753.795 847.756,747.641 848.315,794.185 848.874,755.1 849.434,734.822 849.993,732.27 850.552,726.583 851.111,740.876 851.671,725.4 852.23,724.41 852.789,659.211 853.348,661.785 853.908,663.978 854.467,649.502 855.026,633.883 855.585,621.216 856.145,623.477 856.704,626.794 857.263,645.325 857.822,649.555 858.382,653.922 858.941,672.818 859.5,688.436 860.059,673.391 860.619,660.153 861.178,693.382 861.737,664.305 862.296,665.896 862.856,668.851 863.415,701.245 863.974,719.447 864.533,750.7 865.093,780.858 865.652,791.853 866.211,787.291 866.77,753.22 867.33,731.982 867.889,745.148 868.448,708.482 869.007,674.726 869.567,675.866 870.126,676.577 870.685,660.734 871.244,660.694 871.804,660.513 872.363,695.442 872.922,692.184 873.481,676.968 874.041,657.622 874.6,692.234 875.159,662.578 875.718,634.702 876.278,638.075 876.837,622.686 877.396,642.319 877.955,611.857 878.515,565.09 879.074,554.548 879.633,525.108 880.192,527.089 880.752,534.715 881.311,542.357 881.87,567.217 882.429,556.317 882.989,565.91 883.548,557.322 884.107,547.364 884.666,571.782 885.226,543.465 885.785,552.602 886.344,557.432 886.903,533.69 887.463,559.548 888.022,566.159 888.581,586.737 889.14,589.467 889.7,625.845 890.259,661.672 890.818,675.679 891.377,689.645 891.937,688.766 892.496,721.615 893.055,698.717 893.614,698.783 894.174,697.982 894.733,665.038 895.292,649.58 895.851,605.564 896.411,613.761 896.97,621.018 897.529,626.991 898.088,614.604 898.648,600.106 899.207,650.852 899.766,651.809 900.325,666.432 900.885,654.469 901.444,643.799 902.003,659.756 902.562,663.517 903.122,662.7 903.681,662.814 904.24,679.663 904.799,680.603 905.359,650.187 905.918,651.248 906.477,621.436 907.036,639.378 907.596,625.996 908.155,646.286 908.714,665.66 909.273,696.263 909.833,696.474 910.392,727.456 910.951,690.648 911.51,693.283 912.07,689.243 912.629,705.961 913.188,706.768 913.747,689.708 914.307,664.257 914.866,679.169 915.425,679.444 915.984,665.578 916.544,666.51 917.103,647.908 917.662,647.864 918.221,633.665 918.781,651.782 919.34,635.744 919.899,656.19 920.458,627.257 921.018,615.244 921.577,636.541 922.136,639.774 922.695,625.55 923.255,615.702 923.814,653.181 924.373,679.962 924.932,713.269 925.492,727.328 926.051,756.174 926.61,802.901 927.169,781.546 927.729,823.159 928.288,817.145 928.847,811.479 929.406,787.769 929.966,767.748 930.525,745.903 931.084,757.036 931.644,753.839 932.203,783.661 932.762,727.076 933.321,743.685 933.881,721.981 934.44,716.723 934.999,713.824 935.558,726.677 936.118,724.609 936.677,755.999 937.236,702.698 937.795,719.081 938.355,670.281 938.914,734.61 939.473,731.532 940.032,729.695 940.592,678.47 941.151,664.329 941.71,685.582 942.269,721.061 942.829,685.624 943.388,683.242 943.947,650.016 944.506,683.174 945.066,666.34 945.625,670.246 946.184,676.183 946.743,662.039 947.303,662.418 947.862,664.14 948.421,650.453 948.98,638.547 949.54,641.881 950.099,660.385 950.658,661.527 951.217,664.052 951.777,683.458 952.336,686.332 952.895,683.48 953.454,667.287 954.014,651.31 954.573,703.263 955.132,650.273 955.691,632.623 956.251,618.63 956.81,622.125 957.369,657.393 957.928,659.838 958.488,693.079 959.047,724.165 959.606,708.485 960.165,706.796 960.725,718.437 961.284,731.425 961.843,730.215 962.402,743.066 962.962,693.243 963.521,711.041 964.08,711.101 964.639,742.007 965.199,741.827 965.758,739.698 966.317,736.433 966.876,682.645 967.436,696.279 967.995,695.327 968.554,711.97 969.113,698.39 969.673,663.229 970.232,661.807 970.791,678.488 971.35,680.525 971.91,666.337 972.469,684.259 973.028,669.595 973.587,716.851 974.147,717.281 974.706,748.848 975.265,761.225 975.824,758.829 976.384,741.069 976.943,723.585 977.502,710.464 978.061,728.164 978.621,776.488 979.18,820.714 979.739,794.799 980.298,759.115 980.858,738.463 981.417,736.703 981.976,751.97 982.535,749.151 983.095,761.753 983.654,758.988 984.213,787.011 984.772,778.522 985.332,725.962 985.891,704.117 986.45,702.306 987.009,701.673 987.569,714.573 988.128,695.756 988.687,693.615 989.246,675.4 989.806,691.936 990.365,690.716 990.924,754.312 991.483,749.593 992.043,793.827 992.602,787.295 993.161,784.724 993.72,743.935 994.28,737.68 994.839,717.173 995.398,713.126 995.957,727.381 996.517,725.432 997.076,733.851 997.635,766.661 998.194,779.362 998.754,760.243 999.313,757.449 999.872,802.432 1000.43,744.444 1000.99,756.076 1001.55,736.203 1002.11,731.522 1002.67,727.149 1003.23,642.575 1003.79,675.946 1004.35,695.156 1004.91,660.062 1005.46,646.734 1006.02,650.101 1006.58,650.187 1007.14,704.225 1007.7,717.751 1008.26,685.707 1008.82,702.263 1009.38,716.386 1009.94,649.716 1010.5,633.819 1011.06,584.275 1011.62,627.193 1012.18,662.115 1012.73,680.071 1013.29,727.657 1013.85,688.982 1014.41,656.176 1014.97,672.293 1015.53,686.451 1016.09,668.85 1016.65,670.373 1017.21,688.376 1017.77,736.629 1018.33,732.23 1018.89,699.979 1019.45,699.327 1020.01,700.091 1020.56,716.105 1021.12,618.415 1021.68,621.816 1022.24,608.065 1022.8,607.164 1023.36,640.526 1023.92,638.416 1024.48,643.77 1025.04,678.525 1025.6,661.022 1026.16,675.914 1026.72,705.775 1027.28,752.751 1027.83,733.052 1028.39,710.895 1028.95,683.02 1029.51,689.632 1030.07,692.788 1030.63,690.164 1031.19,722.494 1031.75,706.308 1032.31,656.89 1032.87,689.919 1033.43,672.362 1033.99,669.86 1034.55,651.658 1035.1,686.767 1035.66,687.799 1036.22,678.114 1036.78,631.634 1037.34,632.378 1037.9,634.504 1038.46,638.377 1039.02,675.947 1039.58,656.261 1040.14,675.919 1040.7,675.375 1041.26,672.576 1041.82,708.205 1042.38,690.717 1042.93,692.626 1043.49,641.801 1044.05,639.771 1044.61,645.574 1045.17,629.556 1045.73,617.255 1046.29,637.641 1046.85,643.439 1047.41,631.511 1047.97,636.311 1048.53,622.287 1049.09,639.727 1049.65,641.831 1050.2,677.758 1050.76,661.045 1051.32,664.687 1051.88,654.184 1052.44,625.067 1053,608.486 1053.56,609.904 1054.12,663.492 1054.68,678.119 1055.24,680.347 1055.8,652.313 1056.36,652.83 1056.92,654.981 1057.48,672.895 1058.03,675.108 1058.59,641.79 1059.15,677.207 1059.71,659.732 1060.27,662.509 1060.83,648.461 1061.39,667.063 1061.95,670.576 1062.51,655.734 1063.07,673.101 1063.63,705.238 1064.19,706.221 1064.75,725.375 1065.3,722.224 1065.86,718.777 1066.42,717.31 1066.98,702.853 1067.54,719.77 1068.1,700.704 1068.66,701.255 1069.22,698.939 1069.78,711.175 1070.34,741.672 1070.9,756.712 1071.46,749.417 1072.02,765.511 1072.57,760.833 1073.13,757.621 1073.69,751.073 1074.25,797.247 1074.81,763.902 1075.37,778.639 1075.93,760.404 1076.49,757.571 1077.05,738.362 1077.61,699.142 1078.17,698.4 1078.73,716.806 1079.29,727.882 1079.85,740.734 1080.4,737.463 1080.96,752.864 1081.52,717.583 1082.08,715.804 1082.64,696.031 1083.2,711.923 1083.76,726.828 1084.32,708.245 1084.88,736.355 1085.44,766.569 1086,778.472 1086.56,773.934 1087.12,769.613 1087.67,780.429 1088.23,790.899 1088.79,768.066 1089.35,733.409 1089.91,731.468 1090.47,747.227 1091.03,726.771 1091.59,727.903 1092.15,743.125 1092.71,689.484 1093.27,706.074 1093.83,692.702 1094.39,658.672 1094.94,644.826 1095.5,666.464 1096.06,665.285 1096.62,664.778 1097.18,634.196 1097.74,649.453 1098.3,618.192 1098.86,673.441 1099.42,676.379 1099.98,610.34 1100.54,612.495 1101.1,617.539 1101.66,602.109 1102.22,592.835 1102.77,612.688 1103.33,603.739 1103.89,608.205 1104.45,614.567 1105.01,620.658 1105.57,613.126 1106.13,600.25 1106.69,640.144 1107.25,676.019 1107.81,696.399 1108.37,696.149 1108.93,694.105 1109.49,676.255 1110.04,693.595 1110.6,689.052 1111.16,690.076 1111.72,706.514 1112.28,688.644 1112.84,721.224 1113.4,720.913 1113.96,688.033 1114.52,705.559 1115.08,736.901 1115.64,750.411 1116.2,742.25 1116.76,736.941 1117.31,750.979 1117.87,732.282 1118.43,714.015 1118.99,712.986 1119.55,711.979 1120.11,679.484 1120.67,673.971 1121.23,641.708 1121.79,627.993 1122.35,616.177 1122.91,615.686 1123.47,601.468 1124.03,606.226 1124.59,626.781 1125.14,646.897 1125.7,684.641 1126.26,685.741 1126.82,682.724 1127.38,668.228 1127.94,669.253 1128.5,634.328 1129.06,651.682 1129.62,673.01 1130.18,673.723 1130.74,627.123 1131.3,647.675 1131.86,633.615 1132.41,589.343 1132.97,577.697 1133.53,597.97 1134.09,618.45 1134.65,621.665 1135.21,609.112 1135.77,611.941 1136.33,613.839 1136.89,604.142 1137.45,625.226 1138.01,643.163 1138.57,660.045 1139.13,630.901 1139.68,666.794 1140.24,684.863 1140.8,717.39 1141.36,749.476 1141.92,732.33 1142.48,741.948 1143.04,741.422 1143.6,739.458 1144.16,721.305 1144.72,690.978 1145.28,689.921 1145.84,678.792 1146.4,712.872 1146.96,712.326 1147.51,708.757 1148.07,724.596 1148.63,720.942 1149.19,720.691 1149.75,717.335 1150.31,714.683 1150.87,711.806 1151.43,740.199 1151.99,739.131 1152.55,735.284 1153.11,733.311 1153.67,730.496 1154.23,729.879 1154.78,730.403 1155.34,696.243 1155.9,679.832 1156.46,630.382 1157.02,666.275 1157.58,667.629 1158.14,664.831 1158.7,669.497 1159.26,666.973 1159.82,698.673 1160.38,683.759 1160.94,683.611 1161.5,666.587 1162.05,651.203 1162.61,652.453 1163.17,622.089 1163.73,622.951 1164.29,643.159 1164.85,677.542 1165.41,693.812 1165.97,693.941 1166.53,692.502 1167.09,692.539 1167.65,694.646 1168.21,678.455 1168.77,694.129 1169.33,710.078 1169.88,723.699 1170.44,718.324 1171,715.233 1171.56,697.39 1172.12,711.513 1172.68,740.993 1173.24,736.639 1173.8,736.622 1174.36,720.625 1174.92,767.811 1175.48,779.533 1176.04,753.339 1176.6,766.309 1177.15,763.884 1177.71,773.374 1178.27,753.855 1178.83,736.24 1179.39,716.197 1179.95,700.305 1180.51,696.509 1181.07,710.157 1181.63,692.399 1182.19,675.939 1182.75,692.502 1183.31,708.228 1183.87,677.411 1184.43,671.843 1184.98,658.245 1185.54,672.304 1186.1,689.31 1186.66,670.725 1187.22,639.378 1187.78,639.412 1188.34,642.077 1188.9,674.882 1189.46,677.741 1190.02,681.618 1190.58,712 1191.14,679.126 1191.7,709.513 1192.25,704.927 1192.81,719.256 1193.37,720.219 1193.93,719.059 1194.49,735.407 1195.05,668.698 1195.61,686.866 1196.17,687.843 1196.73,718.281 1197.29,717.939 1197.85,733.322 1198.41,698.475 1198.97,685.14 1199.52,704.492 1200.08,688.522 1200.64,673.796 1201.2,676.16 1201.76,645.053 1202.32,661.212 1202.88,666.918 1203.44,683.304 1204,698.356 1204.56,666.658 1205.12,666.968 1205.68,668.097 1206.24,667.286 1206.8,664.591 1207.35,665.662 1207.91,669.709 1208.47,669.62 1209.03,672.014 1209.59,691.011 1210.15,688.679 1210.71,672.147 1211.27,673.457 1211.83,689.496 1212.39,691.755 1212.95,707.957 1213.51,722.514 1214.07,735.507 1214.62,730.855 1215.18,727.125 1215.74,757.87 1216.3,740.447 1216.86,738.427 1217.42,706.389 1217.98,703.204 1218.54,683.944 1219.1,713.669 1219.66,708.581 1220.22,704.115 1220.78,732.348 1221.34,726.509 1221.89,724.746 1222.45,770.65 1223.01,748.778 1223.57,713.692 1224.13,677.501 1224.69,675.134 1225.25,690.912 1225.81,709.489 1226.37,724.105 1226.93,658.862 1227.49,631.124 1228.05,652.851 1228.61,638.229 1229.17,627.625 1229.72,647.891 1230.28,631.967 1230.84,634.836 1231.4,624.013 1231.96,594.4 1232.52,614.442 1233.08,622.068 1233.64,647.783 1234.2,668.658 1234.76,673.673 1235.32,672.15 1235.88,688.524 1236.44,657.125 1236.99,706.79 1237.55,708.522 1238.11,705.425 1238.67,706.373 1239.23,706.084 1239.79,705.363 1240.35,687.141 1240.91,718.181 1241.47,746.925 1242.03,761.253 1242.59,754.168 1243.15,797.915 1243.71,757.547 1244.26,785.075 1244.82,795.854 1245.38,773.786 1245.94,770.884 1246.5,765.532 1247.06,730.341 1247.62,695.112 1248.18,695.485 1248.74,682.61 1249.3,698.227 1249.86,684.525 1250.42,684.85 1250.98,698.879 1251.54,716.273 1252.09,715.496 1252.65,729.987 1253.21,727.217 1253.77,720.958 1254.33,719.444 1254.89,686.522 1255.45,670.29 1256.01,704.518 1256.57,719.75 1257.13,736.076 1257.69,717.091 1258.25,718.931 1258.81,703.894 1259.36,698.397 1259.92,713.636 1260.48,711.299 1261.04,710.426 1261.6,725.861 1262.16,709.195 1262.72,724.326 1263.28,738.469 1263.84,733.907 1264.4,735.251 1264.96,764.512 1265.52,743.752 1266.08,770.309 1266.63,750.897 1267.19,733.304 1267.75,735.539 1268.31,732.378 1268.87,742.366 1269.43,724.241 1269.99,718.207 1270.55,730.819 1271.11,743.609 1271.67,691.614 1272.23,740.75 1272.79,706.305 1273.35,706.539 1273.91,705.943 1274.46,734.481 1275.02,697.54 1275.58,697.188 1276.14,711.843 1276.7,711.198 1277.26,695.065 1277.82,679.449 1278.38,677.716 1278.94,659.713 1279.5,643.516 1280.06,613.571 1280.62,596.718 1281.18,618.868 1281.73,591.071 1282.29,580.256 1282.85,588.03 1283.41,609.531 1283.97,567.907 1284.53,605.224 1285.09,608.694 1285.65,596.797 1286.21,552.581 1286.77,594.494 1287.33,613.288 1287.89,620.783 1288.45,605.899 1289,612.495 1289.56,633.889 1290.12,620.603 1290.68,641.975 1291.24,661.982 1291.8,647.649 1292.36,664.021 1292.92,632.588 1293.48,634.033 1294.04,651.672 1294.6,623.134 1295.16,611.709 1295.72,616.309 1296.28,652.539 1296.83,656.258 1297.39,694.522 1297.95,663.217 1298.51,630.857 1299.07,636.572 1299.63,620.769 1300.19,624.874 1300.75,612.338 1301.31,617.047 1301.87,620.461 1302.43,635.876 1302.99,635.755 1303.55,670.819 1304.1,674.727 1304.66,626.009 1305.22,616.791 1305.78,604.915 1306.34,591.296 1306.9,596.867 1307.46,568.667 1308.02,556.298 1308.58,543.467 1309.14,566.975 1309.7,587.919 1310.26,593.822 1310.82,581.686 1311.38,587.653 1311.93,560.546 1312.49,598.786 1313.05,619.269 1313.61,639.59 1314.17,640.561 1314.73,610.917 1315.29,612.978 1315.85,580.161 1316.41,584.591 1316.97,574.647 1317.53,579.172 1318.09,587.692 1318.65,611.167 1319.2,579.613 1319.76,616.046 1320.32,589.666 1320.88,596.919 1321.44,600.972 1322,607.285 1322.56,563.55 1323.12,587.664 1323.68,595.122 1324.24,569.599 1324.8,572.527 1325.36,594.424 1325.92,581.972 1326.47,603.763 1327.03,625.975 1327.59,627.63 1328.15,614.396 1328.71,634.258 1329.27,637.362 1329.83,643.071 1330.39,678.831 1330.95,679.065 1331.51,667.093 1332.07,702.436 1332.63,700.751 1333.19,747.403 1333.75,774.972 1334.3,787.755 1334.86,768.807 1335.42,797.43 1335.98,806.871 1336.54,767.961 1337.1,795.729 1337.66,804.694 1338.22,816.378 1338.78,777.441 1339.34,755.579 1339.9,736.516 1340.46,712.874 1341.02,761.314 1341.57,758.599 1342.13,754.339 1342.69,747.609 1343.25,761.07 1343.81,753.172 1344.37,751.347 1344.93,745.109 1345.49,693.543 1346.05,690.783 1346.61,673.846 1347.17,708.471 1347.73,673.943 1348.29,656.635 1348.84,657.561 1349.4,658.049 1349.96,673.459 1350.52,657.475 1351.08,660.531 1351.64,646.715 1352.2,697.679 1352.76,727.559 1353.32,709.245 1353.88,709.373 1354.44,724.555 1355,738.458 1355.56,705.207 1356.12,687.33 1356.67,717.74 1357.23,718.501 1357.79,716.723 1358.35,685.575 1358.91,684.034 1359.47,697.067 1360.03,677.443 1360.59,674.883 1361.15,675.322 1361.71,681.921 1362.27,669.876 1362.83,673.043 1363.39,673.901 1363.94,676.432 1364.5,689.895 1365.06,705.221 1365.62,717.767 1366.18,728.224 1366.74,729.755 1367.3,740.207 1367.86,736.836 1368.42,717.331 1368.98,717.883 1369.54,750.998 1370.1,796.283 1370.66,792.872 1371.21,770.958 1371.77,767.137 1372.33,731.234 1372.89,729.612 1373.45,792.697 1374.01,770.297 1374.57,781.204 1375.13,761.794 1375.69,773.707 1376.25,734.595 1376.81,716.01 1377.37,698.468 1377.93,697.043 1378.49,698.405 1379.04,712.76 1379.6,696.816 1380.16,668.66 1380.72,686.651 1381.28,701.31 1381.84,701.868 1382.4,686.056 1382.96,699.923 1383.52,679.395 1384.08,681.786 1384.64,702.664 1385.2,686.287 1385.76,701.332 1386.31,650.617 1386.87,650.701 1387.43,638.714 1387.99,655.87 1388.55,658.045 1389.11,658.867 1389.67,675.748 1390.23,691.795 1390.79,706.754 1391.35,694.897 1391.91,694.955 1392.47,758.679 1393.03,768.302 1393.58,744.512 1394.14,737.331 1394.7,734.707 1395.26,796.259 1395.82,757.854 1396.38,768.845 1396.94,732.304 1397.5,680.175 1398.06,711.829 1398.62,741.29 1399.18,740.289 1399.74,722.611 1400.3,689.602 1400.86,707.834 1401.41,673.599 1401.97,658.201 1402.53,644.525 1403.09,647.279 1403.65,630.541 1404.21,647.723 1404.77,662.393 1405.33,663.521 1405.89,681.523 1406.45,716.055 1407.01,701.431 1407.57,729.279 1408.13,712.979 1408.68,730.555 1409.24,728.777 1409.8,725.129 1410.36,708.641 1410.92,741.206 1411.48,739.427 1412.04,720.481 1412.6,720.241 1413.16,737.41 1413.72,734.595 1414.28,718.943 1414.84,683.586 1415.4,684.653 1415.95,688.748 1416.51,688.071 1417.07,702.69 1417.63,737.409 1418.19,736.656 1418.75,716.487 1419.31,698.469 1419.87,730.446 1420.43,732.303 1420.99,730.166 1421.55,729.592 1422.11,713.951 1422.67,698.624 1423.23,695.24 1423.78,662.044 1424.34,695.475 1424.9,699.878 1425.46,681.997 1426.02,666.007 1426.58,682.359 1427.14,668.072 1427.7,652.818 1428.26,640.686 1428.82,642.044 1429.38,647.226 1429.94,646.045 1430.5,649.383 1431.05,649.228 1431.61,666.395 1432.17,665.183 1432.73,664.419 1433.29,664.382 1433.85,665.138 1434.41,670.106 1434.97,636.651 1435.53,640.282 1436.09,658.135 1436.65,658.312 1437.21,660.298 1437.77,645.057 1438.33,636.742 1438.88,604.492 1439.44,628.048 1440,615.005 1440.56,617.407 1441.12,587.689 1441.68,624.348 1442.24,612.323 1442.8,618.105 1443.36,637.732 1443.92,612.653 1444.48,645.257 1445.04,628.726 1445.6,630.44 1446.15,584.033 1446.71,607.086 1447.27,644.901 1447.83,613.513 1448.39,618.549 1448.95,637.437 1449.51,657.323 1450.07,639.583 1450.63,593.432 1451.19,630.106 1451.75,615.979 1452.31,622.051 1452.87,622.629 1453.42,626.171 1453.98,630.735 1454.54,632.835 1455.1,600.173 1455.66,606.798 1456.22,578.785 1456.78,587.398 1457.34,611.792 1457.9,598.612 1458.46,585.716 1459.02,604.9 1459.58,608.184 1460.14,596.176 1460.7,599.747 1461.25,623.087 1461.81,626.514 1462.37,633.724 1462.93,638.985 1463.49,642.593 1464.05,659.624 1464.61,689.75 1465.17,673.938 1465.73,690.444 1466.29,689.546 1466.85,692.266 1467.41,674.777 1467.97,693.944 1468.52,711.149 1469.08,692.558 1469.64,644.146 1470.2,677.928 1470.76,712.519 1471.32,729.335 1471.88,726.768 1472.44,740.33 1473,735.602 1473.56,732.712 1474.12,728.567 1474.68,773.039 1475.24,781.703 1475.79,794.373 1476.35,818.579 1476.91,826.297 1477.47,806.114 1478.03,799.183 1478.59,810.261 1479.15,800.694 1479.71,796.708 1480.27,774.237 1480.83,785.455 1481.39,778.843 1481.95,803.054 1482.51,792.713 1483.07,850.743 1483.62,827.227 1484.18,823.671 1484.74,847.387 1485.3,837.216 1485.86,813.482 1486.42,838.964 1486.98,833.447 1487.54,857.188 1488.1,847.124 1488.66,835.599 1489.22,824.049 1489.78,818.558 1490.34,765.242 1490.89,741.241 1491.45,690.746 1492.01,658.328 1492.57,661.943 1493.13,677.265 1493.69,674.819 1494.25,691.104 1494.81,720.389 1495.37,751.153 1495.93,745.729 1496.49,759.471 1497.05,790.723 1497.61,788.242 1498.16,780.902 1498.72,758.088 1499.28,740.733 1499.84,719.771 1500.4,734.699 1500.96,727.978 1501.52,727.513 1502.08,723.66 1502.64,752.475 1503.2,746.214 1503.76,711.862 1504.32,711.182 1504.88,740.378 1505.44,718.764 1505.99,666.873 1506.55,663.638 1507.11,696.655 1507.67,729.338 1508.23,676.657 1508.79,679.26 1509.35,666.623 1509.91,636.916 1510.47,603.913 1511.03,621.232 1511.59,589.046 1512.15,593.68 1512.71,584.186 1513.26,588.933 1513.82,597.079 1514.38,570.835 1514.94,545.585 1515.5,534.833 1516.06,559.618 1516.62,568.392 1517.18,627.385 1517.74,633.016 1518.3,650.159 1518.86,634.866 1519.42,621.359 1519.98,673.396 1520.53,707.463 1521.09,719.994 1521.65,689.51 1522.21,671.476 1522.77,658 1523.33,626.57 1523.89,630.287 1524.45,664.789 1525.01,645.929 1525.57,661.853 1526.13,645.939 1526.69,664.264 1527.25,665.715 1527.81,670.432 1528.36,684.28 1528.92,682.914 1529.48,700.436 1530.04,701.834 1530.6,698.592 1531.16,714.22 1531.72,716.567 1532.28,696.499 1532.84,680.147 1533.4,697.275 1533.96,694.918 1534.52,692.24 1535.08,741.202 1535.63,721.126 1536.19,736.272 1536.75,686.069 1537.31,659.03 1537.87,660.596 1538.43,662.36 1538.99,648.827 1539.55,666.853 1540.11,653.389 1540.67,641.422 1541.23,627.185 1541.79,580.3 1542.35,569.978 1542.9,606.175 1543.46,579.101 1544.02,587.999 1544.58,591.08 1545.14,614.134 1545.7,599.105 1546.26,609.785 1546.82,610.251 1547.38,595.07 1547.94,631.348 1548.5,651.355 1549.06,652.345 1549.62,626.763 1550.18,630.845 1550.73,633.633 1551.29,633.127 1551.85,618.732 1552.41,656.098 1552.97,675.491 1553.53,656.664 1554.09,654.211 1554.65,622.016 1555.21,614.908 1555.77,631.207 1556.33,618.164 1556.89,617.728 1557.45,621.811 1558,638.913 1558.56,623.245 1559.12,630.611 1559.68,601.748 1560.24,606.531 1560.8,609.491 1561.36,594.921 1561.92,595.329 1562.48,585.941 1563.04,606.602 1563.6,611.931 1564.16,598.156 1564.72,570.267 1565.28,562.225 1565.83,570.748 1566.39,578.917 1566.95,552.628 1567.51,575.791 1568.07,613.645 1568.63,615.119 1569.19,620.851 1569.75,623.846 1570.31,625.368 1570.87,663.031 1571.43,710.363 1571.99,728.041 1572.55,695.133 1573.1,709.93 1573.66,695.698 1574.22,693.309 1574.78,755.775 1575.34,768.37 1575.9,764.585 1576.46,775.055 1577.02,737.925 1577.58,736.5 1578.14,733.378 1578.7,729.246 1579.26,713.82 1579.82,663.211 1580.37,664.396 1580.93,684.079 1581.49,687.688 1582.05,692.964 1582.61,694.019 1583.17,727.497 1583.73,755.202 1584.29,749.897 1584.85,763.331 1585.41,774.096 1585.97,766.901 1586.53,779.57 1587.09,776.613 1587.65,806.439 1588.2,751.644 1588.76,762.526 1589.32,806.239 1589.88,799.729 1590.44,777.704 1591,774.227 1591.56,751.72 1592.12,715.273 1592.68,731.505 1593.24,725.326 1593.8,720.61 1594.36,728.798 1594.92,711.46 1595.47,721.913 1596.03,732.156 1596.59,745.152 1597.15,756.778 1597.71,719.907 1598.27,735.408 1598.83,720.156 1599.39,717.825 1599.95,717.242 1600.51,727.13 1601.07,774.049 1601.63,801.993 1602.19,824.64 1602.74,799.572 1603.3,760.061 1603.86,756.671 1604.42,702.827 1604.98,735.433 1605.54,774.376 1606.1,739.63 1606.66,722.96 1607.22,756.035 1607.78,750.724 1608.34,746.896 1608.9,760.179 1609.46,755.028 1610.02,720.909 1610.57,717.995 1611.13,700.671 1611.69,735.182 1612.25,714.797 1612.81,713.649 1613.37,713.021 1613.93,741.894 1614.49,724.264 1615.05,719.491 1615.61,749.246 1616.17,759.63 1616.73,755.917 1617.29,688.235 1617.84,689.773 1618.4,688.603 1618.96,703.727 1619.52,688.03 1620.08,688.352 1620.64,672.039 1621.2,655.005 1621.76,674.612 1622.32,707.905 1622.88,721.976 1623.44,669.24 1624,655.438 1624.56,640.168 1625.11,688.447 1625.67,670.993 1626.23,671.869 1626.79,671.297 1627.35,672.254 1627.91,642.407 1628.47,645.1 1629.03,631.156 1629.59,638.258 1630.15,659.461 1630.71,662.508 1631.27,665.637 1631.83,695.391 1632.39,680.763 1632.94,681.39 1633.5,681.745 1634.06,694.783 1634.62,726.682 1635.18,707.819 1635.74,689.456 1636.3,669.972 1636.86,720.575 1637.42,738.188 1637.98,735.921 1638.54,734.003 1639.1,713.347 1639.66,713.117 1640.21,712.464 1640.77,662.265 1641.33,647.302 1641.89,668.786 1642.45,618.871 1643.01,572.191 1643.57,544.338 1644.13,536.661 1644.69,544.609 1645.25,570.888 1645.81,559.089 1646.37,582.572 1646.93,592.181 1647.48,613.633 1648.04,603.149 1648.6,640.474 1649.16,645.309 1649.72,645.561 1650.28,665.734 1650.84,686.846 1651.4,703.141 1651.96,670.075 1652.52,668.256 1653.08,665.815 1653.64,651.983 1654.2,652.856 1654.76,654.955 1655.31,654.55 1655.87,672.607 1656.43,688.261 1656.99,700.933 1657.55,748.178 1658.11,710.768 1658.67,722.906 1659.23,734.021 1659.79,763.486 1660.35,774.765 1660.91,754.084 1661.47,751.532 1662.03,763.871 1662.58,725.958 1663.14,709.797 1663.7,706.722 1664.26,707.194 1664.82,672.456 1665.38,686.538 1665.94,670.409 1666.5,641.232 1667.06,644.651 1667.62,644.097 1668.18,677.334 1668.74,660.45 1669.3,662.832 1669.85,664.061 1670.41,649.397 1670.97,671.231 1671.53,672.825 1672.09,671.359 1672.65,655.848 1673.21,641.343 1673.77,624.759 1674.33,613.962 1674.89,620.191 1675.45,657.371 1676.01,639.689 1676.57,642.034 1677.13,626.8 1677.68,643.315 1678.24,680.378 1678.8,732.054 1679.36,717.101 1679.92,715.417 1680.48,696.832 1681.04,695.786 1681.6,693.4 1682.16,693.675 1682.72,691.038 1683.28,738.388 1683.84,737.967 1684.4,685.11 1684.95,651.919 1685.51,670.82 1686.07,670.328 1686.63,673.448 1687.19,639.943 1687.75,644.573 1688.31,647.241 1688.87,681.365 1689.43,681.242 1689.99,663.353 1690.55,650.003 1691.11,651.471 1691.67,665.404 1692.23,664.705 1692.78,669.655 1693.34,691.884 1693.9,706.338 1694.46,707.703 1695.02,675.017 1695.58,673.647 1696.14,643.235 1696.7,613.969 1697.26,636.803 1697.82,655.221 1698.38,723.26 1698.94,721.571 1699.5,719.077 1700.05,715.986 1700.61,729.094 1701.17,771.79 1701.73,734.467 1702.29,698.399 1702.85,681.328 1703.41,666.924 1703.97,681.331 1704.53,680.89 1705.09,659.311 1705.65,646.968 1706.21,694.228 1706.77,672.158 1707.32,717.879 1707.88,715.074 1708.44,695.735 1709,709.797 1709.56,725.486 1710.12,721.059 1710.68,702.816 1711.24,720.216 1711.8,733.736 1712.36,748.594 1712.92,748.775 1713.48,808.58 1714.04,818.876 1714.6,809.199 1715.15,788.169 1715.71,801.158 1716.27,797.809 1716.83,759.352 1717.39,785.282 1717.95,745.558 1718.51,728.08 1719.07,707.333 1719.63,704.457 1720.19,687.401 1720.75,675.231 1721.31,708.897 1721.87,724.75 1722.42,723.291 1722.98,735.888 1723.54,655.893 1724.1,642.658 1724.66,613.521 1725.22,605.39 1725.78,609.867 1726.34,612.406 1726.9,618.529 1727.46,638.542 1728.02,638.291 1728.58,637.469 1729.14,688.094 1729.69,736.626 1730.25,733.068 1730.81,775.573 1731.37,769.603 1731.93,781.829 1732.49,778.021 1733.05,821.518 1733.61,834.677 1734.17,845.92 1734.73,789.595 1735.29,752.503 1735.85,733.292 1736.41,715.147 1736.97,711.866 1737.52,709.21 1738.08,692.849 1738.64,727.623 1739.2,753.853 1739.76,731.529 1740.32,743.842 1740.88,758.617 1741.44,674.841 1742,657.003 1742.56,659.867 1743.12,660.639 1743.68,646.058 1744.24,662.525 1744.79,652.528 1745.35,652.101 1745.91,670.243 1746.47,689.575 1747.03,690.84 1747.59,690.059 1748.15,699.858 1748.71,699.482 1749.27,698.794 1749.83,716.482 1750.39,681.022 1750.95,667.512 1751.51,633.694 1752.06,651.541 1752.62,600.37 1753.18,607.007 1753.74,626.307 1754.3,661.874 1754.86,664.267 1755.42,651.377 1755.98,624.903 1756.54,626.637 1757.1,645.511 1757.66,652.297 1758.22,621.204 1758.78,624.273 1759.34,629.323 1759.89,645.561 1760.45,619.252 1761.01,603.89 1761.57,587.849 1762.13,607.836 1762.69,594.31 1763.25,598.811 1763.81,615.029 1764.37,637.08 1764.93,637.93 1765.49,687.515 1766.05,643.571 1766.61,661.214 1767.16,614.367 1767.72,652.559 1768.28,688.865 1768.84,672.407 1769.4,676.066 1769.96,661.918 1770.52,681.341 1771.08,666.059 1771.64,683.593 1772.2,697.755 1772.76,677.704 1773.32,659.472 1773.88,646.066 1774.43,668.006 1774.99,700.569 1775.55,685.18 1776.11,686.793 1776.67,689.621 1777.23,720.383 1777.79,718.894 1778.35,719.728 1778.91,684.899 1779.47,683.832 1780.03,698.667 1780.59,697.291 1781.15,699.315 1781.71,730.02 1782.26,741.347 1782.82,672.641 1783.38,661.447 1783.94,662.35 1784.5,661.902 1785.06,649.89 1785.62,679.674 1786.18,697.216 1786.74,693.139 1787.3,674.076 1787.86,709.466 1788.42,705.114 1788.98,704.639 1789.53,721.016 1790.09,701.128 1790.65,696.135 1791.21,661.942 1791.77,648.751 1792.33,667.804 1792.89,684.154 1793.45,669.889 1794.01,636.487 1794.57,640.301 1795.13,691.747 1795.69,675.997 1796.25,642.399 1796.8,672.568 1797.36,672.808 1797.92,706.281 1798.48,720.589 1799.04,684.832 1799.6,699.935 1800.16,700.638 1800.72,666.247 1801.28,632.425 1801.84,635.761 1802.4,657.799 1802.96,623.21 1803.52,607.768 1804.08,612.996 1804.63,603.066 1805.19,622.229 1805.75,627.962 1806.31,613.281 1806.87,602.805 1807.43,593.519 1807.99,583.444 1808.55,574.18 1809.11,579.848 1809.67,602.739 1810.23,623.698 1810.79,672.758 1811.35,668.416 1811.9,652.8 1812.46,687.156 1813.02,670.141 1813.58,657.592 1814.14,675.946 1814.7,709.226 1815.26,752.962 1815.82,750.972 1816.38,731.296 1816.94,761.923 1817.5,789.104 1818.06,782.975 1818.62,778.814 1819.18,791.871 1819.73,800.639 1820.29,794.804 1820.85,789.955 1821.41,784.457 1821.97,812.638 1822.53,806.397 1823.09,767.823 1823.65,764.6 1824.21,729.426 1824.77,709.954 1825.33,754.754 1825.89,752.246 1826.45,736.898 1827,720.358 1827.56,701.662 1828.12,718.234 1828.68,664.958 1829.24,665.972 1829.8,667.058 1830.36,665.828 1830.92,648.727 1831.48,681.199 1832.04,696.444 1832.6,680.207 1833.16,699.581 1833.72,713.847 1834.27,697.755 1834.83,711.034 1835.39,694.209 1835.95,711.354 1836.51,710.98 1837.07,710.087 1837.63,726.359 1838.19,773.604 \"/>\n<path clip-path=\"url(#clip213)\" d=\"M720.247 692.475 L720.806 692.475 L721.365 692.475 L721.924 692.475 L722.484 692.475 L723.043 692.475 L723.602 692.475 L724.161 692.475 L724.721 692.475 L725.28 692.475 L725.839 692.475 L726.398 692.475 L726.958 692.475 L727.517 692.475 L728.076 692.475 L728.635 692.475 L729.195 692.475 L729.754 692.475 L730.313 692.475 L730.872 692.475 L731.432 692.475 L731.991 692.475 L732.55 692.475 L733.109 692.475 L733.669 692.475 L734.228 692.475 L734.787 692.475 L735.346 692.475 L735.906 692.475 L736.465 692.475 L737.024 692.475 L737.583 692.475 L738.143 692.475 L738.702 692.475 L739.261 692.475 L739.82 692.475 L740.38 692.475 L740.939 692.475 L741.498 692.475 L742.057 692.475 L742.617 692.475 L743.176 692.475 L743.735 692.475 L744.294 692.475 L744.854 692.475 L745.413 692.475 L745.972 692.475 L746.531 692.475 L747.091 692.475 L747.65 692.475 L748.209 692.475 L748.768 692.475 L749.328 692.475 L749.887 692.475 L750.446 692.475 L751.005 692.475 L751.565 692.475 L752.124 692.475 L752.683 692.475 L753.242 692.475 L753.802 692.475 L754.361 692.475 L754.92 692.475 L755.479 692.475 L756.039 692.475 L756.598 692.475 L757.157 692.475 L757.716 692.475 L758.276 692.475 L758.835 692.475 L759.394 692.475 L759.953 692.475 L760.513 692.475 L761.072 692.475 L761.631 692.475 L762.19 692.475 L762.75 692.475 L763.309 692.475 L763.868 692.475 L764.427 692.475 L764.987 692.475 L765.546 692.475 L766.105 692.475 L766.664 692.475 L767.224 692.475 L767.783 692.475 L768.342 692.475 L768.901 692.475 L769.461 692.475 L770.02 692.475 L770.579 692.475 L771.138 692.475 L771.698 692.475 L772.257 692.475 L772.816 692.475 L773.375 692.475 L773.935 692.475 L774.494 692.475 L775.053 692.475 L775.612 692.475 L776.172 692.475 L776.731 692.475 L777.29 692.475 L777.849 692.475 L778.409 692.475 L778.968 692.475 L779.527 692.475 L780.086 692.475 L780.646 692.475 L781.205 692.475 L781.764 692.475 L782.323 692.475 L782.883 692.475 L783.442 692.475 L784.001 692.475 L784.56 692.475 L785.12 692.475 L785.679 692.475 L786.238 692.475 L786.797 692.475 L787.357 692.475 L787.916 692.475 L788.475 692.475 L789.034 692.475 L789.594 692.475 L790.153 692.475 L790.712 692.475 L791.271 692.475 L791.831 692.475 L792.39 692.475 L792.949 692.475 L793.508 692.475 L794.068 692.475 L794.627 692.475 L795.186 692.475 L795.745 692.475 L796.305 692.475 L796.864 692.475 L797.423 692.475 L797.982 692.475 L798.542 692.475 L799.101 692.475 L799.66 692.475 L800.219 692.475 L800.779 692.475 L801.338 692.475 L801.897 692.475 L802.456 692.475 L803.016 692.475 L803.575 692.475 L804.134 692.475 L804.693 692.475 L805.253 692.475 L805.812 692.475 L806.371 692.475 L806.931 692.475 L807.49 692.475 L808.049 692.475 L808.608 692.475 L809.168 692.475 L809.727 692.475 L810.286 692.475 L810.845 692.475 L811.405 692.475 L811.964 692.475 L812.523 692.475 L813.082 692.475 L813.642 692.475 L814.201 692.475 L814.76 692.475 L815.319 692.475 L815.879 692.475 L816.438 692.475 L816.997 692.475 L817.556 692.475 L818.116 692.475 L818.675 692.475 L819.234 692.475 L819.793 692.475 L820.353 692.475 L820.912 692.475 L821.471 692.475 L822.03 692.475 L822.59 692.475 L823.149 692.475 L823.708 692.475 L824.267 692.475 L824.827 692.475 L825.386 692.475 L825.945 692.475 L826.504 692.475 L827.064 692.475 L827.623 692.475 L828.182 692.475 L828.741 692.475 L829.301 692.475 L829.86 692.475 L830.419 692.475 L830.978 692.475 L831.538 692.475 L832.097 692.475 L832.656 692.475 L833.215 692.475 L833.775 692.475 L834.334 692.475 L834.893 692.475 L835.452 692.475 L836.012 692.475 L836.571 692.475 L837.13 692.475 L837.689 692.475 L838.249 692.475 L838.808 692.475 L839.367 692.475 L839.926 692.475 L840.486 692.475 L841.045 692.475 L841.604 692.475 L842.163 692.475 L842.723 692.475 L843.282 692.475 L843.841 692.475 L844.4 692.475 L844.96 692.475 L845.519 692.475 L846.078 692.475 L846.637 692.475 L847.197 692.475 L847.756 692.475 L848.315 692.475 L848.874 692.475 L849.434 692.475 L849.993 692.475 L850.552 692.475 L851.111 692.475 L851.671 692.475 L852.23 692.475 L852.789 692.475 L853.348 692.475 L853.908 692.475 L854.467 692.475 L855.026 692.475 L855.585 692.475 L856.145 692.475 L856.704 692.475 L857.263 692.475 L857.822 692.475 L858.382 692.475 L858.941 692.475 L859.5 692.475 L860.059 692.475 L860.619 692.475 L861.178 692.475 L861.737 692.475 L862.296 692.475 L862.856 692.475 L863.415 692.475 L863.974 692.475 L864.533 692.475 L865.093 692.475 L865.652 692.475 L866.211 692.475 L866.77 692.475 L867.33 692.475 L867.889 692.475 L868.448 692.475 L869.007 692.475 L869.567 692.475 L870.126 692.475 L870.685 692.475 L871.244 692.475 L871.804 692.475 L872.363 692.475 L872.922 692.475 L873.481 692.475 L874.041 692.475 L874.6 692.475 L875.159 692.475 L875.718 692.475 L876.278 692.475 L876.837 692.475 L877.396 692.475 L877.955 692.475 L878.515 692.475 L879.074 692.475 L879.633 692.475 L880.192 692.475 L880.752 692.475 L881.311 692.475 L881.87 692.475 L882.429 692.475 L882.989 692.475 L883.548 692.475 L884.107 692.475 L884.666 692.475 L885.226 692.475 L885.785 692.475 L886.344 692.475 L886.903 692.475 L887.463 692.475 L888.022 692.475 L888.581 692.475 L889.14 692.475 L889.7 692.475 L890.259 692.475 L890.818 692.475 L891.377 692.475 L891.937 692.475 L892.496 692.475 L893.055 692.475 L893.614 692.475 L894.174 692.475 L894.733 692.475 L895.292 692.475 L895.851 692.475 L896.411 692.475 L896.97 692.475 L897.529 692.475 L898.088 692.475 L898.648 692.475 L899.207 692.475 L899.766 692.475 L900.325 692.475 L900.885 692.475 L901.444 692.475 L902.003 692.475 L902.562 692.475 L903.122 692.475 L903.681 692.475 L904.24 692.475 L904.799 692.475 L905.359 692.475 L905.918 692.475 L906.477 692.475 L907.036 692.475 L907.596 692.475 L908.155 692.475 L908.714 692.475 L909.273 692.475 L909.833 692.475 L910.392 692.475 L910.951 692.475 L911.51 692.475 L912.07 692.475 L912.629 692.475 L913.188 692.475 L913.747 692.475 L914.307 692.475 L914.866 692.475 L915.425 692.475 L915.984 692.475 L916.544 692.475 L917.103 692.475 L917.662 692.475 L918.221 692.475 L918.781 692.475 L919.34 692.475 L919.899 692.475 L920.458 692.475 L921.018 692.475 L921.577 692.475 L922.136 692.475 L922.695 692.475 L923.255 692.475 L923.814 692.475 L924.373 692.475 L924.932 692.475 L925.492 692.475 L926.051 692.475 L926.61 692.475 L927.169 692.475 L927.729 692.475 L928.288 692.475 L928.847 692.475 L929.406 692.475 L929.966 692.475 L930.525 692.475 L931.084 692.475 L931.644 692.475 L932.203 692.475 L932.762 692.475 L933.321 692.475 L933.881 692.475 L934.44 692.475 L934.999 692.475 L935.558 692.475 L936.118 692.475 L936.677 692.475 L937.236 692.475 L937.795 692.475 L938.355 692.475 L938.914 692.475 L939.473 692.475 L940.032 692.475 L940.592 692.475 L941.151 692.475 L941.71 692.475 L942.269 692.475 L942.829 692.475 L943.388 692.475 L943.947 692.475 L944.506 692.475 L945.066 692.475 L945.625 692.475 L946.184 692.475 L946.743 692.475 L947.303 692.475 L947.862 692.475 L948.421 692.475 L948.98 692.475 L949.54 692.475 L950.099 692.475 L950.658 692.475 L951.217 692.475 L951.777 692.475 L952.336 692.475 L952.895 692.475 L953.454 692.475 L954.014 692.475 L954.573 692.475 L955.132 692.475 L955.691 692.475 L956.251 692.475 L956.81 692.475 L957.369 692.475 L957.928 692.475 L958.488 692.475 L959.047 692.475 L959.606 692.475 L960.165 692.475 L960.725 692.475 L961.284 692.475 L961.843 692.475 L962.402 692.475 L962.962 692.475 L963.521 692.475 L964.08 692.475 L964.639 692.475 L965.199 692.475 L965.758 692.475 L966.317 692.475 L966.876 692.475 L967.436 692.475 L967.995 692.475 L968.554 692.475 L969.113 692.475 L969.673 692.475 L970.232 692.475 L970.791 692.475 L971.35 692.475 L971.91 692.475 L972.469 692.475 L973.028 692.475 L973.587 692.475 L974.147 692.475 L974.706 692.475 L975.265 692.475 L975.824 692.475 L976.384 692.475 L976.943 692.475 L977.502 692.475 L978.061 692.475 L978.621 692.475 L979.18 692.475 L979.739 692.475 L980.298 692.475 L980.858 692.475 L981.417 692.475 L981.976 692.475 L982.535 692.475 L983.095 692.475 L983.654 692.475 L984.213 692.475 L984.772 692.475 L985.332 692.475 L985.891 692.475 L986.45 692.475 L987.009 692.475 L987.569 692.475 L988.128 692.475 L988.687 692.475 L989.246 692.475 L989.806 692.475 L990.365 692.475 L990.924 692.475 L991.483 692.475 L992.043 692.475 L992.602 692.475 L993.161 692.475 L993.72 692.475 L994.28 692.475 L994.839 692.475 L995.398 692.475 L995.957 692.475 L996.517 692.475 L997.076 692.475 L997.635 692.475 L998.194 692.475 L998.754 692.475 L999.313 692.475 L999.872 692.475 L1000.43 692.475 L1000.99 692.475 L1001.55 692.475 L1002.11 692.475 L1002.67 692.475 L1003.23 692.475 L1003.79 692.475 L1004.35 692.475 L1004.91 692.475 L1005.46 692.475 L1006.02 692.475 L1006.58 692.475 L1007.14 692.475 L1007.7 692.475 L1008.26 692.475 L1008.82 692.475 L1009.38 692.475 L1009.94 692.475 L1010.5 692.475 L1011.06 692.475 L1011.62 692.475 L1012.18 692.475 L1012.73 692.475 L1013.29 692.475 L1013.85 692.475 L1014.41 692.475 L1014.97 692.475 L1015.53 692.475 L1016.09 692.475 L1016.65 692.475 L1017.21 692.475 L1017.77 692.475 L1018.33 692.475 L1018.89 692.475 L1019.45 692.475 L1020.01 692.475 L1020.56 692.475 L1021.12 692.475 L1021.68 692.475 L1022.24 692.475 L1022.8 692.475 L1023.36 692.475 L1023.92 692.475 L1024.48 692.475 L1025.04 692.475 L1025.6 692.475 L1026.16 692.475 L1026.72 692.475 L1027.28 692.475 L1027.83 692.475 L1028.39 692.475 L1028.95 692.475 L1029.51 692.475 L1030.07 692.475 L1030.63 692.475 L1031.19 692.475 L1031.75 692.475 L1032.31 692.475 L1032.87 692.475 L1033.43 692.475 L1033.99 692.475 L1034.55 692.475 L1035.1 692.475 L1035.66 692.475 L1036.22 692.475 L1036.78 692.475 L1037.34 692.475 L1037.9 692.475 L1038.46 692.475 L1039.02 692.475 L1039.58 692.475 L1040.14 692.475 L1040.7 692.475 L1041.26 692.475 L1041.82 692.475 L1042.38 692.475 L1042.93 692.475 L1043.49 692.475 L1044.05 692.475 L1044.61 692.475 L1045.17 692.475 L1045.73 692.475 L1046.29 692.475 L1046.85 692.475 L1047.41 692.475 L1047.97 692.475 L1048.53 692.475 L1049.09 692.475 L1049.65 692.475 L1050.2 692.475 L1050.76 692.475 L1051.32 692.475 L1051.88 692.475 L1052.44 692.475 L1053 692.475 L1053.56 692.475 L1054.12 692.475 L1054.68 692.475 L1055.24 692.475 L1055.8 692.475 L1056.36 692.475 L1056.92 692.475 L1057.48 692.475 L1058.03 692.475 L1058.59 692.475 L1059.15 692.475 L1059.71 692.475 L1060.27 692.475 L1060.83 692.475 L1061.39 692.475 L1061.95 692.475 L1062.51 692.475 L1063.07 692.475 L1063.63 692.475 L1064.19 692.475 L1064.75 692.475 L1065.3 692.475 L1065.86 692.475 L1066.42 692.475 L1066.98 692.475 L1067.54 692.475 L1068.1 692.475 L1068.66 692.475 L1069.22 692.475 L1069.78 692.475 L1070.34 692.475 L1070.9 692.475 L1071.46 692.475 L1072.02 692.475 L1072.57 692.475 L1073.13 692.475 L1073.69 692.475 L1074.25 692.475 L1074.81 692.475 L1075.37 692.475 L1075.93 692.475 L1076.49 692.475 L1077.05 692.475 L1077.61 692.475 L1078.17 692.475 L1078.73 692.475 L1079.29 692.475 L1079.85 692.475 L1080.4 692.475 L1080.96 692.475 L1081.52 692.475 L1082.08 692.475 L1082.64 692.475 L1083.2 692.475 L1083.76 692.475 L1084.32 692.475 L1084.88 692.475 L1085.44 692.475 L1086 692.475 L1086.56 692.475 L1087.12 692.475 L1087.67 692.475 L1088.23 692.475 L1088.79 692.475 L1089.35 692.475 L1089.91 692.475 L1090.47 692.475 L1091.03 692.475 L1091.59 692.475 L1092.15 692.475 L1092.71 692.475 L1093.27 692.475 L1093.83 692.475 L1094.39 692.475 L1094.94 692.475 L1095.5 692.475 L1096.06 692.475 L1096.62 692.475 L1097.18 692.475 L1097.74 692.475 L1098.3 692.475 L1098.86 692.475 L1099.42 692.475 L1099.98 692.475 L1100.54 692.475 L1101.1 692.475 L1101.66 692.475 L1102.22 692.475 L1102.77 692.475 L1103.33 692.475 L1103.89 692.475 L1104.45 692.475 L1105.01 692.475 L1105.57 692.475 L1106.13 692.475 L1106.69 692.475 L1107.25 692.475 L1107.81 692.475 L1108.37 692.475 L1108.93 692.475 L1109.49 692.475 L1110.04 692.475 L1110.6 692.475 L1111.16 692.475 L1111.72 692.475 L1112.28 692.475 L1112.84 692.475 L1113.4 692.475 L1113.96 692.475 L1114.52 692.475 L1115.08 692.475 L1115.64 692.475 L1116.2 692.475 L1116.76 692.475 L1117.31 692.475 L1117.87 692.475 L1118.43 692.475 L1118.99 692.475 L1119.55 692.475 L1120.11 692.475 L1120.67 692.475 L1121.23 692.475 L1121.79 692.475 L1122.35 692.475 L1122.91 692.475 L1123.47 692.475 L1124.03 692.475 L1124.59 692.475 L1125.14 692.475 L1125.7 692.475 L1126.26 692.475 L1126.82 692.475 L1127.38 692.475 L1127.94 692.475 L1128.5 692.475 L1129.06 692.475 L1129.62 692.475 L1130.18 692.475 L1130.74 692.475 L1131.3 692.475 L1131.86 692.475 L1132.41 692.475 L1132.97 692.475 L1133.53 692.475 L1134.09 692.475 L1134.65 692.475 L1135.21 692.475 L1135.77 692.475 L1136.33 692.475 L1136.89 692.475 L1137.45 692.475 L1138.01 692.475 L1138.57 692.475 L1139.13 692.475 L1139.68 692.475 L1140.24 692.475 L1140.8 692.475 L1141.36 692.475 L1141.92 692.475 L1142.48 692.475 L1143.04 692.475 L1143.6 692.475 L1144.16 692.475 L1144.72 692.475 L1145.28 692.475 L1145.84 692.475 L1146.4 692.475 L1146.96 692.475 L1147.51 692.475 L1148.07 692.475 L1148.63 692.475 L1149.19 692.475 L1149.75 692.475 L1150.31 692.475 L1150.87 692.475 L1151.43 692.475 L1151.99 692.475 L1152.55 692.475 L1153.11 692.475 L1153.67 692.475 L1154.23 692.475 L1154.78 692.475 L1155.34 692.475 L1155.9 692.475 L1156.46 692.475 L1157.02 692.475 L1157.58 692.475 L1158.14 692.475 L1158.7 692.475 L1159.26 692.475 L1159.82 692.475 L1160.38 692.475 L1160.94 692.475 L1161.5 692.475 L1162.05 692.475 L1162.61 692.475 L1163.17 692.475 L1163.73 692.475 L1164.29 692.475 L1164.85 692.475 L1165.41 692.475 L1165.97 692.475 L1166.53 692.475 L1167.09 692.475 L1167.65 692.475 L1168.21 692.475 L1168.77 692.475 L1169.33 692.475 L1169.88 692.475 L1170.44 692.475 L1171 692.475 L1171.56 692.475 L1172.12 692.475 L1172.68 692.475 L1173.24 692.475 L1173.8 692.475 L1174.36 692.475 L1174.92 692.475 L1175.48 692.475 L1176.04 692.475 L1176.6 692.475 L1177.15 692.475 L1177.71 692.475 L1178.27 692.475 L1178.83 692.475 L1179.39 692.475 L1179.95 692.475 L1180.51 692.475 L1181.07 692.475 L1181.63 692.475 L1182.19 692.475 L1182.75 692.475 L1183.31 692.475 L1183.87 692.475 L1184.43 692.475 L1184.98 692.475 L1185.54 692.475 L1186.1 692.475 L1186.66 692.475 L1187.22 692.475 L1187.78 692.475 L1188.34 692.475 L1188.9 692.475 L1189.46 692.475 L1190.02 692.475 L1190.58 692.475 L1191.14 692.475 L1191.7 692.475 L1192.25 692.475 L1192.81 692.475 L1193.37 692.475 L1193.93 692.475 L1194.49 692.475 L1195.05 692.475 L1195.61 692.475 L1196.17 692.475 L1196.73 692.475 L1197.29 692.475 L1197.85 692.475 L1198.41 692.475 L1198.97 692.475 L1199.52 692.475 L1200.08 692.475 L1200.64 692.475 L1201.2 692.475 L1201.76 692.475 L1202.32 692.475 L1202.88 692.475 L1203.44 692.475 L1204 692.475 L1204.56 692.475 L1205.12 692.475 L1205.68 692.475 L1206.24 692.475 L1206.8 692.475 L1207.35 692.475 L1207.91 692.475 L1208.47 692.475 L1209.03 692.475 L1209.59 692.475 L1210.15 692.475 L1210.71 692.475 L1211.27 692.475 L1211.83 692.475 L1212.39 692.475 L1212.95 692.475 L1213.51 692.475 L1214.07 692.475 L1214.62 692.475 L1215.18 692.475 L1215.74 692.475 L1216.3 692.475 L1216.86 692.475 L1217.42 692.475 L1217.98 692.475 L1218.54 692.475 L1219.1 692.475 L1219.66 692.475 L1220.22 692.475 L1220.78 692.475 L1221.34 692.475 L1221.89 692.475 L1222.45 692.475 L1223.01 692.475 L1223.57 692.475 L1224.13 692.475 L1224.69 692.475 L1225.25 692.475 L1225.81 692.475 L1226.37 692.475 L1226.93 692.475 L1227.49 692.475 L1228.05 692.475 L1228.61 692.475 L1229.17 692.475 L1229.72 692.475 L1230.28 692.475 L1230.84 692.475 L1231.4 692.475 L1231.96 692.475 L1232.52 692.475 L1233.08 692.475 L1233.64 692.475 L1234.2 692.475 L1234.76 692.475 L1235.32 692.475 L1235.88 692.475 L1236.44 692.475 L1236.99 692.475 L1237.55 692.475 L1238.11 692.475 L1238.67 692.475 L1239.23 692.475 L1239.79 692.475 L1240.35 692.475 L1240.91 692.475 L1241.47 692.475 L1242.03 692.475 L1242.59 692.475 L1243.15 692.475 L1243.71 692.475 L1244.26 692.475 L1244.82 692.475 L1245.38 692.475 L1245.94 692.475 L1246.5 692.475 L1247.06 692.475 L1247.62 692.475 L1248.18 692.475 L1248.74 692.475 L1249.3 692.475 L1249.86 692.475 L1250.42 692.475 L1250.98 692.475 L1251.54 692.475 L1252.09 692.475 L1252.65 692.475 L1253.21 692.475 L1253.77 692.475 L1254.33 692.475 L1254.89 692.475 L1255.45 692.475 L1256.01 692.475 L1256.57 692.475 L1257.13 692.475 L1257.69 692.475 L1258.25 692.475 L1258.81 692.475 L1259.36 692.475 L1259.92 692.475 L1260.48 692.475 L1261.04 692.475 L1261.6 692.475 L1262.16 692.475 L1262.72 692.475 L1263.28 692.475 L1263.84 692.475 L1264.4 692.475 L1264.96 692.475 L1265.52 692.475 L1266.08 692.475 L1266.63 692.475 L1267.19 692.475 L1267.75 692.475 L1268.31 692.475 L1268.87 692.475 L1269.43 692.475 L1269.99 692.475 L1270.55 692.475 L1271.11 692.475 L1271.67 692.475 L1272.23 692.475 L1272.79 692.475 L1273.35 692.475 L1273.91 692.475 L1274.46 692.475 L1275.02 692.475 L1275.58 692.475 L1276.14 692.475 L1276.7 692.475 L1277.26 692.475 L1277.82 692.475 L1278.38 692.475 L1278.94 692.475 L1279.5 692.475 L1280.06 692.475 L1280.62 692.475 L1281.18 692.475 L1281.73 692.475 L1282.29 692.475 L1282.85 692.475 L1283.41 692.475 L1283.97 692.475 L1284.53 692.475 L1285.09 692.475 L1285.65 692.475 L1286.21 692.475 L1286.77 692.475 L1287.33 692.475 L1287.89 692.475 L1288.45 692.475 L1289 692.475 L1289.56 692.475 L1290.12 692.475 L1290.68 692.475 L1291.24 692.475 L1291.8 692.475 L1292.36 692.475 L1292.92 692.475 L1293.48 692.475 L1294.04 692.475 L1294.6 692.475 L1295.16 692.475 L1295.72 692.475 L1296.28 692.475 L1296.83 692.475 L1297.39 692.475 L1297.95 692.475 L1298.51 692.475 L1299.07 692.475 L1299.63 692.475 L1300.19 692.475 L1300.75 692.475 L1301.31 692.475 L1301.87 692.475 L1302.43 692.475 L1302.99 692.475 L1303.55 692.475 L1304.1 692.475 L1304.66 692.475 L1305.22 692.475 L1305.78 692.475 L1306.34 692.475 L1306.9 692.475 L1307.46 692.475 L1308.02 692.475 L1308.58 692.475 L1309.14 692.475 L1309.7 692.475 L1310.26 692.475 L1310.82 692.475 L1311.38 692.475 L1311.93 692.475 L1312.49 692.475 L1313.05 692.475 L1313.61 692.475 L1314.17 692.475 L1314.73 692.475 L1315.29 692.475 L1315.85 692.475 L1316.41 692.475 L1316.97 692.475 L1317.53 692.475 L1318.09 692.475 L1318.65 692.475 L1319.2 692.475 L1319.76 692.475 L1320.32 692.475 L1320.88 692.475 L1321.44 692.475 L1322 692.475 L1322.56 692.475 L1323.12 692.475 L1323.68 692.475 L1324.24 692.475 L1324.8 692.475 L1325.36 692.475 L1325.92 692.475 L1326.47 692.475 L1327.03 692.475 L1327.59 692.475 L1328.15 692.475 L1328.71 692.475 L1329.27 692.475 L1329.83 692.475 L1330.39 692.475 L1330.95 692.475 L1331.51 692.475 L1332.07 692.475 L1332.63 692.475 L1333.19 692.475 L1333.75 692.475 L1334.3 692.475 L1334.86 692.475 L1335.42 692.475 L1335.98 692.475 L1336.54 692.475 L1337.1 692.475 L1337.66 692.475 L1338.22 692.475 L1338.78 692.475 L1339.34 692.475 L1339.9 692.475 L1340.46 692.475 L1341.02 692.475 L1341.57 692.475 L1342.13 692.475 L1342.69 692.475 L1343.25 692.475 L1343.81 692.475 L1344.37 692.475 L1344.93 692.475 L1345.49 692.475 L1346.05 692.475 L1346.61 692.475 L1347.17 692.475 L1347.73 692.475 L1348.29 692.475 L1348.84 692.475 L1349.4 692.475 L1349.96 692.475 L1350.52 692.475 L1351.08 692.475 L1351.64 692.475 L1352.2 692.475 L1352.76 692.475 L1353.32 692.475 L1353.88 692.475 L1354.44 692.475 L1355 692.475 L1355.56 692.475 L1356.12 692.475 L1356.67 692.475 L1357.23 692.475 L1357.79 692.475 L1358.35 692.475 L1358.91 692.475 L1359.47 692.475 L1360.03 692.475 L1360.59 692.475 L1361.15 692.475 L1361.71 692.475 L1362.27 692.475 L1362.83 692.475 L1363.39 692.475 L1363.94 692.475 L1364.5 692.475 L1365.06 692.475 L1365.62 692.475 L1366.18 692.475 L1366.74 692.475 L1367.3 692.475 L1367.86 692.475 L1368.42 692.475 L1368.98 692.475 L1369.54 692.475 L1370.1 692.475 L1370.66 692.475 L1371.21 692.475 L1371.77 692.475 L1372.33 692.475 L1372.89 692.475 L1373.45 692.475 L1374.01 692.475 L1374.57 692.475 L1375.13 692.475 L1375.69 692.475 L1376.25 692.475 L1376.81 692.475 L1377.37 692.475 L1377.93 692.475 L1378.49 692.475 L1379.04 692.475 L1379.6 692.475 L1380.16 692.475 L1380.72 692.475 L1381.28 692.475 L1381.84 692.475 L1382.4 692.475 L1382.96 692.475 L1383.52 692.475 L1384.08 692.475 L1384.64 692.475 L1385.2 692.475 L1385.76 692.475 L1386.31 692.475 L1386.87 692.475 L1387.43 692.475 L1387.99 692.475 L1388.55 692.475 L1389.11 692.475 L1389.67 692.475 L1390.23 692.475 L1390.79 692.475 L1391.35 692.475 L1391.91 692.475 L1392.47 692.475 L1393.03 692.475 L1393.58 692.475 L1394.14 692.475 L1394.7 692.475 L1395.26 692.475 L1395.82 692.475 L1396.38 692.475 L1396.94 692.475 L1397.5 692.475 L1398.06 692.475 L1398.62 692.475 L1399.18 692.475 L1399.74 692.475 L1400.3 692.475 L1400.86 692.475 L1401.41 692.475 L1401.97 692.475 L1402.53 692.475 L1403.09 692.475 L1403.65 692.475 L1404.21 692.475 L1404.77 692.475 L1405.33 692.475 L1405.89 692.475 L1406.45 692.475 L1407.01 692.475 L1407.57 692.475 L1408.13 692.475 L1408.68 692.475 L1409.24 692.475 L1409.8 692.475 L1410.36 692.475 L1410.92 692.475 L1411.48 692.475 L1412.04 692.475 L1412.6 692.475 L1413.16 692.475 L1413.72 692.475 L1414.28 692.475 L1414.84 692.475 L1415.4 692.475 L1415.95 692.475 L1416.51 692.475 L1417.07 692.475 L1417.63 692.475 L1418.19 692.475 L1418.75 692.475 L1419.31 692.475 L1419.87 692.475 L1420.43 692.475 L1420.99 692.475 L1421.55 692.475 L1422.11 692.475 L1422.67 692.475 L1423.23 692.475 L1423.78 692.475 L1424.34 692.475 L1424.9 692.475 L1425.46 692.475 L1426.02 692.475 L1426.58 692.475 L1427.14 692.475 L1427.7 692.475 L1428.26 692.475 L1428.82 692.475 L1429.38 692.475 L1429.94 692.475 L1430.5 692.475 L1431.05 692.475 L1431.61 692.475 L1432.17 692.475 L1432.73 692.475 L1433.29 692.475 L1433.85 692.475 L1434.41 692.475 L1434.97 692.475 L1435.53 692.475 L1436.09 692.475 L1436.65 692.475 L1437.21 692.475 L1437.77 692.475 L1438.33 692.475 L1438.88 692.475 L1439.44 692.475 L1440 692.475 L1440.56 692.475 L1441.12 692.475 L1441.68 692.475 L1442.24 692.475 L1442.8 692.475 L1443.36 692.475 L1443.92 692.475 L1444.48 692.475 L1445.04 692.475 L1445.6 692.475 L1446.15 692.475 L1446.71 692.475 L1447.27 692.475 L1447.83 692.475 L1448.39 692.475 L1448.95 692.475 L1449.51 692.475 L1450.07 692.475 L1450.63 692.475 L1451.19 692.475 L1451.75 692.475 L1452.31 692.475 L1452.87 692.475 L1453.42 692.475 L1453.98 692.475 L1454.54 692.475 L1455.1 692.475 L1455.66 692.475 L1456.22 692.475 L1456.78 692.475 L1457.34 692.475 L1457.9 692.475 L1458.46 692.475 L1459.02 692.475 L1459.58 692.475 L1460.14 692.475 L1460.7 692.475 L1461.25 692.475 L1461.81 692.475 L1462.37 692.475 L1462.93 692.475 L1463.49 692.475 L1464.05 692.475 L1464.61 692.475 L1465.17 692.475 L1465.73 692.475 L1466.29 692.475 L1466.85 692.475 L1467.41 692.475 L1467.97 692.475 L1468.52 692.475 L1469.08 692.475 L1469.64 692.475 L1470.2 692.475 L1470.76 692.475 L1471.32 692.475 L1471.88 692.475 L1472.44 692.475 L1473 692.475 L1473.56 692.475 L1474.12 692.475 L1474.68 692.475 L1475.24 692.475 L1475.79 692.475 L1476.35 692.475 L1476.91 692.475 L1477.47 692.475 L1478.03 692.475 L1478.59 692.475 L1479.15 692.475 L1479.71 692.475 L1480.27 692.475 L1480.83 692.475 L1481.39 692.475 L1481.95 692.475 L1482.51 692.475 L1483.07 692.475 L1483.62 692.475 L1484.18 692.475 L1484.74 692.475 L1485.3 692.475 L1485.86 692.475 L1486.42 692.475 L1486.98 692.475 L1487.54 692.475 L1488.1 692.475 L1488.66 692.475 L1489.22 692.475 L1489.78 692.475 L1490.34 692.475 L1490.89 692.475 L1491.45 692.475 L1492.01 692.475 L1492.57 692.475 L1493.13 692.475 L1493.69 692.475 L1494.25 692.475 L1494.81 692.475 L1495.37 692.475 L1495.93 692.475 L1496.49 692.475 L1497.05 692.475 L1497.61 692.475 L1498.16 692.475 L1498.72 692.475 L1499.28 692.475 L1499.84 692.475 L1500.4 692.475 L1500.96 692.475 L1501.52 692.475 L1502.08 692.475 L1502.64 692.475 L1503.2 692.475 L1503.76 692.475 L1504.32 692.475 L1504.88 692.475 L1505.44 692.475 L1505.99 692.475 L1506.55 692.475 L1507.11 692.475 L1507.67 692.475 L1508.23 692.475 L1508.79 692.475 L1509.35 692.475 L1509.91 692.475 L1510.47 692.475 L1511.03 692.475 L1511.59 692.475 L1512.15 692.475 L1512.71 692.475 L1513.26 692.475 L1513.82 692.475 L1514.38 692.475 L1514.94 692.475 L1515.5 692.475 L1516.06 692.475 L1516.62 692.475 L1517.18 692.475 L1517.74 692.475 L1518.3 692.475 L1518.86 692.475 L1519.42 692.475 L1519.98 692.475 L1520.53 692.475 L1521.09 692.475 L1521.65 692.475 L1522.21 692.475 L1522.77 692.475 L1523.33 692.475 L1523.89 692.475 L1524.45 692.475 L1525.01 692.475 L1525.57 692.475 L1526.13 692.475 L1526.69 692.475 L1527.25 692.475 L1527.81 692.475 L1528.36 692.475 L1528.92 692.475 L1529.48 692.475 L1530.04 692.475 L1530.6 692.475 L1531.16 692.475 L1531.72 692.475 L1532.28 692.475 L1532.84 692.475 L1533.4 692.475 L1533.96 692.475 L1534.52 692.475 L1535.08 692.475 L1535.63 692.475 L1536.19 692.475 L1536.75 692.475 L1537.31 692.475 L1537.87 692.475 L1538.43 692.475 L1538.99 692.475 L1539.55 692.475 L1540.11 692.475 L1540.67 692.475 L1541.23 692.475 L1541.79 692.475 L1542.35 692.475 L1542.9 692.475 L1543.46 692.475 L1544.02 692.475 L1544.58 692.475 L1545.14 692.475 L1545.7 692.475 L1546.26 692.475 L1546.82 692.475 L1547.38 692.475 L1547.94 692.475 L1548.5 692.475 L1549.06 692.475 L1549.62 692.475 L1550.18 692.475 L1550.73 692.475 L1551.29 692.475 L1551.85 692.475 L1552.41 692.475 L1552.97 692.475 L1553.53 692.475 L1554.09 692.475 L1554.65 692.475 L1555.21 692.475 L1555.77 692.475 L1556.33 692.475 L1556.89 692.475 L1557.45 692.475 L1558 692.475 L1558.56 692.475 L1559.12 692.475 L1559.68 692.475 L1560.24 692.475 L1560.8 692.475 L1561.36 692.475 L1561.92 692.475 L1562.48 692.475 L1563.04 692.475 L1563.6 692.475 L1564.16 692.475 L1564.72 692.475 L1565.28 692.475 L1565.83 692.475 L1566.39 692.475 L1566.95 692.475 L1567.51 692.475 L1568.07 692.475 L1568.63 692.475 L1569.19 692.475 L1569.75 692.475 L1570.31 692.475 L1570.87 692.475 L1571.43 692.475 L1571.99 692.475 L1572.55 692.475 L1573.1 692.475 L1573.66 692.475 L1574.22 692.475 L1574.78 692.475 L1575.34 692.475 L1575.9 692.475 L1576.46 692.475 L1577.02 692.475 L1577.58 692.475 L1578.14 692.475 L1578.7 692.475 L1579.26 692.475 L1579.82 692.475 L1580.37 692.475 L1580.93 692.475 L1581.49 692.475 L1582.05 692.475 L1582.61 692.475 L1583.17 692.475 L1583.73 692.475 L1584.29 692.475 L1584.85 692.475 L1585.41 692.475 L1585.97 692.475 L1586.53 692.475 L1587.09 692.475 L1587.65 692.475 L1588.2 692.475 L1588.76 692.475 L1589.32 692.475 L1589.88 692.475 L1590.44 692.475 L1591 692.475 L1591.56 692.475 L1592.12 692.475 L1592.68 692.475 L1593.24 692.475 L1593.8 692.475 L1594.36 692.475 L1594.92 692.475 L1595.47 692.475 L1596.03 692.475 L1596.59 692.475 L1597.15 692.475 L1597.71 692.475 L1598.27 692.475 L1598.83 692.475 L1599.39 692.475 L1599.95 692.475 L1600.51 692.475 L1601.07 692.475 L1601.63 692.475 L1602.19 692.475 L1602.74 692.475 L1603.3 692.475 L1603.86 692.475 L1604.42 692.475 L1604.98 692.475 L1605.54 692.475 L1606.1 692.475 L1606.66 692.475 L1607.22 692.475 L1607.78 692.475 L1608.34 692.475 L1608.9 692.475 L1609.46 692.475 L1610.02 692.475 L1610.57 692.475 L1611.13 692.475 L1611.69 692.475 L1612.25 692.475 L1612.81 692.475 L1613.37 692.475 L1613.93 692.475 L1614.49 692.475 L1615.05 692.475 L1615.61 692.475 L1616.17 692.475 L1616.73 692.475 L1617.29 692.475 L1617.84 692.475 L1618.4 692.475 L1618.96 692.475 L1619.52 692.475 L1620.08 692.475 L1620.64 692.475 L1621.2 692.475 L1621.76 692.475 L1622.32 692.475 L1622.88 692.475 L1623.44 692.475 L1624 692.475 L1624.56 692.475 L1625.11 692.475 L1625.67 692.475 L1626.23 692.475 L1626.79 692.475 L1627.35 692.475 L1627.91 692.475 L1628.47 692.475 L1629.03 692.475 L1629.59 692.475 L1630.15 692.475 L1630.71 692.475 L1631.27 692.475 L1631.83 692.475 L1632.39 692.475 L1632.94 692.475 L1633.5 692.475 L1634.06 692.475 L1634.62 692.475 L1635.18 692.475 L1635.74 692.475 L1636.3 692.475 L1636.86 692.475 L1637.42 692.475 L1637.98 692.475 L1638.54 692.475 L1639.1 692.475 L1639.66 692.475 L1640.21 692.475 L1640.77 692.475 L1641.33 692.475 L1641.89 692.475 L1642.45 692.475 L1643.01 692.475 L1643.57 692.475 L1644.13 692.475 L1644.69 692.475 L1645.25 692.475 L1645.81 692.475 L1646.37 692.475 L1646.93 692.475 L1647.48 692.475 L1648.04 692.475 L1648.6 692.475 L1649.16 692.475 L1649.72 692.475 L1650.28 692.475 L1650.84 692.475 L1651.4 692.475 L1651.96 692.475 L1652.52 692.475 L1653.08 692.475 L1653.64 692.475 L1654.2 692.475 L1654.76 692.475 L1655.31 692.475 L1655.87 692.475 L1656.43 692.475 L1656.99 692.475 L1657.55 692.475 L1658.11 692.475 L1658.67 692.475 L1659.23 692.475 L1659.79 692.475 L1660.35 692.475 L1660.91 692.475 L1661.47 692.475 L1662.03 692.475 L1662.58 692.475 L1663.14 692.475 L1663.7 692.475 L1664.26 692.475 L1664.82 692.475 L1665.38 692.475 L1665.94 692.475 L1666.5 692.475 L1667.06 692.475 L1667.62 692.475 L1668.18 692.475 L1668.74 692.475 L1669.3 692.475 L1669.85 692.475 L1670.41 692.475 L1670.97 692.475 L1671.53 692.475 L1672.09 692.475 L1672.65 692.475 L1673.21 692.475 L1673.77 692.475 L1674.33 692.475 L1674.89 692.475 L1675.45 692.475 L1676.01 692.475 L1676.57 692.475 L1677.13 692.475 L1677.68 692.475 L1678.24 692.475 L1678.8 692.475 L1679.36 692.475 L1679.92 692.475 L1680.48 692.475 L1681.04 692.475 L1681.6 692.475 L1682.16 692.475 L1682.72 692.475 L1683.28 692.475 L1683.84 692.475 L1684.4 692.475 L1684.95 692.475 L1685.51 692.475 L1686.07 692.475 L1686.63 692.475 L1687.19 692.475 L1687.75 692.475 L1688.31 692.475 L1688.87 692.475 L1689.43 692.475 L1689.99 692.475 L1690.55 692.475 L1691.11 692.475 L1691.67 692.475 L1692.23 692.475 L1692.78 692.475 L1693.34 692.475 L1693.9 692.475 L1694.46 692.475 L1695.02 692.475 L1695.58 692.475 L1696.14 692.475 L1696.7 692.475 L1697.26 692.475 L1697.82 692.475 L1698.38 692.475 L1698.94 692.475 L1699.5 692.475 L1700.05 692.475 L1700.61 692.475 L1701.17 692.475 L1701.73 692.475 L1702.29 692.475 L1702.85 692.475 L1703.41 692.475 L1703.97 692.475 L1704.53 692.475 L1705.09 692.475 L1705.65 692.475 L1706.21 692.475 L1706.77 692.475 L1707.32 692.475 L1707.88 692.475 L1708.44 692.475 L1709 692.475 L1709.56 692.475 L1710.12 692.475 L1710.68 692.475 L1711.24 692.475 L1711.8 692.475 L1712.36 692.475 L1712.92 692.475 L1713.48 692.475 L1714.04 692.475 L1714.6 692.475 L1715.15 692.475 L1715.71 692.475 L1716.27 692.475 L1716.83 692.475 L1717.39 692.475 L1717.95 692.475 L1718.51 692.475 L1719.07 692.475 L1719.63 692.475 L1720.19 692.475 L1720.75 692.475 L1721.31 692.475 L1721.87 692.475 L1722.42 692.475 L1722.98 692.475 L1723.54 692.475 L1724.1 692.475 L1724.66 692.475 L1725.22 692.475 L1725.78 692.475 L1726.34 692.475 L1726.9 692.475 L1727.46 692.475 L1728.02 692.475 L1728.58 692.475 L1729.14 692.475 L1729.69 692.475 L1730.25 692.475 L1730.81 692.475 L1731.37 692.475 L1731.93 692.475 L1732.49 692.475 L1733.05 692.475 L1733.61 692.475 L1734.17 692.475 L1734.73 692.475 L1735.29 692.475 L1735.85 692.475 L1736.41 692.475 L1736.97 692.475 L1737.52 692.475 L1738.08 692.475 L1738.64 692.475 L1739.2 692.475 L1739.76 692.475 L1740.32 692.475 L1740.88 692.475 L1741.44 692.475 L1742 692.475 L1742.56 692.475 L1743.12 692.475 L1743.68 692.475 L1744.24 692.475 L1744.79 692.475 L1745.35 692.475 L1745.91 692.475 L1746.47 692.475 L1747.03 692.475 L1747.59 692.475 L1748.15 692.475 L1748.71 692.475 L1749.27 692.475 L1749.83 692.475 L1750.39 692.475 L1750.95 692.475 L1751.51 692.475 L1752.06 692.475 L1752.62 692.475 L1753.18 692.475 L1753.74 692.475 L1754.3 692.475 L1754.86 692.475 L1755.42 692.475 L1755.98 692.475 L1756.54 692.475 L1757.1 692.475 L1757.66 692.475 L1758.22 692.475 L1758.78 692.475 L1759.34 692.475 L1759.89 692.475 L1760.45 692.475 L1761.01 692.475 L1761.57 692.475 L1762.13 692.475 L1762.69 692.475 L1763.25 692.475 L1763.81 692.475 L1764.37 692.475 L1764.93 692.475 L1765.49 692.475 L1766.05 692.475 L1766.61 692.475 L1767.16 692.475 L1767.72 692.475 L1768.28 692.475 L1768.84 692.475 L1769.4 692.475 L1769.96 692.475 L1770.52 692.475 L1771.08 692.475 L1771.64 692.475 L1772.2 692.475 L1772.76 692.475 L1773.32 692.475 L1773.88 692.475 L1774.43 692.475 L1774.99 692.475 L1775.55 692.475 L1776.11 692.475 L1776.67 692.475 L1777.23 692.475 L1777.79 692.475 L1778.35 692.475 L1778.91 692.475 L1779.47 692.475 L1780.03 692.475 L1780.59 692.475 L1781.15 692.475 L1781.71 692.475 L1782.26 692.475 L1782.82 692.475 L1783.38 692.475 L1783.94 692.475 L1784.5 692.475 L1785.06 692.475 L1785.62 692.475 L1786.18 692.475 L1786.74 692.475 L1787.3 692.475 L1787.86 692.475 L1788.42 692.475 L1788.98 692.475 L1789.53 692.475 L1790.09 692.475 L1790.65 692.475 L1791.21 692.475 L1791.77 692.475 L1792.33 692.475 L1792.89 692.475 L1793.45 692.475 L1794.01 692.475 L1794.57 692.475 L1795.13 692.475 L1795.69 692.475 L1796.25 692.475 L1796.8 692.475 L1797.36 692.475 L1797.92 692.475 L1798.48 692.475 L1799.04 692.475 L1799.6 692.475 L1800.16 692.475 L1800.72 692.475 L1801.28 692.475 L1801.84 692.475 L1802.4 692.475 L1802.96 692.475 L1803.52 692.475 L1804.08 692.475 L1804.63 692.475 L1805.19 692.475 L1805.75 692.475 L1806.31 692.475 L1806.87 692.475 L1807.43 692.475 L1807.99 692.475 L1808.55 692.475 L1809.11 692.475 L1809.67 692.475 L1810.23 692.475 L1810.79 692.475 L1811.35 692.475 L1811.9 692.475 L1812.46 692.475 L1813.02 692.475 L1813.58 692.475 L1814.14 692.475 L1814.7 692.475 L1815.26 692.475 L1815.82 692.475 L1816.38 692.475 L1816.94 692.475 L1817.5 692.475 L1818.06 692.475 L1818.62 692.475 L1819.18 692.475 L1819.73 692.475 L1820.29 692.475 L1820.85 692.475 L1821.41 692.475 L1821.97 692.475 L1822.53 692.475 L1823.09 692.475 L1823.65 692.475 L1824.21 692.475 L1824.77 692.475 L1825.33 692.475 L1825.89 692.475 L1826.45 692.475 L1827 692.475 L1827.56 692.475 L1828.12 692.475 L1828.68 692.475 L1829.24 692.475 L1829.8 692.475 L1830.36 692.475 L1830.92 692.475 L1831.48 692.475 L1832.04 692.475 L1832.6 692.475 L1833.16 692.475 L1833.72 692.475 L1834.27 692.475 L1834.83 692.475 L1835.39 692.475 L1835.95 692.475 L1836.51 692.475 L1837.07 692.475 L1837.63 692.475 L1838.19 692.475 L1838.19 682.086 L1837.63 682.086 L1837.07 682.086 L1836.51 682.086 L1835.95 682.086 L1835.39 682.086 L1834.83 682.086 L1834.27 682.086 L1833.72 682.086 L1833.16 682.086 L1832.6 682.086 L1832.04 682.086 L1831.48 682.086 L1830.92 682.086 L1830.36 682.086 L1829.8 682.086 L1829.24 682.086 L1828.68 682.086 L1828.12 682.086 L1827.56 682.086 L1827 682.086 L1826.45 682.086 L1825.89 682.086 L1825.33 682.086 L1824.77 682.086 L1824.21 682.086 L1823.65 682.086 L1823.09 682.086 L1822.53 682.086 L1821.97 682.086 L1821.41 682.086 L1820.85 682.086 L1820.29 682.086 L1819.73 682.086 L1819.18 682.086 L1818.62 682.086 L1818.06 682.086 L1817.5 682.086 L1816.94 682.086 L1816.38 682.086 L1815.82 682.086 L1815.26 682.086 L1814.7 682.086 L1814.14 682.086 L1813.58 682.086 L1813.02 682.086 L1812.46 682.086 L1811.9 682.086 L1811.35 682.086 L1810.79 682.086 L1810.23 682.086 L1809.67 682.086 L1809.11 682.086 L1808.55 682.086 L1807.99 682.086 L1807.43 682.086 L1806.87 682.086 L1806.31 682.086 L1805.75 682.086 L1805.19 682.086 L1804.63 682.086 L1804.08 682.086 L1803.52 682.086 L1802.96 682.086 L1802.4 682.086 L1801.84 682.086 L1801.28 682.086 L1800.72 682.086 L1800.16 682.086 L1799.6 682.086 L1799.04 682.086 L1798.48 682.086 L1797.92 682.086 L1797.36 682.086 L1796.8 682.086 L1796.25 682.086 L1795.69 682.086 L1795.13 682.086 L1794.57 682.086 L1794.01 682.086 L1793.45 682.086 L1792.89 682.086 L1792.33 682.086 L1791.77 682.086 L1791.21 682.086 L1790.65 682.086 L1790.09 682.086 L1789.53 682.086 L1788.98 682.086 L1788.42 682.086 L1787.86 682.086 L1787.3 682.086 L1786.74 682.086 L1786.18 682.086 L1785.62 682.086 L1785.06 682.086 L1784.5 682.086 L1783.94 682.086 L1783.38 682.086 L1782.82 682.086 L1782.26 682.086 L1781.71 682.086 L1781.15 682.086 L1780.59 682.086 L1780.03 682.086 L1779.47 682.086 L1778.91 682.086 L1778.35 682.086 L1777.79 682.086 L1777.23 682.086 L1776.67 682.086 L1776.11 682.086 L1775.55 682.086 L1774.99 682.086 L1774.43 682.086 L1773.88 682.086 L1773.32 682.086 L1772.76 682.086 L1772.2 682.086 L1771.64 682.086 L1771.08 682.086 L1770.52 682.086 L1769.96 682.086 L1769.4 682.086 L1768.84 682.086 L1768.28 682.086 L1767.72 682.086 L1767.16 682.086 L1766.61 682.086 L1766.05 682.086 L1765.49 682.086 L1764.93 682.086 L1764.37 682.086 L1763.81 682.086 L1763.25 682.086 L1762.69 682.086 L1762.13 682.086 L1761.57 682.086 L1761.01 682.086 L1760.45 682.086 L1759.89 682.086 L1759.34 682.086 L1758.78 682.086 L1758.22 682.086 L1757.66 682.086 L1757.1 682.086 L1756.54 682.086 L1755.98 682.086 L1755.42 682.086 L1754.86 682.086 L1754.3 682.086 L1753.74 682.086 L1753.18 682.086 L1752.62 682.086 L1752.06 682.086 L1751.51 682.086 L1750.95 682.086 L1750.39 682.086 L1749.83 682.086 L1749.27 682.086 L1748.71 682.086 L1748.15 682.086 L1747.59 682.086 L1747.03 682.086 L1746.47 682.086 L1745.91 682.086 L1745.35 682.086 L1744.79 682.086 L1744.24 682.086 L1743.68 682.086 L1743.12 682.086 L1742.56 682.086 L1742 682.086 L1741.44 682.086 L1740.88 682.086 L1740.32 682.086 L1739.76 682.086 L1739.2 682.086 L1738.64 682.086 L1738.08 682.086 L1737.52 682.086 L1736.97 682.086 L1736.41 682.086 L1735.85 682.086 L1735.29 682.086 L1734.73 682.086 L1734.17 682.086 L1733.61 682.086 L1733.05 682.086 L1732.49 682.086 L1731.93 682.086 L1731.37 682.086 L1730.81 682.086 L1730.25 682.086 L1729.69 682.086 L1729.14 682.086 L1728.58 682.086 L1728.02 682.086 L1727.46 682.086 L1726.9 682.086 L1726.34 682.086 L1725.78 682.086 L1725.22 682.086 L1724.66 682.086 L1724.1 682.086 L1723.54 682.086 L1722.98 682.086 L1722.42 682.086 L1721.87 682.086 L1721.31 682.086 L1720.75 682.086 L1720.19 682.086 L1719.63 682.086 L1719.07 682.086 L1718.51 682.086 L1717.95 682.086 L1717.39 682.086 L1716.83 682.086 L1716.27 682.086 L1715.71 682.086 L1715.15 682.086 L1714.6 682.086 L1714.04 682.086 L1713.48 682.086 L1712.92 682.086 L1712.36 682.086 L1711.8 682.086 L1711.24 682.086 L1710.68 682.086 L1710.12 682.086 L1709.56 682.086 L1709 682.086 L1708.44 682.086 L1707.88 682.086 L1707.32 682.086 L1706.77 682.086 L1706.21 682.086 L1705.65 682.086 L1705.09 682.086 L1704.53 682.086 L1703.97 682.086 L1703.41 682.086 L1702.85 682.086 L1702.29 682.086 L1701.73 682.086 L1701.17 682.086 L1700.61 682.086 L1700.05 682.086 L1699.5 682.086 L1698.94 682.086 L1698.38 682.086 L1697.82 682.086 L1697.26 682.086 L1696.7 682.086 L1696.14 682.086 L1695.58 682.086 L1695.02 682.086 L1694.46 682.086 L1693.9 682.086 L1693.34 682.086 L1692.78 682.086 L1692.23 682.086 L1691.67 682.086 L1691.11 682.086 L1690.55 682.086 L1689.99 682.086 L1689.43 682.086 L1688.87 682.086 L1688.31 682.086 L1687.75 682.086 L1687.19 682.086 L1686.63 682.086 L1686.07 682.086 L1685.51 682.086 L1684.95 682.086 L1684.4 682.086 L1683.84 682.086 L1683.28 682.086 L1682.72 682.086 L1682.16 682.086 L1681.6 682.086 L1681.04 682.086 L1680.48 682.086 L1679.92 682.086 L1679.36 682.086 L1678.8 682.086 L1678.24 682.086 L1677.68 682.086 L1677.13 682.086 L1676.57 682.086 L1676.01 682.086 L1675.45 682.086 L1674.89 682.086 L1674.33 682.086 L1673.77 682.086 L1673.21 682.086 L1672.65 682.086 L1672.09 682.086 L1671.53 682.086 L1670.97 682.086 L1670.41 682.086 L1669.85 682.086 L1669.3 682.086 L1668.74 682.086 L1668.18 682.086 L1667.62 682.086 L1667.06 682.086 L1666.5 682.086 L1665.94 682.086 L1665.38 682.086 L1664.82 682.086 L1664.26 682.086 L1663.7 682.086 L1663.14 682.086 L1662.58 682.086 L1662.03 682.086 L1661.47 682.086 L1660.91 682.086 L1660.35 682.086 L1659.79 682.086 L1659.23 682.086 L1658.67 682.086 L1658.11 682.086 L1657.55 682.086 L1656.99 682.086 L1656.43 682.086 L1655.87 682.086 L1655.31 682.086 L1654.76 682.086 L1654.2 682.086 L1653.64 682.086 L1653.08 682.086 L1652.52 682.086 L1651.96 682.086 L1651.4 682.086 L1650.84 682.086 L1650.28 682.086 L1649.72 682.086 L1649.16 682.086 L1648.6 682.086 L1648.04 682.086 L1647.48 682.086 L1646.93 682.086 L1646.37 682.086 L1645.81 682.086 L1645.25 682.086 L1644.69 682.086 L1644.13 682.086 L1643.57 682.086 L1643.01 682.086 L1642.45 682.086 L1641.89 682.086 L1641.33 682.086 L1640.77 682.086 L1640.21 682.086 L1639.66 682.086 L1639.1 682.086 L1638.54 682.086 L1637.98 682.086 L1637.42 682.086 L1636.86 682.086 L1636.3 682.086 L1635.74 682.086 L1635.18 682.086 L1634.62 682.086 L1634.06 682.086 L1633.5 682.086 L1632.94 682.086 L1632.39 682.086 L1631.83 682.086 L1631.27 682.086 L1630.71 682.086 L1630.15 682.086 L1629.59 682.086 L1629.03 682.086 L1628.47 682.086 L1627.91 682.086 L1627.35 682.086 L1626.79 682.086 L1626.23 682.086 L1625.67 682.086 L1625.11 682.086 L1624.56 682.086 L1624 682.086 L1623.44 682.086 L1622.88 682.086 L1622.32 682.086 L1621.76 682.086 L1621.2 682.086 L1620.64 682.086 L1620.08 682.086 L1619.52 682.086 L1618.96 682.086 L1618.4 682.086 L1617.84 682.086 L1617.29 682.086 L1616.73 682.086 L1616.17 682.086 L1615.61 682.086 L1615.05 682.086 L1614.49 682.086 L1613.93 682.086 L1613.37 682.086 L1612.81 682.086 L1612.25 682.086 L1611.69 682.086 L1611.13 682.086 L1610.57 682.086 L1610.02 682.086 L1609.46 682.086 L1608.9 682.086 L1608.34 682.086 L1607.78 682.086 L1607.22 682.086 L1606.66 682.086 L1606.1 682.086 L1605.54 682.086 L1604.98 682.086 L1604.42 682.086 L1603.86 682.086 L1603.3 682.086 L1602.74 682.086 L1602.19 682.086 L1601.63 682.086 L1601.07 682.086 L1600.51 682.086 L1599.95 682.086 L1599.39 682.086 L1598.83 682.086 L1598.27 682.086 L1597.71 682.086 L1597.15 682.086 L1596.59 682.086 L1596.03 682.086 L1595.47 682.086 L1594.92 682.086 L1594.36 682.086 L1593.8 682.086 L1593.24 682.086 L1592.68 682.086 L1592.12 682.086 L1591.56 682.086 L1591 682.086 L1590.44 682.086 L1589.88 682.086 L1589.32 682.086 L1588.76 682.086 L1588.2 682.086 L1587.65 682.086 L1587.09 682.086 L1586.53 682.086 L1585.97 682.086 L1585.41 682.086 L1584.85 682.086 L1584.29 682.086 L1583.73 682.086 L1583.17 682.086 L1582.61 682.086 L1582.05 682.086 L1581.49 682.086 L1580.93 682.086 L1580.37 682.086 L1579.82 682.086 L1579.26 682.086 L1578.7 682.086 L1578.14 682.086 L1577.58 682.086 L1577.02 682.086 L1576.46 682.086 L1575.9 682.086 L1575.34 682.086 L1574.78 682.086 L1574.22 682.086 L1573.66 682.086 L1573.1 682.086 L1572.55 682.086 L1571.99 682.086 L1571.43 682.086 L1570.87 682.086 L1570.31 682.086 L1569.75 682.086 L1569.19 682.086 L1568.63 682.086 L1568.07 682.086 L1567.51 682.086 L1566.95 682.086 L1566.39 682.086 L1565.83 682.086 L1565.28 682.086 L1564.72 682.086 L1564.16 682.086 L1563.6 682.086 L1563.04 682.086 L1562.48 682.086 L1561.92 682.086 L1561.36 682.086 L1560.8 682.086 L1560.24 682.086 L1559.68 682.086 L1559.12 682.086 L1558.56 682.086 L1558 682.086 L1557.45 682.086 L1556.89 682.086 L1556.33 682.086 L1555.77 682.086 L1555.21 682.086 L1554.65 682.086 L1554.09 682.086 L1553.53 682.086 L1552.97 682.086 L1552.41 682.086 L1551.85 682.086 L1551.29 682.086 L1550.73 682.086 L1550.18 682.086 L1549.62 682.086 L1549.06 682.086 L1548.5 682.086 L1547.94 682.086 L1547.38 682.086 L1546.82 682.086 L1546.26 682.086 L1545.7 682.086 L1545.14 682.086 L1544.58 682.086 L1544.02 682.086 L1543.46 682.086 L1542.9 682.086 L1542.35 682.086 L1541.79 682.086 L1541.23 682.086 L1540.67 682.086 L1540.11 682.086 L1539.55 682.086 L1538.99 682.086 L1538.43 682.086 L1537.87 682.086 L1537.31 682.086 L1536.75 682.086 L1536.19 682.086 L1535.63 682.086 L1535.08 682.086 L1534.52 682.086 L1533.96 682.086 L1533.4 682.086 L1532.84 682.086 L1532.28 682.086 L1531.72 682.086 L1531.16 682.086 L1530.6 682.086 L1530.04 682.086 L1529.48 682.086 L1528.92 682.086 L1528.36 682.086 L1527.81 682.086 L1527.25 682.086 L1526.69 682.086 L1526.13 682.086 L1525.57 682.086 L1525.01 682.086 L1524.45 682.086 L1523.89 682.086 L1523.33 682.086 L1522.77 682.086 L1522.21 682.086 L1521.65 682.086 L1521.09 682.086 L1520.53 682.086 L1519.98 682.086 L1519.42 682.086 L1518.86 682.086 L1518.3 682.086 L1517.74 682.086 L1517.18 682.086 L1516.62 682.086 L1516.06 682.086 L1515.5 682.086 L1514.94 682.086 L1514.38 682.086 L1513.82 682.086 L1513.26 682.086 L1512.71 682.086 L1512.15 682.086 L1511.59 682.086 L1511.03 682.086 L1510.47 682.086 L1509.91 682.086 L1509.35 682.086 L1508.79 682.086 L1508.23 682.086 L1507.67 682.086 L1507.11 682.086 L1506.55 682.086 L1505.99 682.086 L1505.44 682.086 L1504.88 682.086 L1504.32 682.086 L1503.76 682.086 L1503.2 682.086 L1502.64 682.086 L1502.08 682.086 L1501.52 682.086 L1500.96 682.086 L1500.4 682.086 L1499.84 682.086 L1499.28 682.086 L1498.72 682.086 L1498.16 682.086 L1497.61 682.086 L1497.05 682.086 L1496.49 682.086 L1495.93 682.086 L1495.37 682.086 L1494.81 682.086 L1494.25 682.086 L1493.69 682.086 L1493.13 682.086 L1492.57 682.086 L1492.01 682.086 L1491.45 682.086 L1490.89 682.086 L1490.34 682.086 L1489.78 682.086 L1489.22 682.086 L1488.66 682.086 L1488.1 682.086 L1487.54 682.086 L1486.98 682.086 L1486.42 682.086 L1485.86 682.086 L1485.3 682.086 L1484.74 682.086 L1484.18 682.086 L1483.62 682.086 L1483.07 682.086 L1482.51 682.086 L1481.95 682.086 L1481.39 682.086 L1480.83 682.086 L1480.27 682.086 L1479.71 682.086 L1479.15 682.086 L1478.59 682.086 L1478.03 682.086 L1477.47 682.086 L1476.91 682.086 L1476.35 682.086 L1475.79 682.086 L1475.24 682.086 L1474.68 682.086 L1474.12 682.086 L1473.56 682.086 L1473 682.086 L1472.44 682.086 L1471.88 682.086 L1471.32 682.086 L1470.76 682.086 L1470.2 682.086 L1469.64 682.086 L1469.08 682.086 L1468.52 682.086 L1467.97 682.086 L1467.41 682.086 L1466.85 682.086 L1466.29 682.086 L1465.73 682.086 L1465.17 682.086 L1464.61 682.086 L1464.05 682.086 L1463.49 682.086 L1462.93 682.086 L1462.37 682.086 L1461.81 682.086 L1461.25 682.086 L1460.7 682.086 L1460.14 682.086 L1459.58 682.086 L1459.02 682.086 L1458.46 682.086 L1457.9 682.086 L1457.34 682.086 L1456.78 682.086 L1456.22 682.086 L1455.66 682.086 L1455.1 682.086 L1454.54 682.086 L1453.98 682.086 L1453.42 682.086 L1452.87 682.086 L1452.31 682.086 L1451.75 682.086 L1451.19 682.086 L1450.63 682.086 L1450.07 682.086 L1449.51 682.086 L1448.95 682.086 L1448.39 682.086 L1447.83 682.086 L1447.27 682.086 L1446.71 682.086 L1446.15 682.086 L1445.6 682.086 L1445.04 682.086 L1444.48 682.086 L1443.92 682.086 L1443.36 682.086 L1442.8 682.086 L1442.24 682.086 L1441.68 682.086 L1441.12 682.086 L1440.56 682.086 L1440 682.086 L1439.44 682.086 L1438.88 682.086 L1438.33 682.086 L1437.77 682.086 L1437.21 682.086 L1436.65 682.086 L1436.09 682.086 L1435.53 682.086 L1434.97 682.086 L1434.41 682.086 L1433.85 682.086 L1433.29 682.086 L1432.73 682.086 L1432.17 682.086 L1431.61 682.086 L1431.05 682.086 L1430.5 682.086 L1429.94 682.086 L1429.38 682.086 L1428.82 682.086 L1428.26 682.086 L1427.7 682.086 L1427.14 682.086 L1426.58 682.086 L1426.02 682.086 L1425.46 682.086 L1424.9 682.086 L1424.34 682.086 L1423.78 682.086 L1423.23 682.086 L1422.67 682.086 L1422.11 682.086 L1421.55 682.086 L1420.99 682.086 L1420.43 682.086 L1419.87 682.086 L1419.31 682.086 L1418.75 682.086 L1418.19 682.086 L1417.63 682.086 L1417.07 682.086 L1416.51 682.086 L1415.95 682.086 L1415.4 682.086 L1414.84 682.086 L1414.28 682.086 L1413.72 682.086 L1413.16 682.086 L1412.6 682.086 L1412.04 682.086 L1411.48 682.086 L1410.92 682.086 L1410.36 682.086 L1409.8 682.086 L1409.24 682.086 L1408.68 682.086 L1408.13 682.086 L1407.57 682.086 L1407.01 682.086 L1406.45 682.086 L1405.89 682.086 L1405.33 682.086 L1404.77 682.086 L1404.21 682.086 L1403.65 682.086 L1403.09 682.086 L1402.53 682.086 L1401.97 682.086 L1401.41 682.086 L1400.86 682.086 L1400.3 682.086 L1399.74 682.086 L1399.18 682.086 L1398.62 682.086 L1398.06 682.086 L1397.5 682.086 L1396.94 682.086 L1396.38 682.086 L1395.82 682.086 L1395.26 682.086 L1394.7 682.086 L1394.14 682.086 L1393.58 682.086 L1393.03 682.086 L1392.47 682.086 L1391.91 682.086 L1391.35 682.086 L1390.79 682.086 L1390.23 682.086 L1389.67 682.086 L1389.11 682.086 L1388.55 682.086 L1387.99 682.086 L1387.43 682.086 L1386.87 682.086 L1386.31 682.086 L1385.76 682.086 L1385.2 682.086 L1384.64 682.086 L1384.08 682.086 L1383.52 682.086 L1382.96 682.086 L1382.4 682.086 L1381.84 682.086 L1381.28 682.086 L1380.72 682.086 L1380.16 682.086 L1379.6 682.086 L1379.04 682.086 L1378.49 682.086 L1377.93 682.086 L1377.37 682.086 L1376.81 682.086 L1376.25 682.086 L1375.69 682.086 L1375.13 682.086 L1374.57 682.086 L1374.01 682.086 L1373.45 682.086 L1372.89 682.086 L1372.33 682.086 L1371.77 682.086 L1371.21 682.086 L1370.66 682.086 L1370.1 682.086 L1369.54 682.086 L1368.98 682.086 L1368.42 682.086 L1367.86 682.086 L1367.3 682.086 L1366.74 682.086 L1366.18 682.086 L1365.62 682.086 L1365.06 682.086 L1364.5 682.086 L1363.94 682.086 L1363.39 682.086 L1362.83 682.086 L1362.27 682.086 L1361.71 682.086 L1361.15 682.086 L1360.59 682.086 L1360.03 682.086 L1359.47 682.086 L1358.91 682.086 L1358.35 682.086 L1357.79 682.086 L1357.23 682.086 L1356.67 682.086 L1356.12 682.086 L1355.56 682.086 L1355 682.086 L1354.44 682.086 L1353.88 682.086 L1353.32 682.086 L1352.76 682.086 L1352.2 682.086 L1351.64 682.086 L1351.08 682.086 L1350.52 682.086 L1349.96 682.086 L1349.4 682.086 L1348.84 682.086 L1348.29 682.086 L1347.73 682.086 L1347.17 682.086 L1346.61 682.086 L1346.05 682.086 L1345.49 682.086 L1344.93 682.086 L1344.37 682.086 L1343.81 682.086 L1343.25 682.086 L1342.69 682.086 L1342.13 682.086 L1341.57 682.086 L1341.02 682.086 L1340.46 682.086 L1339.9 682.086 L1339.34 682.086 L1338.78 682.086 L1338.22 682.086 L1337.66 682.086 L1337.1 682.086 L1336.54 682.086 L1335.98 682.086 L1335.42 682.086 L1334.86 682.086 L1334.3 682.086 L1333.75 682.086 L1333.19 682.086 L1332.63 682.086 L1332.07 682.086 L1331.51 682.086 L1330.95 682.086 L1330.39 682.086 L1329.83 682.086 L1329.27 682.086 L1328.71 682.086 L1328.15 682.086 L1327.59 682.086 L1327.03 682.086 L1326.47 682.086 L1325.92 682.086 L1325.36 682.086 L1324.8 682.086 L1324.24 682.086 L1323.68 682.086 L1323.12 682.086 L1322.56 682.086 L1322 682.086 L1321.44 682.086 L1320.88 682.086 L1320.32 682.086 L1319.76 682.086 L1319.2 682.086 L1318.65 682.086 L1318.09 682.086 L1317.53 682.086 L1316.97 682.086 L1316.41 682.086 L1315.85 682.086 L1315.29 682.086 L1314.73 682.086 L1314.17 682.086 L1313.61 682.086 L1313.05 682.086 L1312.49 682.086 L1311.93 682.086 L1311.38 682.086 L1310.82 682.086 L1310.26 682.086 L1309.7 682.086 L1309.14 682.086 L1308.58 682.086 L1308.02 682.086 L1307.46 682.086 L1306.9 682.086 L1306.34 682.086 L1305.78 682.086 L1305.22 682.086 L1304.66 682.086 L1304.1 682.086 L1303.55 682.086 L1302.99 682.086 L1302.43 682.086 L1301.87 682.086 L1301.31 682.086 L1300.75 682.086 L1300.19 682.086 L1299.63 682.086 L1299.07 682.086 L1298.51 682.086 L1297.95 682.086 L1297.39 682.086 L1296.83 682.086 L1296.28 682.086 L1295.72 682.086 L1295.16 682.086 L1294.6 682.086 L1294.04 682.086 L1293.48 682.086 L1292.92 682.086 L1292.36 682.086 L1291.8 682.086 L1291.24 682.086 L1290.68 682.086 L1290.12 682.086 L1289.56 682.086 L1289 682.086 L1288.45 682.086 L1287.89 682.086 L1287.33 682.086 L1286.77 682.086 L1286.21 682.086 L1285.65 682.086 L1285.09 682.086 L1284.53 682.086 L1283.97 682.086 L1283.41 682.086 L1282.85 682.086 L1282.29 682.086 L1281.73 682.086 L1281.18 682.086 L1280.62 682.086 L1280.06 682.086 L1279.5 682.086 L1278.94 682.086 L1278.38 682.086 L1277.82 682.086 L1277.26 682.086 L1276.7 682.086 L1276.14 682.086 L1275.58 682.086 L1275.02 682.086 L1274.46 682.086 L1273.91 682.086 L1273.35 682.086 L1272.79 682.086 L1272.23 682.086 L1271.67 682.086 L1271.11 682.086 L1270.55 682.086 L1269.99 682.086 L1269.43 682.086 L1268.87 682.086 L1268.31 682.086 L1267.75 682.086 L1267.19 682.086 L1266.63 682.086 L1266.08 682.086 L1265.52 682.086 L1264.96 682.086 L1264.4 682.086 L1263.84 682.086 L1263.28 682.086 L1262.72 682.086 L1262.16 682.086 L1261.6 682.086 L1261.04 682.086 L1260.48 682.086 L1259.92 682.086 L1259.36 682.086 L1258.81 682.086 L1258.25 682.086 L1257.69 682.086 L1257.13 682.086 L1256.57 682.086 L1256.01 682.086 L1255.45 682.086 L1254.89 682.086 L1254.33 682.086 L1253.77 682.086 L1253.21 682.086 L1252.65 682.086 L1252.09 682.086 L1251.54 682.086 L1250.98 682.086 L1250.42 682.086 L1249.86 682.086 L1249.3 682.086 L1248.74 682.086 L1248.18 682.086 L1247.62 682.086 L1247.06 682.086 L1246.5 682.086 L1245.94 682.086 L1245.38 682.086 L1244.82 682.086 L1244.26 682.086 L1243.71 682.086 L1243.15 682.086 L1242.59 682.086 L1242.03 682.086 L1241.47 682.086 L1240.91 682.086 L1240.35 682.086 L1239.79 682.086 L1239.23 682.086 L1238.67 682.086 L1238.11 682.086 L1237.55 682.086 L1236.99 682.086 L1236.44 682.086 L1235.88 682.086 L1235.32 682.086 L1234.76 682.086 L1234.2 682.086 L1233.64 682.086 L1233.08 682.086 L1232.52 682.086 L1231.96 682.086 L1231.4 682.086 L1230.84 682.086 L1230.28 682.086 L1229.72 682.086 L1229.17 682.086 L1228.61 682.086 L1228.05 682.086 L1227.49 682.086 L1226.93 682.086 L1226.37 682.086 L1225.81 682.086 L1225.25 682.086 L1224.69 682.086 L1224.13 682.086 L1223.57 682.086 L1223.01 682.086 L1222.45 682.086 L1221.89 682.086 L1221.34 682.086 L1220.78 682.086 L1220.22 682.086 L1219.66 682.086 L1219.1 682.086 L1218.54 682.086 L1217.98 682.086 L1217.42 682.086 L1216.86 682.086 L1216.3 682.086 L1215.74 682.086 L1215.18 682.086 L1214.62 682.086 L1214.07 682.086 L1213.51 682.086 L1212.95 682.086 L1212.39 682.086 L1211.83 682.086 L1211.27 682.086 L1210.71 682.086 L1210.15 682.086 L1209.59 682.086 L1209.03 682.086 L1208.47 682.086 L1207.91 682.086 L1207.35 682.086 L1206.8 682.086 L1206.24 682.086 L1205.68 682.086 L1205.12 682.086 L1204.56 682.086 L1204 682.086 L1203.44 682.086 L1202.88 682.086 L1202.32 682.086 L1201.76 682.086 L1201.2 682.086 L1200.64 682.086 L1200.08 682.086 L1199.52 682.086 L1198.97 682.086 L1198.41 682.086 L1197.85 682.086 L1197.29 682.086 L1196.73 682.086 L1196.17 682.086 L1195.61 682.086 L1195.05 682.086 L1194.49 682.086 L1193.93 682.086 L1193.37 682.086 L1192.81 682.086 L1192.25 682.086 L1191.7 682.086 L1191.14 682.086 L1190.58 682.086 L1190.02 682.086 L1189.46 682.086 L1188.9 682.086 L1188.34 682.086 L1187.78 682.086 L1187.22 682.086 L1186.66 682.086 L1186.1 682.086 L1185.54 682.086 L1184.98 682.086 L1184.43 682.086 L1183.87 682.086 L1183.31 682.086 L1182.75 682.086 L1182.19 682.086 L1181.63 682.086 L1181.07 682.086 L1180.51 682.086 L1179.95 682.086 L1179.39 682.086 L1178.83 682.086 L1178.27 682.086 L1177.71 682.086 L1177.15 682.086 L1176.6 682.086 L1176.04 682.086 L1175.48 682.086 L1174.92 682.086 L1174.36 682.086 L1173.8 682.086 L1173.24 682.086 L1172.68 682.086 L1172.12 682.086 L1171.56 682.086 L1171 682.086 L1170.44 682.086 L1169.88 682.086 L1169.33 682.086 L1168.77 682.086 L1168.21 682.086 L1167.65 682.086 L1167.09 682.086 L1166.53 682.086 L1165.97 682.086 L1165.41 682.086 L1164.85 682.086 L1164.29 682.086 L1163.73 682.086 L1163.17 682.086 L1162.61 682.086 L1162.05 682.086 L1161.5 682.086 L1160.94 682.086 L1160.38 682.086 L1159.82 682.086 L1159.26 682.086 L1158.7 682.086 L1158.14 682.086 L1157.58 682.086 L1157.02 682.086 L1156.46 682.086 L1155.9 682.086 L1155.34 682.086 L1154.78 682.086 L1154.23 682.086 L1153.67 682.086 L1153.11 682.086 L1152.55 682.086 L1151.99 682.086 L1151.43 682.086 L1150.87 682.086 L1150.31 682.086 L1149.75 682.086 L1149.19 682.086 L1148.63 682.086 L1148.07 682.086 L1147.51 682.086 L1146.96 682.086 L1146.4 682.086 L1145.84 682.086 L1145.28 682.086 L1144.72 682.086 L1144.16 682.086 L1143.6 682.086 L1143.04 682.086 L1142.48 682.086 L1141.92 682.086 L1141.36 682.086 L1140.8 682.086 L1140.24 682.086 L1139.68 682.086 L1139.13 682.086 L1138.57 682.086 L1138.01 682.086 L1137.45 682.086 L1136.89 682.086 L1136.33 682.086 L1135.77 682.086 L1135.21 682.086 L1134.65 682.086 L1134.09 682.086 L1133.53 682.086 L1132.97 682.086 L1132.41 682.086 L1131.86 682.086 L1131.3 682.086 L1130.74 682.086 L1130.18 682.086 L1129.62 682.086 L1129.06 682.086 L1128.5 682.086 L1127.94 682.086 L1127.38 682.086 L1126.82 682.086 L1126.26 682.086 L1125.7 682.086 L1125.14 682.086 L1124.59 682.086 L1124.03 682.086 L1123.47 682.086 L1122.91 682.086 L1122.35 682.086 L1121.79 682.086 L1121.23 682.086 L1120.67 682.086 L1120.11 682.086 L1119.55 682.086 L1118.99 682.086 L1118.43 682.086 L1117.87 682.086 L1117.31 682.086 L1116.76 682.086 L1116.2 682.086 L1115.64 682.086 L1115.08 682.086 L1114.52 682.086 L1113.96 682.086 L1113.4 682.086 L1112.84 682.086 L1112.28 682.086 L1111.72 682.086 L1111.16 682.086 L1110.6 682.086 L1110.04 682.086 L1109.49 682.086 L1108.93 682.086 L1108.37 682.086 L1107.81 682.086 L1107.25 682.086 L1106.69 682.086 L1106.13 682.086 L1105.57 682.086 L1105.01 682.086 L1104.45 682.086 L1103.89 682.086 L1103.33 682.086 L1102.77 682.086 L1102.22 682.086 L1101.66 682.086 L1101.1 682.086 L1100.54 682.086 L1099.98 682.086 L1099.42 682.086 L1098.86 682.086 L1098.3 682.086 L1097.74 682.086 L1097.18 682.086 L1096.62 682.086 L1096.06 682.086 L1095.5 682.086 L1094.94 682.086 L1094.39 682.086 L1093.83 682.086 L1093.27 682.086 L1092.71 682.086 L1092.15 682.086 L1091.59 682.086 L1091.03 682.086 L1090.47 682.086 L1089.91 682.086 L1089.35 682.086 L1088.79 682.086 L1088.23 682.086 L1087.67 682.086 L1087.12 682.086 L1086.56 682.086 L1086 682.086 L1085.44 682.086 L1084.88 682.086 L1084.32 682.086 L1083.76 682.086 L1083.2 682.086 L1082.64 682.086 L1082.08 682.086 L1081.52 682.086 L1080.96 682.086 L1080.4 682.086 L1079.85 682.086 L1079.29 682.086 L1078.73 682.086 L1078.17 682.086 L1077.61 682.086 L1077.05 682.086 L1076.49 682.086 L1075.93 682.086 L1075.37 682.086 L1074.81 682.086 L1074.25 682.086 L1073.69 682.086 L1073.13 682.086 L1072.57 682.086 L1072.02 682.086 L1071.46 682.086 L1070.9 682.086 L1070.34 682.086 L1069.78 682.086 L1069.22 682.086 L1068.66 682.086 L1068.1 682.086 L1067.54 682.086 L1066.98 682.086 L1066.42 682.086 L1065.86 682.086 L1065.3 682.086 L1064.75 682.086 L1064.19 682.086 L1063.63 682.086 L1063.07 682.086 L1062.51 682.086 L1061.95 682.086 L1061.39 682.086 L1060.83 682.086 L1060.27 682.086 L1059.71 682.086 L1059.15 682.086 L1058.59 682.086 L1058.03 682.086 L1057.48 682.086 L1056.92 682.086 L1056.36 682.086 L1055.8 682.086 L1055.24 682.086 L1054.68 682.086 L1054.12 682.086 L1053.56 682.086 L1053 682.086 L1052.44 682.086 L1051.88 682.086 L1051.32 682.086 L1050.76 682.086 L1050.2 682.086 L1049.65 682.086 L1049.09 682.086 L1048.53 682.086 L1047.97 682.086 L1047.41 682.086 L1046.85 682.086 L1046.29 682.086 L1045.73 682.086 L1045.17 682.086 L1044.61 682.086 L1044.05 682.086 L1043.49 682.086 L1042.93 682.086 L1042.38 682.086 L1041.82 682.086 L1041.26 682.086 L1040.7 682.086 L1040.14 682.086 L1039.58 682.086 L1039.02 682.086 L1038.46 682.086 L1037.9 682.086 L1037.34 682.086 L1036.78 682.086 L1036.22 682.086 L1035.66 682.086 L1035.1 682.086 L1034.55 682.086 L1033.99 682.086 L1033.43 682.086 L1032.87 682.086 L1032.31 682.086 L1031.75 682.086 L1031.19 682.086 L1030.63 682.086 L1030.07 682.086 L1029.51 682.086 L1028.95 682.086 L1028.39 682.086 L1027.83 682.086 L1027.28 682.086 L1026.72 682.086 L1026.16 682.086 L1025.6 682.086 L1025.04 682.086 L1024.48 682.086 L1023.92 682.086 L1023.36 682.086 L1022.8 682.086 L1022.24 682.086 L1021.68 682.086 L1021.12 682.086 L1020.56 682.086 L1020.01 682.086 L1019.45 682.086 L1018.89 682.086 L1018.33 682.086 L1017.77 682.086 L1017.21 682.086 L1016.65 682.086 L1016.09 682.086 L1015.53 682.086 L1014.97 682.086 L1014.41 682.086 L1013.85 682.086 L1013.29 682.086 L1012.73 682.086 L1012.18 682.086 L1011.62 682.086 L1011.06 682.086 L1010.5 682.086 L1009.94 682.086 L1009.38 682.086 L1008.82 682.086 L1008.26 682.086 L1007.7 682.086 L1007.14 682.086 L1006.58 682.086 L1006.02 682.086 L1005.46 682.086 L1004.91 682.086 L1004.35 682.086 L1003.79 682.086 L1003.23 682.086 L1002.67 682.086 L1002.11 682.086 L1001.55 682.086 L1000.99 682.086 L1000.43 682.086 L999.872 682.086 L999.313 682.086 L998.754 682.086 L998.194 682.086 L997.635 682.086 L997.076 682.086 L996.517 682.086 L995.957 682.086 L995.398 682.086 L994.839 682.086 L994.28 682.086 L993.72 682.086 L993.161 682.086 L992.602 682.086 L992.043 682.086 L991.483 682.086 L990.924 682.086 L990.365 682.086 L989.806 682.086 L989.246 682.086 L988.687 682.086 L988.128 682.086 L987.569 682.086 L987.009 682.086 L986.45 682.086 L985.891 682.086 L985.332 682.086 L984.772 682.086 L984.213 682.086 L983.654 682.086 L983.095 682.086 L982.535 682.086 L981.976 682.086 L981.417 682.086 L980.858 682.086 L980.298 682.086 L979.739 682.086 L979.18 682.086 L978.621 682.086 L978.061 682.086 L977.502 682.086 L976.943 682.086 L976.384 682.086 L975.824 682.086 L975.265 682.086 L974.706 682.086 L974.147 682.086 L973.587 682.086 L973.028 682.086 L972.469 682.086 L971.91 682.086 L971.35 682.086 L970.791 682.086 L970.232 682.086 L969.673 682.086 L969.113 682.086 L968.554 682.086 L967.995 682.086 L967.436 682.086 L966.876 682.086 L966.317 682.086 L965.758 682.086 L965.199 682.086 L964.639 682.086 L964.08 682.086 L963.521 682.086 L962.962 682.086 L962.402 682.086 L961.843 682.086 L961.284 682.086 L960.725 682.086 L960.165 682.086 L959.606 682.086 L959.047 682.086 L958.488 682.086 L957.928 682.086 L957.369 682.086 L956.81 682.086 L956.251 682.086 L955.691 682.086 L955.132 682.086 L954.573 682.086 L954.014 682.086 L953.454 682.086 L952.895 682.086 L952.336 682.086 L951.777 682.086 L951.217 682.086 L950.658 682.086 L950.099 682.086 L949.54 682.086 L948.98 682.086 L948.421 682.086 L947.862 682.086 L947.303 682.086 L946.743 682.086 L946.184 682.086 L945.625 682.086 L945.066 682.086 L944.506 682.086 L943.947 682.086 L943.388 682.086 L942.829 682.086 L942.269 682.086 L941.71 682.086 L941.151 682.086 L940.592 682.086 L940.032 682.086 L939.473 682.086 L938.914 682.086 L938.355 682.086 L937.795 682.086 L937.236 682.086 L936.677 682.086 L936.118 682.086 L935.558 682.086 L934.999 682.086 L934.44 682.086 L933.881 682.086 L933.321 682.086 L932.762 682.086 L932.203 682.086 L931.644 682.086 L931.084 682.086 L930.525 682.086 L929.966 682.086 L929.406 682.086 L928.847 682.086 L928.288 682.086 L927.729 682.086 L927.169 682.086 L926.61 682.086 L926.051 682.086 L925.492 682.086 L924.932 682.086 L924.373 682.086 L923.814 682.086 L923.255 682.086 L922.695 682.086 L922.136 682.086 L921.577 682.086 L921.018 682.086 L920.458 682.086 L919.899 682.086 L919.34 682.086 L918.781 682.086 L918.221 682.086 L917.662 682.086 L917.103 682.086 L916.544 682.086 L915.984 682.086 L915.425 682.086 L914.866 682.086 L914.307 682.086 L913.747 682.086 L913.188 682.086 L912.629 682.086 L912.07 682.086 L911.51 682.086 L910.951 682.086 L910.392 682.086 L909.833 682.086 L909.273 682.086 L908.714 682.086 L908.155 682.086 L907.596 682.086 L907.036 682.086 L906.477 682.086 L905.918 682.086 L905.359 682.086 L904.799 682.086 L904.24 682.086 L903.681 682.086 L903.122 682.086 L902.562 682.086 L902.003 682.086 L901.444 682.086 L900.885 682.086 L900.325 682.086 L899.766 682.086 L899.207 682.086 L898.648 682.086 L898.088 682.086 L897.529 682.086 L896.97 682.086 L896.411 682.086 L895.851 682.086 L895.292 682.086 L894.733 682.086 L894.174 682.086 L893.614 682.086 L893.055 682.086 L892.496 682.086 L891.937 682.086 L891.377 682.086 L890.818 682.086 L890.259 682.086 L889.7 682.086 L889.14 682.086 L888.581 682.086 L888.022 682.086 L887.463 682.086 L886.903 682.086 L886.344 682.086 L885.785 682.086 L885.226 682.086 L884.666 682.086 L884.107 682.086 L883.548 682.086 L882.989 682.086 L882.429 682.086 L881.87 682.086 L881.311 682.086 L880.752 682.086 L880.192 682.086 L879.633 682.086 L879.074 682.086 L878.515 682.086 L877.955 682.086 L877.396 682.086 L876.837 682.086 L876.278 682.086 L875.718 682.086 L875.159 682.086 L874.6 682.086 L874.041 682.086 L873.481 682.086 L872.922 682.086 L872.363 682.086 L871.804 682.086 L871.244 682.086 L870.685 682.086 L870.126 682.086 L869.567 682.086 L869.007 682.086 L868.448 682.086 L867.889 682.086 L867.33 682.086 L866.77 682.086 L866.211 682.086 L865.652 682.086 L865.093 682.086 L864.533 682.086 L863.974 682.086 L863.415 682.086 L862.856 682.086 L862.296 682.086 L861.737 682.086 L861.178 682.086 L860.619 682.086 L860.059 682.086 L859.5 682.086 L858.941 682.086 L858.382 682.086 L857.822 682.086 L857.263 682.086 L856.704 682.086 L856.145 682.086 L855.585 682.086 L855.026 682.086 L854.467 682.086 L853.908 682.086 L853.348 682.086 L852.789 682.086 L852.23 682.086 L851.671 682.086 L851.111 682.086 L850.552 682.086 L849.993 682.086 L849.434 682.086 L848.874 682.086 L848.315 682.086 L847.756 682.086 L847.197 682.086 L846.637 682.086 L846.078 682.086 L845.519 682.086 L844.96 682.086 L844.4 682.086 L843.841 682.086 L843.282 682.086 L842.723 682.086 L842.163 682.086 L841.604 682.086 L841.045 682.086 L840.486 682.086 L839.926 682.086 L839.367 682.086 L838.808 682.086 L838.249 682.086 L837.689 682.086 L837.13 682.086 L836.571 682.086 L836.012 682.086 L835.452 682.086 L834.893 682.086 L834.334 682.086 L833.775 682.086 L833.215 682.086 L832.656 682.086 L832.097 682.086 L831.538 682.086 L830.978 682.086 L830.419 682.086 L829.86 682.086 L829.301 682.086 L828.741 682.086 L828.182 682.086 L827.623 682.086 L827.064 682.086 L826.504 682.086 L825.945 682.086 L825.386 682.086 L824.827 682.086 L824.267 682.086 L823.708 682.086 L823.149 682.086 L822.59 682.086 L822.03 682.086 L821.471 682.086 L820.912 682.086 L820.353 682.086 L819.793 682.086 L819.234 682.086 L818.675 682.086 L818.116 682.086 L817.556 682.086 L816.997 682.086 L816.438 682.086 L815.879 682.086 L815.319 682.086 L814.76 682.086 L814.201 682.086 L813.642 682.086 L813.082 682.086 L812.523 682.086 L811.964 682.086 L811.405 682.086 L810.845 682.086 L810.286 682.086 L809.727 682.086 L809.168 682.086 L808.608 682.086 L808.049 682.086 L807.49 682.086 L806.931 682.086 L806.371 682.086 L805.812 682.086 L805.253 682.086 L804.693 682.086 L804.134 682.086 L803.575 682.086 L803.016 682.086 L802.456 682.086 L801.897 682.086 L801.338 682.086 L800.779 682.086 L800.219 682.086 L799.66 682.086 L799.101 682.086 L798.542 682.086 L797.982 682.086 L797.423 682.086 L796.864 682.086 L796.305 682.086 L795.745 682.086 L795.186 682.086 L794.627 682.086 L794.068 682.086 L793.508 682.086 L792.949 682.086 L792.39 682.086 L791.831 682.086 L791.271 682.086 L790.712 682.086 L790.153 682.086 L789.594 682.086 L789.034 682.086 L788.475 682.086 L787.916 682.086 L787.357 682.086 L786.797 682.086 L786.238 682.086 L785.679 682.086 L785.12 682.086 L784.56 682.086 L784.001 682.086 L783.442 682.086 L782.883 682.086 L782.323 682.086 L781.764 682.086 L781.205 682.086 L780.646 682.086 L780.086 682.086 L779.527 682.086 L778.968 682.086 L778.409 682.086 L777.849 682.086 L777.29 682.086 L776.731 682.086 L776.172 682.086 L775.612 682.086 L775.053 682.086 L774.494 682.086 L773.935 682.086 L773.375 682.086 L772.816 682.086 L772.257 682.086 L771.698 682.086 L771.138 682.086 L770.579 682.086 L770.02 682.086 L769.461 682.086 L768.901 682.086 L768.342 682.086 L767.783 682.086 L767.224 682.086 L766.664 682.086 L766.105 682.086 L765.546 682.086 L764.987 682.086 L764.427 682.086 L763.868 682.086 L763.309 682.086 L762.75 682.086 L762.19 682.086 L761.631 682.086 L761.072 682.086 L760.513 682.086 L759.953 682.086 L759.394 682.086 L758.835 682.086 L758.276 682.086 L757.716 682.086 L757.157 682.086 L756.598 682.086 L756.039 682.086 L755.479 682.086 L754.92 682.086 L754.361 682.086 L753.802 682.086 L753.242 682.086 L752.683 682.086 L752.124 682.086 L751.565 682.086 L751.005 682.086 L750.446 682.086 L749.887 682.086 L749.328 682.086 L748.768 682.086 L748.209 682.086 L747.65 682.086 L747.091 682.086 L746.531 682.086 L745.972 682.086 L745.413 682.086 L744.854 682.086 L744.294 682.086 L743.735 682.086 L743.176 682.086 L742.617 682.086 L742.057 682.086 L741.498 682.086 L740.939 682.086 L740.38 682.086 L739.82 682.086 L739.261 682.086 L738.702 682.086 L738.143 682.086 L737.583 682.086 L737.024 682.086 L736.465 682.086 L735.906 682.086 L735.346 682.086 L734.787 682.086 L734.228 682.086 L733.669 682.086 L733.109 682.086 L732.55 682.086 L731.991 682.086 L731.432 682.086 L730.872 682.086 L730.313 682.086 L729.754 682.086 L729.195 682.086 L728.635 682.086 L728.076 682.086 L727.517 682.086 L726.958 682.086 L726.398 682.086 L725.839 682.086 L725.28 682.086 L724.721 682.086 L724.161 682.086 L723.602 682.086 L723.043 682.086 L722.484 682.086 L721.924 682.086 L721.365 682.086 L720.806 682.086 L720.247 682.086  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip213)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.281 720.806,687.281 721.365,687.281 721.924,687.281 722.484,687.281 723.043,687.281 723.602,687.281 724.161,687.281 724.721,687.281 725.28,687.281 725.839,687.281 726.398,687.281 726.958,687.281 727.517,687.281 728.076,687.281 728.635,687.281 729.195,687.281 729.754,687.281 730.313,687.281 730.872,687.281 731.432,687.281 731.991,687.281 732.55,687.281 733.109,687.281 733.669,687.281 734.228,687.281 734.787,687.281 735.346,687.281 735.906,687.281 736.465,687.281 737.024,687.281 737.583,687.281 738.143,687.281 738.702,687.281 739.261,687.281 739.82,687.281 740.38,687.281 740.939,687.281 741.498,687.281 742.057,687.281 742.617,687.281 743.176,687.281 743.735,687.281 744.294,687.281 744.854,687.281 745.413,687.281 745.972,687.281 746.531,687.281 747.091,687.281 747.65,687.281 748.209,687.281 748.768,687.281 749.328,687.281 749.887,687.281 750.446,687.281 751.005,687.281 751.565,687.281 752.124,687.281 752.683,687.281 753.242,687.281 753.802,687.281 754.361,687.281 754.92,687.281 755.479,687.281 756.039,687.281 756.598,687.281 757.157,687.281 757.716,687.281 758.276,687.281 758.835,687.281 759.394,687.281 759.953,687.281 760.513,687.281 761.072,687.281 761.631,687.281 762.19,687.281 762.75,687.281 763.309,687.281 763.868,687.281 764.427,687.281 764.987,687.281 765.546,687.281 766.105,687.281 766.664,687.281 767.224,687.281 767.783,687.281 768.342,687.281 768.901,687.281 769.461,687.281 770.02,687.281 770.579,687.281 771.138,687.281 771.698,687.281 772.257,687.281 772.816,687.281 773.375,687.281 773.935,687.281 774.494,687.281 775.053,687.281 775.612,687.281 776.172,687.281 776.731,687.281 777.29,687.281 777.849,687.281 778.409,687.281 778.968,687.281 779.527,687.281 780.086,687.281 780.646,687.281 781.205,687.281 781.764,687.281 782.323,687.281 782.883,687.281 783.442,687.281 784.001,687.281 784.56,687.281 785.12,687.281 785.679,687.281 786.238,687.281 786.797,687.281 787.357,687.281 787.916,687.281 788.475,687.281 789.034,687.281 789.594,687.281 790.153,687.281 790.712,687.281 791.271,687.281 791.831,687.281 792.39,687.281 792.949,687.281 793.508,687.281 794.068,687.281 794.627,687.281 795.186,687.281 795.745,687.281 796.305,687.281 796.864,687.281 797.423,687.281 797.982,687.281 798.542,687.281 799.101,687.281 799.66,687.281 800.219,687.281 800.779,687.281 801.338,687.281 801.897,687.281 802.456,687.281 803.016,687.281 803.575,687.281 804.134,687.281 804.693,687.281 805.253,687.281 805.812,687.281 806.371,687.281 806.931,687.281 807.49,687.281 808.049,687.281 808.608,687.281 809.168,687.281 809.727,687.281 810.286,687.281 810.845,687.281 811.405,687.281 811.964,687.281 812.523,687.281 813.082,687.281 813.642,687.281 814.201,687.281 814.76,687.281 815.319,687.281 815.879,687.281 816.438,687.281 816.997,687.281 817.556,687.281 818.116,687.281 818.675,687.281 819.234,687.281 819.793,687.281 820.353,687.281 820.912,687.281 821.471,687.281 822.03,687.281 822.59,687.281 823.149,687.281 823.708,687.281 824.267,687.281 824.827,687.281 825.386,687.281 825.945,687.281 826.504,687.281 827.064,687.281 827.623,687.281 828.182,687.281 828.741,687.281 829.301,687.281 829.86,687.281 830.419,687.281 830.978,687.281 831.538,687.281 832.097,687.281 832.656,687.281 833.215,687.281 833.775,687.281 834.334,687.281 834.893,687.281 835.452,687.281 836.012,687.281 836.571,687.281 837.13,687.281 837.689,687.281 838.249,687.281 838.808,687.281 839.367,687.281 839.926,687.281 840.486,687.281 841.045,687.281 841.604,687.281 842.163,687.281 842.723,687.281 843.282,687.281 843.841,687.281 844.4,687.281 844.96,687.281 845.519,687.281 846.078,687.281 846.637,687.281 847.197,687.281 847.756,687.281 848.315,687.281 848.874,687.281 849.434,687.281 849.993,687.281 850.552,687.281 851.111,687.281 851.671,687.281 852.23,687.281 852.789,687.281 853.348,687.281 853.908,687.281 854.467,687.281 855.026,687.281 855.585,687.281 856.145,687.281 856.704,687.281 857.263,687.281 857.822,687.281 858.382,687.281 858.941,687.281 859.5,687.281 860.059,687.281 860.619,687.281 861.178,687.281 861.737,687.281 862.296,687.281 862.856,687.281 863.415,687.281 863.974,687.281 864.533,687.281 865.093,687.281 865.652,687.281 866.211,687.281 866.77,687.281 867.33,687.281 867.889,687.281 868.448,687.281 869.007,687.281 869.567,687.281 870.126,687.281 870.685,687.281 871.244,687.281 871.804,687.281 872.363,687.281 872.922,687.281 873.481,687.281 874.041,687.281 874.6,687.281 875.159,687.281 875.718,687.281 876.278,687.281 876.837,687.281 877.396,687.281 877.955,687.281 878.515,687.281 879.074,687.281 879.633,687.281 880.192,687.281 880.752,687.281 881.311,687.281 881.87,687.281 882.429,687.281 882.989,687.281 883.548,687.281 884.107,687.281 884.666,687.281 885.226,687.281 885.785,687.281 886.344,687.281 886.903,687.281 887.463,687.281 888.022,687.281 888.581,687.281 889.14,687.281 889.7,687.281 890.259,687.281 890.818,687.281 891.377,687.281 891.937,687.281 892.496,687.281 893.055,687.281 893.614,687.281 894.174,687.281 894.733,687.281 895.292,687.281 895.851,687.281 896.411,687.281 896.97,687.281 897.529,687.281 898.088,687.281 898.648,687.281 899.207,687.281 899.766,687.281 900.325,687.281 900.885,687.281 901.444,687.281 902.003,687.281 902.562,687.281 903.122,687.281 903.681,687.281 904.24,687.281 904.799,687.281 905.359,687.281 905.918,687.281 906.477,687.281 907.036,687.281 907.596,687.281 908.155,687.281 908.714,687.281 909.273,687.281 909.833,687.281 910.392,687.281 910.951,687.281 911.51,687.281 912.07,687.281 912.629,687.281 913.188,687.281 913.747,687.281 914.307,687.281 914.866,687.281 915.425,687.281 915.984,687.281 916.544,687.281 917.103,687.281 917.662,687.281 918.221,687.281 918.781,687.281 919.34,687.281 919.899,687.281 920.458,687.281 921.018,687.281 921.577,687.281 922.136,687.281 922.695,687.281 923.255,687.281 923.814,687.281 924.373,687.281 924.932,687.281 925.492,687.281 926.051,687.281 926.61,687.281 927.169,687.281 927.729,687.281 928.288,687.281 928.847,687.281 929.406,687.281 929.966,687.281 930.525,687.281 931.084,687.281 931.644,687.281 932.203,687.281 932.762,687.281 933.321,687.281 933.881,687.281 934.44,687.281 934.999,687.281 935.558,687.281 936.118,687.281 936.677,687.281 937.236,687.281 937.795,687.281 938.355,687.281 938.914,687.281 939.473,687.281 940.032,687.281 940.592,687.281 941.151,687.281 941.71,687.281 942.269,687.281 942.829,687.281 943.388,687.281 943.947,687.281 944.506,687.281 945.066,687.281 945.625,687.281 946.184,687.281 946.743,687.281 947.303,687.281 947.862,687.281 948.421,687.281 948.98,687.281 949.54,687.281 950.099,687.281 950.658,687.281 951.217,687.281 951.777,687.281 952.336,687.281 952.895,687.281 953.454,687.281 954.014,687.281 954.573,687.281 955.132,687.281 955.691,687.281 956.251,687.281 956.81,687.281 957.369,687.281 957.928,687.281 958.488,687.281 959.047,687.281 959.606,687.281 960.165,687.281 960.725,687.281 961.284,687.281 961.843,687.281 962.402,687.281 962.962,687.281 963.521,687.281 964.08,687.281 964.639,687.281 965.199,687.281 965.758,687.281 966.317,687.281 966.876,687.281 967.436,687.281 967.995,687.281 968.554,687.281 969.113,687.281 969.673,687.281 970.232,687.281 970.791,687.281 971.35,687.281 971.91,687.281 972.469,687.281 973.028,687.281 973.587,687.281 974.147,687.281 974.706,687.281 975.265,687.281 975.824,687.281 976.384,687.281 976.943,687.281 977.502,687.281 978.061,687.281 978.621,687.281 979.18,687.281 979.739,687.281 980.298,687.281 980.858,687.281 981.417,687.281 981.976,687.281 982.535,687.281 983.095,687.281 983.654,687.281 984.213,687.281 984.772,687.281 985.332,687.281 985.891,687.281 986.45,687.281 987.009,687.281 987.569,687.281 988.128,687.281 988.687,687.281 989.246,687.281 989.806,687.281 990.365,687.281 990.924,687.281 991.483,687.281 992.043,687.281 992.602,687.281 993.161,687.281 993.72,687.281 994.28,687.281 994.839,687.281 995.398,687.281 995.957,687.281 996.517,687.281 997.076,687.281 997.635,687.281 998.194,687.281 998.754,687.281 999.313,687.281 999.872,687.281 1000.43,687.281 1000.99,687.281 1001.55,687.281 1002.11,687.281 1002.67,687.281 1003.23,687.281 1003.79,687.281 1004.35,687.281 1004.91,687.281 1005.46,687.281 1006.02,687.281 1006.58,687.281 1007.14,687.281 1007.7,687.281 1008.26,687.281 1008.82,687.281 1009.38,687.281 1009.94,687.281 1010.5,687.281 1011.06,687.281 1011.62,687.281 1012.18,687.281 1012.73,687.281 1013.29,687.281 1013.85,687.281 1014.41,687.281 1014.97,687.281 1015.53,687.281 1016.09,687.281 1016.65,687.281 1017.21,687.281 1017.77,687.281 1018.33,687.281 1018.89,687.281 1019.45,687.281 1020.01,687.281 1020.56,687.281 1021.12,687.281 1021.68,687.281 1022.24,687.281 1022.8,687.281 1023.36,687.281 1023.92,687.281 1024.48,687.281 1025.04,687.281 1025.6,687.281 1026.16,687.281 1026.72,687.281 1027.28,687.281 1027.83,687.281 1028.39,687.281 1028.95,687.281 1029.51,687.281 1030.07,687.281 1030.63,687.281 1031.19,687.281 1031.75,687.281 1032.31,687.281 1032.87,687.281 1033.43,687.281 1033.99,687.281 1034.55,687.281 1035.1,687.281 1035.66,687.281 1036.22,687.281 1036.78,687.281 1037.34,687.281 1037.9,687.281 1038.46,687.281 1039.02,687.281 1039.58,687.281 1040.14,687.281 1040.7,687.281 1041.26,687.281 1041.82,687.281 1042.38,687.281 1042.93,687.281 1043.49,687.281 1044.05,687.281 1044.61,687.281 1045.17,687.281 1045.73,687.281 1046.29,687.281 1046.85,687.281 1047.41,687.281 1047.97,687.281 1048.53,687.281 1049.09,687.281 1049.65,687.281 1050.2,687.281 1050.76,687.281 1051.32,687.281 1051.88,687.281 1052.44,687.281 1053,687.281 1053.56,687.281 1054.12,687.281 1054.68,687.281 1055.24,687.281 1055.8,687.281 1056.36,687.281 1056.92,687.281 1057.48,687.281 1058.03,687.281 1058.59,687.281 1059.15,687.281 1059.71,687.281 1060.27,687.281 1060.83,687.281 1061.39,687.281 1061.95,687.281 1062.51,687.281 1063.07,687.281 1063.63,687.281 1064.19,687.281 1064.75,687.281 1065.3,687.281 1065.86,687.281 1066.42,687.281 1066.98,687.281 1067.54,687.281 1068.1,687.281 1068.66,687.281 1069.22,687.281 1069.78,687.281 1070.34,687.281 1070.9,687.281 1071.46,687.281 1072.02,687.281 1072.57,687.281 1073.13,687.281 1073.69,687.281 1074.25,687.281 1074.81,687.281 1075.37,687.281 1075.93,687.281 1076.49,687.281 1077.05,687.281 1077.61,687.281 1078.17,687.281 1078.73,687.281 1079.29,687.281 1079.85,687.281 1080.4,687.281 1080.96,687.281 1081.52,687.281 1082.08,687.281 1082.64,687.281 1083.2,687.281 1083.76,687.281 1084.32,687.281 1084.88,687.281 1085.44,687.281 1086,687.281 1086.56,687.281 1087.12,687.281 1087.67,687.281 1088.23,687.281 1088.79,687.281 1089.35,687.281 1089.91,687.281 1090.47,687.281 1091.03,687.281 1091.59,687.281 1092.15,687.281 1092.71,687.281 1093.27,687.281 1093.83,687.281 1094.39,687.281 1094.94,687.281 1095.5,687.281 1096.06,687.281 1096.62,687.281 1097.18,687.281 1097.74,687.281 1098.3,687.281 1098.86,687.281 1099.42,687.281 1099.98,687.281 1100.54,687.281 1101.1,687.281 1101.66,687.281 1102.22,687.281 1102.77,687.281 1103.33,687.281 1103.89,687.281 1104.45,687.281 1105.01,687.281 1105.57,687.281 1106.13,687.281 1106.69,687.281 1107.25,687.281 1107.81,687.281 1108.37,687.281 1108.93,687.281 1109.49,687.281 1110.04,687.281 1110.6,687.281 1111.16,687.281 1111.72,687.281 1112.28,687.281 1112.84,687.281 1113.4,687.281 1113.96,687.281 1114.52,687.281 1115.08,687.281 1115.64,687.281 1116.2,687.281 1116.76,687.281 1117.31,687.281 1117.87,687.281 1118.43,687.281 1118.99,687.281 1119.55,687.281 1120.11,687.281 1120.67,687.281 1121.23,687.281 1121.79,687.281 1122.35,687.281 1122.91,687.281 1123.47,687.281 1124.03,687.281 1124.59,687.281 1125.14,687.281 1125.7,687.281 1126.26,687.281 1126.82,687.281 1127.38,687.281 1127.94,687.281 1128.5,687.281 1129.06,687.281 1129.62,687.281 1130.18,687.281 1130.74,687.281 1131.3,687.281 1131.86,687.281 1132.41,687.281 1132.97,687.281 1133.53,687.281 1134.09,687.281 1134.65,687.281 1135.21,687.281 1135.77,687.281 1136.33,687.281 1136.89,687.281 1137.45,687.281 1138.01,687.281 1138.57,687.281 1139.13,687.281 1139.68,687.281 1140.24,687.281 1140.8,687.281 1141.36,687.281 1141.92,687.281 1142.48,687.281 1143.04,687.281 1143.6,687.281 1144.16,687.281 1144.72,687.281 1145.28,687.281 1145.84,687.281 1146.4,687.281 1146.96,687.281 1147.51,687.281 1148.07,687.281 1148.63,687.281 1149.19,687.281 1149.75,687.281 1150.31,687.281 1150.87,687.281 1151.43,687.281 1151.99,687.281 1152.55,687.281 1153.11,687.281 1153.67,687.281 1154.23,687.281 1154.78,687.281 1155.34,687.281 1155.9,687.281 1156.46,687.281 1157.02,687.281 1157.58,687.281 1158.14,687.281 1158.7,687.281 1159.26,687.281 1159.82,687.281 1160.38,687.281 1160.94,687.281 1161.5,687.281 1162.05,687.281 1162.61,687.281 1163.17,687.281 1163.73,687.281 1164.29,687.281 1164.85,687.281 1165.41,687.281 1165.97,687.281 1166.53,687.281 1167.09,687.281 1167.65,687.281 1168.21,687.281 1168.77,687.281 1169.33,687.281 1169.88,687.281 1170.44,687.281 1171,687.281 1171.56,687.281 1172.12,687.281 1172.68,687.281 1173.24,687.281 1173.8,687.281 1174.36,687.281 1174.92,687.281 1175.48,687.281 1176.04,687.281 1176.6,687.281 1177.15,687.281 1177.71,687.281 1178.27,687.281 1178.83,687.281 1179.39,687.281 1179.95,687.281 1180.51,687.281 1181.07,687.281 1181.63,687.281 1182.19,687.281 1182.75,687.281 1183.31,687.281 1183.87,687.281 1184.43,687.281 1184.98,687.281 1185.54,687.281 1186.1,687.281 1186.66,687.281 1187.22,687.281 1187.78,687.281 1188.34,687.281 1188.9,687.281 1189.46,687.281 1190.02,687.281 1190.58,687.281 1191.14,687.281 1191.7,687.281 1192.25,687.281 1192.81,687.281 1193.37,687.281 1193.93,687.281 1194.49,687.281 1195.05,687.281 1195.61,687.281 1196.17,687.281 1196.73,687.281 1197.29,687.281 1197.85,687.281 1198.41,687.281 1198.97,687.281 1199.52,687.281 1200.08,687.281 1200.64,687.281 1201.2,687.281 1201.76,687.281 1202.32,687.281 1202.88,687.281 1203.44,687.281 1204,687.281 1204.56,687.281 1205.12,687.281 1205.68,687.281 1206.24,687.281 1206.8,687.281 1207.35,687.281 1207.91,687.281 1208.47,687.281 1209.03,687.281 1209.59,687.281 1210.15,687.281 1210.71,687.281 1211.27,687.281 1211.83,687.281 1212.39,687.281 1212.95,687.281 1213.51,687.281 1214.07,687.281 1214.62,687.281 1215.18,687.281 1215.74,687.281 1216.3,687.281 1216.86,687.281 1217.42,687.281 1217.98,687.281 1218.54,687.281 1219.1,687.281 1219.66,687.281 1220.22,687.281 1220.78,687.281 1221.34,687.281 1221.89,687.281 1222.45,687.281 1223.01,687.281 1223.57,687.281 1224.13,687.281 1224.69,687.281 1225.25,687.281 1225.81,687.281 1226.37,687.281 1226.93,687.281 1227.49,687.281 1228.05,687.281 1228.61,687.281 1229.17,687.281 1229.72,687.281 1230.28,687.281 1230.84,687.281 1231.4,687.281 1231.96,687.281 1232.52,687.281 1233.08,687.281 1233.64,687.281 1234.2,687.281 1234.76,687.281 1235.32,687.281 1235.88,687.281 1236.44,687.281 1236.99,687.281 1237.55,687.281 1238.11,687.281 1238.67,687.281 1239.23,687.281 1239.79,687.281 1240.35,687.281 1240.91,687.281 1241.47,687.281 1242.03,687.281 1242.59,687.281 1243.15,687.281 1243.71,687.281 1244.26,687.281 1244.82,687.281 1245.38,687.281 1245.94,687.281 1246.5,687.281 1247.06,687.281 1247.62,687.281 1248.18,687.281 1248.74,687.281 1249.3,687.281 1249.86,687.281 1250.42,687.281 1250.98,687.281 1251.54,687.281 1252.09,687.281 1252.65,687.281 1253.21,687.281 1253.77,687.281 1254.33,687.281 1254.89,687.281 1255.45,687.281 1256.01,687.281 1256.57,687.281 1257.13,687.281 1257.69,687.281 1258.25,687.281 1258.81,687.281 1259.36,687.281 1259.92,687.281 1260.48,687.281 1261.04,687.281 1261.6,687.281 1262.16,687.281 1262.72,687.281 1263.28,687.281 1263.84,687.281 1264.4,687.281 1264.96,687.281 1265.52,687.281 1266.08,687.281 1266.63,687.281 1267.19,687.281 1267.75,687.281 1268.31,687.281 1268.87,687.281 1269.43,687.281 1269.99,687.281 1270.55,687.281 1271.11,687.281 1271.67,687.281 1272.23,687.281 1272.79,687.281 1273.35,687.281 1273.91,687.281 1274.46,687.281 1275.02,687.281 1275.58,687.281 1276.14,687.281 1276.7,687.281 1277.26,687.281 1277.82,687.281 1278.38,687.281 1278.94,687.281 1279.5,687.281 1280.06,687.281 1280.62,687.281 1281.18,687.281 1281.73,687.281 1282.29,687.281 1282.85,687.281 1283.41,687.281 1283.97,687.281 1284.53,687.281 1285.09,687.281 1285.65,687.281 1286.21,687.281 1286.77,687.281 1287.33,687.281 1287.89,687.281 1288.45,687.281 1289,687.281 1289.56,687.281 1290.12,687.281 1290.68,687.281 1291.24,687.281 1291.8,687.281 1292.36,687.281 1292.92,687.281 1293.48,687.281 1294.04,687.281 1294.6,687.281 1295.16,687.281 1295.72,687.281 1296.28,687.281 1296.83,687.281 1297.39,687.281 1297.95,687.281 1298.51,687.281 1299.07,687.281 1299.63,687.281 1300.19,687.281 1300.75,687.281 1301.31,687.281 1301.87,687.281 1302.43,687.281 1302.99,687.281 1303.55,687.281 1304.1,687.281 1304.66,687.281 1305.22,687.281 1305.78,687.281 1306.34,687.281 1306.9,687.281 1307.46,687.281 1308.02,687.281 1308.58,687.281 1309.14,687.281 1309.7,687.281 1310.26,687.281 1310.82,687.281 1311.38,687.281 1311.93,687.281 1312.49,687.281 1313.05,687.281 1313.61,687.281 1314.17,687.281 1314.73,687.281 1315.29,687.281 1315.85,687.281 1316.41,687.281 1316.97,687.281 1317.53,687.281 1318.09,687.281 1318.65,687.281 1319.2,687.281 1319.76,687.281 1320.32,687.281 1320.88,687.281 1321.44,687.281 1322,687.281 1322.56,687.281 1323.12,687.281 1323.68,687.281 1324.24,687.281 1324.8,687.281 1325.36,687.281 1325.92,687.281 1326.47,687.281 1327.03,687.281 1327.59,687.281 1328.15,687.281 1328.71,687.281 1329.27,687.281 1329.83,687.281 1330.39,687.281 1330.95,687.281 1331.51,687.281 1332.07,687.281 1332.63,687.281 1333.19,687.281 1333.75,687.281 1334.3,687.281 1334.86,687.281 1335.42,687.281 1335.98,687.281 1336.54,687.281 1337.1,687.281 1337.66,687.281 1338.22,687.281 1338.78,687.281 1339.34,687.281 1339.9,687.281 1340.46,687.281 1341.02,687.281 1341.57,687.281 1342.13,687.281 1342.69,687.281 1343.25,687.281 1343.81,687.281 1344.37,687.281 1344.93,687.281 1345.49,687.281 1346.05,687.281 1346.61,687.281 1347.17,687.281 1347.73,687.281 1348.29,687.281 1348.84,687.281 1349.4,687.281 1349.96,687.281 1350.52,687.281 1351.08,687.281 1351.64,687.281 1352.2,687.281 1352.76,687.281 1353.32,687.281 1353.88,687.281 1354.44,687.281 1355,687.281 1355.56,687.281 1356.12,687.281 1356.67,687.281 1357.23,687.281 1357.79,687.281 1358.35,687.281 1358.91,687.281 1359.47,687.281 1360.03,687.281 1360.59,687.281 1361.15,687.281 1361.71,687.281 1362.27,687.281 1362.83,687.281 1363.39,687.281 1363.94,687.281 1364.5,687.281 1365.06,687.281 1365.62,687.281 1366.18,687.281 1366.74,687.281 1367.3,687.281 1367.86,687.281 1368.42,687.281 1368.98,687.281 1369.54,687.281 1370.1,687.281 1370.66,687.281 1371.21,687.281 1371.77,687.281 1372.33,687.281 1372.89,687.281 1373.45,687.281 1374.01,687.281 1374.57,687.281 1375.13,687.281 1375.69,687.281 1376.25,687.281 1376.81,687.281 1377.37,687.281 1377.93,687.281 1378.49,687.281 1379.04,687.281 1379.6,687.281 1380.16,687.281 1380.72,687.281 1381.28,687.281 1381.84,687.281 1382.4,687.281 1382.96,687.281 1383.52,687.281 1384.08,687.281 1384.64,687.281 1385.2,687.281 1385.76,687.281 1386.31,687.281 1386.87,687.281 1387.43,687.281 1387.99,687.281 1388.55,687.281 1389.11,687.281 1389.67,687.281 1390.23,687.281 1390.79,687.281 1391.35,687.281 1391.91,687.281 1392.47,687.281 1393.03,687.281 1393.58,687.281 1394.14,687.281 1394.7,687.281 1395.26,687.281 1395.82,687.281 1396.38,687.281 1396.94,687.281 1397.5,687.281 1398.06,687.281 1398.62,687.281 1399.18,687.281 1399.74,687.281 1400.3,687.281 1400.86,687.281 1401.41,687.281 1401.97,687.281 1402.53,687.281 1403.09,687.281 1403.65,687.281 1404.21,687.281 1404.77,687.281 1405.33,687.281 1405.89,687.281 1406.45,687.281 1407.01,687.281 1407.57,687.281 1408.13,687.281 1408.68,687.281 1409.24,687.281 1409.8,687.281 1410.36,687.281 1410.92,687.281 1411.48,687.281 1412.04,687.281 1412.6,687.281 1413.16,687.281 1413.72,687.281 1414.28,687.281 1414.84,687.281 1415.4,687.281 1415.95,687.281 1416.51,687.281 1417.07,687.281 1417.63,687.281 1418.19,687.281 1418.75,687.281 1419.31,687.281 1419.87,687.281 1420.43,687.281 1420.99,687.281 1421.55,687.281 1422.11,687.281 1422.67,687.281 1423.23,687.281 1423.78,687.281 1424.34,687.281 1424.9,687.281 1425.46,687.281 1426.02,687.281 1426.58,687.281 1427.14,687.281 1427.7,687.281 1428.26,687.281 1428.82,687.281 1429.38,687.281 1429.94,687.281 1430.5,687.281 1431.05,687.281 1431.61,687.281 1432.17,687.281 1432.73,687.281 1433.29,687.281 1433.85,687.281 1434.41,687.281 1434.97,687.281 1435.53,687.281 1436.09,687.281 1436.65,687.281 1437.21,687.281 1437.77,687.281 1438.33,687.281 1438.88,687.281 1439.44,687.281 1440,687.281 1440.56,687.281 1441.12,687.281 1441.68,687.281 1442.24,687.281 1442.8,687.281 1443.36,687.281 1443.92,687.281 1444.48,687.281 1445.04,687.281 1445.6,687.281 1446.15,687.281 1446.71,687.281 1447.27,687.281 1447.83,687.281 1448.39,687.281 1448.95,687.281 1449.51,687.281 1450.07,687.281 1450.63,687.281 1451.19,687.281 1451.75,687.281 1452.31,687.281 1452.87,687.281 1453.42,687.281 1453.98,687.281 1454.54,687.281 1455.1,687.281 1455.66,687.281 1456.22,687.281 1456.78,687.281 1457.34,687.281 1457.9,687.281 1458.46,687.281 1459.02,687.281 1459.58,687.281 1460.14,687.281 1460.7,687.281 1461.25,687.281 1461.81,687.281 1462.37,687.281 1462.93,687.281 1463.49,687.281 1464.05,687.281 1464.61,687.281 1465.17,687.281 1465.73,687.281 1466.29,687.281 1466.85,687.281 1467.41,687.281 1467.97,687.281 1468.52,687.281 1469.08,687.281 1469.64,687.281 1470.2,687.281 1470.76,687.281 1471.32,687.281 1471.88,687.281 1472.44,687.281 1473,687.281 1473.56,687.281 1474.12,687.281 1474.68,687.281 1475.24,687.281 1475.79,687.281 1476.35,687.281 1476.91,687.281 1477.47,687.281 1478.03,687.281 1478.59,687.281 1479.15,687.281 1479.71,687.281 1480.27,687.281 1480.83,687.281 1481.39,687.281 1481.95,687.281 1482.51,687.281 1483.07,687.281 1483.62,687.281 1484.18,687.281 1484.74,687.281 1485.3,687.281 1485.86,687.281 1486.42,687.281 1486.98,687.281 1487.54,687.281 1488.1,687.281 1488.66,687.281 1489.22,687.281 1489.78,687.281 1490.34,687.281 1490.89,687.281 1491.45,687.281 1492.01,687.281 1492.57,687.281 1493.13,687.281 1493.69,687.281 1494.25,687.281 1494.81,687.281 1495.37,687.281 1495.93,687.281 1496.49,687.281 1497.05,687.281 1497.61,687.281 1498.16,687.281 1498.72,687.281 1499.28,687.281 1499.84,687.281 1500.4,687.281 1500.96,687.281 1501.52,687.281 1502.08,687.281 1502.64,687.281 1503.2,687.281 1503.76,687.281 1504.32,687.281 1504.88,687.281 1505.44,687.281 1505.99,687.281 1506.55,687.281 1507.11,687.281 1507.67,687.281 1508.23,687.281 1508.79,687.281 1509.35,687.281 1509.91,687.281 1510.47,687.281 1511.03,687.281 1511.59,687.281 1512.15,687.281 1512.71,687.281 1513.26,687.281 1513.82,687.281 1514.38,687.281 1514.94,687.281 1515.5,687.281 1516.06,687.281 1516.62,687.281 1517.18,687.281 1517.74,687.281 1518.3,687.281 1518.86,687.281 1519.42,687.281 1519.98,687.281 1520.53,687.281 1521.09,687.281 1521.65,687.281 1522.21,687.281 1522.77,687.281 1523.33,687.281 1523.89,687.281 1524.45,687.281 1525.01,687.281 1525.57,687.281 1526.13,687.281 1526.69,687.281 1527.25,687.281 1527.81,687.281 1528.36,687.281 1528.92,687.281 1529.48,687.281 1530.04,687.281 1530.6,687.281 1531.16,687.281 1531.72,687.281 1532.28,687.281 1532.84,687.281 1533.4,687.281 1533.96,687.281 1534.52,687.281 1535.08,687.281 1535.63,687.281 1536.19,687.281 1536.75,687.281 1537.31,687.281 1537.87,687.281 1538.43,687.281 1538.99,687.281 1539.55,687.281 1540.11,687.281 1540.67,687.281 1541.23,687.281 1541.79,687.281 1542.35,687.281 1542.9,687.281 1543.46,687.281 1544.02,687.281 1544.58,687.281 1545.14,687.281 1545.7,687.281 1546.26,687.281 1546.82,687.281 1547.38,687.281 1547.94,687.281 1548.5,687.281 1549.06,687.281 1549.62,687.281 1550.18,687.281 1550.73,687.281 1551.29,687.281 1551.85,687.281 1552.41,687.281 1552.97,687.281 1553.53,687.281 1554.09,687.281 1554.65,687.281 1555.21,687.281 1555.77,687.281 1556.33,687.281 1556.89,687.281 1557.45,687.281 1558,687.281 1558.56,687.281 1559.12,687.281 1559.68,687.281 1560.24,687.281 1560.8,687.281 1561.36,687.281 1561.92,687.281 1562.48,687.281 1563.04,687.281 1563.6,687.281 1564.16,687.281 1564.72,687.281 1565.28,687.281 1565.83,687.281 1566.39,687.281 1566.95,687.281 1567.51,687.281 1568.07,687.281 1568.63,687.281 1569.19,687.281 1569.75,687.281 1570.31,687.281 1570.87,687.281 1571.43,687.281 1571.99,687.281 1572.55,687.281 1573.1,687.281 1573.66,687.281 1574.22,687.281 1574.78,687.281 1575.34,687.281 1575.9,687.281 1576.46,687.281 1577.02,687.281 1577.58,687.281 1578.14,687.281 1578.7,687.281 1579.26,687.281 1579.82,687.281 1580.37,687.281 1580.93,687.281 1581.49,687.281 1582.05,687.281 1582.61,687.281 1583.17,687.281 1583.73,687.281 1584.29,687.281 1584.85,687.281 1585.41,687.281 1585.97,687.281 1586.53,687.281 1587.09,687.281 1587.65,687.281 1588.2,687.281 1588.76,687.281 1589.32,687.281 1589.88,687.281 1590.44,687.281 1591,687.281 1591.56,687.281 1592.12,687.281 1592.68,687.281 1593.24,687.281 1593.8,687.281 1594.36,687.281 1594.92,687.281 1595.47,687.281 1596.03,687.281 1596.59,687.281 1597.15,687.281 1597.71,687.281 1598.27,687.281 1598.83,687.281 1599.39,687.281 1599.95,687.281 1600.51,687.281 1601.07,687.281 1601.63,687.281 1602.19,687.281 1602.74,687.281 1603.3,687.281 1603.86,687.281 1604.42,687.281 1604.98,687.281 1605.54,687.281 1606.1,687.281 1606.66,687.281 1607.22,687.281 1607.78,687.281 1608.34,687.281 1608.9,687.281 1609.46,687.281 1610.02,687.281 1610.57,687.281 1611.13,687.281 1611.69,687.281 1612.25,687.281 1612.81,687.281 1613.37,687.281 1613.93,687.281 1614.49,687.281 1615.05,687.281 1615.61,687.281 1616.17,687.281 1616.73,687.281 1617.29,687.281 1617.84,687.281 1618.4,687.281 1618.96,687.281 1619.52,687.281 1620.08,687.281 1620.64,687.281 1621.2,687.281 1621.76,687.281 1622.32,687.281 1622.88,687.281 1623.44,687.281 1624,687.281 1624.56,687.281 1625.11,687.281 1625.67,687.281 1626.23,687.281 1626.79,687.281 1627.35,687.281 1627.91,687.281 1628.47,687.281 1629.03,687.281 1629.59,687.281 1630.15,687.281 1630.71,687.281 1631.27,687.281 1631.83,687.281 1632.39,687.281 1632.94,687.281 1633.5,687.281 1634.06,687.281 1634.62,687.281 1635.18,687.281 1635.74,687.281 1636.3,687.281 1636.86,687.281 1637.42,687.281 1637.98,687.281 1638.54,687.281 1639.1,687.281 1639.66,687.281 1640.21,687.281 1640.77,687.281 1641.33,687.281 1641.89,687.281 1642.45,687.281 1643.01,687.281 1643.57,687.281 1644.13,687.281 1644.69,687.281 1645.25,687.281 1645.81,687.281 1646.37,687.281 1646.93,687.281 1647.48,687.281 1648.04,687.281 1648.6,687.281 1649.16,687.281 1649.72,687.281 1650.28,687.281 1650.84,687.281 1651.4,687.281 1651.96,687.281 1652.52,687.281 1653.08,687.281 1653.64,687.281 1654.2,687.281 1654.76,687.281 1655.31,687.281 1655.87,687.281 1656.43,687.281 1656.99,687.281 1657.55,687.281 1658.11,687.281 1658.67,687.281 1659.23,687.281 1659.79,687.281 1660.35,687.281 1660.91,687.281 1661.47,687.281 1662.03,687.281 1662.58,687.281 1663.14,687.281 1663.7,687.281 1664.26,687.281 1664.82,687.281 1665.38,687.281 1665.94,687.281 1666.5,687.281 1667.06,687.281 1667.62,687.281 1668.18,687.281 1668.74,687.281 1669.3,687.281 1669.85,687.281 1670.41,687.281 1670.97,687.281 1671.53,687.281 1672.09,687.281 1672.65,687.281 1673.21,687.281 1673.77,687.281 1674.33,687.281 1674.89,687.281 1675.45,687.281 1676.01,687.281 1676.57,687.281 1677.13,687.281 1677.68,687.281 1678.24,687.281 1678.8,687.281 1679.36,687.281 1679.92,687.281 1680.48,687.281 1681.04,687.281 1681.6,687.281 1682.16,687.281 1682.72,687.281 1683.28,687.281 1683.84,687.281 1684.4,687.281 1684.95,687.281 1685.51,687.281 1686.07,687.281 1686.63,687.281 1687.19,687.281 1687.75,687.281 1688.31,687.281 1688.87,687.281 1689.43,687.281 1689.99,687.281 1690.55,687.281 1691.11,687.281 1691.67,687.281 1692.23,687.281 1692.78,687.281 1693.34,687.281 1693.9,687.281 1694.46,687.281 1695.02,687.281 1695.58,687.281 1696.14,687.281 1696.7,687.281 1697.26,687.281 1697.82,687.281 1698.38,687.281 1698.94,687.281 1699.5,687.281 1700.05,687.281 1700.61,687.281 1701.17,687.281 1701.73,687.281 1702.29,687.281 1702.85,687.281 1703.41,687.281 1703.97,687.281 1704.53,687.281 1705.09,687.281 1705.65,687.281 1706.21,687.281 1706.77,687.281 1707.32,687.281 1707.88,687.281 1708.44,687.281 1709,687.281 1709.56,687.281 1710.12,687.281 1710.68,687.281 1711.24,687.281 1711.8,687.281 1712.36,687.281 1712.92,687.281 1713.48,687.281 1714.04,687.281 1714.6,687.281 1715.15,687.281 1715.71,687.281 1716.27,687.281 1716.83,687.281 1717.39,687.281 1717.95,687.281 1718.51,687.281 1719.07,687.281 1719.63,687.281 1720.19,687.281 1720.75,687.281 1721.31,687.281 1721.87,687.281 1722.42,687.281 1722.98,687.281 1723.54,687.281 1724.1,687.281 1724.66,687.281 1725.22,687.281 1725.78,687.281 1726.34,687.281 1726.9,687.281 1727.46,687.281 1728.02,687.281 1728.58,687.281 1729.14,687.281 1729.69,687.281 1730.25,687.281 1730.81,687.281 1731.37,687.281 1731.93,687.281 1732.49,687.281 1733.05,687.281 1733.61,687.281 1734.17,687.281 1734.73,687.281 1735.29,687.281 1735.85,687.281 1736.41,687.281 1736.97,687.281 1737.52,687.281 1738.08,687.281 1738.64,687.281 1739.2,687.281 1739.76,687.281 1740.32,687.281 1740.88,687.281 1741.44,687.281 1742,687.281 1742.56,687.281 1743.12,687.281 1743.68,687.281 1744.24,687.281 1744.79,687.281 1745.35,687.281 1745.91,687.281 1746.47,687.281 1747.03,687.281 1747.59,687.281 1748.15,687.281 1748.71,687.281 1749.27,687.281 1749.83,687.281 1750.39,687.281 1750.95,687.281 1751.51,687.281 1752.06,687.281 1752.62,687.281 1753.18,687.281 1753.74,687.281 1754.3,687.281 1754.86,687.281 1755.42,687.281 1755.98,687.281 1756.54,687.281 1757.1,687.281 1757.66,687.281 1758.22,687.281 1758.78,687.281 1759.34,687.281 1759.89,687.281 1760.45,687.281 1761.01,687.281 1761.57,687.281 1762.13,687.281 1762.69,687.281 1763.25,687.281 1763.81,687.281 1764.37,687.281 1764.93,687.281 1765.49,687.281 1766.05,687.281 1766.61,687.281 1767.16,687.281 1767.72,687.281 1768.28,687.281 1768.84,687.281 1769.4,687.281 1769.96,687.281 1770.52,687.281 1771.08,687.281 1771.64,687.281 1772.2,687.281 1772.76,687.281 1773.32,687.281 1773.88,687.281 1774.43,687.281 1774.99,687.281 1775.55,687.281 1776.11,687.281 1776.67,687.281 1777.23,687.281 1777.79,687.281 1778.35,687.281 1778.91,687.281 1779.47,687.281 1780.03,687.281 1780.59,687.281 1781.15,687.281 1781.71,687.281 1782.26,687.281 1782.82,687.281 1783.38,687.281 1783.94,687.281 1784.5,687.281 1785.06,687.281 1785.62,687.281 1786.18,687.281 1786.74,687.281 1787.3,687.281 1787.86,687.281 1788.42,687.281 1788.98,687.281 1789.53,687.281 1790.09,687.281 1790.65,687.281 1791.21,687.281 1791.77,687.281 1792.33,687.281 1792.89,687.281 1793.45,687.281 1794.01,687.281 1794.57,687.281 1795.13,687.281 1795.69,687.281 1796.25,687.281 1796.8,687.281 1797.36,687.281 1797.92,687.281 1798.48,687.281 1799.04,687.281 1799.6,687.281 1800.16,687.281 1800.72,687.281 1801.28,687.281 1801.84,687.281 1802.4,687.281 1802.96,687.281 1803.52,687.281 1804.08,687.281 1804.63,687.281 1805.19,687.281 1805.75,687.281 1806.31,687.281 1806.87,687.281 1807.43,687.281 1807.99,687.281 1808.55,687.281 1809.11,687.281 1809.67,687.281 1810.23,687.281 1810.79,687.281 1811.35,687.281 1811.9,687.281 1812.46,687.281 1813.02,687.281 1813.58,687.281 1814.14,687.281 1814.7,687.281 1815.26,687.281 1815.82,687.281 1816.38,687.281 1816.94,687.281 1817.5,687.281 1818.06,687.281 1818.62,687.281 1819.18,687.281 1819.73,687.281 1820.29,687.281 1820.85,687.281 1821.41,687.281 1821.97,687.281 1822.53,687.281 1823.09,687.281 1823.65,687.281 1824.21,687.281 1824.77,687.281 1825.33,687.281 1825.89,687.281 1826.45,687.281 1827,687.281 1827.56,687.281 1828.12,687.281 1828.68,687.281 1829.24,687.281 1829.8,687.281 1830.36,687.281 1830.92,687.281 1831.48,687.281 1832.04,687.281 1832.6,687.281 1833.16,687.281 1833.72,687.281 1834.27,687.281 1834.83,687.281 1835.39,687.281 1835.95,687.281 1836.51,687.281 1837.07,687.281 1837.63,687.281 1838.19,687.281 \"/>\n<path clip-path=\"url(#clip213)\" d=\"M720.247 685.012 L720.806 685.012 L721.365 685.012 L721.924 685.012 L722.484 685.012 L723.043 685.012 L723.602 685.012 L724.161 685.012 L724.721 685.012 L725.28 685.012 L725.839 685.012 L726.398 685.012 L726.958 685.012 L727.517 685.012 L728.076 685.012 L728.635 685.012 L729.195 685.012 L729.754 685.012 L730.313 685.012 L730.872 685.012 L731.432 685.012 L731.991 685.012 L732.55 685.012 L733.109 685.012 L733.669 685.012 L734.228 685.012 L734.787 685.012 L735.346 685.012 L735.906 685.012 L736.465 685.012 L737.024 685.012 L737.583 685.012 L738.143 685.012 L738.702 685.012 L739.261 685.012 L739.82 685.012 L740.38 685.012 L740.939 685.012 L741.498 685.012 L742.057 685.012 L742.617 685.012 L743.176 685.012 L743.735 685.012 L744.294 685.012 L744.854 685.012 L745.413 685.012 L745.972 685.012 L746.531 685.012 L747.091 685.012 L747.65 685.012 L748.209 685.012 L748.768 685.012 L749.328 685.012 L749.887 685.012 L750.446 685.012 L751.005 685.012 L751.565 685.012 L752.124 685.012 L752.683 685.012 L753.242 685.012 L753.802 685.012 L754.361 685.012 L754.92 685.012 L755.479 685.012 L756.039 685.012 L756.598 685.012 L757.157 685.012 L757.716 685.012 L758.276 685.012 L758.835 685.012 L759.394 685.012 L759.953 685.012 L760.513 685.012 L761.072 685.012 L761.631 685.012 L762.19 685.012 L762.75 685.012 L763.309 685.012 L763.868 685.012 L764.427 685.012 L764.987 685.012 L765.546 685.012 L766.105 685.012 L766.664 685.012 L767.224 685.012 L767.783 685.012 L768.342 685.012 L768.901 685.012 L769.461 685.012 L770.02 685.012 L770.579 685.012 L771.138 685.012 L771.698 685.012 L772.257 685.012 L772.816 685.012 L773.375 685.012 L773.935 685.012 L774.494 685.012 L775.053 685.012 L775.612 685.012 L776.172 685.012 L776.731 685.012 L777.29 685.012 L777.849 685.012 L778.409 685.012 L778.968 685.012 L779.527 685.012 L780.086 685.012 L780.646 685.012 L781.205 685.012 L781.764 685.012 L782.323 685.012 L782.883 685.012 L783.442 685.012 L784.001 685.012 L784.56 685.012 L785.12 685.012 L785.679 685.012 L786.238 685.012 L786.797 685.012 L787.357 685.012 L787.916 685.012 L788.475 685.012 L789.034 685.012 L789.594 685.012 L790.153 685.012 L790.712 685.012 L791.271 685.012 L791.831 685.012 L792.39 685.012 L792.949 685.012 L793.508 685.012 L794.068 685.012 L794.627 685.012 L795.186 685.012 L795.745 685.012 L796.305 685.012 L796.864 685.012 L797.423 685.012 L797.982 685.012 L798.542 685.012 L799.101 685.012 L799.66 685.012 L800.219 685.012 L800.779 685.012 L801.338 685.012 L801.897 685.012 L802.456 685.012 L803.016 685.012 L803.575 685.012 L804.134 685.012 L804.693 685.012 L805.253 685.012 L805.812 685.012 L806.371 685.012 L806.931 685.012 L807.49 685.012 L808.049 685.012 L808.608 685.012 L809.168 685.012 L809.727 685.012 L810.286 685.012 L810.845 685.012 L811.405 685.012 L811.964 685.012 L812.523 685.012 L813.082 685.012 L813.642 685.012 L814.201 685.012 L814.76 685.012 L815.319 685.012 L815.879 685.012 L816.438 685.012 L816.997 685.012 L817.556 685.012 L818.116 685.012 L818.675 685.012 L819.234 685.012 L819.793 685.012 L820.353 685.012 L820.912 685.012 L821.471 685.012 L822.03 685.012 L822.59 685.012 L823.149 685.012 L823.708 685.012 L824.267 685.012 L824.827 685.012 L825.386 685.012 L825.945 685.012 L826.504 685.012 L827.064 685.012 L827.623 685.012 L828.182 685.012 L828.741 685.012 L829.301 685.012 L829.86 685.012 L830.419 685.012 L830.978 685.012 L831.538 685.012 L832.097 685.012 L832.656 685.012 L833.215 685.012 L833.775 685.012 L834.334 685.012 L834.893 685.012 L835.452 685.012 L836.012 685.012 L836.571 685.012 L837.13 685.012 L837.689 685.012 L838.249 685.012 L838.808 685.012 L839.367 685.012 L839.926 685.012 L840.486 685.012 L841.045 685.012 L841.604 685.012 L842.163 685.012 L842.723 685.012 L843.282 685.012 L843.841 685.012 L844.4 685.012 L844.96 685.012 L845.519 685.012 L846.078 685.012 L846.637 685.012 L847.197 685.012 L847.756 685.012 L848.315 685.012 L848.874 685.012 L849.434 685.012 L849.993 685.012 L850.552 685.012 L851.111 685.012 L851.671 685.012 L852.23 685.012 L852.789 685.012 L853.348 685.012 L853.908 685.012 L854.467 685.012 L855.026 685.012 L855.585 685.012 L856.145 685.012 L856.704 685.012 L857.263 685.012 L857.822 685.012 L858.382 685.012 L858.941 685.012 L859.5 685.012 L860.059 685.012 L860.619 685.012 L861.178 685.012 L861.737 685.012 L862.296 685.012 L862.856 685.012 L863.415 685.012 L863.974 685.012 L864.533 685.012 L865.093 685.012 L865.652 685.012 L866.211 685.012 L866.77 685.012 L867.33 685.012 L867.889 685.012 L868.448 685.012 L869.007 685.012 L869.567 685.012 L870.126 685.012 L870.685 685.012 L871.244 685.012 L871.804 685.012 L872.363 685.012 L872.922 685.012 L873.481 685.012 L874.041 685.012 L874.6 685.012 L875.159 685.012 L875.718 685.012 L876.278 685.012 L876.837 685.012 L877.396 685.012 L877.955 685.012 L878.515 685.012 L879.074 685.012 L879.633 685.012 L880.192 685.012 L880.752 685.012 L881.311 685.012 L881.87 685.012 L882.429 685.012 L882.989 685.012 L883.548 685.012 L884.107 685.012 L884.666 685.012 L885.226 685.012 L885.785 685.012 L886.344 685.012 L886.903 685.012 L887.463 685.012 L888.022 685.012 L888.581 685.012 L889.14 685.012 L889.7 685.012 L890.259 685.012 L890.818 685.012 L891.377 685.012 L891.937 685.012 L892.496 685.012 L893.055 685.012 L893.614 685.012 L894.174 685.012 L894.733 685.012 L895.292 685.012 L895.851 685.012 L896.411 685.012 L896.97 685.012 L897.529 685.012 L898.088 685.012 L898.648 685.012 L899.207 685.012 L899.766 685.012 L900.325 685.012 L900.885 685.012 L901.444 685.012 L902.003 685.012 L902.562 685.012 L903.122 685.012 L903.681 685.012 L904.24 685.012 L904.799 685.012 L905.359 685.012 L905.918 685.012 L906.477 685.012 L907.036 685.012 L907.596 685.012 L908.155 685.012 L908.714 685.012 L909.273 685.012 L909.833 685.012 L910.392 685.012 L910.951 685.012 L911.51 685.012 L912.07 685.012 L912.629 685.012 L913.188 685.012 L913.747 685.012 L914.307 685.012 L914.866 685.012 L915.425 685.012 L915.984 685.012 L916.544 685.012 L917.103 685.012 L917.662 685.012 L918.221 685.012 L918.781 685.012 L919.34 685.012 L919.899 685.012 L920.458 685.012 L921.018 685.012 L921.577 685.012 L922.136 685.012 L922.695 685.012 L923.255 685.012 L923.814 685.012 L924.373 685.012 L924.932 685.012 L925.492 685.012 L926.051 685.012 L926.61 685.012 L927.169 685.012 L927.729 685.012 L928.288 685.012 L928.847 685.012 L929.406 685.012 L929.966 685.012 L930.525 685.012 L931.084 685.012 L931.644 685.012 L932.203 685.012 L932.762 685.012 L933.321 685.012 L933.881 685.012 L934.44 685.012 L934.999 685.012 L935.558 685.012 L936.118 685.012 L936.677 685.012 L937.236 685.012 L937.795 685.012 L938.355 685.012 L938.914 685.012 L939.473 685.012 L940.032 685.012 L940.592 685.012 L941.151 685.012 L941.71 685.012 L942.269 685.012 L942.829 685.012 L943.388 685.012 L943.947 685.012 L944.506 685.012 L945.066 685.012 L945.625 685.012 L946.184 685.012 L946.743 685.012 L947.303 685.012 L947.862 685.012 L948.421 685.012 L948.98 685.012 L949.54 685.012 L950.099 685.012 L950.658 685.012 L951.217 685.012 L951.777 685.012 L952.336 685.012 L952.895 685.012 L953.454 685.012 L954.014 685.012 L954.573 685.012 L955.132 685.012 L955.691 685.012 L956.251 685.012 L956.81 685.012 L957.369 685.012 L957.928 685.012 L958.488 685.012 L959.047 685.012 L959.606 685.012 L960.165 685.012 L960.725 685.012 L961.284 685.012 L961.843 685.012 L962.402 685.012 L962.962 685.012 L963.521 685.012 L964.08 685.012 L964.639 685.012 L965.199 685.012 L965.758 685.012 L966.317 685.012 L966.876 685.012 L967.436 685.012 L967.995 685.012 L968.554 685.012 L969.113 685.012 L969.673 685.012 L970.232 685.012 L970.791 685.012 L971.35 685.012 L971.91 685.012 L972.469 685.012 L973.028 685.012 L973.587 685.012 L974.147 685.012 L974.706 685.012 L975.265 685.012 L975.824 685.012 L976.384 685.012 L976.943 685.012 L977.502 685.012 L978.061 685.012 L978.621 685.012 L979.18 685.012 L979.739 685.012 L980.298 685.012 L980.858 685.012 L981.417 685.012 L981.976 685.012 L982.535 685.012 L983.095 685.012 L983.654 685.012 L984.213 685.012 L984.772 685.012 L985.332 685.012 L985.891 685.012 L986.45 685.012 L987.009 685.012 L987.569 685.012 L988.128 685.012 L988.687 685.012 L989.246 685.012 L989.806 685.012 L990.365 685.012 L990.924 685.012 L991.483 685.012 L992.043 685.012 L992.602 685.012 L993.161 685.012 L993.72 685.012 L994.28 685.012 L994.839 685.012 L995.398 685.012 L995.957 685.012 L996.517 685.012 L997.076 685.012 L997.635 685.012 L998.194 685.012 L998.754 685.012 L999.313 685.012 L999.872 685.012 L1000.43 685.012 L1000.99 685.012 L1001.55 685.012 L1002.11 685.012 L1002.67 685.012 L1003.23 685.012 L1003.79 685.012 L1004.35 685.012 L1004.91 685.012 L1005.46 685.012 L1006.02 685.012 L1006.58 685.012 L1007.14 685.012 L1007.7 685.012 L1008.26 685.012 L1008.82 685.012 L1009.38 685.012 L1009.94 685.012 L1010.5 685.012 L1011.06 685.012 L1011.62 685.012 L1012.18 685.012 L1012.73 685.012 L1013.29 685.012 L1013.85 685.012 L1014.41 685.012 L1014.97 685.012 L1015.53 685.012 L1016.09 685.012 L1016.65 685.012 L1017.21 685.012 L1017.77 685.012 L1018.33 685.012 L1018.89 685.012 L1019.45 685.012 L1020.01 685.012 L1020.56 685.012 L1021.12 685.012 L1021.68 685.012 L1022.24 685.012 L1022.8 685.012 L1023.36 685.012 L1023.92 685.012 L1024.48 685.012 L1025.04 685.012 L1025.6 685.012 L1026.16 685.012 L1026.72 685.012 L1027.28 685.012 L1027.83 685.012 L1028.39 685.012 L1028.95 685.012 L1029.51 685.012 L1030.07 685.012 L1030.63 685.012 L1031.19 685.012 L1031.75 685.012 L1032.31 685.012 L1032.87 685.012 L1033.43 685.012 L1033.99 685.012 L1034.55 685.012 L1035.1 685.012 L1035.66 685.012 L1036.22 685.012 L1036.78 685.012 L1037.34 685.012 L1037.9 685.012 L1038.46 685.012 L1039.02 685.012 L1039.58 685.012 L1040.14 685.012 L1040.7 685.012 L1041.26 685.012 L1041.82 685.012 L1042.38 685.012 L1042.93 685.012 L1043.49 685.012 L1044.05 685.012 L1044.61 685.012 L1045.17 685.012 L1045.73 685.012 L1046.29 685.012 L1046.85 685.012 L1047.41 685.012 L1047.97 685.012 L1048.53 685.012 L1049.09 685.012 L1049.65 685.012 L1050.2 685.012 L1050.76 685.012 L1051.32 685.012 L1051.88 685.012 L1052.44 685.012 L1053 685.012 L1053.56 685.012 L1054.12 685.012 L1054.68 685.012 L1055.24 685.012 L1055.8 685.012 L1056.36 685.012 L1056.92 685.012 L1057.48 685.012 L1058.03 685.012 L1058.59 685.012 L1059.15 685.012 L1059.71 685.012 L1060.27 685.012 L1060.83 685.012 L1061.39 685.012 L1061.95 685.012 L1062.51 685.012 L1063.07 685.012 L1063.63 685.012 L1064.19 685.012 L1064.75 685.012 L1065.3 685.012 L1065.86 685.012 L1066.42 685.012 L1066.98 685.012 L1067.54 685.012 L1068.1 685.012 L1068.66 685.012 L1069.22 685.012 L1069.78 685.012 L1070.34 685.012 L1070.9 685.012 L1071.46 685.012 L1072.02 685.012 L1072.57 685.012 L1073.13 685.012 L1073.69 685.012 L1074.25 685.012 L1074.81 685.012 L1075.37 685.012 L1075.93 685.012 L1076.49 685.012 L1077.05 685.012 L1077.61 685.012 L1078.17 685.012 L1078.73 685.012 L1079.29 685.012 L1079.85 685.012 L1080.4 685.012 L1080.96 685.012 L1081.52 685.012 L1082.08 685.012 L1082.64 685.012 L1083.2 685.012 L1083.76 685.012 L1084.32 685.012 L1084.88 685.012 L1085.44 685.012 L1086 685.012 L1086.56 685.012 L1087.12 685.012 L1087.67 685.012 L1088.23 685.012 L1088.79 685.012 L1089.35 685.012 L1089.91 685.012 L1090.47 685.012 L1091.03 685.012 L1091.59 685.012 L1092.15 685.012 L1092.71 685.012 L1093.27 685.012 L1093.83 685.012 L1094.39 685.012 L1094.94 685.012 L1095.5 685.012 L1096.06 685.012 L1096.62 685.012 L1097.18 685.012 L1097.74 685.012 L1098.3 685.012 L1098.86 685.012 L1099.42 685.012 L1099.98 685.012 L1100.54 685.012 L1101.1 685.012 L1101.66 685.012 L1102.22 685.012 L1102.77 685.012 L1103.33 685.012 L1103.89 685.012 L1104.45 685.012 L1105.01 685.012 L1105.57 685.012 L1106.13 685.012 L1106.69 685.012 L1107.25 685.012 L1107.81 685.012 L1108.37 685.012 L1108.93 685.012 L1109.49 685.012 L1110.04 685.012 L1110.6 685.012 L1111.16 685.012 L1111.72 685.012 L1112.28 685.012 L1112.84 685.012 L1113.4 685.012 L1113.96 685.012 L1114.52 685.012 L1115.08 685.012 L1115.64 685.012 L1116.2 685.012 L1116.76 685.012 L1117.31 685.012 L1117.87 685.012 L1118.43 685.012 L1118.99 685.012 L1119.55 685.012 L1120.11 685.012 L1120.67 685.012 L1121.23 685.012 L1121.79 685.012 L1122.35 685.012 L1122.91 685.012 L1123.47 685.012 L1124.03 685.012 L1124.59 685.012 L1125.14 685.012 L1125.7 685.012 L1126.26 685.012 L1126.82 685.012 L1127.38 685.012 L1127.94 685.012 L1128.5 685.012 L1129.06 685.012 L1129.62 685.012 L1130.18 685.012 L1130.74 685.012 L1131.3 685.012 L1131.86 685.012 L1132.41 685.012 L1132.97 685.012 L1133.53 685.012 L1134.09 685.012 L1134.65 685.012 L1135.21 685.012 L1135.77 685.012 L1136.33 685.012 L1136.89 685.012 L1137.45 685.012 L1138.01 685.012 L1138.57 685.012 L1139.13 685.012 L1139.68 685.012 L1140.24 685.012 L1140.8 685.012 L1141.36 685.012 L1141.92 685.012 L1142.48 685.012 L1143.04 685.012 L1143.6 685.012 L1144.16 685.012 L1144.72 685.012 L1145.28 685.012 L1145.84 685.012 L1146.4 685.012 L1146.96 685.012 L1147.51 685.012 L1148.07 685.012 L1148.63 685.012 L1149.19 685.012 L1149.75 685.012 L1150.31 685.012 L1150.87 685.012 L1151.43 685.012 L1151.99 685.012 L1152.55 685.012 L1153.11 685.012 L1153.67 685.012 L1154.23 685.012 L1154.78 685.012 L1155.34 685.012 L1155.9 685.012 L1156.46 685.012 L1157.02 685.012 L1157.58 685.012 L1158.14 685.012 L1158.7 685.012 L1159.26 685.012 L1159.82 685.012 L1160.38 685.012 L1160.94 685.012 L1161.5 685.012 L1162.05 685.012 L1162.61 685.012 L1163.17 685.012 L1163.73 685.012 L1164.29 685.012 L1164.85 685.012 L1165.41 685.012 L1165.97 685.012 L1166.53 685.012 L1167.09 685.012 L1167.65 685.012 L1168.21 685.012 L1168.77 685.012 L1169.33 685.012 L1169.88 685.012 L1170.44 685.012 L1171 685.012 L1171.56 685.012 L1172.12 685.012 L1172.68 685.012 L1173.24 685.012 L1173.8 685.012 L1174.36 685.012 L1174.92 685.012 L1175.48 685.012 L1176.04 685.012 L1176.6 685.012 L1177.15 685.012 L1177.71 685.012 L1178.27 685.012 L1178.83 685.012 L1179.39 685.012 L1179.95 685.012 L1180.51 685.012 L1181.07 685.012 L1181.63 685.012 L1182.19 685.012 L1182.75 685.012 L1183.31 685.012 L1183.87 685.012 L1184.43 685.012 L1184.98 685.012 L1185.54 685.012 L1186.1 685.012 L1186.66 685.012 L1187.22 685.012 L1187.78 685.012 L1188.34 685.012 L1188.9 685.012 L1189.46 685.012 L1190.02 685.012 L1190.58 685.012 L1191.14 685.012 L1191.7 685.012 L1192.25 685.012 L1192.81 685.012 L1193.37 685.012 L1193.93 685.012 L1194.49 685.012 L1195.05 685.012 L1195.61 685.012 L1196.17 685.012 L1196.73 685.012 L1197.29 685.012 L1197.85 685.012 L1198.41 685.012 L1198.97 685.012 L1199.52 685.012 L1200.08 685.012 L1200.64 685.012 L1201.2 685.012 L1201.76 685.012 L1202.32 685.012 L1202.88 685.012 L1203.44 685.012 L1204 685.012 L1204.56 685.012 L1205.12 685.012 L1205.68 685.012 L1206.24 685.012 L1206.8 685.012 L1207.35 685.012 L1207.91 685.012 L1208.47 685.012 L1209.03 685.012 L1209.59 685.012 L1210.15 685.012 L1210.71 685.012 L1211.27 685.012 L1211.83 685.012 L1212.39 685.012 L1212.95 685.012 L1213.51 685.012 L1214.07 685.012 L1214.62 685.012 L1215.18 685.012 L1215.74 685.012 L1216.3 685.012 L1216.86 685.012 L1217.42 685.012 L1217.98 685.012 L1218.54 685.012 L1219.1 685.012 L1219.66 685.012 L1220.22 685.012 L1220.78 685.012 L1221.34 685.012 L1221.89 685.012 L1222.45 685.012 L1223.01 685.012 L1223.57 685.012 L1224.13 685.012 L1224.69 685.012 L1225.25 685.012 L1225.81 685.012 L1226.37 685.012 L1226.93 685.012 L1227.49 685.012 L1228.05 685.012 L1228.61 685.012 L1229.17 685.012 L1229.72 685.012 L1230.28 685.012 L1230.84 685.012 L1231.4 685.012 L1231.96 685.012 L1232.52 685.012 L1233.08 685.012 L1233.64 685.012 L1234.2 685.012 L1234.76 685.012 L1235.32 685.012 L1235.88 685.012 L1236.44 685.012 L1236.99 685.012 L1237.55 685.012 L1238.11 685.012 L1238.67 685.012 L1239.23 685.012 L1239.79 685.012 L1240.35 685.012 L1240.91 685.012 L1241.47 685.012 L1242.03 685.012 L1242.59 685.012 L1243.15 685.012 L1243.71 685.012 L1244.26 685.012 L1244.82 685.012 L1245.38 685.012 L1245.94 685.012 L1246.5 685.012 L1247.06 685.012 L1247.62 685.012 L1248.18 685.012 L1248.74 685.012 L1249.3 685.012 L1249.86 685.012 L1250.42 685.012 L1250.98 685.012 L1251.54 685.012 L1252.09 685.012 L1252.65 685.012 L1253.21 685.012 L1253.77 685.012 L1254.33 685.012 L1254.89 685.012 L1255.45 685.012 L1256.01 685.012 L1256.57 685.012 L1257.13 685.012 L1257.69 685.012 L1258.25 685.012 L1258.81 685.012 L1259.36 685.012 L1259.92 685.012 L1260.48 685.012 L1261.04 685.012 L1261.6 685.012 L1262.16 685.012 L1262.72 685.012 L1263.28 685.012 L1263.84 685.012 L1264.4 685.012 L1264.96 685.012 L1265.52 685.012 L1266.08 685.012 L1266.63 685.012 L1267.19 685.012 L1267.75 685.012 L1268.31 685.012 L1268.87 685.012 L1269.43 685.012 L1269.99 685.012 L1270.55 685.012 L1271.11 685.012 L1271.67 685.012 L1272.23 685.012 L1272.79 685.012 L1273.35 685.012 L1273.91 685.012 L1274.46 685.012 L1275.02 685.012 L1275.58 685.012 L1276.14 685.012 L1276.7 685.012 L1277.26 685.012 L1277.82 685.012 L1278.38 685.012 L1278.94 685.012 L1279.5 685.012 L1280.06 685.012 L1280.62 685.012 L1281.18 685.012 L1281.73 685.012 L1282.29 685.012 L1282.85 685.012 L1283.41 685.012 L1283.97 685.012 L1284.53 685.012 L1285.09 685.012 L1285.65 685.012 L1286.21 685.012 L1286.77 685.012 L1287.33 685.012 L1287.89 685.012 L1288.45 685.012 L1289 685.012 L1289.56 685.012 L1290.12 685.012 L1290.68 685.012 L1291.24 685.012 L1291.8 685.012 L1292.36 685.012 L1292.92 685.012 L1293.48 685.012 L1294.04 685.012 L1294.6 685.012 L1295.16 685.012 L1295.72 685.012 L1296.28 685.012 L1296.83 685.012 L1297.39 685.012 L1297.95 685.012 L1298.51 685.012 L1299.07 685.012 L1299.63 685.012 L1300.19 685.012 L1300.75 685.012 L1301.31 685.012 L1301.87 685.012 L1302.43 685.012 L1302.99 685.012 L1303.55 685.012 L1304.1 685.012 L1304.66 685.012 L1305.22 685.012 L1305.78 685.012 L1306.34 685.012 L1306.9 685.012 L1307.46 685.012 L1308.02 685.012 L1308.58 685.012 L1309.14 685.012 L1309.7 685.012 L1310.26 685.012 L1310.82 685.012 L1311.38 685.012 L1311.93 685.012 L1312.49 685.012 L1313.05 685.012 L1313.61 685.012 L1314.17 685.012 L1314.73 685.012 L1315.29 685.012 L1315.85 685.012 L1316.41 685.012 L1316.97 685.012 L1317.53 685.012 L1318.09 685.012 L1318.65 685.012 L1319.2 685.012 L1319.76 685.012 L1320.32 685.012 L1320.88 685.012 L1321.44 685.012 L1322 685.012 L1322.56 685.012 L1323.12 685.012 L1323.68 685.012 L1324.24 685.012 L1324.8 685.012 L1325.36 685.012 L1325.92 685.012 L1326.47 685.012 L1327.03 685.012 L1327.59 685.012 L1328.15 685.012 L1328.71 685.012 L1329.27 685.012 L1329.83 685.012 L1330.39 685.012 L1330.95 685.012 L1331.51 685.012 L1332.07 685.012 L1332.63 685.012 L1333.19 685.012 L1333.75 685.012 L1334.3 685.012 L1334.86 685.012 L1335.42 685.012 L1335.98 685.012 L1336.54 685.012 L1337.1 685.012 L1337.66 685.012 L1338.22 685.012 L1338.78 685.012 L1339.34 685.012 L1339.9 685.012 L1340.46 685.012 L1341.02 685.012 L1341.57 685.012 L1342.13 685.012 L1342.69 685.012 L1343.25 685.012 L1343.81 685.012 L1344.37 685.012 L1344.93 685.012 L1345.49 685.012 L1346.05 685.012 L1346.61 685.012 L1347.17 685.012 L1347.73 685.012 L1348.29 685.012 L1348.84 685.012 L1349.4 685.012 L1349.96 685.012 L1350.52 685.012 L1351.08 685.012 L1351.64 685.012 L1352.2 685.012 L1352.76 685.012 L1353.32 685.012 L1353.88 685.012 L1354.44 685.012 L1355 685.012 L1355.56 685.012 L1356.12 685.012 L1356.67 685.012 L1357.23 685.012 L1357.79 685.012 L1358.35 685.012 L1358.91 685.012 L1359.47 685.012 L1360.03 685.012 L1360.59 685.012 L1361.15 685.012 L1361.71 685.012 L1362.27 685.012 L1362.83 685.012 L1363.39 685.012 L1363.94 685.012 L1364.5 685.012 L1365.06 685.012 L1365.62 685.012 L1366.18 685.012 L1366.74 685.012 L1367.3 685.012 L1367.86 685.012 L1368.42 685.012 L1368.98 685.012 L1369.54 685.012 L1370.1 685.012 L1370.66 685.012 L1371.21 685.012 L1371.77 685.012 L1372.33 685.012 L1372.89 685.012 L1373.45 685.012 L1374.01 685.012 L1374.57 685.012 L1375.13 685.012 L1375.69 685.012 L1376.25 685.012 L1376.81 685.012 L1377.37 685.012 L1377.93 685.012 L1378.49 685.012 L1379.04 685.012 L1379.6 685.012 L1380.16 685.012 L1380.72 685.012 L1381.28 685.012 L1381.84 685.012 L1382.4 685.012 L1382.96 685.012 L1383.52 685.012 L1384.08 685.012 L1384.64 685.012 L1385.2 685.012 L1385.76 685.012 L1386.31 685.012 L1386.87 685.012 L1387.43 685.012 L1387.99 685.012 L1388.55 685.012 L1389.11 685.012 L1389.67 685.012 L1390.23 685.012 L1390.79 685.012 L1391.35 685.012 L1391.91 685.012 L1392.47 685.012 L1393.03 685.012 L1393.58 685.012 L1394.14 685.012 L1394.7 685.012 L1395.26 685.012 L1395.82 685.012 L1396.38 685.012 L1396.94 685.012 L1397.5 685.012 L1398.06 685.012 L1398.62 685.012 L1399.18 685.012 L1399.74 685.012 L1400.3 685.012 L1400.86 685.012 L1401.41 685.012 L1401.97 685.012 L1402.53 685.012 L1403.09 685.012 L1403.65 685.012 L1404.21 685.012 L1404.77 685.012 L1405.33 685.012 L1405.89 685.012 L1406.45 685.012 L1407.01 685.012 L1407.57 685.012 L1408.13 685.012 L1408.68 685.012 L1409.24 685.012 L1409.8 685.012 L1410.36 685.012 L1410.92 685.012 L1411.48 685.012 L1412.04 685.012 L1412.6 685.012 L1413.16 685.012 L1413.72 685.012 L1414.28 685.012 L1414.84 685.012 L1415.4 685.012 L1415.95 685.012 L1416.51 685.012 L1417.07 685.012 L1417.63 685.012 L1418.19 685.012 L1418.75 685.012 L1419.31 685.012 L1419.87 685.012 L1420.43 685.012 L1420.99 685.012 L1421.55 685.012 L1422.11 685.012 L1422.67 685.012 L1423.23 685.012 L1423.78 685.012 L1424.34 685.012 L1424.9 685.012 L1425.46 685.012 L1426.02 685.012 L1426.58 685.012 L1427.14 685.012 L1427.7 685.012 L1428.26 685.012 L1428.82 685.012 L1429.38 685.012 L1429.94 685.012 L1430.5 685.012 L1431.05 685.012 L1431.61 685.012 L1432.17 685.012 L1432.73 685.012 L1433.29 685.012 L1433.85 685.012 L1434.41 685.012 L1434.97 685.012 L1435.53 685.012 L1436.09 685.012 L1436.65 685.012 L1437.21 685.012 L1437.77 685.012 L1438.33 685.012 L1438.88 685.012 L1439.44 685.012 L1440 685.012 L1440.56 685.012 L1441.12 685.012 L1441.68 685.012 L1442.24 685.012 L1442.8 685.012 L1443.36 685.012 L1443.92 685.012 L1444.48 685.012 L1445.04 685.012 L1445.6 685.012 L1446.15 685.012 L1446.71 685.012 L1447.27 685.012 L1447.83 685.012 L1448.39 685.012 L1448.95 685.012 L1449.51 685.012 L1450.07 685.012 L1450.63 685.012 L1451.19 685.012 L1451.75 685.012 L1452.31 685.012 L1452.87 685.012 L1453.42 685.012 L1453.98 685.012 L1454.54 685.012 L1455.1 685.012 L1455.66 685.012 L1456.22 685.012 L1456.78 685.012 L1457.34 685.012 L1457.9 685.012 L1458.46 685.012 L1459.02 685.012 L1459.58 685.012 L1460.14 685.012 L1460.7 685.012 L1461.25 685.012 L1461.81 685.012 L1462.37 685.012 L1462.93 685.012 L1463.49 685.012 L1464.05 685.012 L1464.61 685.012 L1465.17 685.012 L1465.73 685.012 L1466.29 685.012 L1466.85 685.012 L1467.41 685.012 L1467.97 685.012 L1468.52 685.012 L1469.08 685.012 L1469.64 685.012 L1470.2 685.012 L1470.76 685.012 L1471.32 685.012 L1471.88 685.012 L1472.44 685.012 L1473 685.012 L1473.56 685.012 L1474.12 685.012 L1474.68 685.012 L1475.24 685.012 L1475.79 685.012 L1476.35 685.012 L1476.91 685.012 L1477.47 685.012 L1478.03 685.012 L1478.59 685.012 L1479.15 685.012 L1479.71 685.012 L1480.27 685.012 L1480.83 685.012 L1481.39 685.012 L1481.95 685.012 L1482.51 685.012 L1483.07 685.012 L1483.62 685.012 L1484.18 685.012 L1484.74 685.012 L1485.3 685.012 L1485.86 685.012 L1486.42 685.012 L1486.98 685.012 L1487.54 685.012 L1488.1 685.012 L1488.66 685.012 L1489.22 685.012 L1489.78 685.012 L1490.34 685.012 L1490.89 685.012 L1491.45 685.012 L1492.01 685.012 L1492.57 685.012 L1493.13 685.012 L1493.69 685.012 L1494.25 685.012 L1494.81 685.012 L1495.37 685.012 L1495.93 685.012 L1496.49 685.012 L1497.05 685.012 L1497.61 685.012 L1498.16 685.012 L1498.72 685.012 L1499.28 685.012 L1499.84 685.012 L1500.4 685.012 L1500.96 685.012 L1501.52 685.012 L1502.08 685.012 L1502.64 685.012 L1503.2 685.012 L1503.76 685.012 L1504.32 685.012 L1504.88 685.012 L1505.44 685.012 L1505.99 685.012 L1506.55 685.012 L1507.11 685.012 L1507.67 685.012 L1508.23 685.012 L1508.79 685.012 L1509.35 685.012 L1509.91 685.012 L1510.47 685.012 L1511.03 685.012 L1511.59 685.012 L1512.15 685.012 L1512.71 685.012 L1513.26 685.012 L1513.82 685.012 L1514.38 685.012 L1514.94 685.012 L1515.5 685.012 L1516.06 685.012 L1516.62 685.012 L1517.18 685.012 L1517.74 685.012 L1518.3 685.012 L1518.86 685.012 L1519.42 685.012 L1519.98 685.012 L1520.53 685.012 L1521.09 685.012 L1521.65 685.012 L1522.21 685.012 L1522.77 685.012 L1523.33 685.012 L1523.89 685.012 L1524.45 685.012 L1525.01 685.012 L1525.57 685.012 L1526.13 685.012 L1526.69 685.012 L1527.25 685.012 L1527.81 685.012 L1528.36 685.012 L1528.92 685.012 L1529.48 685.012 L1530.04 685.012 L1530.6 685.012 L1531.16 685.012 L1531.72 685.012 L1532.28 685.012 L1532.84 685.012 L1533.4 685.012 L1533.96 685.012 L1534.52 685.012 L1535.08 685.012 L1535.63 685.012 L1536.19 685.012 L1536.75 685.012 L1537.31 685.012 L1537.87 685.012 L1538.43 685.012 L1538.99 685.012 L1539.55 685.012 L1540.11 685.012 L1540.67 685.012 L1541.23 685.012 L1541.79 685.012 L1542.35 685.012 L1542.9 685.012 L1543.46 685.012 L1544.02 685.012 L1544.58 685.012 L1545.14 685.012 L1545.7 685.012 L1546.26 685.012 L1546.82 685.012 L1547.38 685.012 L1547.94 685.012 L1548.5 685.012 L1549.06 685.012 L1549.62 685.012 L1550.18 685.012 L1550.73 685.012 L1551.29 685.012 L1551.85 685.012 L1552.41 685.012 L1552.97 685.012 L1553.53 685.012 L1554.09 685.012 L1554.65 685.012 L1555.21 685.012 L1555.77 685.012 L1556.33 685.012 L1556.89 685.012 L1557.45 685.012 L1558 685.012 L1558.56 685.012 L1559.12 685.012 L1559.68 685.012 L1560.24 685.012 L1560.8 685.012 L1561.36 685.012 L1561.92 685.012 L1562.48 685.012 L1563.04 685.012 L1563.6 685.012 L1564.16 685.012 L1564.72 685.012 L1565.28 685.012 L1565.83 685.012 L1566.39 685.012 L1566.95 685.012 L1567.51 685.012 L1568.07 685.012 L1568.63 685.012 L1569.19 685.012 L1569.75 685.012 L1570.31 685.012 L1570.87 685.012 L1571.43 685.012 L1571.99 685.012 L1572.55 685.012 L1573.1 685.012 L1573.66 685.012 L1574.22 685.012 L1574.78 685.012 L1575.34 685.012 L1575.9 685.012 L1576.46 685.012 L1577.02 685.012 L1577.58 685.012 L1578.14 685.012 L1578.7 685.012 L1579.26 685.012 L1579.82 685.012 L1580.37 685.012 L1580.93 685.012 L1581.49 685.012 L1582.05 685.012 L1582.61 685.012 L1583.17 685.012 L1583.73 685.012 L1584.29 685.012 L1584.85 685.012 L1585.41 685.012 L1585.97 685.012 L1586.53 685.012 L1587.09 685.012 L1587.65 685.012 L1588.2 685.012 L1588.76 685.012 L1589.32 685.012 L1589.88 685.012 L1590.44 685.012 L1591 685.012 L1591.56 685.012 L1592.12 685.012 L1592.68 685.012 L1593.24 685.012 L1593.8 685.012 L1594.36 685.012 L1594.92 685.012 L1595.47 685.012 L1596.03 685.012 L1596.59 685.012 L1597.15 685.012 L1597.71 685.012 L1598.27 685.012 L1598.83 685.012 L1599.39 685.012 L1599.95 685.012 L1600.51 685.012 L1601.07 685.012 L1601.63 685.012 L1602.19 685.012 L1602.74 685.012 L1603.3 685.012 L1603.86 685.012 L1604.42 685.012 L1604.98 685.012 L1605.54 685.012 L1606.1 685.012 L1606.66 685.012 L1607.22 685.012 L1607.78 685.012 L1608.34 685.012 L1608.9 685.012 L1609.46 685.012 L1610.02 685.012 L1610.57 685.012 L1611.13 685.012 L1611.69 685.012 L1612.25 685.012 L1612.81 685.012 L1613.37 685.012 L1613.93 685.012 L1614.49 685.012 L1615.05 685.012 L1615.61 685.012 L1616.17 685.012 L1616.73 685.012 L1617.29 685.012 L1617.84 685.012 L1618.4 685.012 L1618.96 685.012 L1619.52 685.012 L1620.08 685.012 L1620.64 685.012 L1621.2 685.012 L1621.76 685.012 L1622.32 685.012 L1622.88 685.012 L1623.44 685.012 L1624 685.012 L1624.56 685.012 L1625.11 685.012 L1625.67 685.012 L1626.23 685.012 L1626.79 685.012 L1627.35 685.012 L1627.91 685.012 L1628.47 685.012 L1629.03 685.012 L1629.59 685.012 L1630.15 685.012 L1630.71 685.012 L1631.27 685.012 L1631.83 685.012 L1632.39 685.012 L1632.94 685.012 L1633.5 685.012 L1634.06 685.012 L1634.62 685.012 L1635.18 685.012 L1635.74 685.012 L1636.3 685.012 L1636.86 685.012 L1637.42 685.012 L1637.98 685.012 L1638.54 685.012 L1639.1 685.012 L1639.66 685.012 L1640.21 685.012 L1640.77 685.012 L1641.33 685.012 L1641.89 685.012 L1642.45 685.012 L1643.01 685.012 L1643.57 685.012 L1644.13 685.012 L1644.69 685.012 L1645.25 685.012 L1645.81 685.012 L1646.37 685.012 L1646.93 685.012 L1647.48 685.012 L1648.04 685.012 L1648.6 685.012 L1649.16 685.012 L1649.72 685.012 L1650.28 685.012 L1650.84 685.012 L1651.4 685.012 L1651.96 685.012 L1652.52 685.012 L1653.08 685.012 L1653.64 685.012 L1654.2 685.012 L1654.76 685.012 L1655.31 685.012 L1655.87 685.012 L1656.43 685.012 L1656.99 685.012 L1657.55 685.012 L1658.11 685.012 L1658.67 685.012 L1659.23 685.012 L1659.79 685.012 L1660.35 685.012 L1660.91 685.012 L1661.47 685.012 L1662.03 685.012 L1662.58 685.012 L1663.14 685.012 L1663.7 685.012 L1664.26 685.012 L1664.82 685.012 L1665.38 685.012 L1665.94 685.012 L1666.5 685.012 L1667.06 685.012 L1667.62 685.012 L1668.18 685.012 L1668.74 685.012 L1669.3 685.012 L1669.85 685.012 L1670.41 685.012 L1670.97 685.012 L1671.53 685.012 L1672.09 685.012 L1672.65 685.012 L1673.21 685.012 L1673.77 685.012 L1674.33 685.012 L1674.89 685.012 L1675.45 685.012 L1676.01 685.012 L1676.57 685.012 L1677.13 685.012 L1677.68 685.012 L1678.24 685.012 L1678.8 685.012 L1679.36 685.012 L1679.92 685.012 L1680.48 685.012 L1681.04 685.012 L1681.6 685.012 L1682.16 685.012 L1682.72 685.012 L1683.28 685.012 L1683.84 685.012 L1684.4 685.012 L1684.95 685.012 L1685.51 685.012 L1686.07 685.012 L1686.63 685.012 L1687.19 685.012 L1687.75 685.012 L1688.31 685.012 L1688.87 685.012 L1689.43 685.012 L1689.99 685.012 L1690.55 685.012 L1691.11 685.012 L1691.67 685.012 L1692.23 685.012 L1692.78 685.012 L1693.34 685.012 L1693.9 685.012 L1694.46 685.012 L1695.02 685.012 L1695.58 685.012 L1696.14 685.012 L1696.7 685.012 L1697.26 685.012 L1697.82 685.012 L1698.38 685.012 L1698.94 685.012 L1699.5 685.012 L1700.05 685.012 L1700.61 685.012 L1701.17 685.012 L1701.73 685.012 L1702.29 685.012 L1702.85 685.012 L1703.41 685.012 L1703.97 685.012 L1704.53 685.012 L1705.09 685.012 L1705.65 685.012 L1706.21 685.012 L1706.77 685.012 L1707.32 685.012 L1707.88 685.012 L1708.44 685.012 L1709 685.012 L1709.56 685.012 L1710.12 685.012 L1710.68 685.012 L1711.24 685.012 L1711.8 685.012 L1712.36 685.012 L1712.92 685.012 L1713.48 685.012 L1714.04 685.012 L1714.6 685.012 L1715.15 685.012 L1715.71 685.012 L1716.27 685.012 L1716.83 685.012 L1717.39 685.012 L1717.95 685.012 L1718.51 685.012 L1719.07 685.012 L1719.63 685.012 L1720.19 685.012 L1720.75 685.012 L1721.31 685.012 L1721.87 685.012 L1722.42 685.012 L1722.98 685.012 L1723.54 685.012 L1724.1 685.012 L1724.66 685.012 L1725.22 685.012 L1725.78 685.012 L1726.34 685.012 L1726.9 685.012 L1727.46 685.012 L1728.02 685.012 L1728.58 685.012 L1729.14 685.012 L1729.69 685.012 L1730.25 685.012 L1730.81 685.012 L1731.37 685.012 L1731.93 685.012 L1732.49 685.012 L1733.05 685.012 L1733.61 685.012 L1734.17 685.012 L1734.73 685.012 L1735.29 685.012 L1735.85 685.012 L1736.41 685.012 L1736.97 685.012 L1737.52 685.012 L1738.08 685.012 L1738.64 685.012 L1739.2 685.012 L1739.76 685.012 L1740.32 685.012 L1740.88 685.012 L1741.44 685.012 L1742 685.012 L1742.56 685.012 L1743.12 685.012 L1743.68 685.012 L1744.24 685.012 L1744.79 685.012 L1745.35 685.012 L1745.91 685.012 L1746.47 685.012 L1747.03 685.012 L1747.59 685.012 L1748.15 685.012 L1748.71 685.012 L1749.27 685.012 L1749.83 685.012 L1750.39 685.012 L1750.95 685.012 L1751.51 685.012 L1752.06 685.012 L1752.62 685.012 L1753.18 685.012 L1753.74 685.012 L1754.3 685.012 L1754.86 685.012 L1755.42 685.012 L1755.98 685.012 L1756.54 685.012 L1757.1 685.012 L1757.66 685.012 L1758.22 685.012 L1758.78 685.012 L1759.34 685.012 L1759.89 685.012 L1760.45 685.012 L1761.01 685.012 L1761.57 685.012 L1762.13 685.012 L1762.69 685.012 L1763.25 685.012 L1763.81 685.012 L1764.37 685.012 L1764.93 685.012 L1765.49 685.012 L1766.05 685.012 L1766.61 685.012 L1767.16 685.012 L1767.72 685.012 L1768.28 685.012 L1768.84 685.012 L1769.4 685.012 L1769.96 685.012 L1770.52 685.012 L1771.08 685.012 L1771.64 685.012 L1772.2 685.012 L1772.76 685.012 L1773.32 685.012 L1773.88 685.012 L1774.43 685.012 L1774.99 685.012 L1775.55 685.012 L1776.11 685.012 L1776.67 685.012 L1777.23 685.012 L1777.79 685.012 L1778.35 685.012 L1778.91 685.012 L1779.47 685.012 L1780.03 685.012 L1780.59 685.012 L1781.15 685.012 L1781.71 685.012 L1782.26 685.012 L1782.82 685.012 L1783.38 685.012 L1783.94 685.012 L1784.5 685.012 L1785.06 685.012 L1785.62 685.012 L1786.18 685.012 L1786.74 685.012 L1787.3 685.012 L1787.86 685.012 L1788.42 685.012 L1788.98 685.012 L1789.53 685.012 L1790.09 685.012 L1790.65 685.012 L1791.21 685.012 L1791.77 685.012 L1792.33 685.012 L1792.89 685.012 L1793.45 685.012 L1794.01 685.012 L1794.57 685.012 L1795.13 685.012 L1795.69 685.012 L1796.25 685.012 L1796.8 685.012 L1797.36 685.012 L1797.92 685.012 L1798.48 685.012 L1799.04 685.012 L1799.6 685.012 L1800.16 685.012 L1800.72 685.012 L1801.28 685.012 L1801.84 685.012 L1802.4 685.012 L1802.96 685.012 L1803.52 685.012 L1804.08 685.012 L1804.63 685.012 L1805.19 685.012 L1805.75 685.012 L1806.31 685.012 L1806.87 685.012 L1807.43 685.012 L1807.99 685.012 L1808.55 685.012 L1809.11 685.012 L1809.67 685.012 L1810.23 685.012 L1810.79 685.012 L1811.35 685.012 L1811.9 685.012 L1812.46 685.012 L1813.02 685.012 L1813.58 685.012 L1814.14 685.012 L1814.7 685.012 L1815.26 685.012 L1815.82 685.012 L1816.38 685.012 L1816.94 685.012 L1817.5 685.012 L1818.06 685.012 L1818.62 685.012 L1819.18 685.012 L1819.73 685.012 L1820.29 685.012 L1820.85 685.012 L1821.41 685.012 L1821.97 685.012 L1822.53 685.012 L1823.09 685.012 L1823.65 685.012 L1824.21 685.012 L1824.77 685.012 L1825.33 685.012 L1825.89 685.012 L1826.45 685.012 L1827 685.012 L1827.56 685.012 L1828.12 685.012 L1828.68 685.012 L1829.24 685.012 L1829.8 685.012 L1830.36 685.012 L1830.92 685.012 L1831.48 685.012 L1832.04 685.012 L1832.6 685.012 L1833.16 685.012 L1833.72 685.012 L1834.27 685.012 L1834.83 685.012 L1835.39 685.012 L1835.95 685.012 L1836.51 685.012 L1837.07 685.012 L1837.63 685.012 L1838.19 685.012 L1838.19 683.749 L1837.63 683.749 L1837.07 683.749 L1836.51 683.749 L1835.95 683.749 L1835.39 683.749 L1834.83 683.749 L1834.27 683.749 L1833.72 683.749 L1833.16 683.749 L1832.6 683.749 L1832.04 683.749 L1831.48 683.749 L1830.92 683.749 L1830.36 683.749 L1829.8 683.749 L1829.24 683.749 L1828.68 683.749 L1828.12 683.749 L1827.56 683.749 L1827 683.749 L1826.45 683.749 L1825.89 683.749 L1825.33 683.749 L1824.77 683.749 L1824.21 683.749 L1823.65 683.749 L1823.09 683.749 L1822.53 683.749 L1821.97 683.749 L1821.41 683.749 L1820.85 683.749 L1820.29 683.749 L1819.73 683.749 L1819.18 683.749 L1818.62 683.749 L1818.06 683.749 L1817.5 683.749 L1816.94 683.749 L1816.38 683.749 L1815.82 683.749 L1815.26 683.749 L1814.7 683.749 L1814.14 683.749 L1813.58 683.749 L1813.02 683.749 L1812.46 683.749 L1811.9 683.749 L1811.35 683.749 L1810.79 683.749 L1810.23 683.749 L1809.67 683.749 L1809.11 683.749 L1808.55 683.749 L1807.99 683.749 L1807.43 683.749 L1806.87 683.749 L1806.31 683.749 L1805.75 683.749 L1805.19 683.749 L1804.63 683.749 L1804.08 683.749 L1803.52 683.749 L1802.96 683.749 L1802.4 683.749 L1801.84 683.749 L1801.28 683.749 L1800.72 683.749 L1800.16 683.749 L1799.6 683.749 L1799.04 683.749 L1798.48 683.749 L1797.92 683.749 L1797.36 683.749 L1796.8 683.749 L1796.25 683.749 L1795.69 683.749 L1795.13 683.749 L1794.57 683.749 L1794.01 683.749 L1793.45 683.749 L1792.89 683.749 L1792.33 683.749 L1791.77 683.749 L1791.21 683.749 L1790.65 683.749 L1790.09 683.749 L1789.53 683.749 L1788.98 683.749 L1788.42 683.749 L1787.86 683.749 L1787.3 683.749 L1786.74 683.749 L1786.18 683.749 L1785.62 683.749 L1785.06 683.749 L1784.5 683.749 L1783.94 683.749 L1783.38 683.749 L1782.82 683.749 L1782.26 683.749 L1781.71 683.749 L1781.15 683.749 L1780.59 683.749 L1780.03 683.749 L1779.47 683.749 L1778.91 683.749 L1778.35 683.749 L1777.79 683.749 L1777.23 683.749 L1776.67 683.749 L1776.11 683.749 L1775.55 683.749 L1774.99 683.749 L1774.43 683.749 L1773.88 683.749 L1773.32 683.749 L1772.76 683.749 L1772.2 683.749 L1771.64 683.749 L1771.08 683.749 L1770.52 683.749 L1769.96 683.749 L1769.4 683.749 L1768.84 683.749 L1768.28 683.749 L1767.72 683.749 L1767.16 683.749 L1766.61 683.749 L1766.05 683.749 L1765.49 683.749 L1764.93 683.749 L1764.37 683.749 L1763.81 683.749 L1763.25 683.749 L1762.69 683.749 L1762.13 683.749 L1761.57 683.749 L1761.01 683.749 L1760.45 683.749 L1759.89 683.749 L1759.34 683.749 L1758.78 683.749 L1758.22 683.749 L1757.66 683.749 L1757.1 683.749 L1756.54 683.749 L1755.98 683.749 L1755.42 683.749 L1754.86 683.749 L1754.3 683.749 L1753.74 683.749 L1753.18 683.749 L1752.62 683.749 L1752.06 683.749 L1751.51 683.749 L1750.95 683.749 L1750.39 683.749 L1749.83 683.749 L1749.27 683.749 L1748.71 683.749 L1748.15 683.749 L1747.59 683.749 L1747.03 683.749 L1746.47 683.749 L1745.91 683.749 L1745.35 683.749 L1744.79 683.749 L1744.24 683.749 L1743.68 683.749 L1743.12 683.749 L1742.56 683.749 L1742 683.749 L1741.44 683.749 L1740.88 683.749 L1740.32 683.749 L1739.76 683.749 L1739.2 683.749 L1738.64 683.749 L1738.08 683.749 L1737.52 683.749 L1736.97 683.749 L1736.41 683.749 L1735.85 683.749 L1735.29 683.749 L1734.73 683.749 L1734.17 683.749 L1733.61 683.749 L1733.05 683.749 L1732.49 683.749 L1731.93 683.749 L1731.37 683.749 L1730.81 683.749 L1730.25 683.749 L1729.69 683.749 L1729.14 683.749 L1728.58 683.749 L1728.02 683.749 L1727.46 683.749 L1726.9 683.749 L1726.34 683.749 L1725.78 683.749 L1725.22 683.749 L1724.66 683.749 L1724.1 683.749 L1723.54 683.749 L1722.98 683.749 L1722.42 683.749 L1721.87 683.749 L1721.31 683.749 L1720.75 683.749 L1720.19 683.749 L1719.63 683.749 L1719.07 683.749 L1718.51 683.749 L1717.95 683.749 L1717.39 683.749 L1716.83 683.749 L1716.27 683.749 L1715.71 683.749 L1715.15 683.749 L1714.6 683.749 L1714.04 683.749 L1713.48 683.749 L1712.92 683.749 L1712.36 683.749 L1711.8 683.749 L1711.24 683.749 L1710.68 683.749 L1710.12 683.749 L1709.56 683.749 L1709 683.749 L1708.44 683.749 L1707.88 683.749 L1707.32 683.749 L1706.77 683.749 L1706.21 683.749 L1705.65 683.749 L1705.09 683.749 L1704.53 683.749 L1703.97 683.749 L1703.41 683.749 L1702.85 683.749 L1702.29 683.749 L1701.73 683.749 L1701.17 683.749 L1700.61 683.749 L1700.05 683.749 L1699.5 683.749 L1698.94 683.749 L1698.38 683.749 L1697.82 683.749 L1697.26 683.749 L1696.7 683.749 L1696.14 683.749 L1695.58 683.749 L1695.02 683.749 L1694.46 683.749 L1693.9 683.749 L1693.34 683.749 L1692.78 683.749 L1692.23 683.749 L1691.67 683.749 L1691.11 683.749 L1690.55 683.749 L1689.99 683.749 L1689.43 683.749 L1688.87 683.749 L1688.31 683.749 L1687.75 683.749 L1687.19 683.749 L1686.63 683.749 L1686.07 683.749 L1685.51 683.749 L1684.95 683.749 L1684.4 683.749 L1683.84 683.749 L1683.28 683.749 L1682.72 683.749 L1682.16 683.749 L1681.6 683.749 L1681.04 683.749 L1680.48 683.749 L1679.92 683.749 L1679.36 683.749 L1678.8 683.749 L1678.24 683.749 L1677.68 683.749 L1677.13 683.749 L1676.57 683.749 L1676.01 683.749 L1675.45 683.749 L1674.89 683.749 L1674.33 683.749 L1673.77 683.749 L1673.21 683.749 L1672.65 683.749 L1672.09 683.749 L1671.53 683.749 L1670.97 683.749 L1670.41 683.749 L1669.85 683.749 L1669.3 683.749 L1668.74 683.749 L1668.18 683.749 L1667.62 683.749 L1667.06 683.749 L1666.5 683.749 L1665.94 683.749 L1665.38 683.749 L1664.82 683.749 L1664.26 683.749 L1663.7 683.749 L1663.14 683.749 L1662.58 683.749 L1662.03 683.749 L1661.47 683.749 L1660.91 683.749 L1660.35 683.749 L1659.79 683.749 L1659.23 683.749 L1658.67 683.749 L1658.11 683.749 L1657.55 683.749 L1656.99 683.749 L1656.43 683.749 L1655.87 683.749 L1655.31 683.749 L1654.76 683.749 L1654.2 683.749 L1653.64 683.749 L1653.08 683.749 L1652.52 683.749 L1651.96 683.749 L1651.4 683.749 L1650.84 683.749 L1650.28 683.749 L1649.72 683.749 L1649.16 683.749 L1648.6 683.749 L1648.04 683.749 L1647.48 683.749 L1646.93 683.749 L1646.37 683.749 L1645.81 683.749 L1645.25 683.749 L1644.69 683.749 L1644.13 683.749 L1643.57 683.749 L1643.01 683.749 L1642.45 683.749 L1641.89 683.749 L1641.33 683.749 L1640.77 683.749 L1640.21 683.749 L1639.66 683.749 L1639.1 683.749 L1638.54 683.749 L1637.98 683.749 L1637.42 683.749 L1636.86 683.749 L1636.3 683.749 L1635.74 683.749 L1635.18 683.749 L1634.62 683.749 L1634.06 683.749 L1633.5 683.749 L1632.94 683.749 L1632.39 683.749 L1631.83 683.749 L1631.27 683.749 L1630.71 683.749 L1630.15 683.749 L1629.59 683.749 L1629.03 683.749 L1628.47 683.749 L1627.91 683.749 L1627.35 683.749 L1626.79 683.749 L1626.23 683.749 L1625.67 683.749 L1625.11 683.749 L1624.56 683.749 L1624 683.749 L1623.44 683.749 L1622.88 683.749 L1622.32 683.749 L1621.76 683.749 L1621.2 683.749 L1620.64 683.749 L1620.08 683.749 L1619.52 683.749 L1618.96 683.749 L1618.4 683.749 L1617.84 683.749 L1617.29 683.749 L1616.73 683.749 L1616.17 683.749 L1615.61 683.749 L1615.05 683.749 L1614.49 683.749 L1613.93 683.749 L1613.37 683.749 L1612.81 683.749 L1612.25 683.749 L1611.69 683.749 L1611.13 683.749 L1610.57 683.749 L1610.02 683.749 L1609.46 683.749 L1608.9 683.749 L1608.34 683.749 L1607.78 683.749 L1607.22 683.749 L1606.66 683.749 L1606.1 683.749 L1605.54 683.749 L1604.98 683.749 L1604.42 683.749 L1603.86 683.749 L1603.3 683.749 L1602.74 683.749 L1602.19 683.749 L1601.63 683.749 L1601.07 683.749 L1600.51 683.749 L1599.95 683.749 L1599.39 683.749 L1598.83 683.749 L1598.27 683.749 L1597.71 683.749 L1597.15 683.749 L1596.59 683.749 L1596.03 683.749 L1595.47 683.749 L1594.92 683.749 L1594.36 683.749 L1593.8 683.749 L1593.24 683.749 L1592.68 683.749 L1592.12 683.749 L1591.56 683.749 L1591 683.749 L1590.44 683.749 L1589.88 683.749 L1589.32 683.749 L1588.76 683.749 L1588.2 683.749 L1587.65 683.749 L1587.09 683.749 L1586.53 683.749 L1585.97 683.749 L1585.41 683.749 L1584.85 683.749 L1584.29 683.749 L1583.73 683.749 L1583.17 683.749 L1582.61 683.749 L1582.05 683.749 L1581.49 683.749 L1580.93 683.749 L1580.37 683.749 L1579.82 683.749 L1579.26 683.749 L1578.7 683.749 L1578.14 683.749 L1577.58 683.749 L1577.02 683.749 L1576.46 683.749 L1575.9 683.749 L1575.34 683.749 L1574.78 683.749 L1574.22 683.749 L1573.66 683.749 L1573.1 683.749 L1572.55 683.749 L1571.99 683.749 L1571.43 683.749 L1570.87 683.749 L1570.31 683.749 L1569.75 683.749 L1569.19 683.749 L1568.63 683.749 L1568.07 683.749 L1567.51 683.749 L1566.95 683.749 L1566.39 683.749 L1565.83 683.749 L1565.28 683.749 L1564.72 683.749 L1564.16 683.749 L1563.6 683.749 L1563.04 683.749 L1562.48 683.749 L1561.92 683.749 L1561.36 683.749 L1560.8 683.749 L1560.24 683.749 L1559.68 683.749 L1559.12 683.749 L1558.56 683.749 L1558 683.749 L1557.45 683.749 L1556.89 683.749 L1556.33 683.749 L1555.77 683.749 L1555.21 683.749 L1554.65 683.749 L1554.09 683.749 L1553.53 683.749 L1552.97 683.749 L1552.41 683.749 L1551.85 683.749 L1551.29 683.749 L1550.73 683.749 L1550.18 683.749 L1549.62 683.749 L1549.06 683.749 L1548.5 683.749 L1547.94 683.749 L1547.38 683.749 L1546.82 683.749 L1546.26 683.749 L1545.7 683.749 L1545.14 683.749 L1544.58 683.749 L1544.02 683.749 L1543.46 683.749 L1542.9 683.749 L1542.35 683.749 L1541.79 683.749 L1541.23 683.749 L1540.67 683.749 L1540.11 683.749 L1539.55 683.749 L1538.99 683.749 L1538.43 683.749 L1537.87 683.749 L1537.31 683.749 L1536.75 683.749 L1536.19 683.749 L1535.63 683.749 L1535.08 683.749 L1534.52 683.749 L1533.96 683.749 L1533.4 683.749 L1532.84 683.749 L1532.28 683.749 L1531.72 683.749 L1531.16 683.749 L1530.6 683.749 L1530.04 683.749 L1529.48 683.749 L1528.92 683.749 L1528.36 683.749 L1527.81 683.749 L1527.25 683.749 L1526.69 683.749 L1526.13 683.749 L1525.57 683.749 L1525.01 683.749 L1524.45 683.749 L1523.89 683.749 L1523.33 683.749 L1522.77 683.749 L1522.21 683.749 L1521.65 683.749 L1521.09 683.749 L1520.53 683.749 L1519.98 683.749 L1519.42 683.749 L1518.86 683.749 L1518.3 683.749 L1517.74 683.749 L1517.18 683.749 L1516.62 683.749 L1516.06 683.749 L1515.5 683.749 L1514.94 683.749 L1514.38 683.749 L1513.82 683.749 L1513.26 683.749 L1512.71 683.749 L1512.15 683.749 L1511.59 683.749 L1511.03 683.749 L1510.47 683.749 L1509.91 683.749 L1509.35 683.749 L1508.79 683.749 L1508.23 683.749 L1507.67 683.749 L1507.11 683.749 L1506.55 683.749 L1505.99 683.749 L1505.44 683.749 L1504.88 683.749 L1504.32 683.749 L1503.76 683.749 L1503.2 683.749 L1502.64 683.749 L1502.08 683.749 L1501.52 683.749 L1500.96 683.749 L1500.4 683.749 L1499.84 683.749 L1499.28 683.749 L1498.72 683.749 L1498.16 683.749 L1497.61 683.749 L1497.05 683.749 L1496.49 683.749 L1495.93 683.749 L1495.37 683.749 L1494.81 683.749 L1494.25 683.749 L1493.69 683.749 L1493.13 683.749 L1492.57 683.749 L1492.01 683.749 L1491.45 683.749 L1490.89 683.749 L1490.34 683.749 L1489.78 683.749 L1489.22 683.749 L1488.66 683.749 L1488.1 683.749 L1487.54 683.749 L1486.98 683.749 L1486.42 683.749 L1485.86 683.749 L1485.3 683.749 L1484.74 683.749 L1484.18 683.749 L1483.62 683.749 L1483.07 683.749 L1482.51 683.749 L1481.95 683.749 L1481.39 683.749 L1480.83 683.749 L1480.27 683.749 L1479.71 683.749 L1479.15 683.749 L1478.59 683.749 L1478.03 683.749 L1477.47 683.749 L1476.91 683.749 L1476.35 683.749 L1475.79 683.749 L1475.24 683.749 L1474.68 683.749 L1474.12 683.749 L1473.56 683.749 L1473 683.749 L1472.44 683.749 L1471.88 683.749 L1471.32 683.749 L1470.76 683.749 L1470.2 683.749 L1469.64 683.749 L1469.08 683.749 L1468.52 683.749 L1467.97 683.749 L1467.41 683.749 L1466.85 683.749 L1466.29 683.749 L1465.73 683.749 L1465.17 683.749 L1464.61 683.749 L1464.05 683.749 L1463.49 683.749 L1462.93 683.749 L1462.37 683.749 L1461.81 683.749 L1461.25 683.749 L1460.7 683.749 L1460.14 683.749 L1459.58 683.749 L1459.02 683.749 L1458.46 683.749 L1457.9 683.749 L1457.34 683.749 L1456.78 683.749 L1456.22 683.749 L1455.66 683.749 L1455.1 683.749 L1454.54 683.749 L1453.98 683.749 L1453.42 683.749 L1452.87 683.749 L1452.31 683.749 L1451.75 683.749 L1451.19 683.749 L1450.63 683.749 L1450.07 683.749 L1449.51 683.749 L1448.95 683.749 L1448.39 683.749 L1447.83 683.749 L1447.27 683.749 L1446.71 683.749 L1446.15 683.749 L1445.6 683.749 L1445.04 683.749 L1444.48 683.749 L1443.92 683.749 L1443.36 683.749 L1442.8 683.749 L1442.24 683.749 L1441.68 683.749 L1441.12 683.749 L1440.56 683.749 L1440 683.749 L1439.44 683.749 L1438.88 683.749 L1438.33 683.749 L1437.77 683.749 L1437.21 683.749 L1436.65 683.749 L1436.09 683.749 L1435.53 683.749 L1434.97 683.749 L1434.41 683.749 L1433.85 683.749 L1433.29 683.749 L1432.73 683.749 L1432.17 683.749 L1431.61 683.749 L1431.05 683.749 L1430.5 683.749 L1429.94 683.749 L1429.38 683.749 L1428.82 683.749 L1428.26 683.749 L1427.7 683.749 L1427.14 683.749 L1426.58 683.749 L1426.02 683.749 L1425.46 683.749 L1424.9 683.749 L1424.34 683.749 L1423.78 683.749 L1423.23 683.749 L1422.67 683.749 L1422.11 683.749 L1421.55 683.749 L1420.99 683.749 L1420.43 683.749 L1419.87 683.749 L1419.31 683.749 L1418.75 683.749 L1418.19 683.749 L1417.63 683.749 L1417.07 683.749 L1416.51 683.749 L1415.95 683.749 L1415.4 683.749 L1414.84 683.749 L1414.28 683.749 L1413.72 683.749 L1413.16 683.749 L1412.6 683.749 L1412.04 683.749 L1411.48 683.749 L1410.92 683.749 L1410.36 683.749 L1409.8 683.749 L1409.24 683.749 L1408.68 683.749 L1408.13 683.749 L1407.57 683.749 L1407.01 683.749 L1406.45 683.749 L1405.89 683.749 L1405.33 683.749 L1404.77 683.749 L1404.21 683.749 L1403.65 683.749 L1403.09 683.749 L1402.53 683.749 L1401.97 683.749 L1401.41 683.749 L1400.86 683.749 L1400.3 683.749 L1399.74 683.749 L1399.18 683.749 L1398.62 683.749 L1398.06 683.749 L1397.5 683.749 L1396.94 683.749 L1396.38 683.749 L1395.82 683.749 L1395.26 683.749 L1394.7 683.749 L1394.14 683.749 L1393.58 683.749 L1393.03 683.749 L1392.47 683.749 L1391.91 683.749 L1391.35 683.749 L1390.79 683.749 L1390.23 683.749 L1389.67 683.749 L1389.11 683.749 L1388.55 683.749 L1387.99 683.749 L1387.43 683.749 L1386.87 683.749 L1386.31 683.749 L1385.76 683.749 L1385.2 683.749 L1384.64 683.749 L1384.08 683.749 L1383.52 683.749 L1382.96 683.749 L1382.4 683.749 L1381.84 683.749 L1381.28 683.749 L1380.72 683.749 L1380.16 683.749 L1379.6 683.749 L1379.04 683.749 L1378.49 683.749 L1377.93 683.749 L1377.37 683.749 L1376.81 683.749 L1376.25 683.749 L1375.69 683.749 L1375.13 683.749 L1374.57 683.749 L1374.01 683.749 L1373.45 683.749 L1372.89 683.749 L1372.33 683.749 L1371.77 683.749 L1371.21 683.749 L1370.66 683.749 L1370.1 683.749 L1369.54 683.749 L1368.98 683.749 L1368.42 683.749 L1367.86 683.749 L1367.3 683.749 L1366.74 683.749 L1366.18 683.749 L1365.62 683.749 L1365.06 683.749 L1364.5 683.749 L1363.94 683.749 L1363.39 683.749 L1362.83 683.749 L1362.27 683.749 L1361.71 683.749 L1361.15 683.749 L1360.59 683.749 L1360.03 683.749 L1359.47 683.749 L1358.91 683.749 L1358.35 683.749 L1357.79 683.749 L1357.23 683.749 L1356.67 683.749 L1356.12 683.749 L1355.56 683.749 L1355 683.749 L1354.44 683.749 L1353.88 683.749 L1353.32 683.749 L1352.76 683.749 L1352.2 683.749 L1351.64 683.749 L1351.08 683.749 L1350.52 683.749 L1349.96 683.749 L1349.4 683.749 L1348.84 683.749 L1348.29 683.749 L1347.73 683.749 L1347.17 683.749 L1346.61 683.749 L1346.05 683.749 L1345.49 683.749 L1344.93 683.749 L1344.37 683.749 L1343.81 683.749 L1343.25 683.749 L1342.69 683.749 L1342.13 683.749 L1341.57 683.749 L1341.02 683.749 L1340.46 683.749 L1339.9 683.749 L1339.34 683.749 L1338.78 683.749 L1338.22 683.749 L1337.66 683.749 L1337.1 683.749 L1336.54 683.749 L1335.98 683.749 L1335.42 683.749 L1334.86 683.749 L1334.3 683.749 L1333.75 683.749 L1333.19 683.749 L1332.63 683.749 L1332.07 683.749 L1331.51 683.749 L1330.95 683.749 L1330.39 683.749 L1329.83 683.749 L1329.27 683.749 L1328.71 683.749 L1328.15 683.749 L1327.59 683.749 L1327.03 683.749 L1326.47 683.749 L1325.92 683.749 L1325.36 683.749 L1324.8 683.749 L1324.24 683.749 L1323.68 683.749 L1323.12 683.749 L1322.56 683.749 L1322 683.749 L1321.44 683.749 L1320.88 683.749 L1320.32 683.749 L1319.76 683.749 L1319.2 683.749 L1318.65 683.749 L1318.09 683.749 L1317.53 683.749 L1316.97 683.749 L1316.41 683.749 L1315.85 683.749 L1315.29 683.749 L1314.73 683.749 L1314.17 683.749 L1313.61 683.749 L1313.05 683.749 L1312.49 683.749 L1311.93 683.749 L1311.38 683.749 L1310.82 683.749 L1310.26 683.749 L1309.7 683.749 L1309.14 683.749 L1308.58 683.749 L1308.02 683.749 L1307.46 683.749 L1306.9 683.749 L1306.34 683.749 L1305.78 683.749 L1305.22 683.749 L1304.66 683.749 L1304.1 683.749 L1303.55 683.749 L1302.99 683.749 L1302.43 683.749 L1301.87 683.749 L1301.31 683.749 L1300.75 683.749 L1300.19 683.749 L1299.63 683.749 L1299.07 683.749 L1298.51 683.749 L1297.95 683.749 L1297.39 683.749 L1296.83 683.749 L1296.28 683.749 L1295.72 683.749 L1295.16 683.749 L1294.6 683.749 L1294.04 683.749 L1293.48 683.749 L1292.92 683.749 L1292.36 683.749 L1291.8 683.749 L1291.24 683.749 L1290.68 683.749 L1290.12 683.749 L1289.56 683.749 L1289 683.749 L1288.45 683.749 L1287.89 683.749 L1287.33 683.749 L1286.77 683.749 L1286.21 683.749 L1285.65 683.749 L1285.09 683.749 L1284.53 683.749 L1283.97 683.749 L1283.41 683.749 L1282.85 683.749 L1282.29 683.749 L1281.73 683.749 L1281.18 683.749 L1280.62 683.749 L1280.06 683.749 L1279.5 683.749 L1278.94 683.749 L1278.38 683.749 L1277.82 683.749 L1277.26 683.749 L1276.7 683.749 L1276.14 683.749 L1275.58 683.749 L1275.02 683.749 L1274.46 683.749 L1273.91 683.749 L1273.35 683.749 L1272.79 683.749 L1272.23 683.749 L1271.67 683.749 L1271.11 683.749 L1270.55 683.749 L1269.99 683.749 L1269.43 683.749 L1268.87 683.749 L1268.31 683.749 L1267.75 683.749 L1267.19 683.749 L1266.63 683.749 L1266.08 683.749 L1265.52 683.749 L1264.96 683.749 L1264.4 683.749 L1263.84 683.749 L1263.28 683.749 L1262.72 683.749 L1262.16 683.749 L1261.6 683.749 L1261.04 683.749 L1260.48 683.749 L1259.92 683.749 L1259.36 683.749 L1258.81 683.749 L1258.25 683.749 L1257.69 683.749 L1257.13 683.749 L1256.57 683.749 L1256.01 683.749 L1255.45 683.749 L1254.89 683.749 L1254.33 683.749 L1253.77 683.749 L1253.21 683.749 L1252.65 683.749 L1252.09 683.749 L1251.54 683.749 L1250.98 683.749 L1250.42 683.749 L1249.86 683.749 L1249.3 683.749 L1248.74 683.749 L1248.18 683.749 L1247.62 683.749 L1247.06 683.749 L1246.5 683.749 L1245.94 683.749 L1245.38 683.749 L1244.82 683.749 L1244.26 683.749 L1243.71 683.749 L1243.15 683.749 L1242.59 683.749 L1242.03 683.749 L1241.47 683.749 L1240.91 683.749 L1240.35 683.749 L1239.79 683.749 L1239.23 683.749 L1238.67 683.749 L1238.11 683.749 L1237.55 683.749 L1236.99 683.749 L1236.44 683.749 L1235.88 683.749 L1235.32 683.749 L1234.76 683.749 L1234.2 683.749 L1233.64 683.749 L1233.08 683.749 L1232.52 683.749 L1231.96 683.749 L1231.4 683.749 L1230.84 683.749 L1230.28 683.749 L1229.72 683.749 L1229.17 683.749 L1228.61 683.749 L1228.05 683.749 L1227.49 683.749 L1226.93 683.749 L1226.37 683.749 L1225.81 683.749 L1225.25 683.749 L1224.69 683.749 L1224.13 683.749 L1223.57 683.749 L1223.01 683.749 L1222.45 683.749 L1221.89 683.749 L1221.34 683.749 L1220.78 683.749 L1220.22 683.749 L1219.66 683.749 L1219.1 683.749 L1218.54 683.749 L1217.98 683.749 L1217.42 683.749 L1216.86 683.749 L1216.3 683.749 L1215.74 683.749 L1215.18 683.749 L1214.62 683.749 L1214.07 683.749 L1213.51 683.749 L1212.95 683.749 L1212.39 683.749 L1211.83 683.749 L1211.27 683.749 L1210.71 683.749 L1210.15 683.749 L1209.59 683.749 L1209.03 683.749 L1208.47 683.749 L1207.91 683.749 L1207.35 683.749 L1206.8 683.749 L1206.24 683.749 L1205.68 683.749 L1205.12 683.749 L1204.56 683.749 L1204 683.749 L1203.44 683.749 L1202.88 683.749 L1202.32 683.749 L1201.76 683.749 L1201.2 683.749 L1200.64 683.749 L1200.08 683.749 L1199.52 683.749 L1198.97 683.749 L1198.41 683.749 L1197.85 683.749 L1197.29 683.749 L1196.73 683.749 L1196.17 683.749 L1195.61 683.749 L1195.05 683.749 L1194.49 683.749 L1193.93 683.749 L1193.37 683.749 L1192.81 683.749 L1192.25 683.749 L1191.7 683.749 L1191.14 683.749 L1190.58 683.749 L1190.02 683.749 L1189.46 683.749 L1188.9 683.749 L1188.34 683.749 L1187.78 683.749 L1187.22 683.749 L1186.66 683.749 L1186.1 683.749 L1185.54 683.749 L1184.98 683.749 L1184.43 683.749 L1183.87 683.749 L1183.31 683.749 L1182.75 683.749 L1182.19 683.749 L1181.63 683.749 L1181.07 683.749 L1180.51 683.749 L1179.95 683.749 L1179.39 683.749 L1178.83 683.749 L1178.27 683.749 L1177.71 683.749 L1177.15 683.749 L1176.6 683.749 L1176.04 683.749 L1175.48 683.749 L1174.92 683.749 L1174.36 683.749 L1173.8 683.749 L1173.24 683.749 L1172.68 683.749 L1172.12 683.749 L1171.56 683.749 L1171 683.749 L1170.44 683.749 L1169.88 683.749 L1169.33 683.749 L1168.77 683.749 L1168.21 683.749 L1167.65 683.749 L1167.09 683.749 L1166.53 683.749 L1165.97 683.749 L1165.41 683.749 L1164.85 683.749 L1164.29 683.749 L1163.73 683.749 L1163.17 683.749 L1162.61 683.749 L1162.05 683.749 L1161.5 683.749 L1160.94 683.749 L1160.38 683.749 L1159.82 683.749 L1159.26 683.749 L1158.7 683.749 L1158.14 683.749 L1157.58 683.749 L1157.02 683.749 L1156.46 683.749 L1155.9 683.749 L1155.34 683.749 L1154.78 683.749 L1154.23 683.749 L1153.67 683.749 L1153.11 683.749 L1152.55 683.749 L1151.99 683.749 L1151.43 683.749 L1150.87 683.749 L1150.31 683.749 L1149.75 683.749 L1149.19 683.749 L1148.63 683.749 L1148.07 683.749 L1147.51 683.749 L1146.96 683.749 L1146.4 683.749 L1145.84 683.749 L1145.28 683.749 L1144.72 683.749 L1144.16 683.749 L1143.6 683.749 L1143.04 683.749 L1142.48 683.749 L1141.92 683.749 L1141.36 683.749 L1140.8 683.749 L1140.24 683.749 L1139.68 683.749 L1139.13 683.749 L1138.57 683.749 L1138.01 683.749 L1137.45 683.749 L1136.89 683.749 L1136.33 683.749 L1135.77 683.749 L1135.21 683.749 L1134.65 683.749 L1134.09 683.749 L1133.53 683.749 L1132.97 683.749 L1132.41 683.749 L1131.86 683.749 L1131.3 683.749 L1130.74 683.749 L1130.18 683.749 L1129.62 683.749 L1129.06 683.749 L1128.5 683.749 L1127.94 683.749 L1127.38 683.749 L1126.82 683.749 L1126.26 683.749 L1125.7 683.749 L1125.14 683.749 L1124.59 683.749 L1124.03 683.749 L1123.47 683.749 L1122.91 683.749 L1122.35 683.749 L1121.79 683.749 L1121.23 683.749 L1120.67 683.749 L1120.11 683.749 L1119.55 683.749 L1118.99 683.749 L1118.43 683.749 L1117.87 683.749 L1117.31 683.749 L1116.76 683.749 L1116.2 683.749 L1115.64 683.749 L1115.08 683.749 L1114.52 683.749 L1113.96 683.749 L1113.4 683.749 L1112.84 683.749 L1112.28 683.749 L1111.72 683.749 L1111.16 683.749 L1110.6 683.749 L1110.04 683.749 L1109.49 683.749 L1108.93 683.749 L1108.37 683.749 L1107.81 683.749 L1107.25 683.749 L1106.69 683.749 L1106.13 683.749 L1105.57 683.749 L1105.01 683.749 L1104.45 683.749 L1103.89 683.749 L1103.33 683.749 L1102.77 683.749 L1102.22 683.749 L1101.66 683.749 L1101.1 683.749 L1100.54 683.749 L1099.98 683.749 L1099.42 683.749 L1098.86 683.749 L1098.3 683.749 L1097.74 683.749 L1097.18 683.749 L1096.62 683.749 L1096.06 683.749 L1095.5 683.749 L1094.94 683.749 L1094.39 683.749 L1093.83 683.749 L1093.27 683.749 L1092.71 683.749 L1092.15 683.749 L1091.59 683.749 L1091.03 683.749 L1090.47 683.749 L1089.91 683.749 L1089.35 683.749 L1088.79 683.749 L1088.23 683.749 L1087.67 683.749 L1087.12 683.749 L1086.56 683.749 L1086 683.749 L1085.44 683.749 L1084.88 683.749 L1084.32 683.749 L1083.76 683.749 L1083.2 683.749 L1082.64 683.749 L1082.08 683.749 L1081.52 683.749 L1080.96 683.749 L1080.4 683.749 L1079.85 683.749 L1079.29 683.749 L1078.73 683.749 L1078.17 683.749 L1077.61 683.749 L1077.05 683.749 L1076.49 683.749 L1075.93 683.749 L1075.37 683.749 L1074.81 683.749 L1074.25 683.749 L1073.69 683.749 L1073.13 683.749 L1072.57 683.749 L1072.02 683.749 L1071.46 683.749 L1070.9 683.749 L1070.34 683.749 L1069.78 683.749 L1069.22 683.749 L1068.66 683.749 L1068.1 683.749 L1067.54 683.749 L1066.98 683.749 L1066.42 683.749 L1065.86 683.749 L1065.3 683.749 L1064.75 683.749 L1064.19 683.749 L1063.63 683.749 L1063.07 683.749 L1062.51 683.749 L1061.95 683.749 L1061.39 683.749 L1060.83 683.749 L1060.27 683.749 L1059.71 683.749 L1059.15 683.749 L1058.59 683.749 L1058.03 683.749 L1057.48 683.749 L1056.92 683.749 L1056.36 683.749 L1055.8 683.749 L1055.24 683.749 L1054.68 683.749 L1054.12 683.749 L1053.56 683.749 L1053 683.749 L1052.44 683.749 L1051.88 683.749 L1051.32 683.749 L1050.76 683.749 L1050.2 683.749 L1049.65 683.749 L1049.09 683.749 L1048.53 683.749 L1047.97 683.749 L1047.41 683.749 L1046.85 683.749 L1046.29 683.749 L1045.73 683.749 L1045.17 683.749 L1044.61 683.749 L1044.05 683.749 L1043.49 683.749 L1042.93 683.749 L1042.38 683.749 L1041.82 683.749 L1041.26 683.749 L1040.7 683.749 L1040.14 683.749 L1039.58 683.749 L1039.02 683.749 L1038.46 683.749 L1037.9 683.749 L1037.34 683.749 L1036.78 683.749 L1036.22 683.749 L1035.66 683.749 L1035.1 683.749 L1034.55 683.749 L1033.99 683.749 L1033.43 683.749 L1032.87 683.749 L1032.31 683.749 L1031.75 683.749 L1031.19 683.749 L1030.63 683.749 L1030.07 683.749 L1029.51 683.749 L1028.95 683.749 L1028.39 683.749 L1027.83 683.749 L1027.28 683.749 L1026.72 683.749 L1026.16 683.749 L1025.6 683.749 L1025.04 683.749 L1024.48 683.749 L1023.92 683.749 L1023.36 683.749 L1022.8 683.749 L1022.24 683.749 L1021.68 683.749 L1021.12 683.749 L1020.56 683.749 L1020.01 683.749 L1019.45 683.749 L1018.89 683.749 L1018.33 683.749 L1017.77 683.749 L1017.21 683.749 L1016.65 683.749 L1016.09 683.749 L1015.53 683.749 L1014.97 683.749 L1014.41 683.749 L1013.85 683.749 L1013.29 683.749 L1012.73 683.749 L1012.18 683.749 L1011.62 683.749 L1011.06 683.749 L1010.5 683.749 L1009.94 683.749 L1009.38 683.749 L1008.82 683.749 L1008.26 683.749 L1007.7 683.749 L1007.14 683.749 L1006.58 683.749 L1006.02 683.749 L1005.46 683.749 L1004.91 683.749 L1004.35 683.749 L1003.79 683.749 L1003.23 683.749 L1002.67 683.749 L1002.11 683.749 L1001.55 683.749 L1000.99 683.749 L1000.43 683.749 L999.872 683.749 L999.313 683.749 L998.754 683.749 L998.194 683.749 L997.635 683.749 L997.076 683.749 L996.517 683.749 L995.957 683.749 L995.398 683.749 L994.839 683.749 L994.28 683.749 L993.72 683.749 L993.161 683.749 L992.602 683.749 L992.043 683.749 L991.483 683.749 L990.924 683.749 L990.365 683.749 L989.806 683.749 L989.246 683.749 L988.687 683.749 L988.128 683.749 L987.569 683.749 L987.009 683.749 L986.45 683.749 L985.891 683.749 L985.332 683.749 L984.772 683.749 L984.213 683.749 L983.654 683.749 L983.095 683.749 L982.535 683.749 L981.976 683.749 L981.417 683.749 L980.858 683.749 L980.298 683.749 L979.739 683.749 L979.18 683.749 L978.621 683.749 L978.061 683.749 L977.502 683.749 L976.943 683.749 L976.384 683.749 L975.824 683.749 L975.265 683.749 L974.706 683.749 L974.147 683.749 L973.587 683.749 L973.028 683.749 L972.469 683.749 L971.91 683.749 L971.35 683.749 L970.791 683.749 L970.232 683.749 L969.673 683.749 L969.113 683.749 L968.554 683.749 L967.995 683.749 L967.436 683.749 L966.876 683.749 L966.317 683.749 L965.758 683.749 L965.199 683.749 L964.639 683.749 L964.08 683.749 L963.521 683.749 L962.962 683.749 L962.402 683.749 L961.843 683.749 L961.284 683.749 L960.725 683.749 L960.165 683.749 L959.606 683.749 L959.047 683.749 L958.488 683.749 L957.928 683.749 L957.369 683.749 L956.81 683.749 L956.251 683.749 L955.691 683.749 L955.132 683.749 L954.573 683.749 L954.014 683.749 L953.454 683.749 L952.895 683.749 L952.336 683.749 L951.777 683.749 L951.217 683.749 L950.658 683.749 L950.099 683.749 L949.54 683.749 L948.98 683.749 L948.421 683.749 L947.862 683.749 L947.303 683.749 L946.743 683.749 L946.184 683.749 L945.625 683.749 L945.066 683.749 L944.506 683.749 L943.947 683.749 L943.388 683.749 L942.829 683.749 L942.269 683.749 L941.71 683.749 L941.151 683.749 L940.592 683.749 L940.032 683.749 L939.473 683.749 L938.914 683.749 L938.355 683.749 L937.795 683.749 L937.236 683.749 L936.677 683.749 L936.118 683.749 L935.558 683.749 L934.999 683.749 L934.44 683.749 L933.881 683.749 L933.321 683.749 L932.762 683.749 L932.203 683.749 L931.644 683.749 L931.084 683.749 L930.525 683.749 L929.966 683.749 L929.406 683.749 L928.847 683.749 L928.288 683.749 L927.729 683.749 L927.169 683.749 L926.61 683.749 L926.051 683.749 L925.492 683.749 L924.932 683.749 L924.373 683.749 L923.814 683.749 L923.255 683.749 L922.695 683.749 L922.136 683.749 L921.577 683.749 L921.018 683.749 L920.458 683.749 L919.899 683.749 L919.34 683.749 L918.781 683.749 L918.221 683.749 L917.662 683.749 L917.103 683.749 L916.544 683.749 L915.984 683.749 L915.425 683.749 L914.866 683.749 L914.307 683.749 L913.747 683.749 L913.188 683.749 L912.629 683.749 L912.07 683.749 L911.51 683.749 L910.951 683.749 L910.392 683.749 L909.833 683.749 L909.273 683.749 L908.714 683.749 L908.155 683.749 L907.596 683.749 L907.036 683.749 L906.477 683.749 L905.918 683.749 L905.359 683.749 L904.799 683.749 L904.24 683.749 L903.681 683.749 L903.122 683.749 L902.562 683.749 L902.003 683.749 L901.444 683.749 L900.885 683.749 L900.325 683.749 L899.766 683.749 L899.207 683.749 L898.648 683.749 L898.088 683.749 L897.529 683.749 L896.97 683.749 L896.411 683.749 L895.851 683.749 L895.292 683.749 L894.733 683.749 L894.174 683.749 L893.614 683.749 L893.055 683.749 L892.496 683.749 L891.937 683.749 L891.377 683.749 L890.818 683.749 L890.259 683.749 L889.7 683.749 L889.14 683.749 L888.581 683.749 L888.022 683.749 L887.463 683.749 L886.903 683.749 L886.344 683.749 L885.785 683.749 L885.226 683.749 L884.666 683.749 L884.107 683.749 L883.548 683.749 L882.989 683.749 L882.429 683.749 L881.87 683.749 L881.311 683.749 L880.752 683.749 L880.192 683.749 L879.633 683.749 L879.074 683.749 L878.515 683.749 L877.955 683.749 L877.396 683.749 L876.837 683.749 L876.278 683.749 L875.718 683.749 L875.159 683.749 L874.6 683.749 L874.041 683.749 L873.481 683.749 L872.922 683.749 L872.363 683.749 L871.804 683.749 L871.244 683.749 L870.685 683.749 L870.126 683.749 L869.567 683.749 L869.007 683.749 L868.448 683.749 L867.889 683.749 L867.33 683.749 L866.77 683.749 L866.211 683.749 L865.652 683.749 L865.093 683.749 L864.533 683.749 L863.974 683.749 L863.415 683.749 L862.856 683.749 L862.296 683.749 L861.737 683.749 L861.178 683.749 L860.619 683.749 L860.059 683.749 L859.5 683.749 L858.941 683.749 L858.382 683.749 L857.822 683.749 L857.263 683.749 L856.704 683.749 L856.145 683.749 L855.585 683.749 L855.026 683.749 L854.467 683.749 L853.908 683.749 L853.348 683.749 L852.789 683.749 L852.23 683.749 L851.671 683.749 L851.111 683.749 L850.552 683.749 L849.993 683.749 L849.434 683.749 L848.874 683.749 L848.315 683.749 L847.756 683.749 L847.197 683.749 L846.637 683.749 L846.078 683.749 L845.519 683.749 L844.96 683.749 L844.4 683.749 L843.841 683.749 L843.282 683.749 L842.723 683.749 L842.163 683.749 L841.604 683.749 L841.045 683.749 L840.486 683.749 L839.926 683.749 L839.367 683.749 L838.808 683.749 L838.249 683.749 L837.689 683.749 L837.13 683.749 L836.571 683.749 L836.012 683.749 L835.452 683.749 L834.893 683.749 L834.334 683.749 L833.775 683.749 L833.215 683.749 L832.656 683.749 L832.097 683.749 L831.538 683.749 L830.978 683.749 L830.419 683.749 L829.86 683.749 L829.301 683.749 L828.741 683.749 L828.182 683.749 L827.623 683.749 L827.064 683.749 L826.504 683.749 L825.945 683.749 L825.386 683.749 L824.827 683.749 L824.267 683.749 L823.708 683.749 L823.149 683.749 L822.59 683.749 L822.03 683.749 L821.471 683.749 L820.912 683.749 L820.353 683.749 L819.793 683.749 L819.234 683.749 L818.675 683.749 L818.116 683.749 L817.556 683.749 L816.997 683.749 L816.438 683.749 L815.879 683.749 L815.319 683.749 L814.76 683.749 L814.201 683.749 L813.642 683.749 L813.082 683.749 L812.523 683.749 L811.964 683.749 L811.405 683.749 L810.845 683.749 L810.286 683.749 L809.727 683.749 L809.168 683.749 L808.608 683.749 L808.049 683.749 L807.49 683.749 L806.931 683.749 L806.371 683.749 L805.812 683.749 L805.253 683.749 L804.693 683.749 L804.134 683.749 L803.575 683.749 L803.016 683.749 L802.456 683.749 L801.897 683.749 L801.338 683.749 L800.779 683.749 L800.219 683.749 L799.66 683.749 L799.101 683.749 L798.542 683.749 L797.982 683.749 L797.423 683.749 L796.864 683.749 L796.305 683.749 L795.745 683.749 L795.186 683.749 L794.627 683.749 L794.068 683.749 L793.508 683.749 L792.949 683.749 L792.39 683.749 L791.831 683.749 L791.271 683.749 L790.712 683.749 L790.153 683.749 L789.594 683.749 L789.034 683.749 L788.475 683.749 L787.916 683.749 L787.357 683.749 L786.797 683.749 L786.238 683.749 L785.679 683.749 L785.12 683.749 L784.56 683.749 L784.001 683.749 L783.442 683.749 L782.883 683.749 L782.323 683.749 L781.764 683.749 L781.205 683.749 L780.646 683.749 L780.086 683.749 L779.527 683.749 L778.968 683.749 L778.409 683.749 L777.849 683.749 L777.29 683.749 L776.731 683.749 L776.172 683.749 L775.612 683.749 L775.053 683.749 L774.494 683.749 L773.935 683.749 L773.375 683.749 L772.816 683.749 L772.257 683.749 L771.698 683.749 L771.138 683.749 L770.579 683.749 L770.02 683.749 L769.461 683.749 L768.901 683.749 L768.342 683.749 L767.783 683.749 L767.224 683.749 L766.664 683.749 L766.105 683.749 L765.546 683.749 L764.987 683.749 L764.427 683.749 L763.868 683.749 L763.309 683.749 L762.75 683.749 L762.19 683.749 L761.631 683.749 L761.072 683.749 L760.513 683.749 L759.953 683.749 L759.394 683.749 L758.835 683.749 L758.276 683.749 L757.716 683.749 L757.157 683.749 L756.598 683.749 L756.039 683.749 L755.479 683.749 L754.92 683.749 L754.361 683.749 L753.802 683.749 L753.242 683.749 L752.683 683.749 L752.124 683.749 L751.565 683.749 L751.005 683.749 L750.446 683.749 L749.887 683.749 L749.328 683.749 L748.768 683.749 L748.209 683.749 L747.65 683.749 L747.091 683.749 L746.531 683.749 L745.972 683.749 L745.413 683.749 L744.854 683.749 L744.294 683.749 L743.735 683.749 L743.176 683.749 L742.617 683.749 L742.057 683.749 L741.498 683.749 L740.939 683.749 L740.38 683.749 L739.82 683.749 L739.261 683.749 L738.702 683.749 L738.143 683.749 L737.583 683.749 L737.024 683.749 L736.465 683.749 L735.906 683.749 L735.346 683.749 L734.787 683.749 L734.228 683.749 L733.669 683.749 L733.109 683.749 L732.55 683.749 L731.991 683.749 L731.432 683.749 L730.872 683.749 L730.313 683.749 L729.754 683.749 L729.195 683.749 L728.635 683.749 L728.076 683.749 L727.517 683.749 L726.958 683.749 L726.398 683.749 L725.839 683.749 L725.28 683.749 L724.721 683.749 L724.161 683.749 L723.602 683.749 L723.043 683.749 L722.484 683.749 L721.924 683.749 L721.365 683.749 L720.806 683.749 L720.247 683.749  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip213)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.371 720.806,684.371 721.365,684.371 721.924,684.371 722.484,684.371 723.043,684.371 723.602,684.371 724.161,684.371 724.721,684.371 725.28,684.371 725.839,684.371 726.398,684.371 726.958,684.371 727.517,684.371 728.076,684.371 728.635,684.371 729.195,684.371 729.754,684.371 730.313,684.371 730.872,684.371 731.432,684.371 731.991,684.371 732.55,684.371 733.109,684.371 733.669,684.371 734.228,684.371 734.787,684.371 735.346,684.371 735.906,684.371 736.465,684.371 737.024,684.371 737.583,684.371 738.143,684.371 738.702,684.371 739.261,684.371 739.82,684.371 740.38,684.371 740.939,684.371 741.498,684.371 742.057,684.371 742.617,684.371 743.176,684.371 743.735,684.371 744.294,684.371 744.854,684.371 745.413,684.371 745.972,684.371 746.531,684.371 747.091,684.371 747.65,684.371 748.209,684.371 748.768,684.371 749.328,684.371 749.887,684.371 750.446,684.371 751.005,684.371 751.565,684.371 752.124,684.371 752.683,684.371 753.242,684.371 753.802,684.371 754.361,684.371 754.92,684.371 755.479,684.371 756.039,684.371 756.598,684.371 757.157,684.371 757.716,684.371 758.276,684.371 758.835,684.371 759.394,684.371 759.953,684.371 760.513,684.371 761.072,684.371 761.631,684.371 762.19,684.371 762.75,684.371 763.309,684.371 763.868,684.371 764.427,684.371 764.987,684.371 765.546,684.371 766.105,684.371 766.664,684.371 767.224,684.371 767.783,684.371 768.342,684.371 768.901,684.371 769.461,684.371 770.02,684.371 770.579,684.371 771.138,684.371 771.698,684.371 772.257,684.371 772.816,684.371 773.375,684.371 773.935,684.371 774.494,684.371 775.053,684.371 775.612,684.371 776.172,684.371 776.731,684.371 777.29,684.371 777.849,684.371 778.409,684.371 778.968,684.371 779.527,684.371 780.086,684.371 780.646,684.371 781.205,684.371 781.764,684.371 782.323,684.371 782.883,684.371 783.442,684.371 784.001,684.371 784.56,684.371 785.12,684.371 785.679,684.371 786.238,684.371 786.797,684.371 787.357,684.371 787.916,684.371 788.475,684.371 789.034,684.371 789.594,684.371 790.153,684.371 790.712,684.371 791.271,684.371 791.831,684.371 792.39,684.371 792.949,684.371 793.508,684.371 794.068,684.371 794.627,684.371 795.186,684.371 795.745,684.371 796.305,684.371 796.864,684.371 797.423,684.371 797.982,684.371 798.542,684.371 799.101,684.371 799.66,684.371 800.219,684.371 800.779,684.371 801.338,684.371 801.897,684.371 802.456,684.371 803.016,684.371 803.575,684.371 804.134,684.371 804.693,684.371 805.253,684.371 805.812,684.371 806.371,684.371 806.931,684.371 807.49,684.371 808.049,684.371 808.608,684.371 809.168,684.371 809.727,684.371 810.286,684.371 810.845,684.371 811.405,684.371 811.964,684.371 812.523,684.371 813.082,684.371 813.642,684.371 814.201,684.371 814.76,684.371 815.319,684.371 815.879,684.371 816.438,684.371 816.997,684.371 817.556,684.371 818.116,684.371 818.675,684.371 819.234,684.371 819.793,684.371 820.353,684.371 820.912,684.371 821.471,684.371 822.03,684.371 822.59,684.371 823.149,684.371 823.708,684.371 824.267,684.371 824.827,684.371 825.386,684.371 825.945,684.371 826.504,684.371 827.064,684.371 827.623,684.371 828.182,684.371 828.741,684.371 829.301,684.371 829.86,684.371 830.419,684.371 830.978,684.371 831.538,684.371 832.097,684.371 832.656,684.371 833.215,684.371 833.775,684.371 834.334,684.371 834.893,684.371 835.452,684.371 836.012,684.371 836.571,684.371 837.13,684.371 837.689,684.371 838.249,684.371 838.808,684.371 839.367,684.371 839.926,684.371 840.486,684.371 841.045,684.371 841.604,684.371 842.163,684.371 842.723,684.371 843.282,684.371 843.841,684.371 844.4,684.371 844.96,684.371 845.519,684.371 846.078,684.371 846.637,684.371 847.197,684.371 847.756,684.371 848.315,684.371 848.874,684.371 849.434,684.371 849.993,684.371 850.552,684.371 851.111,684.371 851.671,684.371 852.23,684.371 852.789,684.371 853.348,684.371 853.908,684.371 854.467,684.371 855.026,684.371 855.585,684.371 856.145,684.371 856.704,684.371 857.263,684.371 857.822,684.371 858.382,684.371 858.941,684.371 859.5,684.371 860.059,684.371 860.619,684.371 861.178,684.371 861.737,684.371 862.296,684.371 862.856,684.371 863.415,684.371 863.974,684.371 864.533,684.371 865.093,684.371 865.652,684.371 866.211,684.371 866.77,684.371 867.33,684.371 867.889,684.371 868.448,684.371 869.007,684.371 869.567,684.371 870.126,684.371 870.685,684.371 871.244,684.371 871.804,684.371 872.363,684.371 872.922,684.371 873.481,684.371 874.041,684.371 874.6,684.371 875.159,684.371 875.718,684.371 876.278,684.371 876.837,684.371 877.396,684.371 877.955,684.371 878.515,684.371 879.074,684.371 879.633,684.371 880.192,684.371 880.752,684.371 881.311,684.371 881.87,684.371 882.429,684.371 882.989,684.371 883.548,684.371 884.107,684.371 884.666,684.371 885.226,684.371 885.785,684.371 886.344,684.371 886.903,684.371 887.463,684.371 888.022,684.371 888.581,684.371 889.14,684.371 889.7,684.371 890.259,684.371 890.818,684.371 891.377,684.371 891.937,684.371 892.496,684.371 893.055,684.371 893.614,684.371 894.174,684.371 894.733,684.371 895.292,684.371 895.851,684.371 896.411,684.371 896.97,684.371 897.529,684.371 898.088,684.371 898.648,684.371 899.207,684.371 899.766,684.371 900.325,684.371 900.885,684.371 901.444,684.371 902.003,684.371 902.562,684.371 903.122,684.371 903.681,684.371 904.24,684.371 904.799,684.371 905.359,684.371 905.918,684.371 906.477,684.371 907.036,684.371 907.596,684.371 908.155,684.371 908.714,684.371 909.273,684.371 909.833,684.371 910.392,684.371 910.951,684.371 911.51,684.371 912.07,684.371 912.629,684.371 913.188,684.371 913.747,684.371 914.307,684.371 914.866,684.371 915.425,684.371 915.984,684.371 916.544,684.371 917.103,684.371 917.662,684.371 918.221,684.371 918.781,684.371 919.34,684.371 919.899,684.371 920.458,684.371 921.018,684.371 921.577,684.371 922.136,684.371 922.695,684.371 923.255,684.371 923.814,684.371 924.373,684.371 924.932,684.371 925.492,684.371 926.051,684.371 926.61,684.371 927.169,684.371 927.729,684.371 928.288,684.371 928.847,684.371 929.406,684.371 929.966,684.371 930.525,684.371 931.084,684.371 931.644,684.371 932.203,684.371 932.762,684.371 933.321,684.371 933.881,684.371 934.44,684.371 934.999,684.371 935.558,684.371 936.118,684.371 936.677,684.371 937.236,684.371 937.795,684.371 938.355,684.371 938.914,684.371 939.473,684.371 940.032,684.371 940.592,684.371 941.151,684.371 941.71,684.371 942.269,684.371 942.829,684.371 943.388,684.371 943.947,684.371 944.506,684.371 945.066,684.371 945.625,684.371 946.184,684.371 946.743,684.371 947.303,684.371 947.862,684.371 948.421,684.371 948.98,684.371 949.54,684.371 950.099,684.371 950.658,684.371 951.217,684.371 951.777,684.371 952.336,684.371 952.895,684.371 953.454,684.371 954.014,684.371 954.573,684.371 955.132,684.371 955.691,684.371 956.251,684.371 956.81,684.371 957.369,684.371 957.928,684.371 958.488,684.371 959.047,684.371 959.606,684.371 960.165,684.371 960.725,684.371 961.284,684.371 961.843,684.371 962.402,684.371 962.962,684.371 963.521,684.371 964.08,684.371 964.639,684.371 965.199,684.371 965.758,684.371 966.317,684.371 966.876,684.371 967.436,684.371 967.995,684.371 968.554,684.371 969.113,684.371 969.673,684.371 970.232,684.371 970.791,684.371 971.35,684.371 971.91,684.371 972.469,684.371 973.028,684.371 973.587,684.371 974.147,684.371 974.706,684.371 975.265,684.371 975.824,684.371 976.384,684.371 976.943,684.371 977.502,684.371 978.061,684.371 978.621,684.371 979.18,684.371 979.739,684.371 980.298,684.371 980.858,684.371 981.417,684.371 981.976,684.371 982.535,684.371 983.095,684.371 983.654,684.371 984.213,684.371 984.772,684.371 985.332,684.371 985.891,684.371 986.45,684.371 987.009,684.371 987.569,684.371 988.128,684.371 988.687,684.371 989.246,684.371 989.806,684.371 990.365,684.371 990.924,684.371 991.483,684.371 992.043,684.371 992.602,684.371 993.161,684.371 993.72,684.371 994.28,684.371 994.839,684.371 995.398,684.371 995.957,684.371 996.517,684.371 997.076,684.371 997.635,684.371 998.194,684.371 998.754,684.371 999.313,684.371 999.872,684.371 1000.43,684.371 1000.99,684.371 1001.55,684.371 1002.11,684.371 1002.67,684.371 1003.23,684.371 1003.79,684.371 1004.35,684.371 1004.91,684.371 1005.46,684.371 1006.02,684.371 1006.58,684.371 1007.14,684.371 1007.7,684.371 1008.26,684.371 1008.82,684.371 1009.38,684.371 1009.94,684.371 1010.5,684.371 1011.06,684.371 1011.62,684.371 1012.18,684.371 1012.73,684.371 1013.29,684.371 1013.85,684.371 1014.41,684.371 1014.97,684.371 1015.53,684.371 1016.09,684.371 1016.65,684.371 1017.21,684.371 1017.77,684.371 1018.33,684.371 1018.89,684.371 1019.45,684.371 1020.01,684.371 1020.56,684.371 1021.12,684.371 1021.68,684.371 1022.24,684.371 1022.8,684.371 1023.36,684.371 1023.92,684.371 1024.48,684.371 1025.04,684.371 1025.6,684.371 1026.16,684.371 1026.72,684.371 1027.28,684.371 1027.83,684.371 1028.39,684.371 1028.95,684.371 1029.51,684.371 1030.07,684.371 1030.63,684.371 1031.19,684.371 1031.75,684.371 1032.31,684.371 1032.87,684.371 1033.43,684.371 1033.99,684.371 1034.55,684.371 1035.1,684.371 1035.66,684.371 1036.22,684.371 1036.78,684.371 1037.34,684.371 1037.9,684.371 1038.46,684.371 1039.02,684.371 1039.58,684.371 1040.14,684.371 1040.7,684.371 1041.26,684.371 1041.82,684.371 1042.38,684.371 1042.93,684.371 1043.49,684.371 1044.05,684.371 1044.61,684.371 1045.17,684.371 1045.73,684.371 1046.29,684.371 1046.85,684.371 1047.41,684.371 1047.97,684.371 1048.53,684.371 1049.09,684.371 1049.65,684.371 1050.2,684.371 1050.76,684.371 1051.32,684.371 1051.88,684.371 1052.44,684.371 1053,684.371 1053.56,684.371 1054.12,684.371 1054.68,684.371 1055.24,684.371 1055.8,684.371 1056.36,684.371 1056.92,684.371 1057.48,684.371 1058.03,684.371 1058.59,684.371 1059.15,684.371 1059.71,684.371 1060.27,684.371 1060.83,684.371 1061.39,684.371 1061.95,684.371 1062.51,684.371 1063.07,684.371 1063.63,684.371 1064.19,684.371 1064.75,684.371 1065.3,684.371 1065.86,684.371 1066.42,684.371 1066.98,684.371 1067.54,684.371 1068.1,684.371 1068.66,684.371 1069.22,684.371 1069.78,684.371 1070.34,684.371 1070.9,684.371 1071.46,684.371 1072.02,684.371 1072.57,684.371 1073.13,684.371 1073.69,684.371 1074.25,684.371 1074.81,684.371 1075.37,684.371 1075.93,684.371 1076.49,684.371 1077.05,684.371 1077.61,684.371 1078.17,684.371 1078.73,684.371 1079.29,684.371 1079.85,684.371 1080.4,684.371 1080.96,684.371 1081.52,684.371 1082.08,684.371 1082.64,684.371 1083.2,684.371 1083.76,684.371 1084.32,684.371 1084.88,684.371 1085.44,684.371 1086,684.371 1086.56,684.371 1087.12,684.371 1087.67,684.371 1088.23,684.371 1088.79,684.371 1089.35,684.371 1089.91,684.371 1090.47,684.371 1091.03,684.371 1091.59,684.371 1092.15,684.371 1092.71,684.371 1093.27,684.371 1093.83,684.371 1094.39,684.371 1094.94,684.371 1095.5,684.371 1096.06,684.371 1096.62,684.371 1097.18,684.371 1097.74,684.371 1098.3,684.371 1098.86,684.371 1099.42,684.371 1099.98,684.371 1100.54,684.371 1101.1,684.371 1101.66,684.371 1102.22,684.371 1102.77,684.371 1103.33,684.371 1103.89,684.371 1104.45,684.371 1105.01,684.371 1105.57,684.371 1106.13,684.371 1106.69,684.371 1107.25,684.371 1107.81,684.371 1108.37,684.371 1108.93,684.371 1109.49,684.371 1110.04,684.371 1110.6,684.371 1111.16,684.371 1111.72,684.371 1112.28,684.371 1112.84,684.371 1113.4,684.371 1113.96,684.371 1114.52,684.371 1115.08,684.371 1115.64,684.371 1116.2,684.371 1116.76,684.371 1117.31,684.371 1117.87,684.371 1118.43,684.371 1118.99,684.371 1119.55,684.371 1120.11,684.371 1120.67,684.371 1121.23,684.371 1121.79,684.371 1122.35,684.371 1122.91,684.371 1123.47,684.371 1124.03,684.371 1124.59,684.371 1125.14,684.371 1125.7,684.371 1126.26,684.371 1126.82,684.371 1127.38,684.371 1127.94,684.371 1128.5,684.371 1129.06,684.371 1129.62,684.371 1130.18,684.371 1130.74,684.371 1131.3,684.371 1131.86,684.371 1132.41,684.371 1132.97,684.371 1133.53,684.371 1134.09,684.371 1134.65,684.371 1135.21,684.371 1135.77,684.371 1136.33,684.371 1136.89,684.371 1137.45,684.371 1138.01,684.371 1138.57,684.371 1139.13,684.371 1139.68,684.371 1140.24,684.371 1140.8,684.371 1141.36,684.371 1141.92,684.371 1142.48,684.371 1143.04,684.371 1143.6,684.371 1144.16,684.371 1144.72,684.371 1145.28,684.371 1145.84,684.371 1146.4,684.371 1146.96,684.371 1147.51,684.371 1148.07,684.371 1148.63,684.371 1149.19,684.371 1149.75,684.371 1150.31,684.371 1150.87,684.371 1151.43,684.371 1151.99,684.371 1152.55,684.371 1153.11,684.371 1153.67,684.371 1154.23,684.371 1154.78,684.371 1155.34,684.371 1155.9,684.371 1156.46,684.371 1157.02,684.371 1157.58,684.371 1158.14,684.371 1158.7,684.371 1159.26,684.371 1159.82,684.371 1160.38,684.371 1160.94,684.371 1161.5,684.371 1162.05,684.371 1162.61,684.371 1163.17,684.371 1163.73,684.371 1164.29,684.371 1164.85,684.371 1165.41,684.371 1165.97,684.371 1166.53,684.371 1167.09,684.371 1167.65,684.371 1168.21,684.371 1168.77,684.371 1169.33,684.371 1169.88,684.371 1170.44,684.371 1171,684.371 1171.56,684.371 1172.12,684.371 1172.68,684.371 1173.24,684.371 1173.8,684.371 1174.36,684.371 1174.92,684.371 1175.48,684.371 1176.04,684.371 1176.6,684.371 1177.15,684.371 1177.71,684.371 1178.27,684.371 1178.83,684.371 1179.39,684.371 1179.95,684.371 1180.51,684.371 1181.07,684.371 1181.63,684.371 1182.19,684.371 1182.75,684.371 1183.31,684.371 1183.87,684.371 1184.43,684.371 1184.98,684.371 1185.54,684.371 1186.1,684.371 1186.66,684.371 1187.22,684.371 1187.78,684.371 1188.34,684.371 1188.9,684.371 1189.46,684.371 1190.02,684.371 1190.58,684.371 1191.14,684.371 1191.7,684.371 1192.25,684.371 1192.81,684.371 1193.37,684.371 1193.93,684.371 1194.49,684.371 1195.05,684.371 1195.61,684.371 1196.17,684.371 1196.73,684.371 1197.29,684.371 1197.85,684.371 1198.41,684.371 1198.97,684.371 1199.52,684.371 1200.08,684.371 1200.64,684.371 1201.2,684.371 1201.76,684.371 1202.32,684.371 1202.88,684.371 1203.44,684.371 1204,684.371 1204.56,684.371 1205.12,684.371 1205.68,684.371 1206.24,684.371 1206.8,684.371 1207.35,684.371 1207.91,684.371 1208.47,684.371 1209.03,684.371 1209.59,684.371 1210.15,684.371 1210.71,684.371 1211.27,684.371 1211.83,684.371 1212.39,684.371 1212.95,684.371 1213.51,684.371 1214.07,684.371 1214.62,684.371 1215.18,684.371 1215.74,684.371 1216.3,684.371 1216.86,684.371 1217.42,684.371 1217.98,684.371 1218.54,684.371 1219.1,684.371 1219.66,684.371 1220.22,684.371 1220.78,684.371 1221.34,684.371 1221.89,684.371 1222.45,684.371 1223.01,684.371 1223.57,684.371 1224.13,684.371 1224.69,684.371 1225.25,684.371 1225.81,684.371 1226.37,684.371 1226.93,684.371 1227.49,684.371 1228.05,684.371 1228.61,684.371 1229.17,684.371 1229.72,684.371 1230.28,684.371 1230.84,684.371 1231.4,684.371 1231.96,684.371 1232.52,684.371 1233.08,684.371 1233.64,684.371 1234.2,684.371 1234.76,684.371 1235.32,684.371 1235.88,684.371 1236.44,684.371 1236.99,684.371 1237.55,684.371 1238.11,684.371 1238.67,684.371 1239.23,684.371 1239.79,684.371 1240.35,684.371 1240.91,684.371 1241.47,684.371 1242.03,684.371 1242.59,684.371 1243.15,684.371 1243.71,684.371 1244.26,684.371 1244.82,684.371 1245.38,684.371 1245.94,684.371 1246.5,684.371 1247.06,684.371 1247.62,684.371 1248.18,684.371 1248.74,684.371 1249.3,684.371 1249.86,684.371 1250.42,684.371 1250.98,684.371 1251.54,684.371 1252.09,684.371 1252.65,684.371 1253.21,684.371 1253.77,684.371 1254.33,684.371 1254.89,684.371 1255.45,684.371 1256.01,684.371 1256.57,684.371 1257.13,684.371 1257.69,684.371 1258.25,684.371 1258.81,684.371 1259.36,684.371 1259.92,684.371 1260.48,684.371 1261.04,684.371 1261.6,684.371 1262.16,684.371 1262.72,684.371 1263.28,684.371 1263.84,684.371 1264.4,684.371 1264.96,684.371 1265.52,684.371 1266.08,684.371 1266.63,684.371 1267.19,684.371 1267.75,684.371 1268.31,684.371 1268.87,684.371 1269.43,684.371 1269.99,684.371 1270.55,684.371 1271.11,684.371 1271.67,684.371 1272.23,684.371 1272.79,684.371 1273.35,684.371 1273.91,684.371 1274.46,684.371 1275.02,684.371 1275.58,684.371 1276.14,684.371 1276.7,684.371 1277.26,684.371 1277.82,684.371 1278.38,684.371 1278.94,684.371 1279.5,684.371 1280.06,684.371 1280.62,684.371 1281.18,684.371 1281.73,684.371 1282.29,684.371 1282.85,684.371 1283.41,684.371 1283.97,684.371 1284.53,684.371 1285.09,684.371 1285.65,684.371 1286.21,684.371 1286.77,684.371 1287.33,684.371 1287.89,684.371 1288.45,684.371 1289,684.371 1289.56,684.371 1290.12,684.371 1290.68,684.371 1291.24,684.371 1291.8,684.371 1292.36,684.371 1292.92,684.371 1293.48,684.371 1294.04,684.371 1294.6,684.371 1295.16,684.371 1295.72,684.371 1296.28,684.371 1296.83,684.371 1297.39,684.371 1297.95,684.371 1298.51,684.371 1299.07,684.371 1299.63,684.371 1300.19,684.371 1300.75,684.371 1301.31,684.371 1301.87,684.371 1302.43,684.371 1302.99,684.371 1303.55,684.371 1304.1,684.371 1304.66,684.371 1305.22,684.371 1305.78,684.371 1306.34,684.371 1306.9,684.371 1307.46,684.371 1308.02,684.371 1308.58,684.371 1309.14,684.371 1309.7,684.371 1310.26,684.371 1310.82,684.371 1311.38,684.371 1311.93,684.371 1312.49,684.371 1313.05,684.371 1313.61,684.371 1314.17,684.371 1314.73,684.371 1315.29,684.371 1315.85,684.371 1316.41,684.371 1316.97,684.371 1317.53,684.371 1318.09,684.371 1318.65,684.371 1319.2,684.371 1319.76,684.371 1320.32,684.371 1320.88,684.371 1321.44,684.371 1322,684.371 1322.56,684.371 1323.12,684.371 1323.68,684.371 1324.24,684.371 1324.8,684.371 1325.36,684.371 1325.92,684.371 1326.47,684.371 1327.03,684.371 1327.59,684.371 1328.15,684.371 1328.71,684.371 1329.27,684.371 1329.83,684.371 1330.39,684.371 1330.95,684.371 1331.51,684.371 1332.07,684.371 1332.63,684.371 1333.19,684.371 1333.75,684.371 1334.3,684.371 1334.86,684.371 1335.42,684.371 1335.98,684.371 1336.54,684.371 1337.1,684.371 1337.66,684.371 1338.22,684.371 1338.78,684.371 1339.34,684.371 1339.9,684.371 1340.46,684.371 1341.02,684.371 1341.57,684.371 1342.13,684.371 1342.69,684.371 1343.25,684.371 1343.81,684.371 1344.37,684.371 1344.93,684.371 1345.49,684.371 1346.05,684.371 1346.61,684.371 1347.17,684.371 1347.73,684.371 1348.29,684.371 1348.84,684.371 1349.4,684.371 1349.96,684.371 1350.52,684.371 1351.08,684.371 1351.64,684.371 1352.2,684.371 1352.76,684.371 1353.32,684.371 1353.88,684.371 1354.44,684.371 1355,684.371 1355.56,684.371 1356.12,684.371 1356.67,684.371 1357.23,684.371 1357.79,684.371 1358.35,684.371 1358.91,684.371 1359.47,684.371 1360.03,684.371 1360.59,684.371 1361.15,684.371 1361.71,684.371 1362.27,684.371 1362.83,684.371 1363.39,684.371 1363.94,684.371 1364.5,684.371 1365.06,684.371 1365.62,684.371 1366.18,684.371 1366.74,684.371 1367.3,684.371 1367.86,684.371 1368.42,684.371 1368.98,684.371 1369.54,684.371 1370.1,684.371 1370.66,684.371 1371.21,684.371 1371.77,684.371 1372.33,684.371 1372.89,684.371 1373.45,684.371 1374.01,684.371 1374.57,684.371 1375.13,684.371 1375.69,684.371 1376.25,684.371 1376.81,684.371 1377.37,684.371 1377.93,684.371 1378.49,684.371 1379.04,684.371 1379.6,684.371 1380.16,684.371 1380.72,684.371 1381.28,684.371 1381.84,684.371 1382.4,684.371 1382.96,684.371 1383.52,684.371 1384.08,684.371 1384.64,684.371 1385.2,684.371 1385.76,684.371 1386.31,684.371 1386.87,684.371 1387.43,684.371 1387.99,684.371 1388.55,684.371 1389.11,684.371 1389.67,684.371 1390.23,684.371 1390.79,684.371 1391.35,684.371 1391.91,684.371 1392.47,684.371 1393.03,684.371 1393.58,684.371 1394.14,684.371 1394.7,684.371 1395.26,684.371 1395.82,684.371 1396.38,684.371 1396.94,684.371 1397.5,684.371 1398.06,684.371 1398.62,684.371 1399.18,684.371 1399.74,684.371 1400.3,684.371 1400.86,684.371 1401.41,684.371 1401.97,684.371 1402.53,684.371 1403.09,684.371 1403.65,684.371 1404.21,684.371 1404.77,684.371 1405.33,684.371 1405.89,684.371 1406.45,684.371 1407.01,684.371 1407.57,684.371 1408.13,684.371 1408.68,684.371 1409.24,684.371 1409.8,684.371 1410.36,684.371 1410.92,684.371 1411.48,684.371 1412.04,684.371 1412.6,684.371 1413.16,684.371 1413.72,684.371 1414.28,684.371 1414.84,684.371 1415.4,684.371 1415.95,684.371 1416.51,684.371 1417.07,684.371 1417.63,684.371 1418.19,684.371 1418.75,684.371 1419.31,684.371 1419.87,684.371 1420.43,684.371 1420.99,684.371 1421.55,684.371 1422.11,684.371 1422.67,684.371 1423.23,684.371 1423.78,684.371 1424.34,684.371 1424.9,684.371 1425.46,684.371 1426.02,684.371 1426.58,684.371 1427.14,684.371 1427.7,684.371 1428.26,684.371 1428.82,684.371 1429.38,684.371 1429.94,684.371 1430.5,684.371 1431.05,684.371 1431.61,684.371 1432.17,684.371 1432.73,684.371 1433.29,684.371 1433.85,684.371 1434.41,684.371 1434.97,684.371 1435.53,684.371 1436.09,684.371 1436.65,684.371 1437.21,684.371 1437.77,684.371 1438.33,684.371 1438.88,684.371 1439.44,684.371 1440,684.371 1440.56,684.371 1441.12,684.371 1441.68,684.371 1442.24,684.371 1442.8,684.371 1443.36,684.371 1443.92,684.371 1444.48,684.371 1445.04,684.371 1445.6,684.371 1446.15,684.371 1446.71,684.371 1447.27,684.371 1447.83,684.371 1448.39,684.371 1448.95,684.371 1449.51,684.371 1450.07,684.371 1450.63,684.371 1451.19,684.371 1451.75,684.371 1452.31,684.371 1452.87,684.371 1453.42,684.371 1453.98,684.371 1454.54,684.371 1455.1,684.371 1455.66,684.371 1456.22,684.371 1456.78,684.371 1457.34,684.371 1457.9,684.371 1458.46,684.371 1459.02,684.371 1459.58,684.371 1460.14,684.371 1460.7,684.371 1461.25,684.371 1461.81,684.371 1462.37,684.371 1462.93,684.371 1463.49,684.371 1464.05,684.371 1464.61,684.371 1465.17,684.371 1465.73,684.371 1466.29,684.371 1466.85,684.371 1467.41,684.371 1467.97,684.371 1468.52,684.371 1469.08,684.371 1469.64,684.371 1470.2,684.371 1470.76,684.371 1471.32,684.371 1471.88,684.371 1472.44,684.371 1473,684.371 1473.56,684.371 1474.12,684.371 1474.68,684.371 1475.24,684.371 1475.79,684.371 1476.35,684.371 1476.91,684.371 1477.47,684.371 1478.03,684.371 1478.59,684.371 1479.15,684.371 1479.71,684.371 1480.27,684.371 1480.83,684.371 1481.39,684.371 1481.95,684.371 1482.51,684.371 1483.07,684.371 1483.62,684.371 1484.18,684.371 1484.74,684.371 1485.3,684.371 1485.86,684.371 1486.42,684.371 1486.98,684.371 1487.54,684.371 1488.1,684.371 1488.66,684.371 1489.22,684.371 1489.78,684.371 1490.34,684.371 1490.89,684.371 1491.45,684.371 1492.01,684.371 1492.57,684.371 1493.13,684.371 1493.69,684.371 1494.25,684.371 1494.81,684.371 1495.37,684.371 1495.93,684.371 1496.49,684.371 1497.05,684.371 1497.61,684.371 1498.16,684.371 1498.72,684.371 1499.28,684.371 1499.84,684.371 1500.4,684.371 1500.96,684.371 1501.52,684.371 1502.08,684.371 1502.64,684.371 1503.2,684.371 1503.76,684.371 1504.32,684.371 1504.88,684.371 1505.44,684.371 1505.99,684.371 1506.55,684.371 1507.11,684.371 1507.67,684.371 1508.23,684.371 1508.79,684.371 1509.35,684.371 1509.91,684.371 1510.47,684.371 1511.03,684.371 1511.59,684.371 1512.15,684.371 1512.71,684.371 1513.26,684.371 1513.82,684.371 1514.38,684.371 1514.94,684.371 1515.5,684.371 1516.06,684.371 1516.62,684.371 1517.18,684.371 1517.74,684.371 1518.3,684.371 1518.86,684.371 1519.42,684.371 1519.98,684.371 1520.53,684.371 1521.09,684.371 1521.65,684.371 1522.21,684.371 1522.77,684.371 1523.33,684.371 1523.89,684.371 1524.45,684.371 1525.01,684.371 1525.57,684.371 1526.13,684.371 1526.69,684.371 1527.25,684.371 1527.81,684.371 1528.36,684.371 1528.92,684.371 1529.48,684.371 1530.04,684.371 1530.6,684.371 1531.16,684.371 1531.72,684.371 1532.28,684.371 1532.84,684.371 1533.4,684.371 1533.96,684.371 1534.52,684.371 1535.08,684.371 1535.63,684.371 1536.19,684.371 1536.75,684.371 1537.31,684.371 1537.87,684.371 1538.43,684.371 1538.99,684.371 1539.55,684.371 1540.11,684.371 1540.67,684.371 1541.23,684.371 1541.79,684.371 1542.35,684.371 1542.9,684.371 1543.46,684.371 1544.02,684.371 1544.58,684.371 1545.14,684.371 1545.7,684.371 1546.26,684.371 1546.82,684.371 1547.38,684.371 1547.94,684.371 1548.5,684.371 1549.06,684.371 1549.62,684.371 1550.18,684.371 1550.73,684.371 1551.29,684.371 1551.85,684.371 1552.41,684.371 1552.97,684.371 1553.53,684.371 1554.09,684.371 1554.65,684.371 1555.21,684.371 1555.77,684.371 1556.33,684.371 1556.89,684.371 1557.45,684.371 1558,684.371 1558.56,684.371 1559.12,684.371 1559.68,684.371 1560.24,684.371 1560.8,684.371 1561.36,684.371 1561.92,684.371 1562.48,684.371 1563.04,684.371 1563.6,684.371 1564.16,684.371 1564.72,684.371 1565.28,684.371 1565.83,684.371 1566.39,684.371 1566.95,684.371 1567.51,684.371 1568.07,684.371 1568.63,684.371 1569.19,684.371 1569.75,684.371 1570.31,684.371 1570.87,684.371 1571.43,684.371 1571.99,684.371 1572.55,684.371 1573.1,684.371 1573.66,684.371 1574.22,684.371 1574.78,684.371 1575.34,684.371 1575.9,684.371 1576.46,684.371 1577.02,684.371 1577.58,684.371 1578.14,684.371 1578.7,684.371 1579.26,684.371 1579.82,684.371 1580.37,684.371 1580.93,684.371 1581.49,684.371 1582.05,684.371 1582.61,684.371 1583.17,684.371 1583.73,684.371 1584.29,684.371 1584.85,684.371 1585.41,684.371 1585.97,684.371 1586.53,684.371 1587.09,684.371 1587.65,684.371 1588.2,684.371 1588.76,684.371 1589.32,684.371 1589.88,684.371 1590.44,684.371 1591,684.371 1591.56,684.371 1592.12,684.371 1592.68,684.371 1593.24,684.371 1593.8,684.371 1594.36,684.371 1594.92,684.371 1595.47,684.371 1596.03,684.371 1596.59,684.371 1597.15,684.371 1597.71,684.371 1598.27,684.371 1598.83,684.371 1599.39,684.371 1599.95,684.371 1600.51,684.371 1601.07,684.371 1601.63,684.371 1602.19,684.371 1602.74,684.371 1603.3,684.371 1603.86,684.371 1604.42,684.371 1604.98,684.371 1605.54,684.371 1606.1,684.371 1606.66,684.371 1607.22,684.371 1607.78,684.371 1608.34,684.371 1608.9,684.371 1609.46,684.371 1610.02,684.371 1610.57,684.371 1611.13,684.371 1611.69,684.371 1612.25,684.371 1612.81,684.371 1613.37,684.371 1613.93,684.371 1614.49,684.371 1615.05,684.371 1615.61,684.371 1616.17,684.371 1616.73,684.371 1617.29,684.371 1617.84,684.371 1618.4,684.371 1618.96,684.371 1619.52,684.371 1620.08,684.371 1620.64,684.371 1621.2,684.371 1621.76,684.371 1622.32,684.371 1622.88,684.371 1623.44,684.371 1624,684.371 1624.56,684.371 1625.11,684.371 1625.67,684.371 1626.23,684.371 1626.79,684.371 1627.35,684.371 1627.91,684.371 1628.47,684.371 1629.03,684.371 1629.59,684.371 1630.15,684.371 1630.71,684.371 1631.27,684.371 1631.83,684.371 1632.39,684.371 1632.94,684.371 1633.5,684.371 1634.06,684.371 1634.62,684.371 1635.18,684.371 1635.74,684.371 1636.3,684.371 1636.86,684.371 1637.42,684.371 1637.98,684.371 1638.54,684.371 1639.1,684.371 1639.66,684.371 1640.21,684.371 1640.77,684.371 1641.33,684.371 1641.89,684.371 1642.45,684.371 1643.01,684.371 1643.57,684.371 1644.13,684.371 1644.69,684.371 1645.25,684.371 1645.81,684.371 1646.37,684.371 1646.93,684.371 1647.48,684.371 1648.04,684.371 1648.6,684.371 1649.16,684.371 1649.72,684.371 1650.28,684.371 1650.84,684.371 1651.4,684.371 1651.96,684.371 1652.52,684.371 1653.08,684.371 1653.64,684.371 1654.2,684.371 1654.76,684.371 1655.31,684.371 1655.87,684.371 1656.43,684.371 1656.99,684.371 1657.55,684.371 1658.11,684.371 1658.67,684.371 1659.23,684.371 1659.79,684.371 1660.35,684.371 1660.91,684.371 1661.47,684.371 1662.03,684.371 1662.58,684.371 1663.14,684.371 1663.7,684.371 1664.26,684.371 1664.82,684.371 1665.38,684.371 1665.94,684.371 1666.5,684.371 1667.06,684.371 1667.62,684.371 1668.18,684.371 1668.74,684.371 1669.3,684.371 1669.85,684.371 1670.41,684.371 1670.97,684.371 1671.53,684.371 1672.09,684.371 1672.65,684.371 1673.21,684.371 1673.77,684.371 1674.33,684.371 1674.89,684.371 1675.45,684.371 1676.01,684.371 1676.57,684.371 1677.13,684.371 1677.68,684.371 1678.24,684.371 1678.8,684.371 1679.36,684.371 1679.92,684.371 1680.48,684.371 1681.04,684.371 1681.6,684.371 1682.16,684.371 1682.72,684.371 1683.28,684.371 1683.84,684.371 1684.4,684.371 1684.95,684.371 1685.51,684.371 1686.07,684.371 1686.63,684.371 1687.19,684.371 1687.75,684.371 1688.31,684.371 1688.87,684.371 1689.43,684.371 1689.99,684.371 1690.55,684.371 1691.11,684.371 1691.67,684.371 1692.23,684.371 1692.78,684.371 1693.34,684.371 1693.9,684.371 1694.46,684.371 1695.02,684.371 1695.58,684.371 1696.14,684.371 1696.7,684.371 1697.26,684.371 1697.82,684.371 1698.38,684.371 1698.94,684.371 1699.5,684.371 1700.05,684.371 1700.61,684.371 1701.17,684.371 1701.73,684.371 1702.29,684.371 1702.85,684.371 1703.41,684.371 1703.97,684.371 1704.53,684.371 1705.09,684.371 1705.65,684.371 1706.21,684.371 1706.77,684.371 1707.32,684.371 1707.88,684.371 1708.44,684.371 1709,684.371 1709.56,684.371 1710.12,684.371 1710.68,684.371 1711.24,684.371 1711.8,684.371 1712.36,684.371 1712.92,684.371 1713.48,684.371 1714.04,684.371 1714.6,684.371 1715.15,684.371 1715.71,684.371 1716.27,684.371 1716.83,684.371 1717.39,684.371 1717.95,684.371 1718.51,684.371 1719.07,684.371 1719.63,684.371 1720.19,684.371 1720.75,684.371 1721.31,684.371 1721.87,684.371 1722.42,684.371 1722.98,684.371 1723.54,684.371 1724.1,684.371 1724.66,684.371 1725.22,684.371 1725.78,684.371 1726.34,684.371 1726.9,684.371 1727.46,684.371 1728.02,684.371 1728.58,684.371 1729.14,684.371 1729.69,684.371 1730.25,684.371 1730.81,684.371 1731.37,684.371 1731.93,684.371 1732.49,684.371 1733.05,684.371 1733.61,684.371 1734.17,684.371 1734.73,684.371 1735.29,684.371 1735.85,684.371 1736.41,684.371 1736.97,684.371 1737.52,684.371 1738.08,684.371 1738.64,684.371 1739.2,684.371 1739.76,684.371 1740.32,684.371 1740.88,684.371 1741.44,684.371 1742,684.371 1742.56,684.371 1743.12,684.371 1743.68,684.371 1744.24,684.371 1744.79,684.371 1745.35,684.371 1745.91,684.371 1746.47,684.371 1747.03,684.371 1747.59,684.371 1748.15,684.371 1748.71,684.371 1749.27,684.371 1749.83,684.371 1750.39,684.371 1750.95,684.371 1751.51,684.371 1752.06,684.371 1752.62,684.371 1753.18,684.371 1753.74,684.371 1754.3,684.371 1754.86,684.371 1755.42,684.371 1755.98,684.371 1756.54,684.371 1757.1,684.371 1757.66,684.371 1758.22,684.371 1758.78,684.371 1759.34,684.371 1759.89,684.371 1760.45,684.371 1761.01,684.371 1761.57,684.371 1762.13,684.371 1762.69,684.371 1763.25,684.371 1763.81,684.371 1764.37,684.371 1764.93,684.371 1765.49,684.371 1766.05,684.371 1766.61,684.371 1767.16,684.371 1767.72,684.371 1768.28,684.371 1768.84,684.371 1769.4,684.371 1769.96,684.371 1770.52,684.371 1771.08,684.371 1771.64,684.371 1772.2,684.371 1772.76,684.371 1773.32,684.371 1773.88,684.371 1774.43,684.371 1774.99,684.371 1775.55,684.371 1776.11,684.371 1776.67,684.371 1777.23,684.371 1777.79,684.371 1778.35,684.371 1778.91,684.371 1779.47,684.371 1780.03,684.371 1780.59,684.371 1781.15,684.371 1781.71,684.371 1782.26,684.371 1782.82,684.371 1783.38,684.371 1783.94,684.371 1784.5,684.371 1785.06,684.371 1785.62,684.371 1786.18,684.371 1786.74,684.371 1787.3,684.371 1787.86,684.371 1788.42,684.371 1788.98,684.371 1789.53,684.371 1790.09,684.371 1790.65,684.371 1791.21,684.371 1791.77,684.371 1792.33,684.371 1792.89,684.371 1793.45,684.371 1794.01,684.371 1794.57,684.371 1795.13,684.371 1795.69,684.371 1796.25,684.371 1796.8,684.371 1797.36,684.371 1797.92,684.371 1798.48,684.371 1799.04,684.371 1799.6,684.371 1800.16,684.371 1800.72,684.371 1801.28,684.371 1801.84,684.371 1802.4,684.371 1802.96,684.371 1803.52,684.371 1804.08,684.371 1804.63,684.371 1805.19,684.371 1805.75,684.371 1806.31,684.371 1806.87,684.371 1807.43,684.371 1807.99,684.371 1808.55,684.371 1809.11,684.371 1809.67,684.371 1810.23,684.371 1810.79,684.371 1811.35,684.371 1811.9,684.371 1812.46,684.371 1813.02,684.371 1813.58,684.371 1814.14,684.371 1814.7,684.371 1815.26,684.371 1815.82,684.371 1816.38,684.371 1816.94,684.371 1817.5,684.371 1818.06,684.371 1818.62,684.371 1819.18,684.371 1819.73,684.371 1820.29,684.371 1820.85,684.371 1821.41,684.371 1821.97,684.371 1822.53,684.371 1823.09,684.371 1823.65,684.371 1824.21,684.371 1824.77,684.371 1825.33,684.371 1825.89,684.371 1826.45,684.371 1827,684.371 1827.56,684.371 1828.12,684.371 1828.68,684.371 1829.24,684.371 1829.8,684.371 1830.36,684.371 1830.92,684.371 1831.48,684.371 1832.04,684.371 1832.6,684.371 1833.16,684.371 1833.72,684.371 1834.27,684.371 1834.83,684.371 1835.39,684.371 1835.95,684.371 1836.51,684.371 1837.07,684.371 1837.63,684.371 1838.19,684.371 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.033691570751967 ± 0.026150142222448186\nProjected Energy: -4.019043838010459 ± (0.00322497622803386, 0.0031326951591221786)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.20569</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.3283e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">3.224e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.61e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.517e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.283e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3436e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133655\n -0.7590191922770888\n  0.13584182219621788\n  0.15789998694608443\n  0.8767114411781307\n  1.5305929970973278\n  1.583573261186741\n  3.072870330325867\n  3.125672653951839\n  4.862107221562165\n  6.260694850380597\n  6.40267121118311\n  9.093371706203959","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087834\n 0.03307039977204201\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.DVecAsTable","page":"I/O","title":"Rimu.RimuIO.DVecAsTable","text":"struct DVecAsTable\n\nWrapper over the storage of a DVec that allows us to treat a DVec as a table from Tables.jl. Constructed with Tables.table(::DVec).\n\n\n\n\n\n","category":"type"},{"location":"rimuio.html#Rimu.RimuIO.PDVecAsTable","page":"I/O","title":"Rimu.RimuIO.PDVecAsTable","text":"struct PDVecAsTable\n\nWrapper over the storage of a PDVec that allows us to treat a PDVec as a table from Tables.jl. Constructed with Tables.table(::PDVec).\n\n\n\n\n\n","category":"type"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.load_state-Union{Tuple{D}, Tuple{Type{D}, Any}} where D","page":"I/O","title":"Rimu.RimuIO.load_state","text":"load_state(filename; kwargs...)\nload_state(PDVec, filename; kwargs...)\nload_state(DVec, filename; kwargs...)\n\nLoad the state saved in the Arrow file filename. kwargs are passed to the constructor of PDVec. Any metadata stored in the file will be parsed, evaluated and returned alongside the vector in a NamedTuple.\n\nSee also save_state.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_state-Tuple","page":"I/O","title":"Rimu.RimuIO.save_state","text":"save_state(filename, vector; io, kwargs...)\n\nSave PDVec or DVec vector to an arrow file filename.\n\nio determines the output stream to write progress to. Defaults to stderr when MPI is enabled and devnull otherwise.\n\nAll other kwargs are saved as strings to the arrow file and will be parsed back when the state is loaded.\n\nSee also load_state.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
