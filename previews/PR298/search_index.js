var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2105235008532306 ± 0.0012983122588811138\n   G2(1) = 0.9171144985066533 ± 0.0005688111162370098\n   G2(2) = 0.9828596253219883 ± 0.000497759217371036\n   G2(3) = 0.9895282514894865 ± 0.0006952761010591318\n   G2(4) = 0.9828596253219883 ± 0.000497759217371036\n   G2(5) = 0.9171144985066533 ± 0.0005688111162370098\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9738518479072256 ± 0.12645413311192957\n   Replica 2: -4.010528021997266 ± 0.13606113023942606\n   Replica 3: -4.06213428074931 ± 0.15863025209986167\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip060\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip060)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip061\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip060)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip062\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.06 2211.02,1003.06 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.286 2211.02,745.286 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.509 2211.02,487.509 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.733 2211.02,229.733 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.06 423.181,1003.06 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.286 423.181,745.286 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.509 423.181,487.509 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.733 423.181,229.733 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M290.043 1016.41 L306.363 1016.41 L306.363 1020.34 L284.418 1020.34 L284.418 1016.41 Q287.08 1013.65 291.664 1009.02 Q296.27 1004.37 297.451 1003.03 Q299.696 1000.51 300.576 998.769 Q301.478 997.01 301.478 995.32 Q301.478 992.565 299.534 990.829 Q297.613 989.093 294.511 989.093 Q292.312 989.093 289.858 989.857 Q287.427 990.621 284.65 992.172 L284.65 987.45 Q287.474 986.315 289.927 985.737 Q292.381 985.158 294.418 985.158 Q299.789 985.158 302.983 987.843 Q306.177 990.528 306.177 995.019 Q306.177 997.149 305.367 999.07 Q304.58 1000.97 302.474 1003.56 Q301.895 1004.23 298.793 1007.45 Q295.691 1010.64 290.043 1016.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M316.224 985.783 L334.58 985.783 L334.58 989.718 L320.506 989.718 L320.506 998.19 Q321.524 997.843 322.543 997.681 Q323.562 997.496 324.58 997.496 Q330.367 997.496 333.747 1000.67 Q337.126 1003.84 337.126 1009.25 Q337.126 1014.83 333.654 1017.94 Q330.182 1021.01 323.862 1021.01 Q321.687 1021.01 319.418 1020.64 Q317.173 1020.27 314.765 1019.53 L314.765 1014.83 Q316.849 1015.97 319.071 1016.52 Q321.293 1017.08 323.77 1017.08 Q327.774 1017.08 330.112 1014.97 Q332.45 1012.87 332.45 1009.25 Q332.45 1005.64 330.112 1003.54 Q327.774 1001.43 323.77 1001.43 Q321.895 1001.43 320.02 1001.85 Q318.168 1002.26 316.224 1003.14 L316.224 985.783 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M356.339 988.862 Q352.728 988.862 350.899 992.426 Q349.094 995.968 349.094 1003.1 Q349.094 1010.2 350.899 1013.77 Q352.728 1017.31 356.339 1017.31 Q359.973 1017.31 361.779 1013.77 Q363.608 1010.2 363.608 1003.1 Q363.608 995.968 361.779 992.426 Q359.973 988.862 356.339 988.862 M356.339 985.158 Q362.149 985.158 365.205 989.764 Q368.284 994.348 368.284 1003.1 Q368.284 1011.82 365.205 1016.43 Q362.149 1021.01 356.339 1021.01 Q350.529 1021.01 347.45 1016.43 Q344.395 1011.82 344.395 1003.1 Q344.395 994.348 347.45 989.764 Q350.529 985.158 356.339 985.158 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M286.062 728.006 L304.418 728.006 L304.418 731.941 L290.344 731.941 L290.344 740.413 Q291.363 740.066 292.381 739.904 Q293.4 739.719 294.418 739.719 Q300.205 739.719 303.585 742.89 Q306.964 746.062 306.964 751.478 Q306.964 757.057 303.492 760.159 Q300.02 763.237 293.701 763.237 Q291.525 763.237 289.256 762.867 Q287.011 762.497 284.603 761.756 L284.603 757.057 Q286.687 758.191 288.909 758.747 Q291.131 759.302 293.608 759.302 Q297.613 759.302 299.951 757.196 Q302.288 755.089 302.288 751.478 Q302.288 747.867 299.951 745.761 Q297.613 743.654 293.608 743.654 Q291.733 743.654 289.858 744.071 Q288.006 744.487 286.062 745.367 L286.062 728.006 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M326.177 731.085 Q322.566 731.085 320.737 734.65 Q318.932 738.191 318.932 745.321 Q318.932 752.427 320.737 755.992 Q322.566 759.534 326.177 759.534 Q329.811 759.534 331.617 755.992 Q333.446 752.427 333.446 745.321 Q333.446 738.191 331.617 734.65 Q329.811 731.085 326.177 731.085 M326.177 727.381 Q331.987 727.381 335.043 731.988 Q338.122 736.571 338.122 745.321 Q338.122 754.048 335.043 758.654 Q331.987 763.237 326.177 763.237 Q320.367 763.237 317.288 758.654 Q314.233 754.048 314.233 745.321 Q314.233 736.571 317.288 731.988 Q320.367 727.381 326.177 727.381 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M356.339 731.085 Q352.728 731.085 350.899 734.65 Q349.094 738.191 349.094 745.321 Q349.094 752.427 350.899 755.992 Q352.728 759.534 356.339 759.534 Q359.973 759.534 361.779 755.992 Q363.608 752.427 363.608 745.321 Q363.608 738.191 361.779 734.65 Q359.973 731.085 356.339 731.085 M356.339 727.381 Q362.149 727.381 365.205 731.988 Q368.284 736.571 368.284 745.321 Q368.284 754.048 365.205 758.654 Q362.149 763.237 356.339 763.237 Q350.529 763.237 347.45 758.654 Q344.395 754.048 344.395 745.321 Q344.395 736.571 347.45 731.988 Q350.529 727.381 356.339 727.381 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M284.835 470.229 L307.057 470.229 L307.057 472.22 L294.511 504.789 L289.627 504.789 L301.432 474.164 L284.835 474.164 L284.835 470.229 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M316.224 470.229 L334.58 470.229 L334.58 474.164 L320.506 474.164 L320.506 482.637 Q321.524 482.289 322.543 482.127 Q323.562 481.942 324.58 481.942 Q330.367 481.942 333.747 485.114 Q337.126 488.285 337.126 493.701 Q337.126 499.28 333.654 502.382 Q330.182 505.461 323.862 505.461 Q321.687 505.461 319.418 505.09 Q317.173 504.72 314.765 503.979 L314.765 499.28 Q316.849 500.414 319.071 500.97 Q321.293 501.525 323.77 501.525 Q327.774 501.525 330.112 499.419 Q332.45 497.313 332.45 493.701 Q332.45 490.09 330.112 487.984 Q327.774 485.877 323.77 485.877 Q321.895 485.877 320.02 486.294 Q318.168 486.711 316.224 487.59 L316.224 470.229 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M356.339 473.308 Q352.728 473.308 350.899 476.873 Q349.094 480.414 349.094 487.544 Q349.094 494.65 350.899 498.215 Q352.728 501.757 356.339 501.757 Q359.973 501.757 361.779 498.215 Q363.608 494.65 363.608 487.544 Q363.608 480.414 361.779 476.873 Q359.973 473.308 356.339 473.308 M356.339 469.604 Q362.149 469.604 365.205 474.211 Q368.284 478.794 368.284 487.544 Q368.284 496.271 365.205 500.877 Q362.149 505.461 356.339 505.461 Q350.529 505.461 347.45 500.877 Q344.395 496.271 344.395 487.544 Q344.395 478.794 347.45 474.211 Q350.529 469.604 356.339 469.604 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M256.664 243.077 L264.303 243.077 L264.303 216.712 L255.992 218.378 L255.992 214.119 L264.256 212.453 L268.932 212.453 L268.932 243.077 L276.571 243.077 L276.571 247.013 L256.664 247.013 L256.664 243.077 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M296.015 215.531 Q292.404 215.531 290.576 219.096 Q288.77 222.638 288.77 229.767 Q288.77 236.874 290.576 240.439 Q292.404 243.98 296.015 243.98 Q299.65 243.98 301.455 240.439 Q303.284 236.874 303.284 229.767 Q303.284 222.638 301.455 219.096 Q299.65 215.531 296.015 215.531 M296.015 211.828 Q301.826 211.828 304.881 216.434 Q307.96 221.017 307.96 229.767 Q307.96 238.494 304.881 243.101 Q301.826 247.684 296.015 247.684 Q290.205 247.684 287.127 243.101 Q284.071 238.494 284.071 229.767 Q284.071 221.017 287.127 216.434 Q290.205 211.828 296.015 211.828 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M326.177 215.531 Q322.566 215.531 320.737 219.096 Q318.932 222.638 318.932 229.767 Q318.932 236.874 320.737 240.439 Q322.566 243.98 326.177 243.98 Q329.811 243.98 331.617 240.439 Q333.446 236.874 333.446 229.767 Q333.446 222.638 331.617 219.096 Q329.811 215.531 326.177 215.531 M326.177 211.828 Q331.987 211.828 335.043 216.434 Q338.122 221.017 338.122 229.767 Q338.122 238.494 335.043 243.101 Q331.987 247.684 326.177 247.684 Q320.367 247.684 317.288 243.101 Q314.233 238.494 314.233 229.767 Q314.233 221.017 317.288 216.434 Q320.367 211.828 326.177 211.828 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M356.339 215.531 Q352.728 215.531 350.899 219.096 Q349.094 222.638 349.094 229.767 Q349.094 236.874 350.899 240.439 Q352.728 243.98 356.339 243.98 Q359.973 243.98 361.779 240.439 Q363.608 236.874 363.608 229.767 Q363.608 222.638 361.779 219.096 Q359.973 215.531 356.339 215.531 M356.339 211.828 Q362.149 211.828 365.205 216.434 Q368.284 221.017 368.284 229.767 Q368.284 238.494 365.205 243.101 Q362.149 247.684 356.339 247.684 Q350.529 247.684 347.45 243.101 Q344.395 238.494 344.395 229.767 Q344.395 221.017 347.45 216.434 Q350.529 211.828 356.339 211.828 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip062)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.733 4017.76,229.733 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1248.78 458.259,1248.48 458.828,1246.03 459.396,1244.59 459.964,1244.17 460.533,1243.69 461.101,1241.08 461.669,1240.51 462.238,1239.85 462.806,1239.11 463.375,1236.18 463.943,1235.27 464.511,1234.29 465.08,1233.19 465.648,1231.95 466.216,1230.58 466.785,1229.13 467.353,1226.5 467.921,1224.81 468.49,1222.96 469.058,1219.93 469.626,1217.81 470.195,1215.55 470.763,1212.1 471.331,1209.59 471.9,1205.88 472.468,1202.01 473.036,1196.93 473.605,1193.88 474.173,1190.53 474.741,1187.04 475.31,1182.28 475.878,1178.39 476.446,1174.35 477.015,1169.13 477.583,1163.66 478.152,1159.05 478.72,1154.16 479.288,1148.1 479.857,1140.77 480.425,1135.34 480.993,1128.64 481.562,1122.67 482.13,1116.42 482.698,1109.05 483.267,1101.53 483.835,1093.85 484.403,1087.06 484.972,1079 485.54,1071.76 486.108,1064.24 486.677,1056.72 487.245,1044.9 487.813,1034.97 488.382,1026.95 488.95,1016.72 489.518,1006.32 490.087,995.88 490.655,986.356 491.224,976.694 491.792,963.863 492.36,954.024 492.929,943.076 493.497,932.029 494.065,919.899 494.634,910.004 495.202,901.112 495.77,888.925 496.339,877.818 496.907,865.568 497.475,856.337 498.044,844.119 498.612,834.007 499.18,825.036 499.749,813.82 500.317,804.736 500.885,794.681 501.454,785.695 502.022,775.598 502.59,766.591 503.159,754.364 503.727,745.337 504.295,735.284 504.864,723.228 505.432,714.411 506.001,702.464 506.569,692.864 507.137,683.35 507.706,671.985 508.274,660.879 508.842,649.889 509.411,641.264 509.979,632.694 510.547,623.013 511.116,614.618 511.684,604.178 512.252,597.08 512.821,588.007 513.389,580.327 513.957,573.651 514.526,561.825 515.094,554.348 515.662,546.916 516.231,539.663 516.799,533.578 517.367,525.367 517.936,519.437 518.504,513.841 519.072,503.986 519.641,495.368 520.209,489.088 520.778,482.869 521.346,476.807 521.914,468.913 522.483,464.289 523.051,456.508 523.619,452.107 524.188,444.633 524.756,439.737 525.324,433.723 525.893,426.926 526.461,423.219 527.029,418.628 527.598,414.043 528.166,410.6 528.734,407.178 529.303,403.885 529.871,398.333 530.439,392.911 531.008,390.874 531.576,386.55 532.144,384.518 532.713,376.169 533.281,372.374 533.85,367.883 534.418,363.287 534.986,358.891 535.555,357.625 536.123,354.297 536.691,351.081 537.26,349.988 537.828,346.838 538.396,344.766 538.965,340.531 539.533,333.472 540.101,329.638 540.67,326.981 541.238,325.41 541.806,324.114 542.375,322.791 542.943,321.291 543.511,318.612 544.08,317.077 544.648,315.67 545.216,314.409 545.785,312.678 546.353,312.3 546.921,309.802 547.49,308.38 548.058,305.165 548.627,303.132 549.195,301.036 549.763,298.203 550.332,297.331 550.9,294.367 551.468,294.479 552.037,293.721 552.605,290.895 553.173,291.057 553.742,289.161 554.31,287.43 554.878,288.617 555.447,287.659 556.015,286.66 556.583,283.809 557.152,282.016 557.72,281.497 558.288,281.778 558.857,279.866 559.425,277.141 559.993,272.579 560.562,272.165 561.13,271.922 561.698,270.585 562.267,270.252 562.835,269.738 563.404,269.341 563.972,267.922 564.54,267.6 565.109,267.121 565.677,265.549 566.245,266.127 566.814,263.859 567.382,263.694 567.95,264.406 568.519,264.057 569.087,261.789 569.655,260.547 570.224,259.65 570.792,256.405 571.36,255.454 571.929,255.626 572.497,253.598 573.065,253.758 573.634,253.804 574.202,254.044 574.77,255.245 575.339,256.109 575.907,251.94 576.476,250.888 577.044,252.299 577.612,249.216 578.181,250.567 578.749,250.643 579.317,252.891 579.886,253.745 580.454,253.587 581.022,254.342 581.591,255.164 582.159,253.928 582.727,253.575 583.296,252.172 583.864,251.125 584.432,250.913 585.001,252.886 585.569,252.738 586.137,253.543 586.706,252.148 587.274,250.723 587.842,251.377 588.411,251.144 588.979,251.868 589.547,252.461 590.116,252.95 590.684,249.752 591.253,250.301 591.821,248.902 592.389,248.64 592.958,247.399 593.526,247.105 594.094,246.009 594.663,246.08 595.231,243.891 595.799,244.831 596.368,244.823 596.936,245.617 597.504,244.521 598.073,243.461 598.641,244.579 599.209,246.582 599.778,245.386 600.346,245.224 600.914,244.932 601.483,245.613 602.051,244.28 602.619,243.991 603.188,242.75 603.756,240.61 604.325,240.628 604.893,238.68 605.461,239.95 606.03,239.867 606.598,240.807 607.166,240.625 607.735,241.446 608.303,241.272 608.871,241.421 609.44,241.48 610.008,238.481 610.576,237.186 611.145,235.485 611.713,235.863 612.281,236.087 612.85,236.205 613.418,236.45 613.986,235.703 614.555,234.976 615.123,236.144 615.691,234.158 616.26,235.544 616.828,232.795 617.396,233.289 617.965,234.881 618.533,236.086 619.102,236.41 619.67,235.569 620.238,235.653 620.807,234.774 621.375,235.321 621.943,235.636 622.512,233.955 623.08,233.253 623.648,233.506 624.217,234.794 624.785,234.033 625.353,238.774 625.922,238.759 626.49,239.783 627.058,239.77 627.627,240.661 628.195,241.514 628.763,241.357 629.332,241.114 629.9,240.101 630.468,240.04 631.037,239.927 631.605,240.789 632.173,240.65 632.742,239.969 633.31,240.789 633.879,237.334 634.447,237.284 635.015,237.131 635.584,236.031 636.152,236.864 636.72,233.734 637.289,234.002 637.857,233.105 638.425,233.31 638.994,233.746 639.562,234.956 640.13,232.867 640.699,234.113 641.267,235.283 641.835,234.366 642.404,232.571 642.972,233.949 643.54,234.194 644.109,234.287 644.677,234.422 645.245,235.571 645.814,234.415 646.382,234.539 646.951,235.464 647.519,236.484 648.087,235.221 648.656,235.376 649.224,238.406 649.792,237.11 650.361,235.812 650.929,233.743 651.497,235.821 652.066,236.745 652.634,237.477 653.202,233.308 653.771,235.352 654.339,234.411 654.907,234.398 655.476,234.594 656.044,233.565 656.612,233.739 657.181,233.87 657.749,235.922 658.317,236.801 658.886,238.629 659.454,237.433 660.022,235.997 660.591,235.047 661.159,233.072 661.728,234.015 662.296,235.113 662.864,234.141 663.433,235.311 664.001,235.112 664.569,237.151 665.138,235.808 665.706,235.714 666.274,235.542 666.843,234.649 667.411,234.615 667.979,235.542 668.548,234.417 669.116,234.116 669.684,233.993 670.253,233.983 670.821,233.952 671.389,234.004 671.958,234.988 672.526,233.68 673.094,230.517 673.663,230.3 674.231,230.348 674.799,230.587 675.368,230.882 675.936,230.34 676.505,229.425 677.073,231.599 677.641,230.578 678.21,229.658 678.778,228.627 679.346,229.914 679.915,230.25 680.483,231.527 681.051,231.379 681.62,231.345 682.188,230.248 682.756,230.336 683.325,229.334 683.893,228.361 684.461,228.817 685.03,229.229 685.598,228.384 686.166,228.755 686.735,229.174 687.303,227.299 687.871,227.717 688.44,227.943 689.008,227.581 689.577,227.883 690.145,230.073 690.713,228.153 691.282,227.485 691.85,226.955 692.418,229.647 692.987,229.067 693.555,230.701 694.123,229.768 694.692,229.296 695.26,229.656 695.828,229.03 696.397,227.519 696.965,228.065 697.533,229.496 698.102,228.875 698.67,227.345 699.238,226.795 699.807,227.39 700.375,227.97 700.943,230.336 701.512,229.699 702.08,229.984 702.648,230.228 703.217,229.612 703.785,229.912 704.354,231.326 704.922,232.56 705.49,232.531 706.059,232.657 706.627,233.898 707.195,234.17 707.764,235.17 708.332,236.1 708.9,237.964 709.469,236.851 710.037,237.599 710.605,235.212 711.174,236.198 711.742,235.765 712.31,236.686 712.879,237.437 713.447,236.982 714.015,237.816 714.584,236.523 715.152,238.231 715.72,236.837 716.289,235.643 716.857,235.394 717.425,236.183 717.994,234.948 718.562,233.532 719.131,232.498 719.699,233.465 720.267,229.183 720.836,228.586 721.404,226.79 721.972,227.003 722.541,223.657 723.109,224.359 723.677,223.819 724.246,224.593 724.814,227.215 725.382,228.728 725.951,228.013 726.519,230.361 727.087,231.649 727.656,230.947 728.224,232.029 728.792,234.201 729.361,233.887 729.929,234.909 730.497,236.77 731.066,236.48 731.634,236.357 732.203,234.073 732.771,232.727 733.339,230.889 733.908,230.003 734.476,231.39 735.044,232.675 735.613,233.946 736.181,233.938 736.749,229.016 737.318,230.26 737.886,229.676 738.454,231.075 739.023,229.234 739.591,230.478 740.159,228.474 740.728,231.054 741.296,230.154 741.864,231.518 742.433,231.614 743.001,231.772 743.569,230.762 744.138,231.084 744.706,231.193 745.274,233.104 745.843,233.138 746.411,234.175 746.98,236.237 747.548,232.979 748.116,231.845 748.685,232.044 749.253,231.103 749.821,231.151 750.39,231.35 750.958,230.572 751.526,229.742 752.095,231.981 752.663,229.735 753.231,230.162 753.8,230.364 754.368,230.663 754.936,228.921 755.505,228.257 756.073,228.799 756.641,230.137 757.21,231.514 757.778,229.615 758.346,228.808 758.915,228.916 759.483,226.221 760.052,225.884 760.62,225.546 761.188,223.781 761.757,224.58 762.325,225.395 762.893,227.035 763.462,228.695 764.03,230.084 764.598,231.332 765.167,231.458 765.735,230.702 766.303,231.994 766.872,233.007 767.44,234.041 768.008,234.868 768.577,235.724 769.145,237.56 769.713,238.178 770.282,235.804 770.85,235.659 771.418,234.236 771.987,233.298 772.555,235.048 773.123,232.902 773.692,233.157 774.26,234.181 774.829,234.934 775.397,236.861 775.965,236.576 776.534,233.287 777.102,235.033 777.67,234.79 778.239,236.74 778.807,237.404 779.375,235.931 779.944,235.685 780.512,236.392 781.08,235.165 781.649,234.893 782.217,233.489 782.785,235.225 783.354,233.898 783.922,232.881 784.49,232.94 785.059,231.683 785.627,232.595 786.195,233.37 786.764,234.354 787.332,233.878 787.9,234.548 788.469,233.105 789.037,232.888 789.606,232.758 790.174,233.546 790.742,233.268 791.311,233.105 791.879,234.018 792.447,234.774 793.016,233.448 793.584,232.194 794.152,232.88 794.721,232.755 795.289,234.64 795.857,234.249 796.426,233.872 796.994,232.496 797.562,233.342 798.131,230.827 798.699,229.813 799.267,228.918 799.836,230.051 800.404,233.143 800.972,232.025 801.541,233.086 802.109,232.757 802.678,230.4 803.246,229.132 803.814,225.902 804.383,224.96 804.951,225.277 805.519,225.311 806.088,225.572 806.656,225.673 807.224,226.022 807.793,227.232 808.361,226.322 808.929,226.764 809.498,229.226 810.066,231.487 810.634,232.391 811.203,234.453 811.771,235.324 812.339,235.224 812.908,232.693 813.476,233.589 814.044,234.597 814.613,233.258 815.181,233.79 815.749,233.58 816.318,232.467 816.886,230.237 817.455,230.074 818.023,231.205 818.591,232.998 819.16,231.599 819.728,228.522 820.296,226.563 820.865,225.912 821.433,225.137 822.001,224.534 822.57,224.814 823.138,223.03 823.706,225.568 824.275,222.94 824.843,224.382 825.411,224.927 825.98,225.181 826.548,224.533 827.116,226.152 827.685,225.762 828.253,228.38 828.821,227.762 829.39,227.872 829.958,227.324 830.526,229.532 831.095,228.495 831.663,229.79 832.232,228.816 832.8,230.245 833.368,231.365 833.937,229.172 834.505,229.482 835.073,229.725 835.642,230.934 836.21,232.14 836.778,228.718 837.347,228.906 837.915,229.224 838.483,230.382 839.052,231.591 839.62,228.654 840.188,229.899 840.757,231.188 841.325,231.328 841.893,230.34 842.462,232.435 843.03,230.357 843.598,233.715 844.167,233.654 844.735,234.682 845.304,232.379 845.872,231.299 846.44,233.276 847.009,235.208 847.577,235.798 848.145,236.452 848.714,235.036 849.282,235.761 849.85,232.352 850.419,231.102 850.987,232.278 851.555,232.325 852.124,231.341 852.692,232.363 853.26,231.062 853.829,229.918 854.397,230.924 854.965,230.932 855.534,231.839 856.102,230.82 856.67,231.876 857.239,230.384 857.807,230.287 858.375,230.188 858.944,231.149 859.512,229.14 860.081,230.038 860.649,228.976 861.217,232.95 861.786,234.703 862.354,231.309 862.922,228.174 863.491,226.35 864.059,226.587 864.627,228.585 865.196,228.487 865.764,228.44 866.332,229.506 866.901,229.544 867.469,228.665 868.037,226.85 868.606,227.119 869.174,227.248 869.742,225.573 870.311,225.895 870.879,225.349 871.447,226.89 872.016,227.208 872.584,227.338 873.152,228.915 873.721,228.971 874.289,230.088 874.858,230.34 875.426,231.909 875.994,229.696 876.563,229.924 877.131,231.171 877.699,231.157 878.268,229.054 878.836,229.334 879.404,229.459 879.973,229.676 880.541,229.521 881.109,231.62 881.678,233.447 882.246,232.263 882.814,231.088 883.383,233.199 883.951,234.056 884.519,231.648 885.088,231.534 885.656,233.423 886.224,233.211 886.793,231.705 887.361,233.599 887.93,233.318 888.498,232.9 889.066,233.653 889.635,233.268 890.203,233.086 890.771,233.96 891.34,233.683 891.908,232.698 892.476,233.449 893.045,235.221 893.613,231.865 894.181,229.676 894.75,228.634 895.318,230.588 895.886,230.643 896.455,232.585 897.023,231.584 897.591,233.655 898.16,232.386 898.728,230.179 899.296,230.092 899.865,232.999 900.433,232.83 901.001,232.443 901.57,232.21 902.138,231.082 902.707,231.095 903.275,231.923 903.843,233.636 904.412,233.361 904.98,234.129 905.548,233.037 906.117,232.868 906.685,231.71 907.253,231.552 907.822,230.194 908.39,230.016 908.958,228.821 909.527,229.947 910.095,230.851 910.663,230.941 911.232,229.863 911.8,230.712 912.368,229.681 912.937,228.51 913.505,227.382 914.073,227.608 914.642,228.77 915.21,227.565 915.779,226.588 916.347,226.903 916.915,226.256 917.484,227.511 918.052,227.722 918.62,230.812 919.189,229.78 919.757,228.661 920.325,228.61 920.894,229.831 921.462,229.792 922.03,230.782 922.599,229.619 923.167,230.505 923.735,229.408 924.304,229.255 924.872,229.359 925.44,229.531 926.009,227.562 926.577,227.67 927.145,228.916 927.714,225.858 928.282,223.228 928.85,223.677 929.419,225.125 929.987,224.461 930.556,225.883 931.124,227.044 931.692,227.221 932.261,228.609 932.829,229.736 933.397,230.975 933.966,230.872 934.534,231.997 935.102,231.698 935.671,234.684 936.239,235.326 936.807,234.793 937.376,237.516 937.944,236.796 938.512,236.21 939.081,236.597 939.649,236.103 940.217,236.651 940.786,234.127 941.354,232.758 941.922,232.561 942.491,231.251 943.059,229.226 943.627,229.314 944.196,230.285 944.764,229.082 945.333,231.11 945.901,230.129 946.469,229.2 947.038,228.976 947.606,229.988 948.174,230.91 948.743,230.808 949.311,230.547 949.879,229.33 950.448,226.232 951.016,227.486 951.584,228.575 952.153,225.421 952.721,224.744 953.289,225.263 953.858,227.862 954.426,226.863 954.994,224.925 955.563,225.312 956.131,226.895 956.699,227.194 957.268,224.406 957.836,223.935 958.405,221.334 958.973,219.895 959.541,221.526 960.11,221.078 960.678,222.853 961.246,223.323 961.815,224.84 962.383,224.151 962.951,224.732 963.52,224.194 964.088,226.768 964.656,225.747 965.225,229.189 965.793,229.578 966.361,229.942 966.93,230.078 967.498,230.081 968.066,230.188 968.635,228.267 969.203,229.332 969.771,230.574 970.34,229.665 970.908,225.53 971.476,225.857 972.045,227.144 972.613,228.488 973.182,228.667 973.75,228.821 974.318,229.877 974.887,231.157 975.455,229.076 976.023,228.241 976.592,229.466 977.16,228.739 977.728,229.979 978.297,229.125 978.865,232.403 979.433,232.307 980.002,233.258 980.57,233.276 981.138,233.132 981.707,232.9 982.275,232.63 982.843,232.435 983.412,232.312 983.98,235.352 984.548,234.082 985.117,234.798 985.685,235.523 986.253,236.114 986.822,235.742 987.39,235.393 987.959,235.085 988.527,235.77 989.095,235.484 989.664,236.4 990.232,236.337 990.8,235.767 991.369,233.249 991.937,233.862 992.505,233.49 993.074,233.26 993.642,232.887 994.21,231.528 994.779,231.51 995.347,230.35 995.915,228.379 996.484,228.589 997.052,230.619 997.62,229.449 998.189,229.608 998.757,231.88 999.325,231.734 999.894,233.571 1000.46,233.289 1001.03,232.876 1001.6,232.62 1002.17,232.392 1002.74,232.246 1003.3,232.927 1003.87,231.639 1004.44,229.676 1005.01,229.336 1005.58,224.511 1006.15,225.952 1006.71,229.195 1007.28,230.367 1007.85,230.523 1008.42,231.667 1008.99,233.687 1009.56,232.228 1010.12,232.193 1010.69,231.939 1011.26,230.829 1011.83,230.76 1012.4,230.695 1012.97,231.737 1013.53,229.599 1014.1,231.426 1014.67,228.264 1015.24,226.292 1015.81,226.398 1016.38,226.693 1016.94,226.999 1017.51,228.186 1018.08,230.502 1018.65,230.256 1019.22,229.159 1019.79,227.952 1020.35,228.98 1020.92,228.793 1021.49,229.733 1022.06,231.749 1022.63,230.529 1023.2,230.496 1023.76,230.655 1024.33,230.348 1024.9,230.502 1025.47,229.42 1026.04,230.475 1026.61,230.246 1027.17,230.074 1027.74,227.916 1028.31,230.94 1028.88,230.672 1029.45,230.382 1030.02,229.337 1030.58,230.525 1031.15,229.481 1031.72,228.373 1032.29,230.345 1032.86,231.639 1033.43,233.538 1033.99,233.404 1034.56,232.189 1035.13,232.861 1035.7,230.366 1036.27,229.206 1036.84,229.35 1037.4,226.38 1037.97,226.492 1038.54,226.693 1039.11,225.846 1039.68,223.977 1040.25,224.251 1040.81,225.578 1041.38,226.961 1041.95,226.366 1042.52,227.56 1043.09,227.498 1043.66,230.612 1044.22,228.579 1044.79,227.766 1045.36,227.888 1045.93,229.064 1046.5,226.942 1047.07,228.1 1047.63,227.908 1048.2,228.039 1048.77,230.215 1049.34,231.413 1049.91,231.462 1050.48,229.346 1051.05,227.458 1051.61,227.7 1052.18,227.948 1052.75,227.225 1053.32,228.596 1053.89,229.742 1054.46,229.62 1055.02,227.521 1055.59,228.773 1056.16,229.83 1056.73,229.902 1057.3,231.909 1057.87,231.881 1058.43,230.999 1059,230.889 1059.57,229.977 1060.14,230.065 1060.71,230.081 1061.28,230.282 1061.84,231.371 1062.41,232.373 1062.98,231.888 1063.55,230.919 1064.12,231.141 1064.69,232.157 1065.25,229.902 1065.82,230.932 1066.39,228.68 1066.96,228.747 1067.53,228.824 1068.1,226.933 1068.66,228.105 1069.23,228.3 1069.8,227.252 1070.37,226.401 1070.94,226.745 1071.51,227.107 1072.07,227.174 1072.64,225.361 1073.21,226.841 1073.78,226.877 1074.35,227.17 1074.92,224.68 1075.48,225.126 1076.05,225.441 1076.62,224.868 1077.19,224.165 1077.76,227.166 1078.33,229.639 1078.89,229.494 1079.46,228.506 1080.03,229.661 1080.6,229.76 1081.17,228.822 1081.74,227.843 1082.3,228.002 1082.87,226.952 1083.44,224.834 1084.01,227.56 1084.58,225.786 1085.15,228.361 1085.71,228.549 1086.28,229.702 1086.85,230.967 1087.42,231.05 1087.99,233.132 1088.56,234.095 1089.12,233.976 1089.69,233.852 1090.26,233.746 1090.83,232.372 1091.4,232.293 1091.97,232.055 1092.53,231.893 1093.1,230.697 1093.67,228.505 1094.24,227.448 1094.81,229.662 1095.38,228.938 1095.94,227.025 1096.51,226.152 1097.08,225.603 1097.65,224.967 1098.22,225.631 1098.79,229.297 1099.35,229.261 1099.92,226.447 1100.49,225.066 1101.06,227.564 1101.63,229.704 1102.2,227.769 1102.76,228.069 1103.33,229.261 1103.9,230.365 1104.47,231.556 1105.04,232.651 1105.61,232.564 1106.17,231.365 1106.74,232.427 1107.31,233.413 1107.88,234.195 1108.45,232.709 1109.02,236.955 1109.58,235.579 1110.15,236.12 1110.72,235.859 1111.29,235.517 1111.86,234.219 1112.43,231.911 1112.99,233.005 1113.56,234.97 1114.13,234.763 1114.7,234.492 1115.27,231.898 1115.84,231.796 1116.4,230.625 1116.97,230.444 1117.54,229.501 1118.11,228.372 1118.68,230.416 1119.25,229.296 1119.81,231.324 1120.38,232.324 1120.95,230.181 1121.52,231.106 1122.09,231.08 1122.66,231.084 1123.23,233.154 1123.79,234.081 1124.36,231.565 1124.93,230.409 1125.5,230.36 1126.07,231.381 1126.64,232.215 1127.2,228.853 1127.77,228.155 1128.34,229.361 1128.91,231.537 1129.48,231.516 1130.05,230.365 1130.61,231.299 1131.18,230.174 1131.75,230.24 1132.32,231.288 1132.89,231.156 1133.46,230.087 1134.02,227.699 1134.59,227.937 1135.16,229.986 1135.73,231.99 1136.3,229.705 1136.87,229.845 1137.43,229.879 1138,228.772 1138.57,225.612 1139.14,225.54 1139.71,226.841 1140.28,228.082 1140.84,226.102 1141.41,226.203 1141.98,226.544 1142.55,225.76 1143.12,224.975 1143.69,225.201 1144.25,227.388 1144.82,226.549 1145.39,228.695 1145.96,229.848 1146.53,228.841 1147.1,227.971 1147.66,228.134 1148.23,228.454 1148.8,231.645 1149.37,230.453 1149.94,230.611 1150.51,232.487 1151.07,232.365 1151.64,233.285 1152.21,232.908 1152.78,231.594 1153.35,232.42 1153.92,230.341 1154.48,229.415 1155.05,230.733 1155.62,230.66 1156.19,231.573 1156.76,232.464 1157.33,234.323 1157.89,236.146 1158.46,236.53 1159.03,236.048 1159.6,235.632 1160.17,236.233 1160.74,236.697 1161.3,235.042 1161.87,236.575 1162.44,235.11 1163.01,234.727 1163.58,234.314 1164.15,231.826 1164.71,235.651 1165.28,234.093 1165.85,234.841 1166.42,233.674 1166.99,233.414 1167.56,233.004 1168.12,233.675 1168.69,233.435 1169.26,232.998 1169.83,233.797 1170.4,233.286 1170.97,234.098 1171.53,232.559 1172.1,230.133 1172.67,229.86 1173.24,229.523 1173.81,229.498 1174.38,228.368 1174.94,226.35 1175.51,224.548 1176.08,223.849 1176.65,223.953 1177.22,224.245 1177.79,225.807 1178.35,223.855 1178.92,225.098 1179.49,225.518 1180.06,225.556 1180.63,226.604 1181.2,227.85 1181.76,229.972 1182.33,229.842 1182.9,227.694 1183.47,227.761 1184.04,226.848 1184.61,228.923 1185.17,227.72 1185.74,227.856 1186.31,227.867 1186.88,225.888 1187.45,225.04 1188.02,225.342 1188.58,224.242 1189.15,224.597 1189.72,223.996 1190.29,224.293 1190.86,225.731 1191.43,222.987 1192,224.449 1192.56,223.84 1193.13,224.217 1193.7,226.562 1194.27,227.937 1194.84,228.899 1195.41,229.118 1195.97,229.171 1196.54,232.333 1197.11,232.215 1197.68,231.799 1198.25,232.695 1198.82,230.573 1199.38,231.675 1199.95,232.531 1200.52,232.585 1201.09,233.265 1201.66,229.977 1202.23,230.049 1202.79,230.834 1203.36,232.873 1203.93,229.592 1204.5,229.51 1205.07,229.474 1205.64,227.491 1206.2,225.553 1206.77,228.049 1207.34,227.295 1207.91,227.74 1208.48,227.723 1209.05,227.848 1209.61,228.077 1210.18,228.042 1210.75,229.02 1211.32,226.939 1211.89,227.202 1212.46,224.283 1213.02,223.509 1213.59,225.183 1214.16,228.784 1214.73,226.882 1215.3,227.211 1215.87,227.26 1216.43,226.542 1217,226.802 1217.57,227.256 1218.14,228.603 1218.71,230.063 1219.28,227.073 1219.84,228.448 1220.41,228.34 1220.98,228.553 1221.55,227.826 1222.12,228.17 1222.69,229.475 1223.25,229.888 1223.82,227.63 1224.39,228.53 1224.96,227.722 1225.53,228.976 1226.1,229.449 1226.66,228.45 1227.23,228.493 1227.8,227.678 1228.37,228.029 1228.94,228.038 1229.51,230.396 1230.07,228.36 1230.64,227.63 1231.21,226.729 1231.78,226.097 1232.35,225.382 1232.92,225.628 1233.48,221.867 1234.05,221.651 1234.62,221.251 1235.19,224.117 1235.76,225.728 1236.33,224.13 1236.89,225.761 1237.46,225.275 1238.03,225.969 1238.6,225.535 1239.17,227.031 1239.74,228.324 1240.3,229.771 1240.87,229.031 1241.44,228.188 1242.01,228.344 1242.58,228.48 1243.15,227.915 1243.71,230.349 1244.28,230.254 1244.85,230.402 1245.42,230.38 1245.99,227.425 1246.56,227.972 1247.12,227.148 1247.69,228.683 1248.26,228.112 1248.83,229.63 1249.4,233.162 1249.97,233.045 1250.53,230.988 1251.1,232.303 1251.67,232.305 1252.24,232.17 1252.81,233.374 1253.38,234.302 1253.94,235.303 1254.51,237.025 1255.08,239.632 1255.65,236.915 1256.22,235.567 1256.79,235.214 1257.35,233.904 1257.92,232.548 1258.49,232.712 1259.06,236.521 1259.63,236.902 1260.2,237.515 1260.76,239.135 1261.33,241.655 1261.9,241.827 1262.47,240.809 1263.04,241.961 1263.61,239.007 1264.18,237.329 1264.74,236.882 1265.31,236.508 1265.88,235.853 1266.45,238.284 1267.02,237.709 1267.59,238.034 1268.15,238.409 1268.72,237.018 1269.29,235.264 1269.86,235.836 1270.43,233.269 1271,232.161 1271.56,231.864 1272.13,230.489 1272.7,228.253 1273.27,228.414 1273.84,229.191 1274.41,228.286 1274.97,229.525 1275.54,228.479 1276.11,227.355 1276.68,229.426 1277.25,230.428 1277.82,229.478 1278.38,229.315 1278.95,229.084 1279.52,228.074 1280.09,226.854 1280.66,225.912 1281.23,227.227 1281.79,227.298 1282.36,226.299 1282.93,225.383 1283.5,223.838 1284.07,223.346 1284.64,224.032 1285.2,224.195 1285.77,225.547 1286.34,227.832 1286.91,225.865 1287.48,224.047 1288.05,223.491 1288.61,225.14 1289.18,224.683 1289.75,227.231 1290.32,226.34 1290.89,227.711 1291.46,230.068 1292.02,232.012 1292.59,232.914 1293.16,232.823 1293.73,233.517 1294.3,235.279 1294.87,233.602 1295.43,233.292 1296,234.15 1296.57,236.813 1297.14,237.403 1297.71,237.703 1298.28,240.124 1298.84,239.264 1299.41,236.454 1299.98,236.823 1300.55,235.4 1301.12,236.016 1301.69,236.537 1302.25,237.773 1302.82,238.075 1303.39,237.38 1303.96,233.659 1304.53,233.224 1305.1,231.695 1305.66,232.398 1306.23,232.022 1306.8,232.79 1307.37,228.181 1307.94,228.149 1308.51,228.958 1309.07,229.973 1309.64,229.862 1310.21,230.665 1310.78,228.337 1311.35,226.134 1311.92,226.216 1312.48,226.455 1313.05,225.484 1313.62,226.851 1314.19,228.056 1314.76,227.168 1315.33,227.077 1315.89,226.154 1316.46,226.362 1317.03,226.41 1317.6,226.504 1318.17,227.732 1318.74,227.722 1319.3,225.98 1319.87,226.344 1320.44,224.614 1321.01,225.973 1321.58,224.928 1322.15,226.543 1322.71,227.641 1323.28,226.553 1323.85,226.868 1324.42,228.014 1324.99,230.281 1325.56,231.186 1326.12,230.024 1326.69,228.783 1327.26,227 1327.83,228.038 1328.4,228.073 1328.97,231.297 1329.53,230.109 1330.1,230.952 1330.67,231.799 1331.24,231.453 1331.81,231.286 1332.38,231.184 1332.94,231.152 1333.51,228.78 1334.08,226.529 1334.65,225.616 1335.22,225.803 1335.79,228.2 1336.36,227.329 1336.92,229.725 1337.49,230.826 1338.06,229.729 1338.63,228.826 1339.2,230.173 1339.77,231.18 1340.33,231.179 1340.9,227.965 1341.47,228.226 1342.04,230.285 1342.61,231.162 1343.18,233.07 1343.74,234.788 1344.31,235.597 1344.88,235.268 1345.45,236.923 1346.02,237.573 1346.59,233.889 1347.15,233.495 1347.72,229.989 1348.29,228.832 1348.86,228.708 1349.43,228.735 1350,227.647 1350.56,229.577 1351.13,228.638 1351.7,229.674 1352.27,230.474 1352.84,228.358 1353.41,230.322 1353.97,230.202 1354.54,232.219 1355.11,232.966 1355.68,233.641 1356.25,233.25 1356.82,230.742 1357.38,229.684 1357.95,230.484 1358.52,230.301 1359.09,230.198 1359.66,229.156 1360.23,229.13 1360.79,229.253 1361.36,227.36 1361.93,224.344 1362.5,224.492 1363.07,223.75 1363.64,222.986 1364.2,225.233 1364.77,221.288 1365.34,222.719 1365.91,222.215 1366.48,221.658 1367.05,222.213 1367.61,223.776 1368.18,225.038 1368.75,226.405 1369.32,226.502 1369.89,226.627 1370.46,229.99 1371.02,229.008 1371.59,231.273 1372.16,233.977 1372.73,234.759 1373.3,233.534 1373.87,236.285 1374.43,232.728 1375,232.444 1375.57,232.312 1376.14,232.022 1376.71,231.705 1377.28,230.104 1377.84,232.156 1378.41,232.012 1378.98,230.815 1379.55,231.728 1380.12,231.442 1380.69,230.423 1381.25,231.202 1381.82,230.913 1382.39,232.766 1382.96,232.507 1383.53,232.113 1384.1,232.835 1384.66,231.439 1385.23,232.371 1385.8,233.062 1386.37,233.877 1386.94,233.323 1387.51,233.941 1388.07,230.72 1388.64,229.536 1389.21,228.354 1389.78,230.657 1390.35,230.394 1390.92,231.646 1391.48,227.452 1392.05,224.232 1392.62,224.721 1393.19,227.042 1393.76,226.174 1394.33,228.684 1394.89,228.839 1395.46,228.873 1396.03,228.855 1396.6,227.938 1397.17,227.076 1397.74,225.065 1398.3,224.331 1398.87,225.65 1399.44,225.692 1400.01,224.719 1400.58,225.925 1401.15,225.166 1401.71,226.594 1402.28,226.885 1402.85,227.792 1403.42,227.947 1403.99,223.937 1404.56,222.08 1405.13,221.578 1405.69,226.356 1406.26,226.723 1406.83,225.996 1407.4,227.235 1407.97,230.691 1408.54,230.753 1409.1,229.676 1409.67,229.652 1410.24,230.903 1410.81,232.094 1411.38,230.974 1411.95,231.121 1412.51,229.968 1413.08,228.747 1413.65,229.035 1414.22,229.983 1414.79,228.975 1415.36,231.104 1415.92,229.046 1416.49,228.283 1417.06,229.457 1417.63,228.529 1418.2,229.806 1418.77,231.104 1419.33,230.124 1419.9,231.246 1420.47,231.275 1421.04,232.972 1421.61,233.813 1422.18,236.604 1422.74,237.055 1423.31,237.312 1423.88,235.775 1424.45,234.249 1425.02,234.056 1425.59,232.66 1426.15,233.356 1426.72,233.185 1427.29,233.002 1427.86,230.533 1428.43,229.205 1429,229.07 1429.56,227.845 1430.13,227.767 1430.7,229.834 1431.27,229.712 1431.84,228.444 1432.41,229.401 1432.97,226.475 1433.54,225.747 1434.11,225.986 1434.68,226.199 1435.25,226.545 1435.82,225.5 1436.38,227.08 1436.95,227.21 1437.52,230.255 1438.09,230.117 1438.66,233.054 1439.23,233.792 1439.79,232.496 1440.36,234.332 1440.93,233.994 1441.5,231.572 1442.07,231.382 1442.64,231.478 1443.2,231.33 1443.77,231.014 1444.34,228.805 1444.91,227.8 1445.48,226.701 1446.05,227.911 1446.61,228.047 1447.18,231.204 1447.75,234.164 1448.32,235.073 1448.89,233.718 1449.46,232.243 1450.02,230.835 1450.59,229.519 1451.16,229.613 1451.73,227.511 1452.3,226.435 1452.87,225.6 1453.43,227.879 1454,226.649 1454.57,230.044 1455.14,231.207 1455.71,232.064 1456.28,230.626 1456.84,230.453 1457.41,228.348 1457.98,227.374 1458.55,229.658 1459.12,229.594 1459.69,227.543 1460.25,227.864 1460.82,227.763 1461.39,225.935 1461.96,227.193 1462.53,227.356 1463.1,227.472 1463.66,227.696 1464.23,228.846 1464.8,227.672 1465.37,228.748 1465.94,229.968 1466.51,229.8 1467.07,232.041 1467.64,230.54 1468.21,230.215 1468.78,230.301 1469.35,231.451 1469.92,231.046 1470.48,230.98 1471.05,231.952 1471.62,229.507 1472.19,227.384 1472.76,226.43 1473.33,224.572 1473.89,226.051 1474.46,224.135 1475.03,226.485 1475.6,228.817 1476.17,230.054 1476.74,228.006 1477.31,227.049 1477.87,228.224 1478.44,227.304 1479.01,228.427 1479.58,227.455 1480.15,228.862 1480.72,226.785 1481.28,225.827 1481.85,226.152 1482.42,226.502 1482.99,228.853 1483.56,229.891 1484.13,228.925 1484.69,229.006 1485.26,229.136 1485.83,231.254 1486.4,229.141 1486.97,230.078 1487.54,230.178 1488.1,229.21 1488.67,230.112 1489.24,231.014 1489.81,230.671 1490.38,231.555 1490.95,229.401 1491.51,231.589 1492.08,230.33 1492.65,230.406 1493.22,230.296 1493.79,230.376 1494.36,231.261 1494.92,230.091 1495.49,229.203 1496.06,230.421 1496.63,229.492 1497.2,229.482 1497.77,229.474 1498.33,229.911 1498.9,227.024 1499.47,227.361 1500.04,226.464 1500.61,226.728 1501.18,224.916 1501.74,224.323 1502.31,225.443 1502.88,225.92 1503.45,225.197 1504.02,224.833 1504.59,225.173 1505.15,225.459 1505.72,226.774 1506.29,228.081 1506.86,229.35 1507.43,227.542 1508,227.915 1508.56,227.24 1509.13,225.42 1509.7,225.56 1510.27,224.96 1510.84,225.445 1511.41,226.85 1511.97,226.119 1512.54,227.362 1513.11,227.766 1513.68,230.066 1514.25,229.02 1514.82,230.335 1515.38,231.632 1515.95,232.67 1516.52,233.684 1517.09,235.455 1517.66,235.185 1518.23,236.088 1518.79,236.015 1519.36,237.806 1519.93,238.603 1520.5,236.877 1521.07,235.427 1521.64,235.08 1522.2,235.853 1522.77,236.36 1523.34,237.075 1523.91,235.507 1524.48,235.129 1525.05,234.512 1525.61,233.055 1526.18,231.868 1526.75,230.466 1527.32,230.241 1527.89,231.272 1528.46,231.164 1529.02,232.003 1529.59,230.832 1530.16,231.621 1530.73,231.682 1531.3,230.666 1531.87,227.66 1532.43,228.863 1533,229.889 1533.57,231.071 1534.14,229.964 1534.71,230.167 1535.28,230.228 1535.84,231.132 1536.41,232.104 1536.98,232.787 1537.55,232.547 1538.12,233.282 1538.69,232.986 1539.25,232.826 1539.82,232.437 1540.39,233.246 1540.96,233.966 1541.53,234.775 1542.1,237.427 1542.66,235.663 1543.23,235.216 1543.8,234.838 1544.37,234.312 1544.94,236.15 1545.51,231.525 1546.08,231.167 1546.64,230.079 1547.21,228.87 1547.78,226.895 1548.35,226.858 1548.92,228.09 1549.49,229.126 1550.05,228.09 1550.62,226.976 1551.19,227.987 1551.76,227.808 1552.33,226.917 1552.9,226.086 1553.46,226.376 1554.03,225.738 1554.6,227.089 1555.17,226.188 1555.74,227.333 1556.31,226.205 1556.87,226.487 1557.44,228.726 1558.01,228.901 1558.58,226.848 1559.15,224.001 1559.72,224.269 1560.28,223.718 1560.85,224.118 1561.42,224.399 1561.99,224.705 1562.56,225.051 1563.13,226.048 1563.69,225.24 1564.26,225.455 1564.83,223.874 1565.4,225.393 1565.97,223.589 1566.54,222.942 1567.1,224.395 1567.67,225.816 1568.24,225.358 1568.81,224.689 1569.38,227.191 1569.95,229.473 1570.51,229.75 1571.08,229.546 1571.65,229.679 1572.22,230.938 1572.79,232.886 1573.36,232.664 1573.92,230.093 1574.49,231.135 1575.06,228.224 1575.63,229.726 1576.2,230.835 1576.77,228.713 1577.33,229.126 1577.9,229.2 1578.47,230.366 1579.04,234.413 1579.61,233.286 1580.18,232.928 1580.74,232.65 1581.31,233.676 1581.88,233.341 1582.45,233.987 1583.02,232.718 1583.59,230.502 1584.15,232.624 1584.72,233.149 1585.29,231.844 1585.86,232.706 1586.43,233.298 1587,233.013 1587.56,231.689 1588.13,233.547 1588.7,233.276 1589.27,233.076 1589.84,232.815 1590.41,231.675 1590.97,231.559 1591.54,230.483 1592.11,231.205 1592.68,232.102 1593.25,232.19 1593.82,232.095 1594.38,232.762 1594.95,233.36 1595.52,234.226 1596.09,234.923 1596.66,234.683 1597.23,234.179 1597.79,232.72 1598.36,233.531 1598.93,233.124 1599.5,232.729 1600.07,231.505 1600.64,231.222 1601.2,230.987 1601.77,230.866 1602.34,230.907 1602.91,229.906 1603.48,232.9 1604.05,234.593 1604.61,234.26 1605.18,232.546 1605.75,228.135 1606.32,229.085 1606.89,226.859 1607.46,228.218 1608.02,228.245 1608.59,227.301 1609.16,225.036 1609.73,225.142 1610.3,226.392 1610.87,226.406 1611.43,225.434 1612,224.775 1612.57,222.854 1613.14,223.337 1613.71,220.678 1614.28,220.295 1614.84,222.265 1615.41,220.851 1615.98,220.334 1616.55,222.164 1617.12,220.616 1617.69,221.388 1618.26,221.149 1618.82,220.777 1619.39,223.546 1619.96,224.135 1620.53,223.72 1621.1,222.379 1621.67,225.011 1622.23,226.275 1622.8,227.575 1623.37,228.893 1623.94,230.317 1624.51,229.258 1625.08,226.335 1625.64,225.662 1626.21,226.02 1626.78,225.312 1627.35,226.647 1627.92,226.989 1628.49,227.288 1629.05,227.273 1629.62,228.635 1630.19,227.861 1630.76,229.29 1631.33,230.475 1631.9,229.354 1632.46,228.564 1633.03,227.806 1633.6,226.914 1634.17,227.144 1634.74,225.408 1635.31,225.973 1635.87,229.761 1636.44,228.86 1637.01,229.925 1637.58,231.017 1638.15,232.092 1638.72,232.139 1639.28,232.028 1639.85,232.974 1640.42,232.974 1640.99,233.717 1641.56,235.736 1642.13,236.584 1642.69,237.195 1643.26,238.763 1643.83,238.31 1644.4,238.918 1644.97,239.327 1645.54,239.713 1646.1,239.124 1646.67,237.643 1647.24,237.907 1647.81,239.473 1648.38,240.807 1648.95,239.069 1649.51,238.423 1650.08,237.824 1650.65,238.297 1651.22,237.481 1651.79,238.495 1652.36,234.647 1652.92,235.218 1653.49,234.868 1654.06,233.405 1654.63,235.176 1655.2,232.513 1655.77,232.424 1656.33,230.174 1656.9,229.999 1657.47,228.721 1658.04,230.961 1658.61,229.741 1659.18,228.575 1659.74,226.37 1660.31,227.33 1660.88,227.547 1661.45,228.596 1662.02,229.598 1662.59,229.535 1663.15,228.52 1663.72,227.755 1664.29,230.867 1664.86,230.739 1665.43,232.581 1666,230.114 1666.56,229.936 1667.13,231.858 1667.7,228.399 1668.27,226.175 1668.84,225.33 1669.41,226.446 1669.97,228.763 1670.54,230.765 1671.11,231.67 1671.68,231.427 1672.25,232.07 1672.82,230.96 1673.38,229.65 1673.95,230.65 1674.52,230.496 1675.09,230.405 1675.66,227.734 1676.23,226.641 1676.79,224.688 1677.36,224.966 1677.93,223.151 1678.5,223.489 1679.07,224.018 1679.64,225.854 1680.2,225.157 1680.77,225.468 1681.34,227.515 1681.91,228.6 1682.48,228.617 1683.05,228.571 1683.61,229.408 1684.18,228.317 1684.75,228.303 1685.32,228.451 1685.89,228.54 1686.46,228.761 1687.02,229.88 1687.59,227.551 1688.16,226.644 1688.73,225.926 1689.3,227.369 1689.87,228.586 1690.44,227.711 1691,228.968 1691.57,224.624 1692.14,226.934 1692.71,226.106 1693.28,227.369 1693.85,228.784 1694.41,228.783 1694.98,228.654 1695.55,228.764 1696.12,228.854 1696.69,228.871 1697.26,227.081 1697.82,225.501 1698.39,222.763 1698.96,221.987 1699.53,222.547 1700.1,224.199 1700.67,225.882 1701.23,226.295 1701.8,225.642 1702.37,224.821 1702.94,228.207 1703.51,228.286 1704.08,226.42 1704.64,227.7 1705.21,227.998 1705.78,228.209 1706.35,228.448 1706.92,229.81 1707.49,231.943 1708.05,228.769 1708.62,225.843 1709.19,226.983 1709.76,225.032 1710.33,228.415 1710.9,228.672 1711.46,232.058 1712.03,231.99 1712.6,229.741 1713.17,230.912 1713.74,229.841 1714.31,230.005 1714.87,229.183 1715.44,228.378 1716.01,229.731 1716.58,229.773 1717.15,230.976 1717.72,232.185 1718.28,232.062 1718.85,232.96 1719.42,234.961 1719.99,234.723 1720.56,232.551 1721.13,232.453 1721.69,232.45 1722.26,234.185 1722.83,234.134 1723.4,232.825 1723.97,235.846 1724.54,236.643 1725.1,236.21 1725.67,235.714 1726.24,237.622 1726.81,238.07 1727.38,238.447 1727.95,236.681 1728.51,237.182 1729.08,235.558 1729.65,236.212 1730.22,237.783 1730.79,237.171 1731.36,232.59 1731.92,231.272 1732.49,232.389 1733.06,231.925 1733.63,234.784 1734.2,234.279 1734.77,232.878 1735.33,232.463 1735.9,231.902 1736.47,233.669 1737.04,232.331 1737.61,231.124 1738.18,231.923 1738.74,228.542 1739.31,228.398 1739.88,227.446 1740.45,226.712 1741.02,226.798 1741.59,225.883 1742.15,226.058 1742.72,224.248 1743.29,226.675 1743.86,227.972 1744.43,228.079 1745,227.135 1745.56,226.378 1746.13,225.471 1746.7,223.348 1747.27,224.779 1747.84,225.145 1748.41,225.287 1748.97,227.614 1749.54,228.89 1750.11,227.933 1750.68,228.329 1751.25,226.519 1751.82,226.848 1752.38,227.13 1752.95,226.535 1753.52,229.883 1754.09,229.864 1754.66,228.858 1755.23,228.719 1755.79,232.769 1756.36,231.603 1756.93,230.532 1757.5,231.512 1758.07,232.561 1758.64,231.292 1759.21,231.18 1759.77,231.089 1760.34,229.979 1760.91,232.089 1761.48,231.686 1762.05,229.477 1762.62,229.5 1763.18,226.539 1763.75,226.798 1764.32,226.926 1764.89,228.08 1765.46,228.256 1766.03,228.219 1766.59,228.239 1767.16,230.221 1767.73,228.161 1768.3,228.241 1768.87,228.071 1769.44,227.042 1770,229.273 1770.57,228.242 1771.14,227.373 1771.71,226.444 1772.28,225.594 1772.85,224.811 1773.41,223.287 1773.98,221.767 1774.55,222.443 1775.12,221.204 1775.69,221.83 1776.26,220.379 1776.82,223.066 1777.39,223.617 1777.96,224.031 1778.53,226.662 1779.1,226.948 1779.67,227.245 1780.23,227.382 1780.8,229.676 1781.37,231.783 1781.94,233.757 1782.51,234.669 1783.08,234.5 1783.64,234.381 1784.21,234.333 1784.78,233.89 1785.35,233.618 1785.92,233.312 1786.49,234.194 1787.05,232.853 1787.62,232.835 1788.19,230.658 1788.76,232.895 1789.33,232.767 1789.9,231.502 1790.46,231.173 1791.03,232.259 1791.6,234.169 1792.17,234.876 1792.74,233.323 1793.31,231.041 1793.87,231.047 1794.44,229.711 1795.01,228.63 1795.58,228.987 1796.15,225.991 1796.72,227.078 1797.28,226.364 1797.85,227.468 1798.42,226.82 1798.99,227.136 1799.56,227.605 1800.13,227.905 1800.69,226.055 1801.26,226.266 1801.83,227.546 1802.4,228.965 1802.97,227.903 1803.54,229.257 1804.1,227.353 1804.67,228.631 1805.24,229.645 1805.81,231.9 1806.38,231.513 1806.95,228.565 1807.51,228.477 1808.08,230.704 1808.65,231.941 1809.22,232.769 1809.79,233.675 1810.36,232.466 1810.92,233.202 1811.49,233.065 1812.06,233.882 1812.63,232.656 1813.2,234.467 1813.77,236.232 1814.33,235.882 1814.9,233.588 1815.47,235.448 1816.04,237.22 1816.61,235.616 1817.18,237.239 1817.74,236.69 1818.31,236.323 1818.88,237.07 1819.45,235.354 1820.02,233.913 1820.59,233.536 1821.15,232.384 1821.72,230.902 1822.29,230.594 1822.86,229.256 1823.43,230.967 1824,231.853 1824.56,229.576 1825.13,228.12 1825.7,228.431 1826.27,230.668 1826.84,231.777 1827.41,232.772 1827.97,231.879 1828.54,231.684 1829.11,231.452 1829.68,232.327 1830.25,232.091 1830.82,232.842 1831.39,232.559 1831.95,233.244 1832.52,233.845 1833.09,231.419 1833.66,232.113 1834.23,231.865 1834.8,232.773 1835.36,232.548 1835.93,231.156 1836.5,233.908 1837.07,231.432 1837.64,231.261 1838.21,228.992 1838.77,226.81 1839.34,227.775 1839.91,227.84 1840.48,226.075 1841.05,225.227 1841.62,224.591 1842.18,227.998 1842.75,228.025 1843.32,228.956 1843.89,228.068 1844.46,228.054 1845.03,228.104 1845.59,227.188 1846.16,224.45 1846.73,224.836 1847.3,225.088 1847.87,225.384 1848.44,225.651 1849,225.946 1849.57,225.109 1850.14,226.37 1850.71,227.741 1851.28,230.897 1851.85,228.794 1852.41,228.859 1852.98,228.986 1853.55,230.117 1854.12,229.192 1854.69,231.217 1855.26,232.188 1855.82,232.848 1856.39,231.409 1856.96,232.271 1857.53,232.027 1858.1,231.75 1858.67,230.506 1859.23,229.466 1859.8,228.303 1860.37,226.245 1860.94,226.394 1861.51,226.613 1862.08,227.748 1862.64,227.963 1863.21,229.091 1863.78,227.172 1864.35,224.433 1864.92,223.675 1865.49,223.911 1866.05,225.495 1866.62,227.764 1867.19,226.812 1867.76,226.902 1868.33,228.398 1868.9,227.496 1869.46,227.544 1870.03,227.752 1870.6,225.979 1871.17,227.499 1871.74,227.677 1872.31,226.756 1872.87,225.759 1873.44,224.937 1874.01,224.514 1874.58,223.869 1875.15,223.373 1875.72,223.823 1876.28,223.304 1876.85,225.017 1877.42,228.463 1877.99,228.41 1878.56,231.878 1879.13,234.892 1879.69,233.671 1880.26,235.211 1880.83,232.667 1881.4,232.43 1881.97,229.529 1882.54,228.577 1883.1,228.836 1883.67,229.022 1884.24,229.084 1884.81,230.35 1885.38,227.359 1885.95,228.358 1886.51,229.441 1887.08,227.376 1887.65,226.59 1888.22,226.727 1888.79,228.04 1889.36,229.282 1889.92,229.238 1890.49,230.311 1891.06,232.619 1891.63,233.583 1892.2,234.33 1892.77,233.153 1893.33,236.25 1893.9,233.812 1894.47,232.63 1895.04,233.689 1895.61,234.478 1896.18,230.935 1896.74,230.679 1897.31,231.595 1897.88,230.45 1898.45,230.466 1899.02,231.687 1899.59,231.807 1900.16,229.567 1900.72,230.627 1901.29,231.563 1901.86,229.215 1902.43,229.284 1903,229.421 1903.57,229.266 1904.13,228.08 1904.7,228.228 1905.27,227.397 1905.84,226.651 1906.41,228.868 1906.98,226.832 1907.54,227.799 1908.11,227.759 1908.68,228.003 1909.25,230.14 1909.82,229.041 1910.39,229.261 1910.95,231.283 1911.52,231.221 1912.09,228.926 1912.66,228.025 1913.23,228.332 1913.8,232.548 1914.36,233.365 1914.93,232.16 1915.5,231.821 1916.07,232.416 1916.64,231.122 1917.21,229.752 1917.77,230.776 1918.34,229.796 1918.91,229.693 1919.48,230.586 1920.05,231.521 1920.62,230.414 1921.18,231.569 1921.75,228.229 1922.32,228.417 1922.89,226.424 1923.46,226.42 1924.03,225.691 1924.59,226.196 1925.16,227.381 1925.73,225.558 1926.3,225.961 1926.87,226.445 1927.44,223.664 1928,223.929 1928.57,224.527 1929.14,227.123 1929.71,226.329 1930.28,227.398 1930.85,229.61 1931.41,230.892 1931.98,231.15 1932.55,231.961 1933.12,230.87 1933.69,230.908 1934.26,231.874 1934.82,231.824 1935.39,231.86 1935.96,231.813 1936.53,232.765 1937.1,230.664 1937.67,231.914 1938.23,230.783 1938.8,230.054 1939.37,230.958 1939.94,231.087 1940.51,230.426 1941.08,231.367 1941.64,231.308 1942.21,234.457 1942.78,233.075 1943.35,233.785 1943.92,234.655 1944.49,233.286 1945.05,233.866 1945.62,232.527 1946.19,229.263 1946.76,230.45 1947.33,231.295 1947.9,231.262 1948.46,232.309 1949.03,233.141 1949.6,231.675 1950.17,232.643 1950.74,232.421 1951.31,230.094 1951.87,229.975 1952.44,228.001 1953.01,229.04 1953.58,228.019 1954.15,229.032 1954.72,228.854 1955.28,228.792 1955.85,230.85 1956.42,232.806 1956.99,231.559 1957.56,231.489 1958.13,231.193 1958.69,233.943 1959.26,233.603 1959.83,233.165 1960.4,232.932 1960.97,232.522 1961.54,231.146 1962.1,228.887 1962.67,229.061 1963.24,229.077 1963.81,227.157 1964.38,226.139 1964.95,227.323 1965.51,227.508 1966.08,226.542 1966.65,226.806 1967.22,226.74 1967.79,225.998 1968.36,221.976 1968.92,222.784 1969.49,226.441 1970.06,224.755 1970.63,222.155 1971.2,222.711 1971.77,225.309 1972.34,224.538 1972.9,224.806 1973.47,227.39 1974.04,226.362 1974.61,227.61 1975.18,225.655 1975.75,225.886 1976.31,228.291 1976.88,229.515 1977.45,227.378 1978.02,228.725 1978.59,229.659 1979.16,229.748 1979.72,228.794 1980.29,229.976 1980.86,228.095 1981.43,229.182 1982,229.217 1982.57,229.428 1983.13,228.516 1983.7,227.774 1984.27,227.076 1984.84,226.262 1985.41,228.515 1985.98,228.8 1986.54,230.07 1987.11,228.09 1987.68,229.35 1988.25,229.412 1988.82,229.451 1989.39,233.741 1989.95,234.557 1990.52,232.195 1991.09,229.968 1991.66,228.839 1992.23,230.049 1992.8,231.178 1993.36,231.184 1993.93,232.345 1994.5,231.31 1995.07,229.185 1995.64,227.192 1996.21,224.239 1996.77,225.919 1997.34,227.301 1997.91,227.891 1998.48,229.144 1999.05,228.282 1999.62,228.376 2000.18,227.834 2000.75,228.039 2001.32,229.387 2001.89,229.467 2002.46,228.487 2003.03,229.734 2003.59,232.988 2004.16,232.936 2004.73,229.779 2005.3,230.977 2005.87,229.848 2006.44,231.093 2007,233.197 2007.57,231.165 2008.14,232.332 2008.71,233.209 2009.28,231.931 2009.85,232.86 2010.41,232.801 2010.98,235.641 2011.55,233.487 2012.12,234.384 2012.69,231.187 2013.26,229.927 2013.82,228.036 2014.39,228.435 2014.96,227.451 2015.53,228.921 2016.1,227.859 2016.67,227.211 2017.23,230.62 2017.8,231.546 2018.37,234.457 2018.94,234.201 2019.51,232.754 2020.08,234.574 2020.64,236.211 2021.21,236.833 2021.78,238.632 2022.35,236.899 2022.92,235.307 2023.49,233.932 2024.05,235.704 2024.62,235.28 2025.19,234.924 2025.76,232.366 2026.33,232.008 2026.9,231.833 2027.46,229.523 2028.03,230.474 2028.6,229.98 2029.17,228.866 2029.74,229.824 2030.31,230.839 2030.87,228.577 2031.44,229.637 2032.01,229.516 2032.58,230.364 2033.15,230.313 2033.72,231.342 2034.28,231.313 2034.85,232.229 2035.42,234.253 2035.99,232.85 2036.56,231.444 2037.13,230.43 2037.69,231.294 2038.26,230.977 2038.83,230.864 2039.4,233.031 2039.97,232.529 2040.54,232.037 2041.11,231.789 2041.67,232.75 2042.24,230.284 2042.81,227.999 2043.38,226.935 2043.95,229.438 2044.52,229.26 2045.08,227.187 2045.65,227.426 2046.22,227.582 2046.79,228.531 2047.36,228.627 2047.93,225.864 2048.49,224.834 2049.06,227.124 2049.63,226.352 2050.2,226.452 2050.77,225.997 2051.34,225.425 2051.9,223.799 2052.47,224.394 2053.04,223.89 2053.61,225.327 2054.18,224.537 2054.75,224.954 2055.31,228.217 2055.88,229.202 2056.45,229.241 2057.02,228.26 2057.59,230.284 2058.16,229.367 2058.72,228.385 2059.29,228.689 2059.86,228.464 2060.43,228.457 2061,228.532 2061.57,230.592 2062.13,228.238 2062.7,230.405 2063.27,229.238 2063.84,229.399 2064.41,229.455 2064.98,231.653 2065.54,233.684 2066.11,235.566 2066.68,235.166 2067.25,233.757 2067.82,233.476 2068.39,234.273 2068.95,232.914 2069.52,231.616 2070.09,230.532 2070.66,229.314 2071.23,228.195 2071.8,226.493 2072.36,227.767 2072.93,228.954 2073.5,228.916 2074.07,228.798 2074.64,228.961 2075.21,231.129 2075.77,231.036 2076.34,228.957 2076.91,229.157 2077.48,229.114 2078.05,231.154 2078.62,232.041 2079.18,231.869 2079.75,230.555 2080.32,228.497 2080.89,228.892 2081.46,228.992 2082.03,228.274 2082.59,227.654 2083.16,229.03 2083.73,228.171 2084.3,228.399 2084.87,227.659 2085.44,226.877 2086,228.224 2086.57,226.463 2087.14,227.752 2087.71,225.974 2088.28,225.47 2088.85,223.634 2089.41,222.91 2089.98,223.486 2090.55,225.05 2091.12,224.491 2091.69,225.886 2092.26,229.209 2092.82,228.494 2093.39,228.704 2093.96,229.847 2094.53,230.847 2095.1,229.982 2095.67,231.93 2096.23,230.853 2096.8,232.831 2097.37,232.75 2097.94,234.582 2098.51,234.401 2099.08,232.987 2099.64,233.835 2100.21,233.507 2100.78,235.227 2101.35,234.92 2101.92,235.633 2102.49,235.277 2103.05,234.851 2103.62,234.225 2104.19,235.652 2104.76,234.083 2105.33,234.515 2105.9,235.219 2106.46,231.701 2107.03,230.376 2107.6,230.157 2108.17,229.017 2108.74,232.081 2109.31,231.648 2109.87,231.65 2110.44,230.691 2111.01,229.376 2111.58,228.335 2112.15,227.184 2112.72,227.308 2113.29,230.604 2113.85,230.759 2114.42,227.581 2114.99,226.624 2115.56,225.717 2116.13,227.415 2116.7,225.479 2117.26,224.633 2117.83,225.955 2118.4,226.258 2118.97,227.578 2119.54,227.703 2120.11,226.907 2120.67,228.256 2121.24,228.433 2121.81,227.323 2122.38,225.389 2122.95,227.842 2123.52,229.021 2124.08,228.057 2124.65,228.289 2125.22,227.404 2125.79,226.537 2126.36,227.854 2126.93,229.415 2127.49,228.541 2128.06,230.884 2128.63,230.789 2129.2,231.829 2129.77,231.815 2130.34,232.054 2130.9,232.009 2131.47,232.958 2132.04,232.846 2132.61,234.749 2133.18,235.377 2133.75,234.091 2134.31,232.931 2134.88,232.663 2135.45,231.619 2136.02,230.18 2136.59,229.096 2137.16,230.115 2137.72,231.045 2138.29,233.004 2138.86,231.857 2139.43,230.705 2140,230.537 2140.57,231.559 2141.13,232.716 2141.7,231.75 2142.27,231.422 2142.84,227.095 2143.41,230.379 2143.98,231.246 2144.54,232.07 2145.11,231.745 2145.68,232.348 2146.25,228.923 2146.82,230.035 2147.39,230.722 2147.95,225.427 2148.52,225.532 2149.09,227.878 2149.66,227.89 2150.23,228.892 2150.8,229.917 2151.36,230.815 2151.93,232.566 2152.5,234.539 2153.07,232.948 2153.64,233.673 2154.21,231.459 2154.77,233.433 2155.34,231.165 2155.91,232.059 2156.48,231.917 2157.05,230.629 2157.62,232.416 2158.18,233.248 2158.75,232.954 2159.32,232.508 2159.89,233.441 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip060)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.038 ± 0.025\n  with uncertainty of ± 0.002297218851893047\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01842 ± (0.00424399, 0.00391408) (MC)\n  95% confidence interval: [-4.02643, -4.01018] (MC)\n  linear error propagation: -4.01846 ± 0.00417187\n  |δ_y| = |0.00230482| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.01842179880599, val_l = 0.008006700877139394, val_u = 0.008237291682535286)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip090\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip090)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip091\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip090)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip092\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1136.84 2211.02,1136.84 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,948.113 2211.02,948.113 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,759.389 2211.02,759.389 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,570.664 2211.02,570.664 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,381.94 2211.02,381.94 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,193.215 2211.02,193.215 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1136.84 365.751,1136.84 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,948.113 365.751,948.113 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,759.389 365.751,759.389 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,570.664 365.751,570.664 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,381.94 365.751,381.94 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,193.215 365.751,193.215 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M298.909 1122.64 Q295.298 1122.64 293.469 1126.2 Q291.664 1129.74 291.664 1136.87 Q291.664 1143.98 293.469 1147.54 Q295.298 1151.09 298.909 1151.09 Q302.543 1151.09 304.349 1147.54 Q306.177 1143.98 306.177 1136.87 Q306.177 1129.74 304.349 1126.2 Q302.543 1122.64 298.909 1122.64 M298.909 1118.93 Q304.719 1118.93 307.775 1123.54 Q310.853 1128.12 310.853 1136.87 Q310.853 1145.6 307.775 1150.21 Q304.719 1154.79 298.909 1154.79 Q293.099 1154.79 290.02 1150.21 Q286.964 1145.6 286.964 1136.87 Q286.964 1128.12 290.02 1123.54 Q293.099 1118.93 298.909 1118.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M259.557 961.458 L267.196 961.458 L267.196 935.093 L258.886 936.759 L258.886 932.5 L267.15 930.833 L271.826 930.833 L271.826 961.458 L279.465 961.458 L279.465 965.393 L259.557 965.393 L259.557 961.458 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M298.909 933.912 Q295.298 933.912 293.469 937.477 Q291.664 941.019 291.664 948.148 Q291.664 955.255 293.469 958.819 Q295.298 962.361 298.909 962.361 Q302.543 962.361 304.349 958.819 Q306.177 955.255 306.177 948.148 Q306.177 941.019 304.349 937.477 Q302.543 933.912 298.909 933.912 M298.909 930.208 Q304.719 930.208 307.775 934.815 Q310.853 939.398 310.853 948.148 Q310.853 956.875 307.775 961.481 Q304.719 966.065 298.909 966.065 Q293.099 966.065 290.02 961.481 Q286.964 956.875 286.964 948.148 Q286.964 939.398 290.02 934.815 Q293.099 930.208 298.909 930.208 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M262.775 772.734 L279.094 772.734 L279.094 776.669 L257.15 776.669 L257.15 772.734 Q259.812 769.979 264.395 765.349 Q269.002 760.697 270.182 759.354 Q272.428 756.831 273.307 755.095 Q274.21 753.336 274.21 751.646 Q274.21 748.891 272.266 747.155 Q270.344 745.419 267.242 745.419 Q265.043 745.419 262.59 746.183 Q260.159 746.947 257.381 748.498 L257.381 743.776 Q260.205 742.641 262.659 742.063 Q265.113 741.484 267.15 741.484 Q272.52 741.484 275.715 744.169 Q278.909 746.854 278.909 751.345 Q278.909 753.475 278.099 755.396 Q277.312 757.294 275.205 759.887 Q274.627 760.558 271.525 763.775 Q268.423 766.97 262.775 772.734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M298.909 745.188 Q295.298 745.188 293.469 748.752 Q291.664 752.294 291.664 759.424 Q291.664 766.53 293.469 770.095 Q295.298 773.636 298.909 773.636 Q302.543 773.636 304.349 770.095 Q306.177 766.53 306.177 759.424 Q306.177 752.294 304.349 748.752 Q302.543 745.188 298.909 745.188 M298.909 741.484 Q304.719 741.484 307.775 746.09 Q310.853 750.674 310.853 759.424 Q310.853 768.15 307.775 772.757 Q304.719 777.34 298.909 777.34 Q293.099 777.34 290.02 772.757 Q286.964 768.15 286.964 759.424 Q286.964 750.674 290.02 746.09 Q293.099 741.484 298.909 741.484 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M272.914 569.31 Q276.27 570.028 278.145 572.296 Q280.043 574.565 280.043 577.898 Q280.043 583.014 276.525 585.815 Q273.006 588.616 266.525 588.616 Q264.349 588.616 262.034 588.176 Q259.742 587.759 257.289 586.903 L257.289 582.389 Q259.233 583.523 261.548 584.102 Q263.863 584.68 266.386 584.68 Q270.784 584.68 273.076 582.944 Q275.39 581.208 275.39 577.898 Q275.39 574.843 273.238 573.13 Q271.108 571.393 267.289 571.393 L263.261 571.393 L263.261 567.551 L267.474 567.551 Q270.923 567.551 272.752 566.185 Q274.58 564.796 274.58 562.204 Q274.58 559.542 272.682 558.13 Q270.807 556.694 267.289 556.694 Q265.367 556.694 263.168 557.111 Q260.969 557.528 258.33 558.407 L258.33 554.241 Q260.992 553.5 263.307 553.13 Q265.645 552.759 267.705 552.759 Q273.029 552.759 276.131 555.19 Q279.233 557.597 279.233 561.718 Q279.233 564.588 277.59 566.579 Q275.946 568.546 272.914 569.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M298.909 556.463 Q295.298 556.463 293.469 560.028 Q291.664 563.569 291.664 570.699 Q291.664 577.805 293.469 581.37 Q295.298 584.912 298.909 584.912 Q302.543 584.912 304.349 581.37 Q306.177 577.805 306.177 570.699 Q306.177 563.569 304.349 560.028 Q302.543 556.463 298.909 556.463 M298.909 552.759 Q304.719 552.759 307.775 557.366 Q310.853 561.949 310.853 570.699 Q310.853 579.426 307.775 584.032 Q304.719 588.616 298.909 588.616 Q293.099 588.616 290.02 584.032 Q286.964 579.426 286.964 570.699 Q286.964 561.949 290.02 557.366 Q293.099 552.759 298.909 552.759 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M271.594 368.734 L259.789 387.183 L271.594 387.183 L271.594 368.734 M270.367 364.66 L276.247 364.66 L276.247 387.183 L281.177 387.183 L281.177 391.072 L276.247 391.072 L276.247 399.22 L271.594 399.22 L271.594 391.072 L255.992 391.072 L255.992 386.558 L270.367 364.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M298.909 367.738 Q295.298 367.738 293.469 371.303 Q291.664 374.845 291.664 381.974 Q291.664 389.081 293.469 392.646 Q295.298 396.187 298.909 396.187 Q302.543 396.187 304.349 392.646 Q306.177 389.081 306.177 381.974 Q306.177 374.845 304.349 371.303 Q302.543 367.738 298.909 367.738 M298.909 364.035 Q304.719 364.035 307.775 368.641 Q310.853 373.225 310.853 381.974 Q310.853 390.701 307.775 395.308 Q304.719 399.891 298.909 399.891 Q293.099 399.891 290.02 395.308 Q286.964 390.701 286.964 381.974 Q286.964 373.225 290.02 368.641 Q293.099 364.035 298.909 364.035 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M258.793 175.935 L277.15 175.935 L277.15 179.87 L263.076 179.87 L263.076 188.343 Q264.094 187.995 265.113 187.833 Q266.131 187.648 267.15 187.648 Q272.937 187.648 276.316 190.819 Q279.696 193.991 279.696 199.407 Q279.696 204.986 276.224 208.088 Q272.752 211.167 266.432 211.167 Q264.256 211.167 261.988 210.796 Q259.742 210.426 257.335 209.685 L257.335 204.986 Q259.418 206.12 261.641 206.676 Q263.863 207.231 266.34 207.231 Q270.344 207.231 272.682 205.125 Q275.02 203.018 275.02 199.407 Q275.02 195.796 272.682 193.69 Q270.344 191.583 266.34 191.583 Q264.465 191.583 262.59 192 Q260.738 192.417 258.793 193.296 L258.793 175.935 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M298.909 179.014 Q295.298 179.014 293.469 182.579 Q291.664 186.12 291.664 193.25 Q291.664 200.356 293.469 203.921 Q295.298 207.463 298.909 207.463 Q302.543 207.463 304.349 203.921 Q306.177 200.356 306.177 193.25 Q306.177 186.12 304.349 182.579 Q302.543 179.014 298.909 179.014 M298.909 175.31 Q304.719 175.31 307.775 179.917 Q310.853 184.5 310.853 193.25 Q310.853 201.977 307.775 206.583 Q304.719 211.167 298.909 211.167 Q293.099 211.167 290.02 206.583 Q286.964 201.977 286.964 193.25 Q286.964 184.5 290.02 179.917 Q293.099 175.31 298.909 175.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip092)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,997.781 400.199,870.029 400.786,752.812 401.372,645.422 401.958,684.852 402.545,588.018 403.131,733.363 403.718,747.793 404.304,661.655 404.891,581.358 405.477,675.738 406.063,599.823 406.65,530.596 407.236,466.652 407.823,544.513 408.409,487.636 408.995,434.216 409.582,386.07 410.168,344.132 410.755,307.533 411.341,273.075 411.927,290.781 412.514,262.063 413.1,237.861 413.687,256.629 414.273,236.978 414.86,219.895 415.446,238.569 416.032,223.79 416.619,240.843 417.205,257.044 417.792,298.194 418.378,285.986 418.964,278.687 419.551,272.17 420.137,288.66 420.724,285.376 421.31,282.774 421.896,298.241 422.483,314.307 423.069,314.377 423.656,316.739 424.242,333.414 424.829,363.588 425.415,366.701 426.001,383.197 426.588,389.188 427.174,396.629 427.761,413.932 428.347,430.596 428.933,446.653 429.52,453.115 430.106,469.121 430.693,476.829 431.279,485.701 431.865,493.506 432.452,531.237 433.038,553.255 433.625,561.162 434.211,582.306 434.798,603.018 435.384,622.697 435.97,636.05 436.557,649.363 437.143,678.457 437.73,691.065 438.316,708.457 438.902,725.543 439.489,746.822 440.075,757.463 440.662,763.452 441.248,782.962 441.835,797.489 442.421,816.069 443.007,822.667 443.594,840.237 444.18,849.806 444.767,855.202 445.353,868.331 445.939,874.075 446.526,883.025 447.112,888.456 447.699,897.444 448.285,903.009 448.871,918.438 449.458,924.177 450.044,932.985 450.631,947.563 451.217,952.949 451.804,967.083 452.39,974.814 452.976,982.39 453.563,994.897 454.149,1006.76 454.736,1018.36 455.322,1024.14 455.908,1029.92 456.495,1038.51 457.081,1044.14 457.668,1054.71 458.254,1057.64 458.84,1065.25 459.427,1069.84 460.013,1072.32 460.6,1086.35 461.186,1091 461.773,1095.69 462.359,1100.16 462.945,1102.31 463.532,1109.05 464.118,1111.22 464.705,1112.84 465.291,1123.29 465.877,1131.39 466.464,1134.98 467.05,1138.59 467.637,1142.03 468.223,1149.19 468.809,1150.19 469.396,1157.36 469.982,1158.27 470.569,1165.1 471.155,1167.25 471.742,1171.61 472.328,1177.56 472.914,1177.98 473.501,1180.12 474.087,1182.37 474.674,1182.67 475.26,1183.04 475.846,1183.26 476.433,1187.62 477.019,1191.88 477.606,1190.29 478.192,1192.79 478.778,1191.39 479.365,1201.08 479.951,1203.05 480.538,1206.31 481.124,1209.88 481.711,1213.21 482.297,1211.33 482.883,1213 483.47,1214.56 484.056,1212.63 484.643,1214.2 485.229,1214.05 485.815,1217.58 486.402,1225.91 486.988,1229.07 487.575,1230.38 488.161,1229.97 488.748,1229.16 489.334,1228.44 489.92,1228.04 490.507,1229.62 491.093,1229.41 491.68,1229.03 492.266,1228.45 492.852,1228.68 493.439,1226.76 494.025,1228.29 494.612,1228.15 495.198,1230.94 495.784,1231.92 496.371,1233.06 496.957,1235.43 497.544,1234.75 498.13,1237.44 498.717,1235.3 499.303,1234.55 499.889,1237.11 500.476,1235.01 501.062,1236.16 501.649,1237.11 502.235,1233.49 502.821,1233.24 503.408,1233.07 503.994,1235.86 504.581,1237.05 505.167,1236.3 505.753,1234.3 506.34,1235.74 506.926,1238.51 507.513,1244.21 508.099,1243.57 508.686,1242.68 509.272,1243.5 509.858,1242.8 510.445,1242.39 511.031,1241.81 511.618,1242.83 512.204,1242.19 512.79,1241.8 513.377,1243.12 513.963,1241.16 514.55,1243.58 515.136,1242.82 515.722,1240.71 516.309,1240.22 516.895,1242.69 517.482,1243.65 518.068,1244.12 518.655,1248.21 519.241,1248.88 519.827,1247.85 520.414,1250.19 521,1249.23 521.587,1248.45 522.173,1247.37 522.759,1244.81 523.346,1242.73 523.932,1248.33 524.519,1249.28 525.105,1246.5 525.691,1250.53 526.278,1247.89 526.864,1247.16 527.451,1243.11 528.037,1241.12 528.624,1240.65 529.21,1238.79 529.796,1236.8 530.383,1237.94 530.969,1237.76 531.556,1239.2 532.142,1240.13 532.728,1239.82 533.315,1236.19 533.901,1235.73 534.488,1233.81 535.074,1235.24 535.661,1236.75 536.247,1235.13 536.833,1234.85 537.42,1233.11 538.006,1231.55 538.593,1230.13 539.179,1234.32 539.765,1232.89 540.352,1234.41 540.938,1234.24 541.525,1235.57 542.111,1235.5 542.697,1236.65 543.284,1236.06 543.87,1238.9 544.457,1237.05 545.043,1236.62 545.63,1234.97 546.216,1236.16 546.802,1237.33 547.389,1235.24 547.975,1231.76 548.562,1233.08 549.148,1232.86 549.734,1232.85 550.321,1231.36 550.907,1232.92 551.494,1232.93 552.08,1234.38 552.666,1237.23 553.253,1236.89 553.839,1239.5 554.426,1237.33 555.012,1237.15 555.599,1235.43 556.185,1235.38 556.771,1233.82 557.358,1233.74 557.944,1233.17 558.531,1232.74 559.117,1236.92 559.703,1238.61 560.29,1240.95 560.876,1240.21 561.463,1239.69 562.049,1239.33 562.635,1238.77 563.222,1239.7 563.808,1240.61 564.395,1238.71 564.981,1241.5 565.568,1239.29 566.154,1243.24 566.74,1242.41 567.327,1239.92 567.913,1237.96 568.5,1237.29 569.086,1238.35 569.672,1238.06 570.259,1239.2 570.845,1238.23 571.432,1237.6 572.018,1239.95 572.605,1240.87 573.191,1240.39 573.777,1238.35 574.364,1239.34 574.95,1232.09 575.537,1231.84 576.123,1230.04 576.709,1229.76 577.296,1228.12 577.882,1226.51 578.469,1226.4 579.055,1226.42 579.641,1227.62 580.228,1227.4 580.814,1227.27 581.401,1225.67 581.987,1225.56 582.574,1226.26 583.16,1224.72 583.746,1229.61 584.333,1229.46 584.919,1229.46 585.506,1230.9 586.092,1229.46 586.678,1233.95 587.265,1233.44 587.851,1234.65 588.438,1234.25 589.024,1233.49 589.61,1231.56 590.197,1234.54 590.783,1232.58 591.37,1230.69 591.956,1231.91 592.543,1234.46 593.129,1232.31 593.715,1231.82 594.302,1231.55 594.888,1231.21 595.475,1229.35 596.061,1230.92 596.647,1230.59 597.234,1229.06 597.82,1227.36 598.407,1229.06 598.993,1228.67 599.579,1223.94 600.166,1225.64 600.752,1227.37 601.339,1230.3 601.925,1227.06 602.512,1225.5 603.098,1224.19 603.684,1230.22 604.271,1227.05 604.857,1228.3 605.444,1228.18 606.03,1227.75 606.616,1229.15 607.203,1228.78 607.789,1228.46 608.376,1225.26 608.962,1223.76 609.548,1220.8 610.135,1222.34 610.721,1224.27 611.308,1225.51 611.894,1228.32 612.481,1226.81 613.067,1225.04 613.653,1226.34 614.24,1224.45 614.826,1224.59 615.413,1221.36 615.999,1223.16 616.585,1223.13 617.172,1223.21 617.758,1224.38 618.345,1224.29 618.931,1222.75 619.518,1224.27 620.104,1224.58 620.69,1224.64 621.277,1224.53 621.863,1224.45 622.45,1224.25 623.036,1222.65 623.622,1224.46 624.209,1229.08 624.795,1229.38 625.382,1229.29 625.968,1228.91 626.554,1228.45 627.141,1229.22 627.727,1230.57 628.314,1227.33 628.9,1228.8 629.487,1230.15 630.073,1231.69 630.659,1229.81 631.246,1229.3 631.832,1227.37 632.419,1227.54 633.005,1227.55 633.591,1229.14 634.178,1228.99 634.764,1230.47 635.351,1231.93 635.937,1231.29 636.523,1230.71 637.11,1231.98 637.696,1231.47 638.283,1230.87 638.869,1233.68 639.456,1233.13 640.042,1232.85 640.628,1233.45 641.215,1233.06 641.801,1229.84 642.388,1232.7 642.974,1233.74 643.56,1234.6 644.147,1230.66 644.733,1231.53 645.32,1229.11 645.906,1230.48 646.492,1231.18 647.079,1230.66 647.665,1231.59 648.252,1233.87 648.838,1233.12 649.425,1231.03 650.011,1231.96 650.597,1234.27 651.184,1235.16 651.77,1234.36 652.357,1233.57 652.943,1230.08 653.529,1231.02 654.116,1230.59 654.702,1230.22 655.289,1231.13 655.875,1230.68 656.462,1228.56 657.048,1226.67 657.634,1226.63 658.221,1226.36 658.807,1224.41 659.394,1223.88 659.98,1222.25 660.566,1220.7 661.153,1217.71 661.739,1219.14 662.326,1217.8 662.912,1221.16 663.498,1219.52 664.085,1219.98 664.671,1218.42 665.258,1217.08 665.844,1217.54 666.431,1216.07 667.017,1217.78 667.603,1215.01 668.19,1216.86 668.776,1218.45 669.363,1218.65 669.949,1217.29 670.535,1218.96 671.122,1220.93 671.708,1222.37 672.295,1220.84 672.881,1227.13 673.467,1228.04 674.054,1230.75 674.64,1230.52 675.227,1235.58 675.813,1234.71 676.4,1235.67 676.986,1234.69 677.572,1230.94 678.159,1228.76 678.745,1229.86 679.332,1226.4 679.918,1224.46 680.504,1225.45 681.091,1223.8 681.677,1220.47 682.264,1220.81 682.85,1219.16 683.436,1216.21 684.023,1216.44 684.609,1216.43 685.196,1219.66 685.782,1221.55 686.369,1224.22 686.955,1225.5 687.541,1223.42 688.128,1221.45 688.714,1219.46 689.301,1219.35 689.887,1226.59 690.473,1224.75 691.06,1225.61 691.646,1223.52 692.233,1226.23 692.819,1224.39 693.405,1227.36 693.992,1223.54 694.578,1224.85 695.165,1222.8 695.751,1222.6 696.338,1222.31 696.924,1223.76 697.51,1223.25 698.097,1223.05 698.683,1220.14 699.27,1219.99 699.856,1218.34 700.442,1215.11 701.029,1219.81 701.615,1221.41 702.202,1221.05 702.788,1222.39 703.375,1222.28 703.961,1221.94 704.547,1223.06 705.134,1224.27 705.72,1220.92 706.307,1224.22 706.893,1223.58 707.479,1223.26 708.066,1222.8 708.652,1225.37 709.239,1226.39 709.825,1225.62 710.411,1223.65 710.998,1221.58 711.584,1224.37 712.171,1225.58 712.757,1225.44 713.344,1229.48 713.93,1230.09 714.516,1230.7 715.103,1233.45 715.689,1232.44 716.276,1231.37 716.862,1229.06 717.448,1226.66 718.035,1224.62 718.621,1222.74 719.208,1222.51 719.794,1223.59 720.38,1221.63 720.967,1220.04 721.553,1218.4 722.14,1217.03 722.726,1215.6 723.313,1212.66 723.899,1211.5 724.485,1214.82 725.072,1214.86 725.658,1216.82 726.245,1218.1 726.831,1215.37 727.417,1218.43 728.004,1217.95 728.59,1216.32 729.177,1215.06 729.763,1212.01 730.349,1212.23 730.936,1216.96 731.522,1214.24 732.109,1214.45 732.695,1211.37 733.282,1210.17 733.868,1212.16 734.454,1212.34 735.041,1211.11 735.627,1212.75 736.214,1213 736.8,1214.96 737.386,1212.24 737.973,1214.07 738.559,1215.48 739.146,1215.3 739.732,1217.08 740.318,1215.66 740.905,1214.42 741.491,1212.83 742.078,1213.41 742.664,1212.28 743.251,1214.31 743.837,1214.53 744.423,1214.64 745.01,1213.37 745.596,1213.67 746.183,1213.81 746.769,1212.34 747.355,1211.08 747.942,1212.92 748.528,1214.69 749.115,1213.59 749.701,1213.69 750.288,1210.77 750.874,1211.22 751.46,1211.65 752.047,1213.59 752.633,1212.24 753.22,1215.9 753.806,1217.38 754.392,1218.72 754.979,1217.05 755.565,1212.42 756.152,1213.99 756.738,1212.33 757.324,1212.73 757.911,1216.17 758.497,1218.04 759.084,1222.87 759.67,1224.38 760.257,1224.05 760.843,1224.13 761.429,1223.87 762.016,1223.84 762.602,1223.44 763.189,1221.75 763.775,1223.18 764.361,1222.62 764.948,1219.04 765.534,1215.67 766.121,1214.27 766.707,1211.1 767.293,1209.65 767.88,1209.64 768.466,1213.27 769.053,1211.84 769.639,1210.22 770.226,1212.08 770.812,1211.18 771.398,1211.38 771.985,1212.93 772.571,1216.19 773.158,1216.42 773.744,1214.72 774.33,1211.99 774.917,1213.99 775.503,1218.53 776.09,1221.49 776.676,1222.55 777.262,1223.81 777.849,1224.84 778.435,1224.58 779.022,1227.37 779.608,1223.8 780.195,1227.82 780.781,1225.88 781.367,1225.23 781.954,1224.99 782.54,1226.09 783.127,1223.83 783.713,1224.51 784.299,1220.73 784.886,1221.69 785.472,1221.59 786.059,1222.46 786.645,1219.23 787.232,1220.79 787.818,1218.89 788.404,1220.34 788.991,1218.24 789.577,1216.55 790.164,1219.78 790.75,1219.33 791.336,1218.97 791.923,1217.17 792.509,1215.33 793.096,1220.37 793.682,1220.12 794.268,1219.67 794.855,1217.96 795.441,1216.13 796.028,1220.46 796.614,1218.63 797.201,1216.7 797.787,1216.45 798.373,1217.88 798.96,1214.73 799.546,1217.76 800.133,1212.71 800.719,1212.69 801.305,1211.03 801.892,1214.34 802.478,1215.88 803.065,1212.87 803.651,1209.87 804.237,1208.82 804.824,1207.66 805.41,1209.59 805.997,1208.35 806.583,1213.28 807.17,1215.08 807.756,1213.28 808.342,1213.13 808.929,1214.53 809.515,1212.95 810.102,1214.82 810.688,1216.49 811.274,1214.98 811.861,1214.94 812.447,1213.55 813.034,1215.01 813.62,1213.4 814.206,1215.56 814.793,1215.69 815.379,1215.82 815.966,1214.37 816.552,1217.33 817.139,1216.01 817.725,1217.58 818.311,1211.66 818.898,1208.94 819.484,1213.88 820.071,1218.52 820.657,1221.28 821.243,1221.03 821.83,1218.14 822.416,1218.32 823.003,1218.43 823.589,1216.87 824.175,1216.82 824.762,1218.14 825.348,1220.88 825.935,1220.56 826.521,1220.45 827.108,1223.01 827.694,1222.66 828.28,1223.58 828.867,1221.41 829.453,1221.02 830.04,1220.9 830.626,1218.62 831.212,1218.56 831.799,1216.92 832.385,1216.53 832.972,1214.17 833.558,1217.41 834.145,1217.07 834.731,1215.2 835.317,1215.18 835.904,1218.28 836.49,1217.88 837.077,1217.71 837.663,1217.39 838.249,1217.62 838.836,1214.49 839.422,1211.7 840.009,1213.37 840.595,1215.05 841.181,1211.85 841.768,1210.46 842.354,1213.94 842.941,1214.06 843.527,1211.18 844.114,1211.39 844.7,1213.54 845.286,1210.65 845.873,1210.95 846.459,1211.47 847.046,1210.25 847.632,1210.71 848.218,1210.88 848.805,1209.47 849.391,1209.77 849.978,1211.13 850.564,1209.91 851.15,1207.15 851.737,1212.02 852.323,1215.23 852.91,1216.78 853.496,1213.9 854.083,1213.79 854.669,1210.86 855.255,1212.27 855.842,1209.12 856.428,1210.9 857.015,1214.13 857.601,1214.24 858.187,1209.88 858.774,1210.04 859.36,1210.53 859.947,1210.8 860.533,1212.41 861.119,1212.36 861.706,1211.08 862.292,1208.45 862.879,1208.74 863.465,1207.49 864.052,1208.99 864.638,1209.15 865.224,1210.79 865.811,1210.97 866.397,1212.95 866.984,1213.2 867.57,1214.98 868.156,1213.32 868.743,1211.96 869.329,1211.8 869.916,1213.37 870.502,1212.1 871.089,1213.61 871.675,1215.36 872.261,1217.08 872.848,1216.81 873.434,1215.14 874.021,1216.97 874.607,1218.48 875.193,1218.11 875.78,1219.15 876.366,1217.39 876.953,1217.14 877.539,1212.58 878.125,1214.09 878.712,1215.76 879.298,1215.87 879.885,1214.08 880.471,1214.13 881.058,1212.65 881.644,1214.36 882.23,1213.04 882.817,1214.66 883.403,1214.89 883.99,1214.75 884.576,1214.51 885.162,1217.45 885.749,1217.35 886.335,1215.55 886.922,1220.14 887.508,1224.16 888.094,1223.68 888.681,1221.71 889.267,1222.83 889.854,1220.87 890.44,1219.25 891.027,1219.07 891.613,1217.07 892.199,1215.42 892.786,1213.57 893.372,1213.69 893.959,1211.97 894.545,1212.35 895.131,1207.82 895.718,1206.71 896.304,1207.35 896.891,1203.11 897.477,1203.96 898.063,1204.63 898.65,1203.86 899.236,1204.4 899.823,1203.39 900.409,1206.98 900.996,1208.9 901.582,1209.11 902.168,1210.99 902.755,1213.97 903.341,1213.85 903.928,1212.41 904.514,1214.19 905.1,1211.18 905.687,1212.61 906.273,1213.98 906.86,1214.33 907.446,1212.84 908.032,1211.46 908.619,1211.58 909.205,1211.94 909.792,1213.73 910.378,1218.36 910.965,1216.59 911.551,1215.04 912.137,1219.77 912.724,1220.9 913.31,1220.27 913.897,1216.53 914.483,1218.08 915.069,1221.05 915.656,1220.61 916.242,1218.38 916.829,1218.02 917.415,1222.24 918.002,1223.1 918.588,1227.13 919.174,1229.5 919.761,1227.37 920.347,1228.28 920.934,1225.9 921.52,1225.4 922.106,1223.34 922.693,1224.5 923.279,1223.8 923.866,1224.75 924.452,1221.08 925.038,1222.69 925.625,1217.67 926.211,1217.11 926.798,1216.57 927.384,1216.36 927.971,1216.35 928.557,1216.18 929.143,1219.03 929.73,1217.48 930.316,1215.64 930.903,1216.97 931.489,1223.14 932.075,1222.78 932.662,1220.97 933.248,1219.04 933.835,1218.81 934.421,1218.62 935.007,1217.07 935.594,1215.15 936.18,1218.22 936.767,1219.48 937.353,1217.7 937.94,1218.79 938.526,1216.97 939.112,1218.24 939.699,1213.35 940.285,1213.42 940.872,1211.92 941.458,1211.79 942.044,1211.9 942.631,1212.15 943.217,1212.46 943.804,1212.67 944.39,1212.77 944.976,1208.14 945.563,1209.88 946.149,1208.68 946.736,1207.44 947.322,1206.38 947.909,1206.75 948.495,1207.1 949.081,1207.4 949.668,1206.21 950.254,1206.46 950.841,1204.92 951.427,1204.82 952.013,1205.48 952.6,1209.08 953.186,1208.06 953.773,1208.49 954.359,1208.73 954.945,1209.18 955.532,1211.13 956.118,1211.1 956.705,1212.78 957.291,1215.71 957.878,1215.43 958.464,1212.43 959.05,1214.16 959.637,1213.93 960.223,1210.54 960.81,1210.69 961.396,1207.88 961.982,1208.19 962.569,1208.71 963.155,1209 963.742,1209.25 964.328,1209.39 964.915,1208.3 965.501,1210.14 966.087,1213.01 966.674,1213.52 967.26,1220.72 967.847,1218.73 968.433,1214.01 969.019,1212.27 969.606,1212.02 970.192,1210.29 970.779,1207.2 971.365,1209.27 971.951,1209.25 972.538,1209.56 973.124,1211.16 973.711,1211.23 974.297,1211.3 974.884,1209.71 975.47,1212.85 976.056,1210.12 976.643,1214.79 977.229,1217.78 977.816,1217.72 978.402,1217.38 978.988,1217.01 979.575,1215.32 980.161,1211.91 980.748,1212.25 981.334,1213.88 981.92,1215.69 982.507,1214.21 983.093,1214.51 983.68,1213.14 984.266,1210.12 984.853,1211.89 985.439,1211.91 986.025,1211.65 986.612,1212.09 987.198,1211.84 987.785,1213.43 988.371,1211.86 988.957,1212.19 989.544,1212.43 990.13,1215.64 990.717,1211.18 991.303,1211.54 991.889,1211.95 992.476,1213.49 993.062,1211.73 993.649,1213.26 994.235,1214.92 994.822,1212.02 995.408,1210.07 995.994,1207.17 996.581,1207.26 997.167,1208.97 997.754,1207.89 998.34,1211.53 998.926,1213.25 999.513,1213.05 1000.1,1217.48 1000.69,1217.42 1001.27,1217.21 1001.86,1218.56 1002.44,1221.45 1003.03,1221.21 1003.62,1219.4 1004.2,1217.46 1004.79,1218.43 1005.38,1216.75 1005.96,1216.91 1006.55,1212.32 1007.14,1215.34 1007.72,1216.58 1008.31,1216.46 1008.9,1214.76 1009.48,1217.94 1010.07,1216.3 1010.65,1216.63 1011.24,1216.49 1011.83,1213.29 1012.41,1211.48 1013,1211.36 1013.59,1214.47 1014.17,1217.3 1014.76,1217.01 1015.35,1216.7 1015.93,1217.83 1016.52,1215.85 1017.11,1214.18 1017.69,1214.36 1018.28,1217.49 1018.86,1215.69 1019.45,1214.14 1020.04,1214.03 1020.62,1211.03 1021.21,1211 1021.8,1212.26 1022.38,1212.39 1022.97,1213.72 1023.56,1213.58 1024.14,1213.54 1024.73,1213.23 1025.32,1211.59 1025.9,1210.04 1026.49,1210.69 1027.07,1212.08 1027.66,1211.71 1028.25,1210.15 1028.83,1213.45 1029.42,1211.91 1030.01,1215.23 1030.59,1215.16 1031.18,1215.08 1031.77,1217.93 1032.35,1216.26 1032.94,1216.02 1033.52,1217.62 1034.11,1218.96 1034.7,1218.55 1035.28,1218.1 1035.87,1218.07 1036.46,1220.84 1037.04,1218.77 1037.63,1218.8 1038.22,1218.45 1038.8,1222.23 1039.39,1221.71 1039.98,1221.38 1040.56,1222.36 1041.15,1223.54 1041.73,1219.24 1042.32,1215.63 1042.91,1215.85 1043.49,1217.33 1044.08,1215.64 1044.67,1215.49 1045.25,1216.89 1045.84,1218.38 1046.43,1218.2 1047.01,1219.81 1047.6,1223.05 1048.19,1219.13 1048.77,1221.84 1049.36,1218.12 1049.94,1217.88 1050.53,1216.19 1051.12,1214.3 1051.7,1214.14 1052.29,1210.99 1052.88,1209.44 1053.46,1209.49 1054.05,1209.55 1054.64,1209.59 1055.22,1211.53 1055.81,1211.57 1056.39,1211.86 1056.98,1212.03 1057.57,1213.76 1058.15,1217 1058.74,1218.61 1059.33,1215.38 1059.91,1216.46 1060.5,1219.34 1061.09,1220.71 1061.67,1221.64 1062.26,1222.7 1062.85,1221.85 1063.43,1216.51 1064.02,1216.58 1064.6,1220.79 1065.19,1222.94 1065.78,1219.36 1066.36,1216.23 1066.95,1219.11 1067.54,1218.72 1068.12,1216.99 1068.71,1215.36 1069.3,1213.56 1069.88,1211.87 1070.47,1211.91 1071.06,1213.62 1071.64,1211.99 1072.23,1210.43 1072.81,1209.15 1073.4,1211.25 1073.99,1204.78 1074.57,1206.64 1075.16,1205.66 1075.75,1205.86 1076.33,1206.2 1076.92,1207.97 1077.51,1211.3 1078.09,1209.6 1078.68,1206.55 1079.26,1206.71 1079.85,1206.97 1080.44,1210.72 1081.02,1210.81 1081.61,1212.5 1082.2,1212.74 1082.78,1214.13 1083.37,1215.82 1083.96,1212.81 1084.54,1214.46 1085.13,1211.45 1085.72,1209.9 1086.3,1213.03 1086.89,1211.64 1087.47,1211.63 1088.06,1211.59 1088.65,1208.45 1089.23,1206.96 1089.82,1210.6 1090.41,1212.28 1090.99,1212.33 1091.58,1210.79 1092.17,1209.49 1092.75,1214.44 1093.34,1215.51 1093.93,1213.76 1094.51,1210.51 1095.1,1210.49 1095.68,1212.16 1096.27,1210.75 1096.86,1212.38 1097.44,1212.27 1098.03,1210.69 1098.62,1210.84 1099.2,1212.4 1099.79,1215.95 1100.38,1215.65 1100.96,1212.65 1101.55,1209.65 1102.14,1213 1102.72,1212.79 1103.31,1212.73 1103.89,1214.38 1104.48,1219.12 1105.07,1219.34 1105.65,1217.53 1106.24,1215.77 1106.83,1218.76 1107.41,1218.72 1108,1218.32 1108.59,1219.58 1109.17,1220.86 1109.76,1220.66 1110.34,1217.54 1110.93,1218.86 1111.52,1215.75 1112.1,1214.06 1112.69,1215.56 1113.28,1216.88 1113.86,1216.69 1114.45,1216.26 1115.04,1211.53 1115.62,1213.26 1116.21,1213 1116.8,1210.17 1117.38,1210.27 1117.97,1208.82 1118.55,1209.28 1119.14,1211.15 1119.73,1209.86 1120.31,1212.89 1120.9,1214.26 1121.49,1212.3 1122.07,1212.38 1122.66,1210.98 1123.25,1209.6 1123.83,1206.73 1124.42,1203.86 1125.01,1203.09 1125.59,1203.62 1126.18,1204.06 1126.76,1202.98 1127.35,1202.09 1127.94,1204.37 1128.52,1201.92 1129.11,1203.92 1129.7,1204.33 1130.28,1204.8 1130.87,1208.4 1131.46,1202.6 1132.04,1204.77 1132.63,1203.52 1133.21,1205.12 1133.8,1205.39 1134.39,1205.9 1134.97,1204.8 1135.56,1205.04 1136.15,1205.59 1136.73,1204.29 1137.32,1204.94 1137.91,1203.62 1138.49,1205.8 1139.08,1209.34 1139.67,1209.74 1140.25,1210.24 1140.84,1210.28 1141.42,1211.97 1142.01,1215.02 1142.6,1217.8 1143.18,1218.99 1143.77,1219.01 1144.36,1218.74 1144.94,1216.58 1145.53,1219.6 1146.12,1217.92 1146.7,1217.43 1147.29,1217.5 1147.88,1216.06 1148.46,1214.3 1149.05,1211.19 1149.63,1211.37 1150.22,1214.57 1150.81,1214.53 1151.39,1215.95 1151.98,1212.94 1152.57,1214.76 1153.15,1214.62 1153.74,1214.66 1154.33,1217.66 1154.91,1219.03 1155.5,1218.72 1156.09,1220.48 1156.67,1220.12 1157.26,1221.16 1157.84,1220.89 1158.43,1218.91 1159.02,1223.1 1159.6,1221.13 1160.19,1222.19 1160.78,1221.8 1161.36,1218.47 1161.95,1216.52 1162.54,1215.13 1163.12,1214.83 1163.71,1214.77 1164.29,1210.06 1164.88,1210.16 1165.47,1210.71 1166.05,1209.31 1166.64,1212.4 1167.23,1210.72 1167.81,1209.38 1168.4,1209.22 1168.99,1208.12 1169.57,1212.93 1170.16,1212.82 1170.75,1211.64 1171.33,1208.55 1171.92,1213.37 1172.5,1213.5 1173.09,1213.56 1173.68,1216.52 1174.26,1219.47 1174.85,1215.88 1175.44,1217.05 1176.02,1216.46 1176.61,1216.54 1177.2,1216.41 1177.78,1216.13 1178.37,1216.23 1178.96,1214.82 1179.54,1217.94 1180.13,1217.63 1180.71,1222.05 1181.3,1223.36 1181.89,1221.05 1182.47,1215.82 1183.06,1218.68 1183.65,1218.28 1184.23,1218.28 1184.82,1219.42 1185.41,1219.13 1185.99,1218.54 1186.58,1216.6 1187.16,1214.45 1187.75,1218.9 1188.34,1216.93 1188.92,1217.13 1189.51,1216.86 1190.1,1217.97 1190.68,1217.52 1191.27,1215.62 1191.86,1215 1192.44,1218.37 1193.03,1217.09 1193.62,1218.33 1194.2,1216.52 1194.79,1215.83 1195.37,1217.33 1195.96,1217.31 1196.55,1218.56 1197.13,1218.09 1197.72,1218.13 1198.31,1214.66 1198.89,1217.68 1199.48,1218.81 1200.07,1220.21 1200.65,1221.24 1201.24,1222.41 1201.83,1222.17 1202.41,1227.88 1203,1228.43 1203.58,1229.26 1204.17,1225.25 1204.76,1223.02 1205.34,1225.51 1205.93,1223.25 1206.52,1224.09 1207.1,1223.19 1207.69,1223.95 1208.28,1221.84 1208.86,1219.99 1209.45,1217.88 1210.03,1218.98 1210.62,1220.26 1211.21,1220.07 1211.79,1219.91 1212.38,1220.79 1212.97,1217.21 1213.55,1217.33 1214.14,1217.09 1214.73,1217.11 1215.31,1221.5 1215.9,1220.75 1216.49,1222.03 1217.07,1219.82 1217.66,1220.7 1218.24,1218.48 1218.83,1213.2 1219.42,1213.27 1220,1216.26 1220.59,1214.25 1221.18,1214.17 1221.76,1214.3 1222.35,1212.43 1222.94,1210.93 1223.52,1209.29 1224.11,1206.54 1224.7,1202.4 1225.28,1206.2 1225.87,1208.01 1226.45,1208.37 1227.04,1210.18 1227.63,1212.09 1228.21,1211.76 1228.8,1205.96 1229.39,1205.18 1229.97,1204.05 1230.56,1201.38 1231.15,1197.3 1231.73,1196.69 1232.32,1197.87 1232.91,1195.81 1233.49,1199.9 1234.08,1202.16 1234.66,1202.61 1235.25,1202.96 1235.84,1203.75 1236.42,1199.91 1237.01,1200.52 1237.6,1199.8 1238.18,1198.99 1238.77,1200.83 1239.36,1203.25 1239.94,1202.23 1240.53,1205.9 1241.11,1207.46 1241.7,1207.83 1242.29,1209.82 1242.87,1213.14 1243.46,1212.94 1244.05,1211.82 1244.63,1213.19 1245.22,1211.38 1245.81,1212.95 1246.39,1214.66 1246.98,1211.64 1247.57,1210.16 1248.15,1211.55 1248.74,1211.8 1249.32,1212.16 1249.91,1213.69 1250.5,1215.55 1251.08,1217.04 1251.67,1215.19 1252.26,1215.16 1252.84,1216.72 1253.43,1218.18 1254.02,1220.61 1254.6,1221.51 1255.19,1220.68 1255.78,1220.6 1256.36,1218.75 1256.95,1215.47 1257.53,1218.46 1258.12,1221.28 1258.71,1222.27 1259.29,1220 1259.88,1220.81 1260.47,1217.17 1261.05,1218.57 1261.64,1216.63 1262.23,1213.17 1262.81,1210.25 1263.4,1208.83 1263.98,1208.88 1264.57,1207.75 1265.16,1204.99 1265.74,1207.34 1266.33,1207.7 1266.92,1206.3 1267.5,1202.18 1268.09,1201.08 1268.68,1200.4 1269.26,1196.52 1269.85,1197.51 1270.44,1201.46 1271.02,1200.71 1271.61,1202.64 1272.19,1201.55 1272.78,1200.58 1273.37,1198.52 1273.95,1197.83 1274.54,1198.63 1275.13,1203.99 1275.71,1204.53 1276.3,1206.72 1276.89,1205.61 1277.47,1206.09 1278.06,1204.88 1278.65,1211.67 1279.23,1211.77 1279.82,1210.61 1280.4,1209.11 1280.99,1209.27 1281.58,1208.07 1282.16,1211.52 1282.75,1214.84 1283.34,1214.82 1283.92,1214.57 1284.51,1216.11 1285.1,1214.2 1285.68,1212.49 1286.27,1213.86 1286.86,1214.07 1287.44,1215.53 1288.03,1215.32 1288.61,1215.35 1289.2,1215.3 1289.79,1213.57 1290.37,1213.64 1290.96,1216.3 1291.55,1215.86 1292.13,1218.54 1292.72,1216.66 1293.31,1218.33 1293.89,1216.07 1294.48,1214.52 1295.06,1216.21 1295.65,1215.83 1296.24,1214.21 1296.82,1210.87 1297.41,1209.5 1298,1211.2 1298.58,1213.04 1299.17,1215.73 1299.76,1214.26 1300.34,1214.26 1300.93,1209.49 1301.52,1211.22 1302.1,1209.95 1302.69,1208.65 1303.27,1209.11 1303.86,1209.31 1304.45,1209.41 1305.03,1209.42 1305.62,1212.92 1306.21,1216.3 1306.79,1217.76 1307.38,1217.6 1307.97,1214.14 1308.55,1215.49 1309.14,1211.98 1309.73,1210.34 1310.31,1211.94 1310.9,1213.29 1311.48,1211.31 1312.07,1209.79 1312.66,1209.75 1313.24,1214.5 1313.83,1214.17 1314.42,1211.14 1315,1209.81 1315.59,1206.91 1316.18,1204.24 1316.76,1202.87 1317.35,1203.2 1317.93,1200.55 1318.52,1199.36 1319.11,1204.66 1319.69,1205.13 1320.28,1210.27 1320.87,1211.99 1321.45,1212.2 1322.04,1212.19 1322.63,1213.84 1323.21,1211.02 1323.8,1212.43 1324.39,1210.91 1324.97,1209.72 1325.56,1212.86 1326.14,1209.96 1326.73,1210.13 1327.32,1207.1 1327.9,1205.9 1328.49,1204.8 1329.08,1205.27 1329.66,1208.92 1330.25,1210.47 1330.84,1209.28 1331.42,1209.53 1332.01,1209.67 1332.6,1211.21 1333.18,1211.26 1333.77,1211.1 1334.35,1213.94 1334.94,1218.49 1335.53,1218.43 1336.11,1219.69 1336.7,1220.99 1337.29,1217.85 1337.87,1223.84 1338.46,1221.96 1339.05,1222.92 1339.63,1223.96 1340.22,1223.37 1340.8,1221.28 1341.39,1219.57 1341.98,1217.68 1342.56,1217.63 1343.15,1217.54 1343.74,1212.61 1344.32,1214.07 1344.91,1210.71 1345.5,1206.61 1346.08,1205.32 1346.67,1207.01 1347.26,1202.76 1347.84,1207.91 1348.43,1208.25 1349.01,1208.37 1349.6,1208.72 1350.19,1209.13 1350.77,1211.47 1351.36,1208.39 1351.95,1208.53 1352.53,1210.26 1353.12,1208.86 1353.71,1209.23 1354.29,1210.7 1354.88,1209.52 1355.47,1209.91 1356.05,1207.1 1356.64,1207.4 1357.22,1207.91 1357.81,1206.76 1358.4,1208.75 1358.98,1207.31 1359.57,1206.2 1360.16,1204.88 1360.74,1205.59 1361.33,1204.55 1361.92,1209.25 1362.5,1210.99 1363.09,1212.76 1363.68,1209.36 1364.26,1209.73 1364.85,1207.84 1365.43,1214.05 1366.02,1218.9 1366.61,1218.34 1367.19,1215.03 1367.78,1216.4 1368.37,1212.77 1368.95,1212.56 1369.54,1212.54 1370.13,1212.59 1370.71,1213.99 1371.3,1215.32 1371.88,1218.39 1372.47,1219.62 1373.06,1217.82 1373.64,1217.87 1374.23,1219.44 1374.82,1217.79 1375.4,1219.03 1375.99,1217.04 1376.58,1216.7 1377.16,1215.43 1377.75,1215.26 1378.34,1221.28 1378.92,1224.2 1379.51,1225.17 1380.09,1218.31 1380.68,1217.86 1381.27,1219.03 1381.85,1217.3 1382.44,1212.21 1383.03,1212.09 1383.61,1213.67 1384.2,1213.71 1384.79,1211.84 1385.37,1210.03 1385.96,1211.63 1386.55,1211.38 1387.13,1213.06 1387.72,1214.87 1388.3,1214.47 1388.89,1213.08 1389.48,1214.58 1390.06,1211.42 1390.65,1214.45 1391.24,1215.61 1391.82,1213.9 1392.41,1215.29 1393,1213.42 1393.58,1211.48 1394.17,1212.91 1394.75,1211.22 1395.34,1211.13 1395.93,1208.54 1396.51,1207.19 1397.1,1202.88 1397.69,1202 1398.27,1201.4 1398.86,1203.48 1399.45,1205.6 1400.03,1205.75 1400.62,1207.72 1401.21,1206.59 1401.79,1206.74 1402.38,1206.91 1402.96,1210.51 1403.55,1212.47 1404.14,1212.69 1404.72,1214.54 1405.31,1214.71 1405.9,1211.68 1406.48,1211.86 1407.07,1213.75 1407.66,1212.36 1408.24,1216.73 1408.83,1217.91 1409.42,1217.67 1410,1217.47 1410.59,1217.06 1411.17,1218.7 1411.76,1216.48 1412.35,1216.36 1412.93,1211.89 1413.52,1212.08 1414.11,1207.68 1414.69,1206.47 1415.28,1208.29 1415.87,1205.46 1416.45,1205.83 1417.04,1209.34 1417.63,1209.57 1418.21,1209.38 1418.8,1209.55 1419.38,1209.97 1419.97,1213.23 1420.56,1214.76 1421.14,1216.45 1421.73,1214.74 1422.32,1214.59 1422.9,1209.92 1423.49,1205.45 1424.08,1203.95 1424.66,1205.83 1425.25,1207.92 1425.83,1209.96 1426.42,1211.89 1427.01,1211.76 1427.59,1214.89 1428.18,1216.56 1428.77,1217.9 1429.35,1214.63 1429.94,1216.52 1430.53,1211.54 1431.11,1209.79 1431.7,1208.47 1432.29,1210.55 1432.87,1210.78 1433.46,1213.9 1434.04,1215.4 1434.63,1212.06 1435.22,1212.16 1435.8,1215.22 1436.39,1214.81 1436.98,1215.01 1437.56,1217.79 1438.15,1216.03 1438.74,1215.86 1439.32,1215.76 1439.91,1215.49 1440.5,1213.84 1441.08,1215.61 1441.67,1214.07 1442.25,1212.27 1442.84,1212.52 1443.43,1209.17 1444.01,1211.34 1444.6,1211.81 1445.19,1211.66 1445.77,1209.93 1446.36,1210.48 1446.95,1210.54 1447.53,1209.05 1448.12,1212.64 1448.7,1215.82 1449.29,1217.31 1449.88,1220.16 1450.46,1218.12 1451.05,1221.07 1451.64,1217.74 1452.22,1214.36 1452.81,1212.54 1453.4,1215.59 1453.98,1217.06 1454.57,1215.39 1455.16,1216.81 1455.74,1215.2 1456.33,1216.69 1456.91,1214.66 1457.5,1217.78 1458.09,1219.29 1458.67,1218.92 1459.26,1218.51 1459.85,1215.1 1460.43,1213.57 1461.02,1215.01 1461.61,1214.91 1462.19,1214.74 1462.78,1211.59 1463.37,1214.71 1463.95,1213.33 1464.54,1213.17 1465.12,1214.6 1465.71,1213.27 1466.3,1211.91 1466.88,1212.38 1467.47,1211.03 1468.06,1214.2 1468.64,1210.94 1469.23,1212.77 1469.82,1212.64 1470.4,1212.78 1470.99,1212.64 1471.57,1211.3 1472.16,1213.01 1472.75,1214.32 1473.33,1212.52 1473.92,1213.89 1474.51,1213.91 1475.09,1213.93 1475.68,1213.28 1476.27,1217.58 1476.85,1217.16 1477.44,1218.57 1478.03,1218.27 1478.61,1221.05 1479.2,1222.07 1479.78,1220.57 1480.37,1219.98 1480.96,1221.17 1481.54,1221.84 1482.13,1221.48 1482.72,1221.19 1483.3,1219.36 1483.89,1217.5 1484.48,1215.65 1485.06,1218.36 1485.65,1217.87 1486.24,1218.93 1486.82,1221.71 1487.41,1221.63 1487.99,1222.64 1488.58,1222.06 1489.17,1220.09 1489.75,1221.27 1490.34,1219.52 1490.93,1218.99 1491.51,1215.61 1492.1,1217.16 1492.69,1215.22 1493.27,1213.26 1493.86,1211.66 1494.45,1210.05 1495.03,1207.28 1495.62,1207.51 1496.2,1206 1496.79,1205.92 1497.38,1203.04 1497.96,1201.6 1498.55,1203.94 1499.14,1205.91 1499.72,1206.26 1500.31,1204.95 1500.9,1204 1501.48,1202.73 1502.07,1204.88 1502.65,1205.27 1503.24,1206.04 1503.83,1208.09 1504.41,1209.77 1505,1211.8 1505.59,1212.11 1506.17,1210.56 1506.76,1210.67 1507.35,1209.38 1507.93,1211.06 1508.52,1209.85 1509.11,1209.7 1509.69,1211.17 1510.28,1215.63 1510.86,1213.89 1511.45,1212.39 1512.04,1210.61 1512.62,1212.23 1513.21,1211.92 1513.8,1211.82 1514.38,1210.45 1514.97,1208.96 1515.56,1207.86 1516.14,1208.13 1516.73,1206.95 1517.32,1207.29 1517.9,1207.43 1518.49,1207.92 1519.07,1206.63 1519.66,1205.45 1520.25,1204.11 1520.83,1199.98 1521.42,1202.4 1522.01,1202.9 1522.59,1203.31 1523.18,1203.95 1523.77,1201.05 1524.35,1207.8 1524.94,1208.28 1525.52,1209.87 1526.11,1211.66 1526.7,1214.63 1527.28,1214.77 1527.87,1213.02 1528.46,1211.52 1529.04,1213.08 1529.63,1214.79 1530.22,1213.37 1530.8,1213.68 1531.39,1215.07 1531.98,1216.39 1532.56,1216.06 1533.15,1217.11 1533.73,1215.22 1534.32,1216.64 1534.91,1215.03 1535.49,1216.78 1536.08,1216.47 1536.67,1213.23 1537.25,1212.99 1537.84,1216.08 1538.43,1220.4 1539.01,1220.17 1539.6,1221.14 1540.19,1220.73 1540.77,1220.47 1541.36,1220.17 1541.94,1219.81 1542.53,1218.46 1543.12,1219.77 1543.7,1219.58 1544.29,1222.06 1544.88,1219.97 1545.46,1222.78 1546.05,1223.92 1546.64,1221.96 1547.22,1220 1547.81,1220.8 1548.4,1221.92 1548.98,1218.34 1549.57,1215.01 1550.15,1214.61 1550.74,1214.91 1551.33,1214.72 1551.91,1212.84 1552.5,1209.89 1553.09,1210.13 1553.67,1213.89 1554.26,1212.32 1554.85,1216.63 1555.43,1214.43 1556.02,1212.77 1556.6,1215.91 1557.19,1215.32 1557.78,1215.23 1558.36,1213.5 1558.95,1207.43 1559.54,1208.98 1560.12,1209.41 1560.71,1209.73 1561.3,1208.11 1561.88,1208.5 1562.47,1207.42 1563.06,1209.2 1563.64,1212.43 1564.23,1209.23 1564.81,1208.36 1565.4,1210.21 1565.99,1208.86 1566.57,1207.89 1567.16,1208.21 1567.75,1210.09 1568.33,1207.25 1568.92,1207.55 1569.51,1207.74 1570.09,1208.04 1570.68,1209.65 1571.27,1209.77 1571.85,1211.33 1572.44,1210.22 1573.02,1208.84 1573.61,1208.64 1574.2,1208.71 1574.78,1207.64 1575.37,1206.65 1575.96,1205.25 1576.54,1204.07 1577.13,1204.28 1577.72,1204.89 1578.3,1206.95 1578.89,1205.64 1579.47,1206.14 1580.06,1206.64 1580.65,1208.38 1581.23,1208.75 1581.82,1209.06 1582.41,1209.2 1582.99,1209.11 1583.58,1210.57 1584.17,1206.09 1584.75,1203.45 1585.34,1203.81 1585.93,1206.25 1586.51,1212.76 1587.1,1211.39 1587.68,1214.72 1588.27,1212.78 1588.86,1212.79 1589.44,1214.24 1590.03,1217.68 1590.62,1217.66 1591.2,1215.93 1591.79,1216.01 1592.38,1217.56 1592.96,1218.66 1593.55,1221.66 1594.14,1221.14 1594.72,1225.27 1595.31,1226.1 1595.89,1223.46 1596.48,1225.77 1597.07,1226.8 1597.65,1224.36 1598.24,1226.87 1598.83,1226 1599.41,1226.59 1600,1227.39 1600.59,1223.55 1601.17,1222.86 1601.76,1223.64 1602.34,1225.8 1602.93,1222.11 1603.52,1220.37 1604.1,1218.53 1604.69,1216.63 1605.28,1214.53 1605.86,1216.09 1606.45,1220.46 1607.04,1221.56 1607.62,1221.15 1608.21,1222.31 1608.8,1220.45 1609.38,1220.03 1609.97,1219.67 1610.55,1219.76 1611.14,1217.8 1611.73,1218.99 1612.31,1216.91 1612.9,1215.16 1613.49,1216.81 1614.07,1218 1614.66,1219.16 1615.25,1220.55 1615.83,1220.29 1616.42,1222.95 1617.01,1222.23 1617.59,1216.7 1618.18,1218.04 1618.76,1216.48 1619.35,1214.84 1619.94,1213.19 1620.52,1213.05 1621.11,1213.15 1621.7,1211.66 1622.28,1211.57 1622.87,1210.36 1623.46,1207.21 1624.04,1205.76 1624.63,1204.64 1625.22,1202.06 1625.8,1202.48 1626.39,1201.31 1626.97,1200.43 1627.56,1199.56 1628.15,1200.15 1628.73,1202.11 1629.32,1201.48 1629.91,1198.88 1630.49,1196.58 1631.08,1198.88 1631.67,1199.57 1632.25,1200.22 1632.84,1199.27 1633.42,1200.25 1634.01,1198.49 1634.6,1204.02 1635.18,1203.02 1635.77,1203.38 1636.36,1205.43 1636.94,1202.66 1637.53,1206.5 1638.12,1206.55 1638.7,1209.83 1639.29,1210.08 1639.88,1211.98 1640.46,1208.67 1641.05,1210.46 1641.63,1212.19 1642.22,1215.52 1642.81,1214.18 1643.39,1213.93 1643.98,1212.43 1644.57,1210.97 1645.15,1211.07 1645.74,1212.59 1646.33,1213.76 1646.91,1209.18 1647.5,1209.33 1648.09,1206.55 1648.67,1210.15 1649.26,1210.41 1649.84,1207.53 1650.43,1212.64 1651.02,1215.99 1651.6,1217.35 1652.19,1215.82 1652.78,1212.46 1653.36,1209.5 1653.95,1208.11 1654.54,1208.42 1655.12,1207.41 1655.71,1209 1656.29,1210.92 1656.88,1209.43 1657.47,1209.63 1658.05,1209.75 1658.64,1213.71 1659.23,1215.4 1659.81,1218.4 1660.4,1218.13 1660.99,1220.97 1661.57,1220.66 1662.16,1220.05 1662.75,1217.49 1663.33,1218.64 1663.92,1218.31 1664.5,1215.39 1665.09,1213.84 1665.68,1213.84 1666.26,1213.95 1666.85,1212.73 1667.44,1214.37 1668.02,1214.43 1668.61,1214.25 1669.2,1214.16 1669.78,1213.86 1670.37,1212.22 1670.96,1215.69 1671.54,1217.1 1672.13,1218.26 1672.71,1216.23 1673.3,1214.48 1673.89,1215.82 1674.47,1214 1675.06,1220.5 1675.65,1217.21 1676.23,1218.52 1676.82,1216.75 1677.41,1214.71 1677.99,1214.74 1678.58,1214.96 1679.17,1214.82 1679.75,1214.72 1680.34,1214.72 1680.92,1217.41 1681.51,1219.84 1682.1,1224.03 1682.68,1225.39 1683.27,1224.78 1683.86,1222.54 1684.44,1220.2 1685.03,1219.7 1685.62,1220.77 1686.2,1222.11 1686.79,1217.21 1687.37,1217.14 1687.96,1219.96 1688.55,1218.15 1689.13,1217.77 1689.72,1217.5 1690.31,1217.19 1690.89,1215.2 1691.48,1212 1692.07,1216.68 1692.65,1221.07 1693.24,1219.49 1693.83,1222.47 1694.41,1217.57 1695,1217.23 1695.58,1212.2 1696.17,1212.23 1696.76,1215.53 1697.34,1213.78 1697.93,1215.34 1698.52,1215.09 1699.1,1216.31 1699.69,1217.53 1700.28,1215.55 1700.86,1215.49 1701.45,1213.69 1702.04,1211.85 1702.62,1211.96 1703.21,1210.54 1703.79,1207.45 1704.38,1207.65 1704.97,1210.76 1705.55,1210.83 1706.14,1210.75 1706.73,1208.07 1707.31,1208.02 1707.9,1209.85 1708.49,1205.23 1709.07,1203.85 1709.66,1204.3 1710.24,1204.85 1710.83,1201.81 1711.42,1200.9 1712,1200.09 1712.59,1202.49 1713.18,1201.53 1713.76,1203.75 1714.35,1202.6 1714.94,1200.05 1715.52,1200.73 1716.11,1207.39 1716.7,1209.28 1717.28,1207.56 1717.87,1208.18 1718.45,1203.83 1719.04,1204.44 1719.63,1206.4 1720.21,1206.93 1720.8,1207.69 1721.39,1204.98 1721.97,1206.87 1722.56,1208.6 1723.15,1207.37 1723.73,1212.35 1724.32,1212.6 1724.91,1214.06 1725.49,1215.22 1726.08,1215.18 1726.66,1216.63 1727.25,1216.48 1727.84,1219.28 1728.42,1215.83 1729.01,1213.99 1729.6,1213.88 1730.18,1215.34 1730.77,1216.54 1731.36,1217.99 1731.94,1221.27 1732.53,1219.33 1733.11,1218.93 1733.7,1218.85 1734.29,1215.52 1734.87,1213.67 1735.46,1215.13 1736.05,1214.59 1736.63,1217.33 1737.22,1216.93 1737.81,1216.6 1738.39,1217.56 1738.98,1212.66 1739.57,1212.68 1740.15,1214.18 1740.74,1214.41 1741.32,1208.39 1741.91,1210.04 1742.5,1211.59 1743.08,1210.1 1743.67,1208.48 1744.26,1210.3 1744.84,1210.42 1745.43,1210.51 1746.02,1212.13 1746.6,1208.97 1747.19,1209.5 1747.78,1212.75 1748.36,1212.72 1748.95,1217.14 1749.53,1216.85 1750.12,1216.75 1750.71,1215.11 1751.29,1214.89 1751.88,1214.99 1752.47,1215.01 1753.05,1212.09 1753.64,1215.15 1754.23,1215.08 1754.81,1215.38 1755.4,1216.96 1755.99,1213.71 1756.57,1215.26 1757.16,1216.6 1757.74,1218.05 1758.33,1219.42 1758.92,1220.7 1759.5,1223.11 1760.09,1225.55 1760.68,1224.78 1761.26,1226.83 1761.85,1226.15 1762.44,1228.53 1763.02,1224.82 1763.61,1224.2 1764.19,1223.76 1764.78,1220.02 1765.37,1219.68 1765.95,1219.32 1766.54,1219.19 1767.13,1215.83 1767.71,1212.68 1768.3,1209.67 1768.89,1208.18 1769.47,1208.29 1770.06,1208.33 1770.65,1208.27 1771.23,1208.79 1771.82,1209.08 1772.4,1209.43 1772.99,1208 1773.58,1209.88 1774.16,1209.81 1774.75,1212.98 1775.34,1209.6 1775.92,1209.7 1776.51,1211.51 1777.1,1211.95 1777.68,1210.28 1778.27,1207.34 1778.86,1206.15 1779.44,1208.33 1780.03,1211.64 1780.61,1211.59 1781.2,1213.55 1781.79,1215.17 1782.37,1214.67 1782.96,1219.15 1783.55,1217.64 1784.13,1218.79 1784.72,1217.24 1785.31,1218.27 1785.89,1217.89 1786.48,1217.26 1787.06,1216.88 1787.65,1219.69 1788.24,1219.48 1788.82,1217.68 1789.41,1215.62 1790,1217.23 1790.58,1215.26 1791.17,1218.12 1791.76,1216.28 1792.34,1214.8 1792.93,1211.43 1793.52,1211.95 1794.1,1216.3 1794.69,1216.46 1795.27,1213.17 1795.86,1211.3 1796.45,1209.99 1797.03,1208.55 1797.62,1210.24 1798.21,1209.06 1798.79,1209.16 1799.38,1207.84 1799.97,1209.56 1800.55,1206.75 1801.14,1203.96 1801.73,1204.3 1802.31,1207.56 1802.9,1204.66 1803.48,1201.83 1804.07,1204.02 1804.66,1201.4 1805.24,1202.01 1805.83,1202.36 1806.42,1201.04 1807,1203.4 1807.59,1205.4 1808.18,1205.84 1808.76,1207.46 1809.35,1209.6 1809.94,1210.02 1810.52,1212 1811.11,1209.46 1811.69,1208.09 1812.28,1211.44 1812.87,1213.61 1813.45,1213.2 1814.04,1209.89 1814.63,1208.21 1815.21,1206.66 1815.8,1207.91 1816.39,1208.14 1816.97,1208.42 1817.56,1207.06 1818.14,1207.34 1818.73,1206.15 1819.32,1206.48 1819.9,1205.37 1820.49,1204.37 1821.08,1207.88 1821.66,1206.79 1822.25,1207.09 1822.84,1205.67 1823.42,1205.92 1824.01,1207.92 1824.6,1203.76 1825.18,1207.34 1825.77,1207.55 1826.35,1210.9 1826.94,1214.17 1827.53,1212.82 1828.11,1212.78 1828.7,1215.46 1829.29,1216.83 1829.87,1217.91 1830.46,1212.99 1831.05,1213 1831.63,1211.66 1832.22,1213.01 1832.81,1213.08 1833.39,1213.05 1833.98,1214.46 1834.56,1218.61 1835.15,1218.19 1835.74,1217.96 1836.32,1217.66 1836.91,1217.39 1837.5,1217.07 1838.08,1218.42 1838.67,1216.68 1839.26,1214.74 1839.84,1210.08 1840.43,1213.19 1841.01,1213.12 1841.6,1212.96 1842.19,1211.29 1842.77,1212.66 1843.36,1209.65 1843.95,1208.15 1844.53,1207.09 1845.12,1209.16 1845.71,1207.82 1846.29,1208.11 1846.88,1208.45 1847.47,1210.26 1848.05,1211.79 1848.64,1213.53 1849.22,1216.64 1849.81,1216.52 1850.4,1216.29 1850.98,1214.69 1851.57,1214.43 1852.16,1212.8 1852.74,1215.68 1853.33,1219.83 1853.92,1221.11 1854.5,1220.93 1855.09,1218.75 1855.68,1215.5 1856.26,1216.97 1856.85,1216.92 1857.43,1214.78 1858.02,1216.16 1858.61,1216.15 1859.19,1215.91 1859.78,1218.61 1860.37,1216.45 1860.95,1216.25 1861.54,1217.69 1862.13,1219.26 1862.71,1220.6 1863.3,1221.36 1863.88,1222.47 1864.47,1223.38 1865.06,1222.9 1865.64,1223.84 1866.23,1221.49 1866.82,1216.49 1867.4,1216.61 1867.99,1211.46 1868.58,1206.88 1869.16,1208.56 1869.75,1206.14 1870.34,1209.79 1870.92,1210.06 1871.51,1214.32 1872.09,1215.75 1872.68,1215.39 1873.27,1215.14 1873.85,1215.07 1874.44,1213.2 1875.03,1217.64 1875.61,1216.23 1876.2,1214.65 1876.79,1217.74 1877.37,1218.98 1877.96,1218.87 1878.55,1217 1879.13,1215.19 1879.72,1215.27 1880.3,1213.68 1880.89,1210.21 1881.48,1208.69 1882.06,1207.45 1882.65,1209.08 1883.24,1204.33 1883.82,1207.8 1884.41,1209.45 1885,1207.78 1885.58,1206.48 1886.17,1211.65 1886.76,1212 1887.34,1210.6 1887.93,1212.26 1888.51,1212.21 1889.1,1210.37 1889.69,1210.13 1890.27,1213.42 1890.86,1211.84 1891.45,1210.41 1892.03,1213.87 1892.62,1213.78 1893.21,1213.59 1893.79,1213.83 1894.38,1215.61 1894.96,1215.44 1895.55,1216.72 1896.14,1217.9 1896.72,1214.69 1897.31,1217.75 1897.9,1216.39 1898.48,1216.51 1899.07,1216.2 1899.66,1213.06 1900.24,1214.69 1900.83,1214.38 1901.42,1211.38 1902,1211.42 1902.59,1214.81 1903.17,1216.18 1903.76,1215.77 1904.35,1209.51 1904.93,1208.2 1905.52,1209.9 1906.11,1210.34 1906.69,1209.38 1907.28,1211.24 1907.87,1213.25 1908.45,1211.72 1909.04,1213.15 1909.63,1213.3 1910.21,1211.97 1910.8,1210.55 1911.38,1212.15 1911.97,1210.4 1912.56,1215.34 1913.14,1215.1 1913.73,1218.11 1914.32,1218.21 1914.9,1219.39 1915.49,1218.76 1916.08,1217.1 1916.66,1219.88 1917.25,1219.41 1917.83,1218.79 1918.42,1223.03 1919.01,1222.81 1919.59,1222.09 1920.18,1218.38 1920.77,1219.64 1921.35,1218.15 1921.94,1214.91 1922.53,1213 1923.11,1212.58 1923.7,1211.33 1924.29,1212.9 1924.87,1212.8 1925.46,1211.33 1926.04,1211.34 1926.63,1211.22 1927.22,1211.23 1927.8,1209.74 1928.39,1212.8 1928.98,1210.9 1929.56,1212.53 1930.15,1213.59 1930.74,1212.23 1931.32,1212 1931.91,1212.95 1932.5,1211.52 1933.08,1211.56 1933.67,1206.8 1934.25,1208.73 1934.84,1207.57 1935.43,1206.14 1936.01,1208.05 1936.6,1207.08 1937.19,1208.96 1937.77,1213.76 1938.36,1212 1938.95,1210.72 1939.53,1210.72 1940.12,1209.11 1940.71,1207.79 1941.29,1209.88 1941.88,1208.38 1942.46,1208.63 1943.05,1212.03 1943.64,1212.19 1944.22,1215.13 1944.81,1213.63 1945.4,1215.18 1945.98,1213.72 1946.57,1214 1947.16,1214.12 1947.74,1211.07 1948.33,1208.11 1948.91,1209.89 1949.5,1209.94 1950.09,1210.33 1950.67,1206.17 1951.26,1206.56 1951.85,1207.1 1952.43,1207.35 1953.02,1207.87 1953.61,1209.85 1954.19,1213.18 1954.78,1212.95 1955.37,1212.94 1955.95,1215.82 1956.54,1217.41 1957.12,1215.76 1957.71,1215.55 1958.3,1217.06 1958.88,1216.76 1959.47,1216.94 1960.06,1218.13 1960.64,1224.22 1961.23,1223.24 1961.82,1218.01 1962.4,1220.62 1962.99,1224.62 1963.58,1224.02 1964.16,1220.36 1964.75,1221.64 1965.33,1221.39 1965.92,1217.69 1966.51,1219.29 1967.09,1217.53 1967.68,1220.5 1968.27,1220.28 1968.85,1216.81 1969.44,1215.02 1970.03,1218.22 1970.61,1216.28 1971.2,1214.91 1971.78,1214.78 1972.37,1216.21 1972.96,1214.47 1973.54,1217.27 1974.13,1215.7 1974.72,1215.66 1975.3,1215.36 1975.89,1216.73 1976.48,1217.87 1977.06,1218.97 1977.65,1220.26 1978.24,1217 1978.82,1216.61 1979.41,1214.74 1979.99,1217.69 1980.58,1215.86 1981.17,1215.78 1981.75,1215.73 1982.34,1209.32 1982.93,1207.97 1983.51,1211.37 1984.1,1214.63 1984.69,1216.31 1985.27,1214.53 1985.86,1212.83 1986.45,1212.78 1987.03,1211 1987.62,1212.47 1988.2,1215.6 1988.79,1218.59 1989.38,1223.06 1989.96,1220.72 1990.55,1218.78 1991.14,1217.97 1991.72,1216.15 1992.31,1217.46 1992.9,1217.36 1993.48,1218.21 1994.07,1217.95 1994.65,1215.99 1995.24,1215.88 1995.83,1217.36 1996.41,1215.53 1997,1210.66 1997.59,1210.64 1998.17,1215.27 1998.76,1213.48 1999.35,1215.13 1999.93,1213.27 2000.52,1210.08 2001.11,1213.02 2001.69,1211.23 2002.28,1209.84 2002.86,1211.65 2003.45,1210.2 2004.04,1210.19 2004.62,1205.84 2005.21,1208.9 2005.8,1207.45 2006.38,1212.1 2006.97,1213.94 2007.56,1216.76 2008.14,1216.21 2008.73,1217.72 2009.32,1215.59 2009.9,1217.2 2010.49,1218.22 2011.07,1213.2 2011.66,1211.79 2012.25,1207.38 2012.83,1207.63 2013.42,1209.66 2014.01,1206.85 2014.59,1204.25 2015.18,1203.12 2015.77,1200.2 2016.35,1202.55 2016.94,1204.73 2017.53,1206.63 2018.11,1203.85 2018.7,1204.31 2019.28,1204.68 2019.87,1208.36 2020.46,1208.82 2021.04,1209.02 2021.63,1212.41 2022.22,1211 2022.8,1211.71 2023.39,1213.37 2023.98,1211.96 2024.56,1210.44 2025.15,1213.79 2025.73,1212.24 2026.32,1212.42 2026.91,1211.17 2027.49,1211.22 2028.08,1209.67 2028.67,1209.66 2029.25,1208.25 2029.84,1205.14 2030.43,1207.11 2031.01,1209.12 2031.6,1210.59 2032.19,1209.28 2032.77,1209.71 2033.36,1209.84 2033.94,1206.56 2034.53,1207.22 2035.12,1207.87 2035.7,1208.18 2036.29,1206.68 2036.88,1210.28 2037.46,1213.67 2038.05,1215.31 2038.64,1211.66 2039.22,1211.93 2039.81,1215.04 2040.4,1214.75 2040.98,1214.59 2041.57,1213.24 2042.15,1213.13 2042.74,1217.28 2043.33,1218.92 2043.91,1215.66 2044.5,1216.88 2045.09,1216.83 2045.67,1217.61 2046.26,1218.57 2046.85,1221.11 2047.43,1220.4 2048.02,1221.3 2048.6,1219.34 2049.19,1220.64 2049.78,1220.17 2050.36,1215.46 2050.95,1214.03 2051.54,1213.99 2052.12,1215.47 2052.71,1212.49 2053.3,1213.84 2053.88,1215.32 2054.47,1214.9 2055.06,1215.27 2055.64,1215.32 2056.23,1215.24 2056.81,1212.2 2057.4,1215.69 2057.99,1212.5 2058.57,1214.22 2059.16,1214 2059.75,1213.92 2060.33,1210.65 2060.92,1207.55 2061.51,1204.61 2062.09,1205.04 2062.68,1206.99 2063.27,1207.29 2063.85,1205.99 2064.44,1207.89 2065.02,1209.74 2065.61,1211.31 2066.2,1213.11 2066.78,1214.79 2067.37,1217.37 2067.96,1215.56 2068.54,1213.85 2069.13,1213.93 2069.72,1214.13 2070.3,1213.92 2070.89,1210.7 2071.48,1210.8 2072.06,1213.87 2072.65,1213.59 2073.23,1213.67 2073.82,1210.64 2074.41,1209.27 2074.99,1209.46 2075.58,1211.36 2076.17,1214.41 2076.75,1213.86 2077.34,1213.74 2077.93,1214.83 2078.51,1215.8 2079.1,1213.8 2079.68,1215.11 2080.27,1214.81 2080.86,1215.95 2081.44,1217.18 2082.03,1215.26 2082.62,1217.92 2083.2,1216.1 2083.79,1218.8 2084.38,1219.67 2084.96,1222.52 2085.55,1223.77 2086.14,1223.11 2086.72,1220.97 2087.31,1221.94 2087.89,1220.02 2088.48,1215.18 2089.07,1216.26 2089.65,1215.98 2090.24,1214.31 2090.83,1212.81 2091.41,1214.07 2092,1211.15 2092.59,1212.7 2093.17,1209.7 2093.76,1209.73 2094.35,1206.9 2094.93,1207.03 2095.52,1209.01 2096.1,1207.65 2096.69,1208.02 2097.28,1205.33 2097.86,1205.63 2098.45,1204.4 2099.04,1204.76 2099.62,1205.24 2100.21,1206.03 2100.8,1203.76 2101.38,1205.94 2101.97,1205.16 2102.55,1203.96 2103.14,1209.08 2103.73,1211 2104.31,1211.31 2104.9,1213 2105.49,1208.44 2106.07,1209.02 2106.66,1208.96 2107.25,1210.34 2107.83,1212.27 2108.42,1213.84 2109.01,1215.6 2109.59,1215.49 2110.18,1210.64 2110.76,1210.38 2111.35,1215.09 2111.94,1216.58 2112.52,1218.02 2113.11,1215.61 2113.7,1218.56 2114.28,1219.94 2114.87,1218.13 2115.46,1217.79 2116.04,1215.92 2116.63,1215.8 2117.22,1217.04 2117.8,1215.12 2118.39,1214.9 2118.97,1216.59 2119.56,1219.54 2120.15,1216.01 2120.73,1214.31 2121.32,1215.77 2121.91,1215.47 2122.49,1216.83 2123.08,1218.19 2123.67,1216.32 2124.25,1214.05 2124.84,1215.36 2125.42,1211.9 2126.01,1212.01 2126.6,1210.42 2127.18,1210.38 2127.77,1209.96 2128.36,1209.96 2128.94,1208.47 2129.53,1208.55 2130.12,1205.6 2130.7,1204.51 2131.29,1206.28 2131.88,1207.89 2132.46,1208.19 2133.05,1209.67 2133.63,1211.77 2134.22,1213.37 2134.81,1211.87 2135.39,1210.47 2135.98,1207.5 2136.57,1209.12 2137.15,1210.78 2137.74,1211 2138.33,1209.45 2138.91,1207.66 2139.5,1209.02 2140.09,1209.46 2140.67,1215.87 2141.26,1211.04 2141.84,1209.73 2142.43,1208.45 2143.02,1208.87 2143.6,1207.91 2144.19,1212.95 2144.78,1211.31 2145.36,1210.28 2145.95,1218.14 2146.54,1218.11 2147.12,1214.74 2147.71,1214.78 2148.3,1213.34 2148.88,1211.83 2149.47,1210.49 2150.05,1207.83 2150.64,1204.79 2151.23,1207.04 2151.81,1205.86 2152.4,1209.06 2152.99,1206.05 2153.57,1209.34 2154.16,1207.96 2154.75,1208.1 2155.33,1209.96 2155.92,1207.26 2156.5,1205.94 2157.09,1206.28 2157.68,1206.85 2158.26,1205.37 \"/>\n<path clip-path=\"url(#clip092)\" d=\"M986.025 1213.52 L986.612 1213.52 L987.198 1213.52 L987.785 1213.52 L988.371 1213.52 L988.957 1213.52 L989.544 1213.52 L990.13 1213.52 L990.717 1213.52 L991.303 1213.52 L991.889 1213.52 L992.476 1213.52 L993.062 1213.52 L993.649 1213.52 L994.235 1213.52 L994.822 1213.52 L995.408 1213.52 L995.994 1213.52 L996.581 1213.52 L997.167 1213.52 L997.754 1213.52 L998.34 1213.52 L998.926 1213.52 L999.513 1213.52 L1000.1 1213.52 L1000.69 1213.52 L1001.27 1213.52 L1001.86 1213.52 L1002.44 1213.52 L1003.03 1213.52 L1003.62 1213.52 L1004.2 1213.52 L1004.79 1213.52 L1005.38 1213.52 L1005.96 1213.52 L1006.55 1213.52 L1007.14 1213.52 L1007.72 1213.52 L1008.31 1213.52 L1008.9 1213.52 L1009.48 1213.52 L1010.07 1213.52 L1010.65 1213.52 L1011.24 1213.52 L1011.83 1213.52 L1012.41 1213.52 L1013 1213.52 L1013.59 1213.52 L1014.17 1213.52 L1014.76 1213.52 L1015.35 1213.52 L1015.93 1213.52 L1016.52 1213.52 L1017.11 1213.52 L1017.69 1213.52 L1018.28 1213.52 L1018.86 1213.52 L1019.45 1213.52 L1020.04 1213.52 L1020.62 1213.52 L1021.21 1213.52 L1021.8 1213.52 L1022.38 1213.52 L1022.97 1213.52 L1023.56 1213.52 L1024.14 1213.52 L1024.73 1213.52 L1025.32 1213.52 L1025.9 1213.52 L1026.49 1213.52 L1027.07 1213.52 L1027.66 1213.52 L1028.25 1213.52 L1028.83 1213.52 L1029.42 1213.52 L1030.01 1213.52 L1030.59 1213.52 L1031.18 1213.52 L1031.77 1213.52 L1032.35 1213.52 L1032.94 1213.52 L1033.52 1213.52 L1034.11 1213.52 L1034.7 1213.52 L1035.28 1213.52 L1035.87 1213.52 L1036.46 1213.52 L1037.04 1213.52 L1037.63 1213.52 L1038.22 1213.52 L1038.8 1213.52 L1039.39 1213.52 L1039.98 1213.52 L1040.56 1213.52 L1041.15 1213.52 L1041.73 1213.52 L1042.32 1213.52 L1042.91 1213.52 L1043.49 1213.52 L1044.08 1213.52 L1044.67 1213.52 L1045.25 1213.52 L1045.84 1213.52 L1046.43 1213.52 L1047.01 1213.52 L1047.6 1213.52 L1048.19 1213.52 L1048.77 1213.52 L1049.36 1213.52 L1049.94 1213.52 L1050.53 1213.52 L1051.12 1213.52 L1051.7 1213.52 L1052.29 1213.52 L1052.88 1213.52 L1053.46 1213.52 L1054.05 1213.52 L1054.64 1213.52 L1055.22 1213.52 L1055.81 1213.52 L1056.39 1213.52 L1056.98 1213.52 L1057.57 1213.52 L1058.15 1213.52 L1058.74 1213.52 L1059.33 1213.52 L1059.91 1213.52 L1060.5 1213.52 L1061.09 1213.52 L1061.67 1213.52 L1062.26 1213.52 L1062.85 1213.52 L1063.43 1213.52 L1064.02 1213.52 L1064.6 1213.52 L1065.19 1213.52 L1065.78 1213.52 L1066.36 1213.52 L1066.95 1213.52 L1067.54 1213.52 L1068.12 1213.52 L1068.71 1213.52 L1069.3 1213.52 L1069.88 1213.52 L1070.47 1213.52 L1071.06 1213.52 L1071.64 1213.52 L1072.23 1213.52 L1072.81 1213.52 L1073.4 1213.52 L1073.99 1213.52 L1074.57 1213.52 L1075.16 1213.52 L1075.75 1213.52 L1076.33 1213.52 L1076.92 1213.52 L1077.51 1213.52 L1078.09 1213.52 L1078.68 1213.52 L1079.26 1213.52 L1079.85 1213.52 L1080.44 1213.52 L1081.02 1213.52 L1081.61 1213.52 L1082.2 1213.52 L1082.78 1213.52 L1083.37 1213.52 L1083.96 1213.52 L1084.54 1213.52 L1085.13 1213.52 L1085.72 1213.52 L1086.3 1213.52 L1086.89 1213.52 L1087.47 1213.52 L1088.06 1213.52 L1088.65 1213.52 L1089.23 1213.52 L1089.82 1213.52 L1090.41 1213.52 L1090.99 1213.52 L1091.58 1213.52 L1092.17 1213.52 L1092.75 1213.52 L1093.34 1213.52 L1093.93 1213.52 L1094.51 1213.52 L1095.1 1213.52 L1095.68 1213.52 L1096.27 1213.52 L1096.86 1213.52 L1097.44 1213.52 L1098.03 1213.52 L1098.62 1213.52 L1099.2 1213.52 L1099.79 1213.52 L1100.38 1213.52 L1100.96 1213.52 L1101.55 1213.52 L1102.14 1213.52 L1102.72 1213.52 L1103.31 1213.52 L1103.89 1213.52 L1104.48 1213.52 L1105.07 1213.52 L1105.65 1213.52 L1106.24 1213.52 L1106.83 1213.52 L1107.41 1213.52 L1108 1213.52 L1108.59 1213.52 L1109.17 1213.52 L1109.76 1213.52 L1110.34 1213.52 L1110.93 1213.52 L1111.52 1213.52 L1112.1 1213.52 L1112.69 1213.52 L1113.28 1213.52 L1113.86 1213.52 L1114.45 1213.52 L1115.04 1213.52 L1115.62 1213.52 L1116.21 1213.52 L1116.8 1213.52 L1117.38 1213.52 L1117.97 1213.52 L1118.55 1213.52 L1119.14 1213.52 L1119.73 1213.52 L1120.31 1213.52 L1120.9 1213.52 L1121.49 1213.52 L1122.07 1213.52 L1122.66 1213.52 L1123.25 1213.52 L1123.83 1213.52 L1124.42 1213.52 L1125.01 1213.52 L1125.59 1213.52 L1126.18 1213.52 L1126.76 1213.52 L1127.35 1213.52 L1127.94 1213.52 L1128.52 1213.52 L1129.11 1213.52 L1129.7 1213.52 L1130.28 1213.52 L1130.87 1213.52 L1131.46 1213.52 L1132.04 1213.52 L1132.63 1213.52 L1133.21 1213.52 L1133.8 1213.52 L1134.39 1213.52 L1134.97 1213.52 L1135.56 1213.52 L1136.15 1213.52 L1136.73 1213.52 L1137.32 1213.52 L1137.91 1213.52 L1138.49 1213.52 L1139.08 1213.52 L1139.67 1213.52 L1140.25 1213.52 L1140.84 1213.52 L1141.42 1213.52 L1142.01 1213.52 L1142.6 1213.52 L1143.18 1213.52 L1143.77 1213.52 L1144.36 1213.52 L1144.94 1213.52 L1145.53 1213.52 L1146.12 1213.52 L1146.7 1213.52 L1147.29 1213.52 L1147.88 1213.52 L1148.46 1213.52 L1149.05 1213.52 L1149.63 1213.52 L1150.22 1213.52 L1150.81 1213.52 L1151.39 1213.52 L1151.98 1213.52 L1152.57 1213.52 L1153.15 1213.52 L1153.74 1213.52 L1154.33 1213.52 L1154.91 1213.52 L1155.5 1213.52 L1156.09 1213.52 L1156.67 1213.52 L1157.26 1213.52 L1157.84 1213.52 L1158.43 1213.52 L1159.02 1213.52 L1159.6 1213.52 L1160.19 1213.52 L1160.78 1213.52 L1161.36 1213.52 L1161.95 1213.52 L1162.54 1213.52 L1163.12 1213.52 L1163.71 1213.52 L1164.29 1213.52 L1164.88 1213.52 L1165.47 1213.52 L1166.05 1213.52 L1166.64 1213.52 L1167.23 1213.52 L1167.81 1213.52 L1168.4 1213.52 L1168.99 1213.52 L1169.57 1213.52 L1170.16 1213.52 L1170.75 1213.52 L1171.33 1213.52 L1171.92 1213.52 L1172.5 1213.52 L1173.09 1213.52 L1173.68 1213.52 L1174.26 1213.52 L1174.85 1213.52 L1175.44 1213.52 L1176.02 1213.52 L1176.61 1213.52 L1177.2 1213.52 L1177.78 1213.52 L1178.37 1213.52 L1178.96 1213.52 L1179.54 1213.52 L1180.13 1213.52 L1180.71 1213.52 L1181.3 1213.52 L1181.89 1213.52 L1182.47 1213.52 L1183.06 1213.52 L1183.65 1213.52 L1184.23 1213.52 L1184.82 1213.52 L1185.41 1213.52 L1185.99 1213.52 L1186.58 1213.52 L1187.16 1213.52 L1187.75 1213.52 L1188.34 1213.52 L1188.92 1213.52 L1189.51 1213.52 L1190.1 1213.52 L1190.68 1213.52 L1191.27 1213.52 L1191.86 1213.52 L1192.44 1213.52 L1193.03 1213.52 L1193.62 1213.52 L1194.2 1213.52 L1194.79 1213.52 L1195.37 1213.52 L1195.96 1213.52 L1196.55 1213.52 L1197.13 1213.52 L1197.72 1213.52 L1198.31 1213.52 L1198.89 1213.52 L1199.48 1213.52 L1200.07 1213.52 L1200.65 1213.52 L1201.24 1213.52 L1201.83 1213.52 L1202.41 1213.52 L1203 1213.52 L1203.58 1213.52 L1204.17 1213.52 L1204.76 1213.52 L1205.34 1213.52 L1205.93 1213.52 L1206.52 1213.52 L1207.1 1213.52 L1207.69 1213.52 L1208.28 1213.52 L1208.86 1213.52 L1209.45 1213.52 L1210.03 1213.52 L1210.62 1213.52 L1211.21 1213.52 L1211.79 1213.52 L1212.38 1213.52 L1212.97 1213.52 L1213.55 1213.52 L1214.14 1213.52 L1214.73 1213.52 L1215.31 1213.52 L1215.9 1213.52 L1216.49 1213.52 L1217.07 1213.52 L1217.66 1213.52 L1218.24 1213.52 L1218.83 1213.52 L1219.42 1213.52 L1220 1213.52 L1220.59 1213.52 L1221.18 1213.52 L1221.76 1213.52 L1222.35 1213.52 L1222.94 1213.52 L1223.52 1213.52 L1224.11 1213.52 L1224.7 1213.52 L1225.28 1213.52 L1225.87 1213.52 L1226.45 1213.52 L1227.04 1213.52 L1227.63 1213.52 L1228.21 1213.52 L1228.8 1213.52 L1229.39 1213.52 L1229.97 1213.52 L1230.56 1213.52 L1231.15 1213.52 L1231.73 1213.52 L1232.32 1213.52 L1232.91 1213.52 L1233.49 1213.52 L1234.08 1213.52 L1234.66 1213.52 L1235.25 1213.52 L1235.84 1213.52 L1236.42 1213.52 L1237.01 1213.52 L1237.6 1213.52 L1238.18 1213.52 L1238.77 1213.52 L1239.36 1213.52 L1239.94 1213.52 L1240.53 1213.52 L1241.11 1213.52 L1241.7 1213.52 L1242.29 1213.52 L1242.87 1213.52 L1243.46 1213.52 L1244.05 1213.52 L1244.63 1213.52 L1245.22 1213.52 L1245.81 1213.52 L1246.39 1213.52 L1246.98 1213.52 L1247.57 1213.52 L1248.15 1213.52 L1248.74 1213.52 L1249.32 1213.52 L1249.91 1213.52 L1250.5 1213.52 L1251.08 1213.52 L1251.67 1213.52 L1252.26 1213.52 L1252.84 1213.52 L1253.43 1213.52 L1254.02 1213.52 L1254.6 1213.52 L1255.19 1213.52 L1255.78 1213.52 L1256.36 1213.52 L1256.95 1213.52 L1257.53 1213.52 L1258.12 1213.52 L1258.71 1213.52 L1259.29 1213.52 L1259.88 1213.52 L1260.47 1213.52 L1261.05 1213.52 L1261.64 1213.52 L1262.23 1213.52 L1262.81 1213.52 L1263.4 1213.52 L1263.98 1213.52 L1264.57 1213.52 L1265.16 1213.52 L1265.74 1213.52 L1266.33 1213.52 L1266.92 1213.52 L1267.5 1213.52 L1268.09 1213.52 L1268.68 1213.52 L1269.26 1213.52 L1269.85 1213.52 L1270.44 1213.52 L1271.02 1213.52 L1271.61 1213.52 L1272.19 1213.52 L1272.78 1213.52 L1273.37 1213.52 L1273.95 1213.52 L1274.54 1213.52 L1275.13 1213.52 L1275.71 1213.52 L1276.3 1213.52 L1276.89 1213.52 L1277.47 1213.52 L1278.06 1213.52 L1278.65 1213.52 L1279.23 1213.52 L1279.82 1213.52 L1280.4 1213.52 L1280.99 1213.52 L1281.58 1213.52 L1282.16 1213.52 L1282.75 1213.52 L1283.34 1213.52 L1283.92 1213.52 L1284.51 1213.52 L1285.1 1213.52 L1285.68 1213.52 L1286.27 1213.52 L1286.86 1213.52 L1287.44 1213.52 L1288.03 1213.52 L1288.61 1213.52 L1289.2 1213.52 L1289.79 1213.52 L1290.37 1213.52 L1290.96 1213.52 L1291.55 1213.52 L1292.13 1213.52 L1292.72 1213.52 L1293.31 1213.52 L1293.89 1213.52 L1294.48 1213.52 L1295.06 1213.52 L1295.65 1213.52 L1296.24 1213.52 L1296.82 1213.52 L1297.41 1213.52 L1298 1213.52 L1298.58 1213.52 L1299.17 1213.52 L1299.76 1213.52 L1300.34 1213.52 L1300.93 1213.52 L1301.52 1213.52 L1302.1 1213.52 L1302.69 1213.52 L1303.27 1213.52 L1303.86 1213.52 L1304.45 1213.52 L1305.03 1213.52 L1305.62 1213.52 L1306.21 1213.52 L1306.79 1213.52 L1307.38 1213.52 L1307.97 1213.52 L1308.55 1213.52 L1309.14 1213.52 L1309.73 1213.52 L1310.31 1213.52 L1310.9 1213.52 L1311.48 1213.52 L1312.07 1213.52 L1312.66 1213.52 L1313.24 1213.52 L1313.83 1213.52 L1314.42 1213.52 L1315 1213.52 L1315.59 1213.52 L1316.18 1213.52 L1316.76 1213.52 L1317.35 1213.52 L1317.93 1213.52 L1318.52 1213.52 L1319.11 1213.52 L1319.69 1213.52 L1320.28 1213.52 L1320.87 1213.52 L1321.45 1213.52 L1322.04 1213.52 L1322.63 1213.52 L1323.21 1213.52 L1323.8 1213.52 L1324.39 1213.52 L1324.97 1213.52 L1325.56 1213.52 L1326.14 1213.52 L1326.73 1213.52 L1327.32 1213.52 L1327.9 1213.52 L1328.49 1213.52 L1329.08 1213.52 L1329.66 1213.52 L1330.25 1213.52 L1330.84 1213.52 L1331.42 1213.52 L1332.01 1213.52 L1332.6 1213.52 L1333.18 1213.52 L1333.77 1213.52 L1334.35 1213.52 L1334.94 1213.52 L1335.53 1213.52 L1336.11 1213.52 L1336.7 1213.52 L1337.29 1213.52 L1337.87 1213.52 L1338.46 1213.52 L1339.05 1213.52 L1339.63 1213.52 L1340.22 1213.52 L1340.8 1213.52 L1341.39 1213.52 L1341.98 1213.52 L1342.56 1213.52 L1343.15 1213.52 L1343.74 1213.52 L1344.32 1213.52 L1344.91 1213.52 L1345.5 1213.52 L1346.08 1213.52 L1346.67 1213.52 L1347.26 1213.52 L1347.84 1213.52 L1348.43 1213.52 L1349.01 1213.52 L1349.6 1213.52 L1350.19 1213.52 L1350.77 1213.52 L1351.36 1213.52 L1351.95 1213.52 L1352.53 1213.52 L1353.12 1213.52 L1353.71 1213.52 L1354.29 1213.52 L1354.88 1213.52 L1355.47 1213.52 L1356.05 1213.52 L1356.64 1213.52 L1357.22 1213.52 L1357.81 1213.52 L1358.4 1213.52 L1358.98 1213.52 L1359.57 1213.52 L1360.16 1213.52 L1360.74 1213.52 L1361.33 1213.52 L1361.92 1213.52 L1362.5 1213.52 L1363.09 1213.52 L1363.68 1213.52 L1364.26 1213.52 L1364.85 1213.52 L1365.43 1213.52 L1366.02 1213.52 L1366.61 1213.52 L1367.19 1213.52 L1367.78 1213.52 L1368.37 1213.52 L1368.95 1213.52 L1369.54 1213.52 L1370.13 1213.52 L1370.71 1213.52 L1371.3 1213.52 L1371.88 1213.52 L1372.47 1213.52 L1373.06 1213.52 L1373.64 1213.52 L1374.23 1213.52 L1374.82 1213.52 L1375.4 1213.52 L1375.99 1213.52 L1376.58 1213.52 L1377.16 1213.52 L1377.75 1213.52 L1378.34 1213.52 L1378.92 1213.52 L1379.51 1213.52 L1380.09 1213.52 L1380.68 1213.52 L1381.27 1213.52 L1381.85 1213.52 L1382.44 1213.52 L1383.03 1213.52 L1383.61 1213.52 L1384.2 1213.52 L1384.79 1213.52 L1385.37 1213.52 L1385.96 1213.52 L1386.55 1213.52 L1387.13 1213.52 L1387.72 1213.52 L1388.3 1213.52 L1388.89 1213.52 L1389.48 1213.52 L1390.06 1213.52 L1390.65 1213.52 L1391.24 1213.52 L1391.82 1213.52 L1392.41 1213.52 L1393 1213.52 L1393.58 1213.52 L1394.17 1213.52 L1394.75 1213.52 L1395.34 1213.52 L1395.93 1213.52 L1396.51 1213.52 L1397.1 1213.52 L1397.69 1213.52 L1398.27 1213.52 L1398.86 1213.52 L1399.45 1213.52 L1400.03 1213.52 L1400.62 1213.52 L1401.21 1213.52 L1401.79 1213.52 L1402.38 1213.52 L1402.96 1213.52 L1403.55 1213.52 L1404.14 1213.52 L1404.72 1213.52 L1405.31 1213.52 L1405.9 1213.52 L1406.48 1213.52 L1407.07 1213.52 L1407.66 1213.52 L1408.24 1213.52 L1408.83 1213.52 L1409.42 1213.52 L1410 1213.52 L1410.59 1213.52 L1411.17 1213.52 L1411.76 1213.52 L1412.35 1213.52 L1412.93 1213.52 L1413.52 1213.52 L1414.11 1213.52 L1414.69 1213.52 L1415.28 1213.52 L1415.87 1213.52 L1416.45 1213.52 L1417.04 1213.52 L1417.63 1213.52 L1418.21 1213.52 L1418.8 1213.52 L1419.38 1213.52 L1419.97 1213.52 L1420.56 1213.52 L1421.14 1213.52 L1421.73 1213.52 L1422.32 1213.52 L1422.9 1213.52 L1423.49 1213.52 L1424.08 1213.52 L1424.66 1213.52 L1425.25 1213.52 L1425.83 1213.52 L1426.42 1213.52 L1427.01 1213.52 L1427.59 1213.52 L1428.18 1213.52 L1428.77 1213.52 L1429.35 1213.52 L1429.94 1213.52 L1430.53 1213.52 L1431.11 1213.52 L1431.7 1213.52 L1432.29 1213.52 L1432.87 1213.52 L1433.46 1213.52 L1434.04 1213.52 L1434.63 1213.52 L1435.22 1213.52 L1435.8 1213.52 L1436.39 1213.52 L1436.98 1213.52 L1437.56 1213.52 L1438.15 1213.52 L1438.74 1213.52 L1439.32 1213.52 L1439.91 1213.52 L1440.5 1213.52 L1441.08 1213.52 L1441.67 1213.52 L1442.25 1213.52 L1442.84 1213.52 L1443.43 1213.52 L1444.01 1213.52 L1444.6 1213.52 L1445.19 1213.52 L1445.77 1213.52 L1446.36 1213.52 L1446.95 1213.52 L1447.53 1213.52 L1448.12 1213.52 L1448.7 1213.52 L1449.29 1213.52 L1449.88 1213.52 L1450.46 1213.52 L1451.05 1213.52 L1451.64 1213.52 L1452.22 1213.52 L1452.81 1213.52 L1453.4 1213.52 L1453.98 1213.52 L1454.57 1213.52 L1455.16 1213.52 L1455.74 1213.52 L1456.33 1213.52 L1456.91 1213.52 L1457.5 1213.52 L1458.09 1213.52 L1458.67 1213.52 L1459.26 1213.52 L1459.85 1213.52 L1460.43 1213.52 L1461.02 1213.52 L1461.61 1213.52 L1462.19 1213.52 L1462.78 1213.52 L1463.37 1213.52 L1463.95 1213.52 L1464.54 1213.52 L1465.12 1213.52 L1465.71 1213.52 L1466.3 1213.52 L1466.88 1213.52 L1467.47 1213.52 L1468.06 1213.52 L1468.64 1213.52 L1469.23 1213.52 L1469.82 1213.52 L1470.4 1213.52 L1470.99 1213.52 L1471.57 1213.52 L1472.16 1213.52 L1472.75 1213.52 L1473.33 1213.52 L1473.92 1213.52 L1474.51 1213.52 L1475.09 1213.52 L1475.68 1213.52 L1476.27 1213.52 L1476.85 1213.52 L1477.44 1213.52 L1478.03 1213.52 L1478.61 1213.52 L1479.2 1213.52 L1479.78 1213.52 L1480.37 1213.52 L1480.96 1213.52 L1481.54 1213.52 L1482.13 1213.52 L1482.72 1213.52 L1483.3 1213.52 L1483.89 1213.52 L1484.48 1213.52 L1485.06 1213.52 L1485.65 1213.52 L1486.24 1213.52 L1486.82 1213.52 L1487.41 1213.52 L1487.99 1213.52 L1488.58 1213.52 L1489.17 1213.52 L1489.75 1213.52 L1490.34 1213.52 L1490.93 1213.52 L1491.51 1213.52 L1492.1 1213.52 L1492.69 1213.52 L1493.27 1213.52 L1493.86 1213.52 L1494.45 1213.52 L1495.03 1213.52 L1495.62 1213.52 L1496.2 1213.52 L1496.79 1213.52 L1497.38 1213.52 L1497.96 1213.52 L1498.55 1213.52 L1499.14 1213.52 L1499.72 1213.52 L1500.31 1213.52 L1500.9 1213.52 L1501.48 1213.52 L1502.07 1213.52 L1502.65 1213.52 L1503.24 1213.52 L1503.83 1213.52 L1504.41 1213.52 L1505 1213.52 L1505.59 1213.52 L1506.17 1213.52 L1506.76 1213.52 L1507.35 1213.52 L1507.93 1213.52 L1508.52 1213.52 L1509.11 1213.52 L1509.69 1213.52 L1510.28 1213.52 L1510.86 1213.52 L1511.45 1213.52 L1512.04 1213.52 L1512.62 1213.52 L1513.21 1213.52 L1513.8 1213.52 L1514.38 1213.52 L1514.97 1213.52 L1515.56 1213.52 L1516.14 1213.52 L1516.73 1213.52 L1517.32 1213.52 L1517.9 1213.52 L1518.49 1213.52 L1519.07 1213.52 L1519.66 1213.52 L1520.25 1213.52 L1520.83 1213.52 L1521.42 1213.52 L1522.01 1213.52 L1522.59 1213.52 L1523.18 1213.52 L1523.77 1213.52 L1524.35 1213.52 L1524.94 1213.52 L1525.52 1213.52 L1526.11 1213.52 L1526.7 1213.52 L1527.28 1213.52 L1527.87 1213.52 L1528.46 1213.52 L1529.04 1213.52 L1529.63 1213.52 L1530.22 1213.52 L1530.8 1213.52 L1531.39 1213.52 L1531.98 1213.52 L1532.56 1213.52 L1533.15 1213.52 L1533.73 1213.52 L1534.32 1213.52 L1534.91 1213.52 L1535.49 1213.52 L1536.08 1213.52 L1536.67 1213.52 L1537.25 1213.52 L1537.84 1213.52 L1538.43 1213.52 L1539.01 1213.52 L1539.6 1213.52 L1540.19 1213.52 L1540.77 1213.52 L1541.36 1213.52 L1541.94 1213.52 L1542.53 1213.52 L1543.12 1213.52 L1543.7 1213.52 L1544.29 1213.52 L1544.88 1213.52 L1545.46 1213.52 L1546.05 1213.52 L1546.64 1213.52 L1547.22 1213.52 L1547.81 1213.52 L1548.4 1213.52 L1548.98 1213.52 L1549.57 1213.52 L1550.15 1213.52 L1550.74 1213.52 L1551.33 1213.52 L1551.91 1213.52 L1552.5 1213.52 L1553.09 1213.52 L1553.67 1213.52 L1554.26 1213.52 L1554.85 1213.52 L1555.43 1213.52 L1556.02 1213.52 L1556.6 1213.52 L1557.19 1213.52 L1557.78 1213.52 L1558.36 1213.52 L1558.95 1213.52 L1559.54 1213.52 L1560.12 1213.52 L1560.71 1213.52 L1561.3 1213.52 L1561.88 1213.52 L1562.47 1213.52 L1563.06 1213.52 L1563.64 1213.52 L1564.23 1213.52 L1564.81 1213.52 L1565.4 1213.52 L1565.99 1213.52 L1566.57 1213.52 L1567.16 1213.52 L1567.75 1213.52 L1568.33 1213.52 L1568.92 1213.52 L1569.51 1213.52 L1570.09 1213.52 L1570.68 1213.52 L1571.27 1213.52 L1571.85 1213.52 L1572.44 1213.52 L1573.02 1213.52 L1573.61 1213.52 L1574.2 1213.52 L1574.78 1213.52 L1575.37 1213.52 L1575.96 1213.52 L1576.54 1213.52 L1577.13 1213.52 L1577.72 1213.52 L1578.3 1213.52 L1578.89 1213.52 L1579.47 1213.52 L1580.06 1213.52 L1580.65 1213.52 L1581.23 1213.52 L1581.82 1213.52 L1582.41 1213.52 L1582.99 1213.52 L1583.58 1213.52 L1584.17 1213.52 L1584.75 1213.52 L1585.34 1213.52 L1585.93 1213.52 L1586.51 1213.52 L1587.1 1213.52 L1587.68 1213.52 L1588.27 1213.52 L1588.86 1213.52 L1589.44 1213.52 L1590.03 1213.52 L1590.62 1213.52 L1591.2 1213.52 L1591.79 1213.52 L1592.38 1213.52 L1592.96 1213.52 L1593.55 1213.52 L1594.14 1213.52 L1594.72 1213.52 L1595.31 1213.52 L1595.89 1213.52 L1596.48 1213.52 L1597.07 1213.52 L1597.65 1213.52 L1598.24 1213.52 L1598.83 1213.52 L1599.41 1213.52 L1600 1213.52 L1600.59 1213.52 L1601.17 1213.52 L1601.76 1213.52 L1602.34 1213.52 L1602.93 1213.52 L1603.52 1213.52 L1604.1 1213.52 L1604.69 1213.52 L1605.28 1213.52 L1605.86 1213.52 L1606.45 1213.52 L1607.04 1213.52 L1607.62 1213.52 L1608.21 1213.52 L1608.8 1213.52 L1609.38 1213.52 L1609.97 1213.52 L1610.55 1213.52 L1611.14 1213.52 L1611.73 1213.52 L1612.31 1213.52 L1612.9 1213.52 L1613.49 1213.52 L1614.07 1213.52 L1614.66 1213.52 L1615.25 1213.52 L1615.83 1213.52 L1616.42 1213.52 L1617.01 1213.52 L1617.59 1213.52 L1618.18 1213.52 L1618.76 1213.52 L1619.35 1213.52 L1619.94 1213.52 L1620.52 1213.52 L1621.11 1213.52 L1621.7 1213.52 L1622.28 1213.52 L1622.87 1213.52 L1623.46 1213.52 L1624.04 1213.52 L1624.63 1213.52 L1625.22 1213.52 L1625.8 1213.52 L1626.39 1213.52 L1626.97 1213.52 L1627.56 1213.52 L1628.15 1213.52 L1628.73 1213.52 L1629.32 1213.52 L1629.91 1213.52 L1630.49 1213.52 L1631.08 1213.52 L1631.67 1213.52 L1632.25 1213.52 L1632.84 1213.52 L1633.42 1213.52 L1634.01 1213.52 L1634.6 1213.52 L1635.18 1213.52 L1635.77 1213.52 L1636.36 1213.52 L1636.94 1213.52 L1637.53 1213.52 L1638.12 1213.52 L1638.7 1213.52 L1639.29 1213.52 L1639.88 1213.52 L1640.46 1213.52 L1641.05 1213.52 L1641.63 1213.52 L1642.22 1213.52 L1642.81 1213.52 L1643.39 1213.52 L1643.98 1213.52 L1644.57 1213.52 L1645.15 1213.52 L1645.74 1213.52 L1646.33 1213.52 L1646.91 1213.52 L1647.5 1213.52 L1648.09 1213.52 L1648.67 1213.52 L1649.26 1213.52 L1649.84 1213.52 L1650.43 1213.52 L1651.02 1213.52 L1651.6 1213.52 L1652.19 1213.52 L1652.78 1213.52 L1653.36 1213.52 L1653.95 1213.52 L1654.54 1213.52 L1655.12 1213.52 L1655.71 1213.52 L1656.29 1213.52 L1656.88 1213.52 L1657.47 1213.52 L1658.05 1213.52 L1658.64 1213.52 L1659.23 1213.52 L1659.81 1213.52 L1660.4 1213.52 L1660.99 1213.52 L1661.57 1213.52 L1662.16 1213.52 L1662.75 1213.52 L1663.33 1213.52 L1663.92 1213.52 L1664.5 1213.52 L1665.09 1213.52 L1665.68 1213.52 L1666.26 1213.52 L1666.85 1213.52 L1667.44 1213.52 L1668.02 1213.52 L1668.61 1213.52 L1669.2 1213.52 L1669.78 1213.52 L1670.37 1213.52 L1670.96 1213.52 L1671.54 1213.52 L1672.13 1213.52 L1672.71 1213.52 L1673.3 1213.52 L1673.89 1213.52 L1674.47 1213.52 L1675.06 1213.52 L1675.65 1213.52 L1676.23 1213.52 L1676.82 1213.52 L1677.41 1213.52 L1677.99 1213.52 L1678.58 1213.52 L1679.17 1213.52 L1679.75 1213.52 L1680.34 1213.52 L1680.92 1213.52 L1681.51 1213.52 L1682.1 1213.52 L1682.68 1213.52 L1683.27 1213.52 L1683.86 1213.52 L1684.44 1213.52 L1685.03 1213.52 L1685.62 1213.52 L1686.2 1213.52 L1686.79 1213.52 L1687.37 1213.52 L1687.96 1213.52 L1688.55 1213.52 L1689.13 1213.52 L1689.72 1213.52 L1690.31 1213.52 L1690.89 1213.52 L1691.48 1213.52 L1692.07 1213.52 L1692.65 1213.52 L1693.24 1213.52 L1693.83 1213.52 L1694.41 1213.52 L1695 1213.52 L1695.58 1213.52 L1696.17 1213.52 L1696.76 1213.52 L1697.34 1213.52 L1697.93 1213.52 L1698.52 1213.52 L1699.1 1213.52 L1699.69 1213.52 L1700.28 1213.52 L1700.86 1213.52 L1701.45 1213.52 L1702.04 1213.52 L1702.62 1213.52 L1703.21 1213.52 L1703.79 1213.52 L1704.38 1213.52 L1704.97 1213.52 L1705.55 1213.52 L1706.14 1213.52 L1706.73 1213.52 L1707.31 1213.52 L1707.9 1213.52 L1708.49 1213.52 L1709.07 1213.52 L1709.66 1213.52 L1710.24 1213.52 L1710.83 1213.52 L1711.42 1213.52 L1712 1213.52 L1712.59 1213.52 L1713.18 1213.52 L1713.76 1213.52 L1714.35 1213.52 L1714.94 1213.52 L1715.52 1213.52 L1716.11 1213.52 L1716.7 1213.52 L1717.28 1213.52 L1717.87 1213.52 L1718.45 1213.52 L1719.04 1213.52 L1719.63 1213.52 L1720.21 1213.52 L1720.8 1213.52 L1721.39 1213.52 L1721.97 1213.52 L1722.56 1213.52 L1723.15 1213.52 L1723.73 1213.52 L1724.32 1213.52 L1724.91 1213.52 L1725.49 1213.52 L1726.08 1213.52 L1726.66 1213.52 L1727.25 1213.52 L1727.84 1213.52 L1728.42 1213.52 L1729.01 1213.52 L1729.6 1213.52 L1730.18 1213.52 L1730.77 1213.52 L1731.36 1213.52 L1731.94 1213.52 L1732.53 1213.52 L1733.11 1213.52 L1733.7 1213.52 L1734.29 1213.52 L1734.87 1213.52 L1735.46 1213.52 L1736.05 1213.52 L1736.63 1213.52 L1737.22 1213.52 L1737.81 1213.52 L1738.39 1213.52 L1738.98 1213.52 L1739.57 1213.52 L1740.15 1213.52 L1740.74 1213.52 L1741.32 1213.52 L1741.91 1213.52 L1742.5 1213.52 L1743.08 1213.52 L1743.67 1213.52 L1744.26 1213.52 L1744.84 1213.52 L1745.43 1213.52 L1746.02 1213.52 L1746.6 1213.52 L1747.19 1213.52 L1747.78 1213.52 L1748.36 1213.52 L1748.95 1213.52 L1749.53 1213.52 L1750.12 1213.52 L1750.71 1213.52 L1751.29 1213.52 L1751.88 1213.52 L1752.47 1213.52 L1753.05 1213.52 L1753.64 1213.52 L1754.23 1213.52 L1754.81 1213.52 L1755.4 1213.52 L1755.99 1213.52 L1756.57 1213.52 L1757.16 1213.52 L1757.74 1213.52 L1758.33 1213.52 L1758.92 1213.52 L1759.5 1213.52 L1760.09 1213.52 L1760.68 1213.52 L1761.26 1213.52 L1761.85 1213.52 L1762.44 1213.52 L1763.02 1213.52 L1763.61 1213.52 L1764.19 1213.52 L1764.78 1213.52 L1765.37 1213.52 L1765.95 1213.52 L1766.54 1213.52 L1767.13 1213.52 L1767.71 1213.52 L1768.3 1213.52 L1768.89 1213.52 L1769.47 1213.52 L1770.06 1213.52 L1770.65 1213.52 L1771.23 1213.52 L1771.82 1213.52 L1772.4 1213.52 L1772.99 1213.52 L1773.58 1213.52 L1774.16 1213.52 L1774.75 1213.52 L1775.34 1213.52 L1775.92 1213.52 L1776.51 1213.52 L1777.1 1213.52 L1777.68 1213.52 L1778.27 1213.52 L1778.86 1213.52 L1779.44 1213.52 L1780.03 1213.52 L1780.61 1213.52 L1781.2 1213.52 L1781.79 1213.52 L1782.37 1213.52 L1782.96 1213.52 L1783.55 1213.52 L1784.13 1213.52 L1784.72 1213.52 L1785.31 1213.52 L1785.89 1213.52 L1786.48 1213.52 L1787.06 1213.52 L1787.65 1213.52 L1788.24 1213.52 L1788.82 1213.52 L1789.41 1213.52 L1790 1213.52 L1790.58 1213.52 L1791.17 1213.52 L1791.76 1213.52 L1792.34 1213.52 L1792.93 1213.52 L1793.52 1213.52 L1794.1 1213.52 L1794.69 1213.52 L1795.27 1213.52 L1795.86 1213.52 L1796.45 1213.52 L1797.03 1213.52 L1797.62 1213.52 L1798.21 1213.52 L1798.79 1213.52 L1799.38 1213.52 L1799.97 1213.52 L1800.55 1213.52 L1801.14 1213.52 L1801.73 1213.52 L1802.31 1213.52 L1802.9 1213.52 L1803.48 1213.52 L1804.07 1213.52 L1804.66 1213.52 L1805.24 1213.52 L1805.83 1213.52 L1806.42 1213.52 L1807 1213.52 L1807.59 1213.52 L1808.18 1213.52 L1808.76 1213.52 L1809.35 1213.52 L1809.94 1213.52 L1810.52 1213.52 L1811.11 1213.52 L1811.69 1213.52 L1812.28 1213.52 L1812.87 1213.52 L1813.45 1213.52 L1814.04 1213.52 L1814.63 1213.52 L1815.21 1213.52 L1815.8 1213.52 L1816.39 1213.52 L1816.97 1213.52 L1817.56 1213.52 L1818.14 1213.52 L1818.73 1213.52 L1819.32 1213.52 L1819.9 1213.52 L1820.49 1213.52 L1821.08 1213.52 L1821.66 1213.52 L1822.25 1213.52 L1822.84 1213.52 L1823.42 1213.52 L1824.01 1213.52 L1824.6 1213.52 L1825.18 1213.52 L1825.77 1213.52 L1826.35 1213.52 L1826.94 1213.52 L1827.53 1213.52 L1828.11 1213.52 L1828.7 1213.52 L1829.29 1213.52 L1829.87 1213.52 L1830.46 1213.52 L1831.05 1213.52 L1831.63 1213.52 L1832.22 1213.52 L1832.81 1213.52 L1833.39 1213.52 L1833.98 1213.52 L1834.56 1213.52 L1835.15 1213.52 L1835.74 1213.52 L1836.32 1213.52 L1836.91 1213.52 L1837.5 1213.52 L1838.08 1213.52 L1838.67 1213.52 L1839.26 1213.52 L1839.84 1213.52 L1840.43 1213.52 L1841.01 1213.52 L1841.6 1213.52 L1842.19 1213.52 L1842.77 1213.52 L1843.36 1213.52 L1843.95 1213.52 L1844.53 1213.52 L1845.12 1213.52 L1845.71 1213.52 L1846.29 1213.52 L1846.88 1213.52 L1847.47 1213.52 L1848.05 1213.52 L1848.64 1213.52 L1849.22 1213.52 L1849.81 1213.52 L1850.4 1213.52 L1850.98 1213.52 L1851.57 1213.52 L1852.16 1213.52 L1852.74 1213.52 L1853.33 1213.52 L1853.92 1213.52 L1854.5 1213.52 L1855.09 1213.52 L1855.68 1213.52 L1856.26 1213.52 L1856.85 1213.52 L1857.43 1213.52 L1858.02 1213.52 L1858.61 1213.52 L1859.19 1213.52 L1859.78 1213.52 L1860.37 1213.52 L1860.95 1213.52 L1861.54 1213.52 L1862.13 1213.52 L1862.71 1213.52 L1863.3 1213.52 L1863.88 1213.52 L1864.47 1213.52 L1865.06 1213.52 L1865.64 1213.52 L1866.23 1213.52 L1866.82 1213.52 L1867.4 1213.52 L1867.99 1213.52 L1868.58 1213.52 L1869.16 1213.52 L1869.75 1213.52 L1870.34 1213.52 L1870.92 1213.52 L1871.51 1213.52 L1872.09 1213.52 L1872.68 1213.52 L1873.27 1213.52 L1873.85 1213.52 L1874.44 1213.52 L1875.03 1213.52 L1875.61 1213.52 L1876.2 1213.52 L1876.79 1213.52 L1877.37 1213.52 L1877.96 1213.52 L1878.55 1213.52 L1879.13 1213.52 L1879.72 1213.52 L1880.3 1213.52 L1880.89 1213.52 L1881.48 1213.52 L1882.06 1213.52 L1882.65 1213.52 L1883.24 1213.52 L1883.82 1213.52 L1884.41 1213.52 L1885 1213.52 L1885.58 1213.52 L1886.17 1213.52 L1886.76 1213.52 L1887.34 1213.52 L1887.93 1213.52 L1888.51 1213.52 L1889.1 1213.52 L1889.69 1213.52 L1890.27 1213.52 L1890.86 1213.52 L1891.45 1213.52 L1892.03 1213.52 L1892.62 1213.52 L1893.21 1213.52 L1893.79 1213.52 L1894.38 1213.52 L1894.96 1213.52 L1895.55 1213.52 L1896.14 1213.52 L1896.72 1213.52 L1897.31 1213.52 L1897.9 1213.52 L1898.48 1213.52 L1899.07 1213.52 L1899.66 1213.52 L1900.24 1213.52 L1900.83 1213.52 L1901.42 1213.52 L1902 1213.52 L1902.59 1213.52 L1903.17 1213.52 L1903.76 1213.52 L1904.35 1213.52 L1904.93 1213.52 L1905.52 1213.52 L1906.11 1213.52 L1906.69 1213.52 L1907.28 1213.52 L1907.87 1213.52 L1908.45 1213.52 L1909.04 1213.52 L1909.63 1213.52 L1910.21 1213.52 L1910.8 1213.52 L1911.38 1213.52 L1911.97 1213.52 L1912.56 1213.52 L1913.14 1213.52 L1913.73 1213.52 L1914.32 1213.52 L1914.9 1213.52 L1915.49 1213.52 L1916.08 1213.52 L1916.66 1213.52 L1917.25 1213.52 L1917.83 1213.52 L1918.42 1213.52 L1919.01 1213.52 L1919.59 1213.52 L1920.18 1213.52 L1920.77 1213.52 L1921.35 1213.52 L1921.94 1213.52 L1922.53 1213.52 L1923.11 1213.52 L1923.7 1213.52 L1924.29 1213.52 L1924.87 1213.52 L1925.46 1213.52 L1926.04 1213.52 L1926.63 1213.52 L1927.22 1213.52 L1927.8 1213.52 L1928.39 1213.52 L1928.98 1213.52 L1929.56 1213.52 L1930.15 1213.52 L1930.74 1213.52 L1931.32 1213.52 L1931.91 1213.52 L1932.5 1213.52 L1933.08 1213.52 L1933.67 1213.52 L1934.25 1213.52 L1934.84 1213.52 L1935.43 1213.52 L1936.01 1213.52 L1936.6 1213.52 L1937.19 1213.52 L1937.77 1213.52 L1938.36 1213.52 L1938.95 1213.52 L1939.53 1213.52 L1940.12 1213.52 L1940.71 1213.52 L1941.29 1213.52 L1941.88 1213.52 L1942.46 1213.52 L1943.05 1213.52 L1943.64 1213.52 L1944.22 1213.52 L1944.81 1213.52 L1945.4 1213.52 L1945.98 1213.52 L1946.57 1213.52 L1947.16 1213.52 L1947.74 1213.52 L1948.33 1213.52 L1948.91 1213.52 L1949.5 1213.52 L1950.09 1213.52 L1950.67 1213.52 L1951.26 1213.52 L1951.85 1213.52 L1952.43 1213.52 L1953.02 1213.52 L1953.61 1213.52 L1954.19 1213.52 L1954.78 1213.52 L1955.37 1213.52 L1955.95 1213.52 L1956.54 1213.52 L1957.12 1213.52 L1957.71 1213.52 L1958.3 1213.52 L1958.88 1213.52 L1959.47 1213.52 L1960.06 1213.52 L1960.64 1213.52 L1961.23 1213.52 L1961.82 1213.52 L1962.4 1213.52 L1962.99 1213.52 L1963.58 1213.52 L1964.16 1213.52 L1964.75 1213.52 L1965.33 1213.52 L1965.92 1213.52 L1966.51 1213.52 L1967.09 1213.52 L1967.68 1213.52 L1968.27 1213.52 L1968.85 1213.52 L1969.44 1213.52 L1970.03 1213.52 L1970.61 1213.52 L1971.2 1213.52 L1971.78 1213.52 L1972.37 1213.52 L1972.96 1213.52 L1973.54 1213.52 L1974.13 1213.52 L1974.72 1213.52 L1975.3 1213.52 L1975.89 1213.52 L1976.48 1213.52 L1977.06 1213.52 L1977.65 1213.52 L1978.24 1213.52 L1978.82 1213.52 L1979.41 1213.52 L1979.99 1213.52 L1980.58 1213.52 L1981.17 1213.52 L1981.75 1213.52 L1982.34 1213.52 L1982.93 1213.52 L1983.51 1213.52 L1984.1 1213.52 L1984.69 1213.52 L1985.27 1213.52 L1985.86 1213.52 L1986.45 1213.52 L1987.03 1213.52 L1987.62 1213.52 L1988.2 1213.52 L1988.79 1213.52 L1989.38 1213.52 L1989.96 1213.52 L1990.55 1213.52 L1991.14 1213.52 L1991.72 1213.52 L1992.31 1213.52 L1992.9 1213.52 L1993.48 1213.52 L1994.07 1213.52 L1994.65 1213.52 L1995.24 1213.52 L1995.83 1213.52 L1996.41 1213.52 L1997 1213.52 L1997.59 1213.52 L1998.17 1213.52 L1998.76 1213.52 L1999.35 1213.52 L1999.93 1213.52 L2000.52 1213.52 L2001.11 1213.52 L2001.69 1213.52 L2002.28 1213.52 L2002.86 1213.52 L2003.45 1213.52 L2004.04 1213.52 L2004.62 1213.52 L2005.21 1213.52 L2005.8 1213.52 L2006.38 1213.52 L2006.97 1213.52 L2007.56 1213.52 L2008.14 1213.52 L2008.73 1213.52 L2009.32 1213.52 L2009.9 1213.52 L2010.49 1213.52 L2011.07 1213.52 L2011.66 1213.52 L2012.25 1213.52 L2012.83 1213.52 L2013.42 1213.52 L2014.01 1213.52 L2014.59 1213.52 L2015.18 1213.52 L2015.77 1213.52 L2016.35 1213.52 L2016.94 1213.52 L2017.53 1213.52 L2018.11 1213.52 L2018.7 1213.52 L2019.28 1213.52 L2019.87 1213.52 L2020.46 1213.52 L2021.04 1213.52 L2021.63 1213.52 L2022.22 1213.52 L2022.8 1213.52 L2023.39 1213.52 L2023.98 1213.52 L2024.56 1213.52 L2025.15 1213.52 L2025.73 1213.52 L2026.32 1213.52 L2026.91 1213.52 L2027.49 1213.52 L2028.08 1213.52 L2028.67 1213.52 L2029.25 1213.52 L2029.84 1213.52 L2030.43 1213.52 L2031.01 1213.52 L2031.6 1213.52 L2032.19 1213.52 L2032.77 1213.52 L2033.36 1213.52 L2033.94 1213.52 L2034.53 1213.52 L2035.12 1213.52 L2035.7 1213.52 L2036.29 1213.52 L2036.88 1213.52 L2037.46 1213.52 L2038.05 1213.52 L2038.64 1213.52 L2039.22 1213.52 L2039.81 1213.52 L2040.4 1213.52 L2040.98 1213.52 L2041.57 1213.52 L2042.15 1213.52 L2042.74 1213.52 L2043.33 1213.52 L2043.91 1213.52 L2044.5 1213.52 L2045.09 1213.52 L2045.67 1213.52 L2046.26 1213.52 L2046.85 1213.52 L2047.43 1213.52 L2048.02 1213.52 L2048.6 1213.52 L2049.19 1213.52 L2049.78 1213.52 L2050.36 1213.52 L2050.95 1213.52 L2051.54 1213.52 L2052.12 1213.52 L2052.71 1213.52 L2053.3 1213.52 L2053.88 1213.52 L2054.47 1213.52 L2055.06 1213.52 L2055.64 1213.52 L2056.23 1213.52 L2056.81 1213.52 L2057.4 1213.52 L2057.99 1213.52 L2058.57 1213.52 L2059.16 1213.52 L2059.75 1213.52 L2060.33 1213.52 L2060.92 1213.52 L2061.51 1213.52 L2062.09 1213.52 L2062.68 1213.52 L2063.27 1213.52 L2063.85 1213.52 L2064.44 1213.52 L2065.02 1213.52 L2065.61 1213.52 L2066.2 1213.52 L2066.78 1213.52 L2067.37 1213.52 L2067.96 1213.52 L2068.54 1213.52 L2069.13 1213.52 L2069.72 1213.52 L2070.3 1213.52 L2070.89 1213.52 L2071.48 1213.52 L2072.06 1213.52 L2072.65 1213.52 L2073.23 1213.52 L2073.82 1213.52 L2074.41 1213.52 L2074.99 1213.52 L2075.58 1213.52 L2076.17 1213.52 L2076.75 1213.52 L2077.34 1213.52 L2077.93 1213.52 L2078.51 1213.52 L2079.1 1213.52 L2079.68 1213.52 L2080.27 1213.52 L2080.86 1213.52 L2081.44 1213.52 L2082.03 1213.52 L2082.62 1213.52 L2083.2 1213.52 L2083.79 1213.52 L2084.38 1213.52 L2084.96 1213.52 L2085.55 1213.52 L2086.14 1213.52 L2086.72 1213.52 L2087.31 1213.52 L2087.89 1213.52 L2088.48 1213.52 L2089.07 1213.52 L2089.65 1213.52 L2090.24 1213.52 L2090.83 1213.52 L2091.41 1213.52 L2092 1213.52 L2092.59 1213.52 L2093.17 1213.52 L2093.76 1213.52 L2094.35 1213.52 L2094.93 1213.52 L2095.52 1213.52 L2096.1 1213.52 L2096.69 1213.52 L2097.28 1213.52 L2097.86 1213.52 L2098.45 1213.52 L2099.04 1213.52 L2099.62 1213.52 L2100.21 1213.52 L2100.8 1213.52 L2101.38 1213.52 L2101.97 1213.52 L2102.55 1213.52 L2103.14 1213.52 L2103.73 1213.52 L2104.31 1213.52 L2104.9 1213.52 L2105.49 1213.52 L2106.07 1213.52 L2106.66 1213.52 L2107.25 1213.52 L2107.83 1213.52 L2108.42 1213.52 L2109.01 1213.52 L2109.59 1213.52 L2110.18 1213.52 L2110.76 1213.52 L2111.35 1213.52 L2111.94 1213.52 L2112.52 1213.52 L2113.11 1213.52 L2113.7 1213.52 L2114.28 1213.52 L2114.87 1213.52 L2115.46 1213.52 L2116.04 1213.52 L2116.63 1213.52 L2117.22 1213.52 L2117.8 1213.52 L2118.39 1213.52 L2118.97 1213.52 L2119.56 1213.52 L2120.15 1213.52 L2120.73 1213.52 L2121.32 1213.52 L2121.91 1213.52 L2122.49 1213.52 L2123.08 1213.52 L2123.67 1213.52 L2124.25 1213.52 L2124.84 1213.52 L2125.42 1213.52 L2126.01 1213.52 L2126.6 1213.52 L2127.18 1213.52 L2127.77 1213.52 L2128.36 1213.52 L2128.94 1213.52 L2129.53 1213.52 L2130.12 1213.52 L2130.7 1213.52 L2131.29 1213.52 L2131.88 1213.52 L2132.46 1213.52 L2133.05 1213.52 L2133.63 1213.52 L2134.22 1213.52 L2134.81 1213.52 L2135.39 1213.52 L2135.98 1213.52 L2136.57 1213.52 L2137.15 1213.52 L2137.74 1213.52 L2138.33 1213.52 L2138.91 1213.52 L2139.5 1213.52 L2140.09 1213.52 L2140.67 1213.52 L2141.26 1213.52 L2141.84 1213.52 L2142.43 1213.52 L2143.02 1213.52 L2143.6 1213.52 L2144.19 1213.52 L2144.78 1213.52 L2145.36 1213.52 L2145.95 1213.52 L2146.54 1213.52 L2147.12 1213.52 L2147.71 1213.52 L2148.3 1213.52 L2148.88 1213.52 L2149.47 1213.52 L2150.05 1213.52 L2150.64 1213.52 L2151.23 1213.52 L2151.81 1213.52 L2152.4 1213.52 L2152.99 1213.52 L2153.57 1213.52 L2154.16 1213.52 L2154.75 1213.52 L2155.33 1213.52 L2155.92 1213.52 L2156.5 1213.52 L2157.09 1213.52 L2157.68 1213.52 L2158.26 1213.52 L2158.26 1212.57 L2157.68 1212.57 L2157.09 1212.57 L2156.5 1212.57 L2155.92 1212.57 L2155.33 1212.57 L2154.75 1212.57 L2154.16 1212.57 L2153.57 1212.57 L2152.99 1212.57 L2152.4 1212.57 L2151.81 1212.57 L2151.23 1212.57 L2150.64 1212.57 L2150.05 1212.57 L2149.47 1212.57 L2148.88 1212.57 L2148.3 1212.57 L2147.71 1212.57 L2147.12 1212.57 L2146.54 1212.57 L2145.95 1212.57 L2145.36 1212.57 L2144.78 1212.57 L2144.19 1212.57 L2143.6 1212.57 L2143.02 1212.57 L2142.43 1212.57 L2141.84 1212.57 L2141.26 1212.57 L2140.67 1212.57 L2140.09 1212.57 L2139.5 1212.57 L2138.91 1212.57 L2138.33 1212.57 L2137.74 1212.57 L2137.15 1212.57 L2136.57 1212.57 L2135.98 1212.57 L2135.39 1212.57 L2134.81 1212.57 L2134.22 1212.57 L2133.63 1212.57 L2133.05 1212.57 L2132.46 1212.57 L2131.88 1212.57 L2131.29 1212.57 L2130.7 1212.57 L2130.12 1212.57 L2129.53 1212.57 L2128.94 1212.57 L2128.36 1212.57 L2127.77 1212.57 L2127.18 1212.57 L2126.6 1212.57 L2126.01 1212.57 L2125.42 1212.57 L2124.84 1212.57 L2124.25 1212.57 L2123.67 1212.57 L2123.08 1212.57 L2122.49 1212.57 L2121.91 1212.57 L2121.32 1212.57 L2120.73 1212.57 L2120.15 1212.57 L2119.56 1212.57 L2118.97 1212.57 L2118.39 1212.57 L2117.8 1212.57 L2117.22 1212.57 L2116.63 1212.57 L2116.04 1212.57 L2115.46 1212.57 L2114.87 1212.57 L2114.28 1212.57 L2113.7 1212.57 L2113.11 1212.57 L2112.52 1212.57 L2111.94 1212.57 L2111.35 1212.57 L2110.76 1212.57 L2110.18 1212.57 L2109.59 1212.57 L2109.01 1212.57 L2108.42 1212.57 L2107.83 1212.57 L2107.25 1212.57 L2106.66 1212.57 L2106.07 1212.57 L2105.49 1212.57 L2104.9 1212.57 L2104.31 1212.57 L2103.73 1212.57 L2103.14 1212.57 L2102.55 1212.57 L2101.97 1212.57 L2101.38 1212.57 L2100.8 1212.57 L2100.21 1212.57 L2099.62 1212.57 L2099.04 1212.57 L2098.45 1212.57 L2097.86 1212.57 L2097.28 1212.57 L2096.69 1212.57 L2096.1 1212.57 L2095.52 1212.57 L2094.93 1212.57 L2094.35 1212.57 L2093.76 1212.57 L2093.17 1212.57 L2092.59 1212.57 L2092 1212.57 L2091.41 1212.57 L2090.83 1212.57 L2090.24 1212.57 L2089.65 1212.57 L2089.07 1212.57 L2088.48 1212.57 L2087.89 1212.57 L2087.31 1212.57 L2086.72 1212.57 L2086.14 1212.57 L2085.55 1212.57 L2084.96 1212.57 L2084.38 1212.57 L2083.79 1212.57 L2083.2 1212.57 L2082.62 1212.57 L2082.03 1212.57 L2081.44 1212.57 L2080.86 1212.57 L2080.27 1212.57 L2079.68 1212.57 L2079.1 1212.57 L2078.51 1212.57 L2077.93 1212.57 L2077.34 1212.57 L2076.75 1212.57 L2076.17 1212.57 L2075.58 1212.57 L2074.99 1212.57 L2074.41 1212.57 L2073.82 1212.57 L2073.23 1212.57 L2072.65 1212.57 L2072.06 1212.57 L2071.48 1212.57 L2070.89 1212.57 L2070.3 1212.57 L2069.72 1212.57 L2069.13 1212.57 L2068.54 1212.57 L2067.96 1212.57 L2067.37 1212.57 L2066.78 1212.57 L2066.2 1212.57 L2065.61 1212.57 L2065.02 1212.57 L2064.44 1212.57 L2063.85 1212.57 L2063.27 1212.57 L2062.68 1212.57 L2062.09 1212.57 L2061.51 1212.57 L2060.92 1212.57 L2060.33 1212.57 L2059.75 1212.57 L2059.16 1212.57 L2058.57 1212.57 L2057.99 1212.57 L2057.4 1212.57 L2056.81 1212.57 L2056.23 1212.57 L2055.64 1212.57 L2055.06 1212.57 L2054.47 1212.57 L2053.88 1212.57 L2053.3 1212.57 L2052.71 1212.57 L2052.12 1212.57 L2051.54 1212.57 L2050.95 1212.57 L2050.36 1212.57 L2049.78 1212.57 L2049.19 1212.57 L2048.6 1212.57 L2048.02 1212.57 L2047.43 1212.57 L2046.85 1212.57 L2046.26 1212.57 L2045.67 1212.57 L2045.09 1212.57 L2044.5 1212.57 L2043.91 1212.57 L2043.33 1212.57 L2042.74 1212.57 L2042.15 1212.57 L2041.57 1212.57 L2040.98 1212.57 L2040.4 1212.57 L2039.81 1212.57 L2039.22 1212.57 L2038.64 1212.57 L2038.05 1212.57 L2037.46 1212.57 L2036.88 1212.57 L2036.29 1212.57 L2035.7 1212.57 L2035.12 1212.57 L2034.53 1212.57 L2033.94 1212.57 L2033.36 1212.57 L2032.77 1212.57 L2032.19 1212.57 L2031.6 1212.57 L2031.01 1212.57 L2030.43 1212.57 L2029.84 1212.57 L2029.25 1212.57 L2028.67 1212.57 L2028.08 1212.57 L2027.49 1212.57 L2026.91 1212.57 L2026.32 1212.57 L2025.73 1212.57 L2025.15 1212.57 L2024.56 1212.57 L2023.98 1212.57 L2023.39 1212.57 L2022.8 1212.57 L2022.22 1212.57 L2021.63 1212.57 L2021.04 1212.57 L2020.46 1212.57 L2019.87 1212.57 L2019.28 1212.57 L2018.7 1212.57 L2018.11 1212.57 L2017.53 1212.57 L2016.94 1212.57 L2016.35 1212.57 L2015.77 1212.57 L2015.18 1212.57 L2014.59 1212.57 L2014.01 1212.57 L2013.42 1212.57 L2012.83 1212.57 L2012.25 1212.57 L2011.66 1212.57 L2011.07 1212.57 L2010.49 1212.57 L2009.9 1212.57 L2009.32 1212.57 L2008.73 1212.57 L2008.14 1212.57 L2007.56 1212.57 L2006.97 1212.57 L2006.38 1212.57 L2005.8 1212.57 L2005.21 1212.57 L2004.62 1212.57 L2004.04 1212.57 L2003.45 1212.57 L2002.86 1212.57 L2002.28 1212.57 L2001.69 1212.57 L2001.11 1212.57 L2000.52 1212.57 L1999.93 1212.57 L1999.35 1212.57 L1998.76 1212.57 L1998.17 1212.57 L1997.59 1212.57 L1997 1212.57 L1996.41 1212.57 L1995.83 1212.57 L1995.24 1212.57 L1994.65 1212.57 L1994.07 1212.57 L1993.48 1212.57 L1992.9 1212.57 L1992.31 1212.57 L1991.72 1212.57 L1991.14 1212.57 L1990.55 1212.57 L1989.96 1212.57 L1989.38 1212.57 L1988.79 1212.57 L1988.2 1212.57 L1987.62 1212.57 L1987.03 1212.57 L1986.45 1212.57 L1985.86 1212.57 L1985.27 1212.57 L1984.69 1212.57 L1984.1 1212.57 L1983.51 1212.57 L1982.93 1212.57 L1982.34 1212.57 L1981.75 1212.57 L1981.17 1212.57 L1980.58 1212.57 L1979.99 1212.57 L1979.41 1212.57 L1978.82 1212.57 L1978.24 1212.57 L1977.65 1212.57 L1977.06 1212.57 L1976.48 1212.57 L1975.89 1212.57 L1975.3 1212.57 L1974.72 1212.57 L1974.13 1212.57 L1973.54 1212.57 L1972.96 1212.57 L1972.37 1212.57 L1971.78 1212.57 L1971.2 1212.57 L1970.61 1212.57 L1970.03 1212.57 L1969.44 1212.57 L1968.85 1212.57 L1968.27 1212.57 L1967.68 1212.57 L1967.09 1212.57 L1966.51 1212.57 L1965.92 1212.57 L1965.33 1212.57 L1964.75 1212.57 L1964.16 1212.57 L1963.58 1212.57 L1962.99 1212.57 L1962.4 1212.57 L1961.82 1212.57 L1961.23 1212.57 L1960.64 1212.57 L1960.06 1212.57 L1959.47 1212.57 L1958.88 1212.57 L1958.3 1212.57 L1957.71 1212.57 L1957.12 1212.57 L1956.54 1212.57 L1955.95 1212.57 L1955.37 1212.57 L1954.78 1212.57 L1954.19 1212.57 L1953.61 1212.57 L1953.02 1212.57 L1952.43 1212.57 L1951.85 1212.57 L1951.26 1212.57 L1950.67 1212.57 L1950.09 1212.57 L1949.5 1212.57 L1948.91 1212.57 L1948.33 1212.57 L1947.74 1212.57 L1947.16 1212.57 L1946.57 1212.57 L1945.98 1212.57 L1945.4 1212.57 L1944.81 1212.57 L1944.22 1212.57 L1943.64 1212.57 L1943.05 1212.57 L1942.46 1212.57 L1941.88 1212.57 L1941.29 1212.57 L1940.71 1212.57 L1940.12 1212.57 L1939.53 1212.57 L1938.95 1212.57 L1938.36 1212.57 L1937.77 1212.57 L1937.19 1212.57 L1936.6 1212.57 L1936.01 1212.57 L1935.43 1212.57 L1934.84 1212.57 L1934.25 1212.57 L1933.67 1212.57 L1933.08 1212.57 L1932.5 1212.57 L1931.91 1212.57 L1931.32 1212.57 L1930.74 1212.57 L1930.15 1212.57 L1929.56 1212.57 L1928.98 1212.57 L1928.39 1212.57 L1927.8 1212.57 L1927.22 1212.57 L1926.63 1212.57 L1926.04 1212.57 L1925.46 1212.57 L1924.87 1212.57 L1924.29 1212.57 L1923.7 1212.57 L1923.11 1212.57 L1922.53 1212.57 L1921.94 1212.57 L1921.35 1212.57 L1920.77 1212.57 L1920.18 1212.57 L1919.59 1212.57 L1919.01 1212.57 L1918.42 1212.57 L1917.83 1212.57 L1917.25 1212.57 L1916.66 1212.57 L1916.08 1212.57 L1915.49 1212.57 L1914.9 1212.57 L1914.32 1212.57 L1913.73 1212.57 L1913.14 1212.57 L1912.56 1212.57 L1911.97 1212.57 L1911.38 1212.57 L1910.8 1212.57 L1910.21 1212.57 L1909.63 1212.57 L1909.04 1212.57 L1908.45 1212.57 L1907.87 1212.57 L1907.28 1212.57 L1906.69 1212.57 L1906.11 1212.57 L1905.52 1212.57 L1904.93 1212.57 L1904.35 1212.57 L1903.76 1212.57 L1903.17 1212.57 L1902.59 1212.57 L1902 1212.57 L1901.42 1212.57 L1900.83 1212.57 L1900.24 1212.57 L1899.66 1212.57 L1899.07 1212.57 L1898.48 1212.57 L1897.9 1212.57 L1897.31 1212.57 L1896.72 1212.57 L1896.14 1212.57 L1895.55 1212.57 L1894.96 1212.57 L1894.38 1212.57 L1893.79 1212.57 L1893.21 1212.57 L1892.62 1212.57 L1892.03 1212.57 L1891.45 1212.57 L1890.86 1212.57 L1890.27 1212.57 L1889.69 1212.57 L1889.1 1212.57 L1888.51 1212.57 L1887.93 1212.57 L1887.34 1212.57 L1886.76 1212.57 L1886.17 1212.57 L1885.58 1212.57 L1885 1212.57 L1884.41 1212.57 L1883.82 1212.57 L1883.24 1212.57 L1882.65 1212.57 L1882.06 1212.57 L1881.48 1212.57 L1880.89 1212.57 L1880.3 1212.57 L1879.72 1212.57 L1879.13 1212.57 L1878.55 1212.57 L1877.96 1212.57 L1877.37 1212.57 L1876.79 1212.57 L1876.2 1212.57 L1875.61 1212.57 L1875.03 1212.57 L1874.44 1212.57 L1873.85 1212.57 L1873.27 1212.57 L1872.68 1212.57 L1872.09 1212.57 L1871.51 1212.57 L1870.92 1212.57 L1870.34 1212.57 L1869.75 1212.57 L1869.16 1212.57 L1868.58 1212.57 L1867.99 1212.57 L1867.4 1212.57 L1866.82 1212.57 L1866.23 1212.57 L1865.64 1212.57 L1865.06 1212.57 L1864.47 1212.57 L1863.88 1212.57 L1863.3 1212.57 L1862.71 1212.57 L1862.13 1212.57 L1861.54 1212.57 L1860.95 1212.57 L1860.37 1212.57 L1859.78 1212.57 L1859.19 1212.57 L1858.61 1212.57 L1858.02 1212.57 L1857.43 1212.57 L1856.85 1212.57 L1856.26 1212.57 L1855.68 1212.57 L1855.09 1212.57 L1854.5 1212.57 L1853.92 1212.57 L1853.33 1212.57 L1852.74 1212.57 L1852.16 1212.57 L1851.57 1212.57 L1850.98 1212.57 L1850.4 1212.57 L1849.81 1212.57 L1849.22 1212.57 L1848.64 1212.57 L1848.05 1212.57 L1847.47 1212.57 L1846.88 1212.57 L1846.29 1212.57 L1845.71 1212.57 L1845.12 1212.57 L1844.53 1212.57 L1843.95 1212.57 L1843.36 1212.57 L1842.77 1212.57 L1842.19 1212.57 L1841.6 1212.57 L1841.01 1212.57 L1840.43 1212.57 L1839.84 1212.57 L1839.26 1212.57 L1838.67 1212.57 L1838.08 1212.57 L1837.5 1212.57 L1836.91 1212.57 L1836.32 1212.57 L1835.74 1212.57 L1835.15 1212.57 L1834.56 1212.57 L1833.98 1212.57 L1833.39 1212.57 L1832.81 1212.57 L1832.22 1212.57 L1831.63 1212.57 L1831.05 1212.57 L1830.46 1212.57 L1829.87 1212.57 L1829.29 1212.57 L1828.7 1212.57 L1828.11 1212.57 L1827.53 1212.57 L1826.94 1212.57 L1826.35 1212.57 L1825.77 1212.57 L1825.18 1212.57 L1824.6 1212.57 L1824.01 1212.57 L1823.42 1212.57 L1822.84 1212.57 L1822.25 1212.57 L1821.66 1212.57 L1821.08 1212.57 L1820.49 1212.57 L1819.9 1212.57 L1819.32 1212.57 L1818.73 1212.57 L1818.14 1212.57 L1817.56 1212.57 L1816.97 1212.57 L1816.39 1212.57 L1815.8 1212.57 L1815.21 1212.57 L1814.63 1212.57 L1814.04 1212.57 L1813.45 1212.57 L1812.87 1212.57 L1812.28 1212.57 L1811.69 1212.57 L1811.11 1212.57 L1810.52 1212.57 L1809.94 1212.57 L1809.35 1212.57 L1808.76 1212.57 L1808.18 1212.57 L1807.59 1212.57 L1807 1212.57 L1806.42 1212.57 L1805.83 1212.57 L1805.24 1212.57 L1804.66 1212.57 L1804.07 1212.57 L1803.48 1212.57 L1802.9 1212.57 L1802.31 1212.57 L1801.73 1212.57 L1801.14 1212.57 L1800.55 1212.57 L1799.97 1212.57 L1799.38 1212.57 L1798.79 1212.57 L1798.21 1212.57 L1797.62 1212.57 L1797.03 1212.57 L1796.45 1212.57 L1795.86 1212.57 L1795.27 1212.57 L1794.69 1212.57 L1794.1 1212.57 L1793.52 1212.57 L1792.93 1212.57 L1792.34 1212.57 L1791.76 1212.57 L1791.17 1212.57 L1790.58 1212.57 L1790 1212.57 L1789.41 1212.57 L1788.82 1212.57 L1788.24 1212.57 L1787.65 1212.57 L1787.06 1212.57 L1786.48 1212.57 L1785.89 1212.57 L1785.31 1212.57 L1784.72 1212.57 L1784.13 1212.57 L1783.55 1212.57 L1782.96 1212.57 L1782.37 1212.57 L1781.79 1212.57 L1781.2 1212.57 L1780.61 1212.57 L1780.03 1212.57 L1779.44 1212.57 L1778.86 1212.57 L1778.27 1212.57 L1777.68 1212.57 L1777.1 1212.57 L1776.51 1212.57 L1775.92 1212.57 L1775.34 1212.57 L1774.75 1212.57 L1774.16 1212.57 L1773.58 1212.57 L1772.99 1212.57 L1772.4 1212.57 L1771.82 1212.57 L1771.23 1212.57 L1770.65 1212.57 L1770.06 1212.57 L1769.47 1212.57 L1768.89 1212.57 L1768.3 1212.57 L1767.71 1212.57 L1767.13 1212.57 L1766.54 1212.57 L1765.95 1212.57 L1765.37 1212.57 L1764.78 1212.57 L1764.19 1212.57 L1763.61 1212.57 L1763.02 1212.57 L1762.44 1212.57 L1761.85 1212.57 L1761.26 1212.57 L1760.68 1212.57 L1760.09 1212.57 L1759.5 1212.57 L1758.92 1212.57 L1758.33 1212.57 L1757.74 1212.57 L1757.16 1212.57 L1756.57 1212.57 L1755.99 1212.57 L1755.4 1212.57 L1754.81 1212.57 L1754.23 1212.57 L1753.64 1212.57 L1753.05 1212.57 L1752.47 1212.57 L1751.88 1212.57 L1751.29 1212.57 L1750.71 1212.57 L1750.12 1212.57 L1749.53 1212.57 L1748.95 1212.57 L1748.36 1212.57 L1747.78 1212.57 L1747.19 1212.57 L1746.6 1212.57 L1746.02 1212.57 L1745.43 1212.57 L1744.84 1212.57 L1744.26 1212.57 L1743.67 1212.57 L1743.08 1212.57 L1742.5 1212.57 L1741.91 1212.57 L1741.32 1212.57 L1740.74 1212.57 L1740.15 1212.57 L1739.57 1212.57 L1738.98 1212.57 L1738.39 1212.57 L1737.81 1212.57 L1737.22 1212.57 L1736.63 1212.57 L1736.05 1212.57 L1735.46 1212.57 L1734.87 1212.57 L1734.29 1212.57 L1733.7 1212.57 L1733.11 1212.57 L1732.53 1212.57 L1731.94 1212.57 L1731.36 1212.57 L1730.77 1212.57 L1730.18 1212.57 L1729.6 1212.57 L1729.01 1212.57 L1728.42 1212.57 L1727.84 1212.57 L1727.25 1212.57 L1726.66 1212.57 L1726.08 1212.57 L1725.49 1212.57 L1724.91 1212.57 L1724.32 1212.57 L1723.73 1212.57 L1723.15 1212.57 L1722.56 1212.57 L1721.97 1212.57 L1721.39 1212.57 L1720.8 1212.57 L1720.21 1212.57 L1719.63 1212.57 L1719.04 1212.57 L1718.45 1212.57 L1717.87 1212.57 L1717.28 1212.57 L1716.7 1212.57 L1716.11 1212.57 L1715.52 1212.57 L1714.94 1212.57 L1714.35 1212.57 L1713.76 1212.57 L1713.18 1212.57 L1712.59 1212.57 L1712 1212.57 L1711.42 1212.57 L1710.83 1212.57 L1710.24 1212.57 L1709.66 1212.57 L1709.07 1212.57 L1708.49 1212.57 L1707.9 1212.57 L1707.31 1212.57 L1706.73 1212.57 L1706.14 1212.57 L1705.55 1212.57 L1704.97 1212.57 L1704.38 1212.57 L1703.79 1212.57 L1703.21 1212.57 L1702.62 1212.57 L1702.04 1212.57 L1701.45 1212.57 L1700.86 1212.57 L1700.28 1212.57 L1699.69 1212.57 L1699.1 1212.57 L1698.52 1212.57 L1697.93 1212.57 L1697.34 1212.57 L1696.76 1212.57 L1696.17 1212.57 L1695.58 1212.57 L1695 1212.57 L1694.41 1212.57 L1693.83 1212.57 L1693.24 1212.57 L1692.65 1212.57 L1692.07 1212.57 L1691.48 1212.57 L1690.89 1212.57 L1690.31 1212.57 L1689.72 1212.57 L1689.13 1212.57 L1688.55 1212.57 L1687.96 1212.57 L1687.37 1212.57 L1686.79 1212.57 L1686.2 1212.57 L1685.62 1212.57 L1685.03 1212.57 L1684.44 1212.57 L1683.86 1212.57 L1683.27 1212.57 L1682.68 1212.57 L1682.1 1212.57 L1681.51 1212.57 L1680.92 1212.57 L1680.34 1212.57 L1679.75 1212.57 L1679.17 1212.57 L1678.58 1212.57 L1677.99 1212.57 L1677.41 1212.57 L1676.82 1212.57 L1676.23 1212.57 L1675.65 1212.57 L1675.06 1212.57 L1674.47 1212.57 L1673.89 1212.57 L1673.3 1212.57 L1672.71 1212.57 L1672.13 1212.57 L1671.54 1212.57 L1670.96 1212.57 L1670.37 1212.57 L1669.78 1212.57 L1669.2 1212.57 L1668.61 1212.57 L1668.02 1212.57 L1667.44 1212.57 L1666.85 1212.57 L1666.26 1212.57 L1665.68 1212.57 L1665.09 1212.57 L1664.5 1212.57 L1663.92 1212.57 L1663.33 1212.57 L1662.75 1212.57 L1662.16 1212.57 L1661.57 1212.57 L1660.99 1212.57 L1660.4 1212.57 L1659.81 1212.57 L1659.23 1212.57 L1658.64 1212.57 L1658.05 1212.57 L1657.47 1212.57 L1656.88 1212.57 L1656.29 1212.57 L1655.71 1212.57 L1655.12 1212.57 L1654.54 1212.57 L1653.95 1212.57 L1653.36 1212.57 L1652.78 1212.57 L1652.19 1212.57 L1651.6 1212.57 L1651.02 1212.57 L1650.43 1212.57 L1649.84 1212.57 L1649.26 1212.57 L1648.67 1212.57 L1648.09 1212.57 L1647.5 1212.57 L1646.91 1212.57 L1646.33 1212.57 L1645.74 1212.57 L1645.15 1212.57 L1644.57 1212.57 L1643.98 1212.57 L1643.39 1212.57 L1642.81 1212.57 L1642.22 1212.57 L1641.63 1212.57 L1641.05 1212.57 L1640.46 1212.57 L1639.88 1212.57 L1639.29 1212.57 L1638.7 1212.57 L1638.12 1212.57 L1637.53 1212.57 L1636.94 1212.57 L1636.36 1212.57 L1635.77 1212.57 L1635.18 1212.57 L1634.6 1212.57 L1634.01 1212.57 L1633.42 1212.57 L1632.84 1212.57 L1632.25 1212.57 L1631.67 1212.57 L1631.08 1212.57 L1630.49 1212.57 L1629.91 1212.57 L1629.32 1212.57 L1628.73 1212.57 L1628.15 1212.57 L1627.56 1212.57 L1626.97 1212.57 L1626.39 1212.57 L1625.8 1212.57 L1625.22 1212.57 L1624.63 1212.57 L1624.04 1212.57 L1623.46 1212.57 L1622.87 1212.57 L1622.28 1212.57 L1621.7 1212.57 L1621.11 1212.57 L1620.52 1212.57 L1619.94 1212.57 L1619.35 1212.57 L1618.76 1212.57 L1618.18 1212.57 L1617.59 1212.57 L1617.01 1212.57 L1616.42 1212.57 L1615.83 1212.57 L1615.25 1212.57 L1614.66 1212.57 L1614.07 1212.57 L1613.49 1212.57 L1612.9 1212.57 L1612.31 1212.57 L1611.73 1212.57 L1611.14 1212.57 L1610.55 1212.57 L1609.97 1212.57 L1609.38 1212.57 L1608.8 1212.57 L1608.21 1212.57 L1607.62 1212.57 L1607.04 1212.57 L1606.45 1212.57 L1605.86 1212.57 L1605.28 1212.57 L1604.69 1212.57 L1604.1 1212.57 L1603.52 1212.57 L1602.93 1212.57 L1602.34 1212.57 L1601.76 1212.57 L1601.17 1212.57 L1600.59 1212.57 L1600 1212.57 L1599.41 1212.57 L1598.83 1212.57 L1598.24 1212.57 L1597.65 1212.57 L1597.07 1212.57 L1596.48 1212.57 L1595.89 1212.57 L1595.31 1212.57 L1594.72 1212.57 L1594.14 1212.57 L1593.55 1212.57 L1592.96 1212.57 L1592.38 1212.57 L1591.79 1212.57 L1591.2 1212.57 L1590.62 1212.57 L1590.03 1212.57 L1589.44 1212.57 L1588.86 1212.57 L1588.27 1212.57 L1587.68 1212.57 L1587.1 1212.57 L1586.51 1212.57 L1585.93 1212.57 L1585.34 1212.57 L1584.75 1212.57 L1584.17 1212.57 L1583.58 1212.57 L1582.99 1212.57 L1582.41 1212.57 L1581.82 1212.57 L1581.23 1212.57 L1580.65 1212.57 L1580.06 1212.57 L1579.47 1212.57 L1578.89 1212.57 L1578.3 1212.57 L1577.72 1212.57 L1577.13 1212.57 L1576.54 1212.57 L1575.96 1212.57 L1575.37 1212.57 L1574.78 1212.57 L1574.2 1212.57 L1573.61 1212.57 L1573.02 1212.57 L1572.44 1212.57 L1571.85 1212.57 L1571.27 1212.57 L1570.68 1212.57 L1570.09 1212.57 L1569.51 1212.57 L1568.92 1212.57 L1568.33 1212.57 L1567.75 1212.57 L1567.16 1212.57 L1566.57 1212.57 L1565.99 1212.57 L1565.4 1212.57 L1564.81 1212.57 L1564.23 1212.57 L1563.64 1212.57 L1563.06 1212.57 L1562.47 1212.57 L1561.88 1212.57 L1561.3 1212.57 L1560.71 1212.57 L1560.12 1212.57 L1559.54 1212.57 L1558.95 1212.57 L1558.36 1212.57 L1557.78 1212.57 L1557.19 1212.57 L1556.6 1212.57 L1556.02 1212.57 L1555.43 1212.57 L1554.85 1212.57 L1554.26 1212.57 L1553.67 1212.57 L1553.09 1212.57 L1552.5 1212.57 L1551.91 1212.57 L1551.33 1212.57 L1550.74 1212.57 L1550.15 1212.57 L1549.57 1212.57 L1548.98 1212.57 L1548.4 1212.57 L1547.81 1212.57 L1547.22 1212.57 L1546.64 1212.57 L1546.05 1212.57 L1545.46 1212.57 L1544.88 1212.57 L1544.29 1212.57 L1543.7 1212.57 L1543.12 1212.57 L1542.53 1212.57 L1541.94 1212.57 L1541.36 1212.57 L1540.77 1212.57 L1540.19 1212.57 L1539.6 1212.57 L1539.01 1212.57 L1538.43 1212.57 L1537.84 1212.57 L1537.25 1212.57 L1536.67 1212.57 L1536.08 1212.57 L1535.49 1212.57 L1534.91 1212.57 L1534.32 1212.57 L1533.73 1212.57 L1533.15 1212.57 L1532.56 1212.57 L1531.98 1212.57 L1531.39 1212.57 L1530.8 1212.57 L1530.22 1212.57 L1529.63 1212.57 L1529.04 1212.57 L1528.46 1212.57 L1527.87 1212.57 L1527.28 1212.57 L1526.7 1212.57 L1526.11 1212.57 L1525.52 1212.57 L1524.94 1212.57 L1524.35 1212.57 L1523.77 1212.57 L1523.18 1212.57 L1522.59 1212.57 L1522.01 1212.57 L1521.42 1212.57 L1520.83 1212.57 L1520.25 1212.57 L1519.66 1212.57 L1519.07 1212.57 L1518.49 1212.57 L1517.9 1212.57 L1517.32 1212.57 L1516.73 1212.57 L1516.14 1212.57 L1515.56 1212.57 L1514.97 1212.57 L1514.38 1212.57 L1513.8 1212.57 L1513.21 1212.57 L1512.62 1212.57 L1512.04 1212.57 L1511.45 1212.57 L1510.86 1212.57 L1510.28 1212.57 L1509.69 1212.57 L1509.11 1212.57 L1508.52 1212.57 L1507.93 1212.57 L1507.35 1212.57 L1506.76 1212.57 L1506.17 1212.57 L1505.59 1212.57 L1505 1212.57 L1504.41 1212.57 L1503.83 1212.57 L1503.24 1212.57 L1502.65 1212.57 L1502.07 1212.57 L1501.48 1212.57 L1500.9 1212.57 L1500.31 1212.57 L1499.72 1212.57 L1499.14 1212.57 L1498.55 1212.57 L1497.96 1212.57 L1497.38 1212.57 L1496.79 1212.57 L1496.2 1212.57 L1495.62 1212.57 L1495.03 1212.57 L1494.45 1212.57 L1493.86 1212.57 L1493.27 1212.57 L1492.69 1212.57 L1492.1 1212.57 L1491.51 1212.57 L1490.93 1212.57 L1490.34 1212.57 L1489.75 1212.57 L1489.17 1212.57 L1488.58 1212.57 L1487.99 1212.57 L1487.41 1212.57 L1486.82 1212.57 L1486.24 1212.57 L1485.65 1212.57 L1485.06 1212.57 L1484.48 1212.57 L1483.89 1212.57 L1483.3 1212.57 L1482.72 1212.57 L1482.13 1212.57 L1481.54 1212.57 L1480.96 1212.57 L1480.37 1212.57 L1479.78 1212.57 L1479.2 1212.57 L1478.61 1212.57 L1478.03 1212.57 L1477.44 1212.57 L1476.85 1212.57 L1476.27 1212.57 L1475.68 1212.57 L1475.09 1212.57 L1474.51 1212.57 L1473.92 1212.57 L1473.33 1212.57 L1472.75 1212.57 L1472.16 1212.57 L1471.57 1212.57 L1470.99 1212.57 L1470.4 1212.57 L1469.82 1212.57 L1469.23 1212.57 L1468.64 1212.57 L1468.06 1212.57 L1467.47 1212.57 L1466.88 1212.57 L1466.3 1212.57 L1465.71 1212.57 L1465.12 1212.57 L1464.54 1212.57 L1463.95 1212.57 L1463.37 1212.57 L1462.78 1212.57 L1462.19 1212.57 L1461.61 1212.57 L1461.02 1212.57 L1460.43 1212.57 L1459.85 1212.57 L1459.26 1212.57 L1458.67 1212.57 L1458.09 1212.57 L1457.5 1212.57 L1456.91 1212.57 L1456.33 1212.57 L1455.74 1212.57 L1455.16 1212.57 L1454.57 1212.57 L1453.98 1212.57 L1453.4 1212.57 L1452.81 1212.57 L1452.22 1212.57 L1451.64 1212.57 L1451.05 1212.57 L1450.46 1212.57 L1449.88 1212.57 L1449.29 1212.57 L1448.7 1212.57 L1448.12 1212.57 L1447.53 1212.57 L1446.95 1212.57 L1446.36 1212.57 L1445.77 1212.57 L1445.19 1212.57 L1444.6 1212.57 L1444.01 1212.57 L1443.43 1212.57 L1442.84 1212.57 L1442.25 1212.57 L1441.67 1212.57 L1441.08 1212.57 L1440.5 1212.57 L1439.91 1212.57 L1439.32 1212.57 L1438.74 1212.57 L1438.15 1212.57 L1437.56 1212.57 L1436.98 1212.57 L1436.39 1212.57 L1435.8 1212.57 L1435.22 1212.57 L1434.63 1212.57 L1434.04 1212.57 L1433.46 1212.57 L1432.87 1212.57 L1432.29 1212.57 L1431.7 1212.57 L1431.11 1212.57 L1430.53 1212.57 L1429.94 1212.57 L1429.35 1212.57 L1428.77 1212.57 L1428.18 1212.57 L1427.59 1212.57 L1427.01 1212.57 L1426.42 1212.57 L1425.83 1212.57 L1425.25 1212.57 L1424.66 1212.57 L1424.08 1212.57 L1423.49 1212.57 L1422.9 1212.57 L1422.32 1212.57 L1421.73 1212.57 L1421.14 1212.57 L1420.56 1212.57 L1419.97 1212.57 L1419.38 1212.57 L1418.8 1212.57 L1418.21 1212.57 L1417.63 1212.57 L1417.04 1212.57 L1416.45 1212.57 L1415.87 1212.57 L1415.28 1212.57 L1414.69 1212.57 L1414.11 1212.57 L1413.52 1212.57 L1412.93 1212.57 L1412.35 1212.57 L1411.76 1212.57 L1411.17 1212.57 L1410.59 1212.57 L1410 1212.57 L1409.42 1212.57 L1408.83 1212.57 L1408.24 1212.57 L1407.66 1212.57 L1407.07 1212.57 L1406.48 1212.57 L1405.9 1212.57 L1405.31 1212.57 L1404.72 1212.57 L1404.14 1212.57 L1403.55 1212.57 L1402.96 1212.57 L1402.38 1212.57 L1401.79 1212.57 L1401.21 1212.57 L1400.62 1212.57 L1400.03 1212.57 L1399.45 1212.57 L1398.86 1212.57 L1398.27 1212.57 L1397.69 1212.57 L1397.1 1212.57 L1396.51 1212.57 L1395.93 1212.57 L1395.34 1212.57 L1394.75 1212.57 L1394.17 1212.57 L1393.58 1212.57 L1393 1212.57 L1392.41 1212.57 L1391.82 1212.57 L1391.24 1212.57 L1390.65 1212.57 L1390.06 1212.57 L1389.48 1212.57 L1388.89 1212.57 L1388.3 1212.57 L1387.72 1212.57 L1387.13 1212.57 L1386.55 1212.57 L1385.96 1212.57 L1385.37 1212.57 L1384.79 1212.57 L1384.2 1212.57 L1383.61 1212.57 L1383.03 1212.57 L1382.44 1212.57 L1381.85 1212.57 L1381.27 1212.57 L1380.68 1212.57 L1380.09 1212.57 L1379.51 1212.57 L1378.92 1212.57 L1378.34 1212.57 L1377.75 1212.57 L1377.16 1212.57 L1376.58 1212.57 L1375.99 1212.57 L1375.4 1212.57 L1374.82 1212.57 L1374.23 1212.57 L1373.64 1212.57 L1373.06 1212.57 L1372.47 1212.57 L1371.88 1212.57 L1371.3 1212.57 L1370.71 1212.57 L1370.13 1212.57 L1369.54 1212.57 L1368.95 1212.57 L1368.37 1212.57 L1367.78 1212.57 L1367.19 1212.57 L1366.61 1212.57 L1366.02 1212.57 L1365.43 1212.57 L1364.85 1212.57 L1364.26 1212.57 L1363.68 1212.57 L1363.09 1212.57 L1362.5 1212.57 L1361.92 1212.57 L1361.33 1212.57 L1360.74 1212.57 L1360.16 1212.57 L1359.57 1212.57 L1358.98 1212.57 L1358.4 1212.57 L1357.81 1212.57 L1357.22 1212.57 L1356.64 1212.57 L1356.05 1212.57 L1355.47 1212.57 L1354.88 1212.57 L1354.29 1212.57 L1353.71 1212.57 L1353.12 1212.57 L1352.53 1212.57 L1351.95 1212.57 L1351.36 1212.57 L1350.77 1212.57 L1350.19 1212.57 L1349.6 1212.57 L1349.01 1212.57 L1348.43 1212.57 L1347.84 1212.57 L1347.26 1212.57 L1346.67 1212.57 L1346.08 1212.57 L1345.5 1212.57 L1344.91 1212.57 L1344.32 1212.57 L1343.74 1212.57 L1343.15 1212.57 L1342.56 1212.57 L1341.98 1212.57 L1341.39 1212.57 L1340.8 1212.57 L1340.22 1212.57 L1339.63 1212.57 L1339.05 1212.57 L1338.46 1212.57 L1337.87 1212.57 L1337.29 1212.57 L1336.7 1212.57 L1336.11 1212.57 L1335.53 1212.57 L1334.94 1212.57 L1334.35 1212.57 L1333.77 1212.57 L1333.18 1212.57 L1332.6 1212.57 L1332.01 1212.57 L1331.42 1212.57 L1330.84 1212.57 L1330.25 1212.57 L1329.66 1212.57 L1329.08 1212.57 L1328.49 1212.57 L1327.9 1212.57 L1327.32 1212.57 L1326.73 1212.57 L1326.14 1212.57 L1325.56 1212.57 L1324.97 1212.57 L1324.39 1212.57 L1323.8 1212.57 L1323.21 1212.57 L1322.63 1212.57 L1322.04 1212.57 L1321.45 1212.57 L1320.87 1212.57 L1320.28 1212.57 L1319.69 1212.57 L1319.11 1212.57 L1318.52 1212.57 L1317.93 1212.57 L1317.35 1212.57 L1316.76 1212.57 L1316.18 1212.57 L1315.59 1212.57 L1315 1212.57 L1314.42 1212.57 L1313.83 1212.57 L1313.24 1212.57 L1312.66 1212.57 L1312.07 1212.57 L1311.48 1212.57 L1310.9 1212.57 L1310.31 1212.57 L1309.73 1212.57 L1309.14 1212.57 L1308.55 1212.57 L1307.97 1212.57 L1307.38 1212.57 L1306.79 1212.57 L1306.21 1212.57 L1305.62 1212.57 L1305.03 1212.57 L1304.45 1212.57 L1303.86 1212.57 L1303.27 1212.57 L1302.69 1212.57 L1302.1 1212.57 L1301.52 1212.57 L1300.93 1212.57 L1300.34 1212.57 L1299.76 1212.57 L1299.17 1212.57 L1298.58 1212.57 L1298 1212.57 L1297.41 1212.57 L1296.82 1212.57 L1296.24 1212.57 L1295.65 1212.57 L1295.06 1212.57 L1294.48 1212.57 L1293.89 1212.57 L1293.31 1212.57 L1292.72 1212.57 L1292.13 1212.57 L1291.55 1212.57 L1290.96 1212.57 L1290.37 1212.57 L1289.79 1212.57 L1289.2 1212.57 L1288.61 1212.57 L1288.03 1212.57 L1287.44 1212.57 L1286.86 1212.57 L1286.27 1212.57 L1285.68 1212.57 L1285.1 1212.57 L1284.51 1212.57 L1283.92 1212.57 L1283.34 1212.57 L1282.75 1212.57 L1282.16 1212.57 L1281.58 1212.57 L1280.99 1212.57 L1280.4 1212.57 L1279.82 1212.57 L1279.23 1212.57 L1278.65 1212.57 L1278.06 1212.57 L1277.47 1212.57 L1276.89 1212.57 L1276.3 1212.57 L1275.71 1212.57 L1275.13 1212.57 L1274.54 1212.57 L1273.95 1212.57 L1273.37 1212.57 L1272.78 1212.57 L1272.19 1212.57 L1271.61 1212.57 L1271.02 1212.57 L1270.44 1212.57 L1269.85 1212.57 L1269.26 1212.57 L1268.68 1212.57 L1268.09 1212.57 L1267.5 1212.57 L1266.92 1212.57 L1266.33 1212.57 L1265.74 1212.57 L1265.16 1212.57 L1264.57 1212.57 L1263.98 1212.57 L1263.4 1212.57 L1262.81 1212.57 L1262.23 1212.57 L1261.64 1212.57 L1261.05 1212.57 L1260.47 1212.57 L1259.88 1212.57 L1259.29 1212.57 L1258.71 1212.57 L1258.12 1212.57 L1257.53 1212.57 L1256.95 1212.57 L1256.36 1212.57 L1255.78 1212.57 L1255.19 1212.57 L1254.6 1212.57 L1254.02 1212.57 L1253.43 1212.57 L1252.84 1212.57 L1252.26 1212.57 L1251.67 1212.57 L1251.08 1212.57 L1250.5 1212.57 L1249.91 1212.57 L1249.32 1212.57 L1248.74 1212.57 L1248.15 1212.57 L1247.57 1212.57 L1246.98 1212.57 L1246.39 1212.57 L1245.81 1212.57 L1245.22 1212.57 L1244.63 1212.57 L1244.05 1212.57 L1243.46 1212.57 L1242.87 1212.57 L1242.29 1212.57 L1241.7 1212.57 L1241.11 1212.57 L1240.53 1212.57 L1239.94 1212.57 L1239.36 1212.57 L1238.77 1212.57 L1238.18 1212.57 L1237.6 1212.57 L1237.01 1212.57 L1236.42 1212.57 L1235.84 1212.57 L1235.25 1212.57 L1234.66 1212.57 L1234.08 1212.57 L1233.49 1212.57 L1232.91 1212.57 L1232.32 1212.57 L1231.73 1212.57 L1231.15 1212.57 L1230.56 1212.57 L1229.97 1212.57 L1229.39 1212.57 L1228.8 1212.57 L1228.21 1212.57 L1227.63 1212.57 L1227.04 1212.57 L1226.45 1212.57 L1225.87 1212.57 L1225.28 1212.57 L1224.7 1212.57 L1224.11 1212.57 L1223.52 1212.57 L1222.94 1212.57 L1222.35 1212.57 L1221.76 1212.57 L1221.18 1212.57 L1220.59 1212.57 L1220 1212.57 L1219.42 1212.57 L1218.83 1212.57 L1218.24 1212.57 L1217.66 1212.57 L1217.07 1212.57 L1216.49 1212.57 L1215.9 1212.57 L1215.31 1212.57 L1214.73 1212.57 L1214.14 1212.57 L1213.55 1212.57 L1212.97 1212.57 L1212.38 1212.57 L1211.79 1212.57 L1211.21 1212.57 L1210.62 1212.57 L1210.03 1212.57 L1209.45 1212.57 L1208.86 1212.57 L1208.28 1212.57 L1207.69 1212.57 L1207.1 1212.57 L1206.52 1212.57 L1205.93 1212.57 L1205.34 1212.57 L1204.76 1212.57 L1204.17 1212.57 L1203.58 1212.57 L1203 1212.57 L1202.41 1212.57 L1201.83 1212.57 L1201.24 1212.57 L1200.65 1212.57 L1200.07 1212.57 L1199.48 1212.57 L1198.89 1212.57 L1198.31 1212.57 L1197.72 1212.57 L1197.13 1212.57 L1196.55 1212.57 L1195.96 1212.57 L1195.37 1212.57 L1194.79 1212.57 L1194.2 1212.57 L1193.62 1212.57 L1193.03 1212.57 L1192.44 1212.57 L1191.86 1212.57 L1191.27 1212.57 L1190.68 1212.57 L1190.1 1212.57 L1189.51 1212.57 L1188.92 1212.57 L1188.34 1212.57 L1187.75 1212.57 L1187.16 1212.57 L1186.58 1212.57 L1185.99 1212.57 L1185.41 1212.57 L1184.82 1212.57 L1184.23 1212.57 L1183.65 1212.57 L1183.06 1212.57 L1182.47 1212.57 L1181.89 1212.57 L1181.3 1212.57 L1180.71 1212.57 L1180.13 1212.57 L1179.54 1212.57 L1178.96 1212.57 L1178.37 1212.57 L1177.78 1212.57 L1177.2 1212.57 L1176.61 1212.57 L1176.02 1212.57 L1175.44 1212.57 L1174.85 1212.57 L1174.26 1212.57 L1173.68 1212.57 L1173.09 1212.57 L1172.5 1212.57 L1171.92 1212.57 L1171.33 1212.57 L1170.75 1212.57 L1170.16 1212.57 L1169.57 1212.57 L1168.99 1212.57 L1168.4 1212.57 L1167.81 1212.57 L1167.23 1212.57 L1166.64 1212.57 L1166.05 1212.57 L1165.47 1212.57 L1164.88 1212.57 L1164.29 1212.57 L1163.71 1212.57 L1163.12 1212.57 L1162.54 1212.57 L1161.95 1212.57 L1161.36 1212.57 L1160.78 1212.57 L1160.19 1212.57 L1159.6 1212.57 L1159.02 1212.57 L1158.43 1212.57 L1157.84 1212.57 L1157.26 1212.57 L1156.67 1212.57 L1156.09 1212.57 L1155.5 1212.57 L1154.91 1212.57 L1154.33 1212.57 L1153.74 1212.57 L1153.15 1212.57 L1152.57 1212.57 L1151.98 1212.57 L1151.39 1212.57 L1150.81 1212.57 L1150.22 1212.57 L1149.63 1212.57 L1149.05 1212.57 L1148.46 1212.57 L1147.88 1212.57 L1147.29 1212.57 L1146.7 1212.57 L1146.12 1212.57 L1145.53 1212.57 L1144.94 1212.57 L1144.36 1212.57 L1143.77 1212.57 L1143.18 1212.57 L1142.6 1212.57 L1142.01 1212.57 L1141.42 1212.57 L1140.84 1212.57 L1140.25 1212.57 L1139.67 1212.57 L1139.08 1212.57 L1138.49 1212.57 L1137.91 1212.57 L1137.32 1212.57 L1136.73 1212.57 L1136.15 1212.57 L1135.56 1212.57 L1134.97 1212.57 L1134.39 1212.57 L1133.8 1212.57 L1133.21 1212.57 L1132.63 1212.57 L1132.04 1212.57 L1131.46 1212.57 L1130.87 1212.57 L1130.28 1212.57 L1129.7 1212.57 L1129.11 1212.57 L1128.52 1212.57 L1127.94 1212.57 L1127.35 1212.57 L1126.76 1212.57 L1126.18 1212.57 L1125.59 1212.57 L1125.01 1212.57 L1124.42 1212.57 L1123.83 1212.57 L1123.25 1212.57 L1122.66 1212.57 L1122.07 1212.57 L1121.49 1212.57 L1120.9 1212.57 L1120.31 1212.57 L1119.73 1212.57 L1119.14 1212.57 L1118.55 1212.57 L1117.97 1212.57 L1117.38 1212.57 L1116.8 1212.57 L1116.21 1212.57 L1115.62 1212.57 L1115.04 1212.57 L1114.45 1212.57 L1113.86 1212.57 L1113.28 1212.57 L1112.69 1212.57 L1112.1 1212.57 L1111.52 1212.57 L1110.93 1212.57 L1110.34 1212.57 L1109.76 1212.57 L1109.17 1212.57 L1108.59 1212.57 L1108 1212.57 L1107.41 1212.57 L1106.83 1212.57 L1106.24 1212.57 L1105.65 1212.57 L1105.07 1212.57 L1104.48 1212.57 L1103.89 1212.57 L1103.31 1212.57 L1102.72 1212.57 L1102.14 1212.57 L1101.55 1212.57 L1100.96 1212.57 L1100.38 1212.57 L1099.79 1212.57 L1099.2 1212.57 L1098.62 1212.57 L1098.03 1212.57 L1097.44 1212.57 L1096.86 1212.57 L1096.27 1212.57 L1095.68 1212.57 L1095.1 1212.57 L1094.51 1212.57 L1093.93 1212.57 L1093.34 1212.57 L1092.75 1212.57 L1092.17 1212.57 L1091.58 1212.57 L1090.99 1212.57 L1090.41 1212.57 L1089.82 1212.57 L1089.23 1212.57 L1088.65 1212.57 L1088.06 1212.57 L1087.47 1212.57 L1086.89 1212.57 L1086.3 1212.57 L1085.72 1212.57 L1085.13 1212.57 L1084.54 1212.57 L1083.96 1212.57 L1083.37 1212.57 L1082.78 1212.57 L1082.2 1212.57 L1081.61 1212.57 L1081.02 1212.57 L1080.44 1212.57 L1079.85 1212.57 L1079.26 1212.57 L1078.68 1212.57 L1078.09 1212.57 L1077.51 1212.57 L1076.92 1212.57 L1076.33 1212.57 L1075.75 1212.57 L1075.16 1212.57 L1074.57 1212.57 L1073.99 1212.57 L1073.4 1212.57 L1072.81 1212.57 L1072.23 1212.57 L1071.64 1212.57 L1071.06 1212.57 L1070.47 1212.57 L1069.88 1212.57 L1069.3 1212.57 L1068.71 1212.57 L1068.12 1212.57 L1067.54 1212.57 L1066.95 1212.57 L1066.36 1212.57 L1065.78 1212.57 L1065.19 1212.57 L1064.6 1212.57 L1064.02 1212.57 L1063.43 1212.57 L1062.85 1212.57 L1062.26 1212.57 L1061.67 1212.57 L1061.09 1212.57 L1060.5 1212.57 L1059.91 1212.57 L1059.33 1212.57 L1058.74 1212.57 L1058.15 1212.57 L1057.57 1212.57 L1056.98 1212.57 L1056.39 1212.57 L1055.81 1212.57 L1055.22 1212.57 L1054.64 1212.57 L1054.05 1212.57 L1053.46 1212.57 L1052.88 1212.57 L1052.29 1212.57 L1051.7 1212.57 L1051.12 1212.57 L1050.53 1212.57 L1049.94 1212.57 L1049.36 1212.57 L1048.77 1212.57 L1048.19 1212.57 L1047.6 1212.57 L1047.01 1212.57 L1046.43 1212.57 L1045.84 1212.57 L1045.25 1212.57 L1044.67 1212.57 L1044.08 1212.57 L1043.49 1212.57 L1042.91 1212.57 L1042.32 1212.57 L1041.73 1212.57 L1041.15 1212.57 L1040.56 1212.57 L1039.98 1212.57 L1039.39 1212.57 L1038.8 1212.57 L1038.22 1212.57 L1037.63 1212.57 L1037.04 1212.57 L1036.46 1212.57 L1035.87 1212.57 L1035.28 1212.57 L1034.7 1212.57 L1034.11 1212.57 L1033.52 1212.57 L1032.94 1212.57 L1032.35 1212.57 L1031.77 1212.57 L1031.18 1212.57 L1030.59 1212.57 L1030.01 1212.57 L1029.42 1212.57 L1028.83 1212.57 L1028.25 1212.57 L1027.66 1212.57 L1027.07 1212.57 L1026.49 1212.57 L1025.9 1212.57 L1025.32 1212.57 L1024.73 1212.57 L1024.14 1212.57 L1023.56 1212.57 L1022.97 1212.57 L1022.38 1212.57 L1021.8 1212.57 L1021.21 1212.57 L1020.62 1212.57 L1020.04 1212.57 L1019.45 1212.57 L1018.86 1212.57 L1018.28 1212.57 L1017.69 1212.57 L1017.11 1212.57 L1016.52 1212.57 L1015.93 1212.57 L1015.35 1212.57 L1014.76 1212.57 L1014.17 1212.57 L1013.59 1212.57 L1013 1212.57 L1012.41 1212.57 L1011.83 1212.57 L1011.24 1212.57 L1010.65 1212.57 L1010.07 1212.57 L1009.48 1212.57 L1008.9 1212.57 L1008.31 1212.57 L1007.72 1212.57 L1007.14 1212.57 L1006.55 1212.57 L1005.96 1212.57 L1005.38 1212.57 L1004.79 1212.57 L1004.2 1212.57 L1003.62 1212.57 L1003.03 1212.57 L1002.44 1212.57 L1001.86 1212.57 L1001.27 1212.57 L1000.69 1212.57 L1000.1 1212.57 L999.513 1212.57 L998.926 1212.57 L998.34 1212.57 L997.754 1212.57 L997.167 1212.57 L996.581 1212.57 L995.994 1212.57 L995.408 1212.57 L994.822 1212.57 L994.235 1212.57 L993.649 1212.57 L993.062 1212.57 L992.476 1212.57 L991.889 1212.57 L991.303 1212.57 L990.717 1212.57 L990.13 1212.57 L989.544 1212.57 L988.957 1212.57 L988.371 1212.57 L987.785 1212.57 L987.198 1212.57 L986.612 1212.57 L986.025 1212.57  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.04 986.612,1213.04 987.198,1213.04 987.785,1213.04 988.371,1213.04 988.957,1213.04 989.544,1213.04 990.13,1213.04 990.717,1213.04 991.303,1213.04 991.889,1213.04 992.476,1213.04 993.062,1213.04 993.649,1213.04 994.235,1213.04 994.822,1213.04 995.408,1213.04 995.994,1213.04 996.581,1213.04 997.167,1213.04 997.754,1213.04 998.34,1213.04 998.926,1213.04 999.513,1213.04 1000.1,1213.04 1000.69,1213.04 1001.27,1213.04 1001.86,1213.04 1002.44,1213.04 1003.03,1213.04 1003.62,1213.04 1004.2,1213.04 1004.79,1213.04 1005.38,1213.04 1005.96,1213.04 1006.55,1213.04 1007.14,1213.04 1007.72,1213.04 1008.31,1213.04 1008.9,1213.04 1009.48,1213.04 1010.07,1213.04 1010.65,1213.04 1011.24,1213.04 1011.83,1213.04 1012.41,1213.04 1013,1213.04 1013.59,1213.04 1014.17,1213.04 1014.76,1213.04 1015.35,1213.04 1015.93,1213.04 1016.52,1213.04 1017.11,1213.04 1017.69,1213.04 1018.28,1213.04 1018.86,1213.04 1019.45,1213.04 1020.04,1213.04 1020.62,1213.04 1021.21,1213.04 1021.8,1213.04 1022.38,1213.04 1022.97,1213.04 1023.56,1213.04 1024.14,1213.04 1024.73,1213.04 1025.32,1213.04 1025.9,1213.04 1026.49,1213.04 1027.07,1213.04 1027.66,1213.04 1028.25,1213.04 1028.83,1213.04 1029.42,1213.04 1030.01,1213.04 1030.59,1213.04 1031.18,1213.04 1031.77,1213.04 1032.35,1213.04 1032.94,1213.04 1033.52,1213.04 1034.11,1213.04 1034.7,1213.04 1035.28,1213.04 1035.87,1213.04 1036.46,1213.04 1037.04,1213.04 1037.63,1213.04 1038.22,1213.04 1038.8,1213.04 1039.39,1213.04 1039.98,1213.04 1040.56,1213.04 1041.15,1213.04 1041.73,1213.04 1042.32,1213.04 1042.91,1213.04 1043.49,1213.04 1044.08,1213.04 1044.67,1213.04 1045.25,1213.04 1045.84,1213.04 1046.43,1213.04 1047.01,1213.04 1047.6,1213.04 1048.19,1213.04 1048.77,1213.04 1049.36,1213.04 1049.94,1213.04 1050.53,1213.04 1051.12,1213.04 1051.7,1213.04 1052.29,1213.04 1052.88,1213.04 1053.46,1213.04 1054.05,1213.04 1054.64,1213.04 1055.22,1213.04 1055.81,1213.04 1056.39,1213.04 1056.98,1213.04 1057.57,1213.04 1058.15,1213.04 1058.74,1213.04 1059.33,1213.04 1059.91,1213.04 1060.5,1213.04 1061.09,1213.04 1061.67,1213.04 1062.26,1213.04 1062.85,1213.04 1063.43,1213.04 1064.02,1213.04 1064.6,1213.04 1065.19,1213.04 1065.78,1213.04 1066.36,1213.04 1066.95,1213.04 1067.54,1213.04 1068.12,1213.04 1068.71,1213.04 1069.3,1213.04 1069.88,1213.04 1070.47,1213.04 1071.06,1213.04 1071.64,1213.04 1072.23,1213.04 1072.81,1213.04 1073.4,1213.04 1073.99,1213.04 1074.57,1213.04 1075.16,1213.04 1075.75,1213.04 1076.33,1213.04 1076.92,1213.04 1077.51,1213.04 1078.09,1213.04 1078.68,1213.04 1079.26,1213.04 1079.85,1213.04 1080.44,1213.04 1081.02,1213.04 1081.61,1213.04 1082.2,1213.04 1082.78,1213.04 1083.37,1213.04 1083.96,1213.04 1084.54,1213.04 1085.13,1213.04 1085.72,1213.04 1086.3,1213.04 1086.89,1213.04 1087.47,1213.04 1088.06,1213.04 1088.65,1213.04 1089.23,1213.04 1089.82,1213.04 1090.41,1213.04 1090.99,1213.04 1091.58,1213.04 1092.17,1213.04 1092.75,1213.04 1093.34,1213.04 1093.93,1213.04 1094.51,1213.04 1095.1,1213.04 1095.68,1213.04 1096.27,1213.04 1096.86,1213.04 1097.44,1213.04 1098.03,1213.04 1098.62,1213.04 1099.2,1213.04 1099.79,1213.04 1100.38,1213.04 1100.96,1213.04 1101.55,1213.04 1102.14,1213.04 1102.72,1213.04 1103.31,1213.04 1103.89,1213.04 1104.48,1213.04 1105.07,1213.04 1105.65,1213.04 1106.24,1213.04 1106.83,1213.04 1107.41,1213.04 1108,1213.04 1108.59,1213.04 1109.17,1213.04 1109.76,1213.04 1110.34,1213.04 1110.93,1213.04 1111.52,1213.04 1112.1,1213.04 1112.69,1213.04 1113.28,1213.04 1113.86,1213.04 1114.45,1213.04 1115.04,1213.04 1115.62,1213.04 1116.21,1213.04 1116.8,1213.04 1117.38,1213.04 1117.97,1213.04 1118.55,1213.04 1119.14,1213.04 1119.73,1213.04 1120.31,1213.04 1120.9,1213.04 1121.49,1213.04 1122.07,1213.04 1122.66,1213.04 1123.25,1213.04 1123.83,1213.04 1124.42,1213.04 1125.01,1213.04 1125.59,1213.04 1126.18,1213.04 1126.76,1213.04 1127.35,1213.04 1127.94,1213.04 1128.52,1213.04 1129.11,1213.04 1129.7,1213.04 1130.28,1213.04 1130.87,1213.04 1131.46,1213.04 1132.04,1213.04 1132.63,1213.04 1133.21,1213.04 1133.8,1213.04 1134.39,1213.04 1134.97,1213.04 1135.56,1213.04 1136.15,1213.04 1136.73,1213.04 1137.32,1213.04 1137.91,1213.04 1138.49,1213.04 1139.08,1213.04 1139.67,1213.04 1140.25,1213.04 1140.84,1213.04 1141.42,1213.04 1142.01,1213.04 1142.6,1213.04 1143.18,1213.04 1143.77,1213.04 1144.36,1213.04 1144.94,1213.04 1145.53,1213.04 1146.12,1213.04 1146.7,1213.04 1147.29,1213.04 1147.88,1213.04 1148.46,1213.04 1149.05,1213.04 1149.63,1213.04 1150.22,1213.04 1150.81,1213.04 1151.39,1213.04 1151.98,1213.04 1152.57,1213.04 1153.15,1213.04 1153.74,1213.04 1154.33,1213.04 1154.91,1213.04 1155.5,1213.04 1156.09,1213.04 1156.67,1213.04 1157.26,1213.04 1157.84,1213.04 1158.43,1213.04 1159.02,1213.04 1159.6,1213.04 1160.19,1213.04 1160.78,1213.04 1161.36,1213.04 1161.95,1213.04 1162.54,1213.04 1163.12,1213.04 1163.71,1213.04 1164.29,1213.04 1164.88,1213.04 1165.47,1213.04 1166.05,1213.04 1166.64,1213.04 1167.23,1213.04 1167.81,1213.04 1168.4,1213.04 1168.99,1213.04 1169.57,1213.04 1170.16,1213.04 1170.75,1213.04 1171.33,1213.04 1171.92,1213.04 1172.5,1213.04 1173.09,1213.04 1173.68,1213.04 1174.26,1213.04 1174.85,1213.04 1175.44,1213.04 1176.02,1213.04 1176.61,1213.04 1177.2,1213.04 1177.78,1213.04 1178.37,1213.04 1178.96,1213.04 1179.54,1213.04 1180.13,1213.04 1180.71,1213.04 1181.3,1213.04 1181.89,1213.04 1182.47,1213.04 1183.06,1213.04 1183.65,1213.04 1184.23,1213.04 1184.82,1213.04 1185.41,1213.04 1185.99,1213.04 1186.58,1213.04 1187.16,1213.04 1187.75,1213.04 1188.34,1213.04 1188.92,1213.04 1189.51,1213.04 1190.1,1213.04 1190.68,1213.04 1191.27,1213.04 1191.86,1213.04 1192.44,1213.04 1193.03,1213.04 1193.62,1213.04 1194.2,1213.04 1194.79,1213.04 1195.37,1213.04 1195.96,1213.04 1196.55,1213.04 1197.13,1213.04 1197.72,1213.04 1198.31,1213.04 1198.89,1213.04 1199.48,1213.04 1200.07,1213.04 1200.65,1213.04 1201.24,1213.04 1201.83,1213.04 1202.41,1213.04 1203,1213.04 1203.58,1213.04 1204.17,1213.04 1204.76,1213.04 1205.34,1213.04 1205.93,1213.04 1206.52,1213.04 1207.1,1213.04 1207.69,1213.04 1208.28,1213.04 1208.86,1213.04 1209.45,1213.04 1210.03,1213.04 1210.62,1213.04 1211.21,1213.04 1211.79,1213.04 1212.38,1213.04 1212.97,1213.04 1213.55,1213.04 1214.14,1213.04 1214.73,1213.04 1215.31,1213.04 1215.9,1213.04 1216.49,1213.04 1217.07,1213.04 1217.66,1213.04 1218.24,1213.04 1218.83,1213.04 1219.42,1213.04 1220,1213.04 1220.59,1213.04 1221.18,1213.04 1221.76,1213.04 1222.35,1213.04 1222.94,1213.04 1223.52,1213.04 1224.11,1213.04 1224.7,1213.04 1225.28,1213.04 1225.87,1213.04 1226.45,1213.04 1227.04,1213.04 1227.63,1213.04 1228.21,1213.04 1228.8,1213.04 1229.39,1213.04 1229.97,1213.04 1230.56,1213.04 1231.15,1213.04 1231.73,1213.04 1232.32,1213.04 1232.91,1213.04 1233.49,1213.04 1234.08,1213.04 1234.66,1213.04 1235.25,1213.04 1235.84,1213.04 1236.42,1213.04 1237.01,1213.04 1237.6,1213.04 1238.18,1213.04 1238.77,1213.04 1239.36,1213.04 1239.94,1213.04 1240.53,1213.04 1241.11,1213.04 1241.7,1213.04 1242.29,1213.04 1242.87,1213.04 1243.46,1213.04 1244.05,1213.04 1244.63,1213.04 1245.22,1213.04 1245.81,1213.04 1246.39,1213.04 1246.98,1213.04 1247.57,1213.04 1248.15,1213.04 1248.74,1213.04 1249.32,1213.04 1249.91,1213.04 1250.5,1213.04 1251.08,1213.04 1251.67,1213.04 1252.26,1213.04 1252.84,1213.04 1253.43,1213.04 1254.02,1213.04 1254.6,1213.04 1255.19,1213.04 1255.78,1213.04 1256.36,1213.04 1256.95,1213.04 1257.53,1213.04 1258.12,1213.04 1258.71,1213.04 1259.29,1213.04 1259.88,1213.04 1260.47,1213.04 1261.05,1213.04 1261.64,1213.04 1262.23,1213.04 1262.81,1213.04 1263.4,1213.04 1263.98,1213.04 1264.57,1213.04 1265.16,1213.04 1265.74,1213.04 1266.33,1213.04 1266.92,1213.04 1267.5,1213.04 1268.09,1213.04 1268.68,1213.04 1269.26,1213.04 1269.85,1213.04 1270.44,1213.04 1271.02,1213.04 1271.61,1213.04 1272.19,1213.04 1272.78,1213.04 1273.37,1213.04 1273.95,1213.04 1274.54,1213.04 1275.13,1213.04 1275.71,1213.04 1276.3,1213.04 1276.89,1213.04 1277.47,1213.04 1278.06,1213.04 1278.65,1213.04 1279.23,1213.04 1279.82,1213.04 1280.4,1213.04 1280.99,1213.04 1281.58,1213.04 1282.16,1213.04 1282.75,1213.04 1283.34,1213.04 1283.92,1213.04 1284.51,1213.04 1285.1,1213.04 1285.68,1213.04 1286.27,1213.04 1286.86,1213.04 1287.44,1213.04 1288.03,1213.04 1288.61,1213.04 1289.2,1213.04 1289.79,1213.04 1290.37,1213.04 1290.96,1213.04 1291.55,1213.04 1292.13,1213.04 1292.72,1213.04 1293.31,1213.04 1293.89,1213.04 1294.48,1213.04 1295.06,1213.04 1295.65,1213.04 1296.24,1213.04 1296.82,1213.04 1297.41,1213.04 1298,1213.04 1298.58,1213.04 1299.17,1213.04 1299.76,1213.04 1300.34,1213.04 1300.93,1213.04 1301.52,1213.04 1302.1,1213.04 1302.69,1213.04 1303.27,1213.04 1303.86,1213.04 1304.45,1213.04 1305.03,1213.04 1305.62,1213.04 1306.21,1213.04 1306.79,1213.04 1307.38,1213.04 1307.97,1213.04 1308.55,1213.04 1309.14,1213.04 1309.73,1213.04 1310.31,1213.04 1310.9,1213.04 1311.48,1213.04 1312.07,1213.04 1312.66,1213.04 1313.24,1213.04 1313.83,1213.04 1314.42,1213.04 1315,1213.04 1315.59,1213.04 1316.18,1213.04 1316.76,1213.04 1317.35,1213.04 1317.93,1213.04 1318.52,1213.04 1319.11,1213.04 1319.69,1213.04 1320.28,1213.04 1320.87,1213.04 1321.45,1213.04 1322.04,1213.04 1322.63,1213.04 1323.21,1213.04 1323.8,1213.04 1324.39,1213.04 1324.97,1213.04 1325.56,1213.04 1326.14,1213.04 1326.73,1213.04 1327.32,1213.04 1327.9,1213.04 1328.49,1213.04 1329.08,1213.04 1329.66,1213.04 1330.25,1213.04 1330.84,1213.04 1331.42,1213.04 1332.01,1213.04 1332.6,1213.04 1333.18,1213.04 1333.77,1213.04 1334.35,1213.04 1334.94,1213.04 1335.53,1213.04 1336.11,1213.04 1336.7,1213.04 1337.29,1213.04 1337.87,1213.04 1338.46,1213.04 1339.05,1213.04 1339.63,1213.04 1340.22,1213.04 1340.8,1213.04 1341.39,1213.04 1341.98,1213.04 1342.56,1213.04 1343.15,1213.04 1343.74,1213.04 1344.32,1213.04 1344.91,1213.04 1345.5,1213.04 1346.08,1213.04 1346.67,1213.04 1347.26,1213.04 1347.84,1213.04 1348.43,1213.04 1349.01,1213.04 1349.6,1213.04 1350.19,1213.04 1350.77,1213.04 1351.36,1213.04 1351.95,1213.04 1352.53,1213.04 1353.12,1213.04 1353.71,1213.04 1354.29,1213.04 1354.88,1213.04 1355.47,1213.04 1356.05,1213.04 1356.64,1213.04 1357.22,1213.04 1357.81,1213.04 1358.4,1213.04 1358.98,1213.04 1359.57,1213.04 1360.16,1213.04 1360.74,1213.04 1361.33,1213.04 1361.92,1213.04 1362.5,1213.04 1363.09,1213.04 1363.68,1213.04 1364.26,1213.04 1364.85,1213.04 1365.43,1213.04 1366.02,1213.04 1366.61,1213.04 1367.19,1213.04 1367.78,1213.04 1368.37,1213.04 1368.95,1213.04 1369.54,1213.04 1370.13,1213.04 1370.71,1213.04 1371.3,1213.04 1371.88,1213.04 1372.47,1213.04 1373.06,1213.04 1373.64,1213.04 1374.23,1213.04 1374.82,1213.04 1375.4,1213.04 1375.99,1213.04 1376.58,1213.04 1377.16,1213.04 1377.75,1213.04 1378.34,1213.04 1378.92,1213.04 1379.51,1213.04 1380.09,1213.04 1380.68,1213.04 1381.27,1213.04 1381.85,1213.04 1382.44,1213.04 1383.03,1213.04 1383.61,1213.04 1384.2,1213.04 1384.79,1213.04 1385.37,1213.04 1385.96,1213.04 1386.55,1213.04 1387.13,1213.04 1387.72,1213.04 1388.3,1213.04 1388.89,1213.04 1389.48,1213.04 1390.06,1213.04 1390.65,1213.04 1391.24,1213.04 1391.82,1213.04 1392.41,1213.04 1393,1213.04 1393.58,1213.04 1394.17,1213.04 1394.75,1213.04 1395.34,1213.04 1395.93,1213.04 1396.51,1213.04 1397.1,1213.04 1397.69,1213.04 1398.27,1213.04 1398.86,1213.04 1399.45,1213.04 1400.03,1213.04 1400.62,1213.04 1401.21,1213.04 1401.79,1213.04 1402.38,1213.04 1402.96,1213.04 1403.55,1213.04 1404.14,1213.04 1404.72,1213.04 1405.31,1213.04 1405.9,1213.04 1406.48,1213.04 1407.07,1213.04 1407.66,1213.04 1408.24,1213.04 1408.83,1213.04 1409.42,1213.04 1410,1213.04 1410.59,1213.04 1411.17,1213.04 1411.76,1213.04 1412.35,1213.04 1412.93,1213.04 1413.52,1213.04 1414.11,1213.04 1414.69,1213.04 1415.28,1213.04 1415.87,1213.04 1416.45,1213.04 1417.04,1213.04 1417.63,1213.04 1418.21,1213.04 1418.8,1213.04 1419.38,1213.04 1419.97,1213.04 1420.56,1213.04 1421.14,1213.04 1421.73,1213.04 1422.32,1213.04 1422.9,1213.04 1423.49,1213.04 1424.08,1213.04 1424.66,1213.04 1425.25,1213.04 1425.83,1213.04 1426.42,1213.04 1427.01,1213.04 1427.59,1213.04 1428.18,1213.04 1428.77,1213.04 1429.35,1213.04 1429.94,1213.04 1430.53,1213.04 1431.11,1213.04 1431.7,1213.04 1432.29,1213.04 1432.87,1213.04 1433.46,1213.04 1434.04,1213.04 1434.63,1213.04 1435.22,1213.04 1435.8,1213.04 1436.39,1213.04 1436.98,1213.04 1437.56,1213.04 1438.15,1213.04 1438.74,1213.04 1439.32,1213.04 1439.91,1213.04 1440.5,1213.04 1441.08,1213.04 1441.67,1213.04 1442.25,1213.04 1442.84,1213.04 1443.43,1213.04 1444.01,1213.04 1444.6,1213.04 1445.19,1213.04 1445.77,1213.04 1446.36,1213.04 1446.95,1213.04 1447.53,1213.04 1448.12,1213.04 1448.7,1213.04 1449.29,1213.04 1449.88,1213.04 1450.46,1213.04 1451.05,1213.04 1451.64,1213.04 1452.22,1213.04 1452.81,1213.04 1453.4,1213.04 1453.98,1213.04 1454.57,1213.04 1455.16,1213.04 1455.74,1213.04 1456.33,1213.04 1456.91,1213.04 1457.5,1213.04 1458.09,1213.04 1458.67,1213.04 1459.26,1213.04 1459.85,1213.04 1460.43,1213.04 1461.02,1213.04 1461.61,1213.04 1462.19,1213.04 1462.78,1213.04 1463.37,1213.04 1463.95,1213.04 1464.54,1213.04 1465.12,1213.04 1465.71,1213.04 1466.3,1213.04 1466.88,1213.04 1467.47,1213.04 1468.06,1213.04 1468.64,1213.04 1469.23,1213.04 1469.82,1213.04 1470.4,1213.04 1470.99,1213.04 1471.57,1213.04 1472.16,1213.04 1472.75,1213.04 1473.33,1213.04 1473.92,1213.04 1474.51,1213.04 1475.09,1213.04 1475.68,1213.04 1476.27,1213.04 1476.85,1213.04 1477.44,1213.04 1478.03,1213.04 1478.61,1213.04 1479.2,1213.04 1479.78,1213.04 1480.37,1213.04 1480.96,1213.04 1481.54,1213.04 1482.13,1213.04 1482.72,1213.04 1483.3,1213.04 1483.89,1213.04 1484.48,1213.04 1485.06,1213.04 1485.65,1213.04 1486.24,1213.04 1486.82,1213.04 1487.41,1213.04 1487.99,1213.04 1488.58,1213.04 1489.17,1213.04 1489.75,1213.04 1490.34,1213.04 1490.93,1213.04 1491.51,1213.04 1492.1,1213.04 1492.69,1213.04 1493.27,1213.04 1493.86,1213.04 1494.45,1213.04 1495.03,1213.04 1495.62,1213.04 1496.2,1213.04 1496.79,1213.04 1497.38,1213.04 1497.96,1213.04 1498.55,1213.04 1499.14,1213.04 1499.72,1213.04 1500.31,1213.04 1500.9,1213.04 1501.48,1213.04 1502.07,1213.04 1502.65,1213.04 1503.24,1213.04 1503.83,1213.04 1504.41,1213.04 1505,1213.04 1505.59,1213.04 1506.17,1213.04 1506.76,1213.04 1507.35,1213.04 1507.93,1213.04 1508.52,1213.04 1509.11,1213.04 1509.69,1213.04 1510.28,1213.04 1510.86,1213.04 1511.45,1213.04 1512.04,1213.04 1512.62,1213.04 1513.21,1213.04 1513.8,1213.04 1514.38,1213.04 1514.97,1213.04 1515.56,1213.04 1516.14,1213.04 1516.73,1213.04 1517.32,1213.04 1517.9,1213.04 1518.49,1213.04 1519.07,1213.04 1519.66,1213.04 1520.25,1213.04 1520.83,1213.04 1521.42,1213.04 1522.01,1213.04 1522.59,1213.04 1523.18,1213.04 1523.77,1213.04 1524.35,1213.04 1524.94,1213.04 1525.52,1213.04 1526.11,1213.04 1526.7,1213.04 1527.28,1213.04 1527.87,1213.04 1528.46,1213.04 1529.04,1213.04 1529.63,1213.04 1530.22,1213.04 1530.8,1213.04 1531.39,1213.04 1531.98,1213.04 1532.56,1213.04 1533.15,1213.04 1533.73,1213.04 1534.32,1213.04 1534.91,1213.04 1535.49,1213.04 1536.08,1213.04 1536.67,1213.04 1537.25,1213.04 1537.84,1213.04 1538.43,1213.04 1539.01,1213.04 1539.6,1213.04 1540.19,1213.04 1540.77,1213.04 1541.36,1213.04 1541.94,1213.04 1542.53,1213.04 1543.12,1213.04 1543.7,1213.04 1544.29,1213.04 1544.88,1213.04 1545.46,1213.04 1546.05,1213.04 1546.64,1213.04 1547.22,1213.04 1547.81,1213.04 1548.4,1213.04 1548.98,1213.04 1549.57,1213.04 1550.15,1213.04 1550.74,1213.04 1551.33,1213.04 1551.91,1213.04 1552.5,1213.04 1553.09,1213.04 1553.67,1213.04 1554.26,1213.04 1554.85,1213.04 1555.43,1213.04 1556.02,1213.04 1556.6,1213.04 1557.19,1213.04 1557.78,1213.04 1558.36,1213.04 1558.95,1213.04 1559.54,1213.04 1560.12,1213.04 1560.71,1213.04 1561.3,1213.04 1561.88,1213.04 1562.47,1213.04 1563.06,1213.04 1563.64,1213.04 1564.23,1213.04 1564.81,1213.04 1565.4,1213.04 1565.99,1213.04 1566.57,1213.04 1567.16,1213.04 1567.75,1213.04 1568.33,1213.04 1568.92,1213.04 1569.51,1213.04 1570.09,1213.04 1570.68,1213.04 1571.27,1213.04 1571.85,1213.04 1572.44,1213.04 1573.02,1213.04 1573.61,1213.04 1574.2,1213.04 1574.78,1213.04 1575.37,1213.04 1575.96,1213.04 1576.54,1213.04 1577.13,1213.04 1577.72,1213.04 1578.3,1213.04 1578.89,1213.04 1579.47,1213.04 1580.06,1213.04 1580.65,1213.04 1581.23,1213.04 1581.82,1213.04 1582.41,1213.04 1582.99,1213.04 1583.58,1213.04 1584.17,1213.04 1584.75,1213.04 1585.34,1213.04 1585.93,1213.04 1586.51,1213.04 1587.1,1213.04 1587.68,1213.04 1588.27,1213.04 1588.86,1213.04 1589.44,1213.04 1590.03,1213.04 1590.62,1213.04 1591.2,1213.04 1591.79,1213.04 1592.38,1213.04 1592.96,1213.04 1593.55,1213.04 1594.14,1213.04 1594.72,1213.04 1595.31,1213.04 1595.89,1213.04 1596.48,1213.04 1597.07,1213.04 1597.65,1213.04 1598.24,1213.04 1598.83,1213.04 1599.41,1213.04 1600,1213.04 1600.59,1213.04 1601.17,1213.04 1601.76,1213.04 1602.34,1213.04 1602.93,1213.04 1603.52,1213.04 1604.1,1213.04 1604.69,1213.04 1605.28,1213.04 1605.86,1213.04 1606.45,1213.04 1607.04,1213.04 1607.62,1213.04 1608.21,1213.04 1608.8,1213.04 1609.38,1213.04 1609.97,1213.04 1610.55,1213.04 1611.14,1213.04 1611.73,1213.04 1612.31,1213.04 1612.9,1213.04 1613.49,1213.04 1614.07,1213.04 1614.66,1213.04 1615.25,1213.04 1615.83,1213.04 1616.42,1213.04 1617.01,1213.04 1617.59,1213.04 1618.18,1213.04 1618.76,1213.04 1619.35,1213.04 1619.94,1213.04 1620.52,1213.04 1621.11,1213.04 1621.7,1213.04 1622.28,1213.04 1622.87,1213.04 1623.46,1213.04 1624.04,1213.04 1624.63,1213.04 1625.22,1213.04 1625.8,1213.04 1626.39,1213.04 1626.97,1213.04 1627.56,1213.04 1628.15,1213.04 1628.73,1213.04 1629.32,1213.04 1629.91,1213.04 1630.49,1213.04 1631.08,1213.04 1631.67,1213.04 1632.25,1213.04 1632.84,1213.04 1633.42,1213.04 1634.01,1213.04 1634.6,1213.04 1635.18,1213.04 1635.77,1213.04 1636.36,1213.04 1636.94,1213.04 1637.53,1213.04 1638.12,1213.04 1638.7,1213.04 1639.29,1213.04 1639.88,1213.04 1640.46,1213.04 1641.05,1213.04 1641.63,1213.04 1642.22,1213.04 1642.81,1213.04 1643.39,1213.04 1643.98,1213.04 1644.57,1213.04 1645.15,1213.04 1645.74,1213.04 1646.33,1213.04 1646.91,1213.04 1647.5,1213.04 1648.09,1213.04 1648.67,1213.04 1649.26,1213.04 1649.84,1213.04 1650.43,1213.04 1651.02,1213.04 1651.6,1213.04 1652.19,1213.04 1652.78,1213.04 1653.36,1213.04 1653.95,1213.04 1654.54,1213.04 1655.12,1213.04 1655.71,1213.04 1656.29,1213.04 1656.88,1213.04 1657.47,1213.04 1658.05,1213.04 1658.64,1213.04 1659.23,1213.04 1659.81,1213.04 1660.4,1213.04 1660.99,1213.04 1661.57,1213.04 1662.16,1213.04 1662.75,1213.04 1663.33,1213.04 1663.92,1213.04 1664.5,1213.04 1665.09,1213.04 1665.68,1213.04 1666.26,1213.04 1666.85,1213.04 1667.44,1213.04 1668.02,1213.04 1668.61,1213.04 1669.2,1213.04 1669.78,1213.04 1670.37,1213.04 1670.96,1213.04 1671.54,1213.04 1672.13,1213.04 1672.71,1213.04 1673.3,1213.04 1673.89,1213.04 1674.47,1213.04 1675.06,1213.04 1675.65,1213.04 1676.23,1213.04 1676.82,1213.04 1677.41,1213.04 1677.99,1213.04 1678.58,1213.04 1679.17,1213.04 1679.75,1213.04 1680.34,1213.04 1680.92,1213.04 1681.51,1213.04 1682.1,1213.04 1682.68,1213.04 1683.27,1213.04 1683.86,1213.04 1684.44,1213.04 1685.03,1213.04 1685.62,1213.04 1686.2,1213.04 1686.79,1213.04 1687.37,1213.04 1687.96,1213.04 1688.55,1213.04 1689.13,1213.04 1689.72,1213.04 1690.31,1213.04 1690.89,1213.04 1691.48,1213.04 1692.07,1213.04 1692.65,1213.04 1693.24,1213.04 1693.83,1213.04 1694.41,1213.04 1695,1213.04 1695.58,1213.04 1696.17,1213.04 1696.76,1213.04 1697.34,1213.04 1697.93,1213.04 1698.52,1213.04 1699.1,1213.04 1699.69,1213.04 1700.28,1213.04 1700.86,1213.04 1701.45,1213.04 1702.04,1213.04 1702.62,1213.04 1703.21,1213.04 1703.79,1213.04 1704.38,1213.04 1704.97,1213.04 1705.55,1213.04 1706.14,1213.04 1706.73,1213.04 1707.31,1213.04 1707.9,1213.04 1708.49,1213.04 1709.07,1213.04 1709.66,1213.04 1710.24,1213.04 1710.83,1213.04 1711.42,1213.04 1712,1213.04 1712.59,1213.04 1713.18,1213.04 1713.76,1213.04 1714.35,1213.04 1714.94,1213.04 1715.52,1213.04 1716.11,1213.04 1716.7,1213.04 1717.28,1213.04 1717.87,1213.04 1718.45,1213.04 1719.04,1213.04 1719.63,1213.04 1720.21,1213.04 1720.8,1213.04 1721.39,1213.04 1721.97,1213.04 1722.56,1213.04 1723.15,1213.04 1723.73,1213.04 1724.32,1213.04 1724.91,1213.04 1725.49,1213.04 1726.08,1213.04 1726.66,1213.04 1727.25,1213.04 1727.84,1213.04 1728.42,1213.04 1729.01,1213.04 1729.6,1213.04 1730.18,1213.04 1730.77,1213.04 1731.36,1213.04 1731.94,1213.04 1732.53,1213.04 1733.11,1213.04 1733.7,1213.04 1734.29,1213.04 1734.87,1213.04 1735.46,1213.04 1736.05,1213.04 1736.63,1213.04 1737.22,1213.04 1737.81,1213.04 1738.39,1213.04 1738.98,1213.04 1739.57,1213.04 1740.15,1213.04 1740.74,1213.04 1741.32,1213.04 1741.91,1213.04 1742.5,1213.04 1743.08,1213.04 1743.67,1213.04 1744.26,1213.04 1744.84,1213.04 1745.43,1213.04 1746.02,1213.04 1746.6,1213.04 1747.19,1213.04 1747.78,1213.04 1748.36,1213.04 1748.95,1213.04 1749.53,1213.04 1750.12,1213.04 1750.71,1213.04 1751.29,1213.04 1751.88,1213.04 1752.47,1213.04 1753.05,1213.04 1753.64,1213.04 1754.23,1213.04 1754.81,1213.04 1755.4,1213.04 1755.99,1213.04 1756.57,1213.04 1757.16,1213.04 1757.74,1213.04 1758.33,1213.04 1758.92,1213.04 1759.5,1213.04 1760.09,1213.04 1760.68,1213.04 1761.26,1213.04 1761.85,1213.04 1762.44,1213.04 1763.02,1213.04 1763.61,1213.04 1764.19,1213.04 1764.78,1213.04 1765.37,1213.04 1765.95,1213.04 1766.54,1213.04 1767.13,1213.04 1767.71,1213.04 1768.3,1213.04 1768.89,1213.04 1769.47,1213.04 1770.06,1213.04 1770.65,1213.04 1771.23,1213.04 1771.82,1213.04 1772.4,1213.04 1772.99,1213.04 1773.58,1213.04 1774.16,1213.04 1774.75,1213.04 1775.34,1213.04 1775.92,1213.04 1776.51,1213.04 1777.1,1213.04 1777.68,1213.04 1778.27,1213.04 1778.86,1213.04 1779.44,1213.04 1780.03,1213.04 1780.61,1213.04 1781.2,1213.04 1781.79,1213.04 1782.37,1213.04 1782.96,1213.04 1783.55,1213.04 1784.13,1213.04 1784.72,1213.04 1785.31,1213.04 1785.89,1213.04 1786.48,1213.04 1787.06,1213.04 1787.65,1213.04 1788.24,1213.04 1788.82,1213.04 1789.41,1213.04 1790,1213.04 1790.58,1213.04 1791.17,1213.04 1791.76,1213.04 1792.34,1213.04 1792.93,1213.04 1793.52,1213.04 1794.1,1213.04 1794.69,1213.04 1795.27,1213.04 1795.86,1213.04 1796.45,1213.04 1797.03,1213.04 1797.62,1213.04 1798.21,1213.04 1798.79,1213.04 1799.38,1213.04 1799.97,1213.04 1800.55,1213.04 1801.14,1213.04 1801.73,1213.04 1802.31,1213.04 1802.9,1213.04 1803.48,1213.04 1804.07,1213.04 1804.66,1213.04 1805.24,1213.04 1805.83,1213.04 1806.42,1213.04 1807,1213.04 1807.59,1213.04 1808.18,1213.04 1808.76,1213.04 1809.35,1213.04 1809.94,1213.04 1810.52,1213.04 1811.11,1213.04 1811.69,1213.04 1812.28,1213.04 1812.87,1213.04 1813.45,1213.04 1814.04,1213.04 1814.63,1213.04 1815.21,1213.04 1815.8,1213.04 1816.39,1213.04 1816.97,1213.04 1817.56,1213.04 1818.14,1213.04 1818.73,1213.04 1819.32,1213.04 1819.9,1213.04 1820.49,1213.04 1821.08,1213.04 1821.66,1213.04 1822.25,1213.04 1822.84,1213.04 1823.42,1213.04 1824.01,1213.04 1824.6,1213.04 1825.18,1213.04 1825.77,1213.04 1826.35,1213.04 1826.94,1213.04 1827.53,1213.04 1828.11,1213.04 1828.7,1213.04 1829.29,1213.04 1829.87,1213.04 1830.46,1213.04 1831.05,1213.04 1831.63,1213.04 1832.22,1213.04 1832.81,1213.04 1833.39,1213.04 1833.98,1213.04 1834.56,1213.04 1835.15,1213.04 1835.74,1213.04 1836.32,1213.04 1836.91,1213.04 1837.5,1213.04 1838.08,1213.04 1838.67,1213.04 1839.26,1213.04 1839.84,1213.04 1840.43,1213.04 1841.01,1213.04 1841.6,1213.04 1842.19,1213.04 1842.77,1213.04 1843.36,1213.04 1843.95,1213.04 1844.53,1213.04 1845.12,1213.04 1845.71,1213.04 1846.29,1213.04 1846.88,1213.04 1847.47,1213.04 1848.05,1213.04 1848.64,1213.04 1849.22,1213.04 1849.81,1213.04 1850.4,1213.04 1850.98,1213.04 1851.57,1213.04 1852.16,1213.04 1852.74,1213.04 1853.33,1213.04 1853.92,1213.04 1854.5,1213.04 1855.09,1213.04 1855.68,1213.04 1856.26,1213.04 1856.85,1213.04 1857.43,1213.04 1858.02,1213.04 1858.61,1213.04 1859.19,1213.04 1859.78,1213.04 1860.37,1213.04 1860.95,1213.04 1861.54,1213.04 1862.13,1213.04 1862.71,1213.04 1863.3,1213.04 1863.88,1213.04 1864.47,1213.04 1865.06,1213.04 1865.64,1213.04 1866.23,1213.04 1866.82,1213.04 1867.4,1213.04 1867.99,1213.04 1868.58,1213.04 1869.16,1213.04 1869.75,1213.04 1870.34,1213.04 1870.92,1213.04 1871.51,1213.04 1872.09,1213.04 1872.68,1213.04 1873.27,1213.04 1873.85,1213.04 1874.44,1213.04 1875.03,1213.04 1875.61,1213.04 1876.2,1213.04 1876.79,1213.04 1877.37,1213.04 1877.96,1213.04 1878.55,1213.04 1879.13,1213.04 1879.72,1213.04 1880.3,1213.04 1880.89,1213.04 1881.48,1213.04 1882.06,1213.04 1882.65,1213.04 1883.24,1213.04 1883.82,1213.04 1884.41,1213.04 1885,1213.04 1885.58,1213.04 1886.17,1213.04 1886.76,1213.04 1887.34,1213.04 1887.93,1213.04 1888.51,1213.04 1889.1,1213.04 1889.69,1213.04 1890.27,1213.04 1890.86,1213.04 1891.45,1213.04 1892.03,1213.04 1892.62,1213.04 1893.21,1213.04 1893.79,1213.04 1894.38,1213.04 1894.96,1213.04 1895.55,1213.04 1896.14,1213.04 1896.72,1213.04 1897.31,1213.04 1897.9,1213.04 1898.48,1213.04 1899.07,1213.04 1899.66,1213.04 1900.24,1213.04 1900.83,1213.04 1901.42,1213.04 1902,1213.04 1902.59,1213.04 1903.17,1213.04 1903.76,1213.04 1904.35,1213.04 1904.93,1213.04 1905.52,1213.04 1906.11,1213.04 1906.69,1213.04 1907.28,1213.04 1907.87,1213.04 1908.45,1213.04 1909.04,1213.04 1909.63,1213.04 1910.21,1213.04 1910.8,1213.04 1911.38,1213.04 1911.97,1213.04 1912.56,1213.04 1913.14,1213.04 1913.73,1213.04 1914.32,1213.04 1914.9,1213.04 1915.49,1213.04 1916.08,1213.04 1916.66,1213.04 1917.25,1213.04 1917.83,1213.04 1918.42,1213.04 1919.01,1213.04 1919.59,1213.04 1920.18,1213.04 1920.77,1213.04 1921.35,1213.04 1921.94,1213.04 1922.53,1213.04 1923.11,1213.04 1923.7,1213.04 1924.29,1213.04 1924.87,1213.04 1925.46,1213.04 1926.04,1213.04 1926.63,1213.04 1927.22,1213.04 1927.8,1213.04 1928.39,1213.04 1928.98,1213.04 1929.56,1213.04 1930.15,1213.04 1930.74,1213.04 1931.32,1213.04 1931.91,1213.04 1932.5,1213.04 1933.08,1213.04 1933.67,1213.04 1934.25,1213.04 1934.84,1213.04 1935.43,1213.04 1936.01,1213.04 1936.6,1213.04 1937.19,1213.04 1937.77,1213.04 1938.36,1213.04 1938.95,1213.04 1939.53,1213.04 1940.12,1213.04 1940.71,1213.04 1941.29,1213.04 1941.88,1213.04 1942.46,1213.04 1943.05,1213.04 1943.64,1213.04 1944.22,1213.04 1944.81,1213.04 1945.4,1213.04 1945.98,1213.04 1946.57,1213.04 1947.16,1213.04 1947.74,1213.04 1948.33,1213.04 1948.91,1213.04 1949.5,1213.04 1950.09,1213.04 1950.67,1213.04 1951.26,1213.04 1951.85,1213.04 1952.43,1213.04 1953.02,1213.04 1953.61,1213.04 1954.19,1213.04 1954.78,1213.04 1955.37,1213.04 1955.95,1213.04 1956.54,1213.04 1957.12,1213.04 1957.71,1213.04 1958.3,1213.04 1958.88,1213.04 1959.47,1213.04 1960.06,1213.04 1960.64,1213.04 1961.23,1213.04 1961.82,1213.04 1962.4,1213.04 1962.99,1213.04 1963.58,1213.04 1964.16,1213.04 1964.75,1213.04 1965.33,1213.04 1965.92,1213.04 1966.51,1213.04 1967.09,1213.04 1967.68,1213.04 1968.27,1213.04 1968.85,1213.04 1969.44,1213.04 1970.03,1213.04 1970.61,1213.04 1971.2,1213.04 1971.78,1213.04 1972.37,1213.04 1972.96,1213.04 1973.54,1213.04 1974.13,1213.04 1974.72,1213.04 1975.3,1213.04 1975.89,1213.04 1976.48,1213.04 1977.06,1213.04 1977.65,1213.04 1978.24,1213.04 1978.82,1213.04 1979.41,1213.04 1979.99,1213.04 1980.58,1213.04 1981.17,1213.04 1981.75,1213.04 1982.34,1213.04 1982.93,1213.04 1983.51,1213.04 1984.1,1213.04 1984.69,1213.04 1985.27,1213.04 1985.86,1213.04 1986.45,1213.04 1987.03,1213.04 1987.62,1213.04 1988.2,1213.04 1988.79,1213.04 1989.38,1213.04 1989.96,1213.04 1990.55,1213.04 1991.14,1213.04 1991.72,1213.04 1992.31,1213.04 1992.9,1213.04 1993.48,1213.04 1994.07,1213.04 1994.65,1213.04 1995.24,1213.04 1995.83,1213.04 1996.41,1213.04 1997,1213.04 1997.59,1213.04 1998.17,1213.04 1998.76,1213.04 1999.35,1213.04 1999.93,1213.04 2000.52,1213.04 2001.11,1213.04 2001.69,1213.04 2002.28,1213.04 2002.86,1213.04 2003.45,1213.04 2004.04,1213.04 2004.62,1213.04 2005.21,1213.04 2005.8,1213.04 2006.38,1213.04 2006.97,1213.04 2007.56,1213.04 2008.14,1213.04 2008.73,1213.04 2009.32,1213.04 2009.9,1213.04 2010.49,1213.04 2011.07,1213.04 2011.66,1213.04 2012.25,1213.04 2012.83,1213.04 2013.42,1213.04 2014.01,1213.04 2014.59,1213.04 2015.18,1213.04 2015.77,1213.04 2016.35,1213.04 2016.94,1213.04 2017.53,1213.04 2018.11,1213.04 2018.7,1213.04 2019.28,1213.04 2019.87,1213.04 2020.46,1213.04 2021.04,1213.04 2021.63,1213.04 2022.22,1213.04 2022.8,1213.04 2023.39,1213.04 2023.98,1213.04 2024.56,1213.04 2025.15,1213.04 2025.73,1213.04 2026.32,1213.04 2026.91,1213.04 2027.49,1213.04 2028.08,1213.04 2028.67,1213.04 2029.25,1213.04 2029.84,1213.04 2030.43,1213.04 2031.01,1213.04 2031.6,1213.04 2032.19,1213.04 2032.77,1213.04 2033.36,1213.04 2033.94,1213.04 2034.53,1213.04 2035.12,1213.04 2035.7,1213.04 2036.29,1213.04 2036.88,1213.04 2037.46,1213.04 2038.05,1213.04 2038.64,1213.04 2039.22,1213.04 2039.81,1213.04 2040.4,1213.04 2040.98,1213.04 2041.57,1213.04 2042.15,1213.04 2042.74,1213.04 2043.33,1213.04 2043.91,1213.04 2044.5,1213.04 2045.09,1213.04 2045.67,1213.04 2046.26,1213.04 2046.85,1213.04 2047.43,1213.04 2048.02,1213.04 2048.6,1213.04 2049.19,1213.04 2049.78,1213.04 2050.36,1213.04 2050.95,1213.04 2051.54,1213.04 2052.12,1213.04 2052.71,1213.04 2053.3,1213.04 2053.88,1213.04 2054.47,1213.04 2055.06,1213.04 2055.64,1213.04 2056.23,1213.04 2056.81,1213.04 2057.4,1213.04 2057.99,1213.04 2058.57,1213.04 2059.16,1213.04 2059.75,1213.04 2060.33,1213.04 2060.92,1213.04 2061.51,1213.04 2062.09,1213.04 2062.68,1213.04 2063.27,1213.04 2063.85,1213.04 2064.44,1213.04 2065.02,1213.04 2065.61,1213.04 2066.2,1213.04 2066.78,1213.04 2067.37,1213.04 2067.96,1213.04 2068.54,1213.04 2069.13,1213.04 2069.72,1213.04 2070.3,1213.04 2070.89,1213.04 2071.48,1213.04 2072.06,1213.04 2072.65,1213.04 2073.23,1213.04 2073.82,1213.04 2074.41,1213.04 2074.99,1213.04 2075.58,1213.04 2076.17,1213.04 2076.75,1213.04 2077.34,1213.04 2077.93,1213.04 2078.51,1213.04 2079.1,1213.04 2079.68,1213.04 2080.27,1213.04 2080.86,1213.04 2081.44,1213.04 2082.03,1213.04 2082.62,1213.04 2083.2,1213.04 2083.79,1213.04 2084.38,1213.04 2084.96,1213.04 2085.55,1213.04 2086.14,1213.04 2086.72,1213.04 2087.31,1213.04 2087.89,1213.04 2088.48,1213.04 2089.07,1213.04 2089.65,1213.04 2090.24,1213.04 2090.83,1213.04 2091.41,1213.04 2092,1213.04 2092.59,1213.04 2093.17,1213.04 2093.76,1213.04 2094.35,1213.04 2094.93,1213.04 2095.52,1213.04 2096.1,1213.04 2096.69,1213.04 2097.28,1213.04 2097.86,1213.04 2098.45,1213.04 2099.04,1213.04 2099.62,1213.04 2100.21,1213.04 2100.8,1213.04 2101.38,1213.04 2101.97,1213.04 2102.55,1213.04 2103.14,1213.04 2103.73,1213.04 2104.31,1213.04 2104.9,1213.04 2105.49,1213.04 2106.07,1213.04 2106.66,1213.04 2107.25,1213.04 2107.83,1213.04 2108.42,1213.04 2109.01,1213.04 2109.59,1213.04 2110.18,1213.04 2110.76,1213.04 2111.35,1213.04 2111.94,1213.04 2112.52,1213.04 2113.11,1213.04 2113.7,1213.04 2114.28,1213.04 2114.87,1213.04 2115.46,1213.04 2116.04,1213.04 2116.63,1213.04 2117.22,1213.04 2117.8,1213.04 2118.39,1213.04 2118.97,1213.04 2119.56,1213.04 2120.15,1213.04 2120.73,1213.04 2121.32,1213.04 2121.91,1213.04 2122.49,1213.04 2123.08,1213.04 2123.67,1213.04 2124.25,1213.04 2124.84,1213.04 2125.42,1213.04 2126.01,1213.04 2126.6,1213.04 2127.18,1213.04 2127.77,1213.04 2128.36,1213.04 2128.94,1213.04 2129.53,1213.04 2130.12,1213.04 2130.7,1213.04 2131.29,1213.04 2131.88,1213.04 2132.46,1213.04 2133.05,1213.04 2133.63,1213.04 2134.22,1213.04 2134.81,1213.04 2135.39,1213.04 2135.98,1213.04 2136.57,1213.04 2137.15,1213.04 2137.74,1213.04 2138.33,1213.04 2138.91,1213.04 2139.5,1213.04 2140.09,1213.04 2140.67,1213.04 2141.26,1213.04 2141.84,1213.04 2142.43,1213.04 2143.02,1213.04 2143.6,1213.04 2144.19,1213.04 2144.78,1213.04 2145.36,1213.04 2145.95,1213.04 2146.54,1213.04 2147.12,1213.04 2147.71,1213.04 2148.3,1213.04 2148.88,1213.04 2149.47,1213.04 2150.05,1213.04 2150.64,1213.04 2151.23,1213.04 2151.81,1213.04 2152.4,1213.04 2152.99,1213.04 2153.57,1213.04 2154.16,1213.04 2154.75,1213.04 2155.33,1213.04 2155.92,1213.04 2156.5,1213.04 2157.09,1213.04 2157.68,1213.04 2158.26,1213.04 \"/>\n<path clip-path=\"url(#clip092)\" d=\"M986.025 1212.83 L986.612 1212.83 L987.198 1212.83 L987.785 1212.83 L988.371 1212.83 L988.957 1212.83 L989.544 1212.83 L990.13 1212.83 L990.717 1212.83 L991.303 1212.83 L991.889 1212.83 L992.476 1212.83 L993.062 1212.83 L993.649 1212.83 L994.235 1212.83 L994.822 1212.83 L995.408 1212.83 L995.994 1212.83 L996.581 1212.83 L997.167 1212.83 L997.754 1212.83 L998.34 1212.83 L998.926 1212.83 L999.513 1212.83 L1000.1 1212.83 L1000.69 1212.83 L1001.27 1212.83 L1001.86 1212.83 L1002.44 1212.83 L1003.03 1212.83 L1003.62 1212.83 L1004.2 1212.83 L1004.79 1212.83 L1005.38 1212.83 L1005.96 1212.83 L1006.55 1212.83 L1007.14 1212.83 L1007.72 1212.83 L1008.31 1212.83 L1008.9 1212.83 L1009.48 1212.83 L1010.07 1212.83 L1010.65 1212.83 L1011.24 1212.83 L1011.83 1212.83 L1012.41 1212.83 L1013 1212.83 L1013.59 1212.83 L1014.17 1212.83 L1014.76 1212.83 L1015.35 1212.83 L1015.93 1212.83 L1016.52 1212.83 L1017.11 1212.83 L1017.69 1212.83 L1018.28 1212.83 L1018.86 1212.83 L1019.45 1212.83 L1020.04 1212.83 L1020.62 1212.83 L1021.21 1212.83 L1021.8 1212.83 L1022.38 1212.83 L1022.97 1212.83 L1023.56 1212.83 L1024.14 1212.83 L1024.73 1212.83 L1025.32 1212.83 L1025.9 1212.83 L1026.49 1212.83 L1027.07 1212.83 L1027.66 1212.83 L1028.25 1212.83 L1028.83 1212.83 L1029.42 1212.83 L1030.01 1212.83 L1030.59 1212.83 L1031.18 1212.83 L1031.77 1212.83 L1032.35 1212.83 L1032.94 1212.83 L1033.52 1212.83 L1034.11 1212.83 L1034.7 1212.83 L1035.28 1212.83 L1035.87 1212.83 L1036.46 1212.83 L1037.04 1212.83 L1037.63 1212.83 L1038.22 1212.83 L1038.8 1212.83 L1039.39 1212.83 L1039.98 1212.83 L1040.56 1212.83 L1041.15 1212.83 L1041.73 1212.83 L1042.32 1212.83 L1042.91 1212.83 L1043.49 1212.83 L1044.08 1212.83 L1044.67 1212.83 L1045.25 1212.83 L1045.84 1212.83 L1046.43 1212.83 L1047.01 1212.83 L1047.6 1212.83 L1048.19 1212.83 L1048.77 1212.83 L1049.36 1212.83 L1049.94 1212.83 L1050.53 1212.83 L1051.12 1212.83 L1051.7 1212.83 L1052.29 1212.83 L1052.88 1212.83 L1053.46 1212.83 L1054.05 1212.83 L1054.64 1212.83 L1055.22 1212.83 L1055.81 1212.83 L1056.39 1212.83 L1056.98 1212.83 L1057.57 1212.83 L1058.15 1212.83 L1058.74 1212.83 L1059.33 1212.83 L1059.91 1212.83 L1060.5 1212.83 L1061.09 1212.83 L1061.67 1212.83 L1062.26 1212.83 L1062.85 1212.83 L1063.43 1212.83 L1064.02 1212.83 L1064.6 1212.83 L1065.19 1212.83 L1065.78 1212.83 L1066.36 1212.83 L1066.95 1212.83 L1067.54 1212.83 L1068.12 1212.83 L1068.71 1212.83 L1069.3 1212.83 L1069.88 1212.83 L1070.47 1212.83 L1071.06 1212.83 L1071.64 1212.83 L1072.23 1212.83 L1072.81 1212.83 L1073.4 1212.83 L1073.99 1212.83 L1074.57 1212.83 L1075.16 1212.83 L1075.75 1212.83 L1076.33 1212.83 L1076.92 1212.83 L1077.51 1212.83 L1078.09 1212.83 L1078.68 1212.83 L1079.26 1212.83 L1079.85 1212.83 L1080.44 1212.83 L1081.02 1212.83 L1081.61 1212.83 L1082.2 1212.83 L1082.78 1212.83 L1083.37 1212.83 L1083.96 1212.83 L1084.54 1212.83 L1085.13 1212.83 L1085.72 1212.83 L1086.3 1212.83 L1086.89 1212.83 L1087.47 1212.83 L1088.06 1212.83 L1088.65 1212.83 L1089.23 1212.83 L1089.82 1212.83 L1090.41 1212.83 L1090.99 1212.83 L1091.58 1212.83 L1092.17 1212.83 L1092.75 1212.83 L1093.34 1212.83 L1093.93 1212.83 L1094.51 1212.83 L1095.1 1212.83 L1095.68 1212.83 L1096.27 1212.83 L1096.86 1212.83 L1097.44 1212.83 L1098.03 1212.83 L1098.62 1212.83 L1099.2 1212.83 L1099.79 1212.83 L1100.38 1212.83 L1100.96 1212.83 L1101.55 1212.83 L1102.14 1212.83 L1102.72 1212.83 L1103.31 1212.83 L1103.89 1212.83 L1104.48 1212.83 L1105.07 1212.83 L1105.65 1212.83 L1106.24 1212.83 L1106.83 1212.83 L1107.41 1212.83 L1108 1212.83 L1108.59 1212.83 L1109.17 1212.83 L1109.76 1212.83 L1110.34 1212.83 L1110.93 1212.83 L1111.52 1212.83 L1112.1 1212.83 L1112.69 1212.83 L1113.28 1212.83 L1113.86 1212.83 L1114.45 1212.83 L1115.04 1212.83 L1115.62 1212.83 L1116.21 1212.83 L1116.8 1212.83 L1117.38 1212.83 L1117.97 1212.83 L1118.55 1212.83 L1119.14 1212.83 L1119.73 1212.83 L1120.31 1212.83 L1120.9 1212.83 L1121.49 1212.83 L1122.07 1212.83 L1122.66 1212.83 L1123.25 1212.83 L1123.83 1212.83 L1124.42 1212.83 L1125.01 1212.83 L1125.59 1212.83 L1126.18 1212.83 L1126.76 1212.83 L1127.35 1212.83 L1127.94 1212.83 L1128.52 1212.83 L1129.11 1212.83 L1129.7 1212.83 L1130.28 1212.83 L1130.87 1212.83 L1131.46 1212.83 L1132.04 1212.83 L1132.63 1212.83 L1133.21 1212.83 L1133.8 1212.83 L1134.39 1212.83 L1134.97 1212.83 L1135.56 1212.83 L1136.15 1212.83 L1136.73 1212.83 L1137.32 1212.83 L1137.91 1212.83 L1138.49 1212.83 L1139.08 1212.83 L1139.67 1212.83 L1140.25 1212.83 L1140.84 1212.83 L1141.42 1212.83 L1142.01 1212.83 L1142.6 1212.83 L1143.18 1212.83 L1143.77 1212.83 L1144.36 1212.83 L1144.94 1212.83 L1145.53 1212.83 L1146.12 1212.83 L1146.7 1212.83 L1147.29 1212.83 L1147.88 1212.83 L1148.46 1212.83 L1149.05 1212.83 L1149.63 1212.83 L1150.22 1212.83 L1150.81 1212.83 L1151.39 1212.83 L1151.98 1212.83 L1152.57 1212.83 L1153.15 1212.83 L1153.74 1212.83 L1154.33 1212.83 L1154.91 1212.83 L1155.5 1212.83 L1156.09 1212.83 L1156.67 1212.83 L1157.26 1212.83 L1157.84 1212.83 L1158.43 1212.83 L1159.02 1212.83 L1159.6 1212.83 L1160.19 1212.83 L1160.78 1212.83 L1161.36 1212.83 L1161.95 1212.83 L1162.54 1212.83 L1163.12 1212.83 L1163.71 1212.83 L1164.29 1212.83 L1164.88 1212.83 L1165.47 1212.83 L1166.05 1212.83 L1166.64 1212.83 L1167.23 1212.83 L1167.81 1212.83 L1168.4 1212.83 L1168.99 1212.83 L1169.57 1212.83 L1170.16 1212.83 L1170.75 1212.83 L1171.33 1212.83 L1171.92 1212.83 L1172.5 1212.83 L1173.09 1212.83 L1173.68 1212.83 L1174.26 1212.83 L1174.85 1212.83 L1175.44 1212.83 L1176.02 1212.83 L1176.61 1212.83 L1177.2 1212.83 L1177.78 1212.83 L1178.37 1212.83 L1178.96 1212.83 L1179.54 1212.83 L1180.13 1212.83 L1180.71 1212.83 L1181.3 1212.83 L1181.89 1212.83 L1182.47 1212.83 L1183.06 1212.83 L1183.65 1212.83 L1184.23 1212.83 L1184.82 1212.83 L1185.41 1212.83 L1185.99 1212.83 L1186.58 1212.83 L1187.16 1212.83 L1187.75 1212.83 L1188.34 1212.83 L1188.92 1212.83 L1189.51 1212.83 L1190.1 1212.83 L1190.68 1212.83 L1191.27 1212.83 L1191.86 1212.83 L1192.44 1212.83 L1193.03 1212.83 L1193.62 1212.83 L1194.2 1212.83 L1194.79 1212.83 L1195.37 1212.83 L1195.96 1212.83 L1196.55 1212.83 L1197.13 1212.83 L1197.72 1212.83 L1198.31 1212.83 L1198.89 1212.83 L1199.48 1212.83 L1200.07 1212.83 L1200.65 1212.83 L1201.24 1212.83 L1201.83 1212.83 L1202.41 1212.83 L1203 1212.83 L1203.58 1212.83 L1204.17 1212.83 L1204.76 1212.83 L1205.34 1212.83 L1205.93 1212.83 L1206.52 1212.83 L1207.1 1212.83 L1207.69 1212.83 L1208.28 1212.83 L1208.86 1212.83 L1209.45 1212.83 L1210.03 1212.83 L1210.62 1212.83 L1211.21 1212.83 L1211.79 1212.83 L1212.38 1212.83 L1212.97 1212.83 L1213.55 1212.83 L1214.14 1212.83 L1214.73 1212.83 L1215.31 1212.83 L1215.9 1212.83 L1216.49 1212.83 L1217.07 1212.83 L1217.66 1212.83 L1218.24 1212.83 L1218.83 1212.83 L1219.42 1212.83 L1220 1212.83 L1220.59 1212.83 L1221.18 1212.83 L1221.76 1212.83 L1222.35 1212.83 L1222.94 1212.83 L1223.52 1212.83 L1224.11 1212.83 L1224.7 1212.83 L1225.28 1212.83 L1225.87 1212.83 L1226.45 1212.83 L1227.04 1212.83 L1227.63 1212.83 L1228.21 1212.83 L1228.8 1212.83 L1229.39 1212.83 L1229.97 1212.83 L1230.56 1212.83 L1231.15 1212.83 L1231.73 1212.83 L1232.32 1212.83 L1232.91 1212.83 L1233.49 1212.83 L1234.08 1212.83 L1234.66 1212.83 L1235.25 1212.83 L1235.84 1212.83 L1236.42 1212.83 L1237.01 1212.83 L1237.6 1212.83 L1238.18 1212.83 L1238.77 1212.83 L1239.36 1212.83 L1239.94 1212.83 L1240.53 1212.83 L1241.11 1212.83 L1241.7 1212.83 L1242.29 1212.83 L1242.87 1212.83 L1243.46 1212.83 L1244.05 1212.83 L1244.63 1212.83 L1245.22 1212.83 L1245.81 1212.83 L1246.39 1212.83 L1246.98 1212.83 L1247.57 1212.83 L1248.15 1212.83 L1248.74 1212.83 L1249.32 1212.83 L1249.91 1212.83 L1250.5 1212.83 L1251.08 1212.83 L1251.67 1212.83 L1252.26 1212.83 L1252.84 1212.83 L1253.43 1212.83 L1254.02 1212.83 L1254.6 1212.83 L1255.19 1212.83 L1255.78 1212.83 L1256.36 1212.83 L1256.95 1212.83 L1257.53 1212.83 L1258.12 1212.83 L1258.71 1212.83 L1259.29 1212.83 L1259.88 1212.83 L1260.47 1212.83 L1261.05 1212.83 L1261.64 1212.83 L1262.23 1212.83 L1262.81 1212.83 L1263.4 1212.83 L1263.98 1212.83 L1264.57 1212.83 L1265.16 1212.83 L1265.74 1212.83 L1266.33 1212.83 L1266.92 1212.83 L1267.5 1212.83 L1268.09 1212.83 L1268.68 1212.83 L1269.26 1212.83 L1269.85 1212.83 L1270.44 1212.83 L1271.02 1212.83 L1271.61 1212.83 L1272.19 1212.83 L1272.78 1212.83 L1273.37 1212.83 L1273.95 1212.83 L1274.54 1212.83 L1275.13 1212.83 L1275.71 1212.83 L1276.3 1212.83 L1276.89 1212.83 L1277.47 1212.83 L1278.06 1212.83 L1278.65 1212.83 L1279.23 1212.83 L1279.82 1212.83 L1280.4 1212.83 L1280.99 1212.83 L1281.58 1212.83 L1282.16 1212.83 L1282.75 1212.83 L1283.34 1212.83 L1283.92 1212.83 L1284.51 1212.83 L1285.1 1212.83 L1285.68 1212.83 L1286.27 1212.83 L1286.86 1212.83 L1287.44 1212.83 L1288.03 1212.83 L1288.61 1212.83 L1289.2 1212.83 L1289.79 1212.83 L1290.37 1212.83 L1290.96 1212.83 L1291.55 1212.83 L1292.13 1212.83 L1292.72 1212.83 L1293.31 1212.83 L1293.89 1212.83 L1294.48 1212.83 L1295.06 1212.83 L1295.65 1212.83 L1296.24 1212.83 L1296.82 1212.83 L1297.41 1212.83 L1298 1212.83 L1298.58 1212.83 L1299.17 1212.83 L1299.76 1212.83 L1300.34 1212.83 L1300.93 1212.83 L1301.52 1212.83 L1302.1 1212.83 L1302.69 1212.83 L1303.27 1212.83 L1303.86 1212.83 L1304.45 1212.83 L1305.03 1212.83 L1305.62 1212.83 L1306.21 1212.83 L1306.79 1212.83 L1307.38 1212.83 L1307.97 1212.83 L1308.55 1212.83 L1309.14 1212.83 L1309.73 1212.83 L1310.31 1212.83 L1310.9 1212.83 L1311.48 1212.83 L1312.07 1212.83 L1312.66 1212.83 L1313.24 1212.83 L1313.83 1212.83 L1314.42 1212.83 L1315 1212.83 L1315.59 1212.83 L1316.18 1212.83 L1316.76 1212.83 L1317.35 1212.83 L1317.93 1212.83 L1318.52 1212.83 L1319.11 1212.83 L1319.69 1212.83 L1320.28 1212.83 L1320.87 1212.83 L1321.45 1212.83 L1322.04 1212.83 L1322.63 1212.83 L1323.21 1212.83 L1323.8 1212.83 L1324.39 1212.83 L1324.97 1212.83 L1325.56 1212.83 L1326.14 1212.83 L1326.73 1212.83 L1327.32 1212.83 L1327.9 1212.83 L1328.49 1212.83 L1329.08 1212.83 L1329.66 1212.83 L1330.25 1212.83 L1330.84 1212.83 L1331.42 1212.83 L1332.01 1212.83 L1332.6 1212.83 L1333.18 1212.83 L1333.77 1212.83 L1334.35 1212.83 L1334.94 1212.83 L1335.53 1212.83 L1336.11 1212.83 L1336.7 1212.83 L1337.29 1212.83 L1337.87 1212.83 L1338.46 1212.83 L1339.05 1212.83 L1339.63 1212.83 L1340.22 1212.83 L1340.8 1212.83 L1341.39 1212.83 L1341.98 1212.83 L1342.56 1212.83 L1343.15 1212.83 L1343.74 1212.83 L1344.32 1212.83 L1344.91 1212.83 L1345.5 1212.83 L1346.08 1212.83 L1346.67 1212.83 L1347.26 1212.83 L1347.84 1212.83 L1348.43 1212.83 L1349.01 1212.83 L1349.6 1212.83 L1350.19 1212.83 L1350.77 1212.83 L1351.36 1212.83 L1351.95 1212.83 L1352.53 1212.83 L1353.12 1212.83 L1353.71 1212.83 L1354.29 1212.83 L1354.88 1212.83 L1355.47 1212.83 L1356.05 1212.83 L1356.64 1212.83 L1357.22 1212.83 L1357.81 1212.83 L1358.4 1212.83 L1358.98 1212.83 L1359.57 1212.83 L1360.16 1212.83 L1360.74 1212.83 L1361.33 1212.83 L1361.92 1212.83 L1362.5 1212.83 L1363.09 1212.83 L1363.68 1212.83 L1364.26 1212.83 L1364.85 1212.83 L1365.43 1212.83 L1366.02 1212.83 L1366.61 1212.83 L1367.19 1212.83 L1367.78 1212.83 L1368.37 1212.83 L1368.95 1212.83 L1369.54 1212.83 L1370.13 1212.83 L1370.71 1212.83 L1371.3 1212.83 L1371.88 1212.83 L1372.47 1212.83 L1373.06 1212.83 L1373.64 1212.83 L1374.23 1212.83 L1374.82 1212.83 L1375.4 1212.83 L1375.99 1212.83 L1376.58 1212.83 L1377.16 1212.83 L1377.75 1212.83 L1378.34 1212.83 L1378.92 1212.83 L1379.51 1212.83 L1380.09 1212.83 L1380.68 1212.83 L1381.27 1212.83 L1381.85 1212.83 L1382.44 1212.83 L1383.03 1212.83 L1383.61 1212.83 L1384.2 1212.83 L1384.79 1212.83 L1385.37 1212.83 L1385.96 1212.83 L1386.55 1212.83 L1387.13 1212.83 L1387.72 1212.83 L1388.3 1212.83 L1388.89 1212.83 L1389.48 1212.83 L1390.06 1212.83 L1390.65 1212.83 L1391.24 1212.83 L1391.82 1212.83 L1392.41 1212.83 L1393 1212.83 L1393.58 1212.83 L1394.17 1212.83 L1394.75 1212.83 L1395.34 1212.83 L1395.93 1212.83 L1396.51 1212.83 L1397.1 1212.83 L1397.69 1212.83 L1398.27 1212.83 L1398.86 1212.83 L1399.45 1212.83 L1400.03 1212.83 L1400.62 1212.83 L1401.21 1212.83 L1401.79 1212.83 L1402.38 1212.83 L1402.96 1212.83 L1403.55 1212.83 L1404.14 1212.83 L1404.72 1212.83 L1405.31 1212.83 L1405.9 1212.83 L1406.48 1212.83 L1407.07 1212.83 L1407.66 1212.83 L1408.24 1212.83 L1408.83 1212.83 L1409.42 1212.83 L1410 1212.83 L1410.59 1212.83 L1411.17 1212.83 L1411.76 1212.83 L1412.35 1212.83 L1412.93 1212.83 L1413.52 1212.83 L1414.11 1212.83 L1414.69 1212.83 L1415.28 1212.83 L1415.87 1212.83 L1416.45 1212.83 L1417.04 1212.83 L1417.63 1212.83 L1418.21 1212.83 L1418.8 1212.83 L1419.38 1212.83 L1419.97 1212.83 L1420.56 1212.83 L1421.14 1212.83 L1421.73 1212.83 L1422.32 1212.83 L1422.9 1212.83 L1423.49 1212.83 L1424.08 1212.83 L1424.66 1212.83 L1425.25 1212.83 L1425.83 1212.83 L1426.42 1212.83 L1427.01 1212.83 L1427.59 1212.83 L1428.18 1212.83 L1428.77 1212.83 L1429.35 1212.83 L1429.94 1212.83 L1430.53 1212.83 L1431.11 1212.83 L1431.7 1212.83 L1432.29 1212.83 L1432.87 1212.83 L1433.46 1212.83 L1434.04 1212.83 L1434.63 1212.83 L1435.22 1212.83 L1435.8 1212.83 L1436.39 1212.83 L1436.98 1212.83 L1437.56 1212.83 L1438.15 1212.83 L1438.74 1212.83 L1439.32 1212.83 L1439.91 1212.83 L1440.5 1212.83 L1441.08 1212.83 L1441.67 1212.83 L1442.25 1212.83 L1442.84 1212.83 L1443.43 1212.83 L1444.01 1212.83 L1444.6 1212.83 L1445.19 1212.83 L1445.77 1212.83 L1446.36 1212.83 L1446.95 1212.83 L1447.53 1212.83 L1448.12 1212.83 L1448.7 1212.83 L1449.29 1212.83 L1449.88 1212.83 L1450.46 1212.83 L1451.05 1212.83 L1451.64 1212.83 L1452.22 1212.83 L1452.81 1212.83 L1453.4 1212.83 L1453.98 1212.83 L1454.57 1212.83 L1455.16 1212.83 L1455.74 1212.83 L1456.33 1212.83 L1456.91 1212.83 L1457.5 1212.83 L1458.09 1212.83 L1458.67 1212.83 L1459.26 1212.83 L1459.85 1212.83 L1460.43 1212.83 L1461.02 1212.83 L1461.61 1212.83 L1462.19 1212.83 L1462.78 1212.83 L1463.37 1212.83 L1463.95 1212.83 L1464.54 1212.83 L1465.12 1212.83 L1465.71 1212.83 L1466.3 1212.83 L1466.88 1212.83 L1467.47 1212.83 L1468.06 1212.83 L1468.64 1212.83 L1469.23 1212.83 L1469.82 1212.83 L1470.4 1212.83 L1470.99 1212.83 L1471.57 1212.83 L1472.16 1212.83 L1472.75 1212.83 L1473.33 1212.83 L1473.92 1212.83 L1474.51 1212.83 L1475.09 1212.83 L1475.68 1212.83 L1476.27 1212.83 L1476.85 1212.83 L1477.44 1212.83 L1478.03 1212.83 L1478.61 1212.83 L1479.2 1212.83 L1479.78 1212.83 L1480.37 1212.83 L1480.96 1212.83 L1481.54 1212.83 L1482.13 1212.83 L1482.72 1212.83 L1483.3 1212.83 L1483.89 1212.83 L1484.48 1212.83 L1485.06 1212.83 L1485.65 1212.83 L1486.24 1212.83 L1486.82 1212.83 L1487.41 1212.83 L1487.99 1212.83 L1488.58 1212.83 L1489.17 1212.83 L1489.75 1212.83 L1490.34 1212.83 L1490.93 1212.83 L1491.51 1212.83 L1492.1 1212.83 L1492.69 1212.83 L1493.27 1212.83 L1493.86 1212.83 L1494.45 1212.83 L1495.03 1212.83 L1495.62 1212.83 L1496.2 1212.83 L1496.79 1212.83 L1497.38 1212.83 L1497.96 1212.83 L1498.55 1212.83 L1499.14 1212.83 L1499.72 1212.83 L1500.31 1212.83 L1500.9 1212.83 L1501.48 1212.83 L1502.07 1212.83 L1502.65 1212.83 L1503.24 1212.83 L1503.83 1212.83 L1504.41 1212.83 L1505 1212.83 L1505.59 1212.83 L1506.17 1212.83 L1506.76 1212.83 L1507.35 1212.83 L1507.93 1212.83 L1508.52 1212.83 L1509.11 1212.83 L1509.69 1212.83 L1510.28 1212.83 L1510.86 1212.83 L1511.45 1212.83 L1512.04 1212.83 L1512.62 1212.83 L1513.21 1212.83 L1513.8 1212.83 L1514.38 1212.83 L1514.97 1212.83 L1515.56 1212.83 L1516.14 1212.83 L1516.73 1212.83 L1517.32 1212.83 L1517.9 1212.83 L1518.49 1212.83 L1519.07 1212.83 L1519.66 1212.83 L1520.25 1212.83 L1520.83 1212.83 L1521.42 1212.83 L1522.01 1212.83 L1522.59 1212.83 L1523.18 1212.83 L1523.77 1212.83 L1524.35 1212.83 L1524.94 1212.83 L1525.52 1212.83 L1526.11 1212.83 L1526.7 1212.83 L1527.28 1212.83 L1527.87 1212.83 L1528.46 1212.83 L1529.04 1212.83 L1529.63 1212.83 L1530.22 1212.83 L1530.8 1212.83 L1531.39 1212.83 L1531.98 1212.83 L1532.56 1212.83 L1533.15 1212.83 L1533.73 1212.83 L1534.32 1212.83 L1534.91 1212.83 L1535.49 1212.83 L1536.08 1212.83 L1536.67 1212.83 L1537.25 1212.83 L1537.84 1212.83 L1538.43 1212.83 L1539.01 1212.83 L1539.6 1212.83 L1540.19 1212.83 L1540.77 1212.83 L1541.36 1212.83 L1541.94 1212.83 L1542.53 1212.83 L1543.12 1212.83 L1543.7 1212.83 L1544.29 1212.83 L1544.88 1212.83 L1545.46 1212.83 L1546.05 1212.83 L1546.64 1212.83 L1547.22 1212.83 L1547.81 1212.83 L1548.4 1212.83 L1548.98 1212.83 L1549.57 1212.83 L1550.15 1212.83 L1550.74 1212.83 L1551.33 1212.83 L1551.91 1212.83 L1552.5 1212.83 L1553.09 1212.83 L1553.67 1212.83 L1554.26 1212.83 L1554.85 1212.83 L1555.43 1212.83 L1556.02 1212.83 L1556.6 1212.83 L1557.19 1212.83 L1557.78 1212.83 L1558.36 1212.83 L1558.95 1212.83 L1559.54 1212.83 L1560.12 1212.83 L1560.71 1212.83 L1561.3 1212.83 L1561.88 1212.83 L1562.47 1212.83 L1563.06 1212.83 L1563.64 1212.83 L1564.23 1212.83 L1564.81 1212.83 L1565.4 1212.83 L1565.99 1212.83 L1566.57 1212.83 L1567.16 1212.83 L1567.75 1212.83 L1568.33 1212.83 L1568.92 1212.83 L1569.51 1212.83 L1570.09 1212.83 L1570.68 1212.83 L1571.27 1212.83 L1571.85 1212.83 L1572.44 1212.83 L1573.02 1212.83 L1573.61 1212.83 L1574.2 1212.83 L1574.78 1212.83 L1575.37 1212.83 L1575.96 1212.83 L1576.54 1212.83 L1577.13 1212.83 L1577.72 1212.83 L1578.3 1212.83 L1578.89 1212.83 L1579.47 1212.83 L1580.06 1212.83 L1580.65 1212.83 L1581.23 1212.83 L1581.82 1212.83 L1582.41 1212.83 L1582.99 1212.83 L1583.58 1212.83 L1584.17 1212.83 L1584.75 1212.83 L1585.34 1212.83 L1585.93 1212.83 L1586.51 1212.83 L1587.1 1212.83 L1587.68 1212.83 L1588.27 1212.83 L1588.86 1212.83 L1589.44 1212.83 L1590.03 1212.83 L1590.62 1212.83 L1591.2 1212.83 L1591.79 1212.83 L1592.38 1212.83 L1592.96 1212.83 L1593.55 1212.83 L1594.14 1212.83 L1594.72 1212.83 L1595.31 1212.83 L1595.89 1212.83 L1596.48 1212.83 L1597.07 1212.83 L1597.65 1212.83 L1598.24 1212.83 L1598.83 1212.83 L1599.41 1212.83 L1600 1212.83 L1600.59 1212.83 L1601.17 1212.83 L1601.76 1212.83 L1602.34 1212.83 L1602.93 1212.83 L1603.52 1212.83 L1604.1 1212.83 L1604.69 1212.83 L1605.28 1212.83 L1605.86 1212.83 L1606.45 1212.83 L1607.04 1212.83 L1607.62 1212.83 L1608.21 1212.83 L1608.8 1212.83 L1609.38 1212.83 L1609.97 1212.83 L1610.55 1212.83 L1611.14 1212.83 L1611.73 1212.83 L1612.31 1212.83 L1612.9 1212.83 L1613.49 1212.83 L1614.07 1212.83 L1614.66 1212.83 L1615.25 1212.83 L1615.83 1212.83 L1616.42 1212.83 L1617.01 1212.83 L1617.59 1212.83 L1618.18 1212.83 L1618.76 1212.83 L1619.35 1212.83 L1619.94 1212.83 L1620.52 1212.83 L1621.11 1212.83 L1621.7 1212.83 L1622.28 1212.83 L1622.87 1212.83 L1623.46 1212.83 L1624.04 1212.83 L1624.63 1212.83 L1625.22 1212.83 L1625.8 1212.83 L1626.39 1212.83 L1626.97 1212.83 L1627.56 1212.83 L1628.15 1212.83 L1628.73 1212.83 L1629.32 1212.83 L1629.91 1212.83 L1630.49 1212.83 L1631.08 1212.83 L1631.67 1212.83 L1632.25 1212.83 L1632.84 1212.83 L1633.42 1212.83 L1634.01 1212.83 L1634.6 1212.83 L1635.18 1212.83 L1635.77 1212.83 L1636.36 1212.83 L1636.94 1212.83 L1637.53 1212.83 L1638.12 1212.83 L1638.7 1212.83 L1639.29 1212.83 L1639.88 1212.83 L1640.46 1212.83 L1641.05 1212.83 L1641.63 1212.83 L1642.22 1212.83 L1642.81 1212.83 L1643.39 1212.83 L1643.98 1212.83 L1644.57 1212.83 L1645.15 1212.83 L1645.74 1212.83 L1646.33 1212.83 L1646.91 1212.83 L1647.5 1212.83 L1648.09 1212.83 L1648.67 1212.83 L1649.26 1212.83 L1649.84 1212.83 L1650.43 1212.83 L1651.02 1212.83 L1651.6 1212.83 L1652.19 1212.83 L1652.78 1212.83 L1653.36 1212.83 L1653.95 1212.83 L1654.54 1212.83 L1655.12 1212.83 L1655.71 1212.83 L1656.29 1212.83 L1656.88 1212.83 L1657.47 1212.83 L1658.05 1212.83 L1658.64 1212.83 L1659.23 1212.83 L1659.81 1212.83 L1660.4 1212.83 L1660.99 1212.83 L1661.57 1212.83 L1662.16 1212.83 L1662.75 1212.83 L1663.33 1212.83 L1663.92 1212.83 L1664.5 1212.83 L1665.09 1212.83 L1665.68 1212.83 L1666.26 1212.83 L1666.85 1212.83 L1667.44 1212.83 L1668.02 1212.83 L1668.61 1212.83 L1669.2 1212.83 L1669.78 1212.83 L1670.37 1212.83 L1670.96 1212.83 L1671.54 1212.83 L1672.13 1212.83 L1672.71 1212.83 L1673.3 1212.83 L1673.89 1212.83 L1674.47 1212.83 L1675.06 1212.83 L1675.65 1212.83 L1676.23 1212.83 L1676.82 1212.83 L1677.41 1212.83 L1677.99 1212.83 L1678.58 1212.83 L1679.17 1212.83 L1679.75 1212.83 L1680.34 1212.83 L1680.92 1212.83 L1681.51 1212.83 L1682.1 1212.83 L1682.68 1212.83 L1683.27 1212.83 L1683.86 1212.83 L1684.44 1212.83 L1685.03 1212.83 L1685.62 1212.83 L1686.2 1212.83 L1686.79 1212.83 L1687.37 1212.83 L1687.96 1212.83 L1688.55 1212.83 L1689.13 1212.83 L1689.72 1212.83 L1690.31 1212.83 L1690.89 1212.83 L1691.48 1212.83 L1692.07 1212.83 L1692.65 1212.83 L1693.24 1212.83 L1693.83 1212.83 L1694.41 1212.83 L1695 1212.83 L1695.58 1212.83 L1696.17 1212.83 L1696.76 1212.83 L1697.34 1212.83 L1697.93 1212.83 L1698.52 1212.83 L1699.1 1212.83 L1699.69 1212.83 L1700.28 1212.83 L1700.86 1212.83 L1701.45 1212.83 L1702.04 1212.83 L1702.62 1212.83 L1703.21 1212.83 L1703.79 1212.83 L1704.38 1212.83 L1704.97 1212.83 L1705.55 1212.83 L1706.14 1212.83 L1706.73 1212.83 L1707.31 1212.83 L1707.9 1212.83 L1708.49 1212.83 L1709.07 1212.83 L1709.66 1212.83 L1710.24 1212.83 L1710.83 1212.83 L1711.42 1212.83 L1712 1212.83 L1712.59 1212.83 L1713.18 1212.83 L1713.76 1212.83 L1714.35 1212.83 L1714.94 1212.83 L1715.52 1212.83 L1716.11 1212.83 L1716.7 1212.83 L1717.28 1212.83 L1717.87 1212.83 L1718.45 1212.83 L1719.04 1212.83 L1719.63 1212.83 L1720.21 1212.83 L1720.8 1212.83 L1721.39 1212.83 L1721.97 1212.83 L1722.56 1212.83 L1723.15 1212.83 L1723.73 1212.83 L1724.32 1212.83 L1724.91 1212.83 L1725.49 1212.83 L1726.08 1212.83 L1726.66 1212.83 L1727.25 1212.83 L1727.84 1212.83 L1728.42 1212.83 L1729.01 1212.83 L1729.6 1212.83 L1730.18 1212.83 L1730.77 1212.83 L1731.36 1212.83 L1731.94 1212.83 L1732.53 1212.83 L1733.11 1212.83 L1733.7 1212.83 L1734.29 1212.83 L1734.87 1212.83 L1735.46 1212.83 L1736.05 1212.83 L1736.63 1212.83 L1737.22 1212.83 L1737.81 1212.83 L1738.39 1212.83 L1738.98 1212.83 L1739.57 1212.83 L1740.15 1212.83 L1740.74 1212.83 L1741.32 1212.83 L1741.91 1212.83 L1742.5 1212.83 L1743.08 1212.83 L1743.67 1212.83 L1744.26 1212.83 L1744.84 1212.83 L1745.43 1212.83 L1746.02 1212.83 L1746.6 1212.83 L1747.19 1212.83 L1747.78 1212.83 L1748.36 1212.83 L1748.95 1212.83 L1749.53 1212.83 L1750.12 1212.83 L1750.71 1212.83 L1751.29 1212.83 L1751.88 1212.83 L1752.47 1212.83 L1753.05 1212.83 L1753.64 1212.83 L1754.23 1212.83 L1754.81 1212.83 L1755.4 1212.83 L1755.99 1212.83 L1756.57 1212.83 L1757.16 1212.83 L1757.74 1212.83 L1758.33 1212.83 L1758.92 1212.83 L1759.5 1212.83 L1760.09 1212.83 L1760.68 1212.83 L1761.26 1212.83 L1761.85 1212.83 L1762.44 1212.83 L1763.02 1212.83 L1763.61 1212.83 L1764.19 1212.83 L1764.78 1212.83 L1765.37 1212.83 L1765.95 1212.83 L1766.54 1212.83 L1767.13 1212.83 L1767.71 1212.83 L1768.3 1212.83 L1768.89 1212.83 L1769.47 1212.83 L1770.06 1212.83 L1770.65 1212.83 L1771.23 1212.83 L1771.82 1212.83 L1772.4 1212.83 L1772.99 1212.83 L1773.58 1212.83 L1774.16 1212.83 L1774.75 1212.83 L1775.34 1212.83 L1775.92 1212.83 L1776.51 1212.83 L1777.1 1212.83 L1777.68 1212.83 L1778.27 1212.83 L1778.86 1212.83 L1779.44 1212.83 L1780.03 1212.83 L1780.61 1212.83 L1781.2 1212.83 L1781.79 1212.83 L1782.37 1212.83 L1782.96 1212.83 L1783.55 1212.83 L1784.13 1212.83 L1784.72 1212.83 L1785.31 1212.83 L1785.89 1212.83 L1786.48 1212.83 L1787.06 1212.83 L1787.65 1212.83 L1788.24 1212.83 L1788.82 1212.83 L1789.41 1212.83 L1790 1212.83 L1790.58 1212.83 L1791.17 1212.83 L1791.76 1212.83 L1792.34 1212.83 L1792.93 1212.83 L1793.52 1212.83 L1794.1 1212.83 L1794.69 1212.83 L1795.27 1212.83 L1795.86 1212.83 L1796.45 1212.83 L1797.03 1212.83 L1797.62 1212.83 L1798.21 1212.83 L1798.79 1212.83 L1799.38 1212.83 L1799.97 1212.83 L1800.55 1212.83 L1801.14 1212.83 L1801.73 1212.83 L1802.31 1212.83 L1802.9 1212.83 L1803.48 1212.83 L1804.07 1212.83 L1804.66 1212.83 L1805.24 1212.83 L1805.83 1212.83 L1806.42 1212.83 L1807 1212.83 L1807.59 1212.83 L1808.18 1212.83 L1808.76 1212.83 L1809.35 1212.83 L1809.94 1212.83 L1810.52 1212.83 L1811.11 1212.83 L1811.69 1212.83 L1812.28 1212.83 L1812.87 1212.83 L1813.45 1212.83 L1814.04 1212.83 L1814.63 1212.83 L1815.21 1212.83 L1815.8 1212.83 L1816.39 1212.83 L1816.97 1212.83 L1817.56 1212.83 L1818.14 1212.83 L1818.73 1212.83 L1819.32 1212.83 L1819.9 1212.83 L1820.49 1212.83 L1821.08 1212.83 L1821.66 1212.83 L1822.25 1212.83 L1822.84 1212.83 L1823.42 1212.83 L1824.01 1212.83 L1824.6 1212.83 L1825.18 1212.83 L1825.77 1212.83 L1826.35 1212.83 L1826.94 1212.83 L1827.53 1212.83 L1828.11 1212.83 L1828.7 1212.83 L1829.29 1212.83 L1829.87 1212.83 L1830.46 1212.83 L1831.05 1212.83 L1831.63 1212.83 L1832.22 1212.83 L1832.81 1212.83 L1833.39 1212.83 L1833.98 1212.83 L1834.56 1212.83 L1835.15 1212.83 L1835.74 1212.83 L1836.32 1212.83 L1836.91 1212.83 L1837.5 1212.83 L1838.08 1212.83 L1838.67 1212.83 L1839.26 1212.83 L1839.84 1212.83 L1840.43 1212.83 L1841.01 1212.83 L1841.6 1212.83 L1842.19 1212.83 L1842.77 1212.83 L1843.36 1212.83 L1843.95 1212.83 L1844.53 1212.83 L1845.12 1212.83 L1845.71 1212.83 L1846.29 1212.83 L1846.88 1212.83 L1847.47 1212.83 L1848.05 1212.83 L1848.64 1212.83 L1849.22 1212.83 L1849.81 1212.83 L1850.4 1212.83 L1850.98 1212.83 L1851.57 1212.83 L1852.16 1212.83 L1852.74 1212.83 L1853.33 1212.83 L1853.92 1212.83 L1854.5 1212.83 L1855.09 1212.83 L1855.68 1212.83 L1856.26 1212.83 L1856.85 1212.83 L1857.43 1212.83 L1858.02 1212.83 L1858.61 1212.83 L1859.19 1212.83 L1859.78 1212.83 L1860.37 1212.83 L1860.95 1212.83 L1861.54 1212.83 L1862.13 1212.83 L1862.71 1212.83 L1863.3 1212.83 L1863.88 1212.83 L1864.47 1212.83 L1865.06 1212.83 L1865.64 1212.83 L1866.23 1212.83 L1866.82 1212.83 L1867.4 1212.83 L1867.99 1212.83 L1868.58 1212.83 L1869.16 1212.83 L1869.75 1212.83 L1870.34 1212.83 L1870.92 1212.83 L1871.51 1212.83 L1872.09 1212.83 L1872.68 1212.83 L1873.27 1212.83 L1873.85 1212.83 L1874.44 1212.83 L1875.03 1212.83 L1875.61 1212.83 L1876.2 1212.83 L1876.79 1212.83 L1877.37 1212.83 L1877.96 1212.83 L1878.55 1212.83 L1879.13 1212.83 L1879.72 1212.83 L1880.3 1212.83 L1880.89 1212.83 L1881.48 1212.83 L1882.06 1212.83 L1882.65 1212.83 L1883.24 1212.83 L1883.82 1212.83 L1884.41 1212.83 L1885 1212.83 L1885.58 1212.83 L1886.17 1212.83 L1886.76 1212.83 L1887.34 1212.83 L1887.93 1212.83 L1888.51 1212.83 L1889.1 1212.83 L1889.69 1212.83 L1890.27 1212.83 L1890.86 1212.83 L1891.45 1212.83 L1892.03 1212.83 L1892.62 1212.83 L1893.21 1212.83 L1893.79 1212.83 L1894.38 1212.83 L1894.96 1212.83 L1895.55 1212.83 L1896.14 1212.83 L1896.72 1212.83 L1897.31 1212.83 L1897.9 1212.83 L1898.48 1212.83 L1899.07 1212.83 L1899.66 1212.83 L1900.24 1212.83 L1900.83 1212.83 L1901.42 1212.83 L1902 1212.83 L1902.59 1212.83 L1903.17 1212.83 L1903.76 1212.83 L1904.35 1212.83 L1904.93 1212.83 L1905.52 1212.83 L1906.11 1212.83 L1906.69 1212.83 L1907.28 1212.83 L1907.87 1212.83 L1908.45 1212.83 L1909.04 1212.83 L1909.63 1212.83 L1910.21 1212.83 L1910.8 1212.83 L1911.38 1212.83 L1911.97 1212.83 L1912.56 1212.83 L1913.14 1212.83 L1913.73 1212.83 L1914.32 1212.83 L1914.9 1212.83 L1915.49 1212.83 L1916.08 1212.83 L1916.66 1212.83 L1917.25 1212.83 L1917.83 1212.83 L1918.42 1212.83 L1919.01 1212.83 L1919.59 1212.83 L1920.18 1212.83 L1920.77 1212.83 L1921.35 1212.83 L1921.94 1212.83 L1922.53 1212.83 L1923.11 1212.83 L1923.7 1212.83 L1924.29 1212.83 L1924.87 1212.83 L1925.46 1212.83 L1926.04 1212.83 L1926.63 1212.83 L1927.22 1212.83 L1927.8 1212.83 L1928.39 1212.83 L1928.98 1212.83 L1929.56 1212.83 L1930.15 1212.83 L1930.74 1212.83 L1931.32 1212.83 L1931.91 1212.83 L1932.5 1212.83 L1933.08 1212.83 L1933.67 1212.83 L1934.25 1212.83 L1934.84 1212.83 L1935.43 1212.83 L1936.01 1212.83 L1936.6 1212.83 L1937.19 1212.83 L1937.77 1212.83 L1938.36 1212.83 L1938.95 1212.83 L1939.53 1212.83 L1940.12 1212.83 L1940.71 1212.83 L1941.29 1212.83 L1941.88 1212.83 L1942.46 1212.83 L1943.05 1212.83 L1943.64 1212.83 L1944.22 1212.83 L1944.81 1212.83 L1945.4 1212.83 L1945.98 1212.83 L1946.57 1212.83 L1947.16 1212.83 L1947.74 1212.83 L1948.33 1212.83 L1948.91 1212.83 L1949.5 1212.83 L1950.09 1212.83 L1950.67 1212.83 L1951.26 1212.83 L1951.85 1212.83 L1952.43 1212.83 L1953.02 1212.83 L1953.61 1212.83 L1954.19 1212.83 L1954.78 1212.83 L1955.37 1212.83 L1955.95 1212.83 L1956.54 1212.83 L1957.12 1212.83 L1957.71 1212.83 L1958.3 1212.83 L1958.88 1212.83 L1959.47 1212.83 L1960.06 1212.83 L1960.64 1212.83 L1961.23 1212.83 L1961.82 1212.83 L1962.4 1212.83 L1962.99 1212.83 L1963.58 1212.83 L1964.16 1212.83 L1964.75 1212.83 L1965.33 1212.83 L1965.92 1212.83 L1966.51 1212.83 L1967.09 1212.83 L1967.68 1212.83 L1968.27 1212.83 L1968.85 1212.83 L1969.44 1212.83 L1970.03 1212.83 L1970.61 1212.83 L1971.2 1212.83 L1971.78 1212.83 L1972.37 1212.83 L1972.96 1212.83 L1973.54 1212.83 L1974.13 1212.83 L1974.72 1212.83 L1975.3 1212.83 L1975.89 1212.83 L1976.48 1212.83 L1977.06 1212.83 L1977.65 1212.83 L1978.24 1212.83 L1978.82 1212.83 L1979.41 1212.83 L1979.99 1212.83 L1980.58 1212.83 L1981.17 1212.83 L1981.75 1212.83 L1982.34 1212.83 L1982.93 1212.83 L1983.51 1212.83 L1984.1 1212.83 L1984.69 1212.83 L1985.27 1212.83 L1985.86 1212.83 L1986.45 1212.83 L1987.03 1212.83 L1987.62 1212.83 L1988.2 1212.83 L1988.79 1212.83 L1989.38 1212.83 L1989.96 1212.83 L1990.55 1212.83 L1991.14 1212.83 L1991.72 1212.83 L1992.31 1212.83 L1992.9 1212.83 L1993.48 1212.83 L1994.07 1212.83 L1994.65 1212.83 L1995.24 1212.83 L1995.83 1212.83 L1996.41 1212.83 L1997 1212.83 L1997.59 1212.83 L1998.17 1212.83 L1998.76 1212.83 L1999.35 1212.83 L1999.93 1212.83 L2000.52 1212.83 L2001.11 1212.83 L2001.69 1212.83 L2002.28 1212.83 L2002.86 1212.83 L2003.45 1212.83 L2004.04 1212.83 L2004.62 1212.83 L2005.21 1212.83 L2005.8 1212.83 L2006.38 1212.83 L2006.97 1212.83 L2007.56 1212.83 L2008.14 1212.83 L2008.73 1212.83 L2009.32 1212.83 L2009.9 1212.83 L2010.49 1212.83 L2011.07 1212.83 L2011.66 1212.83 L2012.25 1212.83 L2012.83 1212.83 L2013.42 1212.83 L2014.01 1212.83 L2014.59 1212.83 L2015.18 1212.83 L2015.77 1212.83 L2016.35 1212.83 L2016.94 1212.83 L2017.53 1212.83 L2018.11 1212.83 L2018.7 1212.83 L2019.28 1212.83 L2019.87 1212.83 L2020.46 1212.83 L2021.04 1212.83 L2021.63 1212.83 L2022.22 1212.83 L2022.8 1212.83 L2023.39 1212.83 L2023.98 1212.83 L2024.56 1212.83 L2025.15 1212.83 L2025.73 1212.83 L2026.32 1212.83 L2026.91 1212.83 L2027.49 1212.83 L2028.08 1212.83 L2028.67 1212.83 L2029.25 1212.83 L2029.84 1212.83 L2030.43 1212.83 L2031.01 1212.83 L2031.6 1212.83 L2032.19 1212.83 L2032.77 1212.83 L2033.36 1212.83 L2033.94 1212.83 L2034.53 1212.83 L2035.12 1212.83 L2035.7 1212.83 L2036.29 1212.83 L2036.88 1212.83 L2037.46 1212.83 L2038.05 1212.83 L2038.64 1212.83 L2039.22 1212.83 L2039.81 1212.83 L2040.4 1212.83 L2040.98 1212.83 L2041.57 1212.83 L2042.15 1212.83 L2042.74 1212.83 L2043.33 1212.83 L2043.91 1212.83 L2044.5 1212.83 L2045.09 1212.83 L2045.67 1212.83 L2046.26 1212.83 L2046.85 1212.83 L2047.43 1212.83 L2048.02 1212.83 L2048.6 1212.83 L2049.19 1212.83 L2049.78 1212.83 L2050.36 1212.83 L2050.95 1212.83 L2051.54 1212.83 L2052.12 1212.83 L2052.71 1212.83 L2053.3 1212.83 L2053.88 1212.83 L2054.47 1212.83 L2055.06 1212.83 L2055.64 1212.83 L2056.23 1212.83 L2056.81 1212.83 L2057.4 1212.83 L2057.99 1212.83 L2058.57 1212.83 L2059.16 1212.83 L2059.75 1212.83 L2060.33 1212.83 L2060.92 1212.83 L2061.51 1212.83 L2062.09 1212.83 L2062.68 1212.83 L2063.27 1212.83 L2063.85 1212.83 L2064.44 1212.83 L2065.02 1212.83 L2065.61 1212.83 L2066.2 1212.83 L2066.78 1212.83 L2067.37 1212.83 L2067.96 1212.83 L2068.54 1212.83 L2069.13 1212.83 L2069.72 1212.83 L2070.3 1212.83 L2070.89 1212.83 L2071.48 1212.83 L2072.06 1212.83 L2072.65 1212.83 L2073.23 1212.83 L2073.82 1212.83 L2074.41 1212.83 L2074.99 1212.83 L2075.58 1212.83 L2076.17 1212.83 L2076.75 1212.83 L2077.34 1212.83 L2077.93 1212.83 L2078.51 1212.83 L2079.1 1212.83 L2079.68 1212.83 L2080.27 1212.83 L2080.86 1212.83 L2081.44 1212.83 L2082.03 1212.83 L2082.62 1212.83 L2083.2 1212.83 L2083.79 1212.83 L2084.38 1212.83 L2084.96 1212.83 L2085.55 1212.83 L2086.14 1212.83 L2086.72 1212.83 L2087.31 1212.83 L2087.89 1212.83 L2088.48 1212.83 L2089.07 1212.83 L2089.65 1212.83 L2090.24 1212.83 L2090.83 1212.83 L2091.41 1212.83 L2092 1212.83 L2092.59 1212.83 L2093.17 1212.83 L2093.76 1212.83 L2094.35 1212.83 L2094.93 1212.83 L2095.52 1212.83 L2096.1 1212.83 L2096.69 1212.83 L2097.28 1212.83 L2097.86 1212.83 L2098.45 1212.83 L2099.04 1212.83 L2099.62 1212.83 L2100.21 1212.83 L2100.8 1212.83 L2101.38 1212.83 L2101.97 1212.83 L2102.55 1212.83 L2103.14 1212.83 L2103.73 1212.83 L2104.31 1212.83 L2104.9 1212.83 L2105.49 1212.83 L2106.07 1212.83 L2106.66 1212.83 L2107.25 1212.83 L2107.83 1212.83 L2108.42 1212.83 L2109.01 1212.83 L2109.59 1212.83 L2110.18 1212.83 L2110.76 1212.83 L2111.35 1212.83 L2111.94 1212.83 L2112.52 1212.83 L2113.11 1212.83 L2113.7 1212.83 L2114.28 1212.83 L2114.87 1212.83 L2115.46 1212.83 L2116.04 1212.83 L2116.63 1212.83 L2117.22 1212.83 L2117.8 1212.83 L2118.39 1212.83 L2118.97 1212.83 L2119.56 1212.83 L2120.15 1212.83 L2120.73 1212.83 L2121.32 1212.83 L2121.91 1212.83 L2122.49 1212.83 L2123.08 1212.83 L2123.67 1212.83 L2124.25 1212.83 L2124.84 1212.83 L2125.42 1212.83 L2126.01 1212.83 L2126.6 1212.83 L2127.18 1212.83 L2127.77 1212.83 L2128.36 1212.83 L2128.94 1212.83 L2129.53 1212.83 L2130.12 1212.83 L2130.7 1212.83 L2131.29 1212.83 L2131.88 1212.83 L2132.46 1212.83 L2133.05 1212.83 L2133.63 1212.83 L2134.22 1212.83 L2134.81 1212.83 L2135.39 1212.83 L2135.98 1212.83 L2136.57 1212.83 L2137.15 1212.83 L2137.74 1212.83 L2138.33 1212.83 L2138.91 1212.83 L2139.5 1212.83 L2140.09 1212.83 L2140.67 1212.83 L2141.26 1212.83 L2141.84 1212.83 L2142.43 1212.83 L2143.02 1212.83 L2143.6 1212.83 L2144.19 1212.83 L2144.78 1212.83 L2145.36 1212.83 L2145.95 1212.83 L2146.54 1212.83 L2147.12 1212.83 L2147.71 1212.83 L2148.3 1212.83 L2148.88 1212.83 L2149.47 1212.83 L2150.05 1212.83 L2150.64 1212.83 L2151.23 1212.83 L2151.81 1212.83 L2152.4 1212.83 L2152.99 1212.83 L2153.57 1212.83 L2154.16 1212.83 L2154.75 1212.83 L2155.33 1212.83 L2155.92 1212.83 L2156.5 1212.83 L2157.09 1212.83 L2157.68 1212.83 L2158.26 1212.83 L2158.26 1212.52 L2157.68 1212.52 L2157.09 1212.52 L2156.5 1212.52 L2155.92 1212.52 L2155.33 1212.52 L2154.75 1212.52 L2154.16 1212.52 L2153.57 1212.52 L2152.99 1212.52 L2152.4 1212.52 L2151.81 1212.52 L2151.23 1212.52 L2150.64 1212.52 L2150.05 1212.52 L2149.47 1212.52 L2148.88 1212.52 L2148.3 1212.52 L2147.71 1212.52 L2147.12 1212.52 L2146.54 1212.52 L2145.95 1212.52 L2145.36 1212.52 L2144.78 1212.52 L2144.19 1212.52 L2143.6 1212.52 L2143.02 1212.52 L2142.43 1212.52 L2141.84 1212.52 L2141.26 1212.52 L2140.67 1212.52 L2140.09 1212.52 L2139.5 1212.52 L2138.91 1212.52 L2138.33 1212.52 L2137.74 1212.52 L2137.15 1212.52 L2136.57 1212.52 L2135.98 1212.52 L2135.39 1212.52 L2134.81 1212.52 L2134.22 1212.52 L2133.63 1212.52 L2133.05 1212.52 L2132.46 1212.52 L2131.88 1212.52 L2131.29 1212.52 L2130.7 1212.52 L2130.12 1212.52 L2129.53 1212.52 L2128.94 1212.52 L2128.36 1212.52 L2127.77 1212.52 L2127.18 1212.52 L2126.6 1212.52 L2126.01 1212.52 L2125.42 1212.52 L2124.84 1212.52 L2124.25 1212.52 L2123.67 1212.52 L2123.08 1212.52 L2122.49 1212.52 L2121.91 1212.52 L2121.32 1212.52 L2120.73 1212.52 L2120.15 1212.52 L2119.56 1212.52 L2118.97 1212.52 L2118.39 1212.52 L2117.8 1212.52 L2117.22 1212.52 L2116.63 1212.52 L2116.04 1212.52 L2115.46 1212.52 L2114.87 1212.52 L2114.28 1212.52 L2113.7 1212.52 L2113.11 1212.52 L2112.52 1212.52 L2111.94 1212.52 L2111.35 1212.52 L2110.76 1212.52 L2110.18 1212.52 L2109.59 1212.52 L2109.01 1212.52 L2108.42 1212.52 L2107.83 1212.52 L2107.25 1212.52 L2106.66 1212.52 L2106.07 1212.52 L2105.49 1212.52 L2104.9 1212.52 L2104.31 1212.52 L2103.73 1212.52 L2103.14 1212.52 L2102.55 1212.52 L2101.97 1212.52 L2101.38 1212.52 L2100.8 1212.52 L2100.21 1212.52 L2099.62 1212.52 L2099.04 1212.52 L2098.45 1212.52 L2097.86 1212.52 L2097.28 1212.52 L2096.69 1212.52 L2096.1 1212.52 L2095.52 1212.52 L2094.93 1212.52 L2094.35 1212.52 L2093.76 1212.52 L2093.17 1212.52 L2092.59 1212.52 L2092 1212.52 L2091.41 1212.52 L2090.83 1212.52 L2090.24 1212.52 L2089.65 1212.52 L2089.07 1212.52 L2088.48 1212.52 L2087.89 1212.52 L2087.31 1212.52 L2086.72 1212.52 L2086.14 1212.52 L2085.55 1212.52 L2084.96 1212.52 L2084.38 1212.52 L2083.79 1212.52 L2083.2 1212.52 L2082.62 1212.52 L2082.03 1212.52 L2081.44 1212.52 L2080.86 1212.52 L2080.27 1212.52 L2079.68 1212.52 L2079.1 1212.52 L2078.51 1212.52 L2077.93 1212.52 L2077.34 1212.52 L2076.75 1212.52 L2076.17 1212.52 L2075.58 1212.52 L2074.99 1212.52 L2074.41 1212.52 L2073.82 1212.52 L2073.23 1212.52 L2072.65 1212.52 L2072.06 1212.52 L2071.48 1212.52 L2070.89 1212.52 L2070.3 1212.52 L2069.72 1212.52 L2069.13 1212.52 L2068.54 1212.52 L2067.96 1212.52 L2067.37 1212.52 L2066.78 1212.52 L2066.2 1212.52 L2065.61 1212.52 L2065.02 1212.52 L2064.44 1212.52 L2063.85 1212.52 L2063.27 1212.52 L2062.68 1212.52 L2062.09 1212.52 L2061.51 1212.52 L2060.92 1212.52 L2060.33 1212.52 L2059.75 1212.52 L2059.16 1212.52 L2058.57 1212.52 L2057.99 1212.52 L2057.4 1212.52 L2056.81 1212.52 L2056.23 1212.52 L2055.64 1212.52 L2055.06 1212.52 L2054.47 1212.52 L2053.88 1212.52 L2053.3 1212.52 L2052.71 1212.52 L2052.12 1212.52 L2051.54 1212.52 L2050.95 1212.52 L2050.36 1212.52 L2049.78 1212.52 L2049.19 1212.52 L2048.6 1212.52 L2048.02 1212.52 L2047.43 1212.52 L2046.85 1212.52 L2046.26 1212.52 L2045.67 1212.52 L2045.09 1212.52 L2044.5 1212.52 L2043.91 1212.52 L2043.33 1212.52 L2042.74 1212.52 L2042.15 1212.52 L2041.57 1212.52 L2040.98 1212.52 L2040.4 1212.52 L2039.81 1212.52 L2039.22 1212.52 L2038.64 1212.52 L2038.05 1212.52 L2037.46 1212.52 L2036.88 1212.52 L2036.29 1212.52 L2035.7 1212.52 L2035.12 1212.52 L2034.53 1212.52 L2033.94 1212.52 L2033.36 1212.52 L2032.77 1212.52 L2032.19 1212.52 L2031.6 1212.52 L2031.01 1212.52 L2030.43 1212.52 L2029.84 1212.52 L2029.25 1212.52 L2028.67 1212.52 L2028.08 1212.52 L2027.49 1212.52 L2026.91 1212.52 L2026.32 1212.52 L2025.73 1212.52 L2025.15 1212.52 L2024.56 1212.52 L2023.98 1212.52 L2023.39 1212.52 L2022.8 1212.52 L2022.22 1212.52 L2021.63 1212.52 L2021.04 1212.52 L2020.46 1212.52 L2019.87 1212.52 L2019.28 1212.52 L2018.7 1212.52 L2018.11 1212.52 L2017.53 1212.52 L2016.94 1212.52 L2016.35 1212.52 L2015.77 1212.52 L2015.18 1212.52 L2014.59 1212.52 L2014.01 1212.52 L2013.42 1212.52 L2012.83 1212.52 L2012.25 1212.52 L2011.66 1212.52 L2011.07 1212.52 L2010.49 1212.52 L2009.9 1212.52 L2009.32 1212.52 L2008.73 1212.52 L2008.14 1212.52 L2007.56 1212.52 L2006.97 1212.52 L2006.38 1212.52 L2005.8 1212.52 L2005.21 1212.52 L2004.62 1212.52 L2004.04 1212.52 L2003.45 1212.52 L2002.86 1212.52 L2002.28 1212.52 L2001.69 1212.52 L2001.11 1212.52 L2000.52 1212.52 L1999.93 1212.52 L1999.35 1212.52 L1998.76 1212.52 L1998.17 1212.52 L1997.59 1212.52 L1997 1212.52 L1996.41 1212.52 L1995.83 1212.52 L1995.24 1212.52 L1994.65 1212.52 L1994.07 1212.52 L1993.48 1212.52 L1992.9 1212.52 L1992.31 1212.52 L1991.72 1212.52 L1991.14 1212.52 L1990.55 1212.52 L1989.96 1212.52 L1989.38 1212.52 L1988.79 1212.52 L1988.2 1212.52 L1987.62 1212.52 L1987.03 1212.52 L1986.45 1212.52 L1985.86 1212.52 L1985.27 1212.52 L1984.69 1212.52 L1984.1 1212.52 L1983.51 1212.52 L1982.93 1212.52 L1982.34 1212.52 L1981.75 1212.52 L1981.17 1212.52 L1980.58 1212.52 L1979.99 1212.52 L1979.41 1212.52 L1978.82 1212.52 L1978.24 1212.52 L1977.65 1212.52 L1977.06 1212.52 L1976.48 1212.52 L1975.89 1212.52 L1975.3 1212.52 L1974.72 1212.52 L1974.13 1212.52 L1973.54 1212.52 L1972.96 1212.52 L1972.37 1212.52 L1971.78 1212.52 L1971.2 1212.52 L1970.61 1212.52 L1970.03 1212.52 L1969.44 1212.52 L1968.85 1212.52 L1968.27 1212.52 L1967.68 1212.52 L1967.09 1212.52 L1966.51 1212.52 L1965.92 1212.52 L1965.33 1212.52 L1964.75 1212.52 L1964.16 1212.52 L1963.58 1212.52 L1962.99 1212.52 L1962.4 1212.52 L1961.82 1212.52 L1961.23 1212.52 L1960.64 1212.52 L1960.06 1212.52 L1959.47 1212.52 L1958.88 1212.52 L1958.3 1212.52 L1957.71 1212.52 L1957.12 1212.52 L1956.54 1212.52 L1955.95 1212.52 L1955.37 1212.52 L1954.78 1212.52 L1954.19 1212.52 L1953.61 1212.52 L1953.02 1212.52 L1952.43 1212.52 L1951.85 1212.52 L1951.26 1212.52 L1950.67 1212.52 L1950.09 1212.52 L1949.5 1212.52 L1948.91 1212.52 L1948.33 1212.52 L1947.74 1212.52 L1947.16 1212.52 L1946.57 1212.52 L1945.98 1212.52 L1945.4 1212.52 L1944.81 1212.52 L1944.22 1212.52 L1943.64 1212.52 L1943.05 1212.52 L1942.46 1212.52 L1941.88 1212.52 L1941.29 1212.52 L1940.71 1212.52 L1940.12 1212.52 L1939.53 1212.52 L1938.95 1212.52 L1938.36 1212.52 L1937.77 1212.52 L1937.19 1212.52 L1936.6 1212.52 L1936.01 1212.52 L1935.43 1212.52 L1934.84 1212.52 L1934.25 1212.52 L1933.67 1212.52 L1933.08 1212.52 L1932.5 1212.52 L1931.91 1212.52 L1931.32 1212.52 L1930.74 1212.52 L1930.15 1212.52 L1929.56 1212.52 L1928.98 1212.52 L1928.39 1212.52 L1927.8 1212.52 L1927.22 1212.52 L1926.63 1212.52 L1926.04 1212.52 L1925.46 1212.52 L1924.87 1212.52 L1924.29 1212.52 L1923.7 1212.52 L1923.11 1212.52 L1922.53 1212.52 L1921.94 1212.52 L1921.35 1212.52 L1920.77 1212.52 L1920.18 1212.52 L1919.59 1212.52 L1919.01 1212.52 L1918.42 1212.52 L1917.83 1212.52 L1917.25 1212.52 L1916.66 1212.52 L1916.08 1212.52 L1915.49 1212.52 L1914.9 1212.52 L1914.32 1212.52 L1913.73 1212.52 L1913.14 1212.52 L1912.56 1212.52 L1911.97 1212.52 L1911.38 1212.52 L1910.8 1212.52 L1910.21 1212.52 L1909.63 1212.52 L1909.04 1212.52 L1908.45 1212.52 L1907.87 1212.52 L1907.28 1212.52 L1906.69 1212.52 L1906.11 1212.52 L1905.52 1212.52 L1904.93 1212.52 L1904.35 1212.52 L1903.76 1212.52 L1903.17 1212.52 L1902.59 1212.52 L1902 1212.52 L1901.42 1212.52 L1900.83 1212.52 L1900.24 1212.52 L1899.66 1212.52 L1899.07 1212.52 L1898.48 1212.52 L1897.9 1212.52 L1897.31 1212.52 L1896.72 1212.52 L1896.14 1212.52 L1895.55 1212.52 L1894.96 1212.52 L1894.38 1212.52 L1893.79 1212.52 L1893.21 1212.52 L1892.62 1212.52 L1892.03 1212.52 L1891.45 1212.52 L1890.86 1212.52 L1890.27 1212.52 L1889.69 1212.52 L1889.1 1212.52 L1888.51 1212.52 L1887.93 1212.52 L1887.34 1212.52 L1886.76 1212.52 L1886.17 1212.52 L1885.58 1212.52 L1885 1212.52 L1884.41 1212.52 L1883.82 1212.52 L1883.24 1212.52 L1882.65 1212.52 L1882.06 1212.52 L1881.48 1212.52 L1880.89 1212.52 L1880.3 1212.52 L1879.72 1212.52 L1879.13 1212.52 L1878.55 1212.52 L1877.96 1212.52 L1877.37 1212.52 L1876.79 1212.52 L1876.2 1212.52 L1875.61 1212.52 L1875.03 1212.52 L1874.44 1212.52 L1873.85 1212.52 L1873.27 1212.52 L1872.68 1212.52 L1872.09 1212.52 L1871.51 1212.52 L1870.92 1212.52 L1870.34 1212.52 L1869.75 1212.52 L1869.16 1212.52 L1868.58 1212.52 L1867.99 1212.52 L1867.4 1212.52 L1866.82 1212.52 L1866.23 1212.52 L1865.64 1212.52 L1865.06 1212.52 L1864.47 1212.52 L1863.88 1212.52 L1863.3 1212.52 L1862.71 1212.52 L1862.13 1212.52 L1861.54 1212.52 L1860.95 1212.52 L1860.37 1212.52 L1859.78 1212.52 L1859.19 1212.52 L1858.61 1212.52 L1858.02 1212.52 L1857.43 1212.52 L1856.85 1212.52 L1856.26 1212.52 L1855.68 1212.52 L1855.09 1212.52 L1854.5 1212.52 L1853.92 1212.52 L1853.33 1212.52 L1852.74 1212.52 L1852.16 1212.52 L1851.57 1212.52 L1850.98 1212.52 L1850.4 1212.52 L1849.81 1212.52 L1849.22 1212.52 L1848.64 1212.52 L1848.05 1212.52 L1847.47 1212.52 L1846.88 1212.52 L1846.29 1212.52 L1845.71 1212.52 L1845.12 1212.52 L1844.53 1212.52 L1843.95 1212.52 L1843.36 1212.52 L1842.77 1212.52 L1842.19 1212.52 L1841.6 1212.52 L1841.01 1212.52 L1840.43 1212.52 L1839.84 1212.52 L1839.26 1212.52 L1838.67 1212.52 L1838.08 1212.52 L1837.5 1212.52 L1836.91 1212.52 L1836.32 1212.52 L1835.74 1212.52 L1835.15 1212.52 L1834.56 1212.52 L1833.98 1212.52 L1833.39 1212.52 L1832.81 1212.52 L1832.22 1212.52 L1831.63 1212.52 L1831.05 1212.52 L1830.46 1212.52 L1829.87 1212.52 L1829.29 1212.52 L1828.7 1212.52 L1828.11 1212.52 L1827.53 1212.52 L1826.94 1212.52 L1826.35 1212.52 L1825.77 1212.52 L1825.18 1212.52 L1824.6 1212.52 L1824.01 1212.52 L1823.42 1212.52 L1822.84 1212.52 L1822.25 1212.52 L1821.66 1212.52 L1821.08 1212.52 L1820.49 1212.52 L1819.9 1212.52 L1819.32 1212.52 L1818.73 1212.52 L1818.14 1212.52 L1817.56 1212.52 L1816.97 1212.52 L1816.39 1212.52 L1815.8 1212.52 L1815.21 1212.52 L1814.63 1212.52 L1814.04 1212.52 L1813.45 1212.52 L1812.87 1212.52 L1812.28 1212.52 L1811.69 1212.52 L1811.11 1212.52 L1810.52 1212.52 L1809.94 1212.52 L1809.35 1212.52 L1808.76 1212.52 L1808.18 1212.52 L1807.59 1212.52 L1807 1212.52 L1806.42 1212.52 L1805.83 1212.52 L1805.24 1212.52 L1804.66 1212.52 L1804.07 1212.52 L1803.48 1212.52 L1802.9 1212.52 L1802.31 1212.52 L1801.73 1212.52 L1801.14 1212.52 L1800.55 1212.52 L1799.97 1212.52 L1799.38 1212.52 L1798.79 1212.52 L1798.21 1212.52 L1797.62 1212.52 L1797.03 1212.52 L1796.45 1212.52 L1795.86 1212.52 L1795.27 1212.52 L1794.69 1212.52 L1794.1 1212.52 L1793.52 1212.52 L1792.93 1212.52 L1792.34 1212.52 L1791.76 1212.52 L1791.17 1212.52 L1790.58 1212.52 L1790 1212.52 L1789.41 1212.52 L1788.82 1212.52 L1788.24 1212.52 L1787.65 1212.52 L1787.06 1212.52 L1786.48 1212.52 L1785.89 1212.52 L1785.31 1212.52 L1784.72 1212.52 L1784.13 1212.52 L1783.55 1212.52 L1782.96 1212.52 L1782.37 1212.52 L1781.79 1212.52 L1781.2 1212.52 L1780.61 1212.52 L1780.03 1212.52 L1779.44 1212.52 L1778.86 1212.52 L1778.27 1212.52 L1777.68 1212.52 L1777.1 1212.52 L1776.51 1212.52 L1775.92 1212.52 L1775.34 1212.52 L1774.75 1212.52 L1774.16 1212.52 L1773.58 1212.52 L1772.99 1212.52 L1772.4 1212.52 L1771.82 1212.52 L1771.23 1212.52 L1770.65 1212.52 L1770.06 1212.52 L1769.47 1212.52 L1768.89 1212.52 L1768.3 1212.52 L1767.71 1212.52 L1767.13 1212.52 L1766.54 1212.52 L1765.95 1212.52 L1765.37 1212.52 L1764.78 1212.52 L1764.19 1212.52 L1763.61 1212.52 L1763.02 1212.52 L1762.44 1212.52 L1761.85 1212.52 L1761.26 1212.52 L1760.68 1212.52 L1760.09 1212.52 L1759.5 1212.52 L1758.92 1212.52 L1758.33 1212.52 L1757.74 1212.52 L1757.16 1212.52 L1756.57 1212.52 L1755.99 1212.52 L1755.4 1212.52 L1754.81 1212.52 L1754.23 1212.52 L1753.64 1212.52 L1753.05 1212.52 L1752.47 1212.52 L1751.88 1212.52 L1751.29 1212.52 L1750.71 1212.52 L1750.12 1212.52 L1749.53 1212.52 L1748.95 1212.52 L1748.36 1212.52 L1747.78 1212.52 L1747.19 1212.52 L1746.6 1212.52 L1746.02 1212.52 L1745.43 1212.52 L1744.84 1212.52 L1744.26 1212.52 L1743.67 1212.52 L1743.08 1212.52 L1742.5 1212.52 L1741.91 1212.52 L1741.32 1212.52 L1740.74 1212.52 L1740.15 1212.52 L1739.57 1212.52 L1738.98 1212.52 L1738.39 1212.52 L1737.81 1212.52 L1737.22 1212.52 L1736.63 1212.52 L1736.05 1212.52 L1735.46 1212.52 L1734.87 1212.52 L1734.29 1212.52 L1733.7 1212.52 L1733.11 1212.52 L1732.53 1212.52 L1731.94 1212.52 L1731.36 1212.52 L1730.77 1212.52 L1730.18 1212.52 L1729.6 1212.52 L1729.01 1212.52 L1728.42 1212.52 L1727.84 1212.52 L1727.25 1212.52 L1726.66 1212.52 L1726.08 1212.52 L1725.49 1212.52 L1724.91 1212.52 L1724.32 1212.52 L1723.73 1212.52 L1723.15 1212.52 L1722.56 1212.52 L1721.97 1212.52 L1721.39 1212.52 L1720.8 1212.52 L1720.21 1212.52 L1719.63 1212.52 L1719.04 1212.52 L1718.45 1212.52 L1717.87 1212.52 L1717.28 1212.52 L1716.7 1212.52 L1716.11 1212.52 L1715.52 1212.52 L1714.94 1212.52 L1714.35 1212.52 L1713.76 1212.52 L1713.18 1212.52 L1712.59 1212.52 L1712 1212.52 L1711.42 1212.52 L1710.83 1212.52 L1710.24 1212.52 L1709.66 1212.52 L1709.07 1212.52 L1708.49 1212.52 L1707.9 1212.52 L1707.31 1212.52 L1706.73 1212.52 L1706.14 1212.52 L1705.55 1212.52 L1704.97 1212.52 L1704.38 1212.52 L1703.79 1212.52 L1703.21 1212.52 L1702.62 1212.52 L1702.04 1212.52 L1701.45 1212.52 L1700.86 1212.52 L1700.28 1212.52 L1699.69 1212.52 L1699.1 1212.52 L1698.52 1212.52 L1697.93 1212.52 L1697.34 1212.52 L1696.76 1212.52 L1696.17 1212.52 L1695.58 1212.52 L1695 1212.52 L1694.41 1212.52 L1693.83 1212.52 L1693.24 1212.52 L1692.65 1212.52 L1692.07 1212.52 L1691.48 1212.52 L1690.89 1212.52 L1690.31 1212.52 L1689.72 1212.52 L1689.13 1212.52 L1688.55 1212.52 L1687.96 1212.52 L1687.37 1212.52 L1686.79 1212.52 L1686.2 1212.52 L1685.62 1212.52 L1685.03 1212.52 L1684.44 1212.52 L1683.86 1212.52 L1683.27 1212.52 L1682.68 1212.52 L1682.1 1212.52 L1681.51 1212.52 L1680.92 1212.52 L1680.34 1212.52 L1679.75 1212.52 L1679.17 1212.52 L1678.58 1212.52 L1677.99 1212.52 L1677.41 1212.52 L1676.82 1212.52 L1676.23 1212.52 L1675.65 1212.52 L1675.06 1212.52 L1674.47 1212.52 L1673.89 1212.52 L1673.3 1212.52 L1672.71 1212.52 L1672.13 1212.52 L1671.54 1212.52 L1670.96 1212.52 L1670.37 1212.52 L1669.78 1212.52 L1669.2 1212.52 L1668.61 1212.52 L1668.02 1212.52 L1667.44 1212.52 L1666.85 1212.52 L1666.26 1212.52 L1665.68 1212.52 L1665.09 1212.52 L1664.5 1212.52 L1663.92 1212.52 L1663.33 1212.52 L1662.75 1212.52 L1662.16 1212.52 L1661.57 1212.52 L1660.99 1212.52 L1660.4 1212.52 L1659.81 1212.52 L1659.23 1212.52 L1658.64 1212.52 L1658.05 1212.52 L1657.47 1212.52 L1656.88 1212.52 L1656.29 1212.52 L1655.71 1212.52 L1655.12 1212.52 L1654.54 1212.52 L1653.95 1212.52 L1653.36 1212.52 L1652.78 1212.52 L1652.19 1212.52 L1651.6 1212.52 L1651.02 1212.52 L1650.43 1212.52 L1649.84 1212.52 L1649.26 1212.52 L1648.67 1212.52 L1648.09 1212.52 L1647.5 1212.52 L1646.91 1212.52 L1646.33 1212.52 L1645.74 1212.52 L1645.15 1212.52 L1644.57 1212.52 L1643.98 1212.52 L1643.39 1212.52 L1642.81 1212.52 L1642.22 1212.52 L1641.63 1212.52 L1641.05 1212.52 L1640.46 1212.52 L1639.88 1212.52 L1639.29 1212.52 L1638.7 1212.52 L1638.12 1212.52 L1637.53 1212.52 L1636.94 1212.52 L1636.36 1212.52 L1635.77 1212.52 L1635.18 1212.52 L1634.6 1212.52 L1634.01 1212.52 L1633.42 1212.52 L1632.84 1212.52 L1632.25 1212.52 L1631.67 1212.52 L1631.08 1212.52 L1630.49 1212.52 L1629.91 1212.52 L1629.32 1212.52 L1628.73 1212.52 L1628.15 1212.52 L1627.56 1212.52 L1626.97 1212.52 L1626.39 1212.52 L1625.8 1212.52 L1625.22 1212.52 L1624.63 1212.52 L1624.04 1212.52 L1623.46 1212.52 L1622.87 1212.52 L1622.28 1212.52 L1621.7 1212.52 L1621.11 1212.52 L1620.52 1212.52 L1619.94 1212.52 L1619.35 1212.52 L1618.76 1212.52 L1618.18 1212.52 L1617.59 1212.52 L1617.01 1212.52 L1616.42 1212.52 L1615.83 1212.52 L1615.25 1212.52 L1614.66 1212.52 L1614.07 1212.52 L1613.49 1212.52 L1612.9 1212.52 L1612.31 1212.52 L1611.73 1212.52 L1611.14 1212.52 L1610.55 1212.52 L1609.97 1212.52 L1609.38 1212.52 L1608.8 1212.52 L1608.21 1212.52 L1607.62 1212.52 L1607.04 1212.52 L1606.45 1212.52 L1605.86 1212.52 L1605.28 1212.52 L1604.69 1212.52 L1604.1 1212.52 L1603.52 1212.52 L1602.93 1212.52 L1602.34 1212.52 L1601.76 1212.52 L1601.17 1212.52 L1600.59 1212.52 L1600 1212.52 L1599.41 1212.52 L1598.83 1212.52 L1598.24 1212.52 L1597.65 1212.52 L1597.07 1212.52 L1596.48 1212.52 L1595.89 1212.52 L1595.31 1212.52 L1594.72 1212.52 L1594.14 1212.52 L1593.55 1212.52 L1592.96 1212.52 L1592.38 1212.52 L1591.79 1212.52 L1591.2 1212.52 L1590.62 1212.52 L1590.03 1212.52 L1589.44 1212.52 L1588.86 1212.52 L1588.27 1212.52 L1587.68 1212.52 L1587.1 1212.52 L1586.51 1212.52 L1585.93 1212.52 L1585.34 1212.52 L1584.75 1212.52 L1584.17 1212.52 L1583.58 1212.52 L1582.99 1212.52 L1582.41 1212.52 L1581.82 1212.52 L1581.23 1212.52 L1580.65 1212.52 L1580.06 1212.52 L1579.47 1212.52 L1578.89 1212.52 L1578.3 1212.52 L1577.72 1212.52 L1577.13 1212.52 L1576.54 1212.52 L1575.96 1212.52 L1575.37 1212.52 L1574.78 1212.52 L1574.2 1212.52 L1573.61 1212.52 L1573.02 1212.52 L1572.44 1212.52 L1571.85 1212.52 L1571.27 1212.52 L1570.68 1212.52 L1570.09 1212.52 L1569.51 1212.52 L1568.92 1212.52 L1568.33 1212.52 L1567.75 1212.52 L1567.16 1212.52 L1566.57 1212.52 L1565.99 1212.52 L1565.4 1212.52 L1564.81 1212.52 L1564.23 1212.52 L1563.64 1212.52 L1563.06 1212.52 L1562.47 1212.52 L1561.88 1212.52 L1561.3 1212.52 L1560.71 1212.52 L1560.12 1212.52 L1559.54 1212.52 L1558.95 1212.52 L1558.36 1212.52 L1557.78 1212.52 L1557.19 1212.52 L1556.6 1212.52 L1556.02 1212.52 L1555.43 1212.52 L1554.85 1212.52 L1554.26 1212.52 L1553.67 1212.52 L1553.09 1212.52 L1552.5 1212.52 L1551.91 1212.52 L1551.33 1212.52 L1550.74 1212.52 L1550.15 1212.52 L1549.57 1212.52 L1548.98 1212.52 L1548.4 1212.52 L1547.81 1212.52 L1547.22 1212.52 L1546.64 1212.52 L1546.05 1212.52 L1545.46 1212.52 L1544.88 1212.52 L1544.29 1212.52 L1543.7 1212.52 L1543.12 1212.52 L1542.53 1212.52 L1541.94 1212.52 L1541.36 1212.52 L1540.77 1212.52 L1540.19 1212.52 L1539.6 1212.52 L1539.01 1212.52 L1538.43 1212.52 L1537.84 1212.52 L1537.25 1212.52 L1536.67 1212.52 L1536.08 1212.52 L1535.49 1212.52 L1534.91 1212.52 L1534.32 1212.52 L1533.73 1212.52 L1533.15 1212.52 L1532.56 1212.52 L1531.98 1212.52 L1531.39 1212.52 L1530.8 1212.52 L1530.22 1212.52 L1529.63 1212.52 L1529.04 1212.52 L1528.46 1212.52 L1527.87 1212.52 L1527.28 1212.52 L1526.7 1212.52 L1526.11 1212.52 L1525.52 1212.52 L1524.94 1212.52 L1524.35 1212.52 L1523.77 1212.52 L1523.18 1212.52 L1522.59 1212.52 L1522.01 1212.52 L1521.42 1212.52 L1520.83 1212.52 L1520.25 1212.52 L1519.66 1212.52 L1519.07 1212.52 L1518.49 1212.52 L1517.9 1212.52 L1517.32 1212.52 L1516.73 1212.52 L1516.14 1212.52 L1515.56 1212.52 L1514.97 1212.52 L1514.38 1212.52 L1513.8 1212.52 L1513.21 1212.52 L1512.62 1212.52 L1512.04 1212.52 L1511.45 1212.52 L1510.86 1212.52 L1510.28 1212.52 L1509.69 1212.52 L1509.11 1212.52 L1508.52 1212.52 L1507.93 1212.52 L1507.35 1212.52 L1506.76 1212.52 L1506.17 1212.52 L1505.59 1212.52 L1505 1212.52 L1504.41 1212.52 L1503.83 1212.52 L1503.24 1212.52 L1502.65 1212.52 L1502.07 1212.52 L1501.48 1212.52 L1500.9 1212.52 L1500.31 1212.52 L1499.72 1212.52 L1499.14 1212.52 L1498.55 1212.52 L1497.96 1212.52 L1497.38 1212.52 L1496.79 1212.52 L1496.2 1212.52 L1495.62 1212.52 L1495.03 1212.52 L1494.45 1212.52 L1493.86 1212.52 L1493.27 1212.52 L1492.69 1212.52 L1492.1 1212.52 L1491.51 1212.52 L1490.93 1212.52 L1490.34 1212.52 L1489.75 1212.52 L1489.17 1212.52 L1488.58 1212.52 L1487.99 1212.52 L1487.41 1212.52 L1486.82 1212.52 L1486.24 1212.52 L1485.65 1212.52 L1485.06 1212.52 L1484.48 1212.52 L1483.89 1212.52 L1483.3 1212.52 L1482.72 1212.52 L1482.13 1212.52 L1481.54 1212.52 L1480.96 1212.52 L1480.37 1212.52 L1479.78 1212.52 L1479.2 1212.52 L1478.61 1212.52 L1478.03 1212.52 L1477.44 1212.52 L1476.85 1212.52 L1476.27 1212.52 L1475.68 1212.52 L1475.09 1212.52 L1474.51 1212.52 L1473.92 1212.52 L1473.33 1212.52 L1472.75 1212.52 L1472.16 1212.52 L1471.57 1212.52 L1470.99 1212.52 L1470.4 1212.52 L1469.82 1212.52 L1469.23 1212.52 L1468.64 1212.52 L1468.06 1212.52 L1467.47 1212.52 L1466.88 1212.52 L1466.3 1212.52 L1465.71 1212.52 L1465.12 1212.52 L1464.54 1212.52 L1463.95 1212.52 L1463.37 1212.52 L1462.78 1212.52 L1462.19 1212.52 L1461.61 1212.52 L1461.02 1212.52 L1460.43 1212.52 L1459.85 1212.52 L1459.26 1212.52 L1458.67 1212.52 L1458.09 1212.52 L1457.5 1212.52 L1456.91 1212.52 L1456.33 1212.52 L1455.74 1212.52 L1455.16 1212.52 L1454.57 1212.52 L1453.98 1212.52 L1453.4 1212.52 L1452.81 1212.52 L1452.22 1212.52 L1451.64 1212.52 L1451.05 1212.52 L1450.46 1212.52 L1449.88 1212.52 L1449.29 1212.52 L1448.7 1212.52 L1448.12 1212.52 L1447.53 1212.52 L1446.95 1212.52 L1446.36 1212.52 L1445.77 1212.52 L1445.19 1212.52 L1444.6 1212.52 L1444.01 1212.52 L1443.43 1212.52 L1442.84 1212.52 L1442.25 1212.52 L1441.67 1212.52 L1441.08 1212.52 L1440.5 1212.52 L1439.91 1212.52 L1439.32 1212.52 L1438.74 1212.52 L1438.15 1212.52 L1437.56 1212.52 L1436.98 1212.52 L1436.39 1212.52 L1435.8 1212.52 L1435.22 1212.52 L1434.63 1212.52 L1434.04 1212.52 L1433.46 1212.52 L1432.87 1212.52 L1432.29 1212.52 L1431.7 1212.52 L1431.11 1212.52 L1430.53 1212.52 L1429.94 1212.52 L1429.35 1212.52 L1428.77 1212.52 L1428.18 1212.52 L1427.59 1212.52 L1427.01 1212.52 L1426.42 1212.52 L1425.83 1212.52 L1425.25 1212.52 L1424.66 1212.52 L1424.08 1212.52 L1423.49 1212.52 L1422.9 1212.52 L1422.32 1212.52 L1421.73 1212.52 L1421.14 1212.52 L1420.56 1212.52 L1419.97 1212.52 L1419.38 1212.52 L1418.8 1212.52 L1418.21 1212.52 L1417.63 1212.52 L1417.04 1212.52 L1416.45 1212.52 L1415.87 1212.52 L1415.28 1212.52 L1414.69 1212.52 L1414.11 1212.52 L1413.52 1212.52 L1412.93 1212.52 L1412.35 1212.52 L1411.76 1212.52 L1411.17 1212.52 L1410.59 1212.52 L1410 1212.52 L1409.42 1212.52 L1408.83 1212.52 L1408.24 1212.52 L1407.66 1212.52 L1407.07 1212.52 L1406.48 1212.52 L1405.9 1212.52 L1405.31 1212.52 L1404.72 1212.52 L1404.14 1212.52 L1403.55 1212.52 L1402.96 1212.52 L1402.38 1212.52 L1401.79 1212.52 L1401.21 1212.52 L1400.62 1212.52 L1400.03 1212.52 L1399.45 1212.52 L1398.86 1212.52 L1398.27 1212.52 L1397.69 1212.52 L1397.1 1212.52 L1396.51 1212.52 L1395.93 1212.52 L1395.34 1212.52 L1394.75 1212.52 L1394.17 1212.52 L1393.58 1212.52 L1393 1212.52 L1392.41 1212.52 L1391.82 1212.52 L1391.24 1212.52 L1390.65 1212.52 L1390.06 1212.52 L1389.48 1212.52 L1388.89 1212.52 L1388.3 1212.52 L1387.72 1212.52 L1387.13 1212.52 L1386.55 1212.52 L1385.96 1212.52 L1385.37 1212.52 L1384.79 1212.52 L1384.2 1212.52 L1383.61 1212.52 L1383.03 1212.52 L1382.44 1212.52 L1381.85 1212.52 L1381.27 1212.52 L1380.68 1212.52 L1380.09 1212.52 L1379.51 1212.52 L1378.92 1212.52 L1378.34 1212.52 L1377.75 1212.52 L1377.16 1212.52 L1376.58 1212.52 L1375.99 1212.52 L1375.4 1212.52 L1374.82 1212.52 L1374.23 1212.52 L1373.64 1212.52 L1373.06 1212.52 L1372.47 1212.52 L1371.88 1212.52 L1371.3 1212.52 L1370.71 1212.52 L1370.13 1212.52 L1369.54 1212.52 L1368.95 1212.52 L1368.37 1212.52 L1367.78 1212.52 L1367.19 1212.52 L1366.61 1212.52 L1366.02 1212.52 L1365.43 1212.52 L1364.85 1212.52 L1364.26 1212.52 L1363.68 1212.52 L1363.09 1212.52 L1362.5 1212.52 L1361.92 1212.52 L1361.33 1212.52 L1360.74 1212.52 L1360.16 1212.52 L1359.57 1212.52 L1358.98 1212.52 L1358.4 1212.52 L1357.81 1212.52 L1357.22 1212.52 L1356.64 1212.52 L1356.05 1212.52 L1355.47 1212.52 L1354.88 1212.52 L1354.29 1212.52 L1353.71 1212.52 L1353.12 1212.52 L1352.53 1212.52 L1351.95 1212.52 L1351.36 1212.52 L1350.77 1212.52 L1350.19 1212.52 L1349.6 1212.52 L1349.01 1212.52 L1348.43 1212.52 L1347.84 1212.52 L1347.26 1212.52 L1346.67 1212.52 L1346.08 1212.52 L1345.5 1212.52 L1344.91 1212.52 L1344.32 1212.52 L1343.74 1212.52 L1343.15 1212.52 L1342.56 1212.52 L1341.98 1212.52 L1341.39 1212.52 L1340.8 1212.52 L1340.22 1212.52 L1339.63 1212.52 L1339.05 1212.52 L1338.46 1212.52 L1337.87 1212.52 L1337.29 1212.52 L1336.7 1212.52 L1336.11 1212.52 L1335.53 1212.52 L1334.94 1212.52 L1334.35 1212.52 L1333.77 1212.52 L1333.18 1212.52 L1332.6 1212.52 L1332.01 1212.52 L1331.42 1212.52 L1330.84 1212.52 L1330.25 1212.52 L1329.66 1212.52 L1329.08 1212.52 L1328.49 1212.52 L1327.9 1212.52 L1327.32 1212.52 L1326.73 1212.52 L1326.14 1212.52 L1325.56 1212.52 L1324.97 1212.52 L1324.39 1212.52 L1323.8 1212.52 L1323.21 1212.52 L1322.63 1212.52 L1322.04 1212.52 L1321.45 1212.52 L1320.87 1212.52 L1320.28 1212.52 L1319.69 1212.52 L1319.11 1212.52 L1318.52 1212.52 L1317.93 1212.52 L1317.35 1212.52 L1316.76 1212.52 L1316.18 1212.52 L1315.59 1212.52 L1315 1212.52 L1314.42 1212.52 L1313.83 1212.52 L1313.24 1212.52 L1312.66 1212.52 L1312.07 1212.52 L1311.48 1212.52 L1310.9 1212.52 L1310.31 1212.52 L1309.73 1212.52 L1309.14 1212.52 L1308.55 1212.52 L1307.97 1212.52 L1307.38 1212.52 L1306.79 1212.52 L1306.21 1212.52 L1305.62 1212.52 L1305.03 1212.52 L1304.45 1212.52 L1303.86 1212.52 L1303.27 1212.52 L1302.69 1212.52 L1302.1 1212.52 L1301.52 1212.52 L1300.93 1212.52 L1300.34 1212.52 L1299.76 1212.52 L1299.17 1212.52 L1298.58 1212.52 L1298 1212.52 L1297.41 1212.52 L1296.82 1212.52 L1296.24 1212.52 L1295.65 1212.52 L1295.06 1212.52 L1294.48 1212.52 L1293.89 1212.52 L1293.31 1212.52 L1292.72 1212.52 L1292.13 1212.52 L1291.55 1212.52 L1290.96 1212.52 L1290.37 1212.52 L1289.79 1212.52 L1289.2 1212.52 L1288.61 1212.52 L1288.03 1212.52 L1287.44 1212.52 L1286.86 1212.52 L1286.27 1212.52 L1285.68 1212.52 L1285.1 1212.52 L1284.51 1212.52 L1283.92 1212.52 L1283.34 1212.52 L1282.75 1212.52 L1282.16 1212.52 L1281.58 1212.52 L1280.99 1212.52 L1280.4 1212.52 L1279.82 1212.52 L1279.23 1212.52 L1278.65 1212.52 L1278.06 1212.52 L1277.47 1212.52 L1276.89 1212.52 L1276.3 1212.52 L1275.71 1212.52 L1275.13 1212.52 L1274.54 1212.52 L1273.95 1212.52 L1273.37 1212.52 L1272.78 1212.52 L1272.19 1212.52 L1271.61 1212.52 L1271.02 1212.52 L1270.44 1212.52 L1269.85 1212.52 L1269.26 1212.52 L1268.68 1212.52 L1268.09 1212.52 L1267.5 1212.52 L1266.92 1212.52 L1266.33 1212.52 L1265.74 1212.52 L1265.16 1212.52 L1264.57 1212.52 L1263.98 1212.52 L1263.4 1212.52 L1262.81 1212.52 L1262.23 1212.52 L1261.64 1212.52 L1261.05 1212.52 L1260.47 1212.52 L1259.88 1212.52 L1259.29 1212.52 L1258.71 1212.52 L1258.12 1212.52 L1257.53 1212.52 L1256.95 1212.52 L1256.36 1212.52 L1255.78 1212.52 L1255.19 1212.52 L1254.6 1212.52 L1254.02 1212.52 L1253.43 1212.52 L1252.84 1212.52 L1252.26 1212.52 L1251.67 1212.52 L1251.08 1212.52 L1250.5 1212.52 L1249.91 1212.52 L1249.32 1212.52 L1248.74 1212.52 L1248.15 1212.52 L1247.57 1212.52 L1246.98 1212.52 L1246.39 1212.52 L1245.81 1212.52 L1245.22 1212.52 L1244.63 1212.52 L1244.05 1212.52 L1243.46 1212.52 L1242.87 1212.52 L1242.29 1212.52 L1241.7 1212.52 L1241.11 1212.52 L1240.53 1212.52 L1239.94 1212.52 L1239.36 1212.52 L1238.77 1212.52 L1238.18 1212.52 L1237.6 1212.52 L1237.01 1212.52 L1236.42 1212.52 L1235.84 1212.52 L1235.25 1212.52 L1234.66 1212.52 L1234.08 1212.52 L1233.49 1212.52 L1232.91 1212.52 L1232.32 1212.52 L1231.73 1212.52 L1231.15 1212.52 L1230.56 1212.52 L1229.97 1212.52 L1229.39 1212.52 L1228.8 1212.52 L1228.21 1212.52 L1227.63 1212.52 L1227.04 1212.52 L1226.45 1212.52 L1225.87 1212.52 L1225.28 1212.52 L1224.7 1212.52 L1224.11 1212.52 L1223.52 1212.52 L1222.94 1212.52 L1222.35 1212.52 L1221.76 1212.52 L1221.18 1212.52 L1220.59 1212.52 L1220 1212.52 L1219.42 1212.52 L1218.83 1212.52 L1218.24 1212.52 L1217.66 1212.52 L1217.07 1212.52 L1216.49 1212.52 L1215.9 1212.52 L1215.31 1212.52 L1214.73 1212.52 L1214.14 1212.52 L1213.55 1212.52 L1212.97 1212.52 L1212.38 1212.52 L1211.79 1212.52 L1211.21 1212.52 L1210.62 1212.52 L1210.03 1212.52 L1209.45 1212.52 L1208.86 1212.52 L1208.28 1212.52 L1207.69 1212.52 L1207.1 1212.52 L1206.52 1212.52 L1205.93 1212.52 L1205.34 1212.52 L1204.76 1212.52 L1204.17 1212.52 L1203.58 1212.52 L1203 1212.52 L1202.41 1212.52 L1201.83 1212.52 L1201.24 1212.52 L1200.65 1212.52 L1200.07 1212.52 L1199.48 1212.52 L1198.89 1212.52 L1198.31 1212.52 L1197.72 1212.52 L1197.13 1212.52 L1196.55 1212.52 L1195.96 1212.52 L1195.37 1212.52 L1194.79 1212.52 L1194.2 1212.52 L1193.62 1212.52 L1193.03 1212.52 L1192.44 1212.52 L1191.86 1212.52 L1191.27 1212.52 L1190.68 1212.52 L1190.1 1212.52 L1189.51 1212.52 L1188.92 1212.52 L1188.34 1212.52 L1187.75 1212.52 L1187.16 1212.52 L1186.58 1212.52 L1185.99 1212.52 L1185.41 1212.52 L1184.82 1212.52 L1184.23 1212.52 L1183.65 1212.52 L1183.06 1212.52 L1182.47 1212.52 L1181.89 1212.52 L1181.3 1212.52 L1180.71 1212.52 L1180.13 1212.52 L1179.54 1212.52 L1178.96 1212.52 L1178.37 1212.52 L1177.78 1212.52 L1177.2 1212.52 L1176.61 1212.52 L1176.02 1212.52 L1175.44 1212.52 L1174.85 1212.52 L1174.26 1212.52 L1173.68 1212.52 L1173.09 1212.52 L1172.5 1212.52 L1171.92 1212.52 L1171.33 1212.52 L1170.75 1212.52 L1170.16 1212.52 L1169.57 1212.52 L1168.99 1212.52 L1168.4 1212.52 L1167.81 1212.52 L1167.23 1212.52 L1166.64 1212.52 L1166.05 1212.52 L1165.47 1212.52 L1164.88 1212.52 L1164.29 1212.52 L1163.71 1212.52 L1163.12 1212.52 L1162.54 1212.52 L1161.95 1212.52 L1161.36 1212.52 L1160.78 1212.52 L1160.19 1212.52 L1159.6 1212.52 L1159.02 1212.52 L1158.43 1212.52 L1157.84 1212.52 L1157.26 1212.52 L1156.67 1212.52 L1156.09 1212.52 L1155.5 1212.52 L1154.91 1212.52 L1154.33 1212.52 L1153.74 1212.52 L1153.15 1212.52 L1152.57 1212.52 L1151.98 1212.52 L1151.39 1212.52 L1150.81 1212.52 L1150.22 1212.52 L1149.63 1212.52 L1149.05 1212.52 L1148.46 1212.52 L1147.88 1212.52 L1147.29 1212.52 L1146.7 1212.52 L1146.12 1212.52 L1145.53 1212.52 L1144.94 1212.52 L1144.36 1212.52 L1143.77 1212.52 L1143.18 1212.52 L1142.6 1212.52 L1142.01 1212.52 L1141.42 1212.52 L1140.84 1212.52 L1140.25 1212.52 L1139.67 1212.52 L1139.08 1212.52 L1138.49 1212.52 L1137.91 1212.52 L1137.32 1212.52 L1136.73 1212.52 L1136.15 1212.52 L1135.56 1212.52 L1134.97 1212.52 L1134.39 1212.52 L1133.8 1212.52 L1133.21 1212.52 L1132.63 1212.52 L1132.04 1212.52 L1131.46 1212.52 L1130.87 1212.52 L1130.28 1212.52 L1129.7 1212.52 L1129.11 1212.52 L1128.52 1212.52 L1127.94 1212.52 L1127.35 1212.52 L1126.76 1212.52 L1126.18 1212.52 L1125.59 1212.52 L1125.01 1212.52 L1124.42 1212.52 L1123.83 1212.52 L1123.25 1212.52 L1122.66 1212.52 L1122.07 1212.52 L1121.49 1212.52 L1120.9 1212.52 L1120.31 1212.52 L1119.73 1212.52 L1119.14 1212.52 L1118.55 1212.52 L1117.97 1212.52 L1117.38 1212.52 L1116.8 1212.52 L1116.21 1212.52 L1115.62 1212.52 L1115.04 1212.52 L1114.45 1212.52 L1113.86 1212.52 L1113.28 1212.52 L1112.69 1212.52 L1112.1 1212.52 L1111.52 1212.52 L1110.93 1212.52 L1110.34 1212.52 L1109.76 1212.52 L1109.17 1212.52 L1108.59 1212.52 L1108 1212.52 L1107.41 1212.52 L1106.83 1212.52 L1106.24 1212.52 L1105.65 1212.52 L1105.07 1212.52 L1104.48 1212.52 L1103.89 1212.52 L1103.31 1212.52 L1102.72 1212.52 L1102.14 1212.52 L1101.55 1212.52 L1100.96 1212.52 L1100.38 1212.52 L1099.79 1212.52 L1099.2 1212.52 L1098.62 1212.52 L1098.03 1212.52 L1097.44 1212.52 L1096.86 1212.52 L1096.27 1212.52 L1095.68 1212.52 L1095.1 1212.52 L1094.51 1212.52 L1093.93 1212.52 L1093.34 1212.52 L1092.75 1212.52 L1092.17 1212.52 L1091.58 1212.52 L1090.99 1212.52 L1090.41 1212.52 L1089.82 1212.52 L1089.23 1212.52 L1088.65 1212.52 L1088.06 1212.52 L1087.47 1212.52 L1086.89 1212.52 L1086.3 1212.52 L1085.72 1212.52 L1085.13 1212.52 L1084.54 1212.52 L1083.96 1212.52 L1083.37 1212.52 L1082.78 1212.52 L1082.2 1212.52 L1081.61 1212.52 L1081.02 1212.52 L1080.44 1212.52 L1079.85 1212.52 L1079.26 1212.52 L1078.68 1212.52 L1078.09 1212.52 L1077.51 1212.52 L1076.92 1212.52 L1076.33 1212.52 L1075.75 1212.52 L1075.16 1212.52 L1074.57 1212.52 L1073.99 1212.52 L1073.4 1212.52 L1072.81 1212.52 L1072.23 1212.52 L1071.64 1212.52 L1071.06 1212.52 L1070.47 1212.52 L1069.88 1212.52 L1069.3 1212.52 L1068.71 1212.52 L1068.12 1212.52 L1067.54 1212.52 L1066.95 1212.52 L1066.36 1212.52 L1065.78 1212.52 L1065.19 1212.52 L1064.6 1212.52 L1064.02 1212.52 L1063.43 1212.52 L1062.85 1212.52 L1062.26 1212.52 L1061.67 1212.52 L1061.09 1212.52 L1060.5 1212.52 L1059.91 1212.52 L1059.33 1212.52 L1058.74 1212.52 L1058.15 1212.52 L1057.57 1212.52 L1056.98 1212.52 L1056.39 1212.52 L1055.81 1212.52 L1055.22 1212.52 L1054.64 1212.52 L1054.05 1212.52 L1053.46 1212.52 L1052.88 1212.52 L1052.29 1212.52 L1051.7 1212.52 L1051.12 1212.52 L1050.53 1212.52 L1049.94 1212.52 L1049.36 1212.52 L1048.77 1212.52 L1048.19 1212.52 L1047.6 1212.52 L1047.01 1212.52 L1046.43 1212.52 L1045.84 1212.52 L1045.25 1212.52 L1044.67 1212.52 L1044.08 1212.52 L1043.49 1212.52 L1042.91 1212.52 L1042.32 1212.52 L1041.73 1212.52 L1041.15 1212.52 L1040.56 1212.52 L1039.98 1212.52 L1039.39 1212.52 L1038.8 1212.52 L1038.22 1212.52 L1037.63 1212.52 L1037.04 1212.52 L1036.46 1212.52 L1035.87 1212.52 L1035.28 1212.52 L1034.7 1212.52 L1034.11 1212.52 L1033.52 1212.52 L1032.94 1212.52 L1032.35 1212.52 L1031.77 1212.52 L1031.18 1212.52 L1030.59 1212.52 L1030.01 1212.52 L1029.42 1212.52 L1028.83 1212.52 L1028.25 1212.52 L1027.66 1212.52 L1027.07 1212.52 L1026.49 1212.52 L1025.9 1212.52 L1025.32 1212.52 L1024.73 1212.52 L1024.14 1212.52 L1023.56 1212.52 L1022.97 1212.52 L1022.38 1212.52 L1021.8 1212.52 L1021.21 1212.52 L1020.62 1212.52 L1020.04 1212.52 L1019.45 1212.52 L1018.86 1212.52 L1018.28 1212.52 L1017.69 1212.52 L1017.11 1212.52 L1016.52 1212.52 L1015.93 1212.52 L1015.35 1212.52 L1014.76 1212.52 L1014.17 1212.52 L1013.59 1212.52 L1013 1212.52 L1012.41 1212.52 L1011.83 1212.52 L1011.24 1212.52 L1010.65 1212.52 L1010.07 1212.52 L1009.48 1212.52 L1008.9 1212.52 L1008.31 1212.52 L1007.72 1212.52 L1007.14 1212.52 L1006.55 1212.52 L1005.96 1212.52 L1005.38 1212.52 L1004.79 1212.52 L1004.2 1212.52 L1003.62 1212.52 L1003.03 1212.52 L1002.44 1212.52 L1001.86 1212.52 L1001.27 1212.52 L1000.69 1212.52 L1000.1 1212.52 L999.513 1212.52 L998.926 1212.52 L998.34 1212.52 L997.754 1212.52 L997.167 1212.52 L996.581 1212.52 L995.994 1212.52 L995.408 1212.52 L994.822 1212.52 L994.235 1212.52 L993.649 1212.52 L993.062 1212.52 L992.476 1212.52 L991.889 1212.52 L991.303 1212.52 L990.717 1212.52 L990.13 1212.52 L989.544 1212.52 L988.957 1212.52 L988.371 1212.52 L987.785 1212.52 L987.198 1212.52 L986.612 1212.52 L986.025 1212.52  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.68 986.612,1212.68 987.198,1212.68 987.785,1212.68 988.371,1212.68 988.957,1212.68 989.544,1212.68 990.13,1212.68 990.717,1212.68 991.303,1212.68 991.889,1212.68 992.476,1212.68 993.062,1212.68 993.649,1212.68 994.235,1212.68 994.822,1212.68 995.408,1212.68 995.994,1212.68 996.581,1212.68 997.167,1212.68 997.754,1212.68 998.34,1212.68 998.926,1212.68 999.513,1212.68 1000.1,1212.68 1000.69,1212.68 1001.27,1212.68 1001.86,1212.68 1002.44,1212.68 1003.03,1212.68 1003.62,1212.68 1004.2,1212.68 1004.79,1212.68 1005.38,1212.68 1005.96,1212.68 1006.55,1212.68 1007.14,1212.68 1007.72,1212.68 1008.31,1212.68 1008.9,1212.68 1009.48,1212.68 1010.07,1212.68 1010.65,1212.68 1011.24,1212.68 1011.83,1212.68 1012.41,1212.68 1013,1212.68 1013.59,1212.68 1014.17,1212.68 1014.76,1212.68 1015.35,1212.68 1015.93,1212.68 1016.52,1212.68 1017.11,1212.68 1017.69,1212.68 1018.28,1212.68 1018.86,1212.68 1019.45,1212.68 1020.04,1212.68 1020.62,1212.68 1021.21,1212.68 1021.8,1212.68 1022.38,1212.68 1022.97,1212.68 1023.56,1212.68 1024.14,1212.68 1024.73,1212.68 1025.32,1212.68 1025.9,1212.68 1026.49,1212.68 1027.07,1212.68 1027.66,1212.68 1028.25,1212.68 1028.83,1212.68 1029.42,1212.68 1030.01,1212.68 1030.59,1212.68 1031.18,1212.68 1031.77,1212.68 1032.35,1212.68 1032.94,1212.68 1033.52,1212.68 1034.11,1212.68 1034.7,1212.68 1035.28,1212.68 1035.87,1212.68 1036.46,1212.68 1037.04,1212.68 1037.63,1212.68 1038.22,1212.68 1038.8,1212.68 1039.39,1212.68 1039.98,1212.68 1040.56,1212.68 1041.15,1212.68 1041.73,1212.68 1042.32,1212.68 1042.91,1212.68 1043.49,1212.68 1044.08,1212.68 1044.67,1212.68 1045.25,1212.68 1045.84,1212.68 1046.43,1212.68 1047.01,1212.68 1047.6,1212.68 1048.19,1212.68 1048.77,1212.68 1049.36,1212.68 1049.94,1212.68 1050.53,1212.68 1051.12,1212.68 1051.7,1212.68 1052.29,1212.68 1052.88,1212.68 1053.46,1212.68 1054.05,1212.68 1054.64,1212.68 1055.22,1212.68 1055.81,1212.68 1056.39,1212.68 1056.98,1212.68 1057.57,1212.68 1058.15,1212.68 1058.74,1212.68 1059.33,1212.68 1059.91,1212.68 1060.5,1212.68 1061.09,1212.68 1061.67,1212.68 1062.26,1212.68 1062.85,1212.68 1063.43,1212.68 1064.02,1212.68 1064.6,1212.68 1065.19,1212.68 1065.78,1212.68 1066.36,1212.68 1066.95,1212.68 1067.54,1212.68 1068.12,1212.68 1068.71,1212.68 1069.3,1212.68 1069.88,1212.68 1070.47,1212.68 1071.06,1212.68 1071.64,1212.68 1072.23,1212.68 1072.81,1212.68 1073.4,1212.68 1073.99,1212.68 1074.57,1212.68 1075.16,1212.68 1075.75,1212.68 1076.33,1212.68 1076.92,1212.68 1077.51,1212.68 1078.09,1212.68 1078.68,1212.68 1079.26,1212.68 1079.85,1212.68 1080.44,1212.68 1081.02,1212.68 1081.61,1212.68 1082.2,1212.68 1082.78,1212.68 1083.37,1212.68 1083.96,1212.68 1084.54,1212.68 1085.13,1212.68 1085.72,1212.68 1086.3,1212.68 1086.89,1212.68 1087.47,1212.68 1088.06,1212.68 1088.65,1212.68 1089.23,1212.68 1089.82,1212.68 1090.41,1212.68 1090.99,1212.68 1091.58,1212.68 1092.17,1212.68 1092.75,1212.68 1093.34,1212.68 1093.93,1212.68 1094.51,1212.68 1095.1,1212.68 1095.68,1212.68 1096.27,1212.68 1096.86,1212.68 1097.44,1212.68 1098.03,1212.68 1098.62,1212.68 1099.2,1212.68 1099.79,1212.68 1100.38,1212.68 1100.96,1212.68 1101.55,1212.68 1102.14,1212.68 1102.72,1212.68 1103.31,1212.68 1103.89,1212.68 1104.48,1212.68 1105.07,1212.68 1105.65,1212.68 1106.24,1212.68 1106.83,1212.68 1107.41,1212.68 1108,1212.68 1108.59,1212.68 1109.17,1212.68 1109.76,1212.68 1110.34,1212.68 1110.93,1212.68 1111.52,1212.68 1112.1,1212.68 1112.69,1212.68 1113.28,1212.68 1113.86,1212.68 1114.45,1212.68 1115.04,1212.68 1115.62,1212.68 1116.21,1212.68 1116.8,1212.68 1117.38,1212.68 1117.97,1212.68 1118.55,1212.68 1119.14,1212.68 1119.73,1212.68 1120.31,1212.68 1120.9,1212.68 1121.49,1212.68 1122.07,1212.68 1122.66,1212.68 1123.25,1212.68 1123.83,1212.68 1124.42,1212.68 1125.01,1212.68 1125.59,1212.68 1126.18,1212.68 1126.76,1212.68 1127.35,1212.68 1127.94,1212.68 1128.52,1212.68 1129.11,1212.68 1129.7,1212.68 1130.28,1212.68 1130.87,1212.68 1131.46,1212.68 1132.04,1212.68 1132.63,1212.68 1133.21,1212.68 1133.8,1212.68 1134.39,1212.68 1134.97,1212.68 1135.56,1212.68 1136.15,1212.68 1136.73,1212.68 1137.32,1212.68 1137.91,1212.68 1138.49,1212.68 1139.08,1212.68 1139.67,1212.68 1140.25,1212.68 1140.84,1212.68 1141.42,1212.68 1142.01,1212.68 1142.6,1212.68 1143.18,1212.68 1143.77,1212.68 1144.36,1212.68 1144.94,1212.68 1145.53,1212.68 1146.12,1212.68 1146.7,1212.68 1147.29,1212.68 1147.88,1212.68 1148.46,1212.68 1149.05,1212.68 1149.63,1212.68 1150.22,1212.68 1150.81,1212.68 1151.39,1212.68 1151.98,1212.68 1152.57,1212.68 1153.15,1212.68 1153.74,1212.68 1154.33,1212.68 1154.91,1212.68 1155.5,1212.68 1156.09,1212.68 1156.67,1212.68 1157.26,1212.68 1157.84,1212.68 1158.43,1212.68 1159.02,1212.68 1159.6,1212.68 1160.19,1212.68 1160.78,1212.68 1161.36,1212.68 1161.95,1212.68 1162.54,1212.68 1163.12,1212.68 1163.71,1212.68 1164.29,1212.68 1164.88,1212.68 1165.47,1212.68 1166.05,1212.68 1166.64,1212.68 1167.23,1212.68 1167.81,1212.68 1168.4,1212.68 1168.99,1212.68 1169.57,1212.68 1170.16,1212.68 1170.75,1212.68 1171.33,1212.68 1171.92,1212.68 1172.5,1212.68 1173.09,1212.68 1173.68,1212.68 1174.26,1212.68 1174.85,1212.68 1175.44,1212.68 1176.02,1212.68 1176.61,1212.68 1177.2,1212.68 1177.78,1212.68 1178.37,1212.68 1178.96,1212.68 1179.54,1212.68 1180.13,1212.68 1180.71,1212.68 1181.3,1212.68 1181.89,1212.68 1182.47,1212.68 1183.06,1212.68 1183.65,1212.68 1184.23,1212.68 1184.82,1212.68 1185.41,1212.68 1185.99,1212.68 1186.58,1212.68 1187.16,1212.68 1187.75,1212.68 1188.34,1212.68 1188.92,1212.68 1189.51,1212.68 1190.1,1212.68 1190.68,1212.68 1191.27,1212.68 1191.86,1212.68 1192.44,1212.68 1193.03,1212.68 1193.62,1212.68 1194.2,1212.68 1194.79,1212.68 1195.37,1212.68 1195.96,1212.68 1196.55,1212.68 1197.13,1212.68 1197.72,1212.68 1198.31,1212.68 1198.89,1212.68 1199.48,1212.68 1200.07,1212.68 1200.65,1212.68 1201.24,1212.68 1201.83,1212.68 1202.41,1212.68 1203,1212.68 1203.58,1212.68 1204.17,1212.68 1204.76,1212.68 1205.34,1212.68 1205.93,1212.68 1206.52,1212.68 1207.1,1212.68 1207.69,1212.68 1208.28,1212.68 1208.86,1212.68 1209.45,1212.68 1210.03,1212.68 1210.62,1212.68 1211.21,1212.68 1211.79,1212.68 1212.38,1212.68 1212.97,1212.68 1213.55,1212.68 1214.14,1212.68 1214.73,1212.68 1215.31,1212.68 1215.9,1212.68 1216.49,1212.68 1217.07,1212.68 1217.66,1212.68 1218.24,1212.68 1218.83,1212.68 1219.42,1212.68 1220,1212.68 1220.59,1212.68 1221.18,1212.68 1221.76,1212.68 1222.35,1212.68 1222.94,1212.68 1223.52,1212.68 1224.11,1212.68 1224.7,1212.68 1225.28,1212.68 1225.87,1212.68 1226.45,1212.68 1227.04,1212.68 1227.63,1212.68 1228.21,1212.68 1228.8,1212.68 1229.39,1212.68 1229.97,1212.68 1230.56,1212.68 1231.15,1212.68 1231.73,1212.68 1232.32,1212.68 1232.91,1212.68 1233.49,1212.68 1234.08,1212.68 1234.66,1212.68 1235.25,1212.68 1235.84,1212.68 1236.42,1212.68 1237.01,1212.68 1237.6,1212.68 1238.18,1212.68 1238.77,1212.68 1239.36,1212.68 1239.94,1212.68 1240.53,1212.68 1241.11,1212.68 1241.7,1212.68 1242.29,1212.68 1242.87,1212.68 1243.46,1212.68 1244.05,1212.68 1244.63,1212.68 1245.22,1212.68 1245.81,1212.68 1246.39,1212.68 1246.98,1212.68 1247.57,1212.68 1248.15,1212.68 1248.74,1212.68 1249.32,1212.68 1249.91,1212.68 1250.5,1212.68 1251.08,1212.68 1251.67,1212.68 1252.26,1212.68 1252.84,1212.68 1253.43,1212.68 1254.02,1212.68 1254.6,1212.68 1255.19,1212.68 1255.78,1212.68 1256.36,1212.68 1256.95,1212.68 1257.53,1212.68 1258.12,1212.68 1258.71,1212.68 1259.29,1212.68 1259.88,1212.68 1260.47,1212.68 1261.05,1212.68 1261.64,1212.68 1262.23,1212.68 1262.81,1212.68 1263.4,1212.68 1263.98,1212.68 1264.57,1212.68 1265.16,1212.68 1265.74,1212.68 1266.33,1212.68 1266.92,1212.68 1267.5,1212.68 1268.09,1212.68 1268.68,1212.68 1269.26,1212.68 1269.85,1212.68 1270.44,1212.68 1271.02,1212.68 1271.61,1212.68 1272.19,1212.68 1272.78,1212.68 1273.37,1212.68 1273.95,1212.68 1274.54,1212.68 1275.13,1212.68 1275.71,1212.68 1276.3,1212.68 1276.89,1212.68 1277.47,1212.68 1278.06,1212.68 1278.65,1212.68 1279.23,1212.68 1279.82,1212.68 1280.4,1212.68 1280.99,1212.68 1281.58,1212.68 1282.16,1212.68 1282.75,1212.68 1283.34,1212.68 1283.92,1212.68 1284.51,1212.68 1285.1,1212.68 1285.68,1212.68 1286.27,1212.68 1286.86,1212.68 1287.44,1212.68 1288.03,1212.68 1288.61,1212.68 1289.2,1212.68 1289.79,1212.68 1290.37,1212.68 1290.96,1212.68 1291.55,1212.68 1292.13,1212.68 1292.72,1212.68 1293.31,1212.68 1293.89,1212.68 1294.48,1212.68 1295.06,1212.68 1295.65,1212.68 1296.24,1212.68 1296.82,1212.68 1297.41,1212.68 1298,1212.68 1298.58,1212.68 1299.17,1212.68 1299.76,1212.68 1300.34,1212.68 1300.93,1212.68 1301.52,1212.68 1302.1,1212.68 1302.69,1212.68 1303.27,1212.68 1303.86,1212.68 1304.45,1212.68 1305.03,1212.68 1305.62,1212.68 1306.21,1212.68 1306.79,1212.68 1307.38,1212.68 1307.97,1212.68 1308.55,1212.68 1309.14,1212.68 1309.73,1212.68 1310.31,1212.68 1310.9,1212.68 1311.48,1212.68 1312.07,1212.68 1312.66,1212.68 1313.24,1212.68 1313.83,1212.68 1314.42,1212.68 1315,1212.68 1315.59,1212.68 1316.18,1212.68 1316.76,1212.68 1317.35,1212.68 1317.93,1212.68 1318.52,1212.68 1319.11,1212.68 1319.69,1212.68 1320.28,1212.68 1320.87,1212.68 1321.45,1212.68 1322.04,1212.68 1322.63,1212.68 1323.21,1212.68 1323.8,1212.68 1324.39,1212.68 1324.97,1212.68 1325.56,1212.68 1326.14,1212.68 1326.73,1212.68 1327.32,1212.68 1327.9,1212.68 1328.49,1212.68 1329.08,1212.68 1329.66,1212.68 1330.25,1212.68 1330.84,1212.68 1331.42,1212.68 1332.01,1212.68 1332.6,1212.68 1333.18,1212.68 1333.77,1212.68 1334.35,1212.68 1334.94,1212.68 1335.53,1212.68 1336.11,1212.68 1336.7,1212.68 1337.29,1212.68 1337.87,1212.68 1338.46,1212.68 1339.05,1212.68 1339.63,1212.68 1340.22,1212.68 1340.8,1212.68 1341.39,1212.68 1341.98,1212.68 1342.56,1212.68 1343.15,1212.68 1343.74,1212.68 1344.32,1212.68 1344.91,1212.68 1345.5,1212.68 1346.08,1212.68 1346.67,1212.68 1347.26,1212.68 1347.84,1212.68 1348.43,1212.68 1349.01,1212.68 1349.6,1212.68 1350.19,1212.68 1350.77,1212.68 1351.36,1212.68 1351.95,1212.68 1352.53,1212.68 1353.12,1212.68 1353.71,1212.68 1354.29,1212.68 1354.88,1212.68 1355.47,1212.68 1356.05,1212.68 1356.64,1212.68 1357.22,1212.68 1357.81,1212.68 1358.4,1212.68 1358.98,1212.68 1359.57,1212.68 1360.16,1212.68 1360.74,1212.68 1361.33,1212.68 1361.92,1212.68 1362.5,1212.68 1363.09,1212.68 1363.68,1212.68 1364.26,1212.68 1364.85,1212.68 1365.43,1212.68 1366.02,1212.68 1366.61,1212.68 1367.19,1212.68 1367.78,1212.68 1368.37,1212.68 1368.95,1212.68 1369.54,1212.68 1370.13,1212.68 1370.71,1212.68 1371.3,1212.68 1371.88,1212.68 1372.47,1212.68 1373.06,1212.68 1373.64,1212.68 1374.23,1212.68 1374.82,1212.68 1375.4,1212.68 1375.99,1212.68 1376.58,1212.68 1377.16,1212.68 1377.75,1212.68 1378.34,1212.68 1378.92,1212.68 1379.51,1212.68 1380.09,1212.68 1380.68,1212.68 1381.27,1212.68 1381.85,1212.68 1382.44,1212.68 1383.03,1212.68 1383.61,1212.68 1384.2,1212.68 1384.79,1212.68 1385.37,1212.68 1385.96,1212.68 1386.55,1212.68 1387.13,1212.68 1387.72,1212.68 1388.3,1212.68 1388.89,1212.68 1389.48,1212.68 1390.06,1212.68 1390.65,1212.68 1391.24,1212.68 1391.82,1212.68 1392.41,1212.68 1393,1212.68 1393.58,1212.68 1394.17,1212.68 1394.75,1212.68 1395.34,1212.68 1395.93,1212.68 1396.51,1212.68 1397.1,1212.68 1397.69,1212.68 1398.27,1212.68 1398.86,1212.68 1399.45,1212.68 1400.03,1212.68 1400.62,1212.68 1401.21,1212.68 1401.79,1212.68 1402.38,1212.68 1402.96,1212.68 1403.55,1212.68 1404.14,1212.68 1404.72,1212.68 1405.31,1212.68 1405.9,1212.68 1406.48,1212.68 1407.07,1212.68 1407.66,1212.68 1408.24,1212.68 1408.83,1212.68 1409.42,1212.68 1410,1212.68 1410.59,1212.68 1411.17,1212.68 1411.76,1212.68 1412.35,1212.68 1412.93,1212.68 1413.52,1212.68 1414.11,1212.68 1414.69,1212.68 1415.28,1212.68 1415.87,1212.68 1416.45,1212.68 1417.04,1212.68 1417.63,1212.68 1418.21,1212.68 1418.8,1212.68 1419.38,1212.68 1419.97,1212.68 1420.56,1212.68 1421.14,1212.68 1421.73,1212.68 1422.32,1212.68 1422.9,1212.68 1423.49,1212.68 1424.08,1212.68 1424.66,1212.68 1425.25,1212.68 1425.83,1212.68 1426.42,1212.68 1427.01,1212.68 1427.59,1212.68 1428.18,1212.68 1428.77,1212.68 1429.35,1212.68 1429.94,1212.68 1430.53,1212.68 1431.11,1212.68 1431.7,1212.68 1432.29,1212.68 1432.87,1212.68 1433.46,1212.68 1434.04,1212.68 1434.63,1212.68 1435.22,1212.68 1435.8,1212.68 1436.39,1212.68 1436.98,1212.68 1437.56,1212.68 1438.15,1212.68 1438.74,1212.68 1439.32,1212.68 1439.91,1212.68 1440.5,1212.68 1441.08,1212.68 1441.67,1212.68 1442.25,1212.68 1442.84,1212.68 1443.43,1212.68 1444.01,1212.68 1444.6,1212.68 1445.19,1212.68 1445.77,1212.68 1446.36,1212.68 1446.95,1212.68 1447.53,1212.68 1448.12,1212.68 1448.7,1212.68 1449.29,1212.68 1449.88,1212.68 1450.46,1212.68 1451.05,1212.68 1451.64,1212.68 1452.22,1212.68 1452.81,1212.68 1453.4,1212.68 1453.98,1212.68 1454.57,1212.68 1455.16,1212.68 1455.74,1212.68 1456.33,1212.68 1456.91,1212.68 1457.5,1212.68 1458.09,1212.68 1458.67,1212.68 1459.26,1212.68 1459.85,1212.68 1460.43,1212.68 1461.02,1212.68 1461.61,1212.68 1462.19,1212.68 1462.78,1212.68 1463.37,1212.68 1463.95,1212.68 1464.54,1212.68 1465.12,1212.68 1465.71,1212.68 1466.3,1212.68 1466.88,1212.68 1467.47,1212.68 1468.06,1212.68 1468.64,1212.68 1469.23,1212.68 1469.82,1212.68 1470.4,1212.68 1470.99,1212.68 1471.57,1212.68 1472.16,1212.68 1472.75,1212.68 1473.33,1212.68 1473.92,1212.68 1474.51,1212.68 1475.09,1212.68 1475.68,1212.68 1476.27,1212.68 1476.85,1212.68 1477.44,1212.68 1478.03,1212.68 1478.61,1212.68 1479.2,1212.68 1479.78,1212.68 1480.37,1212.68 1480.96,1212.68 1481.54,1212.68 1482.13,1212.68 1482.72,1212.68 1483.3,1212.68 1483.89,1212.68 1484.48,1212.68 1485.06,1212.68 1485.65,1212.68 1486.24,1212.68 1486.82,1212.68 1487.41,1212.68 1487.99,1212.68 1488.58,1212.68 1489.17,1212.68 1489.75,1212.68 1490.34,1212.68 1490.93,1212.68 1491.51,1212.68 1492.1,1212.68 1492.69,1212.68 1493.27,1212.68 1493.86,1212.68 1494.45,1212.68 1495.03,1212.68 1495.62,1212.68 1496.2,1212.68 1496.79,1212.68 1497.38,1212.68 1497.96,1212.68 1498.55,1212.68 1499.14,1212.68 1499.72,1212.68 1500.31,1212.68 1500.9,1212.68 1501.48,1212.68 1502.07,1212.68 1502.65,1212.68 1503.24,1212.68 1503.83,1212.68 1504.41,1212.68 1505,1212.68 1505.59,1212.68 1506.17,1212.68 1506.76,1212.68 1507.35,1212.68 1507.93,1212.68 1508.52,1212.68 1509.11,1212.68 1509.69,1212.68 1510.28,1212.68 1510.86,1212.68 1511.45,1212.68 1512.04,1212.68 1512.62,1212.68 1513.21,1212.68 1513.8,1212.68 1514.38,1212.68 1514.97,1212.68 1515.56,1212.68 1516.14,1212.68 1516.73,1212.68 1517.32,1212.68 1517.9,1212.68 1518.49,1212.68 1519.07,1212.68 1519.66,1212.68 1520.25,1212.68 1520.83,1212.68 1521.42,1212.68 1522.01,1212.68 1522.59,1212.68 1523.18,1212.68 1523.77,1212.68 1524.35,1212.68 1524.94,1212.68 1525.52,1212.68 1526.11,1212.68 1526.7,1212.68 1527.28,1212.68 1527.87,1212.68 1528.46,1212.68 1529.04,1212.68 1529.63,1212.68 1530.22,1212.68 1530.8,1212.68 1531.39,1212.68 1531.98,1212.68 1532.56,1212.68 1533.15,1212.68 1533.73,1212.68 1534.32,1212.68 1534.91,1212.68 1535.49,1212.68 1536.08,1212.68 1536.67,1212.68 1537.25,1212.68 1537.84,1212.68 1538.43,1212.68 1539.01,1212.68 1539.6,1212.68 1540.19,1212.68 1540.77,1212.68 1541.36,1212.68 1541.94,1212.68 1542.53,1212.68 1543.12,1212.68 1543.7,1212.68 1544.29,1212.68 1544.88,1212.68 1545.46,1212.68 1546.05,1212.68 1546.64,1212.68 1547.22,1212.68 1547.81,1212.68 1548.4,1212.68 1548.98,1212.68 1549.57,1212.68 1550.15,1212.68 1550.74,1212.68 1551.33,1212.68 1551.91,1212.68 1552.5,1212.68 1553.09,1212.68 1553.67,1212.68 1554.26,1212.68 1554.85,1212.68 1555.43,1212.68 1556.02,1212.68 1556.6,1212.68 1557.19,1212.68 1557.78,1212.68 1558.36,1212.68 1558.95,1212.68 1559.54,1212.68 1560.12,1212.68 1560.71,1212.68 1561.3,1212.68 1561.88,1212.68 1562.47,1212.68 1563.06,1212.68 1563.64,1212.68 1564.23,1212.68 1564.81,1212.68 1565.4,1212.68 1565.99,1212.68 1566.57,1212.68 1567.16,1212.68 1567.75,1212.68 1568.33,1212.68 1568.92,1212.68 1569.51,1212.68 1570.09,1212.68 1570.68,1212.68 1571.27,1212.68 1571.85,1212.68 1572.44,1212.68 1573.02,1212.68 1573.61,1212.68 1574.2,1212.68 1574.78,1212.68 1575.37,1212.68 1575.96,1212.68 1576.54,1212.68 1577.13,1212.68 1577.72,1212.68 1578.3,1212.68 1578.89,1212.68 1579.47,1212.68 1580.06,1212.68 1580.65,1212.68 1581.23,1212.68 1581.82,1212.68 1582.41,1212.68 1582.99,1212.68 1583.58,1212.68 1584.17,1212.68 1584.75,1212.68 1585.34,1212.68 1585.93,1212.68 1586.51,1212.68 1587.1,1212.68 1587.68,1212.68 1588.27,1212.68 1588.86,1212.68 1589.44,1212.68 1590.03,1212.68 1590.62,1212.68 1591.2,1212.68 1591.79,1212.68 1592.38,1212.68 1592.96,1212.68 1593.55,1212.68 1594.14,1212.68 1594.72,1212.68 1595.31,1212.68 1595.89,1212.68 1596.48,1212.68 1597.07,1212.68 1597.65,1212.68 1598.24,1212.68 1598.83,1212.68 1599.41,1212.68 1600,1212.68 1600.59,1212.68 1601.17,1212.68 1601.76,1212.68 1602.34,1212.68 1602.93,1212.68 1603.52,1212.68 1604.1,1212.68 1604.69,1212.68 1605.28,1212.68 1605.86,1212.68 1606.45,1212.68 1607.04,1212.68 1607.62,1212.68 1608.21,1212.68 1608.8,1212.68 1609.38,1212.68 1609.97,1212.68 1610.55,1212.68 1611.14,1212.68 1611.73,1212.68 1612.31,1212.68 1612.9,1212.68 1613.49,1212.68 1614.07,1212.68 1614.66,1212.68 1615.25,1212.68 1615.83,1212.68 1616.42,1212.68 1617.01,1212.68 1617.59,1212.68 1618.18,1212.68 1618.76,1212.68 1619.35,1212.68 1619.94,1212.68 1620.52,1212.68 1621.11,1212.68 1621.7,1212.68 1622.28,1212.68 1622.87,1212.68 1623.46,1212.68 1624.04,1212.68 1624.63,1212.68 1625.22,1212.68 1625.8,1212.68 1626.39,1212.68 1626.97,1212.68 1627.56,1212.68 1628.15,1212.68 1628.73,1212.68 1629.32,1212.68 1629.91,1212.68 1630.49,1212.68 1631.08,1212.68 1631.67,1212.68 1632.25,1212.68 1632.84,1212.68 1633.42,1212.68 1634.01,1212.68 1634.6,1212.68 1635.18,1212.68 1635.77,1212.68 1636.36,1212.68 1636.94,1212.68 1637.53,1212.68 1638.12,1212.68 1638.7,1212.68 1639.29,1212.68 1639.88,1212.68 1640.46,1212.68 1641.05,1212.68 1641.63,1212.68 1642.22,1212.68 1642.81,1212.68 1643.39,1212.68 1643.98,1212.68 1644.57,1212.68 1645.15,1212.68 1645.74,1212.68 1646.33,1212.68 1646.91,1212.68 1647.5,1212.68 1648.09,1212.68 1648.67,1212.68 1649.26,1212.68 1649.84,1212.68 1650.43,1212.68 1651.02,1212.68 1651.6,1212.68 1652.19,1212.68 1652.78,1212.68 1653.36,1212.68 1653.95,1212.68 1654.54,1212.68 1655.12,1212.68 1655.71,1212.68 1656.29,1212.68 1656.88,1212.68 1657.47,1212.68 1658.05,1212.68 1658.64,1212.68 1659.23,1212.68 1659.81,1212.68 1660.4,1212.68 1660.99,1212.68 1661.57,1212.68 1662.16,1212.68 1662.75,1212.68 1663.33,1212.68 1663.92,1212.68 1664.5,1212.68 1665.09,1212.68 1665.68,1212.68 1666.26,1212.68 1666.85,1212.68 1667.44,1212.68 1668.02,1212.68 1668.61,1212.68 1669.2,1212.68 1669.78,1212.68 1670.37,1212.68 1670.96,1212.68 1671.54,1212.68 1672.13,1212.68 1672.71,1212.68 1673.3,1212.68 1673.89,1212.68 1674.47,1212.68 1675.06,1212.68 1675.65,1212.68 1676.23,1212.68 1676.82,1212.68 1677.41,1212.68 1677.99,1212.68 1678.58,1212.68 1679.17,1212.68 1679.75,1212.68 1680.34,1212.68 1680.92,1212.68 1681.51,1212.68 1682.1,1212.68 1682.68,1212.68 1683.27,1212.68 1683.86,1212.68 1684.44,1212.68 1685.03,1212.68 1685.62,1212.68 1686.2,1212.68 1686.79,1212.68 1687.37,1212.68 1687.96,1212.68 1688.55,1212.68 1689.13,1212.68 1689.72,1212.68 1690.31,1212.68 1690.89,1212.68 1691.48,1212.68 1692.07,1212.68 1692.65,1212.68 1693.24,1212.68 1693.83,1212.68 1694.41,1212.68 1695,1212.68 1695.58,1212.68 1696.17,1212.68 1696.76,1212.68 1697.34,1212.68 1697.93,1212.68 1698.52,1212.68 1699.1,1212.68 1699.69,1212.68 1700.28,1212.68 1700.86,1212.68 1701.45,1212.68 1702.04,1212.68 1702.62,1212.68 1703.21,1212.68 1703.79,1212.68 1704.38,1212.68 1704.97,1212.68 1705.55,1212.68 1706.14,1212.68 1706.73,1212.68 1707.31,1212.68 1707.9,1212.68 1708.49,1212.68 1709.07,1212.68 1709.66,1212.68 1710.24,1212.68 1710.83,1212.68 1711.42,1212.68 1712,1212.68 1712.59,1212.68 1713.18,1212.68 1713.76,1212.68 1714.35,1212.68 1714.94,1212.68 1715.52,1212.68 1716.11,1212.68 1716.7,1212.68 1717.28,1212.68 1717.87,1212.68 1718.45,1212.68 1719.04,1212.68 1719.63,1212.68 1720.21,1212.68 1720.8,1212.68 1721.39,1212.68 1721.97,1212.68 1722.56,1212.68 1723.15,1212.68 1723.73,1212.68 1724.32,1212.68 1724.91,1212.68 1725.49,1212.68 1726.08,1212.68 1726.66,1212.68 1727.25,1212.68 1727.84,1212.68 1728.42,1212.68 1729.01,1212.68 1729.6,1212.68 1730.18,1212.68 1730.77,1212.68 1731.36,1212.68 1731.94,1212.68 1732.53,1212.68 1733.11,1212.68 1733.7,1212.68 1734.29,1212.68 1734.87,1212.68 1735.46,1212.68 1736.05,1212.68 1736.63,1212.68 1737.22,1212.68 1737.81,1212.68 1738.39,1212.68 1738.98,1212.68 1739.57,1212.68 1740.15,1212.68 1740.74,1212.68 1741.32,1212.68 1741.91,1212.68 1742.5,1212.68 1743.08,1212.68 1743.67,1212.68 1744.26,1212.68 1744.84,1212.68 1745.43,1212.68 1746.02,1212.68 1746.6,1212.68 1747.19,1212.68 1747.78,1212.68 1748.36,1212.68 1748.95,1212.68 1749.53,1212.68 1750.12,1212.68 1750.71,1212.68 1751.29,1212.68 1751.88,1212.68 1752.47,1212.68 1753.05,1212.68 1753.64,1212.68 1754.23,1212.68 1754.81,1212.68 1755.4,1212.68 1755.99,1212.68 1756.57,1212.68 1757.16,1212.68 1757.74,1212.68 1758.33,1212.68 1758.92,1212.68 1759.5,1212.68 1760.09,1212.68 1760.68,1212.68 1761.26,1212.68 1761.85,1212.68 1762.44,1212.68 1763.02,1212.68 1763.61,1212.68 1764.19,1212.68 1764.78,1212.68 1765.37,1212.68 1765.95,1212.68 1766.54,1212.68 1767.13,1212.68 1767.71,1212.68 1768.3,1212.68 1768.89,1212.68 1769.47,1212.68 1770.06,1212.68 1770.65,1212.68 1771.23,1212.68 1771.82,1212.68 1772.4,1212.68 1772.99,1212.68 1773.58,1212.68 1774.16,1212.68 1774.75,1212.68 1775.34,1212.68 1775.92,1212.68 1776.51,1212.68 1777.1,1212.68 1777.68,1212.68 1778.27,1212.68 1778.86,1212.68 1779.44,1212.68 1780.03,1212.68 1780.61,1212.68 1781.2,1212.68 1781.79,1212.68 1782.37,1212.68 1782.96,1212.68 1783.55,1212.68 1784.13,1212.68 1784.72,1212.68 1785.31,1212.68 1785.89,1212.68 1786.48,1212.68 1787.06,1212.68 1787.65,1212.68 1788.24,1212.68 1788.82,1212.68 1789.41,1212.68 1790,1212.68 1790.58,1212.68 1791.17,1212.68 1791.76,1212.68 1792.34,1212.68 1792.93,1212.68 1793.52,1212.68 1794.1,1212.68 1794.69,1212.68 1795.27,1212.68 1795.86,1212.68 1796.45,1212.68 1797.03,1212.68 1797.62,1212.68 1798.21,1212.68 1798.79,1212.68 1799.38,1212.68 1799.97,1212.68 1800.55,1212.68 1801.14,1212.68 1801.73,1212.68 1802.31,1212.68 1802.9,1212.68 1803.48,1212.68 1804.07,1212.68 1804.66,1212.68 1805.24,1212.68 1805.83,1212.68 1806.42,1212.68 1807,1212.68 1807.59,1212.68 1808.18,1212.68 1808.76,1212.68 1809.35,1212.68 1809.94,1212.68 1810.52,1212.68 1811.11,1212.68 1811.69,1212.68 1812.28,1212.68 1812.87,1212.68 1813.45,1212.68 1814.04,1212.68 1814.63,1212.68 1815.21,1212.68 1815.8,1212.68 1816.39,1212.68 1816.97,1212.68 1817.56,1212.68 1818.14,1212.68 1818.73,1212.68 1819.32,1212.68 1819.9,1212.68 1820.49,1212.68 1821.08,1212.68 1821.66,1212.68 1822.25,1212.68 1822.84,1212.68 1823.42,1212.68 1824.01,1212.68 1824.6,1212.68 1825.18,1212.68 1825.77,1212.68 1826.35,1212.68 1826.94,1212.68 1827.53,1212.68 1828.11,1212.68 1828.7,1212.68 1829.29,1212.68 1829.87,1212.68 1830.46,1212.68 1831.05,1212.68 1831.63,1212.68 1832.22,1212.68 1832.81,1212.68 1833.39,1212.68 1833.98,1212.68 1834.56,1212.68 1835.15,1212.68 1835.74,1212.68 1836.32,1212.68 1836.91,1212.68 1837.5,1212.68 1838.08,1212.68 1838.67,1212.68 1839.26,1212.68 1839.84,1212.68 1840.43,1212.68 1841.01,1212.68 1841.6,1212.68 1842.19,1212.68 1842.77,1212.68 1843.36,1212.68 1843.95,1212.68 1844.53,1212.68 1845.12,1212.68 1845.71,1212.68 1846.29,1212.68 1846.88,1212.68 1847.47,1212.68 1848.05,1212.68 1848.64,1212.68 1849.22,1212.68 1849.81,1212.68 1850.4,1212.68 1850.98,1212.68 1851.57,1212.68 1852.16,1212.68 1852.74,1212.68 1853.33,1212.68 1853.92,1212.68 1854.5,1212.68 1855.09,1212.68 1855.68,1212.68 1856.26,1212.68 1856.85,1212.68 1857.43,1212.68 1858.02,1212.68 1858.61,1212.68 1859.19,1212.68 1859.78,1212.68 1860.37,1212.68 1860.95,1212.68 1861.54,1212.68 1862.13,1212.68 1862.71,1212.68 1863.3,1212.68 1863.88,1212.68 1864.47,1212.68 1865.06,1212.68 1865.64,1212.68 1866.23,1212.68 1866.82,1212.68 1867.4,1212.68 1867.99,1212.68 1868.58,1212.68 1869.16,1212.68 1869.75,1212.68 1870.34,1212.68 1870.92,1212.68 1871.51,1212.68 1872.09,1212.68 1872.68,1212.68 1873.27,1212.68 1873.85,1212.68 1874.44,1212.68 1875.03,1212.68 1875.61,1212.68 1876.2,1212.68 1876.79,1212.68 1877.37,1212.68 1877.96,1212.68 1878.55,1212.68 1879.13,1212.68 1879.72,1212.68 1880.3,1212.68 1880.89,1212.68 1881.48,1212.68 1882.06,1212.68 1882.65,1212.68 1883.24,1212.68 1883.82,1212.68 1884.41,1212.68 1885,1212.68 1885.58,1212.68 1886.17,1212.68 1886.76,1212.68 1887.34,1212.68 1887.93,1212.68 1888.51,1212.68 1889.1,1212.68 1889.69,1212.68 1890.27,1212.68 1890.86,1212.68 1891.45,1212.68 1892.03,1212.68 1892.62,1212.68 1893.21,1212.68 1893.79,1212.68 1894.38,1212.68 1894.96,1212.68 1895.55,1212.68 1896.14,1212.68 1896.72,1212.68 1897.31,1212.68 1897.9,1212.68 1898.48,1212.68 1899.07,1212.68 1899.66,1212.68 1900.24,1212.68 1900.83,1212.68 1901.42,1212.68 1902,1212.68 1902.59,1212.68 1903.17,1212.68 1903.76,1212.68 1904.35,1212.68 1904.93,1212.68 1905.52,1212.68 1906.11,1212.68 1906.69,1212.68 1907.28,1212.68 1907.87,1212.68 1908.45,1212.68 1909.04,1212.68 1909.63,1212.68 1910.21,1212.68 1910.8,1212.68 1911.38,1212.68 1911.97,1212.68 1912.56,1212.68 1913.14,1212.68 1913.73,1212.68 1914.32,1212.68 1914.9,1212.68 1915.49,1212.68 1916.08,1212.68 1916.66,1212.68 1917.25,1212.68 1917.83,1212.68 1918.42,1212.68 1919.01,1212.68 1919.59,1212.68 1920.18,1212.68 1920.77,1212.68 1921.35,1212.68 1921.94,1212.68 1922.53,1212.68 1923.11,1212.68 1923.7,1212.68 1924.29,1212.68 1924.87,1212.68 1925.46,1212.68 1926.04,1212.68 1926.63,1212.68 1927.22,1212.68 1927.8,1212.68 1928.39,1212.68 1928.98,1212.68 1929.56,1212.68 1930.15,1212.68 1930.74,1212.68 1931.32,1212.68 1931.91,1212.68 1932.5,1212.68 1933.08,1212.68 1933.67,1212.68 1934.25,1212.68 1934.84,1212.68 1935.43,1212.68 1936.01,1212.68 1936.6,1212.68 1937.19,1212.68 1937.77,1212.68 1938.36,1212.68 1938.95,1212.68 1939.53,1212.68 1940.12,1212.68 1940.71,1212.68 1941.29,1212.68 1941.88,1212.68 1942.46,1212.68 1943.05,1212.68 1943.64,1212.68 1944.22,1212.68 1944.81,1212.68 1945.4,1212.68 1945.98,1212.68 1946.57,1212.68 1947.16,1212.68 1947.74,1212.68 1948.33,1212.68 1948.91,1212.68 1949.5,1212.68 1950.09,1212.68 1950.67,1212.68 1951.26,1212.68 1951.85,1212.68 1952.43,1212.68 1953.02,1212.68 1953.61,1212.68 1954.19,1212.68 1954.78,1212.68 1955.37,1212.68 1955.95,1212.68 1956.54,1212.68 1957.12,1212.68 1957.71,1212.68 1958.3,1212.68 1958.88,1212.68 1959.47,1212.68 1960.06,1212.68 1960.64,1212.68 1961.23,1212.68 1961.82,1212.68 1962.4,1212.68 1962.99,1212.68 1963.58,1212.68 1964.16,1212.68 1964.75,1212.68 1965.33,1212.68 1965.92,1212.68 1966.51,1212.68 1967.09,1212.68 1967.68,1212.68 1968.27,1212.68 1968.85,1212.68 1969.44,1212.68 1970.03,1212.68 1970.61,1212.68 1971.2,1212.68 1971.78,1212.68 1972.37,1212.68 1972.96,1212.68 1973.54,1212.68 1974.13,1212.68 1974.72,1212.68 1975.3,1212.68 1975.89,1212.68 1976.48,1212.68 1977.06,1212.68 1977.65,1212.68 1978.24,1212.68 1978.82,1212.68 1979.41,1212.68 1979.99,1212.68 1980.58,1212.68 1981.17,1212.68 1981.75,1212.68 1982.34,1212.68 1982.93,1212.68 1983.51,1212.68 1984.1,1212.68 1984.69,1212.68 1985.27,1212.68 1985.86,1212.68 1986.45,1212.68 1987.03,1212.68 1987.62,1212.68 1988.2,1212.68 1988.79,1212.68 1989.38,1212.68 1989.96,1212.68 1990.55,1212.68 1991.14,1212.68 1991.72,1212.68 1992.31,1212.68 1992.9,1212.68 1993.48,1212.68 1994.07,1212.68 1994.65,1212.68 1995.24,1212.68 1995.83,1212.68 1996.41,1212.68 1997,1212.68 1997.59,1212.68 1998.17,1212.68 1998.76,1212.68 1999.35,1212.68 1999.93,1212.68 2000.52,1212.68 2001.11,1212.68 2001.69,1212.68 2002.28,1212.68 2002.86,1212.68 2003.45,1212.68 2004.04,1212.68 2004.62,1212.68 2005.21,1212.68 2005.8,1212.68 2006.38,1212.68 2006.97,1212.68 2007.56,1212.68 2008.14,1212.68 2008.73,1212.68 2009.32,1212.68 2009.9,1212.68 2010.49,1212.68 2011.07,1212.68 2011.66,1212.68 2012.25,1212.68 2012.83,1212.68 2013.42,1212.68 2014.01,1212.68 2014.59,1212.68 2015.18,1212.68 2015.77,1212.68 2016.35,1212.68 2016.94,1212.68 2017.53,1212.68 2018.11,1212.68 2018.7,1212.68 2019.28,1212.68 2019.87,1212.68 2020.46,1212.68 2021.04,1212.68 2021.63,1212.68 2022.22,1212.68 2022.8,1212.68 2023.39,1212.68 2023.98,1212.68 2024.56,1212.68 2025.15,1212.68 2025.73,1212.68 2026.32,1212.68 2026.91,1212.68 2027.49,1212.68 2028.08,1212.68 2028.67,1212.68 2029.25,1212.68 2029.84,1212.68 2030.43,1212.68 2031.01,1212.68 2031.6,1212.68 2032.19,1212.68 2032.77,1212.68 2033.36,1212.68 2033.94,1212.68 2034.53,1212.68 2035.12,1212.68 2035.7,1212.68 2036.29,1212.68 2036.88,1212.68 2037.46,1212.68 2038.05,1212.68 2038.64,1212.68 2039.22,1212.68 2039.81,1212.68 2040.4,1212.68 2040.98,1212.68 2041.57,1212.68 2042.15,1212.68 2042.74,1212.68 2043.33,1212.68 2043.91,1212.68 2044.5,1212.68 2045.09,1212.68 2045.67,1212.68 2046.26,1212.68 2046.85,1212.68 2047.43,1212.68 2048.02,1212.68 2048.6,1212.68 2049.19,1212.68 2049.78,1212.68 2050.36,1212.68 2050.95,1212.68 2051.54,1212.68 2052.12,1212.68 2052.71,1212.68 2053.3,1212.68 2053.88,1212.68 2054.47,1212.68 2055.06,1212.68 2055.64,1212.68 2056.23,1212.68 2056.81,1212.68 2057.4,1212.68 2057.99,1212.68 2058.57,1212.68 2059.16,1212.68 2059.75,1212.68 2060.33,1212.68 2060.92,1212.68 2061.51,1212.68 2062.09,1212.68 2062.68,1212.68 2063.27,1212.68 2063.85,1212.68 2064.44,1212.68 2065.02,1212.68 2065.61,1212.68 2066.2,1212.68 2066.78,1212.68 2067.37,1212.68 2067.96,1212.68 2068.54,1212.68 2069.13,1212.68 2069.72,1212.68 2070.3,1212.68 2070.89,1212.68 2071.48,1212.68 2072.06,1212.68 2072.65,1212.68 2073.23,1212.68 2073.82,1212.68 2074.41,1212.68 2074.99,1212.68 2075.58,1212.68 2076.17,1212.68 2076.75,1212.68 2077.34,1212.68 2077.93,1212.68 2078.51,1212.68 2079.1,1212.68 2079.68,1212.68 2080.27,1212.68 2080.86,1212.68 2081.44,1212.68 2082.03,1212.68 2082.62,1212.68 2083.2,1212.68 2083.79,1212.68 2084.38,1212.68 2084.96,1212.68 2085.55,1212.68 2086.14,1212.68 2086.72,1212.68 2087.31,1212.68 2087.89,1212.68 2088.48,1212.68 2089.07,1212.68 2089.65,1212.68 2090.24,1212.68 2090.83,1212.68 2091.41,1212.68 2092,1212.68 2092.59,1212.68 2093.17,1212.68 2093.76,1212.68 2094.35,1212.68 2094.93,1212.68 2095.52,1212.68 2096.1,1212.68 2096.69,1212.68 2097.28,1212.68 2097.86,1212.68 2098.45,1212.68 2099.04,1212.68 2099.62,1212.68 2100.21,1212.68 2100.8,1212.68 2101.38,1212.68 2101.97,1212.68 2102.55,1212.68 2103.14,1212.68 2103.73,1212.68 2104.31,1212.68 2104.9,1212.68 2105.49,1212.68 2106.07,1212.68 2106.66,1212.68 2107.25,1212.68 2107.83,1212.68 2108.42,1212.68 2109.01,1212.68 2109.59,1212.68 2110.18,1212.68 2110.76,1212.68 2111.35,1212.68 2111.94,1212.68 2112.52,1212.68 2113.11,1212.68 2113.7,1212.68 2114.28,1212.68 2114.87,1212.68 2115.46,1212.68 2116.04,1212.68 2116.63,1212.68 2117.22,1212.68 2117.8,1212.68 2118.39,1212.68 2118.97,1212.68 2119.56,1212.68 2120.15,1212.68 2120.73,1212.68 2121.32,1212.68 2121.91,1212.68 2122.49,1212.68 2123.08,1212.68 2123.67,1212.68 2124.25,1212.68 2124.84,1212.68 2125.42,1212.68 2126.01,1212.68 2126.6,1212.68 2127.18,1212.68 2127.77,1212.68 2128.36,1212.68 2128.94,1212.68 2129.53,1212.68 2130.12,1212.68 2130.7,1212.68 2131.29,1212.68 2131.88,1212.68 2132.46,1212.68 2133.05,1212.68 2133.63,1212.68 2134.22,1212.68 2134.81,1212.68 2135.39,1212.68 2135.98,1212.68 2136.57,1212.68 2137.15,1212.68 2137.74,1212.68 2138.33,1212.68 2138.91,1212.68 2139.5,1212.68 2140.09,1212.68 2140.67,1212.68 2141.26,1212.68 2141.84,1212.68 2142.43,1212.68 2143.02,1212.68 2143.6,1212.68 2144.19,1212.68 2144.78,1212.68 2145.36,1212.68 2145.95,1212.68 2146.54,1212.68 2147.12,1212.68 2147.71,1212.68 2148.3,1212.68 2148.88,1212.68 2149.47,1212.68 2150.05,1212.68 2150.64,1212.68 2151.23,1212.68 2151.81,1212.68 2152.4,1212.68 2152.99,1212.68 2153.57,1212.68 2154.16,1212.68 2154.75,1212.68 2155.33,1212.68 2155.92,1212.68 2156.5,1212.68 2157.09,1212.68 2157.68,1212.68 2158.26,1212.68 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560.42,1191.57 1399.3,899.083 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1233.09 985.439,1191.57 2158.26,1191.57 2158.26,1233.09 985.439,1233.09 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip090)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip090)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip093\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip093)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-4871.05 163.792,-5890.22 164.351,-4360.48 164.91,-4208.6 165.469,-5115.2 166.029,-5960.32 166.588,-4966.98 167.147,-5765.97 167.706,-6494.59 168.266,-7167.59 168.825,-6348.11 169.384,-6946.74 169.943,-7508.98 170.503,-8015.71 171.062,-8457.1 171.621,-8842.31 172.18,-9204.97 172.74,-9018.62 173.299,-9320.87 173.858,-9575.6 174.417,-9378.07 174.977,-9584.89 175.536,-9764.69 176.095,-9568.15 176.655,-9723.7 177.214,-9544.21 177.773,-9373.7 178.332,-8940.6 178.892,-9069.08 179.451,-9145.91 180.01,-9214.5 180.569,-9040.95 181.129,-9075.51 181.688,-9102.89 182.247,-8940.1 182.806,-8771.01 183.366,-8770.27 183.925,-8745.42 184.484,-8569.91 185.043,-8252.33 185.603,-8219.57 186.162,-8045.95 186.721,-7982.9 187.28,-7904.58 187.84,-7722.47 188.399,-7547.08 188.958,-7378.08 189.517,-7310.07 190.077,-7141.61 190.636,-7060.48 191.195,-6967.1 191.754,-6884.96 192.314,-6487.84 192.873,-6256.1 193.432,-6172.88 193.991,-5950.35 194.551,-5732.35 195.11,-5525.23 195.669,-5384.7 196.228,-5244.57 196.788,-4938.36 197.347,-4805.66 197.906,-4622.61 198.465,-4442.78 199.025,-4218.83 199.584,-4106.83 200.143,-4043.8 200.702,-3838.45 201.262,-3685.56 201.821,-3490 202.38,-3420.56 202.939,-3235.63 203.499,-3134.93 204.058,-3078.13 204.617,-2939.95 205.176,-2879.5 205.736,-2785.3 206.295,-2728.13 206.854,-2633.54 207.413,-2574.97 207.973,-2412.57 208.532,-2352.17 209.091,-2259.47 209.65,-2106.04 210.21,-2049.35 210.769,-1900.59 211.328,-1819.23 211.887,-1739.49 212.447,-1607.85 213.006,-1483.02 213.565,-1360.91 214.124,-1300.03 214.684,-1239.25 215.243,-1148.86 215.802,-1089.58 216.361,-978.323 216.921,-947.462 217.48,-867.393 218.039,-819.099 218.598,-792.94 219.158,-645.332 219.717,-596.416 220.276,-546.964 220.835,-499.951 221.395,-477.386 221.954,-406.358 222.513,-383.581 223.072,-366.533 223.632,-256.548 224.191,-171.287 224.75,-133.533 225.309,-95.538 225.869,-59.2423 226.428,16.0586 226.987,26.5522 227.546,102.094 228.106,111.598 228.665,183.494 229.224,206.157 229.783,252.065 230.343,314.655 230.902,319.082 231.461,341.624 232.02,365.318 232.58,368.494 233.139,372.316 233.698,374.699 234.257,420.559 234.817,465.396 235.376,448.645 235.935,474.994 236.494,460.183 237.054,562.177 237.613,582.89 238.172,617.297 238.731,654.783 239.291,689.89 239.85,670.092 240.409,687.617 240.968,704.097 241.528,683.767 242.087,700.303 242.646,698.693 243.205,735.868 243.765,823.584 244.324,856.75 244.883,870.55 245.442,866.308 246.002,857.794 246.561,850.164 247.12,845.993 247.679,862.59 248.239,860.332 248.798,856.346 249.357,850.294 249.916,852.686 250.476,832.496 251.035,848.589 251.594,847.124 252.153,876.529 252.713,886.83 253.272,898.795 253.831,923.788 254.39,916.626 254.95,944.861 255.509,922.412 256.068,914.514 256.627,941.437 257.187,919.304 257.746,931.46 258.305,941.455 258.864,903.365 259.424,900.643 259.983,898.906 260.542,928.214 261.101,940.821 261.661,932.865 262.22,911.845 262.779,927.012 263.338,956.125 263.898,1016.16 264.457,1009.46 265.016,1000.09 265.575,1008.71 266.135,1001.32 266.694,996.985 267.253,990.898 267.812,1001.63 268.372,994.891 268.931,990.812 269.49,1004.7 270.049,984.041 270.609,1009.54 271.168,1001.53 271.727,979.299 272.286,974.102 272.846,1000.19 273.405,1010.28 273.964,1015.17 274.523,1058.27 275.083,1065.27 275.642,1054.47 276.201,1079.05 276.76,1069.03 277.32,1060.81 277.879,1049.43 278.438,1022.5 278.997,1000.61 279.557,1059.48 280.116,1069.46 280.675,1040.21 281.234,1082.65 281.794,1054.92 282.353,1047.21 282.912,1004.61 283.471,983.647 284.031,978.704 284.59,959.111 285.149,938.189 285.708,950.159 286.268,948.298 286.827,963.414 287.386,973.234 287.945,969.977 288.505,931.691 289.064,926.851 289.623,906.732 290.182,921.743 290.742,937.625 291.301,920.592 291.86,917.598 292.419,899.295 292.979,882.883 293.538,867.932 294.097,912.037 294.656,897.006 295.216,913.019 295.775,911.25 296.334,925.229 296.893,924.439 297.453,936.558 298.012,930.365 298.571,960.221 299.13,940.836 299.69,936.269 300.249,918.908 300.808,931.462 301.368,943.77 301.927,921.688 302.486,885.111 303.045,898.97 303.605,896.701 304.164,896.538 304.723,880.948 305.282,897.288 305.842,897.382 306.401,912.717 306.96,942.717 307.519,939.067 308.079,966.608 308.638,943.685 309.197,941.836 309.756,923.771 310.316,923.235 310.875,906.799 311.434,905.943 311.993,899.988 312.553,895.438 313.112,939.406 313.671,957.211 314.23,981.825 314.79,974.062 315.349,968.626 315.908,964.792 316.467,958.921 317.027,968.666 317.586,978.301 318.145,958.227 318.704,987.62 319.264,964.362 319.823,1005.96 320.382,997.221 320.941,971.004 321.501,950.353 322.06,943.264 322.619,954.498 323.178,951.377 323.738,963.435 324.297,953.226 324.856,946.525 325.415,971.258 325.975,981.027 326.534,975.95 327.093,954.449 327.652,964.899 328.212,888.565 328.771,885.998 329.33,866.957 329.889,864.051 330.449,846.791 331.008,829.851 331.567,828.692 332.126,828.959 332.686,841.517 333.245,839.271 333.804,837.884 334.363,821.031 334.923,819.811 335.482,827.248 336.041,811.057 336.6,862.438 337.16,860.87 337.719,860.956 338.278,876.07 338.837,860.945 339.397,908.205 339.956,902.744 340.515,915.575 341.074,911.308 341.634,903.325 342.193,882.977 342.752,914.329 343.311,893.708 343.871,873.879 344.43,886.646 344.989,913.539 345.548,890.915 346.108,885.749 346.667,882.903 347.226,879.359 347.785,859.763 348.345,876.231 348.904,872.821 349.463,856.712 350.022,838.814 350.582,856.702 351.141,852.562 351.7,802.847 352.259,820.699 352.819,838.958 353.378,869.75 353.937,835.695 354.496,819.19 355.056,805.425 355.615,868.925 356.174,835.548 356.733,848.686 357.293,847.443 357.852,842.913 358.411,857.642 358.97,853.712 359.53,850.417 360.089,816.714 360.648,800.906 361.207,769.748 361.767,785.954 362.326,806.296 362.885,819.378 363.444,848.919 364.004,832.997 364.563,814.343 365.122,828.035 365.681,808.189 366.241,809.606 366.8,775.687 367.359,794.639 367.918,794.26 368.478,795.122 369.037,807.439 369.596,806.459 370.155,790.303 370.715,806.274 371.274,809.58 371.833,810.176 372.392,809.012 372.952,808.191 373.511,806.07 374.07,789.211 374.629,808.235 375.189,856.856 375.748,860.023 376.307,859.093 376.866,855.139 377.426,850.239 377.985,858.416 378.544,872.617 379.103,838.513 379.663,854.002 380.222,868.203 380.781,884.426 381.34,864.546 381.9,859.204 382.459,838.959 383.018,840.734 383.577,840.75 384.137,857.525 384.696,855.982 385.255,871.545 385.814,886.946 386.374,880.217 386.933,874.015 387.492,887.447 388.051,882.035 388.611,875.759 389.17,905.353 389.729,899.549 390.288,896.622 390.848,902.859 391.407,898.785 391.966,864.953 392.525,895.01 393.085,905.978 393.644,914.973 394.203,873.574 394.762,882.722 395.322,857.233 395.881,871.616 396.44,879.013 396.999,873.495 397.559,883.353 398.118,907.282 398.677,899.408 399.236,877.45 399.796,887.268 400.355,911.554 400.914,920.903 401.473,912.484 402.033,904.112 402.592,867.475 403.151,877.312 403.71,872.832 404.27,868.923 404.829,878.455 405.388,873.782 405.947,851.473 406.507,831.546 407.066,831.125 407.625,828.271 408.184,807.795 408.744,802.216 409.303,785.049 409.862,768.669 410.421,737.198 410.981,752.27 411.54,738.224 412.099,773.559 412.658,756.279 413.218,761.131 413.777,744.692 414.336,730.653 414.895,735.466 415.455,720.021 416.014,737.995 416.573,708.846 417.132,728.293 417.692,744.976 418.251,747.093 418.81,732.862 419.369,750.39 419.929,771.14 420.488,786.273 421.047,770.173 421.606,836.428 422.166,845.984 422.725,874.503 423.284,872.069 423.843,925.283 424.403,916.186 424.962,926.275 425.521,915.996 426.08,876.513 426.64,853.544 427.199,865.078 427.758,828.708 428.318,808.254 428.877,818.706 429.436,801.298 429.995,766.335 430.555,769.905 431.114,752.484 431.673,721.456 432.232,723.877 432.792,723.741 433.351,757.788 433.91,777.681 434.469,805.705 435.029,819.273 435.588,797.366 436.147,776.614 436.706,755.664 437.266,754.493 437.825,830.685 438.384,811.355 438.943,820.38 439.503,798.393 440.062,826.924 440.621,807.526 441.18,838.779 441.74,798.615 442.299,812.375 442.858,790.781 443.417,788.707 443.977,785.639 444.536,800.919 445.095,795.534 445.654,793.395 446.214,762.833 446.773,761.259 447.332,743.837 447.891,709.891 448.451,759.333 449.01,776.199 449.569,772.419 450.128,786.512 450.688,785.344 451.247,781.777 451.806,793.518 452.365,806.308 452.925,771.072 453.484,805.722 454.043,799.004 454.602,795.7 455.162,790.806 455.721,817.904 456.28,828.57 456.839,820.524 457.399,799.788 457.958,777.994 458.517,807.311 459.076,820.03 459.636,818.614 460.195,861.136 460.754,867.495 461.313,873.984 461.873,902.869 462.432,892.219 462.991,881.048 463.55,856.679 464.11,831.463 464.669,809.963 465.228,790.213 465.787,787.74 466.347,799.112 466.906,778.459 467.465,761.799 468.024,744.484 468.584,730.082 469.143,714.976 469.702,684.058 470.261,671.854 470.821,706.814 471.38,707.239 471.939,727.883 472.498,741.294 473.058,712.571 473.617,744.792 474.176,739.797 474.735,722.59 475.295,709.316 475.854,677.239 476.413,679.539 476.972,729.384 477.532,700.734 478.091,702.935 478.65,670.525 479.209,657.858 479.769,678.797 480.328,680.768 480.887,667.736 481.446,685.084 482.006,687.71 482.565,708.278 483.124,679.702 483.683,698.956 484.243,713.713 484.802,711.823 485.361,730.629 485.92,715.669 486.48,702.56 487.039,685.905 487.598,692 488.157,680.135 488.717,701.424 489.276,703.801 489.835,704.876 490.394,691.51 490.954,694.72 491.513,696.196 492.072,680.754 492.631,667.497 493.191,686.872 493.75,705.49 494.309,693.922 494.868,694.924 495.428,664.239 495.987,668.9 496.546,673.457 497.105,693.88 497.665,679.685 498.224,718.202 498.783,733.816 499.342,747.848 499.902,730.296 500.461,681.511 501.02,698.067 501.579,680.641 502.139,684.797 502.698,720.986 503.257,740.701 503.816,791.561 504.376,807.486 504.935,803.981 505.494,804.826 506.053,802.091 506.613,801.801 507.172,797.584 507.731,779.766 508.29,794.796 508.85,788.912 509.409,751.186 509.968,715.794 510.527,700.999 511.087,667.646 511.646,652.432 512.205,652.284 512.764,690.544 513.324,675.494 513.883,658.388 514.442,678.017 515.001,668.535 515.561,670.594 516.12,686.971 516.679,721.227 517.238,723.646 517.798,705.74 518.357,677.035 518.916,698.072 519.475,745.882 520.035,776.985 520.594,788.162 521.153,801.468 521.712,812.307 522.272,809.527 522.831,838.934 523.39,801.295 523.949,843.676 524.509,823.22 525.068,816.341 525.627,813.851 526.186,825.393 526.746,801.649 527.305,808.856 527.864,769.022 528.423,779.138 528.983,778.029 529.542,787.196 530.101,753.279 530.66,769.624 531.22,749.664 531.779,764.951 532.338,742.777 532.897,724.985 533.457,758.982 534.016,754.271 534.575,750.535 535.134,731.525 535.694,712.158 536.253,765.243 536.812,762.605 537.371,757.857 537.931,739.82 538.49,720.592 539.049,766.194 539.608,746.967 540.168,726.647 540.727,723.985 541.286,739.045 541.845,705.868 542.405,737.753 542.964,684.658 543.523,684.387 544.082,666.954 544.642,701.752 545.201,717.957 545.76,686.321 546.319,654.722 546.879,643.698 547.438,631.484 547.997,651.787 548.556,638.685 549.116,690.643 549.675,709.521 550.234,690.579 550.793,689.052 551.353,703.748 551.912,687.149 552.471,706.836 553.031,724.422 553.59,708.534 554.149,708.052 554.708,693.401 555.268,708.781 555.827,691.829 556.386,714.648 556.945,715.982 557.505,717.358 558.064,702.106 558.623,733.255 559.182,719.319 559.742,735.916 560.301,673.611 560.86,644.95 561.419,696.939 561.979,745.731 562.538,774.815 563.097,772.137 563.656,741.767 564.216,743.665 564.775,744.775 565.334,728.436 565.893,727.904 566.453,741.781 567.012,770.588 567.571,767.254 568.13,766.032 568.69,793.047 569.249,789.287 569.808,799.011 570.367,776.224 570.927,772.104 571.486,770.847 572.045,746.838 572.604,746.206 573.164,728.889 573.723,724.809 574.282,699.931 574.841,734.072 575.401,730.509 575.96,710.824 576.519,710.608 577.078,743.23 577.638,739.049 578.197,737.206 578.756,733.887 579.315,736.33 579.875,703.372 580.434,674.004 580.993,691.525 581.552,709.237 582.112,675.568 582.671,660.978 583.23,697.601 583.789,698.806 584.349,668.482 584.908,670.684 585.467,693.348 586.026,662.886 586.586,666.119 587.145,671.597 587.704,658.743 588.263,663.605 588.823,665.395 589.382,650.559 589.941,653.626 590.5,667.95 591.06,655.183 591.619,626.057 592.178,677.307 592.737,711.096 593.297,727.489 593.856,697.109 594.415,695.98 594.974,665.127 595.534,680.005 596.093,646.8 596.652,665.588 597.211,699.527 597.771,700.748 598.33,654.863 598.889,656.518 599.448,661.659 600.008,664.504 600.567,681.501 601.126,680.879 601.685,667.428 602.245,639.738 602.804,642.879 603.363,629.636 603.922,645.497 604.482,647.156 605.041,664.432 605.6,666.309 606.159,687.11 606.719,689.772 607.278,708.464 607.837,691.045 608.396,676.769 608.956,675.001 609.515,691.581 610.074,678.188 610.633,694.1 611.193,712.513 611.752,730.599 612.311,727.773 612.87,710.186 613.43,729.396 613.989,745.385 614.548,741.412 615.107,752.425 615.667,733.823 616.226,731.198 616.785,683.263 617.344,699.157 617.904,716.737 618.463,717.86 619.022,699.024 619.581,699.608 620.141,684.017 620.7,701.98 621.259,688.086 621.818,705.095 622.378,707.606 622.937,706.116 623.496,703.528 624.055,734.504 624.615,733.484 625.174,714.551 625.733,762.77 626.292,805.099 626.852,800.08 627.411,779.295 627.97,791.091 628.529,770.458 629.089,753.452 629.648,751.506 630.207,730.498 630.766,713.139 631.326,693.655 631.885,694.895 632.444,676.819 633.003,680.833 633.563,633.14 634.122,621.454 634.681,628.152 635.24,583.522 635.8,592.51 636.359,599.596 636.918,591.479 637.477,597.158 638.037,586.522 638.596,624.277 639.155,644.516 639.714,646.685 640.274,666.461 640.833,697.839 641.392,696.607 641.951,681.47 642.511,700.215 643.07,668.523 643.629,683.528 644.188,698.01 644.748,701.688 645.307,686.025 645.866,671.445 646.425,672.678 646.985,676.457 647.544,695.342 648.103,744.063 648.662,725.489 649.222,709.094 649.781,758.888 650.34,770.823 650.899,764.222 651.459,724.868 652.018,741.11 652.577,772.35 653.136,767.769 653.696,744.336 654.255,740.523 654.814,784.958 655.373,793.968 655.933,836.353 656.492,861.347 657.051,838.95 657.61,848.453 658.17,823.422 658.729,818.193 659.288,796.449 659.847,808.729 660.407,801.356 660.966,811.307 661.525,772.718 662.084,789.626 662.644,736.866 663.203,730.914 663.762,725.245 664.321,723.033 664.881,722.887 665.44,721.098 665.999,751.138 666.558,734.858 667.118,715.452 667.677,729.488 668.236,794.38 668.795,790.546 669.355,771.583 669.914,751.284 670.473,748.865 671.032,746.768 671.592,730.459 672.151,710.276 672.71,742.565 673.269,755.879 673.829,737.088 674.388,748.598 674.947,729.416 675.506,742.763 676.066,691.374 676.625,692.061 677.184,676.272 677.743,674.906 678.303,676.072 678.862,678.684 679.421,681.973 679.981,684.139 680.54,685.257 681.099,636.481 681.658,654.796 682.218,642.157 682.777,629.129 683.336,617.991 683.895,621.9 684.455,625.556 685.014,628.675 685.573,616.2 686.132,618.857 686.692,602.597 687.251,601.528 687.81,608.501 688.369,646.398 688.929,635.635 689.488,640.243 690.047,642.709 690.606,647.505 691.166,667.935 691.725,667.673 692.284,685.367 692.843,716.151 693.403,713.269 693.962,681.716 694.521,699.837 695.08,697.426 695.64,661.725 696.199,663.364 696.758,633.777 697.317,637.052 697.877,642.459 698.436,645.525 698.995,648.233 699.554,649.707 700.114,638.204 700.673,657.514 701.232,687.809 701.791,693.175 702.351,768.928 702.91,747.977 703.469,698.267 704.028,680.02 704.588,677.365 705.147,659.109 705.706,626.672 706.265,648.457 706.825,648.245 707.384,651.485 707.943,668.277 708.502,669.028 709.062,669.73 709.621,653.029 710.18,686.047 710.739,657.36 711.299,706.543 711.858,737.924 712.417,737.309 712.976,733.714 713.536,729.866 714.095,712.083 714.654,676.168 715.213,679.799 715.773,696.884 716.332,716.004 716.891,700.418 717.45,703.586 718.01,689.107 718.569,657.388 719.128,675.969 719.687,676.236 720.247,673.497 720.806,678.043 721.365,675.432 721.924,692.215 722.484,675.711 723.043,679.092 723.602,681.645 724.161,715.435 724.721,668.476 725.28,672.313 725.839,676.583 726.398,692.808 726.958,674.259 727.517,690.422 728.076,707.917 728.635,677.341 729.195,656.785 729.754,626.259 730.313,627.211 730.872,645.227 731.432,633.876 731.991,672.201 732.55,690.247 733.109,688.14 733.669,734.856 734.228,734.14 734.787,731.99 735.346,746.193 735.906,776.63 736.465,774.118 737.024,755.031 737.583,734.643 738.143,744.823 738.702,727.148 739.261,728.779 739.82,680.554 740.38,712.242 740.939,725.36 741.498,724.046 742.057,706.15 742.617,739.651 743.176,722.353 743.735,725.873 744.294,724.37 744.854,690.702 745.413,671.705 745.972,670.42 746.531,703.175 747.091,732.932 747.65,729.832 748.209,726.57 748.768,738.451 749.328,717.711 749.887,700.055 750.446,701.969 751.005,734.969 751.565,716 752.124,699.691 752.683,698.529 753.242,666.884 753.802,666.661 754.361,679.884 754.92,681.226 755.479,695.216 756.039,693.747 756.598,693.397 757.157,690.136 757.716,672.826 758.276,656.531 758.835,663.368 759.394,677.96 759.953,674.093 760.513,657.664 761.072,692.398 761.631,676.154 762.19,711.183 762.75,710.45 763.309,709.546 763.868,739.5 764.427,721.981 764.987,719.412 765.546,736.302 766.105,750.412 766.664,746.043 767.224,741.291 767.783,741.038 768.342,770.226 768.901,748.391 769.461,748.724 770.02,745.005 770.579,784.794 771.138,779.371 771.698,775.851 772.257,786.134 772.816,798.637 773.375,753.348 773.935,715.323 774.494,717.628 775.053,733.227 775.612,715.461 776.172,713.914 776.731,728.646 777.29,744.306 777.849,742.387 778.409,759.384 778.968,793.414 779.527,752.213 780.086,780.692 780.646,741.531 781.205,739.005 781.764,721.245 782.323,701.37 782.883,699.683 783.442,666.474 784.001,650.219 784.56,650.759 785.12,651.398 785.679,651.803 786.238,672.233 786.797,672.655 787.357,675.622 787.916,677.464 788.475,695.62 789.034,729.781 789.594,746.743 790.153,712.674 790.712,724.076 791.271,754.347 791.831,768.852 792.39,778.552 792.949,789.784 793.508,780.857 794.068,724.614 794.627,725.313 795.186,769.611 795.745,792.257 796.305,754.551 796.864,721.619 797.423,752.001 797.982,747.905 798.542,729.706 799.101,712.487 799.66,693.555 800.219,675.734 800.779,676.208 801.338,694.218 801.897,676.992 802.456,660.613 803.016,647.139 803.575,669.199 804.134,601.197 804.693,620.742 805.253,610.38 805.812,612.532 806.371,616.044 806.931,634.762 807.49,669.774 808.049,651.857 808.608,619.825 809.168,621.474 809.727,624.212 810.286,663.647 810.845,664.588 811.405,682.379 811.964,684.95 812.523,699.564 813.082,717.367 813.642,685.67 814.201,703.061 814.76,671.303 815.319,655.065 815.879,688 816.438,673.303 816.997,673.297 817.556,672.819 818.116,639.777 818.675,624.104 819.234,662.423 819.793,680.06 820.353,680.615 820.912,664.358 821.471,650.717 822.03,702.836 822.59,714.065 823.149,695.618 823.708,661.499 824.267,661.273 824.827,678.838 825.386,663.936 825.945,681.161 826.504,679.979 827.064,663.332 827.623,664.937 828.182,681.316 828.741,718.709 829.301,715.605 829.86,683.968 830.419,652.358 830.978,687.614 831.538,685.423 832.097,684.858 832.656,702.198 833.215,752.055 833.775,754.443 834.334,735.36 834.893,716.774 835.452,748.33 836.012,747.861 836.571,743.604 837.13,756.879 837.689,770.39 838.249,768.317 838.808,735.443 839.367,749.318 839.926,716.632 840.486,698.838 841.045,714.628 841.604,728.553 842.163,726.539 842.723,722.006 843.282,672.219 843.841,690.392 844.4,687.687 844.96,657.883 845.519,658.947 846.078,643.628 846.637,648.476 847.197,668.205 847.756,654.626 848.315,686.519 848.874,700.897 849.434,680.262 849.993,681.103 850.552,666.442 851.111,651.851 851.671,621.67 852.23,591.442 852.789,583.381 853.348,588.913 853.908,593.541 854.467,582.213 855.026,572.863 855.585,596.872 856.145,570.998 856.704,592.048 857.263,596.431 857.822,601.409 858.382,639.242 858.941,578.22 859.5,601.015 860.059,587.845 860.619,604.703 861.178,607.581 861.737,612.91 862.296,601.313 862.856,603.891 863.415,609.644 863.974,596.017 864.533,602.827 865.093,588.92 865.652,611.843 866.211,649.178 866.77,653.339 867.33,658.597 867.889,659.061 868.448,676.873 869.007,708.947 869.567,738.196 870.126,750.717 870.685,750.903 871.244,748.111 871.804,725.366 872.363,757.106 872.922,739.468 873.481,734.323 874.041,735.017 874.6,719.891 875.159,701.311 875.718,668.57 876.278,670.536 876.837,704.232 877.396,703.806 877.955,718.745 878.515,687.069 879.074,706.208 879.633,704.684 880.192,705.095 880.752,736.694 881.311,751.143 881.87,747.861 882.429,766.421 882.989,762.557 883.548,773.537 884.107,770.656 884.666,749.823 885.226,793.974 885.785,773.197 886.344,784.338 886.903,780.252 887.463,745.251 888.022,724.659 888.581,710.104 889.14,706.928 889.7,706.282 890.259,656.704 890.818,657.755 891.377,663.549 891.937,648.794 892.496,681.298 893.055,663.69 893.614,649.605 894.174,647.882 894.733,636.287 895.292,686.977 895.851,685.769 896.411,673.32 896.97,640.867 897.529,691.544 898.088,692.874 898.648,693.505 899.207,724.716 899.766,755.777 900.325,717.939 900.885,730.287 901.444,724.059 902.003,724.936 902.562,723.592 903.122,720.586 903.681,721.64 904.24,706.813 904.799,739.692 905.359,736.416 905.918,782.912 906.477,796.687 907.036,772.416 907.596,717.361 908.155,747.496 908.714,743.211 909.273,743.221 909.833,755.243 910.392,752.144 910.951,745.936 911.51,725.558 912.07,702.97 912.629,749.806 913.188,729.052 913.747,731.152 914.307,728.24 914.866,740.008 915.425,735.198 915.984,715.188 916.544,708.764 917.103,744.175 917.662,730.703 918.221,743.763 918.781,724.688 919.34,717.494 919.899,733.265 920.458,732.984 921.018,746.166 921.577,741.284 922.136,741.668 922.695,705.148 923.255,736.927 923.814,748.809 924.373,763.591 924.932,774.414 925.492,786.736 926.051,784.211 926.61,844.263 927.169,850.045 927.729,858.765 928.288,816.624 928.847,793.133 929.406,819.372 929.966,795.573 930.525,804.415 931.084,794.918 931.644,802.873 932.203,780.713 932.762,761.265 933.321,738.975 933.881,750.58 934.44,764.035 934.999,762.07 935.558,760.365 936.118,769.608 936.677,731.928 937.236,733.24 937.795,730.753 938.355,730.882 938.914,777.108 939.473,769.228 940.032,782.703 940.592,759.405 941.151,768.697 941.71,745.35 942.269,689.775 942.829,690.557 943.388,721.938 943.947,700.853 944.506,700.023 945.066,701.352 945.625,681.627 946.184,665.853 946.743,648.623 947.303,619.661 947.862,576.08 948.421,616.09 948.98,635.184 949.54,638.959 950.099,657.966 950.658,678.057 951.217,674.6 951.777,613.526 952.336,605.396 952.895,593.475 953.454,565.389 954.014,522.444 954.573,516.011 955.132,528.449 955.691,506.695 956.251,549.831 956.81,573.553 957.369,578.279 957.928,581.995 958.488,590.261 959.047,549.871 959.606,556.337 960.165,548.722 960.725,540.22 961.284,559.561 961.843,585.06 962.402,574.297 962.962,612.961 963.521,629.332 964.08,633.256 964.639,654.242 965.199,689.153 965.758,687.084 966.317,675.276 966.876,689.666 967.436,670.655 967.995,687.15 968.554,705.164 969.113,673.378 969.673,657.731 970.232,672.447 970.791,675.085 971.35,678.848 971.91,694.911 972.469,714.549 973.028,730.194 973.587,710.758 974.147,710.417 974.706,726.827 975.265,742.231 975.824,767.729 976.384,777.231 976.943,768.472 977.502,767.674 978.061,748.228 978.621,713.709 979.18,745.119 979.739,774.765 980.298,785.195 980.858,761.327 981.417,769.898 981.976,731.536 982.535,746.273 983.095,725.828 983.654,689.423 984.213,658.728 984.772,643.798 985.332,644.258 985.891,632.363 986.45,603.373 987.009,628.136 987.569,631.832 988.128,617.184 988.687,573.733 989.246,562.204 989.806,555.077 990.365,514.215 990.924,524.637 991.483,566.215 992.043,558.299 992.602,578.605 993.161,567.113 993.72,556.936 994.28,535.255 994.839,527.981 995.398,536.42 995.957,592.873 996.517,598.524 997.076,621.536 997.635,609.856 998.194,614.958 998.754,602.151 999.313,673.704 999.872,674.684 1000.43,662.469 1000.99,646.767 1001.55,648.43 1002.11,635.769 1002.67,672.064 1003.23,707.035 1003.79,706.862 1004.35,704.208 1004.91,720.412 1005.46,700.31 1006.02,682.295 1006.58,696.749 1007.14,698.954 1007.7,714.243 1008.26,712.084 1008.82,712.377 1009.38,711.916 1009.94,693.653 1010.5,694.435 1011.06,722.359 1011.62,717.806 1012.18,745.938 1012.73,726.237 1013.29,743.746 1013.85,719.946 1014.41,703.712 1014.97,721.409 1015.53,717.451 1016.09,700.361 1016.65,665.275 1017.21,650.859 1017.77,668.695 1018.33,688.113 1018.89,716.374 1019.45,700.934 1020.01,700.916 1020.56,650.753 1021.12,668.955 1021.68,655.582 1022.24,641.868 1022.8,646.675 1023.36,648.777 1023.92,649.899 1024.48,649.962 1025.04,686.815 1025.6,722.428 1026.16,737.71 1026.72,736.052 1027.28,699.678 1027.83,713.821 1028.39,676.938 1028.95,659.627 1029.51,676.533 1030.07,690.725 1030.63,669.83 1031.19,653.864 1031.75,653.43 1032.31,703.499 1032.87,699.937 1033.43,668.054 1033.99,654.08 1034.55,623.59 1035.1,595.434 1035.66,581.086 1036.22,584.478 1036.78,556.591 1037.34,544.079 1037.9,599.896 1038.46,604.831 1039.02,658.883 1039.58,676.99 1040.14,679.22 1040.7,679.112 1041.26,696.486 1041.82,666.835 1042.38,681.626 1042.93,665.69 1043.49,653.127 1044.05,686.144 1044.61,655.708 1045.17,657.413 1045.73,625.527 1046.29,612.978 1046.85,601.332 1047.41,606.295 1047.97,644.72 1048.53,661.045 1049.09,648.489 1049.65,651.131 1050.2,652.575 1050.76,668.817 1051.32,669.39 1051.88,667.648 1052.44,697.507 1053,745.476 1053.56,744.816 1054.12,758.034 1054.68,771.798 1055.24,738.741 1055.8,801.75 1056.36,782.017 1056.92,792.045 1057.48,803.035 1058.03,796.859 1058.59,774.761 1059.15,756.863 1059.71,736.887 1060.27,736.39 1060.83,735.429 1061.39,683.6 1061.95,698.944 1062.51,663.56 1063.07,620.458 1063.63,606.79 1064.19,624.581 1064.75,579.94 1065.3,634.097 1065.86,637.646 1066.42,638.882 1066.98,642.666 1067.54,646.953 1068.1,671.539 1068.66,639.127 1069.22,640.638 1069.78,658.787 1070.34,644.083 1070.9,647.961 1071.46,663.472 1072.02,651 1072.57,655.104 1073.13,625.544 1073.69,628.691 1074.25,634.044 1074.81,621.941 1075.37,642.976 1075.93,627.764 1076.49,616.053 1077.05,602.178 1077.61,609.638 1078.17,598.779 1078.73,648.228 1079.29,666.542 1079.85,685.173 1080.4,649.399 1080.96,653.255 1081.52,633.355 1082.08,698.679 1082.64,749.797 1083.2,743.851 1083.76,709.044 1084.32,723.468 1084.88,685.193 1085.44,683.08 1086,682.828 1086.56,683.367 1087.12,698.038 1087.67,712.115 1088.23,744.424 1088.79,757.344 1089.35,738.361 1089.91,738.96 1090.47,755.432 1091.03,738.107 1091.59,751.153 1092.15,730.191 1092.71,726.596 1093.27,713.251 1093.83,711.426 1094.39,774.778 1094.94,805.564 1095.5,815.741 1096.06,743.552 1096.62,738.843 1097.18,751.163 1097.74,732.884 1098.3,679.369 1098.86,678.101 1099.42,694.728 1099.98,695.117 1100.54,675.465 1101.1,656.357 1101.66,673.26 1102.22,670.571 1102.77,688.278 1103.33,707.394 1103.89,703.168 1104.45,688.48 1105.01,704.253 1105.57,671.011 1106.13,702.95 1106.69,715.141 1107.25,697.148 1107.81,711.815 1108.37,692.117 1108.93,671.672 1109.49,686.67 1110.04,668.903 1110.6,667.967 1111.16,640.751 1111.72,626.498 1112.28,581.118 1112.84,571.86 1113.4,565.525 1113.96,587.501 1114.52,609.739 1115.08,611.406 1115.64,632.087 1116.2,620.202 1116.76,621.781 1117.31,623.609 1117.87,661.487 1118.43,682.12 1118.99,684.396 1119.55,703.833 1120.11,705.633 1120.67,673.78 1121.23,675.664 1121.79,695.6 1122.35,680.96 1122.91,726.969 1123.47,739.376 1124.03,736.859 1124.59,734.677 1125.14,730.346 1125.7,747.688 1126.26,724.249 1126.82,723.019 1127.38,675.984 1127.94,677.984 1128.5,631.624 1129.06,618.953 1129.62,638.13 1130.18,608.327 1130.74,612.244 1131.3,649.103 1131.86,651.523 1132.41,649.514 1132.97,651.304 1133.53,655.776 1134.09,690.11 1134.65,706.185 1135.21,724.008 1135.77,705.969 1136.33,704.386 1136.89,655.283 1137.45,608.17 1138.01,592.444 1138.57,612.189 1139.13,634.22 1139.68,655.62 1140.24,675.972 1140.8,674.57 1141.36,707.604 1141.92,725.155 1142.48,739.246 1143.04,704.805 1143.6,724.664 1144.16,672.314 1144.72,653.927 1145.28,639.977 1145.84,661.885 1146.4,664.332 1146.96,697.188 1147.51,712.906 1148.07,677.766 1148.63,678.792 1149.19,711.039 1149.75,706.688 1150.31,708.843 1150.87,738.109 1151.43,719.562 1151.99,717.776 1152.55,716.694 1153.11,713.878 1153.67,696.458 1154.23,715.152 1154.78,698.899 1155.34,680.032 1155.9,682.593 1156.46,647.307 1157.02,670.235 1157.58,675.092 1158.14,673.598 1158.7,655.322 1159.26,661.157 1159.82,661.806 1160.38,646.111 1160.94,683.897 1161.5,717.3 1162.05,732.981 1162.61,763.074 1163.17,741.515 1163.73,772.627 1164.29,737.564 1164.85,701.991 1165.41,682.819 1165.97,714.891 1166.53,730.439 1167.09,712.828 1167.65,727.741 1168.21,710.868 1168.77,726.513 1169.33,705.137 1169.88,737.984 1170.44,753.904 1171,750.023 1171.56,745.629 1172.12,709.751 1172.68,693.703 1173.24,708.839 1173.8,707.812 1174.36,705.997 1174.92,672.873 1175.48,705.626 1176.04,691.086 1176.6,689.402 1177.15,704.479 1177.71,690.475 1178.27,676.167 1178.83,681.169 1179.39,666.962 1179.95,700.28 1180.51,665.973 1181.07,685.208 1181.63,683.83 1182.19,685.353 1182.75,683.921 1183.31,669.791 1183.87,687.723 1184.43,701.581 1184.98,682.592 1185.54,696.989 1186.1,697.226 1186.66,697.425 1187.22,690.629 1187.78,735.899 1188.34,731.458 1188.9,746.243 1189.46,743.112 1190.02,772.409 1190.58,783.167 1191.14,767.307 1191.7,761.167 1192.25,773.649 1192.81,780.749 1193.37,776.931 1193.93,773.86 1194.49,754.572 1195.05,734.976 1195.61,715.567 1196.17,744.069 1196.73,738.892 1197.29,750.037 1197.85,779.313 1198.41,778.458 1198.97,789.128 1199.52,783.006 1200.08,762.315 1200.64,774.663 1201.2,756.279 1201.76,750.678 1202.32,715.161 1202.88,731.496 1203.44,711.04 1204,690.446 1204.56,673.509 1205.12,656.604 1205.68,627.421 1206.24,629.915 1206.8,613.959 1207.35,613.138 1207.91,582.853 1208.47,567.718 1209.03,592.316 1209.59,613.043 1210.15,616.773 1210.71,602.9 1211.27,592.978 1211.83,579.623 1212.39,602.157 1212.95,606.337 1213.51,614.43 1214.07,635.939 1214.62,653.629 1215.18,675.039 1215.74,678.339 1216.3,661.968 1216.86,663.19 1217.42,649.54 1217.98,667.277 1218.54,654.51 1219.1,652.971 1219.66,668.368 1220.22,715.296 1220.78,697.059 1221.34,681.201 1221.89,662.556 1222.45,679.562 1223.01,676.292 1223.57,675.21 1224.13,660.831 1224.69,645.097 1225.25,633.591 1225.81,636.429 1226.37,623.976 1226.93,627.556 1227.49,629.072 1228.05,634.241 1228.61,620.658 1229.17,608.21 1229.72,594.129 1230.28,550.618 1230.84,576.148 1231.4,581.392 1231.96,585.671 1232.52,592.396 1233.08,561.938 1233.64,632.935 1234.2,638.03 1234.76,654.696 1235.32,673.589 1235.88,704.844 1236.44,706.3 1236.99,687.867 1237.55,672.101 1238.11,688.554 1238.67,706.537 1239.23,691.534 1239.79,694.873 1240.35,709.441 1240.91,723.329 1241.47,719.902 1242.03,730.937 1242.59,710.988 1243.15,725.924 1243.71,709.078 1244.26,727.493 1244.82,724.157 1245.38,690.036 1245.94,687.602 1246.5,720.064 1247.06,765.516 1247.62,763.087 1248.18,773.38 1248.74,768.986 1249.3,766.319 1249.86,763.162 1250.42,759.301 1250.98,745.123 1251.54,758.92 1252.09,756.937 1252.65,782.983 1253.21,761.014 1253.77,790.56 1254.33,802.556 1254.89,781.938 1255.45,761.337 1256.01,769.717 1256.57,781.527 1257.13,743.897 1257.69,708.866 1258.25,704.587 1258.81,707.782 1259.36,705.759 1259.92,685.963 1260.48,654.904 1261.04,657.431 1261.6,697.011 1262.16,680.502 1262.72,725.832 1263.28,702.708 1263.84,685.268 1264.4,718.28 1264.96,712.104 1265.52,711.125 1266.08,692.961 1266.63,628.991 1267.19,645.325 1267.75,649.884 1268.31,653.28 1268.87,636.201 1269.43,640.26 1269.99,628.955 1270.55,647.662 1271.11,681.628 1271.67,647.98 1272.23,638.809 1272.79,658.317 1273.35,644.095 1273.91,633.839 1274.46,637.226 1275.02,657.077 1275.58,627.185 1276.14,630.284 1276.7,632.341 1277.26,635.424 1277.82,652.437 1278.38,653.665 1278.94,670.049 1279.5,658.452 1280.06,643.871 1280.62,641.754 1281.18,642.49 1281.73,631.244 1282.29,620.878 1282.85,606.092 1283.41,593.706 1283.97,595.895 1284.53,602.323 1285.09,623.963 1285.65,610.247 1286.21,615.498 1286.77,620.678 1287.33,639.043 1287.89,642.952 1288.45,646.179 1289,647.697 1289.56,646.71 1290.12,662.093 1290.68,614.898 1291.24,587.203 1291.8,590.963 1292.36,616.608 1292.92,685.117 1293.48,670.694 1294.04,705.819 1294.6,685.387 1295.16,685.429 1295.72,700.696 1296.28,736.934 1296.83,736.718 1297.39,718.548 1297.95,719.356 1298.51,735.612 1299.07,747.241 1299.63,778.786 1300.19,773.365 1300.75,816.817 1301.31,825.562 1301.87,797.729 1302.43,822.082 1302.99,832.867 1303.55,807.218 1304.1,833.685 1304.66,824.441 1305.22,830.724 1305.78,839.157 1306.34,798.7 1306.9,791.4 1307.46,799.604 1308.02,822.391 1308.58,783.516 1309.14,765.188 1309.7,745.875 1310.26,725.849 1310.82,703.721 1311.38,720.183 1311.93,766.197 1312.49,777.788 1313.05,773.426 1313.61,785.65 1314.17,766.106 1314.73,761.698 1315.29,757.859 1315.85,758.842 1316.41,738.22 1316.97,750.719 1317.53,728.853 1318.09,710.361 1318.65,727.752 1319.2,740.272 1319.76,752.532 1320.32,767.111 1320.88,764.383 1321.44,792.378 1322,784.852 1322.56,726.582 1323.12,740.732 1323.68,724.262 1324.24,707.026 1324.8,689.703 1325.36,688.226 1325.92,689.237 1326.47,673.609 1327.03,672.617 1327.59,659.889 1328.15,626.77 1328.71,611.497 1329.27,599.719 1329.83,572.561 1330.39,576.947 1330.95,564.653 1331.51,555.317 1332.07,546.212 1332.63,552.468 1333.19,573.04 1333.75,566.407 1334.3,539.056 1334.86,514.854 1335.42,539.015 1335.98,546.362 1336.54,553.164 1337.1,543.169 1337.66,553.454 1338.22,534.977 1338.78,593.169 1339.34,582.628 1339.9,586.459 1340.46,607.965 1341.02,578.876 1341.57,619.214 1342.13,619.76 1342.69,654.346 1343.25,656.97 1343.81,676.962 1344.37,642.066 1344.93,660.879 1345.49,679.189 1346.05,714.136 1346.61,700.113 1347.17,697.464 1347.73,681.672 1348.29,666.279 1348.84,667.303 1349.4,683.308 1349.96,695.692 1350.52,647.407 1351.08,649.061 1351.64,619.744 1352.2,657.704 1352.76,660.397 1353.32,630.083 1353.88,683.825 1354.44,719.103 1355,733.433 1355.56,717.316 1356.12,681.982 1356.67,650.802 1357.23,636.243 1357.79,639.464 1358.35,628.814 1358.91,645.574 1359.47,665.798 1360.03,650.1 1360.59,652.239 1361.15,653.437 1361.71,695.178 1362.27,712.942 1362.83,744.477 1363.39,741.667 1363.94,771.521 1364.5,768.252 1365.06,761.905 1365.62,734.935 1366.18,747.035 1366.74,743.583 1367.3,712.81 1367.86,696.468 1368.42,696.547 1368.98,697.614 1369.54,684.825 1370.1,702.063 1370.66,702.719 1371.21,700.839 1371.77,699.828 1372.33,696.725 1372.89,679.439 1373.45,715.968 1374.01,730.861 1374.57,743.072 1375.13,721.621 1375.69,703.245 1376.25,717.346 1376.81,698.23 1377.37,766.559 1377.93,731.954 1378.49,745.787 1379.04,727.111 1379.6,705.628 1380.16,705.934 1380.72,708.254 1381.28,706.859 1381.84,705.742 1382.4,705.745 1382.96,734.1 1383.52,759.674 1384.08,803.778 1384.64,818.036 1385.2,811.667 1385.76,788.077 1386.31,763.444 1386.87,758.153 1387.43,769.442 1387.99,783.551 1388.55,731.992 1389.11,731.222 1389.67,760.936 1390.23,741.886 1390.79,737.842 1391.35,735.061 1391.91,731.775 1392.47,710.782 1393.03,677.187 1393.58,726.43 1394.14,772.615 1394.7,755.937 1395.26,787.352 1395.82,735.773 1396.38,732.138 1396.94,679.212 1397.5,679.571 1398.06,714.265 1398.62,695.845 1399.18,712.314 1399.74,709.704 1400.3,722.55 1400.86,735.349 1401.41,714.522 1401.97,713.858 1402.53,694.931 1403.09,675.508 1403.65,676.691 1404.21,661.803 1404.77,629.227 1405.33,631.379 1405.89,664.106 1406.45,664.779 1407.01,663.988 1407.57,635.775 1408.13,635.206 1408.68,654.506 1409.24,605.851 1409.8,591.341 1410.36,596.069 1410.92,601.905 1411.48,569.859 1412.04,560.319 1412.6,551.764 1413.16,577.036 1413.72,566.968 1414.28,590.355 1414.84,578.2 1415.4,551.336 1415.95,558.538 1416.51,628.609 1417.07,648.488 1417.63,630.418 1418.19,636.905 1418.75,591.14 1419.31,597.542 1419.87,618.242 1420.43,623.822 1420.99,631.823 1421.55,603.288 1422.11,623.172 1422.67,641.386 1423.23,628.372 1423.78,680.872 1424.34,683.498 1424.9,698.837 1425.46,711.051 1426.02,710.644 1426.58,725.879 1427.14,724.323 1427.7,753.772 1428.26,717.463 1428.82,698.063 1429.38,696.93 1429.94,712.244 1430.5,724.916 1431.05,740.146 1431.61,774.665 1432.17,754.252 1432.73,750.051 1433.29,749.234 1433.85,714.143 1434.41,694.76 1434.97,710.052 1435.53,704.39 1436.09,733.204 1436.65,729.048 1437.21,725.506 1437.77,735.631 1438.33,684.065 1438.88,684.321 1439.44,700.087 1440,702.541 1440.56,639.129 1441.12,656.558 1441.68,672.848 1442.24,657.178 1442.8,640.09 1443.36,659.217 1443.92,660.492 1444.48,661.486 1445.04,678.529 1445.6,645.241 1446.15,650.867 1446.71,685.01 1447.27,684.731 1447.83,731.262 1448.39,728.188 1448.95,727.082 1449.51,709.851 1450.07,707.598 1450.63,708.636 1451.19,708.78 1451.75,678.11 1452.31,710.319 1452.87,709.545 1453.42,712.671 1453.98,729.326 1454.54,695.148 1455.1,711.478 1455.66,725.572 1456.22,740.853 1456.78,755.181 1457.34,768.716 1457.9,794.046 1458.46,819.752 1459.02,811.653 1459.58,833.216 1460.14,826.081 1460.7,851.124 1461.25,812.086 1461.81,805.517 1462.37,800.924 1462.93,761.499 1463.49,757.968 1464.05,754.163 1464.61,752.777 1465.17,717.484 1465.73,684.345 1466.29,652.591 1466.85,636.951 1467.41,638.097 1467.97,638.497 1468.52,637.829 1469.08,643.392 1469.64,646.402 1470.2,650.038 1470.76,635.016 1471.32,654.786 1471.88,654.107 1472.44,687.436 1473,651.913 1473.56,652.961 1474.12,671.961 1474.68,676.586 1475.24,659.042 1475.79,628.133 1476.35,615.605 1476.91,638.529 1477.47,673.378 1478.03,672.875 1478.59,693.492 1479.15,710.483 1479.71,705.208 1480.27,752.427 1480.83,736.551 1481.39,748.562 1481.95,732.289 1482.51,743.148 1483.07,739.086 1483.62,732.529 1484.18,728.486 1484.74,758.05 1485.3,755.875 1485.86,736.871 1486.42,715.28 1486.98,732.183 1487.54,711.48 1488.1,741.514 1488.66,722.197 1489.22,706.609 1489.78,671.158 1490.34,676.57 1490.89,722.379 1491.45,724.123 1492.01,689.506 1492.57,669.733 1493.13,656.009 1493.69,640.779 1494.25,658.631 1494.81,646.172 1495.37,647.271 1495.93,633.344 1496.49,651.413 1497.05,621.928 1497.61,592.571 1498.16,596.097 1498.72,630.428 1499.28,599.863 1499.84,570.058 1500.4,593.128 1500.96,565.625 1501.52,572.002 1502.08,575.653 1502.64,561.799 1503.2,586.67 1503.76,607.685 1504.32,612.356 1504.88,629.346 1505.44,651.866 1505.99,656.35 1506.55,677.114 1507.11,650.354 1507.67,636.021 1508.23,671.207 1508.79,694.112 1509.35,689.73 1509.91,654.976 1510.47,637.227 1511.03,620.92 1511.59,634.047 1512.15,636.469 1512.71,639.506 1513.26,625.192 1513.82,628.121 1514.38,615.559 1514.94,619.048 1515.5,607.377 1516.06,596.822 1516.62,633.792 1517.18,622.333 1517.74,625.505 1518.3,610.54 1518.86,613.154 1519.42,634.209 1519.98,590.389 1520.53,628.129 1521.09,630.301 1521.65,665.516 1522.21,699.974 1522.77,685.741 1523.33,685.324 1523.89,713.581 1524.45,727.983 1525.01,739.314 1525.57,687.529 1526.13,687.63 1526.69,673.545 1527.25,687.73 1527.81,688.454 1528.36,688.196 1528.92,703.054 1529.48,746.724 1530.04,742.311 1530.6,739.87 1531.16,736.665 1531.72,733.82 1532.28,730.451 1532.84,744.733 1533.4,726.399 1533.96,705.944 1534.52,656.965 1535.08,689.665 1535.63,688.934 1536.19,687.213 1536.75,669.667 1537.31,684.086 1537.87,652.405 1538.43,636.652 1538.99,625.493 1539.55,647.202 1540.11,633.105 1540.67,636.176 1541.23,639.823 1541.79,658.781 1542.35,674.903 1542.9,693.243 1543.46,725.967 1544.02,724.704 1544.58,722.291 1545.14,705.452 1545.7,702.697 1546.26,685.524 1546.82,715.852 1547.38,759.529 1547.94,772.999 1548.5,771.173 1549.06,748.186 1549.62,713.928 1550.18,729.474 1550.73,728.963 1551.29,706.357 1551.85,720.927 1552.41,720.866 1552.97,718.268 1553.53,746.67 1554.09,724 1554.65,721.896 1555.21,736.981 1555.77,753.507 1556.33,767.605 1556.89,775.694 1557.45,787.381 1558,796.929 1558.56,791.854 1559.12,801.788 1559.68,776.971 1560.24,724.413 1560.8,725.636 1561.36,671.507 1561.92,623.302 1562.48,640.975 1563.04,615.452 1563.6,653.915 1564.16,656.731 1564.72,701.569 1565.28,716.574 1565.83,712.867 1566.39,710.226 1566.95,709.475 1567.51,689.769 1568.07,736.552 1568.63,721.614 1569.19,705.019 1569.75,737.528 1570.31,750.579 1570.87,749.407 1571.43,729.74 1571.99,710.755 1572.55,711.583 1573.1,694.869 1573.66,658.347 1574.22,642.252 1574.78,629.269 1575.34,646.425 1575.9,596.444 1576.46,632.957 1577.02,650.341 1577.58,632.737 1578.14,619.07 1578.7,673.464 1579.26,677.109 1579.82,662.411 1580.37,679.847 1580.93,679.383 1581.49,659.938 1582.05,657.435 1582.61,692.045 1583.17,675.428 1583.73,660.413 1584.29,696.781 1584.85,695.865 1585.41,693.84 1585.97,696.382 1586.53,715.148 1587.09,713.324 1587.65,726.836 1588.2,739.245 1588.76,705.411 1589.32,737.633 1589.88,723.349 1590.44,724.572 1591,721.353 1591.56,688.319 1592.12,705.459 1592.68,702.227 1593.24,670.567 1593.8,671.057 1594.36,706.69 1594.92,721.081 1595.47,716.795 1596.03,650.901 1596.59,637.153 1597.15,655.029 1597.71,659.63 1598.27,649.6 1598.83,669.15 1599.39,690.286 1599.95,674.171 1600.51,689.252 1601.07,690.862 1601.63,676.835 1602.19,661.847 1602.74,678.718 1603.3,660.327 1603.86,712.268 1604.42,709.785 1604.98,741.458 1605.54,742.532 1606.1,754.966 1606.66,748.303 1607.22,730.814 1607.78,760.1 1608.34,755.079 1608.9,748.651 1609.46,793.186 1610.02,790.911 1610.57,783.337 1611.13,744.293 1611.69,757.532 1612.25,741.822 1612.81,707.813 1613.37,687.688 1613.93,683.269 1614.49,670.073 1615.05,686.563 1615.61,685.609 1616.17,670.037 1616.73,670.163 1617.29,668.956 1617.84,669.043 1618.4,653.385 1618.96,685.546 1619.52,665.579 1620.08,682.711 1620.64,693.852 1621.2,679.532 1621.76,677.13 1622.32,687.114 1622.88,672.085 1623.44,672.517 1624,622.381 1624.56,642.722 1625.11,630.489 1625.67,615.512 1626.23,635.598 1626.79,625.34 1627.35,645.188 1627.91,695.69 1628.47,677.179 1629.03,663.661 1629.59,663.694 1630.15,646.725 1630.71,632.812 1631.27,654.874 1631.83,639.026 1632.39,641.619 1632.94,677.419 1633.5,679.187 1634.06,710.112 1634.62,694.341 1635.18,710.577 1635.74,695.203 1636.3,698.216 1636.86,699.465 1637.42,667.396 1637.98,636.244 1638.54,654.944 1639.1,655.488 1639.66,659.593 1640.21,615.799 1640.77,619.869 1641.33,625.574 1641.89,628.189 1642.45,633.675 1643.01,654.492 1643.57,689.563 1644.13,687.094 1644.69,687.055 1645.25,717.388 1645.81,734.13 1646.37,716.682 1646.93,714.528 1647.48,730.345 1648.04,727.19 1648.6,729.126 1649.16,741.676 1649.72,805.706 1650.28,795.464 1650.84,740.398 1651.4,767.813 1651.96,809.97 1652.52,803.61 1653.08,765.157 1653.64,778.581 1654.2,775.99 1654.76,737.02 1655.31,753.862 1655.87,735.335 1656.43,766.621 1656.99,764.261 1657.55,727.739 1658.11,708.951 1658.67,742.58 1659.23,722.153 1659.79,707.797 1660.35,706.426 1660.91,721.406 1661.47,703.121 1662.03,732.593 1662.58,716.032 1663.14,715.646 1663.7,712.498 1664.26,726.905 1664.82,738.932 1665.38,750.482 1665.94,764.06 1666.5,729.79 1667.06,725.694 1667.62,706.027 1668.18,737.022 1668.74,717.739 1669.3,716.884 1669.85,716.363 1670.41,648.893 1670.97,634.776 1671.53,670.555 1672.09,704.844 1672.65,722.51 1673.21,703.772 1673.77,685.905 1674.33,685.37 1674.89,666.641 1675.45,682.132 1676.01,715.064 1676.57,746.513 1677.13,793.535 1677.68,768.933 1678.24,748.452 1678.8,739.942 1679.36,720.841 1679.92,734.553 1680.48,733.532 1681.04,742.451 1681.6,739.812 1682.16,719.173 1682.72,718.026 1683.28,733.502 1683.84,714.294 1684.4,663.058 1684.95,662.866 1685.51,711.596 1686.07,692.728 1686.63,710.099 1687.19,690.48 1687.75,656.919 1688.31,687.871 1688.87,669.046 1689.43,654.409 1689.99,673.492 1690.55,658.162 1691.11,658.126 1691.67,612.339 1692.23,644.534 1692.78,629.221 1693.34,678.186 1693.9,697.556 1694.46,727.21 1695.02,721.458 1695.58,737.306 1696.14,714.931 1696.7,731.851 1697.26,742.593 1697.82,689.821 1698.38,674.98 1698.94,628.518 1699.5,631.099 1700.05,652.541 1700.61,622.894 1701.17,595.525 1701.73,583.674 1702.29,552.982 1702.85,577.691 1703.41,600.655 1703.97,620.64 1704.53,591.35 1705.09,596.203 1705.65,600.123 1706.21,638.881 1706.77,643.706 1707.32,645.766 1707.88,681.454 1708.44,666.571 1709,674.103 1709.56,691.536 1710.12,676.759 1710.68,660.759 1711.24,695.98 1711.8,679.676 1712.36,681.611 1712.92,668.352 1713.48,668.946 1714.04,652.588 1714.6,652.541 1715.15,637.622 1715.71,604.931 1716.27,625.672 1716.83,646.855 1717.39,662.286 1717.95,648.478 1718.51,652.995 1719.07,654.381 1719.63,619.895 1720.19,626.796 1720.75,633.687 1721.31,636.886 1721.87,621.095 1722.42,658.999 1722.98,694.725 1723.54,711.952 1724.1,673.532 1724.66,676.411 1725.22,709.092 1725.78,706.133 1726.34,704.401 1726.9,690.164 1727.46,689.029 1728.02,732.702 1728.58,750.008 1729.14,715.651 1729.69,728.553 1730.25,728.022 1730.81,736.166 1731.37,746.27 1731.93,773.033 1732.49,765.541 1733.05,775.071 1733.61,754.384 1734.17,768.106 1734.73,763.173 1735.29,713.507 1735.85,698.516 1736.41,698.054 1736.97,713.622 1737.52,682.275 1738.08,696.509 1738.64,712.047 1739.2,707.7 1739.76,711.542 1740.32,712.047 1740.88,711.271 1741.44,679.262 1742,715.986 1742.56,682.389 1743.12,700.529 1743.68,698.163 1744.24,697.383 1744.79,662.882 1745.35,630.27 1745.91,599.338 1746.47,603.857 1747.03,624.429 1747.59,627.618 1748.15,613.875 1748.71,633.916 1749.27,653.384 1749.83,669.865 1750.39,688.774 1750.95,706.469 1751.51,733.639 1752.06,714.656 1752.62,696.626 1753.18,697.476 1753.74,699.582 1754.3,697.301 1754.86,663.453 1755.42,664.487 1755.98,696.778 1756.54,693.863 1757.1,694.729 1757.66,662.84 1758.22,648.427 1758.78,650.429 1759.34,670.456 1759.89,702.546 1760.45,696.712 1761.01,695.412 1761.57,706.908 1762.13,717.091 1762.69,696.118 1763.25,709.825 1763.81,706.739 1764.37,718.754 1764.93,731.662 1765.49,711.41 1766.05,739.496 1766.61,720.289 1767.16,748.761 1767.72,757.817 1768.28,787.846 1768.84,801.021 1769.4,794.122 1769.96,771.589 1770.52,781.774 1771.08,761.546 1771.64,710.607 1772.2,722.006 1772.76,719.079 1773.32,701.44 1773.88,685.681 1774.43,698.948 1774.99,668.204 1775.55,684.485 1776.11,652.984 1776.67,653.299 1777.23,623.461 1777.79,624.824 1778.35,645.697 1778.91,631.308 1779.47,635.227 1780.03,606.891 1780.59,610.059 1781.15,597.185 1781.71,600.987 1782.26,606.008 1782.82,614.309 1783.38,590.375 1783.94,613.329 1784.5,605.17 1785.06,592.57 1785.62,646.37 1786.18,666.615 1786.74,669.859 1787.3,687.655 1787.86,639.666 1788.42,645.766 1788.98,645.144 1789.53,659.656 1790.09,680.027 1790.65,696.488 1791.21,714.977 1791.77,713.819 1792.33,662.797 1792.89,660.092 1793.45,709.699 1794.01,725.37 1794.57,740.529 1795.13,715.151 1795.69,746.199 1796.25,760.757 1796.8,741.621 1797.36,738.049 1797.92,718.42 1798.48,717.124 1799.04,730.235 1799.6,709.937 1800.16,707.615 1800.72,725.43 1801.28,756.469 1801.84,719.368 1802.4,701.435 1802.96,716.79 1803.52,713.672 1804.08,728.009 1804.63,742.308 1805.19,722.637 1805.75,698.707 1806.31,712.531 1806.87,676.072 1807.43,677.215 1807.99,660.508 1808.55,660.093 1809.11,655.686 1809.67,655.67 1810.23,640.006 1810.79,640.784 1811.35,609.793 1811.9,598.325 1812.46,616.888 1813.02,633.838 1813.58,637.085 1814.14,652.629 1814.7,674.692 1815.26,691.592 1815.82,675.767 1816.38,661.019 1816.94,629.755 1817.5,646.822 1818.06,664.301 1818.62,666.647 1819.18,650.311 1819.73,631.509 1820.29,645.817 1820.85,650.353 1821.41,717.822 1821.97,667.068 1822.53,653.217 1823.09,639.778 1823.65,644.18 1824.21,634.051 1824.77,687.132 1825.33,669.909 1825.89,659.012 1826.45,741.802 1827,741.486 1827.56,706.015 1828.12,706.384 1828.68,691.233 1829.24,675.386 1829.8,661.196 1830.36,633.293 1830.92,601.278 1831.48,624.906 1832.04,612.476 1832.6,646.154 1833.16,614.513 1833.72,649.116 1834.27,634.598 1834.83,636.118 1835.39,655.707 1835.95,627.3 1836.51,613.344 1837.07,616.899 1837.63,622.934 1838.19,607.366 \"/>\n<path clip-path=\"url(#clip093)\" d=\"M720.247 693.175 L720.806 693.175 L721.365 693.175 L721.924 693.175 L722.484 693.175 L723.043 693.175 L723.602 693.175 L724.161 693.175 L724.721 693.175 L725.28 693.175 L725.839 693.175 L726.398 693.175 L726.958 693.175 L727.517 693.175 L728.076 693.175 L728.635 693.175 L729.195 693.175 L729.754 693.175 L730.313 693.175 L730.872 693.175 L731.432 693.175 L731.991 693.175 L732.55 693.175 L733.109 693.175 L733.669 693.175 L734.228 693.175 L734.787 693.175 L735.346 693.175 L735.906 693.175 L736.465 693.175 L737.024 693.175 L737.583 693.175 L738.143 693.175 L738.702 693.175 L739.261 693.175 L739.82 693.175 L740.38 693.175 L740.939 693.175 L741.498 693.175 L742.057 693.175 L742.617 693.175 L743.176 693.175 L743.735 693.175 L744.294 693.175 L744.854 693.175 L745.413 693.175 L745.972 693.175 L746.531 693.175 L747.091 693.175 L747.65 693.175 L748.209 693.175 L748.768 693.175 L749.328 693.175 L749.887 693.175 L750.446 693.175 L751.005 693.175 L751.565 693.175 L752.124 693.175 L752.683 693.175 L753.242 693.175 L753.802 693.175 L754.361 693.175 L754.92 693.175 L755.479 693.175 L756.039 693.175 L756.598 693.175 L757.157 693.175 L757.716 693.175 L758.276 693.175 L758.835 693.175 L759.394 693.175 L759.953 693.175 L760.513 693.175 L761.072 693.175 L761.631 693.175 L762.19 693.175 L762.75 693.175 L763.309 693.175 L763.868 693.175 L764.427 693.175 L764.987 693.175 L765.546 693.175 L766.105 693.175 L766.664 693.175 L767.224 693.175 L767.783 693.175 L768.342 693.175 L768.901 693.175 L769.461 693.175 L770.02 693.175 L770.579 693.175 L771.138 693.175 L771.698 693.175 L772.257 693.175 L772.816 693.175 L773.375 693.175 L773.935 693.175 L774.494 693.175 L775.053 693.175 L775.612 693.175 L776.172 693.175 L776.731 693.175 L777.29 693.175 L777.849 693.175 L778.409 693.175 L778.968 693.175 L779.527 693.175 L780.086 693.175 L780.646 693.175 L781.205 693.175 L781.764 693.175 L782.323 693.175 L782.883 693.175 L783.442 693.175 L784.001 693.175 L784.56 693.175 L785.12 693.175 L785.679 693.175 L786.238 693.175 L786.797 693.175 L787.357 693.175 L787.916 693.175 L788.475 693.175 L789.034 693.175 L789.594 693.175 L790.153 693.175 L790.712 693.175 L791.271 693.175 L791.831 693.175 L792.39 693.175 L792.949 693.175 L793.508 693.175 L794.068 693.175 L794.627 693.175 L795.186 693.175 L795.745 693.175 L796.305 693.175 L796.864 693.175 L797.423 693.175 L797.982 693.175 L798.542 693.175 L799.101 693.175 L799.66 693.175 L800.219 693.175 L800.779 693.175 L801.338 693.175 L801.897 693.175 L802.456 693.175 L803.016 693.175 L803.575 693.175 L804.134 693.175 L804.693 693.175 L805.253 693.175 L805.812 693.175 L806.371 693.175 L806.931 693.175 L807.49 693.175 L808.049 693.175 L808.608 693.175 L809.168 693.175 L809.727 693.175 L810.286 693.175 L810.845 693.175 L811.405 693.175 L811.964 693.175 L812.523 693.175 L813.082 693.175 L813.642 693.175 L814.201 693.175 L814.76 693.175 L815.319 693.175 L815.879 693.175 L816.438 693.175 L816.997 693.175 L817.556 693.175 L818.116 693.175 L818.675 693.175 L819.234 693.175 L819.793 693.175 L820.353 693.175 L820.912 693.175 L821.471 693.175 L822.03 693.175 L822.59 693.175 L823.149 693.175 L823.708 693.175 L824.267 693.175 L824.827 693.175 L825.386 693.175 L825.945 693.175 L826.504 693.175 L827.064 693.175 L827.623 693.175 L828.182 693.175 L828.741 693.175 L829.301 693.175 L829.86 693.175 L830.419 693.175 L830.978 693.175 L831.538 693.175 L832.097 693.175 L832.656 693.175 L833.215 693.175 L833.775 693.175 L834.334 693.175 L834.893 693.175 L835.452 693.175 L836.012 693.175 L836.571 693.175 L837.13 693.175 L837.689 693.175 L838.249 693.175 L838.808 693.175 L839.367 693.175 L839.926 693.175 L840.486 693.175 L841.045 693.175 L841.604 693.175 L842.163 693.175 L842.723 693.175 L843.282 693.175 L843.841 693.175 L844.4 693.175 L844.96 693.175 L845.519 693.175 L846.078 693.175 L846.637 693.175 L847.197 693.175 L847.756 693.175 L848.315 693.175 L848.874 693.175 L849.434 693.175 L849.993 693.175 L850.552 693.175 L851.111 693.175 L851.671 693.175 L852.23 693.175 L852.789 693.175 L853.348 693.175 L853.908 693.175 L854.467 693.175 L855.026 693.175 L855.585 693.175 L856.145 693.175 L856.704 693.175 L857.263 693.175 L857.822 693.175 L858.382 693.175 L858.941 693.175 L859.5 693.175 L860.059 693.175 L860.619 693.175 L861.178 693.175 L861.737 693.175 L862.296 693.175 L862.856 693.175 L863.415 693.175 L863.974 693.175 L864.533 693.175 L865.093 693.175 L865.652 693.175 L866.211 693.175 L866.77 693.175 L867.33 693.175 L867.889 693.175 L868.448 693.175 L869.007 693.175 L869.567 693.175 L870.126 693.175 L870.685 693.175 L871.244 693.175 L871.804 693.175 L872.363 693.175 L872.922 693.175 L873.481 693.175 L874.041 693.175 L874.6 693.175 L875.159 693.175 L875.718 693.175 L876.278 693.175 L876.837 693.175 L877.396 693.175 L877.955 693.175 L878.515 693.175 L879.074 693.175 L879.633 693.175 L880.192 693.175 L880.752 693.175 L881.311 693.175 L881.87 693.175 L882.429 693.175 L882.989 693.175 L883.548 693.175 L884.107 693.175 L884.666 693.175 L885.226 693.175 L885.785 693.175 L886.344 693.175 L886.903 693.175 L887.463 693.175 L888.022 693.175 L888.581 693.175 L889.14 693.175 L889.7 693.175 L890.259 693.175 L890.818 693.175 L891.377 693.175 L891.937 693.175 L892.496 693.175 L893.055 693.175 L893.614 693.175 L894.174 693.175 L894.733 693.175 L895.292 693.175 L895.851 693.175 L896.411 693.175 L896.97 693.175 L897.529 693.175 L898.088 693.175 L898.648 693.175 L899.207 693.175 L899.766 693.175 L900.325 693.175 L900.885 693.175 L901.444 693.175 L902.003 693.175 L902.562 693.175 L903.122 693.175 L903.681 693.175 L904.24 693.175 L904.799 693.175 L905.359 693.175 L905.918 693.175 L906.477 693.175 L907.036 693.175 L907.596 693.175 L908.155 693.175 L908.714 693.175 L909.273 693.175 L909.833 693.175 L910.392 693.175 L910.951 693.175 L911.51 693.175 L912.07 693.175 L912.629 693.175 L913.188 693.175 L913.747 693.175 L914.307 693.175 L914.866 693.175 L915.425 693.175 L915.984 693.175 L916.544 693.175 L917.103 693.175 L917.662 693.175 L918.221 693.175 L918.781 693.175 L919.34 693.175 L919.899 693.175 L920.458 693.175 L921.018 693.175 L921.577 693.175 L922.136 693.175 L922.695 693.175 L923.255 693.175 L923.814 693.175 L924.373 693.175 L924.932 693.175 L925.492 693.175 L926.051 693.175 L926.61 693.175 L927.169 693.175 L927.729 693.175 L928.288 693.175 L928.847 693.175 L929.406 693.175 L929.966 693.175 L930.525 693.175 L931.084 693.175 L931.644 693.175 L932.203 693.175 L932.762 693.175 L933.321 693.175 L933.881 693.175 L934.44 693.175 L934.999 693.175 L935.558 693.175 L936.118 693.175 L936.677 693.175 L937.236 693.175 L937.795 693.175 L938.355 693.175 L938.914 693.175 L939.473 693.175 L940.032 693.175 L940.592 693.175 L941.151 693.175 L941.71 693.175 L942.269 693.175 L942.829 693.175 L943.388 693.175 L943.947 693.175 L944.506 693.175 L945.066 693.175 L945.625 693.175 L946.184 693.175 L946.743 693.175 L947.303 693.175 L947.862 693.175 L948.421 693.175 L948.98 693.175 L949.54 693.175 L950.099 693.175 L950.658 693.175 L951.217 693.175 L951.777 693.175 L952.336 693.175 L952.895 693.175 L953.454 693.175 L954.014 693.175 L954.573 693.175 L955.132 693.175 L955.691 693.175 L956.251 693.175 L956.81 693.175 L957.369 693.175 L957.928 693.175 L958.488 693.175 L959.047 693.175 L959.606 693.175 L960.165 693.175 L960.725 693.175 L961.284 693.175 L961.843 693.175 L962.402 693.175 L962.962 693.175 L963.521 693.175 L964.08 693.175 L964.639 693.175 L965.199 693.175 L965.758 693.175 L966.317 693.175 L966.876 693.175 L967.436 693.175 L967.995 693.175 L968.554 693.175 L969.113 693.175 L969.673 693.175 L970.232 693.175 L970.791 693.175 L971.35 693.175 L971.91 693.175 L972.469 693.175 L973.028 693.175 L973.587 693.175 L974.147 693.175 L974.706 693.175 L975.265 693.175 L975.824 693.175 L976.384 693.175 L976.943 693.175 L977.502 693.175 L978.061 693.175 L978.621 693.175 L979.18 693.175 L979.739 693.175 L980.298 693.175 L980.858 693.175 L981.417 693.175 L981.976 693.175 L982.535 693.175 L983.095 693.175 L983.654 693.175 L984.213 693.175 L984.772 693.175 L985.332 693.175 L985.891 693.175 L986.45 693.175 L987.009 693.175 L987.569 693.175 L988.128 693.175 L988.687 693.175 L989.246 693.175 L989.806 693.175 L990.365 693.175 L990.924 693.175 L991.483 693.175 L992.043 693.175 L992.602 693.175 L993.161 693.175 L993.72 693.175 L994.28 693.175 L994.839 693.175 L995.398 693.175 L995.957 693.175 L996.517 693.175 L997.076 693.175 L997.635 693.175 L998.194 693.175 L998.754 693.175 L999.313 693.175 L999.872 693.175 L1000.43 693.175 L1000.99 693.175 L1001.55 693.175 L1002.11 693.175 L1002.67 693.175 L1003.23 693.175 L1003.79 693.175 L1004.35 693.175 L1004.91 693.175 L1005.46 693.175 L1006.02 693.175 L1006.58 693.175 L1007.14 693.175 L1007.7 693.175 L1008.26 693.175 L1008.82 693.175 L1009.38 693.175 L1009.94 693.175 L1010.5 693.175 L1011.06 693.175 L1011.62 693.175 L1012.18 693.175 L1012.73 693.175 L1013.29 693.175 L1013.85 693.175 L1014.41 693.175 L1014.97 693.175 L1015.53 693.175 L1016.09 693.175 L1016.65 693.175 L1017.21 693.175 L1017.77 693.175 L1018.33 693.175 L1018.89 693.175 L1019.45 693.175 L1020.01 693.175 L1020.56 693.175 L1021.12 693.175 L1021.68 693.175 L1022.24 693.175 L1022.8 693.175 L1023.36 693.175 L1023.92 693.175 L1024.48 693.175 L1025.04 693.175 L1025.6 693.175 L1026.16 693.175 L1026.72 693.175 L1027.28 693.175 L1027.83 693.175 L1028.39 693.175 L1028.95 693.175 L1029.51 693.175 L1030.07 693.175 L1030.63 693.175 L1031.19 693.175 L1031.75 693.175 L1032.31 693.175 L1032.87 693.175 L1033.43 693.175 L1033.99 693.175 L1034.55 693.175 L1035.1 693.175 L1035.66 693.175 L1036.22 693.175 L1036.78 693.175 L1037.34 693.175 L1037.9 693.175 L1038.46 693.175 L1039.02 693.175 L1039.58 693.175 L1040.14 693.175 L1040.7 693.175 L1041.26 693.175 L1041.82 693.175 L1042.38 693.175 L1042.93 693.175 L1043.49 693.175 L1044.05 693.175 L1044.61 693.175 L1045.17 693.175 L1045.73 693.175 L1046.29 693.175 L1046.85 693.175 L1047.41 693.175 L1047.97 693.175 L1048.53 693.175 L1049.09 693.175 L1049.65 693.175 L1050.2 693.175 L1050.76 693.175 L1051.32 693.175 L1051.88 693.175 L1052.44 693.175 L1053 693.175 L1053.56 693.175 L1054.12 693.175 L1054.68 693.175 L1055.24 693.175 L1055.8 693.175 L1056.36 693.175 L1056.92 693.175 L1057.48 693.175 L1058.03 693.175 L1058.59 693.175 L1059.15 693.175 L1059.71 693.175 L1060.27 693.175 L1060.83 693.175 L1061.39 693.175 L1061.95 693.175 L1062.51 693.175 L1063.07 693.175 L1063.63 693.175 L1064.19 693.175 L1064.75 693.175 L1065.3 693.175 L1065.86 693.175 L1066.42 693.175 L1066.98 693.175 L1067.54 693.175 L1068.1 693.175 L1068.66 693.175 L1069.22 693.175 L1069.78 693.175 L1070.34 693.175 L1070.9 693.175 L1071.46 693.175 L1072.02 693.175 L1072.57 693.175 L1073.13 693.175 L1073.69 693.175 L1074.25 693.175 L1074.81 693.175 L1075.37 693.175 L1075.93 693.175 L1076.49 693.175 L1077.05 693.175 L1077.61 693.175 L1078.17 693.175 L1078.73 693.175 L1079.29 693.175 L1079.85 693.175 L1080.4 693.175 L1080.96 693.175 L1081.52 693.175 L1082.08 693.175 L1082.64 693.175 L1083.2 693.175 L1083.76 693.175 L1084.32 693.175 L1084.88 693.175 L1085.44 693.175 L1086 693.175 L1086.56 693.175 L1087.12 693.175 L1087.67 693.175 L1088.23 693.175 L1088.79 693.175 L1089.35 693.175 L1089.91 693.175 L1090.47 693.175 L1091.03 693.175 L1091.59 693.175 L1092.15 693.175 L1092.71 693.175 L1093.27 693.175 L1093.83 693.175 L1094.39 693.175 L1094.94 693.175 L1095.5 693.175 L1096.06 693.175 L1096.62 693.175 L1097.18 693.175 L1097.74 693.175 L1098.3 693.175 L1098.86 693.175 L1099.42 693.175 L1099.98 693.175 L1100.54 693.175 L1101.1 693.175 L1101.66 693.175 L1102.22 693.175 L1102.77 693.175 L1103.33 693.175 L1103.89 693.175 L1104.45 693.175 L1105.01 693.175 L1105.57 693.175 L1106.13 693.175 L1106.69 693.175 L1107.25 693.175 L1107.81 693.175 L1108.37 693.175 L1108.93 693.175 L1109.49 693.175 L1110.04 693.175 L1110.6 693.175 L1111.16 693.175 L1111.72 693.175 L1112.28 693.175 L1112.84 693.175 L1113.4 693.175 L1113.96 693.175 L1114.52 693.175 L1115.08 693.175 L1115.64 693.175 L1116.2 693.175 L1116.76 693.175 L1117.31 693.175 L1117.87 693.175 L1118.43 693.175 L1118.99 693.175 L1119.55 693.175 L1120.11 693.175 L1120.67 693.175 L1121.23 693.175 L1121.79 693.175 L1122.35 693.175 L1122.91 693.175 L1123.47 693.175 L1124.03 693.175 L1124.59 693.175 L1125.14 693.175 L1125.7 693.175 L1126.26 693.175 L1126.82 693.175 L1127.38 693.175 L1127.94 693.175 L1128.5 693.175 L1129.06 693.175 L1129.62 693.175 L1130.18 693.175 L1130.74 693.175 L1131.3 693.175 L1131.86 693.175 L1132.41 693.175 L1132.97 693.175 L1133.53 693.175 L1134.09 693.175 L1134.65 693.175 L1135.21 693.175 L1135.77 693.175 L1136.33 693.175 L1136.89 693.175 L1137.45 693.175 L1138.01 693.175 L1138.57 693.175 L1139.13 693.175 L1139.68 693.175 L1140.24 693.175 L1140.8 693.175 L1141.36 693.175 L1141.92 693.175 L1142.48 693.175 L1143.04 693.175 L1143.6 693.175 L1144.16 693.175 L1144.72 693.175 L1145.28 693.175 L1145.84 693.175 L1146.4 693.175 L1146.96 693.175 L1147.51 693.175 L1148.07 693.175 L1148.63 693.175 L1149.19 693.175 L1149.75 693.175 L1150.31 693.175 L1150.87 693.175 L1151.43 693.175 L1151.99 693.175 L1152.55 693.175 L1153.11 693.175 L1153.67 693.175 L1154.23 693.175 L1154.78 693.175 L1155.34 693.175 L1155.9 693.175 L1156.46 693.175 L1157.02 693.175 L1157.58 693.175 L1158.14 693.175 L1158.7 693.175 L1159.26 693.175 L1159.82 693.175 L1160.38 693.175 L1160.94 693.175 L1161.5 693.175 L1162.05 693.175 L1162.61 693.175 L1163.17 693.175 L1163.73 693.175 L1164.29 693.175 L1164.85 693.175 L1165.41 693.175 L1165.97 693.175 L1166.53 693.175 L1167.09 693.175 L1167.65 693.175 L1168.21 693.175 L1168.77 693.175 L1169.33 693.175 L1169.88 693.175 L1170.44 693.175 L1171 693.175 L1171.56 693.175 L1172.12 693.175 L1172.68 693.175 L1173.24 693.175 L1173.8 693.175 L1174.36 693.175 L1174.92 693.175 L1175.48 693.175 L1176.04 693.175 L1176.6 693.175 L1177.15 693.175 L1177.71 693.175 L1178.27 693.175 L1178.83 693.175 L1179.39 693.175 L1179.95 693.175 L1180.51 693.175 L1181.07 693.175 L1181.63 693.175 L1182.19 693.175 L1182.75 693.175 L1183.31 693.175 L1183.87 693.175 L1184.43 693.175 L1184.98 693.175 L1185.54 693.175 L1186.1 693.175 L1186.66 693.175 L1187.22 693.175 L1187.78 693.175 L1188.34 693.175 L1188.9 693.175 L1189.46 693.175 L1190.02 693.175 L1190.58 693.175 L1191.14 693.175 L1191.7 693.175 L1192.25 693.175 L1192.81 693.175 L1193.37 693.175 L1193.93 693.175 L1194.49 693.175 L1195.05 693.175 L1195.61 693.175 L1196.17 693.175 L1196.73 693.175 L1197.29 693.175 L1197.85 693.175 L1198.41 693.175 L1198.97 693.175 L1199.52 693.175 L1200.08 693.175 L1200.64 693.175 L1201.2 693.175 L1201.76 693.175 L1202.32 693.175 L1202.88 693.175 L1203.44 693.175 L1204 693.175 L1204.56 693.175 L1205.12 693.175 L1205.68 693.175 L1206.24 693.175 L1206.8 693.175 L1207.35 693.175 L1207.91 693.175 L1208.47 693.175 L1209.03 693.175 L1209.59 693.175 L1210.15 693.175 L1210.71 693.175 L1211.27 693.175 L1211.83 693.175 L1212.39 693.175 L1212.95 693.175 L1213.51 693.175 L1214.07 693.175 L1214.62 693.175 L1215.18 693.175 L1215.74 693.175 L1216.3 693.175 L1216.86 693.175 L1217.42 693.175 L1217.98 693.175 L1218.54 693.175 L1219.1 693.175 L1219.66 693.175 L1220.22 693.175 L1220.78 693.175 L1221.34 693.175 L1221.89 693.175 L1222.45 693.175 L1223.01 693.175 L1223.57 693.175 L1224.13 693.175 L1224.69 693.175 L1225.25 693.175 L1225.81 693.175 L1226.37 693.175 L1226.93 693.175 L1227.49 693.175 L1228.05 693.175 L1228.61 693.175 L1229.17 693.175 L1229.72 693.175 L1230.28 693.175 L1230.84 693.175 L1231.4 693.175 L1231.96 693.175 L1232.52 693.175 L1233.08 693.175 L1233.64 693.175 L1234.2 693.175 L1234.76 693.175 L1235.32 693.175 L1235.88 693.175 L1236.44 693.175 L1236.99 693.175 L1237.55 693.175 L1238.11 693.175 L1238.67 693.175 L1239.23 693.175 L1239.79 693.175 L1240.35 693.175 L1240.91 693.175 L1241.47 693.175 L1242.03 693.175 L1242.59 693.175 L1243.15 693.175 L1243.71 693.175 L1244.26 693.175 L1244.82 693.175 L1245.38 693.175 L1245.94 693.175 L1246.5 693.175 L1247.06 693.175 L1247.62 693.175 L1248.18 693.175 L1248.74 693.175 L1249.3 693.175 L1249.86 693.175 L1250.42 693.175 L1250.98 693.175 L1251.54 693.175 L1252.09 693.175 L1252.65 693.175 L1253.21 693.175 L1253.77 693.175 L1254.33 693.175 L1254.89 693.175 L1255.45 693.175 L1256.01 693.175 L1256.57 693.175 L1257.13 693.175 L1257.69 693.175 L1258.25 693.175 L1258.81 693.175 L1259.36 693.175 L1259.92 693.175 L1260.48 693.175 L1261.04 693.175 L1261.6 693.175 L1262.16 693.175 L1262.72 693.175 L1263.28 693.175 L1263.84 693.175 L1264.4 693.175 L1264.96 693.175 L1265.52 693.175 L1266.08 693.175 L1266.63 693.175 L1267.19 693.175 L1267.75 693.175 L1268.31 693.175 L1268.87 693.175 L1269.43 693.175 L1269.99 693.175 L1270.55 693.175 L1271.11 693.175 L1271.67 693.175 L1272.23 693.175 L1272.79 693.175 L1273.35 693.175 L1273.91 693.175 L1274.46 693.175 L1275.02 693.175 L1275.58 693.175 L1276.14 693.175 L1276.7 693.175 L1277.26 693.175 L1277.82 693.175 L1278.38 693.175 L1278.94 693.175 L1279.5 693.175 L1280.06 693.175 L1280.62 693.175 L1281.18 693.175 L1281.73 693.175 L1282.29 693.175 L1282.85 693.175 L1283.41 693.175 L1283.97 693.175 L1284.53 693.175 L1285.09 693.175 L1285.65 693.175 L1286.21 693.175 L1286.77 693.175 L1287.33 693.175 L1287.89 693.175 L1288.45 693.175 L1289 693.175 L1289.56 693.175 L1290.12 693.175 L1290.68 693.175 L1291.24 693.175 L1291.8 693.175 L1292.36 693.175 L1292.92 693.175 L1293.48 693.175 L1294.04 693.175 L1294.6 693.175 L1295.16 693.175 L1295.72 693.175 L1296.28 693.175 L1296.83 693.175 L1297.39 693.175 L1297.95 693.175 L1298.51 693.175 L1299.07 693.175 L1299.63 693.175 L1300.19 693.175 L1300.75 693.175 L1301.31 693.175 L1301.87 693.175 L1302.43 693.175 L1302.99 693.175 L1303.55 693.175 L1304.1 693.175 L1304.66 693.175 L1305.22 693.175 L1305.78 693.175 L1306.34 693.175 L1306.9 693.175 L1307.46 693.175 L1308.02 693.175 L1308.58 693.175 L1309.14 693.175 L1309.7 693.175 L1310.26 693.175 L1310.82 693.175 L1311.38 693.175 L1311.93 693.175 L1312.49 693.175 L1313.05 693.175 L1313.61 693.175 L1314.17 693.175 L1314.73 693.175 L1315.29 693.175 L1315.85 693.175 L1316.41 693.175 L1316.97 693.175 L1317.53 693.175 L1318.09 693.175 L1318.65 693.175 L1319.2 693.175 L1319.76 693.175 L1320.32 693.175 L1320.88 693.175 L1321.44 693.175 L1322 693.175 L1322.56 693.175 L1323.12 693.175 L1323.68 693.175 L1324.24 693.175 L1324.8 693.175 L1325.36 693.175 L1325.92 693.175 L1326.47 693.175 L1327.03 693.175 L1327.59 693.175 L1328.15 693.175 L1328.71 693.175 L1329.27 693.175 L1329.83 693.175 L1330.39 693.175 L1330.95 693.175 L1331.51 693.175 L1332.07 693.175 L1332.63 693.175 L1333.19 693.175 L1333.75 693.175 L1334.3 693.175 L1334.86 693.175 L1335.42 693.175 L1335.98 693.175 L1336.54 693.175 L1337.1 693.175 L1337.66 693.175 L1338.22 693.175 L1338.78 693.175 L1339.34 693.175 L1339.9 693.175 L1340.46 693.175 L1341.02 693.175 L1341.57 693.175 L1342.13 693.175 L1342.69 693.175 L1343.25 693.175 L1343.81 693.175 L1344.37 693.175 L1344.93 693.175 L1345.49 693.175 L1346.05 693.175 L1346.61 693.175 L1347.17 693.175 L1347.73 693.175 L1348.29 693.175 L1348.84 693.175 L1349.4 693.175 L1349.96 693.175 L1350.52 693.175 L1351.08 693.175 L1351.64 693.175 L1352.2 693.175 L1352.76 693.175 L1353.32 693.175 L1353.88 693.175 L1354.44 693.175 L1355 693.175 L1355.56 693.175 L1356.12 693.175 L1356.67 693.175 L1357.23 693.175 L1357.79 693.175 L1358.35 693.175 L1358.91 693.175 L1359.47 693.175 L1360.03 693.175 L1360.59 693.175 L1361.15 693.175 L1361.71 693.175 L1362.27 693.175 L1362.83 693.175 L1363.39 693.175 L1363.94 693.175 L1364.5 693.175 L1365.06 693.175 L1365.62 693.175 L1366.18 693.175 L1366.74 693.175 L1367.3 693.175 L1367.86 693.175 L1368.42 693.175 L1368.98 693.175 L1369.54 693.175 L1370.1 693.175 L1370.66 693.175 L1371.21 693.175 L1371.77 693.175 L1372.33 693.175 L1372.89 693.175 L1373.45 693.175 L1374.01 693.175 L1374.57 693.175 L1375.13 693.175 L1375.69 693.175 L1376.25 693.175 L1376.81 693.175 L1377.37 693.175 L1377.93 693.175 L1378.49 693.175 L1379.04 693.175 L1379.6 693.175 L1380.16 693.175 L1380.72 693.175 L1381.28 693.175 L1381.84 693.175 L1382.4 693.175 L1382.96 693.175 L1383.52 693.175 L1384.08 693.175 L1384.64 693.175 L1385.2 693.175 L1385.76 693.175 L1386.31 693.175 L1386.87 693.175 L1387.43 693.175 L1387.99 693.175 L1388.55 693.175 L1389.11 693.175 L1389.67 693.175 L1390.23 693.175 L1390.79 693.175 L1391.35 693.175 L1391.91 693.175 L1392.47 693.175 L1393.03 693.175 L1393.58 693.175 L1394.14 693.175 L1394.7 693.175 L1395.26 693.175 L1395.82 693.175 L1396.38 693.175 L1396.94 693.175 L1397.5 693.175 L1398.06 693.175 L1398.62 693.175 L1399.18 693.175 L1399.74 693.175 L1400.3 693.175 L1400.86 693.175 L1401.41 693.175 L1401.97 693.175 L1402.53 693.175 L1403.09 693.175 L1403.65 693.175 L1404.21 693.175 L1404.77 693.175 L1405.33 693.175 L1405.89 693.175 L1406.45 693.175 L1407.01 693.175 L1407.57 693.175 L1408.13 693.175 L1408.68 693.175 L1409.24 693.175 L1409.8 693.175 L1410.36 693.175 L1410.92 693.175 L1411.48 693.175 L1412.04 693.175 L1412.6 693.175 L1413.16 693.175 L1413.72 693.175 L1414.28 693.175 L1414.84 693.175 L1415.4 693.175 L1415.95 693.175 L1416.51 693.175 L1417.07 693.175 L1417.63 693.175 L1418.19 693.175 L1418.75 693.175 L1419.31 693.175 L1419.87 693.175 L1420.43 693.175 L1420.99 693.175 L1421.55 693.175 L1422.11 693.175 L1422.67 693.175 L1423.23 693.175 L1423.78 693.175 L1424.34 693.175 L1424.9 693.175 L1425.46 693.175 L1426.02 693.175 L1426.58 693.175 L1427.14 693.175 L1427.7 693.175 L1428.26 693.175 L1428.82 693.175 L1429.38 693.175 L1429.94 693.175 L1430.5 693.175 L1431.05 693.175 L1431.61 693.175 L1432.17 693.175 L1432.73 693.175 L1433.29 693.175 L1433.85 693.175 L1434.41 693.175 L1434.97 693.175 L1435.53 693.175 L1436.09 693.175 L1436.65 693.175 L1437.21 693.175 L1437.77 693.175 L1438.33 693.175 L1438.88 693.175 L1439.44 693.175 L1440 693.175 L1440.56 693.175 L1441.12 693.175 L1441.68 693.175 L1442.24 693.175 L1442.8 693.175 L1443.36 693.175 L1443.92 693.175 L1444.48 693.175 L1445.04 693.175 L1445.6 693.175 L1446.15 693.175 L1446.71 693.175 L1447.27 693.175 L1447.83 693.175 L1448.39 693.175 L1448.95 693.175 L1449.51 693.175 L1450.07 693.175 L1450.63 693.175 L1451.19 693.175 L1451.75 693.175 L1452.31 693.175 L1452.87 693.175 L1453.42 693.175 L1453.98 693.175 L1454.54 693.175 L1455.1 693.175 L1455.66 693.175 L1456.22 693.175 L1456.78 693.175 L1457.34 693.175 L1457.9 693.175 L1458.46 693.175 L1459.02 693.175 L1459.58 693.175 L1460.14 693.175 L1460.7 693.175 L1461.25 693.175 L1461.81 693.175 L1462.37 693.175 L1462.93 693.175 L1463.49 693.175 L1464.05 693.175 L1464.61 693.175 L1465.17 693.175 L1465.73 693.175 L1466.29 693.175 L1466.85 693.175 L1467.41 693.175 L1467.97 693.175 L1468.52 693.175 L1469.08 693.175 L1469.64 693.175 L1470.2 693.175 L1470.76 693.175 L1471.32 693.175 L1471.88 693.175 L1472.44 693.175 L1473 693.175 L1473.56 693.175 L1474.12 693.175 L1474.68 693.175 L1475.24 693.175 L1475.79 693.175 L1476.35 693.175 L1476.91 693.175 L1477.47 693.175 L1478.03 693.175 L1478.59 693.175 L1479.15 693.175 L1479.71 693.175 L1480.27 693.175 L1480.83 693.175 L1481.39 693.175 L1481.95 693.175 L1482.51 693.175 L1483.07 693.175 L1483.62 693.175 L1484.18 693.175 L1484.74 693.175 L1485.3 693.175 L1485.86 693.175 L1486.42 693.175 L1486.98 693.175 L1487.54 693.175 L1488.1 693.175 L1488.66 693.175 L1489.22 693.175 L1489.78 693.175 L1490.34 693.175 L1490.89 693.175 L1491.45 693.175 L1492.01 693.175 L1492.57 693.175 L1493.13 693.175 L1493.69 693.175 L1494.25 693.175 L1494.81 693.175 L1495.37 693.175 L1495.93 693.175 L1496.49 693.175 L1497.05 693.175 L1497.61 693.175 L1498.16 693.175 L1498.72 693.175 L1499.28 693.175 L1499.84 693.175 L1500.4 693.175 L1500.96 693.175 L1501.52 693.175 L1502.08 693.175 L1502.64 693.175 L1503.2 693.175 L1503.76 693.175 L1504.32 693.175 L1504.88 693.175 L1505.44 693.175 L1505.99 693.175 L1506.55 693.175 L1507.11 693.175 L1507.67 693.175 L1508.23 693.175 L1508.79 693.175 L1509.35 693.175 L1509.91 693.175 L1510.47 693.175 L1511.03 693.175 L1511.59 693.175 L1512.15 693.175 L1512.71 693.175 L1513.26 693.175 L1513.82 693.175 L1514.38 693.175 L1514.94 693.175 L1515.5 693.175 L1516.06 693.175 L1516.62 693.175 L1517.18 693.175 L1517.74 693.175 L1518.3 693.175 L1518.86 693.175 L1519.42 693.175 L1519.98 693.175 L1520.53 693.175 L1521.09 693.175 L1521.65 693.175 L1522.21 693.175 L1522.77 693.175 L1523.33 693.175 L1523.89 693.175 L1524.45 693.175 L1525.01 693.175 L1525.57 693.175 L1526.13 693.175 L1526.69 693.175 L1527.25 693.175 L1527.81 693.175 L1528.36 693.175 L1528.92 693.175 L1529.48 693.175 L1530.04 693.175 L1530.6 693.175 L1531.16 693.175 L1531.72 693.175 L1532.28 693.175 L1532.84 693.175 L1533.4 693.175 L1533.96 693.175 L1534.52 693.175 L1535.08 693.175 L1535.63 693.175 L1536.19 693.175 L1536.75 693.175 L1537.31 693.175 L1537.87 693.175 L1538.43 693.175 L1538.99 693.175 L1539.55 693.175 L1540.11 693.175 L1540.67 693.175 L1541.23 693.175 L1541.79 693.175 L1542.35 693.175 L1542.9 693.175 L1543.46 693.175 L1544.02 693.175 L1544.58 693.175 L1545.14 693.175 L1545.7 693.175 L1546.26 693.175 L1546.82 693.175 L1547.38 693.175 L1547.94 693.175 L1548.5 693.175 L1549.06 693.175 L1549.62 693.175 L1550.18 693.175 L1550.73 693.175 L1551.29 693.175 L1551.85 693.175 L1552.41 693.175 L1552.97 693.175 L1553.53 693.175 L1554.09 693.175 L1554.65 693.175 L1555.21 693.175 L1555.77 693.175 L1556.33 693.175 L1556.89 693.175 L1557.45 693.175 L1558 693.175 L1558.56 693.175 L1559.12 693.175 L1559.68 693.175 L1560.24 693.175 L1560.8 693.175 L1561.36 693.175 L1561.92 693.175 L1562.48 693.175 L1563.04 693.175 L1563.6 693.175 L1564.16 693.175 L1564.72 693.175 L1565.28 693.175 L1565.83 693.175 L1566.39 693.175 L1566.95 693.175 L1567.51 693.175 L1568.07 693.175 L1568.63 693.175 L1569.19 693.175 L1569.75 693.175 L1570.31 693.175 L1570.87 693.175 L1571.43 693.175 L1571.99 693.175 L1572.55 693.175 L1573.1 693.175 L1573.66 693.175 L1574.22 693.175 L1574.78 693.175 L1575.34 693.175 L1575.9 693.175 L1576.46 693.175 L1577.02 693.175 L1577.58 693.175 L1578.14 693.175 L1578.7 693.175 L1579.26 693.175 L1579.82 693.175 L1580.37 693.175 L1580.93 693.175 L1581.49 693.175 L1582.05 693.175 L1582.61 693.175 L1583.17 693.175 L1583.73 693.175 L1584.29 693.175 L1584.85 693.175 L1585.41 693.175 L1585.97 693.175 L1586.53 693.175 L1587.09 693.175 L1587.65 693.175 L1588.2 693.175 L1588.76 693.175 L1589.32 693.175 L1589.88 693.175 L1590.44 693.175 L1591 693.175 L1591.56 693.175 L1592.12 693.175 L1592.68 693.175 L1593.24 693.175 L1593.8 693.175 L1594.36 693.175 L1594.92 693.175 L1595.47 693.175 L1596.03 693.175 L1596.59 693.175 L1597.15 693.175 L1597.71 693.175 L1598.27 693.175 L1598.83 693.175 L1599.39 693.175 L1599.95 693.175 L1600.51 693.175 L1601.07 693.175 L1601.63 693.175 L1602.19 693.175 L1602.74 693.175 L1603.3 693.175 L1603.86 693.175 L1604.42 693.175 L1604.98 693.175 L1605.54 693.175 L1606.1 693.175 L1606.66 693.175 L1607.22 693.175 L1607.78 693.175 L1608.34 693.175 L1608.9 693.175 L1609.46 693.175 L1610.02 693.175 L1610.57 693.175 L1611.13 693.175 L1611.69 693.175 L1612.25 693.175 L1612.81 693.175 L1613.37 693.175 L1613.93 693.175 L1614.49 693.175 L1615.05 693.175 L1615.61 693.175 L1616.17 693.175 L1616.73 693.175 L1617.29 693.175 L1617.84 693.175 L1618.4 693.175 L1618.96 693.175 L1619.52 693.175 L1620.08 693.175 L1620.64 693.175 L1621.2 693.175 L1621.76 693.175 L1622.32 693.175 L1622.88 693.175 L1623.44 693.175 L1624 693.175 L1624.56 693.175 L1625.11 693.175 L1625.67 693.175 L1626.23 693.175 L1626.79 693.175 L1627.35 693.175 L1627.91 693.175 L1628.47 693.175 L1629.03 693.175 L1629.59 693.175 L1630.15 693.175 L1630.71 693.175 L1631.27 693.175 L1631.83 693.175 L1632.39 693.175 L1632.94 693.175 L1633.5 693.175 L1634.06 693.175 L1634.62 693.175 L1635.18 693.175 L1635.74 693.175 L1636.3 693.175 L1636.86 693.175 L1637.42 693.175 L1637.98 693.175 L1638.54 693.175 L1639.1 693.175 L1639.66 693.175 L1640.21 693.175 L1640.77 693.175 L1641.33 693.175 L1641.89 693.175 L1642.45 693.175 L1643.01 693.175 L1643.57 693.175 L1644.13 693.175 L1644.69 693.175 L1645.25 693.175 L1645.81 693.175 L1646.37 693.175 L1646.93 693.175 L1647.48 693.175 L1648.04 693.175 L1648.6 693.175 L1649.16 693.175 L1649.72 693.175 L1650.28 693.175 L1650.84 693.175 L1651.4 693.175 L1651.96 693.175 L1652.52 693.175 L1653.08 693.175 L1653.64 693.175 L1654.2 693.175 L1654.76 693.175 L1655.31 693.175 L1655.87 693.175 L1656.43 693.175 L1656.99 693.175 L1657.55 693.175 L1658.11 693.175 L1658.67 693.175 L1659.23 693.175 L1659.79 693.175 L1660.35 693.175 L1660.91 693.175 L1661.47 693.175 L1662.03 693.175 L1662.58 693.175 L1663.14 693.175 L1663.7 693.175 L1664.26 693.175 L1664.82 693.175 L1665.38 693.175 L1665.94 693.175 L1666.5 693.175 L1667.06 693.175 L1667.62 693.175 L1668.18 693.175 L1668.74 693.175 L1669.3 693.175 L1669.85 693.175 L1670.41 693.175 L1670.97 693.175 L1671.53 693.175 L1672.09 693.175 L1672.65 693.175 L1673.21 693.175 L1673.77 693.175 L1674.33 693.175 L1674.89 693.175 L1675.45 693.175 L1676.01 693.175 L1676.57 693.175 L1677.13 693.175 L1677.68 693.175 L1678.24 693.175 L1678.8 693.175 L1679.36 693.175 L1679.92 693.175 L1680.48 693.175 L1681.04 693.175 L1681.6 693.175 L1682.16 693.175 L1682.72 693.175 L1683.28 693.175 L1683.84 693.175 L1684.4 693.175 L1684.95 693.175 L1685.51 693.175 L1686.07 693.175 L1686.63 693.175 L1687.19 693.175 L1687.75 693.175 L1688.31 693.175 L1688.87 693.175 L1689.43 693.175 L1689.99 693.175 L1690.55 693.175 L1691.11 693.175 L1691.67 693.175 L1692.23 693.175 L1692.78 693.175 L1693.34 693.175 L1693.9 693.175 L1694.46 693.175 L1695.02 693.175 L1695.58 693.175 L1696.14 693.175 L1696.7 693.175 L1697.26 693.175 L1697.82 693.175 L1698.38 693.175 L1698.94 693.175 L1699.5 693.175 L1700.05 693.175 L1700.61 693.175 L1701.17 693.175 L1701.73 693.175 L1702.29 693.175 L1702.85 693.175 L1703.41 693.175 L1703.97 693.175 L1704.53 693.175 L1705.09 693.175 L1705.65 693.175 L1706.21 693.175 L1706.77 693.175 L1707.32 693.175 L1707.88 693.175 L1708.44 693.175 L1709 693.175 L1709.56 693.175 L1710.12 693.175 L1710.68 693.175 L1711.24 693.175 L1711.8 693.175 L1712.36 693.175 L1712.92 693.175 L1713.48 693.175 L1714.04 693.175 L1714.6 693.175 L1715.15 693.175 L1715.71 693.175 L1716.27 693.175 L1716.83 693.175 L1717.39 693.175 L1717.95 693.175 L1718.51 693.175 L1719.07 693.175 L1719.63 693.175 L1720.19 693.175 L1720.75 693.175 L1721.31 693.175 L1721.87 693.175 L1722.42 693.175 L1722.98 693.175 L1723.54 693.175 L1724.1 693.175 L1724.66 693.175 L1725.22 693.175 L1725.78 693.175 L1726.34 693.175 L1726.9 693.175 L1727.46 693.175 L1728.02 693.175 L1728.58 693.175 L1729.14 693.175 L1729.69 693.175 L1730.25 693.175 L1730.81 693.175 L1731.37 693.175 L1731.93 693.175 L1732.49 693.175 L1733.05 693.175 L1733.61 693.175 L1734.17 693.175 L1734.73 693.175 L1735.29 693.175 L1735.85 693.175 L1736.41 693.175 L1736.97 693.175 L1737.52 693.175 L1738.08 693.175 L1738.64 693.175 L1739.2 693.175 L1739.76 693.175 L1740.32 693.175 L1740.88 693.175 L1741.44 693.175 L1742 693.175 L1742.56 693.175 L1743.12 693.175 L1743.68 693.175 L1744.24 693.175 L1744.79 693.175 L1745.35 693.175 L1745.91 693.175 L1746.47 693.175 L1747.03 693.175 L1747.59 693.175 L1748.15 693.175 L1748.71 693.175 L1749.27 693.175 L1749.83 693.175 L1750.39 693.175 L1750.95 693.175 L1751.51 693.175 L1752.06 693.175 L1752.62 693.175 L1753.18 693.175 L1753.74 693.175 L1754.3 693.175 L1754.86 693.175 L1755.42 693.175 L1755.98 693.175 L1756.54 693.175 L1757.1 693.175 L1757.66 693.175 L1758.22 693.175 L1758.78 693.175 L1759.34 693.175 L1759.89 693.175 L1760.45 693.175 L1761.01 693.175 L1761.57 693.175 L1762.13 693.175 L1762.69 693.175 L1763.25 693.175 L1763.81 693.175 L1764.37 693.175 L1764.93 693.175 L1765.49 693.175 L1766.05 693.175 L1766.61 693.175 L1767.16 693.175 L1767.72 693.175 L1768.28 693.175 L1768.84 693.175 L1769.4 693.175 L1769.96 693.175 L1770.52 693.175 L1771.08 693.175 L1771.64 693.175 L1772.2 693.175 L1772.76 693.175 L1773.32 693.175 L1773.88 693.175 L1774.43 693.175 L1774.99 693.175 L1775.55 693.175 L1776.11 693.175 L1776.67 693.175 L1777.23 693.175 L1777.79 693.175 L1778.35 693.175 L1778.91 693.175 L1779.47 693.175 L1780.03 693.175 L1780.59 693.175 L1781.15 693.175 L1781.71 693.175 L1782.26 693.175 L1782.82 693.175 L1783.38 693.175 L1783.94 693.175 L1784.5 693.175 L1785.06 693.175 L1785.62 693.175 L1786.18 693.175 L1786.74 693.175 L1787.3 693.175 L1787.86 693.175 L1788.42 693.175 L1788.98 693.175 L1789.53 693.175 L1790.09 693.175 L1790.65 693.175 L1791.21 693.175 L1791.77 693.175 L1792.33 693.175 L1792.89 693.175 L1793.45 693.175 L1794.01 693.175 L1794.57 693.175 L1795.13 693.175 L1795.69 693.175 L1796.25 693.175 L1796.8 693.175 L1797.36 693.175 L1797.92 693.175 L1798.48 693.175 L1799.04 693.175 L1799.6 693.175 L1800.16 693.175 L1800.72 693.175 L1801.28 693.175 L1801.84 693.175 L1802.4 693.175 L1802.96 693.175 L1803.52 693.175 L1804.08 693.175 L1804.63 693.175 L1805.19 693.175 L1805.75 693.175 L1806.31 693.175 L1806.87 693.175 L1807.43 693.175 L1807.99 693.175 L1808.55 693.175 L1809.11 693.175 L1809.67 693.175 L1810.23 693.175 L1810.79 693.175 L1811.35 693.175 L1811.9 693.175 L1812.46 693.175 L1813.02 693.175 L1813.58 693.175 L1814.14 693.175 L1814.7 693.175 L1815.26 693.175 L1815.82 693.175 L1816.38 693.175 L1816.94 693.175 L1817.5 693.175 L1818.06 693.175 L1818.62 693.175 L1819.18 693.175 L1819.73 693.175 L1820.29 693.175 L1820.85 693.175 L1821.41 693.175 L1821.97 693.175 L1822.53 693.175 L1823.09 693.175 L1823.65 693.175 L1824.21 693.175 L1824.77 693.175 L1825.33 693.175 L1825.89 693.175 L1826.45 693.175 L1827 693.175 L1827.56 693.175 L1828.12 693.175 L1828.68 693.175 L1829.24 693.175 L1829.8 693.175 L1830.36 693.175 L1830.92 693.175 L1831.48 693.175 L1832.04 693.175 L1832.6 693.175 L1833.16 693.175 L1833.72 693.175 L1834.27 693.175 L1834.83 693.175 L1835.39 693.175 L1835.95 693.175 L1836.51 693.175 L1837.07 693.175 L1837.63 693.175 L1838.19 693.175 L1838.19 683.095 L1837.63 683.095 L1837.07 683.095 L1836.51 683.095 L1835.95 683.095 L1835.39 683.095 L1834.83 683.095 L1834.27 683.095 L1833.72 683.095 L1833.16 683.095 L1832.6 683.095 L1832.04 683.095 L1831.48 683.095 L1830.92 683.095 L1830.36 683.095 L1829.8 683.095 L1829.24 683.095 L1828.68 683.095 L1828.12 683.095 L1827.56 683.095 L1827 683.095 L1826.45 683.095 L1825.89 683.095 L1825.33 683.095 L1824.77 683.095 L1824.21 683.095 L1823.65 683.095 L1823.09 683.095 L1822.53 683.095 L1821.97 683.095 L1821.41 683.095 L1820.85 683.095 L1820.29 683.095 L1819.73 683.095 L1819.18 683.095 L1818.62 683.095 L1818.06 683.095 L1817.5 683.095 L1816.94 683.095 L1816.38 683.095 L1815.82 683.095 L1815.26 683.095 L1814.7 683.095 L1814.14 683.095 L1813.58 683.095 L1813.02 683.095 L1812.46 683.095 L1811.9 683.095 L1811.35 683.095 L1810.79 683.095 L1810.23 683.095 L1809.67 683.095 L1809.11 683.095 L1808.55 683.095 L1807.99 683.095 L1807.43 683.095 L1806.87 683.095 L1806.31 683.095 L1805.75 683.095 L1805.19 683.095 L1804.63 683.095 L1804.08 683.095 L1803.52 683.095 L1802.96 683.095 L1802.4 683.095 L1801.84 683.095 L1801.28 683.095 L1800.72 683.095 L1800.16 683.095 L1799.6 683.095 L1799.04 683.095 L1798.48 683.095 L1797.92 683.095 L1797.36 683.095 L1796.8 683.095 L1796.25 683.095 L1795.69 683.095 L1795.13 683.095 L1794.57 683.095 L1794.01 683.095 L1793.45 683.095 L1792.89 683.095 L1792.33 683.095 L1791.77 683.095 L1791.21 683.095 L1790.65 683.095 L1790.09 683.095 L1789.53 683.095 L1788.98 683.095 L1788.42 683.095 L1787.86 683.095 L1787.3 683.095 L1786.74 683.095 L1786.18 683.095 L1785.62 683.095 L1785.06 683.095 L1784.5 683.095 L1783.94 683.095 L1783.38 683.095 L1782.82 683.095 L1782.26 683.095 L1781.71 683.095 L1781.15 683.095 L1780.59 683.095 L1780.03 683.095 L1779.47 683.095 L1778.91 683.095 L1778.35 683.095 L1777.79 683.095 L1777.23 683.095 L1776.67 683.095 L1776.11 683.095 L1775.55 683.095 L1774.99 683.095 L1774.43 683.095 L1773.88 683.095 L1773.32 683.095 L1772.76 683.095 L1772.2 683.095 L1771.64 683.095 L1771.08 683.095 L1770.52 683.095 L1769.96 683.095 L1769.4 683.095 L1768.84 683.095 L1768.28 683.095 L1767.72 683.095 L1767.16 683.095 L1766.61 683.095 L1766.05 683.095 L1765.49 683.095 L1764.93 683.095 L1764.37 683.095 L1763.81 683.095 L1763.25 683.095 L1762.69 683.095 L1762.13 683.095 L1761.57 683.095 L1761.01 683.095 L1760.45 683.095 L1759.89 683.095 L1759.34 683.095 L1758.78 683.095 L1758.22 683.095 L1757.66 683.095 L1757.1 683.095 L1756.54 683.095 L1755.98 683.095 L1755.42 683.095 L1754.86 683.095 L1754.3 683.095 L1753.74 683.095 L1753.18 683.095 L1752.62 683.095 L1752.06 683.095 L1751.51 683.095 L1750.95 683.095 L1750.39 683.095 L1749.83 683.095 L1749.27 683.095 L1748.71 683.095 L1748.15 683.095 L1747.59 683.095 L1747.03 683.095 L1746.47 683.095 L1745.91 683.095 L1745.35 683.095 L1744.79 683.095 L1744.24 683.095 L1743.68 683.095 L1743.12 683.095 L1742.56 683.095 L1742 683.095 L1741.44 683.095 L1740.88 683.095 L1740.32 683.095 L1739.76 683.095 L1739.2 683.095 L1738.64 683.095 L1738.08 683.095 L1737.52 683.095 L1736.97 683.095 L1736.41 683.095 L1735.85 683.095 L1735.29 683.095 L1734.73 683.095 L1734.17 683.095 L1733.61 683.095 L1733.05 683.095 L1732.49 683.095 L1731.93 683.095 L1731.37 683.095 L1730.81 683.095 L1730.25 683.095 L1729.69 683.095 L1729.14 683.095 L1728.58 683.095 L1728.02 683.095 L1727.46 683.095 L1726.9 683.095 L1726.34 683.095 L1725.78 683.095 L1725.22 683.095 L1724.66 683.095 L1724.1 683.095 L1723.54 683.095 L1722.98 683.095 L1722.42 683.095 L1721.87 683.095 L1721.31 683.095 L1720.75 683.095 L1720.19 683.095 L1719.63 683.095 L1719.07 683.095 L1718.51 683.095 L1717.95 683.095 L1717.39 683.095 L1716.83 683.095 L1716.27 683.095 L1715.71 683.095 L1715.15 683.095 L1714.6 683.095 L1714.04 683.095 L1713.48 683.095 L1712.92 683.095 L1712.36 683.095 L1711.8 683.095 L1711.24 683.095 L1710.68 683.095 L1710.12 683.095 L1709.56 683.095 L1709 683.095 L1708.44 683.095 L1707.88 683.095 L1707.32 683.095 L1706.77 683.095 L1706.21 683.095 L1705.65 683.095 L1705.09 683.095 L1704.53 683.095 L1703.97 683.095 L1703.41 683.095 L1702.85 683.095 L1702.29 683.095 L1701.73 683.095 L1701.17 683.095 L1700.61 683.095 L1700.05 683.095 L1699.5 683.095 L1698.94 683.095 L1698.38 683.095 L1697.82 683.095 L1697.26 683.095 L1696.7 683.095 L1696.14 683.095 L1695.58 683.095 L1695.02 683.095 L1694.46 683.095 L1693.9 683.095 L1693.34 683.095 L1692.78 683.095 L1692.23 683.095 L1691.67 683.095 L1691.11 683.095 L1690.55 683.095 L1689.99 683.095 L1689.43 683.095 L1688.87 683.095 L1688.31 683.095 L1687.75 683.095 L1687.19 683.095 L1686.63 683.095 L1686.07 683.095 L1685.51 683.095 L1684.95 683.095 L1684.4 683.095 L1683.84 683.095 L1683.28 683.095 L1682.72 683.095 L1682.16 683.095 L1681.6 683.095 L1681.04 683.095 L1680.48 683.095 L1679.92 683.095 L1679.36 683.095 L1678.8 683.095 L1678.24 683.095 L1677.68 683.095 L1677.13 683.095 L1676.57 683.095 L1676.01 683.095 L1675.45 683.095 L1674.89 683.095 L1674.33 683.095 L1673.77 683.095 L1673.21 683.095 L1672.65 683.095 L1672.09 683.095 L1671.53 683.095 L1670.97 683.095 L1670.41 683.095 L1669.85 683.095 L1669.3 683.095 L1668.74 683.095 L1668.18 683.095 L1667.62 683.095 L1667.06 683.095 L1666.5 683.095 L1665.94 683.095 L1665.38 683.095 L1664.82 683.095 L1664.26 683.095 L1663.7 683.095 L1663.14 683.095 L1662.58 683.095 L1662.03 683.095 L1661.47 683.095 L1660.91 683.095 L1660.35 683.095 L1659.79 683.095 L1659.23 683.095 L1658.67 683.095 L1658.11 683.095 L1657.55 683.095 L1656.99 683.095 L1656.43 683.095 L1655.87 683.095 L1655.31 683.095 L1654.76 683.095 L1654.2 683.095 L1653.64 683.095 L1653.08 683.095 L1652.52 683.095 L1651.96 683.095 L1651.4 683.095 L1650.84 683.095 L1650.28 683.095 L1649.72 683.095 L1649.16 683.095 L1648.6 683.095 L1648.04 683.095 L1647.48 683.095 L1646.93 683.095 L1646.37 683.095 L1645.81 683.095 L1645.25 683.095 L1644.69 683.095 L1644.13 683.095 L1643.57 683.095 L1643.01 683.095 L1642.45 683.095 L1641.89 683.095 L1641.33 683.095 L1640.77 683.095 L1640.21 683.095 L1639.66 683.095 L1639.1 683.095 L1638.54 683.095 L1637.98 683.095 L1637.42 683.095 L1636.86 683.095 L1636.3 683.095 L1635.74 683.095 L1635.18 683.095 L1634.62 683.095 L1634.06 683.095 L1633.5 683.095 L1632.94 683.095 L1632.39 683.095 L1631.83 683.095 L1631.27 683.095 L1630.71 683.095 L1630.15 683.095 L1629.59 683.095 L1629.03 683.095 L1628.47 683.095 L1627.91 683.095 L1627.35 683.095 L1626.79 683.095 L1626.23 683.095 L1625.67 683.095 L1625.11 683.095 L1624.56 683.095 L1624 683.095 L1623.44 683.095 L1622.88 683.095 L1622.32 683.095 L1621.76 683.095 L1621.2 683.095 L1620.64 683.095 L1620.08 683.095 L1619.52 683.095 L1618.96 683.095 L1618.4 683.095 L1617.84 683.095 L1617.29 683.095 L1616.73 683.095 L1616.17 683.095 L1615.61 683.095 L1615.05 683.095 L1614.49 683.095 L1613.93 683.095 L1613.37 683.095 L1612.81 683.095 L1612.25 683.095 L1611.69 683.095 L1611.13 683.095 L1610.57 683.095 L1610.02 683.095 L1609.46 683.095 L1608.9 683.095 L1608.34 683.095 L1607.78 683.095 L1607.22 683.095 L1606.66 683.095 L1606.1 683.095 L1605.54 683.095 L1604.98 683.095 L1604.42 683.095 L1603.86 683.095 L1603.3 683.095 L1602.74 683.095 L1602.19 683.095 L1601.63 683.095 L1601.07 683.095 L1600.51 683.095 L1599.95 683.095 L1599.39 683.095 L1598.83 683.095 L1598.27 683.095 L1597.71 683.095 L1597.15 683.095 L1596.59 683.095 L1596.03 683.095 L1595.47 683.095 L1594.92 683.095 L1594.36 683.095 L1593.8 683.095 L1593.24 683.095 L1592.68 683.095 L1592.12 683.095 L1591.56 683.095 L1591 683.095 L1590.44 683.095 L1589.88 683.095 L1589.32 683.095 L1588.76 683.095 L1588.2 683.095 L1587.65 683.095 L1587.09 683.095 L1586.53 683.095 L1585.97 683.095 L1585.41 683.095 L1584.85 683.095 L1584.29 683.095 L1583.73 683.095 L1583.17 683.095 L1582.61 683.095 L1582.05 683.095 L1581.49 683.095 L1580.93 683.095 L1580.37 683.095 L1579.82 683.095 L1579.26 683.095 L1578.7 683.095 L1578.14 683.095 L1577.58 683.095 L1577.02 683.095 L1576.46 683.095 L1575.9 683.095 L1575.34 683.095 L1574.78 683.095 L1574.22 683.095 L1573.66 683.095 L1573.1 683.095 L1572.55 683.095 L1571.99 683.095 L1571.43 683.095 L1570.87 683.095 L1570.31 683.095 L1569.75 683.095 L1569.19 683.095 L1568.63 683.095 L1568.07 683.095 L1567.51 683.095 L1566.95 683.095 L1566.39 683.095 L1565.83 683.095 L1565.28 683.095 L1564.72 683.095 L1564.16 683.095 L1563.6 683.095 L1563.04 683.095 L1562.48 683.095 L1561.92 683.095 L1561.36 683.095 L1560.8 683.095 L1560.24 683.095 L1559.68 683.095 L1559.12 683.095 L1558.56 683.095 L1558 683.095 L1557.45 683.095 L1556.89 683.095 L1556.33 683.095 L1555.77 683.095 L1555.21 683.095 L1554.65 683.095 L1554.09 683.095 L1553.53 683.095 L1552.97 683.095 L1552.41 683.095 L1551.85 683.095 L1551.29 683.095 L1550.73 683.095 L1550.18 683.095 L1549.62 683.095 L1549.06 683.095 L1548.5 683.095 L1547.94 683.095 L1547.38 683.095 L1546.82 683.095 L1546.26 683.095 L1545.7 683.095 L1545.14 683.095 L1544.58 683.095 L1544.02 683.095 L1543.46 683.095 L1542.9 683.095 L1542.35 683.095 L1541.79 683.095 L1541.23 683.095 L1540.67 683.095 L1540.11 683.095 L1539.55 683.095 L1538.99 683.095 L1538.43 683.095 L1537.87 683.095 L1537.31 683.095 L1536.75 683.095 L1536.19 683.095 L1535.63 683.095 L1535.08 683.095 L1534.52 683.095 L1533.96 683.095 L1533.4 683.095 L1532.84 683.095 L1532.28 683.095 L1531.72 683.095 L1531.16 683.095 L1530.6 683.095 L1530.04 683.095 L1529.48 683.095 L1528.92 683.095 L1528.36 683.095 L1527.81 683.095 L1527.25 683.095 L1526.69 683.095 L1526.13 683.095 L1525.57 683.095 L1525.01 683.095 L1524.45 683.095 L1523.89 683.095 L1523.33 683.095 L1522.77 683.095 L1522.21 683.095 L1521.65 683.095 L1521.09 683.095 L1520.53 683.095 L1519.98 683.095 L1519.42 683.095 L1518.86 683.095 L1518.3 683.095 L1517.74 683.095 L1517.18 683.095 L1516.62 683.095 L1516.06 683.095 L1515.5 683.095 L1514.94 683.095 L1514.38 683.095 L1513.82 683.095 L1513.26 683.095 L1512.71 683.095 L1512.15 683.095 L1511.59 683.095 L1511.03 683.095 L1510.47 683.095 L1509.91 683.095 L1509.35 683.095 L1508.79 683.095 L1508.23 683.095 L1507.67 683.095 L1507.11 683.095 L1506.55 683.095 L1505.99 683.095 L1505.44 683.095 L1504.88 683.095 L1504.32 683.095 L1503.76 683.095 L1503.2 683.095 L1502.64 683.095 L1502.08 683.095 L1501.52 683.095 L1500.96 683.095 L1500.4 683.095 L1499.84 683.095 L1499.28 683.095 L1498.72 683.095 L1498.16 683.095 L1497.61 683.095 L1497.05 683.095 L1496.49 683.095 L1495.93 683.095 L1495.37 683.095 L1494.81 683.095 L1494.25 683.095 L1493.69 683.095 L1493.13 683.095 L1492.57 683.095 L1492.01 683.095 L1491.45 683.095 L1490.89 683.095 L1490.34 683.095 L1489.78 683.095 L1489.22 683.095 L1488.66 683.095 L1488.1 683.095 L1487.54 683.095 L1486.98 683.095 L1486.42 683.095 L1485.86 683.095 L1485.3 683.095 L1484.74 683.095 L1484.18 683.095 L1483.62 683.095 L1483.07 683.095 L1482.51 683.095 L1481.95 683.095 L1481.39 683.095 L1480.83 683.095 L1480.27 683.095 L1479.71 683.095 L1479.15 683.095 L1478.59 683.095 L1478.03 683.095 L1477.47 683.095 L1476.91 683.095 L1476.35 683.095 L1475.79 683.095 L1475.24 683.095 L1474.68 683.095 L1474.12 683.095 L1473.56 683.095 L1473 683.095 L1472.44 683.095 L1471.88 683.095 L1471.32 683.095 L1470.76 683.095 L1470.2 683.095 L1469.64 683.095 L1469.08 683.095 L1468.52 683.095 L1467.97 683.095 L1467.41 683.095 L1466.85 683.095 L1466.29 683.095 L1465.73 683.095 L1465.17 683.095 L1464.61 683.095 L1464.05 683.095 L1463.49 683.095 L1462.93 683.095 L1462.37 683.095 L1461.81 683.095 L1461.25 683.095 L1460.7 683.095 L1460.14 683.095 L1459.58 683.095 L1459.02 683.095 L1458.46 683.095 L1457.9 683.095 L1457.34 683.095 L1456.78 683.095 L1456.22 683.095 L1455.66 683.095 L1455.1 683.095 L1454.54 683.095 L1453.98 683.095 L1453.42 683.095 L1452.87 683.095 L1452.31 683.095 L1451.75 683.095 L1451.19 683.095 L1450.63 683.095 L1450.07 683.095 L1449.51 683.095 L1448.95 683.095 L1448.39 683.095 L1447.83 683.095 L1447.27 683.095 L1446.71 683.095 L1446.15 683.095 L1445.6 683.095 L1445.04 683.095 L1444.48 683.095 L1443.92 683.095 L1443.36 683.095 L1442.8 683.095 L1442.24 683.095 L1441.68 683.095 L1441.12 683.095 L1440.56 683.095 L1440 683.095 L1439.44 683.095 L1438.88 683.095 L1438.33 683.095 L1437.77 683.095 L1437.21 683.095 L1436.65 683.095 L1436.09 683.095 L1435.53 683.095 L1434.97 683.095 L1434.41 683.095 L1433.85 683.095 L1433.29 683.095 L1432.73 683.095 L1432.17 683.095 L1431.61 683.095 L1431.05 683.095 L1430.5 683.095 L1429.94 683.095 L1429.38 683.095 L1428.82 683.095 L1428.26 683.095 L1427.7 683.095 L1427.14 683.095 L1426.58 683.095 L1426.02 683.095 L1425.46 683.095 L1424.9 683.095 L1424.34 683.095 L1423.78 683.095 L1423.23 683.095 L1422.67 683.095 L1422.11 683.095 L1421.55 683.095 L1420.99 683.095 L1420.43 683.095 L1419.87 683.095 L1419.31 683.095 L1418.75 683.095 L1418.19 683.095 L1417.63 683.095 L1417.07 683.095 L1416.51 683.095 L1415.95 683.095 L1415.4 683.095 L1414.84 683.095 L1414.28 683.095 L1413.72 683.095 L1413.16 683.095 L1412.6 683.095 L1412.04 683.095 L1411.48 683.095 L1410.92 683.095 L1410.36 683.095 L1409.8 683.095 L1409.24 683.095 L1408.68 683.095 L1408.13 683.095 L1407.57 683.095 L1407.01 683.095 L1406.45 683.095 L1405.89 683.095 L1405.33 683.095 L1404.77 683.095 L1404.21 683.095 L1403.65 683.095 L1403.09 683.095 L1402.53 683.095 L1401.97 683.095 L1401.41 683.095 L1400.86 683.095 L1400.3 683.095 L1399.74 683.095 L1399.18 683.095 L1398.62 683.095 L1398.06 683.095 L1397.5 683.095 L1396.94 683.095 L1396.38 683.095 L1395.82 683.095 L1395.26 683.095 L1394.7 683.095 L1394.14 683.095 L1393.58 683.095 L1393.03 683.095 L1392.47 683.095 L1391.91 683.095 L1391.35 683.095 L1390.79 683.095 L1390.23 683.095 L1389.67 683.095 L1389.11 683.095 L1388.55 683.095 L1387.99 683.095 L1387.43 683.095 L1386.87 683.095 L1386.31 683.095 L1385.76 683.095 L1385.2 683.095 L1384.64 683.095 L1384.08 683.095 L1383.52 683.095 L1382.96 683.095 L1382.4 683.095 L1381.84 683.095 L1381.28 683.095 L1380.72 683.095 L1380.16 683.095 L1379.6 683.095 L1379.04 683.095 L1378.49 683.095 L1377.93 683.095 L1377.37 683.095 L1376.81 683.095 L1376.25 683.095 L1375.69 683.095 L1375.13 683.095 L1374.57 683.095 L1374.01 683.095 L1373.45 683.095 L1372.89 683.095 L1372.33 683.095 L1371.77 683.095 L1371.21 683.095 L1370.66 683.095 L1370.1 683.095 L1369.54 683.095 L1368.98 683.095 L1368.42 683.095 L1367.86 683.095 L1367.3 683.095 L1366.74 683.095 L1366.18 683.095 L1365.62 683.095 L1365.06 683.095 L1364.5 683.095 L1363.94 683.095 L1363.39 683.095 L1362.83 683.095 L1362.27 683.095 L1361.71 683.095 L1361.15 683.095 L1360.59 683.095 L1360.03 683.095 L1359.47 683.095 L1358.91 683.095 L1358.35 683.095 L1357.79 683.095 L1357.23 683.095 L1356.67 683.095 L1356.12 683.095 L1355.56 683.095 L1355 683.095 L1354.44 683.095 L1353.88 683.095 L1353.32 683.095 L1352.76 683.095 L1352.2 683.095 L1351.64 683.095 L1351.08 683.095 L1350.52 683.095 L1349.96 683.095 L1349.4 683.095 L1348.84 683.095 L1348.29 683.095 L1347.73 683.095 L1347.17 683.095 L1346.61 683.095 L1346.05 683.095 L1345.49 683.095 L1344.93 683.095 L1344.37 683.095 L1343.81 683.095 L1343.25 683.095 L1342.69 683.095 L1342.13 683.095 L1341.57 683.095 L1341.02 683.095 L1340.46 683.095 L1339.9 683.095 L1339.34 683.095 L1338.78 683.095 L1338.22 683.095 L1337.66 683.095 L1337.1 683.095 L1336.54 683.095 L1335.98 683.095 L1335.42 683.095 L1334.86 683.095 L1334.3 683.095 L1333.75 683.095 L1333.19 683.095 L1332.63 683.095 L1332.07 683.095 L1331.51 683.095 L1330.95 683.095 L1330.39 683.095 L1329.83 683.095 L1329.27 683.095 L1328.71 683.095 L1328.15 683.095 L1327.59 683.095 L1327.03 683.095 L1326.47 683.095 L1325.92 683.095 L1325.36 683.095 L1324.8 683.095 L1324.24 683.095 L1323.68 683.095 L1323.12 683.095 L1322.56 683.095 L1322 683.095 L1321.44 683.095 L1320.88 683.095 L1320.32 683.095 L1319.76 683.095 L1319.2 683.095 L1318.65 683.095 L1318.09 683.095 L1317.53 683.095 L1316.97 683.095 L1316.41 683.095 L1315.85 683.095 L1315.29 683.095 L1314.73 683.095 L1314.17 683.095 L1313.61 683.095 L1313.05 683.095 L1312.49 683.095 L1311.93 683.095 L1311.38 683.095 L1310.82 683.095 L1310.26 683.095 L1309.7 683.095 L1309.14 683.095 L1308.58 683.095 L1308.02 683.095 L1307.46 683.095 L1306.9 683.095 L1306.34 683.095 L1305.78 683.095 L1305.22 683.095 L1304.66 683.095 L1304.1 683.095 L1303.55 683.095 L1302.99 683.095 L1302.43 683.095 L1301.87 683.095 L1301.31 683.095 L1300.75 683.095 L1300.19 683.095 L1299.63 683.095 L1299.07 683.095 L1298.51 683.095 L1297.95 683.095 L1297.39 683.095 L1296.83 683.095 L1296.28 683.095 L1295.72 683.095 L1295.16 683.095 L1294.6 683.095 L1294.04 683.095 L1293.48 683.095 L1292.92 683.095 L1292.36 683.095 L1291.8 683.095 L1291.24 683.095 L1290.68 683.095 L1290.12 683.095 L1289.56 683.095 L1289 683.095 L1288.45 683.095 L1287.89 683.095 L1287.33 683.095 L1286.77 683.095 L1286.21 683.095 L1285.65 683.095 L1285.09 683.095 L1284.53 683.095 L1283.97 683.095 L1283.41 683.095 L1282.85 683.095 L1282.29 683.095 L1281.73 683.095 L1281.18 683.095 L1280.62 683.095 L1280.06 683.095 L1279.5 683.095 L1278.94 683.095 L1278.38 683.095 L1277.82 683.095 L1277.26 683.095 L1276.7 683.095 L1276.14 683.095 L1275.58 683.095 L1275.02 683.095 L1274.46 683.095 L1273.91 683.095 L1273.35 683.095 L1272.79 683.095 L1272.23 683.095 L1271.67 683.095 L1271.11 683.095 L1270.55 683.095 L1269.99 683.095 L1269.43 683.095 L1268.87 683.095 L1268.31 683.095 L1267.75 683.095 L1267.19 683.095 L1266.63 683.095 L1266.08 683.095 L1265.52 683.095 L1264.96 683.095 L1264.4 683.095 L1263.84 683.095 L1263.28 683.095 L1262.72 683.095 L1262.16 683.095 L1261.6 683.095 L1261.04 683.095 L1260.48 683.095 L1259.92 683.095 L1259.36 683.095 L1258.81 683.095 L1258.25 683.095 L1257.69 683.095 L1257.13 683.095 L1256.57 683.095 L1256.01 683.095 L1255.45 683.095 L1254.89 683.095 L1254.33 683.095 L1253.77 683.095 L1253.21 683.095 L1252.65 683.095 L1252.09 683.095 L1251.54 683.095 L1250.98 683.095 L1250.42 683.095 L1249.86 683.095 L1249.3 683.095 L1248.74 683.095 L1248.18 683.095 L1247.62 683.095 L1247.06 683.095 L1246.5 683.095 L1245.94 683.095 L1245.38 683.095 L1244.82 683.095 L1244.26 683.095 L1243.71 683.095 L1243.15 683.095 L1242.59 683.095 L1242.03 683.095 L1241.47 683.095 L1240.91 683.095 L1240.35 683.095 L1239.79 683.095 L1239.23 683.095 L1238.67 683.095 L1238.11 683.095 L1237.55 683.095 L1236.99 683.095 L1236.44 683.095 L1235.88 683.095 L1235.32 683.095 L1234.76 683.095 L1234.2 683.095 L1233.64 683.095 L1233.08 683.095 L1232.52 683.095 L1231.96 683.095 L1231.4 683.095 L1230.84 683.095 L1230.28 683.095 L1229.72 683.095 L1229.17 683.095 L1228.61 683.095 L1228.05 683.095 L1227.49 683.095 L1226.93 683.095 L1226.37 683.095 L1225.81 683.095 L1225.25 683.095 L1224.69 683.095 L1224.13 683.095 L1223.57 683.095 L1223.01 683.095 L1222.45 683.095 L1221.89 683.095 L1221.34 683.095 L1220.78 683.095 L1220.22 683.095 L1219.66 683.095 L1219.1 683.095 L1218.54 683.095 L1217.98 683.095 L1217.42 683.095 L1216.86 683.095 L1216.3 683.095 L1215.74 683.095 L1215.18 683.095 L1214.62 683.095 L1214.07 683.095 L1213.51 683.095 L1212.95 683.095 L1212.39 683.095 L1211.83 683.095 L1211.27 683.095 L1210.71 683.095 L1210.15 683.095 L1209.59 683.095 L1209.03 683.095 L1208.47 683.095 L1207.91 683.095 L1207.35 683.095 L1206.8 683.095 L1206.24 683.095 L1205.68 683.095 L1205.12 683.095 L1204.56 683.095 L1204 683.095 L1203.44 683.095 L1202.88 683.095 L1202.32 683.095 L1201.76 683.095 L1201.2 683.095 L1200.64 683.095 L1200.08 683.095 L1199.52 683.095 L1198.97 683.095 L1198.41 683.095 L1197.85 683.095 L1197.29 683.095 L1196.73 683.095 L1196.17 683.095 L1195.61 683.095 L1195.05 683.095 L1194.49 683.095 L1193.93 683.095 L1193.37 683.095 L1192.81 683.095 L1192.25 683.095 L1191.7 683.095 L1191.14 683.095 L1190.58 683.095 L1190.02 683.095 L1189.46 683.095 L1188.9 683.095 L1188.34 683.095 L1187.78 683.095 L1187.22 683.095 L1186.66 683.095 L1186.1 683.095 L1185.54 683.095 L1184.98 683.095 L1184.43 683.095 L1183.87 683.095 L1183.31 683.095 L1182.75 683.095 L1182.19 683.095 L1181.63 683.095 L1181.07 683.095 L1180.51 683.095 L1179.95 683.095 L1179.39 683.095 L1178.83 683.095 L1178.27 683.095 L1177.71 683.095 L1177.15 683.095 L1176.6 683.095 L1176.04 683.095 L1175.48 683.095 L1174.92 683.095 L1174.36 683.095 L1173.8 683.095 L1173.24 683.095 L1172.68 683.095 L1172.12 683.095 L1171.56 683.095 L1171 683.095 L1170.44 683.095 L1169.88 683.095 L1169.33 683.095 L1168.77 683.095 L1168.21 683.095 L1167.65 683.095 L1167.09 683.095 L1166.53 683.095 L1165.97 683.095 L1165.41 683.095 L1164.85 683.095 L1164.29 683.095 L1163.73 683.095 L1163.17 683.095 L1162.61 683.095 L1162.05 683.095 L1161.5 683.095 L1160.94 683.095 L1160.38 683.095 L1159.82 683.095 L1159.26 683.095 L1158.7 683.095 L1158.14 683.095 L1157.58 683.095 L1157.02 683.095 L1156.46 683.095 L1155.9 683.095 L1155.34 683.095 L1154.78 683.095 L1154.23 683.095 L1153.67 683.095 L1153.11 683.095 L1152.55 683.095 L1151.99 683.095 L1151.43 683.095 L1150.87 683.095 L1150.31 683.095 L1149.75 683.095 L1149.19 683.095 L1148.63 683.095 L1148.07 683.095 L1147.51 683.095 L1146.96 683.095 L1146.4 683.095 L1145.84 683.095 L1145.28 683.095 L1144.72 683.095 L1144.16 683.095 L1143.6 683.095 L1143.04 683.095 L1142.48 683.095 L1141.92 683.095 L1141.36 683.095 L1140.8 683.095 L1140.24 683.095 L1139.68 683.095 L1139.13 683.095 L1138.57 683.095 L1138.01 683.095 L1137.45 683.095 L1136.89 683.095 L1136.33 683.095 L1135.77 683.095 L1135.21 683.095 L1134.65 683.095 L1134.09 683.095 L1133.53 683.095 L1132.97 683.095 L1132.41 683.095 L1131.86 683.095 L1131.3 683.095 L1130.74 683.095 L1130.18 683.095 L1129.62 683.095 L1129.06 683.095 L1128.5 683.095 L1127.94 683.095 L1127.38 683.095 L1126.82 683.095 L1126.26 683.095 L1125.7 683.095 L1125.14 683.095 L1124.59 683.095 L1124.03 683.095 L1123.47 683.095 L1122.91 683.095 L1122.35 683.095 L1121.79 683.095 L1121.23 683.095 L1120.67 683.095 L1120.11 683.095 L1119.55 683.095 L1118.99 683.095 L1118.43 683.095 L1117.87 683.095 L1117.31 683.095 L1116.76 683.095 L1116.2 683.095 L1115.64 683.095 L1115.08 683.095 L1114.52 683.095 L1113.96 683.095 L1113.4 683.095 L1112.84 683.095 L1112.28 683.095 L1111.72 683.095 L1111.16 683.095 L1110.6 683.095 L1110.04 683.095 L1109.49 683.095 L1108.93 683.095 L1108.37 683.095 L1107.81 683.095 L1107.25 683.095 L1106.69 683.095 L1106.13 683.095 L1105.57 683.095 L1105.01 683.095 L1104.45 683.095 L1103.89 683.095 L1103.33 683.095 L1102.77 683.095 L1102.22 683.095 L1101.66 683.095 L1101.1 683.095 L1100.54 683.095 L1099.98 683.095 L1099.42 683.095 L1098.86 683.095 L1098.3 683.095 L1097.74 683.095 L1097.18 683.095 L1096.62 683.095 L1096.06 683.095 L1095.5 683.095 L1094.94 683.095 L1094.39 683.095 L1093.83 683.095 L1093.27 683.095 L1092.71 683.095 L1092.15 683.095 L1091.59 683.095 L1091.03 683.095 L1090.47 683.095 L1089.91 683.095 L1089.35 683.095 L1088.79 683.095 L1088.23 683.095 L1087.67 683.095 L1087.12 683.095 L1086.56 683.095 L1086 683.095 L1085.44 683.095 L1084.88 683.095 L1084.32 683.095 L1083.76 683.095 L1083.2 683.095 L1082.64 683.095 L1082.08 683.095 L1081.52 683.095 L1080.96 683.095 L1080.4 683.095 L1079.85 683.095 L1079.29 683.095 L1078.73 683.095 L1078.17 683.095 L1077.61 683.095 L1077.05 683.095 L1076.49 683.095 L1075.93 683.095 L1075.37 683.095 L1074.81 683.095 L1074.25 683.095 L1073.69 683.095 L1073.13 683.095 L1072.57 683.095 L1072.02 683.095 L1071.46 683.095 L1070.9 683.095 L1070.34 683.095 L1069.78 683.095 L1069.22 683.095 L1068.66 683.095 L1068.1 683.095 L1067.54 683.095 L1066.98 683.095 L1066.42 683.095 L1065.86 683.095 L1065.3 683.095 L1064.75 683.095 L1064.19 683.095 L1063.63 683.095 L1063.07 683.095 L1062.51 683.095 L1061.95 683.095 L1061.39 683.095 L1060.83 683.095 L1060.27 683.095 L1059.71 683.095 L1059.15 683.095 L1058.59 683.095 L1058.03 683.095 L1057.48 683.095 L1056.92 683.095 L1056.36 683.095 L1055.8 683.095 L1055.24 683.095 L1054.68 683.095 L1054.12 683.095 L1053.56 683.095 L1053 683.095 L1052.44 683.095 L1051.88 683.095 L1051.32 683.095 L1050.76 683.095 L1050.2 683.095 L1049.65 683.095 L1049.09 683.095 L1048.53 683.095 L1047.97 683.095 L1047.41 683.095 L1046.85 683.095 L1046.29 683.095 L1045.73 683.095 L1045.17 683.095 L1044.61 683.095 L1044.05 683.095 L1043.49 683.095 L1042.93 683.095 L1042.38 683.095 L1041.82 683.095 L1041.26 683.095 L1040.7 683.095 L1040.14 683.095 L1039.58 683.095 L1039.02 683.095 L1038.46 683.095 L1037.9 683.095 L1037.34 683.095 L1036.78 683.095 L1036.22 683.095 L1035.66 683.095 L1035.1 683.095 L1034.55 683.095 L1033.99 683.095 L1033.43 683.095 L1032.87 683.095 L1032.31 683.095 L1031.75 683.095 L1031.19 683.095 L1030.63 683.095 L1030.07 683.095 L1029.51 683.095 L1028.95 683.095 L1028.39 683.095 L1027.83 683.095 L1027.28 683.095 L1026.72 683.095 L1026.16 683.095 L1025.6 683.095 L1025.04 683.095 L1024.48 683.095 L1023.92 683.095 L1023.36 683.095 L1022.8 683.095 L1022.24 683.095 L1021.68 683.095 L1021.12 683.095 L1020.56 683.095 L1020.01 683.095 L1019.45 683.095 L1018.89 683.095 L1018.33 683.095 L1017.77 683.095 L1017.21 683.095 L1016.65 683.095 L1016.09 683.095 L1015.53 683.095 L1014.97 683.095 L1014.41 683.095 L1013.85 683.095 L1013.29 683.095 L1012.73 683.095 L1012.18 683.095 L1011.62 683.095 L1011.06 683.095 L1010.5 683.095 L1009.94 683.095 L1009.38 683.095 L1008.82 683.095 L1008.26 683.095 L1007.7 683.095 L1007.14 683.095 L1006.58 683.095 L1006.02 683.095 L1005.46 683.095 L1004.91 683.095 L1004.35 683.095 L1003.79 683.095 L1003.23 683.095 L1002.67 683.095 L1002.11 683.095 L1001.55 683.095 L1000.99 683.095 L1000.43 683.095 L999.872 683.095 L999.313 683.095 L998.754 683.095 L998.194 683.095 L997.635 683.095 L997.076 683.095 L996.517 683.095 L995.957 683.095 L995.398 683.095 L994.839 683.095 L994.28 683.095 L993.72 683.095 L993.161 683.095 L992.602 683.095 L992.043 683.095 L991.483 683.095 L990.924 683.095 L990.365 683.095 L989.806 683.095 L989.246 683.095 L988.687 683.095 L988.128 683.095 L987.569 683.095 L987.009 683.095 L986.45 683.095 L985.891 683.095 L985.332 683.095 L984.772 683.095 L984.213 683.095 L983.654 683.095 L983.095 683.095 L982.535 683.095 L981.976 683.095 L981.417 683.095 L980.858 683.095 L980.298 683.095 L979.739 683.095 L979.18 683.095 L978.621 683.095 L978.061 683.095 L977.502 683.095 L976.943 683.095 L976.384 683.095 L975.824 683.095 L975.265 683.095 L974.706 683.095 L974.147 683.095 L973.587 683.095 L973.028 683.095 L972.469 683.095 L971.91 683.095 L971.35 683.095 L970.791 683.095 L970.232 683.095 L969.673 683.095 L969.113 683.095 L968.554 683.095 L967.995 683.095 L967.436 683.095 L966.876 683.095 L966.317 683.095 L965.758 683.095 L965.199 683.095 L964.639 683.095 L964.08 683.095 L963.521 683.095 L962.962 683.095 L962.402 683.095 L961.843 683.095 L961.284 683.095 L960.725 683.095 L960.165 683.095 L959.606 683.095 L959.047 683.095 L958.488 683.095 L957.928 683.095 L957.369 683.095 L956.81 683.095 L956.251 683.095 L955.691 683.095 L955.132 683.095 L954.573 683.095 L954.014 683.095 L953.454 683.095 L952.895 683.095 L952.336 683.095 L951.777 683.095 L951.217 683.095 L950.658 683.095 L950.099 683.095 L949.54 683.095 L948.98 683.095 L948.421 683.095 L947.862 683.095 L947.303 683.095 L946.743 683.095 L946.184 683.095 L945.625 683.095 L945.066 683.095 L944.506 683.095 L943.947 683.095 L943.388 683.095 L942.829 683.095 L942.269 683.095 L941.71 683.095 L941.151 683.095 L940.592 683.095 L940.032 683.095 L939.473 683.095 L938.914 683.095 L938.355 683.095 L937.795 683.095 L937.236 683.095 L936.677 683.095 L936.118 683.095 L935.558 683.095 L934.999 683.095 L934.44 683.095 L933.881 683.095 L933.321 683.095 L932.762 683.095 L932.203 683.095 L931.644 683.095 L931.084 683.095 L930.525 683.095 L929.966 683.095 L929.406 683.095 L928.847 683.095 L928.288 683.095 L927.729 683.095 L927.169 683.095 L926.61 683.095 L926.051 683.095 L925.492 683.095 L924.932 683.095 L924.373 683.095 L923.814 683.095 L923.255 683.095 L922.695 683.095 L922.136 683.095 L921.577 683.095 L921.018 683.095 L920.458 683.095 L919.899 683.095 L919.34 683.095 L918.781 683.095 L918.221 683.095 L917.662 683.095 L917.103 683.095 L916.544 683.095 L915.984 683.095 L915.425 683.095 L914.866 683.095 L914.307 683.095 L913.747 683.095 L913.188 683.095 L912.629 683.095 L912.07 683.095 L911.51 683.095 L910.951 683.095 L910.392 683.095 L909.833 683.095 L909.273 683.095 L908.714 683.095 L908.155 683.095 L907.596 683.095 L907.036 683.095 L906.477 683.095 L905.918 683.095 L905.359 683.095 L904.799 683.095 L904.24 683.095 L903.681 683.095 L903.122 683.095 L902.562 683.095 L902.003 683.095 L901.444 683.095 L900.885 683.095 L900.325 683.095 L899.766 683.095 L899.207 683.095 L898.648 683.095 L898.088 683.095 L897.529 683.095 L896.97 683.095 L896.411 683.095 L895.851 683.095 L895.292 683.095 L894.733 683.095 L894.174 683.095 L893.614 683.095 L893.055 683.095 L892.496 683.095 L891.937 683.095 L891.377 683.095 L890.818 683.095 L890.259 683.095 L889.7 683.095 L889.14 683.095 L888.581 683.095 L888.022 683.095 L887.463 683.095 L886.903 683.095 L886.344 683.095 L885.785 683.095 L885.226 683.095 L884.666 683.095 L884.107 683.095 L883.548 683.095 L882.989 683.095 L882.429 683.095 L881.87 683.095 L881.311 683.095 L880.752 683.095 L880.192 683.095 L879.633 683.095 L879.074 683.095 L878.515 683.095 L877.955 683.095 L877.396 683.095 L876.837 683.095 L876.278 683.095 L875.718 683.095 L875.159 683.095 L874.6 683.095 L874.041 683.095 L873.481 683.095 L872.922 683.095 L872.363 683.095 L871.804 683.095 L871.244 683.095 L870.685 683.095 L870.126 683.095 L869.567 683.095 L869.007 683.095 L868.448 683.095 L867.889 683.095 L867.33 683.095 L866.77 683.095 L866.211 683.095 L865.652 683.095 L865.093 683.095 L864.533 683.095 L863.974 683.095 L863.415 683.095 L862.856 683.095 L862.296 683.095 L861.737 683.095 L861.178 683.095 L860.619 683.095 L860.059 683.095 L859.5 683.095 L858.941 683.095 L858.382 683.095 L857.822 683.095 L857.263 683.095 L856.704 683.095 L856.145 683.095 L855.585 683.095 L855.026 683.095 L854.467 683.095 L853.908 683.095 L853.348 683.095 L852.789 683.095 L852.23 683.095 L851.671 683.095 L851.111 683.095 L850.552 683.095 L849.993 683.095 L849.434 683.095 L848.874 683.095 L848.315 683.095 L847.756 683.095 L847.197 683.095 L846.637 683.095 L846.078 683.095 L845.519 683.095 L844.96 683.095 L844.4 683.095 L843.841 683.095 L843.282 683.095 L842.723 683.095 L842.163 683.095 L841.604 683.095 L841.045 683.095 L840.486 683.095 L839.926 683.095 L839.367 683.095 L838.808 683.095 L838.249 683.095 L837.689 683.095 L837.13 683.095 L836.571 683.095 L836.012 683.095 L835.452 683.095 L834.893 683.095 L834.334 683.095 L833.775 683.095 L833.215 683.095 L832.656 683.095 L832.097 683.095 L831.538 683.095 L830.978 683.095 L830.419 683.095 L829.86 683.095 L829.301 683.095 L828.741 683.095 L828.182 683.095 L827.623 683.095 L827.064 683.095 L826.504 683.095 L825.945 683.095 L825.386 683.095 L824.827 683.095 L824.267 683.095 L823.708 683.095 L823.149 683.095 L822.59 683.095 L822.03 683.095 L821.471 683.095 L820.912 683.095 L820.353 683.095 L819.793 683.095 L819.234 683.095 L818.675 683.095 L818.116 683.095 L817.556 683.095 L816.997 683.095 L816.438 683.095 L815.879 683.095 L815.319 683.095 L814.76 683.095 L814.201 683.095 L813.642 683.095 L813.082 683.095 L812.523 683.095 L811.964 683.095 L811.405 683.095 L810.845 683.095 L810.286 683.095 L809.727 683.095 L809.168 683.095 L808.608 683.095 L808.049 683.095 L807.49 683.095 L806.931 683.095 L806.371 683.095 L805.812 683.095 L805.253 683.095 L804.693 683.095 L804.134 683.095 L803.575 683.095 L803.016 683.095 L802.456 683.095 L801.897 683.095 L801.338 683.095 L800.779 683.095 L800.219 683.095 L799.66 683.095 L799.101 683.095 L798.542 683.095 L797.982 683.095 L797.423 683.095 L796.864 683.095 L796.305 683.095 L795.745 683.095 L795.186 683.095 L794.627 683.095 L794.068 683.095 L793.508 683.095 L792.949 683.095 L792.39 683.095 L791.831 683.095 L791.271 683.095 L790.712 683.095 L790.153 683.095 L789.594 683.095 L789.034 683.095 L788.475 683.095 L787.916 683.095 L787.357 683.095 L786.797 683.095 L786.238 683.095 L785.679 683.095 L785.12 683.095 L784.56 683.095 L784.001 683.095 L783.442 683.095 L782.883 683.095 L782.323 683.095 L781.764 683.095 L781.205 683.095 L780.646 683.095 L780.086 683.095 L779.527 683.095 L778.968 683.095 L778.409 683.095 L777.849 683.095 L777.29 683.095 L776.731 683.095 L776.172 683.095 L775.612 683.095 L775.053 683.095 L774.494 683.095 L773.935 683.095 L773.375 683.095 L772.816 683.095 L772.257 683.095 L771.698 683.095 L771.138 683.095 L770.579 683.095 L770.02 683.095 L769.461 683.095 L768.901 683.095 L768.342 683.095 L767.783 683.095 L767.224 683.095 L766.664 683.095 L766.105 683.095 L765.546 683.095 L764.987 683.095 L764.427 683.095 L763.868 683.095 L763.309 683.095 L762.75 683.095 L762.19 683.095 L761.631 683.095 L761.072 683.095 L760.513 683.095 L759.953 683.095 L759.394 683.095 L758.835 683.095 L758.276 683.095 L757.716 683.095 L757.157 683.095 L756.598 683.095 L756.039 683.095 L755.479 683.095 L754.92 683.095 L754.361 683.095 L753.802 683.095 L753.242 683.095 L752.683 683.095 L752.124 683.095 L751.565 683.095 L751.005 683.095 L750.446 683.095 L749.887 683.095 L749.328 683.095 L748.768 683.095 L748.209 683.095 L747.65 683.095 L747.091 683.095 L746.531 683.095 L745.972 683.095 L745.413 683.095 L744.854 683.095 L744.294 683.095 L743.735 683.095 L743.176 683.095 L742.617 683.095 L742.057 683.095 L741.498 683.095 L740.939 683.095 L740.38 683.095 L739.82 683.095 L739.261 683.095 L738.702 683.095 L738.143 683.095 L737.583 683.095 L737.024 683.095 L736.465 683.095 L735.906 683.095 L735.346 683.095 L734.787 683.095 L734.228 683.095 L733.669 683.095 L733.109 683.095 L732.55 683.095 L731.991 683.095 L731.432 683.095 L730.872 683.095 L730.313 683.095 L729.754 683.095 L729.195 683.095 L728.635 683.095 L728.076 683.095 L727.517 683.095 L726.958 683.095 L726.398 683.095 L725.839 683.095 L725.28 683.095 L724.721 683.095 L724.161 683.095 L723.602 683.095 L723.043 683.095 L722.484 683.095 L721.924 683.095 L721.365 683.095 L720.806 683.095 L720.247 683.095  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.135 720.806,688.135 721.365,688.135 721.924,688.135 722.484,688.135 723.043,688.135 723.602,688.135 724.161,688.135 724.721,688.135 725.28,688.135 725.839,688.135 726.398,688.135 726.958,688.135 727.517,688.135 728.076,688.135 728.635,688.135 729.195,688.135 729.754,688.135 730.313,688.135 730.872,688.135 731.432,688.135 731.991,688.135 732.55,688.135 733.109,688.135 733.669,688.135 734.228,688.135 734.787,688.135 735.346,688.135 735.906,688.135 736.465,688.135 737.024,688.135 737.583,688.135 738.143,688.135 738.702,688.135 739.261,688.135 739.82,688.135 740.38,688.135 740.939,688.135 741.498,688.135 742.057,688.135 742.617,688.135 743.176,688.135 743.735,688.135 744.294,688.135 744.854,688.135 745.413,688.135 745.972,688.135 746.531,688.135 747.091,688.135 747.65,688.135 748.209,688.135 748.768,688.135 749.328,688.135 749.887,688.135 750.446,688.135 751.005,688.135 751.565,688.135 752.124,688.135 752.683,688.135 753.242,688.135 753.802,688.135 754.361,688.135 754.92,688.135 755.479,688.135 756.039,688.135 756.598,688.135 757.157,688.135 757.716,688.135 758.276,688.135 758.835,688.135 759.394,688.135 759.953,688.135 760.513,688.135 761.072,688.135 761.631,688.135 762.19,688.135 762.75,688.135 763.309,688.135 763.868,688.135 764.427,688.135 764.987,688.135 765.546,688.135 766.105,688.135 766.664,688.135 767.224,688.135 767.783,688.135 768.342,688.135 768.901,688.135 769.461,688.135 770.02,688.135 770.579,688.135 771.138,688.135 771.698,688.135 772.257,688.135 772.816,688.135 773.375,688.135 773.935,688.135 774.494,688.135 775.053,688.135 775.612,688.135 776.172,688.135 776.731,688.135 777.29,688.135 777.849,688.135 778.409,688.135 778.968,688.135 779.527,688.135 780.086,688.135 780.646,688.135 781.205,688.135 781.764,688.135 782.323,688.135 782.883,688.135 783.442,688.135 784.001,688.135 784.56,688.135 785.12,688.135 785.679,688.135 786.238,688.135 786.797,688.135 787.357,688.135 787.916,688.135 788.475,688.135 789.034,688.135 789.594,688.135 790.153,688.135 790.712,688.135 791.271,688.135 791.831,688.135 792.39,688.135 792.949,688.135 793.508,688.135 794.068,688.135 794.627,688.135 795.186,688.135 795.745,688.135 796.305,688.135 796.864,688.135 797.423,688.135 797.982,688.135 798.542,688.135 799.101,688.135 799.66,688.135 800.219,688.135 800.779,688.135 801.338,688.135 801.897,688.135 802.456,688.135 803.016,688.135 803.575,688.135 804.134,688.135 804.693,688.135 805.253,688.135 805.812,688.135 806.371,688.135 806.931,688.135 807.49,688.135 808.049,688.135 808.608,688.135 809.168,688.135 809.727,688.135 810.286,688.135 810.845,688.135 811.405,688.135 811.964,688.135 812.523,688.135 813.082,688.135 813.642,688.135 814.201,688.135 814.76,688.135 815.319,688.135 815.879,688.135 816.438,688.135 816.997,688.135 817.556,688.135 818.116,688.135 818.675,688.135 819.234,688.135 819.793,688.135 820.353,688.135 820.912,688.135 821.471,688.135 822.03,688.135 822.59,688.135 823.149,688.135 823.708,688.135 824.267,688.135 824.827,688.135 825.386,688.135 825.945,688.135 826.504,688.135 827.064,688.135 827.623,688.135 828.182,688.135 828.741,688.135 829.301,688.135 829.86,688.135 830.419,688.135 830.978,688.135 831.538,688.135 832.097,688.135 832.656,688.135 833.215,688.135 833.775,688.135 834.334,688.135 834.893,688.135 835.452,688.135 836.012,688.135 836.571,688.135 837.13,688.135 837.689,688.135 838.249,688.135 838.808,688.135 839.367,688.135 839.926,688.135 840.486,688.135 841.045,688.135 841.604,688.135 842.163,688.135 842.723,688.135 843.282,688.135 843.841,688.135 844.4,688.135 844.96,688.135 845.519,688.135 846.078,688.135 846.637,688.135 847.197,688.135 847.756,688.135 848.315,688.135 848.874,688.135 849.434,688.135 849.993,688.135 850.552,688.135 851.111,688.135 851.671,688.135 852.23,688.135 852.789,688.135 853.348,688.135 853.908,688.135 854.467,688.135 855.026,688.135 855.585,688.135 856.145,688.135 856.704,688.135 857.263,688.135 857.822,688.135 858.382,688.135 858.941,688.135 859.5,688.135 860.059,688.135 860.619,688.135 861.178,688.135 861.737,688.135 862.296,688.135 862.856,688.135 863.415,688.135 863.974,688.135 864.533,688.135 865.093,688.135 865.652,688.135 866.211,688.135 866.77,688.135 867.33,688.135 867.889,688.135 868.448,688.135 869.007,688.135 869.567,688.135 870.126,688.135 870.685,688.135 871.244,688.135 871.804,688.135 872.363,688.135 872.922,688.135 873.481,688.135 874.041,688.135 874.6,688.135 875.159,688.135 875.718,688.135 876.278,688.135 876.837,688.135 877.396,688.135 877.955,688.135 878.515,688.135 879.074,688.135 879.633,688.135 880.192,688.135 880.752,688.135 881.311,688.135 881.87,688.135 882.429,688.135 882.989,688.135 883.548,688.135 884.107,688.135 884.666,688.135 885.226,688.135 885.785,688.135 886.344,688.135 886.903,688.135 887.463,688.135 888.022,688.135 888.581,688.135 889.14,688.135 889.7,688.135 890.259,688.135 890.818,688.135 891.377,688.135 891.937,688.135 892.496,688.135 893.055,688.135 893.614,688.135 894.174,688.135 894.733,688.135 895.292,688.135 895.851,688.135 896.411,688.135 896.97,688.135 897.529,688.135 898.088,688.135 898.648,688.135 899.207,688.135 899.766,688.135 900.325,688.135 900.885,688.135 901.444,688.135 902.003,688.135 902.562,688.135 903.122,688.135 903.681,688.135 904.24,688.135 904.799,688.135 905.359,688.135 905.918,688.135 906.477,688.135 907.036,688.135 907.596,688.135 908.155,688.135 908.714,688.135 909.273,688.135 909.833,688.135 910.392,688.135 910.951,688.135 911.51,688.135 912.07,688.135 912.629,688.135 913.188,688.135 913.747,688.135 914.307,688.135 914.866,688.135 915.425,688.135 915.984,688.135 916.544,688.135 917.103,688.135 917.662,688.135 918.221,688.135 918.781,688.135 919.34,688.135 919.899,688.135 920.458,688.135 921.018,688.135 921.577,688.135 922.136,688.135 922.695,688.135 923.255,688.135 923.814,688.135 924.373,688.135 924.932,688.135 925.492,688.135 926.051,688.135 926.61,688.135 927.169,688.135 927.729,688.135 928.288,688.135 928.847,688.135 929.406,688.135 929.966,688.135 930.525,688.135 931.084,688.135 931.644,688.135 932.203,688.135 932.762,688.135 933.321,688.135 933.881,688.135 934.44,688.135 934.999,688.135 935.558,688.135 936.118,688.135 936.677,688.135 937.236,688.135 937.795,688.135 938.355,688.135 938.914,688.135 939.473,688.135 940.032,688.135 940.592,688.135 941.151,688.135 941.71,688.135 942.269,688.135 942.829,688.135 943.388,688.135 943.947,688.135 944.506,688.135 945.066,688.135 945.625,688.135 946.184,688.135 946.743,688.135 947.303,688.135 947.862,688.135 948.421,688.135 948.98,688.135 949.54,688.135 950.099,688.135 950.658,688.135 951.217,688.135 951.777,688.135 952.336,688.135 952.895,688.135 953.454,688.135 954.014,688.135 954.573,688.135 955.132,688.135 955.691,688.135 956.251,688.135 956.81,688.135 957.369,688.135 957.928,688.135 958.488,688.135 959.047,688.135 959.606,688.135 960.165,688.135 960.725,688.135 961.284,688.135 961.843,688.135 962.402,688.135 962.962,688.135 963.521,688.135 964.08,688.135 964.639,688.135 965.199,688.135 965.758,688.135 966.317,688.135 966.876,688.135 967.436,688.135 967.995,688.135 968.554,688.135 969.113,688.135 969.673,688.135 970.232,688.135 970.791,688.135 971.35,688.135 971.91,688.135 972.469,688.135 973.028,688.135 973.587,688.135 974.147,688.135 974.706,688.135 975.265,688.135 975.824,688.135 976.384,688.135 976.943,688.135 977.502,688.135 978.061,688.135 978.621,688.135 979.18,688.135 979.739,688.135 980.298,688.135 980.858,688.135 981.417,688.135 981.976,688.135 982.535,688.135 983.095,688.135 983.654,688.135 984.213,688.135 984.772,688.135 985.332,688.135 985.891,688.135 986.45,688.135 987.009,688.135 987.569,688.135 988.128,688.135 988.687,688.135 989.246,688.135 989.806,688.135 990.365,688.135 990.924,688.135 991.483,688.135 992.043,688.135 992.602,688.135 993.161,688.135 993.72,688.135 994.28,688.135 994.839,688.135 995.398,688.135 995.957,688.135 996.517,688.135 997.076,688.135 997.635,688.135 998.194,688.135 998.754,688.135 999.313,688.135 999.872,688.135 1000.43,688.135 1000.99,688.135 1001.55,688.135 1002.11,688.135 1002.67,688.135 1003.23,688.135 1003.79,688.135 1004.35,688.135 1004.91,688.135 1005.46,688.135 1006.02,688.135 1006.58,688.135 1007.14,688.135 1007.7,688.135 1008.26,688.135 1008.82,688.135 1009.38,688.135 1009.94,688.135 1010.5,688.135 1011.06,688.135 1011.62,688.135 1012.18,688.135 1012.73,688.135 1013.29,688.135 1013.85,688.135 1014.41,688.135 1014.97,688.135 1015.53,688.135 1016.09,688.135 1016.65,688.135 1017.21,688.135 1017.77,688.135 1018.33,688.135 1018.89,688.135 1019.45,688.135 1020.01,688.135 1020.56,688.135 1021.12,688.135 1021.68,688.135 1022.24,688.135 1022.8,688.135 1023.36,688.135 1023.92,688.135 1024.48,688.135 1025.04,688.135 1025.6,688.135 1026.16,688.135 1026.72,688.135 1027.28,688.135 1027.83,688.135 1028.39,688.135 1028.95,688.135 1029.51,688.135 1030.07,688.135 1030.63,688.135 1031.19,688.135 1031.75,688.135 1032.31,688.135 1032.87,688.135 1033.43,688.135 1033.99,688.135 1034.55,688.135 1035.1,688.135 1035.66,688.135 1036.22,688.135 1036.78,688.135 1037.34,688.135 1037.9,688.135 1038.46,688.135 1039.02,688.135 1039.58,688.135 1040.14,688.135 1040.7,688.135 1041.26,688.135 1041.82,688.135 1042.38,688.135 1042.93,688.135 1043.49,688.135 1044.05,688.135 1044.61,688.135 1045.17,688.135 1045.73,688.135 1046.29,688.135 1046.85,688.135 1047.41,688.135 1047.97,688.135 1048.53,688.135 1049.09,688.135 1049.65,688.135 1050.2,688.135 1050.76,688.135 1051.32,688.135 1051.88,688.135 1052.44,688.135 1053,688.135 1053.56,688.135 1054.12,688.135 1054.68,688.135 1055.24,688.135 1055.8,688.135 1056.36,688.135 1056.92,688.135 1057.48,688.135 1058.03,688.135 1058.59,688.135 1059.15,688.135 1059.71,688.135 1060.27,688.135 1060.83,688.135 1061.39,688.135 1061.95,688.135 1062.51,688.135 1063.07,688.135 1063.63,688.135 1064.19,688.135 1064.75,688.135 1065.3,688.135 1065.86,688.135 1066.42,688.135 1066.98,688.135 1067.54,688.135 1068.1,688.135 1068.66,688.135 1069.22,688.135 1069.78,688.135 1070.34,688.135 1070.9,688.135 1071.46,688.135 1072.02,688.135 1072.57,688.135 1073.13,688.135 1073.69,688.135 1074.25,688.135 1074.81,688.135 1075.37,688.135 1075.93,688.135 1076.49,688.135 1077.05,688.135 1077.61,688.135 1078.17,688.135 1078.73,688.135 1079.29,688.135 1079.85,688.135 1080.4,688.135 1080.96,688.135 1081.52,688.135 1082.08,688.135 1082.64,688.135 1083.2,688.135 1083.76,688.135 1084.32,688.135 1084.88,688.135 1085.44,688.135 1086,688.135 1086.56,688.135 1087.12,688.135 1087.67,688.135 1088.23,688.135 1088.79,688.135 1089.35,688.135 1089.91,688.135 1090.47,688.135 1091.03,688.135 1091.59,688.135 1092.15,688.135 1092.71,688.135 1093.27,688.135 1093.83,688.135 1094.39,688.135 1094.94,688.135 1095.5,688.135 1096.06,688.135 1096.62,688.135 1097.18,688.135 1097.74,688.135 1098.3,688.135 1098.86,688.135 1099.42,688.135 1099.98,688.135 1100.54,688.135 1101.1,688.135 1101.66,688.135 1102.22,688.135 1102.77,688.135 1103.33,688.135 1103.89,688.135 1104.45,688.135 1105.01,688.135 1105.57,688.135 1106.13,688.135 1106.69,688.135 1107.25,688.135 1107.81,688.135 1108.37,688.135 1108.93,688.135 1109.49,688.135 1110.04,688.135 1110.6,688.135 1111.16,688.135 1111.72,688.135 1112.28,688.135 1112.84,688.135 1113.4,688.135 1113.96,688.135 1114.52,688.135 1115.08,688.135 1115.64,688.135 1116.2,688.135 1116.76,688.135 1117.31,688.135 1117.87,688.135 1118.43,688.135 1118.99,688.135 1119.55,688.135 1120.11,688.135 1120.67,688.135 1121.23,688.135 1121.79,688.135 1122.35,688.135 1122.91,688.135 1123.47,688.135 1124.03,688.135 1124.59,688.135 1125.14,688.135 1125.7,688.135 1126.26,688.135 1126.82,688.135 1127.38,688.135 1127.94,688.135 1128.5,688.135 1129.06,688.135 1129.62,688.135 1130.18,688.135 1130.74,688.135 1131.3,688.135 1131.86,688.135 1132.41,688.135 1132.97,688.135 1133.53,688.135 1134.09,688.135 1134.65,688.135 1135.21,688.135 1135.77,688.135 1136.33,688.135 1136.89,688.135 1137.45,688.135 1138.01,688.135 1138.57,688.135 1139.13,688.135 1139.68,688.135 1140.24,688.135 1140.8,688.135 1141.36,688.135 1141.92,688.135 1142.48,688.135 1143.04,688.135 1143.6,688.135 1144.16,688.135 1144.72,688.135 1145.28,688.135 1145.84,688.135 1146.4,688.135 1146.96,688.135 1147.51,688.135 1148.07,688.135 1148.63,688.135 1149.19,688.135 1149.75,688.135 1150.31,688.135 1150.87,688.135 1151.43,688.135 1151.99,688.135 1152.55,688.135 1153.11,688.135 1153.67,688.135 1154.23,688.135 1154.78,688.135 1155.34,688.135 1155.9,688.135 1156.46,688.135 1157.02,688.135 1157.58,688.135 1158.14,688.135 1158.7,688.135 1159.26,688.135 1159.82,688.135 1160.38,688.135 1160.94,688.135 1161.5,688.135 1162.05,688.135 1162.61,688.135 1163.17,688.135 1163.73,688.135 1164.29,688.135 1164.85,688.135 1165.41,688.135 1165.97,688.135 1166.53,688.135 1167.09,688.135 1167.65,688.135 1168.21,688.135 1168.77,688.135 1169.33,688.135 1169.88,688.135 1170.44,688.135 1171,688.135 1171.56,688.135 1172.12,688.135 1172.68,688.135 1173.24,688.135 1173.8,688.135 1174.36,688.135 1174.92,688.135 1175.48,688.135 1176.04,688.135 1176.6,688.135 1177.15,688.135 1177.71,688.135 1178.27,688.135 1178.83,688.135 1179.39,688.135 1179.95,688.135 1180.51,688.135 1181.07,688.135 1181.63,688.135 1182.19,688.135 1182.75,688.135 1183.31,688.135 1183.87,688.135 1184.43,688.135 1184.98,688.135 1185.54,688.135 1186.1,688.135 1186.66,688.135 1187.22,688.135 1187.78,688.135 1188.34,688.135 1188.9,688.135 1189.46,688.135 1190.02,688.135 1190.58,688.135 1191.14,688.135 1191.7,688.135 1192.25,688.135 1192.81,688.135 1193.37,688.135 1193.93,688.135 1194.49,688.135 1195.05,688.135 1195.61,688.135 1196.17,688.135 1196.73,688.135 1197.29,688.135 1197.85,688.135 1198.41,688.135 1198.97,688.135 1199.52,688.135 1200.08,688.135 1200.64,688.135 1201.2,688.135 1201.76,688.135 1202.32,688.135 1202.88,688.135 1203.44,688.135 1204,688.135 1204.56,688.135 1205.12,688.135 1205.68,688.135 1206.24,688.135 1206.8,688.135 1207.35,688.135 1207.91,688.135 1208.47,688.135 1209.03,688.135 1209.59,688.135 1210.15,688.135 1210.71,688.135 1211.27,688.135 1211.83,688.135 1212.39,688.135 1212.95,688.135 1213.51,688.135 1214.07,688.135 1214.62,688.135 1215.18,688.135 1215.74,688.135 1216.3,688.135 1216.86,688.135 1217.42,688.135 1217.98,688.135 1218.54,688.135 1219.1,688.135 1219.66,688.135 1220.22,688.135 1220.78,688.135 1221.34,688.135 1221.89,688.135 1222.45,688.135 1223.01,688.135 1223.57,688.135 1224.13,688.135 1224.69,688.135 1225.25,688.135 1225.81,688.135 1226.37,688.135 1226.93,688.135 1227.49,688.135 1228.05,688.135 1228.61,688.135 1229.17,688.135 1229.72,688.135 1230.28,688.135 1230.84,688.135 1231.4,688.135 1231.96,688.135 1232.52,688.135 1233.08,688.135 1233.64,688.135 1234.2,688.135 1234.76,688.135 1235.32,688.135 1235.88,688.135 1236.44,688.135 1236.99,688.135 1237.55,688.135 1238.11,688.135 1238.67,688.135 1239.23,688.135 1239.79,688.135 1240.35,688.135 1240.91,688.135 1241.47,688.135 1242.03,688.135 1242.59,688.135 1243.15,688.135 1243.71,688.135 1244.26,688.135 1244.82,688.135 1245.38,688.135 1245.94,688.135 1246.5,688.135 1247.06,688.135 1247.62,688.135 1248.18,688.135 1248.74,688.135 1249.3,688.135 1249.86,688.135 1250.42,688.135 1250.98,688.135 1251.54,688.135 1252.09,688.135 1252.65,688.135 1253.21,688.135 1253.77,688.135 1254.33,688.135 1254.89,688.135 1255.45,688.135 1256.01,688.135 1256.57,688.135 1257.13,688.135 1257.69,688.135 1258.25,688.135 1258.81,688.135 1259.36,688.135 1259.92,688.135 1260.48,688.135 1261.04,688.135 1261.6,688.135 1262.16,688.135 1262.72,688.135 1263.28,688.135 1263.84,688.135 1264.4,688.135 1264.96,688.135 1265.52,688.135 1266.08,688.135 1266.63,688.135 1267.19,688.135 1267.75,688.135 1268.31,688.135 1268.87,688.135 1269.43,688.135 1269.99,688.135 1270.55,688.135 1271.11,688.135 1271.67,688.135 1272.23,688.135 1272.79,688.135 1273.35,688.135 1273.91,688.135 1274.46,688.135 1275.02,688.135 1275.58,688.135 1276.14,688.135 1276.7,688.135 1277.26,688.135 1277.82,688.135 1278.38,688.135 1278.94,688.135 1279.5,688.135 1280.06,688.135 1280.62,688.135 1281.18,688.135 1281.73,688.135 1282.29,688.135 1282.85,688.135 1283.41,688.135 1283.97,688.135 1284.53,688.135 1285.09,688.135 1285.65,688.135 1286.21,688.135 1286.77,688.135 1287.33,688.135 1287.89,688.135 1288.45,688.135 1289,688.135 1289.56,688.135 1290.12,688.135 1290.68,688.135 1291.24,688.135 1291.8,688.135 1292.36,688.135 1292.92,688.135 1293.48,688.135 1294.04,688.135 1294.6,688.135 1295.16,688.135 1295.72,688.135 1296.28,688.135 1296.83,688.135 1297.39,688.135 1297.95,688.135 1298.51,688.135 1299.07,688.135 1299.63,688.135 1300.19,688.135 1300.75,688.135 1301.31,688.135 1301.87,688.135 1302.43,688.135 1302.99,688.135 1303.55,688.135 1304.1,688.135 1304.66,688.135 1305.22,688.135 1305.78,688.135 1306.34,688.135 1306.9,688.135 1307.46,688.135 1308.02,688.135 1308.58,688.135 1309.14,688.135 1309.7,688.135 1310.26,688.135 1310.82,688.135 1311.38,688.135 1311.93,688.135 1312.49,688.135 1313.05,688.135 1313.61,688.135 1314.17,688.135 1314.73,688.135 1315.29,688.135 1315.85,688.135 1316.41,688.135 1316.97,688.135 1317.53,688.135 1318.09,688.135 1318.65,688.135 1319.2,688.135 1319.76,688.135 1320.32,688.135 1320.88,688.135 1321.44,688.135 1322,688.135 1322.56,688.135 1323.12,688.135 1323.68,688.135 1324.24,688.135 1324.8,688.135 1325.36,688.135 1325.92,688.135 1326.47,688.135 1327.03,688.135 1327.59,688.135 1328.15,688.135 1328.71,688.135 1329.27,688.135 1329.83,688.135 1330.39,688.135 1330.95,688.135 1331.51,688.135 1332.07,688.135 1332.63,688.135 1333.19,688.135 1333.75,688.135 1334.3,688.135 1334.86,688.135 1335.42,688.135 1335.98,688.135 1336.54,688.135 1337.1,688.135 1337.66,688.135 1338.22,688.135 1338.78,688.135 1339.34,688.135 1339.9,688.135 1340.46,688.135 1341.02,688.135 1341.57,688.135 1342.13,688.135 1342.69,688.135 1343.25,688.135 1343.81,688.135 1344.37,688.135 1344.93,688.135 1345.49,688.135 1346.05,688.135 1346.61,688.135 1347.17,688.135 1347.73,688.135 1348.29,688.135 1348.84,688.135 1349.4,688.135 1349.96,688.135 1350.52,688.135 1351.08,688.135 1351.64,688.135 1352.2,688.135 1352.76,688.135 1353.32,688.135 1353.88,688.135 1354.44,688.135 1355,688.135 1355.56,688.135 1356.12,688.135 1356.67,688.135 1357.23,688.135 1357.79,688.135 1358.35,688.135 1358.91,688.135 1359.47,688.135 1360.03,688.135 1360.59,688.135 1361.15,688.135 1361.71,688.135 1362.27,688.135 1362.83,688.135 1363.39,688.135 1363.94,688.135 1364.5,688.135 1365.06,688.135 1365.62,688.135 1366.18,688.135 1366.74,688.135 1367.3,688.135 1367.86,688.135 1368.42,688.135 1368.98,688.135 1369.54,688.135 1370.1,688.135 1370.66,688.135 1371.21,688.135 1371.77,688.135 1372.33,688.135 1372.89,688.135 1373.45,688.135 1374.01,688.135 1374.57,688.135 1375.13,688.135 1375.69,688.135 1376.25,688.135 1376.81,688.135 1377.37,688.135 1377.93,688.135 1378.49,688.135 1379.04,688.135 1379.6,688.135 1380.16,688.135 1380.72,688.135 1381.28,688.135 1381.84,688.135 1382.4,688.135 1382.96,688.135 1383.52,688.135 1384.08,688.135 1384.64,688.135 1385.2,688.135 1385.76,688.135 1386.31,688.135 1386.87,688.135 1387.43,688.135 1387.99,688.135 1388.55,688.135 1389.11,688.135 1389.67,688.135 1390.23,688.135 1390.79,688.135 1391.35,688.135 1391.91,688.135 1392.47,688.135 1393.03,688.135 1393.58,688.135 1394.14,688.135 1394.7,688.135 1395.26,688.135 1395.82,688.135 1396.38,688.135 1396.94,688.135 1397.5,688.135 1398.06,688.135 1398.62,688.135 1399.18,688.135 1399.74,688.135 1400.3,688.135 1400.86,688.135 1401.41,688.135 1401.97,688.135 1402.53,688.135 1403.09,688.135 1403.65,688.135 1404.21,688.135 1404.77,688.135 1405.33,688.135 1405.89,688.135 1406.45,688.135 1407.01,688.135 1407.57,688.135 1408.13,688.135 1408.68,688.135 1409.24,688.135 1409.8,688.135 1410.36,688.135 1410.92,688.135 1411.48,688.135 1412.04,688.135 1412.6,688.135 1413.16,688.135 1413.72,688.135 1414.28,688.135 1414.84,688.135 1415.4,688.135 1415.95,688.135 1416.51,688.135 1417.07,688.135 1417.63,688.135 1418.19,688.135 1418.75,688.135 1419.31,688.135 1419.87,688.135 1420.43,688.135 1420.99,688.135 1421.55,688.135 1422.11,688.135 1422.67,688.135 1423.23,688.135 1423.78,688.135 1424.34,688.135 1424.9,688.135 1425.46,688.135 1426.02,688.135 1426.58,688.135 1427.14,688.135 1427.7,688.135 1428.26,688.135 1428.82,688.135 1429.38,688.135 1429.94,688.135 1430.5,688.135 1431.05,688.135 1431.61,688.135 1432.17,688.135 1432.73,688.135 1433.29,688.135 1433.85,688.135 1434.41,688.135 1434.97,688.135 1435.53,688.135 1436.09,688.135 1436.65,688.135 1437.21,688.135 1437.77,688.135 1438.33,688.135 1438.88,688.135 1439.44,688.135 1440,688.135 1440.56,688.135 1441.12,688.135 1441.68,688.135 1442.24,688.135 1442.8,688.135 1443.36,688.135 1443.92,688.135 1444.48,688.135 1445.04,688.135 1445.6,688.135 1446.15,688.135 1446.71,688.135 1447.27,688.135 1447.83,688.135 1448.39,688.135 1448.95,688.135 1449.51,688.135 1450.07,688.135 1450.63,688.135 1451.19,688.135 1451.75,688.135 1452.31,688.135 1452.87,688.135 1453.42,688.135 1453.98,688.135 1454.54,688.135 1455.1,688.135 1455.66,688.135 1456.22,688.135 1456.78,688.135 1457.34,688.135 1457.9,688.135 1458.46,688.135 1459.02,688.135 1459.58,688.135 1460.14,688.135 1460.7,688.135 1461.25,688.135 1461.81,688.135 1462.37,688.135 1462.93,688.135 1463.49,688.135 1464.05,688.135 1464.61,688.135 1465.17,688.135 1465.73,688.135 1466.29,688.135 1466.85,688.135 1467.41,688.135 1467.97,688.135 1468.52,688.135 1469.08,688.135 1469.64,688.135 1470.2,688.135 1470.76,688.135 1471.32,688.135 1471.88,688.135 1472.44,688.135 1473,688.135 1473.56,688.135 1474.12,688.135 1474.68,688.135 1475.24,688.135 1475.79,688.135 1476.35,688.135 1476.91,688.135 1477.47,688.135 1478.03,688.135 1478.59,688.135 1479.15,688.135 1479.71,688.135 1480.27,688.135 1480.83,688.135 1481.39,688.135 1481.95,688.135 1482.51,688.135 1483.07,688.135 1483.62,688.135 1484.18,688.135 1484.74,688.135 1485.3,688.135 1485.86,688.135 1486.42,688.135 1486.98,688.135 1487.54,688.135 1488.1,688.135 1488.66,688.135 1489.22,688.135 1489.78,688.135 1490.34,688.135 1490.89,688.135 1491.45,688.135 1492.01,688.135 1492.57,688.135 1493.13,688.135 1493.69,688.135 1494.25,688.135 1494.81,688.135 1495.37,688.135 1495.93,688.135 1496.49,688.135 1497.05,688.135 1497.61,688.135 1498.16,688.135 1498.72,688.135 1499.28,688.135 1499.84,688.135 1500.4,688.135 1500.96,688.135 1501.52,688.135 1502.08,688.135 1502.64,688.135 1503.2,688.135 1503.76,688.135 1504.32,688.135 1504.88,688.135 1505.44,688.135 1505.99,688.135 1506.55,688.135 1507.11,688.135 1507.67,688.135 1508.23,688.135 1508.79,688.135 1509.35,688.135 1509.91,688.135 1510.47,688.135 1511.03,688.135 1511.59,688.135 1512.15,688.135 1512.71,688.135 1513.26,688.135 1513.82,688.135 1514.38,688.135 1514.94,688.135 1515.5,688.135 1516.06,688.135 1516.62,688.135 1517.18,688.135 1517.74,688.135 1518.3,688.135 1518.86,688.135 1519.42,688.135 1519.98,688.135 1520.53,688.135 1521.09,688.135 1521.65,688.135 1522.21,688.135 1522.77,688.135 1523.33,688.135 1523.89,688.135 1524.45,688.135 1525.01,688.135 1525.57,688.135 1526.13,688.135 1526.69,688.135 1527.25,688.135 1527.81,688.135 1528.36,688.135 1528.92,688.135 1529.48,688.135 1530.04,688.135 1530.6,688.135 1531.16,688.135 1531.72,688.135 1532.28,688.135 1532.84,688.135 1533.4,688.135 1533.96,688.135 1534.52,688.135 1535.08,688.135 1535.63,688.135 1536.19,688.135 1536.75,688.135 1537.31,688.135 1537.87,688.135 1538.43,688.135 1538.99,688.135 1539.55,688.135 1540.11,688.135 1540.67,688.135 1541.23,688.135 1541.79,688.135 1542.35,688.135 1542.9,688.135 1543.46,688.135 1544.02,688.135 1544.58,688.135 1545.14,688.135 1545.7,688.135 1546.26,688.135 1546.82,688.135 1547.38,688.135 1547.94,688.135 1548.5,688.135 1549.06,688.135 1549.62,688.135 1550.18,688.135 1550.73,688.135 1551.29,688.135 1551.85,688.135 1552.41,688.135 1552.97,688.135 1553.53,688.135 1554.09,688.135 1554.65,688.135 1555.21,688.135 1555.77,688.135 1556.33,688.135 1556.89,688.135 1557.45,688.135 1558,688.135 1558.56,688.135 1559.12,688.135 1559.68,688.135 1560.24,688.135 1560.8,688.135 1561.36,688.135 1561.92,688.135 1562.48,688.135 1563.04,688.135 1563.6,688.135 1564.16,688.135 1564.72,688.135 1565.28,688.135 1565.83,688.135 1566.39,688.135 1566.95,688.135 1567.51,688.135 1568.07,688.135 1568.63,688.135 1569.19,688.135 1569.75,688.135 1570.31,688.135 1570.87,688.135 1571.43,688.135 1571.99,688.135 1572.55,688.135 1573.1,688.135 1573.66,688.135 1574.22,688.135 1574.78,688.135 1575.34,688.135 1575.9,688.135 1576.46,688.135 1577.02,688.135 1577.58,688.135 1578.14,688.135 1578.7,688.135 1579.26,688.135 1579.82,688.135 1580.37,688.135 1580.93,688.135 1581.49,688.135 1582.05,688.135 1582.61,688.135 1583.17,688.135 1583.73,688.135 1584.29,688.135 1584.85,688.135 1585.41,688.135 1585.97,688.135 1586.53,688.135 1587.09,688.135 1587.65,688.135 1588.2,688.135 1588.76,688.135 1589.32,688.135 1589.88,688.135 1590.44,688.135 1591,688.135 1591.56,688.135 1592.12,688.135 1592.68,688.135 1593.24,688.135 1593.8,688.135 1594.36,688.135 1594.92,688.135 1595.47,688.135 1596.03,688.135 1596.59,688.135 1597.15,688.135 1597.71,688.135 1598.27,688.135 1598.83,688.135 1599.39,688.135 1599.95,688.135 1600.51,688.135 1601.07,688.135 1601.63,688.135 1602.19,688.135 1602.74,688.135 1603.3,688.135 1603.86,688.135 1604.42,688.135 1604.98,688.135 1605.54,688.135 1606.1,688.135 1606.66,688.135 1607.22,688.135 1607.78,688.135 1608.34,688.135 1608.9,688.135 1609.46,688.135 1610.02,688.135 1610.57,688.135 1611.13,688.135 1611.69,688.135 1612.25,688.135 1612.81,688.135 1613.37,688.135 1613.93,688.135 1614.49,688.135 1615.05,688.135 1615.61,688.135 1616.17,688.135 1616.73,688.135 1617.29,688.135 1617.84,688.135 1618.4,688.135 1618.96,688.135 1619.52,688.135 1620.08,688.135 1620.64,688.135 1621.2,688.135 1621.76,688.135 1622.32,688.135 1622.88,688.135 1623.44,688.135 1624,688.135 1624.56,688.135 1625.11,688.135 1625.67,688.135 1626.23,688.135 1626.79,688.135 1627.35,688.135 1627.91,688.135 1628.47,688.135 1629.03,688.135 1629.59,688.135 1630.15,688.135 1630.71,688.135 1631.27,688.135 1631.83,688.135 1632.39,688.135 1632.94,688.135 1633.5,688.135 1634.06,688.135 1634.62,688.135 1635.18,688.135 1635.74,688.135 1636.3,688.135 1636.86,688.135 1637.42,688.135 1637.98,688.135 1638.54,688.135 1639.1,688.135 1639.66,688.135 1640.21,688.135 1640.77,688.135 1641.33,688.135 1641.89,688.135 1642.45,688.135 1643.01,688.135 1643.57,688.135 1644.13,688.135 1644.69,688.135 1645.25,688.135 1645.81,688.135 1646.37,688.135 1646.93,688.135 1647.48,688.135 1648.04,688.135 1648.6,688.135 1649.16,688.135 1649.72,688.135 1650.28,688.135 1650.84,688.135 1651.4,688.135 1651.96,688.135 1652.52,688.135 1653.08,688.135 1653.64,688.135 1654.2,688.135 1654.76,688.135 1655.31,688.135 1655.87,688.135 1656.43,688.135 1656.99,688.135 1657.55,688.135 1658.11,688.135 1658.67,688.135 1659.23,688.135 1659.79,688.135 1660.35,688.135 1660.91,688.135 1661.47,688.135 1662.03,688.135 1662.58,688.135 1663.14,688.135 1663.7,688.135 1664.26,688.135 1664.82,688.135 1665.38,688.135 1665.94,688.135 1666.5,688.135 1667.06,688.135 1667.62,688.135 1668.18,688.135 1668.74,688.135 1669.3,688.135 1669.85,688.135 1670.41,688.135 1670.97,688.135 1671.53,688.135 1672.09,688.135 1672.65,688.135 1673.21,688.135 1673.77,688.135 1674.33,688.135 1674.89,688.135 1675.45,688.135 1676.01,688.135 1676.57,688.135 1677.13,688.135 1677.68,688.135 1678.24,688.135 1678.8,688.135 1679.36,688.135 1679.92,688.135 1680.48,688.135 1681.04,688.135 1681.6,688.135 1682.16,688.135 1682.72,688.135 1683.28,688.135 1683.84,688.135 1684.4,688.135 1684.95,688.135 1685.51,688.135 1686.07,688.135 1686.63,688.135 1687.19,688.135 1687.75,688.135 1688.31,688.135 1688.87,688.135 1689.43,688.135 1689.99,688.135 1690.55,688.135 1691.11,688.135 1691.67,688.135 1692.23,688.135 1692.78,688.135 1693.34,688.135 1693.9,688.135 1694.46,688.135 1695.02,688.135 1695.58,688.135 1696.14,688.135 1696.7,688.135 1697.26,688.135 1697.82,688.135 1698.38,688.135 1698.94,688.135 1699.5,688.135 1700.05,688.135 1700.61,688.135 1701.17,688.135 1701.73,688.135 1702.29,688.135 1702.85,688.135 1703.41,688.135 1703.97,688.135 1704.53,688.135 1705.09,688.135 1705.65,688.135 1706.21,688.135 1706.77,688.135 1707.32,688.135 1707.88,688.135 1708.44,688.135 1709,688.135 1709.56,688.135 1710.12,688.135 1710.68,688.135 1711.24,688.135 1711.8,688.135 1712.36,688.135 1712.92,688.135 1713.48,688.135 1714.04,688.135 1714.6,688.135 1715.15,688.135 1715.71,688.135 1716.27,688.135 1716.83,688.135 1717.39,688.135 1717.95,688.135 1718.51,688.135 1719.07,688.135 1719.63,688.135 1720.19,688.135 1720.75,688.135 1721.31,688.135 1721.87,688.135 1722.42,688.135 1722.98,688.135 1723.54,688.135 1724.1,688.135 1724.66,688.135 1725.22,688.135 1725.78,688.135 1726.34,688.135 1726.9,688.135 1727.46,688.135 1728.02,688.135 1728.58,688.135 1729.14,688.135 1729.69,688.135 1730.25,688.135 1730.81,688.135 1731.37,688.135 1731.93,688.135 1732.49,688.135 1733.05,688.135 1733.61,688.135 1734.17,688.135 1734.73,688.135 1735.29,688.135 1735.85,688.135 1736.41,688.135 1736.97,688.135 1737.52,688.135 1738.08,688.135 1738.64,688.135 1739.2,688.135 1739.76,688.135 1740.32,688.135 1740.88,688.135 1741.44,688.135 1742,688.135 1742.56,688.135 1743.12,688.135 1743.68,688.135 1744.24,688.135 1744.79,688.135 1745.35,688.135 1745.91,688.135 1746.47,688.135 1747.03,688.135 1747.59,688.135 1748.15,688.135 1748.71,688.135 1749.27,688.135 1749.83,688.135 1750.39,688.135 1750.95,688.135 1751.51,688.135 1752.06,688.135 1752.62,688.135 1753.18,688.135 1753.74,688.135 1754.3,688.135 1754.86,688.135 1755.42,688.135 1755.98,688.135 1756.54,688.135 1757.1,688.135 1757.66,688.135 1758.22,688.135 1758.78,688.135 1759.34,688.135 1759.89,688.135 1760.45,688.135 1761.01,688.135 1761.57,688.135 1762.13,688.135 1762.69,688.135 1763.25,688.135 1763.81,688.135 1764.37,688.135 1764.93,688.135 1765.49,688.135 1766.05,688.135 1766.61,688.135 1767.16,688.135 1767.72,688.135 1768.28,688.135 1768.84,688.135 1769.4,688.135 1769.96,688.135 1770.52,688.135 1771.08,688.135 1771.64,688.135 1772.2,688.135 1772.76,688.135 1773.32,688.135 1773.88,688.135 1774.43,688.135 1774.99,688.135 1775.55,688.135 1776.11,688.135 1776.67,688.135 1777.23,688.135 1777.79,688.135 1778.35,688.135 1778.91,688.135 1779.47,688.135 1780.03,688.135 1780.59,688.135 1781.15,688.135 1781.71,688.135 1782.26,688.135 1782.82,688.135 1783.38,688.135 1783.94,688.135 1784.5,688.135 1785.06,688.135 1785.62,688.135 1786.18,688.135 1786.74,688.135 1787.3,688.135 1787.86,688.135 1788.42,688.135 1788.98,688.135 1789.53,688.135 1790.09,688.135 1790.65,688.135 1791.21,688.135 1791.77,688.135 1792.33,688.135 1792.89,688.135 1793.45,688.135 1794.01,688.135 1794.57,688.135 1795.13,688.135 1795.69,688.135 1796.25,688.135 1796.8,688.135 1797.36,688.135 1797.92,688.135 1798.48,688.135 1799.04,688.135 1799.6,688.135 1800.16,688.135 1800.72,688.135 1801.28,688.135 1801.84,688.135 1802.4,688.135 1802.96,688.135 1803.52,688.135 1804.08,688.135 1804.63,688.135 1805.19,688.135 1805.75,688.135 1806.31,688.135 1806.87,688.135 1807.43,688.135 1807.99,688.135 1808.55,688.135 1809.11,688.135 1809.67,688.135 1810.23,688.135 1810.79,688.135 1811.35,688.135 1811.9,688.135 1812.46,688.135 1813.02,688.135 1813.58,688.135 1814.14,688.135 1814.7,688.135 1815.26,688.135 1815.82,688.135 1816.38,688.135 1816.94,688.135 1817.5,688.135 1818.06,688.135 1818.62,688.135 1819.18,688.135 1819.73,688.135 1820.29,688.135 1820.85,688.135 1821.41,688.135 1821.97,688.135 1822.53,688.135 1823.09,688.135 1823.65,688.135 1824.21,688.135 1824.77,688.135 1825.33,688.135 1825.89,688.135 1826.45,688.135 1827,688.135 1827.56,688.135 1828.12,688.135 1828.68,688.135 1829.24,688.135 1829.8,688.135 1830.36,688.135 1830.92,688.135 1831.48,688.135 1832.04,688.135 1832.6,688.135 1833.16,688.135 1833.72,688.135 1834.27,688.135 1834.83,688.135 1835.39,688.135 1835.95,688.135 1836.51,688.135 1837.07,688.135 1837.63,688.135 1838.19,688.135 \"/>\n<path clip-path=\"url(#clip093)\" d=\"M720.247 685.838 L720.806 685.838 L721.365 685.838 L721.924 685.838 L722.484 685.838 L723.043 685.838 L723.602 685.838 L724.161 685.838 L724.721 685.838 L725.28 685.838 L725.839 685.838 L726.398 685.838 L726.958 685.838 L727.517 685.838 L728.076 685.838 L728.635 685.838 L729.195 685.838 L729.754 685.838 L730.313 685.838 L730.872 685.838 L731.432 685.838 L731.991 685.838 L732.55 685.838 L733.109 685.838 L733.669 685.838 L734.228 685.838 L734.787 685.838 L735.346 685.838 L735.906 685.838 L736.465 685.838 L737.024 685.838 L737.583 685.838 L738.143 685.838 L738.702 685.838 L739.261 685.838 L739.82 685.838 L740.38 685.838 L740.939 685.838 L741.498 685.838 L742.057 685.838 L742.617 685.838 L743.176 685.838 L743.735 685.838 L744.294 685.838 L744.854 685.838 L745.413 685.838 L745.972 685.838 L746.531 685.838 L747.091 685.838 L747.65 685.838 L748.209 685.838 L748.768 685.838 L749.328 685.838 L749.887 685.838 L750.446 685.838 L751.005 685.838 L751.565 685.838 L752.124 685.838 L752.683 685.838 L753.242 685.838 L753.802 685.838 L754.361 685.838 L754.92 685.838 L755.479 685.838 L756.039 685.838 L756.598 685.838 L757.157 685.838 L757.716 685.838 L758.276 685.838 L758.835 685.838 L759.394 685.838 L759.953 685.838 L760.513 685.838 L761.072 685.838 L761.631 685.838 L762.19 685.838 L762.75 685.838 L763.309 685.838 L763.868 685.838 L764.427 685.838 L764.987 685.838 L765.546 685.838 L766.105 685.838 L766.664 685.838 L767.224 685.838 L767.783 685.838 L768.342 685.838 L768.901 685.838 L769.461 685.838 L770.02 685.838 L770.579 685.838 L771.138 685.838 L771.698 685.838 L772.257 685.838 L772.816 685.838 L773.375 685.838 L773.935 685.838 L774.494 685.838 L775.053 685.838 L775.612 685.838 L776.172 685.838 L776.731 685.838 L777.29 685.838 L777.849 685.838 L778.409 685.838 L778.968 685.838 L779.527 685.838 L780.086 685.838 L780.646 685.838 L781.205 685.838 L781.764 685.838 L782.323 685.838 L782.883 685.838 L783.442 685.838 L784.001 685.838 L784.56 685.838 L785.12 685.838 L785.679 685.838 L786.238 685.838 L786.797 685.838 L787.357 685.838 L787.916 685.838 L788.475 685.838 L789.034 685.838 L789.594 685.838 L790.153 685.838 L790.712 685.838 L791.271 685.838 L791.831 685.838 L792.39 685.838 L792.949 685.838 L793.508 685.838 L794.068 685.838 L794.627 685.838 L795.186 685.838 L795.745 685.838 L796.305 685.838 L796.864 685.838 L797.423 685.838 L797.982 685.838 L798.542 685.838 L799.101 685.838 L799.66 685.838 L800.219 685.838 L800.779 685.838 L801.338 685.838 L801.897 685.838 L802.456 685.838 L803.016 685.838 L803.575 685.838 L804.134 685.838 L804.693 685.838 L805.253 685.838 L805.812 685.838 L806.371 685.838 L806.931 685.838 L807.49 685.838 L808.049 685.838 L808.608 685.838 L809.168 685.838 L809.727 685.838 L810.286 685.838 L810.845 685.838 L811.405 685.838 L811.964 685.838 L812.523 685.838 L813.082 685.838 L813.642 685.838 L814.201 685.838 L814.76 685.838 L815.319 685.838 L815.879 685.838 L816.438 685.838 L816.997 685.838 L817.556 685.838 L818.116 685.838 L818.675 685.838 L819.234 685.838 L819.793 685.838 L820.353 685.838 L820.912 685.838 L821.471 685.838 L822.03 685.838 L822.59 685.838 L823.149 685.838 L823.708 685.838 L824.267 685.838 L824.827 685.838 L825.386 685.838 L825.945 685.838 L826.504 685.838 L827.064 685.838 L827.623 685.838 L828.182 685.838 L828.741 685.838 L829.301 685.838 L829.86 685.838 L830.419 685.838 L830.978 685.838 L831.538 685.838 L832.097 685.838 L832.656 685.838 L833.215 685.838 L833.775 685.838 L834.334 685.838 L834.893 685.838 L835.452 685.838 L836.012 685.838 L836.571 685.838 L837.13 685.838 L837.689 685.838 L838.249 685.838 L838.808 685.838 L839.367 685.838 L839.926 685.838 L840.486 685.838 L841.045 685.838 L841.604 685.838 L842.163 685.838 L842.723 685.838 L843.282 685.838 L843.841 685.838 L844.4 685.838 L844.96 685.838 L845.519 685.838 L846.078 685.838 L846.637 685.838 L847.197 685.838 L847.756 685.838 L848.315 685.838 L848.874 685.838 L849.434 685.838 L849.993 685.838 L850.552 685.838 L851.111 685.838 L851.671 685.838 L852.23 685.838 L852.789 685.838 L853.348 685.838 L853.908 685.838 L854.467 685.838 L855.026 685.838 L855.585 685.838 L856.145 685.838 L856.704 685.838 L857.263 685.838 L857.822 685.838 L858.382 685.838 L858.941 685.838 L859.5 685.838 L860.059 685.838 L860.619 685.838 L861.178 685.838 L861.737 685.838 L862.296 685.838 L862.856 685.838 L863.415 685.838 L863.974 685.838 L864.533 685.838 L865.093 685.838 L865.652 685.838 L866.211 685.838 L866.77 685.838 L867.33 685.838 L867.889 685.838 L868.448 685.838 L869.007 685.838 L869.567 685.838 L870.126 685.838 L870.685 685.838 L871.244 685.838 L871.804 685.838 L872.363 685.838 L872.922 685.838 L873.481 685.838 L874.041 685.838 L874.6 685.838 L875.159 685.838 L875.718 685.838 L876.278 685.838 L876.837 685.838 L877.396 685.838 L877.955 685.838 L878.515 685.838 L879.074 685.838 L879.633 685.838 L880.192 685.838 L880.752 685.838 L881.311 685.838 L881.87 685.838 L882.429 685.838 L882.989 685.838 L883.548 685.838 L884.107 685.838 L884.666 685.838 L885.226 685.838 L885.785 685.838 L886.344 685.838 L886.903 685.838 L887.463 685.838 L888.022 685.838 L888.581 685.838 L889.14 685.838 L889.7 685.838 L890.259 685.838 L890.818 685.838 L891.377 685.838 L891.937 685.838 L892.496 685.838 L893.055 685.838 L893.614 685.838 L894.174 685.838 L894.733 685.838 L895.292 685.838 L895.851 685.838 L896.411 685.838 L896.97 685.838 L897.529 685.838 L898.088 685.838 L898.648 685.838 L899.207 685.838 L899.766 685.838 L900.325 685.838 L900.885 685.838 L901.444 685.838 L902.003 685.838 L902.562 685.838 L903.122 685.838 L903.681 685.838 L904.24 685.838 L904.799 685.838 L905.359 685.838 L905.918 685.838 L906.477 685.838 L907.036 685.838 L907.596 685.838 L908.155 685.838 L908.714 685.838 L909.273 685.838 L909.833 685.838 L910.392 685.838 L910.951 685.838 L911.51 685.838 L912.07 685.838 L912.629 685.838 L913.188 685.838 L913.747 685.838 L914.307 685.838 L914.866 685.838 L915.425 685.838 L915.984 685.838 L916.544 685.838 L917.103 685.838 L917.662 685.838 L918.221 685.838 L918.781 685.838 L919.34 685.838 L919.899 685.838 L920.458 685.838 L921.018 685.838 L921.577 685.838 L922.136 685.838 L922.695 685.838 L923.255 685.838 L923.814 685.838 L924.373 685.838 L924.932 685.838 L925.492 685.838 L926.051 685.838 L926.61 685.838 L927.169 685.838 L927.729 685.838 L928.288 685.838 L928.847 685.838 L929.406 685.838 L929.966 685.838 L930.525 685.838 L931.084 685.838 L931.644 685.838 L932.203 685.838 L932.762 685.838 L933.321 685.838 L933.881 685.838 L934.44 685.838 L934.999 685.838 L935.558 685.838 L936.118 685.838 L936.677 685.838 L937.236 685.838 L937.795 685.838 L938.355 685.838 L938.914 685.838 L939.473 685.838 L940.032 685.838 L940.592 685.838 L941.151 685.838 L941.71 685.838 L942.269 685.838 L942.829 685.838 L943.388 685.838 L943.947 685.838 L944.506 685.838 L945.066 685.838 L945.625 685.838 L946.184 685.838 L946.743 685.838 L947.303 685.838 L947.862 685.838 L948.421 685.838 L948.98 685.838 L949.54 685.838 L950.099 685.838 L950.658 685.838 L951.217 685.838 L951.777 685.838 L952.336 685.838 L952.895 685.838 L953.454 685.838 L954.014 685.838 L954.573 685.838 L955.132 685.838 L955.691 685.838 L956.251 685.838 L956.81 685.838 L957.369 685.838 L957.928 685.838 L958.488 685.838 L959.047 685.838 L959.606 685.838 L960.165 685.838 L960.725 685.838 L961.284 685.838 L961.843 685.838 L962.402 685.838 L962.962 685.838 L963.521 685.838 L964.08 685.838 L964.639 685.838 L965.199 685.838 L965.758 685.838 L966.317 685.838 L966.876 685.838 L967.436 685.838 L967.995 685.838 L968.554 685.838 L969.113 685.838 L969.673 685.838 L970.232 685.838 L970.791 685.838 L971.35 685.838 L971.91 685.838 L972.469 685.838 L973.028 685.838 L973.587 685.838 L974.147 685.838 L974.706 685.838 L975.265 685.838 L975.824 685.838 L976.384 685.838 L976.943 685.838 L977.502 685.838 L978.061 685.838 L978.621 685.838 L979.18 685.838 L979.739 685.838 L980.298 685.838 L980.858 685.838 L981.417 685.838 L981.976 685.838 L982.535 685.838 L983.095 685.838 L983.654 685.838 L984.213 685.838 L984.772 685.838 L985.332 685.838 L985.891 685.838 L986.45 685.838 L987.009 685.838 L987.569 685.838 L988.128 685.838 L988.687 685.838 L989.246 685.838 L989.806 685.838 L990.365 685.838 L990.924 685.838 L991.483 685.838 L992.043 685.838 L992.602 685.838 L993.161 685.838 L993.72 685.838 L994.28 685.838 L994.839 685.838 L995.398 685.838 L995.957 685.838 L996.517 685.838 L997.076 685.838 L997.635 685.838 L998.194 685.838 L998.754 685.838 L999.313 685.838 L999.872 685.838 L1000.43 685.838 L1000.99 685.838 L1001.55 685.838 L1002.11 685.838 L1002.67 685.838 L1003.23 685.838 L1003.79 685.838 L1004.35 685.838 L1004.91 685.838 L1005.46 685.838 L1006.02 685.838 L1006.58 685.838 L1007.14 685.838 L1007.7 685.838 L1008.26 685.838 L1008.82 685.838 L1009.38 685.838 L1009.94 685.838 L1010.5 685.838 L1011.06 685.838 L1011.62 685.838 L1012.18 685.838 L1012.73 685.838 L1013.29 685.838 L1013.85 685.838 L1014.41 685.838 L1014.97 685.838 L1015.53 685.838 L1016.09 685.838 L1016.65 685.838 L1017.21 685.838 L1017.77 685.838 L1018.33 685.838 L1018.89 685.838 L1019.45 685.838 L1020.01 685.838 L1020.56 685.838 L1021.12 685.838 L1021.68 685.838 L1022.24 685.838 L1022.8 685.838 L1023.36 685.838 L1023.92 685.838 L1024.48 685.838 L1025.04 685.838 L1025.6 685.838 L1026.16 685.838 L1026.72 685.838 L1027.28 685.838 L1027.83 685.838 L1028.39 685.838 L1028.95 685.838 L1029.51 685.838 L1030.07 685.838 L1030.63 685.838 L1031.19 685.838 L1031.75 685.838 L1032.31 685.838 L1032.87 685.838 L1033.43 685.838 L1033.99 685.838 L1034.55 685.838 L1035.1 685.838 L1035.66 685.838 L1036.22 685.838 L1036.78 685.838 L1037.34 685.838 L1037.9 685.838 L1038.46 685.838 L1039.02 685.838 L1039.58 685.838 L1040.14 685.838 L1040.7 685.838 L1041.26 685.838 L1041.82 685.838 L1042.38 685.838 L1042.93 685.838 L1043.49 685.838 L1044.05 685.838 L1044.61 685.838 L1045.17 685.838 L1045.73 685.838 L1046.29 685.838 L1046.85 685.838 L1047.41 685.838 L1047.97 685.838 L1048.53 685.838 L1049.09 685.838 L1049.65 685.838 L1050.2 685.838 L1050.76 685.838 L1051.32 685.838 L1051.88 685.838 L1052.44 685.838 L1053 685.838 L1053.56 685.838 L1054.12 685.838 L1054.68 685.838 L1055.24 685.838 L1055.8 685.838 L1056.36 685.838 L1056.92 685.838 L1057.48 685.838 L1058.03 685.838 L1058.59 685.838 L1059.15 685.838 L1059.71 685.838 L1060.27 685.838 L1060.83 685.838 L1061.39 685.838 L1061.95 685.838 L1062.51 685.838 L1063.07 685.838 L1063.63 685.838 L1064.19 685.838 L1064.75 685.838 L1065.3 685.838 L1065.86 685.838 L1066.42 685.838 L1066.98 685.838 L1067.54 685.838 L1068.1 685.838 L1068.66 685.838 L1069.22 685.838 L1069.78 685.838 L1070.34 685.838 L1070.9 685.838 L1071.46 685.838 L1072.02 685.838 L1072.57 685.838 L1073.13 685.838 L1073.69 685.838 L1074.25 685.838 L1074.81 685.838 L1075.37 685.838 L1075.93 685.838 L1076.49 685.838 L1077.05 685.838 L1077.61 685.838 L1078.17 685.838 L1078.73 685.838 L1079.29 685.838 L1079.85 685.838 L1080.4 685.838 L1080.96 685.838 L1081.52 685.838 L1082.08 685.838 L1082.64 685.838 L1083.2 685.838 L1083.76 685.838 L1084.32 685.838 L1084.88 685.838 L1085.44 685.838 L1086 685.838 L1086.56 685.838 L1087.12 685.838 L1087.67 685.838 L1088.23 685.838 L1088.79 685.838 L1089.35 685.838 L1089.91 685.838 L1090.47 685.838 L1091.03 685.838 L1091.59 685.838 L1092.15 685.838 L1092.71 685.838 L1093.27 685.838 L1093.83 685.838 L1094.39 685.838 L1094.94 685.838 L1095.5 685.838 L1096.06 685.838 L1096.62 685.838 L1097.18 685.838 L1097.74 685.838 L1098.3 685.838 L1098.86 685.838 L1099.42 685.838 L1099.98 685.838 L1100.54 685.838 L1101.1 685.838 L1101.66 685.838 L1102.22 685.838 L1102.77 685.838 L1103.33 685.838 L1103.89 685.838 L1104.45 685.838 L1105.01 685.838 L1105.57 685.838 L1106.13 685.838 L1106.69 685.838 L1107.25 685.838 L1107.81 685.838 L1108.37 685.838 L1108.93 685.838 L1109.49 685.838 L1110.04 685.838 L1110.6 685.838 L1111.16 685.838 L1111.72 685.838 L1112.28 685.838 L1112.84 685.838 L1113.4 685.838 L1113.96 685.838 L1114.52 685.838 L1115.08 685.838 L1115.64 685.838 L1116.2 685.838 L1116.76 685.838 L1117.31 685.838 L1117.87 685.838 L1118.43 685.838 L1118.99 685.838 L1119.55 685.838 L1120.11 685.838 L1120.67 685.838 L1121.23 685.838 L1121.79 685.838 L1122.35 685.838 L1122.91 685.838 L1123.47 685.838 L1124.03 685.838 L1124.59 685.838 L1125.14 685.838 L1125.7 685.838 L1126.26 685.838 L1126.82 685.838 L1127.38 685.838 L1127.94 685.838 L1128.5 685.838 L1129.06 685.838 L1129.62 685.838 L1130.18 685.838 L1130.74 685.838 L1131.3 685.838 L1131.86 685.838 L1132.41 685.838 L1132.97 685.838 L1133.53 685.838 L1134.09 685.838 L1134.65 685.838 L1135.21 685.838 L1135.77 685.838 L1136.33 685.838 L1136.89 685.838 L1137.45 685.838 L1138.01 685.838 L1138.57 685.838 L1139.13 685.838 L1139.68 685.838 L1140.24 685.838 L1140.8 685.838 L1141.36 685.838 L1141.92 685.838 L1142.48 685.838 L1143.04 685.838 L1143.6 685.838 L1144.16 685.838 L1144.72 685.838 L1145.28 685.838 L1145.84 685.838 L1146.4 685.838 L1146.96 685.838 L1147.51 685.838 L1148.07 685.838 L1148.63 685.838 L1149.19 685.838 L1149.75 685.838 L1150.31 685.838 L1150.87 685.838 L1151.43 685.838 L1151.99 685.838 L1152.55 685.838 L1153.11 685.838 L1153.67 685.838 L1154.23 685.838 L1154.78 685.838 L1155.34 685.838 L1155.9 685.838 L1156.46 685.838 L1157.02 685.838 L1157.58 685.838 L1158.14 685.838 L1158.7 685.838 L1159.26 685.838 L1159.82 685.838 L1160.38 685.838 L1160.94 685.838 L1161.5 685.838 L1162.05 685.838 L1162.61 685.838 L1163.17 685.838 L1163.73 685.838 L1164.29 685.838 L1164.85 685.838 L1165.41 685.838 L1165.97 685.838 L1166.53 685.838 L1167.09 685.838 L1167.65 685.838 L1168.21 685.838 L1168.77 685.838 L1169.33 685.838 L1169.88 685.838 L1170.44 685.838 L1171 685.838 L1171.56 685.838 L1172.12 685.838 L1172.68 685.838 L1173.24 685.838 L1173.8 685.838 L1174.36 685.838 L1174.92 685.838 L1175.48 685.838 L1176.04 685.838 L1176.6 685.838 L1177.15 685.838 L1177.71 685.838 L1178.27 685.838 L1178.83 685.838 L1179.39 685.838 L1179.95 685.838 L1180.51 685.838 L1181.07 685.838 L1181.63 685.838 L1182.19 685.838 L1182.75 685.838 L1183.31 685.838 L1183.87 685.838 L1184.43 685.838 L1184.98 685.838 L1185.54 685.838 L1186.1 685.838 L1186.66 685.838 L1187.22 685.838 L1187.78 685.838 L1188.34 685.838 L1188.9 685.838 L1189.46 685.838 L1190.02 685.838 L1190.58 685.838 L1191.14 685.838 L1191.7 685.838 L1192.25 685.838 L1192.81 685.838 L1193.37 685.838 L1193.93 685.838 L1194.49 685.838 L1195.05 685.838 L1195.61 685.838 L1196.17 685.838 L1196.73 685.838 L1197.29 685.838 L1197.85 685.838 L1198.41 685.838 L1198.97 685.838 L1199.52 685.838 L1200.08 685.838 L1200.64 685.838 L1201.2 685.838 L1201.76 685.838 L1202.32 685.838 L1202.88 685.838 L1203.44 685.838 L1204 685.838 L1204.56 685.838 L1205.12 685.838 L1205.68 685.838 L1206.24 685.838 L1206.8 685.838 L1207.35 685.838 L1207.91 685.838 L1208.47 685.838 L1209.03 685.838 L1209.59 685.838 L1210.15 685.838 L1210.71 685.838 L1211.27 685.838 L1211.83 685.838 L1212.39 685.838 L1212.95 685.838 L1213.51 685.838 L1214.07 685.838 L1214.62 685.838 L1215.18 685.838 L1215.74 685.838 L1216.3 685.838 L1216.86 685.838 L1217.42 685.838 L1217.98 685.838 L1218.54 685.838 L1219.1 685.838 L1219.66 685.838 L1220.22 685.838 L1220.78 685.838 L1221.34 685.838 L1221.89 685.838 L1222.45 685.838 L1223.01 685.838 L1223.57 685.838 L1224.13 685.838 L1224.69 685.838 L1225.25 685.838 L1225.81 685.838 L1226.37 685.838 L1226.93 685.838 L1227.49 685.838 L1228.05 685.838 L1228.61 685.838 L1229.17 685.838 L1229.72 685.838 L1230.28 685.838 L1230.84 685.838 L1231.4 685.838 L1231.96 685.838 L1232.52 685.838 L1233.08 685.838 L1233.64 685.838 L1234.2 685.838 L1234.76 685.838 L1235.32 685.838 L1235.88 685.838 L1236.44 685.838 L1236.99 685.838 L1237.55 685.838 L1238.11 685.838 L1238.67 685.838 L1239.23 685.838 L1239.79 685.838 L1240.35 685.838 L1240.91 685.838 L1241.47 685.838 L1242.03 685.838 L1242.59 685.838 L1243.15 685.838 L1243.71 685.838 L1244.26 685.838 L1244.82 685.838 L1245.38 685.838 L1245.94 685.838 L1246.5 685.838 L1247.06 685.838 L1247.62 685.838 L1248.18 685.838 L1248.74 685.838 L1249.3 685.838 L1249.86 685.838 L1250.42 685.838 L1250.98 685.838 L1251.54 685.838 L1252.09 685.838 L1252.65 685.838 L1253.21 685.838 L1253.77 685.838 L1254.33 685.838 L1254.89 685.838 L1255.45 685.838 L1256.01 685.838 L1256.57 685.838 L1257.13 685.838 L1257.69 685.838 L1258.25 685.838 L1258.81 685.838 L1259.36 685.838 L1259.92 685.838 L1260.48 685.838 L1261.04 685.838 L1261.6 685.838 L1262.16 685.838 L1262.72 685.838 L1263.28 685.838 L1263.84 685.838 L1264.4 685.838 L1264.96 685.838 L1265.52 685.838 L1266.08 685.838 L1266.63 685.838 L1267.19 685.838 L1267.75 685.838 L1268.31 685.838 L1268.87 685.838 L1269.43 685.838 L1269.99 685.838 L1270.55 685.838 L1271.11 685.838 L1271.67 685.838 L1272.23 685.838 L1272.79 685.838 L1273.35 685.838 L1273.91 685.838 L1274.46 685.838 L1275.02 685.838 L1275.58 685.838 L1276.14 685.838 L1276.7 685.838 L1277.26 685.838 L1277.82 685.838 L1278.38 685.838 L1278.94 685.838 L1279.5 685.838 L1280.06 685.838 L1280.62 685.838 L1281.18 685.838 L1281.73 685.838 L1282.29 685.838 L1282.85 685.838 L1283.41 685.838 L1283.97 685.838 L1284.53 685.838 L1285.09 685.838 L1285.65 685.838 L1286.21 685.838 L1286.77 685.838 L1287.33 685.838 L1287.89 685.838 L1288.45 685.838 L1289 685.838 L1289.56 685.838 L1290.12 685.838 L1290.68 685.838 L1291.24 685.838 L1291.8 685.838 L1292.36 685.838 L1292.92 685.838 L1293.48 685.838 L1294.04 685.838 L1294.6 685.838 L1295.16 685.838 L1295.72 685.838 L1296.28 685.838 L1296.83 685.838 L1297.39 685.838 L1297.95 685.838 L1298.51 685.838 L1299.07 685.838 L1299.63 685.838 L1300.19 685.838 L1300.75 685.838 L1301.31 685.838 L1301.87 685.838 L1302.43 685.838 L1302.99 685.838 L1303.55 685.838 L1304.1 685.838 L1304.66 685.838 L1305.22 685.838 L1305.78 685.838 L1306.34 685.838 L1306.9 685.838 L1307.46 685.838 L1308.02 685.838 L1308.58 685.838 L1309.14 685.838 L1309.7 685.838 L1310.26 685.838 L1310.82 685.838 L1311.38 685.838 L1311.93 685.838 L1312.49 685.838 L1313.05 685.838 L1313.61 685.838 L1314.17 685.838 L1314.73 685.838 L1315.29 685.838 L1315.85 685.838 L1316.41 685.838 L1316.97 685.838 L1317.53 685.838 L1318.09 685.838 L1318.65 685.838 L1319.2 685.838 L1319.76 685.838 L1320.32 685.838 L1320.88 685.838 L1321.44 685.838 L1322 685.838 L1322.56 685.838 L1323.12 685.838 L1323.68 685.838 L1324.24 685.838 L1324.8 685.838 L1325.36 685.838 L1325.92 685.838 L1326.47 685.838 L1327.03 685.838 L1327.59 685.838 L1328.15 685.838 L1328.71 685.838 L1329.27 685.838 L1329.83 685.838 L1330.39 685.838 L1330.95 685.838 L1331.51 685.838 L1332.07 685.838 L1332.63 685.838 L1333.19 685.838 L1333.75 685.838 L1334.3 685.838 L1334.86 685.838 L1335.42 685.838 L1335.98 685.838 L1336.54 685.838 L1337.1 685.838 L1337.66 685.838 L1338.22 685.838 L1338.78 685.838 L1339.34 685.838 L1339.9 685.838 L1340.46 685.838 L1341.02 685.838 L1341.57 685.838 L1342.13 685.838 L1342.69 685.838 L1343.25 685.838 L1343.81 685.838 L1344.37 685.838 L1344.93 685.838 L1345.49 685.838 L1346.05 685.838 L1346.61 685.838 L1347.17 685.838 L1347.73 685.838 L1348.29 685.838 L1348.84 685.838 L1349.4 685.838 L1349.96 685.838 L1350.52 685.838 L1351.08 685.838 L1351.64 685.838 L1352.2 685.838 L1352.76 685.838 L1353.32 685.838 L1353.88 685.838 L1354.44 685.838 L1355 685.838 L1355.56 685.838 L1356.12 685.838 L1356.67 685.838 L1357.23 685.838 L1357.79 685.838 L1358.35 685.838 L1358.91 685.838 L1359.47 685.838 L1360.03 685.838 L1360.59 685.838 L1361.15 685.838 L1361.71 685.838 L1362.27 685.838 L1362.83 685.838 L1363.39 685.838 L1363.94 685.838 L1364.5 685.838 L1365.06 685.838 L1365.62 685.838 L1366.18 685.838 L1366.74 685.838 L1367.3 685.838 L1367.86 685.838 L1368.42 685.838 L1368.98 685.838 L1369.54 685.838 L1370.1 685.838 L1370.66 685.838 L1371.21 685.838 L1371.77 685.838 L1372.33 685.838 L1372.89 685.838 L1373.45 685.838 L1374.01 685.838 L1374.57 685.838 L1375.13 685.838 L1375.69 685.838 L1376.25 685.838 L1376.81 685.838 L1377.37 685.838 L1377.93 685.838 L1378.49 685.838 L1379.04 685.838 L1379.6 685.838 L1380.16 685.838 L1380.72 685.838 L1381.28 685.838 L1381.84 685.838 L1382.4 685.838 L1382.96 685.838 L1383.52 685.838 L1384.08 685.838 L1384.64 685.838 L1385.2 685.838 L1385.76 685.838 L1386.31 685.838 L1386.87 685.838 L1387.43 685.838 L1387.99 685.838 L1388.55 685.838 L1389.11 685.838 L1389.67 685.838 L1390.23 685.838 L1390.79 685.838 L1391.35 685.838 L1391.91 685.838 L1392.47 685.838 L1393.03 685.838 L1393.58 685.838 L1394.14 685.838 L1394.7 685.838 L1395.26 685.838 L1395.82 685.838 L1396.38 685.838 L1396.94 685.838 L1397.5 685.838 L1398.06 685.838 L1398.62 685.838 L1399.18 685.838 L1399.74 685.838 L1400.3 685.838 L1400.86 685.838 L1401.41 685.838 L1401.97 685.838 L1402.53 685.838 L1403.09 685.838 L1403.65 685.838 L1404.21 685.838 L1404.77 685.838 L1405.33 685.838 L1405.89 685.838 L1406.45 685.838 L1407.01 685.838 L1407.57 685.838 L1408.13 685.838 L1408.68 685.838 L1409.24 685.838 L1409.8 685.838 L1410.36 685.838 L1410.92 685.838 L1411.48 685.838 L1412.04 685.838 L1412.6 685.838 L1413.16 685.838 L1413.72 685.838 L1414.28 685.838 L1414.84 685.838 L1415.4 685.838 L1415.95 685.838 L1416.51 685.838 L1417.07 685.838 L1417.63 685.838 L1418.19 685.838 L1418.75 685.838 L1419.31 685.838 L1419.87 685.838 L1420.43 685.838 L1420.99 685.838 L1421.55 685.838 L1422.11 685.838 L1422.67 685.838 L1423.23 685.838 L1423.78 685.838 L1424.34 685.838 L1424.9 685.838 L1425.46 685.838 L1426.02 685.838 L1426.58 685.838 L1427.14 685.838 L1427.7 685.838 L1428.26 685.838 L1428.82 685.838 L1429.38 685.838 L1429.94 685.838 L1430.5 685.838 L1431.05 685.838 L1431.61 685.838 L1432.17 685.838 L1432.73 685.838 L1433.29 685.838 L1433.85 685.838 L1434.41 685.838 L1434.97 685.838 L1435.53 685.838 L1436.09 685.838 L1436.65 685.838 L1437.21 685.838 L1437.77 685.838 L1438.33 685.838 L1438.88 685.838 L1439.44 685.838 L1440 685.838 L1440.56 685.838 L1441.12 685.838 L1441.68 685.838 L1442.24 685.838 L1442.8 685.838 L1443.36 685.838 L1443.92 685.838 L1444.48 685.838 L1445.04 685.838 L1445.6 685.838 L1446.15 685.838 L1446.71 685.838 L1447.27 685.838 L1447.83 685.838 L1448.39 685.838 L1448.95 685.838 L1449.51 685.838 L1450.07 685.838 L1450.63 685.838 L1451.19 685.838 L1451.75 685.838 L1452.31 685.838 L1452.87 685.838 L1453.42 685.838 L1453.98 685.838 L1454.54 685.838 L1455.1 685.838 L1455.66 685.838 L1456.22 685.838 L1456.78 685.838 L1457.34 685.838 L1457.9 685.838 L1458.46 685.838 L1459.02 685.838 L1459.58 685.838 L1460.14 685.838 L1460.7 685.838 L1461.25 685.838 L1461.81 685.838 L1462.37 685.838 L1462.93 685.838 L1463.49 685.838 L1464.05 685.838 L1464.61 685.838 L1465.17 685.838 L1465.73 685.838 L1466.29 685.838 L1466.85 685.838 L1467.41 685.838 L1467.97 685.838 L1468.52 685.838 L1469.08 685.838 L1469.64 685.838 L1470.2 685.838 L1470.76 685.838 L1471.32 685.838 L1471.88 685.838 L1472.44 685.838 L1473 685.838 L1473.56 685.838 L1474.12 685.838 L1474.68 685.838 L1475.24 685.838 L1475.79 685.838 L1476.35 685.838 L1476.91 685.838 L1477.47 685.838 L1478.03 685.838 L1478.59 685.838 L1479.15 685.838 L1479.71 685.838 L1480.27 685.838 L1480.83 685.838 L1481.39 685.838 L1481.95 685.838 L1482.51 685.838 L1483.07 685.838 L1483.62 685.838 L1484.18 685.838 L1484.74 685.838 L1485.3 685.838 L1485.86 685.838 L1486.42 685.838 L1486.98 685.838 L1487.54 685.838 L1488.1 685.838 L1488.66 685.838 L1489.22 685.838 L1489.78 685.838 L1490.34 685.838 L1490.89 685.838 L1491.45 685.838 L1492.01 685.838 L1492.57 685.838 L1493.13 685.838 L1493.69 685.838 L1494.25 685.838 L1494.81 685.838 L1495.37 685.838 L1495.93 685.838 L1496.49 685.838 L1497.05 685.838 L1497.61 685.838 L1498.16 685.838 L1498.72 685.838 L1499.28 685.838 L1499.84 685.838 L1500.4 685.838 L1500.96 685.838 L1501.52 685.838 L1502.08 685.838 L1502.64 685.838 L1503.2 685.838 L1503.76 685.838 L1504.32 685.838 L1504.88 685.838 L1505.44 685.838 L1505.99 685.838 L1506.55 685.838 L1507.11 685.838 L1507.67 685.838 L1508.23 685.838 L1508.79 685.838 L1509.35 685.838 L1509.91 685.838 L1510.47 685.838 L1511.03 685.838 L1511.59 685.838 L1512.15 685.838 L1512.71 685.838 L1513.26 685.838 L1513.82 685.838 L1514.38 685.838 L1514.94 685.838 L1515.5 685.838 L1516.06 685.838 L1516.62 685.838 L1517.18 685.838 L1517.74 685.838 L1518.3 685.838 L1518.86 685.838 L1519.42 685.838 L1519.98 685.838 L1520.53 685.838 L1521.09 685.838 L1521.65 685.838 L1522.21 685.838 L1522.77 685.838 L1523.33 685.838 L1523.89 685.838 L1524.45 685.838 L1525.01 685.838 L1525.57 685.838 L1526.13 685.838 L1526.69 685.838 L1527.25 685.838 L1527.81 685.838 L1528.36 685.838 L1528.92 685.838 L1529.48 685.838 L1530.04 685.838 L1530.6 685.838 L1531.16 685.838 L1531.72 685.838 L1532.28 685.838 L1532.84 685.838 L1533.4 685.838 L1533.96 685.838 L1534.52 685.838 L1535.08 685.838 L1535.63 685.838 L1536.19 685.838 L1536.75 685.838 L1537.31 685.838 L1537.87 685.838 L1538.43 685.838 L1538.99 685.838 L1539.55 685.838 L1540.11 685.838 L1540.67 685.838 L1541.23 685.838 L1541.79 685.838 L1542.35 685.838 L1542.9 685.838 L1543.46 685.838 L1544.02 685.838 L1544.58 685.838 L1545.14 685.838 L1545.7 685.838 L1546.26 685.838 L1546.82 685.838 L1547.38 685.838 L1547.94 685.838 L1548.5 685.838 L1549.06 685.838 L1549.62 685.838 L1550.18 685.838 L1550.73 685.838 L1551.29 685.838 L1551.85 685.838 L1552.41 685.838 L1552.97 685.838 L1553.53 685.838 L1554.09 685.838 L1554.65 685.838 L1555.21 685.838 L1555.77 685.838 L1556.33 685.838 L1556.89 685.838 L1557.45 685.838 L1558 685.838 L1558.56 685.838 L1559.12 685.838 L1559.68 685.838 L1560.24 685.838 L1560.8 685.838 L1561.36 685.838 L1561.92 685.838 L1562.48 685.838 L1563.04 685.838 L1563.6 685.838 L1564.16 685.838 L1564.72 685.838 L1565.28 685.838 L1565.83 685.838 L1566.39 685.838 L1566.95 685.838 L1567.51 685.838 L1568.07 685.838 L1568.63 685.838 L1569.19 685.838 L1569.75 685.838 L1570.31 685.838 L1570.87 685.838 L1571.43 685.838 L1571.99 685.838 L1572.55 685.838 L1573.1 685.838 L1573.66 685.838 L1574.22 685.838 L1574.78 685.838 L1575.34 685.838 L1575.9 685.838 L1576.46 685.838 L1577.02 685.838 L1577.58 685.838 L1578.14 685.838 L1578.7 685.838 L1579.26 685.838 L1579.82 685.838 L1580.37 685.838 L1580.93 685.838 L1581.49 685.838 L1582.05 685.838 L1582.61 685.838 L1583.17 685.838 L1583.73 685.838 L1584.29 685.838 L1584.85 685.838 L1585.41 685.838 L1585.97 685.838 L1586.53 685.838 L1587.09 685.838 L1587.65 685.838 L1588.2 685.838 L1588.76 685.838 L1589.32 685.838 L1589.88 685.838 L1590.44 685.838 L1591 685.838 L1591.56 685.838 L1592.12 685.838 L1592.68 685.838 L1593.24 685.838 L1593.8 685.838 L1594.36 685.838 L1594.92 685.838 L1595.47 685.838 L1596.03 685.838 L1596.59 685.838 L1597.15 685.838 L1597.71 685.838 L1598.27 685.838 L1598.83 685.838 L1599.39 685.838 L1599.95 685.838 L1600.51 685.838 L1601.07 685.838 L1601.63 685.838 L1602.19 685.838 L1602.74 685.838 L1603.3 685.838 L1603.86 685.838 L1604.42 685.838 L1604.98 685.838 L1605.54 685.838 L1606.1 685.838 L1606.66 685.838 L1607.22 685.838 L1607.78 685.838 L1608.34 685.838 L1608.9 685.838 L1609.46 685.838 L1610.02 685.838 L1610.57 685.838 L1611.13 685.838 L1611.69 685.838 L1612.25 685.838 L1612.81 685.838 L1613.37 685.838 L1613.93 685.838 L1614.49 685.838 L1615.05 685.838 L1615.61 685.838 L1616.17 685.838 L1616.73 685.838 L1617.29 685.838 L1617.84 685.838 L1618.4 685.838 L1618.96 685.838 L1619.52 685.838 L1620.08 685.838 L1620.64 685.838 L1621.2 685.838 L1621.76 685.838 L1622.32 685.838 L1622.88 685.838 L1623.44 685.838 L1624 685.838 L1624.56 685.838 L1625.11 685.838 L1625.67 685.838 L1626.23 685.838 L1626.79 685.838 L1627.35 685.838 L1627.91 685.838 L1628.47 685.838 L1629.03 685.838 L1629.59 685.838 L1630.15 685.838 L1630.71 685.838 L1631.27 685.838 L1631.83 685.838 L1632.39 685.838 L1632.94 685.838 L1633.5 685.838 L1634.06 685.838 L1634.62 685.838 L1635.18 685.838 L1635.74 685.838 L1636.3 685.838 L1636.86 685.838 L1637.42 685.838 L1637.98 685.838 L1638.54 685.838 L1639.1 685.838 L1639.66 685.838 L1640.21 685.838 L1640.77 685.838 L1641.33 685.838 L1641.89 685.838 L1642.45 685.838 L1643.01 685.838 L1643.57 685.838 L1644.13 685.838 L1644.69 685.838 L1645.25 685.838 L1645.81 685.838 L1646.37 685.838 L1646.93 685.838 L1647.48 685.838 L1648.04 685.838 L1648.6 685.838 L1649.16 685.838 L1649.72 685.838 L1650.28 685.838 L1650.84 685.838 L1651.4 685.838 L1651.96 685.838 L1652.52 685.838 L1653.08 685.838 L1653.64 685.838 L1654.2 685.838 L1654.76 685.838 L1655.31 685.838 L1655.87 685.838 L1656.43 685.838 L1656.99 685.838 L1657.55 685.838 L1658.11 685.838 L1658.67 685.838 L1659.23 685.838 L1659.79 685.838 L1660.35 685.838 L1660.91 685.838 L1661.47 685.838 L1662.03 685.838 L1662.58 685.838 L1663.14 685.838 L1663.7 685.838 L1664.26 685.838 L1664.82 685.838 L1665.38 685.838 L1665.94 685.838 L1666.5 685.838 L1667.06 685.838 L1667.62 685.838 L1668.18 685.838 L1668.74 685.838 L1669.3 685.838 L1669.85 685.838 L1670.41 685.838 L1670.97 685.838 L1671.53 685.838 L1672.09 685.838 L1672.65 685.838 L1673.21 685.838 L1673.77 685.838 L1674.33 685.838 L1674.89 685.838 L1675.45 685.838 L1676.01 685.838 L1676.57 685.838 L1677.13 685.838 L1677.68 685.838 L1678.24 685.838 L1678.8 685.838 L1679.36 685.838 L1679.92 685.838 L1680.48 685.838 L1681.04 685.838 L1681.6 685.838 L1682.16 685.838 L1682.72 685.838 L1683.28 685.838 L1683.84 685.838 L1684.4 685.838 L1684.95 685.838 L1685.51 685.838 L1686.07 685.838 L1686.63 685.838 L1687.19 685.838 L1687.75 685.838 L1688.31 685.838 L1688.87 685.838 L1689.43 685.838 L1689.99 685.838 L1690.55 685.838 L1691.11 685.838 L1691.67 685.838 L1692.23 685.838 L1692.78 685.838 L1693.34 685.838 L1693.9 685.838 L1694.46 685.838 L1695.02 685.838 L1695.58 685.838 L1696.14 685.838 L1696.7 685.838 L1697.26 685.838 L1697.82 685.838 L1698.38 685.838 L1698.94 685.838 L1699.5 685.838 L1700.05 685.838 L1700.61 685.838 L1701.17 685.838 L1701.73 685.838 L1702.29 685.838 L1702.85 685.838 L1703.41 685.838 L1703.97 685.838 L1704.53 685.838 L1705.09 685.838 L1705.65 685.838 L1706.21 685.838 L1706.77 685.838 L1707.32 685.838 L1707.88 685.838 L1708.44 685.838 L1709 685.838 L1709.56 685.838 L1710.12 685.838 L1710.68 685.838 L1711.24 685.838 L1711.8 685.838 L1712.36 685.838 L1712.92 685.838 L1713.48 685.838 L1714.04 685.838 L1714.6 685.838 L1715.15 685.838 L1715.71 685.838 L1716.27 685.838 L1716.83 685.838 L1717.39 685.838 L1717.95 685.838 L1718.51 685.838 L1719.07 685.838 L1719.63 685.838 L1720.19 685.838 L1720.75 685.838 L1721.31 685.838 L1721.87 685.838 L1722.42 685.838 L1722.98 685.838 L1723.54 685.838 L1724.1 685.838 L1724.66 685.838 L1725.22 685.838 L1725.78 685.838 L1726.34 685.838 L1726.9 685.838 L1727.46 685.838 L1728.02 685.838 L1728.58 685.838 L1729.14 685.838 L1729.69 685.838 L1730.25 685.838 L1730.81 685.838 L1731.37 685.838 L1731.93 685.838 L1732.49 685.838 L1733.05 685.838 L1733.61 685.838 L1734.17 685.838 L1734.73 685.838 L1735.29 685.838 L1735.85 685.838 L1736.41 685.838 L1736.97 685.838 L1737.52 685.838 L1738.08 685.838 L1738.64 685.838 L1739.2 685.838 L1739.76 685.838 L1740.32 685.838 L1740.88 685.838 L1741.44 685.838 L1742 685.838 L1742.56 685.838 L1743.12 685.838 L1743.68 685.838 L1744.24 685.838 L1744.79 685.838 L1745.35 685.838 L1745.91 685.838 L1746.47 685.838 L1747.03 685.838 L1747.59 685.838 L1748.15 685.838 L1748.71 685.838 L1749.27 685.838 L1749.83 685.838 L1750.39 685.838 L1750.95 685.838 L1751.51 685.838 L1752.06 685.838 L1752.62 685.838 L1753.18 685.838 L1753.74 685.838 L1754.3 685.838 L1754.86 685.838 L1755.42 685.838 L1755.98 685.838 L1756.54 685.838 L1757.1 685.838 L1757.66 685.838 L1758.22 685.838 L1758.78 685.838 L1759.34 685.838 L1759.89 685.838 L1760.45 685.838 L1761.01 685.838 L1761.57 685.838 L1762.13 685.838 L1762.69 685.838 L1763.25 685.838 L1763.81 685.838 L1764.37 685.838 L1764.93 685.838 L1765.49 685.838 L1766.05 685.838 L1766.61 685.838 L1767.16 685.838 L1767.72 685.838 L1768.28 685.838 L1768.84 685.838 L1769.4 685.838 L1769.96 685.838 L1770.52 685.838 L1771.08 685.838 L1771.64 685.838 L1772.2 685.838 L1772.76 685.838 L1773.32 685.838 L1773.88 685.838 L1774.43 685.838 L1774.99 685.838 L1775.55 685.838 L1776.11 685.838 L1776.67 685.838 L1777.23 685.838 L1777.79 685.838 L1778.35 685.838 L1778.91 685.838 L1779.47 685.838 L1780.03 685.838 L1780.59 685.838 L1781.15 685.838 L1781.71 685.838 L1782.26 685.838 L1782.82 685.838 L1783.38 685.838 L1783.94 685.838 L1784.5 685.838 L1785.06 685.838 L1785.62 685.838 L1786.18 685.838 L1786.74 685.838 L1787.3 685.838 L1787.86 685.838 L1788.42 685.838 L1788.98 685.838 L1789.53 685.838 L1790.09 685.838 L1790.65 685.838 L1791.21 685.838 L1791.77 685.838 L1792.33 685.838 L1792.89 685.838 L1793.45 685.838 L1794.01 685.838 L1794.57 685.838 L1795.13 685.838 L1795.69 685.838 L1796.25 685.838 L1796.8 685.838 L1797.36 685.838 L1797.92 685.838 L1798.48 685.838 L1799.04 685.838 L1799.6 685.838 L1800.16 685.838 L1800.72 685.838 L1801.28 685.838 L1801.84 685.838 L1802.4 685.838 L1802.96 685.838 L1803.52 685.838 L1804.08 685.838 L1804.63 685.838 L1805.19 685.838 L1805.75 685.838 L1806.31 685.838 L1806.87 685.838 L1807.43 685.838 L1807.99 685.838 L1808.55 685.838 L1809.11 685.838 L1809.67 685.838 L1810.23 685.838 L1810.79 685.838 L1811.35 685.838 L1811.9 685.838 L1812.46 685.838 L1813.02 685.838 L1813.58 685.838 L1814.14 685.838 L1814.7 685.838 L1815.26 685.838 L1815.82 685.838 L1816.38 685.838 L1816.94 685.838 L1817.5 685.838 L1818.06 685.838 L1818.62 685.838 L1819.18 685.838 L1819.73 685.838 L1820.29 685.838 L1820.85 685.838 L1821.41 685.838 L1821.97 685.838 L1822.53 685.838 L1823.09 685.838 L1823.65 685.838 L1824.21 685.838 L1824.77 685.838 L1825.33 685.838 L1825.89 685.838 L1826.45 685.838 L1827 685.838 L1827.56 685.838 L1828.12 685.838 L1828.68 685.838 L1829.24 685.838 L1829.8 685.838 L1830.36 685.838 L1830.92 685.838 L1831.48 685.838 L1832.04 685.838 L1832.6 685.838 L1833.16 685.838 L1833.72 685.838 L1834.27 685.838 L1834.83 685.838 L1835.39 685.838 L1835.95 685.838 L1836.51 685.838 L1837.07 685.838 L1837.63 685.838 L1838.19 685.838 L1838.19 682.611 L1837.63 682.611 L1837.07 682.611 L1836.51 682.611 L1835.95 682.611 L1835.39 682.611 L1834.83 682.611 L1834.27 682.611 L1833.72 682.611 L1833.16 682.611 L1832.6 682.611 L1832.04 682.611 L1831.48 682.611 L1830.92 682.611 L1830.36 682.611 L1829.8 682.611 L1829.24 682.611 L1828.68 682.611 L1828.12 682.611 L1827.56 682.611 L1827 682.611 L1826.45 682.611 L1825.89 682.611 L1825.33 682.611 L1824.77 682.611 L1824.21 682.611 L1823.65 682.611 L1823.09 682.611 L1822.53 682.611 L1821.97 682.611 L1821.41 682.611 L1820.85 682.611 L1820.29 682.611 L1819.73 682.611 L1819.18 682.611 L1818.62 682.611 L1818.06 682.611 L1817.5 682.611 L1816.94 682.611 L1816.38 682.611 L1815.82 682.611 L1815.26 682.611 L1814.7 682.611 L1814.14 682.611 L1813.58 682.611 L1813.02 682.611 L1812.46 682.611 L1811.9 682.611 L1811.35 682.611 L1810.79 682.611 L1810.23 682.611 L1809.67 682.611 L1809.11 682.611 L1808.55 682.611 L1807.99 682.611 L1807.43 682.611 L1806.87 682.611 L1806.31 682.611 L1805.75 682.611 L1805.19 682.611 L1804.63 682.611 L1804.08 682.611 L1803.52 682.611 L1802.96 682.611 L1802.4 682.611 L1801.84 682.611 L1801.28 682.611 L1800.72 682.611 L1800.16 682.611 L1799.6 682.611 L1799.04 682.611 L1798.48 682.611 L1797.92 682.611 L1797.36 682.611 L1796.8 682.611 L1796.25 682.611 L1795.69 682.611 L1795.13 682.611 L1794.57 682.611 L1794.01 682.611 L1793.45 682.611 L1792.89 682.611 L1792.33 682.611 L1791.77 682.611 L1791.21 682.611 L1790.65 682.611 L1790.09 682.611 L1789.53 682.611 L1788.98 682.611 L1788.42 682.611 L1787.86 682.611 L1787.3 682.611 L1786.74 682.611 L1786.18 682.611 L1785.62 682.611 L1785.06 682.611 L1784.5 682.611 L1783.94 682.611 L1783.38 682.611 L1782.82 682.611 L1782.26 682.611 L1781.71 682.611 L1781.15 682.611 L1780.59 682.611 L1780.03 682.611 L1779.47 682.611 L1778.91 682.611 L1778.35 682.611 L1777.79 682.611 L1777.23 682.611 L1776.67 682.611 L1776.11 682.611 L1775.55 682.611 L1774.99 682.611 L1774.43 682.611 L1773.88 682.611 L1773.32 682.611 L1772.76 682.611 L1772.2 682.611 L1771.64 682.611 L1771.08 682.611 L1770.52 682.611 L1769.96 682.611 L1769.4 682.611 L1768.84 682.611 L1768.28 682.611 L1767.72 682.611 L1767.16 682.611 L1766.61 682.611 L1766.05 682.611 L1765.49 682.611 L1764.93 682.611 L1764.37 682.611 L1763.81 682.611 L1763.25 682.611 L1762.69 682.611 L1762.13 682.611 L1761.57 682.611 L1761.01 682.611 L1760.45 682.611 L1759.89 682.611 L1759.34 682.611 L1758.78 682.611 L1758.22 682.611 L1757.66 682.611 L1757.1 682.611 L1756.54 682.611 L1755.98 682.611 L1755.42 682.611 L1754.86 682.611 L1754.3 682.611 L1753.74 682.611 L1753.18 682.611 L1752.62 682.611 L1752.06 682.611 L1751.51 682.611 L1750.95 682.611 L1750.39 682.611 L1749.83 682.611 L1749.27 682.611 L1748.71 682.611 L1748.15 682.611 L1747.59 682.611 L1747.03 682.611 L1746.47 682.611 L1745.91 682.611 L1745.35 682.611 L1744.79 682.611 L1744.24 682.611 L1743.68 682.611 L1743.12 682.611 L1742.56 682.611 L1742 682.611 L1741.44 682.611 L1740.88 682.611 L1740.32 682.611 L1739.76 682.611 L1739.2 682.611 L1738.64 682.611 L1738.08 682.611 L1737.52 682.611 L1736.97 682.611 L1736.41 682.611 L1735.85 682.611 L1735.29 682.611 L1734.73 682.611 L1734.17 682.611 L1733.61 682.611 L1733.05 682.611 L1732.49 682.611 L1731.93 682.611 L1731.37 682.611 L1730.81 682.611 L1730.25 682.611 L1729.69 682.611 L1729.14 682.611 L1728.58 682.611 L1728.02 682.611 L1727.46 682.611 L1726.9 682.611 L1726.34 682.611 L1725.78 682.611 L1725.22 682.611 L1724.66 682.611 L1724.1 682.611 L1723.54 682.611 L1722.98 682.611 L1722.42 682.611 L1721.87 682.611 L1721.31 682.611 L1720.75 682.611 L1720.19 682.611 L1719.63 682.611 L1719.07 682.611 L1718.51 682.611 L1717.95 682.611 L1717.39 682.611 L1716.83 682.611 L1716.27 682.611 L1715.71 682.611 L1715.15 682.611 L1714.6 682.611 L1714.04 682.611 L1713.48 682.611 L1712.92 682.611 L1712.36 682.611 L1711.8 682.611 L1711.24 682.611 L1710.68 682.611 L1710.12 682.611 L1709.56 682.611 L1709 682.611 L1708.44 682.611 L1707.88 682.611 L1707.32 682.611 L1706.77 682.611 L1706.21 682.611 L1705.65 682.611 L1705.09 682.611 L1704.53 682.611 L1703.97 682.611 L1703.41 682.611 L1702.85 682.611 L1702.29 682.611 L1701.73 682.611 L1701.17 682.611 L1700.61 682.611 L1700.05 682.611 L1699.5 682.611 L1698.94 682.611 L1698.38 682.611 L1697.82 682.611 L1697.26 682.611 L1696.7 682.611 L1696.14 682.611 L1695.58 682.611 L1695.02 682.611 L1694.46 682.611 L1693.9 682.611 L1693.34 682.611 L1692.78 682.611 L1692.23 682.611 L1691.67 682.611 L1691.11 682.611 L1690.55 682.611 L1689.99 682.611 L1689.43 682.611 L1688.87 682.611 L1688.31 682.611 L1687.75 682.611 L1687.19 682.611 L1686.63 682.611 L1686.07 682.611 L1685.51 682.611 L1684.95 682.611 L1684.4 682.611 L1683.84 682.611 L1683.28 682.611 L1682.72 682.611 L1682.16 682.611 L1681.6 682.611 L1681.04 682.611 L1680.48 682.611 L1679.92 682.611 L1679.36 682.611 L1678.8 682.611 L1678.24 682.611 L1677.68 682.611 L1677.13 682.611 L1676.57 682.611 L1676.01 682.611 L1675.45 682.611 L1674.89 682.611 L1674.33 682.611 L1673.77 682.611 L1673.21 682.611 L1672.65 682.611 L1672.09 682.611 L1671.53 682.611 L1670.97 682.611 L1670.41 682.611 L1669.85 682.611 L1669.3 682.611 L1668.74 682.611 L1668.18 682.611 L1667.62 682.611 L1667.06 682.611 L1666.5 682.611 L1665.94 682.611 L1665.38 682.611 L1664.82 682.611 L1664.26 682.611 L1663.7 682.611 L1663.14 682.611 L1662.58 682.611 L1662.03 682.611 L1661.47 682.611 L1660.91 682.611 L1660.35 682.611 L1659.79 682.611 L1659.23 682.611 L1658.67 682.611 L1658.11 682.611 L1657.55 682.611 L1656.99 682.611 L1656.43 682.611 L1655.87 682.611 L1655.31 682.611 L1654.76 682.611 L1654.2 682.611 L1653.64 682.611 L1653.08 682.611 L1652.52 682.611 L1651.96 682.611 L1651.4 682.611 L1650.84 682.611 L1650.28 682.611 L1649.72 682.611 L1649.16 682.611 L1648.6 682.611 L1648.04 682.611 L1647.48 682.611 L1646.93 682.611 L1646.37 682.611 L1645.81 682.611 L1645.25 682.611 L1644.69 682.611 L1644.13 682.611 L1643.57 682.611 L1643.01 682.611 L1642.45 682.611 L1641.89 682.611 L1641.33 682.611 L1640.77 682.611 L1640.21 682.611 L1639.66 682.611 L1639.1 682.611 L1638.54 682.611 L1637.98 682.611 L1637.42 682.611 L1636.86 682.611 L1636.3 682.611 L1635.74 682.611 L1635.18 682.611 L1634.62 682.611 L1634.06 682.611 L1633.5 682.611 L1632.94 682.611 L1632.39 682.611 L1631.83 682.611 L1631.27 682.611 L1630.71 682.611 L1630.15 682.611 L1629.59 682.611 L1629.03 682.611 L1628.47 682.611 L1627.91 682.611 L1627.35 682.611 L1626.79 682.611 L1626.23 682.611 L1625.67 682.611 L1625.11 682.611 L1624.56 682.611 L1624 682.611 L1623.44 682.611 L1622.88 682.611 L1622.32 682.611 L1621.76 682.611 L1621.2 682.611 L1620.64 682.611 L1620.08 682.611 L1619.52 682.611 L1618.96 682.611 L1618.4 682.611 L1617.84 682.611 L1617.29 682.611 L1616.73 682.611 L1616.17 682.611 L1615.61 682.611 L1615.05 682.611 L1614.49 682.611 L1613.93 682.611 L1613.37 682.611 L1612.81 682.611 L1612.25 682.611 L1611.69 682.611 L1611.13 682.611 L1610.57 682.611 L1610.02 682.611 L1609.46 682.611 L1608.9 682.611 L1608.34 682.611 L1607.78 682.611 L1607.22 682.611 L1606.66 682.611 L1606.1 682.611 L1605.54 682.611 L1604.98 682.611 L1604.42 682.611 L1603.86 682.611 L1603.3 682.611 L1602.74 682.611 L1602.19 682.611 L1601.63 682.611 L1601.07 682.611 L1600.51 682.611 L1599.95 682.611 L1599.39 682.611 L1598.83 682.611 L1598.27 682.611 L1597.71 682.611 L1597.15 682.611 L1596.59 682.611 L1596.03 682.611 L1595.47 682.611 L1594.92 682.611 L1594.36 682.611 L1593.8 682.611 L1593.24 682.611 L1592.68 682.611 L1592.12 682.611 L1591.56 682.611 L1591 682.611 L1590.44 682.611 L1589.88 682.611 L1589.32 682.611 L1588.76 682.611 L1588.2 682.611 L1587.65 682.611 L1587.09 682.611 L1586.53 682.611 L1585.97 682.611 L1585.41 682.611 L1584.85 682.611 L1584.29 682.611 L1583.73 682.611 L1583.17 682.611 L1582.61 682.611 L1582.05 682.611 L1581.49 682.611 L1580.93 682.611 L1580.37 682.611 L1579.82 682.611 L1579.26 682.611 L1578.7 682.611 L1578.14 682.611 L1577.58 682.611 L1577.02 682.611 L1576.46 682.611 L1575.9 682.611 L1575.34 682.611 L1574.78 682.611 L1574.22 682.611 L1573.66 682.611 L1573.1 682.611 L1572.55 682.611 L1571.99 682.611 L1571.43 682.611 L1570.87 682.611 L1570.31 682.611 L1569.75 682.611 L1569.19 682.611 L1568.63 682.611 L1568.07 682.611 L1567.51 682.611 L1566.95 682.611 L1566.39 682.611 L1565.83 682.611 L1565.28 682.611 L1564.72 682.611 L1564.16 682.611 L1563.6 682.611 L1563.04 682.611 L1562.48 682.611 L1561.92 682.611 L1561.36 682.611 L1560.8 682.611 L1560.24 682.611 L1559.68 682.611 L1559.12 682.611 L1558.56 682.611 L1558 682.611 L1557.45 682.611 L1556.89 682.611 L1556.33 682.611 L1555.77 682.611 L1555.21 682.611 L1554.65 682.611 L1554.09 682.611 L1553.53 682.611 L1552.97 682.611 L1552.41 682.611 L1551.85 682.611 L1551.29 682.611 L1550.73 682.611 L1550.18 682.611 L1549.62 682.611 L1549.06 682.611 L1548.5 682.611 L1547.94 682.611 L1547.38 682.611 L1546.82 682.611 L1546.26 682.611 L1545.7 682.611 L1545.14 682.611 L1544.58 682.611 L1544.02 682.611 L1543.46 682.611 L1542.9 682.611 L1542.35 682.611 L1541.79 682.611 L1541.23 682.611 L1540.67 682.611 L1540.11 682.611 L1539.55 682.611 L1538.99 682.611 L1538.43 682.611 L1537.87 682.611 L1537.31 682.611 L1536.75 682.611 L1536.19 682.611 L1535.63 682.611 L1535.08 682.611 L1534.52 682.611 L1533.96 682.611 L1533.4 682.611 L1532.84 682.611 L1532.28 682.611 L1531.72 682.611 L1531.16 682.611 L1530.6 682.611 L1530.04 682.611 L1529.48 682.611 L1528.92 682.611 L1528.36 682.611 L1527.81 682.611 L1527.25 682.611 L1526.69 682.611 L1526.13 682.611 L1525.57 682.611 L1525.01 682.611 L1524.45 682.611 L1523.89 682.611 L1523.33 682.611 L1522.77 682.611 L1522.21 682.611 L1521.65 682.611 L1521.09 682.611 L1520.53 682.611 L1519.98 682.611 L1519.42 682.611 L1518.86 682.611 L1518.3 682.611 L1517.74 682.611 L1517.18 682.611 L1516.62 682.611 L1516.06 682.611 L1515.5 682.611 L1514.94 682.611 L1514.38 682.611 L1513.82 682.611 L1513.26 682.611 L1512.71 682.611 L1512.15 682.611 L1511.59 682.611 L1511.03 682.611 L1510.47 682.611 L1509.91 682.611 L1509.35 682.611 L1508.79 682.611 L1508.23 682.611 L1507.67 682.611 L1507.11 682.611 L1506.55 682.611 L1505.99 682.611 L1505.44 682.611 L1504.88 682.611 L1504.32 682.611 L1503.76 682.611 L1503.2 682.611 L1502.64 682.611 L1502.08 682.611 L1501.52 682.611 L1500.96 682.611 L1500.4 682.611 L1499.84 682.611 L1499.28 682.611 L1498.72 682.611 L1498.16 682.611 L1497.61 682.611 L1497.05 682.611 L1496.49 682.611 L1495.93 682.611 L1495.37 682.611 L1494.81 682.611 L1494.25 682.611 L1493.69 682.611 L1493.13 682.611 L1492.57 682.611 L1492.01 682.611 L1491.45 682.611 L1490.89 682.611 L1490.34 682.611 L1489.78 682.611 L1489.22 682.611 L1488.66 682.611 L1488.1 682.611 L1487.54 682.611 L1486.98 682.611 L1486.42 682.611 L1485.86 682.611 L1485.3 682.611 L1484.74 682.611 L1484.18 682.611 L1483.62 682.611 L1483.07 682.611 L1482.51 682.611 L1481.95 682.611 L1481.39 682.611 L1480.83 682.611 L1480.27 682.611 L1479.71 682.611 L1479.15 682.611 L1478.59 682.611 L1478.03 682.611 L1477.47 682.611 L1476.91 682.611 L1476.35 682.611 L1475.79 682.611 L1475.24 682.611 L1474.68 682.611 L1474.12 682.611 L1473.56 682.611 L1473 682.611 L1472.44 682.611 L1471.88 682.611 L1471.32 682.611 L1470.76 682.611 L1470.2 682.611 L1469.64 682.611 L1469.08 682.611 L1468.52 682.611 L1467.97 682.611 L1467.41 682.611 L1466.85 682.611 L1466.29 682.611 L1465.73 682.611 L1465.17 682.611 L1464.61 682.611 L1464.05 682.611 L1463.49 682.611 L1462.93 682.611 L1462.37 682.611 L1461.81 682.611 L1461.25 682.611 L1460.7 682.611 L1460.14 682.611 L1459.58 682.611 L1459.02 682.611 L1458.46 682.611 L1457.9 682.611 L1457.34 682.611 L1456.78 682.611 L1456.22 682.611 L1455.66 682.611 L1455.1 682.611 L1454.54 682.611 L1453.98 682.611 L1453.42 682.611 L1452.87 682.611 L1452.31 682.611 L1451.75 682.611 L1451.19 682.611 L1450.63 682.611 L1450.07 682.611 L1449.51 682.611 L1448.95 682.611 L1448.39 682.611 L1447.83 682.611 L1447.27 682.611 L1446.71 682.611 L1446.15 682.611 L1445.6 682.611 L1445.04 682.611 L1444.48 682.611 L1443.92 682.611 L1443.36 682.611 L1442.8 682.611 L1442.24 682.611 L1441.68 682.611 L1441.12 682.611 L1440.56 682.611 L1440 682.611 L1439.44 682.611 L1438.88 682.611 L1438.33 682.611 L1437.77 682.611 L1437.21 682.611 L1436.65 682.611 L1436.09 682.611 L1435.53 682.611 L1434.97 682.611 L1434.41 682.611 L1433.85 682.611 L1433.29 682.611 L1432.73 682.611 L1432.17 682.611 L1431.61 682.611 L1431.05 682.611 L1430.5 682.611 L1429.94 682.611 L1429.38 682.611 L1428.82 682.611 L1428.26 682.611 L1427.7 682.611 L1427.14 682.611 L1426.58 682.611 L1426.02 682.611 L1425.46 682.611 L1424.9 682.611 L1424.34 682.611 L1423.78 682.611 L1423.23 682.611 L1422.67 682.611 L1422.11 682.611 L1421.55 682.611 L1420.99 682.611 L1420.43 682.611 L1419.87 682.611 L1419.31 682.611 L1418.75 682.611 L1418.19 682.611 L1417.63 682.611 L1417.07 682.611 L1416.51 682.611 L1415.95 682.611 L1415.4 682.611 L1414.84 682.611 L1414.28 682.611 L1413.72 682.611 L1413.16 682.611 L1412.6 682.611 L1412.04 682.611 L1411.48 682.611 L1410.92 682.611 L1410.36 682.611 L1409.8 682.611 L1409.24 682.611 L1408.68 682.611 L1408.13 682.611 L1407.57 682.611 L1407.01 682.611 L1406.45 682.611 L1405.89 682.611 L1405.33 682.611 L1404.77 682.611 L1404.21 682.611 L1403.65 682.611 L1403.09 682.611 L1402.53 682.611 L1401.97 682.611 L1401.41 682.611 L1400.86 682.611 L1400.3 682.611 L1399.74 682.611 L1399.18 682.611 L1398.62 682.611 L1398.06 682.611 L1397.5 682.611 L1396.94 682.611 L1396.38 682.611 L1395.82 682.611 L1395.26 682.611 L1394.7 682.611 L1394.14 682.611 L1393.58 682.611 L1393.03 682.611 L1392.47 682.611 L1391.91 682.611 L1391.35 682.611 L1390.79 682.611 L1390.23 682.611 L1389.67 682.611 L1389.11 682.611 L1388.55 682.611 L1387.99 682.611 L1387.43 682.611 L1386.87 682.611 L1386.31 682.611 L1385.76 682.611 L1385.2 682.611 L1384.64 682.611 L1384.08 682.611 L1383.52 682.611 L1382.96 682.611 L1382.4 682.611 L1381.84 682.611 L1381.28 682.611 L1380.72 682.611 L1380.16 682.611 L1379.6 682.611 L1379.04 682.611 L1378.49 682.611 L1377.93 682.611 L1377.37 682.611 L1376.81 682.611 L1376.25 682.611 L1375.69 682.611 L1375.13 682.611 L1374.57 682.611 L1374.01 682.611 L1373.45 682.611 L1372.89 682.611 L1372.33 682.611 L1371.77 682.611 L1371.21 682.611 L1370.66 682.611 L1370.1 682.611 L1369.54 682.611 L1368.98 682.611 L1368.42 682.611 L1367.86 682.611 L1367.3 682.611 L1366.74 682.611 L1366.18 682.611 L1365.62 682.611 L1365.06 682.611 L1364.5 682.611 L1363.94 682.611 L1363.39 682.611 L1362.83 682.611 L1362.27 682.611 L1361.71 682.611 L1361.15 682.611 L1360.59 682.611 L1360.03 682.611 L1359.47 682.611 L1358.91 682.611 L1358.35 682.611 L1357.79 682.611 L1357.23 682.611 L1356.67 682.611 L1356.12 682.611 L1355.56 682.611 L1355 682.611 L1354.44 682.611 L1353.88 682.611 L1353.32 682.611 L1352.76 682.611 L1352.2 682.611 L1351.64 682.611 L1351.08 682.611 L1350.52 682.611 L1349.96 682.611 L1349.4 682.611 L1348.84 682.611 L1348.29 682.611 L1347.73 682.611 L1347.17 682.611 L1346.61 682.611 L1346.05 682.611 L1345.49 682.611 L1344.93 682.611 L1344.37 682.611 L1343.81 682.611 L1343.25 682.611 L1342.69 682.611 L1342.13 682.611 L1341.57 682.611 L1341.02 682.611 L1340.46 682.611 L1339.9 682.611 L1339.34 682.611 L1338.78 682.611 L1338.22 682.611 L1337.66 682.611 L1337.1 682.611 L1336.54 682.611 L1335.98 682.611 L1335.42 682.611 L1334.86 682.611 L1334.3 682.611 L1333.75 682.611 L1333.19 682.611 L1332.63 682.611 L1332.07 682.611 L1331.51 682.611 L1330.95 682.611 L1330.39 682.611 L1329.83 682.611 L1329.27 682.611 L1328.71 682.611 L1328.15 682.611 L1327.59 682.611 L1327.03 682.611 L1326.47 682.611 L1325.92 682.611 L1325.36 682.611 L1324.8 682.611 L1324.24 682.611 L1323.68 682.611 L1323.12 682.611 L1322.56 682.611 L1322 682.611 L1321.44 682.611 L1320.88 682.611 L1320.32 682.611 L1319.76 682.611 L1319.2 682.611 L1318.65 682.611 L1318.09 682.611 L1317.53 682.611 L1316.97 682.611 L1316.41 682.611 L1315.85 682.611 L1315.29 682.611 L1314.73 682.611 L1314.17 682.611 L1313.61 682.611 L1313.05 682.611 L1312.49 682.611 L1311.93 682.611 L1311.38 682.611 L1310.82 682.611 L1310.26 682.611 L1309.7 682.611 L1309.14 682.611 L1308.58 682.611 L1308.02 682.611 L1307.46 682.611 L1306.9 682.611 L1306.34 682.611 L1305.78 682.611 L1305.22 682.611 L1304.66 682.611 L1304.1 682.611 L1303.55 682.611 L1302.99 682.611 L1302.43 682.611 L1301.87 682.611 L1301.31 682.611 L1300.75 682.611 L1300.19 682.611 L1299.63 682.611 L1299.07 682.611 L1298.51 682.611 L1297.95 682.611 L1297.39 682.611 L1296.83 682.611 L1296.28 682.611 L1295.72 682.611 L1295.16 682.611 L1294.6 682.611 L1294.04 682.611 L1293.48 682.611 L1292.92 682.611 L1292.36 682.611 L1291.8 682.611 L1291.24 682.611 L1290.68 682.611 L1290.12 682.611 L1289.56 682.611 L1289 682.611 L1288.45 682.611 L1287.89 682.611 L1287.33 682.611 L1286.77 682.611 L1286.21 682.611 L1285.65 682.611 L1285.09 682.611 L1284.53 682.611 L1283.97 682.611 L1283.41 682.611 L1282.85 682.611 L1282.29 682.611 L1281.73 682.611 L1281.18 682.611 L1280.62 682.611 L1280.06 682.611 L1279.5 682.611 L1278.94 682.611 L1278.38 682.611 L1277.82 682.611 L1277.26 682.611 L1276.7 682.611 L1276.14 682.611 L1275.58 682.611 L1275.02 682.611 L1274.46 682.611 L1273.91 682.611 L1273.35 682.611 L1272.79 682.611 L1272.23 682.611 L1271.67 682.611 L1271.11 682.611 L1270.55 682.611 L1269.99 682.611 L1269.43 682.611 L1268.87 682.611 L1268.31 682.611 L1267.75 682.611 L1267.19 682.611 L1266.63 682.611 L1266.08 682.611 L1265.52 682.611 L1264.96 682.611 L1264.4 682.611 L1263.84 682.611 L1263.28 682.611 L1262.72 682.611 L1262.16 682.611 L1261.6 682.611 L1261.04 682.611 L1260.48 682.611 L1259.92 682.611 L1259.36 682.611 L1258.81 682.611 L1258.25 682.611 L1257.69 682.611 L1257.13 682.611 L1256.57 682.611 L1256.01 682.611 L1255.45 682.611 L1254.89 682.611 L1254.33 682.611 L1253.77 682.611 L1253.21 682.611 L1252.65 682.611 L1252.09 682.611 L1251.54 682.611 L1250.98 682.611 L1250.42 682.611 L1249.86 682.611 L1249.3 682.611 L1248.74 682.611 L1248.18 682.611 L1247.62 682.611 L1247.06 682.611 L1246.5 682.611 L1245.94 682.611 L1245.38 682.611 L1244.82 682.611 L1244.26 682.611 L1243.71 682.611 L1243.15 682.611 L1242.59 682.611 L1242.03 682.611 L1241.47 682.611 L1240.91 682.611 L1240.35 682.611 L1239.79 682.611 L1239.23 682.611 L1238.67 682.611 L1238.11 682.611 L1237.55 682.611 L1236.99 682.611 L1236.44 682.611 L1235.88 682.611 L1235.32 682.611 L1234.76 682.611 L1234.2 682.611 L1233.64 682.611 L1233.08 682.611 L1232.52 682.611 L1231.96 682.611 L1231.4 682.611 L1230.84 682.611 L1230.28 682.611 L1229.72 682.611 L1229.17 682.611 L1228.61 682.611 L1228.05 682.611 L1227.49 682.611 L1226.93 682.611 L1226.37 682.611 L1225.81 682.611 L1225.25 682.611 L1224.69 682.611 L1224.13 682.611 L1223.57 682.611 L1223.01 682.611 L1222.45 682.611 L1221.89 682.611 L1221.34 682.611 L1220.78 682.611 L1220.22 682.611 L1219.66 682.611 L1219.1 682.611 L1218.54 682.611 L1217.98 682.611 L1217.42 682.611 L1216.86 682.611 L1216.3 682.611 L1215.74 682.611 L1215.18 682.611 L1214.62 682.611 L1214.07 682.611 L1213.51 682.611 L1212.95 682.611 L1212.39 682.611 L1211.83 682.611 L1211.27 682.611 L1210.71 682.611 L1210.15 682.611 L1209.59 682.611 L1209.03 682.611 L1208.47 682.611 L1207.91 682.611 L1207.35 682.611 L1206.8 682.611 L1206.24 682.611 L1205.68 682.611 L1205.12 682.611 L1204.56 682.611 L1204 682.611 L1203.44 682.611 L1202.88 682.611 L1202.32 682.611 L1201.76 682.611 L1201.2 682.611 L1200.64 682.611 L1200.08 682.611 L1199.52 682.611 L1198.97 682.611 L1198.41 682.611 L1197.85 682.611 L1197.29 682.611 L1196.73 682.611 L1196.17 682.611 L1195.61 682.611 L1195.05 682.611 L1194.49 682.611 L1193.93 682.611 L1193.37 682.611 L1192.81 682.611 L1192.25 682.611 L1191.7 682.611 L1191.14 682.611 L1190.58 682.611 L1190.02 682.611 L1189.46 682.611 L1188.9 682.611 L1188.34 682.611 L1187.78 682.611 L1187.22 682.611 L1186.66 682.611 L1186.1 682.611 L1185.54 682.611 L1184.98 682.611 L1184.43 682.611 L1183.87 682.611 L1183.31 682.611 L1182.75 682.611 L1182.19 682.611 L1181.63 682.611 L1181.07 682.611 L1180.51 682.611 L1179.95 682.611 L1179.39 682.611 L1178.83 682.611 L1178.27 682.611 L1177.71 682.611 L1177.15 682.611 L1176.6 682.611 L1176.04 682.611 L1175.48 682.611 L1174.92 682.611 L1174.36 682.611 L1173.8 682.611 L1173.24 682.611 L1172.68 682.611 L1172.12 682.611 L1171.56 682.611 L1171 682.611 L1170.44 682.611 L1169.88 682.611 L1169.33 682.611 L1168.77 682.611 L1168.21 682.611 L1167.65 682.611 L1167.09 682.611 L1166.53 682.611 L1165.97 682.611 L1165.41 682.611 L1164.85 682.611 L1164.29 682.611 L1163.73 682.611 L1163.17 682.611 L1162.61 682.611 L1162.05 682.611 L1161.5 682.611 L1160.94 682.611 L1160.38 682.611 L1159.82 682.611 L1159.26 682.611 L1158.7 682.611 L1158.14 682.611 L1157.58 682.611 L1157.02 682.611 L1156.46 682.611 L1155.9 682.611 L1155.34 682.611 L1154.78 682.611 L1154.23 682.611 L1153.67 682.611 L1153.11 682.611 L1152.55 682.611 L1151.99 682.611 L1151.43 682.611 L1150.87 682.611 L1150.31 682.611 L1149.75 682.611 L1149.19 682.611 L1148.63 682.611 L1148.07 682.611 L1147.51 682.611 L1146.96 682.611 L1146.4 682.611 L1145.84 682.611 L1145.28 682.611 L1144.72 682.611 L1144.16 682.611 L1143.6 682.611 L1143.04 682.611 L1142.48 682.611 L1141.92 682.611 L1141.36 682.611 L1140.8 682.611 L1140.24 682.611 L1139.68 682.611 L1139.13 682.611 L1138.57 682.611 L1138.01 682.611 L1137.45 682.611 L1136.89 682.611 L1136.33 682.611 L1135.77 682.611 L1135.21 682.611 L1134.65 682.611 L1134.09 682.611 L1133.53 682.611 L1132.97 682.611 L1132.41 682.611 L1131.86 682.611 L1131.3 682.611 L1130.74 682.611 L1130.18 682.611 L1129.62 682.611 L1129.06 682.611 L1128.5 682.611 L1127.94 682.611 L1127.38 682.611 L1126.82 682.611 L1126.26 682.611 L1125.7 682.611 L1125.14 682.611 L1124.59 682.611 L1124.03 682.611 L1123.47 682.611 L1122.91 682.611 L1122.35 682.611 L1121.79 682.611 L1121.23 682.611 L1120.67 682.611 L1120.11 682.611 L1119.55 682.611 L1118.99 682.611 L1118.43 682.611 L1117.87 682.611 L1117.31 682.611 L1116.76 682.611 L1116.2 682.611 L1115.64 682.611 L1115.08 682.611 L1114.52 682.611 L1113.96 682.611 L1113.4 682.611 L1112.84 682.611 L1112.28 682.611 L1111.72 682.611 L1111.16 682.611 L1110.6 682.611 L1110.04 682.611 L1109.49 682.611 L1108.93 682.611 L1108.37 682.611 L1107.81 682.611 L1107.25 682.611 L1106.69 682.611 L1106.13 682.611 L1105.57 682.611 L1105.01 682.611 L1104.45 682.611 L1103.89 682.611 L1103.33 682.611 L1102.77 682.611 L1102.22 682.611 L1101.66 682.611 L1101.1 682.611 L1100.54 682.611 L1099.98 682.611 L1099.42 682.611 L1098.86 682.611 L1098.3 682.611 L1097.74 682.611 L1097.18 682.611 L1096.62 682.611 L1096.06 682.611 L1095.5 682.611 L1094.94 682.611 L1094.39 682.611 L1093.83 682.611 L1093.27 682.611 L1092.71 682.611 L1092.15 682.611 L1091.59 682.611 L1091.03 682.611 L1090.47 682.611 L1089.91 682.611 L1089.35 682.611 L1088.79 682.611 L1088.23 682.611 L1087.67 682.611 L1087.12 682.611 L1086.56 682.611 L1086 682.611 L1085.44 682.611 L1084.88 682.611 L1084.32 682.611 L1083.76 682.611 L1083.2 682.611 L1082.64 682.611 L1082.08 682.611 L1081.52 682.611 L1080.96 682.611 L1080.4 682.611 L1079.85 682.611 L1079.29 682.611 L1078.73 682.611 L1078.17 682.611 L1077.61 682.611 L1077.05 682.611 L1076.49 682.611 L1075.93 682.611 L1075.37 682.611 L1074.81 682.611 L1074.25 682.611 L1073.69 682.611 L1073.13 682.611 L1072.57 682.611 L1072.02 682.611 L1071.46 682.611 L1070.9 682.611 L1070.34 682.611 L1069.78 682.611 L1069.22 682.611 L1068.66 682.611 L1068.1 682.611 L1067.54 682.611 L1066.98 682.611 L1066.42 682.611 L1065.86 682.611 L1065.3 682.611 L1064.75 682.611 L1064.19 682.611 L1063.63 682.611 L1063.07 682.611 L1062.51 682.611 L1061.95 682.611 L1061.39 682.611 L1060.83 682.611 L1060.27 682.611 L1059.71 682.611 L1059.15 682.611 L1058.59 682.611 L1058.03 682.611 L1057.48 682.611 L1056.92 682.611 L1056.36 682.611 L1055.8 682.611 L1055.24 682.611 L1054.68 682.611 L1054.12 682.611 L1053.56 682.611 L1053 682.611 L1052.44 682.611 L1051.88 682.611 L1051.32 682.611 L1050.76 682.611 L1050.2 682.611 L1049.65 682.611 L1049.09 682.611 L1048.53 682.611 L1047.97 682.611 L1047.41 682.611 L1046.85 682.611 L1046.29 682.611 L1045.73 682.611 L1045.17 682.611 L1044.61 682.611 L1044.05 682.611 L1043.49 682.611 L1042.93 682.611 L1042.38 682.611 L1041.82 682.611 L1041.26 682.611 L1040.7 682.611 L1040.14 682.611 L1039.58 682.611 L1039.02 682.611 L1038.46 682.611 L1037.9 682.611 L1037.34 682.611 L1036.78 682.611 L1036.22 682.611 L1035.66 682.611 L1035.1 682.611 L1034.55 682.611 L1033.99 682.611 L1033.43 682.611 L1032.87 682.611 L1032.31 682.611 L1031.75 682.611 L1031.19 682.611 L1030.63 682.611 L1030.07 682.611 L1029.51 682.611 L1028.95 682.611 L1028.39 682.611 L1027.83 682.611 L1027.28 682.611 L1026.72 682.611 L1026.16 682.611 L1025.6 682.611 L1025.04 682.611 L1024.48 682.611 L1023.92 682.611 L1023.36 682.611 L1022.8 682.611 L1022.24 682.611 L1021.68 682.611 L1021.12 682.611 L1020.56 682.611 L1020.01 682.611 L1019.45 682.611 L1018.89 682.611 L1018.33 682.611 L1017.77 682.611 L1017.21 682.611 L1016.65 682.611 L1016.09 682.611 L1015.53 682.611 L1014.97 682.611 L1014.41 682.611 L1013.85 682.611 L1013.29 682.611 L1012.73 682.611 L1012.18 682.611 L1011.62 682.611 L1011.06 682.611 L1010.5 682.611 L1009.94 682.611 L1009.38 682.611 L1008.82 682.611 L1008.26 682.611 L1007.7 682.611 L1007.14 682.611 L1006.58 682.611 L1006.02 682.611 L1005.46 682.611 L1004.91 682.611 L1004.35 682.611 L1003.79 682.611 L1003.23 682.611 L1002.67 682.611 L1002.11 682.611 L1001.55 682.611 L1000.99 682.611 L1000.43 682.611 L999.872 682.611 L999.313 682.611 L998.754 682.611 L998.194 682.611 L997.635 682.611 L997.076 682.611 L996.517 682.611 L995.957 682.611 L995.398 682.611 L994.839 682.611 L994.28 682.611 L993.72 682.611 L993.161 682.611 L992.602 682.611 L992.043 682.611 L991.483 682.611 L990.924 682.611 L990.365 682.611 L989.806 682.611 L989.246 682.611 L988.687 682.611 L988.128 682.611 L987.569 682.611 L987.009 682.611 L986.45 682.611 L985.891 682.611 L985.332 682.611 L984.772 682.611 L984.213 682.611 L983.654 682.611 L983.095 682.611 L982.535 682.611 L981.976 682.611 L981.417 682.611 L980.858 682.611 L980.298 682.611 L979.739 682.611 L979.18 682.611 L978.621 682.611 L978.061 682.611 L977.502 682.611 L976.943 682.611 L976.384 682.611 L975.824 682.611 L975.265 682.611 L974.706 682.611 L974.147 682.611 L973.587 682.611 L973.028 682.611 L972.469 682.611 L971.91 682.611 L971.35 682.611 L970.791 682.611 L970.232 682.611 L969.673 682.611 L969.113 682.611 L968.554 682.611 L967.995 682.611 L967.436 682.611 L966.876 682.611 L966.317 682.611 L965.758 682.611 L965.199 682.611 L964.639 682.611 L964.08 682.611 L963.521 682.611 L962.962 682.611 L962.402 682.611 L961.843 682.611 L961.284 682.611 L960.725 682.611 L960.165 682.611 L959.606 682.611 L959.047 682.611 L958.488 682.611 L957.928 682.611 L957.369 682.611 L956.81 682.611 L956.251 682.611 L955.691 682.611 L955.132 682.611 L954.573 682.611 L954.014 682.611 L953.454 682.611 L952.895 682.611 L952.336 682.611 L951.777 682.611 L951.217 682.611 L950.658 682.611 L950.099 682.611 L949.54 682.611 L948.98 682.611 L948.421 682.611 L947.862 682.611 L947.303 682.611 L946.743 682.611 L946.184 682.611 L945.625 682.611 L945.066 682.611 L944.506 682.611 L943.947 682.611 L943.388 682.611 L942.829 682.611 L942.269 682.611 L941.71 682.611 L941.151 682.611 L940.592 682.611 L940.032 682.611 L939.473 682.611 L938.914 682.611 L938.355 682.611 L937.795 682.611 L937.236 682.611 L936.677 682.611 L936.118 682.611 L935.558 682.611 L934.999 682.611 L934.44 682.611 L933.881 682.611 L933.321 682.611 L932.762 682.611 L932.203 682.611 L931.644 682.611 L931.084 682.611 L930.525 682.611 L929.966 682.611 L929.406 682.611 L928.847 682.611 L928.288 682.611 L927.729 682.611 L927.169 682.611 L926.61 682.611 L926.051 682.611 L925.492 682.611 L924.932 682.611 L924.373 682.611 L923.814 682.611 L923.255 682.611 L922.695 682.611 L922.136 682.611 L921.577 682.611 L921.018 682.611 L920.458 682.611 L919.899 682.611 L919.34 682.611 L918.781 682.611 L918.221 682.611 L917.662 682.611 L917.103 682.611 L916.544 682.611 L915.984 682.611 L915.425 682.611 L914.866 682.611 L914.307 682.611 L913.747 682.611 L913.188 682.611 L912.629 682.611 L912.07 682.611 L911.51 682.611 L910.951 682.611 L910.392 682.611 L909.833 682.611 L909.273 682.611 L908.714 682.611 L908.155 682.611 L907.596 682.611 L907.036 682.611 L906.477 682.611 L905.918 682.611 L905.359 682.611 L904.799 682.611 L904.24 682.611 L903.681 682.611 L903.122 682.611 L902.562 682.611 L902.003 682.611 L901.444 682.611 L900.885 682.611 L900.325 682.611 L899.766 682.611 L899.207 682.611 L898.648 682.611 L898.088 682.611 L897.529 682.611 L896.97 682.611 L896.411 682.611 L895.851 682.611 L895.292 682.611 L894.733 682.611 L894.174 682.611 L893.614 682.611 L893.055 682.611 L892.496 682.611 L891.937 682.611 L891.377 682.611 L890.818 682.611 L890.259 682.611 L889.7 682.611 L889.14 682.611 L888.581 682.611 L888.022 682.611 L887.463 682.611 L886.903 682.611 L886.344 682.611 L885.785 682.611 L885.226 682.611 L884.666 682.611 L884.107 682.611 L883.548 682.611 L882.989 682.611 L882.429 682.611 L881.87 682.611 L881.311 682.611 L880.752 682.611 L880.192 682.611 L879.633 682.611 L879.074 682.611 L878.515 682.611 L877.955 682.611 L877.396 682.611 L876.837 682.611 L876.278 682.611 L875.718 682.611 L875.159 682.611 L874.6 682.611 L874.041 682.611 L873.481 682.611 L872.922 682.611 L872.363 682.611 L871.804 682.611 L871.244 682.611 L870.685 682.611 L870.126 682.611 L869.567 682.611 L869.007 682.611 L868.448 682.611 L867.889 682.611 L867.33 682.611 L866.77 682.611 L866.211 682.611 L865.652 682.611 L865.093 682.611 L864.533 682.611 L863.974 682.611 L863.415 682.611 L862.856 682.611 L862.296 682.611 L861.737 682.611 L861.178 682.611 L860.619 682.611 L860.059 682.611 L859.5 682.611 L858.941 682.611 L858.382 682.611 L857.822 682.611 L857.263 682.611 L856.704 682.611 L856.145 682.611 L855.585 682.611 L855.026 682.611 L854.467 682.611 L853.908 682.611 L853.348 682.611 L852.789 682.611 L852.23 682.611 L851.671 682.611 L851.111 682.611 L850.552 682.611 L849.993 682.611 L849.434 682.611 L848.874 682.611 L848.315 682.611 L847.756 682.611 L847.197 682.611 L846.637 682.611 L846.078 682.611 L845.519 682.611 L844.96 682.611 L844.4 682.611 L843.841 682.611 L843.282 682.611 L842.723 682.611 L842.163 682.611 L841.604 682.611 L841.045 682.611 L840.486 682.611 L839.926 682.611 L839.367 682.611 L838.808 682.611 L838.249 682.611 L837.689 682.611 L837.13 682.611 L836.571 682.611 L836.012 682.611 L835.452 682.611 L834.893 682.611 L834.334 682.611 L833.775 682.611 L833.215 682.611 L832.656 682.611 L832.097 682.611 L831.538 682.611 L830.978 682.611 L830.419 682.611 L829.86 682.611 L829.301 682.611 L828.741 682.611 L828.182 682.611 L827.623 682.611 L827.064 682.611 L826.504 682.611 L825.945 682.611 L825.386 682.611 L824.827 682.611 L824.267 682.611 L823.708 682.611 L823.149 682.611 L822.59 682.611 L822.03 682.611 L821.471 682.611 L820.912 682.611 L820.353 682.611 L819.793 682.611 L819.234 682.611 L818.675 682.611 L818.116 682.611 L817.556 682.611 L816.997 682.611 L816.438 682.611 L815.879 682.611 L815.319 682.611 L814.76 682.611 L814.201 682.611 L813.642 682.611 L813.082 682.611 L812.523 682.611 L811.964 682.611 L811.405 682.611 L810.845 682.611 L810.286 682.611 L809.727 682.611 L809.168 682.611 L808.608 682.611 L808.049 682.611 L807.49 682.611 L806.931 682.611 L806.371 682.611 L805.812 682.611 L805.253 682.611 L804.693 682.611 L804.134 682.611 L803.575 682.611 L803.016 682.611 L802.456 682.611 L801.897 682.611 L801.338 682.611 L800.779 682.611 L800.219 682.611 L799.66 682.611 L799.101 682.611 L798.542 682.611 L797.982 682.611 L797.423 682.611 L796.864 682.611 L796.305 682.611 L795.745 682.611 L795.186 682.611 L794.627 682.611 L794.068 682.611 L793.508 682.611 L792.949 682.611 L792.39 682.611 L791.831 682.611 L791.271 682.611 L790.712 682.611 L790.153 682.611 L789.594 682.611 L789.034 682.611 L788.475 682.611 L787.916 682.611 L787.357 682.611 L786.797 682.611 L786.238 682.611 L785.679 682.611 L785.12 682.611 L784.56 682.611 L784.001 682.611 L783.442 682.611 L782.883 682.611 L782.323 682.611 L781.764 682.611 L781.205 682.611 L780.646 682.611 L780.086 682.611 L779.527 682.611 L778.968 682.611 L778.409 682.611 L777.849 682.611 L777.29 682.611 L776.731 682.611 L776.172 682.611 L775.612 682.611 L775.053 682.611 L774.494 682.611 L773.935 682.611 L773.375 682.611 L772.816 682.611 L772.257 682.611 L771.698 682.611 L771.138 682.611 L770.579 682.611 L770.02 682.611 L769.461 682.611 L768.901 682.611 L768.342 682.611 L767.783 682.611 L767.224 682.611 L766.664 682.611 L766.105 682.611 L765.546 682.611 L764.987 682.611 L764.427 682.611 L763.868 682.611 L763.309 682.611 L762.75 682.611 L762.19 682.611 L761.631 682.611 L761.072 682.611 L760.513 682.611 L759.953 682.611 L759.394 682.611 L758.835 682.611 L758.276 682.611 L757.716 682.611 L757.157 682.611 L756.598 682.611 L756.039 682.611 L755.479 682.611 L754.92 682.611 L754.361 682.611 L753.802 682.611 L753.242 682.611 L752.683 682.611 L752.124 682.611 L751.565 682.611 L751.005 682.611 L750.446 682.611 L749.887 682.611 L749.328 682.611 L748.768 682.611 L748.209 682.611 L747.65 682.611 L747.091 682.611 L746.531 682.611 L745.972 682.611 L745.413 682.611 L744.854 682.611 L744.294 682.611 L743.735 682.611 L743.176 682.611 L742.617 682.611 L742.057 682.611 L741.498 682.611 L740.939 682.611 L740.38 682.611 L739.82 682.611 L739.261 682.611 L738.702 682.611 L738.143 682.611 L737.583 682.611 L737.024 682.611 L736.465 682.611 L735.906 682.611 L735.346 682.611 L734.787 682.611 L734.228 682.611 L733.669 682.611 L733.109 682.611 L732.55 682.611 L731.991 682.611 L731.432 682.611 L730.872 682.611 L730.313 682.611 L729.754 682.611 L729.195 682.611 L728.635 682.611 L728.076 682.611 L727.517 682.611 L726.958 682.611 L726.398 682.611 L725.839 682.611 L725.28 682.611 L724.721 682.611 L724.161 682.611 L723.602 682.611 L723.043 682.611 L722.484 682.611 L721.924 682.611 L721.365 682.611 L720.806 682.611 L720.247 682.611  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.248 720.806,684.248 721.365,684.248 721.924,684.248 722.484,684.248 723.043,684.248 723.602,684.248 724.161,684.248 724.721,684.248 725.28,684.248 725.839,684.248 726.398,684.248 726.958,684.248 727.517,684.248 728.076,684.248 728.635,684.248 729.195,684.248 729.754,684.248 730.313,684.248 730.872,684.248 731.432,684.248 731.991,684.248 732.55,684.248 733.109,684.248 733.669,684.248 734.228,684.248 734.787,684.248 735.346,684.248 735.906,684.248 736.465,684.248 737.024,684.248 737.583,684.248 738.143,684.248 738.702,684.248 739.261,684.248 739.82,684.248 740.38,684.248 740.939,684.248 741.498,684.248 742.057,684.248 742.617,684.248 743.176,684.248 743.735,684.248 744.294,684.248 744.854,684.248 745.413,684.248 745.972,684.248 746.531,684.248 747.091,684.248 747.65,684.248 748.209,684.248 748.768,684.248 749.328,684.248 749.887,684.248 750.446,684.248 751.005,684.248 751.565,684.248 752.124,684.248 752.683,684.248 753.242,684.248 753.802,684.248 754.361,684.248 754.92,684.248 755.479,684.248 756.039,684.248 756.598,684.248 757.157,684.248 757.716,684.248 758.276,684.248 758.835,684.248 759.394,684.248 759.953,684.248 760.513,684.248 761.072,684.248 761.631,684.248 762.19,684.248 762.75,684.248 763.309,684.248 763.868,684.248 764.427,684.248 764.987,684.248 765.546,684.248 766.105,684.248 766.664,684.248 767.224,684.248 767.783,684.248 768.342,684.248 768.901,684.248 769.461,684.248 770.02,684.248 770.579,684.248 771.138,684.248 771.698,684.248 772.257,684.248 772.816,684.248 773.375,684.248 773.935,684.248 774.494,684.248 775.053,684.248 775.612,684.248 776.172,684.248 776.731,684.248 777.29,684.248 777.849,684.248 778.409,684.248 778.968,684.248 779.527,684.248 780.086,684.248 780.646,684.248 781.205,684.248 781.764,684.248 782.323,684.248 782.883,684.248 783.442,684.248 784.001,684.248 784.56,684.248 785.12,684.248 785.679,684.248 786.238,684.248 786.797,684.248 787.357,684.248 787.916,684.248 788.475,684.248 789.034,684.248 789.594,684.248 790.153,684.248 790.712,684.248 791.271,684.248 791.831,684.248 792.39,684.248 792.949,684.248 793.508,684.248 794.068,684.248 794.627,684.248 795.186,684.248 795.745,684.248 796.305,684.248 796.864,684.248 797.423,684.248 797.982,684.248 798.542,684.248 799.101,684.248 799.66,684.248 800.219,684.248 800.779,684.248 801.338,684.248 801.897,684.248 802.456,684.248 803.016,684.248 803.575,684.248 804.134,684.248 804.693,684.248 805.253,684.248 805.812,684.248 806.371,684.248 806.931,684.248 807.49,684.248 808.049,684.248 808.608,684.248 809.168,684.248 809.727,684.248 810.286,684.248 810.845,684.248 811.405,684.248 811.964,684.248 812.523,684.248 813.082,684.248 813.642,684.248 814.201,684.248 814.76,684.248 815.319,684.248 815.879,684.248 816.438,684.248 816.997,684.248 817.556,684.248 818.116,684.248 818.675,684.248 819.234,684.248 819.793,684.248 820.353,684.248 820.912,684.248 821.471,684.248 822.03,684.248 822.59,684.248 823.149,684.248 823.708,684.248 824.267,684.248 824.827,684.248 825.386,684.248 825.945,684.248 826.504,684.248 827.064,684.248 827.623,684.248 828.182,684.248 828.741,684.248 829.301,684.248 829.86,684.248 830.419,684.248 830.978,684.248 831.538,684.248 832.097,684.248 832.656,684.248 833.215,684.248 833.775,684.248 834.334,684.248 834.893,684.248 835.452,684.248 836.012,684.248 836.571,684.248 837.13,684.248 837.689,684.248 838.249,684.248 838.808,684.248 839.367,684.248 839.926,684.248 840.486,684.248 841.045,684.248 841.604,684.248 842.163,684.248 842.723,684.248 843.282,684.248 843.841,684.248 844.4,684.248 844.96,684.248 845.519,684.248 846.078,684.248 846.637,684.248 847.197,684.248 847.756,684.248 848.315,684.248 848.874,684.248 849.434,684.248 849.993,684.248 850.552,684.248 851.111,684.248 851.671,684.248 852.23,684.248 852.789,684.248 853.348,684.248 853.908,684.248 854.467,684.248 855.026,684.248 855.585,684.248 856.145,684.248 856.704,684.248 857.263,684.248 857.822,684.248 858.382,684.248 858.941,684.248 859.5,684.248 860.059,684.248 860.619,684.248 861.178,684.248 861.737,684.248 862.296,684.248 862.856,684.248 863.415,684.248 863.974,684.248 864.533,684.248 865.093,684.248 865.652,684.248 866.211,684.248 866.77,684.248 867.33,684.248 867.889,684.248 868.448,684.248 869.007,684.248 869.567,684.248 870.126,684.248 870.685,684.248 871.244,684.248 871.804,684.248 872.363,684.248 872.922,684.248 873.481,684.248 874.041,684.248 874.6,684.248 875.159,684.248 875.718,684.248 876.278,684.248 876.837,684.248 877.396,684.248 877.955,684.248 878.515,684.248 879.074,684.248 879.633,684.248 880.192,684.248 880.752,684.248 881.311,684.248 881.87,684.248 882.429,684.248 882.989,684.248 883.548,684.248 884.107,684.248 884.666,684.248 885.226,684.248 885.785,684.248 886.344,684.248 886.903,684.248 887.463,684.248 888.022,684.248 888.581,684.248 889.14,684.248 889.7,684.248 890.259,684.248 890.818,684.248 891.377,684.248 891.937,684.248 892.496,684.248 893.055,684.248 893.614,684.248 894.174,684.248 894.733,684.248 895.292,684.248 895.851,684.248 896.411,684.248 896.97,684.248 897.529,684.248 898.088,684.248 898.648,684.248 899.207,684.248 899.766,684.248 900.325,684.248 900.885,684.248 901.444,684.248 902.003,684.248 902.562,684.248 903.122,684.248 903.681,684.248 904.24,684.248 904.799,684.248 905.359,684.248 905.918,684.248 906.477,684.248 907.036,684.248 907.596,684.248 908.155,684.248 908.714,684.248 909.273,684.248 909.833,684.248 910.392,684.248 910.951,684.248 911.51,684.248 912.07,684.248 912.629,684.248 913.188,684.248 913.747,684.248 914.307,684.248 914.866,684.248 915.425,684.248 915.984,684.248 916.544,684.248 917.103,684.248 917.662,684.248 918.221,684.248 918.781,684.248 919.34,684.248 919.899,684.248 920.458,684.248 921.018,684.248 921.577,684.248 922.136,684.248 922.695,684.248 923.255,684.248 923.814,684.248 924.373,684.248 924.932,684.248 925.492,684.248 926.051,684.248 926.61,684.248 927.169,684.248 927.729,684.248 928.288,684.248 928.847,684.248 929.406,684.248 929.966,684.248 930.525,684.248 931.084,684.248 931.644,684.248 932.203,684.248 932.762,684.248 933.321,684.248 933.881,684.248 934.44,684.248 934.999,684.248 935.558,684.248 936.118,684.248 936.677,684.248 937.236,684.248 937.795,684.248 938.355,684.248 938.914,684.248 939.473,684.248 940.032,684.248 940.592,684.248 941.151,684.248 941.71,684.248 942.269,684.248 942.829,684.248 943.388,684.248 943.947,684.248 944.506,684.248 945.066,684.248 945.625,684.248 946.184,684.248 946.743,684.248 947.303,684.248 947.862,684.248 948.421,684.248 948.98,684.248 949.54,684.248 950.099,684.248 950.658,684.248 951.217,684.248 951.777,684.248 952.336,684.248 952.895,684.248 953.454,684.248 954.014,684.248 954.573,684.248 955.132,684.248 955.691,684.248 956.251,684.248 956.81,684.248 957.369,684.248 957.928,684.248 958.488,684.248 959.047,684.248 959.606,684.248 960.165,684.248 960.725,684.248 961.284,684.248 961.843,684.248 962.402,684.248 962.962,684.248 963.521,684.248 964.08,684.248 964.639,684.248 965.199,684.248 965.758,684.248 966.317,684.248 966.876,684.248 967.436,684.248 967.995,684.248 968.554,684.248 969.113,684.248 969.673,684.248 970.232,684.248 970.791,684.248 971.35,684.248 971.91,684.248 972.469,684.248 973.028,684.248 973.587,684.248 974.147,684.248 974.706,684.248 975.265,684.248 975.824,684.248 976.384,684.248 976.943,684.248 977.502,684.248 978.061,684.248 978.621,684.248 979.18,684.248 979.739,684.248 980.298,684.248 980.858,684.248 981.417,684.248 981.976,684.248 982.535,684.248 983.095,684.248 983.654,684.248 984.213,684.248 984.772,684.248 985.332,684.248 985.891,684.248 986.45,684.248 987.009,684.248 987.569,684.248 988.128,684.248 988.687,684.248 989.246,684.248 989.806,684.248 990.365,684.248 990.924,684.248 991.483,684.248 992.043,684.248 992.602,684.248 993.161,684.248 993.72,684.248 994.28,684.248 994.839,684.248 995.398,684.248 995.957,684.248 996.517,684.248 997.076,684.248 997.635,684.248 998.194,684.248 998.754,684.248 999.313,684.248 999.872,684.248 1000.43,684.248 1000.99,684.248 1001.55,684.248 1002.11,684.248 1002.67,684.248 1003.23,684.248 1003.79,684.248 1004.35,684.248 1004.91,684.248 1005.46,684.248 1006.02,684.248 1006.58,684.248 1007.14,684.248 1007.7,684.248 1008.26,684.248 1008.82,684.248 1009.38,684.248 1009.94,684.248 1010.5,684.248 1011.06,684.248 1011.62,684.248 1012.18,684.248 1012.73,684.248 1013.29,684.248 1013.85,684.248 1014.41,684.248 1014.97,684.248 1015.53,684.248 1016.09,684.248 1016.65,684.248 1017.21,684.248 1017.77,684.248 1018.33,684.248 1018.89,684.248 1019.45,684.248 1020.01,684.248 1020.56,684.248 1021.12,684.248 1021.68,684.248 1022.24,684.248 1022.8,684.248 1023.36,684.248 1023.92,684.248 1024.48,684.248 1025.04,684.248 1025.6,684.248 1026.16,684.248 1026.72,684.248 1027.28,684.248 1027.83,684.248 1028.39,684.248 1028.95,684.248 1029.51,684.248 1030.07,684.248 1030.63,684.248 1031.19,684.248 1031.75,684.248 1032.31,684.248 1032.87,684.248 1033.43,684.248 1033.99,684.248 1034.55,684.248 1035.1,684.248 1035.66,684.248 1036.22,684.248 1036.78,684.248 1037.34,684.248 1037.9,684.248 1038.46,684.248 1039.02,684.248 1039.58,684.248 1040.14,684.248 1040.7,684.248 1041.26,684.248 1041.82,684.248 1042.38,684.248 1042.93,684.248 1043.49,684.248 1044.05,684.248 1044.61,684.248 1045.17,684.248 1045.73,684.248 1046.29,684.248 1046.85,684.248 1047.41,684.248 1047.97,684.248 1048.53,684.248 1049.09,684.248 1049.65,684.248 1050.2,684.248 1050.76,684.248 1051.32,684.248 1051.88,684.248 1052.44,684.248 1053,684.248 1053.56,684.248 1054.12,684.248 1054.68,684.248 1055.24,684.248 1055.8,684.248 1056.36,684.248 1056.92,684.248 1057.48,684.248 1058.03,684.248 1058.59,684.248 1059.15,684.248 1059.71,684.248 1060.27,684.248 1060.83,684.248 1061.39,684.248 1061.95,684.248 1062.51,684.248 1063.07,684.248 1063.63,684.248 1064.19,684.248 1064.75,684.248 1065.3,684.248 1065.86,684.248 1066.42,684.248 1066.98,684.248 1067.54,684.248 1068.1,684.248 1068.66,684.248 1069.22,684.248 1069.78,684.248 1070.34,684.248 1070.9,684.248 1071.46,684.248 1072.02,684.248 1072.57,684.248 1073.13,684.248 1073.69,684.248 1074.25,684.248 1074.81,684.248 1075.37,684.248 1075.93,684.248 1076.49,684.248 1077.05,684.248 1077.61,684.248 1078.17,684.248 1078.73,684.248 1079.29,684.248 1079.85,684.248 1080.4,684.248 1080.96,684.248 1081.52,684.248 1082.08,684.248 1082.64,684.248 1083.2,684.248 1083.76,684.248 1084.32,684.248 1084.88,684.248 1085.44,684.248 1086,684.248 1086.56,684.248 1087.12,684.248 1087.67,684.248 1088.23,684.248 1088.79,684.248 1089.35,684.248 1089.91,684.248 1090.47,684.248 1091.03,684.248 1091.59,684.248 1092.15,684.248 1092.71,684.248 1093.27,684.248 1093.83,684.248 1094.39,684.248 1094.94,684.248 1095.5,684.248 1096.06,684.248 1096.62,684.248 1097.18,684.248 1097.74,684.248 1098.3,684.248 1098.86,684.248 1099.42,684.248 1099.98,684.248 1100.54,684.248 1101.1,684.248 1101.66,684.248 1102.22,684.248 1102.77,684.248 1103.33,684.248 1103.89,684.248 1104.45,684.248 1105.01,684.248 1105.57,684.248 1106.13,684.248 1106.69,684.248 1107.25,684.248 1107.81,684.248 1108.37,684.248 1108.93,684.248 1109.49,684.248 1110.04,684.248 1110.6,684.248 1111.16,684.248 1111.72,684.248 1112.28,684.248 1112.84,684.248 1113.4,684.248 1113.96,684.248 1114.52,684.248 1115.08,684.248 1115.64,684.248 1116.2,684.248 1116.76,684.248 1117.31,684.248 1117.87,684.248 1118.43,684.248 1118.99,684.248 1119.55,684.248 1120.11,684.248 1120.67,684.248 1121.23,684.248 1121.79,684.248 1122.35,684.248 1122.91,684.248 1123.47,684.248 1124.03,684.248 1124.59,684.248 1125.14,684.248 1125.7,684.248 1126.26,684.248 1126.82,684.248 1127.38,684.248 1127.94,684.248 1128.5,684.248 1129.06,684.248 1129.62,684.248 1130.18,684.248 1130.74,684.248 1131.3,684.248 1131.86,684.248 1132.41,684.248 1132.97,684.248 1133.53,684.248 1134.09,684.248 1134.65,684.248 1135.21,684.248 1135.77,684.248 1136.33,684.248 1136.89,684.248 1137.45,684.248 1138.01,684.248 1138.57,684.248 1139.13,684.248 1139.68,684.248 1140.24,684.248 1140.8,684.248 1141.36,684.248 1141.92,684.248 1142.48,684.248 1143.04,684.248 1143.6,684.248 1144.16,684.248 1144.72,684.248 1145.28,684.248 1145.84,684.248 1146.4,684.248 1146.96,684.248 1147.51,684.248 1148.07,684.248 1148.63,684.248 1149.19,684.248 1149.75,684.248 1150.31,684.248 1150.87,684.248 1151.43,684.248 1151.99,684.248 1152.55,684.248 1153.11,684.248 1153.67,684.248 1154.23,684.248 1154.78,684.248 1155.34,684.248 1155.9,684.248 1156.46,684.248 1157.02,684.248 1157.58,684.248 1158.14,684.248 1158.7,684.248 1159.26,684.248 1159.82,684.248 1160.38,684.248 1160.94,684.248 1161.5,684.248 1162.05,684.248 1162.61,684.248 1163.17,684.248 1163.73,684.248 1164.29,684.248 1164.85,684.248 1165.41,684.248 1165.97,684.248 1166.53,684.248 1167.09,684.248 1167.65,684.248 1168.21,684.248 1168.77,684.248 1169.33,684.248 1169.88,684.248 1170.44,684.248 1171,684.248 1171.56,684.248 1172.12,684.248 1172.68,684.248 1173.24,684.248 1173.8,684.248 1174.36,684.248 1174.92,684.248 1175.48,684.248 1176.04,684.248 1176.6,684.248 1177.15,684.248 1177.71,684.248 1178.27,684.248 1178.83,684.248 1179.39,684.248 1179.95,684.248 1180.51,684.248 1181.07,684.248 1181.63,684.248 1182.19,684.248 1182.75,684.248 1183.31,684.248 1183.87,684.248 1184.43,684.248 1184.98,684.248 1185.54,684.248 1186.1,684.248 1186.66,684.248 1187.22,684.248 1187.78,684.248 1188.34,684.248 1188.9,684.248 1189.46,684.248 1190.02,684.248 1190.58,684.248 1191.14,684.248 1191.7,684.248 1192.25,684.248 1192.81,684.248 1193.37,684.248 1193.93,684.248 1194.49,684.248 1195.05,684.248 1195.61,684.248 1196.17,684.248 1196.73,684.248 1197.29,684.248 1197.85,684.248 1198.41,684.248 1198.97,684.248 1199.52,684.248 1200.08,684.248 1200.64,684.248 1201.2,684.248 1201.76,684.248 1202.32,684.248 1202.88,684.248 1203.44,684.248 1204,684.248 1204.56,684.248 1205.12,684.248 1205.68,684.248 1206.24,684.248 1206.8,684.248 1207.35,684.248 1207.91,684.248 1208.47,684.248 1209.03,684.248 1209.59,684.248 1210.15,684.248 1210.71,684.248 1211.27,684.248 1211.83,684.248 1212.39,684.248 1212.95,684.248 1213.51,684.248 1214.07,684.248 1214.62,684.248 1215.18,684.248 1215.74,684.248 1216.3,684.248 1216.86,684.248 1217.42,684.248 1217.98,684.248 1218.54,684.248 1219.1,684.248 1219.66,684.248 1220.22,684.248 1220.78,684.248 1221.34,684.248 1221.89,684.248 1222.45,684.248 1223.01,684.248 1223.57,684.248 1224.13,684.248 1224.69,684.248 1225.25,684.248 1225.81,684.248 1226.37,684.248 1226.93,684.248 1227.49,684.248 1228.05,684.248 1228.61,684.248 1229.17,684.248 1229.72,684.248 1230.28,684.248 1230.84,684.248 1231.4,684.248 1231.96,684.248 1232.52,684.248 1233.08,684.248 1233.64,684.248 1234.2,684.248 1234.76,684.248 1235.32,684.248 1235.88,684.248 1236.44,684.248 1236.99,684.248 1237.55,684.248 1238.11,684.248 1238.67,684.248 1239.23,684.248 1239.79,684.248 1240.35,684.248 1240.91,684.248 1241.47,684.248 1242.03,684.248 1242.59,684.248 1243.15,684.248 1243.71,684.248 1244.26,684.248 1244.82,684.248 1245.38,684.248 1245.94,684.248 1246.5,684.248 1247.06,684.248 1247.62,684.248 1248.18,684.248 1248.74,684.248 1249.3,684.248 1249.86,684.248 1250.42,684.248 1250.98,684.248 1251.54,684.248 1252.09,684.248 1252.65,684.248 1253.21,684.248 1253.77,684.248 1254.33,684.248 1254.89,684.248 1255.45,684.248 1256.01,684.248 1256.57,684.248 1257.13,684.248 1257.69,684.248 1258.25,684.248 1258.81,684.248 1259.36,684.248 1259.92,684.248 1260.48,684.248 1261.04,684.248 1261.6,684.248 1262.16,684.248 1262.72,684.248 1263.28,684.248 1263.84,684.248 1264.4,684.248 1264.96,684.248 1265.52,684.248 1266.08,684.248 1266.63,684.248 1267.19,684.248 1267.75,684.248 1268.31,684.248 1268.87,684.248 1269.43,684.248 1269.99,684.248 1270.55,684.248 1271.11,684.248 1271.67,684.248 1272.23,684.248 1272.79,684.248 1273.35,684.248 1273.91,684.248 1274.46,684.248 1275.02,684.248 1275.58,684.248 1276.14,684.248 1276.7,684.248 1277.26,684.248 1277.82,684.248 1278.38,684.248 1278.94,684.248 1279.5,684.248 1280.06,684.248 1280.62,684.248 1281.18,684.248 1281.73,684.248 1282.29,684.248 1282.85,684.248 1283.41,684.248 1283.97,684.248 1284.53,684.248 1285.09,684.248 1285.65,684.248 1286.21,684.248 1286.77,684.248 1287.33,684.248 1287.89,684.248 1288.45,684.248 1289,684.248 1289.56,684.248 1290.12,684.248 1290.68,684.248 1291.24,684.248 1291.8,684.248 1292.36,684.248 1292.92,684.248 1293.48,684.248 1294.04,684.248 1294.6,684.248 1295.16,684.248 1295.72,684.248 1296.28,684.248 1296.83,684.248 1297.39,684.248 1297.95,684.248 1298.51,684.248 1299.07,684.248 1299.63,684.248 1300.19,684.248 1300.75,684.248 1301.31,684.248 1301.87,684.248 1302.43,684.248 1302.99,684.248 1303.55,684.248 1304.1,684.248 1304.66,684.248 1305.22,684.248 1305.78,684.248 1306.34,684.248 1306.9,684.248 1307.46,684.248 1308.02,684.248 1308.58,684.248 1309.14,684.248 1309.7,684.248 1310.26,684.248 1310.82,684.248 1311.38,684.248 1311.93,684.248 1312.49,684.248 1313.05,684.248 1313.61,684.248 1314.17,684.248 1314.73,684.248 1315.29,684.248 1315.85,684.248 1316.41,684.248 1316.97,684.248 1317.53,684.248 1318.09,684.248 1318.65,684.248 1319.2,684.248 1319.76,684.248 1320.32,684.248 1320.88,684.248 1321.44,684.248 1322,684.248 1322.56,684.248 1323.12,684.248 1323.68,684.248 1324.24,684.248 1324.8,684.248 1325.36,684.248 1325.92,684.248 1326.47,684.248 1327.03,684.248 1327.59,684.248 1328.15,684.248 1328.71,684.248 1329.27,684.248 1329.83,684.248 1330.39,684.248 1330.95,684.248 1331.51,684.248 1332.07,684.248 1332.63,684.248 1333.19,684.248 1333.75,684.248 1334.3,684.248 1334.86,684.248 1335.42,684.248 1335.98,684.248 1336.54,684.248 1337.1,684.248 1337.66,684.248 1338.22,684.248 1338.78,684.248 1339.34,684.248 1339.9,684.248 1340.46,684.248 1341.02,684.248 1341.57,684.248 1342.13,684.248 1342.69,684.248 1343.25,684.248 1343.81,684.248 1344.37,684.248 1344.93,684.248 1345.49,684.248 1346.05,684.248 1346.61,684.248 1347.17,684.248 1347.73,684.248 1348.29,684.248 1348.84,684.248 1349.4,684.248 1349.96,684.248 1350.52,684.248 1351.08,684.248 1351.64,684.248 1352.2,684.248 1352.76,684.248 1353.32,684.248 1353.88,684.248 1354.44,684.248 1355,684.248 1355.56,684.248 1356.12,684.248 1356.67,684.248 1357.23,684.248 1357.79,684.248 1358.35,684.248 1358.91,684.248 1359.47,684.248 1360.03,684.248 1360.59,684.248 1361.15,684.248 1361.71,684.248 1362.27,684.248 1362.83,684.248 1363.39,684.248 1363.94,684.248 1364.5,684.248 1365.06,684.248 1365.62,684.248 1366.18,684.248 1366.74,684.248 1367.3,684.248 1367.86,684.248 1368.42,684.248 1368.98,684.248 1369.54,684.248 1370.1,684.248 1370.66,684.248 1371.21,684.248 1371.77,684.248 1372.33,684.248 1372.89,684.248 1373.45,684.248 1374.01,684.248 1374.57,684.248 1375.13,684.248 1375.69,684.248 1376.25,684.248 1376.81,684.248 1377.37,684.248 1377.93,684.248 1378.49,684.248 1379.04,684.248 1379.6,684.248 1380.16,684.248 1380.72,684.248 1381.28,684.248 1381.84,684.248 1382.4,684.248 1382.96,684.248 1383.52,684.248 1384.08,684.248 1384.64,684.248 1385.2,684.248 1385.76,684.248 1386.31,684.248 1386.87,684.248 1387.43,684.248 1387.99,684.248 1388.55,684.248 1389.11,684.248 1389.67,684.248 1390.23,684.248 1390.79,684.248 1391.35,684.248 1391.91,684.248 1392.47,684.248 1393.03,684.248 1393.58,684.248 1394.14,684.248 1394.7,684.248 1395.26,684.248 1395.82,684.248 1396.38,684.248 1396.94,684.248 1397.5,684.248 1398.06,684.248 1398.62,684.248 1399.18,684.248 1399.74,684.248 1400.3,684.248 1400.86,684.248 1401.41,684.248 1401.97,684.248 1402.53,684.248 1403.09,684.248 1403.65,684.248 1404.21,684.248 1404.77,684.248 1405.33,684.248 1405.89,684.248 1406.45,684.248 1407.01,684.248 1407.57,684.248 1408.13,684.248 1408.68,684.248 1409.24,684.248 1409.8,684.248 1410.36,684.248 1410.92,684.248 1411.48,684.248 1412.04,684.248 1412.6,684.248 1413.16,684.248 1413.72,684.248 1414.28,684.248 1414.84,684.248 1415.4,684.248 1415.95,684.248 1416.51,684.248 1417.07,684.248 1417.63,684.248 1418.19,684.248 1418.75,684.248 1419.31,684.248 1419.87,684.248 1420.43,684.248 1420.99,684.248 1421.55,684.248 1422.11,684.248 1422.67,684.248 1423.23,684.248 1423.78,684.248 1424.34,684.248 1424.9,684.248 1425.46,684.248 1426.02,684.248 1426.58,684.248 1427.14,684.248 1427.7,684.248 1428.26,684.248 1428.82,684.248 1429.38,684.248 1429.94,684.248 1430.5,684.248 1431.05,684.248 1431.61,684.248 1432.17,684.248 1432.73,684.248 1433.29,684.248 1433.85,684.248 1434.41,684.248 1434.97,684.248 1435.53,684.248 1436.09,684.248 1436.65,684.248 1437.21,684.248 1437.77,684.248 1438.33,684.248 1438.88,684.248 1439.44,684.248 1440,684.248 1440.56,684.248 1441.12,684.248 1441.68,684.248 1442.24,684.248 1442.8,684.248 1443.36,684.248 1443.92,684.248 1444.48,684.248 1445.04,684.248 1445.6,684.248 1446.15,684.248 1446.71,684.248 1447.27,684.248 1447.83,684.248 1448.39,684.248 1448.95,684.248 1449.51,684.248 1450.07,684.248 1450.63,684.248 1451.19,684.248 1451.75,684.248 1452.31,684.248 1452.87,684.248 1453.42,684.248 1453.98,684.248 1454.54,684.248 1455.1,684.248 1455.66,684.248 1456.22,684.248 1456.78,684.248 1457.34,684.248 1457.9,684.248 1458.46,684.248 1459.02,684.248 1459.58,684.248 1460.14,684.248 1460.7,684.248 1461.25,684.248 1461.81,684.248 1462.37,684.248 1462.93,684.248 1463.49,684.248 1464.05,684.248 1464.61,684.248 1465.17,684.248 1465.73,684.248 1466.29,684.248 1466.85,684.248 1467.41,684.248 1467.97,684.248 1468.52,684.248 1469.08,684.248 1469.64,684.248 1470.2,684.248 1470.76,684.248 1471.32,684.248 1471.88,684.248 1472.44,684.248 1473,684.248 1473.56,684.248 1474.12,684.248 1474.68,684.248 1475.24,684.248 1475.79,684.248 1476.35,684.248 1476.91,684.248 1477.47,684.248 1478.03,684.248 1478.59,684.248 1479.15,684.248 1479.71,684.248 1480.27,684.248 1480.83,684.248 1481.39,684.248 1481.95,684.248 1482.51,684.248 1483.07,684.248 1483.62,684.248 1484.18,684.248 1484.74,684.248 1485.3,684.248 1485.86,684.248 1486.42,684.248 1486.98,684.248 1487.54,684.248 1488.1,684.248 1488.66,684.248 1489.22,684.248 1489.78,684.248 1490.34,684.248 1490.89,684.248 1491.45,684.248 1492.01,684.248 1492.57,684.248 1493.13,684.248 1493.69,684.248 1494.25,684.248 1494.81,684.248 1495.37,684.248 1495.93,684.248 1496.49,684.248 1497.05,684.248 1497.61,684.248 1498.16,684.248 1498.72,684.248 1499.28,684.248 1499.84,684.248 1500.4,684.248 1500.96,684.248 1501.52,684.248 1502.08,684.248 1502.64,684.248 1503.2,684.248 1503.76,684.248 1504.32,684.248 1504.88,684.248 1505.44,684.248 1505.99,684.248 1506.55,684.248 1507.11,684.248 1507.67,684.248 1508.23,684.248 1508.79,684.248 1509.35,684.248 1509.91,684.248 1510.47,684.248 1511.03,684.248 1511.59,684.248 1512.15,684.248 1512.71,684.248 1513.26,684.248 1513.82,684.248 1514.38,684.248 1514.94,684.248 1515.5,684.248 1516.06,684.248 1516.62,684.248 1517.18,684.248 1517.74,684.248 1518.3,684.248 1518.86,684.248 1519.42,684.248 1519.98,684.248 1520.53,684.248 1521.09,684.248 1521.65,684.248 1522.21,684.248 1522.77,684.248 1523.33,684.248 1523.89,684.248 1524.45,684.248 1525.01,684.248 1525.57,684.248 1526.13,684.248 1526.69,684.248 1527.25,684.248 1527.81,684.248 1528.36,684.248 1528.92,684.248 1529.48,684.248 1530.04,684.248 1530.6,684.248 1531.16,684.248 1531.72,684.248 1532.28,684.248 1532.84,684.248 1533.4,684.248 1533.96,684.248 1534.52,684.248 1535.08,684.248 1535.63,684.248 1536.19,684.248 1536.75,684.248 1537.31,684.248 1537.87,684.248 1538.43,684.248 1538.99,684.248 1539.55,684.248 1540.11,684.248 1540.67,684.248 1541.23,684.248 1541.79,684.248 1542.35,684.248 1542.9,684.248 1543.46,684.248 1544.02,684.248 1544.58,684.248 1545.14,684.248 1545.7,684.248 1546.26,684.248 1546.82,684.248 1547.38,684.248 1547.94,684.248 1548.5,684.248 1549.06,684.248 1549.62,684.248 1550.18,684.248 1550.73,684.248 1551.29,684.248 1551.85,684.248 1552.41,684.248 1552.97,684.248 1553.53,684.248 1554.09,684.248 1554.65,684.248 1555.21,684.248 1555.77,684.248 1556.33,684.248 1556.89,684.248 1557.45,684.248 1558,684.248 1558.56,684.248 1559.12,684.248 1559.68,684.248 1560.24,684.248 1560.8,684.248 1561.36,684.248 1561.92,684.248 1562.48,684.248 1563.04,684.248 1563.6,684.248 1564.16,684.248 1564.72,684.248 1565.28,684.248 1565.83,684.248 1566.39,684.248 1566.95,684.248 1567.51,684.248 1568.07,684.248 1568.63,684.248 1569.19,684.248 1569.75,684.248 1570.31,684.248 1570.87,684.248 1571.43,684.248 1571.99,684.248 1572.55,684.248 1573.1,684.248 1573.66,684.248 1574.22,684.248 1574.78,684.248 1575.34,684.248 1575.9,684.248 1576.46,684.248 1577.02,684.248 1577.58,684.248 1578.14,684.248 1578.7,684.248 1579.26,684.248 1579.82,684.248 1580.37,684.248 1580.93,684.248 1581.49,684.248 1582.05,684.248 1582.61,684.248 1583.17,684.248 1583.73,684.248 1584.29,684.248 1584.85,684.248 1585.41,684.248 1585.97,684.248 1586.53,684.248 1587.09,684.248 1587.65,684.248 1588.2,684.248 1588.76,684.248 1589.32,684.248 1589.88,684.248 1590.44,684.248 1591,684.248 1591.56,684.248 1592.12,684.248 1592.68,684.248 1593.24,684.248 1593.8,684.248 1594.36,684.248 1594.92,684.248 1595.47,684.248 1596.03,684.248 1596.59,684.248 1597.15,684.248 1597.71,684.248 1598.27,684.248 1598.83,684.248 1599.39,684.248 1599.95,684.248 1600.51,684.248 1601.07,684.248 1601.63,684.248 1602.19,684.248 1602.74,684.248 1603.3,684.248 1603.86,684.248 1604.42,684.248 1604.98,684.248 1605.54,684.248 1606.1,684.248 1606.66,684.248 1607.22,684.248 1607.78,684.248 1608.34,684.248 1608.9,684.248 1609.46,684.248 1610.02,684.248 1610.57,684.248 1611.13,684.248 1611.69,684.248 1612.25,684.248 1612.81,684.248 1613.37,684.248 1613.93,684.248 1614.49,684.248 1615.05,684.248 1615.61,684.248 1616.17,684.248 1616.73,684.248 1617.29,684.248 1617.84,684.248 1618.4,684.248 1618.96,684.248 1619.52,684.248 1620.08,684.248 1620.64,684.248 1621.2,684.248 1621.76,684.248 1622.32,684.248 1622.88,684.248 1623.44,684.248 1624,684.248 1624.56,684.248 1625.11,684.248 1625.67,684.248 1626.23,684.248 1626.79,684.248 1627.35,684.248 1627.91,684.248 1628.47,684.248 1629.03,684.248 1629.59,684.248 1630.15,684.248 1630.71,684.248 1631.27,684.248 1631.83,684.248 1632.39,684.248 1632.94,684.248 1633.5,684.248 1634.06,684.248 1634.62,684.248 1635.18,684.248 1635.74,684.248 1636.3,684.248 1636.86,684.248 1637.42,684.248 1637.98,684.248 1638.54,684.248 1639.1,684.248 1639.66,684.248 1640.21,684.248 1640.77,684.248 1641.33,684.248 1641.89,684.248 1642.45,684.248 1643.01,684.248 1643.57,684.248 1644.13,684.248 1644.69,684.248 1645.25,684.248 1645.81,684.248 1646.37,684.248 1646.93,684.248 1647.48,684.248 1648.04,684.248 1648.6,684.248 1649.16,684.248 1649.72,684.248 1650.28,684.248 1650.84,684.248 1651.4,684.248 1651.96,684.248 1652.52,684.248 1653.08,684.248 1653.64,684.248 1654.2,684.248 1654.76,684.248 1655.31,684.248 1655.87,684.248 1656.43,684.248 1656.99,684.248 1657.55,684.248 1658.11,684.248 1658.67,684.248 1659.23,684.248 1659.79,684.248 1660.35,684.248 1660.91,684.248 1661.47,684.248 1662.03,684.248 1662.58,684.248 1663.14,684.248 1663.7,684.248 1664.26,684.248 1664.82,684.248 1665.38,684.248 1665.94,684.248 1666.5,684.248 1667.06,684.248 1667.62,684.248 1668.18,684.248 1668.74,684.248 1669.3,684.248 1669.85,684.248 1670.41,684.248 1670.97,684.248 1671.53,684.248 1672.09,684.248 1672.65,684.248 1673.21,684.248 1673.77,684.248 1674.33,684.248 1674.89,684.248 1675.45,684.248 1676.01,684.248 1676.57,684.248 1677.13,684.248 1677.68,684.248 1678.24,684.248 1678.8,684.248 1679.36,684.248 1679.92,684.248 1680.48,684.248 1681.04,684.248 1681.6,684.248 1682.16,684.248 1682.72,684.248 1683.28,684.248 1683.84,684.248 1684.4,684.248 1684.95,684.248 1685.51,684.248 1686.07,684.248 1686.63,684.248 1687.19,684.248 1687.75,684.248 1688.31,684.248 1688.87,684.248 1689.43,684.248 1689.99,684.248 1690.55,684.248 1691.11,684.248 1691.67,684.248 1692.23,684.248 1692.78,684.248 1693.34,684.248 1693.9,684.248 1694.46,684.248 1695.02,684.248 1695.58,684.248 1696.14,684.248 1696.7,684.248 1697.26,684.248 1697.82,684.248 1698.38,684.248 1698.94,684.248 1699.5,684.248 1700.05,684.248 1700.61,684.248 1701.17,684.248 1701.73,684.248 1702.29,684.248 1702.85,684.248 1703.41,684.248 1703.97,684.248 1704.53,684.248 1705.09,684.248 1705.65,684.248 1706.21,684.248 1706.77,684.248 1707.32,684.248 1707.88,684.248 1708.44,684.248 1709,684.248 1709.56,684.248 1710.12,684.248 1710.68,684.248 1711.24,684.248 1711.8,684.248 1712.36,684.248 1712.92,684.248 1713.48,684.248 1714.04,684.248 1714.6,684.248 1715.15,684.248 1715.71,684.248 1716.27,684.248 1716.83,684.248 1717.39,684.248 1717.95,684.248 1718.51,684.248 1719.07,684.248 1719.63,684.248 1720.19,684.248 1720.75,684.248 1721.31,684.248 1721.87,684.248 1722.42,684.248 1722.98,684.248 1723.54,684.248 1724.1,684.248 1724.66,684.248 1725.22,684.248 1725.78,684.248 1726.34,684.248 1726.9,684.248 1727.46,684.248 1728.02,684.248 1728.58,684.248 1729.14,684.248 1729.69,684.248 1730.25,684.248 1730.81,684.248 1731.37,684.248 1731.93,684.248 1732.49,684.248 1733.05,684.248 1733.61,684.248 1734.17,684.248 1734.73,684.248 1735.29,684.248 1735.85,684.248 1736.41,684.248 1736.97,684.248 1737.52,684.248 1738.08,684.248 1738.64,684.248 1739.2,684.248 1739.76,684.248 1740.32,684.248 1740.88,684.248 1741.44,684.248 1742,684.248 1742.56,684.248 1743.12,684.248 1743.68,684.248 1744.24,684.248 1744.79,684.248 1745.35,684.248 1745.91,684.248 1746.47,684.248 1747.03,684.248 1747.59,684.248 1748.15,684.248 1748.71,684.248 1749.27,684.248 1749.83,684.248 1750.39,684.248 1750.95,684.248 1751.51,684.248 1752.06,684.248 1752.62,684.248 1753.18,684.248 1753.74,684.248 1754.3,684.248 1754.86,684.248 1755.42,684.248 1755.98,684.248 1756.54,684.248 1757.1,684.248 1757.66,684.248 1758.22,684.248 1758.78,684.248 1759.34,684.248 1759.89,684.248 1760.45,684.248 1761.01,684.248 1761.57,684.248 1762.13,684.248 1762.69,684.248 1763.25,684.248 1763.81,684.248 1764.37,684.248 1764.93,684.248 1765.49,684.248 1766.05,684.248 1766.61,684.248 1767.16,684.248 1767.72,684.248 1768.28,684.248 1768.84,684.248 1769.4,684.248 1769.96,684.248 1770.52,684.248 1771.08,684.248 1771.64,684.248 1772.2,684.248 1772.76,684.248 1773.32,684.248 1773.88,684.248 1774.43,684.248 1774.99,684.248 1775.55,684.248 1776.11,684.248 1776.67,684.248 1777.23,684.248 1777.79,684.248 1778.35,684.248 1778.91,684.248 1779.47,684.248 1780.03,684.248 1780.59,684.248 1781.15,684.248 1781.71,684.248 1782.26,684.248 1782.82,684.248 1783.38,684.248 1783.94,684.248 1784.5,684.248 1785.06,684.248 1785.62,684.248 1786.18,684.248 1786.74,684.248 1787.3,684.248 1787.86,684.248 1788.42,684.248 1788.98,684.248 1789.53,684.248 1790.09,684.248 1790.65,684.248 1791.21,684.248 1791.77,684.248 1792.33,684.248 1792.89,684.248 1793.45,684.248 1794.01,684.248 1794.57,684.248 1795.13,684.248 1795.69,684.248 1796.25,684.248 1796.8,684.248 1797.36,684.248 1797.92,684.248 1798.48,684.248 1799.04,684.248 1799.6,684.248 1800.16,684.248 1800.72,684.248 1801.28,684.248 1801.84,684.248 1802.4,684.248 1802.96,684.248 1803.52,684.248 1804.08,684.248 1804.63,684.248 1805.19,684.248 1805.75,684.248 1806.31,684.248 1806.87,684.248 1807.43,684.248 1807.99,684.248 1808.55,684.248 1809.11,684.248 1809.67,684.248 1810.23,684.248 1810.79,684.248 1811.35,684.248 1811.9,684.248 1812.46,684.248 1813.02,684.248 1813.58,684.248 1814.14,684.248 1814.7,684.248 1815.26,684.248 1815.82,684.248 1816.38,684.248 1816.94,684.248 1817.5,684.248 1818.06,684.248 1818.62,684.248 1819.18,684.248 1819.73,684.248 1820.29,684.248 1820.85,684.248 1821.41,684.248 1821.97,684.248 1822.53,684.248 1823.09,684.248 1823.65,684.248 1824.21,684.248 1824.77,684.248 1825.33,684.248 1825.89,684.248 1826.45,684.248 1827,684.248 1827.56,684.248 1828.12,684.248 1828.68,684.248 1829.24,684.248 1829.8,684.248 1830.36,684.248 1830.92,684.248 1831.48,684.248 1832.04,684.248 1832.6,684.248 1833.16,684.248 1833.72,684.248 1834.27,684.248 1834.83,684.248 1835.39,684.248 1835.95,684.248 1836.51,684.248 1837.07,684.248 1837.63,684.248 1838.19,684.248 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.037995189773361 ± 0.02537361155464714\nProjected Energy: -4.01842179880599 ± (0.008006700877139394, 0.008237291682535286)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.16723</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.4805e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.3374e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5268e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.927e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.213e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.4026e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321598\n -3.363124291613378\n -0.7590191922770906\n  0.1358418221962161\n  0.15789998694608087\n  0.8767114411781343\n  1.5305929970973322\n  1.583573261186741\n  3.0728703303258564\n  3.12567265395185\n  4.862107221562167\n  6.260694850380597\n  6.402671211183113\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087834\n 0.03307039977204201\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.DVecAsTable","page":"I/O","title":"Rimu.RimuIO.DVecAsTable","text":"struct DVecAsTable\n\nWrapper over the storage of a DVec that allows us to treat a DVec as a table from Tables.jl. Constructed with Tables.table(::DVec).\n\n\n\n\n\n","category":"type"},{"location":"rimuio.html#Rimu.RimuIO.PDVecAsTable","page":"I/O","title":"Rimu.RimuIO.PDVecAsTable","text":"struct PDVecAsTable\n\nWrapper over the storage of a PDVec that allows us to treat a PDVec as a table from Tables.jl. Constructed with Tables.table(::PDVec).\n\n\n\n\n\n","category":"type"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.load_state-Union{Tuple{D}, Tuple{Type{D}, Any}} where D","page":"I/O","title":"Rimu.RimuIO.load_state","text":"load_state(filename; kwargs...)\nload_state(PDVec, filename; kwargs...)\nload_state(DVec, filename; kwargs...)\n\nLoad the state saved in the Arrow file filename. kwargs are passed to the constructor of PDVec. Any metadata stored in the file will be parsed, evaluated and returned alongside the vector in a NamedTuple.\n\nSee also save_state.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_state-Tuple","page":"I/O","title":"Rimu.RimuIO.save_state","text":"save_state(filename, vector; io, kwargs...)\n\nSave PDVec or DVec vector to an arrow file filename.\n\nio determines the output stream to write progress to. Defaults to stderr when MPI is enabled and devnull otherwise.\n\nAll other kwargs are saved as strings to the arrow file and will be parsed back when the state is loaded.\n\nSee also load_state.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
