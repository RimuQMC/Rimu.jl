var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21383621256221677 ± 0.0014966919480472736\n   G2(1) = 0.9169446089868177 ± 0.0008207188664429005\n   G2(2) = 0.9808492075965394 ± 0.0006129863942920624\n   G2(3) = 0.9905761542710692 ± 0.0008889251068408373\n   G2(4) = 0.9808492075965394 ± 0.0006129863942920624\n   G2(5) = 0.9169446089868177 ± 0.0008207188664429005\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.005633180031828 ± 0.13165347118739573\n   Replica 2: -4.036340011054912 ± 0.13354282222342118\n   Replica 3: -4.041328209651937 ± 0.14488022348148805\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip870\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip870)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip871\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip870)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip872\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.88 2211.02,1261.88 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.92 2211.02,1003.92 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.971 2211.02,745.971 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.017 2211.02,488.017 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.064 2211.02,230.064 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.88 423.181,1261.88 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.92 423.181,1003.92 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.971 423.181,745.971 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.017 423.181,488.017 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.064 423.181,230.064 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M356.339 1247.68 Q352.728 1247.68 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.02 350.899 1272.58 Q352.728 1276.13 356.339 1276.13 Q359.973 1276.13 361.779 1272.58 Q363.608 1269.02 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.68 356.339 1247.68 M356.339 1243.97 Q362.149 1243.97 365.205 1248.58 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.64 365.205 1275.25 Q362.149 1279.83 356.339 1279.83 Q350.529 1279.83 347.45 1275.25 Q344.395 1270.64 344.395 1261.91 Q344.395 1253.16 347.45 1248.58 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M290.043 1017.27 L306.363 1017.27 L306.363 1021.2 L284.418 1021.2 L284.418 1017.27 Q287.08 1014.52 291.664 1009.89 Q296.27 1005.23 297.451 1003.89 Q299.696 1001.37 300.576 999.631 Q301.478 997.872 301.478 996.182 Q301.478 993.427 299.534 991.691 Q297.613 989.955 294.511 989.955 Q292.312 989.955 289.858 990.719 Q287.427 991.483 284.65 993.034 L284.65 988.312 Q287.474 987.177 289.927 986.599 Q292.381 986.02 294.418 986.02 Q299.789 986.02 302.983 988.705 Q306.177 991.39 306.177 995.881 Q306.177 998.011 305.367 999.932 Q304.58 1001.83 302.474 1004.42 Q301.895 1005.09 298.793 1008.31 Q295.691 1011.51 290.043 1017.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M316.224 986.645 L334.58 986.645 L334.58 990.58 L320.506 990.58 L320.506 999.052 Q321.524 998.705 322.543 998.543 Q323.562 998.358 324.58 998.358 Q330.367 998.358 333.747 1001.53 Q337.126 1004.7 337.126 1010.12 Q337.126 1015.7 333.654 1018.8 Q330.182 1021.88 323.862 1021.88 Q321.687 1021.88 319.418 1021.51 Q317.173 1021.14 314.765 1020.39 L314.765 1015.7 Q316.849 1016.83 319.071 1017.39 Q321.293 1017.94 323.77 1017.94 Q327.774 1017.94 330.112 1015.83 Q332.45 1013.73 332.45 1010.12 Q332.45 1006.51 330.112 1004.4 Q327.774 1002.29 323.77 1002.29 Q321.895 1002.29 320.02 1002.71 Q318.168 1003.13 316.224 1004.01 L316.224 986.645 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M356.339 989.724 Q352.728 989.724 350.899 993.288 Q349.094 996.83 349.094 1003.96 Q349.094 1011.07 350.899 1014.63 Q352.728 1018.17 356.339 1018.17 Q359.973 1018.17 361.779 1014.63 Q363.608 1011.07 363.608 1003.96 Q363.608 996.83 361.779 993.288 Q359.973 989.724 356.339 989.724 M356.339 986.02 Q362.149 986.02 365.205 990.626 Q368.284 995.21 368.284 1003.96 Q368.284 1012.69 365.205 1017.29 Q362.149 1021.88 356.339 1021.88 Q350.529 1021.88 347.45 1017.29 Q344.395 1012.69 344.395 1003.96 Q344.395 995.21 347.45 990.626 Q350.529 986.02 356.339 986.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M286.062 728.691 L304.418 728.691 L304.418 732.626 L290.344 732.626 L290.344 741.099 Q291.363 740.751 292.381 740.589 Q293.4 740.404 294.418 740.404 Q300.205 740.404 303.585 743.575 Q306.964 746.747 306.964 752.163 Q306.964 757.742 303.492 760.844 Q300.02 763.922 293.701 763.922 Q291.525 763.922 289.256 763.552 Q287.011 763.182 284.603 762.441 L284.603 757.742 Q286.687 758.876 288.909 759.432 Q291.131 759.987 293.608 759.987 Q297.613 759.987 299.951 757.881 Q302.288 755.774 302.288 752.163 Q302.288 748.552 299.951 746.446 Q297.613 744.339 293.608 744.339 Q291.733 744.339 289.858 744.756 Q288.006 745.173 286.062 746.052 L286.062 728.691 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M326.177 731.77 Q322.566 731.77 320.737 735.335 Q318.932 738.876 318.932 746.006 Q318.932 753.112 320.737 756.677 Q322.566 760.219 326.177 760.219 Q329.811 760.219 331.617 756.677 Q333.446 753.112 333.446 746.006 Q333.446 738.876 331.617 735.335 Q329.811 731.77 326.177 731.77 M326.177 728.066 Q331.987 728.066 335.043 732.673 Q338.122 737.256 338.122 746.006 Q338.122 754.733 335.043 759.339 Q331.987 763.922 326.177 763.922 Q320.367 763.922 317.288 759.339 Q314.233 754.733 314.233 746.006 Q314.233 737.256 317.288 732.673 Q320.367 728.066 326.177 728.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M356.339 731.77 Q352.728 731.77 350.899 735.335 Q349.094 738.876 349.094 746.006 Q349.094 753.112 350.899 756.677 Q352.728 760.219 356.339 760.219 Q359.973 760.219 361.779 756.677 Q363.608 753.112 363.608 746.006 Q363.608 738.876 361.779 735.335 Q359.973 731.77 356.339 731.77 M356.339 728.066 Q362.149 728.066 365.205 732.673 Q368.284 737.256 368.284 746.006 Q368.284 754.733 365.205 759.339 Q362.149 763.922 356.339 763.922 Q350.529 763.922 347.45 759.339 Q344.395 754.733 344.395 746.006 Q344.395 737.256 347.45 732.673 Q350.529 728.066 356.339 728.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M284.835 470.737 L307.057 470.737 L307.057 472.728 L294.511 505.297 L289.627 505.297 L301.432 474.673 L284.835 474.673 L284.835 470.737 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M316.224 470.737 L334.58 470.737 L334.58 474.673 L320.506 474.673 L320.506 483.145 Q321.524 482.798 322.543 482.636 Q323.562 482.45 324.58 482.45 Q330.367 482.45 333.747 485.622 Q337.126 488.793 337.126 494.21 Q337.126 499.788 333.654 502.89 Q330.182 505.969 323.862 505.969 Q321.687 505.969 319.418 505.598 Q317.173 505.228 314.765 504.487 L314.765 499.788 Q316.849 500.923 319.071 501.478 Q321.293 502.034 323.77 502.034 Q327.774 502.034 330.112 499.927 Q332.45 497.821 332.45 494.21 Q332.45 490.599 330.112 488.492 Q327.774 486.386 323.77 486.386 Q321.895 486.386 320.02 486.802 Q318.168 487.219 316.224 488.099 L316.224 470.737 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M356.339 473.816 Q352.728 473.816 350.899 477.381 Q349.094 480.923 349.094 488.052 Q349.094 495.159 350.899 498.723 Q352.728 502.265 356.339 502.265 Q359.973 502.265 361.779 498.723 Q363.608 495.159 363.608 488.052 Q363.608 480.923 361.779 477.381 Q359.973 473.816 356.339 473.816 M356.339 470.113 Q362.149 470.113 365.205 474.719 Q368.284 479.302 368.284 488.052 Q368.284 496.779 365.205 501.385 Q362.149 505.969 356.339 505.969 Q350.529 505.969 347.45 501.385 Q344.395 496.779 344.395 488.052 Q344.395 479.302 347.45 474.719 Q350.529 470.113 356.339 470.113 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M256.664 243.409 L264.303 243.409 L264.303 217.043 L255.992 218.71 L255.992 214.45 L264.256 212.784 L268.932 212.784 L268.932 243.409 L276.571 243.409 L276.571 247.344 L256.664 247.344 L256.664 243.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M296.015 215.863 Q292.404 215.863 290.576 219.427 Q288.77 222.969 288.77 230.099 Q288.77 237.205 290.576 240.77 Q292.404 244.311 296.015 244.311 Q299.65 244.311 301.455 240.77 Q303.284 237.205 303.284 230.099 Q303.284 222.969 301.455 219.427 Q299.65 215.863 296.015 215.863 M296.015 212.159 Q301.826 212.159 304.881 216.765 Q307.96 221.349 307.96 230.099 Q307.96 238.825 304.881 243.432 Q301.826 248.015 296.015 248.015 Q290.205 248.015 287.127 243.432 Q284.071 238.825 284.071 230.099 Q284.071 221.349 287.127 216.765 Q290.205 212.159 296.015 212.159 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M326.177 215.863 Q322.566 215.863 320.737 219.427 Q318.932 222.969 318.932 230.099 Q318.932 237.205 320.737 240.77 Q322.566 244.311 326.177 244.311 Q329.811 244.311 331.617 240.77 Q333.446 237.205 333.446 230.099 Q333.446 222.969 331.617 219.427 Q329.811 215.863 326.177 215.863 M326.177 212.159 Q331.987 212.159 335.043 216.765 Q338.122 221.349 338.122 230.099 Q338.122 238.825 335.043 243.432 Q331.987 248.015 326.177 248.015 Q320.367 248.015 317.288 243.432 Q314.233 238.825 314.233 230.099 Q314.233 221.349 317.288 216.765 Q320.367 212.159 326.177 212.159 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M356.339 215.863 Q352.728 215.863 350.899 219.427 Q349.094 222.969 349.094 230.099 Q349.094 237.205 350.899 240.77 Q352.728 244.311 356.339 244.311 Q359.973 244.311 361.779 240.77 Q363.608 237.205 363.608 230.099 Q363.608 222.969 361.779 219.427 Q359.973 215.863 356.339 215.863 M356.339 212.159 Q362.149 212.159 365.205 216.765 Q368.284 221.349 368.284 230.099 Q368.284 238.825 365.205 243.432 Q362.149 248.015 356.339 248.015 Q350.529 248.015 347.45 243.432 Q344.395 238.825 344.395 230.099 Q344.395 221.349 347.45 216.765 Q350.529 212.159 356.339 212.159 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip872)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.064 4017.76,230.064 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.52 456.554,1250.43 457.123,1250.29 457.691,1250.03 458.259,1248.7 458.828,1248.34 459.396,1247.94 459.964,1247.46 460.533,1246.93 461.101,1246.3 461.669,1245.59 462.238,1244.8 462.806,1243.92 463.375,1242.96 463.943,1241.9 464.511,1240.74 465.08,1238.45 465.648,1237.09 466.216,1235.61 466.785,1234.01 467.353,1232.27 467.921,1229.38 468.49,1227.38 469.058,1224.2 469.626,1221.92 470.195,1218.45 470.763,1213.79 471.331,1209.94 471.9,1205.96 472.468,1201.79 473.036,1197.53 473.605,1194.11 474.173,1190.53 474.741,1186.73 475.31,1182.68 475.878,1176.45 476.446,1172 477.015,1167.35 477.583,1162.48 478.152,1157.35 478.72,1150.98 479.288,1144.41 479.857,1135.59 480.425,1129.54 480.993,1123.29 481.562,1116.85 482.13,1110.06 482.698,1102.1 483.267,1094.93 483.835,1087.61 484.403,1079.07 484.972,1069.16 485.54,1061.27 486.108,1052.02 486.677,1043.79 487.245,1034.41 487.813,1025.84 488.382,1016 488.95,1007.04 489.518,998.065 490.087,988.941 490.655,978.534 491.224,968.058 491.792,956.548 492.36,945.989 492.929,931.191 493.497,920.637 494.065,910.013 494.634,899.503 495.202,888.808 495.77,879.181 496.339,866.364 496.907,855.777 497.475,846.195 498.044,832.441 498.612,823.039 499.18,808.413 499.749,797.957 500.317,788.64 500.885,778.323 501.454,763.786 502.022,752.585 502.59,742.531 503.159,731.525 503.727,722.596 504.295,710.855 504.864,696.887 505.432,687.449 506.001,678.163 506.569,667.818 507.137,658.642 507.706,649.537 508.274,640.497 508.842,632.675 509.411,623.833 509.979,615.258 510.547,604.654 511.116,596.208 511.684,588.744 512.252,581.442 512.821,573.42 513.389,564.447 513.957,555.696 514.526,549.127 515.094,540.727 515.662,532.279 516.231,525.316 516.799,518.155 517.367,512.426 517.936,506.647 518.504,498.958 519.072,490.535 519.641,484.211 520.209,479.29 520.778,472.265 521.346,467.404 521.914,462.498 522.483,456.854 523.051,452.183 523.619,447.703 524.188,442.31 524.756,437.858 525.324,433.581 525.893,428.094 526.461,420.833 527.029,414.914 527.598,410.25 528.166,404.539 528.734,401.194 529.303,395.634 529.871,390.366 530.439,387.32 531.008,383.1 531.576,380.132 532.144,377.258 532.713,374.441 533.281,369.648 533.85,364.887 534.418,364.466 534.986,359.904 535.555,356.668 536.123,353.011 536.691,350.885 537.26,348.707 537.828,345.578 538.396,343.342 538.965,339.204 539.533,337.222 540.101,334.044 540.67,331.052 541.238,327.483 541.806,324.856 542.375,323.341 542.943,320.888 543.511,319.466 544.08,318.081 544.648,316.608 545.216,314.124 545.785,311.723 546.353,309.331 546.921,306.065 547.49,303.98 548.058,302.973 548.627,303.082 549.195,301.764 549.763,298.721 550.332,295.618 550.9,294.877 551.468,293.78 552.037,291.976 552.605,291.138 553.173,290.145 553.742,288.091 554.31,287.435 554.878,283.651 555.447,280.22 556.015,278.886 556.583,278.69 557.152,277.361 557.72,274.914 558.288,273.513 558.857,272.477 559.425,271.586 559.993,270.537 560.562,270.506 561.13,268.365 561.698,264.418 562.267,265.56 562.835,264.571 563.404,262.634 563.972,261.847 564.54,263.049 565.109,262.236 565.677,262.181 566.245,263.182 566.814,264.243 567.382,264.124 567.95,264.236 568.519,264.083 569.087,263.845 569.655,262.603 570.224,261.471 570.792,259.978 571.36,258.168 571.929,255.21 572.497,255.468 573.065,254.598 573.634,254.933 574.202,256.249 574.77,254.29 575.339,254.415 575.907,254.553 576.476,256.901 577.044,258.742 577.612,258.572 578.181,259.484 578.749,258.293 579.317,254.976 579.886,255.025 580.454,251.904 581.022,250.874 581.591,250.046 582.159,249.154 582.727,250.616 583.296,249.626 583.864,250.723 584.432,250.7 585.001,252.795 585.569,249.748 586.137,248.834 586.706,246.081 587.274,245.176 587.842,244.456 588.411,244.861 588.979,245.035 589.547,246.548 590.116,247.072 590.684,247.47 591.253,245.483 591.821,244.826 592.389,247.094 592.958,247.13 593.526,246.47 594.094,245.502 594.663,245.595 595.231,245.585 595.799,243.759 596.368,247.07 596.936,247.181 597.504,249.436 598.073,247.226 598.641,248.312 599.209,245.949 599.778,246.16 600.346,246.179 600.914,247.101 601.483,247.314 602.051,246.228 602.619,244.025 603.188,244.017 603.756,246.303 604.325,244.246 604.893,242.234 605.461,242.588 606.03,242.806 606.598,242.972 607.166,243.192 607.735,244.433 608.303,242.529 608.871,244.833 609.44,242.771 610.008,244.112 610.576,242.023 611.145,240.397 611.713,239.501 612.281,240.972 612.85,241.934 613.418,242.132 613.986,242.134 614.555,243.082 615.123,243.205 615.691,241.195 616.26,242.302 616.828,242.134 617.396,241.093 617.965,240.009 618.533,240.17 619.102,240.2 619.67,240.272 620.238,240.284 620.807,240.463 621.375,240.648 621.943,239.018 622.512,239.176 623.08,239.581 623.648,239.71 624.217,237.651 624.785,236.858 625.353,235.267 625.922,234.574 626.49,235.21 627.058,233.627 627.627,233.057 628.195,233.717 628.763,238.306 629.332,238.611 629.9,235.903 630.468,235.113 631.037,237.465 631.605,236.73 632.173,233.816 632.742,236.16 633.31,237.457 633.879,237.634 634.447,238.907 635.015,239.955 635.584,239.862 636.152,241.065 636.72,242.147 637.289,242.879 637.857,240.747 638.425,239.629 638.994,239.191 639.562,238.128 640.13,238.277 640.699,237.424 641.267,235.51 641.835,236.637 642.404,236.784 642.972,237.031 643.54,237.088 644.109,238.199 644.677,236.104 645.245,232.21 645.814,235.886 646.382,236.045 646.951,236.115 647.519,234.117 648.087,237.354 648.656,237.275 649.224,237.443 649.792,236.4 650.361,238.452 650.929,237.347 651.497,236.167 652.066,238.306 652.634,236.096 653.202,236.086 653.771,236.129 654.339,237.195 654.907,240.306 655.476,238.117 656.044,239.039 656.612,239.941 657.181,238.716 657.749,237.545 658.317,237.422 658.886,238.444 659.454,236.088 660.022,236.253 660.591,236.146 661.159,239.101 661.728,237.829 662.296,235.698 662.864,234.465 663.433,234.65 664.001,234.715 664.569,233.756 665.138,231.945 665.706,232.389 666.274,232.924 666.843,231.158 667.411,232.531 667.979,231.679 668.548,233.145 669.116,232.199 669.684,230.291 670.253,230.703 670.821,230.013 671.389,232.505 671.958,230.629 672.526,233.163 673.094,232.381 673.663,230.865 674.231,231.205 674.799,232.684 675.368,233.817 675.936,232.062 676.505,232.401 677.073,232.609 677.641,228.805 678.21,230.42 678.778,230.958 679.346,231.187 679.915,231.885 680.483,232.503 681.051,233.815 681.62,233.063 682.188,235.291 682.756,235.515 683.325,234.499 683.893,234.462 684.461,237.581 685.03,238.343 685.598,238.257 686.166,239.022 686.735,238.857 687.303,238.712 687.871,238.767 688.44,239.645 689.008,239.321 689.577,237.829 690.145,237 690.713,236.696 691.282,234.291 691.85,233.144 692.418,233.067 692.987,233.326 693.555,232.414 694.123,234.652 694.692,233.818 695.26,233.943 695.828,232.918 696.397,232.013 696.965,231.041 697.533,231.117 698.102,232.371 698.67,232.532 699.238,231.765 699.807,232.007 700.375,232.274 700.943,230.47 701.512,229.538 702.08,232.912 702.648,230.908 703.217,231.185 703.785,232.597 704.354,231.474 704.922,231.601 705.49,231.633 706.059,235.876 706.627,234.796 707.195,235.652 707.764,235.433 708.332,234.261 708.9,233.044 709.469,235.324 710.037,233.376 710.605,233.627 711.174,235.611 711.742,236.449 712.31,235.072 712.879,236.228 713.447,235.069 714.015,234.987 714.584,234.976 715.152,234.984 715.72,237.069 716.289,236.539 716.857,236.392 717.425,234.021 717.994,233.885 718.562,234.042 719.131,235.13 719.699,235.994 720.267,236.767 720.836,237.435 721.404,233.973 721.972,234.674 722.541,235.525 723.109,235.374 723.677,234.21 724.246,235.106 724.814,235.982 725.382,235.671 725.951,235.248 726.519,236.055 727.087,236.683 727.656,236.205 728.224,235.053 728.792,233.771 729.361,232.584 729.929,233.513 730.497,232.221 731.066,235.329 731.634,237.101 732.203,237.545 732.771,237.09 733.339,236.555 733.908,236.169 734.476,236.77 735.044,236.152 735.613,234.727 736.181,233.371 736.749,232.406 737.318,231.367 737.886,231.513 738.454,230.321 739.023,228.339 739.591,228.441 740.159,227.824 740.728,227.083 741.296,226.511 741.864,224.783 742.433,225.268 743.001,224.6 743.569,224.107 744.138,223.595 744.706,225.132 745.274,223.444 745.843,226.168 746.411,225.461 746.98,227.854 747.548,227.14 748.116,227.791 748.685,228.073 749.253,227.335 749.821,226.65 750.39,227.962 750.958,232.48 751.526,234.438 752.095,234.401 752.663,234.246 753.231,233.067 753.8,231.017 754.368,231.116 754.936,231.412 755.505,233.506 756.073,232.243 756.641,231.083 757.21,232.448 757.778,232.557 758.346,233.809 758.915,233.601 759.483,233.537 760.052,232.317 760.62,234.352 761.188,234.112 761.757,235.08 762.325,234.757 762.893,233.599 763.462,230.498 764.03,231.629 764.598,233.495 765.167,234.532 765.735,233.247 766.303,232 766.872,230.117 767.44,228.965 768.008,228.217 768.577,228.859 769.145,229.043 769.713,229.272 770.282,227.264 770.85,228.388 771.418,228.535 771.987,229.91 772.555,229.927 773.123,230.184 773.692,232.215 774.26,230.128 774.829,231.343 775.397,231.378 775.965,230.597 776.534,230.771 777.102,231.059 777.67,230.009 778.239,229.161 778.807,230.323 779.375,232.358 779.944,231.208 780.512,231.235 781.08,231.333 781.649,230.491 782.217,229.751 782.785,230.072 783.354,228.074 783.922,226.273 784.49,227.831 785.059,229.036 785.627,229.318 786.195,233.512 786.764,233.387 787.332,234.419 787.9,233.424 788.469,233.081 789.037,232.141 789.606,233.018 790.174,232.86 790.742,234.064 791.311,233.875 791.879,233.651 792.447,233.484 793.016,233.226 793.584,233.166 794.152,233.034 794.721,231.749 795.289,233.546 795.857,232.392 796.426,230.323 796.994,232.581 797.562,233.458 798.131,234.426 798.699,234.284 799.267,232.28 799.836,233.193 800.404,230.042 800.972,229.032 801.541,227.194 802.109,226.699 802.678,227.27 803.246,228.579 803.814,228.764 804.383,229.058 804.951,228.305 805.519,228.574 806.088,228.835 806.656,226.133 807.224,226.224 807.793,224.139 808.361,225.829 808.929,228.514 809.498,228.903 810.066,229.154 810.634,230.445 811.203,230.67 811.771,228.656 812.339,230.862 812.908,229.841 813.476,231.263 814.044,230.38 814.613,231.611 815.181,231.462 815.749,231.57 816.318,230.724 816.886,230.86 817.455,230.703 818.023,231.829 818.591,231.843 819.16,230.717 819.728,230.589 820.296,231.643 820.865,230.602 821.433,231.853 822.001,232.964 822.57,233.773 823.138,234.58 823.706,234.237 824.275,231.801 824.843,232.563 825.411,229.344 825.98,228.186 826.548,225.227 827.116,228.864 827.685,230.082 828.253,229.288 828.821,230.487 829.39,230.641 829.958,232.808 830.526,233.826 831.095,234.602 831.663,236.5 832.232,235.922 832.8,234.499 833.368,233.328 833.937,233.28 834.505,232.061 835.073,232.237 835.642,233.93 836.21,234.901 836.778,236.764 837.347,235.347 837.915,232.953 838.483,231.983 839.052,230.84 839.62,230.848 840.188,229.815 840.757,228.887 841.325,228.943 841.893,227.065 842.462,225.296 843.03,225.76 843.598,226.334 844.167,225.585 844.735,225.827 845.304,226.488 845.872,226.833 846.44,229.412 847.009,231.792 847.577,232.842 848.145,231.536 848.714,231.489 849.282,231.4 849.85,231.475 850.419,231.622 850.987,231.55 851.555,231.669 852.124,230.561 852.692,229.634 853.26,228.98 853.829,230.359 854.397,230.494 854.965,231.501 855.534,231.487 856.102,232.576 856.67,232.517 857.239,232.397 857.807,232.452 858.375,231.529 858.944,233.424 859.512,233.214 860.081,235.142 860.649,234.912 861.217,235.655 861.786,235.382 862.354,234.07 862.922,233.917 863.491,233.56 864.059,233.598 864.627,232.441 865.196,231.221 865.764,230.222 866.332,231.425 866.901,229.395 867.469,230.476 868.037,228.481 868.606,227.567 869.174,227.773 869.742,228.225 870.311,231.493 870.879,232.442 871.447,232.318 872.016,231.228 872.584,234.202 873.152,232.873 873.721,231.774 874.289,232.657 874.858,233.607 875.426,231.25 875.994,231.058 876.563,230.975 877.131,231.939 877.699,232.712 878.268,234.676 878.836,233.192 879.404,235.047 879.973,234.722 880.541,234.171 881.109,233.859 881.678,231.475 882.246,231.552 882.814,231.524 883.383,230.383 883.951,231.547 884.519,233.364 885.088,233.23 885.656,230.945 886.224,229.784 886.793,230.847 887.361,229.739 887.93,227.708 888.498,227.804 889.066,230.017 889.635,231.068 890.203,229.823 890.771,229.798 891.34,229.837 891.908,230.909 892.476,231.625 893.045,231.428 893.613,231.404 894.181,231.532 894.75,231.347 895.318,231.279 895.886,231.091 896.455,231.016 897.023,231.044 897.591,230.006 898.16,230.965 898.728,232.129 899.296,231.997 899.865,231.747 900.433,229.724 901.001,230.75 901.57,230.624 902.138,230.5 902.707,230.347 903.275,231.431 903.843,229.088 904.412,228.184 904.98,226.045 905.548,227.512 906.117,227.667 906.685,227.819 907.253,229.035 907.822,227.154 908.39,228.372 908.958,227.554 909.527,228.905 910.095,228.705 910.663,226.673 911.232,227.034 911.8,227.295 912.368,226.426 912.937,226.603 913.505,227.825 914.073,226.852 914.642,228.212 915.21,224.227 915.779,223.657 916.347,226.329 916.915,227.72 917.484,225.853 918.052,227.291 918.62,228.566 919.189,226.846 919.757,227.123 920.325,227.249 920.894,228.629 921.462,229.814 922.03,230.752 922.599,230.62 923.167,231.939 923.735,232.011 924.304,232.857 924.872,233.754 925.44,232.552 926.009,234.398 926.577,234.158 927.145,234.688 927.714,235.542 928.282,232.305 928.85,232.173 929.419,231.873 929.987,231.719 930.556,232.46 931.124,230.212 931.692,229.151 932.261,231.347 932.829,231.292 933.397,232.252 933.966,233.347 934.534,231.134 935.102,229.325 935.671,232.355 936.239,231.039 936.807,231.305 937.376,230.049 937.944,229.096 938.512,228.145 939.081,228.219 939.649,227.371 940.217,226.749 940.786,226.999 941.354,228.275 941.922,228.356 942.491,227.316 943.059,227.603 943.627,228.41 944.196,226.281 944.764,228.672 945.333,230.978 945.901,231.144 946.469,230.094 947.038,228.282 947.606,230.437 948.174,230.554 948.743,231.643 949.311,231.362 949.879,229.435 950.448,226.42 951.016,227.755 951.584,228.079 952.153,226.354 952.721,225.827 953.289,229.35 953.858,226.43 954.426,227.827 954.994,226.994 955.563,227.275 956.131,227.495 956.699,227.648 957.268,228.891 957.836,228.083 958.405,228.207 958.973,227.692 959.541,227.148 960.11,227.446 960.678,227.798 961.246,228.117 961.815,229.46 962.383,230.602 962.951,229.65 963.52,230.002 964.088,231.27 964.656,235.46 965.225,233.181 965.793,232.236 966.361,232.178 966.93,232.285 967.498,229.135 968.066,227.409 968.635,226.47 969.203,226.708 969.771,227.056 970.34,227.298 970.908,227.471 971.476,226.924 972.045,228.369 972.613,227.724 973.182,227.954 973.75,228.126 974.318,229.606 974.887,228.773 975.455,231.994 976.023,233.005 976.592,232.945 977.16,230.741 977.728,229.75 978.297,232.116 978.865,231.058 979.433,232.093 980.002,231.218 980.57,233.396 981.138,231.166 981.707,231.191 982.275,230.16 982.843,230.079 983.412,232.195 983.98,233.144 984.548,231.941 985.117,234.005 985.685,233.714 986.253,232.573 986.822,232.485 987.39,232.516 987.959,231.539 988.527,230.462 989.095,231.767 989.664,230.829 990.232,233.104 990.8,235.1 991.369,234.744 991.937,234.568 992.505,234.282 993.074,234.245 993.642,234.794 994.21,232.556 994.779,232.258 995.347,233.254 995.915,234.213 996.484,232.666 997.052,232.452 997.62,232.475 998.189,232.247 998.757,232.18 999.325,233.963 999.894,234.64 1000.46,233.384 1001.03,235.285 1001.6,230.997 1002.17,232.137 1002.74,231.939 1003.3,230.163 1003.87,230.986 1004.44,229.761 1005.01,230.84 1005.58,230.773 1006.15,228.673 1006.71,228.75 1007.28,229.893 1007.85,230.89 1008.42,230.794 1008.99,228.936 1009.56,227.927 1010.12,228.263 1010.69,228.56 1011.26,229.729 1011.83,231.825 1012.4,230.556 1012.97,231.501 1013.53,231.364 1014.1,232.217 1014.67,232.108 1015.24,230.968 1015.81,231.731 1016.38,231.682 1016.94,230.73 1017.51,229.537 1018.08,229.635 1018.65,229.879 1019.22,226.874 1019.79,226.154 1020.35,226.565 1020.92,226.11 1021.49,225.136 1022.06,226.732 1022.63,227.962 1023.2,229.521 1023.76,231.801 1024.33,231.855 1024.9,230.819 1025.47,230.746 1026.04,230.816 1026.61,230.774 1027.17,232.774 1027.74,233.58 1028.31,234.666 1028.88,233.177 1029.45,234.201 1030.02,233.886 1030.58,233.604 1031.15,235.362 1031.72,235.795 1032.29,234.396 1032.86,235.244 1033.43,235.802 1033.99,233.329 1034.56,233.149 1035.13,234.098 1035.7,232.754 1036.27,230.732 1036.84,228.605 1037.4,229.813 1037.97,229.66 1038.54,229.685 1039.11,227.741 1039.68,226.531 1040.25,226.763 1040.81,226.895 1041.38,227.062 1041.95,227.317 1042.52,226.477 1043.09,226.884 1043.66,227.126 1044.22,227.469 1044.79,227.688 1045.36,228.103 1045.93,229.172 1046.5,231.171 1047.07,230.224 1047.63,230.387 1048.2,231.555 1048.77,230.252 1049.34,230.231 1049.91,227.166 1050.48,225.295 1051.05,226.75 1051.61,225.92 1052.18,228.333 1052.75,230.562 1053.32,230.614 1053.89,228.729 1054.46,229.975 1055.02,234.219 1055.59,235.015 1056.16,234.318 1056.73,235.24 1057.3,235.85 1057.87,233.359 1058.43,234.025 1059,232.786 1059.57,231.575 1060.14,231.353 1060.71,233.146 1061.28,233.086 1061.84,231.73 1062.41,232.74 1062.98,233.52 1063.55,233.289 1064.12,233.142 1064.69,234.862 1065.25,233.334 1065.82,230.879 1066.39,228.517 1066.96,227.548 1067.53,225.706 1068.1,222.765 1068.66,223.466 1069.23,223.998 1069.8,225.46 1070.37,225.766 1070.94,224.082 1071.51,225.452 1072.07,225.874 1072.64,226.095 1073.21,224.64 1073.78,224.932 1074.35,225.163 1074.92,225.379 1075.48,225.778 1076.05,225.98 1076.62,227.176 1077.19,226.365 1077.76,226.821 1078.33,225.964 1078.89,226.235 1079.46,227.683 1080.03,227.574 1080.6,227.924 1081.17,229.257 1081.74,229.176 1082.3,231.201 1082.87,231.026 1083.44,232.86 1084.01,232.672 1084.58,232.586 1085.15,233.529 1085.71,235.475 1086.28,236.174 1086.85,233.663 1087.42,235.089 1087.99,234.885 1088.56,234.728 1089.12,234.083 1089.69,233.914 1090.26,235.548 1090.83,236.406 1091.4,236.897 1091.97,235.325 1092.53,233.881 1093.1,233.758 1093.67,235.674 1094.24,236.997 1094.81,236.424 1095.38,237.005 1095.94,237.604 1096.51,233.89 1097.08,232.55 1097.65,233.492 1098.22,232.018 1098.79,231.758 1099.35,231.602 1099.92,231.409 1100.49,230.957 1101.06,231.824 1101.63,233.624 1102.2,231.212 1102.76,229.949 1103.33,226.692 1103.9,226.965 1104.47,227.064 1105.04,227.251 1105.61,227.18 1106.17,226.396 1106.74,225.593 1107.31,224.677 1107.88,226.065 1108.45,227.473 1109.02,227.771 1109.58,229.969 1110.15,229.804 1110.72,230.744 1111.29,228.527 1111.86,229.92 1112.43,229.073 1112.99,229.15 1113.56,230.453 1114.13,230.064 1114.7,230.039 1115.27,231.176 1115.84,229.973 1116.4,228.588 1116.97,228.817 1117.54,230.345 1118.11,230.332 1118.68,229.149 1119.25,227.085 1119.81,227.198 1120.38,226.379 1120.95,227.885 1121.52,229.061 1122.09,230.063 1122.66,231.037 1123.23,229.836 1123.79,228.956 1124.36,229.17 1124.93,229.21 1125.5,231.47 1126.07,231.327 1126.64,232.42 1127.2,231.074 1127.77,230.056 1128.34,231.062 1128.91,231.957 1129.48,231.917 1130.05,232.642 1130.61,231.37 1131.18,231.205 1131.75,231.306 1132.32,232.072 1132.89,230.703 1133.46,230.413 1134.02,231.501 1134.59,229.632 1135.16,230.667 1135.73,232.772 1136.3,234.551 1136.87,234.244 1137.43,234.985 1138,234.749 1138.57,234.464 1139.14,232.021 1139.71,230.65 1140.28,230.531 1140.84,228.423 1141.41,228.577 1141.98,228.547 1142.55,228.491 1143.12,228.668 1143.69,231.672 1144.25,229.418 1144.82,228.318 1145.39,226.264 1145.96,228.358 1146.53,230.437 1147.1,229.643 1147.66,229.634 1148.23,228.498 1148.8,228.802 1149.37,228.056 1149.94,227.023 1150.51,227.216 1151.07,228.237 1151.64,226.431 1152.21,225.867 1152.78,226.343 1153.35,225.504 1153.92,224.835 1154.48,225.075 1155.05,225.386 1155.62,225.781 1156.19,226.039 1156.76,226.457 1157.33,225.562 1157.89,225.918 1158.46,225.109 1159.03,225.326 1159.6,228.781 1160.17,229.885 1160.74,228.807 1161.3,227.805 1161.87,230.375 1162.44,232.324 1163.01,230.372 1163.58,231.361 1164.15,234.351 1164.71,236.071 1165.28,233.642 1165.85,235.307 1166.42,235.08 1166.99,233.673 1167.56,235.36 1168.12,234.97 1168.69,231.928 1169.26,229.596 1169.83,231.61 1170.4,231.349 1170.97,231.171 1171.53,229.118 1172.1,230.228 1172.67,227.039 1173.24,226.148 1173.81,226.432 1174.38,228.156 1174.94,228.475 1175.51,226.42 1176.08,225.514 1176.65,224.703 1177.22,225.108 1177.79,225.392 1178.35,224.751 1178.92,227.079 1179.49,228.342 1180.06,227.656 1180.63,227.932 1181.2,229.302 1181.76,231.71 1182.33,230.881 1182.9,230.683 1183.47,230.787 1184.04,230.662 1184.61,228.613 1185.17,227.809 1185.74,226.141 1186.31,227.621 1186.88,228.928 1187.45,229.946 1188.02,226.942 1188.58,226.276 1189.15,226.503 1189.72,225.642 1190.29,227.031 1190.86,227.485 1191.43,227.754 1192,229.035 1192.56,228.192 1193.13,227.413 1193.7,229.895 1194.27,229.005 1194.84,228.023 1195.41,228.404 1195.97,231.763 1196.54,232.054 1197.11,230.027 1197.68,233.267 1198.25,235.223 1198.82,236.042 1199.38,236.758 1199.95,237.402 1200.52,236.931 1201.09,234.648 1201.66,232.248 1202.23,232.99 1202.79,231.73 1203.36,231.619 1203.93,232.453 1204.5,232.37 1205.07,231.36 1205.64,231.148 1206.2,230.131 1206.77,231.235 1207.34,231.179 1207.91,233.47 1208.48,235.532 1209.05,236.193 1209.61,236.812 1210.18,238.431 1210.75,236.949 1211.32,237.397 1211.89,237.902 1212.46,237.538 1213.02,235.931 1213.59,236.527 1214.16,235.87 1214.73,236.121 1215.3,236.932 1215.87,235.302 1216.43,236.027 1217,236.681 1217.57,237.047 1218.14,235.515 1218.71,232.944 1219.28,230.614 1219.84,231.683 1220.41,233.385 1220.98,235.2 1221.55,233.828 1222.12,232.252 1222.69,233.96 1223.25,232.567 1223.82,233.203 1224.39,231.955 1224.96,230.765 1225.53,231.721 1226.1,231.458 1226.66,233.205 1227.23,231.874 1227.8,227.521 1228.37,226.519 1228.94,227.569 1229.51,225.5 1230.07,226.609 1230.64,227.825 1231.21,227.999 1231.78,229.004 1232.35,227.893 1232.92,227.982 1233.48,227.726 1234.05,228.97 1234.62,227.96 1235.19,228.16 1235.76,228.214 1236.33,227.154 1236.89,227.154 1237.46,228.204 1238.03,226.141 1238.6,225.307 1239.17,225.59 1239.74,227.967 1240.3,226.927 1240.87,227.266 1241.44,226.516 1242.01,229.741 1242.58,228.502 1243.15,230.595 1243.71,229.212 1244.28,227.085 1244.85,227.002 1245.42,224.983 1245.99,225.035 1246.56,223.36 1247.12,223.838 1247.69,225.259 1248.26,226.473 1248.83,225.524 1249.4,225.686 1249.97,228.098 1250.53,228.248 1251.1,227.14 1251.67,228.459 1252.24,227.607 1252.81,225.728 1253.38,226.891 1253.94,228.3 1254.51,227.292 1255.08,228.535 1255.65,227.707 1256.22,227.739 1256.79,227.233 1257.35,227.48 1257.92,228.582 1258.49,225.336 1259.06,226.932 1259.63,227.348 1260.2,227.904 1260.76,227.182 1261.33,227.517 1261.9,226.601 1262.47,223.834 1263.04,225.686 1263.61,223.999 1264.18,226.7 1264.74,229.14 1265.31,229.291 1265.88,230.583 1266.45,231.769 1267.02,232.66 1267.59,232.693 1268.15,232.883 1268.72,233.849 1269.29,233.492 1269.86,231.088 1270.43,232.002 1271,230.954 1271.56,228.899 1272.13,226.905 1272.7,226.974 1273.27,232.45 1273.84,233.25 1274.41,231.183 1274.97,228.107 1275.54,229.334 1276.11,230.467 1276.68,230.464 1277.25,233.415 1277.82,235.394 1278.38,235.015 1278.95,234.724 1279.52,234.311 1280.09,234.171 1280.66,234.715 1281.23,232.501 1281.79,232.206 1282.36,231.008 1282.93,228.956 1283.5,226.947 1284.07,226.147 1284.64,226.414 1285.2,224.555 1285.77,222.881 1286.34,220.492 1286.91,220.452 1287.48,222.954 1288.05,222.426 1288.61,224.052 1289.18,221.738 1289.75,221.489 1290.32,221.431 1290.89,223.233 1291.46,223.927 1292.02,225.607 1292.59,228.272 1293.16,228.673 1293.73,230.073 1294.3,228.961 1294.87,232.385 1295.43,234.345 1296,233.972 1296.57,232.776 1297.14,232.618 1297.71,231.562 1298.28,233.738 1298.84,232.932 1299.41,232.573 1299.98,232.286 1300.55,232.1 1301.12,231.05 1301.69,232.042 1302.25,231.047 1302.82,231.004 1303.39,232.108 1303.96,231.202 1304.53,233.142 1305.1,233.186 1305.66,234.006 1306.23,233.767 1306.8,233.536 1307.37,233.46 1307.94,236.543 1308.51,236.202 1309.07,234.714 1309.64,233.536 1310.21,233.317 1310.78,231.065 1311.35,232.06 1311.92,231.021 1312.48,230.952 1313.05,230.905 1313.62,230.711 1314.19,231.574 1314.76,235.889 1315.33,236.327 1315.89,235.081 1316.46,233.823 1317.03,233.507 1317.6,233.22 1318.17,233.181 1318.74,235.18 1319.3,236.917 1319.87,236.393 1320.44,237.092 1321.01,236.83 1321.58,234.169 1322.15,232.862 1322.71,232.621 1323.28,234.451 1323.85,233.07 1324.42,233.758 1324.99,233.389 1325.56,233.088 1326.12,232.701 1326.69,231.51 1327.26,228.201 1327.83,227.243 1328.4,227.464 1328.97,228.627 1329.53,228.589 1330.1,227.678 1330.67,229.094 1331.24,230.144 1331.81,225.047 1332.38,225.523 1332.94,225.845 1333.51,225.988 1334.08,228.379 1334.65,228.467 1335.22,229.763 1335.79,231.145 1336.36,230.176 1336.92,232.357 1337.49,232.189 1338.06,234.078 1338.63,234.966 1339.2,231.684 1339.77,232.487 1340.33,230.269 1340.9,228.179 1341.47,227.305 1342.04,227.506 1342.61,227.807 1343.18,227.981 1343.74,227.881 1344.31,231.313 1344.88,230.423 1345.45,231.577 1346.02,232.444 1346.59,231.271 1347.15,230.978 1347.72,229.985 1348.29,228.967 1348.86,230.023 1349.43,229.963 1350,231.188 1350.56,229.226 1351.13,229.213 1351.7,228.278 1352.27,229.445 1352.84,224.043 1353.41,221.313 1353.97,224.186 1354.54,225.663 1355.11,223.026 1355.68,224.514 1356.25,223.756 1356.82,224.273 1357.38,224.531 1357.95,225.923 1358.52,226.239 1359.09,227.602 1359.66,230.892 1360.23,230.836 1360.79,230.923 1361.36,230.886 1361.93,231.841 1362.5,232.858 1363.07,232.73 1363.64,234.556 1364.2,235.358 1364.77,231.027 1365.34,230.757 1365.91,229.799 1366.48,231.899 1367.05,231.729 1367.61,231.452 1368.18,233.467 1368.75,232.29 1369.32,232.175 1369.89,232.805 1370.46,233.801 1371.02,232.414 1371.59,234.364 1372.16,234.063 1372.73,233.729 1373.3,233.322 1373.87,233.916 1374.43,232.734 1375,234.51 1375.57,233.956 1376.14,234.805 1376.71,233.516 1377.28,234.179 1377.84,232.725 1378.41,229.25 1378.98,230.21 1379.55,230.174 1380.12,229.115 1380.69,230.322 1381.25,229.485 1381.82,228.478 1382.39,227.639 1382.96,227.669 1383.53,227.9 1384.1,228.725 1384.66,229.732 1385.23,230.654 1385.8,228.632 1386.37,227.758 1386.94,227.918 1387.51,224.84 1388.07,223.193 1388.64,224.528 1389.21,228.927 1389.78,231.1 1390.35,231 1390.92,230.839 1391.48,231.669 1392.05,232.694 1392.62,234.516 1393.19,236.037 1393.76,236.729 1394.33,235.36 1394.89,233.91 1395.46,232.513 1396.03,233.3 1396.6,232.055 1397.17,231.89 1397.74,231.703 1398.3,231.652 1398.87,231.589 1399.44,230.362 1400.01,230.119 1400.58,231.046 1401.15,231.134 1401.71,231.149 1402.28,231.767 1402.85,231.551 1403.42,230.028 1403.99,228.903 1404.56,226.799 1405.13,225.038 1405.69,225.435 1406.26,224.796 1406.83,224.163 1407.4,224.465 1407.97,226.721 1408.54,228.138 1409.1,226.994 1409.67,227.096 1410.24,230.16 1410.81,230.174 1411.38,231.353 1411.95,233.427 1412.51,234.316 1413.08,232.725 1413.65,230.394 1414.22,230.289 1414.79,230.329 1415.36,230.301 1415.92,231.317 1416.49,231.343 1417.06,229.256 1417.63,229.235 1418.2,228.113 1418.77,228.278 1419.33,227.179 1419.9,227.473 1420.47,230.797 1421.04,231.799 1421.61,231.581 1422.18,229.163 1422.74,229.212 1423.31,229.395 1423.88,229.445 1424.45,233.507 1425.02,234.072 1425.59,232.725 1426.15,232.457 1426.72,232.402 1427.29,232.813 1427.86,231.495 1428.43,228.223 1429,228.291 1429.56,227.211 1430.13,227.501 1430.7,229.765 1431.27,232.829 1431.84,231.61 1432.41,231.546 1432.97,231.51 1433.54,232.306 1434.11,234.303 1434.68,232.963 1435.25,231.702 1435.82,232.559 1436.38,231.428 1436.95,230.123 1437.52,230.132 1438.09,230.962 1438.66,230.838 1439.23,231.737 1439.79,230.655 1440.36,232.407 1440.93,229.812 1441.5,228.909 1442.07,228.864 1442.64,225.854 1443.2,226.284 1443.77,226.306 1444.34,227.496 1444.91,227.236 1445.48,227.444 1446.05,229.887 1446.61,231.891 1447.18,231.694 1447.75,229.499 1448.32,228.56 1448.89,227.638 1449.46,227.165 1450.02,225.132 1450.59,225.533 1451.16,226.918 1451.73,227.915 1452.3,228.231 1452.87,228.261 1453.43,229.442 1454,229.074 1454.57,228.135 1455.14,226.167 1455.71,227.392 1456.28,227.584 1456.84,227.683 1457.41,227.788 1457.98,226.94 1458.55,228.203 1459.12,230.087 1459.69,229.017 1460.25,230.004 1460.82,228.78 1461.39,229.86 1461.96,230.982 1462.53,229.93 1463.1,230.669 1463.66,231.721 1464.23,232.753 1464.8,232.469 1465.37,232.459 1465.94,232.302 1466.51,233.342 1467.07,232.259 1467.64,231.01 1468.21,231.364 1468.78,229.324 1469.35,227.115 1469.92,227.279 1470.48,228.275 1471.05,228.466 1471.62,229.799 1472.19,230.735 1472.76,232.686 1473.33,234.558 1473.89,232.092 1474.46,229.918 1475.03,229.052 1475.6,230.358 1476.17,229.259 1476.74,228.189 1477.31,227.424 1477.87,228.522 1478.44,228.596 1479.01,229.866 1479.58,231.066 1480.15,229.975 1480.72,229.92 1481.28,229.082 1481.85,228.103 1482.42,227.234 1482.99,226.346 1483.56,229.632 1484.13,230.599 1484.69,231.642 1485.26,232.666 1485.83,232.476 1486.4,232.305 1486.97,233.454 1487.54,233.308 1488.1,233.188 1488.67,232.04 1489.24,231.761 1489.81,230.696 1490.38,229.667 1490.95,229.449 1491.51,227.408 1492.08,226.605 1492.65,226.882 1493.22,226.146 1493.79,225.628 1494.36,225.837 1494.92,227.15 1495.49,226.302 1496.06,227.667 1496.63,226.874 1497.2,225.983 1497.77,226.242 1498.33,226.502 1498.9,227.906 1499.47,225.279 1500.04,227.759 1500.61,228.071 1501.18,227.288 1501.74,226.623 1502.31,224.719 1502.88,226.059 1503.45,225.413 1504.02,227.844 1504.59,227.966 1505.15,228.123 1505.72,228.605 1506.29,227.922 1506.86,229.307 1507.43,227.417 1508,228.856 1508.56,229.783 1509.13,227.873 1509.7,228.009 1510.27,227.277 1510.84,225.418 1511.41,224.705 1511.97,226.256 1512.54,227.502 1513.11,229.749 1513.68,230.819 1514.25,231.794 1514.82,231.819 1515.38,231.934 1515.95,231.83 1516.52,232.933 1517.09,234.805 1517.66,236.366 1518.23,234.981 1518.79,236.709 1519.36,236.225 1519.93,236.769 1520.5,236.356 1521.07,235.016 1521.64,237.873 1522.2,240.399 1522.77,239.886 1523.34,237.261 1523.91,234.79 1524.48,232.465 1525.05,231.34 1525.61,231.159 1526.18,231.088 1526.75,230.976 1527.32,231.955 1527.89,231.003 1528.46,231.655 1529.02,233.644 1529.59,233.446 1530.16,234.09 1530.73,235.884 1531.3,235.402 1531.87,238.176 1532.43,239.803 1533,234.744 1533.57,234.135 1534.14,233.675 1534.71,235.215 1535.28,233.685 1535.84,230.234 1536.41,231.425 1536.98,230.239 1537.55,230.197 1538.12,230.066 1538.69,232.899 1539.25,232.543 1539.82,234.448 1540.39,234.073 1540.96,232.89 1541.53,230.458 1542.1,230.257 1542.66,229.157 1543.23,228.274 1543.8,229.181 1544.37,229.362 1544.94,229.39 1545.51,230.312 1546.08,227.251 1546.64,228.479 1547.21,227.348 1547.78,225.467 1548.35,228.882 1548.92,229.948 1549.49,228.858 1550.05,228.915 1550.62,228.741 1551.19,229.878 1551.76,232.807 1552.33,232.348 1552.9,231.143 1553.46,231.967 1554.03,229.92 1554.6,229.715 1555.17,228.599 1555.74,228.754 1556.31,227.875 1556.87,226.757 1557.44,229.839 1558.01,228.802 1558.58,226.947 1559.15,227.988 1559.72,226.966 1560.28,227.016 1560.85,227.217 1561.42,226.27 1561.99,227.77 1562.56,228.911 1563.13,229.099 1563.69,231.065 1564.26,232.084 1564.83,232.241 1565.4,230.029 1565.97,228.933 1566.54,227.975 1567.1,228.019 1567.67,224.964 1568.24,226.259 1568.81,224.417 1569.38,225.104 1569.95,225.326 1570.51,226.584 1571.08,227.755 1571.65,229.069 1572.22,228.047 1572.79,227.177 1573.36,228.438 1573.92,230.566 1574.49,229.62 1575.06,228.519 1575.63,226.603 1576.2,226.109 1576.77,226.521 1577.33,225.762 1577.9,225.876 1578.47,227.196 1579.04,223.042 1579.61,223.459 1580.18,223.872 1580.74,225.457 1581.31,224.841 1581.88,224.137 1582.45,226.616 1583.02,226.068 1583.59,225.707 1584.15,226.224 1584.72,225.397 1585.29,225.651 1585.86,226.235 1586.43,226.685 1587,226.921 1587.56,230.33 1588.13,230.389 1588.7,229.248 1589.27,228.193 1589.84,230.366 1590.41,230.577 1590.97,232.692 1591.54,234.541 1592.11,233.401 1592.68,234.197 1593.25,232.932 1593.82,234.893 1594.38,233.669 1594.95,232.428 1595.52,233.341 1596.09,233.212 1596.66,227.93 1597.23,230.286 1597.79,231.433 1598.36,230.323 1598.93,229.358 1599.5,228.114 1600.07,228.26 1600.64,229.567 1601.2,229.733 1601.77,233.044 1602.34,233.043 1602.91,232.801 1603.48,234.739 1604.05,234.394 1604.61,232.945 1605.18,232.922 1605.75,234.668 1606.32,234.533 1606.89,235.343 1607.46,234.119 1608.02,231.695 1608.59,230.632 1609.16,230.436 1609.73,230.273 1610.3,228.085 1610.87,227.205 1611.43,226.386 1612,223.906 1612.57,224.508 1613.14,225.826 1613.71,227.153 1614.28,228.642 1614.84,227.768 1615.41,227.918 1615.98,231.174 1616.55,231.189 1617.12,229.075 1617.69,230.177 1618.26,231.249 1618.82,233.161 1619.39,233.241 1619.96,232.966 1620.53,232.718 1621.1,233.555 1621.67,233.106 1622.23,231.712 1622.8,229.749 1623.37,230.906 1623.94,230.055 1624.51,231.026 1625.08,229.858 1625.64,231.102 1626.21,232.347 1626.78,231.295 1627.35,232.273 1627.92,233.011 1628.49,232.653 1629.05,232.56 1629.62,233.214 1630.19,232.042 1630.76,232.804 1631.33,231.62 1631.9,231.633 1632.46,232.48 1633.03,228.021 1633.6,229.102 1634.17,230.393 1634.74,230.434 1635.31,230.4 1635.87,230.394 1636.44,230.309 1637.01,230.29 1637.58,231.155 1638.15,231.035 1638.72,231.737 1639.28,230.656 1639.85,232.731 1640.42,233.554 1640.99,232.308 1641.56,233.018 1642.13,234.6 1642.69,234.169 1643.26,233.832 1643.83,232.719 1644.4,232.611 1644.97,230.301 1645.54,231.181 1646.1,231.057 1646.67,231.853 1647.24,233.866 1647.81,231.649 1648.38,232.662 1648.95,231.4 1649.51,231.526 1650.08,229.345 1650.65,229.305 1651.22,230.409 1651.79,230.235 1652.36,230.062 1652.92,230.752 1653.49,231.552 1654.06,233.411 1654.63,233.106 1655.2,233.833 1655.77,236.617 1656.33,236.175 1656.9,235.811 1657.47,234.325 1658.04,233.82 1658.61,233.364 1659.18,232.125 1659.74,229.889 1660.31,228.745 1660.88,229.802 1661.45,229.718 1662.02,229.538 1662.59,226.476 1663.15,226.625 1663.72,224.534 1664.29,223.667 1664.86,224.997 1665.43,226.291 1666,226.391 1666.56,226.427 1667.13,227.438 1667.7,227.649 1668.27,227.681 1668.84,227.754 1669.41,229.681 1669.97,230.633 1670.54,228.549 1671.11,226.621 1671.68,229.804 1672.25,229.781 1672.82,230.745 1673.38,228.51 1673.95,227.414 1674.52,230.607 1675.09,229.7 1675.66,230.564 1676.23,230.427 1676.79,229.267 1677.36,228.298 1677.93,228.547 1678.5,229.827 1679.07,228.804 1679.64,228.847 1680.2,229.951 1680.77,231.112 1681.34,232.045 1681.91,231.882 1682.48,232.775 1683.05,230.481 1683.61,230.321 1684.18,231.319 1684.75,230.024 1685.32,229.035 1685.89,227.1 1686.46,228.426 1687.02,228.553 1687.59,229.742 1688.16,230.605 1688.73,231.314 1689.3,229.861 1689.87,228.823 1690.44,227.685 1691,226.548 1691.57,226.701 1692.14,223.785 1692.71,223.042 1693.28,223.4 1693.85,222.893 1694.41,220.325 1694.98,221.078 1695.55,220.913 1696.12,221.485 1696.69,222.093 1697.26,221.711 1697.82,223.366 1698.39,225.248 1698.96,222.545 1699.53,224.294 1700.1,227.01 1700.67,228.443 1701.23,230.796 1701.8,233.044 1702.37,231.93 1702.94,231.762 1703.51,232.748 1704.08,232.517 1704.64,232.547 1705.21,230.357 1705.78,229.237 1706.35,229.463 1706.92,229.701 1707.49,231.004 1708.05,229.912 1708.62,230.873 1709.19,232.087 1709.76,230.986 1710.33,228.867 1710.9,230.133 1711.46,230.514 1712.03,231.705 1712.6,231.768 1713.17,231.784 1713.74,231.714 1714.31,232.6 1714.87,231.172 1715.44,229.712 1716.01,228.765 1716.58,228.773 1717.15,225.847 1717.72,225.039 1718.28,224.503 1718.85,227.094 1719.42,229.432 1719.99,228.628 1720.56,228.898 1721.13,229.094 1721.69,231.269 1722.26,229.009 1722.83,229.19 1723.4,230.604 1723.97,232.848 1724.54,231.902 1725.1,232.921 1725.67,232.957 1726.24,231.898 1726.81,230.89 1727.38,230.045 1727.95,227.21 1728.51,227.421 1729.08,227.671 1729.65,228.93 1730.22,228.164 1730.79,229.636 1731.36,233.689 1731.92,233.466 1732.49,232.228 1733.06,231.179 1733.63,232.078 1734.2,233.086 1734.77,233.852 1735.33,234.879 1735.9,238.599 1736.47,237.948 1737.04,237.345 1737.61,234.927 1738.18,235.665 1738.74,235.203 1739.31,233.809 1739.88,230.408 1740.45,231.456 1741.02,230.279 1741.59,230.056 1742.15,229.186 1742.72,231.168 1743.29,232.114 1743.86,230.826 1744.43,231.038 1745,230.914 1745.56,232.801 1746.13,232.597 1746.7,233.319 1747.27,233.992 1747.84,232.654 1748.41,234.456 1748.97,234.1 1749.54,235.671 1750.11,234.483 1750.68,233.051 1751.25,231.824 1751.82,231.733 1752.38,230.75 1752.95,228.646 1753.52,229.637 1754.09,230.541 1754.66,229.689 1755.23,227.454 1755.79,231.827 1756.36,230.725 1756.93,231.635 1757.5,231.307 1758.07,231.053 1758.64,230.815 1759.21,229.706 1759.77,227.693 1760.34,227.848 1760.91,224.713 1761.48,224.028 1762.05,225.441 1762.62,225.849 1763.18,227.994 1763.75,227.958 1764.32,227.291 1764.89,225.487 1765.46,226.012 1766.03,229.261 1766.59,229.237 1767.16,229.359 1767.73,229.328 1768.3,229.574 1768.87,229.652 1769.44,230.626 1770,230.841 1770.57,230.819 1771.14,230.918 1771.71,231.949 1772.28,231.824 1772.85,230.676 1773.41,231.73 1773.98,230.637 1774.55,231.577 1775.12,231.403 1775.69,231.249 1776.26,230.123 1776.82,230.981 1777.39,229.666 1777.96,230.783 1778.53,231.709 1779.1,232.728 1779.67,231.372 1780.23,231.201 1780.8,230.229 1781.37,230.398 1781.94,227.357 1782.51,227.552 1783.08,227.739 1783.64,226.931 1784.21,229.396 1784.78,231.324 1785.35,229.108 1785.92,230.164 1786.49,231.099 1787.05,232.244 1787.62,231.003 1788.19,230.104 1788.76,229.959 1789.33,230.001 1789.9,229.715 1790.46,227.731 1791.03,226.951 1791.6,227.191 1792.17,226.198 1792.74,226.369 1793.31,229.763 1793.87,227.816 1794.44,226.892 1795.01,226.933 1795.58,227.023 1796.15,228.037 1796.72,228.358 1797.28,229.532 1797.85,229.463 1798.42,229.427 1798.99,229.438 1799.56,228.505 1800.13,228.908 1800.69,230.21 1801.26,231.363 1801.83,229.984 1802.4,229.081 1802.97,230.3 1803.54,229.191 1804.1,227.17 1804.67,228.415 1805.24,228.525 1805.81,229.514 1806.38,229.686 1806.95,227.794 1807.51,230.056 1808.08,232.169 1808.65,232.21 1809.22,231.024 1809.79,230.967 1810.36,232.005 1810.92,231.799 1811.49,231.776 1812.06,232.946 1812.63,232.881 1813.2,234.669 1813.77,233.454 1814.33,233.188 1814.9,233.038 1815.47,234.043 1816.04,232.889 1816.61,232.429 1817.18,230.305 1817.74,227.225 1818.31,228.504 1818.88,231.649 1819.45,231.471 1820.02,230.258 1820.59,230.096 1821.15,231.094 1821.72,234.253 1822.29,231.501 1822.86,231.303 1823.43,232.298 1824,232.122 1824.56,231.909 1825.13,232.702 1825.7,232.51 1826.27,232.429 1826.84,232.243 1827.41,230.141 1827.97,231.093 1828.54,231.923 1829.11,230.762 1829.68,230.386 1830.25,230.418 1830.82,230.357 1831.39,232.271 1831.95,232.011 1832.52,231.751 1833.09,231.571 1833.66,231.616 1834.23,229.338 1834.8,227.539 1835.36,227.419 1835.93,229.523 1836.5,228.753 1837.07,228.728 1837.64,229.953 1838.21,229.039 1838.77,230.068 1839.34,230.954 1839.91,230.645 1840.48,231.545 1841.05,232.243 1841.62,232.193 1842.18,230.981 1842.75,229.793 1843.32,229.733 1843.89,227.818 1844.46,228.134 1845.03,229.193 1845.59,229.207 1846.16,229.25 1846.73,229.169 1847.3,229.046 1847.87,228.06 1848.44,230.271 1849,228.98 1849.57,225.932 1850.14,226.207 1850.71,225.136 1851.28,227.432 1851.85,226.356 1852.41,226.394 1852.98,223.694 1853.55,223.001 1854.12,223.597 1854.69,223.093 1855.26,223.621 1855.82,223.177 1856.39,223.612 1856.96,225.112 1857.53,225.555 1858.1,225.004 1858.67,224.208 1859.23,224.737 1859.8,225.156 1860.37,222.644 1860.94,225.377 1861.51,225.662 1862.08,227.221 1862.64,226.609 1863.21,228.062 1863.78,228.224 1864.35,229.533 1864.92,229.635 1865.49,229.808 1866.05,232.053 1866.62,232.152 1867.19,232.186 1867.76,233.115 1868.33,233.683 1868.9,233.594 1869.46,235.585 1870.03,238.714 1870.6,237.144 1871.17,236.735 1871.74,235.354 1872.31,235.996 1872.87,234.667 1873.44,234.39 1874.01,233.116 1874.58,232.827 1875.15,231.568 1875.72,232.34 1876.28,232.227 1876.85,234.342 1877.42,233.951 1877.99,232.78 1878.56,231.478 1879.13,232.597 1879.69,232.404 1880.26,232.345 1880.83,231.995 1881.4,231.652 1881.97,231.533 1882.54,231.317 1883.1,232.061 1883.67,234.959 1884.24,235.632 1884.81,237.15 1885.38,237.538 1885.95,236.988 1886.51,237.345 1887.08,235.782 1887.65,234.299 1888.22,233.938 1888.79,234.425 1889.36,234.141 1889.92,231.667 1890.49,231.604 1891.06,230.554 1891.63,230.499 1892.2,229.24 1892.77,230.18 1893.33,228.155 1893.9,230.256 1894.47,229.035 1895.04,229.117 1895.61,228.961 1896.18,228.692 1896.74,228.521 1897.31,227.558 1897.88,225.815 1898.45,225.168 1899.02,225.601 1899.59,224.783 1900.16,224.182 1900.72,224.7 1901.29,224.989 1901.86,226.449 1902.43,225.293 1903,224.531 1903.57,222.876 1904.13,220.234 1904.7,221.937 1905.27,220.471 1905.84,221.145 1906.41,221.675 1906.98,221.395 1907.54,224.202 1908.11,224.571 1908.68,223.888 1909.25,226.324 1909.82,226.502 1910.39,227.85 1910.95,227.953 1911.52,227.434 1912.09,227.509 1912.66,226.576 1913.23,227.924 1913.8,230.292 1914.36,231.362 1914.93,232.259 1915.5,232.076 1916.07,233.166 1916.64,231.787 1917.21,231.593 1917.77,231.527 1918.34,230.64 1918.91,231.679 1919.48,232.765 1920.05,233.747 1920.62,233.456 1921.18,233.519 1921.75,233.229 1922.32,235.199 1922.89,235.8 1923.46,236.366 1924.03,236.02 1924.59,234.743 1925.16,233.172 1925.73,233.003 1926.3,232.78 1926.87,233.809 1927.44,235.503 1928,235.104 1928.57,233.747 1929.14,232.611 1929.71,232.257 1930.28,234.081 1930.85,233.831 1931.41,233.558 1931.98,234.534 1932.55,233.627 1933.12,232.472 1933.69,231.279 1934.26,233.28 1934.82,231.97 1935.39,228.968 1935.96,228.949 1936.53,228.895 1937.1,229.952 1937.67,227.736 1938.23,228.122 1938.8,228.211 1939.37,231.568 1939.94,231.242 1940.51,230.155 1941.08,231.278 1941.64,232.228 1942.21,232.991 1942.78,229.657 1943.35,229.711 1943.92,228.761 1944.49,226.844 1945.05,225.959 1945.62,226.124 1946.19,225.363 1946.76,223.785 1947.33,223.348 1947.9,221.717 1948.46,222.582 1949.03,223.124 1949.6,225.786 1950.17,223.012 1950.74,223.775 1951.31,225.239 1951.87,223.421 1952.44,222.971 1953.01,226.611 1953.58,228.172 1954.15,229.474 1954.72,229.406 1955.28,228.481 1955.85,230.871 1956.42,230.925 1956.99,233.17 1957.56,235.044 1958.13,232.819 1958.69,232.571 1959.26,232.413 1959.83,231.464 1960.4,230.371 1960.97,230.544 1961.54,229.493 1962.1,232.841 1962.67,232.841 1963.24,230.732 1963.81,229.765 1964.38,230.862 1964.95,230.943 1965.51,231.933 1966.08,230.937 1966.65,231.983 1967.22,231.856 1967.79,232.615 1968.36,232.471 1968.92,233.601 1969.49,233.283 1970.06,234.205 1970.63,234.009 1971.2,231.868 1971.77,233.872 1972.34,232.815 1972.9,231.628 1973.47,227.648 1974.04,227.903 1974.61,228.082 1975.18,227.24 1975.75,227.489 1976.31,227.747 1976.88,226.845 1977.45,227.143 1978.02,227.263 1978.59,227.67 1979.16,228.009 1979.72,228.173 1980.29,227.349 1980.86,228.91 1981.43,230.102 1982,233.285 1982.57,234.036 1983.13,234.678 1983.7,235.261 1984.27,235.893 1984.84,237.506 1985.41,237.093 1985.98,238.693 1986.54,236.911 1987.11,235.396 1987.68,233.918 1988.25,235.567 1988.82,234.078 1989.39,231.832 1989.95,231.723 1990.52,233.525 1991.09,232.171 1991.66,231.774 1992.23,232.854 1992.8,232.804 1993.36,232.576 1993.93,229.432 1994.5,229.378 1995.07,231.448 1995.64,231.348 1996.21,230.483 1996.77,231.437 1997.34,230.37 1997.91,231.295 1998.48,230.041 1999.05,228.803 1999.62,227.878 2000.18,226.934 2000.75,227.966 2001.32,229.273 2001.89,231.51 2002.46,231.388 2003.03,230.078 2003.59,229.855 2004.16,230.776 2004.73,232.772 2005.3,233.492 2005.87,231.138 2006.44,230.976 2007,231.951 2007.57,230.41 2008.14,230.593 2008.71,231.365 2009.28,233.329 2009.85,233.181 2010.41,233.745 2010.98,232.385 2011.55,232.113 2012.12,231.874 2012.69,233.724 2013.26,233.547 2013.82,232.178 2014.39,229.82 2014.96,230.766 2015.53,230.782 2016.1,230.723 2016.67,229.65 2017.23,228.647 2017.8,230.596 2018.37,230.431 2018.94,230.295 2019.51,230.991 2020.08,227.668 2020.64,226.603 2021.21,224.635 2021.78,225.785 2022.35,222.912 2022.92,221.322 2023.49,222.016 2024.05,223.596 2024.62,225.066 2025.19,228.41 2025.76,227.289 2026.33,224.175 2026.9,223.69 2027.46,222.953 2028.03,222.494 2028.6,222.104 2029.17,220.844 2029.74,224.591 2030.31,226.962 2030.87,227.275 2031.44,227.438 2032.01,227.755 2032.58,229.031 2033.15,230.209 2033.72,232.311 2034.28,232.255 2034.85,231.968 2035.42,232.918 2035.99,233.897 2036.56,232.638 2037.13,232.379 2037.69,232.137 2038.26,230.921 2038.83,231.901 2039.4,230.494 2039.97,231.379 2040.54,231.23 2041.11,231.999 2041.67,233.947 2042.24,232.906 2042.81,232.86 2043.38,232.744 2043.95,233.542 2044.52,233.173 2045.08,232.732 2045.65,231.222 2046.22,232.198 2046.79,232.777 2047.36,232.534 2047.93,232.349 2048.49,232.387 2049.06,231.178 2049.63,229.93 2050.2,232.007 2050.77,232.04 2051.34,230.971 2051.9,228.829 2052.47,229.853 2053.04,230.727 2053.61,230.728 2054.18,231.713 2054.75,230.384 2055.31,228.185 2055.88,228.394 2056.45,228.469 2057.02,227.456 2057.59,226.456 2058.16,226.663 2058.72,226.896 2059.29,225.955 2059.86,223.183 2060.43,228.878 2061,227.885 2061.57,223.924 2062.13,221.353 2062.7,220.952 2063.27,221.671 2063.84,221.386 2064.41,219.895 2064.98,221.77 2065.54,223.499 2066.11,225.148 2066.68,224.495 2067.25,227.056 2067.82,226.402 2068.39,227.733 2068.95,229.023 2069.52,230.272 2070.09,229.445 2070.66,227.639 2071.23,227.984 2071.8,227.2 2072.36,227.652 2072.93,230.165 2073.5,229.288 2074.07,228.553 2074.64,228.773 2075.21,228.895 2075.77,228.123 2076.34,227.418 2076.91,227.67 2077.48,228.008 2078.05,229.346 2078.62,231.695 2079.18,231.602 2079.75,232.788 2080.32,232.911 2080.89,234.94 2081.46,235.969 2082.03,235.724 2082.59,235.445 2083.16,233.973 2083.73,233.8 2084.3,235.816 2084.87,235.649 2085.44,235.417 2086,234.172 2086.57,234.205 2087.14,231.967 2087.71,230.443 2088.28,228.356 2088.85,228.634 2089.41,228.829 2089.98,232.045 2090.55,232.842 2091.12,231.575 2091.69,231.501 2092.26,232.331 2092.82,233.074 2093.39,233.112 2093.96,234.046 2094.53,232.821 2095.1,231.643 2095.67,230.418 2096.23,232.455 2096.8,234.295 2097.37,232.099 2097.94,233.936 2098.51,236.657 2099.08,234.08 2099.64,233.568 2100.21,233.185 2100.78,231.829 2101.35,231.355 2101.92,230.29 2102.49,231.189 2103.05,230.843 2103.62,230.923 2104.19,231.881 2104.76,232.737 2105.33,234.691 2105.9,232.299 2106.46,235.096 2107.03,234.65 2107.6,233.147 2108.17,230.699 2108.74,230.602 2109.31,231.408 2109.87,230.276 2110.44,229.086 2111.01,229.146 2111.58,229.119 2112.15,230.232 2112.72,231.148 2113.29,229.84 2113.85,227.889 2114.42,228.917 2114.99,230.073 2115.56,229.014 2116.13,226.917 2116.7,228.158 2117.26,230.224 2117.83,230.034 2118.4,227.954 2118.97,226.861 2119.54,226.264 2120.11,226.231 2120.67,226.633 2121.24,224.983 2121.81,225.402 2122.38,224.721 2122.95,227.236 2123.52,225.195 2124.08,224.462 2124.65,222.879 2125.22,222.151 2125.79,223.744 2126.36,224.175 2126.93,226.691 2127.49,227.739 2128.06,229.029 2128.63,228.243 2129.2,231.47 2129.77,233.436 2130.34,232.107 2130.9,231.897 2131.47,232.866 2132.04,233.601 2132.61,231.343 2133.18,232.498 2133.75,230.156 2134.31,232.028 2134.88,231.893 2135.45,229.763 2136.02,228.754 2136.59,228.73 2137.16,227.593 2137.72,227.594 2138.29,226.338 2138.86,227.67 2139.43,229.929 2140,230.951 2140.57,230.909 2141.13,233.114 2141.7,235.168 2142.27,234.943 2142.84,233.513 2143.41,234.237 2143.98,233.914 2144.54,233.614 2145.11,231.373 2145.68,233.217 2146.25,234 2146.82,232.819 2147.39,232.443 2147.95,233.554 2148.52,234.374 2149.09,236.144 2149.66,235.926 2150.23,238.573 2150.8,238.936 2151.36,238.164 2151.93,237.35 2152.5,236.785 2153.07,234.368 2153.64,231.753 2154.21,231.753 2154.77,229.263 2155.34,230.335 2155.91,229.924 2156.48,229.934 2157.05,229.121 2157.62,230.912 2158.18,230.764 2158.75,231.574 2159.32,231.587 2159.89,232.364 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip870)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.022\n  with uncertainty of ± 0.0019895180285388826\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.011 ± (0.00343251, 0.00329654) (MC)\n  95% confidence interval: [-4.01763, -4.00432] (MC)\n  linear error propagation: -4.01141 ± 0.00340015\n  |δ_y| = |0.00238833| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0109982857477355, val_l = 0.0066275717783037535, val_u = 0.0066774308823518425)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip900\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip900)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip901\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip900)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip902\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1149.01 2211.02,1149.01 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,995.964 2211.02,995.964 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,842.915 2211.02,842.915 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,689.865 2211.02,689.865 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,536.816 2211.02,536.816 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,383.767 2211.02,383.767 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,230.717 2211.02,230.717 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1149.01 365.751,1149.01 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,995.964 365.751,995.964 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,842.915 365.751,842.915 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,689.865 365.751,689.865 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,536.816 365.751,536.816 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,383.767 365.751,383.767 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,230.717 365.751,230.717 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M298.909 1134.81 Q295.298 1134.81 293.469 1138.38 Q291.664 1141.92 291.664 1149.05 Q291.664 1156.15 293.469 1159.72 Q295.298 1163.26 298.909 1163.26 Q302.543 1163.26 304.349 1159.72 Q306.177 1156.15 306.177 1149.05 Q306.177 1141.92 304.349 1138.38 Q302.543 1134.81 298.909 1134.81 M298.909 1131.11 Q304.719 1131.11 307.775 1135.71 Q310.853 1140.3 310.853 1149.05 Q310.853 1157.77 307.775 1162.38 Q304.719 1166.96 298.909 1166.96 Q293.099 1166.96 290.02 1162.38 Q286.964 1157.77 286.964 1149.05 Q286.964 1140.3 290.02 1135.71 Q293.099 1131.11 298.909 1131.11 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M259.557 1009.31 L267.196 1009.31 L267.196 982.943 L258.886 984.61 L258.886 980.351 L267.15 978.684 L271.826 978.684 L271.826 1009.31 L279.465 1009.31 L279.465 1013.24 L259.557 1013.24 L259.557 1009.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M298.909 981.763 Q295.298 981.763 293.469 985.327 Q291.664 988.869 291.664 995.999 Q291.664 1003.11 293.469 1006.67 Q295.298 1010.21 298.909 1010.21 Q302.543 1010.21 304.349 1006.67 Q306.177 1003.11 306.177 995.999 Q306.177 988.869 304.349 985.327 Q302.543 981.763 298.909 981.763 M298.909 978.059 Q304.719 978.059 307.775 982.665 Q310.853 987.249 310.853 995.999 Q310.853 1004.73 307.775 1009.33 Q304.719 1013.92 298.909 1013.92 Q293.099 1013.92 290.02 1009.33 Q286.964 1004.73 286.964 995.999 Q286.964 987.249 290.02 982.665 Q293.099 978.059 298.909 978.059 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M262.775 856.259 L279.094 856.259 L279.094 860.195 L257.15 860.195 L257.15 856.259 Q259.812 853.505 264.395 848.875 Q269.002 844.222 270.182 842.88 Q272.428 840.357 273.307 838.621 Q274.21 836.861 274.21 835.172 Q274.21 832.417 272.266 830.681 Q270.344 828.945 267.242 828.945 Q265.043 828.945 262.59 829.709 Q260.159 830.473 257.381 832.023 L257.381 827.301 Q260.205 826.167 262.659 825.588 Q265.113 825.01 267.15 825.01 Q272.52 825.01 275.715 827.695 Q278.909 830.38 278.909 834.871 Q278.909 837 278.099 838.922 Q277.312 840.82 275.205 843.412 Q274.627 844.084 271.525 847.301 Q268.423 850.496 262.775 856.259 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M298.909 828.713 Q295.298 828.713 293.469 832.278 Q291.664 835.82 291.664 842.949 Q291.664 850.056 293.469 853.621 Q295.298 857.162 298.909 857.162 Q302.543 857.162 304.349 853.621 Q306.177 850.056 306.177 842.949 Q306.177 835.82 304.349 832.278 Q302.543 828.713 298.909 828.713 M298.909 825.01 Q304.719 825.01 307.775 829.616 Q310.853 834.199 310.853 842.949 Q310.853 851.676 307.775 856.283 Q304.719 860.866 298.909 860.866 Q293.099 860.866 290.02 856.283 Q286.964 851.676 286.964 842.949 Q286.964 834.199 290.02 829.616 Q293.099 825.01 298.909 825.01 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M272.914 688.511 Q276.27 689.229 278.145 691.497 Q280.043 693.766 280.043 697.099 Q280.043 702.215 276.525 705.016 Q273.006 707.817 266.525 707.817 Q264.349 707.817 262.034 707.377 Q259.742 706.96 257.289 706.104 L257.289 701.59 Q259.233 702.724 261.548 703.303 Q263.863 703.881 266.386 703.881 Q270.784 703.881 273.076 702.145 Q275.39 700.409 275.39 697.099 Q275.39 694.043 273.238 692.331 Q271.108 690.594 267.289 690.594 L263.261 690.594 L263.261 686.752 L267.474 686.752 Q270.923 686.752 272.752 685.386 Q274.58 683.997 274.58 681.405 Q274.58 678.743 272.682 677.331 Q270.807 675.895 267.289 675.895 Q265.367 675.895 263.168 676.312 Q260.969 676.729 258.33 677.608 L258.33 673.442 Q260.992 672.701 263.307 672.331 Q265.645 671.96 267.705 671.96 Q273.029 671.96 276.131 674.391 Q279.233 676.798 279.233 680.919 Q279.233 683.789 277.59 685.78 Q275.946 687.747 272.914 688.511 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M298.909 675.664 Q295.298 675.664 293.469 679.229 Q291.664 682.77 291.664 689.9 Q291.664 697.006 293.469 700.571 Q295.298 704.113 298.909 704.113 Q302.543 704.113 304.349 700.571 Q306.177 697.006 306.177 689.9 Q306.177 682.77 304.349 679.229 Q302.543 675.664 298.909 675.664 M298.909 671.96 Q304.719 671.96 307.775 676.567 Q310.853 681.15 310.853 689.9 Q310.853 698.627 307.775 703.233 Q304.719 707.817 298.909 707.817 Q293.099 707.817 290.02 703.233 Q286.964 698.627 286.964 689.9 Q286.964 681.15 290.02 676.567 Q293.099 671.96 298.909 671.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M271.594 523.61 L259.789 542.059 L271.594 542.059 L271.594 523.61 M270.367 519.536 L276.247 519.536 L276.247 542.059 L281.177 542.059 L281.177 545.948 L276.247 545.948 L276.247 554.096 L271.594 554.096 L271.594 545.948 L255.992 545.948 L255.992 541.434 L270.367 519.536 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M298.909 522.615 Q295.298 522.615 293.469 526.179 Q291.664 529.721 291.664 536.851 Q291.664 543.957 293.469 547.522 Q295.298 551.064 298.909 551.064 Q302.543 551.064 304.349 547.522 Q306.177 543.957 306.177 536.851 Q306.177 529.721 304.349 526.179 Q302.543 522.615 298.909 522.615 M298.909 518.911 Q304.719 518.911 307.775 523.517 Q310.853 528.101 310.853 536.851 Q310.853 545.577 307.775 550.184 Q304.719 554.767 298.909 554.767 Q293.099 554.767 290.02 550.184 Q286.964 545.577 286.964 536.851 Q286.964 528.101 290.02 523.517 Q293.099 518.911 298.909 518.911 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M258.793 366.487 L277.15 366.487 L277.15 370.422 L263.076 370.422 L263.076 378.894 Q264.094 378.547 265.113 378.385 Q266.131 378.199 267.15 378.199 Q272.937 378.199 276.316 381.371 Q279.696 384.542 279.696 389.959 Q279.696 395.537 276.224 398.639 Q272.752 401.718 266.432 401.718 Q264.256 401.718 261.988 401.348 Q259.742 400.977 257.335 400.236 L257.335 395.537 Q259.418 396.672 261.641 397.227 Q263.863 397.783 266.34 397.783 Q270.344 397.783 272.682 395.676 Q275.02 393.57 275.02 389.959 Q275.02 386.348 272.682 384.241 Q270.344 382.135 266.34 382.135 Q264.465 382.135 262.59 382.551 Q260.738 382.968 258.793 383.848 L258.793 366.487 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M298.909 369.565 Q295.298 369.565 293.469 373.13 Q291.664 376.672 291.664 383.801 Q291.664 390.908 293.469 394.473 Q295.298 398.014 298.909 398.014 Q302.543 398.014 304.349 394.473 Q306.177 390.908 306.177 383.801 Q306.177 376.672 304.349 373.13 Q302.543 369.565 298.909 369.565 M298.909 365.862 Q304.719 365.862 307.775 370.468 Q310.853 375.051 310.853 383.801 Q310.853 392.528 307.775 397.135 Q304.719 401.718 298.909 401.718 Q293.099 401.718 290.02 397.135 Q286.964 392.528 286.964 383.801 Q286.964 375.051 290.02 370.468 Q293.099 365.862 298.909 365.862 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M269.326 228.854 Q266.178 228.854 264.326 231.007 Q262.497 233.159 262.497 236.909 Q262.497 240.636 264.326 242.812 Q266.178 244.965 269.326 244.965 Q272.474 244.965 274.303 242.812 Q276.154 240.636 276.154 236.909 Q276.154 233.159 274.303 231.007 Q272.474 228.854 269.326 228.854 M278.608 214.201 L278.608 218.46 Q276.849 217.627 275.043 217.187 Q273.261 216.747 271.502 216.747 Q266.872 216.747 264.418 219.872 Q261.988 222.997 261.641 229.317 Q263.006 227.303 265.066 226.238 Q267.127 225.15 269.603 225.15 Q274.812 225.15 277.821 228.321 Q280.853 231.47 280.853 236.909 Q280.853 242.233 277.705 245.451 Q274.557 248.669 269.326 248.669 Q263.33 248.669 260.159 244.085 Q256.988 239.479 256.988 230.752 Q256.988 222.558 260.877 217.696 Q264.766 212.812 271.316 212.812 Q273.076 212.812 274.858 213.159 Q276.664 213.507 278.608 214.201 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M298.909 216.516 Q295.298 216.516 293.469 220.081 Q291.664 223.622 291.664 230.752 Q291.664 237.858 293.469 241.423 Q295.298 244.965 298.909 244.965 Q302.543 244.965 304.349 241.423 Q306.177 237.858 306.177 230.752 Q306.177 223.622 304.349 220.081 Q302.543 216.516 298.909 216.516 M298.909 212.812 Q304.719 212.812 307.775 217.419 Q310.853 222.002 310.853 230.752 Q310.853 239.479 307.775 244.085 Q304.719 248.669 298.909 248.669 Q293.099 248.669 290.02 244.085 Q286.964 239.479 286.964 230.752 Q286.964 222.002 290.02 217.419 Q293.099 212.812 298.909 212.812 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip902)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1155.27 400.199,1045.98 400.786,944.859 401.372,850.509 401.958,767.495 402.545,791.856 403.131,717.901 403.718,648.702 404.304,585.37 404.891,526.29 405.477,474.023 406.063,426.839 406.65,384.41 407.236,346.427 407.823,312.603 408.409,282.666 408.995,256.363 409.582,289.71 410.168,267.678 410.755,248.711 411.341,232.604 411.927,219.895 412.514,249.195 413.1,239.167 413.687,266.024 414.273,258.457 414.86,282.731 415.446,332.388 416.032,353.533 416.619,372.663 417.205,390.998 417.792,406.97 418.378,403.561 418.964,401.301 419.551,400.637 420.137,401.993 420.724,433.73 421.31,436.189 421.896,439.363 422.483,443.615 423.069,449.183 423.656,466.924 424.242,484.209 424.829,521.407 425.415,528.42 426.001,535.732 426.588,543.289 427.174,552.42 427.761,569.285 428.347,578.44 428.933,587.422 429.52,603.644 430.106,627.2 430.693,636.22 431.279,652.41 431.865,661.476 432.452,675.969 433.038,685.162 433.625,700.036 434.211,709.593 434.798,718.593 435.384,727.662 435.97,741.831 436.557,755.523 437.143,772.75 437.73,785.394 438.316,813.582 438.902,824.954 439.489,836.147 440.075,846.559 440.662,857.259 441.248,864.168 441.835,881.022 442.421,890.529 443.007,896.821 443.594,915.21 444.18,920.792 444.767,940.803 445.353,949.14 445.939,954.399 446.526,962.244 447.112,980.676 447.699,990.616 448.285,997.739 448.871,1007.12 449.458,1011.67 450.044,1022.68 450.631,1038.58 451.217,1044.53 451.804,1050.21 452.39,1058.2 452.976,1063.82 453.563,1069.39 454.149,1074.92 454.736,1078.12 455.322,1083.43 455.908,1088.34 456.495,1097.21 457.081,1102.11 457.668,1105.3 458.254,1108.32 458.84,1112.76 459.427,1119.02 460.013,1125.01 460.6,1127.28 461.186,1132.86 461.773,1138.63 462.359,1142 462.945,1145.83 463.532,1147.4 464.118,1149.16 464.705,1154.17 465.291,1160.49 465.877,1163.56 466.464,1164.52 467.05,1168.91 467.637,1170.02 468.223,1171.31 468.809,1173.85 469.396,1174.99 469.982,1175.95 470.569,1178.39 471.155,1179.52 471.742,1180.48 472.328,1183.34 472.914,1188.95 473.501,1192.71 474.087,1194.73 474.674,1198.38 475.26,1198.7 475.846,1202.3 476.433,1205.59 477.019,1205.82 477.606,1207.78 478.192,1208.06 478.778,1208.27 479.365,1208.48 479.951,1211.51 480.538,1214.6 481.124,1211.76 481.711,1214.67 482.297,1215.85 482.883,1217.68 483.47,1217.49 484.056,1217.42 484.643,1218.7 485.229,1218.84 485.815,1221.61 486.402,1221.55 486.988,1223.15 487.575,1224.57 488.161,1226.83 488.748,1227.9 489.334,1227.56 489.92,1228.5 490.507,1228.13 491.093,1227.74 491.68,1227.51 492.266,1228.64 492.852,1229.72 493.439,1230.84 494.025,1233.16 494.612,1234.01 495.198,1233.5 495.784,1231.56 496.371,1231.48 496.957,1233.67 497.544,1236 498.13,1235.35 498.717,1235.18 499.303,1235.94 499.889,1235.5 500.476,1235.29 501.062,1236.45 501.649,1235.88 502.235,1239.32 502.821,1242.38 503.408,1242.86 503.994,1241.92 504.581,1242.43 505.167,1244.38 505.753,1245.06 506.34,1245.32 506.926,1245.41 507.513,1245.73 508.099,1244.79 508.686,1246.5 509.272,1250.53 509.858,1248.27 510.445,1248.65 511.031,1250.24 511.618,1250.44 512.204,1248.17 512.79,1248.39 513.377,1247.68 513.963,1245.66 514.55,1243.53 515.136,1242.86 515.722,1241.89 516.309,1241.26 516.895,1240.74 517.482,1241.48 518.068,1242.1 518.655,1243.21 519.241,1244.74 519.827,1247.74 520.414,1246.82 521,1247.29 521.587,1246.28 522.173,1244.05 522.759,1245.85 523.346,1245.12 523.932,1244.36 524.519,1240.86 525.105,1237.92 525.691,1237.44 526.278,1235.62 526.864,1236.4 527.451,1239.84 528.037,1239.18 528.624,1242.44 529.21,1243.19 529.796,1243.72 530.383,1244.34 530.969,1242.08 531.556,1242.81 532.142,1240.98 532.728,1240.52 533.315,1237.43 533.901,1240.65 534.488,1241.31 535.074,1244.25 535.661,1244.98 536.247,1245.5 536.833,1244.66 537.42,1244.09 538.006,1241.87 538.593,1240.83 539.179,1239.94 539.765,1241.96 540.352,1242.4 540.938,1239.26 541.525,1238.81 542.111,1239.21 542.697,1240.01 543.284,1239.53 543.87,1239.17 544.457,1241.04 545.043,1236.64 545.63,1236.1 546.216,1232.91 546.802,1235.17 547.389,1233.42 547.975,1235.89 548.562,1235.25 549.148,1234.85 549.734,1233.33 550.321,1232.66 550.907,1233.58 551.494,1235.9 552.08,1235.57 552.666,1232.43 553.253,1234.57 553.839,1236.7 554.426,1235.98 555.012,1235.41 555.599,1234.9 556.185,1234.32 556.771,1232.49 557.358,1234.48 557.944,1231.36 558.531,1233.53 559.117,1231.58 559.703,1233.81 560.29,1235.51 560.876,1236.36 561.463,1234.34 562.049,1232.9 562.635,1232.38 563.222,1232.08 563.808,1230.63 564.395,1230.17 564.981,1232.32 565.568,1230.7 566.154,1230.61 566.74,1231.6 567.327,1232.66 567.913,1232.23 568.5,1231.95 569.086,1231.62 569.672,1231.36 570.259,1230.9 570.845,1230.43 571.432,1232.16 572.018,1231.76 572.605,1231.05 573.191,1230.66 573.777,1232.95 574.364,1233.73 574.95,1235.51 575.537,1236.23 576.123,1235.34 576.709,1237.15 577.296,1237.75 577.882,1236.88 578.469,1231.21 579.055,1230.64 579.641,1233.74 580.228,1234.56 580.814,1231.57 581.401,1232.29 581.987,1235.68 582.574,1232.74 583.16,1231.02 583.746,1230.62 584.333,1228.89 584.919,1227.4 585.506,1227.28 586.092,1225.57 586.678,1223.98 587.265,1222.8 587.851,1225.1 588.438,1226.22 589.024,1226.52 589.61,1227.6 590.197,1227.23 590.783,1228.07 591.37,1230.23 591.956,1228.73 592.543,1228.39 593.129,1227.93 593.715,1227.7 594.302,1226.17 594.888,1228.53 595.475,1233.12 596.061,1228.6 596.647,1228.27 597.234,1228.04 597.82,1230.33 598.407,1226.29 598.993,1226.22 599.579,1225.84 600.166,1226.93 600.752,1224.28 601.339,1225.43 601.925,1226.69 602.512,1223.94 603.098,1226.44 603.684,1226.31 604.271,1226.11 604.857,1224.67 605.444,1220.7 606.03,1223.13 606.616,1221.81 607.203,1220.5 607.789,1221.76 608.376,1222.98 608.962,1222.95 609.548,1221.53 610.135,1224.2 610.721,1223.86 611.308,1223.84 611.894,1220.09 612.481,1221.43 613.067,1223.84 613.653,1225.21 614.24,1224.88 614.826,1224.69 615.413,1225.75 615.999,1227.85 616.585,1227.27 617.172,1226.57 617.758,1228.64 618.345,1226.95 618.931,1227.92 619.518,1226.11 620.104,1227.18 620.69,1229.44 621.277,1228.94 621.863,1229.76 622.45,1226.74 623.036,1228.96 623.622,1225.87 624.209,1226.75 624.795,1228.53 625.382,1228.1 625.968,1226.28 626.554,1224.84 627.141,1226.88 627.727,1226.42 628.314,1226.11 628.9,1230.66 629.487,1228.74 630.073,1228.08 630.659,1227.78 631.246,1226.91 631.832,1226.11 632.419,1224.46 633.005,1225.29 633.591,1222.51 634.178,1222.11 634.764,1223.22 635.351,1223.16 635.937,1219.25 636.523,1218.14 637.11,1218.05 637.696,1216.92 638.283,1216.91 638.869,1216.88 639.456,1216.61 640.042,1215.33 640.628,1215.49 641.215,1217.09 641.801,1217.92 642.388,1218.13 642.974,1220.89 643.56,1222.19 644.147,1222.21 644.733,1221.82 645.32,1222.85 645.906,1220.08 646.492,1220.98 647.079,1220.74 647.665,1221.89 648.252,1222.92 648.838,1224.05 649.425,1223.94 650.011,1222.39 650.597,1222.14 651.184,1223.01 651.77,1222.68 652.357,1222.31 652.943,1224.44 653.529,1225.56 654.116,1221.49 654.702,1223.85 655.289,1223.49 655.875,1221.75 656.462,1223.06 657.048,1222.87 657.634,1222.79 658.221,1217.6 658.807,1218.78 659.394,1217.62 659.98,1217.76 660.566,1219.06 661.153,1220.43 661.739,1217.59 662.326,1219.83 662.912,1219.45 663.498,1216.95 664.085,1215.8 664.671,1217.33 665.258,1215.8 665.844,1217.06 666.431,1217.04 667.017,1216.94 667.603,1216.81 668.19,1214.16 668.776,1214.64 669.363,1214.66 669.949,1217.4 670.535,1217.47 671.122,1217.19 671.708,1215.77 672.295,1214.6 672.881,1213.51 673.467,1212.54 674.054,1216.58 674.64,1215.63 675.227,1214.49 675.813,1214.54 676.4,1215.83 676.986,1214.64 677.572,1213.46 678.159,1213.69 678.745,1214.08 679.332,1212.97 679.918,1212.06 680.504,1212.49 681.091,1213.74 681.677,1215.18 682.264,1216.54 682.85,1215.35 683.436,1216.84 684.023,1213.01 684.609,1210.72 685.196,1210.02 685.782,1210.39 686.369,1210.88 686.955,1211.19 687.541,1210.32 688.128,1210.91 688.714,1212.5 689.301,1214.03 689.887,1215.13 690.473,1216.33 691.06,1216.12 691.646,1217.53 692.233,1219.92 692.819,1219.84 693.405,1220.62 693.992,1221.57 694.578,1222.33 695.165,1224.5 695.751,1224.04 696.338,1224.96 696.924,1225.68 697.51,1226.44 698.097,1224.74 698.683,1226.89 699.27,1223.77 699.856,1224.71 700.442,1221.93 701.029,1222.85 701.615,1222.13 702.202,1221.84 702.788,1222.78 703.375,1223.67 703.961,1222.17 704.547,1216.75 705.134,1214.32 705.72,1214.26 706.307,1214.34 706.893,1215.68 707.479,1218.09 708.066,1217.95 708.652,1217.56 709.239,1214.99 709.825,1216.44 710.411,1217.8 710.998,1216.12 711.584,1215.93 712.171,1214.35 712.757,1214.51 713.344,1214.51 713.93,1215.91 714.516,1213.38 715.103,1213.57 715.689,1212.3 716.276,1212.57 716.862,1213.87 717.448,1217.54 718.035,1216.16 718.621,1213.86 719.208,1212.52 719.794,1213.97 720.38,1215.41 720.967,1217.65 721.553,1219.04 722.14,1219.97 722.726,1219.24 723.313,1219.04 723.899,1218.79 724.485,1221.24 725.072,1219.94 725.658,1219.81 726.245,1218.18 726.831,1218.16 727.417,1217.85 728.004,1215.39 728.59,1217.87 729.177,1216.4 729.763,1216.32 730.349,1217.24 730.936,1217.01 731.522,1216.65 732.109,1217.9 732.695,1218.92 733.282,1217.54 733.868,1215.07 734.454,1216.41 735.041,1216.35 735.627,1216.2 736.214,1217.19 736.8,1218.08 737.386,1217.7 737.973,1220.11 738.559,1222.33 739.146,1220.54 739.732,1219.14 740.318,1218.82 740.905,1213.76 741.491,1213.83 742.078,1212.49 742.664,1213.6 743.251,1213.93 743.837,1215 744.423,1213.89 745.01,1214.01 745.596,1212.48 746.183,1212.62 746.769,1212.8 747.355,1212.92 747.942,1213.15 748.528,1213.15 749.115,1213.23 749.701,1214.72 750.288,1212.5 750.874,1213.82 751.46,1216.27 752.047,1213.53 752.633,1212.4 753.22,1211.15 753.806,1211.22 754.392,1213.55 754.979,1212.39 755.565,1216.13 756.152,1217.36 756.738,1219.6 757.324,1220.27 757.911,1219.66 758.497,1218.14 759.084,1217.95 759.67,1217.63 760.257,1218.56 760.843,1218.28 761.429,1218 762.016,1221.29 762.602,1221.27 763.189,1223.88 763.775,1221.98 764.361,1218.84 764.948,1218.41 765.534,1218.13 766.121,1216.59 766.707,1216.31 767.293,1218.73 767.88,1216.1 768.466,1217.31 769.053,1215.6 769.639,1216.64 770.226,1215.14 770.812,1215.28 771.398,1215.12 771.985,1216.11 772.571,1215.93 773.158,1216.1 773.744,1214.72 774.33,1214.66 774.917,1215.98 775.503,1216.12 776.09,1214.83 776.676,1216.06 777.262,1214.53 777.849,1213.14 778.435,1212.09 779.022,1211.02 779.608,1211.33 780.195,1214.18 780.781,1213.22 781.367,1217.06 781.954,1218.48 782.54,1222.09 783.127,1217.82 783.713,1216.37 784.299,1217.33 784.886,1215.9 785.472,1215.7 786.059,1213.06 786.645,1211.76 787.232,1210.73 787.818,1208.31 788.404,1208.86 788.991,1210.45 789.577,1211.77 790.164,1211.75 790.75,1213.15 791.336,1212.89 791.923,1210.78 792.509,1209.51 793.096,1207.13 793.682,1208.69 794.268,1211.48 794.855,1212.59 795.441,1213.93 796.028,1213.9 796.614,1215.13 797.201,1216.26 797.787,1216.22 798.373,1218.51 798.96,1220.72 799.546,1220.27 800.133,1219.68 800.719,1220.67 801.305,1220.49 801.892,1219.79 802.478,1219.46 803.065,1216.42 803.651,1213.55 804.237,1212.24 804.824,1213.76 805.41,1213.78 805.997,1213.85 806.583,1213.73 807.17,1213.52 807.756,1213.57 808.342,1213.39 808.929,1214.69 809.515,1215.8 810.102,1216.6 810.688,1214.96 811.274,1214.79 811.861,1213.56 812.447,1213.54 813.034,1212.19 813.62,1212.2 814.206,1212.29 814.793,1212.17 815.379,1213.23 815.966,1210.9 816.552,1211.07 817.139,1208.65 817.725,1208.81 818.311,1207.79 818.898,1207.99 819.484,1209.46 820.071,1209.55 820.657,1209.89 821.243,1209.76 821.83,1211.08 822.416,1212.51 823.003,1213.69 823.589,1212.23 824.175,1214.65 824.762,1213.36 825.348,1215.77 825.935,1216.91 826.521,1216.72 827.108,1216.23 827.694,1212.31 828.28,1211.13 828.867,1211.22 829.453,1212.49 830.04,1208.86 830.626,1210.37 831.212,1211.64 831.799,1210.53 832.385,1209.31 832.972,1212.09 833.558,1212.29 834.145,1212.37 834.731,1211.18 835.317,1210.2 835.904,1207.75 836.49,1209.44 837.077,1207.11 837.663,1207.39 838.249,1207.95 838.836,1208.23 839.422,1211.03 840.009,1210.9 840.595,1210.9 841.181,1212.25 841.768,1210.83 842.354,1208.59 842.941,1208.68 843.527,1211.37 844.114,1212.76 844.7,1211.48 845.286,1212.8 845.873,1215.26 846.459,1215.2 847.046,1212.58 847.632,1211.31 848.218,1212.79 848.805,1212.83 849.391,1212.79 849.978,1211.5 850.564,1210.61 851.15,1210.81 851.737,1210.81 852.323,1210.62 852.91,1210.81 853.496,1210.86 854.083,1211.06 854.669,1211.13 855.255,1211.07 855.842,1212.3 856.428,1211.14 857.015,1209.71 857.601,1209.82 858.187,1210.08 858.774,1212.49 859.36,1211.26 859.947,1211.39 860.533,1211.53 861.119,1211.7 861.706,1210.38 862.292,1213.19 862.879,1214.3 863.465,1216.93 864.052,1215.25 864.638,1215.13 865.224,1215 865.811,1213.58 866.397,1215.88 866.984,1214.48 867.57,1215.51 868.156,1213.94 868.743,1214.2 869.329,1216.69 869.916,1216.34 870.502,1216.09 871.089,1217.21 871.675,1217.08 872.261,1215.69 872.848,1216.91 873.434,1215.35 874.021,1220.2 874.607,1221.02 875.193,1217.95 875.78,1216.36 876.366,1218.67 876.953,1217.04 877.539,1215.56 878.125,1217.67 878.712,1217.42 879.298,1217.34 879.885,1215.74 880.471,1214.34 881.058,1213.21 881.644,1213.35 882.23,1211.74 882.817,1211.61 883.403,1210.53 883.99,1209.38 884.576,1210.75 885.162,1208.45 885.749,1208.64 886.335,1207.9 886.922,1206.75 887.508,1210.55 888.094,1210.66 888.681,1210.97 889.267,1211.11 889.854,1210.18 890.44,1212.84 891.027,1214.12 891.613,1211.49 892.199,1211.52 892.786,1210.33 893.372,1208.95 893.959,1211.56 894.545,1213.72 895.131,1210.07 895.718,1211.61 896.304,1211.26 896.891,1212.75 897.477,1213.91 898.063,1215.08 898.65,1215.04 899.236,1216.1 899.823,1216.92 900.409,1216.69 900.996,1215.23 901.582,1215.17 902.168,1216.47 902.755,1216.19 903.341,1215.27 903.928,1217.88 904.514,1215.08 905.1,1212.32 905.687,1212.1 906.273,1213.35 906.86,1215.54 907.446,1212.97 908.032,1212.82 908.619,1211.49 909.205,1211.8 909.792,1214.1 910.378,1217.75 910.965,1216.23 911.551,1215.89 912.137,1218.02 912.724,1218.75 913.31,1214.59 913.897,1218.14 914.483,1216.54 915.069,1217.6 915.656,1217.33 916.242,1217.13 916.829,1217 917.415,1215.56 918.002,1216.57 918.588,1216.46 919.174,1217.13 919.761,1217.84 920.347,1217.55 920.934,1217.19 921.52,1216.86 922.106,1215.28 922.693,1213.91 923.279,1215.05 923.866,1214.63 924.452,1213.1 925.038,1207.98 925.625,1210.62 926.211,1211.7 926.798,1211.72 927.384,1211.54 927.971,1215.3 928.557,1217.41 929.143,1218.6 929.73,1218.4 930.316,1218.06 930.903,1217.84 931.489,1217.7 932.075,1218.42 932.662,1216.75 933.248,1217.57 933.835,1217.34 934.421,1217.19 935.007,1215.44 935.594,1216.46 936.18,1212.59 936.767,1211.32 937.353,1211.32 937.94,1213.93 938.526,1215.11 939.112,1212.25 939.699,1213.48 940.285,1212.21 940.872,1213.22 941.458,1210.55 942.044,1213.18 942.631,1213.12 943.217,1214.34 943.804,1214.44 944.39,1211.87 944.976,1210.67 945.563,1212.06 946.149,1209.51 946.736,1209.77 947.322,1211.06 947.909,1211.11 948.495,1211.02 949.081,1212.14 949.668,1213.41 950.254,1211.82 950.841,1212.92 951.427,1210.14 952.013,1207.64 952.6,1207.96 953.186,1208.06 953.773,1208.3 954.359,1208.24 954.945,1207.48 955.532,1210.08 956.118,1210.39 956.705,1209.13 957.291,1207.88 957.878,1209.67 958.464,1209.86 959.05,1209.78 959.637,1210 960.223,1210.03 960.81,1207.81 961.396,1206.9 961.982,1208.31 962.569,1205.92 963.155,1211.01 963.742,1209.6 964.328,1209.79 964.915,1211.9 965.501,1210.9 966.087,1212.36 966.674,1211.06 967.26,1211.13 967.847,1213.65 968.433,1213.59 969.019,1212.24 969.606,1211.03 970.192,1211.13 970.779,1213.36 971.365,1214.61 971.951,1214.25 972.538,1213.94 973.124,1212.56 973.711,1210.03 974.297,1211.52 974.884,1210.37 975.47,1210.5 976.056,1209.44 976.643,1209.52 977.229,1210.85 977.816,1209.9 978.402,1209.92 978.988,1211.04 979.575,1212.47 980.161,1212.36 980.748,1212.08 981.334,1215.71 981.92,1216.65 982.507,1216.25 983.093,1216.88 983.68,1218.15 984.266,1216.34 984.853,1214.94 985.439,1213.1 986.025,1210.36 986.612,1210.25 987.198,1211.46 987.785,1211.53 988.371,1211.43 988.957,1211.46 989.544,1209.02 990.13,1207.98 990.717,1206.58 991.303,1208.27 991.889,1206.96 992.476,1207.24 993.062,1207.49 993.649,1205.27 994.235,1204.62 994.822,1206.18 995.408,1205.05 995.994,1204.25 996.581,1207.12 997.167,1207.26 997.754,1206.03 998.34,1207.57 998.926,1209.96 999.513,1212.51 1000.1,1211.09 1000.69,1211.28 1001.27,1211.26 1001.86,1213.62 1002.44,1215.13 1003.03,1214.94 1003.62,1214.86 1004.2,1214.73 1004.79,1214.49 1005.38,1215.57 1005.96,1215.16 1006.55,1214.95 1007.14,1214.6 1007.72,1214.4 1008.31,1213.96 1008.9,1212.71 1009.48,1210.31 1010.07,1211.43 1010.65,1211.23 1011.24,1209.81 1011.83,1211.35 1012.41,1211.37 1013,1215.07 1013.59,1217.4 1014.17,1215.76 1014.76,1216.84 1015.35,1214.02 1015.93,1211.37 1016.52,1211.29 1017.11,1213.56 1017.69,1212.08 1018.28,1206.94 1018.86,1205.87 1019.45,1206.6 1020.04,1205.38 1020.62,1204.51 1021.21,1207.41 1021.8,1206.52 1022.38,1207.93 1022.97,1209.33 1023.56,1209.57 1024.14,1207.36 1024.73,1207.36 1025.32,1208.93 1025.9,1207.67 1026.49,1206.66 1027.07,1206.86 1027.66,1206.96 1028.25,1204.8 1028.83,1206.54 1029.42,1209.44 1030.01,1212.28 1030.59,1213.48 1031.18,1215.77 1031.77,1219.41 1032.35,1218.74 1032.94,1218.25 1033.52,1216.64 1034.11,1216.38 1034.7,1218.51 1035.28,1217 1035.87,1216.6 1036.46,1216.43 1037.04,1218.28 1037.63,1218.06 1038.22,1217.9 1038.8,1217.76 1039.39,1217.39 1039.98,1217.24 1040.56,1215.9 1041.15,1216.94 1041.73,1216.48 1042.32,1217.59 1042.91,1217.36 1043.49,1215.71 1044.08,1215.89 1044.67,1215.53 1045.25,1213.97 1045.84,1214.09 1046.43,1211.66 1047.01,1211.84 1047.6,1209.59 1048.19,1209.76 1048.77,1209.8 1049.36,1208.59 1049.94,1206.15 1050.53,1205.17 1051.12,1208.08 1051.7,1206.26 1052.29,1206.39 1052.88,1206.46 1053.46,1207.13 1054.05,1207.24 1054.64,1205.17 1055.22,1203.99 1055.81,1203.24 1056.39,1204.99 1056.98,1206.62 1057.57,1206.68 1058.15,1204.26 1058.74,1202.52 1059.33,1203.05 1059.91,1202.19 1060.5,1201.3 1061.09,1205.64 1061.67,1207.17 1062.26,1205.97 1062.85,1207.68 1063.43,1207.95 1064.02,1208.1 1064.6,1208.29 1065.19,1208.81 1065.78,1207.74 1066.36,1205.51 1066.95,1208.35 1067.54,1209.86 1068.12,1213.79 1068.71,1213.54 1069.3,1213.5 1069.88,1213.34 1070.47,1213.5 1071.06,1214.51 1071.64,1215.57 1072.23,1216.77 1072.81,1215.23 1073.4,1213.63 1073.99,1213.33 1074.57,1210.72 1075.16,1210.93 1075.75,1209.79 1076.33,1212.46 1076.92,1210.81 1077.51,1211.84 1078.09,1211.77 1078.68,1210.22 1079.26,1210.68 1079.85,1210.71 1080.44,1209.33 1081.02,1210.76 1081.61,1212.44 1082.2,1212.2 1082.78,1210.38 1083.37,1210.39 1083.96,1211.81 1084.54,1214.33 1085.13,1214.26 1085.72,1215.32 1086.3,1213.59 1086.89,1212.22 1087.47,1211.03 1088.06,1209.85 1088.65,1211.28 1089.23,1212.35 1089.82,1212.12 1090.41,1212.09 1090.99,1209.38 1091.58,1209.52 1092.17,1208.16 1092.75,1209.74 1093.34,1210.94 1093.93,1209.73 1094.51,1208.62 1095.1,1208.62 1095.68,1207.7 1096.27,1209.18 1096.86,1209.35 1097.44,1209.2 1098.03,1208.24 1098.62,1209.85 1099.2,1210.19 1099.79,1208.86 1100.38,1211.09 1100.96,1209.85 1101.55,1207.28 1102.14,1205.06 1102.72,1205.32 1103.31,1204.32 1103.89,1204.49 1104.48,1204.73 1105.07,1207.59 1105.65,1209.2 1106.24,1209.34 1106.83,1211.87 1107.41,1211.73 1108,1211.8 1108.59,1211.9 1109.17,1211.72 1109.76,1208.12 1110.34,1210.81 1110.93,1212.16 1111.52,1214.68 1112.1,1212.24 1112.69,1209.77 1113.28,1210.72 1113.86,1210.74 1114.45,1212.12 1115.04,1211.79 1115.62,1212.72 1116.21,1214.02 1116.8,1213.86 1117.38,1212.69 1117.97,1214.92 1118.55,1215.68 1119.14,1215.21 1119.73,1216.31 1120.31,1217.22 1120.9,1217.06 1121.49,1216.8 1122.07,1216.44 1122.66,1216.23 1123.25,1215.82 1123.83,1216.98 1124.42,1216.66 1125.01,1217.73 1125.59,1217.59 1126.18,1213.53 1126.76,1212.23 1127.35,1213.53 1127.94,1214.77 1128.52,1211.72 1129.11,1209.35 1129.7,1211.66 1130.28,1210.46 1130.87,1206.8 1131.46,1204.6 1132.04,1207.41 1132.63,1205.3 1133.21,1205.46 1133.8,1207.05 1134.39,1204.91 1134.97,1205.26 1135.56,1208.84 1136.15,1211.62 1136.73,1209.19 1137.32,1209.47 1137.91,1209.65 1138.49,1212.11 1139.08,1210.79 1139.67,1214.64 1140.25,1215.79 1140.84,1215.54 1141.42,1213.54 1142.01,1213.2 1142.6,1215.72 1143.18,1216.9 1143.77,1217.99 1144.36,1217.63 1144.94,1217.4 1145.53,1218.28 1146.12,1215.6 1146.7,1214.15 1147.29,1215.02 1147.88,1214.74 1148.46,1213.14 1149.05,1210.24 1149.63,1211.2 1150.22,1211.42 1150.81,1211.28 1151.39,1211.42 1151.98,1213.88 1152.57,1214.89 1153.15,1216.95 1153.74,1215.26 1154.33,1213.74 1154.91,1212.54 1155.5,1216.17 1156.09,1217.05 1156.67,1216.86 1157.26,1217.98 1157.84,1216.41 1158.43,1215.94 1159.02,1215.67 1159.6,1214.18 1160.19,1215.22 1160.78,1216.21 1161.36,1213.27 1161.95,1214.35 1162.54,1215.57 1163.12,1215.15 1163.71,1211.13 1164.29,1210.73 1164.88,1213.14 1165.47,1209.22 1166.05,1206.76 1166.64,1205.64 1167.23,1204.63 1167.81,1203.68 1168.4,1204.08 1168.99,1206.7 1169.57,1209.5 1170.16,1208.55 1170.75,1210.01 1171.33,1210.11 1171.92,1209.06 1172.5,1209.1 1173.09,1210.27 1173.68,1210.5 1174.26,1211.7 1174.85,1210.36 1175.44,1210.4 1176.02,1207.6 1176.61,1205.01 1177.2,1204.08 1177.78,1203.18 1178.37,1201.04 1178.96,1202.65 1179.54,1201.94 1180.13,1201.15 1180.71,1201.41 1181.3,1203.19 1181.89,1202.32 1182.47,1202.97 1183.06,1202.52 1183.65,1201.39 1184.23,1203.21 1184.82,1202.2 1185.41,1201.27 1185.99,1200.66 1186.58,1202.36 1187.16,1205.36 1187.75,1208.11 1188.34,1206.81 1188.92,1204.7 1189.51,1202.42 1190.1,1203.96 1190.68,1205.79 1191.27,1203.66 1191.86,1205.26 1192.44,1204.43 1193.03,1205.87 1193.62,1207.26 1194.2,1206.09 1194.79,1206.37 1195.37,1204.22 1195.96,1205.76 1196.55,1210.98 1197.13,1212.25 1197.72,1211.07 1198.31,1213.62 1198.89,1212.39 1199.48,1211.01 1200.07,1210.85 1200.65,1209.68 1201.24,1211.05 1201.83,1211 1202.41,1211.35 1203,1209.91 1203.58,1211.15 1204.17,1210.96 1204.76,1210.94 1205.34,1212.27 1205.93,1212.33 1206.52,1211.14 1207.1,1213.67 1207.69,1214.77 1208.28,1214.54 1208.86,1211.78 1209.45,1213.08 1210.03,1212.75 1210.62,1213.72 1211.21,1209.91 1211.79,1211.41 1212.38,1208.92 1212.97,1210.58 1213.55,1213.17 1214.14,1213.34 1214.73,1215.85 1215.31,1215.9 1215.9,1218.04 1216.49,1217.62 1217.07,1216.06 1217.66,1214.71 1218.24,1215.94 1218.83,1215.85 1219.42,1213.04 1220,1212.91 1220.59,1214.29 1221.18,1212.77 1221.76,1213.83 1222.35,1216.16 1222.94,1214.86 1223.52,1213.23 1224.11,1214.49 1224.7,1213.06 1225.28,1214.09 1225.87,1214.11 1226.45,1214.78 1227.04,1214.55 1227.63,1213.28 1228.21,1217.23 1228.8,1215.42 1229.39,1214.99 1229.97,1214.38 1230.56,1215.3 1231.15,1214.97 1231.73,1216.13 1232.32,1219.55 1232.91,1217.47 1233.49,1219.6 1234.08,1216.49 1234.66,1213.62 1235.25,1213.46 1235.84,1211.92 1236.42,1210.47 1237.01,1209.35 1237.6,1209.25 1238.18,1208.95 1238.77,1207.71 1239.36,1208.06 1239.94,1210.89 1240.53,1209.76 1241.11,1210.98 1241.7,1213.45 1242.29,1215.88 1242.87,1215.88 1243.46,1209.32 1244.05,1208.3 1244.63,1210.73 1245.22,1214.42 1245.81,1212.98 1246.39,1211.63 1246.98,1211.62 1247.57,1208.04 1248.15,1205.55 1248.74,1205.89 1249.32,1206.12 1249.91,1206.51 1250.5,1206.58 1251.08,1205.82 1251.67,1208.4 1252.26,1208.7 1252.84,1210.1 1253.43,1212.56 1254.02,1215.02 1254.6,1216.06 1255.19,1215.83 1255.78,1218.15 1256.36,1220.3 1256.95,1223.34 1257.53,1223.61 1258.12,1220.83 1258.71,1221.64 1259.29,1219.86 1259.88,1222.78 1260.47,1223.28 1261.05,1223.55 1261.64,1221.59 1262.23,1220.92 1262.81,1219.04 1263.4,1215.93 1263.98,1215.49 1264.57,1213.83 1265.16,1215.17 1265.74,1211.05 1266.33,1208.62 1266.92,1208.97 1267.5,1210.33 1268.09,1210.46 1268.68,1211.68 1269.26,1209 1269.85,1209.89 1270.44,1210.26 1271.02,1210.55 1271.61,1210.72 1272.19,1211.94 1272.78,1210.72 1273.37,1211.88 1273.95,1211.91 1274.54,1210.55 1275.13,1211.6 1275.71,1209.22 1276.3,1209.09 1276.89,1208.02 1277.47,1208.22 1278.06,1208.41 1278.65,1208.42 1279.23,1204.59 1279.82,1204.85 1280.4,1206.51 1280.99,1207.83 1281.58,1208.02 1282.16,1210.67 1282.75,1209.44 1283.34,1210.65 1283.92,1210.71 1284.51,1210.75 1285.1,1210.97 1285.68,1209.9 1286.27,1204.63 1286.86,1203.96 1287.44,1205.32 1288.03,1206.73 1288.61,1207.03 1289.2,1207.29 1289.79,1207.27 1290.37,1204.76 1290.96,1202.53 1291.55,1203 1292.13,1202 1292.72,1202.15 1293.31,1205.23 1293.89,1206.72 1294.48,1206.94 1295.06,1204.66 1295.65,1206.23 1296.24,1205.33 1296.82,1205.69 1297.41,1205.97 1298,1206.37 1298.58,1207.75 1299.17,1211.72 1299.76,1212.92 1300.34,1212.72 1300.93,1211.38 1301.52,1211.46 1302.1,1212.6 1302.69,1210.94 1303.27,1209.69 1303.86,1215.85 1304.45,1215.39 1305.03,1215.11 1305.62,1215.04 1306.21,1212.25 1306.79,1212.18 1307.38,1210.65 1307.97,1208.99 1308.55,1210.14 1309.14,1207.49 1309.73,1207.64 1310.31,1205.3 1310.9,1204.12 1311.48,1207.99 1312.07,1206.98 1312.66,1209.61 1313.24,1212.13 1313.83,1213.23 1314.42,1213.05 1315,1212.75 1315.59,1212.59 1316.18,1212.76 1316.76,1208.66 1317.35,1209.71 1317.93,1208.3 1318.52,1207.22 1319.11,1208.58 1319.69,1208.91 1320.28,1210.09 1320.87,1211.32 1321.45,1210.07 1322.04,1210.15 1322.63,1208.66 1323.21,1211.01 1323.8,1211.05 1324.39,1212.2 1324.97,1210.83 1325.56,1217.36 1326.14,1220.79 1326.73,1217.54 1327.32,1215.9 1327.9,1219.18 1328.49,1217.55 1329.08,1218.6 1329.66,1218.13 1330.25,1217.95 1330.84,1216.41 1331.42,1216.12 1332.01,1214.57 1332.6,1210.65 1333.18,1210.7 1333.77,1210.57 1334.35,1210.6 1334.94,1209.42 1335.53,1208.14 1336.11,1208.23 1336.7,1205.95 1337.29,1204.87 1337.87,1210 1338.46,1210.31 1339.05,1211.45 1339.63,1208.91 1340.22,1209.07 1340.8,1209.37 1341.39,1206.89 1341.98,1208.24 1342.56,1208.33 1343.15,1207.51 1343.74,1206.24 1344.32,1207.83 1344.91,1205.41 1345.5,1205.67 1346.08,1205.98 1346.67,1206.39 1347.26,1205.59 1347.84,1206.94 1348.43,1204.72 1349.01,1205.28 1349.6,1204.16 1350.19,1205.61 1350.77,1204.72 1351.36,1206.39 1351.95,1210.54 1352.53,1209.4 1353.12,1209.44 1353.71,1210.71 1354.29,1209.28 1354.88,1210.28 1355.47,1211.52 1356.05,1212.57 1356.64,1212.59 1357.22,1212.37 1357.81,1211.42 1358.4,1210.23 1358.98,1209.13 1359.57,1211.56 1360.16,1212.65 1360.74,1212.51 1361.33,1216.27 1361.92,1218.38 1362.5,1216.93 1363.09,1211.76 1363.68,1209.15 1364.26,1209.25 1364.85,1209.42 1365.43,1208.4 1366.02,1207.12 1366.61,1204.84 1367.19,1202.89 1367.78,1201.9 1368.37,1203.41 1368.95,1205.05 1369.54,1206.65 1370.13,1205.64 1370.71,1207.07 1371.3,1207.23 1371.88,1207.41 1372.47,1207.43 1373.06,1207.47 1373.64,1208.92 1374.23,1209.21 1374.82,1208.08 1375.4,1207.95 1375.99,1207.91 1376.58,1207.13 1377.16,1207.36 1377.75,1209.17 1378.34,1210.53 1378.92,1213.1 1379.51,1215.3 1380.09,1214.94 1380.68,1215.82 1381.27,1216.7 1381.85,1216.48 1382.44,1213.89 1383.03,1212.26 1383.61,1213.69 1384.2,1213.64 1384.79,1210 1385.37,1209.99 1385.96,1208.56 1386.55,1206.01 1387.13,1204.85 1387.72,1206.68 1388.3,1209.44 1388.89,1209.56 1389.48,1209.51 1390.06,1209.53 1390.65,1208.3 1391.24,1208.24 1391.82,1210.73 1392.41,1210.78 1393,1212.15 1393.58,1212 1394.17,1213.37 1394.75,1213.08 1395.34,1209.13 1395.93,1207.89 1396.51,1208.12 1397.1,1211.01 1397.69,1210.97 1398.27,1210.77 1398.86,1210.73 1399.45,1205.82 1400.03,1205.05 1400.62,1206.59 1401.21,1206.85 1401.79,1206.86 1402.38,1206.31 1402.96,1207.84 1403.55,1211.76 1404.14,1211.73 1404.72,1213.07 1405.31,1212.79 1405.9,1210.11 1406.48,1206.41 1407.07,1207.82 1407.66,1207.86 1408.24,1207.87 1408.83,1206.87 1409.42,1204.39 1410,1205.92 1410.59,1207.38 1411.17,1206.3 1411.76,1207.62 1412.35,1209.16 1412.93,1209.15 1413.52,1208.14 1414.11,1208.27 1414.69,1207.16 1415.28,1208.44 1415.87,1206.3 1416.45,1209.39 1417.04,1210.49 1417.63,1210.57 1418.21,1214.23 1418.8,1213.81 1419.38,1213.87 1419.97,1212.53 1420.56,1212.9 1421.14,1212.72 1421.73,1209.83 1422.32,1207.4 1422.9,1207.6 1423.49,1210.22 1424.08,1211.37 1424.66,1212.52 1425.25,1213.15 1425.83,1215.67 1426.42,1215.3 1427.01,1213.74 1427.59,1212.61 1428.18,1212.28 1428.77,1212.28 1429.35,1210.9 1429.94,1211.36 1430.53,1212.52 1431.11,1214.94 1431.7,1213.55 1432.29,1213.38 1432.87,1213.32 1433.46,1213.25 1434.04,1214.33 1434.63,1212.88 1435.22,1210.64 1435.8,1211.94 1436.39,1210.77 1436.98,1212.25 1437.56,1210.98 1438.15,1209.62 1438.74,1210.87 1439.32,1209.98 1439.91,1208.69 1440.5,1207.4 1441.08,1207.68 1441.67,1207.64 1442.25,1207.77 1442.84,1206.46 1443.43,1207.69 1444.01,1209.15 1444.6,1208.7 1445.19,1211.14 1445.77,1213.83 1446.36,1213.7 1446.95,1212.56 1447.53,1212.37 1448.12,1210.8 1448.7,1209.67 1449.29,1207.29 1449.88,1204.96 1450.46,1207.84 1451.05,1210.43 1451.64,1211.48 1452.22,1209.93 1452.81,1211.25 1453.4,1212.56 1453.98,1213.53 1454.57,1212.27 1455.16,1212.21 1455.74,1210.71 1456.33,1209.26 1456.91,1210.56 1457.5,1210.63 1458.09,1211.65 1458.67,1212.85 1459.26,1213.95 1459.85,1215.09 1460.43,1211.2 1461.02,1210.04 1461.61,1208.77 1462.19,1207.49 1462.78,1207.66 1463.37,1207.81 1463.95,1206.36 1464.54,1206.46 1465.12,1206.52 1465.71,1207.84 1466.3,1208.14 1466.88,1209.39 1467.47,1210.62 1468.06,1210.89 1468.64,1213.37 1469.23,1214.4 1469.82,1214.15 1470.4,1215.11 1470.99,1215.83 1471.57,1215.68 1472.16,1214.2 1472.75,1215.29 1473.33,1213.73 1473.92,1214.75 1474.51,1215.9 1475.09,1215.68 1475.68,1215.46 1476.27,1213.85 1476.85,1217.07 1477.44,1214.19 1478.03,1213.87 1478.61,1214.86 1479.2,1215.73 1479.78,1218.11 1480.37,1216.62 1480.96,1217.49 1481.54,1214.67 1482.13,1214.57 1482.72,1214.43 1483.3,1213.9 1483.89,1214.76 1484.48,1213.13 1485.06,1215.44 1485.65,1213.76 1486.24,1212.67 1486.82,1214.98 1487.41,1214.87 1487.99,1215.81 1488.58,1218.11 1489.17,1219.08 1489.75,1217.34 1490.34,1215.93 1490.93,1213.27 1491.51,1211.98 1492.1,1210.78 1492.69,1210.71 1493.27,1210.53 1493.86,1210.61 1494.45,1209.23 1495.03,1206.89 1495.62,1204.88 1496.2,1206.41 1496.79,1204.19 1497.38,1204.62 1497.96,1203.81 1498.55,1204.16 1499.14,1205.64 1499.72,1202.04 1500.31,1198.77 1500.9,1199.15 1501.48,1202.12 1502.07,1204.96 1502.65,1207.67 1503.24,1208.98 1503.83,1209.17 1504.41,1209.23 1505,1209.34 1505.59,1208.13 1506.17,1209.24 1506.76,1208.43 1507.35,1205.97 1507.93,1206.13 1508.52,1205.27 1509.11,1202.99 1509.69,1203.44 1510.28,1199.93 1510.86,1197.75 1511.45,1203.68 1512.04,1204.31 1512.62,1204.78 1513.21,1202.82 1513.8,1204.56 1514.38,1208.65 1514.97,1207.21 1515.56,1208.61 1516.14,1208.66 1516.73,1208.81 1517.32,1205.38 1517.9,1205.75 1518.49,1203.37 1519.07,1203.72 1519.66,1205.07 1520.25,1207.95 1520.83,1208.18 1521.42,1209.51 1522.01,1210.6 1522.59,1209.54 1523.18,1209.34 1523.77,1209.33 1524.35,1208.23 1524.94,1211.92 1525.52,1210.5 1526.11,1211.91 1526.7,1214.24 1527.28,1210.23 1527.87,1208.97 1528.46,1210.29 1529.04,1210.25 1529.63,1210.49 1530.22,1209.14 1530.8,1205.6 1531.39,1206.09 1531.98,1207.5 1532.56,1206.47 1533.15,1208.9 1533.73,1209.16 1534.32,1210.51 1534.91,1210.36 1535.49,1211.45 1536.08,1212.86 1536.67,1209.21 1537.25,1210.47 1537.84,1212.74 1538.43,1211.56 1539.01,1212.84 1539.6,1212.85 1540.19,1212.68 1540.77,1213.89 1541.36,1212.17 1541.94,1210.85 1542.53,1210.65 1543.12,1208.29 1543.7,1207.03 1544.29,1206.79 1544.88,1209.42 1545.46,1210.75 1546.05,1211.93 1546.64,1211.93 1547.22,1215.66 1547.81,1214.22 1548.4,1216.53 1548.98,1215.84 1549.57,1215.69 1550.15,1214.29 1550.74,1212.95 1551.33,1211.42 1551.91,1212.68 1552.5,1213.78 1553.09,1212.32 1553.67,1209.79 1554.26,1210.92 1554.85,1212.26 1555.43,1214.61 1556.02,1215.29 1556.6,1214.89 1557.19,1215.89 1557.78,1215.85 1558.36,1214.36 1558.95,1219.43 1559.54,1219.1 1560.12,1218.75 1560.71,1216.99 1561.3,1217.84 1561.88,1218.82 1562.47,1215.97 1563.06,1216.71 1563.64,1217.24 1564.23,1216.72 1564.81,1217.81 1565.4,1217.61 1565.99,1217.01 1566.57,1216.56 1567.16,1216.36 1567.75,1212.31 1568.33,1212.23 1568.92,1213.61 1569.51,1214.9 1570.09,1212.32 1570.68,1212.05 1571.27,1209.48 1571.85,1207.17 1572.44,1208.45 1573.02,1207.4 1573.61,1208.84 1574.2,1206.39 1574.78,1207.76 1575.37,1209.18 1575.96,1208.02 1576.54,1208.1 1577.13,1214.42 1577.72,1211.62 1578.3,1210.23 1578.89,1211.54 1579.47,1212.7 1580.06,1214.22 1580.65,1214.09 1581.23,1212.55 1581.82,1212.36 1582.41,1208.36 1582.99,1208.29 1583.58,1208.51 1584.17,1206.09 1584.75,1206.4 1585.34,1208.06 1585.93,1208.02 1586.51,1205.83 1587.1,1205.88 1587.68,1204.79 1588.27,1206.15 1588.86,1209 1589.44,1210.25 1590.03,1210.47 1590.62,1210.66 1591.2,1213.3 1591.79,1214.41 1592.38,1215.47 1592.96,1218.54 1593.55,1217.96 1594.14,1216.51 1594.72,1215.01 1595.31,1213.28 1595.89,1214.37 1596.48,1214.24 1597.07,1210.35 1597.65,1210.31 1598.24,1212.84 1598.83,1211.53 1599.41,1210.23 1600,1207.88 1600.59,1207.71 1601.17,1207.97 1601.76,1208.2 1602.34,1207.12 1602.93,1207.58 1603.52,1209.2 1604.1,1211.54 1604.69,1210.15 1605.28,1211.16 1605.86,1209.98 1606.45,1211.37 1607.04,1209.87 1607.62,1208.34 1608.21,1209.56 1608.8,1208.35 1609.38,1207.4 1609.97,1207.76 1610.55,1207.81 1611.14,1206.96 1611.73,1208.31 1612.31,1207.34 1612.9,1208.71 1613.49,1208.65 1614.07,1207.59 1614.66,1212.93 1615.25,1211.67 1615.83,1210.13 1616.42,1210.08 1617.01,1210.11 1617.59,1210.11 1618.18,1210.2 1618.76,1210.22 1619.35,1209.17 1619.94,1209.29 1620.52,1208.41 1621.11,1209.68 1621.7,1207.15 1622.28,1206.09 1622.87,1207.52 1623.46,1206.61 1624.04,1204.61 1624.63,1205.03 1625.22,1205.34 1625.8,1206.6 1626.39,1206.67 1626.97,1209.41 1627.56,1208.34 1628.15,1208.46 1628.73,1207.47 1629.32,1204.99 1629.91,1207.59 1630.49,1206.32 1631.08,1207.79 1631.67,1207.61 1632.25,1210.21 1632.84,1210.28 1633.42,1208.96 1634.01,1209.16 1634.6,1209.37 1635.18,1208.53 1635.77,1207.55 1636.36,1205.26 1636.94,1205.55 1637.53,1204.59 1638.12,1201.11 1638.7,1201.5 1639.29,1201.8 1639.88,1203.46 1640.46,1203.98 1641.05,1204.44 1641.63,1205.87 1642.22,1208.53 1642.81,1209.91 1643.39,1208.67 1643.98,1208.78 1644.57,1209 1645.15,1212.71 1645.74,1212.62 1646.33,1215.22 1646.91,1216.39 1647.5,1214.94 1648.09,1213.5 1648.67,1213.47 1649.26,1213.52 1649.84,1212.38 1650.43,1212.19 1651.02,1212.21 1651.6,1212.18 1652.19,1209.9 1652.78,1208.76 1653.36,1211.27 1653.95,1213.63 1654.54,1209.87 1655.12,1209.9 1655.71,1208.74 1656.29,1211.43 1656.88,1212.79 1657.47,1208.99 1658.05,1210.08 1658.64,1209.04 1659.23,1209.19 1659.81,1210.59 1660.4,1211.78 1660.99,1211.52 1661.57,1210.01 1662.16,1211.25 1662.75,1211.23 1663.33,1209.92 1663.92,1208.52 1664.5,1207.36 1665.09,1207.51 1665.68,1206.39 1666.26,1209.1 1666.85,1209.29 1667.44,1208.07 1668.02,1209.61 1668.61,1210.81 1669.2,1213.17 1669.78,1211.64 1670.37,1211.53 1670.96,1210.12 1671.54,1209.09 1672.13,1208.21 1672.71,1209.94 1673.3,1211.2 1673.89,1212.61 1674.47,1214.04 1675.06,1213.94 1675.65,1217.53 1676.23,1218.57 1676.82,1218.31 1677.41,1219.07 1677.99,1222.33 1678.58,1221.65 1679.17,1222.06 1679.75,1221.59 1680.34,1221.07 1680.92,1221.71 1681.51,1219.92 1682.1,1217.81 1682.68,1221.18 1683.27,1219.26 1683.86,1216.12 1684.44,1214.46 1685.03,1211.65 1685.62,1208.91 1686.2,1210.19 1686.79,1210.35 1687.37,1209.11 1687.96,1209.33 1688.55,1209.23 1689.13,1211.83 1689.72,1213.18 1690.31,1212.92 1690.89,1212.65 1691.48,1211.08 1692.07,1212.38 1692.65,1211.22 1693.24,1209.73 1693.83,1211.02 1694.41,1213.56 1695,1212.06 1695.58,1211.59 1696.17,1210.14 1696.76,1210.02 1697.34,1209.96 1697.93,1210.01 1698.52,1208.9 1699.1,1210.57 1699.69,1212.31 1700.28,1213.46 1700.86,1213.48 1701.45,1217.05 1702.04,1218.12 1702.62,1218.88 1703.21,1215.89 1703.79,1213.14 1704.38,1214.12 1704.97,1213.83 1705.55,1213.62 1706.14,1211.01 1706.73,1213.72 1707.31,1213.53 1707.9,1211.84 1708.49,1209.1 1709.07,1210.18 1709.66,1208.9 1710.24,1208.79 1710.83,1210.01 1711.42,1211.19 1712,1212.19 1712.59,1215.62 1713.18,1215.43 1713.76,1215.19 1714.35,1213.73 1714.94,1214.68 1715.52,1212.94 1716.11,1208.04 1716.7,1208.23 1717.28,1209.65 1717.87,1210.87 1718.45,1209.75 1719.04,1208.48 1719.63,1207.48 1720.21,1206.14 1720.8,1201.49 1721.39,1202.08 1721.97,1202.63 1722.56,1205.4 1723.15,1204.39 1723.73,1204.82 1724.32,1206.39 1724.91,1210.43 1725.49,1209.15 1726.08,1210.54 1726.66,1210.81 1727.25,1211.86 1727.84,1209.48 1728.42,1208.31 1729.01,1209.82 1729.6,1209.54 1730.18,1209.67 1730.77,1207.36 1731.36,1207.55 1731.94,1206.61 1732.53,1205.71 1733.11,1207.25 1733.7,1205 1734.29,1205.32 1734.87,1203.32 1735.46,1204.63 1736.05,1206.26 1736.63,1207.68 1737.22,1207.75 1737.81,1208.9 1738.39,1211.43 1738.98,1210.27 1739.57,1209.18 1740.15,1210.2 1740.74,1212.91 1741.32,1207.68 1741.91,1208.98 1742.5,1207.86 1743.08,1208.22 1743.67,1208.5 1744.26,1208.76 1744.84,1210.09 1745.43,1212.53 1746.02,1212.4 1746.6,1216.23 1747.19,1217.18 1747.78,1215.62 1748.36,1215.24 1748.95,1212.75 1749.53,1212.84 1750.12,1213.7 1750.71,1215.94 1751.29,1215.42 1751.88,1211.59 1752.47,1211.64 1753.05,1211.51 1753.64,1211.56 1754.23,1211.28 1754.81,1211.2 1755.4,1210.03 1755.99,1209.76 1756.57,1209.77 1757.16,1209.63 1757.74,1208.36 1758.33,1208.47 1758.92,1209.81 1759.5,1208.52 1760.09,1209.81 1760.68,1208.66 1761.26,1208.83 1761.85,1208.98 1762.44,1210.32 1763.02,1209.28 1763.61,1210.85 1764.19,1209.51 1764.78,1208.37 1765.37,1207.09 1765.95,1208.67 1766.54,1208.85 1767.13,1210 1767.71,1209.79 1768.3,1213.46 1768.89,1213.29 1769.47,1213.12 1770.06,1214.15 1770.65,1211.25 1771.23,1208.93 1771.82,1211.58 1772.4,1210.33 1772.99,1209.2 1773.58,1207.78 1774.16,1209.23 1774.75,1210.3 1775.34,1210.48 1775.92,1210.43 1776.51,1210.78 1777.1,1213.18 1777.68,1214.18 1778.27,1213.96 1778.86,1215.23 1779.44,1215.11 1780.03,1211.1 1780.61,1213.46 1781.2,1214.63 1781.79,1214.66 1782.37,1214.62 1782.96,1213.47 1783.55,1213.13 1784.13,1211.75 1784.72,1211.85 1785.31,1211.9 1785.89,1211.91 1786.48,1213.05 1787.06,1212.6 1787.65,1211.05 1788.24,1209.65 1788.82,1211.29 1789.41,1212.39 1790,1210.93 1790.58,1212.27 1791.17,1214.73 1791.76,1213.3 1792.34,1213.2 1792.93,1212.04 1793.52,1211.85 1794.1,1214.14 1794.69,1211.46 1795.27,1208.9 1795.86,1208.8 1796.45,1210.19 1797.03,1210.24 1797.62,1208.96 1798.21,1209.16 1798.79,1209.15 1799.38,1207.69 1799.97,1207.7 1800.55,1205.46 1801.14,1206.83 1801.73,1207.07 1802.31,1207.18 1802.9,1205.89 1803.48,1207.19 1804.07,1207.68 1804.66,1210.2 1805.24,1213.92 1805.83,1212.44 1806.42,1208.67 1807,1208.85 1807.59,1210.29 1808.18,1210.48 1808.76,1209.27 1809.35,1205.41 1809.94,1208.65 1810.52,1208.86 1811.11,1207.62 1811.69,1207.78 1812.28,1207.99 1812.87,1206.99 1813.45,1207.15 1814.04,1207.19 1814.63,1207.36 1815.21,1209.86 1815.8,1208.71 1816.39,1207.67 1816.97,1209.04 1817.56,1209.48 1818.14,1209.43 1818.73,1209.5 1819.32,1207.17 1819.9,1207.43 1820.49,1207.7 1821.08,1207.88 1821.66,1207.79 1822.25,1210.51 1822.84,1212.7 1823.42,1212.91 1824.01,1210.43 1824.6,1211.37 1825.18,1211.43 1825.77,1209.98 1826.35,1211.09 1826.94,1209.87 1827.53,1208.8 1828.11,1209.15 1828.7,1208.04 1829.29,1207.16 1829.87,1207.17 1830.46,1208.59 1831.05,1210.01 1831.63,1210.09 1832.22,1212.41 1832.81,1212.08 1833.39,1210.85 1833.98,1210.85 1834.56,1210.82 1835.15,1210.94 1835.74,1211.11 1836.32,1212.32 1836.91,1209.69 1837.5,1211.25 1838.08,1214.96 1838.67,1214.72 1839.26,1216.11 1839.84,1213.45 1840.43,1214.81 1841.01,1214.86 1841.6,1218.2 1842.19,1219.18 1842.77,1218.63 1843.36,1219.39 1843.95,1218.92 1844.53,1219.61 1845.12,1219.25 1845.71,1217.59 1846.29,1217.18 1846.88,1217.95 1847.47,1219.03 1848.05,1218.53 1848.64,1218.15 1849.22,1221.29 1849.81,1218.17 1850.4,1217.94 1850.98,1216.17 1851.57,1216.97 1852.16,1215.3 1852.74,1215.15 1853.33,1213.61 1853.92,1213.5 1854.5,1213.3 1855.09,1210.59 1855.68,1210.42 1856.26,1210.33 1856.85,1209.15 1857.43,1208.39 1858.02,1208.41 1858.61,1205.91 1859.19,1201.96 1859.78,1203.67 1860.37,1204 1860.95,1205.52 1861.54,1204.62 1862.13,1206.09 1862.71,1206.32 1863.3,1207.76 1863.88,1208.04 1864.47,1209.5 1865.06,1208.53 1865.64,1208.61 1866.23,1206 1866.82,1206.37 1867.4,1207.7 1867.99,1209.21 1868.58,1207.82 1869.16,1208 1869.75,1208.01 1870.34,1208.38 1870.92,1208.75 1871.51,1208.86 1872.09,1209.09 1872.68,1208.15 1873.27,1204.59 1873.85,1203.65 1874.44,1201.67 1875.03,1201.03 1875.61,1201.52 1876.2,1200.92 1876.79,1202.65 1877.37,1204.32 1877.96,1204.66 1878.55,1203.97 1879.13,1204.21 1879.72,1207.12 1880.3,1207.16 1880.89,1208.4 1881.48,1208.45 1882.06,1209.96 1882.65,1208.85 1883.24,1211.29 1883.82,1208.79 1884.41,1210.27 1885,1210.19 1885.58,1210.4 1886.17,1210.76 1886.76,1210.99 1887.34,1212.2 1887.93,1214.36 1888.51,1215.24 1889.1,1214.83 1889.69,1215.92 1890.27,1216.77 1890.86,1216.29 1891.45,1216.07 1892.03,1214.43 1892.62,1215.91 1893.21,1216.94 1893.79,1219.06 1894.38,1222.4 1894.96,1220.59 1895.55,1222.54 1896.14,1221.96 1896.72,1221.53 1897.31,1222.07 1897.9,1218.9 1898.48,1218.59 1899.07,1219.54 1899.66,1216.76 1900.24,1216.63 1900.83,1215.09 1901.42,1215.02 1902,1215.69 1902.59,1215.66 1903.17,1216.85 1903.76,1215.31 1904.35,1212.49 1904.93,1211.19 1905.52,1210.07 1906.11,1210.24 1906.69,1208.87 1907.28,1210.47 1907.87,1210.67 1908.45,1210.71 1909.04,1211.75 1909.63,1210.48 1910.21,1209.12 1910.8,1207.87 1911.38,1208.13 1911.97,1207.97 1912.56,1208.24 1913.14,1205.77 1913.73,1204.92 1914.32,1204.1 1914.9,1204.37 1915.49,1205.78 1916.08,1207.58 1916.66,1207.71 1917.25,1207.91 1917.83,1206.6 1918.42,1204.45 1919.01,1204.8 1919.59,1206.33 1920.18,1207.62 1920.77,1207.99 1921.35,1205.73 1921.94,1205.93 1922.53,1206.18 1923.11,1204.91 1923.7,1205.9 1924.29,1207.22 1924.87,1208.61 1925.46,1206.15 1926.04,1207.67 1926.63,1211.26 1927.22,1211.3 1927.8,1211.4 1928.39,1210.15 1928.98,1212.83 1929.56,1212.42 1930.15,1212.35 1930.74,1208.34 1931.32,1208.7 1931.91,1209.98 1932.5,1208.62 1933.08,1207.44 1933.67,1206.46 1934.25,1210.44 1934.84,1210.38 1935.43,1211.54 1936.01,1213.88 1936.6,1215.03 1937.19,1214.92 1937.77,1215.94 1938.36,1217.95 1938.95,1218.62 1939.53,1220.74 1940.12,1219.9 1940.71,1219.42 1941.29,1216.38 1941.88,1219.82 1942.46,1219.07 1943.05,1217.46 1943.64,1219.76 1944.22,1220.46 1944.81,1216.24 1945.4,1214.44 1945.98,1212.91 1946.57,1213.01 1947.16,1214.14 1947.74,1211.29 1948.33,1211.2 1948.91,1208.46 1949.5,1206.11 1950.09,1208.69 1950.67,1208.93 1951.26,1209.06 1951.85,1210.16 1952.43,1211.45 1953.02,1211.23 1953.61,1212.49 1954.19,1208.45 1954.78,1208.38 1955.37,1210.87 1955.95,1212.03 1956.54,1210.71 1957.12,1210.59 1957.71,1209.37 1958.3,1210.53 1958.88,1209.24 1959.47,1209.35 1960.06,1208.39 1960.64,1208.5 1961.23,1207.07 1961.82,1207.38 1962.4,1206.18 1962.99,1206.32 1963.58,1208.82 1964.16,1206.35 1964.75,1207.54 1965.33,1208.92 1965.92,1213.69 1966.51,1213.44 1967.09,1213.28 1967.68,1214.34 1968.27,1214.11 1968.85,1213.86 1969.44,1215 1970.03,1214.72 1970.61,1214.64 1971.2,1214.22 1971.78,1213.86 1972.37,1213.72 1972.96,1214.76 1973.54,1212.93 1974.13,1211.52 1974.72,1207.66 1975.3,1206.67 1975.89,1205.8 1976.48,1204.98 1977.06,1204.09 1977.65,1201.98 1978.24,1202.31 1978.82,1200.19 1979.41,1202.16 1979.99,1203.84 1980.58,1205.51 1981.17,1203.41 1981.75,1205.09 1982.34,1207.72 1982.93,1207.81 1983.51,1205.59 1984.1,1207.15 1984.69,1207.58 1985.27,1206.23 1985.86,1206.22 1986.45,1206.43 1987.03,1210.18 1987.62,1210.26 1988.2,1207.77 1988.79,1207.86 1989.38,1208.88 1989.96,1207.71 1990.55,1208.97 1991.14,1207.85 1991.72,1209.33 1992.31,1210.83 1992.9,1211.98 1993.48,1213.17 1994.07,1212 1994.65,1210.47 1995.24,1207.78 1995.83,1207.89 1996.41,1209.45 1997,1209.72 1997.59,1208.61 1998.17,1206.17 1998.76,1205.23 1999.35,1208.01 1999.93,1208.18 2000.52,1206.98 2001.11,1208.8 2001.69,1208.57 2002.28,1207.62 2002.86,1205.21 2003.45,1205.31 2004.04,1204.55 2004.62,1206.11 2005.21,1206.39 2005.8,1206.63 2006.38,1204.34 2006.97,1204.47 2007.56,1206.05 2008.14,1208.85 2008.73,1207.71 2009.32,1207.68 2009.9,1207.73 2010.49,1209.02 2011.07,1210.24 2011.66,1207.91 2012.25,1208.1 2012.83,1208.26 2013.42,1207.41 2014.01,1211.41 2014.59,1212.75 2015.18,1215.2 2015.77,1213.94 2016.35,1217.5 2016.94,1219.58 2017.53,1218.96 2018.11,1217.25 2018.7,1215.63 2019.28,1211.72 2019.87,1213.11 2020.46,1216.93 2021.04,1217.65 2021.63,1218.69 2022.22,1219.41 2022.8,1220.05 2023.39,1221.76 2023.98,1217.47 2024.56,1214.74 2025.15,1214.44 2025.73,1214.31 2026.32,1213.99 2026.91,1212.5 2027.49,1211.1 2028.08,1208.55 2028.67,1208.56 2029.25,1208.86 2029.84,1207.66 2030.43,1206.4 2031.01,1207.84 2031.6,1208.09 2032.19,1208.33 2032.77,1209.76 2033.36,1208.55 2033.94,1210.21 2034.53,1209.13 2035.12,1209.28 2035.7,1208.32 2036.29,1205.91 2036.88,1207.08 2037.46,1207.07 2038.05,1207.14 2038.64,1206.11 2039.22,1206.48 2039.81,1206.94 2040.4,1208.7 2040.98,1207.49 2041.57,1206.74 2042.15,1206.97 2042.74,1207.14 2043.33,1207.04 2043.91,1208.45 2044.5,1209.93 2045.09,1207.42 2045.67,1207.33 2046.26,1208.58 2046.85,1211.15 2047.43,1209.94 2048.02,1208.89 2048.6,1208.87 2049.19,1207.66 2049.78,1209.23 2050.36,1211.89 2050.95,1211.68 2051.54,1211.63 2052.12,1212.89 2052.71,1214.16 2053.3,1213.99 2053.88,1213.79 2054.47,1215 2055.06,1218.44 2055.64,1211.73 2056.23,1212.96 2056.81,1217.79 2057.4,1221.02 2057.99,1221.71 2058.57,1221.06 2059.16,1221.6 2059.75,1223.6 2060.33,1221.59 2060.92,1219.7 2061.51,1217.88 2062.09,1218.78 2062.68,1215.82 2063.27,1216.68 2063.85,1215.16 2064.44,1213.66 2065.02,1212.17 2065.61,1213.17 2066.2,1215.37 2066.78,1215.01 2067.37,1216 2067.96,1215.53 2068.54,1212.55 2069.13,1213.6 2069.72,1214.51 2070.3,1214.28 2070.89,1214.16 2071.48,1215.12 2072.06,1216.02 2072.65,1215.78 2073.23,1215.43 2073.82,1213.86 2074.41,1211.03 2074.99,1211.11 2075.58,1209.63 2076.17,1209.42 2076.75,1206.89 2077.34,1205.52 2077.93,1205.68 2078.51,1205.88 2079.1,1207.54 2079.68,1207.66 2080.27,1205.12 2080.86,1205.18 2081.44,1205.33 2082.03,1206.72 2082.62,1206.58 2083.2,1209.2 2083.79,1211 2084.38,1213.52 2084.96,1213.22 2085.55,1213.02 2086.14,1209.16 2086.72,1208.14 2087.31,1209.61 2087.89,1209.67 2088.48,1208.63 2089.07,1207.67 2089.65,1207.55 2090.24,1206.35 2090.83,1207.74 2091.41,1209.1 2092,1210.55 2092.59,1208.07 2093.17,1205.78 2093.76,1208.35 2094.35,1206.07 2094.93,1202.66 2095.52,1205.64 2096.1,1206.17 2096.69,1206.55 2097.28,1208.12 2097.86,1208.66 2098.45,1209.92 2099.04,1208.82 2099.62,1209.21 2100.21,1209.1 2100.8,1207.92 2101.38,1206.84 2101.97,1204.4 2102.55,1207.19 2103.14,1203.74 2103.73,1204.17 2104.31,1205.88 2104.9,1208.78 2105.49,1208.88 2106.07,1207.89 2106.66,1209.23 2107.25,1210.66 2107.83,1210.61 2108.42,1210.67 2109.01,1209.34 2109.59,1208.23 2110.18,1209.79 2110.76,1212.15 2111.35,1210.96 2111.94,1209.59 2112.52,1210.87 2113.11,1213.43 2113.7,1212.01 2114.28,1209.55 2114.87,1209.78 2115.46,1212.29 2116.04,1213.66 2116.63,1214.46 2117.22,1214.59 2117.8,1214.2 2118.39,1216.27 2118.97,1215.88 2119.56,1216.81 2120.15,1213.91 2120.73,1216.44 2121.32,1217.43 2121.91,1219.47 2122.49,1220.51 2123.08,1218.79 2123.67,1218.42 2124.25,1215.53 2124.84,1214.34 2125.42,1212.84 2126.01,1213.81 2126.6,1209.95 2127.18,1207.53 2127.77,1209.06 2128.36,1209.27 2128.94,1208.05 2129.53,1207.09 2130.12,1209.75 2130.7,1208.32 2131.29,1211.1 2131.88,1208.83 2132.46,1208.94 2133.05,1211.48 2133.63,1212.71 2134.22,1212.77 2134.81,1214.17 2135.39,1214.23 2135.98,1215.8 2136.57,1214.29 2137.15,1211.61 2137.74,1210.38 2138.33,1210.41 2138.91,1207.71 2139.5,1205.14 2140.09,1205.3 2140.67,1206.92 2141.26,1205.96 2141.84,1206.25 2142.43,1206.52 2143.02,1209.16 2143.6,1206.89 2144.19,1205.86 2144.78,1207.2 2145.36,1207.6 2145.95,1206.19 2146.54,1205.11 2147.12,1202.85 2147.71,1202.98 2148.3,1199.61 2148.88,1198.96 2149.47,1199.69 2150.05,1200.49 2150.64,1201.01 2151.23,1203.79 2151.81,1206.86 2152.4,1206.82 2152.99,1209.8 2153.57,1208.52 2154.16,1209.01 2154.75,1209 2155.33,1209.99 2155.92,1207.84 2156.5,1208 2157.09,1207 2157.68,1206.95 2158.26,1205.97 \"/>\n<path clip-path=\"url(#clip902)\" d=\"M986.025 1210.97 L986.612 1210.97 L987.198 1210.97 L987.785 1210.97 L988.371 1210.97 L988.957 1210.97 L989.544 1210.97 L990.13 1210.97 L990.717 1210.97 L991.303 1210.97 L991.889 1210.97 L992.476 1210.97 L993.062 1210.97 L993.649 1210.97 L994.235 1210.97 L994.822 1210.97 L995.408 1210.97 L995.994 1210.97 L996.581 1210.97 L997.167 1210.97 L997.754 1210.97 L998.34 1210.97 L998.926 1210.97 L999.513 1210.97 L1000.1 1210.97 L1000.69 1210.97 L1001.27 1210.97 L1001.86 1210.97 L1002.44 1210.97 L1003.03 1210.97 L1003.62 1210.97 L1004.2 1210.97 L1004.79 1210.97 L1005.38 1210.97 L1005.96 1210.97 L1006.55 1210.97 L1007.14 1210.97 L1007.72 1210.97 L1008.31 1210.97 L1008.9 1210.97 L1009.48 1210.97 L1010.07 1210.97 L1010.65 1210.97 L1011.24 1210.97 L1011.83 1210.97 L1012.41 1210.97 L1013 1210.97 L1013.59 1210.97 L1014.17 1210.97 L1014.76 1210.97 L1015.35 1210.97 L1015.93 1210.97 L1016.52 1210.97 L1017.11 1210.97 L1017.69 1210.97 L1018.28 1210.97 L1018.86 1210.97 L1019.45 1210.97 L1020.04 1210.97 L1020.62 1210.97 L1021.21 1210.97 L1021.8 1210.97 L1022.38 1210.97 L1022.97 1210.97 L1023.56 1210.97 L1024.14 1210.97 L1024.73 1210.97 L1025.32 1210.97 L1025.9 1210.97 L1026.49 1210.97 L1027.07 1210.97 L1027.66 1210.97 L1028.25 1210.97 L1028.83 1210.97 L1029.42 1210.97 L1030.01 1210.97 L1030.59 1210.97 L1031.18 1210.97 L1031.77 1210.97 L1032.35 1210.97 L1032.94 1210.97 L1033.52 1210.97 L1034.11 1210.97 L1034.7 1210.97 L1035.28 1210.97 L1035.87 1210.97 L1036.46 1210.97 L1037.04 1210.97 L1037.63 1210.97 L1038.22 1210.97 L1038.8 1210.97 L1039.39 1210.97 L1039.98 1210.97 L1040.56 1210.97 L1041.15 1210.97 L1041.73 1210.97 L1042.32 1210.97 L1042.91 1210.97 L1043.49 1210.97 L1044.08 1210.97 L1044.67 1210.97 L1045.25 1210.97 L1045.84 1210.97 L1046.43 1210.97 L1047.01 1210.97 L1047.6 1210.97 L1048.19 1210.97 L1048.77 1210.97 L1049.36 1210.97 L1049.94 1210.97 L1050.53 1210.97 L1051.12 1210.97 L1051.7 1210.97 L1052.29 1210.97 L1052.88 1210.97 L1053.46 1210.97 L1054.05 1210.97 L1054.64 1210.97 L1055.22 1210.97 L1055.81 1210.97 L1056.39 1210.97 L1056.98 1210.97 L1057.57 1210.97 L1058.15 1210.97 L1058.74 1210.97 L1059.33 1210.97 L1059.91 1210.97 L1060.5 1210.97 L1061.09 1210.97 L1061.67 1210.97 L1062.26 1210.97 L1062.85 1210.97 L1063.43 1210.97 L1064.02 1210.97 L1064.6 1210.97 L1065.19 1210.97 L1065.78 1210.97 L1066.36 1210.97 L1066.95 1210.97 L1067.54 1210.97 L1068.12 1210.97 L1068.71 1210.97 L1069.3 1210.97 L1069.88 1210.97 L1070.47 1210.97 L1071.06 1210.97 L1071.64 1210.97 L1072.23 1210.97 L1072.81 1210.97 L1073.4 1210.97 L1073.99 1210.97 L1074.57 1210.97 L1075.16 1210.97 L1075.75 1210.97 L1076.33 1210.97 L1076.92 1210.97 L1077.51 1210.97 L1078.09 1210.97 L1078.68 1210.97 L1079.26 1210.97 L1079.85 1210.97 L1080.44 1210.97 L1081.02 1210.97 L1081.61 1210.97 L1082.2 1210.97 L1082.78 1210.97 L1083.37 1210.97 L1083.96 1210.97 L1084.54 1210.97 L1085.13 1210.97 L1085.72 1210.97 L1086.3 1210.97 L1086.89 1210.97 L1087.47 1210.97 L1088.06 1210.97 L1088.65 1210.97 L1089.23 1210.97 L1089.82 1210.97 L1090.41 1210.97 L1090.99 1210.97 L1091.58 1210.97 L1092.17 1210.97 L1092.75 1210.97 L1093.34 1210.97 L1093.93 1210.97 L1094.51 1210.97 L1095.1 1210.97 L1095.68 1210.97 L1096.27 1210.97 L1096.86 1210.97 L1097.44 1210.97 L1098.03 1210.97 L1098.62 1210.97 L1099.2 1210.97 L1099.79 1210.97 L1100.38 1210.97 L1100.96 1210.97 L1101.55 1210.97 L1102.14 1210.97 L1102.72 1210.97 L1103.31 1210.97 L1103.89 1210.97 L1104.48 1210.97 L1105.07 1210.97 L1105.65 1210.97 L1106.24 1210.97 L1106.83 1210.97 L1107.41 1210.97 L1108 1210.97 L1108.59 1210.97 L1109.17 1210.97 L1109.76 1210.97 L1110.34 1210.97 L1110.93 1210.97 L1111.52 1210.97 L1112.1 1210.97 L1112.69 1210.97 L1113.28 1210.97 L1113.86 1210.97 L1114.45 1210.97 L1115.04 1210.97 L1115.62 1210.97 L1116.21 1210.97 L1116.8 1210.97 L1117.38 1210.97 L1117.97 1210.97 L1118.55 1210.97 L1119.14 1210.97 L1119.73 1210.97 L1120.31 1210.97 L1120.9 1210.97 L1121.49 1210.97 L1122.07 1210.97 L1122.66 1210.97 L1123.25 1210.97 L1123.83 1210.97 L1124.42 1210.97 L1125.01 1210.97 L1125.59 1210.97 L1126.18 1210.97 L1126.76 1210.97 L1127.35 1210.97 L1127.94 1210.97 L1128.52 1210.97 L1129.11 1210.97 L1129.7 1210.97 L1130.28 1210.97 L1130.87 1210.97 L1131.46 1210.97 L1132.04 1210.97 L1132.63 1210.97 L1133.21 1210.97 L1133.8 1210.97 L1134.39 1210.97 L1134.97 1210.97 L1135.56 1210.97 L1136.15 1210.97 L1136.73 1210.97 L1137.32 1210.97 L1137.91 1210.97 L1138.49 1210.97 L1139.08 1210.97 L1139.67 1210.97 L1140.25 1210.97 L1140.84 1210.97 L1141.42 1210.97 L1142.01 1210.97 L1142.6 1210.97 L1143.18 1210.97 L1143.77 1210.97 L1144.36 1210.97 L1144.94 1210.97 L1145.53 1210.97 L1146.12 1210.97 L1146.7 1210.97 L1147.29 1210.97 L1147.88 1210.97 L1148.46 1210.97 L1149.05 1210.97 L1149.63 1210.97 L1150.22 1210.97 L1150.81 1210.97 L1151.39 1210.97 L1151.98 1210.97 L1152.57 1210.97 L1153.15 1210.97 L1153.74 1210.97 L1154.33 1210.97 L1154.91 1210.97 L1155.5 1210.97 L1156.09 1210.97 L1156.67 1210.97 L1157.26 1210.97 L1157.84 1210.97 L1158.43 1210.97 L1159.02 1210.97 L1159.6 1210.97 L1160.19 1210.97 L1160.78 1210.97 L1161.36 1210.97 L1161.95 1210.97 L1162.54 1210.97 L1163.12 1210.97 L1163.71 1210.97 L1164.29 1210.97 L1164.88 1210.97 L1165.47 1210.97 L1166.05 1210.97 L1166.64 1210.97 L1167.23 1210.97 L1167.81 1210.97 L1168.4 1210.97 L1168.99 1210.97 L1169.57 1210.97 L1170.16 1210.97 L1170.75 1210.97 L1171.33 1210.97 L1171.92 1210.97 L1172.5 1210.97 L1173.09 1210.97 L1173.68 1210.97 L1174.26 1210.97 L1174.85 1210.97 L1175.44 1210.97 L1176.02 1210.97 L1176.61 1210.97 L1177.2 1210.97 L1177.78 1210.97 L1178.37 1210.97 L1178.96 1210.97 L1179.54 1210.97 L1180.13 1210.97 L1180.71 1210.97 L1181.3 1210.97 L1181.89 1210.97 L1182.47 1210.97 L1183.06 1210.97 L1183.65 1210.97 L1184.23 1210.97 L1184.82 1210.97 L1185.41 1210.97 L1185.99 1210.97 L1186.58 1210.97 L1187.16 1210.97 L1187.75 1210.97 L1188.34 1210.97 L1188.92 1210.97 L1189.51 1210.97 L1190.1 1210.97 L1190.68 1210.97 L1191.27 1210.97 L1191.86 1210.97 L1192.44 1210.97 L1193.03 1210.97 L1193.62 1210.97 L1194.2 1210.97 L1194.79 1210.97 L1195.37 1210.97 L1195.96 1210.97 L1196.55 1210.97 L1197.13 1210.97 L1197.72 1210.97 L1198.31 1210.97 L1198.89 1210.97 L1199.48 1210.97 L1200.07 1210.97 L1200.65 1210.97 L1201.24 1210.97 L1201.83 1210.97 L1202.41 1210.97 L1203 1210.97 L1203.58 1210.97 L1204.17 1210.97 L1204.76 1210.97 L1205.34 1210.97 L1205.93 1210.97 L1206.52 1210.97 L1207.1 1210.97 L1207.69 1210.97 L1208.28 1210.97 L1208.86 1210.97 L1209.45 1210.97 L1210.03 1210.97 L1210.62 1210.97 L1211.21 1210.97 L1211.79 1210.97 L1212.38 1210.97 L1212.97 1210.97 L1213.55 1210.97 L1214.14 1210.97 L1214.73 1210.97 L1215.31 1210.97 L1215.9 1210.97 L1216.49 1210.97 L1217.07 1210.97 L1217.66 1210.97 L1218.24 1210.97 L1218.83 1210.97 L1219.42 1210.97 L1220 1210.97 L1220.59 1210.97 L1221.18 1210.97 L1221.76 1210.97 L1222.35 1210.97 L1222.94 1210.97 L1223.52 1210.97 L1224.11 1210.97 L1224.7 1210.97 L1225.28 1210.97 L1225.87 1210.97 L1226.45 1210.97 L1227.04 1210.97 L1227.63 1210.97 L1228.21 1210.97 L1228.8 1210.97 L1229.39 1210.97 L1229.97 1210.97 L1230.56 1210.97 L1231.15 1210.97 L1231.73 1210.97 L1232.32 1210.97 L1232.91 1210.97 L1233.49 1210.97 L1234.08 1210.97 L1234.66 1210.97 L1235.25 1210.97 L1235.84 1210.97 L1236.42 1210.97 L1237.01 1210.97 L1237.6 1210.97 L1238.18 1210.97 L1238.77 1210.97 L1239.36 1210.97 L1239.94 1210.97 L1240.53 1210.97 L1241.11 1210.97 L1241.7 1210.97 L1242.29 1210.97 L1242.87 1210.97 L1243.46 1210.97 L1244.05 1210.97 L1244.63 1210.97 L1245.22 1210.97 L1245.81 1210.97 L1246.39 1210.97 L1246.98 1210.97 L1247.57 1210.97 L1248.15 1210.97 L1248.74 1210.97 L1249.32 1210.97 L1249.91 1210.97 L1250.5 1210.97 L1251.08 1210.97 L1251.67 1210.97 L1252.26 1210.97 L1252.84 1210.97 L1253.43 1210.97 L1254.02 1210.97 L1254.6 1210.97 L1255.19 1210.97 L1255.78 1210.97 L1256.36 1210.97 L1256.95 1210.97 L1257.53 1210.97 L1258.12 1210.97 L1258.71 1210.97 L1259.29 1210.97 L1259.88 1210.97 L1260.47 1210.97 L1261.05 1210.97 L1261.64 1210.97 L1262.23 1210.97 L1262.81 1210.97 L1263.4 1210.97 L1263.98 1210.97 L1264.57 1210.97 L1265.16 1210.97 L1265.74 1210.97 L1266.33 1210.97 L1266.92 1210.97 L1267.5 1210.97 L1268.09 1210.97 L1268.68 1210.97 L1269.26 1210.97 L1269.85 1210.97 L1270.44 1210.97 L1271.02 1210.97 L1271.61 1210.97 L1272.19 1210.97 L1272.78 1210.97 L1273.37 1210.97 L1273.95 1210.97 L1274.54 1210.97 L1275.13 1210.97 L1275.71 1210.97 L1276.3 1210.97 L1276.89 1210.97 L1277.47 1210.97 L1278.06 1210.97 L1278.65 1210.97 L1279.23 1210.97 L1279.82 1210.97 L1280.4 1210.97 L1280.99 1210.97 L1281.58 1210.97 L1282.16 1210.97 L1282.75 1210.97 L1283.34 1210.97 L1283.92 1210.97 L1284.51 1210.97 L1285.1 1210.97 L1285.68 1210.97 L1286.27 1210.97 L1286.86 1210.97 L1287.44 1210.97 L1288.03 1210.97 L1288.61 1210.97 L1289.2 1210.97 L1289.79 1210.97 L1290.37 1210.97 L1290.96 1210.97 L1291.55 1210.97 L1292.13 1210.97 L1292.72 1210.97 L1293.31 1210.97 L1293.89 1210.97 L1294.48 1210.97 L1295.06 1210.97 L1295.65 1210.97 L1296.24 1210.97 L1296.82 1210.97 L1297.41 1210.97 L1298 1210.97 L1298.58 1210.97 L1299.17 1210.97 L1299.76 1210.97 L1300.34 1210.97 L1300.93 1210.97 L1301.52 1210.97 L1302.1 1210.97 L1302.69 1210.97 L1303.27 1210.97 L1303.86 1210.97 L1304.45 1210.97 L1305.03 1210.97 L1305.62 1210.97 L1306.21 1210.97 L1306.79 1210.97 L1307.38 1210.97 L1307.97 1210.97 L1308.55 1210.97 L1309.14 1210.97 L1309.73 1210.97 L1310.31 1210.97 L1310.9 1210.97 L1311.48 1210.97 L1312.07 1210.97 L1312.66 1210.97 L1313.24 1210.97 L1313.83 1210.97 L1314.42 1210.97 L1315 1210.97 L1315.59 1210.97 L1316.18 1210.97 L1316.76 1210.97 L1317.35 1210.97 L1317.93 1210.97 L1318.52 1210.97 L1319.11 1210.97 L1319.69 1210.97 L1320.28 1210.97 L1320.87 1210.97 L1321.45 1210.97 L1322.04 1210.97 L1322.63 1210.97 L1323.21 1210.97 L1323.8 1210.97 L1324.39 1210.97 L1324.97 1210.97 L1325.56 1210.97 L1326.14 1210.97 L1326.73 1210.97 L1327.32 1210.97 L1327.9 1210.97 L1328.49 1210.97 L1329.08 1210.97 L1329.66 1210.97 L1330.25 1210.97 L1330.84 1210.97 L1331.42 1210.97 L1332.01 1210.97 L1332.6 1210.97 L1333.18 1210.97 L1333.77 1210.97 L1334.35 1210.97 L1334.94 1210.97 L1335.53 1210.97 L1336.11 1210.97 L1336.7 1210.97 L1337.29 1210.97 L1337.87 1210.97 L1338.46 1210.97 L1339.05 1210.97 L1339.63 1210.97 L1340.22 1210.97 L1340.8 1210.97 L1341.39 1210.97 L1341.98 1210.97 L1342.56 1210.97 L1343.15 1210.97 L1343.74 1210.97 L1344.32 1210.97 L1344.91 1210.97 L1345.5 1210.97 L1346.08 1210.97 L1346.67 1210.97 L1347.26 1210.97 L1347.84 1210.97 L1348.43 1210.97 L1349.01 1210.97 L1349.6 1210.97 L1350.19 1210.97 L1350.77 1210.97 L1351.36 1210.97 L1351.95 1210.97 L1352.53 1210.97 L1353.12 1210.97 L1353.71 1210.97 L1354.29 1210.97 L1354.88 1210.97 L1355.47 1210.97 L1356.05 1210.97 L1356.64 1210.97 L1357.22 1210.97 L1357.81 1210.97 L1358.4 1210.97 L1358.98 1210.97 L1359.57 1210.97 L1360.16 1210.97 L1360.74 1210.97 L1361.33 1210.97 L1361.92 1210.97 L1362.5 1210.97 L1363.09 1210.97 L1363.68 1210.97 L1364.26 1210.97 L1364.85 1210.97 L1365.43 1210.97 L1366.02 1210.97 L1366.61 1210.97 L1367.19 1210.97 L1367.78 1210.97 L1368.37 1210.97 L1368.95 1210.97 L1369.54 1210.97 L1370.13 1210.97 L1370.71 1210.97 L1371.3 1210.97 L1371.88 1210.97 L1372.47 1210.97 L1373.06 1210.97 L1373.64 1210.97 L1374.23 1210.97 L1374.82 1210.97 L1375.4 1210.97 L1375.99 1210.97 L1376.58 1210.97 L1377.16 1210.97 L1377.75 1210.97 L1378.34 1210.97 L1378.92 1210.97 L1379.51 1210.97 L1380.09 1210.97 L1380.68 1210.97 L1381.27 1210.97 L1381.85 1210.97 L1382.44 1210.97 L1383.03 1210.97 L1383.61 1210.97 L1384.2 1210.97 L1384.79 1210.97 L1385.37 1210.97 L1385.96 1210.97 L1386.55 1210.97 L1387.13 1210.97 L1387.72 1210.97 L1388.3 1210.97 L1388.89 1210.97 L1389.48 1210.97 L1390.06 1210.97 L1390.65 1210.97 L1391.24 1210.97 L1391.82 1210.97 L1392.41 1210.97 L1393 1210.97 L1393.58 1210.97 L1394.17 1210.97 L1394.75 1210.97 L1395.34 1210.97 L1395.93 1210.97 L1396.51 1210.97 L1397.1 1210.97 L1397.69 1210.97 L1398.27 1210.97 L1398.86 1210.97 L1399.45 1210.97 L1400.03 1210.97 L1400.62 1210.97 L1401.21 1210.97 L1401.79 1210.97 L1402.38 1210.97 L1402.96 1210.97 L1403.55 1210.97 L1404.14 1210.97 L1404.72 1210.97 L1405.31 1210.97 L1405.9 1210.97 L1406.48 1210.97 L1407.07 1210.97 L1407.66 1210.97 L1408.24 1210.97 L1408.83 1210.97 L1409.42 1210.97 L1410 1210.97 L1410.59 1210.97 L1411.17 1210.97 L1411.76 1210.97 L1412.35 1210.97 L1412.93 1210.97 L1413.52 1210.97 L1414.11 1210.97 L1414.69 1210.97 L1415.28 1210.97 L1415.87 1210.97 L1416.45 1210.97 L1417.04 1210.97 L1417.63 1210.97 L1418.21 1210.97 L1418.8 1210.97 L1419.38 1210.97 L1419.97 1210.97 L1420.56 1210.97 L1421.14 1210.97 L1421.73 1210.97 L1422.32 1210.97 L1422.9 1210.97 L1423.49 1210.97 L1424.08 1210.97 L1424.66 1210.97 L1425.25 1210.97 L1425.83 1210.97 L1426.42 1210.97 L1427.01 1210.97 L1427.59 1210.97 L1428.18 1210.97 L1428.77 1210.97 L1429.35 1210.97 L1429.94 1210.97 L1430.53 1210.97 L1431.11 1210.97 L1431.7 1210.97 L1432.29 1210.97 L1432.87 1210.97 L1433.46 1210.97 L1434.04 1210.97 L1434.63 1210.97 L1435.22 1210.97 L1435.8 1210.97 L1436.39 1210.97 L1436.98 1210.97 L1437.56 1210.97 L1438.15 1210.97 L1438.74 1210.97 L1439.32 1210.97 L1439.91 1210.97 L1440.5 1210.97 L1441.08 1210.97 L1441.67 1210.97 L1442.25 1210.97 L1442.84 1210.97 L1443.43 1210.97 L1444.01 1210.97 L1444.6 1210.97 L1445.19 1210.97 L1445.77 1210.97 L1446.36 1210.97 L1446.95 1210.97 L1447.53 1210.97 L1448.12 1210.97 L1448.7 1210.97 L1449.29 1210.97 L1449.88 1210.97 L1450.46 1210.97 L1451.05 1210.97 L1451.64 1210.97 L1452.22 1210.97 L1452.81 1210.97 L1453.4 1210.97 L1453.98 1210.97 L1454.57 1210.97 L1455.16 1210.97 L1455.74 1210.97 L1456.33 1210.97 L1456.91 1210.97 L1457.5 1210.97 L1458.09 1210.97 L1458.67 1210.97 L1459.26 1210.97 L1459.85 1210.97 L1460.43 1210.97 L1461.02 1210.97 L1461.61 1210.97 L1462.19 1210.97 L1462.78 1210.97 L1463.37 1210.97 L1463.95 1210.97 L1464.54 1210.97 L1465.12 1210.97 L1465.71 1210.97 L1466.3 1210.97 L1466.88 1210.97 L1467.47 1210.97 L1468.06 1210.97 L1468.64 1210.97 L1469.23 1210.97 L1469.82 1210.97 L1470.4 1210.97 L1470.99 1210.97 L1471.57 1210.97 L1472.16 1210.97 L1472.75 1210.97 L1473.33 1210.97 L1473.92 1210.97 L1474.51 1210.97 L1475.09 1210.97 L1475.68 1210.97 L1476.27 1210.97 L1476.85 1210.97 L1477.44 1210.97 L1478.03 1210.97 L1478.61 1210.97 L1479.2 1210.97 L1479.78 1210.97 L1480.37 1210.97 L1480.96 1210.97 L1481.54 1210.97 L1482.13 1210.97 L1482.72 1210.97 L1483.3 1210.97 L1483.89 1210.97 L1484.48 1210.97 L1485.06 1210.97 L1485.65 1210.97 L1486.24 1210.97 L1486.82 1210.97 L1487.41 1210.97 L1487.99 1210.97 L1488.58 1210.97 L1489.17 1210.97 L1489.75 1210.97 L1490.34 1210.97 L1490.93 1210.97 L1491.51 1210.97 L1492.1 1210.97 L1492.69 1210.97 L1493.27 1210.97 L1493.86 1210.97 L1494.45 1210.97 L1495.03 1210.97 L1495.62 1210.97 L1496.2 1210.97 L1496.79 1210.97 L1497.38 1210.97 L1497.96 1210.97 L1498.55 1210.97 L1499.14 1210.97 L1499.72 1210.97 L1500.31 1210.97 L1500.9 1210.97 L1501.48 1210.97 L1502.07 1210.97 L1502.65 1210.97 L1503.24 1210.97 L1503.83 1210.97 L1504.41 1210.97 L1505 1210.97 L1505.59 1210.97 L1506.17 1210.97 L1506.76 1210.97 L1507.35 1210.97 L1507.93 1210.97 L1508.52 1210.97 L1509.11 1210.97 L1509.69 1210.97 L1510.28 1210.97 L1510.86 1210.97 L1511.45 1210.97 L1512.04 1210.97 L1512.62 1210.97 L1513.21 1210.97 L1513.8 1210.97 L1514.38 1210.97 L1514.97 1210.97 L1515.56 1210.97 L1516.14 1210.97 L1516.73 1210.97 L1517.32 1210.97 L1517.9 1210.97 L1518.49 1210.97 L1519.07 1210.97 L1519.66 1210.97 L1520.25 1210.97 L1520.83 1210.97 L1521.42 1210.97 L1522.01 1210.97 L1522.59 1210.97 L1523.18 1210.97 L1523.77 1210.97 L1524.35 1210.97 L1524.94 1210.97 L1525.52 1210.97 L1526.11 1210.97 L1526.7 1210.97 L1527.28 1210.97 L1527.87 1210.97 L1528.46 1210.97 L1529.04 1210.97 L1529.63 1210.97 L1530.22 1210.97 L1530.8 1210.97 L1531.39 1210.97 L1531.98 1210.97 L1532.56 1210.97 L1533.15 1210.97 L1533.73 1210.97 L1534.32 1210.97 L1534.91 1210.97 L1535.49 1210.97 L1536.08 1210.97 L1536.67 1210.97 L1537.25 1210.97 L1537.84 1210.97 L1538.43 1210.97 L1539.01 1210.97 L1539.6 1210.97 L1540.19 1210.97 L1540.77 1210.97 L1541.36 1210.97 L1541.94 1210.97 L1542.53 1210.97 L1543.12 1210.97 L1543.7 1210.97 L1544.29 1210.97 L1544.88 1210.97 L1545.46 1210.97 L1546.05 1210.97 L1546.64 1210.97 L1547.22 1210.97 L1547.81 1210.97 L1548.4 1210.97 L1548.98 1210.97 L1549.57 1210.97 L1550.15 1210.97 L1550.74 1210.97 L1551.33 1210.97 L1551.91 1210.97 L1552.5 1210.97 L1553.09 1210.97 L1553.67 1210.97 L1554.26 1210.97 L1554.85 1210.97 L1555.43 1210.97 L1556.02 1210.97 L1556.6 1210.97 L1557.19 1210.97 L1557.78 1210.97 L1558.36 1210.97 L1558.95 1210.97 L1559.54 1210.97 L1560.12 1210.97 L1560.71 1210.97 L1561.3 1210.97 L1561.88 1210.97 L1562.47 1210.97 L1563.06 1210.97 L1563.64 1210.97 L1564.23 1210.97 L1564.81 1210.97 L1565.4 1210.97 L1565.99 1210.97 L1566.57 1210.97 L1567.16 1210.97 L1567.75 1210.97 L1568.33 1210.97 L1568.92 1210.97 L1569.51 1210.97 L1570.09 1210.97 L1570.68 1210.97 L1571.27 1210.97 L1571.85 1210.97 L1572.44 1210.97 L1573.02 1210.97 L1573.61 1210.97 L1574.2 1210.97 L1574.78 1210.97 L1575.37 1210.97 L1575.96 1210.97 L1576.54 1210.97 L1577.13 1210.97 L1577.72 1210.97 L1578.3 1210.97 L1578.89 1210.97 L1579.47 1210.97 L1580.06 1210.97 L1580.65 1210.97 L1581.23 1210.97 L1581.82 1210.97 L1582.41 1210.97 L1582.99 1210.97 L1583.58 1210.97 L1584.17 1210.97 L1584.75 1210.97 L1585.34 1210.97 L1585.93 1210.97 L1586.51 1210.97 L1587.1 1210.97 L1587.68 1210.97 L1588.27 1210.97 L1588.86 1210.97 L1589.44 1210.97 L1590.03 1210.97 L1590.62 1210.97 L1591.2 1210.97 L1591.79 1210.97 L1592.38 1210.97 L1592.96 1210.97 L1593.55 1210.97 L1594.14 1210.97 L1594.72 1210.97 L1595.31 1210.97 L1595.89 1210.97 L1596.48 1210.97 L1597.07 1210.97 L1597.65 1210.97 L1598.24 1210.97 L1598.83 1210.97 L1599.41 1210.97 L1600 1210.97 L1600.59 1210.97 L1601.17 1210.97 L1601.76 1210.97 L1602.34 1210.97 L1602.93 1210.97 L1603.52 1210.97 L1604.1 1210.97 L1604.69 1210.97 L1605.28 1210.97 L1605.86 1210.97 L1606.45 1210.97 L1607.04 1210.97 L1607.62 1210.97 L1608.21 1210.97 L1608.8 1210.97 L1609.38 1210.97 L1609.97 1210.97 L1610.55 1210.97 L1611.14 1210.97 L1611.73 1210.97 L1612.31 1210.97 L1612.9 1210.97 L1613.49 1210.97 L1614.07 1210.97 L1614.66 1210.97 L1615.25 1210.97 L1615.83 1210.97 L1616.42 1210.97 L1617.01 1210.97 L1617.59 1210.97 L1618.18 1210.97 L1618.76 1210.97 L1619.35 1210.97 L1619.94 1210.97 L1620.52 1210.97 L1621.11 1210.97 L1621.7 1210.97 L1622.28 1210.97 L1622.87 1210.97 L1623.46 1210.97 L1624.04 1210.97 L1624.63 1210.97 L1625.22 1210.97 L1625.8 1210.97 L1626.39 1210.97 L1626.97 1210.97 L1627.56 1210.97 L1628.15 1210.97 L1628.73 1210.97 L1629.32 1210.97 L1629.91 1210.97 L1630.49 1210.97 L1631.08 1210.97 L1631.67 1210.97 L1632.25 1210.97 L1632.84 1210.97 L1633.42 1210.97 L1634.01 1210.97 L1634.6 1210.97 L1635.18 1210.97 L1635.77 1210.97 L1636.36 1210.97 L1636.94 1210.97 L1637.53 1210.97 L1638.12 1210.97 L1638.7 1210.97 L1639.29 1210.97 L1639.88 1210.97 L1640.46 1210.97 L1641.05 1210.97 L1641.63 1210.97 L1642.22 1210.97 L1642.81 1210.97 L1643.39 1210.97 L1643.98 1210.97 L1644.57 1210.97 L1645.15 1210.97 L1645.74 1210.97 L1646.33 1210.97 L1646.91 1210.97 L1647.5 1210.97 L1648.09 1210.97 L1648.67 1210.97 L1649.26 1210.97 L1649.84 1210.97 L1650.43 1210.97 L1651.02 1210.97 L1651.6 1210.97 L1652.19 1210.97 L1652.78 1210.97 L1653.36 1210.97 L1653.95 1210.97 L1654.54 1210.97 L1655.12 1210.97 L1655.71 1210.97 L1656.29 1210.97 L1656.88 1210.97 L1657.47 1210.97 L1658.05 1210.97 L1658.64 1210.97 L1659.23 1210.97 L1659.81 1210.97 L1660.4 1210.97 L1660.99 1210.97 L1661.57 1210.97 L1662.16 1210.97 L1662.75 1210.97 L1663.33 1210.97 L1663.92 1210.97 L1664.5 1210.97 L1665.09 1210.97 L1665.68 1210.97 L1666.26 1210.97 L1666.85 1210.97 L1667.44 1210.97 L1668.02 1210.97 L1668.61 1210.97 L1669.2 1210.97 L1669.78 1210.97 L1670.37 1210.97 L1670.96 1210.97 L1671.54 1210.97 L1672.13 1210.97 L1672.71 1210.97 L1673.3 1210.97 L1673.89 1210.97 L1674.47 1210.97 L1675.06 1210.97 L1675.65 1210.97 L1676.23 1210.97 L1676.82 1210.97 L1677.41 1210.97 L1677.99 1210.97 L1678.58 1210.97 L1679.17 1210.97 L1679.75 1210.97 L1680.34 1210.97 L1680.92 1210.97 L1681.51 1210.97 L1682.1 1210.97 L1682.68 1210.97 L1683.27 1210.97 L1683.86 1210.97 L1684.44 1210.97 L1685.03 1210.97 L1685.62 1210.97 L1686.2 1210.97 L1686.79 1210.97 L1687.37 1210.97 L1687.96 1210.97 L1688.55 1210.97 L1689.13 1210.97 L1689.72 1210.97 L1690.31 1210.97 L1690.89 1210.97 L1691.48 1210.97 L1692.07 1210.97 L1692.65 1210.97 L1693.24 1210.97 L1693.83 1210.97 L1694.41 1210.97 L1695 1210.97 L1695.58 1210.97 L1696.17 1210.97 L1696.76 1210.97 L1697.34 1210.97 L1697.93 1210.97 L1698.52 1210.97 L1699.1 1210.97 L1699.69 1210.97 L1700.28 1210.97 L1700.86 1210.97 L1701.45 1210.97 L1702.04 1210.97 L1702.62 1210.97 L1703.21 1210.97 L1703.79 1210.97 L1704.38 1210.97 L1704.97 1210.97 L1705.55 1210.97 L1706.14 1210.97 L1706.73 1210.97 L1707.31 1210.97 L1707.9 1210.97 L1708.49 1210.97 L1709.07 1210.97 L1709.66 1210.97 L1710.24 1210.97 L1710.83 1210.97 L1711.42 1210.97 L1712 1210.97 L1712.59 1210.97 L1713.18 1210.97 L1713.76 1210.97 L1714.35 1210.97 L1714.94 1210.97 L1715.52 1210.97 L1716.11 1210.97 L1716.7 1210.97 L1717.28 1210.97 L1717.87 1210.97 L1718.45 1210.97 L1719.04 1210.97 L1719.63 1210.97 L1720.21 1210.97 L1720.8 1210.97 L1721.39 1210.97 L1721.97 1210.97 L1722.56 1210.97 L1723.15 1210.97 L1723.73 1210.97 L1724.32 1210.97 L1724.91 1210.97 L1725.49 1210.97 L1726.08 1210.97 L1726.66 1210.97 L1727.25 1210.97 L1727.84 1210.97 L1728.42 1210.97 L1729.01 1210.97 L1729.6 1210.97 L1730.18 1210.97 L1730.77 1210.97 L1731.36 1210.97 L1731.94 1210.97 L1732.53 1210.97 L1733.11 1210.97 L1733.7 1210.97 L1734.29 1210.97 L1734.87 1210.97 L1735.46 1210.97 L1736.05 1210.97 L1736.63 1210.97 L1737.22 1210.97 L1737.81 1210.97 L1738.39 1210.97 L1738.98 1210.97 L1739.57 1210.97 L1740.15 1210.97 L1740.74 1210.97 L1741.32 1210.97 L1741.91 1210.97 L1742.5 1210.97 L1743.08 1210.97 L1743.67 1210.97 L1744.26 1210.97 L1744.84 1210.97 L1745.43 1210.97 L1746.02 1210.97 L1746.6 1210.97 L1747.19 1210.97 L1747.78 1210.97 L1748.36 1210.97 L1748.95 1210.97 L1749.53 1210.97 L1750.12 1210.97 L1750.71 1210.97 L1751.29 1210.97 L1751.88 1210.97 L1752.47 1210.97 L1753.05 1210.97 L1753.64 1210.97 L1754.23 1210.97 L1754.81 1210.97 L1755.4 1210.97 L1755.99 1210.97 L1756.57 1210.97 L1757.16 1210.97 L1757.74 1210.97 L1758.33 1210.97 L1758.92 1210.97 L1759.5 1210.97 L1760.09 1210.97 L1760.68 1210.97 L1761.26 1210.97 L1761.85 1210.97 L1762.44 1210.97 L1763.02 1210.97 L1763.61 1210.97 L1764.19 1210.97 L1764.78 1210.97 L1765.37 1210.97 L1765.95 1210.97 L1766.54 1210.97 L1767.13 1210.97 L1767.71 1210.97 L1768.3 1210.97 L1768.89 1210.97 L1769.47 1210.97 L1770.06 1210.97 L1770.65 1210.97 L1771.23 1210.97 L1771.82 1210.97 L1772.4 1210.97 L1772.99 1210.97 L1773.58 1210.97 L1774.16 1210.97 L1774.75 1210.97 L1775.34 1210.97 L1775.92 1210.97 L1776.51 1210.97 L1777.1 1210.97 L1777.68 1210.97 L1778.27 1210.97 L1778.86 1210.97 L1779.44 1210.97 L1780.03 1210.97 L1780.61 1210.97 L1781.2 1210.97 L1781.79 1210.97 L1782.37 1210.97 L1782.96 1210.97 L1783.55 1210.97 L1784.13 1210.97 L1784.72 1210.97 L1785.31 1210.97 L1785.89 1210.97 L1786.48 1210.97 L1787.06 1210.97 L1787.65 1210.97 L1788.24 1210.97 L1788.82 1210.97 L1789.41 1210.97 L1790 1210.97 L1790.58 1210.97 L1791.17 1210.97 L1791.76 1210.97 L1792.34 1210.97 L1792.93 1210.97 L1793.52 1210.97 L1794.1 1210.97 L1794.69 1210.97 L1795.27 1210.97 L1795.86 1210.97 L1796.45 1210.97 L1797.03 1210.97 L1797.62 1210.97 L1798.21 1210.97 L1798.79 1210.97 L1799.38 1210.97 L1799.97 1210.97 L1800.55 1210.97 L1801.14 1210.97 L1801.73 1210.97 L1802.31 1210.97 L1802.9 1210.97 L1803.48 1210.97 L1804.07 1210.97 L1804.66 1210.97 L1805.24 1210.97 L1805.83 1210.97 L1806.42 1210.97 L1807 1210.97 L1807.59 1210.97 L1808.18 1210.97 L1808.76 1210.97 L1809.35 1210.97 L1809.94 1210.97 L1810.52 1210.97 L1811.11 1210.97 L1811.69 1210.97 L1812.28 1210.97 L1812.87 1210.97 L1813.45 1210.97 L1814.04 1210.97 L1814.63 1210.97 L1815.21 1210.97 L1815.8 1210.97 L1816.39 1210.97 L1816.97 1210.97 L1817.56 1210.97 L1818.14 1210.97 L1818.73 1210.97 L1819.32 1210.97 L1819.9 1210.97 L1820.49 1210.97 L1821.08 1210.97 L1821.66 1210.97 L1822.25 1210.97 L1822.84 1210.97 L1823.42 1210.97 L1824.01 1210.97 L1824.6 1210.97 L1825.18 1210.97 L1825.77 1210.97 L1826.35 1210.97 L1826.94 1210.97 L1827.53 1210.97 L1828.11 1210.97 L1828.7 1210.97 L1829.29 1210.97 L1829.87 1210.97 L1830.46 1210.97 L1831.05 1210.97 L1831.63 1210.97 L1832.22 1210.97 L1832.81 1210.97 L1833.39 1210.97 L1833.98 1210.97 L1834.56 1210.97 L1835.15 1210.97 L1835.74 1210.97 L1836.32 1210.97 L1836.91 1210.97 L1837.5 1210.97 L1838.08 1210.97 L1838.67 1210.97 L1839.26 1210.97 L1839.84 1210.97 L1840.43 1210.97 L1841.01 1210.97 L1841.6 1210.97 L1842.19 1210.97 L1842.77 1210.97 L1843.36 1210.97 L1843.95 1210.97 L1844.53 1210.97 L1845.12 1210.97 L1845.71 1210.97 L1846.29 1210.97 L1846.88 1210.97 L1847.47 1210.97 L1848.05 1210.97 L1848.64 1210.97 L1849.22 1210.97 L1849.81 1210.97 L1850.4 1210.97 L1850.98 1210.97 L1851.57 1210.97 L1852.16 1210.97 L1852.74 1210.97 L1853.33 1210.97 L1853.92 1210.97 L1854.5 1210.97 L1855.09 1210.97 L1855.68 1210.97 L1856.26 1210.97 L1856.85 1210.97 L1857.43 1210.97 L1858.02 1210.97 L1858.61 1210.97 L1859.19 1210.97 L1859.78 1210.97 L1860.37 1210.97 L1860.95 1210.97 L1861.54 1210.97 L1862.13 1210.97 L1862.71 1210.97 L1863.3 1210.97 L1863.88 1210.97 L1864.47 1210.97 L1865.06 1210.97 L1865.64 1210.97 L1866.23 1210.97 L1866.82 1210.97 L1867.4 1210.97 L1867.99 1210.97 L1868.58 1210.97 L1869.16 1210.97 L1869.75 1210.97 L1870.34 1210.97 L1870.92 1210.97 L1871.51 1210.97 L1872.09 1210.97 L1872.68 1210.97 L1873.27 1210.97 L1873.85 1210.97 L1874.44 1210.97 L1875.03 1210.97 L1875.61 1210.97 L1876.2 1210.97 L1876.79 1210.97 L1877.37 1210.97 L1877.96 1210.97 L1878.55 1210.97 L1879.13 1210.97 L1879.72 1210.97 L1880.3 1210.97 L1880.89 1210.97 L1881.48 1210.97 L1882.06 1210.97 L1882.65 1210.97 L1883.24 1210.97 L1883.82 1210.97 L1884.41 1210.97 L1885 1210.97 L1885.58 1210.97 L1886.17 1210.97 L1886.76 1210.97 L1887.34 1210.97 L1887.93 1210.97 L1888.51 1210.97 L1889.1 1210.97 L1889.69 1210.97 L1890.27 1210.97 L1890.86 1210.97 L1891.45 1210.97 L1892.03 1210.97 L1892.62 1210.97 L1893.21 1210.97 L1893.79 1210.97 L1894.38 1210.97 L1894.96 1210.97 L1895.55 1210.97 L1896.14 1210.97 L1896.72 1210.97 L1897.31 1210.97 L1897.9 1210.97 L1898.48 1210.97 L1899.07 1210.97 L1899.66 1210.97 L1900.24 1210.97 L1900.83 1210.97 L1901.42 1210.97 L1902 1210.97 L1902.59 1210.97 L1903.17 1210.97 L1903.76 1210.97 L1904.35 1210.97 L1904.93 1210.97 L1905.52 1210.97 L1906.11 1210.97 L1906.69 1210.97 L1907.28 1210.97 L1907.87 1210.97 L1908.45 1210.97 L1909.04 1210.97 L1909.63 1210.97 L1910.21 1210.97 L1910.8 1210.97 L1911.38 1210.97 L1911.97 1210.97 L1912.56 1210.97 L1913.14 1210.97 L1913.73 1210.97 L1914.32 1210.97 L1914.9 1210.97 L1915.49 1210.97 L1916.08 1210.97 L1916.66 1210.97 L1917.25 1210.97 L1917.83 1210.97 L1918.42 1210.97 L1919.01 1210.97 L1919.59 1210.97 L1920.18 1210.97 L1920.77 1210.97 L1921.35 1210.97 L1921.94 1210.97 L1922.53 1210.97 L1923.11 1210.97 L1923.7 1210.97 L1924.29 1210.97 L1924.87 1210.97 L1925.46 1210.97 L1926.04 1210.97 L1926.63 1210.97 L1927.22 1210.97 L1927.8 1210.97 L1928.39 1210.97 L1928.98 1210.97 L1929.56 1210.97 L1930.15 1210.97 L1930.74 1210.97 L1931.32 1210.97 L1931.91 1210.97 L1932.5 1210.97 L1933.08 1210.97 L1933.67 1210.97 L1934.25 1210.97 L1934.84 1210.97 L1935.43 1210.97 L1936.01 1210.97 L1936.6 1210.97 L1937.19 1210.97 L1937.77 1210.97 L1938.36 1210.97 L1938.95 1210.97 L1939.53 1210.97 L1940.12 1210.97 L1940.71 1210.97 L1941.29 1210.97 L1941.88 1210.97 L1942.46 1210.97 L1943.05 1210.97 L1943.64 1210.97 L1944.22 1210.97 L1944.81 1210.97 L1945.4 1210.97 L1945.98 1210.97 L1946.57 1210.97 L1947.16 1210.97 L1947.74 1210.97 L1948.33 1210.97 L1948.91 1210.97 L1949.5 1210.97 L1950.09 1210.97 L1950.67 1210.97 L1951.26 1210.97 L1951.85 1210.97 L1952.43 1210.97 L1953.02 1210.97 L1953.61 1210.97 L1954.19 1210.97 L1954.78 1210.97 L1955.37 1210.97 L1955.95 1210.97 L1956.54 1210.97 L1957.12 1210.97 L1957.71 1210.97 L1958.3 1210.97 L1958.88 1210.97 L1959.47 1210.97 L1960.06 1210.97 L1960.64 1210.97 L1961.23 1210.97 L1961.82 1210.97 L1962.4 1210.97 L1962.99 1210.97 L1963.58 1210.97 L1964.16 1210.97 L1964.75 1210.97 L1965.33 1210.97 L1965.92 1210.97 L1966.51 1210.97 L1967.09 1210.97 L1967.68 1210.97 L1968.27 1210.97 L1968.85 1210.97 L1969.44 1210.97 L1970.03 1210.97 L1970.61 1210.97 L1971.2 1210.97 L1971.78 1210.97 L1972.37 1210.97 L1972.96 1210.97 L1973.54 1210.97 L1974.13 1210.97 L1974.72 1210.97 L1975.3 1210.97 L1975.89 1210.97 L1976.48 1210.97 L1977.06 1210.97 L1977.65 1210.97 L1978.24 1210.97 L1978.82 1210.97 L1979.41 1210.97 L1979.99 1210.97 L1980.58 1210.97 L1981.17 1210.97 L1981.75 1210.97 L1982.34 1210.97 L1982.93 1210.97 L1983.51 1210.97 L1984.1 1210.97 L1984.69 1210.97 L1985.27 1210.97 L1985.86 1210.97 L1986.45 1210.97 L1987.03 1210.97 L1987.62 1210.97 L1988.2 1210.97 L1988.79 1210.97 L1989.38 1210.97 L1989.96 1210.97 L1990.55 1210.97 L1991.14 1210.97 L1991.72 1210.97 L1992.31 1210.97 L1992.9 1210.97 L1993.48 1210.97 L1994.07 1210.97 L1994.65 1210.97 L1995.24 1210.97 L1995.83 1210.97 L1996.41 1210.97 L1997 1210.97 L1997.59 1210.97 L1998.17 1210.97 L1998.76 1210.97 L1999.35 1210.97 L1999.93 1210.97 L2000.52 1210.97 L2001.11 1210.97 L2001.69 1210.97 L2002.28 1210.97 L2002.86 1210.97 L2003.45 1210.97 L2004.04 1210.97 L2004.62 1210.97 L2005.21 1210.97 L2005.8 1210.97 L2006.38 1210.97 L2006.97 1210.97 L2007.56 1210.97 L2008.14 1210.97 L2008.73 1210.97 L2009.32 1210.97 L2009.9 1210.97 L2010.49 1210.97 L2011.07 1210.97 L2011.66 1210.97 L2012.25 1210.97 L2012.83 1210.97 L2013.42 1210.97 L2014.01 1210.97 L2014.59 1210.97 L2015.18 1210.97 L2015.77 1210.97 L2016.35 1210.97 L2016.94 1210.97 L2017.53 1210.97 L2018.11 1210.97 L2018.7 1210.97 L2019.28 1210.97 L2019.87 1210.97 L2020.46 1210.97 L2021.04 1210.97 L2021.63 1210.97 L2022.22 1210.97 L2022.8 1210.97 L2023.39 1210.97 L2023.98 1210.97 L2024.56 1210.97 L2025.15 1210.97 L2025.73 1210.97 L2026.32 1210.97 L2026.91 1210.97 L2027.49 1210.97 L2028.08 1210.97 L2028.67 1210.97 L2029.25 1210.97 L2029.84 1210.97 L2030.43 1210.97 L2031.01 1210.97 L2031.6 1210.97 L2032.19 1210.97 L2032.77 1210.97 L2033.36 1210.97 L2033.94 1210.97 L2034.53 1210.97 L2035.12 1210.97 L2035.7 1210.97 L2036.29 1210.97 L2036.88 1210.97 L2037.46 1210.97 L2038.05 1210.97 L2038.64 1210.97 L2039.22 1210.97 L2039.81 1210.97 L2040.4 1210.97 L2040.98 1210.97 L2041.57 1210.97 L2042.15 1210.97 L2042.74 1210.97 L2043.33 1210.97 L2043.91 1210.97 L2044.5 1210.97 L2045.09 1210.97 L2045.67 1210.97 L2046.26 1210.97 L2046.85 1210.97 L2047.43 1210.97 L2048.02 1210.97 L2048.6 1210.97 L2049.19 1210.97 L2049.78 1210.97 L2050.36 1210.97 L2050.95 1210.97 L2051.54 1210.97 L2052.12 1210.97 L2052.71 1210.97 L2053.3 1210.97 L2053.88 1210.97 L2054.47 1210.97 L2055.06 1210.97 L2055.64 1210.97 L2056.23 1210.97 L2056.81 1210.97 L2057.4 1210.97 L2057.99 1210.97 L2058.57 1210.97 L2059.16 1210.97 L2059.75 1210.97 L2060.33 1210.97 L2060.92 1210.97 L2061.51 1210.97 L2062.09 1210.97 L2062.68 1210.97 L2063.27 1210.97 L2063.85 1210.97 L2064.44 1210.97 L2065.02 1210.97 L2065.61 1210.97 L2066.2 1210.97 L2066.78 1210.97 L2067.37 1210.97 L2067.96 1210.97 L2068.54 1210.97 L2069.13 1210.97 L2069.72 1210.97 L2070.3 1210.97 L2070.89 1210.97 L2071.48 1210.97 L2072.06 1210.97 L2072.65 1210.97 L2073.23 1210.97 L2073.82 1210.97 L2074.41 1210.97 L2074.99 1210.97 L2075.58 1210.97 L2076.17 1210.97 L2076.75 1210.97 L2077.34 1210.97 L2077.93 1210.97 L2078.51 1210.97 L2079.1 1210.97 L2079.68 1210.97 L2080.27 1210.97 L2080.86 1210.97 L2081.44 1210.97 L2082.03 1210.97 L2082.62 1210.97 L2083.2 1210.97 L2083.79 1210.97 L2084.38 1210.97 L2084.96 1210.97 L2085.55 1210.97 L2086.14 1210.97 L2086.72 1210.97 L2087.31 1210.97 L2087.89 1210.97 L2088.48 1210.97 L2089.07 1210.97 L2089.65 1210.97 L2090.24 1210.97 L2090.83 1210.97 L2091.41 1210.97 L2092 1210.97 L2092.59 1210.97 L2093.17 1210.97 L2093.76 1210.97 L2094.35 1210.97 L2094.93 1210.97 L2095.52 1210.97 L2096.1 1210.97 L2096.69 1210.97 L2097.28 1210.97 L2097.86 1210.97 L2098.45 1210.97 L2099.04 1210.97 L2099.62 1210.97 L2100.21 1210.97 L2100.8 1210.97 L2101.38 1210.97 L2101.97 1210.97 L2102.55 1210.97 L2103.14 1210.97 L2103.73 1210.97 L2104.31 1210.97 L2104.9 1210.97 L2105.49 1210.97 L2106.07 1210.97 L2106.66 1210.97 L2107.25 1210.97 L2107.83 1210.97 L2108.42 1210.97 L2109.01 1210.97 L2109.59 1210.97 L2110.18 1210.97 L2110.76 1210.97 L2111.35 1210.97 L2111.94 1210.97 L2112.52 1210.97 L2113.11 1210.97 L2113.7 1210.97 L2114.28 1210.97 L2114.87 1210.97 L2115.46 1210.97 L2116.04 1210.97 L2116.63 1210.97 L2117.22 1210.97 L2117.8 1210.97 L2118.39 1210.97 L2118.97 1210.97 L2119.56 1210.97 L2120.15 1210.97 L2120.73 1210.97 L2121.32 1210.97 L2121.91 1210.97 L2122.49 1210.97 L2123.08 1210.97 L2123.67 1210.97 L2124.25 1210.97 L2124.84 1210.97 L2125.42 1210.97 L2126.01 1210.97 L2126.6 1210.97 L2127.18 1210.97 L2127.77 1210.97 L2128.36 1210.97 L2128.94 1210.97 L2129.53 1210.97 L2130.12 1210.97 L2130.7 1210.97 L2131.29 1210.97 L2131.88 1210.97 L2132.46 1210.97 L2133.05 1210.97 L2133.63 1210.97 L2134.22 1210.97 L2134.81 1210.97 L2135.39 1210.97 L2135.98 1210.97 L2136.57 1210.97 L2137.15 1210.97 L2137.74 1210.97 L2138.33 1210.97 L2138.91 1210.97 L2139.5 1210.97 L2140.09 1210.97 L2140.67 1210.97 L2141.26 1210.97 L2141.84 1210.97 L2142.43 1210.97 L2143.02 1210.97 L2143.6 1210.97 L2144.19 1210.97 L2144.78 1210.97 L2145.36 1210.97 L2145.95 1210.97 L2146.54 1210.97 L2147.12 1210.97 L2147.71 1210.97 L2148.3 1210.97 L2148.88 1210.97 L2149.47 1210.97 L2150.05 1210.97 L2150.64 1210.97 L2151.23 1210.97 L2151.81 1210.97 L2152.4 1210.97 L2152.99 1210.97 L2153.57 1210.97 L2154.16 1210.97 L2154.75 1210.97 L2155.33 1210.97 L2155.92 1210.97 L2156.5 1210.97 L2157.09 1210.97 L2157.68 1210.97 L2158.26 1210.97 L2158.26 1210.3 L2157.68 1210.3 L2157.09 1210.3 L2156.5 1210.3 L2155.92 1210.3 L2155.33 1210.3 L2154.75 1210.3 L2154.16 1210.3 L2153.57 1210.3 L2152.99 1210.3 L2152.4 1210.3 L2151.81 1210.3 L2151.23 1210.3 L2150.64 1210.3 L2150.05 1210.3 L2149.47 1210.3 L2148.88 1210.3 L2148.3 1210.3 L2147.71 1210.3 L2147.12 1210.3 L2146.54 1210.3 L2145.95 1210.3 L2145.36 1210.3 L2144.78 1210.3 L2144.19 1210.3 L2143.6 1210.3 L2143.02 1210.3 L2142.43 1210.3 L2141.84 1210.3 L2141.26 1210.3 L2140.67 1210.3 L2140.09 1210.3 L2139.5 1210.3 L2138.91 1210.3 L2138.33 1210.3 L2137.74 1210.3 L2137.15 1210.3 L2136.57 1210.3 L2135.98 1210.3 L2135.39 1210.3 L2134.81 1210.3 L2134.22 1210.3 L2133.63 1210.3 L2133.05 1210.3 L2132.46 1210.3 L2131.88 1210.3 L2131.29 1210.3 L2130.7 1210.3 L2130.12 1210.3 L2129.53 1210.3 L2128.94 1210.3 L2128.36 1210.3 L2127.77 1210.3 L2127.18 1210.3 L2126.6 1210.3 L2126.01 1210.3 L2125.42 1210.3 L2124.84 1210.3 L2124.25 1210.3 L2123.67 1210.3 L2123.08 1210.3 L2122.49 1210.3 L2121.91 1210.3 L2121.32 1210.3 L2120.73 1210.3 L2120.15 1210.3 L2119.56 1210.3 L2118.97 1210.3 L2118.39 1210.3 L2117.8 1210.3 L2117.22 1210.3 L2116.63 1210.3 L2116.04 1210.3 L2115.46 1210.3 L2114.87 1210.3 L2114.28 1210.3 L2113.7 1210.3 L2113.11 1210.3 L2112.52 1210.3 L2111.94 1210.3 L2111.35 1210.3 L2110.76 1210.3 L2110.18 1210.3 L2109.59 1210.3 L2109.01 1210.3 L2108.42 1210.3 L2107.83 1210.3 L2107.25 1210.3 L2106.66 1210.3 L2106.07 1210.3 L2105.49 1210.3 L2104.9 1210.3 L2104.31 1210.3 L2103.73 1210.3 L2103.14 1210.3 L2102.55 1210.3 L2101.97 1210.3 L2101.38 1210.3 L2100.8 1210.3 L2100.21 1210.3 L2099.62 1210.3 L2099.04 1210.3 L2098.45 1210.3 L2097.86 1210.3 L2097.28 1210.3 L2096.69 1210.3 L2096.1 1210.3 L2095.52 1210.3 L2094.93 1210.3 L2094.35 1210.3 L2093.76 1210.3 L2093.17 1210.3 L2092.59 1210.3 L2092 1210.3 L2091.41 1210.3 L2090.83 1210.3 L2090.24 1210.3 L2089.65 1210.3 L2089.07 1210.3 L2088.48 1210.3 L2087.89 1210.3 L2087.31 1210.3 L2086.72 1210.3 L2086.14 1210.3 L2085.55 1210.3 L2084.96 1210.3 L2084.38 1210.3 L2083.79 1210.3 L2083.2 1210.3 L2082.62 1210.3 L2082.03 1210.3 L2081.44 1210.3 L2080.86 1210.3 L2080.27 1210.3 L2079.68 1210.3 L2079.1 1210.3 L2078.51 1210.3 L2077.93 1210.3 L2077.34 1210.3 L2076.75 1210.3 L2076.17 1210.3 L2075.58 1210.3 L2074.99 1210.3 L2074.41 1210.3 L2073.82 1210.3 L2073.23 1210.3 L2072.65 1210.3 L2072.06 1210.3 L2071.48 1210.3 L2070.89 1210.3 L2070.3 1210.3 L2069.72 1210.3 L2069.13 1210.3 L2068.54 1210.3 L2067.96 1210.3 L2067.37 1210.3 L2066.78 1210.3 L2066.2 1210.3 L2065.61 1210.3 L2065.02 1210.3 L2064.44 1210.3 L2063.85 1210.3 L2063.27 1210.3 L2062.68 1210.3 L2062.09 1210.3 L2061.51 1210.3 L2060.92 1210.3 L2060.33 1210.3 L2059.75 1210.3 L2059.16 1210.3 L2058.57 1210.3 L2057.99 1210.3 L2057.4 1210.3 L2056.81 1210.3 L2056.23 1210.3 L2055.64 1210.3 L2055.06 1210.3 L2054.47 1210.3 L2053.88 1210.3 L2053.3 1210.3 L2052.71 1210.3 L2052.12 1210.3 L2051.54 1210.3 L2050.95 1210.3 L2050.36 1210.3 L2049.78 1210.3 L2049.19 1210.3 L2048.6 1210.3 L2048.02 1210.3 L2047.43 1210.3 L2046.85 1210.3 L2046.26 1210.3 L2045.67 1210.3 L2045.09 1210.3 L2044.5 1210.3 L2043.91 1210.3 L2043.33 1210.3 L2042.74 1210.3 L2042.15 1210.3 L2041.57 1210.3 L2040.98 1210.3 L2040.4 1210.3 L2039.81 1210.3 L2039.22 1210.3 L2038.64 1210.3 L2038.05 1210.3 L2037.46 1210.3 L2036.88 1210.3 L2036.29 1210.3 L2035.7 1210.3 L2035.12 1210.3 L2034.53 1210.3 L2033.94 1210.3 L2033.36 1210.3 L2032.77 1210.3 L2032.19 1210.3 L2031.6 1210.3 L2031.01 1210.3 L2030.43 1210.3 L2029.84 1210.3 L2029.25 1210.3 L2028.67 1210.3 L2028.08 1210.3 L2027.49 1210.3 L2026.91 1210.3 L2026.32 1210.3 L2025.73 1210.3 L2025.15 1210.3 L2024.56 1210.3 L2023.98 1210.3 L2023.39 1210.3 L2022.8 1210.3 L2022.22 1210.3 L2021.63 1210.3 L2021.04 1210.3 L2020.46 1210.3 L2019.87 1210.3 L2019.28 1210.3 L2018.7 1210.3 L2018.11 1210.3 L2017.53 1210.3 L2016.94 1210.3 L2016.35 1210.3 L2015.77 1210.3 L2015.18 1210.3 L2014.59 1210.3 L2014.01 1210.3 L2013.42 1210.3 L2012.83 1210.3 L2012.25 1210.3 L2011.66 1210.3 L2011.07 1210.3 L2010.49 1210.3 L2009.9 1210.3 L2009.32 1210.3 L2008.73 1210.3 L2008.14 1210.3 L2007.56 1210.3 L2006.97 1210.3 L2006.38 1210.3 L2005.8 1210.3 L2005.21 1210.3 L2004.62 1210.3 L2004.04 1210.3 L2003.45 1210.3 L2002.86 1210.3 L2002.28 1210.3 L2001.69 1210.3 L2001.11 1210.3 L2000.52 1210.3 L1999.93 1210.3 L1999.35 1210.3 L1998.76 1210.3 L1998.17 1210.3 L1997.59 1210.3 L1997 1210.3 L1996.41 1210.3 L1995.83 1210.3 L1995.24 1210.3 L1994.65 1210.3 L1994.07 1210.3 L1993.48 1210.3 L1992.9 1210.3 L1992.31 1210.3 L1991.72 1210.3 L1991.14 1210.3 L1990.55 1210.3 L1989.96 1210.3 L1989.38 1210.3 L1988.79 1210.3 L1988.2 1210.3 L1987.62 1210.3 L1987.03 1210.3 L1986.45 1210.3 L1985.86 1210.3 L1985.27 1210.3 L1984.69 1210.3 L1984.1 1210.3 L1983.51 1210.3 L1982.93 1210.3 L1982.34 1210.3 L1981.75 1210.3 L1981.17 1210.3 L1980.58 1210.3 L1979.99 1210.3 L1979.41 1210.3 L1978.82 1210.3 L1978.24 1210.3 L1977.65 1210.3 L1977.06 1210.3 L1976.48 1210.3 L1975.89 1210.3 L1975.3 1210.3 L1974.72 1210.3 L1974.13 1210.3 L1973.54 1210.3 L1972.96 1210.3 L1972.37 1210.3 L1971.78 1210.3 L1971.2 1210.3 L1970.61 1210.3 L1970.03 1210.3 L1969.44 1210.3 L1968.85 1210.3 L1968.27 1210.3 L1967.68 1210.3 L1967.09 1210.3 L1966.51 1210.3 L1965.92 1210.3 L1965.33 1210.3 L1964.75 1210.3 L1964.16 1210.3 L1963.58 1210.3 L1962.99 1210.3 L1962.4 1210.3 L1961.82 1210.3 L1961.23 1210.3 L1960.64 1210.3 L1960.06 1210.3 L1959.47 1210.3 L1958.88 1210.3 L1958.3 1210.3 L1957.71 1210.3 L1957.12 1210.3 L1956.54 1210.3 L1955.95 1210.3 L1955.37 1210.3 L1954.78 1210.3 L1954.19 1210.3 L1953.61 1210.3 L1953.02 1210.3 L1952.43 1210.3 L1951.85 1210.3 L1951.26 1210.3 L1950.67 1210.3 L1950.09 1210.3 L1949.5 1210.3 L1948.91 1210.3 L1948.33 1210.3 L1947.74 1210.3 L1947.16 1210.3 L1946.57 1210.3 L1945.98 1210.3 L1945.4 1210.3 L1944.81 1210.3 L1944.22 1210.3 L1943.64 1210.3 L1943.05 1210.3 L1942.46 1210.3 L1941.88 1210.3 L1941.29 1210.3 L1940.71 1210.3 L1940.12 1210.3 L1939.53 1210.3 L1938.95 1210.3 L1938.36 1210.3 L1937.77 1210.3 L1937.19 1210.3 L1936.6 1210.3 L1936.01 1210.3 L1935.43 1210.3 L1934.84 1210.3 L1934.25 1210.3 L1933.67 1210.3 L1933.08 1210.3 L1932.5 1210.3 L1931.91 1210.3 L1931.32 1210.3 L1930.74 1210.3 L1930.15 1210.3 L1929.56 1210.3 L1928.98 1210.3 L1928.39 1210.3 L1927.8 1210.3 L1927.22 1210.3 L1926.63 1210.3 L1926.04 1210.3 L1925.46 1210.3 L1924.87 1210.3 L1924.29 1210.3 L1923.7 1210.3 L1923.11 1210.3 L1922.53 1210.3 L1921.94 1210.3 L1921.35 1210.3 L1920.77 1210.3 L1920.18 1210.3 L1919.59 1210.3 L1919.01 1210.3 L1918.42 1210.3 L1917.83 1210.3 L1917.25 1210.3 L1916.66 1210.3 L1916.08 1210.3 L1915.49 1210.3 L1914.9 1210.3 L1914.32 1210.3 L1913.73 1210.3 L1913.14 1210.3 L1912.56 1210.3 L1911.97 1210.3 L1911.38 1210.3 L1910.8 1210.3 L1910.21 1210.3 L1909.63 1210.3 L1909.04 1210.3 L1908.45 1210.3 L1907.87 1210.3 L1907.28 1210.3 L1906.69 1210.3 L1906.11 1210.3 L1905.52 1210.3 L1904.93 1210.3 L1904.35 1210.3 L1903.76 1210.3 L1903.17 1210.3 L1902.59 1210.3 L1902 1210.3 L1901.42 1210.3 L1900.83 1210.3 L1900.24 1210.3 L1899.66 1210.3 L1899.07 1210.3 L1898.48 1210.3 L1897.9 1210.3 L1897.31 1210.3 L1896.72 1210.3 L1896.14 1210.3 L1895.55 1210.3 L1894.96 1210.3 L1894.38 1210.3 L1893.79 1210.3 L1893.21 1210.3 L1892.62 1210.3 L1892.03 1210.3 L1891.45 1210.3 L1890.86 1210.3 L1890.27 1210.3 L1889.69 1210.3 L1889.1 1210.3 L1888.51 1210.3 L1887.93 1210.3 L1887.34 1210.3 L1886.76 1210.3 L1886.17 1210.3 L1885.58 1210.3 L1885 1210.3 L1884.41 1210.3 L1883.82 1210.3 L1883.24 1210.3 L1882.65 1210.3 L1882.06 1210.3 L1881.48 1210.3 L1880.89 1210.3 L1880.3 1210.3 L1879.72 1210.3 L1879.13 1210.3 L1878.55 1210.3 L1877.96 1210.3 L1877.37 1210.3 L1876.79 1210.3 L1876.2 1210.3 L1875.61 1210.3 L1875.03 1210.3 L1874.44 1210.3 L1873.85 1210.3 L1873.27 1210.3 L1872.68 1210.3 L1872.09 1210.3 L1871.51 1210.3 L1870.92 1210.3 L1870.34 1210.3 L1869.75 1210.3 L1869.16 1210.3 L1868.58 1210.3 L1867.99 1210.3 L1867.4 1210.3 L1866.82 1210.3 L1866.23 1210.3 L1865.64 1210.3 L1865.06 1210.3 L1864.47 1210.3 L1863.88 1210.3 L1863.3 1210.3 L1862.71 1210.3 L1862.13 1210.3 L1861.54 1210.3 L1860.95 1210.3 L1860.37 1210.3 L1859.78 1210.3 L1859.19 1210.3 L1858.61 1210.3 L1858.02 1210.3 L1857.43 1210.3 L1856.85 1210.3 L1856.26 1210.3 L1855.68 1210.3 L1855.09 1210.3 L1854.5 1210.3 L1853.92 1210.3 L1853.33 1210.3 L1852.74 1210.3 L1852.16 1210.3 L1851.57 1210.3 L1850.98 1210.3 L1850.4 1210.3 L1849.81 1210.3 L1849.22 1210.3 L1848.64 1210.3 L1848.05 1210.3 L1847.47 1210.3 L1846.88 1210.3 L1846.29 1210.3 L1845.71 1210.3 L1845.12 1210.3 L1844.53 1210.3 L1843.95 1210.3 L1843.36 1210.3 L1842.77 1210.3 L1842.19 1210.3 L1841.6 1210.3 L1841.01 1210.3 L1840.43 1210.3 L1839.84 1210.3 L1839.26 1210.3 L1838.67 1210.3 L1838.08 1210.3 L1837.5 1210.3 L1836.91 1210.3 L1836.32 1210.3 L1835.74 1210.3 L1835.15 1210.3 L1834.56 1210.3 L1833.98 1210.3 L1833.39 1210.3 L1832.81 1210.3 L1832.22 1210.3 L1831.63 1210.3 L1831.05 1210.3 L1830.46 1210.3 L1829.87 1210.3 L1829.29 1210.3 L1828.7 1210.3 L1828.11 1210.3 L1827.53 1210.3 L1826.94 1210.3 L1826.35 1210.3 L1825.77 1210.3 L1825.18 1210.3 L1824.6 1210.3 L1824.01 1210.3 L1823.42 1210.3 L1822.84 1210.3 L1822.25 1210.3 L1821.66 1210.3 L1821.08 1210.3 L1820.49 1210.3 L1819.9 1210.3 L1819.32 1210.3 L1818.73 1210.3 L1818.14 1210.3 L1817.56 1210.3 L1816.97 1210.3 L1816.39 1210.3 L1815.8 1210.3 L1815.21 1210.3 L1814.63 1210.3 L1814.04 1210.3 L1813.45 1210.3 L1812.87 1210.3 L1812.28 1210.3 L1811.69 1210.3 L1811.11 1210.3 L1810.52 1210.3 L1809.94 1210.3 L1809.35 1210.3 L1808.76 1210.3 L1808.18 1210.3 L1807.59 1210.3 L1807 1210.3 L1806.42 1210.3 L1805.83 1210.3 L1805.24 1210.3 L1804.66 1210.3 L1804.07 1210.3 L1803.48 1210.3 L1802.9 1210.3 L1802.31 1210.3 L1801.73 1210.3 L1801.14 1210.3 L1800.55 1210.3 L1799.97 1210.3 L1799.38 1210.3 L1798.79 1210.3 L1798.21 1210.3 L1797.62 1210.3 L1797.03 1210.3 L1796.45 1210.3 L1795.86 1210.3 L1795.27 1210.3 L1794.69 1210.3 L1794.1 1210.3 L1793.52 1210.3 L1792.93 1210.3 L1792.34 1210.3 L1791.76 1210.3 L1791.17 1210.3 L1790.58 1210.3 L1790 1210.3 L1789.41 1210.3 L1788.82 1210.3 L1788.24 1210.3 L1787.65 1210.3 L1787.06 1210.3 L1786.48 1210.3 L1785.89 1210.3 L1785.31 1210.3 L1784.72 1210.3 L1784.13 1210.3 L1783.55 1210.3 L1782.96 1210.3 L1782.37 1210.3 L1781.79 1210.3 L1781.2 1210.3 L1780.61 1210.3 L1780.03 1210.3 L1779.44 1210.3 L1778.86 1210.3 L1778.27 1210.3 L1777.68 1210.3 L1777.1 1210.3 L1776.51 1210.3 L1775.92 1210.3 L1775.34 1210.3 L1774.75 1210.3 L1774.16 1210.3 L1773.58 1210.3 L1772.99 1210.3 L1772.4 1210.3 L1771.82 1210.3 L1771.23 1210.3 L1770.65 1210.3 L1770.06 1210.3 L1769.47 1210.3 L1768.89 1210.3 L1768.3 1210.3 L1767.71 1210.3 L1767.13 1210.3 L1766.54 1210.3 L1765.95 1210.3 L1765.37 1210.3 L1764.78 1210.3 L1764.19 1210.3 L1763.61 1210.3 L1763.02 1210.3 L1762.44 1210.3 L1761.85 1210.3 L1761.26 1210.3 L1760.68 1210.3 L1760.09 1210.3 L1759.5 1210.3 L1758.92 1210.3 L1758.33 1210.3 L1757.74 1210.3 L1757.16 1210.3 L1756.57 1210.3 L1755.99 1210.3 L1755.4 1210.3 L1754.81 1210.3 L1754.23 1210.3 L1753.64 1210.3 L1753.05 1210.3 L1752.47 1210.3 L1751.88 1210.3 L1751.29 1210.3 L1750.71 1210.3 L1750.12 1210.3 L1749.53 1210.3 L1748.95 1210.3 L1748.36 1210.3 L1747.78 1210.3 L1747.19 1210.3 L1746.6 1210.3 L1746.02 1210.3 L1745.43 1210.3 L1744.84 1210.3 L1744.26 1210.3 L1743.67 1210.3 L1743.08 1210.3 L1742.5 1210.3 L1741.91 1210.3 L1741.32 1210.3 L1740.74 1210.3 L1740.15 1210.3 L1739.57 1210.3 L1738.98 1210.3 L1738.39 1210.3 L1737.81 1210.3 L1737.22 1210.3 L1736.63 1210.3 L1736.05 1210.3 L1735.46 1210.3 L1734.87 1210.3 L1734.29 1210.3 L1733.7 1210.3 L1733.11 1210.3 L1732.53 1210.3 L1731.94 1210.3 L1731.36 1210.3 L1730.77 1210.3 L1730.18 1210.3 L1729.6 1210.3 L1729.01 1210.3 L1728.42 1210.3 L1727.84 1210.3 L1727.25 1210.3 L1726.66 1210.3 L1726.08 1210.3 L1725.49 1210.3 L1724.91 1210.3 L1724.32 1210.3 L1723.73 1210.3 L1723.15 1210.3 L1722.56 1210.3 L1721.97 1210.3 L1721.39 1210.3 L1720.8 1210.3 L1720.21 1210.3 L1719.63 1210.3 L1719.04 1210.3 L1718.45 1210.3 L1717.87 1210.3 L1717.28 1210.3 L1716.7 1210.3 L1716.11 1210.3 L1715.52 1210.3 L1714.94 1210.3 L1714.35 1210.3 L1713.76 1210.3 L1713.18 1210.3 L1712.59 1210.3 L1712 1210.3 L1711.42 1210.3 L1710.83 1210.3 L1710.24 1210.3 L1709.66 1210.3 L1709.07 1210.3 L1708.49 1210.3 L1707.9 1210.3 L1707.31 1210.3 L1706.73 1210.3 L1706.14 1210.3 L1705.55 1210.3 L1704.97 1210.3 L1704.38 1210.3 L1703.79 1210.3 L1703.21 1210.3 L1702.62 1210.3 L1702.04 1210.3 L1701.45 1210.3 L1700.86 1210.3 L1700.28 1210.3 L1699.69 1210.3 L1699.1 1210.3 L1698.52 1210.3 L1697.93 1210.3 L1697.34 1210.3 L1696.76 1210.3 L1696.17 1210.3 L1695.58 1210.3 L1695 1210.3 L1694.41 1210.3 L1693.83 1210.3 L1693.24 1210.3 L1692.65 1210.3 L1692.07 1210.3 L1691.48 1210.3 L1690.89 1210.3 L1690.31 1210.3 L1689.72 1210.3 L1689.13 1210.3 L1688.55 1210.3 L1687.96 1210.3 L1687.37 1210.3 L1686.79 1210.3 L1686.2 1210.3 L1685.62 1210.3 L1685.03 1210.3 L1684.44 1210.3 L1683.86 1210.3 L1683.27 1210.3 L1682.68 1210.3 L1682.1 1210.3 L1681.51 1210.3 L1680.92 1210.3 L1680.34 1210.3 L1679.75 1210.3 L1679.17 1210.3 L1678.58 1210.3 L1677.99 1210.3 L1677.41 1210.3 L1676.82 1210.3 L1676.23 1210.3 L1675.65 1210.3 L1675.06 1210.3 L1674.47 1210.3 L1673.89 1210.3 L1673.3 1210.3 L1672.71 1210.3 L1672.13 1210.3 L1671.54 1210.3 L1670.96 1210.3 L1670.37 1210.3 L1669.78 1210.3 L1669.2 1210.3 L1668.61 1210.3 L1668.02 1210.3 L1667.44 1210.3 L1666.85 1210.3 L1666.26 1210.3 L1665.68 1210.3 L1665.09 1210.3 L1664.5 1210.3 L1663.92 1210.3 L1663.33 1210.3 L1662.75 1210.3 L1662.16 1210.3 L1661.57 1210.3 L1660.99 1210.3 L1660.4 1210.3 L1659.81 1210.3 L1659.23 1210.3 L1658.64 1210.3 L1658.05 1210.3 L1657.47 1210.3 L1656.88 1210.3 L1656.29 1210.3 L1655.71 1210.3 L1655.12 1210.3 L1654.54 1210.3 L1653.95 1210.3 L1653.36 1210.3 L1652.78 1210.3 L1652.19 1210.3 L1651.6 1210.3 L1651.02 1210.3 L1650.43 1210.3 L1649.84 1210.3 L1649.26 1210.3 L1648.67 1210.3 L1648.09 1210.3 L1647.5 1210.3 L1646.91 1210.3 L1646.33 1210.3 L1645.74 1210.3 L1645.15 1210.3 L1644.57 1210.3 L1643.98 1210.3 L1643.39 1210.3 L1642.81 1210.3 L1642.22 1210.3 L1641.63 1210.3 L1641.05 1210.3 L1640.46 1210.3 L1639.88 1210.3 L1639.29 1210.3 L1638.7 1210.3 L1638.12 1210.3 L1637.53 1210.3 L1636.94 1210.3 L1636.36 1210.3 L1635.77 1210.3 L1635.18 1210.3 L1634.6 1210.3 L1634.01 1210.3 L1633.42 1210.3 L1632.84 1210.3 L1632.25 1210.3 L1631.67 1210.3 L1631.08 1210.3 L1630.49 1210.3 L1629.91 1210.3 L1629.32 1210.3 L1628.73 1210.3 L1628.15 1210.3 L1627.56 1210.3 L1626.97 1210.3 L1626.39 1210.3 L1625.8 1210.3 L1625.22 1210.3 L1624.63 1210.3 L1624.04 1210.3 L1623.46 1210.3 L1622.87 1210.3 L1622.28 1210.3 L1621.7 1210.3 L1621.11 1210.3 L1620.52 1210.3 L1619.94 1210.3 L1619.35 1210.3 L1618.76 1210.3 L1618.18 1210.3 L1617.59 1210.3 L1617.01 1210.3 L1616.42 1210.3 L1615.83 1210.3 L1615.25 1210.3 L1614.66 1210.3 L1614.07 1210.3 L1613.49 1210.3 L1612.9 1210.3 L1612.31 1210.3 L1611.73 1210.3 L1611.14 1210.3 L1610.55 1210.3 L1609.97 1210.3 L1609.38 1210.3 L1608.8 1210.3 L1608.21 1210.3 L1607.62 1210.3 L1607.04 1210.3 L1606.45 1210.3 L1605.86 1210.3 L1605.28 1210.3 L1604.69 1210.3 L1604.1 1210.3 L1603.52 1210.3 L1602.93 1210.3 L1602.34 1210.3 L1601.76 1210.3 L1601.17 1210.3 L1600.59 1210.3 L1600 1210.3 L1599.41 1210.3 L1598.83 1210.3 L1598.24 1210.3 L1597.65 1210.3 L1597.07 1210.3 L1596.48 1210.3 L1595.89 1210.3 L1595.31 1210.3 L1594.72 1210.3 L1594.14 1210.3 L1593.55 1210.3 L1592.96 1210.3 L1592.38 1210.3 L1591.79 1210.3 L1591.2 1210.3 L1590.62 1210.3 L1590.03 1210.3 L1589.44 1210.3 L1588.86 1210.3 L1588.27 1210.3 L1587.68 1210.3 L1587.1 1210.3 L1586.51 1210.3 L1585.93 1210.3 L1585.34 1210.3 L1584.75 1210.3 L1584.17 1210.3 L1583.58 1210.3 L1582.99 1210.3 L1582.41 1210.3 L1581.82 1210.3 L1581.23 1210.3 L1580.65 1210.3 L1580.06 1210.3 L1579.47 1210.3 L1578.89 1210.3 L1578.3 1210.3 L1577.72 1210.3 L1577.13 1210.3 L1576.54 1210.3 L1575.96 1210.3 L1575.37 1210.3 L1574.78 1210.3 L1574.2 1210.3 L1573.61 1210.3 L1573.02 1210.3 L1572.44 1210.3 L1571.85 1210.3 L1571.27 1210.3 L1570.68 1210.3 L1570.09 1210.3 L1569.51 1210.3 L1568.92 1210.3 L1568.33 1210.3 L1567.75 1210.3 L1567.16 1210.3 L1566.57 1210.3 L1565.99 1210.3 L1565.4 1210.3 L1564.81 1210.3 L1564.23 1210.3 L1563.64 1210.3 L1563.06 1210.3 L1562.47 1210.3 L1561.88 1210.3 L1561.3 1210.3 L1560.71 1210.3 L1560.12 1210.3 L1559.54 1210.3 L1558.95 1210.3 L1558.36 1210.3 L1557.78 1210.3 L1557.19 1210.3 L1556.6 1210.3 L1556.02 1210.3 L1555.43 1210.3 L1554.85 1210.3 L1554.26 1210.3 L1553.67 1210.3 L1553.09 1210.3 L1552.5 1210.3 L1551.91 1210.3 L1551.33 1210.3 L1550.74 1210.3 L1550.15 1210.3 L1549.57 1210.3 L1548.98 1210.3 L1548.4 1210.3 L1547.81 1210.3 L1547.22 1210.3 L1546.64 1210.3 L1546.05 1210.3 L1545.46 1210.3 L1544.88 1210.3 L1544.29 1210.3 L1543.7 1210.3 L1543.12 1210.3 L1542.53 1210.3 L1541.94 1210.3 L1541.36 1210.3 L1540.77 1210.3 L1540.19 1210.3 L1539.6 1210.3 L1539.01 1210.3 L1538.43 1210.3 L1537.84 1210.3 L1537.25 1210.3 L1536.67 1210.3 L1536.08 1210.3 L1535.49 1210.3 L1534.91 1210.3 L1534.32 1210.3 L1533.73 1210.3 L1533.15 1210.3 L1532.56 1210.3 L1531.98 1210.3 L1531.39 1210.3 L1530.8 1210.3 L1530.22 1210.3 L1529.63 1210.3 L1529.04 1210.3 L1528.46 1210.3 L1527.87 1210.3 L1527.28 1210.3 L1526.7 1210.3 L1526.11 1210.3 L1525.52 1210.3 L1524.94 1210.3 L1524.35 1210.3 L1523.77 1210.3 L1523.18 1210.3 L1522.59 1210.3 L1522.01 1210.3 L1521.42 1210.3 L1520.83 1210.3 L1520.25 1210.3 L1519.66 1210.3 L1519.07 1210.3 L1518.49 1210.3 L1517.9 1210.3 L1517.32 1210.3 L1516.73 1210.3 L1516.14 1210.3 L1515.56 1210.3 L1514.97 1210.3 L1514.38 1210.3 L1513.8 1210.3 L1513.21 1210.3 L1512.62 1210.3 L1512.04 1210.3 L1511.45 1210.3 L1510.86 1210.3 L1510.28 1210.3 L1509.69 1210.3 L1509.11 1210.3 L1508.52 1210.3 L1507.93 1210.3 L1507.35 1210.3 L1506.76 1210.3 L1506.17 1210.3 L1505.59 1210.3 L1505 1210.3 L1504.41 1210.3 L1503.83 1210.3 L1503.24 1210.3 L1502.65 1210.3 L1502.07 1210.3 L1501.48 1210.3 L1500.9 1210.3 L1500.31 1210.3 L1499.72 1210.3 L1499.14 1210.3 L1498.55 1210.3 L1497.96 1210.3 L1497.38 1210.3 L1496.79 1210.3 L1496.2 1210.3 L1495.62 1210.3 L1495.03 1210.3 L1494.45 1210.3 L1493.86 1210.3 L1493.27 1210.3 L1492.69 1210.3 L1492.1 1210.3 L1491.51 1210.3 L1490.93 1210.3 L1490.34 1210.3 L1489.75 1210.3 L1489.17 1210.3 L1488.58 1210.3 L1487.99 1210.3 L1487.41 1210.3 L1486.82 1210.3 L1486.24 1210.3 L1485.65 1210.3 L1485.06 1210.3 L1484.48 1210.3 L1483.89 1210.3 L1483.3 1210.3 L1482.72 1210.3 L1482.13 1210.3 L1481.54 1210.3 L1480.96 1210.3 L1480.37 1210.3 L1479.78 1210.3 L1479.2 1210.3 L1478.61 1210.3 L1478.03 1210.3 L1477.44 1210.3 L1476.85 1210.3 L1476.27 1210.3 L1475.68 1210.3 L1475.09 1210.3 L1474.51 1210.3 L1473.92 1210.3 L1473.33 1210.3 L1472.75 1210.3 L1472.16 1210.3 L1471.57 1210.3 L1470.99 1210.3 L1470.4 1210.3 L1469.82 1210.3 L1469.23 1210.3 L1468.64 1210.3 L1468.06 1210.3 L1467.47 1210.3 L1466.88 1210.3 L1466.3 1210.3 L1465.71 1210.3 L1465.12 1210.3 L1464.54 1210.3 L1463.95 1210.3 L1463.37 1210.3 L1462.78 1210.3 L1462.19 1210.3 L1461.61 1210.3 L1461.02 1210.3 L1460.43 1210.3 L1459.85 1210.3 L1459.26 1210.3 L1458.67 1210.3 L1458.09 1210.3 L1457.5 1210.3 L1456.91 1210.3 L1456.33 1210.3 L1455.74 1210.3 L1455.16 1210.3 L1454.57 1210.3 L1453.98 1210.3 L1453.4 1210.3 L1452.81 1210.3 L1452.22 1210.3 L1451.64 1210.3 L1451.05 1210.3 L1450.46 1210.3 L1449.88 1210.3 L1449.29 1210.3 L1448.7 1210.3 L1448.12 1210.3 L1447.53 1210.3 L1446.95 1210.3 L1446.36 1210.3 L1445.77 1210.3 L1445.19 1210.3 L1444.6 1210.3 L1444.01 1210.3 L1443.43 1210.3 L1442.84 1210.3 L1442.25 1210.3 L1441.67 1210.3 L1441.08 1210.3 L1440.5 1210.3 L1439.91 1210.3 L1439.32 1210.3 L1438.74 1210.3 L1438.15 1210.3 L1437.56 1210.3 L1436.98 1210.3 L1436.39 1210.3 L1435.8 1210.3 L1435.22 1210.3 L1434.63 1210.3 L1434.04 1210.3 L1433.46 1210.3 L1432.87 1210.3 L1432.29 1210.3 L1431.7 1210.3 L1431.11 1210.3 L1430.53 1210.3 L1429.94 1210.3 L1429.35 1210.3 L1428.77 1210.3 L1428.18 1210.3 L1427.59 1210.3 L1427.01 1210.3 L1426.42 1210.3 L1425.83 1210.3 L1425.25 1210.3 L1424.66 1210.3 L1424.08 1210.3 L1423.49 1210.3 L1422.9 1210.3 L1422.32 1210.3 L1421.73 1210.3 L1421.14 1210.3 L1420.56 1210.3 L1419.97 1210.3 L1419.38 1210.3 L1418.8 1210.3 L1418.21 1210.3 L1417.63 1210.3 L1417.04 1210.3 L1416.45 1210.3 L1415.87 1210.3 L1415.28 1210.3 L1414.69 1210.3 L1414.11 1210.3 L1413.52 1210.3 L1412.93 1210.3 L1412.35 1210.3 L1411.76 1210.3 L1411.17 1210.3 L1410.59 1210.3 L1410 1210.3 L1409.42 1210.3 L1408.83 1210.3 L1408.24 1210.3 L1407.66 1210.3 L1407.07 1210.3 L1406.48 1210.3 L1405.9 1210.3 L1405.31 1210.3 L1404.72 1210.3 L1404.14 1210.3 L1403.55 1210.3 L1402.96 1210.3 L1402.38 1210.3 L1401.79 1210.3 L1401.21 1210.3 L1400.62 1210.3 L1400.03 1210.3 L1399.45 1210.3 L1398.86 1210.3 L1398.27 1210.3 L1397.69 1210.3 L1397.1 1210.3 L1396.51 1210.3 L1395.93 1210.3 L1395.34 1210.3 L1394.75 1210.3 L1394.17 1210.3 L1393.58 1210.3 L1393 1210.3 L1392.41 1210.3 L1391.82 1210.3 L1391.24 1210.3 L1390.65 1210.3 L1390.06 1210.3 L1389.48 1210.3 L1388.89 1210.3 L1388.3 1210.3 L1387.72 1210.3 L1387.13 1210.3 L1386.55 1210.3 L1385.96 1210.3 L1385.37 1210.3 L1384.79 1210.3 L1384.2 1210.3 L1383.61 1210.3 L1383.03 1210.3 L1382.44 1210.3 L1381.85 1210.3 L1381.27 1210.3 L1380.68 1210.3 L1380.09 1210.3 L1379.51 1210.3 L1378.92 1210.3 L1378.34 1210.3 L1377.75 1210.3 L1377.16 1210.3 L1376.58 1210.3 L1375.99 1210.3 L1375.4 1210.3 L1374.82 1210.3 L1374.23 1210.3 L1373.64 1210.3 L1373.06 1210.3 L1372.47 1210.3 L1371.88 1210.3 L1371.3 1210.3 L1370.71 1210.3 L1370.13 1210.3 L1369.54 1210.3 L1368.95 1210.3 L1368.37 1210.3 L1367.78 1210.3 L1367.19 1210.3 L1366.61 1210.3 L1366.02 1210.3 L1365.43 1210.3 L1364.85 1210.3 L1364.26 1210.3 L1363.68 1210.3 L1363.09 1210.3 L1362.5 1210.3 L1361.92 1210.3 L1361.33 1210.3 L1360.74 1210.3 L1360.16 1210.3 L1359.57 1210.3 L1358.98 1210.3 L1358.4 1210.3 L1357.81 1210.3 L1357.22 1210.3 L1356.64 1210.3 L1356.05 1210.3 L1355.47 1210.3 L1354.88 1210.3 L1354.29 1210.3 L1353.71 1210.3 L1353.12 1210.3 L1352.53 1210.3 L1351.95 1210.3 L1351.36 1210.3 L1350.77 1210.3 L1350.19 1210.3 L1349.6 1210.3 L1349.01 1210.3 L1348.43 1210.3 L1347.84 1210.3 L1347.26 1210.3 L1346.67 1210.3 L1346.08 1210.3 L1345.5 1210.3 L1344.91 1210.3 L1344.32 1210.3 L1343.74 1210.3 L1343.15 1210.3 L1342.56 1210.3 L1341.98 1210.3 L1341.39 1210.3 L1340.8 1210.3 L1340.22 1210.3 L1339.63 1210.3 L1339.05 1210.3 L1338.46 1210.3 L1337.87 1210.3 L1337.29 1210.3 L1336.7 1210.3 L1336.11 1210.3 L1335.53 1210.3 L1334.94 1210.3 L1334.35 1210.3 L1333.77 1210.3 L1333.18 1210.3 L1332.6 1210.3 L1332.01 1210.3 L1331.42 1210.3 L1330.84 1210.3 L1330.25 1210.3 L1329.66 1210.3 L1329.08 1210.3 L1328.49 1210.3 L1327.9 1210.3 L1327.32 1210.3 L1326.73 1210.3 L1326.14 1210.3 L1325.56 1210.3 L1324.97 1210.3 L1324.39 1210.3 L1323.8 1210.3 L1323.21 1210.3 L1322.63 1210.3 L1322.04 1210.3 L1321.45 1210.3 L1320.87 1210.3 L1320.28 1210.3 L1319.69 1210.3 L1319.11 1210.3 L1318.52 1210.3 L1317.93 1210.3 L1317.35 1210.3 L1316.76 1210.3 L1316.18 1210.3 L1315.59 1210.3 L1315 1210.3 L1314.42 1210.3 L1313.83 1210.3 L1313.24 1210.3 L1312.66 1210.3 L1312.07 1210.3 L1311.48 1210.3 L1310.9 1210.3 L1310.31 1210.3 L1309.73 1210.3 L1309.14 1210.3 L1308.55 1210.3 L1307.97 1210.3 L1307.38 1210.3 L1306.79 1210.3 L1306.21 1210.3 L1305.62 1210.3 L1305.03 1210.3 L1304.45 1210.3 L1303.86 1210.3 L1303.27 1210.3 L1302.69 1210.3 L1302.1 1210.3 L1301.52 1210.3 L1300.93 1210.3 L1300.34 1210.3 L1299.76 1210.3 L1299.17 1210.3 L1298.58 1210.3 L1298 1210.3 L1297.41 1210.3 L1296.82 1210.3 L1296.24 1210.3 L1295.65 1210.3 L1295.06 1210.3 L1294.48 1210.3 L1293.89 1210.3 L1293.31 1210.3 L1292.72 1210.3 L1292.13 1210.3 L1291.55 1210.3 L1290.96 1210.3 L1290.37 1210.3 L1289.79 1210.3 L1289.2 1210.3 L1288.61 1210.3 L1288.03 1210.3 L1287.44 1210.3 L1286.86 1210.3 L1286.27 1210.3 L1285.68 1210.3 L1285.1 1210.3 L1284.51 1210.3 L1283.92 1210.3 L1283.34 1210.3 L1282.75 1210.3 L1282.16 1210.3 L1281.58 1210.3 L1280.99 1210.3 L1280.4 1210.3 L1279.82 1210.3 L1279.23 1210.3 L1278.65 1210.3 L1278.06 1210.3 L1277.47 1210.3 L1276.89 1210.3 L1276.3 1210.3 L1275.71 1210.3 L1275.13 1210.3 L1274.54 1210.3 L1273.95 1210.3 L1273.37 1210.3 L1272.78 1210.3 L1272.19 1210.3 L1271.61 1210.3 L1271.02 1210.3 L1270.44 1210.3 L1269.85 1210.3 L1269.26 1210.3 L1268.68 1210.3 L1268.09 1210.3 L1267.5 1210.3 L1266.92 1210.3 L1266.33 1210.3 L1265.74 1210.3 L1265.16 1210.3 L1264.57 1210.3 L1263.98 1210.3 L1263.4 1210.3 L1262.81 1210.3 L1262.23 1210.3 L1261.64 1210.3 L1261.05 1210.3 L1260.47 1210.3 L1259.88 1210.3 L1259.29 1210.3 L1258.71 1210.3 L1258.12 1210.3 L1257.53 1210.3 L1256.95 1210.3 L1256.36 1210.3 L1255.78 1210.3 L1255.19 1210.3 L1254.6 1210.3 L1254.02 1210.3 L1253.43 1210.3 L1252.84 1210.3 L1252.26 1210.3 L1251.67 1210.3 L1251.08 1210.3 L1250.5 1210.3 L1249.91 1210.3 L1249.32 1210.3 L1248.74 1210.3 L1248.15 1210.3 L1247.57 1210.3 L1246.98 1210.3 L1246.39 1210.3 L1245.81 1210.3 L1245.22 1210.3 L1244.63 1210.3 L1244.05 1210.3 L1243.46 1210.3 L1242.87 1210.3 L1242.29 1210.3 L1241.7 1210.3 L1241.11 1210.3 L1240.53 1210.3 L1239.94 1210.3 L1239.36 1210.3 L1238.77 1210.3 L1238.18 1210.3 L1237.6 1210.3 L1237.01 1210.3 L1236.42 1210.3 L1235.84 1210.3 L1235.25 1210.3 L1234.66 1210.3 L1234.08 1210.3 L1233.49 1210.3 L1232.91 1210.3 L1232.32 1210.3 L1231.73 1210.3 L1231.15 1210.3 L1230.56 1210.3 L1229.97 1210.3 L1229.39 1210.3 L1228.8 1210.3 L1228.21 1210.3 L1227.63 1210.3 L1227.04 1210.3 L1226.45 1210.3 L1225.87 1210.3 L1225.28 1210.3 L1224.7 1210.3 L1224.11 1210.3 L1223.52 1210.3 L1222.94 1210.3 L1222.35 1210.3 L1221.76 1210.3 L1221.18 1210.3 L1220.59 1210.3 L1220 1210.3 L1219.42 1210.3 L1218.83 1210.3 L1218.24 1210.3 L1217.66 1210.3 L1217.07 1210.3 L1216.49 1210.3 L1215.9 1210.3 L1215.31 1210.3 L1214.73 1210.3 L1214.14 1210.3 L1213.55 1210.3 L1212.97 1210.3 L1212.38 1210.3 L1211.79 1210.3 L1211.21 1210.3 L1210.62 1210.3 L1210.03 1210.3 L1209.45 1210.3 L1208.86 1210.3 L1208.28 1210.3 L1207.69 1210.3 L1207.1 1210.3 L1206.52 1210.3 L1205.93 1210.3 L1205.34 1210.3 L1204.76 1210.3 L1204.17 1210.3 L1203.58 1210.3 L1203 1210.3 L1202.41 1210.3 L1201.83 1210.3 L1201.24 1210.3 L1200.65 1210.3 L1200.07 1210.3 L1199.48 1210.3 L1198.89 1210.3 L1198.31 1210.3 L1197.72 1210.3 L1197.13 1210.3 L1196.55 1210.3 L1195.96 1210.3 L1195.37 1210.3 L1194.79 1210.3 L1194.2 1210.3 L1193.62 1210.3 L1193.03 1210.3 L1192.44 1210.3 L1191.86 1210.3 L1191.27 1210.3 L1190.68 1210.3 L1190.1 1210.3 L1189.51 1210.3 L1188.92 1210.3 L1188.34 1210.3 L1187.75 1210.3 L1187.16 1210.3 L1186.58 1210.3 L1185.99 1210.3 L1185.41 1210.3 L1184.82 1210.3 L1184.23 1210.3 L1183.65 1210.3 L1183.06 1210.3 L1182.47 1210.3 L1181.89 1210.3 L1181.3 1210.3 L1180.71 1210.3 L1180.13 1210.3 L1179.54 1210.3 L1178.96 1210.3 L1178.37 1210.3 L1177.78 1210.3 L1177.2 1210.3 L1176.61 1210.3 L1176.02 1210.3 L1175.44 1210.3 L1174.85 1210.3 L1174.26 1210.3 L1173.68 1210.3 L1173.09 1210.3 L1172.5 1210.3 L1171.92 1210.3 L1171.33 1210.3 L1170.75 1210.3 L1170.16 1210.3 L1169.57 1210.3 L1168.99 1210.3 L1168.4 1210.3 L1167.81 1210.3 L1167.23 1210.3 L1166.64 1210.3 L1166.05 1210.3 L1165.47 1210.3 L1164.88 1210.3 L1164.29 1210.3 L1163.71 1210.3 L1163.12 1210.3 L1162.54 1210.3 L1161.95 1210.3 L1161.36 1210.3 L1160.78 1210.3 L1160.19 1210.3 L1159.6 1210.3 L1159.02 1210.3 L1158.43 1210.3 L1157.84 1210.3 L1157.26 1210.3 L1156.67 1210.3 L1156.09 1210.3 L1155.5 1210.3 L1154.91 1210.3 L1154.33 1210.3 L1153.74 1210.3 L1153.15 1210.3 L1152.57 1210.3 L1151.98 1210.3 L1151.39 1210.3 L1150.81 1210.3 L1150.22 1210.3 L1149.63 1210.3 L1149.05 1210.3 L1148.46 1210.3 L1147.88 1210.3 L1147.29 1210.3 L1146.7 1210.3 L1146.12 1210.3 L1145.53 1210.3 L1144.94 1210.3 L1144.36 1210.3 L1143.77 1210.3 L1143.18 1210.3 L1142.6 1210.3 L1142.01 1210.3 L1141.42 1210.3 L1140.84 1210.3 L1140.25 1210.3 L1139.67 1210.3 L1139.08 1210.3 L1138.49 1210.3 L1137.91 1210.3 L1137.32 1210.3 L1136.73 1210.3 L1136.15 1210.3 L1135.56 1210.3 L1134.97 1210.3 L1134.39 1210.3 L1133.8 1210.3 L1133.21 1210.3 L1132.63 1210.3 L1132.04 1210.3 L1131.46 1210.3 L1130.87 1210.3 L1130.28 1210.3 L1129.7 1210.3 L1129.11 1210.3 L1128.52 1210.3 L1127.94 1210.3 L1127.35 1210.3 L1126.76 1210.3 L1126.18 1210.3 L1125.59 1210.3 L1125.01 1210.3 L1124.42 1210.3 L1123.83 1210.3 L1123.25 1210.3 L1122.66 1210.3 L1122.07 1210.3 L1121.49 1210.3 L1120.9 1210.3 L1120.31 1210.3 L1119.73 1210.3 L1119.14 1210.3 L1118.55 1210.3 L1117.97 1210.3 L1117.38 1210.3 L1116.8 1210.3 L1116.21 1210.3 L1115.62 1210.3 L1115.04 1210.3 L1114.45 1210.3 L1113.86 1210.3 L1113.28 1210.3 L1112.69 1210.3 L1112.1 1210.3 L1111.52 1210.3 L1110.93 1210.3 L1110.34 1210.3 L1109.76 1210.3 L1109.17 1210.3 L1108.59 1210.3 L1108 1210.3 L1107.41 1210.3 L1106.83 1210.3 L1106.24 1210.3 L1105.65 1210.3 L1105.07 1210.3 L1104.48 1210.3 L1103.89 1210.3 L1103.31 1210.3 L1102.72 1210.3 L1102.14 1210.3 L1101.55 1210.3 L1100.96 1210.3 L1100.38 1210.3 L1099.79 1210.3 L1099.2 1210.3 L1098.62 1210.3 L1098.03 1210.3 L1097.44 1210.3 L1096.86 1210.3 L1096.27 1210.3 L1095.68 1210.3 L1095.1 1210.3 L1094.51 1210.3 L1093.93 1210.3 L1093.34 1210.3 L1092.75 1210.3 L1092.17 1210.3 L1091.58 1210.3 L1090.99 1210.3 L1090.41 1210.3 L1089.82 1210.3 L1089.23 1210.3 L1088.65 1210.3 L1088.06 1210.3 L1087.47 1210.3 L1086.89 1210.3 L1086.3 1210.3 L1085.72 1210.3 L1085.13 1210.3 L1084.54 1210.3 L1083.96 1210.3 L1083.37 1210.3 L1082.78 1210.3 L1082.2 1210.3 L1081.61 1210.3 L1081.02 1210.3 L1080.44 1210.3 L1079.85 1210.3 L1079.26 1210.3 L1078.68 1210.3 L1078.09 1210.3 L1077.51 1210.3 L1076.92 1210.3 L1076.33 1210.3 L1075.75 1210.3 L1075.16 1210.3 L1074.57 1210.3 L1073.99 1210.3 L1073.4 1210.3 L1072.81 1210.3 L1072.23 1210.3 L1071.64 1210.3 L1071.06 1210.3 L1070.47 1210.3 L1069.88 1210.3 L1069.3 1210.3 L1068.71 1210.3 L1068.12 1210.3 L1067.54 1210.3 L1066.95 1210.3 L1066.36 1210.3 L1065.78 1210.3 L1065.19 1210.3 L1064.6 1210.3 L1064.02 1210.3 L1063.43 1210.3 L1062.85 1210.3 L1062.26 1210.3 L1061.67 1210.3 L1061.09 1210.3 L1060.5 1210.3 L1059.91 1210.3 L1059.33 1210.3 L1058.74 1210.3 L1058.15 1210.3 L1057.57 1210.3 L1056.98 1210.3 L1056.39 1210.3 L1055.81 1210.3 L1055.22 1210.3 L1054.64 1210.3 L1054.05 1210.3 L1053.46 1210.3 L1052.88 1210.3 L1052.29 1210.3 L1051.7 1210.3 L1051.12 1210.3 L1050.53 1210.3 L1049.94 1210.3 L1049.36 1210.3 L1048.77 1210.3 L1048.19 1210.3 L1047.6 1210.3 L1047.01 1210.3 L1046.43 1210.3 L1045.84 1210.3 L1045.25 1210.3 L1044.67 1210.3 L1044.08 1210.3 L1043.49 1210.3 L1042.91 1210.3 L1042.32 1210.3 L1041.73 1210.3 L1041.15 1210.3 L1040.56 1210.3 L1039.98 1210.3 L1039.39 1210.3 L1038.8 1210.3 L1038.22 1210.3 L1037.63 1210.3 L1037.04 1210.3 L1036.46 1210.3 L1035.87 1210.3 L1035.28 1210.3 L1034.7 1210.3 L1034.11 1210.3 L1033.52 1210.3 L1032.94 1210.3 L1032.35 1210.3 L1031.77 1210.3 L1031.18 1210.3 L1030.59 1210.3 L1030.01 1210.3 L1029.42 1210.3 L1028.83 1210.3 L1028.25 1210.3 L1027.66 1210.3 L1027.07 1210.3 L1026.49 1210.3 L1025.9 1210.3 L1025.32 1210.3 L1024.73 1210.3 L1024.14 1210.3 L1023.56 1210.3 L1022.97 1210.3 L1022.38 1210.3 L1021.8 1210.3 L1021.21 1210.3 L1020.62 1210.3 L1020.04 1210.3 L1019.45 1210.3 L1018.86 1210.3 L1018.28 1210.3 L1017.69 1210.3 L1017.11 1210.3 L1016.52 1210.3 L1015.93 1210.3 L1015.35 1210.3 L1014.76 1210.3 L1014.17 1210.3 L1013.59 1210.3 L1013 1210.3 L1012.41 1210.3 L1011.83 1210.3 L1011.24 1210.3 L1010.65 1210.3 L1010.07 1210.3 L1009.48 1210.3 L1008.9 1210.3 L1008.31 1210.3 L1007.72 1210.3 L1007.14 1210.3 L1006.55 1210.3 L1005.96 1210.3 L1005.38 1210.3 L1004.79 1210.3 L1004.2 1210.3 L1003.62 1210.3 L1003.03 1210.3 L1002.44 1210.3 L1001.86 1210.3 L1001.27 1210.3 L1000.69 1210.3 L1000.1 1210.3 L999.513 1210.3 L998.926 1210.3 L998.34 1210.3 L997.754 1210.3 L997.167 1210.3 L996.581 1210.3 L995.994 1210.3 L995.408 1210.3 L994.822 1210.3 L994.235 1210.3 L993.649 1210.3 L993.062 1210.3 L992.476 1210.3 L991.889 1210.3 L991.303 1210.3 L990.717 1210.3 L990.13 1210.3 L989.544 1210.3 L988.957 1210.3 L988.371 1210.3 L987.785 1210.3 L987.198 1210.3 L986.612 1210.3 L986.025 1210.3  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.64 986.612,1210.64 987.198,1210.64 987.785,1210.64 988.371,1210.64 988.957,1210.64 989.544,1210.64 990.13,1210.64 990.717,1210.64 991.303,1210.64 991.889,1210.64 992.476,1210.64 993.062,1210.64 993.649,1210.64 994.235,1210.64 994.822,1210.64 995.408,1210.64 995.994,1210.64 996.581,1210.64 997.167,1210.64 997.754,1210.64 998.34,1210.64 998.926,1210.64 999.513,1210.64 1000.1,1210.64 1000.69,1210.64 1001.27,1210.64 1001.86,1210.64 1002.44,1210.64 1003.03,1210.64 1003.62,1210.64 1004.2,1210.64 1004.79,1210.64 1005.38,1210.64 1005.96,1210.64 1006.55,1210.64 1007.14,1210.64 1007.72,1210.64 1008.31,1210.64 1008.9,1210.64 1009.48,1210.64 1010.07,1210.64 1010.65,1210.64 1011.24,1210.64 1011.83,1210.64 1012.41,1210.64 1013,1210.64 1013.59,1210.64 1014.17,1210.64 1014.76,1210.64 1015.35,1210.64 1015.93,1210.64 1016.52,1210.64 1017.11,1210.64 1017.69,1210.64 1018.28,1210.64 1018.86,1210.64 1019.45,1210.64 1020.04,1210.64 1020.62,1210.64 1021.21,1210.64 1021.8,1210.64 1022.38,1210.64 1022.97,1210.64 1023.56,1210.64 1024.14,1210.64 1024.73,1210.64 1025.32,1210.64 1025.9,1210.64 1026.49,1210.64 1027.07,1210.64 1027.66,1210.64 1028.25,1210.64 1028.83,1210.64 1029.42,1210.64 1030.01,1210.64 1030.59,1210.64 1031.18,1210.64 1031.77,1210.64 1032.35,1210.64 1032.94,1210.64 1033.52,1210.64 1034.11,1210.64 1034.7,1210.64 1035.28,1210.64 1035.87,1210.64 1036.46,1210.64 1037.04,1210.64 1037.63,1210.64 1038.22,1210.64 1038.8,1210.64 1039.39,1210.64 1039.98,1210.64 1040.56,1210.64 1041.15,1210.64 1041.73,1210.64 1042.32,1210.64 1042.91,1210.64 1043.49,1210.64 1044.08,1210.64 1044.67,1210.64 1045.25,1210.64 1045.84,1210.64 1046.43,1210.64 1047.01,1210.64 1047.6,1210.64 1048.19,1210.64 1048.77,1210.64 1049.36,1210.64 1049.94,1210.64 1050.53,1210.64 1051.12,1210.64 1051.7,1210.64 1052.29,1210.64 1052.88,1210.64 1053.46,1210.64 1054.05,1210.64 1054.64,1210.64 1055.22,1210.64 1055.81,1210.64 1056.39,1210.64 1056.98,1210.64 1057.57,1210.64 1058.15,1210.64 1058.74,1210.64 1059.33,1210.64 1059.91,1210.64 1060.5,1210.64 1061.09,1210.64 1061.67,1210.64 1062.26,1210.64 1062.85,1210.64 1063.43,1210.64 1064.02,1210.64 1064.6,1210.64 1065.19,1210.64 1065.78,1210.64 1066.36,1210.64 1066.95,1210.64 1067.54,1210.64 1068.12,1210.64 1068.71,1210.64 1069.3,1210.64 1069.88,1210.64 1070.47,1210.64 1071.06,1210.64 1071.64,1210.64 1072.23,1210.64 1072.81,1210.64 1073.4,1210.64 1073.99,1210.64 1074.57,1210.64 1075.16,1210.64 1075.75,1210.64 1076.33,1210.64 1076.92,1210.64 1077.51,1210.64 1078.09,1210.64 1078.68,1210.64 1079.26,1210.64 1079.85,1210.64 1080.44,1210.64 1081.02,1210.64 1081.61,1210.64 1082.2,1210.64 1082.78,1210.64 1083.37,1210.64 1083.96,1210.64 1084.54,1210.64 1085.13,1210.64 1085.72,1210.64 1086.3,1210.64 1086.89,1210.64 1087.47,1210.64 1088.06,1210.64 1088.65,1210.64 1089.23,1210.64 1089.82,1210.64 1090.41,1210.64 1090.99,1210.64 1091.58,1210.64 1092.17,1210.64 1092.75,1210.64 1093.34,1210.64 1093.93,1210.64 1094.51,1210.64 1095.1,1210.64 1095.68,1210.64 1096.27,1210.64 1096.86,1210.64 1097.44,1210.64 1098.03,1210.64 1098.62,1210.64 1099.2,1210.64 1099.79,1210.64 1100.38,1210.64 1100.96,1210.64 1101.55,1210.64 1102.14,1210.64 1102.72,1210.64 1103.31,1210.64 1103.89,1210.64 1104.48,1210.64 1105.07,1210.64 1105.65,1210.64 1106.24,1210.64 1106.83,1210.64 1107.41,1210.64 1108,1210.64 1108.59,1210.64 1109.17,1210.64 1109.76,1210.64 1110.34,1210.64 1110.93,1210.64 1111.52,1210.64 1112.1,1210.64 1112.69,1210.64 1113.28,1210.64 1113.86,1210.64 1114.45,1210.64 1115.04,1210.64 1115.62,1210.64 1116.21,1210.64 1116.8,1210.64 1117.38,1210.64 1117.97,1210.64 1118.55,1210.64 1119.14,1210.64 1119.73,1210.64 1120.31,1210.64 1120.9,1210.64 1121.49,1210.64 1122.07,1210.64 1122.66,1210.64 1123.25,1210.64 1123.83,1210.64 1124.42,1210.64 1125.01,1210.64 1125.59,1210.64 1126.18,1210.64 1126.76,1210.64 1127.35,1210.64 1127.94,1210.64 1128.52,1210.64 1129.11,1210.64 1129.7,1210.64 1130.28,1210.64 1130.87,1210.64 1131.46,1210.64 1132.04,1210.64 1132.63,1210.64 1133.21,1210.64 1133.8,1210.64 1134.39,1210.64 1134.97,1210.64 1135.56,1210.64 1136.15,1210.64 1136.73,1210.64 1137.32,1210.64 1137.91,1210.64 1138.49,1210.64 1139.08,1210.64 1139.67,1210.64 1140.25,1210.64 1140.84,1210.64 1141.42,1210.64 1142.01,1210.64 1142.6,1210.64 1143.18,1210.64 1143.77,1210.64 1144.36,1210.64 1144.94,1210.64 1145.53,1210.64 1146.12,1210.64 1146.7,1210.64 1147.29,1210.64 1147.88,1210.64 1148.46,1210.64 1149.05,1210.64 1149.63,1210.64 1150.22,1210.64 1150.81,1210.64 1151.39,1210.64 1151.98,1210.64 1152.57,1210.64 1153.15,1210.64 1153.74,1210.64 1154.33,1210.64 1154.91,1210.64 1155.5,1210.64 1156.09,1210.64 1156.67,1210.64 1157.26,1210.64 1157.84,1210.64 1158.43,1210.64 1159.02,1210.64 1159.6,1210.64 1160.19,1210.64 1160.78,1210.64 1161.36,1210.64 1161.95,1210.64 1162.54,1210.64 1163.12,1210.64 1163.71,1210.64 1164.29,1210.64 1164.88,1210.64 1165.47,1210.64 1166.05,1210.64 1166.64,1210.64 1167.23,1210.64 1167.81,1210.64 1168.4,1210.64 1168.99,1210.64 1169.57,1210.64 1170.16,1210.64 1170.75,1210.64 1171.33,1210.64 1171.92,1210.64 1172.5,1210.64 1173.09,1210.64 1173.68,1210.64 1174.26,1210.64 1174.85,1210.64 1175.44,1210.64 1176.02,1210.64 1176.61,1210.64 1177.2,1210.64 1177.78,1210.64 1178.37,1210.64 1178.96,1210.64 1179.54,1210.64 1180.13,1210.64 1180.71,1210.64 1181.3,1210.64 1181.89,1210.64 1182.47,1210.64 1183.06,1210.64 1183.65,1210.64 1184.23,1210.64 1184.82,1210.64 1185.41,1210.64 1185.99,1210.64 1186.58,1210.64 1187.16,1210.64 1187.75,1210.64 1188.34,1210.64 1188.92,1210.64 1189.51,1210.64 1190.1,1210.64 1190.68,1210.64 1191.27,1210.64 1191.86,1210.64 1192.44,1210.64 1193.03,1210.64 1193.62,1210.64 1194.2,1210.64 1194.79,1210.64 1195.37,1210.64 1195.96,1210.64 1196.55,1210.64 1197.13,1210.64 1197.72,1210.64 1198.31,1210.64 1198.89,1210.64 1199.48,1210.64 1200.07,1210.64 1200.65,1210.64 1201.24,1210.64 1201.83,1210.64 1202.41,1210.64 1203,1210.64 1203.58,1210.64 1204.17,1210.64 1204.76,1210.64 1205.34,1210.64 1205.93,1210.64 1206.52,1210.64 1207.1,1210.64 1207.69,1210.64 1208.28,1210.64 1208.86,1210.64 1209.45,1210.64 1210.03,1210.64 1210.62,1210.64 1211.21,1210.64 1211.79,1210.64 1212.38,1210.64 1212.97,1210.64 1213.55,1210.64 1214.14,1210.64 1214.73,1210.64 1215.31,1210.64 1215.9,1210.64 1216.49,1210.64 1217.07,1210.64 1217.66,1210.64 1218.24,1210.64 1218.83,1210.64 1219.42,1210.64 1220,1210.64 1220.59,1210.64 1221.18,1210.64 1221.76,1210.64 1222.35,1210.64 1222.94,1210.64 1223.52,1210.64 1224.11,1210.64 1224.7,1210.64 1225.28,1210.64 1225.87,1210.64 1226.45,1210.64 1227.04,1210.64 1227.63,1210.64 1228.21,1210.64 1228.8,1210.64 1229.39,1210.64 1229.97,1210.64 1230.56,1210.64 1231.15,1210.64 1231.73,1210.64 1232.32,1210.64 1232.91,1210.64 1233.49,1210.64 1234.08,1210.64 1234.66,1210.64 1235.25,1210.64 1235.84,1210.64 1236.42,1210.64 1237.01,1210.64 1237.6,1210.64 1238.18,1210.64 1238.77,1210.64 1239.36,1210.64 1239.94,1210.64 1240.53,1210.64 1241.11,1210.64 1241.7,1210.64 1242.29,1210.64 1242.87,1210.64 1243.46,1210.64 1244.05,1210.64 1244.63,1210.64 1245.22,1210.64 1245.81,1210.64 1246.39,1210.64 1246.98,1210.64 1247.57,1210.64 1248.15,1210.64 1248.74,1210.64 1249.32,1210.64 1249.91,1210.64 1250.5,1210.64 1251.08,1210.64 1251.67,1210.64 1252.26,1210.64 1252.84,1210.64 1253.43,1210.64 1254.02,1210.64 1254.6,1210.64 1255.19,1210.64 1255.78,1210.64 1256.36,1210.64 1256.95,1210.64 1257.53,1210.64 1258.12,1210.64 1258.71,1210.64 1259.29,1210.64 1259.88,1210.64 1260.47,1210.64 1261.05,1210.64 1261.64,1210.64 1262.23,1210.64 1262.81,1210.64 1263.4,1210.64 1263.98,1210.64 1264.57,1210.64 1265.16,1210.64 1265.74,1210.64 1266.33,1210.64 1266.92,1210.64 1267.5,1210.64 1268.09,1210.64 1268.68,1210.64 1269.26,1210.64 1269.85,1210.64 1270.44,1210.64 1271.02,1210.64 1271.61,1210.64 1272.19,1210.64 1272.78,1210.64 1273.37,1210.64 1273.95,1210.64 1274.54,1210.64 1275.13,1210.64 1275.71,1210.64 1276.3,1210.64 1276.89,1210.64 1277.47,1210.64 1278.06,1210.64 1278.65,1210.64 1279.23,1210.64 1279.82,1210.64 1280.4,1210.64 1280.99,1210.64 1281.58,1210.64 1282.16,1210.64 1282.75,1210.64 1283.34,1210.64 1283.92,1210.64 1284.51,1210.64 1285.1,1210.64 1285.68,1210.64 1286.27,1210.64 1286.86,1210.64 1287.44,1210.64 1288.03,1210.64 1288.61,1210.64 1289.2,1210.64 1289.79,1210.64 1290.37,1210.64 1290.96,1210.64 1291.55,1210.64 1292.13,1210.64 1292.72,1210.64 1293.31,1210.64 1293.89,1210.64 1294.48,1210.64 1295.06,1210.64 1295.65,1210.64 1296.24,1210.64 1296.82,1210.64 1297.41,1210.64 1298,1210.64 1298.58,1210.64 1299.17,1210.64 1299.76,1210.64 1300.34,1210.64 1300.93,1210.64 1301.52,1210.64 1302.1,1210.64 1302.69,1210.64 1303.27,1210.64 1303.86,1210.64 1304.45,1210.64 1305.03,1210.64 1305.62,1210.64 1306.21,1210.64 1306.79,1210.64 1307.38,1210.64 1307.97,1210.64 1308.55,1210.64 1309.14,1210.64 1309.73,1210.64 1310.31,1210.64 1310.9,1210.64 1311.48,1210.64 1312.07,1210.64 1312.66,1210.64 1313.24,1210.64 1313.83,1210.64 1314.42,1210.64 1315,1210.64 1315.59,1210.64 1316.18,1210.64 1316.76,1210.64 1317.35,1210.64 1317.93,1210.64 1318.52,1210.64 1319.11,1210.64 1319.69,1210.64 1320.28,1210.64 1320.87,1210.64 1321.45,1210.64 1322.04,1210.64 1322.63,1210.64 1323.21,1210.64 1323.8,1210.64 1324.39,1210.64 1324.97,1210.64 1325.56,1210.64 1326.14,1210.64 1326.73,1210.64 1327.32,1210.64 1327.9,1210.64 1328.49,1210.64 1329.08,1210.64 1329.66,1210.64 1330.25,1210.64 1330.84,1210.64 1331.42,1210.64 1332.01,1210.64 1332.6,1210.64 1333.18,1210.64 1333.77,1210.64 1334.35,1210.64 1334.94,1210.64 1335.53,1210.64 1336.11,1210.64 1336.7,1210.64 1337.29,1210.64 1337.87,1210.64 1338.46,1210.64 1339.05,1210.64 1339.63,1210.64 1340.22,1210.64 1340.8,1210.64 1341.39,1210.64 1341.98,1210.64 1342.56,1210.64 1343.15,1210.64 1343.74,1210.64 1344.32,1210.64 1344.91,1210.64 1345.5,1210.64 1346.08,1210.64 1346.67,1210.64 1347.26,1210.64 1347.84,1210.64 1348.43,1210.64 1349.01,1210.64 1349.6,1210.64 1350.19,1210.64 1350.77,1210.64 1351.36,1210.64 1351.95,1210.64 1352.53,1210.64 1353.12,1210.64 1353.71,1210.64 1354.29,1210.64 1354.88,1210.64 1355.47,1210.64 1356.05,1210.64 1356.64,1210.64 1357.22,1210.64 1357.81,1210.64 1358.4,1210.64 1358.98,1210.64 1359.57,1210.64 1360.16,1210.64 1360.74,1210.64 1361.33,1210.64 1361.92,1210.64 1362.5,1210.64 1363.09,1210.64 1363.68,1210.64 1364.26,1210.64 1364.85,1210.64 1365.43,1210.64 1366.02,1210.64 1366.61,1210.64 1367.19,1210.64 1367.78,1210.64 1368.37,1210.64 1368.95,1210.64 1369.54,1210.64 1370.13,1210.64 1370.71,1210.64 1371.3,1210.64 1371.88,1210.64 1372.47,1210.64 1373.06,1210.64 1373.64,1210.64 1374.23,1210.64 1374.82,1210.64 1375.4,1210.64 1375.99,1210.64 1376.58,1210.64 1377.16,1210.64 1377.75,1210.64 1378.34,1210.64 1378.92,1210.64 1379.51,1210.64 1380.09,1210.64 1380.68,1210.64 1381.27,1210.64 1381.85,1210.64 1382.44,1210.64 1383.03,1210.64 1383.61,1210.64 1384.2,1210.64 1384.79,1210.64 1385.37,1210.64 1385.96,1210.64 1386.55,1210.64 1387.13,1210.64 1387.72,1210.64 1388.3,1210.64 1388.89,1210.64 1389.48,1210.64 1390.06,1210.64 1390.65,1210.64 1391.24,1210.64 1391.82,1210.64 1392.41,1210.64 1393,1210.64 1393.58,1210.64 1394.17,1210.64 1394.75,1210.64 1395.34,1210.64 1395.93,1210.64 1396.51,1210.64 1397.1,1210.64 1397.69,1210.64 1398.27,1210.64 1398.86,1210.64 1399.45,1210.64 1400.03,1210.64 1400.62,1210.64 1401.21,1210.64 1401.79,1210.64 1402.38,1210.64 1402.96,1210.64 1403.55,1210.64 1404.14,1210.64 1404.72,1210.64 1405.31,1210.64 1405.9,1210.64 1406.48,1210.64 1407.07,1210.64 1407.66,1210.64 1408.24,1210.64 1408.83,1210.64 1409.42,1210.64 1410,1210.64 1410.59,1210.64 1411.17,1210.64 1411.76,1210.64 1412.35,1210.64 1412.93,1210.64 1413.52,1210.64 1414.11,1210.64 1414.69,1210.64 1415.28,1210.64 1415.87,1210.64 1416.45,1210.64 1417.04,1210.64 1417.63,1210.64 1418.21,1210.64 1418.8,1210.64 1419.38,1210.64 1419.97,1210.64 1420.56,1210.64 1421.14,1210.64 1421.73,1210.64 1422.32,1210.64 1422.9,1210.64 1423.49,1210.64 1424.08,1210.64 1424.66,1210.64 1425.25,1210.64 1425.83,1210.64 1426.42,1210.64 1427.01,1210.64 1427.59,1210.64 1428.18,1210.64 1428.77,1210.64 1429.35,1210.64 1429.94,1210.64 1430.53,1210.64 1431.11,1210.64 1431.7,1210.64 1432.29,1210.64 1432.87,1210.64 1433.46,1210.64 1434.04,1210.64 1434.63,1210.64 1435.22,1210.64 1435.8,1210.64 1436.39,1210.64 1436.98,1210.64 1437.56,1210.64 1438.15,1210.64 1438.74,1210.64 1439.32,1210.64 1439.91,1210.64 1440.5,1210.64 1441.08,1210.64 1441.67,1210.64 1442.25,1210.64 1442.84,1210.64 1443.43,1210.64 1444.01,1210.64 1444.6,1210.64 1445.19,1210.64 1445.77,1210.64 1446.36,1210.64 1446.95,1210.64 1447.53,1210.64 1448.12,1210.64 1448.7,1210.64 1449.29,1210.64 1449.88,1210.64 1450.46,1210.64 1451.05,1210.64 1451.64,1210.64 1452.22,1210.64 1452.81,1210.64 1453.4,1210.64 1453.98,1210.64 1454.57,1210.64 1455.16,1210.64 1455.74,1210.64 1456.33,1210.64 1456.91,1210.64 1457.5,1210.64 1458.09,1210.64 1458.67,1210.64 1459.26,1210.64 1459.85,1210.64 1460.43,1210.64 1461.02,1210.64 1461.61,1210.64 1462.19,1210.64 1462.78,1210.64 1463.37,1210.64 1463.95,1210.64 1464.54,1210.64 1465.12,1210.64 1465.71,1210.64 1466.3,1210.64 1466.88,1210.64 1467.47,1210.64 1468.06,1210.64 1468.64,1210.64 1469.23,1210.64 1469.82,1210.64 1470.4,1210.64 1470.99,1210.64 1471.57,1210.64 1472.16,1210.64 1472.75,1210.64 1473.33,1210.64 1473.92,1210.64 1474.51,1210.64 1475.09,1210.64 1475.68,1210.64 1476.27,1210.64 1476.85,1210.64 1477.44,1210.64 1478.03,1210.64 1478.61,1210.64 1479.2,1210.64 1479.78,1210.64 1480.37,1210.64 1480.96,1210.64 1481.54,1210.64 1482.13,1210.64 1482.72,1210.64 1483.3,1210.64 1483.89,1210.64 1484.48,1210.64 1485.06,1210.64 1485.65,1210.64 1486.24,1210.64 1486.82,1210.64 1487.41,1210.64 1487.99,1210.64 1488.58,1210.64 1489.17,1210.64 1489.75,1210.64 1490.34,1210.64 1490.93,1210.64 1491.51,1210.64 1492.1,1210.64 1492.69,1210.64 1493.27,1210.64 1493.86,1210.64 1494.45,1210.64 1495.03,1210.64 1495.62,1210.64 1496.2,1210.64 1496.79,1210.64 1497.38,1210.64 1497.96,1210.64 1498.55,1210.64 1499.14,1210.64 1499.72,1210.64 1500.31,1210.64 1500.9,1210.64 1501.48,1210.64 1502.07,1210.64 1502.65,1210.64 1503.24,1210.64 1503.83,1210.64 1504.41,1210.64 1505,1210.64 1505.59,1210.64 1506.17,1210.64 1506.76,1210.64 1507.35,1210.64 1507.93,1210.64 1508.52,1210.64 1509.11,1210.64 1509.69,1210.64 1510.28,1210.64 1510.86,1210.64 1511.45,1210.64 1512.04,1210.64 1512.62,1210.64 1513.21,1210.64 1513.8,1210.64 1514.38,1210.64 1514.97,1210.64 1515.56,1210.64 1516.14,1210.64 1516.73,1210.64 1517.32,1210.64 1517.9,1210.64 1518.49,1210.64 1519.07,1210.64 1519.66,1210.64 1520.25,1210.64 1520.83,1210.64 1521.42,1210.64 1522.01,1210.64 1522.59,1210.64 1523.18,1210.64 1523.77,1210.64 1524.35,1210.64 1524.94,1210.64 1525.52,1210.64 1526.11,1210.64 1526.7,1210.64 1527.28,1210.64 1527.87,1210.64 1528.46,1210.64 1529.04,1210.64 1529.63,1210.64 1530.22,1210.64 1530.8,1210.64 1531.39,1210.64 1531.98,1210.64 1532.56,1210.64 1533.15,1210.64 1533.73,1210.64 1534.32,1210.64 1534.91,1210.64 1535.49,1210.64 1536.08,1210.64 1536.67,1210.64 1537.25,1210.64 1537.84,1210.64 1538.43,1210.64 1539.01,1210.64 1539.6,1210.64 1540.19,1210.64 1540.77,1210.64 1541.36,1210.64 1541.94,1210.64 1542.53,1210.64 1543.12,1210.64 1543.7,1210.64 1544.29,1210.64 1544.88,1210.64 1545.46,1210.64 1546.05,1210.64 1546.64,1210.64 1547.22,1210.64 1547.81,1210.64 1548.4,1210.64 1548.98,1210.64 1549.57,1210.64 1550.15,1210.64 1550.74,1210.64 1551.33,1210.64 1551.91,1210.64 1552.5,1210.64 1553.09,1210.64 1553.67,1210.64 1554.26,1210.64 1554.85,1210.64 1555.43,1210.64 1556.02,1210.64 1556.6,1210.64 1557.19,1210.64 1557.78,1210.64 1558.36,1210.64 1558.95,1210.64 1559.54,1210.64 1560.12,1210.64 1560.71,1210.64 1561.3,1210.64 1561.88,1210.64 1562.47,1210.64 1563.06,1210.64 1563.64,1210.64 1564.23,1210.64 1564.81,1210.64 1565.4,1210.64 1565.99,1210.64 1566.57,1210.64 1567.16,1210.64 1567.75,1210.64 1568.33,1210.64 1568.92,1210.64 1569.51,1210.64 1570.09,1210.64 1570.68,1210.64 1571.27,1210.64 1571.85,1210.64 1572.44,1210.64 1573.02,1210.64 1573.61,1210.64 1574.2,1210.64 1574.78,1210.64 1575.37,1210.64 1575.96,1210.64 1576.54,1210.64 1577.13,1210.64 1577.72,1210.64 1578.3,1210.64 1578.89,1210.64 1579.47,1210.64 1580.06,1210.64 1580.65,1210.64 1581.23,1210.64 1581.82,1210.64 1582.41,1210.64 1582.99,1210.64 1583.58,1210.64 1584.17,1210.64 1584.75,1210.64 1585.34,1210.64 1585.93,1210.64 1586.51,1210.64 1587.1,1210.64 1587.68,1210.64 1588.27,1210.64 1588.86,1210.64 1589.44,1210.64 1590.03,1210.64 1590.62,1210.64 1591.2,1210.64 1591.79,1210.64 1592.38,1210.64 1592.96,1210.64 1593.55,1210.64 1594.14,1210.64 1594.72,1210.64 1595.31,1210.64 1595.89,1210.64 1596.48,1210.64 1597.07,1210.64 1597.65,1210.64 1598.24,1210.64 1598.83,1210.64 1599.41,1210.64 1600,1210.64 1600.59,1210.64 1601.17,1210.64 1601.76,1210.64 1602.34,1210.64 1602.93,1210.64 1603.52,1210.64 1604.1,1210.64 1604.69,1210.64 1605.28,1210.64 1605.86,1210.64 1606.45,1210.64 1607.04,1210.64 1607.62,1210.64 1608.21,1210.64 1608.8,1210.64 1609.38,1210.64 1609.97,1210.64 1610.55,1210.64 1611.14,1210.64 1611.73,1210.64 1612.31,1210.64 1612.9,1210.64 1613.49,1210.64 1614.07,1210.64 1614.66,1210.64 1615.25,1210.64 1615.83,1210.64 1616.42,1210.64 1617.01,1210.64 1617.59,1210.64 1618.18,1210.64 1618.76,1210.64 1619.35,1210.64 1619.94,1210.64 1620.52,1210.64 1621.11,1210.64 1621.7,1210.64 1622.28,1210.64 1622.87,1210.64 1623.46,1210.64 1624.04,1210.64 1624.63,1210.64 1625.22,1210.64 1625.8,1210.64 1626.39,1210.64 1626.97,1210.64 1627.56,1210.64 1628.15,1210.64 1628.73,1210.64 1629.32,1210.64 1629.91,1210.64 1630.49,1210.64 1631.08,1210.64 1631.67,1210.64 1632.25,1210.64 1632.84,1210.64 1633.42,1210.64 1634.01,1210.64 1634.6,1210.64 1635.18,1210.64 1635.77,1210.64 1636.36,1210.64 1636.94,1210.64 1637.53,1210.64 1638.12,1210.64 1638.7,1210.64 1639.29,1210.64 1639.88,1210.64 1640.46,1210.64 1641.05,1210.64 1641.63,1210.64 1642.22,1210.64 1642.81,1210.64 1643.39,1210.64 1643.98,1210.64 1644.57,1210.64 1645.15,1210.64 1645.74,1210.64 1646.33,1210.64 1646.91,1210.64 1647.5,1210.64 1648.09,1210.64 1648.67,1210.64 1649.26,1210.64 1649.84,1210.64 1650.43,1210.64 1651.02,1210.64 1651.6,1210.64 1652.19,1210.64 1652.78,1210.64 1653.36,1210.64 1653.95,1210.64 1654.54,1210.64 1655.12,1210.64 1655.71,1210.64 1656.29,1210.64 1656.88,1210.64 1657.47,1210.64 1658.05,1210.64 1658.64,1210.64 1659.23,1210.64 1659.81,1210.64 1660.4,1210.64 1660.99,1210.64 1661.57,1210.64 1662.16,1210.64 1662.75,1210.64 1663.33,1210.64 1663.92,1210.64 1664.5,1210.64 1665.09,1210.64 1665.68,1210.64 1666.26,1210.64 1666.85,1210.64 1667.44,1210.64 1668.02,1210.64 1668.61,1210.64 1669.2,1210.64 1669.78,1210.64 1670.37,1210.64 1670.96,1210.64 1671.54,1210.64 1672.13,1210.64 1672.71,1210.64 1673.3,1210.64 1673.89,1210.64 1674.47,1210.64 1675.06,1210.64 1675.65,1210.64 1676.23,1210.64 1676.82,1210.64 1677.41,1210.64 1677.99,1210.64 1678.58,1210.64 1679.17,1210.64 1679.75,1210.64 1680.34,1210.64 1680.92,1210.64 1681.51,1210.64 1682.1,1210.64 1682.68,1210.64 1683.27,1210.64 1683.86,1210.64 1684.44,1210.64 1685.03,1210.64 1685.62,1210.64 1686.2,1210.64 1686.79,1210.64 1687.37,1210.64 1687.96,1210.64 1688.55,1210.64 1689.13,1210.64 1689.72,1210.64 1690.31,1210.64 1690.89,1210.64 1691.48,1210.64 1692.07,1210.64 1692.65,1210.64 1693.24,1210.64 1693.83,1210.64 1694.41,1210.64 1695,1210.64 1695.58,1210.64 1696.17,1210.64 1696.76,1210.64 1697.34,1210.64 1697.93,1210.64 1698.52,1210.64 1699.1,1210.64 1699.69,1210.64 1700.28,1210.64 1700.86,1210.64 1701.45,1210.64 1702.04,1210.64 1702.62,1210.64 1703.21,1210.64 1703.79,1210.64 1704.38,1210.64 1704.97,1210.64 1705.55,1210.64 1706.14,1210.64 1706.73,1210.64 1707.31,1210.64 1707.9,1210.64 1708.49,1210.64 1709.07,1210.64 1709.66,1210.64 1710.24,1210.64 1710.83,1210.64 1711.42,1210.64 1712,1210.64 1712.59,1210.64 1713.18,1210.64 1713.76,1210.64 1714.35,1210.64 1714.94,1210.64 1715.52,1210.64 1716.11,1210.64 1716.7,1210.64 1717.28,1210.64 1717.87,1210.64 1718.45,1210.64 1719.04,1210.64 1719.63,1210.64 1720.21,1210.64 1720.8,1210.64 1721.39,1210.64 1721.97,1210.64 1722.56,1210.64 1723.15,1210.64 1723.73,1210.64 1724.32,1210.64 1724.91,1210.64 1725.49,1210.64 1726.08,1210.64 1726.66,1210.64 1727.25,1210.64 1727.84,1210.64 1728.42,1210.64 1729.01,1210.64 1729.6,1210.64 1730.18,1210.64 1730.77,1210.64 1731.36,1210.64 1731.94,1210.64 1732.53,1210.64 1733.11,1210.64 1733.7,1210.64 1734.29,1210.64 1734.87,1210.64 1735.46,1210.64 1736.05,1210.64 1736.63,1210.64 1737.22,1210.64 1737.81,1210.64 1738.39,1210.64 1738.98,1210.64 1739.57,1210.64 1740.15,1210.64 1740.74,1210.64 1741.32,1210.64 1741.91,1210.64 1742.5,1210.64 1743.08,1210.64 1743.67,1210.64 1744.26,1210.64 1744.84,1210.64 1745.43,1210.64 1746.02,1210.64 1746.6,1210.64 1747.19,1210.64 1747.78,1210.64 1748.36,1210.64 1748.95,1210.64 1749.53,1210.64 1750.12,1210.64 1750.71,1210.64 1751.29,1210.64 1751.88,1210.64 1752.47,1210.64 1753.05,1210.64 1753.64,1210.64 1754.23,1210.64 1754.81,1210.64 1755.4,1210.64 1755.99,1210.64 1756.57,1210.64 1757.16,1210.64 1757.74,1210.64 1758.33,1210.64 1758.92,1210.64 1759.5,1210.64 1760.09,1210.64 1760.68,1210.64 1761.26,1210.64 1761.85,1210.64 1762.44,1210.64 1763.02,1210.64 1763.61,1210.64 1764.19,1210.64 1764.78,1210.64 1765.37,1210.64 1765.95,1210.64 1766.54,1210.64 1767.13,1210.64 1767.71,1210.64 1768.3,1210.64 1768.89,1210.64 1769.47,1210.64 1770.06,1210.64 1770.65,1210.64 1771.23,1210.64 1771.82,1210.64 1772.4,1210.64 1772.99,1210.64 1773.58,1210.64 1774.16,1210.64 1774.75,1210.64 1775.34,1210.64 1775.92,1210.64 1776.51,1210.64 1777.1,1210.64 1777.68,1210.64 1778.27,1210.64 1778.86,1210.64 1779.44,1210.64 1780.03,1210.64 1780.61,1210.64 1781.2,1210.64 1781.79,1210.64 1782.37,1210.64 1782.96,1210.64 1783.55,1210.64 1784.13,1210.64 1784.72,1210.64 1785.31,1210.64 1785.89,1210.64 1786.48,1210.64 1787.06,1210.64 1787.65,1210.64 1788.24,1210.64 1788.82,1210.64 1789.41,1210.64 1790,1210.64 1790.58,1210.64 1791.17,1210.64 1791.76,1210.64 1792.34,1210.64 1792.93,1210.64 1793.52,1210.64 1794.1,1210.64 1794.69,1210.64 1795.27,1210.64 1795.86,1210.64 1796.45,1210.64 1797.03,1210.64 1797.62,1210.64 1798.21,1210.64 1798.79,1210.64 1799.38,1210.64 1799.97,1210.64 1800.55,1210.64 1801.14,1210.64 1801.73,1210.64 1802.31,1210.64 1802.9,1210.64 1803.48,1210.64 1804.07,1210.64 1804.66,1210.64 1805.24,1210.64 1805.83,1210.64 1806.42,1210.64 1807,1210.64 1807.59,1210.64 1808.18,1210.64 1808.76,1210.64 1809.35,1210.64 1809.94,1210.64 1810.52,1210.64 1811.11,1210.64 1811.69,1210.64 1812.28,1210.64 1812.87,1210.64 1813.45,1210.64 1814.04,1210.64 1814.63,1210.64 1815.21,1210.64 1815.8,1210.64 1816.39,1210.64 1816.97,1210.64 1817.56,1210.64 1818.14,1210.64 1818.73,1210.64 1819.32,1210.64 1819.9,1210.64 1820.49,1210.64 1821.08,1210.64 1821.66,1210.64 1822.25,1210.64 1822.84,1210.64 1823.42,1210.64 1824.01,1210.64 1824.6,1210.64 1825.18,1210.64 1825.77,1210.64 1826.35,1210.64 1826.94,1210.64 1827.53,1210.64 1828.11,1210.64 1828.7,1210.64 1829.29,1210.64 1829.87,1210.64 1830.46,1210.64 1831.05,1210.64 1831.63,1210.64 1832.22,1210.64 1832.81,1210.64 1833.39,1210.64 1833.98,1210.64 1834.56,1210.64 1835.15,1210.64 1835.74,1210.64 1836.32,1210.64 1836.91,1210.64 1837.5,1210.64 1838.08,1210.64 1838.67,1210.64 1839.26,1210.64 1839.84,1210.64 1840.43,1210.64 1841.01,1210.64 1841.6,1210.64 1842.19,1210.64 1842.77,1210.64 1843.36,1210.64 1843.95,1210.64 1844.53,1210.64 1845.12,1210.64 1845.71,1210.64 1846.29,1210.64 1846.88,1210.64 1847.47,1210.64 1848.05,1210.64 1848.64,1210.64 1849.22,1210.64 1849.81,1210.64 1850.4,1210.64 1850.98,1210.64 1851.57,1210.64 1852.16,1210.64 1852.74,1210.64 1853.33,1210.64 1853.92,1210.64 1854.5,1210.64 1855.09,1210.64 1855.68,1210.64 1856.26,1210.64 1856.85,1210.64 1857.43,1210.64 1858.02,1210.64 1858.61,1210.64 1859.19,1210.64 1859.78,1210.64 1860.37,1210.64 1860.95,1210.64 1861.54,1210.64 1862.13,1210.64 1862.71,1210.64 1863.3,1210.64 1863.88,1210.64 1864.47,1210.64 1865.06,1210.64 1865.64,1210.64 1866.23,1210.64 1866.82,1210.64 1867.4,1210.64 1867.99,1210.64 1868.58,1210.64 1869.16,1210.64 1869.75,1210.64 1870.34,1210.64 1870.92,1210.64 1871.51,1210.64 1872.09,1210.64 1872.68,1210.64 1873.27,1210.64 1873.85,1210.64 1874.44,1210.64 1875.03,1210.64 1875.61,1210.64 1876.2,1210.64 1876.79,1210.64 1877.37,1210.64 1877.96,1210.64 1878.55,1210.64 1879.13,1210.64 1879.72,1210.64 1880.3,1210.64 1880.89,1210.64 1881.48,1210.64 1882.06,1210.64 1882.65,1210.64 1883.24,1210.64 1883.82,1210.64 1884.41,1210.64 1885,1210.64 1885.58,1210.64 1886.17,1210.64 1886.76,1210.64 1887.34,1210.64 1887.93,1210.64 1888.51,1210.64 1889.1,1210.64 1889.69,1210.64 1890.27,1210.64 1890.86,1210.64 1891.45,1210.64 1892.03,1210.64 1892.62,1210.64 1893.21,1210.64 1893.79,1210.64 1894.38,1210.64 1894.96,1210.64 1895.55,1210.64 1896.14,1210.64 1896.72,1210.64 1897.31,1210.64 1897.9,1210.64 1898.48,1210.64 1899.07,1210.64 1899.66,1210.64 1900.24,1210.64 1900.83,1210.64 1901.42,1210.64 1902,1210.64 1902.59,1210.64 1903.17,1210.64 1903.76,1210.64 1904.35,1210.64 1904.93,1210.64 1905.52,1210.64 1906.11,1210.64 1906.69,1210.64 1907.28,1210.64 1907.87,1210.64 1908.45,1210.64 1909.04,1210.64 1909.63,1210.64 1910.21,1210.64 1910.8,1210.64 1911.38,1210.64 1911.97,1210.64 1912.56,1210.64 1913.14,1210.64 1913.73,1210.64 1914.32,1210.64 1914.9,1210.64 1915.49,1210.64 1916.08,1210.64 1916.66,1210.64 1917.25,1210.64 1917.83,1210.64 1918.42,1210.64 1919.01,1210.64 1919.59,1210.64 1920.18,1210.64 1920.77,1210.64 1921.35,1210.64 1921.94,1210.64 1922.53,1210.64 1923.11,1210.64 1923.7,1210.64 1924.29,1210.64 1924.87,1210.64 1925.46,1210.64 1926.04,1210.64 1926.63,1210.64 1927.22,1210.64 1927.8,1210.64 1928.39,1210.64 1928.98,1210.64 1929.56,1210.64 1930.15,1210.64 1930.74,1210.64 1931.32,1210.64 1931.91,1210.64 1932.5,1210.64 1933.08,1210.64 1933.67,1210.64 1934.25,1210.64 1934.84,1210.64 1935.43,1210.64 1936.01,1210.64 1936.6,1210.64 1937.19,1210.64 1937.77,1210.64 1938.36,1210.64 1938.95,1210.64 1939.53,1210.64 1940.12,1210.64 1940.71,1210.64 1941.29,1210.64 1941.88,1210.64 1942.46,1210.64 1943.05,1210.64 1943.64,1210.64 1944.22,1210.64 1944.81,1210.64 1945.4,1210.64 1945.98,1210.64 1946.57,1210.64 1947.16,1210.64 1947.74,1210.64 1948.33,1210.64 1948.91,1210.64 1949.5,1210.64 1950.09,1210.64 1950.67,1210.64 1951.26,1210.64 1951.85,1210.64 1952.43,1210.64 1953.02,1210.64 1953.61,1210.64 1954.19,1210.64 1954.78,1210.64 1955.37,1210.64 1955.95,1210.64 1956.54,1210.64 1957.12,1210.64 1957.71,1210.64 1958.3,1210.64 1958.88,1210.64 1959.47,1210.64 1960.06,1210.64 1960.64,1210.64 1961.23,1210.64 1961.82,1210.64 1962.4,1210.64 1962.99,1210.64 1963.58,1210.64 1964.16,1210.64 1964.75,1210.64 1965.33,1210.64 1965.92,1210.64 1966.51,1210.64 1967.09,1210.64 1967.68,1210.64 1968.27,1210.64 1968.85,1210.64 1969.44,1210.64 1970.03,1210.64 1970.61,1210.64 1971.2,1210.64 1971.78,1210.64 1972.37,1210.64 1972.96,1210.64 1973.54,1210.64 1974.13,1210.64 1974.72,1210.64 1975.3,1210.64 1975.89,1210.64 1976.48,1210.64 1977.06,1210.64 1977.65,1210.64 1978.24,1210.64 1978.82,1210.64 1979.41,1210.64 1979.99,1210.64 1980.58,1210.64 1981.17,1210.64 1981.75,1210.64 1982.34,1210.64 1982.93,1210.64 1983.51,1210.64 1984.1,1210.64 1984.69,1210.64 1985.27,1210.64 1985.86,1210.64 1986.45,1210.64 1987.03,1210.64 1987.62,1210.64 1988.2,1210.64 1988.79,1210.64 1989.38,1210.64 1989.96,1210.64 1990.55,1210.64 1991.14,1210.64 1991.72,1210.64 1992.31,1210.64 1992.9,1210.64 1993.48,1210.64 1994.07,1210.64 1994.65,1210.64 1995.24,1210.64 1995.83,1210.64 1996.41,1210.64 1997,1210.64 1997.59,1210.64 1998.17,1210.64 1998.76,1210.64 1999.35,1210.64 1999.93,1210.64 2000.52,1210.64 2001.11,1210.64 2001.69,1210.64 2002.28,1210.64 2002.86,1210.64 2003.45,1210.64 2004.04,1210.64 2004.62,1210.64 2005.21,1210.64 2005.8,1210.64 2006.38,1210.64 2006.97,1210.64 2007.56,1210.64 2008.14,1210.64 2008.73,1210.64 2009.32,1210.64 2009.9,1210.64 2010.49,1210.64 2011.07,1210.64 2011.66,1210.64 2012.25,1210.64 2012.83,1210.64 2013.42,1210.64 2014.01,1210.64 2014.59,1210.64 2015.18,1210.64 2015.77,1210.64 2016.35,1210.64 2016.94,1210.64 2017.53,1210.64 2018.11,1210.64 2018.7,1210.64 2019.28,1210.64 2019.87,1210.64 2020.46,1210.64 2021.04,1210.64 2021.63,1210.64 2022.22,1210.64 2022.8,1210.64 2023.39,1210.64 2023.98,1210.64 2024.56,1210.64 2025.15,1210.64 2025.73,1210.64 2026.32,1210.64 2026.91,1210.64 2027.49,1210.64 2028.08,1210.64 2028.67,1210.64 2029.25,1210.64 2029.84,1210.64 2030.43,1210.64 2031.01,1210.64 2031.6,1210.64 2032.19,1210.64 2032.77,1210.64 2033.36,1210.64 2033.94,1210.64 2034.53,1210.64 2035.12,1210.64 2035.7,1210.64 2036.29,1210.64 2036.88,1210.64 2037.46,1210.64 2038.05,1210.64 2038.64,1210.64 2039.22,1210.64 2039.81,1210.64 2040.4,1210.64 2040.98,1210.64 2041.57,1210.64 2042.15,1210.64 2042.74,1210.64 2043.33,1210.64 2043.91,1210.64 2044.5,1210.64 2045.09,1210.64 2045.67,1210.64 2046.26,1210.64 2046.85,1210.64 2047.43,1210.64 2048.02,1210.64 2048.6,1210.64 2049.19,1210.64 2049.78,1210.64 2050.36,1210.64 2050.95,1210.64 2051.54,1210.64 2052.12,1210.64 2052.71,1210.64 2053.3,1210.64 2053.88,1210.64 2054.47,1210.64 2055.06,1210.64 2055.64,1210.64 2056.23,1210.64 2056.81,1210.64 2057.4,1210.64 2057.99,1210.64 2058.57,1210.64 2059.16,1210.64 2059.75,1210.64 2060.33,1210.64 2060.92,1210.64 2061.51,1210.64 2062.09,1210.64 2062.68,1210.64 2063.27,1210.64 2063.85,1210.64 2064.44,1210.64 2065.02,1210.64 2065.61,1210.64 2066.2,1210.64 2066.78,1210.64 2067.37,1210.64 2067.96,1210.64 2068.54,1210.64 2069.13,1210.64 2069.72,1210.64 2070.3,1210.64 2070.89,1210.64 2071.48,1210.64 2072.06,1210.64 2072.65,1210.64 2073.23,1210.64 2073.82,1210.64 2074.41,1210.64 2074.99,1210.64 2075.58,1210.64 2076.17,1210.64 2076.75,1210.64 2077.34,1210.64 2077.93,1210.64 2078.51,1210.64 2079.1,1210.64 2079.68,1210.64 2080.27,1210.64 2080.86,1210.64 2081.44,1210.64 2082.03,1210.64 2082.62,1210.64 2083.2,1210.64 2083.79,1210.64 2084.38,1210.64 2084.96,1210.64 2085.55,1210.64 2086.14,1210.64 2086.72,1210.64 2087.31,1210.64 2087.89,1210.64 2088.48,1210.64 2089.07,1210.64 2089.65,1210.64 2090.24,1210.64 2090.83,1210.64 2091.41,1210.64 2092,1210.64 2092.59,1210.64 2093.17,1210.64 2093.76,1210.64 2094.35,1210.64 2094.93,1210.64 2095.52,1210.64 2096.1,1210.64 2096.69,1210.64 2097.28,1210.64 2097.86,1210.64 2098.45,1210.64 2099.04,1210.64 2099.62,1210.64 2100.21,1210.64 2100.8,1210.64 2101.38,1210.64 2101.97,1210.64 2102.55,1210.64 2103.14,1210.64 2103.73,1210.64 2104.31,1210.64 2104.9,1210.64 2105.49,1210.64 2106.07,1210.64 2106.66,1210.64 2107.25,1210.64 2107.83,1210.64 2108.42,1210.64 2109.01,1210.64 2109.59,1210.64 2110.18,1210.64 2110.76,1210.64 2111.35,1210.64 2111.94,1210.64 2112.52,1210.64 2113.11,1210.64 2113.7,1210.64 2114.28,1210.64 2114.87,1210.64 2115.46,1210.64 2116.04,1210.64 2116.63,1210.64 2117.22,1210.64 2117.8,1210.64 2118.39,1210.64 2118.97,1210.64 2119.56,1210.64 2120.15,1210.64 2120.73,1210.64 2121.32,1210.64 2121.91,1210.64 2122.49,1210.64 2123.08,1210.64 2123.67,1210.64 2124.25,1210.64 2124.84,1210.64 2125.42,1210.64 2126.01,1210.64 2126.6,1210.64 2127.18,1210.64 2127.77,1210.64 2128.36,1210.64 2128.94,1210.64 2129.53,1210.64 2130.12,1210.64 2130.7,1210.64 2131.29,1210.64 2131.88,1210.64 2132.46,1210.64 2133.05,1210.64 2133.63,1210.64 2134.22,1210.64 2134.81,1210.64 2135.39,1210.64 2135.98,1210.64 2136.57,1210.64 2137.15,1210.64 2137.74,1210.64 2138.33,1210.64 2138.91,1210.64 2139.5,1210.64 2140.09,1210.64 2140.67,1210.64 2141.26,1210.64 2141.84,1210.64 2142.43,1210.64 2143.02,1210.64 2143.6,1210.64 2144.19,1210.64 2144.78,1210.64 2145.36,1210.64 2145.95,1210.64 2146.54,1210.64 2147.12,1210.64 2147.71,1210.64 2148.3,1210.64 2148.88,1210.64 2149.47,1210.64 2150.05,1210.64 2150.64,1210.64 2151.23,1210.64 2151.81,1210.64 2152.4,1210.64 2152.99,1210.64 2153.57,1210.64 2154.16,1210.64 2154.75,1210.64 2155.33,1210.64 2155.92,1210.64 2156.5,1210.64 2157.09,1210.64 2157.68,1210.64 2158.26,1210.64 \"/>\n<path clip-path=\"url(#clip902)\" d=\"M986.025 1210.5 L986.612 1210.5 L987.198 1210.5 L987.785 1210.5 L988.371 1210.5 L988.957 1210.5 L989.544 1210.5 L990.13 1210.5 L990.717 1210.5 L991.303 1210.5 L991.889 1210.5 L992.476 1210.5 L993.062 1210.5 L993.649 1210.5 L994.235 1210.5 L994.822 1210.5 L995.408 1210.5 L995.994 1210.5 L996.581 1210.5 L997.167 1210.5 L997.754 1210.5 L998.34 1210.5 L998.926 1210.5 L999.513 1210.5 L1000.1 1210.5 L1000.69 1210.5 L1001.27 1210.5 L1001.86 1210.5 L1002.44 1210.5 L1003.03 1210.5 L1003.62 1210.5 L1004.2 1210.5 L1004.79 1210.5 L1005.38 1210.5 L1005.96 1210.5 L1006.55 1210.5 L1007.14 1210.5 L1007.72 1210.5 L1008.31 1210.5 L1008.9 1210.5 L1009.48 1210.5 L1010.07 1210.5 L1010.65 1210.5 L1011.24 1210.5 L1011.83 1210.5 L1012.41 1210.5 L1013 1210.5 L1013.59 1210.5 L1014.17 1210.5 L1014.76 1210.5 L1015.35 1210.5 L1015.93 1210.5 L1016.52 1210.5 L1017.11 1210.5 L1017.69 1210.5 L1018.28 1210.5 L1018.86 1210.5 L1019.45 1210.5 L1020.04 1210.5 L1020.62 1210.5 L1021.21 1210.5 L1021.8 1210.5 L1022.38 1210.5 L1022.97 1210.5 L1023.56 1210.5 L1024.14 1210.5 L1024.73 1210.5 L1025.32 1210.5 L1025.9 1210.5 L1026.49 1210.5 L1027.07 1210.5 L1027.66 1210.5 L1028.25 1210.5 L1028.83 1210.5 L1029.42 1210.5 L1030.01 1210.5 L1030.59 1210.5 L1031.18 1210.5 L1031.77 1210.5 L1032.35 1210.5 L1032.94 1210.5 L1033.52 1210.5 L1034.11 1210.5 L1034.7 1210.5 L1035.28 1210.5 L1035.87 1210.5 L1036.46 1210.5 L1037.04 1210.5 L1037.63 1210.5 L1038.22 1210.5 L1038.8 1210.5 L1039.39 1210.5 L1039.98 1210.5 L1040.56 1210.5 L1041.15 1210.5 L1041.73 1210.5 L1042.32 1210.5 L1042.91 1210.5 L1043.49 1210.5 L1044.08 1210.5 L1044.67 1210.5 L1045.25 1210.5 L1045.84 1210.5 L1046.43 1210.5 L1047.01 1210.5 L1047.6 1210.5 L1048.19 1210.5 L1048.77 1210.5 L1049.36 1210.5 L1049.94 1210.5 L1050.53 1210.5 L1051.12 1210.5 L1051.7 1210.5 L1052.29 1210.5 L1052.88 1210.5 L1053.46 1210.5 L1054.05 1210.5 L1054.64 1210.5 L1055.22 1210.5 L1055.81 1210.5 L1056.39 1210.5 L1056.98 1210.5 L1057.57 1210.5 L1058.15 1210.5 L1058.74 1210.5 L1059.33 1210.5 L1059.91 1210.5 L1060.5 1210.5 L1061.09 1210.5 L1061.67 1210.5 L1062.26 1210.5 L1062.85 1210.5 L1063.43 1210.5 L1064.02 1210.5 L1064.6 1210.5 L1065.19 1210.5 L1065.78 1210.5 L1066.36 1210.5 L1066.95 1210.5 L1067.54 1210.5 L1068.12 1210.5 L1068.71 1210.5 L1069.3 1210.5 L1069.88 1210.5 L1070.47 1210.5 L1071.06 1210.5 L1071.64 1210.5 L1072.23 1210.5 L1072.81 1210.5 L1073.4 1210.5 L1073.99 1210.5 L1074.57 1210.5 L1075.16 1210.5 L1075.75 1210.5 L1076.33 1210.5 L1076.92 1210.5 L1077.51 1210.5 L1078.09 1210.5 L1078.68 1210.5 L1079.26 1210.5 L1079.85 1210.5 L1080.44 1210.5 L1081.02 1210.5 L1081.61 1210.5 L1082.2 1210.5 L1082.78 1210.5 L1083.37 1210.5 L1083.96 1210.5 L1084.54 1210.5 L1085.13 1210.5 L1085.72 1210.5 L1086.3 1210.5 L1086.89 1210.5 L1087.47 1210.5 L1088.06 1210.5 L1088.65 1210.5 L1089.23 1210.5 L1089.82 1210.5 L1090.41 1210.5 L1090.99 1210.5 L1091.58 1210.5 L1092.17 1210.5 L1092.75 1210.5 L1093.34 1210.5 L1093.93 1210.5 L1094.51 1210.5 L1095.1 1210.5 L1095.68 1210.5 L1096.27 1210.5 L1096.86 1210.5 L1097.44 1210.5 L1098.03 1210.5 L1098.62 1210.5 L1099.2 1210.5 L1099.79 1210.5 L1100.38 1210.5 L1100.96 1210.5 L1101.55 1210.5 L1102.14 1210.5 L1102.72 1210.5 L1103.31 1210.5 L1103.89 1210.5 L1104.48 1210.5 L1105.07 1210.5 L1105.65 1210.5 L1106.24 1210.5 L1106.83 1210.5 L1107.41 1210.5 L1108 1210.5 L1108.59 1210.5 L1109.17 1210.5 L1109.76 1210.5 L1110.34 1210.5 L1110.93 1210.5 L1111.52 1210.5 L1112.1 1210.5 L1112.69 1210.5 L1113.28 1210.5 L1113.86 1210.5 L1114.45 1210.5 L1115.04 1210.5 L1115.62 1210.5 L1116.21 1210.5 L1116.8 1210.5 L1117.38 1210.5 L1117.97 1210.5 L1118.55 1210.5 L1119.14 1210.5 L1119.73 1210.5 L1120.31 1210.5 L1120.9 1210.5 L1121.49 1210.5 L1122.07 1210.5 L1122.66 1210.5 L1123.25 1210.5 L1123.83 1210.5 L1124.42 1210.5 L1125.01 1210.5 L1125.59 1210.5 L1126.18 1210.5 L1126.76 1210.5 L1127.35 1210.5 L1127.94 1210.5 L1128.52 1210.5 L1129.11 1210.5 L1129.7 1210.5 L1130.28 1210.5 L1130.87 1210.5 L1131.46 1210.5 L1132.04 1210.5 L1132.63 1210.5 L1133.21 1210.5 L1133.8 1210.5 L1134.39 1210.5 L1134.97 1210.5 L1135.56 1210.5 L1136.15 1210.5 L1136.73 1210.5 L1137.32 1210.5 L1137.91 1210.5 L1138.49 1210.5 L1139.08 1210.5 L1139.67 1210.5 L1140.25 1210.5 L1140.84 1210.5 L1141.42 1210.5 L1142.01 1210.5 L1142.6 1210.5 L1143.18 1210.5 L1143.77 1210.5 L1144.36 1210.5 L1144.94 1210.5 L1145.53 1210.5 L1146.12 1210.5 L1146.7 1210.5 L1147.29 1210.5 L1147.88 1210.5 L1148.46 1210.5 L1149.05 1210.5 L1149.63 1210.5 L1150.22 1210.5 L1150.81 1210.5 L1151.39 1210.5 L1151.98 1210.5 L1152.57 1210.5 L1153.15 1210.5 L1153.74 1210.5 L1154.33 1210.5 L1154.91 1210.5 L1155.5 1210.5 L1156.09 1210.5 L1156.67 1210.5 L1157.26 1210.5 L1157.84 1210.5 L1158.43 1210.5 L1159.02 1210.5 L1159.6 1210.5 L1160.19 1210.5 L1160.78 1210.5 L1161.36 1210.5 L1161.95 1210.5 L1162.54 1210.5 L1163.12 1210.5 L1163.71 1210.5 L1164.29 1210.5 L1164.88 1210.5 L1165.47 1210.5 L1166.05 1210.5 L1166.64 1210.5 L1167.23 1210.5 L1167.81 1210.5 L1168.4 1210.5 L1168.99 1210.5 L1169.57 1210.5 L1170.16 1210.5 L1170.75 1210.5 L1171.33 1210.5 L1171.92 1210.5 L1172.5 1210.5 L1173.09 1210.5 L1173.68 1210.5 L1174.26 1210.5 L1174.85 1210.5 L1175.44 1210.5 L1176.02 1210.5 L1176.61 1210.5 L1177.2 1210.5 L1177.78 1210.5 L1178.37 1210.5 L1178.96 1210.5 L1179.54 1210.5 L1180.13 1210.5 L1180.71 1210.5 L1181.3 1210.5 L1181.89 1210.5 L1182.47 1210.5 L1183.06 1210.5 L1183.65 1210.5 L1184.23 1210.5 L1184.82 1210.5 L1185.41 1210.5 L1185.99 1210.5 L1186.58 1210.5 L1187.16 1210.5 L1187.75 1210.5 L1188.34 1210.5 L1188.92 1210.5 L1189.51 1210.5 L1190.1 1210.5 L1190.68 1210.5 L1191.27 1210.5 L1191.86 1210.5 L1192.44 1210.5 L1193.03 1210.5 L1193.62 1210.5 L1194.2 1210.5 L1194.79 1210.5 L1195.37 1210.5 L1195.96 1210.5 L1196.55 1210.5 L1197.13 1210.5 L1197.72 1210.5 L1198.31 1210.5 L1198.89 1210.5 L1199.48 1210.5 L1200.07 1210.5 L1200.65 1210.5 L1201.24 1210.5 L1201.83 1210.5 L1202.41 1210.5 L1203 1210.5 L1203.58 1210.5 L1204.17 1210.5 L1204.76 1210.5 L1205.34 1210.5 L1205.93 1210.5 L1206.52 1210.5 L1207.1 1210.5 L1207.69 1210.5 L1208.28 1210.5 L1208.86 1210.5 L1209.45 1210.5 L1210.03 1210.5 L1210.62 1210.5 L1211.21 1210.5 L1211.79 1210.5 L1212.38 1210.5 L1212.97 1210.5 L1213.55 1210.5 L1214.14 1210.5 L1214.73 1210.5 L1215.31 1210.5 L1215.9 1210.5 L1216.49 1210.5 L1217.07 1210.5 L1217.66 1210.5 L1218.24 1210.5 L1218.83 1210.5 L1219.42 1210.5 L1220 1210.5 L1220.59 1210.5 L1221.18 1210.5 L1221.76 1210.5 L1222.35 1210.5 L1222.94 1210.5 L1223.52 1210.5 L1224.11 1210.5 L1224.7 1210.5 L1225.28 1210.5 L1225.87 1210.5 L1226.45 1210.5 L1227.04 1210.5 L1227.63 1210.5 L1228.21 1210.5 L1228.8 1210.5 L1229.39 1210.5 L1229.97 1210.5 L1230.56 1210.5 L1231.15 1210.5 L1231.73 1210.5 L1232.32 1210.5 L1232.91 1210.5 L1233.49 1210.5 L1234.08 1210.5 L1234.66 1210.5 L1235.25 1210.5 L1235.84 1210.5 L1236.42 1210.5 L1237.01 1210.5 L1237.6 1210.5 L1238.18 1210.5 L1238.77 1210.5 L1239.36 1210.5 L1239.94 1210.5 L1240.53 1210.5 L1241.11 1210.5 L1241.7 1210.5 L1242.29 1210.5 L1242.87 1210.5 L1243.46 1210.5 L1244.05 1210.5 L1244.63 1210.5 L1245.22 1210.5 L1245.81 1210.5 L1246.39 1210.5 L1246.98 1210.5 L1247.57 1210.5 L1248.15 1210.5 L1248.74 1210.5 L1249.32 1210.5 L1249.91 1210.5 L1250.5 1210.5 L1251.08 1210.5 L1251.67 1210.5 L1252.26 1210.5 L1252.84 1210.5 L1253.43 1210.5 L1254.02 1210.5 L1254.6 1210.5 L1255.19 1210.5 L1255.78 1210.5 L1256.36 1210.5 L1256.95 1210.5 L1257.53 1210.5 L1258.12 1210.5 L1258.71 1210.5 L1259.29 1210.5 L1259.88 1210.5 L1260.47 1210.5 L1261.05 1210.5 L1261.64 1210.5 L1262.23 1210.5 L1262.81 1210.5 L1263.4 1210.5 L1263.98 1210.5 L1264.57 1210.5 L1265.16 1210.5 L1265.74 1210.5 L1266.33 1210.5 L1266.92 1210.5 L1267.5 1210.5 L1268.09 1210.5 L1268.68 1210.5 L1269.26 1210.5 L1269.85 1210.5 L1270.44 1210.5 L1271.02 1210.5 L1271.61 1210.5 L1272.19 1210.5 L1272.78 1210.5 L1273.37 1210.5 L1273.95 1210.5 L1274.54 1210.5 L1275.13 1210.5 L1275.71 1210.5 L1276.3 1210.5 L1276.89 1210.5 L1277.47 1210.5 L1278.06 1210.5 L1278.65 1210.5 L1279.23 1210.5 L1279.82 1210.5 L1280.4 1210.5 L1280.99 1210.5 L1281.58 1210.5 L1282.16 1210.5 L1282.75 1210.5 L1283.34 1210.5 L1283.92 1210.5 L1284.51 1210.5 L1285.1 1210.5 L1285.68 1210.5 L1286.27 1210.5 L1286.86 1210.5 L1287.44 1210.5 L1288.03 1210.5 L1288.61 1210.5 L1289.2 1210.5 L1289.79 1210.5 L1290.37 1210.5 L1290.96 1210.5 L1291.55 1210.5 L1292.13 1210.5 L1292.72 1210.5 L1293.31 1210.5 L1293.89 1210.5 L1294.48 1210.5 L1295.06 1210.5 L1295.65 1210.5 L1296.24 1210.5 L1296.82 1210.5 L1297.41 1210.5 L1298 1210.5 L1298.58 1210.5 L1299.17 1210.5 L1299.76 1210.5 L1300.34 1210.5 L1300.93 1210.5 L1301.52 1210.5 L1302.1 1210.5 L1302.69 1210.5 L1303.27 1210.5 L1303.86 1210.5 L1304.45 1210.5 L1305.03 1210.5 L1305.62 1210.5 L1306.21 1210.5 L1306.79 1210.5 L1307.38 1210.5 L1307.97 1210.5 L1308.55 1210.5 L1309.14 1210.5 L1309.73 1210.5 L1310.31 1210.5 L1310.9 1210.5 L1311.48 1210.5 L1312.07 1210.5 L1312.66 1210.5 L1313.24 1210.5 L1313.83 1210.5 L1314.42 1210.5 L1315 1210.5 L1315.59 1210.5 L1316.18 1210.5 L1316.76 1210.5 L1317.35 1210.5 L1317.93 1210.5 L1318.52 1210.5 L1319.11 1210.5 L1319.69 1210.5 L1320.28 1210.5 L1320.87 1210.5 L1321.45 1210.5 L1322.04 1210.5 L1322.63 1210.5 L1323.21 1210.5 L1323.8 1210.5 L1324.39 1210.5 L1324.97 1210.5 L1325.56 1210.5 L1326.14 1210.5 L1326.73 1210.5 L1327.32 1210.5 L1327.9 1210.5 L1328.49 1210.5 L1329.08 1210.5 L1329.66 1210.5 L1330.25 1210.5 L1330.84 1210.5 L1331.42 1210.5 L1332.01 1210.5 L1332.6 1210.5 L1333.18 1210.5 L1333.77 1210.5 L1334.35 1210.5 L1334.94 1210.5 L1335.53 1210.5 L1336.11 1210.5 L1336.7 1210.5 L1337.29 1210.5 L1337.87 1210.5 L1338.46 1210.5 L1339.05 1210.5 L1339.63 1210.5 L1340.22 1210.5 L1340.8 1210.5 L1341.39 1210.5 L1341.98 1210.5 L1342.56 1210.5 L1343.15 1210.5 L1343.74 1210.5 L1344.32 1210.5 L1344.91 1210.5 L1345.5 1210.5 L1346.08 1210.5 L1346.67 1210.5 L1347.26 1210.5 L1347.84 1210.5 L1348.43 1210.5 L1349.01 1210.5 L1349.6 1210.5 L1350.19 1210.5 L1350.77 1210.5 L1351.36 1210.5 L1351.95 1210.5 L1352.53 1210.5 L1353.12 1210.5 L1353.71 1210.5 L1354.29 1210.5 L1354.88 1210.5 L1355.47 1210.5 L1356.05 1210.5 L1356.64 1210.5 L1357.22 1210.5 L1357.81 1210.5 L1358.4 1210.5 L1358.98 1210.5 L1359.57 1210.5 L1360.16 1210.5 L1360.74 1210.5 L1361.33 1210.5 L1361.92 1210.5 L1362.5 1210.5 L1363.09 1210.5 L1363.68 1210.5 L1364.26 1210.5 L1364.85 1210.5 L1365.43 1210.5 L1366.02 1210.5 L1366.61 1210.5 L1367.19 1210.5 L1367.78 1210.5 L1368.37 1210.5 L1368.95 1210.5 L1369.54 1210.5 L1370.13 1210.5 L1370.71 1210.5 L1371.3 1210.5 L1371.88 1210.5 L1372.47 1210.5 L1373.06 1210.5 L1373.64 1210.5 L1374.23 1210.5 L1374.82 1210.5 L1375.4 1210.5 L1375.99 1210.5 L1376.58 1210.5 L1377.16 1210.5 L1377.75 1210.5 L1378.34 1210.5 L1378.92 1210.5 L1379.51 1210.5 L1380.09 1210.5 L1380.68 1210.5 L1381.27 1210.5 L1381.85 1210.5 L1382.44 1210.5 L1383.03 1210.5 L1383.61 1210.5 L1384.2 1210.5 L1384.79 1210.5 L1385.37 1210.5 L1385.96 1210.5 L1386.55 1210.5 L1387.13 1210.5 L1387.72 1210.5 L1388.3 1210.5 L1388.89 1210.5 L1389.48 1210.5 L1390.06 1210.5 L1390.65 1210.5 L1391.24 1210.5 L1391.82 1210.5 L1392.41 1210.5 L1393 1210.5 L1393.58 1210.5 L1394.17 1210.5 L1394.75 1210.5 L1395.34 1210.5 L1395.93 1210.5 L1396.51 1210.5 L1397.1 1210.5 L1397.69 1210.5 L1398.27 1210.5 L1398.86 1210.5 L1399.45 1210.5 L1400.03 1210.5 L1400.62 1210.5 L1401.21 1210.5 L1401.79 1210.5 L1402.38 1210.5 L1402.96 1210.5 L1403.55 1210.5 L1404.14 1210.5 L1404.72 1210.5 L1405.31 1210.5 L1405.9 1210.5 L1406.48 1210.5 L1407.07 1210.5 L1407.66 1210.5 L1408.24 1210.5 L1408.83 1210.5 L1409.42 1210.5 L1410 1210.5 L1410.59 1210.5 L1411.17 1210.5 L1411.76 1210.5 L1412.35 1210.5 L1412.93 1210.5 L1413.52 1210.5 L1414.11 1210.5 L1414.69 1210.5 L1415.28 1210.5 L1415.87 1210.5 L1416.45 1210.5 L1417.04 1210.5 L1417.63 1210.5 L1418.21 1210.5 L1418.8 1210.5 L1419.38 1210.5 L1419.97 1210.5 L1420.56 1210.5 L1421.14 1210.5 L1421.73 1210.5 L1422.32 1210.5 L1422.9 1210.5 L1423.49 1210.5 L1424.08 1210.5 L1424.66 1210.5 L1425.25 1210.5 L1425.83 1210.5 L1426.42 1210.5 L1427.01 1210.5 L1427.59 1210.5 L1428.18 1210.5 L1428.77 1210.5 L1429.35 1210.5 L1429.94 1210.5 L1430.53 1210.5 L1431.11 1210.5 L1431.7 1210.5 L1432.29 1210.5 L1432.87 1210.5 L1433.46 1210.5 L1434.04 1210.5 L1434.63 1210.5 L1435.22 1210.5 L1435.8 1210.5 L1436.39 1210.5 L1436.98 1210.5 L1437.56 1210.5 L1438.15 1210.5 L1438.74 1210.5 L1439.32 1210.5 L1439.91 1210.5 L1440.5 1210.5 L1441.08 1210.5 L1441.67 1210.5 L1442.25 1210.5 L1442.84 1210.5 L1443.43 1210.5 L1444.01 1210.5 L1444.6 1210.5 L1445.19 1210.5 L1445.77 1210.5 L1446.36 1210.5 L1446.95 1210.5 L1447.53 1210.5 L1448.12 1210.5 L1448.7 1210.5 L1449.29 1210.5 L1449.88 1210.5 L1450.46 1210.5 L1451.05 1210.5 L1451.64 1210.5 L1452.22 1210.5 L1452.81 1210.5 L1453.4 1210.5 L1453.98 1210.5 L1454.57 1210.5 L1455.16 1210.5 L1455.74 1210.5 L1456.33 1210.5 L1456.91 1210.5 L1457.5 1210.5 L1458.09 1210.5 L1458.67 1210.5 L1459.26 1210.5 L1459.85 1210.5 L1460.43 1210.5 L1461.02 1210.5 L1461.61 1210.5 L1462.19 1210.5 L1462.78 1210.5 L1463.37 1210.5 L1463.95 1210.5 L1464.54 1210.5 L1465.12 1210.5 L1465.71 1210.5 L1466.3 1210.5 L1466.88 1210.5 L1467.47 1210.5 L1468.06 1210.5 L1468.64 1210.5 L1469.23 1210.5 L1469.82 1210.5 L1470.4 1210.5 L1470.99 1210.5 L1471.57 1210.5 L1472.16 1210.5 L1472.75 1210.5 L1473.33 1210.5 L1473.92 1210.5 L1474.51 1210.5 L1475.09 1210.5 L1475.68 1210.5 L1476.27 1210.5 L1476.85 1210.5 L1477.44 1210.5 L1478.03 1210.5 L1478.61 1210.5 L1479.2 1210.5 L1479.78 1210.5 L1480.37 1210.5 L1480.96 1210.5 L1481.54 1210.5 L1482.13 1210.5 L1482.72 1210.5 L1483.3 1210.5 L1483.89 1210.5 L1484.48 1210.5 L1485.06 1210.5 L1485.65 1210.5 L1486.24 1210.5 L1486.82 1210.5 L1487.41 1210.5 L1487.99 1210.5 L1488.58 1210.5 L1489.17 1210.5 L1489.75 1210.5 L1490.34 1210.5 L1490.93 1210.5 L1491.51 1210.5 L1492.1 1210.5 L1492.69 1210.5 L1493.27 1210.5 L1493.86 1210.5 L1494.45 1210.5 L1495.03 1210.5 L1495.62 1210.5 L1496.2 1210.5 L1496.79 1210.5 L1497.38 1210.5 L1497.96 1210.5 L1498.55 1210.5 L1499.14 1210.5 L1499.72 1210.5 L1500.31 1210.5 L1500.9 1210.5 L1501.48 1210.5 L1502.07 1210.5 L1502.65 1210.5 L1503.24 1210.5 L1503.83 1210.5 L1504.41 1210.5 L1505 1210.5 L1505.59 1210.5 L1506.17 1210.5 L1506.76 1210.5 L1507.35 1210.5 L1507.93 1210.5 L1508.52 1210.5 L1509.11 1210.5 L1509.69 1210.5 L1510.28 1210.5 L1510.86 1210.5 L1511.45 1210.5 L1512.04 1210.5 L1512.62 1210.5 L1513.21 1210.5 L1513.8 1210.5 L1514.38 1210.5 L1514.97 1210.5 L1515.56 1210.5 L1516.14 1210.5 L1516.73 1210.5 L1517.32 1210.5 L1517.9 1210.5 L1518.49 1210.5 L1519.07 1210.5 L1519.66 1210.5 L1520.25 1210.5 L1520.83 1210.5 L1521.42 1210.5 L1522.01 1210.5 L1522.59 1210.5 L1523.18 1210.5 L1523.77 1210.5 L1524.35 1210.5 L1524.94 1210.5 L1525.52 1210.5 L1526.11 1210.5 L1526.7 1210.5 L1527.28 1210.5 L1527.87 1210.5 L1528.46 1210.5 L1529.04 1210.5 L1529.63 1210.5 L1530.22 1210.5 L1530.8 1210.5 L1531.39 1210.5 L1531.98 1210.5 L1532.56 1210.5 L1533.15 1210.5 L1533.73 1210.5 L1534.32 1210.5 L1534.91 1210.5 L1535.49 1210.5 L1536.08 1210.5 L1536.67 1210.5 L1537.25 1210.5 L1537.84 1210.5 L1538.43 1210.5 L1539.01 1210.5 L1539.6 1210.5 L1540.19 1210.5 L1540.77 1210.5 L1541.36 1210.5 L1541.94 1210.5 L1542.53 1210.5 L1543.12 1210.5 L1543.7 1210.5 L1544.29 1210.5 L1544.88 1210.5 L1545.46 1210.5 L1546.05 1210.5 L1546.64 1210.5 L1547.22 1210.5 L1547.81 1210.5 L1548.4 1210.5 L1548.98 1210.5 L1549.57 1210.5 L1550.15 1210.5 L1550.74 1210.5 L1551.33 1210.5 L1551.91 1210.5 L1552.5 1210.5 L1553.09 1210.5 L1553.67 1210.5 L1554.26 1210.5 L1554.85 1210.5 L1555.43 1210.5 L1556.02 1210.5 L1556.6 1210.5 L1557.19 1210.5 L1557.78 1210.5 L1558.36 1210.5 L1558.95 1210.5 L1559.54 1210.5 L1560.12 1210.5 L1560.71 1210.5 L1561.3 1210.5 L1561.88 1210.5 L1562.47 1210.5 L1563.06 1210.5 L1563.64 1210.5 L1564.23 1210.5 L1564.81 1210.5 L1565.4 1210.5 L1565.99 1210.5 L1566.57 1210.5 L1567.16 1210.5 L1567.75 1210.5 L1568.33 1210.5 L1568.92 1210.5 L1569.51 1210.5 L1570.09 1210.5 L1570.68 1210.5 L1571.27 1210.5 L1571.85 1210.5 L1572.44 1210.5 L1573.02 1210.5 L1573.61 1210.5 L1574.2 1210.5 L1574.78 1210.5 L1575.37 1210.5 L1575.96 1210.5 L1576.54 1210.5 L1577.13 1210.5 L1577.72 1210.5 L1578.3 1210.5 L1578.89 1210.5 L1579.47 1210.5 L1580.06 1210.5 L1580.65 1210.5 L1581.23 1210.5 L1581.82 1210.5 L1582.41 1210.5 L1582.99 1210.5 L1583.58 1210.5 L1584.17 1210.5 L1584.75 1210.5 L1585.34 1210.5 L1585.93 1210.5 L1586.51 1210.5 L1587.1 1210.5 L1587.68 1210.5 L1588.27 1210.5 L1588.86 1210.5 L1589.44 1210.5 L1590.03 1210.5 L1590.62 1210.5 L1591.2 1210.5 L1591.79 1210.5 L1592.38 1210.5 L1592.96 1210.5 L1593.55 1210.5 L1594.14 1210.5 L1594.72 1210.5 L1595.31 1210.5 L1595.89 1210.5 L1596.48 1210.5 L1597.07 1210.5 L1597.65 1210.5 L1598.24 1210.5 L1598.83 1210.5 L1599.41 1210.5 L1600 1210.5 L1600.59 1210.5 L1601.17 1210.5 L1601.76 1210.5 L1602.34 1210.5 L1602.93 1210.5 L1603.52 1210.5 L1604.1 1210.5 L1604.69 1210.5 L1605.28 1210.5 L1605.86 1210.5 L1606.45 1210.5 L1607.04 1210.5 L1607.62 1210.5 L1608.21 1210.5 L1608.8 1210.5 L1609.38 1210.5 L1609.97 1210.5 L1610.55 1210.5 L1611.14 1210.5 L1611.73 1210.5 L1612.31 1210.5 L1612.9 1210.5 L1613.49 1210.5 L1614.07 1210.5 L1614.66 1210.5 L1615.25 1210.5 L1615.83 1210.5 L1616.42 1210.5 L1617.01 1210.5 L1617.59 1210.5 L1618.18 1210.5 L1618.76 1210.5 L1619.35 1210.5 L1619.94 1210.5 L1620.52 1210.5 L1621.11 1210.5 L1621.7 1210.5 L1622.28 1210.5 L1622.87 1210.5 L1623.46 1210.5 L1624.04 1210.5 L1624.63 1210.5 L1625.22 1210.5 L1625.8 1210.5 L1626.39 1210.5 L1626.97 1210.5 L1627.56 1210.5 L1628.15 1210.5 L1628.73 1210.5 L1629.32 1210.5 L1629.91 1210.5 L1630.49 1210.5 L1631.08 1210.5 L1631.67 1210.5 L1632.25 1210.5 L1632.84 1210.5 L1633.42 1210.5 L1634.01 1210.5 L1634.6 1210.5 L1635.18 1210.5 L1635.77 1210.5 L1636.36 1210.5 L1636.94 1210.5 L1637.53 1210.5 L1638.12 1210.5 L1638.7 1210.5 L1639.29 1210.5 L1639.88 1210.5 L1640.46 1210.5 L1641.05 1210.5 L1641.63 1210.5 L1642.22 1210.5 L1642.81 1210.5 L1643.39 1210.5 L1643.98 1210.5 L1644.57 1210.5 L1645.15 1210.5 L1645.74 1210.5 L1646.33 1210.5 L1646.91 1210.5 L1647.5 1210.5 L1648.09 1210.5 L1648.67 1210.5 L1649.26 1210.5 L1649.84 1210.5 L1650.43 1210.5 L1651.02 1210.5 L1651.6 1210.5 L1652.19 1210.5 L1652.78 1210.5 L1653.36 1210.5 L1653.95 1210.5 L1654.54 1210.5 L1655.12 1210.5 L1655.71 1210.5 L1656.29 1210.5 L1656.88 1210.5 L1657.47 1210.5 L1658.05 1210.5 L1658.64 1210.5 L1659.23 1210.5 L1659.81 1210.5 L1660.4 1210.5 L1660.99 1210.5 L1661.57 1210.5 L1662.16 1210.5 L1662.75 1210.5 L1663.33 1210.5 L1663.92 1210.5 L1664.5 1210.5 L1665.09 1210.5 L1665.68 1210.5 L1666.26 1210.5 L1666.85 1210.5 L1667.44 1210.5 L1668.02 1210.5 L1668.61 1210.5 L1669.2 1210.5 L1669.78 1210.5 L1670.37 1210.5 L1670.96 1210.5 L1671.54 1210.5 L1672.13 1210.5 L1672.71 1210.5 L1673.3 1210.5 L1673.89 1210.5 L1674.47 1210.5 L1675.06 1210.5 L1675.65 1210.5 L1676.23 1210.5 L1676.82 1210.5 L1677.41 1210.5 L1677.99 1210.5 L1678.58 1210.5 L1679.17 1210.5 L1679.75 1210.5 L1680.34 1210.5 L1680.92 1210.5 L1681.51 1210.5 L1682.1 1210.5 L1682.68 1210.5 L1683.27 1210.5 L1683.86 1210.5 L1684.44 1210.5 L1685.03 1210.5 L1685.62 1210.5 L1686.2 1210.5 L1686.79 1210.5 L1687.37 1210.5 L1687.96 1210.5 L1688.55 1210.5 L1689.13 1210.5 L1689.72 1210.5 L1690.31 1210.5 L1690.89 1210.5 L1691.48 1210.5 L1692.07 1210.5 L1692.65 1210.5 L1693.24 1210.5 L1693.83 1210.5 L1694.41 1210.5 L1695 1210.5 L1695.58 1210.5 L1696.17 1210.5 L1696.76 1210.5 L1697.34 1210.5 L1697.93 1210.5 L1698.52 1210.5 L1699.1 1210.5 L1699.69 1210.5 L1700.28 1210.5 L1700.86 1210.5 L1701.45 1210.5 L1702.04 1210.5 L1702.62 1210.5 L1703.21 1210.5 L1703.79 1210.5 L1704.38 1210.5 L1704.97 1210.5 L1705.55 1210.5 L1706.14 1210.5 L1706.73 1210.5 L1707.31 1210.5 L1707.9 1210.5 L1708.49 1210.5 L1709.07 1210.5 L1709.66 1210.5 L1710.24 1210.5 L1710.83 1210.5 L1711.42 1210.5 L1712 1210.5 L1712.59 1210.5 L1713.18 1210.5 L1713.76 1210.5 L1714.35 1210.5 L1714.94 1210.5 L1715.52 1210.5 L1716.11 1210.5 L1716.7 1210.5 L1717.28 1210.5 L1717.87 1210.5 L1718.45 1210.5 L1719.04 1210.5 L1719.63 1210.5 L1720.21 1210.5 L1720.8 1210.5 L1721.39 1210.5 L1721.97 1210.5 L1722.56 1210.5 L1723.15 1210.5 L1723.73 1210.5 L1724.32 1210.5 L1724.91 1210.5 L1725.49 1210.5 L1726.08 1210.5 L1726.66 1210.5 L1727.25 1210.5 L1727.84 1210.5 L1728.42 1210.5 L1729.01 1210.5 L1729.6 1210.5 L1730.18 1210.5 L1730.77 1210.5 L1731.36 1210.5 L1731.94 1210.5 L1732.53 1210.5 L1733.11 1210.5 L1733.7 1210.5 L1734.29 1210.5 L1734.87 1210.5 L1735.46 1210.5 L1736.05 1210.5 L1736.63 1210.5 L1737.22 1210.5 L1737.81 1210.5 L1738.39 1210.5 L1738.98 1210.5 L1739.57 1210.5 L1740.15 1210.5 L1740.74 1210.5 L1741.32 1210.5 L1741.91 1210.5 L1742.5 1210.5 L1743.08 1210.5 L1743.67 1210.5 L1744.26 1210.5 L1744.84 1210.5 L1745.43 1210.5 L1746.02 1210.5 L1746.6 1210.5 L1747.19 1210.5 L1747.78 1210.5 L1748.36 1210.5 L1748.95 1210.5 L1749.53 1210.5 L1750.12 1210.5 L1750.71 1210.5 L1751.29 1210.5 L1751.88 1210.5 L1752.47 1210.5 L1753.05 1210.5 L1753.64 1210.5 L1754.23 1210.5 L1754.81 1210.5 L1755.4 1210.5 L1755.99 1210.5 L1756.57 1210.5 L1757.16 1210.5 L1757.74 1210.5 L1758.33 1210.5 L1758.92 1210.5 L1759.5 1210.5 L1760.09 1210.5 L1760.68 1210.5 L1761.26 1210.5 L1761.85 1210.5 L1762.44 1210.5 L1763.02 1210.5 L1763.61 1210.5 L1764.19 1210.5 L1764.78 1210.5 L1765.37 1210.5 L1765.95 1210.5 L1766.54 1210.5 L1767.13 1210.5 L1767.71 1210.5 L1768.3 1210.5 L1768.89 1210.5 L1769.47 1210.5 L1770.06 1210.5 L1770.65 1210.5 L1771.23 1210.5 L1771.82 1210.5 L1772.4 1210.5 L1772.99 1210.5 L1773.58 1210.5 L1774.16 1210.5 L1774.75 1210.5 L1775.34 1210.5 L1775.92 1210.5 L1776.51 1210.5 L1777.1 1210.5 L1777.68 1210.5 L1778.27 1210.5 L1778.86 1210.5 L1779.44 1210.5 L1780.03 1210.5 L1780.61 1210.5 L1781.2 1210.5 L1781.79 1210.5 L1782.37 1210.5 L1782.96 1210.5 L1783.55 1210.5 L1784.13 1210.5 L1784.72 1210.5 L1785.31 1210.5 L1785.89 1210.5 L1786.48 1210.5 L1787.06 1210.5 L1787.65 1210.5 L1788.24 1210.5 L1788.82 1210.5 L1789.41 1210.5 L1790 1210.5 L1790.58 1210.5 L1791.17 1210.5 L1791.76 1210.5 L1792.34 1210.5 L1792.93 1210.5 L1793.52 1210.5 L1794.1 1210.5 L1794.69 1210.5 L1795.27 1210.5 L1795.86 1210.5 L1796.45 1210.5 L1797.03 1210.5 L1797.62 1210.5 L1798.21 1210.5 L1798.79 1210.5 L1799.38 1210.5 L1799.97 1210.5 L1800.55 1210.5 L1801.14 1210.5 L1801.73 1210.5 L1802.31 1210.5 L1802.9 1210.5 L1803.48 1210.5 L1804.07 1210.5 L1804.66 1210.5 L1805.24 1210.5 L1805.83 1210.5 L1806.42 1210.5 L1807 1210.5 L1807.59 1210.5 L1808.18 1210.5 L1808.76 1210.5 L1809.35 1210.5 L1809.94 1210.5 L1810.52 1210.5 L1811.11 1210.5 L1811.69 1210.5 L1812.28 1210.5 L1812.87 1210.5 L1813.45 1210.5 L1814.04 1210.5 L1814.63 1210.5 L1815.21 1210.5 L1815.8 1210.5 L1816.39 1210.5 L1816.97 1210.5 L1817.56 1210.5 L1818.14 1210.5 L1818.73 1210.5 L1819.32 1210.5 L1819.9 1210.5 L1820.49 1210.5 L1821.08 1210.5 L1821.66 1210.5 L1822.25 1210.5 L1822.84 1210.5 L1823.42 1210.5 L1824.01 1210.5 L1824.6 1210.5 L1825.18 1210.5 L1825.77 1210.5 L1826.35 1210.5 L1826.94 1210.5 L1827.53 1210.5 L1828.11 1210.5 L1828.7 1210.5 L1829.29 1210.5 L1829.87 1210.5 L1830.46 1210.5 L1831.05 1210.5 L1831.63 1210.5 L1832.22 1210.5 L1832.81 1210.5 L1833.39 1210.5 L1833.98 1210.5 L1834.56 1210.5 L1835.15 1210.5 L1835.74 1210.5 L1836.32 1210.5 L1836.91 1210.5 L1837.5 1210.5 L1838.08 1210.5 L1838.67 1210.5 L1839.26 1210.5 L1839.84 1210.5 L1840.43 1210.5 L1841.01 1210.5 L1841.6 1210.5 L1842.19 1210.5 L1842.77 1210.5 L1843.36 1210.5 L1843.95 1210.5 L1844.53 1210.5 L1845.12 1210.5 L1845.71 1210.5 L1846.29 1210.5 L1846.88 1210.5 L1847.47 1210.5 L1848.05 1210.5 L1848.64 1210.5 L1849.22 1210.5 L1849.81 1210.5 L1850.4 1210.5 L1850.98 1210.5 L1851.57 1210.5 L1852.16 1210.5 L1852.74 1210.5 L1853.33 1210.5 L1853.92 1210.5 L1854.5 1210.5 L1855.09 1210.5 L1855.68 1210.5 L1856.26 1210.5 L1856.85 1210.5 L1857.43 1210.5 L1858.02 1210.5 L1858.61 1210.5 L1859.19 1210.5 L1859.78 1210.5 L1860.37 1210.5 L1860.95 1210.5 L1861.54 1210.5 L1862.13 1210.5 L1862.71 1210.5 L1863.3 1210.5 L1863.88 1210.5 L1864.47 1210.5 L1865.06 1210.5 L1865.64 1210.5 L1866.23 1210.5 L1866.82 1210.5 L1867.4 1210.5 L1867.99 1210.5 L1868.58 1210.5 L1869.16 1210.5 L1869.75 1210.5 L1870.34 1210.5 L1870.92 1210.5 L1871.51 1210.5 L1872.09 1210.5 L1872.68 1210.5 L1873.27 1210.5 L1873.85 1210.5 L1874.44 1210.5 L1875.03 1210.5 L1875.61 1210.5 L1876.2 1210.5 L1876.79 1210.5 L1877.37 1210.5 L1877.96 1210.5 L1878.55 1210.5 L1879.13 1210.5 L1879.72 1210.5 L1880.3 1210.5 L1880.89 1210.5 L1881.48 1210.5 L1882.06 1210.5 L1882.65 1210.5 L1883.24 1210.5 L1883.82 1210.5 L1884.41 1210.5 L1885 1210.5 L1885.58 1210.5 L1886.17 1210.5 L1886.76 1210.5 L1887.34 1210.5 L1887.93 1210.5 L1888.51 1210.5 L1889.1 1210.5 L1889.69 1210.5 L1890.27 1210.5 L1890.86 1210.5 L1891.45 1210.5 L1892.03 1210.5 L1892.62 1210.5 L1893.21 1210.5 L1893.79 1210.5 L1894.38 1210.5 L1894.96 1210.5 L1895.55 1210.5 L1896.14 1210.5 L1896.72 1210.5 L1897.31 1210.5 L1897.9 1210.5 L1898.48 1210.5 L1899.07 1210.5 L1899.66 1210.5 L1900.24 1210.5 L1900.83 1210.5 L1901.42 1210.5 L1902 1210.5 L1902.59 1210.5 L1903.17 1210.5 L1903.76 1210.5 L1904.35 1210.5 L1904.93 1210.5 L1905.52 1210.5 L1906.11 1210.5 L1906.69 1210.5 L1907.28 1210.5 L1907.87 1210.5 L1908.45 1210.5 L1909.04 1210.5 L1909.63 1210.5 L1910.21 1210.5 L1910.8 1210.5 L1911.38 1210.5 L1911.97 1210.5 L1912.56 1210.5 L1913.14 1210.5 L1913.73 1210.5 L1914.32 1210.5 L1914.9 1210.5 L1915.49 1210.5 L1916.08 1210.5 L1916.66 1210.5 L1917.25 1210.5 L1917.83 1210.5 L1918.42 1210.5 L1919.01 1210.5 L1919.59 1210.5 L1920.18 1210.5 L1920.77 1210.5 L1921.35 1210.5 L1921.94 1210.5 L1922.53 1210.5 L1923.11 1210.5 L1923.7 1210.5 L1924.29 1210.5 L1924.87 1210.5 L1925.46 1210.5 L1926.04 1210.5 L1926.63 1210.5 L1927.22 1210.5 L1927.8 1210.5 L1928.39 1210.5 L1928.98 1210.5 L1929.56 1210.5 L1930.15 1210.5 L1930.74 1210.5 L1931.32 1210.5 L1931.91 1210.5 L1932.5 1210.5 L1933.08 1210.5 L1933.67 1210.5 L1934.25 1210.5 L1934.84 1210.5 L1935.43 1210.5 L1936.01 1210.5 L1936.6 1210.5 L1937.19 1210.5 L1937.77 1210.5 L1938.36 1210.5 L1938.95 1210.5 L1939.53 1210.5 L1940.12 1210.5 L1940.71 1210.5 L1941.29 1210.5 L1941.88 1210.5 L1942.46 1210.5 L1943.05 1210.5 L1943.64 1210.5 L1944.22 1210.5 L1944.81 1210.5 L1945.4 1210.5 L1945.98 1210.5 L1946.57 1210.5 L1947.16 1210.5 L1947.74 1210.5 L1948.33 1210.5 L1948.91 1210.5 L1949.5 1210.5 L1950.09 1210.5 L1950.67 1210.5 L1951.26 1210.5 L1951.85 1210.5 L1952.43 1210.5 L1953.02 1210.5 L1953.61 1210.5 L1954.19 1210.5 L1954.78 1210.5 L1955.37 1210.5 L1955.95 1210.5 L1956.54 1210.5 L1957.12 1210.5 L1957.71 1210.5 L1958.3 1210.5 L1958.88 1210.5 L1959.47 1210.5 L1960.06 1210.5 L1960.64 1210.5 L1961.23 1210.5 L1961.82 1210.5 L1962.4 1210.5 L1962.99 1210.5 L1963.58 1210.5 L1964.16 1210.5 L1964.75 1210.5 L1965.33 1210.5 L1965.92 1210.5 L1966.51 1210.5 L1967.09 1210.5 L1967.68 1210.5 L1968.27 1210.5 L1968.85 1210.5 L1969.44 1210.5 L1970.03 1210.5 L1970.61 1210.5 L1971.2 1210.5 L1971.78 1210.5 L1972.37 1210.5 L1972.96 1210.5 L1973.54 1210.5 L1974.13 1210.5 L1974.72 1210.5 L1975.3 1210.5 L1975.89 1210.5 L1976.48 1210.5 L1977.06 1210.5 L1977.65 1210.5 L1978.24 1210.5 L1978.82 1210.5 L1979.41 1210.5 L1979.99 1210.5 L1980.58 1210.5 L1981.17 1210.5 L1981.75 1210.5 L1982.34 1210.5 L1982.93 1210.5 L1983.51 1210.5 L1984.1 1210.5 L1984.69 1210.5 L1985.27 1210.5 L1985.86 1210.5 L1986.45 1210.5 L1987.03 1210.5 L1987.62 1210.5 L1988.2 1210.5 L1988.79 1210.5 L1989.38 1210.5 L1989.96 1210.5 L1990.55 1210.5 L1991.14 1210.5 L1991.72 1210.5 L1992.31 1210.5 L1992.9 1210.5 L1993.48 1210.5 L1994.07 1210.5 L1994.65 1210.5 L1995.24 1210.5 L1995.83 1210.5 L1996.41 1210.5 L1997 1210.5 L1997.59 1210.5 L1998.17 1210.5 L1998.76 1210.5 L1999.35 1210.5 L1999.93 1210.5 L2000.52 1210.5 L2001.11 1210.5 L2001.69 1210.5 L2002.28 1210.5 L2002.86 1210.5 L2003.45 1210.5 L2004.04 1210.5 L2004.62 1210.5 L2005.21 1210.5 L2005.8 1210.5 L2006.38 1210.5 L2006.97 1210.5 L2007.56 1210.5 L2008.14 1210.5 L2008.73 1210.5 L2009.32 1210.5 L2009.9 1210.5 L2010.49 1210.5 L2011.07 1210.5 L2011.66 1210.5 L2012.25 1210.5 L2012.83 1210.5 L2013.42 1210.5 L2014.01 1210.5 L2014.59 1210.5 L2015.18 1210.5 L2015.77 1210.5 L2016.35 1210.5 L2016.94 1210.5 L2017.53 1210.5 L2018.11 1210.5 L2018.7 1210.5 L2019.28 1210.5 L2019.87 1210.5 L2020.46 1210.5 L2021.04 1210.5 L2021.63 1210.5 L2022.22 1210.5 L2022.8 1210.5 L2023.39 1210.5 L2023.98 1210.5 L2024.56 1210.5 L2025.15 1210.5 L2025.73 1210.5 L2026.32 1210.5 L2026.91 1210.5 L2027.49 1210.5 L2028.08 1210.5 L2028.67 1210.5 L2029.25 1210.5 L2029.84 1210.5 L2030.43 1210.5 L2031.01 1210.5 L2031.6 1210.5 L2032.19 1210.5 L2032.77 1210.5 L2033.36 1210.5 L2033.94 1210.5 L2034.53 1210.5 L2035.12 1210.5 L2035.7 1210.5 L2036.29 1210.5 L2036.88 1210.5 L2037.46 1210.5 L2038.05 1210.5 L2038.64 1210.5 L2039.22 1210.5 L2039.81 1210.5 L2040.4 1210.5 L2040.98 1210.5 L2041.57 1210.5 L2042.15 1210.5 L2042.74 1210.5 L2043.33 1210.5 L2043.91 1210.5 L2044.5 1210.5 L2045.09 1210.5 L2045.67 1210.5 L2046.26 1210.5 L2046.85 1210.5 L2047.43 1210.5 L2048.02 1210.5 L2048.6 1210.5 L2049.19 1210.5 L2049.78 1210.5 L2050.36 1210.5 L2050.95 1210.5 L2051.54 1210.5 L2052.12 1210.5 L2052.71 1210.5 L2053.3 1210.5 L2053.88 1210.5 L2054.47 1210.5 L2055.06 1210.5 L2055.64 1210.5 L2056.23 1210.5 L2056.81 1210.5 L2057.4 1210.5 L2057.99 1210.5 L2058.57 1210.5 L2059.16 1210.5 L2059.75 1210.5 L2060.33 1210.5 L2060.92 1210.5 L2061.51 1210.5 L2062.09 1210.5 L2062.68 1210.5 L2063.27 1210.5 L2063.85 1210.5 L2064.44 1210.5 L2065.02 1210.5 L2065.61 1210.5 L2066.2 1210.5 L2066.78 1210.5 L2067.37 1210.5 L2067.96 1210.5 L2068.54 1210.5 L2069.13 1210.5 L2069.72 1210.5 L2070.3 1210.5 L2070.89 1210.5 L2071.48 1210.5 L2072.06 1210.5 L2072.65 1210.5 L2073.23 1210.5 L2073.82 1210.5 L2074.41 1210.5 L2074.99 1210.5 L2075.58 1210.5 L2076.17 1210.5 L2076.75 1210.5 L2077.34 1210.5 L2077.93 1210.5 L2078.51 1210.5 L2079.1 1210.5 L2079.68 1210.5 L2080.27 1210.5 L2080.86 1210.5 L2081.44 1210.5 L2082.03 1210.5 L2082.62 1210.5 L2083.2 1210.5 L2083.79 1210.5 L2084.38 1210.5 L2084.96 1210.5 L2085.55 1210.5 L2086.14 1210.5 L2086.72 1210.5 L2087.31 1210.5 L2087.89 1210.5 L2088.48 1210.5 L2089.07 1210.5 L2089.65 1210.5 L2090.24 1210.5 L2090.83 1210.5 L2091.41 1210.5 L2092 1210.5 L2092.59 1210.5 L2093.17 1210.5 L2093.76 1210.5 L2094.35 1210.5 L2094.93 1210.5 L2095.52 1210.5 L2096.1 1210.5 L2096.69 1210.5 L2097.28 1210.5 L2097.86 1210.5 L2098.45 1210.5 L2099.04 1210.5 L2099.62 1210.5 L2100.21 1210.5 L2100.8 1210.5 L2101.38 1210.5 L2101.97 1210.5 L2102.55 1210.5 L2103.14 1210.5 L2103.73 1210.5 L2104.31 1210.5 L2104.9 1210.5 L2105.49 1210.5 L2106.07 1210.5 L2106.66 1210.5 L2107.25 1210.5 L2107.83 1210.5 L2108.42 1210.5 L2109.01 1210.5 L2109.59 1210.5 L2110.18 1210.5 L2110.76 1210.5 L2111.35 1210.5 L2111.94 1210.5 L2112.52 1210.5 L2113.11 1210.5 L2113.7 1210.5 L2114.28 1210.5 L2114.87 1210.5 L2115.46 1210.5 L2116.04 1210.5 L2116.63 1210.5 L2117.22 1210.5 L2117.8 1210.5 L2118.39 1210.5 L2118.97 1210.5 L2119.56 1210.5 L2120.15 1210.5 L2120.73 1210.5 L2121.32 1210.5 L2121.91 1210.5 L2122.49 1210.5 L2123.08 1210.5 L2123.67 1210.5 L2124.25 1210.5 L2124.84 1210.5 L2125.42 1210.5 L2126.01 1210.5 L2126.6 1210.5 L2127.18 1210.5 L2127.77 1210.5 L2128.36 1210.5 L2128.94 1210.5 L2129.53 1210.5 L2130.12 1210.5 L2130.7 1210.5 L2131.29 1210.5 L2131.88 1210.5 L2132.46 1210.5 L2133.05 1210.5 L2133.63 1210.5 L2134.22 1210.5 L2134.81 1210.5 L2135.39 1210.5 L2135.98 1210.5 L2136.57 1210.5 L2137.15 1210.5 L2137.74 1210.5 L2138.33 1210.5 L2138.91 1210.5 L2139.5 1210.5 L2140.09 1210.5 L2140.67 1210.5 L2141.26 1210.5 L2141.84 1210.5 L2142.43 1210.5 L2143.02 1210.5 L2143.6 1210.5 L2144.19 1210.5 L2144.78 1210.5 L2145.36 1210.5 L2145.95 1210.5 L2146.54 1210.5 L2147.12 1210.5 L2147.71 1210.5 L2148.3 1210.5 L2148.88 1210.5 L2149.47 1210.5 L2150.05 1210.5 L2150.64 1210.5 L2151.23 1210.5 L2151.81 1210.5 L2152.4 1210.5 L2152.99 1210.5 L2153.57 1210.5 L2154.16 1210.5 L2154.75 1210.5 L2155.33 1210.5 L2155.92 1210.5 L2156.5 1210.5 L2157.09 1210.5 L2157.68 1210.5 L2158.26 1210.5 L2158.26 1210.3 L2157.68 1210.3 L2157.09 1210.3 L2156.5 1210.3 L2155.92 1210.3 L2155.33 1210.3 L2154.75 1210.3 L2154.16 1210.3 L2153.57 1210.3 L2152.99 1210.3 L2152.4 1210.3 L2151.81 1210.3 L2151.23 1210.3 L2150.64 1210.3 L2150.05 1210.3 L2149.47 1210.3 L2148.88 1210.3 L2148.3 1210.3 L2147.71 1210.3 L2147.12 1210.3 L2146.54 1210.3 L2145.95 1210.3 L2145.36 1210.3 L2144.78 1210.3 L2144.19 1210.3 L2143.6 1210.3 L2143.02 1210.3 L2142.43 1210.3 L2141.84 1210.3 L2141.26 1210.3 L2140.67 1210.3 L2140.09 1210.3 L2139.5 1210.3 L2138.91 1210.3 L2138.33 1210.3 L2137.74 1210.3 L2137.15 1210.3 L2136.57 1210.3 L2135.98 1210.3 L2135.39 1210.3 L2134.81 1210.3 L2134.22 1210.3 L2133.63 1210.3 L2133.05 1210.3 L2132.46 1210.3 L2131.88 1210.3 L2131.29 1210.3 L2130.7 1210.3 L2130.12 1210.3 L2129.53 1210.3 L2128.94 1210.3 L2128.36 1210.3 L2127.77 1210.3 L2127.18 1210.3 L2126.6 1210.3 L2126.01 1210.3 L2125.42 1210.3 L2124.84 1210.3 L2124.25 1210.3 L2123.67 1210.3 L2123.08 1210.3 L2122.49 1210.3 L2121.91 1210.3 L2121.32 1210.3 L2120.73 1210.3 L2120.15 1210.3 L2119.56 1210.3 L2118.97 1210.3 L2118.39 1210.3 L2117.8 1210.3 L2117.22 1210.3 L2116.63 1210.3 L2116.04 1210.3 L2115.46 1210.3 L2114.87 1210.3 L2114.28 1210.3 L2113.7 1210.3 L2113.11 1210.3 L2112.52 1210.3 L2111.94 1210.3 L2111.35 1210.3 L2110.76 1210.3 L2110.18 1210.3 L2109.59 1210.3 L2109.01 1210.3 L2108.42 1210.3 L2107.83 1210.3 L2107.25 1210.3 L2106.66 1210.3 L2106.07 1210.3 L2105.49 1210.3 L2104.9 1210.3 L2104.31 1210.3 L2103.73 1210.3 L2103.14 1210.3 L2102.55 1210.3 L2101.97 1210.3 L2101.38 1210.3 L2100.8 1210.3 L2100.21 1210.3 L2099.62 1210.3 L2099.04 1210.3 L2098.45 1210.3 L2097.86 1210.3 L2097.28 1210.3 L2096.69 1210.3 L2096.1 1210.3 L2095.52 1210.3 L2094.93 1210.3 L2094.35 1210.3 L2093.76 1210.3 L2093.17 1210.3 L2092.59 1210.3 L2092 1210.3 L2091.41 1210.3 L2090.83 1210.3 L2090.24 1210.3 L2089.65 1210.3 L2089.07 1210.3 L2088.48 1210.3 L2087.89 1210.3 L2087.31 1210.3 L2086.72 1210.3 L2086.14 1210.3 L2085.55 1210.3 L2084.96 1210.3 L2084.38 1210.3 L2083.79 1210.3 L2083.2 1210.3 L2082.62 1210.3 L2082.03 1210.3 L2081.44 1210.3 L2080.86 1210.3 L2080.27 1210.3 L2079.68 1210.3 L2079.1 1210.3 L2078.51 1210.3 L2077.93 1210.3 L2077.34 1210.3 L2076.75 1210.3 L2076.17 1210.3 L2075.58 1210.3 L2074.99 1210.3 L2074.41 1210.3 L2073.82 1210.3 L2073.23 1210.3 L2072.65 1210.3 L2072.06 1210.3 L2071.48 1210.3 L2070.89 1210.3 L2070.3 1210.3 L2069.72 1210.3 L2069.13 1210.3 L2068.54 1210.3 L2067.96 1210.3 L2067.37 1210.3 L2066.78 1210.3 L2066.2 1210.3 L2065.61 1210.3 L2065.02 1210.3 L2064.44 1210.3 L2063.85 1210.3 L2063.27 1210.3 L2062.68 1210.3 L2062.09 1210.3 L2061.51 1210.3 L2060.92 1210.3 L2060.33 1210.3 L2059.75 1210.3 L2059.16 1210.3 L2058.57 1210.3 L2057.99 1210.3 L2057.4 1210.3 L2056.81 1210.3 L2056.23 1210.3 L2055.64 1210.3 L2055.06 1210.3 L2054.47 1210.3 L2053.88 1210.3 L2053.3 1210.3 L2052.71 1210.3 L2052.12 1210.3 L2051.54 1210.3 L2050.95 1210.3 L2050.36 1210.3 L2049.78 1210.3 L2049.19 1210.3 L2048.6 1210.3 L2048.02 1210.3 L2047.43 1210.3 L2046.85 1210.3 L2046.26 1210.3 L2045.67 1210.3 L2045.09 1210.3 L2044.5 1210.3 L2043.91 1210.3 L2043.33 1210.3 L2042.74 1210.3 L2042.15 1210.3 L2041.57 1210.3 L2040.98 1210.3 L2040.4 1210.3 L2039.81 1210.3 L2039.22 1210.3 L2038.64 1210.3 L2038.05 1210.3 L2037.46 1210.3 L2036.88 1210.3 L2036.29 1210.3 L2035.7 1210.3 L2035.12 1210.3 L2034.53 1210.3 L2033.94 1210.3 L2033.36 1210.3 L2032.77 1210.3 L2032.19 1210.3 L2031.6 1210.3 L2031.01 1210.3 L2030.43 1210.3 L2029.84 1210.3 L2029.25 1210.3 L2028.67 1210.3 L2028.08 1210.3 L2027.49 1210.3 L2026.91 1210.3 L2026.32 1210.3 L2025.73 1210.3 L2025.15 1210.3 L2024.56 1210.3 L2023.98 1210.3 L2023.39 1210.3 L2022.8 1210.3 L2022.22 1210.3 L2021.63 1210.3 L2021.04 1210.3 L2020.46 1210.3 L2019.87 1210.3 L2019.28 1210.3 L2018.7 1210.3 L2018.11 1210.3 L2017.53 1210.3 L2016.94 1210.3 L2016.35 1210.3 L2015.77 1210.3 L2015.18 1210.3 L2014.59 1210.3 L2014.01 1210.3 L2013.42 1210.3 L2012.83 1210.3 L2012.25 1210.3 L2011.66 1210.3 L2011.07 1210.3 L2010.49 1210.3 L2009.9 1210.3 L2009.32 1210.3 L2008.73 1210.3 L2008.14 1210.3 L2007.56 1210.3 L2006.97 1210.3 L2006.38 1210.3 L2005.8 1210.3 L2005.21 1210.3 L2004.62 1210.3 L2004.04 1210.3 L2003.45 1210.3 L2002.86 1210.3 L2002.28 1210.3 L2001.69 1210.3 L2001.11 1210.3 L2000.52 1210.3 L1999.93 1210.3 L1999.35 1210.3 L1998.76 1210.3 L1998.17 1210.3 L1997.59 1210.3 L1997 1210.3 L1996.41 1210.3 L1995.83 1210.3 L1995.24 1210.3 L1994.65 1210.3 L1994.07 1210.3 L1993.48 1210.3 L1992.9 1210.3 L1992.31 1210.3 L1991.72 1210.3 L1991.14 1210.3 L1990.55 1210.3 L1989.96 1210.3 L1989.38 1210.3 L1988.79 1210.3 L1988.2 1210.3 L1987.62 1210.3 L1987.03 1210.3 L1986.45 1210.3 L1985.86 1210.3 L1985.27 1210.3 L1984.69 1210.3 L1984.1 1210.3 L1983.51 1210.3 L1982.93 1210.3 L1982.34 1210.3 L1981.75 1210.3 L1981.17 1210.3 L1980.58 1210.3 L1979.99 1210.3 L1979.41 1210.3 L1978.82 1210.3 L1978.24 1210.3 L1977.65 1210.3 L1977.06 1210.3 L1976.48 1210.3 L1975.89 1210.3 L1975.3 1210.3 L1974.72 1210.3 L1974.13 1210.3 L1973.54 1210.3 L1972.96 1210.3 L1972.37 1210.3 L1971.78 1210.3 L1971.2 1210.3 L1970.61 1210.3 L1970.03 1210.3 L1969.44 1210.3 L1968.85 1210.3 L1968.27 1210.3 L1967.68 1210.3 L1967.09 1210.3 L1966.51 1210.3 L1965.92 1210.3 L1965.33 1210.3 L1964.75 1210.3 L1964.16 1210.3 L1963.58 1210.3 L1962.99 1210.3 L1962.4 1210.3 L1961.82 1210.3 L1961.23 1210.3 L1960.64 1210.3 L1960.06 1210.3 L1959.47 1210.3 L1958.88 1210.3 L1958.3 1210.3 L1957.71 1210.3 L1957.12 1210.3 L1956.54 1210.3 L1955.95 1210.3 L1955.37 1210.3 L1954.78 1210.3 L1954.19 1210.3 L1953.61 1210.3 L1953.02 1210.3 L1952.43 1210.3 L1951.85 1210.3 L1951.26 1210.3 L1950.67 1210.3 L1950.09 1210.3 L1949.5 1210.3 L1948.91 1210.3 L1948.33 1210.3 L1947.74 1210.3 L1947.16 1210.3 L1946.57 1210.3 L1945.98 1210.3 L1945.4 1210.3 L1944.81 1210.3 L1944.22 1210.3 L1943.64 1210.3 L1943.05 1210.3 L1942.46 1210.3 L1941.88 1210.3 L1941.29 1210.3 L1940.71 1210.3 L1940.12 1210.3 L1939.53 1210.3 L1938.95 1210.3 L1938.36 1210.3 L1937.77 1210.3 L1937.19 1210.3 L1936.6 1210.3 L1936.01 1210.3 L1935.43 1210.3 L1934.84 1210.3 L1934.25 1210.3 L1933.67 1210.3 L1933.08 1210.3 L1932.5 1210.3 L1931.91 1210.3 L1931.32 1210.3 L1930.74 1210.3 L1930.15 1210.3 L1929.56 1210.3 L1928.98 1210.3 L1928.39 1210.3 L1927.8 1210.3 L1927.22 1210.3 L1926.63 1210.3 L1926.04 1210.3 L1925.46 1210.3 L1924.87 1210.3 L1924.29 1210.3 L1923.7 1210.3 L1923.11 1210.3 L1922.53 1210.3 L1921.94 1210.3 L1921.35 1210.3 L1920.77 1210.3 L1920.18 1210.3 L1919.59 1210.3 L1919.01 1210.3 L1918.42 1210.3 L1917.83 1210.3 L1917.25 1210.3 L1916.66 1210.3 L1916.08 1210.3 L1915.49 1210.3 L1914.9 1210.3 L1914.32 1210.3 L1913.73 1210.3 L1913.14 1210.3 L1912.56 1210.3 L1911.97 1210.3 L1911.38 1210.3 L1910.8 1210.3 L1910.21 1210.3 L1909.63 1210.3 L1909.04 1210.3 L1908.45 1210.3 L1907.87 1210.3 L1907.28 1210.3 L1906.69 1210.3 L1906.11 1210.3 L1905.52 1210.3 L1904.93 1210.3 L1904.35 1210.3 L1903.76 1210.3 L1903.17 1210.3 L1902.59 1210.3 L1902 1210.3 L1901.42 1210.3 L1900.83 1210.3 L1900.24 1210.3 L1899.66 1210.3 L1899.07 1210.3 L1898.48 1210.3 L1897.9 1210.3 L1897.31 1210.3 L1896.72 1210.3 L1896.14 1210.3 L1895.55 1210.3 L1894.96 1210.3 L1894.38 1210.3 L1893.79 1210.3 L1893.21 1210.3 L1892.62 1210.3 L1892.03 1210.3 L1891.45 1210.3 L1890.86 1210.3 L1890.27 1210.3 L1889.69 1210.3 L1889.1 1210.3 L1888.51 1210.3 L1887.93 1210.3 L1887.34 1210.3 L1886.76 1210.3 L1886.17 1210.3 L1885.58 1210.3 L1885 1210.3 L1884.41 1210.3 L1883.82 1210.3 L1883.24 1210.3 L1882.65 1210.3 L1882.06 1210.3 L1881.48 1210.3 L1880.89 1210.3 L1880.3 1210.3 L1879.72 1210.3 L1879.13 1210.3 L1878.55 1210.3 L1877.96 1210.3 L1877.37 1210.3 L1876.79 1210.3 L1876.2 1210.3 L1875.61 1210.3 L1875.03 1210.3 L1874.44 1210.3 L1873.85 1210.3 L1873.27 1210.3 L1872.68 1210.3 L1872.09 1210.3 L1871.51 1210.3 L1870.92 1210.3 L1870.34 1210.3 L1869.75 1210.3 L1869.16 1210.3 L1868.58 1210.3 L1867.99 1210.3 L1867.4 1210.3 L1866.82 1210.3 L1866.23 1210.3 L1865.64 1210.3 L1865.06 1210.3 L1864.47 1210.3 L1863.88 1210.3 L1863.3 1210.3 L1862.71 1210.3 L1862.13 1210.3 L1861.54 1210.3 L1860.95 1210.3 L1860.37 1210.3 L1859.78 1210.3 L1859.19 1210.3 L1858.61 1210.3 L1858.02 1210.3 L1857.43 1210.3 L1856.85 1210.3 L1856.26 1210.3 L1855.68 1210.3 L1855.09 1210.3 L1854.5 1210.3 L1853.92 1210.3 L1853.33 1210.3 L1852.74 1210.3 L1852.16 1210.3 L1851.57 1210.3 L1850.98 1210.3 L1850.4 1210.3 L1849.81 1210.3 L1849.22 1210.3 L1848.64 1210.3 L1848.05 1210.3 L1847.47 1210.3 L1846.88 1210.3 L1846.29 1210.3 L1845.71 1210.3 L1845.12 1210.3 L1844.53 1210.3 L1843.95 1210.3 L1843.36 1210.3 L1842.77 1210.3 L1842.19 1210.3 L1841.6 1210.3 L1841.01 1210.3 L1840.43 1210.3 L1839.84 1210.3 L1839.26 1210.3 L1838.67 1210.3 L1838.08 1210.3 L1837.5 1210.3 L1836.91 1210.3 L1836.32 1210.3 L1835.74 1210.3 L1835.15 1210.3 L1834.56 1210.3 L1833.98 1210.3 L1833.39 1210.3 L1832.81 1210.3 L1832.22 1210.3 L1831.63 1210.3 L1831.05 1210.3 L1830.46 1210.3 L1829.87 1210.3 L1829.29 1210.3 L1828.7 1210.3 L1828.11 1210.3 L1827.53 1210.3 L1826.94 1210.3 L1826.35 1210.3 L1825.77 1210.3 L1825.18 1210.3 L1824.6 1210.3 L1824.01 1210.3 L1823.42 1210.3 L1822.84 1210.3 L1822.25 1210.3 L1821.66 1210.3 L1821.08 1210.3 L1820.49 1210.3 L1819.9 1210.3 L1819.32 1210.3 L1818.73 1210.3 L1818.14 1210.3 L1817.56 1210.3 L1816.97 1210.3 L1816.39 1210.3 L1815.8 1210.3 L1815.21 1210.3 L1814.63 1210.3 L1814.04 1210.3 L1813.45 1210.3 L1812.87 1210.3 L1812.28 1210.3 L1811.69 1210.3 L1811.11 1210.3 L1810.52 1210.3 L1809.94 1210.3 L1809.35 1210.3 L1808.76 1210.3 L1808.18 1210.3 L1807.59 1210.3 L1807 1210.3 L1806.42 1210.3 L1805.83 1210.3 L1805.24 1210.3 L1804.66 1210.3 L1804.07 1210.3 L1803.48 1210.3 L1802.9 1210.3 L1802.31 1210.3 L1801.73 1210.3 L1801.14 1210.3 L1800.55 1210.3 L1799.97 1210.3 L1799.38 1210.3 L1798.79 1210.3 L1798.21 1210.3 L1797.62 1210.3 L1797.03 1210.3 L1796.45 1210.3 L1795.86 1210.3 L1795.27 1210.3 L1794.69 1210.3 L1794.1 1210.3 L1793.52 1210.3 L1792.93 1210.3 L1792.34 1210.3 L1791.76 1210.3 L1791.17 1210.3 L1790.58 1210.3 L1790 1210.3 L1789.41 1210.3 L1788.82 1210.3 L1788.24 1210.3 L1787.65 1210.3 L1787.06 1210.3 L1786.48 1210.3 L1785.89 1210.3 L1785.31 1210.3 L1784.72 1210.3 L1784.13 1210.3 L1783.55 1210.3 L1782.96 1210.3 L1782.37 1210.3 L1781.79 1210.3 L1781.2 1210.3 L1780.61 1210.3 L1780.03 1210.3 L1779.44 1210.3 L1778.86 1210.3 L1778.27 1210.3 L1777.68 1210.3 L1777.1 1210.3 L1776.51 1210.3 L1775.92 1210.3 L1775.34 1210.3 L1774.75 1210.3 L1774.16 1210.3 L1773.58 1210.3 L1772.99 1210.3 L1772.4 1210.3 L1771.82 1210.3 L1771.23 1210.3 L1770.65 1210.3 L1770.06 1210.3 L1769.47 1210.3 L1768.89 1210.3 L1768.3 1210.3 L1767.71 1210.3 L1767.13 1210.3 L1766.54 1210.3 L1765.95 1210.3 L1765.37 1210.3 L1764.78 1210.3 L1764.19 1210.3 L1763.61 1210.3 L1763.02 1210.3 L1762.44 1210.3 L1761.85 1210.3 L1761.26 1210.3 L1760.68 1210.3 L1760.09 1210.3 L1759.5 1210.3 L1758.92 1210.3 L1758.33 1210.3 L1757.74 1210.3 L1757.16 1210.3 L1756.57 1210.3 L1755.99 1210.3 L1755.4 1210.3 L1754.81 1210.3 L1754.23 1210.3 L1753.64 1210.3 L1753.05 1210.3 L1752.47 1210.3 L1751.88 1210.3 L1751.29 1210.3 L1750.71 1210.3 L1750.12 1210.3 L1749.53 1210.3 L1748.95 1210.3 L1748.36 1210.3 L1747.78 1210.3 L1747.19 1210.3 L1746.6 1210.3 L1746.02 1210.3 L1745.43 1210.3 L1744.84 1210.3 L1744.26 1210.3 L1743.67 1210.3 L1743.08 1210.3 L1742.5 1210.3 L1741.91 1210.3 L1741.32 1210.3 L1740.74 1210.3 L1740.15 1210.3 L1739.57 1210.3 L1738.98 1210.3 L1738.39 1210.3 L1737.81 1210.3 L1737.22 1210.3 L1736.63 1210.3 L1736.05 1210.3 L1735.46 1210.3 L1734.87 1210.3 L1734.29 1210.3 L1733.7 1210.3 L1733.11 1210.3 L1732.53 1210.3 L1731.94 1210.3 L1731.36 1210.3 L1730.77 1210.3 L1730.18 1210.3 L1729.6 1210.3 L1729.01 1210.3 L1728.42 1210.3 L1727.84 1210.3 L1727.25 1210.3 L1726.66 1210.3 L1726.08 1210.3 L1725.49 1210.3 L1724.91 1210.3 L1724.32 1210.3 L1723.73 1210.3 L1723.15 1210.3 L1722.56 1210.3 L1721.97 1210.3 L1721.39 1210.3 L1720.8 1210.3 L1720.21 1210.3 L1719.63 1210.3 L1719.04 1210.3 L1718.45 1210.3 L1717.87 1210.3 L1717.28 1210.3 L1716.7 1210.3 L1716.11 1210.3 L1715.52 1210.3 L1714.94 1210.3 L1714.35 1210.3 L1713.76 1210.3 L1713.18 1210.3 L1712.59 1210.3 L1712 1210.3 L1711.42 1210.3 L1710.83 1210.3 L1710.24 1210.3 L1709.66 1210.3 L1709.07 1210.3 L1708.49 1210.3 L1707.9 1210.3 L1707.31 1210.3 L1706.73 1210.3 L1706.14 1210.3 L1705.55 1210.3 L1704.97 1210.3 L1704.38 1210.3 L1703.79 1210.3 L1703.21 1210.3 L1702.62 1210.3 L1702.04 1210.3 L1701.45 1210.3 L1700.86 1210.3 L1700.28 1210.3 L1699.69 1210.3 L1699.1 1210.3 L1698.52 1210.3 L1697.93 1210.3 L1697.34 1210.3 L1696.76 1210.3 L1696.17 1210.3 L1695.58 1210.3 L1695 1210.3 L1694.41 1210.3 L1693.83 1210.3 L1693.24 1210.3 L1692.65 1210.3 L1692.07 1210.3 L1691.48 1210.3 L1690.89 1210.3 L1690.31 1210.3 L1689.72 1210.3 L1689.13 1210.3 L1688.55 1210.3 L1687.96 1210.3 L1687.37 1210.3 L1686.79 1210.3 L1686.2 1210.3 L1685.62 1210.3 L1685.03 1210.3 L1684.44 1210.3 L1683.86 1210.3 L1683.27 1210.3 L1682.68 1210.3 L1682.1 1210.3 L1681.51 1210.3 L1680.92 1210.3 L1680.34 1210.3 L1679.75 1210.3 L1679.17 1210.3 L1678.58 1210.3 L1677.99 1210.3 L1677.41 1210.3 L1676.82 1210.3 L1676.23 1210.3 L1675.65 1210.3 L1675.06 1210.3 L1674.47 1210.3 L1673.89 1210.3 L1673.3 1210.3 L1672.71 1210.3 L1672.13 1210.3 L1671.54 1210.3 L1670.96 1210.3 L1670.37 1210.3 L1669.78 1210.3 L1669.2 1210.3 L1668.61 1210.3 L1668.02 1210.3 L1667.44 1210.3 L1666.85 1210.3 L1666.26 1210.3 L1665.68 1210.3 L1665.09 1210.3 L1664.5 1210.3 L1663.92 1210.3 L1663.33 1210.3 L1662.75 1210.3 L1662.16 1210.3 L1661.57 1210.3 L1660.99 1210.3 L1660.4 1210.3 L1659.81 1210.3 L1659.23 1210.3 L1658.64 1210.3 L1658.05 1210.3 L1657.47 1210.3 L1656.88 1210.3 L1656.29 1210.3 L1655.71 1210.3 L1655.12 1210.3 L1654.54 1210.3 L1653.95 1210.3 L1653.36 1210.3 L1652.78 1210.3 L1652.19 1210.3 L1651.6 1210.3 L1651.02 1210.3 L1650.43 1210.3 L1649.84 1210.3 L1649.26 1210.3 L1648.67 1210.3 L1648.09 1210.3 L1647.5 1210.3 L1646.91 1210.3 L1646.33 1210.3 L1645.74 1210.3 L1645.15 1210.3 L1644.57 1210.3 L1643.98 1210.3 L1643.39 1210.3 L1642.81 1210.3 L1642.22 1210.3 L1641.63 1210.3 L1641.05 1210.3 L1640.46 1210.3 L1639.88 1210.3 L1639.29 1210.3 L1638.7 1210.3 L1638.12 1210.3 L1637.53 1210.3 L1636.94 1210.3 L1636.36 1210.3 L1635.77 1210.3 L1635.18 1210.3 L1634.6 1210.3 L1634.01 1210.3 L1633.42 1210.3 L1632.84 1210.3 L1632.25 1210.3 L1631.67 1210.3 L1631.08 1210.3 L1630.49 1210.3 L1629.91 1210.3 L1629.32 1210.3 L1628.73 1210.3 L1628.15 1210.3 L1627.56 1210.3 L1626.97 1210.3 L1626.39 1210.3 L1625.8 1210.3 L1625.22 1210.3 L1624.63 1210.3 L1624.04 1210.3 L1623.46 1210.3 L1622.87 1210.3 L1622.28 1210.3 L1621.7 1210.3 L1621.11 1210.3 L1620.52 1210.3 L1619.94 1210.3 L1619.35 1210.3 L1618.76 1210.3 L1618.18 1210.3 L1617.59 1210.3 L1617.01 1210.3 L1616.42 1210.3 L1615.83 1210.3 L1615.25 1210.3 L1614.66 1210.3 L1614.07 1210.3 L1613.49 1210.3 L1612.9 1210.3 L1612.31 1210.3 L1611.73 1210.3 L1611.14 1210.3 L1610.55 1210.3 L1609.97 1210.3 L1609.38 1210.3 L1608.8 1210.3 L1608.21 1210.3 L1607.62 1210.3 L1607.04 1210.3 L1606.45 1210.3 L1605.86 1210.3 L1605.28 1210.3 L1604.69 1210.3 L1604.1 1210.3 L1603.52 1210.3 L1602.93 1210.3 L1602.34 1210.3 L1601.76 1210.3 L1601.17 1210.3 L1600.59 1210.3 L1600 1210.3 L1599.41 1210.3 L1598.83 1210.3 L1598.24 1210.3 L1597.65 1210.3 L1597.07 1210.3 L1596.48 1210.3 L1595.89 1210.3 L1595.31 1210.3 L1594.72 1210.3 L1594.14 1210.3 L1593.55 1210.3 L1592.96 1210.3 L1592.38 1210.3 L1591.79 1210.3 L1591.2 1210.3 L1590.62 1210.3 L1590.03 1210.3 L1589.44 1210.3 L1588.86 1210.3 L1588.27 1210.3 L1587.68 1210.3 L1587.1 1210.3 L1586.51 1210.3 L1585.93 1210.3 L1585.34 1210.3 L1584.75 1210.3 L1584.17 1210.3 L1583.58 1210.3 L1582.99 1210.3 L1582.41 1210.3 L1581.82 1210.3 L1581.23 1210.3 L1580.65 1210.3 L1580.06 1210.3 L1579.47 1210.3 L1578.89 1210.3 L1578.3 1210.3 L1577.72 1210.3 L1577.13 1210.3 L1576.54 1210.3 L1575.96 1210.3 L1575.37 1210.3 L1574.78 1210.3 L1574.2 1210.3 L1573.61 1210.3 L1573.02 1210.3 L1572.44 1210.3 L1571.85 1210.3 L1571.27 1210.3 L1570.68 1210.3 L1570.09 1210.3 L1569.51 1210.3 L1568.92 1210.3 L1568.33 1210.3 L1567.75 1210.3 L1567.16 1210.3 L1566.57 1210.3 L1565.99 1210.3 L1565.4 1210.3 L1564.81 1210.3 L1564.23 1210.3 L1563.64 1210.3 L1563.06 1210.3 L1562.47 1210.3 L1561.88 1210.3 L1561.3 1210.3 L1560.71 1210.3 L1560.12 1210.3 L1559.54 1210.3 L1558.95 1210.3 L1558.36 1210.3 L1557.78 1210.3 L1557.19 1210.3 L1556.6 1210.3 L1556.02 1210.3 L1555.43 1210.3 L1554.85 1210.3 L1554.26 1210.3 L1553.67 1210.3 L1553.09 1210.3 L1552.5 1210.3 L1551.91 1210.3 L1551.33 1210.3 L1550.74 1210.3 L1550.15 1210.3 L1549.57 1210.3 L1548.98 1210.3 L1548.4 1210.3 L1547.81 1210.3 L1547.22 1210.3 L1546.64 1210.3 L1546.05 1210.3 L1545.46 1210.3 L1544.88 1210.3 L1544.29 1210.3 L1543.7 1210.3 L1543.12 1210.3 L1542.53 1210.3 L1541.94 1210.3 L1541.36 1210.3 L1540.77 1210.3 L1540.19 1210.3 L1539.6 1210.3 L1539.01 1210.3 L1538.43 1210.3 L1537.84 1210.3 L1537.25 1210.3 L1536.67 1210.3 L1536.08 1210.3 L1535.49 1210.3 L1534.91 1210.3 L1534.32 1210.3 L1533.73 1210.3 L1533.15 1210.3 L1532.56 1210.3 L1531.98 1210.3 L1531.39 1210.3 L1530.8 1210.3 L1530.22 1210.3 L1529.63 1210.3 L1529.04 1210.3 L1528.46 1210.3 L1527.87 1210.3 L1527.28 1210.3 L1526.7 1210.3 L1526.11 1210.3 L1525.52 1210.3 L1524.94 1210.3 L1524.35 1210.3 L1523.77 1210.3 L1523.18 1210.3 L1522.59 1210.3 L1522.01 1210.3 L1521.42 1210.3 L1520.83 1210.3 L1520.25 1210.3 L1519.66 1210.3 L1519.07 1210.3 L1518.49 1210.3 L1517.9 1210.3 L1517.32 1210.3 L1516.73 1210.3 L1516.14 1210.3 L1515.56 1210.3 L1514.97 1210.3 L1514.38 1210.3 L1513.8 1210.3 L1513.21 1210.3 L1512.62 1210.3 L1512.04 1210.3 L1511.45 1210.3 L1510.86 1210.3 L1510.28 1210.3 L1509.69 1210.3 L1509.11 1210.3 L1508.52 1210.3 L1507.93 1210.3 L1507.35 1210.3 L1506.76 1210.3 L1506.17 1210.3 L1505.59 1210.3 L1505 1210.3 L1504.41 1210.3 L1503.83 1210.3 L1503.24 1210.3 L1502.65 1210.3 L1502.07 1210.3 L1501.48 1210.3 L1500.9 1210.3 L1500.31 1210.3 L1499.72 1210.3 L1499.14 1210.3 L1498.55 1210.3 L1497.96 1210.3 L1497.38 1210.3 L1496.79 1210.3 L1496.2 1210.3 L1495.62 1210.3 L1495.03 1210.3 L1494.45 1210.3 L1493.86 1210.3 L1493.27 1210.3 L1492.69 1210.3 L1492.1 1210.3 L1491.51 1210.3 L1490.93 1210.3 L1490.34 1210.3 L1489.75 1210.3 L1489.17 1210.3 L1488.58 1210.3 L1487.99 1210.3 L1487.41 1210.3 L1486.82 1210.3 L1486.24 1210.3 L1485.65 1210.3 L1485.06 1210.3 L1484.48 1210.3 L1483.89 1210.3 L1483.3 1210.3 L1482.72 1210.3 L1482.13 1210.3 L1481.54 1210.3 L1480.96 1210.3 L1480.37 1210.3 L1479.78 1210.3 L1479.2 1210.3 L1478.61 1210.3 L1478.03 1210.3 L1477.44 1210.3 L1476.85 1210.3 L1476.27 1210.3 L1475.68 1210.3 L1475.09 1210.3 L1474.51 1210.3 L1473.92 1210.3 L1473.33 1210.3 L1472.75 1210.3 L1472.16 1210.3 L1471.57 1210.3 L1470.99 1210.3 L1470.4 1210.3 L1469.82 1210.3 L1469.23 1210.3 L1468.64 1210.3 L1468.06 1210.3 L1467.47 1210.3 L1466.88 1210.3 L1466.3 1210.3 L1465.71 1210.3 L1465.12 1210.3 L1464.54 1210.3 L1463.95 1210.3 L1463.37 1210.3 L1462.78 1210.3 L1462.19 1210.3 L1461.61 1210.3 L1461.02 1210.3 L1460.43 1210.3 L1459.85 1210.3 L1459.26 1210.3 L1458.67 1210.3 L1458.09 1210.3 L1457.5 1210.3 L1456.91 1210.3 L1456.33 1210.3 L1455.74 1210.3 L1455.16 1210.3 L1454.57 1210.3 L1453.98 1210.3 L1453.4 1210.3 L1452.81 1210.3 L1452.22 1210.3 L1451.64 1210.3 L1451.05 1210.3 L1450.46 1210.3 L1449.88 1210.3 L1449.29 1210.3 L1448.7 1210.3 L1448.12 1210.3 L1447.53 1210.3 L1446.95 1210.3 L1446.36 1210.3 L1445.77 1210.3 L1445.19 1210.3 L1444.6 1210.3 L1444.01 1210.3 L1443.43 1210.3 L1442.84 1210.3 L1442.25 1210.3 L1441.67 1210.3 L1441.08 1210.3 L1440.5 1210.3 L1439.91 1210.3 L1439.32 1210.3 L1438.74 1210.3 L1438.15 1210.3 L1437.56 1210.3 L1436.98 1210.3 L1436.39 1210.3 L1435.8 1210.3 L1435.22 1210.3 L1434.63 1210.3 L1434.04 1210.3 L1433.46 1210.3 L1432.87 1210.3 L1432.29 1210.3 L1431.7 1210.3 L1431.11 1210.3 L1430.53 1210.3 L1429.94 1210.3 L1429.35 1210.3 L1428.77 1210.3 L1428.18 1210.3 L1427.59 1210.3 L1427.01 1210.3 L1426.42 1210.3 L1425.83 1210.3 L1425.25 1210.3 L1424.66 1210.3 L1424.08 1210.3 L1423.49 1210.3 L1422.9 1210.3 L1422.32 1210.3 L1421.73 1210.3 L1421.14 1210.3 L1420.56 1210.3 L1419.97 1210.3 L1419.38 1210.3 L1418.8 1210.3 L1418.21 1210.3 L1417.63 1210.3 L1417.04 1210.3 L1416.45 1210.3 L1415.87 1210.3 L1415.28 1210.3 L1414.69 1210.3 L1414.11 1210.3 L1413.52 1210.3 L1412.93 1210.3 L1412.35 1210.3 L1411.76 1210.3 L1411.17 1210.3 L1410.59 1210.3 L1410 1210.3 L1409.42 1210.3 L1408.83 1210.3 L1408.24 1210.3 L1407.66 1210.3 L1407.07 1210.3 L1406.48 1210.3 L1405.9 1210.3 L1405.31 1210.3 L1404.72 1210.3 L1404.14 1210.3 L1403.55 1210.3 L1402.96 1210.3 L1402.38 1210.3 L1401.79 1210.3 L1401.21 1210.3 L1400.62 1210.3 L1400.03 1210.3 L1399.45 1210.3 L1398.86 1210.3 L1398.27 1210.3 L1397.69 1210.3 L1397.1 1210.3 L1396.51 1210.3 L1395.93 1210.3 L1395.34 1210.3 L1394.75 1210.3 L1394.17 1210.3 L1393.58 1210.3 L1393 1210.3 L1392.41 1210.3 L1391.82 1210.3 L1391.24 1210.3 L1390.65 1210.3 L1390.06 1210.3 L1389.48 1210.3 L1388.89 1210.3 L1388.3 1210.3 L1387.72 1210.3 L1387.13 1210.3 L1386.55 1210.3 L1385.96 1210.3 L1385.37 1210.3 L1384.79 1210.3 L1384.2 1210.3 L1383.61 1210.3 L1383.03 1210.3 L1382.44 1210.3 L1381.85 1210.3 L1381.27 1210.3 L1380.68 1210.3 L1380.09 1210.3 L1379.51 1210.3 L1378.92 1210.3 L1378.34 1210.3 L1377.75 1210.3 L1377.16 1210.3 L1376.58 1210.3 L1375.99 1210.3 L1375.4 1210.3 L1374.82 1210.3 L1374.23 1210.3 L1373.64 1210.3 L1373.06 1210.3 L1372.47 1210.3 L1371.88 1210.3 L1371.3 1210.3 L1370.71 1210.3 L1370.13 1210.3 L1369.54 1210.3 L1368.95 1210.3 L1368.37 1210.3 L1367.78 1210.3 L1367.19 1210.3 L1366.61 1210.3 L1366.02 1210.3 L1365.43 1210.3 L1364.85 1210.3 L1364.26 1210.3 L1363.68 1210.3 L1363.09 1210.3 L1362.5 1210.3 L1361.92 1210.3 L1361.33 1210.3 L1360.74 1210.3 L1360.16 1210.3 L1359.57 1210.3 L1358.98 1210.3 L1358.4 1210.3 L1357.81 1210.3 L1357.22 1210.3 L1356.64 1210.3 L1356.05 1210.3 L1355.47 1210.3 L1354.88 1210.3 L1354.29 1210.3 L1353.71 1210.3 L1353.12 1210.3 L1352.53 1210.3 L1351.95 1210.3 L1351.36 1210.3 L1350.77 1210.3 L1350.19 1210.3 L1349.6 1210.3 L1349.01 1210.3 L1348.43 1210.3 L1347.84 1210.3 L1347.26 1210.3 L1346.67 1210.3 L1346.08 1210.3 L1345.5 1210.3 L1344.91 1210.3 L1344.32 1210.3 L1343.74 1210.3 L1343.15 1210.3 L1342.56 1210.3 L1341.98 1210.3 L1341.39 1210.3 L1340.8 1210.3 L1340.22 1210.3 L1339.63 1210.3 L1339.05 1210.3 L1338.46 1210.3 L1337.87 1210.3 L1337.29 1210.3 L1336.7 1210.3 L1336.11 1210.3 L1335.53 1210.3 L1334.94 1210.3 L1334.35 1210.3 L1333.77 1210.3 L1333.18 1210.3 L1332.6 1210.3 L1332.01 1210.3 L1331.42 1210.3 L1330.84 1210.3 L1330.25 1210.3 L1329.66 1210.3 L1329.08 1210.3 L1328.49 1210.3 L1327.9 1210.3 L1327.32 1210.3 L1326.73 1210.3 L1326.14 1210.3 L1325.56 1210.3 L1324.97 1210.3 L1324.39 1210.3 L1323.8 1210.3 L1323.21 1210.3 L1322.63 1210.3 L1322.04 1210.3 L1321.45 1210.3 L1320.87 1210.3 L1320.28 1210.3 L1319.69 1210.3 L1319.11 1210.3 L1318.52 1210.3 L1317.93 1210.3 L1317.35 1210.3 L1316.76 1210.3 L1316.18 1210.3 L1315.59 1210.3 L1315 1210.3 L1314.42 1210.3 L1313.83 1210.3 L1313.24 1210.3 L1312.66 1210.3 L1312.07 1210.3 L1311.48 1210.3 L1310.9 1210.3 L1310.31 1210.3 L1309.73 1210.3 L1309.14 1210.3 L1308.55 1210.3 L1307.97 1210.3 L1307.38 1210.3 L1306.79 1210.3 L1306.21 1210.3 L1305.62 1210.3 L1305.03 1210.3 L1304.45 1210.3 L1303.86 1210.3 L1303.27 1210.3 L1302.69 1210.3 L1302.1 1210.3 L1301.52 1210.3 L1300.93 1210.3 L1300.34 1210.3 L1299.76 1210.3 L1299.17 1210.3 L1298.58 1210.3 L1298 1210.3 L1297.41 1210.3 L1296.82 1210.3 L1296.24 1210.3 L1295.65 1210.3 L1295.06 1210.3 L1294.48 1210.3 L1293.89 1210.3 L1293.31 1210.3 L1292.72 1210.3 L1292.13 1210.3 L1291.55 1210.3 L1290.96 1210.3 L1290.37 1210.3 L1289.79 1210.3 L1289.2 1210.3 L1288.61 1210.3 L1288.03 1210.3 L1287.44 1210.3 L1286.86 1210.3 L1286.27 1210.3 L1285.68 1210.3 L1285.1 1210.3 L1284.51 1210.3 L1283.92 1210.3 L1283.34 1210.3 L1282.75 1210.3 L1282.16 1210.3 L1281.58 1210.3 L1280.99 1210.3 L1280.4 1210.3 L1279.82 1210.3 L1279.23 1210.3 L1278.65 1210.3 L1278.06 1210.3 L1277.47 1210.3 L1276.89 1210.3 L1276.3 1210.3 L1275.71 1210.3 L1275.13 1210.3 L1274.54 1210.3 L1273.95 1210.3 L1273.37 1210.3 L1272.78 1210.3 L1272.19 1210.3 L1271.61 1210.3 L1271.02 1210.3 L1270.44 1210.3 L1269.85 1210.3 L1269.26 1210.3 L1268.68 1210.3 L1268.09 1210.3 L1267.5 1210.3 L1266.92 1210.3 L1266.33 1210.3 L1265.74 1210.3 L1265.16 1210.3 L1264.57 1210.3 L1263.98 1210.3 L1263.4 1210.3 L1262.81 1210.3 L1262.23 1210.3 L1261.64 1210.3 L1261.05 1210.3 L1260.47 1210.3 L1259.88 1210.3 L1259.29 1210.3 L1258.71 1210.3 L1258.12 1210.3 L1257.53 1210.3 L1256.95 1210.3 L1256.36 1210.3 L1255.78 1210.3 L1255.19 1210.3 L1254.6 1210.3 L1254.02 1210.3 L1253.43 1210.3 L1252.84 1210.3 L1252.26 1210.3 L1251.67 1210.3 L1251.08 1210.3 L1250.5 1210.3 L1249.91 1210.3 L1249.32 1210.3 L1248.74 1210.3 L1248.15 1210.3 L1247.57 1210.3 L1246.98 1210.3 L1246.39 1210.3 L1245.81 1210.3 L1245.22 1210.3 L1244.63 1210.3 L1244.05 1210.3 L1243.46 1210.3 L1242.87 1210.3 L1242.29 1210.3 L1241.7 1210.3 L1241.11 1210.3 L1240.53 1210.3 L1239.94 1210.3 L1239.36 1210.3 L1238.77 1210.3 L1238.18 1210.3 L1237.6 1210.3 L1237.01 1210.3 L1236.42 1210.3 L1235.84 1210.3 L1235.25 1210.3 L1234.66 1210.3 L1234.08 1210.3 L1233.49 1210.3 L1232.91 1210.3 L1232.32 1210.3 L1231.73 1210.3 L1231.15 1210.3 L1230.56 1210.3 L1229.97 1210.3 L1229.39 1210.3 L1228.8 1210.3 L1228.21 1210.3 L1227.63 1210.3 L1227.04 1210.3 L1226.45 1210.3 L1225.87 1210.3 L1225.28 1210.3 L1224.7 1210.3 L1224.11 1210.3 L1223.52 1210.3 L1222.94 1210.3 L1222.35 1210.3 L1221.76 1210.3 L1221.18 1210.3 L1220.59 1210.3 L1220 1210.3 L1219.42 1210.3 L1218.83 1210.3 L1218.24 1210.3 L1217.66 1210.3 L1217.07 1210.3 L1216.49 1210.3 L1215.9 1210.3 L1215.31 1210.3 L1214.73 1210.3 L1214.14 1210.3 L1213.55 1210.3 L1212.97 1210.3 L1212.38 1210.3 L1211.79 1210.3 L1211.21 1210.3 L1210.62 1210.3 L1210.03 1210.3 L1209.45 1210.3 L1208.86 1210.3 L1208.28 1210.3 L1207.69 1210.3 L1207.1 1210.3 L1206.52 1210.3 L1205.93 1210.3 L1205.34 1210.3 L1204.76 1210.3 L1204.17 1210.3 L1203.58 1210.3 L1203 1210.3 L1202.41 1210.3 L1201.83 1210.3 L1201.24 1210.3 L1200.65 1210.3 L1200.07 1210.3 L1199.48 1210.3 L1198.89 1210.3 L1198.31 1210.3 L1197.72 1210.3 L1197.13 1210.3 L1196.55 1210.3 L1195.96 1210.3 L1195.37 1210.3 L1194.79 1210.3 L1194.2 1210.3 L1193.62 1210.3 L1193.03 1210.3 L1192.44 1210.3 L1191.86 1210.3 L1191.27 1210.3 L1190.68 1210.3 L1190.1 1210.3 L1189.51 1210.3 L1188.92 1210.3 L1188.34 1210.3 L1187.75 1210.3 L1187.16 1210.3 L1186.58 1210.3 L1185.99 1210.3 L1185.41 1210.3 L1184.82 1210.3 L1184.23 1210.3 L1183.65 1210.3 L1183.06 1210.3 L1182.47 1210.3 L1181.89 1210.3 L1181.3 1210.3 L1180.71 1210.3 L1180.13 1210.3 L1179.54 1210.3 L1178.96 1210.3 L1178.37 1210.3 L1177.78 1210.3 L1177.2 1210.3 L1176.61 1210.3 L1176.02 1210.3 L1175.44 1210.3 L1174.85 1210.3 L1174.26 1210.3 L1173.68 1210.3 L1173.09 1210.3 L1172.5 1210.3 L1171.92 1210.3 L1171.33 1210.3 L1170.75 1210.3 L1170.16 1210.3 L1169.57 1210.3 L1168.99 1210.3 L1168.4 1210.3 L1167.81 1210.3 L1167.23 1210.3 L1166.64 1210.3 L1166.05 1210.3 L1165.47 1210.3 L1164.88 1210.3 L1164.29 1210.3 L1163.71 1210.3 L1163.12 1210.3 L1162.54 1210.3 L1161.95 1210.3 L1161.36 1210.3 L1160.78 1210.3 L1160.19 1210.3 L1159.6 1210.3 L1159.02 1210.3 L1158.43 1210.3 L1157.84 1210.3 L1157.26 1210.3 L1156.67 1210.3 L1156.09 1210.3 L1155.5 1210.3 L1154.91 1210.3 L1154.33 1210.3 L1153.74 1210.3 L1153.15 1210.3 L1152.57 1210.3 L1151.98 1210.3 L1151.39 1210.3 L1150.81 1210.3 L1150.22 1210.3 L1149.63 1210.3 L1149.05 1210.3 L1148.46 1210.3 L1147.88 1210.3 L1147.29 1210.3 L1146.7 1210.3 L1146.12 1210.3 L1145.53 1210.3 L1144.94 1210.3 L1144.36 1210.3 L1143.77 1210.3 L1143.18 1210.3 L1142.6 1210.3 L1142.01 1210.3 L1141.42 1210.3 L1140.84 1210.3 L1140.25 1210.3 L1139.67 1210.3 L1139.08 1210.3 L1138.49 1210.3 L1137.91 1210.3 L1137.32 1210.3 L1136.73 1210.3 L1136.15 1210.3 L1135.56 1210.3 L1134.97 1210.3 L1134.39 1210.3 L1133.8 1210.3 L1133.21 1210.3 L1132.63 1210.3 L1132.04 1210.3 L1131.46 1210.3 L1130.87 1210.3 L1130.28 1210.3 L1129.7 1210.3 L1129.11 1210.3 L1128.52 1210.3 L1127.94 1210.3 L1127.35 1210.3 L1126.76 1210.3 L1126.18 1210.3 L1125.59 1210.3 L1125.01 1210.3 L1124.42 1210.3 L1123.83 1210.3 L1123.25 1210.3 L1122.66 1210.3 L1122.07 1210.3 L1121.49 1210.3 L1120.9 1210.3 L1120.31 1210.3 L1119.73 1210.3 L1119.14 1210.3 L1118.55 1210.3 L1117.97 1210.3 L1117.38 1210.3 L1116.8 1210.3 L1116.21 1210.3 L1115.62 1210.3 L1115.04 1210.3 L1114.45 1210.3 L1113.86 1210.3 L1113.28 1210.3 L1112.69 1210.3 L1112.1 1210.3 L1111.52 1210.3 L1110.93 1210.3 L1110.34 1210.3 L1109.76 1210.3 L1109.17 1210.3 L1108.59 1210.3 L1108 1210.3 L1107.41 1210.3 L1106.83 1210.3 L1106.24 1210.3 L1105.65 1210.3 L1105.07 1210.3 L1104.48 1210.3 L1103.89 1210.3 L1103.31 1210.3 L1102.72 1210.3 L1102.14 1210.3 L1101.55 1210.3 L1100.96 1210.3 L1100.38 1210.3 L1099.79 1210.3 L1099.2 1210.3 L1098.62 1210.3 L1098.03 1210.3 L1097.44 1210.3 L1096.86 1210.3 L1096.27 1210.3 L1095.68 1210.3 L1095.1 1210.3 L1094.51 1210.3 L1093.93 1210.3 L1093.34 1210.3 L1092.75 1210.3 L1092.17 1210.3 L1091.58 1210.3 L1090.99 1210.3 L1090.41 1210.3 L1089.82 1210.3 L1089.23 1210.3 L1088.65 1210.3 L1088.06 1210.3 L1087.47 1210.3 L1086.89 1210.3 L1086.3 1210.3 L1085.72 1210.3 L1085.13 1210.3 L1084.54 1210.3 L1083.96 1210.3 L1083.37 1210.3 L1082.78 1210.3 L1082.2 1210.3 L1081.61 1210.3 L1081.02 1210.3 L1080.44 1210.3 L1079.85 1210.3 L1079.26 1210.3 L1078.68 1210.3 L1078.09 1210.3 L1077.51 1210.3 L1076.92 1210.3 L1076.33 1210.3 L1075.75 1210.3 L1075.16 1210.3 L1074.57 1210.3 L1073.99 1210.3 L1073.4 1210.3 L1072.81 1210.3 L1072.23 1210.3 L1071.64 1210.3 L1071.06 1210.3 L1070.47 1210.3 L1069.88 1210.3 L1069.3 1210.3 L1068.71 1210.3 L1068.12 1210.3 L1067.54 1210.3 L1066.95 1210.3 L1066.36 1210.3 L1065.78 1210.3 L1065.19 1210.3 L1064.6 1210.3 L1064.02 1210.3 L1063.43 1210.3 L1062.85 1210.3 L1062.26 1210.3 L1061.67 1210.3 L1061.09 1210.3 L1060.5 1210.3 L1059.91 1210.3 L1059.33 1210.3 L1058.74 1210.3 L1058.15 1210.3 L1057.57 1210.3 L1056.98 1210.3 L1056.39 1210.3 L1055.81 1210.3 L1055.22 1210.3 L1054.64 1210.3 L1054.05 1210.3 L1053.46 1210.3 L1052.88 1210.3 L1052.29 1210.3 L1051.7 1210.3 L1051.12 1210.3 L1050.53 1210.3 L1049.94 1210.3 L1049.36 1210.3 L1048.77 1210.3 L1048.19 1210.3 L1047.6 1210.3 L1047.01 1210.3 L1046.43 1210.3 L1045.84 1210.3 L1045.25 1210.3 L1044.67 1210.3 L1044.08 1210.3 L1043.49 1210.3 L1042.91 1210.3 L1042.32 1210.3 L1041.73 1210.3 L1041.15 1210.3 L1040.56 1210.3 L1039.98 1210.3 L1039.39 1210.3 L1038.8 1210.3 L1038.22 1210.3 L1037.63 1210.3 L1037.04 1210.3 L1036.46 1210.3 L1035.87 1210.3 L1035.28 1210.3 L1034.7 1210.3 L1034.11 1210.3 L1033.52 1210.3 L1032.94 1210.3 L1032.35 1210.3 L1031.77 1210.3 L1031.18 1210.3 L1030.59 1210.3 L1030.01 1210.3 L1029.42 1210.3 L1028.83 1210.3 L1028.25 1210.3 L1027.66 1210.3 L1027.07 1210.3 L1026.49 1210.3 L1025.9 1210.3 L1025.32 1210.3 L1024.73 1210.3 L1024.14 1210.3 L1023.56 1210.3 L1022.97 1210.3 L1022.38 1210.3 L1021.8 1210.3 L1021.21 1210.3 L1020.62 1210.3 L1020.04 1210.3 L1019.45 1210.3 L1018.86 1210.3 L1018.28 1210.3 L1017.69 1210.3 L1017.11 1210.3 L1016.52 1210.3 L1015.93 1210.3 L1015.35 1210.3 L1014.76 1210.3 L1014.17 1210.3 L1013.59 1210.3 L1013 1210.3 L1012.41 1210.3 L1011.83 1210.3 L1011.24 1210.3 L1010.65 1210.3 L1010.07 1210.3 L1009.48 1210.3 L1008.9 1210.3 L1008.31 1210.3 L1007.72 1210.3 L1007.14 1210.3 L1006.55 1210.3 L1005.96 1210.3 L1005.38 1210.3 L1004.79 1210.3 L1004.2 1210.3 L1003.62 1210.3 L1003.03 1210.3 L1002.44 1210.3 L1001.86 1210.3 L1001.27 1210.3 L1000.69 1210.3 L1000.1 1210.3 L999.513 1210.3 L998.926 1210.3 L998.34 1210.3 L997.754 1210.3 L997.167 1210.3 L996.581 1210.3 L995.994 1210.3 L995.408 1210.3 L994.822 1210.3 L994.235 1210.3 L993.649 1210.3 L993.062 1210.3 L992.476 1210.3 L991.889 1210.3 L991.303 1210.3 L990.717 1210.3 L990.13 1210.3 L989.544 1210.3 L988.957 1210.3 L988.371 1210.3 L987.785 1210.3 L987.198 1210.3 L986.612 1210.3 L986.025 1210.3  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.4 986.612,1210.4 987.198,1210.4 987.785,1210.4 988.371,1210.4 988.957,1210.4 989.544,1210.4 990.13,1210.4 990.717,1210.4 991.303,1210.4 991.889,1210.4 992.476,1210.4 993.062,1210.4 993.649,1210.4 994.235,1210.4 994.822,1210.4 995.408,1210.4 995.994,1210.4 996.581,1210.4 997.167,1210.4 997.754,1210.4 998.34,1210.4 998.926,1210.4 999.513,1210.4 1000.1,1210.4 1000.69,1210.4 1001.27,1210.4 1001.86,1210.4 1002.44,1210.4 1003.03,1210.4 1003.62,1210.4 1004.2,1210.4 1004.79,1210.4 1005.38,1210.4 1005.96,1210.4 1006.55,1210.4 1007.14,1210.4 1007.72,1210.4 1008.31,1210.4 1008.9,1210.4 1009.48,1210.4 1010.07,1210.4 1010.65,1210.4 1011.24,1210.4 1011.83,1210.4 1012.41,1210.4 1013,1210.4 1013.59,1210.4 1014.17,1210.4 1014.76,1210.4 1015.35,1210.4 1015.93,1210.4 1016.52,1210.4 1017.11,1210.4 1017.69,1210.4 1018.28,1210.4 1018.86,1210.4 1019.45,1210.4 1020.04,1210.4 1020.62,1210.4 1021.21,1210.4 1021.8,1210.4 1022.38,1210.4 1022.97,1210.4 1023.56,1210.4 1024.14,1210.4 1024.73,1210.4 1025.32,1210.4 1025.9,1210.4 1026.49,1210.4 1027.07,1210.4 1027.66,1210.4 1028.25,1210.4 1028.83,1210.4 1029.42,1210.4 1030.01,1210.4 1030.59,1210.4 1031.18,1210.4 1031.77,1210.4 1032.35,1210.4 1032.94,1210.4 1033.52,1210.4 1034.11,1210.4 1034.7,1210.4 1035.28,1210.4 1035.87,1210.4 1036.46,1210.4 1037.04,1210.4 1037.63,1210.4 1038.22,1210.4 1038.8,1210.4 1039.39,1210.4 1039.98,1210.4 1040.56,1210.4 1041.15,1210.4 1041.73,1210.4 1042.32,1210.4 1042.91,1210.4 1043.49,1210.4 1044.08,1210.4 1044.67,1210.4 1045.25,1210.4 1045.84,1210.4 1046.43,1210.4 1047.01,1210.4 1047.6,1210.4 1048.19,1210.4 1048.77,1210.4 1049.36,1210.4 1049.94,1210.4 1050.53,1210.4 1051.12,1210.4 1051.7,1210.4 1052.29,1210.4 1052.88,1210.4 1053.46,1210.4 1054.05,1210.4 1054.64,1210.4 1055.22,1210.4 1055.81,1210.4 1056.39,1210.4 1056.98,1210.4 1057.57,1210.4 1058.15,1210.4 1058.74,1210.4 1059.33,1210.4 1059.91,1210.4 1060.5,1210.4 1061.09,1210.4 1061.67,1210.4 1062.26,1210.4 1062.85,1210.4 1063.43,1210.4 1064.02,1210.4 1064.6,1210.4 1065.19,1210.4 1065.78,1210.4 1066.36,1210.4 1066.95,1210.4 1067.54,1210.4 1068.12,1210.4 1068.71,1210.4 1069.3,1210.4 1069.88,1210.4 1070.47,1210.4 1071.06,1210.4 1071.64,1210.4 1072.23,1210.4 1072.81,1210.4 1073.4,1210.4 1073.99,1210.4 1074.57,1210.4 1075.16,1210.4 1075.75,1210.4 1076.33,1210.4 1076.92,1210.4 1077.51,1210.4 1078.09,1210.4 1078.68,1210.4 1079.26,1210.4 1079.85,1210.4 1080.44,1210.4 1081.02,1210.4 1081.61,1210.4 1082.2,1210.4 1082.78,1210.4 1083.37,1210.4 1083.96,1210.4 1084.54,1210.4 1085.13,1210.4 1085.72,1210.4 1086.3,1210.4 1086.89,1210.4 1087.47,1210.4 1088.06,1210.4 1088.65,1210.4 1089.23,1210.4 1089.82,1210.4 1090.41,1210.4 1090.99,1210.4 1091.58,1210.4 1092.17,1210.4 1092.75,1210.4 1093.34,1210.4 1093.93,1210.4 1094.51,1210.4 1095.1,1210.4 1095.68,1210.4 1096.27,1210.4 1096.86,1210.4 1097.44,1210.4 1098.03,1210.4 1098.62,1210.4 1099.2,1210.4 1099.79,1210.4 1100.38,1210.4 1100.96,1210.4 1101.55,1210.4 1102.14,1210.4 1102.72,1210.4 1103.31,1210.4 1103.89,1210.4 1104.48,1210.4 1105.07,1210.4 1105.65,1210.4 1106.24,1210.4 1106.83,1210.4 1107.41,1210.4 1108,1210.4 1108.59,1210.4 1109.17,1210.4 1109.76,1210.4 1110.34,1210.4 1110.93,1210.4 1111.52,1210.4 1112.1,1210.4 1112.69,1210.4 1113.28,1210.4 1113.86,1210.4 1114.45,1210.4 1115.04,1210.4 1115.62,1210.4 1116.21,1210.4 1116.8,1210.4 1117.38,1210.4 1117.97,1210.4 1118.55,1210.4 1119.14,1210.4 1119.73,1210.4 1120.31,1210.4 1120.9,1210.4 1121.49,1210.4 1122.07,1210.4 1122.66,1210.4 1123.25,1210.4 1123.83,1210.4 1124.42,1210.4 1125.01,1210.4 1125.59,1210.4 1126.18,1210.4 1126.76,1210.4 1127.35,1210.4 1127.94,1210.4 1128.52,1210.4 1129.11,1210.4 1129.7,1210.4 1130.28,1210.4 1130.87,1210.4 1131.46,1210.4 1132.04,1210.4 1132.63,1210.4 1133.21,1210.4 1133.8,1210.4 1134.39,1210.4 1134.97,1210.4 1135.56,1210.4 1136.15,1210.4 1136.73,1210.4 1137.32,1210.4 1137.91,1210.4 1138.49,1210.4 1139.08,1210.4 1139.67,1210.4 1140.25,1210.4 1140.84,1210.4 1141.42,1210.4 1142.01,1210.4 1142.6,1210.4 1143.18,1210.4 1143.77,1210.4 1144.36,1210.4 1144.94,1210.4 1145.53,1210.4 1146.12,1210.4 1146.7,1210.4 1147.29,1210.4 1147.88,1210.4 1148.46,1210.4 1149.05,1210.4 1149.63,1210.4 1150.22,1210.4 1150.81,1210.4 1151.39,1210.4 1151.98,1210.4 1152.57,1210.4 1153.15,1210.4 1153.74,1210.4 1154.33,1210.4 1154.91,1210.4 1155.5,1210.4 1156.09,1210.4 1156.67,1210.4 1157.26,1210.4 1157.84,1210.4 1158.43,1210.4 1159.02,1210.4 1159.6,1210.4 1160.19,1210.4 1160.78,1210.4 1161.36,1210.4 1161.95,1210.4 1162.54,1210.4 1163.12,1210.4 1163.71,1210.4 1164.29,1210.4 1164.88,1210.4 1165.47,1210.4 1166.05,1210.4 1166.64,1210.4 1167.23,1210.4 1167.81,1210.4 1168.4,1210.4 1168.99,1210.4 1169.57,1210.4 1170.16,1210.4 1170.75,1210.4 1171.33,1210.4 1171.92,1210.4 1172.5,1210.4 1173.09,1210.4 1173.68,1210.4 1174.26,1210.4 1174.85,1210.4 1175.44,1210.4 1176.02,1210.4 1176.61,1210.4 1177.2,1210.4 1177.78,1210.4 1178.37,1210.4 1178.96,1210.4 1179.54,1210.4 1180.13,1210.4 1180.71,1210.4 1181.3,1210.4 1181.89,1210.4 1182.47,1210.4 1183.06,1210.4 1183.65,1210.4 1184.23,1210.4 1184.82,1210.4 1185.41,1210.4 1185.99,1210.4 1186.58,1210.4 1187.16,1210.4 1187.75,1210.4 1188.34,1210.4 1188.92,1210.4 1189.51,1210.4 1190.1,1210.4 1190.68,1210.4 1191.27,1210.4 1191.86,1210.4 1192.44,1210.4 1193.03,1210.4 1193.62,1210.4 1194.2,1210.4 1194.79,1210.4 1195.37,1210.4 1195.96,1210.4 1196.55,1210.4 1197.13,1210.4 1197.72,1210.4 1198.31,1210.4 1198.89,1210.4 1199.48,1210.4 1200.07,1210.4 1200.65,1210.4 1201.24,1210.4 1201.83,1210.4 1202.41,1210.4 1203,1210.4 1203.58,1210.4 1204.17,1210.4 1204.76,1210.4 1205.34,1210.4 1205.93,1210.4 1206.52,1210.4 1207.1,1210.4 1207.69,1210.4 1208.28,1210.4 1208.86,1210.4 1209.45,1210.4 1210.03,1210.4 1210.62,1210.4 1211.21,1210.4 1211.79,1210.4 1212.38,1210.4 1212.97,1210.4 1213.55,1210.4 1214.14,1210.4 1214.73,1210.4 1215.31,1210.4 1215.9,1210.4 1216.49,1210.4 1217.07,1210.4 1217.66,1210.4 1218.24,1210.4 1218.83,1210.4 1219.42,1210.4 1220,1210.4 1220.59,1210.4 1221.18,1210.4 1221.76,1210.4 1222.35,1210.4 1222.94,1210.4 1223.52,1210.4 1224.11,1210.4 1224.7,1210.4 1225.28,1210.4 1225.87,1210.4 1226.45,1210.4 1227.04,1210.4 1227.63,1210.4 1228.21,1210.4 1228.8,1210.4 1229.39,1210.4 1229.97,1210.4 1230.56,1210.4 1231.15,1210.4 1231.73,1210.4 1232.32,1210.4 1232.91,1210.4 1233.49,1210.4 1234.08,1210.4 1234.66,1210.4 1235.25,1210.4 1235.84,1210.4 1236.42,1210.4 1237.01,1210.4 1237.6,1210.4 1238.18,1210.4 1238.77,1210.4 1239.36,1210.4 1239.94,1210.4 1240.53,1210.4 1241.11,1210.4 1241.7,1210.4 1242.29,1210.4 1242.87,1210.4 1243.46,1210.4 1244.05,1210.4 1244.63,1210.4 1245.22,1210.4 1245.81,1210.4 1246.39,1210.4 1246.98,1210.4 1247.57,1210.4 1248.15,1210.4 1248.74,1210.4 1249.32,1210.4 1249.91,1210.4 1250.5,1210.4 1251.08,1210.4 1251.67,1210.4 1252.26,1210.4 1252.84,1210.4 1253.43,1210.4 1254.02,1210.4 1254.6,1210.4 1255.19,1210.4 1255.78,1210.4 1256.36,1210.4 1256.95,1210.4 1257.53,1210.4 1258.12,1210.4 1258.71,1210.4 1259.29,1210.4 1259.88,1210.4 1260.47,1210.4 1261.05,1210.4 1261.64,1210.4 1262.23,1210.4 1262.81,1210.4 1263.4,1210.4 1263.98,1210.4 1264.57,1210.4 1265.16,1210.4 1265.74,1210.4 1266.33,1210.4 1266.92,1210.4 1267.5,1210.4 1268.09,1210.4 1268.68,1210.4 1269.26,1210.4 1269.85,1210.4 1270.44,1210.4 1271.02,1210.4 1271.61,1210.4 1272.19,1210.4 1272.78,1210.4 1273.37,1210.4 1273.95,1210.4 1274.54,1210.4 1275.13,1210.4 1275.71,1210.4 1276.3,1210.4 1276.89,1210.4 1277.47,1210.4 1278.06,1210.4 1278.65,1210.4 1279.23,1210.4 1279.82,1210.4 1280.4,1210.4 1280.99,1210.4 1281.58,1210.4 1282.16,1210.4 1282.75,1210.4 1283.34,1210.4 1283.92,1210.4 1284.51,1210.4 1285.1,1210.4 1285.68,1210.4 1286.27,1210.4 1286.86,1210.4 1287.44,1210.4 1288.03,1210.4 1288.61,1210.4 1289.2,1210.4 1289.79,1210.4 1290.37,1210.4 1290.96,1210.4 1291.55,1210.4 1292.13,1210.4 1292.72,1210.4 1293.31,1210.4 1293.89,1210.4 1294.48,1210.4 1295.06,1210.4 1295.65,1210.4 1296.24,1210.4 1296.82,1210.4 1297.41,1210.4 1298,1210.4 1298.58,1210.4 1299.17,1210.4 1299.76,1210.4 1300.34,1210.4 1300.93,1210.4 1301.52,1210.4 1302.1,1210.4 1302.69,1210.4 1303.27,1210.4 1303.86,1210.4 1304.45,1210.4 1305.03,1210.4 1305.62,1210.4 1306.21,1210.4 1306.79,1210.4 1307.38,1210.4 1307.97,1210.4 1308.55,1210.4 1309.14,1210.4 1309.73,1210.4 1310.31,1210.4 1310.9,1210.4 1311.48,1210.4 1312.07,1210.4 1312.66,1210.4 1313.24,1210.4 1313.83,1210.4 1314.42,1210.4 1315,1210.4 1315.59,1210.4 1316.18,1210.4 1316.76,1210.4 1317.35,1210.4 1317.93,1210.4 1318.52,1210.4 1319.11,1210.4 1319.69,1210.4 1320.28,1210.4 1320.87,1210.4 1321.45,1210.4 1322.04,1210.4 1322.63,1210.4 1323.21,1210.4 1323.8,1210.4 1324.39,1210.4 1324.97,1210.4 1325.56,1210.4 1326.14,1210.4 1326.73,1210.4 1327.32,1210.4 1327.9,1210.4 1328.49,1210.4 1329.08,1210.4 1329.66,1210.4 1330.25,1210.4 1330.84,1210.4 1331.42,1210.4 1332.01,1210.4 1332.6,1210.4 1333.18,1210.4 1333.77,1210.4 1334.35,1210.4 1334.94,1210.4 1335.53,1210.4 1336.11,1210.4 1336.7,1210.4 1337.29,1210.4 1337.87,1210.4 1338.46,1210.4 1339.05,1210.4 1339.63,1210.4 1340.22,1210.4 1340.8,1210.4 1341.39,1210.4 1341.98,1210.4 1342.56,1210.4 1343.15,1210.4 1343.74,1210.4 1344.32,1210.4 1344.91,1210.4 1345.5,1210.4 1346.08,1210.4 1346.67,1210.4 1347.26,1210.4 1347.84,1210.4 1348.43,1210.4 1349.01,1210.4 1349.6,1210.4 1350.19,1210.4 1350.77,1210.4 1351.36,1210.4 1351.95,1210.4 1352.53,1210.4 1353.12,1210.4 1353.71,1210.4 1354.29,1210.4 1354.88,1210.4 1355.47,1210.4 1356.05,1210.4 1356.64,1210.4 1357.22,1210.4 1357.81,1210.4 1358.4,1210.4 1358.98,1210.4 1359.57,1210.4 1360.16,1210.4 1360.74,1210.4 1361.33,1210.4 1361.92,1210.4 1362.5,1210.4 1363.09,1210.4 1363.68,1210.4 1364.26,1210.4 1364.85,1210.4 1365.43,1210.4 1366.02,1210.4 1366.61,1210.4 1367.19,1210.4 1367.78,1210.4 1368.37,1210.4 1368.95,1210.4 1369.54,1210.4 1370.13,1210.4 1370.71,1210.4 1371.3,1210.4 1371.88,1210.4 1372.47,1210.4 1373.06,1210.4 1373.64,1210.4 1374.23,1210.4 1374.82,1210.4 1375.4,1210.4 1375.99,1210.4 1376.58,1210.4 1377.16,1210.4 1377.75,1210.4 1378.34,1210.4 1378.92,1210.4 1379.51,1210.4 1380.09,1210.4 1380.68,1210.4 1381.27,1210.4 1381.85,1210.4 1382.44,1210.4 1383.03,1210.4 1383.61,1210.4 1384.2,1210.4 1384.79,1210.4 1385.37,1210.4 1385.96,1210.4 1386.55,1210.4 1387.13,1210.4 1387.72,1210.4 1388.3,1210.4 1388.89,1210.4 1389.48,1210.4 1390.06,1210.4 1390.65,1210.4 1391.24,1210.4 1391.82,1210.4 1392.41,1210.4 1393,1210.4 1393.58,1210.4 1394.17,1210.4 1394.75,1210.4 1395.34,1210.4 1395.93,1210.4 1396.51,1210.4 1397.1,1210.4 1397.69,1210.4 1398.27,1210.4 1398.86,1210.4 1399.45,1210.4 1400.03,1210.4 1400.62,1210.4 1401.21,1210.4 1401.79,1210.4 1402.38,1210.4 1402.96,1210.4 1403.55,1210.4 1404.14,1210.4 1404.72,1210.4 1405.31,1210.4 1405.9,1210.4 1406.48,1210.4 1407.07,1210.4 1407.66,1210.4 1408.24,1210.4 1408.83,1210.4 1409.42,1210.4 1410,1210.4 1410.59,1210.4 1411.17,1210.4 1411.76,1210.4 1412.35,1210.4 1412.93,1210.4 1413.52,1210.4 1414.11,1210.4 1414.69,1210.4 1415.28,1210.4 1415.87,1210.4 1416.45,1210.4 1417.04,1210.4 1417.63,1210.4 1418.21,1210.4 1418.8,1210.4 1419.38,1210.4 1419.97,1210.4 1420.56,1210.4 1421.14,1210.4 1421.73,1210.4 1422.32,1210.4 1422.9,1210.4 1423.49,1210.4 1424.08,1210.4 1424.66,1210.4 1425.25,1210.4 1425.83,1210.4 1426.42,1210.4 1427.01,1210.4 1427.59,1210.4 1428.18,1210.4 1428.77,1210.4 1429.35,1210.4 1429.94,1210.4 1430.53,1210.4 1431.11,1210.4 1431.7,1210.4 1432.29,1210.4 1432.87,1210.4 1433.46,1210.4 1434.04,1210.4 1434.63,1210.4 1435.22,1210.4 1435.8,1210.4 1436.39,1210.4 1436.98,1210.4 1437.56,1210.4 1438.15,1210.4 1438.74,1210.4 1439.32,1210.4 1439.91,1210.4 1440.5,1210.4 1441.08,1210.4 1441.67,1210.4 1442.25,1210.4 1442.84,1210.4 1443.43,1210.4 1444.01,1210.4 1444.6,1210.4 1445.19,1210.4 1445.77,1210.4 1446.36,1210.4 1446.95,1210.4 1447.53,1210.4 1448.12,1210.4 1448.7,1210.4 1449.29,1210.4 1449.88,1210.4 1450.46,1210.4 1451.05,1210.4 1451.64,1210.4 1452.22,1210.4 1452.81,1210.4 1453.4,1210.4 1453.98,1210.4 1454.57,1210.4 1455.16,1210.4 1455.74,1210.4 1456.33,1210.4 1456.91,1210.4 1457.5,1210.4 1458.09,1210.4 1458.67,1210.4 1459.26,1210.4 1459.85,1210.4 1460.43,1210.4 1461.02,1210.4 1461.61,1210.4 1462.19,1210.4 1462.78,1210.4 1463.37,1210.4 1463.95,1210.4 1464.54,1210.4 1465.12,1210.4 1465.71,1210.4 1466.3,1210.4 1466.88,1210.4 1467.47,1210.4 1468.06,1210.4 1468.64,1210.4 1469.23,1210.4 1469.82,1210.4 1470.4,1210.4 1470.99,1210.4 1471.57,1210.4 1472.16,1210.4 1472.75,1210.4 1473.33,1210.4 1473.92,1210.4 1474.51,1210.4 1475.09,1210.4 1475.68,1210.4 1476.27,1210.4 1476.85,1210.4 1477.44,1210.4 1478.03,1210.4 1478.61,1210.4 1479.2,1210.4 1479.78,1210.4 1480.37,1210.4 1480.96,1210.4 1481.54,1210.4 1482.13,1210.4 1482.72,1210.4 1483.3,1210.4 1483.89,1210.4 1484.48,1210.4 1485.06,1210.4 1485.65,1210.4 1486.24,1210.4 1486.82,1210.4 1487.41,1210.4 1487.99,1210.4 1488.58,1210.4 1489.17,1210.4 1489.75,1210.4 1490.34,1210.4 1490.93,1210.4 1491.51,1210.4 1492.1,1210.4 1492.69,1210.4 1493.27,1210.4 1493.86,1210.4 1494.45,1210.4 1495.03,1210.4 1495.62,1210.4 1496.2,1210.4 1496.79,1210.4 1497.38,1210.4 1497.96,1210.4 1498.55,1210.4 1499.14,1210.4 1499.72,1210.4 1500.31,1210.4 1500.9,1210.4 1501.48,1210.4 1502.07,1210.4 1502.65,1210.4 1503.24,1210.4 1503.83,1210.4 1504.41,1210.4 1505,1210.4 1505.59,1210.4 1506.17,1210.4 1506.76,1210.4 1507.35,1210.4 1507.93,1210.4 1508.52,1210.4 1509.11,1210.4 1509.69,1210.4 1510.28,1210.4 1510.86,1210.4 1511.45,1210.4 1512.04,1210.4 1512.62,1210.4 1513.21,1210.4 1513.8,1210.4 1514.38,1210.4 1514.97,1210.4 1515.56,1210.4 1516.14,1210.4 1516.73,1210.4 1517.32,1210.4 1517.9,1210.4 1518.49,1210.4 1519.07,1210.4 1519.66,1210.4 1520.25,1210.4 1520.83,1210.4 1521.42,1210.4 1522.01,1210.4 1522.59,1210.4 1523.18,1210.4 1523.77,1210.4 1524.35,1210.4 1524.94,1210.4 1525.52,1210.4 1526.11,1210.4 1526.7,1210.4 1527.28,1210.4 1527.87,1210.4 1528.46,1210.4 1529.04,1210.4 1529.63,1210.4 1530.22,1210.4 1530.8,1210.4 1531.39,1210.4 1531.98,1210.4 1532.56,1210.4 1533.15,1210.4 1533.73,1210.4 1534.32,1210.4 1534.91,1210.4 1535.49,1210.4 1536.08,1210.4 1536.67,1210.4 1537.25,1210.4 1537.84,1210.4 1538.43,1210.4 1539.01,1210.4 1539.6,1210.4 1540.19,1210.4 1540.77,1210.4 1541.36,1210.4 1541.94,1210.4 1542.53,1210.4 1543.12,1210.4 1543.7,1210.4 1544.29,1210.4 1544.88,1210.4 1545.46,1210.4 1546.05,1210.4 1546.64,1210.4 1547.22,1210.4 1547.81,1210.4 1548.4,1210.4 1548.98,1210.4 1549.57,1210.4 1550.15,1210.4 1550.74,1210.4 1551.33,1210.4 1551.91,1210.4 1552.5,1210.4 1553.09,1210.4 1553.67,1210.4 1554.26,1210.4 1554.85,1210.4 1555.43,1210.4 1556.02,1210.4 1556.6,1210.4 1557.19,1210.4 1557.78,1210.4 1558.36,1210.4 1558.95,1210.4 1559.54,1210.4 1560.12,1210.4 1560.71,1210.4 1561.3,1210.4 1561.88,1210.4 1562.47,1210.4 1563.06,1210.4 1563.64,1210.4 1564.23,1210.4 1564.81,1210.4 1565.4,1210.4 1565.99,1210.4 1566.57,1210.4 1567.16,1210.4 1567.75,1210.4 1568.33,1210.4 1568.92,1210.4 1569.51,1210.4 1570.09,1210.4 1570.68,1210.4 1571.27,1210.4 1571.85,1210.4 1572.44,1210.4 1573.02,1210.4 1573.61,1210.4 1574.2,1210.4 1574.78,1210.4 1575.37,1210.4 1575.96,1210.4 1576.54,1210.4 1577.13,1210.4 1577.72,1210.4 1578.3,1210.4 1578.89,1210.4 1579.47,1210.4 1580.06,1210.4 1580.65,1210.4 1581.23,1210.4 1581.82,1210.4 1582.41,1210.4 1582.99,1210.4 1583.58,1210.4 1584.17,1210.4 1584.75,1210.4 1585.34,1210.4 1585.93,1210.4 1586.51,1210.4 1587.1,1210.4 1587.68,1210.4 1588.27,1210.4 1588.86,1210.4 1589.44,1210.4 1590.03,1210.4 1590.62,1210.4 1591.2,1210.4 1591.79,1210.4 1592.38,1210.4 1592.96,1210.4 1593.55,1210.4 1594.14,1210.4 1594.72,1210.4 1595.31,1210.4 1595.89,1210.4 1596.48,1210.4 1597.07,1210.4 1597.65,1210.4 1598.24,1210.4 1598.83,1210.4 1599.41,1210.4 1600,1210.4 1600.59,1210.4 1601.17,1210.4 1601.76,1210.4 1602.34,1210.4 1602.93,1210.4 1603.52,1210.4 1604.1,1210.4 1604.69,1210.4 1605.28,1210.4 1605.86,1210.4 1606.45,1210.4 1607.04,1210.4 1607.62,1210.4 1608.21,1210.4 1608.8,1210.4 1609.38,1210.4 1609.97,1210.4 1610.55,1210.4 1611.14,1210.4 1611.73,1210.4 1612.31,1210.4 1612.9,1210.4 1613.49,1210.4 1614.07,1210.4 1614.66,1210.4 1615.25,1210.4 1615.83,1210.4 1616.42,1210.4 1617.01,1210.4 1617.59,1210.4 1618.18,1210.4 1618.76,1210.4 1619.35,1210.4 1619.94,1210.4 1620.52,1210.4 1621.11,1210.4 1621.7,1210.4 1622.28,1210.4 1622.87,1210.4 1623.46,1210.4 1624.04,1210.4 1624.63,1210.4 1625.22,1210.4 1625.8,1210.4 1626.39,1210.4 1626.97,1210.4 1627.56,1210.4 1628.15,1210.4 1628.73,1210.4 1629.32,1210.4 1629.91,1210.4 1630.49,1210.4 1631.08,1210.4 1631.67,1210.4 1632.25,1210.4 1632.84,1210.4 1633.42,1210.4 1634.01,1210.4 1634.6,1210.4 1635.18,1210.4 1635.77,1210.4 1636.36,1210.4 1636.94,1210.4 1637.53,1210.4 1638.12,1210.4 1638.7,1210.4 1639.29,1210.4 1639.88,1210.4 1640.46,1210.4 1641.05,1210.4 1641.63,1210.4 1642.22,1210.4 1642.81,1210.4 1643.39,1210.4 1643.98,1210.4 1644.57,1210.4 1645.15,1210.4 1645.74,1210.4 1646.33,1210.4 1646.91,1210.4 1647.5,1210.4 1648.09,1210.4 1648.67,1210.4 1649.26,1210.4 1649.84,1210.4 1650.43,1210.4 1651.02,1210.4 1651.6,1210.4 1652.19,1210.4 1652.78,1210.4 1653.36,1210.4 1653.95,1210.4 1654.54,1210.4 1655.12,1210.4 1655.71,1210.4 1656.29,1210.4 1656.88,1210.4 1657.47,1210.4 1658.05,1210.4 1658.64,1210.4 1659.23,1210.4 1659.81,1210.4 1660.4,1210.4 1660.99,1210.4 1661.57,1210.4 1662.16,1210.4 1662.75,1210.4 1663.33,1210.4 1663.92,1210.4 1664.5,1210.4 1665.09,1210.4 1665.68,1210.4 1666.26,1210.4 1666.85,1210.4 1667.44,1210.4 1668.02,1210.4 1668.61,1210.4 1669.2,1210.4 1669.78,1210.4 1670.37,1210.4 1670.96,1210.4 1671.54,1210.4 1672.13,1210.4 1672.71,1210.4 1673.3,1210.4 1673.89,1210.4 1674.47,1210.4 1675.06,1210.4 1675.65,1210.4 1676.23,1210.4 1676.82,1210.4 1677.41,1210.4 1677.99,1210.4 1678.58,1210.4 1679.17,1210.4 1679.75,1210.4 1680.34,1210.4 1680.92,1210.4 1681.51,1210.4 1682.1,1210.4 1682.68,1210.4 1683.27,1210.4 1683.86,1210.4 1684.44,1210.4 1685.03,1210.4 1685.62,1210.4 1686.2,1210.4 1686.79,1210.4 1687.37,1210.4 1687.96,1210.4 1688.55,1210.4 1689.13,1210.4 1689.72,1210.4 1690.31,1210.4 1690.89,1210.4 1691.48,1210.4 1692.07,1210.4 1692.65,1210.4 1693.24,1210.4 1693.83,1210.4 1694.41,1210.4 1695,1210.4 1695.58,1210.4 1696.17,1210.4 1696.76,1210.4 1697.34,1210.4 1697.93,1210.4 1698.52,1210.4 1699.1,1210.4 1699.69,1210.4 1700.28,1210.4 1700.86,1210.4 1701.45,1210.4 1702.04,1210.4 1702.62,1210.4 1703.21,1210.4 1703.79,1210.4 1704.38,1210.4 1704.97,1210.4 1705.55,1210.4 1706.14,1210.4 1706.73,1210.4 1707.31,1210.4 1707.9,1210.4 1708.49,1210.4 1709.07,1210.4 1709.66,1210.4 1710.24,1210.4 1710.83,1210.4 1711.42,1210.4 1712,1210.4 1712.59,1210.4 1713.18,1210.4 1713.76,1210.4 1714.35,1210.4 1714.94,1210.4 1715.52,1210.4 1716.11,1210.4 1716.7,1210.4 1717.28,1210.4 1717.87,1210.4 1718.45,1210.4 1719.04,1210.4 1719.63,1210.4 1720.21,1210.4 1720.8,1210.4 1721.39,1210.4 1721.97,1210.4 1722.56,1210.4 1723.15,1210.4 1723.73,1210.4 1724.32,1210.4 1724.91,1210.4 1725.49,1210.4 1726.08,1210.4 1726.66,1210.4 1727.25,1210.4 1727.84,1210.4 1728.42,1210.4 1729.01,1210.4 1729.6,1210.4 1730.18,1210.4 1730.77,1210.4 1731.36,1210.4 1731.94,1210.4 1732.53,1210.4 1733.11,1210.4 1733.7,1210.4 1734.29,1210.4 1734.87,1210.4 1735.46,1210.4 1736.05,1210.4 1736.63,1210.4 1737.22,1210.4 1737.81,1210.4 1738.39,1210.4 1738.98,1210.4 1739.57,1210.4 1740.15,1210.4 1740.74,1210.4 1741.32,1210.4 1741.91,1210.4 1742.5,1210.4 1743.08,1210.4 1743.67,1210.4 1744.26,1210.4 1744.84,1210.4 1745.43,1210.4 1746.02,1210.4 1746.6,1210.4 1747.19,1210.4 1747.78,1210.4 1748.36,1210.4 1748.95,1210.4 1749.53,1210.4 1750.12,1210.4 1750.71,1210.4 1751.29,1210.4 1751.88,1210.4 1752.47,1210.4 1753.05,1210.4 1753.64,1210.4 1754.23,1210.4 1754.81,1210.4 1755.4,1210.4 1755.99,1210.4 1756.57,1210.4 1757.16,1210.4 1757.74,1210.4 1758.33,1210.4 1758.92,1210.4 1759.5,1210.4 1760.09,1210.4 1760.68,1210.4 1761.26,1210.4 1761.85,1210.4 1762.44,1210.4 1763.02,1210.4 1763.61,1210.4 1764.19,1210.4 1764.78,1210.4 1765.37,1210.4 1765.95,1210.4 1766.54,1210.4 1767.13,1210.4 1767.71,1210.4 1768.3,1210.4 1768.89,1210.4 1769.47,1210.4 1770.06,1210.4 1770.65,1210.4 1771.23,1210.4 1771.82,1210.4 1772.4,1210.4 1772.99,1210.4 1773.58,1210.4 1774.16,1210.4 1774.75,1210.4 1775.34,1210.4 1775.92,1210.4 1776.51,1210.4 1777.1,1210.4 1777.68,1210.4 1778.27,1210.4 1778.86,1210.4 1779.44,1210.4 1780.03,1210.4 1780.61,1210.4 1781.2,1210.4 1781.79,1210.4 1782.37,1210.4 1782.96,1210.4 1783.55,1210.4 1784.13,1210.4 1784.72,1210.4 1785.31,1210.4 1785.89,1210.4 1786.48,1210.4 1787.06,1210.4 1787.65,1210.4 1788.24,1210.4 1788.82,1210.4 1789.41,1210.4 1790,1210.4 1790.58,1210.4 1791.17,1210.4 1791.76,1210.4 1792.34,1210.4 1792.93,1210.4 1793.52,1210.4 1794.1,1210.4 1794.69,1210.4 1795.27,1210.4 1795.86,1210.4 1796.45,1210.4 1797.03,1210.4 1797.62,1210.4 1798.21,1210.4 1798.79,1210.4 1799.38,1210.4 1799.97,1210.4 1800.55,1210.4 1801.14,1210.4 1801.73,1210.4 1802.31,1210.4 1802.9,1210.4 1803.48,1210.4 1804.07,1210.4 1804.66,1210.4 1805.24,1210.4 1805.83,1210.4 1806.42,1210.4 1807,1210.4 1807.59,1210.4 1808.18,1210.4 1808.76,1210.4 1809.35,1210.4 1809.94,1210.4 1810.52,1210.4 1811.11,1210.4 1811.69,1210.4 1812.28,1210.4 1812.87,1210.4 1813.45,1210.4 1814.04,1210.4 1814.63,1210.4 1815.21,1210.4 1815.8,1210.4 1816.39,1210.4 1816.97,1210.4 1817.56,1210.4 1818.14,1210.4 1818.73,1210.4 1819.32,1210.4 1819.9,1210.4 1820.49,1210.4 1821.08,1210.4 1821.66,1210.4 1822.25,1210.4 1822.84,1210.4 1823.42,1210.4 1824.01,1210.4 1824.6,1210.4 1825.18,1210.4 1825.77,1210.4 1826.35,1210.4 1826.94,1210.4 1827.53,1210.4 1828.11,1210.4 1828.7,1210.4 1829.29,1210.4 1829.87,1210.4 1830.46,1210.4 1831.05,1210.4 1831.63,1210.4 1832.22,1210.4 1832.81,1210.4 1833.39,1210.4 1833.98,1210.4 1834.56,1210.4 1835.15,1210.4 1835.74,1210.4 1836.32,1210.4 1836.91,1210.4 1837.5,1210.4 1838.08,1210.4 1838.67,1210.4 1839.26,1210.4 1839.84,1210.4 1840.43,1210.4 1841.01,1210.4 1841.6,1210.4 1842.19,1210.4 1842.77,1210.4 1843.36,1210.4 1843.95,1210.4 1844.53,1210.4 1845.12,1210.4 1845.71,1210.4 1846.29,1210.4 1846.88,1210.4 1847.47,1210.4 1848.05,1210.4 1848.64,1210.4 1849.22,1210.4 1849.81,1210.4 1850.4,1210.4 1850.98,1210.4 1851.57,1210.4 1852.16,1210.4 1852.74,1210.4 1853.33,1210.4 1853.92,1210.4 1854.5,1210.4 1855.09,1210.4 1855.68,1210.4 1856.26,1210.4 1856.85,1210.4 1857.43,1210.4 1858.02,1210.4 1858.61,1210.4 1859.19,1210.4 1859.78,1210.4 1860.37,1210.4 1860.95,1210.4 1861.54,1210.4 1862.13,1210.4 1862.71,1210.4 1863.3,1210.4 1863.88,1210.4 1864.47,1210.4 1865.06,1210.4 1865.64,1210.4 1866.23,1210.4 1866.82,1210.4 1867.4,1210.4 1867.99,1210.4 1868.58,1210.4 1869.16,1210.4 1869.75,1210.4 1870.34,1210.4 1870.92,1210.4 1871.51,1210.4 1872.09,1210.4 1872.68,1210.4 1873.27,1210.4 1873.85,1210.4 1874.44,1210.4 1875.03,1210.4 1875.61,1210.4 1876.2,1210.4 1876.79,1210.4 1877.37,1210.4 1877.96,1210.4 1878.55,1210.4 1879.13,1210.4 1879.72,1210.4 1880.3,1210.4 1880.89,1210.4 1881.48,1210.4 1882.06,1210.4 1882.65,1210.4 1883.24,1210.4 1883.82,1210.4 1884.41,1210.4 1885,1210.4 1885.58,1210.4 1886.17,1210.4 1886.76,1210.4 1887.34,1210.4 1887.93,1210.4 1888.51,1210.4 1889.1,1210.4 1889.69,1210.4 1890.27,1210.4 1890.86,1210.4 1891.45,1210.4 1892.03,1210.4 1892.62,1210.4 1893.21,1210.4 1893.79,1210.4 1894.38,1210.4 1894.96,1210.4 1895.55,1210.4 1896.14,1210.4 1896.72,1210.4 1897.31,1210.4 1897.9,1210.4 1898.48,1210.4 1899.07,1210.4 1899.66,1210.4 1900.24,1210.4 1900.83,1210.4 1901.42,1210.4 1902,1210.4 1902.59,1210.4 1903.17,1210.4 1903.76,1210.4 1904.35,1210.4 1904.93,1210.4 1905.52,1210.4 1906.11,1210.4 1906.69,1210.4 1907.28,1210.4 1907.87,1210.4 1908.45,1210.4 1909.04,1210.4 1909.63,1210.4 1910.21,1210.4 1910.8,1210.4 1911.38,1210.4 1911.97,1210.4 1912.56,1210.4 1913.14,1210.4 1913.73,1210.4 1914.32,1210.4 1914.9,1210.4 1915.49,1210.4 1916.08,1210.4 1916.66,1210.4 1917.25,1210.4 1917.83,1210.4 1918.42,1210.4 1919.01,1210.4 1919.59,1210.4 1920.18,1210.4 1920.77,1210.4 1921.35,1210.4 1921.94,1210.4 1922.53,1210.4 1923.11,1210.4 1923.7,1210.4 1924.29,1210.4 1924.87,1210.4 1925.46,1210.4 1926.04,1210.4 1926.63,1210.4 1927.22,1210.4 1927.8,1210.4 1928.39,1210.4 1928.98,1210.4 1929.56,1210.4 1930.15,1210.4 1930.74,1210.4 1931.32,1210.4 1931.91,1210.4 1932.5,1210.4 1933.08,1210.4 1933.67,1210.4 1934.25,1210.4 1934.84,1210.4 1935.43,1210.4 1936.01,1210.4 1936.6,1210.4 1937.19,1210.4 1937.77,1210.4 1938.36,1210.4 1938.95,1210.4 1939.53,1210.4 1940.12,1210.4 1940.71,1210.4 1941.29,1210.4 1941.88,1210.4 1942.46,1210.4 1943.05,1210.4 1943.64,1210.4 1944.22,1210.4 1944.81,1210.4 1945.4,1210.4 1945.98,1210.4 1946.57,1210.4 1947.16,1210.4 1947.74,1210.4 1948.33,1210.4 1948.91,1210.4 1949.5,1210.4 1950.09,1210.4 1950.67,1210.4 1951.26,1210.4 1951.85,1210.4 1952.43,1210.4 1953.02,1210.4 1953.61,1210.4 1954.19,1210.4 1954.78,1210.4 1955.37,1210.4 1955.95,1210.4 1956.54,1210.4 1957.12,1210.4 1957.71,1210.4 1958.3,1210.4 1958.88,1210.4 1959.47,1210.4 1960.06,1210.4 1960.64,1210.4 1961.23,1210.4 1961.82,1210.4 1962.4,1210.4 1962.99,1210.4 1963.58,1210.4 1964.16,1210.4 1964.75,1210.4 1965.33,1210.4 1965.92,1210.4 1966.51,1210.4 1967.09,1210.4 1967.68,1210.4 1968.27,1210.4 1968.85,1210.4 1969.44,1210.4 1970.03,1210.4 1970.61,1210.4 1971.2,1210.4 1971.78,1210.4 1972.37,1210.4 1972.96,1210.4 1973.54,1210.4 1974.13,1210.4 1974.72,1210.4 1975.3,1210.4 1975.89,1210.4 1976.48,1210.4 1977.06,1210.4 1977.65,1210.4 1978.24,1210.4 1978.82,1210.4 1979.41,1210.4 1979.99,1210.4 1980.58,1210.4 1981.17,1210.4 1981.75,1210.4 1982.34,1210.4 1982.93,1210.4 1983.51,1210.4 1984.1,1210.4 1984.69,1210.4 1985.27,1210.4 1985.86,1210.4 1986.45,1210.4 1987.03,1210.4 1987.62,1210.4 1988.2,1210.4 1988.79,1210.4 1989.38,1210.4 1989.96,1210.4 1990.55,1210.4 1991.14,1210.4 1991.72,1210.4 1992.31,1210.4 1992.9,1210.4 1993.48,1210.4 1994.07,1210.4 1994.65,1210.4 1995.24,1210.4 1995.83,1210.4 1996.41,1210.4 1997,1210.4 1997.59,1210.4 1998.17,1210.4 1998.76,1210.4 1999.35,1210.4 1999.93,1210.4 2000.52,1210.4 2001.11,1210.4 2001.69,1210.4 2002.28,1210.4 2002.86,1210.4 2003.45,1210.4 2004.04,1210.4 2004.62,1210.4 2005.21,1210.4 2005.8,1210.4 2006.38,1210.4 2006.97,1210.4 2007.56,1210.4 2008.14,1210.4 2008.73,1210.4 2009.32,1210.4 2009.9,1210.4 2010.49,1210.4 2011.07,1210.4 2011.66,1210.4 2012.25,1210.4 2012.83,1210.4 2013.42,1210.4 2014.01,1210.4 2014.59,1210.4 2015.18,1210.4 2015.77,1210.4 2016.35,1210.4 2016.94,1210.4 2017.53,1210.4 2018.11,1210.4 2018.7,1210.4 2019.28,1210.4 2019.87,1210.4 2020.46,1210.4 2021.04,1210.4 2021.63,1210.4 2022.22,1210.4 2022.8,1210.4 2023.39,1210.4 2023.98,1210.4 2024.56,1210.4 2025.15,1210.4 2025.73,1210.4 2026.32,1210.4 2026.91,1210.4 2027.49,1210.4 2028.08,1210.4 2028.67,1210.4 2029.25,1210.4 2029.84,1210.4 2030.43,1210.4 2031.01,1210.4 2031.6,1210.4 2032.19,1210.4 2032.77,1210.4 2033.36,1210.4 2033.94,1210.4 2034.53,1210.4 2035.12,1210.4 2035.7,1210.4 2036.29,1210.4 2036.88,1210.4 2037.46,1210.4 2038.05,1210.4 2038.64,1210.4 2039.22,1210.4 2039.81,1210.4 2040.4,1210.4 2040.98,1210.4 2041.57,1210.4 2042.15,1210.4 2042.74,1210.4 2043.33,1210.4 2043.91,1210.4 2044.5,1210.4 2045.09,1210.4 2045.67,1210.4 2046.26,1210.4 2046.85,1210.4 2047.43,1210.4 2048.02,1210.4 2048.6,1210.4 2049.19,1210.4 2049.78,1210.4 2050.36,1210.4 2050.95,1210.4 2051.54,1210.4 2052.12,1210.4 2052.71,1210.4 2053.3,1210.4 2053.88,1210.4 2054.47,1210.4 2055.06,1210.4 2055.64,1210.4 2056.23,1210.4 2056.81,1210.4 2057.4,1210.4 2057.99,1210.4 2058.57,1210.4 2059.16,1210.4 2059.75,1210.4 2060.33,1210.4 2060.92,1210.4 2061.51,1210.4 2062.09,1210.4 2062.68,1210.4 2063.27,1210.4 2063.85,1210.4 2064.44,1210.4 2065.02,1210.4 2065.61,1210.4 2066.2,1210.4 2066.78,1210.4 2067.37,1210.4 2067.96,1210.4 2068.54,1210.4 2069.13,1210.4 2069.72,1210.4 2070.3,1210.4 2070.89,1210.4 2071.48,1210.4 2072.06,1210.4 2072.65,1210.4 2073.23,1210.4 2073.82,1210.4 2074.41,1210.4 2074.99,1210.4 2075.58,1210.4 2076.17,1210.4 2076.75,1210.4 2077.34,1210.4 2077.93,1210.4 2078.51,1210.4 2079.1,1210.4 2079.68,1210.4 2080.27,1210.4 2080.86,1210.4 2081.44,1210.4 2082.03,1210.4 2082.62,1210.4 2083.2,1210.4 2083.79,1210.4 2084.38,1210.4 2084.96,1210.4 2085.55,1210.4 2086.14,1210.4 2086.72,1210.4 2087.31,1210.4 2087.89,1210.4 2088.48,1210.4 2089.07,1210.4 2089.65,1210.4 2090.24,1210.4 2090.83,1210.4 2091.41,1210.4 2092,1210.4 2092.59,1210.4 2093.17,1210.4 2093.76,1210.4 2094.35,1210.4 2094.93,1210.4 2095.52,1210.4 2096.1,1210.4 2096.69,1210.4 2097.28,1210.4 2097.86,1210.4 2098.45,1210.4 2099.04,1210.4 2099.62,1210.4 2100.21,1210.4 2100.8,1210.4 2101.38,1210.4 2101.97,1210.4 2102.55,1210.4 2103.14,1210.4 2103.73,1210.4 2104.31,1210.4 2104.9,1210.4 2105.49,1210.4 2106.07,1210.4 2106.66,1210.4 2107.25,1210.4 2107.83,1210.4 2108.42,1210.4 2109.01,1210.4 2109.59,1210.4 2110.18,1210.4 2110.76,1210.4 2111.35,1210.4 2111.94,1210.4 2112.52,1210.4 2113.11,1210.4 2113.7,1210.4 2114.28,1210.4 2114.87,1210.4 2115.46,1210.4 2116.04,1210.4 2116.63,1210.4 2117.22,1210.4 2117.8,1210.4 2118.39,1210.4 2118.97,1210.4 2119.56,1210.4 2120.15,1210.4 2120.73,1210.4 2121.32,1210.4 2121.91,1210.4 2122.49,1210.4 2123.08,1210.4 2123.67,1210.4 2124.25,1210.4 2124.84,1210.4 2125.42,1210.4 2126.01,1210.4 2126.6,1210.4 2127.18,1210.4 2127.77,1210.4 2128.36,1210.4 2128.94,1210.4 2129.53,1210.4 2130.12,1210.4 2130.7,1210.4 2131.29,1210.4 2131.88,1210.4 2132.46,1210.4 2133.05,1210.4 2133.63,1210.4 2134.22,1210.4 2134.81,1210.4 2135.39,1210.4 2135.98,1210.4 2136.57,1210.4 2137.15,1210.4 2137.74,1210.4 2138.33,1210.4 2138.91,1210.4 2139.5,1210.4 2140.09,1210.4 2140.67,1210.4 2141.26,1210.4 2141.84,1210.4 2142.43,1210.4 2143.02,1210.4 2143.6,1210.4 2144.19,1210.4 2144.78,1210.4 2145.36,1210.4 2145.95,1210.4 2146.54,1210.4 2147.12,1210.4 2147.71,1210.4 2148.3,1210.4 2148.88,1210.4 2149.47,1210.4 2150.05,1210.4 2150.64,1210.4 2151.23,1210.4 2151.81,1210.4 2152.4,1210.4 2152.99,1210.4 2153.57,1210.4 2154.16,1210.4 2154.75,1210.4 2155.33,1210.4 2155.92,1210.4 2156.5,1210.4 2157.09,1210.4 2157.68,1210.4 2158.26,1210.4 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.54,1193.4 1399.77,899.083 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.07 985.439,1193.4 2158.26,1193.4 2158.26,1227.07 985.439,1227.07 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip900)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip900)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip903\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip903)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1451.16 162.114,-2763.5 162.673,-3988 163.232,-5065.37 163.792,-4749.21 164.351,-5709.01 164.91,-6607.1 165.469,-7429.04 166.029,-8195.78 166.588,-8874.12 167.147,-9486.48 167.706,-10037.1 168.266,-10530.1 168.825,-10969.1 169.384,-11357.6 169.943,-11699 170.503,-11266.2 171.062,-11552.1 171.621,-11798.3 172.18,-12007.3 172.74,-12172.3 173.299,-11792 173.858,-11922.1 174.417,-11573.6 174.977,-11671.8 175.536,-11356.8 176.095,-10712.3 176.655,-10437.9 177.214,-10189.6 177.773,-9951.65 178.332,-9744.35 178.892,-9788.59 179.451,-9817.93 180.01,-9826.55 180.569,-9808.95 181.129,-9397.05 181.688,-9365.14 182.247,-9323.95 182.806,-9268.77 183.366,-9196.5 183.925,-8966.26 184.484,-8741.92 185.043,-8259.16 185.603,-8168.14 186.162,-8073.24 186.721,-7975.17 187.28,-7856.67 187.84,-7637.79 188.399,-7518.97 188.958,-7402.4 189.517,-7191.87 190.077,-6886.15 190.636,-6769.09 191.195,-6558.98 191.754,-6441.32 192.314,-6253.22 192.873,-6133.91 193.432,-5940.87 193.991,-5816.84 194.551,-5700.03 195.11,-5582.33 195.669,-5398.45 196.228,-5220.74 196.788,-4997.17 197.347,-4833.07 197.906,-4467.25 198.465,-4319.65 199.025,-4174.39 199.584,-4039.26 200.143,-3900.39 200.702,-3810.72 201.262,-3591.99 201.821,-3468.6 202.38,-3386.95 202.939,-3148.29 203.499,-3075.84 204.058,-2816.14 204.617,-2707.94 205.176,-2639.68 205.736,-2537.88 206.295,-2298.66 206.854,-2169.66 207.413,-2077.21 207.973,-1955.48 208.532,-1896.37 209.091,-1753.48 209.65,-1547.11 210.21,-1469.99 210.769,-1396.21 211.328,-1292.52 211.887,-1219.54 212.447,-1147.3 213.006,-1075.6 213.565,-1034.03 214.124,-965.039 214.684,-901.401 215.243,-786.275 215.802,-722.664 216.361,-681.233 216.921,-642.083 217.48,-584.433 218.039,-503.139 218.598,-425.517 219.158,-395.955 219.717,-323.61 220.276,-248.7 220.835,-204.893 221.395,-155.194 221.954,-134.876 222.513,-111.99 223.072,-46.9789 223.632,35.0263 224.191,74.9074 224.75,87.2813 225.309,144.262 225.869,158.728 226.428,175.433 226.987,208.339 227.546,223.233 228.106,235.633 228.665,267.348 229.224,281.972 229.783,294.406 230.343,331.608 230.902,404.415 231.461,453.121 232.02,479.393 232.58,526.716 233.139,530.964 233.698,577.695 234.257,620.377 234.817,623.28 235.376,648.741 235.935,652.365 236.494,655.159 237.054,657.788 237.613,697.184 238.172,737.245 238.731,700.357 239.291,738.178 239.85,753.493 240.409,777.239 240.968,774.776 241.528,773.909 242.087,790.522 242.646,792.29 243.205,828.185 243.765,827.444 244.324,848.199 244.883,866.622 245.442,895.924 246.002,909.902 246.561,905.468 247.12,917.665 247.679,912.856 248.239,907.859 248.798,904.785 249.357,919.48 249.916,933.494 250.476,948.047 251.035,978.122 251.594,989.121 252.153,982.525 252.713,957.395 253.272,956.333 253.831,984.722 254.39,1014.97 254.95,1006.54 255.509,1004.3 256.068,1014.21 256.627,1008.55 257.187,1005.73 257.746,1020.89 258.305,1013.41 258.864,1058.05 259.424,1097.85 259.983,1104.03 260.542,1091.85 261.101,1098.4 261.661,1123.73 262.22,1132.59 262.779,1135.9 263.338,1137.15 263.898,1141.25 264.457,1129.05 265.016,1151.3 265.575,1203.55 266.135,1174.22 266.694,1179.17 267.253,1199.82 267.812,1202.37 268.372,1172.94 268.931,1175.81 269.49,1166.62 270.049,1140.35 270.609,1112.75 271.168,1103.97 271.727,1091.49 272.286,1083.27 272.846,1076.49 273.405,1086.06 273.964,1094.23 274.523,1108.57 275.083,1128.48 275.642,1167.4 276.201,1155.4 276.76,1161.48 277.32,1148.44 277.879,1119.49 278.438,1142.87 278.997,1133.3 279.557,1123.5 280.116,1078.04 280.675,1039.94 281.234,1033.73 281.794,1010.09 282.353,1020.14 282.912,1064.8 283.471,1056.24 284.031,1098.64 284.59,1108.35 285.149,1115.15 285.708,1123.21 286.268,1093.86 286.827,1103.33 287.386,1079.68 287.945,1073.62 288.505,1033.58 289.064,1075.36 289.623,1083.88 290.182,1122.02 290.742,1131.48 291.301,1138.28 291.86,1127.35 292.419,1119.99 292.979,1091.21 293.538,1077.72 294.097,1066.08 294.656,1092.4 295.216,1098.09 295.775,1057.32 296.334,1051.45 296.893,1056.69 297.453,1067.05 298.012,1060.77 298.571,1056.12 299.13,1080.38 299.69,1023.34 300.249,1016.3 300.808,974.908 301.368,1004.23 301.927,981.544 302.486,1013.61 303.045,1005.31 303.605,1000.01 304.164,980.288 304.723,971.597 305.282,983.576 305.842,1013.68 306.401,1009.48 306.96,968.715 307.519,996.46 308.079,1024.08 308.638,1014.68 309.197,1007.33 309.756,1000.74 310.316,993.248 310.875,969.417 311.434,995.267 311.993,954.731 312.553,982.97 313.112,957.694 313.671,986.564 314.23,1008.68 314.79,1019.69 315.349,993.436 315.908,974.779 316.467,967.957 317.027,964.178 317.586,945.365 318.145,939.374 318.704,967.248 319.264,946.221 319.823,945.097 320.382,957.896 320.941,971.686 321.501,966.053 322.06,962.451 322.619,958.165 323.178,954.817 323.738,948.811 324.297,942.658 324.856,965.223 325.415,959.955 325.975,950.723 326.534,945.731 327.093,975.351 327.652,985.554 328.212,1008.59 328.771,1017.93 329.33,1006.5 329.889,1029.89 330.449,1037.76 331.008,1026.43 331.567,952.811 332.126,945.427 332.686,985.615 333.245,996.291 333.804,957.56 334.363,966.896 334.923,1010.85 335.482,972.692 336.041,950.307 336.6,945.211 337.16,922.723 337.719,903.362 338.278,901.777 338.837,879.66 339.397,859.063 339.956,843.687 340.515,873.583 341.074,888.021 341.634,892.005 342.193,906.009 342.752,901.154 343.311,912.12 343.871,940.1 344.43,920.616 344.989,916.26 345.548,910.274 346.108,907.223 346.667,887.463 347.226,918.093 347.785,977.63 348.345,919.002 348.904,914.695 349.463,911.741 350.022,941.406 350.582,889.035 351.141,888.029 351.7,883.133 352.259,897.348 352.819,862.926 353.378,877.824 353.937,894.226 354.496,858.505 355.056,890.926 355.615,889.22 356.174,886.673 356.733,867.939 357.293,816.46 357.852,847.985 358.411,830.89 358.97,813.804 359.53,830.168 360.089,846.034 360.648,845.662 361.207,827.212 361.767,861.892 362.326,857.427 362.885,857.197 363.444,808.566 364.004,825.908 364.563,857.206 365.122,874.93 365.681,870.652 366.241,868.204 366.8,881.908 367.359,909.289 367.918,901.719 368.478,892.576 369.037,919.483 369.596,897.539 370.155,910.191 370.715,886.623 371.274,900.556 371.833,929.918 372.392,923.368 372.952,934.014 373.511,894.839 374.07,923.591 374.629,883.54 375.189,894.9 375.748,918.047 376.307,912.456 376.866,888.829 377.426,870.157 377.985,896.652 378.544,890.698 379.103,886.7 379.663,945.705 380.222,920.739 380.781,912.167 381.34,908.293 381.9,896.962 382.459,886.681 383.018,865.254 383.577,875.955 384.137,839.877 384.696,834.736 385.255,849.082 385.814,848.306 386.374,797.665 386.933,783.271 387.492,782.084 388.051,767.435 388.611,767.267 389.17,766.847 389.729,763.31 390.288,746.695 390.848,748.873 391.407,769.643 391.966,780.346 392.525,783.017 393.085,818.946 393.644,835.726 394.203,835.987 394.762,830.978 395.322,844.337 395.881,808.33 396.44,820.068 396.999,816.94 397.559,831.908 398.118,845.275 398.677,859.956 399.236,858.466 399.796,838.406 400.355,835.163 400.914,846.473 401.473,842.14 402.033,837.337 402.592,865.03 403.151,879.541 403.71,826.647 404.27,857.308 404.829,852.686 405.388,830.117 405.947,847.024 406.507,844.585 407.066,843.61 407.625,776.234 408.184,791.497 408.744,776.509 409.303,778.248 409.862,795.093 410.421,812.972 410.981,776.101 411.54,805.198 412.099,800.227 412.658,767.817 413.218,752.863 413.777,772.647 414.336,752.847 414.895,769.239 415.455,768.989 416.014,767.651 416.573,766.007 417.132,731.545 417.692,737.756 418.251,738.08 418.81,773.557 419.369,774.48 419.929,770.821 420.488,752.422 421.047,737.216 421.606,723.166 422.166,710.527 422.725,762.937 423.284,750.677 423.843,735.82 424.403,736.519 424.962,753.244 425.521,737.828 426.08,722.442 426.64,725.517 427.199,730.46 427.758,716.119 428.318,704.343 428.877,709.857 429.436,726.15 429.995,744.829 430.555,762.386 431.114,746.984 431.673,766.271 432.232,716.603 432.792,686.968 433.351,677.773 433.91,682.655 434.469,688.95 435.029,693.044 435.588,681.663 436.147,689.348 436.706,709.982 437.266,729.926 437.825,744.096 438.384,759.725 438.943,757.024 439.503,775.326 440.062,806.356 440.621,805.28 441.18,815.454 441.74,827.759 442.299,837.635 442.858,865.761 443.417,859.789 443.977,871.716 444.536,881.095 445.095,890.921 445.654,868.897 446.214,896.769 446.773,856.234 447.332,868.485 447.891,832.441 448.451,844.306 449.01,835.004 449.569,831.276 450.128,843.457 450.688,855.033 451.247,835.528 451.806,765.187 452.365,733.59 452.925,732.814 453.484,733.922 454.043,751.223 454.602,782.566 455.162,780.71 455.721,775.735 456.28,742.343 456.839,761.183 457.399,778.749 457.958,756.969 458.517,754.518 459.076,734.011 459.636,736.136 460.195,736.062 460.754,754.209 461.313,721.443 461.873,723.9 462.432,707.374 462.991,710.933 463.55,727.745 464.11,775.462 464.669,757.546 465.228,727.671 465.787,710.259 466.347,729.152 466.906,747.806 467.465,776.808 468.024,794.877 468.584,806.948 469.143,797.454 469.702,794.936 470.261,791.651 470.821,823.385 471.38,806.626 471.939,804.832 472.498,783.73 473.058,783.503 473.617,779.506 474.176,747.539 474.735,779.688 475.295,760.57 475.854,759.63 476.413,771.511 476.972,768.599 477.532,763.864 478.091,780.049 478.65,793.381 479.209,775.413 479.769,743.323 480.328,760.721 480.887,759.933 481.446,758.038 482.006,770.885 482.565,782.374 483.124,777.435 483.683,808.779 484.243,837.609 484.802,814.376 485.361,796.158 485.92,792.048 486.48,726.309 487.039,727.218 487.598,709.92 488.157,724.261 488.717,728.627 489.276,742.499 489.835,728.051 490.394,729.628 490.954,709.795 491.513,711.54 492.072,713.894 492.631,715.42 493.191,718.424 493.75,718.395 494.309,719.518 494.868,738.834 495.428,710.012 495.987,727.122 496.546,758.94 497.105,723.353 497.665,708.759 498.224,692.442 498.783,693.336 499.342,723.622 499.902,708.553 500.461,757.169 501.02,773.029 501.579,802.16 502.139,810.794 502.698,802.894 503.257,783.233 503.816,780.776 504.376,776.576 504.935,788.693 505.494,785.02 506.053,781.385 506.613,824.09 507.172,823.873 507.731,857.664 508.29,833.066 508.85,792.306 509.409,786.673 509.968,783.103 510.527,763.096 511.087,759.454 511.646,790.885 512.205,756.676 512.764,772.466 513.324,750.188 513.883,763.71 514.442,744.245 515.001,746.118 515.561,743.993 516.12,756.826 516.679,754.485 517.238,756.717 517.798,738.807 518.357,738.038 518.916,755.205 519.475,757.004 520.035,740.274 520.594,756.151 521.153,736.32 521.712,718.271 522.272,704.635 522.831,690.763 523.39,694.775 523.949,731.861 524.509,719.339 525.068,769.165 525.627,787.564 526.186,834.478 526.746,778.997 527.305,760.238 527.864,772.702 528.423,754.112 528.983,751.562 529.542,717.282 530.101,700.396 530.66,686.992 531.22,655.626 531.779,662.766 532.338,683.428 532.897,700.514 533.457,700.267 534.016,718.471 534.575,715.081 535.134,687.739 535.694,671.233 536.253,640.303 536.812,660.624 537.371,696.745 537.931,711.133 538.49,728.523 539.049,728.148 539.608,744.146 540.168,758.787 540.727,758.267 541.286,788.054 541.845,816.671 542.405,810.87 542.964,803.21 543.523,816.074 544.082,813.676 544.642,804.63 545.201,800.321 545.76,760.888 546.319,723.676 546.879,706.614 547.438,726.313 547.997,726.605 548.556,727.565 549.116,725.98 549.675,723.218 550.234,723.871 550.793,721.551 551.353,738.475 551.912,752.878 552.471,763.281 553.031,741.955 553.59,739.745 554.149,723.789 554.708,723.557 555.268,705.985 555.827,706.139 556.386,707.274 556.945,705.686 557.505,719.48 558.064,689.194 558.623,691.464 559.182,660.087 559.742,662.137 560.301,648.915 560.86,651.492 561.419,670.567 561.979,671.742 562.538,676.177 563.097,674.503 563.656,691.64 564.216,710.103 564.775,725.444 565.334,706.487 565.893,737.958 566.453,721.189 567.012,752.389 567.571,767.195 568.13,764.743 568.69,758.357 569.249,707.595 569.808,692.22 570.367,693.451 570.927,709.906 571.486,662.708 572.045,682.375 572.604,698.808 573.164,684.387 573.723,668.61 574.282,704.632 574.841,707.285 575.401,708.287 575.96,692.841 576.519,680.096 577.078,648.307 577.638,670.286 578.197,640.078 578.756,643.669 579.315,650.921 579.875,654.569 580.434,690.949 580.993,689.302 581.552,689.281 582.112,706.771 582.671,688.368 583.23,659.301 583.789,660.398 584.349,695.388 584.908,713.351 585.467,696.733 586.026,713.901 586.586,745.867 587.145,745.095 587.704,711.066 588.263,694.564 588.823,713.81 589.382,714.281 589.941,713.748 590.5,696.968 591.06,685.456 591.619,688.073 592.178,688.032 592.737,685.601 593.297,688.056 593.856,688.729 594.415,691.321 594.974,692.182 595.534,691.436 596.093,707.449 596.652,692.405 597.211,673.81 597.771,675.248 598.33,678.593 598.889,709.867 599.448,693.857 600.008,695.62 600.567,697.396 601.126,699.671 601.685,682.542 602.245,718.934 602.804,733.41 603.363,767.494 603.922,745.755 604.482,744.118 605.041,742.48 605.6,724.086 606.159,753.904 606.719,735.712 607.278,749.05 607.837,728.64 608.396,732.137 608.956,764.402 609.515,759.791 610.074,756.626 610.633,771.089 611.193,769.434 611.752,751.354 612.311,767.295 612.87,746.961 613.43,809.901 613.989,820.6 614.548,780.802 615.107,760.158 615.667,790.121 616.226,768.902 616.785,749.758 617.344,777.173 617.904,773.839 618.463,772.769 619.022,751.997 619.581,733.842 620.141,719.181 620.7,721.044 621.259,700.125 621.818,698.413 622.378,684.487 622.937,669.498 623.496,687.297 624.055,657.441 624.615,659.889 625.174,650.254 625.733,635.356 626.292,684.704 626.852,686.081 627.411,690.156 627.97,692.021 628.529,679.853 629.089,714.462 629.648,731.074 630.207,696.855 630.766,697.323 631.326,681.852 631.885,663.922 632.444,697.746 633.003,725.844 633.563,678.427 634.122,698.43 634.681,693.943 635.24,713.307 635.8,728.27 636.359,743.486 636.918,742.925 637.477,756.785 638.037,767.356 638.596,764.452 639.155,745.403 639.714,744.678 640.274,761.515 640.833,757.849 641.392,745.955 641.951,779.829 642.511,743.518 643.07,707.73 643.629,704.85 644.188,721.011 644.748,749.447 645.307,716.172 645.866,714.218 646.425,696.94 646.985,700.867 647.544,730.744 648.103,778.201 648.662,758.42 649.222,754.054 649.781,781.68 650.34,791.069 650.899,737.158 651.459,783.156 652.018,762.383 652.577,776.137 653.136,772.675 653.696,770.089 654.255,768.477 654.814,749.722 655.373,762.767 655.933,761.425 656.492,770.075 657.051,779.329 657.61,775.559 658.17,770.843 658.729,766.537 659.288,746.071 659.847,728.308 660.407,743.108 660.966,737.699 661.525,717.796 662.084,651.394 662.644,685.668 663.203,699.599 663.762,699.843 664.321,697.499 664.881,746.335 665.44,773.68 665.999,789.21 666.558,786.59 667.118,782.161 667.677,779.294 668.236,777.439 668.795,786.809 669.355,765.127 669.914,775.752 670.473,772.875 671.032,770.831 671.592,748.206 672.151,761.411 672.71,711.194 673.269,694.681 673.829,694.723 674.388,728.517 674.947,743.873 675.506,706.783 676.066,722.789 676.625,706.207 677.184,719.348 677.743,684.696 678.303,718.773 678.862,718.045 679.421,733.896 679.981,735.14 680.54,701.857 681.099,686.26 681.658,704.262 682.218,671.168 682.777,674.537 683.336,691.378 683.895,691.989 684.455,690.761 685.014,705.374 685.573,721.855 686.132,701.222 686.692,715.439 687.251,679.408 687.81,646.984 688.369,651.055 688.929,652.381 689.488,655.511 690.047,654.783 690.606,644.841 691.166,678.65 691.725,682.585 692.284,666.211 692.843,650.114 693.403,673.219 693.962,675.784 694.521,674.684 695.08,677.529 695.64,677.914 696.199,649.172 696.758,637.29 697.317,655.686 697.877,624.674 698.436,690.621 698.995,672.401 699.554,674.869 700.114,702.212 700.673,689.252 701.232,708.223 701.791,691.361 702.351,692.171 702.91,724.938 703.469,724.157 704.028,706.614 704.588,690.997 705.147,692.254 705.706,721.207 706.265,737.384 706.825,732.779 707.384,728.673 707.943,710.783 708.502,677.934 709.062,697.352 709.621,682.339 710.18,684.052 710.739,670.234 711.299,671.278 711.858,688.587 712.417,676.312 712.976,676.557 713.536,691.038 714.095,709.568 714.654,708.204 715.213,704.496 715.773,751.674 716.332,763.932 716.891,758.702 717.45,766.894 718.01,783.349 718.569,759.889 719.128,741.642 719.687,717.827 720.247,682.173 720.806,680.775 721.365,696.525 721.924,697.436 722.484,696.128 723.043,696.561 723.602,664.861 724.161,651.338 724.721,633.115 725.28,655.174 725.839,638.073 726.398,641.768 726.958,645.039 727.517,616.2 728.076,607.725 728.635,628.045 729.195,613.328 729.754,602.911 730.313,640.154 730.872,641.988 731.432,626.072 731.991,646.015 732.55,676.99 733.109,710.185 733.669,691.683 734.228,694.165 734.787,693.892 735.346,724.511 735.906,744.171 736.465,741.631 737.024,740.577 737.583,738.933 738.143,735.856 738.702,749.86 739.261,744.586 739.82,741.783 740.38,737.308 740.939,734.677 741.498,728.895 742.057,712.738 742.617,681.604 743.176,696.148 743.735,693.545 744.294,675.084 744.854,695.104 745.413,695.376 745.972,743.41 746.531,773.577 747.091,752.281 747.65,766.295 748.209,729.771 748.768,695.306 749.328,694.332 749.887,723.761 750.446,704.621 751.005,637.842 751.565,624.002 752.124,633.467 752.683,617.602 753.242,606.379 753.802,643.892 754.361,632.374 754.92,650.677 755.479,668.901 756.039,671.93 756.598,643.303 757.157,643.301 757.716,663.718 758.276,647.312 758.835,634.191 759.394,636.76 759.953,638.09 760.513,610.014 761.072,632.622 761.631,670.267 762.19,707.108 762.75,722.768 763.309,752.385 763.868,799.661 764.427,790.97 764.987,784.679 765.546,763.692 766.105,760.325 766.664,787.971 767.224,768.4 767.783,763.211 768.342,761.043 768.901,785.009 769.461,782.122 770.02,780.087 770.579,778.215 771.138,773.411 771.698,771.569 772.257,754.099 772.816,767.68 773.375,761.682 773.935,776.089 774.494,773.116 775.053,751.617 775.612,754.063 776.172,749.339 776.731,729.092 777.29,730.613 777.849,699.061 778.409,701.462 778.968,672.305 779.527,674.405 780.086,674.962 780.646,659.324 781.205,627.548 781.764,614.833 782.323,652.584 782.883,628.977 783.442,630.649 784.001,631.642 784.56,640.368 785.12,641.794 785.679,614.819 786.238,599.579 786.797,589.843 787.357,612.581 787.916,633.742 788.475,634.498 789.034,603.122 789.594,580.477 790.153,587.406 790.712,576.244 791.271,564.622 791.831,620.962 792.39,640.89 792.949,625.288 793.508,647.451 794.068,650.938 794.627,652.865 795.186,655.423 795.745,662.117 796.305,648.204 796.864,619.322 797.423,656.198 797.982,675.687 798.542,726.797 799.101,723.569 799.66,722.965 800.219,720.957 800.779,722.936 801.338,736.096 801.897,749.793 802.456,765.482 803.016,745.434 803.575,724.624 804.134,720.752 804.693,686.959 805.253,689.588 805.812,674.889 806.371,709.495 806.931,688.105 807.49,701.452 808.049,700.545 808.608,680.368 809.168,686.356 809.727,686.753 810.286,668.887 810.845,687.458 811.405,709.214 811.964,706.079 812.523,682.475 813.082,682.592 813.642,701.083 814.201,733.732 814.76,732.881 815.319,746.582 815.879,724.128 816.438,706.344 816.997,690.93 817.556,675.616 818.116,694.198 818.675,708.074 819.234,705.065 819.793,704.702 820.353,669.464 820.912,671.28 821.471,653.684 822.03,674.139 822.59,689.819 823.149,674.022 823.708,659.632 824.267,659.682 824.827,647.691 825.386,666.912 825.945,669.114 826.504,667.162 827.064,654.733 827.623,675.65 828.182,680.008 828.741,662.797 829.301,691.725 829.86,675.592 830.419,642.294 830.978,613.409 831.538,616.878 832.097,603.883 832.656,606.095 833.215,609.141 833.775,646.278 834.334,667.245 834.893,668.936 835.452,701.875 836.012,699.976 836.571,700.901 837.13,702.246 837.689,699.945 838.249,653.192 838.808,688.114 839.367,705.58 839.926,738.297 840.486,706.646 841.045,674.534 841.604,686.903 842.163,687.176 842.723,705.137 843.282,700.838 843.841,712.926 844.4,729.742 844.96,727.65 845.519,712.525 846.078,741.375 846.637,751.319 847.197,745.164 847.756,759.442 848.315,771.302 848.874,769.152 849.434,765.819 849.993,761.08 850.552,758.365 851.111,753.061 851.671,768.173 852.23,763.981 852.789,777.916 853.348,776.047 853.908,723.378 854.467,706.442 855.026,723.419 855.585,739.521 856.145,699.882 856.704,669.139 857.263,699.135 857.822,683.494 858.382,635.995 858.941,607.518 859.5,644.006 860.059,616.629 860.619,618.594 861.178,639.24 861.737,611.513 862.296,616.032 862.856,662.459 863.415,698.547 863.974,667.034 864.533,670.67 865.093,673.065 865.652,704.979 866.211,687.843 866.77,737.809 867.33,752.687 867.889,749.458 868.448,723.565 869.007,719.137 869.567,751.832 870.126,767.124 870.685,781.21 871.244,776.53 871.804,773.602 872.363,785.067 872.922,750.277 873.481,731.389 874.041,742.683 874.6,739.098 875.159,718.253 875.718,680.65 876.278,693.176 876.837,696.037 877.396,694.209 877.955,695.961 878.515,727.946 879.074,741.001 879.633,767.822 880.192,745.851 880.752,726.1 881.311,710.47 881.87,757.616 882.429,769.001 882.989,766.623 883.548,781.191 884.107,760.808 884.666,754.629 885.226,751.201 885.785,731.82 886.344,745.366 886.903,758.15 887.463,720.029 888.022,734.051 888.581,749.792 889.14,744.44 889.7,692.186 890.259,687.072 890.818,718.334 891.377,667.379 891.937,635.533 892.496,621.008 893.055,607.841 893.614,595.595 894.174,600.767 894.733,634.706 895.292,671.129 895.851,658.757 896.411,677.7 896.97,678.932 897.529,665.332 898.088,665.892 898.648,681.074 899.207,684.011 899.766,699.656 900.325,682.29 900.885,682.81 901.444,646.396 902.003,612.818 902.562,600.689 903.122,589.001 903.681,561.309 904.24,582.167 904.799,572.96 905.359,562.701 905.918,566.039 906.477,589.124 907.036,577.898 907.596,586.277 908.155,580.52 908.714,565.832 909.273,589.46 909.833,576.399 910.392,564.228 910.951,556.391 911.51,578.448 912.07,617.313 912.629,653.081 913.188,636.108 913.747,608.808 914.307,579.151 914.866,599.212 915.425,622.88 915.984,595.294 916.544,616.048 917.103,605.251 917.662,623.933 918.221,642.064 918.781,626.811 919.34,630.445 919.899,602.51 920.458,622.505 921.018,690.302 921.577,706.772 922.136,691.411 922.695,724.57 923.255,708.627 923.814,690.632 924.373,688.604 924.932,673.464 925.492,691.215 926.051,690.49 926.61,695.144 927.169,676.351 927.729,692.539 928.288,690.047 928.847,689.781 929.406,706.973 929.966,707.863 930.525,692.302 931.084,725.192 931.644,739.447 932.203,736.482 932.762,700.641 933.321,717.58 933.881,713.228 934.44,725.836 934.999,676.358 935.558,695.91 936.118,663.522 936.677,685.088 937.236,718.7 937.795,720.913 938.355,753.449 938.914,754.188 939.473,781.897 940.032,776.491 940.592,756.2 941.151,738.691 941.71,754.643 942.269,753.506 942.829,717.071 943.388,715.326 943.947,733.253 944.506,713.483 945.066,727.334 945.625,757.509 946.184,740.628 946.743,719.53 947.303,735.871 947.862,717.244 948.421,730.698 948.98,730.916 949.54,739.559 950.099,736.554 950.658,720.079 951.217,771.379 951.777,747.85 952.336,742.299 952.895,734.421 953.454,746.401 954.014,742.032 954.573,757.171 955.132,801.492 955.691,774.454 956.251,802.171 956.81,761.803 957.369,724.589 957.928,722.498 958.488,702.451 959.047,683.643 959.606,669.083 960.165,667.768 960.725,663.968 961.284,647.87 961.843,652.327 962.402,689.122 962.962,674.415 963.521,690.308 964.08,722.311 964.639,753.934 965.199,753.823 965.758,668.78 966.317,655.446 966.876,686.994 967.436,734.95 967.995,716.3 968.554,698.735 969.113,698.653 969.673,652.087 970.232,619.834 970.791,624.177 971.35,627.24 971.91,632.314 972.469,633.219 973.028,623.371 973.587,656.831 974.147,660.726 974.706,678.914 975.265,710.852 975.824,742.681 976.384,756.173 976.943,753.193 977.502,783.384 978.061,811.218 978.621,850.65 979.18,854.201 979.739,818.163 980.298,828.581 980.858,805.545 981.417,843.489 981.976,849.933 982.535,853.459 983.095,828.021 983.654,819.276 984.213,794.898 984.772,754.544 985.332,748.802 985.891,727.246 986.45,744.708 987.009,691.236 987.569,659.631 988.128,664.187 988.687,681.832 989.246,683.474 989.806,699.31 990.365,664.589 990.924,676.153 991.483,680.918 992.043,684.664 992.602,686.909 993.161,702.796 993.72,686.888 994.28,701.934 994.839,702.308 995.398,684.655 995.957,698.27 996.517,667.386 997.076,665.743 997.635,651.852 998.194,654.403 998.754,656.9 999.313,657.03 999.872,607.324 1000.43,610.701 1000.99,632.315 1001.55,649.444 1002.11,651.836 1002.67,686.283 1003.23,670.313 1003.79,686.038 1004.35,686.84 1004.91,687.299 1005.46,690.094 1006.02,676.322 1006.58,607.836 1007.14,599.116 1007.7,616.862 1008.26,635.154 1008.82,638.974 1009.38,642.434 1009.94,642.08 1010.5,609.589 1011.06,580.557 1011.62,586.725 1012.18,573.726 1012.73,575.693 1013.29,615.621 1013.85,634.95 1014.41,637.892 1014.97,608.257 1015.53,628.68 1016.09,616.898 1016.65,621.582 1017.21,625.301 1017.77,630.461 1018.33,648.397 1018.89,699.919 1019.45,715.509 1020.01,712.912 1020.56,695.469 1021.12,696.513 1021.68,711.253 1022.24,689.774 1022.8,673.597 1023.36,753.449 1023.92,747.54 1024.48,743.895 1025.04,742.962 1025.6,706.761 1026.16,705.893 1026.72,686.046 1027.28,664.429 1027.83,679.323 1028.39,644.977 1028.95,646.92 1029.51,616.508 1030.07,601.256 1030.63,651.462 1031.19,638.325 1031.75,672.455 1032.31,705.199 1032.87,719.487 1033.43,717.187 1033.99,713.25 1034.55,711.211 1035.1,713.418 1035.66,660.218 1036.22,673.816 1036.78,655.566 1037.34,641.455 1037.9,659.169 1038.46,663.416 1039.02,678.728 1039.58,694.748 1040.14,678.503 1040.7,679.456 1041.26,660.239 1041.82,690.709 1042.38,691.171 1042.93,706.102 1043.49,688.345 1044.05,773.115 1044.61,817.542 1045.17,775.411 1045.73,754.13 1046.29,796.68 1046.85,775.615 1047.41,789.149 1047.97,783.017 1048.53,780.763 1049.09,760.704 1049.65,757.035 1050.2,736.864 1050.76,685.972 1051.32,686.597 1051.88,684.995 1052.44,685.315 1053,670.037 1053.56,653.488 1054.12,654.635 1054.68,625.028 1055.24,610.978 1055.8,677.596 1056.36,681.539 1056.92,696.379 1057.48,663.448 1058.03,665.554 1058.59,669.395 1059.15,637.25 1059.71,654.727 1060.27,655.853 1060.83,645.292 1061.39,628.739 1061.95,649.45 1062.51,617.996 1063.07,621.408 1063.63,625.439 1064.19,630.723 1064.75,620.358 1065.3,637.801 1065.86,608.983 1066.42,616.345 1066.98,601.744 1067.54,620.615 1068.1,609.095 1068.66,630.735 1069.22,684.56 1069.78,669.733 1070.34,670.252 1070.9,686.839 1071.46,668.189 1072.02,681.257 1072.57,697.236 1073.13,710.873 1073.69,711.145 1074.25,708.26 1074.81,696 1075.37,680.6 1075.93,666.219 1076.49,697.784 1077.05,711.936 1077.61,710.132 1078.17,758.979 1078.73,786.293 1079.29,767.556 1079.85,700.382 1080.4,666.593 1080.96,667.849 1081.52,670.089 1082.08,656.807 1082.64,640.171 1083.2,610.648 1083.76,585.248 1084.32,572.466 1084.88,592.045 1085.44,613.291 1086,634.104 1086.56,620.952 1087.12,639.571 1087.67,641.551 1088.23,643.932 1088.79,644.225 1089.35,644.726 1089.91,663.551 1090.47,667.272 1091.03,652.695 1091.59,650.997 1092.15,650.44 1092.71,640.378 1093.27,643.26 1093.83,666.745 1094.39,684.409 1094.94,717.743 1095.5,746.297 1096.06,741.635 1096.62,753.049 1097.18,764.558 1097.74,761.661 1098.3,728.092 1098.86,706.91 1099.42,725.44 1099.98,724.778 1100.54,677.629 1101.1,677.384 1101.66,658.814 1102.22,625.767 1102.77,610.704 1103.33,634.468 1103.89,670.325 1104.45,671.875 1105.01,671.18 1105.57,671.526 1106.13,655.489 1106.69,654.695 1107.25,687.081 1107.81,687.666 1108.37,705.516 1108.93,703.534 1109.49,721.305 1110.04,717.596 1110.6,666.225 1111.16,650.241 1111.72,653.139 1112.28,690.654 1112.84,690.172 1113.4,687.564 1113.96,686.976 1114.52,623.266 1115.08,613.299 1115.64,633.297 1116.2,636.696 1116.76,636.818 1117.31,629.631 1117.87,649.532 1118.43,700.47 1118.99,699.967 1119.55,717.446 1120.11,713.782 1120.67,679.045 1121.23,630.955 1121.79,649.294 1122.35,649.818 1122.91,649.94 1123.47,636.956 1124.03,604.807 1124.59,624.612 1125.14,643.572 1125.7,629.573 1126.26,646.613 1126.82,666.705 1127.38,666.546 1127.94,653.483 1128.5,655.147 1129.06,640.767 1129.62,657.278 1130.18,629.53 1130.74,669.608 1131.3,683.86 1131.86,684.927 1132.41,732.455 1132.97,727.021 1133.53,727.83 1134.09,710.361 1134.65,715.214 1135.21,712.832 1135.77,675.309 1136.33,643.86 1136.89,646.4 1137.45,680.4 1138.01,695.311 1138.57,710.223 1139.13,718.384 1139.68,751.086 1140.24,746.332 1140.8,726.043 1141.36,711.388 1141.92,707.107 1142.48,707.202 1143.04,689.218 1143.6,695.184 1144.16,710.217 1144.72,741.645 1145.28,723.653 1145.84,721.471 1146.4,720.675 1146.96,719.776 1147.51,733.757 1148.07,714.918 1148.63,685.924 1149.19,702.722 1149.75,687.549 1150.31,706.783 1150.87,690.22 1151.43,672.648 1151.99,688.91 1152.55,677.34 1153.11,660.606 1153.67,643.853 1154.23,647.488 1154.78,646.909 1155.34,648.641 1155.9,631.575 1156.46,647.61 1157.02,666.581 1157.58,660.728 1158.14,692.382 1158.7,727.246 1159.26,725.589 1159.82,710.828 1160.38,708.381 1160.94,687.958 1161.5,673.331 1162.05,642.424 1162.61,612.113 1163.17,649.578 1163.73,683.143 1164.29,696.779 1164.85,676.591 1165.41,693.753 1165.97,710.797 1166.53,723.356 1167.09,706.962 1167.65,706.264 1168.21,686.791 1168.77,667.987 1169.33,684.834 1169.88,685.721 1170.44,698.915 1171,714.573 1171.56,728.805 1172.12,743.572 1172.68,693.199 1173.24,678.148 1173.8,661.58 1174.36,644.979 1174.92,647.172 1175.48,649.109 1176.04,630.327 1176.6,631.588 1177.15,632.464 1177.71,649.587 1178.27,653.369 1178.83,669.59 1179.39,685.57 1179.95,689.109 1180.51,721.309 1181.07,734.707 1181.63,731.425 1182.19,743.921 1182.75,753.232 1183.31,751.337 1183.87,732.067 1184.43,746.254 1184.98,726.025 1185.54,739.192 1186.1,754.11 1186.66,751.316 1187.22,748.425 1187.78,727.523 1188.34,769.321 1188.9,731.959 1189.46,727.78 1190.02,740.67 1190.58,751.942 1191.14,782.777 1191.7,763.466 1192.25,774.805 1192.81,738.173 1193.37,736.934 1193.93,735.121 1194.49,728.153 1195.05,739.315 1195.61,718.249 1196.17,748.129 1196.73,726.375 1197.29,712.205 1197.85,742.245 1198.41,740.793 1198.97,752.904 1199.52,782.86 1200.08,795.43 1200.64,772.815 1201.2,754.477 1201.76,720.019 1202.32,703.298 1202.88,687.738 1203.44,686.804 1204,684.461 1204.56,685.523 1205.12,667.599 1205.68,637.204 1206.24,611.083 1206.8,631.021 1207.35,602.198 1207.91,607.791 1208.47,597.293 1209.03,601.756 1209.59,620.969 1210.15,574.285 1210.71,531.837 1211.27,536.785 1211.83,575.323 1212.39,612.13 1212.95,647.322 1213.51,664.279 1214.07,666.737 1214.62,667.519 1215.18,668.958 1215.74,653.286 1216.3,667.672 1216.86,657.125 1217.42,625.312 1217.98,627.336 1218.54,616.142 1219.1,586.576 1219.66,592.397 1220.22,546.888 1220.78,518.594 1221.34,595.602 1221.89,603.779 1222.45,609.776 1223.01,584.363 1223.57,606.91 1224.13,660.091 1224.69,641.323 1225.25,659.552 1225.81,660.16 1226.37,662.177 1226.93,617.602 1227.49,622.342 1228.05,591.547 1228.61,596.105 1229.17,613.523 1229.72,650.909 1230.28,653.948 1230.84,671.168 1231.4,685.301 1231.96,671.618 1232.52,669.043 1233.08,668.829 1233.64,654.545 1234.2,702.505 1234.76,684.114 1235.32,702.323 1235.88,732.607 1236.44,680.524 1236.99,664.162 1237.55,681.303 1238.11,680.783 1238.67,683.862 1239.23,666.423 1239.79,620.41 1240.35,626.799 1240.91,645.055 1241.47,631.757 1242.03,663.348 1242.59,666.618 1243.15,684.231 1243.71,682.264 1244.26,696.438 1244.82,714.64 1245.38,667.318 1245.94,683.668 1246.5,713.14 1247.06,697.787 1247.62,714.431 1248.18,714.6 1248.74,712.392 1249.3,728.092 1249.86,705.765 1250.42,688.58 1250.98,685.984 1251.54,655.395 1252.09,639.067 1252.65,635.959 1253.21,670.084 1253.77,687.292 1254.33,702.667 1254.89,702.629 1255.45,751.071 1256.01,732.379 1256.57,762.361 1257.13,753.352 1257.69,751.414 1258.25,733.188 1258.81,715.906 1259.36,696.015 1259.92,712.349 1260.48,726.601 1261.04,707.725 1261.6,674.81 1262.16,689.521 1262.72,706.94 1263.28,737.438 1263.84,746.235 1264.4,741.004 1264.96,753.97 1265.52,753.514 1266.08,734.127 1266.63,799.948 1267.19,795.606 1267.75,791.18 1268.31,768.319 1268.87,779.36 1269.43,791.97 1269.99,755.016 1270.55,764.654 1271.11,771.541 1271.67,764.778 1272.23,778.898 1272.79,776.364 1273.35,768.59 1273.91,762.709 1274.46,760.062 1275.02,707.557 1275.58,706.541 1276.14,724.362 1276.7,741.158 1277.26,707.632 1277.82,704.228 1278.38,670.781 1278.94,640.829 1279.5,657.427 1280.06,643.854 1280.62,662.51 1281.18,630.709 1281.73,648.517 1282.29,666.964 1282.85,651.848 1283.41,652.868 1283.97,734.914 1284.53,698.59 1285.09,680.489 1285.65,697.526 1286.21,712.603 1286.77,732.341 1287.33,730.638 1287.89,710.69 1288.45,708.237 1289,656.267 1289.56,655.357 1290.12,658.243 1290.68,626.846 1291.24,630.859 1291.8,652.361 1292.36,651.83 1292.92,623.417 1293.48,624.125 1294.04,609.975 1294.6,627.651 1295.16,664.581 1295.72,680.79 1296.28,683.702 1296.83,686.147 1297.39,720.419 1297.95,734.83 1298.51,748.529 1299.07,788.432 1299.63,780.915 1300.19,762.016 1300.75,742.549 1301.31,720.106 1301.87,734.245 1302.43,732.599 1302.99,682.137 1303.55,681.567 1304.1,714.422 1304.66,697.428 1305.22,680.543 1305.78,650.086 1306.34,647.856 1306.9,651.209 1307.46,654.224 1308.02,640.213 1308.58,646.222 1309.14,667.226 1309.7,697.581 1310.26,679.492 1310.82,692.604 1311.38,677.344 1311.93,695.403 1312.49,675.929 1313.05,656.018 1313.61,671.856 1314.17,656.095 1314.73,643.787 1315.29,648.523 1315.85,649.195 1316.41,638.115 1316.97,655.606 1317.53,642.988 1318.09,660.785 1318.65,660.103 1319.2,646.283 1319.76,715.601 1320.32,699.265 1320.88,679.297 1321.44,678.546 1322,678.961 1322.56,678.951 1323.12,680.2 1323.68,680.422 1324.24,666.749 1324.8,668.297 1325.36,656.955 1325.92,673.442 1326.47,640.618 1327.03,626.832 1327.59,645.375 1328.15,633.507 1328.71,607.644 1329.27,613.043 1329.83,617.098 1330.39,633.465 1330.95,634.347 1331.51,669.904 1332.07,655.99 1332.63,657.607 1333.19,644.773 1333.75,612.524 1334.3,646.258 1334.86,629.832 1335.42,648.887 1335.98,646.497 1336.54,680.311 1337.1,681.169 1337.66,664.058 1338.22,666.687 1338.78,669.346 1339.34,658.506 1339.9,645.714 1340.46,615.991 1341.02,619.766 1341.57,607.362 1342.13,562.246 1342.69,567.212 1343.25,571.082 1343.81,592.751 1344.37,599.401 1344.93,605.431 1345.49,623.921 1346.05,658.452 1346.61,676.461 1347.17,660.282 1347.73,661.669 1348.29,664.612 1348.84,712.773 1349.4,711.549 1349.96,745.302 1350.52,760.551 1351.08,741.74 1351.64,723.047 1352.2,722.638 1352.76,723.209 1353.32,708.493 1353.88,706.004 1354.44,706.244 1355,705.834 1355.56,676.306 1356.12,661.468 1356.67,694.008 1357.23,724.69 1357.79,675.84 1358.35,676.292 1358.91,661.229 1359.47,696.112 1360.03,713.763 1360.59,664.474 1361.15,678.555 1361.71,665.103 1362.27,667.095 1362.83,685.197 1363.39,700.658 1363.94,697.285 1364.5,677.673 1365.06,693.805 1365.62,693.517 1366.18,676.555 1366.74,658.344 1367.3,643.343 1367.86,645.295 1368.42,630.671 1368.98,665.934 1369.54,668.313 1370.1,652.553 1370.66,672.523 1371.21,688.056 1371.77,718.71 1372.33,698.836 1372.89,697.357 1373.45,679.156 1374.01,665.695 1374.57,654.384 1375.13,676.838 1375.69,693.193 1376.25,711.426 1376.81,729.962 1377.37,728.64 1377.93,775.268 1378.49,788.797 1379.04,785.366 1379.6,795.317 1380.16,837.536 1380.72,828.794 1381.28,834.123 1381.84,828.018 1382.4,821.181 1382.96,829.577 1383.52,806.331 1384.08,778.982 1384.64,822.676 1385.2,797.69 1385.76,756.971 1386.31,735.461 1386.87,699.008 1387.43,663.398 1387.99,680.021 1388.55,682.1 1389.11,666.041 1389.67,668.855 1390.23,667.626 1390.79,701.311 1391.35,718.815 1391.91,715.517 1392.47,711.962 1393.03,691.597 1393.58,708.472 1394.14,693.419 1394.7,674.072 1395.26,690.777 1395.82,723.767 1396.38,704.257 1396.94,698.256 1397.5,679.389 1398.06,677.885 1398.62,677.105 1399.18,677.677 1399.74,663.227 1400.3,684.911 1400.86,707.516 1401.41,722.486 1401.97,722.758 1402.53,769 1403.09,782.94 1403.65,792.861 1404.21,754.033 1404.77,718.277 1405.33,731.098 1405.89,727.292 1406.45,724.583 1407.01,690.711 1407.57,725.847 1408.13,723.32 1408.68,701.385 1409.24,665.907 1409.8,679.956 1410.36,663.345 1410.92,661.89 1411.48,677.673 1412.04,692.967 1412.6,705.983 1413.16,750.46 1413.72,748.033 1414.28,744.935 1414.84,725.924 1415.4,738.288 1415.95,715.771 1416.51,652.141 1417.07,654.535 1417.63,672.983 1418.19,688.822 1418.75,674.331 1419.31,657.84 1419.87,644.839 1420.43,627.464 1420.99,567.163 1421.55,574.836 1422.11,581.943 1422.67,617.905 1423.23,604.744 1423.78,610.304 1424.34,630.715 1424.9,683.083 1425.46,666.508 1426.02,684.584 1426.58,688.021 1427.14,701.688 1427.7,670.818 1428.26,655.597 1428.82,675.227 1429.38,671.657 1429.94,673.307 1430.5,643.342 1431.05,645.717 1431.61,633.56 1432.17,621.945 1432.73,641.812 1433.29,612.61 1433.85,616.873 1434.41,590.835 1434.97,607.851 1435.53,629.073 1436.09,647.464 1436.65,648.363 1437.21,663.308 1437.77,696.123 1438.33,681.007 1438.88,666.949 1439.44,680.174 1440,715.359 1440.56,647.486 1441.12,664.28 1441.68,649.76 1442.24,654.444 1442.8,658.055 1443.36,661.481 1443.92,678.686 1444.48,710.374 1445.04,708.666 1445.6,758.413 1446.15,770.768 1446.71,750.532 1447.27,745.568 1447.83,713.272 1448.39,714.478 1448.95,725.575 1449.51,754.672 1450.07,747.86 1450.63,698.184 1451.19,698.811 1451.75,697.148 1452.31,697.86 1452.87,694.216 1453.42,693.151 1453.98,677.975 1454.54,674.414 1455.1,674.524 1455.66,672.738 1456.22,656.257 1456.78,657.65 1457.34,675.155 1457.9,658.4 1458.46,675.07 1459.02,660.109 1459.58,662.386 1460.14,664.386 1460.7,681.725 1461.25,668.226 1461.81,688.6 1462.37,671.174 1462.93,656.391 1463.49,639.846 1464.05,660.368 1464.61,662.651 1465.17,677.569 1465.73,674.862 1466.29,722.477 1466.85,720.264 1467.41,718.105 1467.97,731.469 1468.52,693.79 1469.08,663.694 1469.64,698.123 1470.2,681.844 1470.76,667.117 1471.32,648.775 1471.88,667.634 1472.44,681.475 1473,683.741 1473.56,683.104 1474.12,687.623 1474.68,718.845 1475.24,731.793 1475.79,728.986 1476.35,745.422 1476.91,743.938 1477.47,691.855 1478.03,722.5 1478.59,737.671 1479.15,737.99 1479.71,737.555 1480.27,722.589 1480.83,718.188 1481.39,700.294 1481.95,701.538 1482.51,702.281 1483.07,702.311 1483.62,717.145 1484.18,711.298 1484.74,691.209 1485.3,673.036 1485.86,694.322 1486.42,708.522 1486.98,689.685 1487.54,707.028 1488.1,738.988 1488.66,720.353 1489.22,719.14 1489.78,704.101 1490.34,701.555 1490.89,731.355 1491.45,696.572 1492.01,663.345 1492.57,662.043 1493.13,680.048 1493.69,680.648 1494.25,664.043 1494.81,666.685 1495.37,666.517 1495.93,647.569 1496.49,647.69 1497.05,618.638 1497.61,636.385 1498.16,639.517 1498.72,640.916 1499.28,624.165 1499.84,641.131 1500.4,647.5 1500.96,680.182 1501.52,728.428 1502.08,709.245 1502.64,660.329 1503.2,662.634 1503.76,681.264 1504.32,683.752 1504.88,668.067 1505.44,617.998 1505.99,660.044 1506.55,662.727 1507.11,646.681 1507.67,648.761 1508.23,651.487 1508.79,638.436 1509.35,640.639 1509.91,641.159 1510.47,643.365 1511.03,675.736 1511.59,660.759 1512.15,647.386 1512.71,665.067 1513.26,670.768 1513.82,670.166 1514.38,671.015 1514.94,640.811 1515.5,644.229 1516.06,647.726 1516.62,650.027 1517.18,648.854 1517.74,684.183 1518.3,712.615 1518.86,715.271 1519.42,683.086 1519.98,695.338 1520.53,696.133 1521.09,677.322 1521.65,691.702 1522.21,675.861 1522.77,661.943 1523.33,666.516 1523.89,652.19 1524.45,640.742 1525.01,640.856 1525.57,659.269 1526.13,677.662 1526.69,678.69 1527.25,708.83 1527.81,704.565 1528.36,688.556 1528.92,688.602 1529.48,688.18 1530.04,689.7 1530.6,691.909 1531.16,707.695 1531.72,673.602 1532.28,693.821 1532.84,741.914 1533.4,738.876 1533.96,756.819 1534.52,722.39 1535.08,740.055 1535.63,740.599 1536.19,783.928 1536.75,796.705 1537.31,789.574 1537.87,799.423 1538.43,793.324 1538.99,802.229 1539.55,797.556 1540.11,776.101 1540.67,770.693 1541.23,780.7 1541.79,794.694 1542.35,788.218 1542.9,783.307 1543.46,824.051 1544.02,783.644 1544.58,780.626 1545.14,757.582 1545.7,768.032 1546.26,746.337 1546.82,744.4 1547.38,724.434 1547.94,723.001 1548.5,720.41 1549.06,685.193 1549.62,683.017 1550.18,681.852 1550.73,666.567 1551.29,656.673 1551.85,656.953 1552.41,624.458 1552.97,573.259 1553.53,595.435 1554.09,599.707 1554.65,619.467 1555.21,607.695 1555.77,626.851 1556.33,629.794 1556.89,648.544 1557.45,652.15 1558,671.122 1558.56,658.503 1559.12,659.586 1559.68,625.59 1560.24,630.442 1560.8,647.688 1561.36,667.35 1561.92,649.301 1562.48,651.562 1563.04,651.77 1563.6,656.563 1564.16,661.374 1564.72,662.756 1565.28,665.701 1565.83,653.613 1566.39,607.315 1566.95,595.183 1567.51,569.472 1568.07,561.143 1568.63,567.531 1569.19,559.745 1569.75,582.195 1570.31,603.844 1570.87,608.235 1571.43,599.355 1571.99,602.483 1572.55,640.193 1573.1,640.7 1573.66,656.735 1574.22,657.438 1574.78,677.078 1575.34,662.576 1575.9,694.327 1576.46,661.925 1577.02,681.046 1577.58,680.073 1578.14,682.82 1578.7,687.379 1579.26,690.474 1579.82,706.054 1580.37,734.122 1580.93,745.536 1581.49,740.278 1582.05,754.437 1582.61,765.44 1583.17,759.153 1583.73,756.29 1584.29,735.018 1584.85,754.214 1585.41,767.586 1585.97,795.118 1586.53,838.494 1587.09,814.99 1587.65,840.315 1588.2,832.764 1588.76,827.23 1589.32,834.168 1589.88,793.045 1590.44,789.089 1591,801.432 1591.56,765.249 1592.12,763.617 1592.68,743.587 1593.24,742.661 1593.8,751.438 1594.36,751.083 1594.92,766.477 1595.47,746.436 1596.03,709.92 1596.59,693.033 1597.15,678.517 1597.71,680.724 1598.27,662.937 1598.83,683.701 1599.39,686.215 1599.95,686.776 1600.51,700.273 1601.07,683.76 1601.63,666.174 1602.19,649.859 1602.74,653.308 1603.3,651.275 1603.86,654.782 1604.42,622.726 1604.98,611.654 1605.54,600.935 1606.1,604.46 1606.66,622.79 1607.22,646.11 1607.78,647.813 1608.34,650.42 1608.9,633.375 1609.46,605.482 1610.02,610.096 1610.57,629.951 1611.13,646.714 1611.69,651.499 1612.25,622.085 1612.81,624.79 1613.37,627.932 1613.93,611.459 1614.49,624.39 1615.05,641.479 1615.61,659.515 1616.17,627.641 1616.73,647.284 1617.29,693.871 1617.84,694.498 1618.4,695.69 1618.96,679.451 1619.52,714.267 1620.08,708.926 1620.64,708.12 1621.2,655.975 1621.76,660.637 1622.32,677.355 1622.88,659.685 1623.44,644.356 1624,631.676 1624.56,683.214 1625.11,682.486 1625.67,697.512 1626.23,727.949 1626.79,742.791 1627.35,741.481 1627.91,754.599 1628.47,780.689 1629.03,789.447 1629.59,816.944 1630.15,806.023 1630.71,799.857 1631.27,760.392 1631.83,805.054 1632.39,795.302 1632.94,774.363 1633.5,804.243 1634.06,813.31 1634.62,758.605 1635.18,735.208 1635.74,715.353 1636.3,716.608 1636.86,731.326 1637.42,694.274 1637.98,693.181 1638.54,657.581 1639.1,627.065 1639.66,660.613 1640.21,663.671 1640.77,665.39 1641.33,679.594 1641.89,696.347 1642.45,693.539 1643.01,709.903 1643.57,657.429 1644.13,656.569 1644.69,688.899 1645.25,703.888 1645.81,686.741 1646.37,685.223 1646.93,669.383 1647.48,684.466 1648.04,667.738 1648.6,669.157 1649.16,656.647 1649.72,658.132 1650.28,639.583 1650.84,643.506 1651.4,627.985 1651.96,629.791 1652.52,662.299 1653.08,630.18 1653.64,645.656 1654.2,663.496 1654.76,725.504 1655.31,722.263 1655.87,720.121 1656.43,733.918 1656.99,730.887 1657.55,727.634 1658.11,742.485 1658.67,738.805 1659.23,737.827 1659.79,732.313 1660.35,727.724 1660.91,725.785 1661.47,739.289 1662.03,715.639 1662.58,697.283 1663.14,647.202 1663.7,634.366 1664.26,623.009 1664.82,612.387 1665.38,600.8 1665.94,573.494 1666.5,577.732 1667.06,550.224 1667.62,575.77 1668.18,597.587 1668.74,619.265 1669.3,592.058 1669.85,613.856 1670.41,647.997 1670.97,649.162 1671.53,620.27 1672.09,640.536 1672.65,646.133 1673.21,628.599 1673.77,628.532 1674.33,631.281 1674.89,679.94 1675.45,680.978 1676.01,648.665 1676.57,649.809 1677.13,663.01 1677.68,647.878 1678.24,664.24 1678.8,649.601 1679.36,668.924 1679.92,688.375 1680.48,703.271 1681.04,718.724 1681.6,703.525 1682.16,683.671 1682.72,648.753 1683.28,650.232 1683.84,670.406 1684.4,673.908 1684.95,659.505 1685.51,627.871 1686.07,615.703 1686.63,651.701 1687.19,653.91 1687.75,638.306 1688.31,661.944 1688.87,658.968 1689.43,646.665 1689.99,615.346 1690.55,616.672 1691.11,606.824 1691.67,627.112 1692.23,630.681 1692.78,633.802 1693.34,604.111 1693.9,605.771 1694.46,626.253 1695.02,662.689 1695.58,647.894 1696.14,647.432 1696.7,648.135 1697.26,664.784 1697.82,680.651 1698.38,650.49 1698.94,652.923 1699.5,654.946 1700.05,643.926 1700.61,695.813 1701.17,713.226 1701.73,745.073 1702.29,728.755 1702.85,774.961 1703.41,801.936 1703.97,793.801 1704.53,771.625 1705.09,750.654 1705.65,699.83 1706.21,717.912 1706.77,767.477 1707.32,776.85 1707.88,790.309 1708.44,799.652 1709,808.054 1709.56,830.127 1710.12,774.511 1710.68,739.098 1711.24,735.157 1711.8,733.461 1712.36,729.304 1712.92,709.991 1713.48,691.813 1714.04,658.709 1714.6,658.912 1715.15,662.744 1715.71,647.206 1716.27,630.894 1716.83,649.545 1717.39,652.836 1717.95,655.936 1718.51,674.412 1719.07,658.739 1719.63,680.297 1720.19,666.247 1720.75,668.184 1721.31,655.726 1721.87,624.449 1722.42,639.665 1722.98,639.499 1723.54,640.476 1724.1,627.074 1724.66,631.821 1725.22,637.796 1725.78,660.738 1726.34,645.037 1726.9,635.247 1727.46,638.245 1728.02,640.392 1728.58,639.098 1729.14,657.394 1729.69,676.663 1730.25,644.051 1730.81,642.94 1731.37,659.146 1731.93,692.502 1732.49,676.807 1733.05,663.147 1733.61,662.931 1734.17,647.229 1734.73,667.612 1735.29,702.034 1735.85,699.332 1736.41,698.681 1736.97,715.043 1737.52,731.513 1738.08,729.37 1738.64,726.773 1739.2,742.478 1739.76,787.052 1740.32,700.056 1740.88,715.993 1741.44,778.639 1742,820.622 1742.56,829.533 1743.12,821.137 1743.68,828.153 1744.24,854.012 1744.79,827.939 1745.35,803.517 1745.91,779.772 1746.47,791.494 1747.03,753.133 1747.59,764.3 1748.15,744.59 1748.71,725.069 1749.27,705.781 1749.83,718.709 1750.39,747.22 1750.95,742.553 1751.51,755.478 1752.06,749.289 1752.62,710.601 1753.18,724.329 1753.74,736.108 1754.3,733.123 1754.86,731.607 1755.42,744.073 1755.98,755.719 1756.54,752.591 1757.1,748.029 1757.66,727.672 1758.22,690.964 1758.78,691.931 1759.34,672.787 1759.89,670.006 1760.45,637.148 1761.01,619.379 1761.57,621.439 1762.13,624.096 1762.69,645.655 1763.25,647.178 1763.81,614.215 1764.37,615.064 1764.93,617.015 1765.49,634.998 1766.05,633.223 1766.61,667.204 1767.16,690.578 1767.72,723.225 1768.28,719.387 1768.84,716.761 1769.4,666.609 1769.96,653.446 1770.52,672.535 1771.08,673.24 1771.64,659.737 1772.2,647.334 1772.76,645.803 1773.32,630.15 1773.88,648.223 1774.43,665.912 1774.99,684.692 1775.55,652.533 1776.11,622.797 1776.67,656.098 1777.23,626.534 1777.79,582.368 1778.35,621.022 1778.91,627.86 1779.47,632.819 1780.03,653.2 1780.59,660.114 1781.15,676.463 1781.71,662.264 1782.26,667.359 1782.82,665.855 1783.38,650.52 1783.94,636.492 1784.5,604.853 1785.06,641.135 1785.62,596.348 1786.18,601.838 1786.74,624.119 1787.3,661.695 1787.86,663.025 1788.42,650.182 1788.98,667.569 1789.53,686.188 1790.09,685.545 1790.65,686.243 1791.21,669.055 1791.77,654.619 1792.33,674.83 1792.89,705.514 1793.45,690.06 1794.01,672.269 1794.57,688.893 1795.13,722.092 1795.69,703.6 1796.25,671.762 1796.8,674.706 1797.36,707.345 1797.92,725.119 1798.48,735.462 1799.04,737.149 1799.6,732.022 1800.16,758.889 1800.72,753.904 1801.28,765.978 1801.84,728.281 1802.4,761.093 1802.96,774.046 1803.52,800.471 1804.08,814.025 1804.63,791.608 1805.19,786.82 1805.75,749.286 1806.31,733.899 1806.87,714.382 1807.43,727.033 1807.99,676.906 1808.55,645.517 1809.11,665.416 1809.67,668.095 1810.23,652.27 1810.79,639.825 1811.35,674.292 1811.9,655.706 1812.46,691.805 1813.02,662.337 1813.58,663.847 1814.14,696.778 1814.7,712.709 1815.26,713.483 1815.82,731.719 1816.38,732.468 1816.94,752.903 1817.5,733.187 1818.06,698.468 1818.62,682.458 1819.18,682.85 1819.73,647.885 1820.29,614.552 1820.85,616.525 1821.41,637.575 1821.97,625.092 1822.53,628.903 1823.09,632.439 1823.65,666.623 1824.21,637.194 1824.77,623.887 1825.33,641.276 1825.89,646.353 1826.45,628.108 1827,614.102 1827.56,584.834 1828.12,586.397 1828.68,542.71 1829.24,534.329 1829.8,543.815 1830.36,554.196 1830.92,560.876 1831.48,596.979 1832.04,636.837 1832.6,636.327 1833.16,674.926 1833.72,658.343 1834.27,664.716 1834.83,664.608 1835.39,677.41 1835.95,649.562 1836.51,651.63 1837.07,638.669 1837.63,638.004 1838.19,625.313 \"/>\n<path clip-path=\"url(#clip903)\" d=\"M720.247 690.191 L720.806 690.191 L721.365 690.191 L721.924 690.191 L722.484 690.191 L723.043 690.191 L723.602 690.191 L724.161 690.191 L724.721 690.191 L725.28 690.191 L725.839 690.191 L726.398 690.191 L726.958 690.191 L727.517 690.191 L728.076 690.191 L728.635 690.191 L729.195 690.191 L729.754 690.191 L730.313 690.191 L730.872 690.191 L731.432 690.191 L731.991 690.191 L732.55 690.191 L733.109 690.191 L733.669 690.191 L734.228 690.191 L734.787 690.191 L735.346 690.191 L735.906 690.191 L736.465 690.191 L737.024 690.191 L737.583 690.191 L738.143 690.191 L738.702 690.191 L739.261 690.191 L739.82 690.191 L740.38 690.191 L740.939 690.191 L741.498 690.191 L742.057 690.191 L742.617 690.191 L743.176 690.191 L743.735 690.191 L744.294 690.191 L744.854 690.191 L745.413 690.191 L745.972 690.191 L746.531 690.191 L747.091 690.191 L747.65 690.191 L748.209 690.191 L748.768 690.191 L749.328 690.191 L749.887 690.191 L750.446 690.191 L751.005 690.191 L751.565 690.191 L752.124 690.191 L752.683 690.191 L753.242 690.191 L753.802 690.191 L754.361 690.191 L754.92 690.191 L755.479 690.191 L756.039 690.191 L756.598 690.191 L757.157 690.191 L757.716 690.191 L758.276 690.191 L758.835 690.191 L759.394 690.191 L759.953 690.191 L760.513 690.191 L761.072 690.191 L761.631 690.191 L762.19 690.191 L762.75 690.191 L763.309 690.191 L763.868 690.191 L764.427 690.191 L764.987 690.191 L765.546 690.191 L766.105 690.191 L766.664 690.191 L767.224 690.191 L767.783 690.191 L768.342 690.191 L768.901 690.191 L769.461 690.191 L770.02 690.191 L770.579 690.191 L771.138 690.191 L771.698 690.191 L772.257 690.191 L772.816 690.191 L773.375 690.191 L773.935 690.191 L774.494 690.191 L775.053 690.191 L775.612 690.191 L776.172 690.191 L776.731 690.191 L777.29 690.191 L777.849 690.191 L778.409 690.191 L778.968 690.191 L779.527 690.191 L780.086 690.191 L780.646 690.191 L781.205 690.191 L781.764 690.191 L782.323 690.191 L782.883 690.191 L783.442 690.191 L784.001 690.191 L784.56 690.191 L785.12 690.191 L785.679 690.191 L786.238 690.191 L786.797 690.191 L787.357 690.191 L787.916 690.191 L788.475 690.191 L789.034 690.191 L789.594 690.191 L790.153 690.191 L790.712 690.191 L791.271 690.191 L791.831 690.191 L792.39 690.191 L792.949 690.191 L793.508 690.191 L794.068 690.191 L794.627 690.191 L795.186 690.191 L795.745 690.191 L796.305 690.191 L796.864 690.191 L797.423 690.191 L797.982 690.191 L798.542 690.191 L799.101 690.191 L799.66 690.191 L800.219 690.191 L800.779 690.191 L801.338 690.191 L801.897 690.191 L802.456 690.191 L803.016 690.191 L803.575 690.191 L804.134 690.191 L804.693 690.191 L805.253 690.191 L805.812 690.191 L806.371 690.191 L806.931 690.191 L807.49 690.191 L808.049 690.191 L808.608 690.191 L809.168 690.191 L809.727 690.191 L810.286 690.191 L810.845 690.191 L811.405 690.191 L811.964 690.191 L812.523 690.191 L813.082 690.191 L813.642 690.191 L814.201 690.191 L814.76 690.191 L815.319 690.191 L815.879 690.191 L816.438 690.191 L816.997 690.191 L817.556 690.191 L818.116 690.191 L818.675 690.191 L819.234 690.191 L819.793 690.191 L820.353 690.191 L820.912 690.191 L821.471 690.191 L822.03 690.191 L822.59 690.191 L823.149 690.191 L823.708 690.191 L824.267 690.191 L824.827 690.191 L825.386 690.191 L825.945 690.191 L826.504 690.191 L827.064 690.191 L827.623 690.191 L828.182 690.191 L828.741 690.191 L829.301 690.191 L829.86 690.191 L830.419 690.191 L830.978 690.191 L831.538 690.191 L832.097 690.191 L832.656 690.191 L833.215 690.191 L833.775 690.191 L834.334 690.191 L834.893 690.191 L835.452 690.191 L836.012 690.191 L836.571 690.191 L837.13 690.191 L837.689 690.191 L838.249 690.191 L838.808 690.191 L839.367 690.191 L839.926 690.191 L840.486 690.191 L841.045 690.191 L841.604 690.191 L842.163 690.191 L842.723 690.191 L843.282 690.191 L843.841 690.191 L844.4 690.191 L844.96 690.191 L845.519 690.191 L846.078 690.191 L846.637 690.191 L847.197 690.191 L847.756 690.191 L848.315 690.191 L848.874 690.191 L849.434 690.191 L849.993 690.191 L850.552 690.191 L851.111 690.191 L851.671 690.191 L852.23 690.191 L852.789 690.191 L853.348 690.191 L853.908 690.191 L854.467 690.191 L855.026 690.191 L855.585 690.191 L856.145 690.191 L856.704 690.191 L857.263 690.191 L857.822 690.191 L858.382 690.191 L858.941 690.191 L859.5 690.191 L860.059 690.191 L860.619 690.191 L861.178 690.191 L861.737 690.191 L862.296 690.191 L862.856 690.191 L863.415 690.191 L863.974 690.191 L864.533 690.191 L865.093 690.191 L865.652 690.191 L866.211 690.191 L866.77 690.191 L867.33 690.191 L867.889 690.191 L868.448 690.191 L869.007 690.191 L869.567 690.191 L870.126 690.191 L870.685 690.191 L871.244 690.191 L871.804 690.191 L872.363 690.191 L872.922 690.191 L873.481 690.191 L874.041 690.191 L874.6 690.191 L875.159 690.191 L875.718 690.191 L876.278 690.191 L876.837 690.191 L877.396 690.191 L877.955 690.191 L878.515 690.191 L879.074 690.191 L879.633 690.191 L880.192 690.191 L880.752 690.191 L881.311 690.191 L881.87 690.191 L882.429 690.191 L882.989 690.191 L883.548 690.191 L884.107 690.191 L884.666 690.191 L885.226 690.191 L885.785 690.191 L886.344 690.191 L886.903 690.191 L887.463 690.191 L888.022 690.191 L888.581 690.191 L889.14 690.191 L889.7 690.191 L890.259 690.191 L890.818 690.191 L891.377 690.191 L891.937 690.191 L892.496 690.191 L893.055 690.191 L893.614 690.191 L894.174 690.191 L894.733 690.191 L895.292 690.191 L895.851 690.191 L896.411 690.191 L896.97 690.191 L897.529 690.191 L898.088 690.191 L898.648 690.191 L899.207 690.191 L899.766 690.191 L900.325 690.191 L900.885 690.191 L901.444 690.191 L902.003 690.191 L902.562 690.191 L903.122 690.191 L903.681 690.191 L904.24 690.191 L904.799 690.191 L905.359 690.191 L905.918 690.191 L906.477 690.191 L907.036 690.191 L907.596 690.191 L908.155 690.191 L908.714 690.191 L909.273 690.191 L909.833 690.191 L910.392 690.191 L910.951 690.191 L911.51 690.191 L912.07 690.191 L912.629 690.191 L913.188 690.191 L913.747 690.191 L914.307 690.191 L914.866 690.191 L915.425 690.191 L915.984 690.191 L916.544 690.191 L917.103 690.191 L917.662 690.191 L918.221 690.191 L918.781 690.191 L919.34 690.191 L919.899 690.191 L920.458 690.191 L921.018 690.191 L921.577 690.191 L922.136 690.191 L922.695 690.191 L923.255 690.191 L923.814 690.191 L924.373 690.191 L924.932 690.191 L925.492 690.191 L926.051 690.191 L926.61 690.191 L927.169 690.191 L927.729 690.191 L928.288 690.191 L928.847 690.191 L929.406 690.191 L929.966 690.191 L930.525 690.191 L931.084 690.191 L931.644 690.191 L932.203 690.191 L932.762 690.191 L933.321 690.191 L933.881 690.191 L934.44 690.191 L934.999 690.191 L935.558 690.191 L936.118 690.191 L936.677 690.191 L937.236 690.191 L937.795 690.191 L938.355 690.191 L938.914 690.191 L939.473 690.191 L940.032 690.191 L940.592 690.191 L941.151 690.191 L941.71 690.191 L942.269 690.191 L942.829 690.191 L943.388 690.191 L943.947 690.191 L944.506 690.191 L945.066 690.191 L945.625 690.191 L946.184 690.191 L946.743 690.191 L947.303 690.191 L947.862 690.191 L948.421 690.191 L948.98 690.191 L949.54 690.191 L950.099 690.191 L950.658 690.191 L951.217 690.191 L951.777 690.191 L952.336 690.191 L952.895 690.191 L953.454 690.191 L954.014 690.191 L954.573 690.191 L955.132 690.191 L955.691 690.191 L956.251 690.191 L956.81 690.191 L957.369 690.191 L957.928 690.191 L958.488 690.191 L959.047 690.191 L959.606 690.191 L960.165 690.191 L960.725 690.191 L961.284 690.191 L961.843 690.191 L962.402 690.191 L962.962 690.191 L963.521 690.191 L964.08 690.191 L964.639 690.191 L965.199 690.191 L965.758 690.191 L966.317 690.191 L966.876 690.191 L967.436 690.191 L967.995 690.191 L968.554 690.191 L969.113 690.191 L969.673 690.191 L970.232 690.191 L970.791 690.191 L971.35 690.191 L971.91 690.191 L972.469 690.191 L973.028 690.191 L973.587 690.191 L974.147 690.191 L974.706 690.191 L975.265 690.191 L975.824 690.191 L976.384 690.191 L976.943 690.191 L977.502 690.191 L978.061 690.191 L978.621 690.191 L979.18 690.191 L979.739 690.191 L980.298 690.191 L980.858 690.191 L981.417 690.191 L981.976 690.191 L982.535 690.191 L983.095 690.191 L983.654 690.191 L984.213 690.191 L984.772 690.191 L985.332 690.191 L985.891 690.191 L986.45 690.191 L987.009 690.191 L987.569 690.191 L988.128 690.191 L988.687 690.191 L989.246 690.191 L989.806 690.191 L990.365 690.191 L990.924 690.191 L991.483 690.191 L992.043 690.191 L992.602 690.191 L993.161 690.191 L993.72 690.191 L994.28 690.191 L994.839 690.191 L995.398 690.191 L995.957 690.191 L996.517 690.191 L997.076 690.191 L997.635 690.191 L998.194 690.191 L998.754 690.191 L999.313 690.191 L999.872 690.191 L1000.43 690.191 L1000.99 690.191 L1001.55 690.191 L1002.11 690.191 L1002.67 690.191 L1003.23 690.191 L1003.79 690.191 L1004.35 690.191 L1004.91 690.191 L1005.46 690.191 L1006.02 690.191 L1006.58 690.191 L1007.14 690.191 L1007.7 690.191 L1008.26 690.191 L1008.82 690.191 L1009.38 690.191 L1009.94 690.191 L1010.5 690.191 L1011.06 690.191 L1011.62 690.191 L1012.18 690.191 L1012.73 690.191 L1013.29 690.191 L1013.85 690.191 L1014.41 690.191 L1014.97 690.191 L1015.53 690.191 L1016.09 690.191 L1016.65 690.191 L1017.21 690.191 L1017.77 690.191 L1018.33 690.191 L1018.89 690.191 L1019.45 690.191 L1020.01 690.191 L1020.56 690.191 L1021.12 690.191 L1021.68 690.191 L1022.24 690.191 L1022.8 690.191 L1023.36 690.191 L1023.92 690.191 L1024.48 690.191 L1025.04 690.191 L1025.6 690.191 L1026.16 690.191 L1026.72 690.191 L1027.28 690.191 L1027.83 690.191 L1028.39 690.191 L1028.95 690.191 L1029.51 690.191 L1030.07 690.191 L1030.63 690.191 L1031.19 690.191 L1031.75 690.191 L1032.31 690.191 L1032.87 690.191 L1033.43 690.191 L1033.99 690.191 L1034.55 690.191 L1035.1 690.191 L1035.66 690.191 L1036.22 690.191 L1036.78 690.191 L1037.34 690.191 L1037.9 690.191 L1038.46 690.191 L1039.02 690.191 L1039.58 690.191 L1040.14 690.191 L1040.7 690.191 L1041.26 690.191 L1041.82 690.191 L1042.38 690.191 L1042.93 690.191 L1043.49 690.191 L1044.05 690.191 L1044.61 690.191 L1045.17 690.191 L1045.73 690.191 L1046.29 690.191 L1046.85 690.191 L1047.41 690.191 L1047.97 690.191 L1048.53 690.191 L1049.09 690.191 L1049.65 690.191 L1050.2 690.191 L1050.76 690.191 L1051.32 690.191 L1051.88 690.191 L1052.44 690.191 L1053 690.191 L1053.56 690.191 L1054.12 690.191 L1054.68 690.191 L1055.24 690.191 L1055.8 690.191 L1056.36 690.191 L1056.92 690.191 L1057.48 690.191 L1058.03 690.191 L1058.59 690.191 L1059.15 690.191 L1059.71 690.191 L1060.27 690.191 L1060.83 690.191 L1061.39 690.191 L1061.95 690.191 L1062.51 690.191 L1063.07 690.191 L1063.63 690.191 L1064.19 690.191 L1064.75 690.191 L1065.3 690.191 L1065.86 690.191 L1066.42 690.191 L1066.98 690.191 L1067.54 690.191 L1068.1 690.191 L1068.66 690.191 L1069.22 690.191 L1069.78 690.191 L1070.34 690.191 L1070.9 690.191 L1071.46 690.191 L1072.02 690.191 L1072.57 690.191 L1073.13 690.191 L1073.69 690.191 L1074.25 690.191 L1074.81 690.191 L1075.37 690.191 L1075.93 690.191 L1076.49 690.191 L1077.05 690.191 L1077.61 690.191 L1078.17 690.191 L1078.73 690.191 L1079.29 690.191 L1079.85 690.191 L1080.4 690.191 L1080.96 690.191 L1081.52 690.191 L1082.08 690.191 L1082.64 690.191 L1083.2 690.191 L1083.76 690.191 L1084.32 690.191 L1084.88 690.191 L1085.44 690.191 L1086 690.191 L1086.56 690.191 L1087.12 690.191 L1087.67 690.191 L1088.23 690.191 L1088.79 690.191 L1089.35 690.191 L1089.91 690.191 L1090.47 690.191 L1091.03 690.191 L1091.59 690.191 L1092.15 690.191 L1092.71 690.191 L1093.27 690.191 L1093.83 690.191 L1094.39 690.191 L1094.94 690.191 L1095.5 690.191 L1096.06 690.191 L1096.62 690.191 L1097.18 690.191 L1097.74 690.191 L1098.3 690.191 L1098.86 690.191 L1099.42 690.191 L1099.98 690.191 L1100.54 690.191 L1101.1 690.191 L1101.66 690.191 L1102.22 690.191 L1102.77 690.191 L1103.33 690.191 L1103.89 690.191 L1104.45 690.191 L1105.01 690.191 L1105.57 690.191 L1106.13 690.191 L1106.69 690.191 L1107.25 690.191 L1107.81 690.191 L1108.37 690.191 L1108.93 690.191 L1109.49 690.191 L1110.04 690.191 L1110.6 690.191 L1111.16 690.191 L1111.72 690.191 L1112.28 690.191 L1112.84 690.191 L1113.4 690.191 L1113.96 690.191 L1114.52 690.191 L1115.08 690.191 L1115.64 690.191 L1116.2 690.191 L1116.76 690.191 L1117.31 690.191 L1117.87 690.191 L1118.43 690.191 L1118.99 690.191 L1119.55 690.191 L1120.11 690.191 L1120.67 690.191 L1121.23 690.191 L1121.79 690.191 L1122.35 690.191 L1122.91 690.191 L1123.47 690.191 L1124.03 690.191 L1124.59 690.191 L1125.14 690.191 L1125.7 690.191 L1126.26 690.191 L1126.82 690.191 L1127.38 690.191 L1127.94 690.191 L1128.5 690.191 L1129.06 690.191 L1129.62 690.191 L1130.18 690.191 L1130.74 690.191 L1131.3 690.191 L1131.86 690.191 L1132.41 690.191 L1132.97 690.191 L1133.53 690.191 L1134.09 690.191 L1134.65 690.191 L1135.21 690.191 L1135.77 690.191 L1136.33 690.191 L1136.89 690.191 L1137.45 690.191 L1138.01 690.191 L1138.57 690.191 L1139.13 690.191 L1139.68 690.191 L1140.24 690.191 L1140.8 690.191 L1141.36 690.191 L1141.92 690.191 L1142.48 690.191 L1143.04 690.191 L1143.6 690.191 L1144.16 690.191 L1144.72 690.191 L1145.28 690.191 L1145.84 690.191 L1146.4 690.191 L1146.96 690.191 L1147.51 690.191 L1148.07 690.191 L1148.63 690.191 L1149.19 690.191 L1149.75 690.191 L1150.31 690.191 L1150.87 690.191 L1151.43 690.191 L1151.99 690.191 L1152.55 690.191 L1153.11 690.191 L1153.67 690.191 L1154.23 690.191 L1154.78 690.191 L1155.34 690.191 L1155.9 690.191 L1156.46 690.191 L1157.02 690.191 L1157.58 690.191 L1158.14 690.191 L1158.7 690.191 L1159.26 690.191 L1159.82 690.191 L1160.38 690.191 L1160.94 690.191 L1161.5 690.191 L1162.05 690.191 L1162.61 690.191 L1163.17 690.191 L1163.73 690.191 L1164.29 690.191 L1164.85 690.191 L1165.41 690.191 L1165.97 690.191 L1166.53 690.191 L1167.09 690.191 L1167.65 690.191 L1168.21 690.191 L1168.77 690.191 L1169.33 690.191 L1169.88 690.191 L1170.44 690.191 L1171 690.191 L1171.56 690.191 L1172.12 690.191 L1172.68 690.191 L1173.24 690.191 L1173.8 690.191 L1174.36 690.191 L1174.92 690.191 L1175.48 690.191 L1176.04 690.191 L1176.6 690.191 L1177.15 690.191 L1177.71 690.191 L1178.27 690.191 L1178.83 690.191 L1179.39 690.191 L1179.95 690.191 L1180.51 690.191 L1181.07 690.191 L1181.63 690.191 L1182.19 690.191 L1182.75 690.191 L1183.31 690.191 L1183.87 690.191 L1184.43 690.191 L1184.98 690.191 L1185.54 690.191 L1186.1 690.191 L1186.66 690.191 L1187.22 690.191 L1187.78 690.191 L1188.34 690.191 L1188.9 690.191 L1189.46 690.191 L1190.02 690.191 L1190.58 690.191 L1191.14 690.191 L1191.7 690.191 L1192.25 690.191 L1192.81 690.191 L1193.37 690.191 L1193.93 690.191 L1194.49 690.191 L1195.05 690.191 L1195.61 690.191 L1196.17 690.191 L1196.73 690.191 L1197.29 690.191 L1197.85 690.191 L1198.41 690.191 L1198.97 690.191 L1199.52 690.191 L1200.08 690.191 L1200.64 690.191 L1201.2 690.191 L1201.76 690.191 L1202.32 690.191 L1202.88 690.191 L1203.44 690.191 L1204 690.191 L1204.56 690.191 L1205.12 690.191 L1205.68 690.191 L1206.24 690.191 L1206.8 690.191 L1207.35 690.191 L1207.91 690.191 L1208.47 690.191 L1209.03 690.191 L1209.59 690.191 L1210.15 690.191 L1210.71 690.191 L1211.27 690.191 L1211.83 690.191 L1212.39 690.191 L1212.95 690.191 L1213.51 690.191 L1214.07 690.191 L1214.62 690.191 L1215.18 690.191 L1215.74 690.191 L1216.3 690.191 L1216.86 690.191 L1217.42 690.191 L1217.98 690.191 L1218.54 690.191 L1219.1 690.191 L1219.66 690.191 L1220.22 690.191 L1220.78 690.191 L1221.34 690.191 L1221.89 690.191 L1222.45 690.191 L1223.01 690.191 L1223.57 690.191 L1224.13 690.191 L1224.69 690.191 L1225.25 690.191 L1225.81 690.191 L1226.37 690.191 L1226.93 690.191 L1227.49 690.191 L1228.05 690.191 L1228.61 690.191 L1229.17 690.191 L1229.72 690.191 L1230.28 690.191 L1230.84 690.191 L1231.4 690.191 L1231.96 690.191 L1232.52 690.191 L1233.08 690.191 L1233.64 690.191 L1234.2 690.191 L1234.76 690.191 L1235.32 690.191 L1235.88 690.191 L1236.44 690.191 L1236.99 690.191 L1237.55 690.191 L1238.11 690.191 L1238.67 690.191 L1239.23 690.191 L1239.79 690.191 L1240.35 690.191 L1240.91 690.191 L1241.47 690.191 L1242.03 690.191 L1242.59 690.191 L1243.15 690.191 L1243.71 690.191 L1244.26 690.191 L1244.82 690.191 L1245.38 690.191 L1245.94 690.191 L1246.5 690.191 L1247.06 690.191 L1247.62 690.191 L1248.18 690.191 L1248.74 690.191 L1249.3 690.191 L1249.86 690.191 L1250.42 690.191 L1250.98 690.191 L1251.54 690.191 L1252.09 690.191 L1252.65 690.191 L1253.21 690.191 L1253.77 690.191 L1254.33 690.191 L1254.89 690.191 L1255.45 690.191 L1256.01 690.191 L1256.57 690.191 L1257.13 690.191 L1257.69 690.191 L1258.25 690.191 L1258.81 690.191 L1259.36 690.191 L1259.92 690.191 L1260.48 690.191 L1261.04 690.191 L1261.6 690.191 L1262.16 690.191 L1262.72 690.191 L1263.28 690.191 L1263.84 690.191 L1264.4 690.191 L1264.96 690.191 L1265.52 690.191 L1266.08 690.191 L1266.63 690.191 L1267.19 690.191 L1267.75 690.191 L1268.31 690.191 L1268.87 690.191 L1269.43 690.191 L1269.99 690.191 L1270.55 690.191 L1271.11 690.191 L1271.67 690.191 L1272.23 690.191 L1272.79 690.191 L1273.35 690.191 L1273.91 690.191 L1274.46 690.191 L1275.02 690.191 L1275.58 690.191 L1276.14 690.191 L1276.7 690.191 L1277.26 690.191 L1277.82 690.191 L1278.38 690.191 L1278.94 690.191 L1279.5 690.191 L1280.06 690.191 L1280.62 690.191 L1281.18 690.191 L1281.73 690.191 L1282.29 690.191 L1282.85 690.191 L1283.41 690.191 L1283.97 690.191 L1284.53 690.191 L1285.09 690.191 L1285.65 690.191 L1286.21 690.191 L1286.77 690.191 L1287.33 690.191 L1287.89 690.191 L1288.45 690.191 L1289 690.191 L1289.56 690.191 L1290.12 690.191 L1290.68 690.191 L1291.24 690.191 L1291.8 690.191 L1292.36 690.191 L1292.92 690.191 L1293.48 690.191 L1294.04 690.191 L1294.6 690.191 L1295.16 690.191 L1295.72 690.191 L1296.28 690.191 L1296.83 690.191 L1297.39 690.191 L1297.95 690.191 L1298.51 690.191 L1299.07 690.191 L1299.63 690.191 L1300.19 690.191 L1300.75 690.191 L1301.31 690.191 L1301.87 690.191 L1302.43 690.191 L1302.99 690.191 L1303.55 690.191 L1304.1 690.191 L1304.66 690.191 L1305.22 690.191 L1305.78 690.191 L1306.34 690.191 L1306.9 690.191 L1307.46 690.191 L1308.02 690.191 L1308.58 690.191 L1309.14 690.191 L1309.7 690.191 L1310.26 690.191 L1310.82 690.191 L1311.38 690.191 L1311.93 690.191 L1312.49 690.191 L1313.05 690.191 L1313.61 690.191 L1314.17 690.191 L1314.73 690.191 L1315.29 690.191 L1315.85 690.191 L1316.41 690.191 L1316.97 690.191 L1317.53 690.191 L1318.09 690.191 L1318.65 690.191 L1319.2 690.191 L1319.76 690.191 L1320.32 690.191 L1320.88 690.191 L1321.44 690.191 L1322 690.191 L1322.56 690.191 L1323.12 690.191 L1323.68 690.191 L1324.24 690.191 L1324.8 690.191 L1325.36 690.191 L1325.92 690.191 L1326.47 690.191 L1327.03 690.191 L1327.59 690.191 L1328.15 690.191 L1328.71 690.191 L1329.27 690.191 L1329.83 690.191 L1330.39 690.191 L1330.95 690.191 L1331.51 690.191 L1332.07 690.191 L1332.63 690.191 L1333.19 690.191 L1333.75 690.191 L1334.3 690.191 L1334.86 690.191 L1335.42 690.191 L1335.98 690.191 L1336.54 690.191 L1337.1 690.191 L1337.66 690.191 L1338.22 690.191 L1338.78 690.191 L1339.34 690.191 L1339.9 690.191 L1340.46 690.191 L1341.02 690.191 L1341.57 690.191 L1342.13 690.191 L1342.69 690.191 L1343.25 690.191 L1343.81 690.191 L1344.37 690.191 L1344.93 690.191 L1345.49 690.191 L1346.05 690.191 L1346.61 690.191 L1347.17 690.191 L1347.73 690.191 L1348.29 690.191 L1348.84 690.191 L1349.4 690.191 L1349.96 690.191 L1350.52 690.191 L1351.08 690.191 L1351.64 690.191 L1352.2 690.191 L1352.76 690.191 L1353.32 690.191 L1353.88 690.191 L1354.44 690.191 L1355 690.191 L1355.56 690.191 L1356.12 690.191 L1356.67 690.191 L1357.23 690.191 L1357.79 690.191 L1358.35 690.191 L1358.91 690.191 L1359.47 690.191 L1360.03 690.191 L1360.59 690.191 L1361.15 690.191 L1361.71 690.191 L1362.27 690.191 L1362.83 690.191 L1363.39 690.191 L1363.94 690.191 L1364.5 690.191 L1365.06 690.191 L1365.62 690.191 L1366.18 690.191 L1366.74 690.191 L1367.3 690.191 L1367.86 690.191 L1368.42 690.191 L1368.98 690.191 L1369.54 690.191 L1370.1 690.191 L1370.66 690.191 L1371.21 690.191 L1371.77 690.191 L1372.33 690.191 L1372.89 690.191 L1373.45 690.191 L1374.01 690.191 L1374.57 690.191 L1375.13 690.191 L1375.69 690.191 L1376.25 690.191 L1376.81 690.191 L1377.37 690.191 L1377.93 690.191 L1378.49 690.191 L1379.04 690.191 L1379.6 690.191 L1380.16 690.191 L1380.72 690.191 L1381.28 690.191 L1381.84 690.191 L1382.4 690.191 L1382.96 690.191 L1383.52 690.191 L1384.08 690.191 L1384.64 690.191 L1385.2 690.191 L1385.76 690.191 L1386.31 690.191 L1386.87 690.191 L1387.43 690.191 L1387.99 690.191 L1388.55 690.191 L1389.11 690.191 L1389.67 690.191 L1390.23 690.191 L1390.79 690.191 L1391.35 690.191 L1391.91 690.191 L1392.47 690.191 L1393.03 690.191 L1393.58 690.191 L1394.14 690.191 L1394.7 690.191 L1395.26 690.191 L1395.82 690.191 L1396.38 690.191 L1396.94 690.191 L1397.5 690.191 L1398.06 690.191 L1398.62 690.191 L1399.18 690.191 L1399.74 690.191 L1400.3 690.191 L1400.86 690.191 L1401.41 690.191 L1401.97 690.191 L1402.53 690.191 L1403.09 690.191 L1403.65 690.191 L1404.21 690.191 L1404.77 690.191 L1405.33 690.191 L1405.89 690.191 L1406.45 690.191 L1407.01 690.191 L1407.57 690.191 L1408.13 690.191 L1408.68 690.191 L1409.24 690.191 L1409.8 690.191 L1410.36 690.191 L1410.92 690.191 L1411.48 690.191 L1412.04 690.191 L1412.6 690.191 L1413.16 690.191 L1413.72 690.191 L1414.28 690.191 L1414.84 690.191 L1415.4 690.191 L1415.95 690.191 L1416.51 690.191 L1417.07 690.191 L1417.63 690.191 L1418.19 690.191 L1418.75 690.191 L1419.31 690.191 L1419.87 690.191 L1420.43 690.191 L1420.99 690.191 L1421.55 690.191 L1422.11 690.191 L1422.67 690.191 L1423.23 690.191 L1423.78 690.191 L1424.34 690.191 L1424.9 690.191 L1425.46 690.191 L1426.02 690.191 L1426.58 690.191 L1427.14 690.191 L1427.7 690.191 L1428.26 690.191 L1428.82 690.191 L1429.38 690.191 L1429.94 690.191 L1430.5 690.191 L1431.05 690.191 L1431.61 690.191 L1432.17 690.191 L1432.73 690.191 L1433.29 690.191 L1433.85 690.191 L1434.41 690.191 L1434.97 690.191 L1435.53 690.191 L1436.09 690.191 L1436.65 690.191 L1437.21 690.191 L1437.77 690.191 L1438.33 690.191 L1438.88 690.191 L1439.44 690.191 L1440 690.191 L1440.56 690.191 L1441.12 690.191 L1441.68 690.191 L1442.24 690.191 L1442.8 690.191 L1443.36 690.191 L1443.92 690.191 L1444.48 690.191 L1445.04 690.191 L1445.6 690.191 L1446.15 690.191 L1446.71 690.191 L1447.27 690.191 L1447.83 690.191 L1448.39 690.191 L1448.95 690.191 L1449.51 690.191 L1450.07 690.191 L1450.63 690.191 L1451.19 690.191 L1451.75 690.191 L1452.31 690.191 L1452.87 690.191 L1453.42 690.191 L1453.98 690.191 L1454.54 690.191 L1455.1 690.191 L1455.66 690.191 L1456.22 690.191 L1456.78 690.191 L1457.34 690.191 L1457.9 690.191 L1458.46 690.191 L1459.02 690.191 L1459.58 690.191 L1460.14 690.191 L1460.7 690.191 L1461.25 690.191 L1461.81 690.191 L1462.37 690.191 L1462.93 690.191 L1463.49 690.191 L1464.05 690.191 L1464.61 690.191 L1465.17 690.191 L1465.73 690.191 L1466.29 690.191 L1466.85 690.191 L1467.41 690.191 L1467.97 690.191 L1468.52 690.191 L1469.08 690.191 L1469.64 690.191 L1470.2 690.191 L1470.76 690.191 L1471.32 690.191 L1471.88 690.191 L1472.44 690.191 L1473 690.191 L1473.56 690.191 L1474.12 690.191 L1474.68 690.191 L1475.24 690.191 L1475.79 690.191 L1476.35 690.191 L1476.91 690.191 L1477.47 690.191 L1478.03 690.191 L1478.59 690.191 L1479.15 690.191 L1479.71 690.191 L1480.27 690.191 L1480.83 690.191 L1481.39 690.191 L1481.95 690.191 L1482.51 690.191 L1483.07 690.191 L1483.62 690.191 L1484.18 690.191 L1484.74 690.191 L1485.3 690.191 L1485.86 690.191 L1486.42 690.191 L1486.98 690.191 L1487.54 690.191 L1488.1 690.191 L1488.66 690.191 L1489.22 690.191 L1489.78 690.191 L1490.34 690.191 L1490.89 690.191 L1491.45 690.191 L1492.01 690.191 L1492.57 690.191 L1493.13 690.191 L1493.69 690.191 L1494.25 690.191 L1494.81 690.191 L1495.37 690.191 L1495.93 690.191 L1496.49 690.191 L1497.05 690.191 L1497.61 690.191 L1498.16 690.191 L1498.72 690.191 L1499.28 690.191 L1499.84 690.191 L1500.4 690.191 L1500.96 690.191 L1501.52 690.191 L1502.08 690.191 L1502.64 690.191 L1503.2 690.191 L1503.76 690.191 L1504.32 690.191 L1504.88 690.191 L1505.44 690.191 L1505.99 690.191 L1506.55 690.191 L1507.11 690.191 L1507.67 690.191 L1508.23 690.191 L1508.79 690.191 L1509.35 690.191 L1509.91 690.191 L1510.47 690.191 L1511.03 690.191 L1511.59 690.191 L1512.15 690.191 L1512.71 690.191 L1513.26 690.191 L1513.82 690.191 L1514.38 690.191 L1514.94 690.191 L1515.5 690.191 L1516.06 690.191 L1516.62 690.191 L1517.18 690.191 L1517.74 690.191 L1518.3 690.191 L1518.86 690.191 L1519.42 690.191 L1519.98 690.191 L1520.53 690.191 L1521.09 690.191 L1521.65 690.191 L1522.21 690.191 L1522.77 690.191 L1523.33 690.191 L1523.89 690.191 L1524.45 690.191 L1525.01 690.191 L1525.57 690.191 L1526.13 690.191 L1526.69 690.191 L1527.25 690.191 L1527.81 690.191 L1528.36 690.191 L1528.92 690.191 L1529.48 690.191 L1530.04 690.191 L1530.6 690.191 L1531.16 690.191 L1531.72 690.191 L1532.28 690.191 L1532.84 690.191 L1533.4 690.191 L1533.96 690.191 L1534.52 690.191 L1535.08 690.191 L1535.63 690.191 L1536.19 690.191 L1536.75 690.191 L1537.31 690.191 L1537.87 690.191 L1538.43 690.191 L1538.99 690.191 L1539.55 690.191 L1540.11 690.191 L1540.67 690.191 L1541.23 690.191 L1541.79 690.191 L1542.35 690.191 L1542.9 690.191 L1543.46 690.191 L1544.02 690.191 L1544.58 690.191 L1545.14 690.191 L1545.7 690.191 L1546.26 690.191 L1546.82 690.191 L1547.38 690.191 L1547.94 690.191 L1548.5 690.191 L1549.06 690.191 L1549.62 690.191 L1550.18 690.191 L1550.73 690.191 L1551.29 690.191 L1551.85 690.191 L1552.41 690.191 L1552.97 690.191 L1553.53 690.191 L1554.09 690.191 L1554.65 690.191 L1555.21 690.191 L1555.77 690.191 L1556.33 690.191 L1556.89 690.191 L1557.45 690.191 L1558 690.191 L1558.56 690.191 L1559.12 690.191 L1559.68 690.191 L1560.24 690.191 L1560.8 690.191 L1561.36 690.191 L1561.92 690.191 L1562.48 690.191 L1563.04 690.191 L1563.6 690.191 L1564.16 690.191 L1564.72 690.191 L1565.28 690.191 L1565.83 690.191 L1566.39 690.191 L1566.95 690.191 L1567.51 690.191 L1568.07 690.191 L1568.63 690.191 L1569.19 690.191 L1569.75 690.191 L1570.31 690.191 L1570.87 690.191 L1571.43 690.191 L1571.99 690.191 L1572.55 690.191 L1573.1 690.191 L1573.66 690.191 L1574.22 690.191 L1574.78 690.191 L1575.34 690.191 L1575.9 690.191 L1576.46 690.191 L1577.02 690.191 L1577.58 690.191 L1578.14 690.191 L1578.7 690.191 L1579.26 690.191 L1579.82 690.191 L1580.37 690.191 L1580.93 690.191 L1581.49 690.191 L1582.05 690.191 L1582.61 690.191 L1583.17 690.191 L1583.73 690.191 L1584.29 690.191 L1584.85 690.191 L1585.41 690.191 L1585.97 690.191 L1586.53 690.191 L1587.09 690.191 L1587.65 690.191 L1588.2 690.191 L1588.76 690.191 L1589.32 690.191 L1589.88 690.191 L1590.44 690.191 L1591 690.191 L1591.56 690.191 L1592.12 690.191 L1592.68 690.191 L1593.24 690.191 L1593.8 690.191 L1594.36 690.191 L1594.92 690.191 L1595.47 690.191 L1596.03 690.191 L1596.59 690.191 L1597.15 690.191 L1597.71 690.191 L1598.27 690.191 L1598.83 690.191 L1599.39 690.191 L1599.95 690.191 L1600.51 690.191 L1601.07 690.191 L1601.63 690.191 L1602.19 690.191 L1602.74 690.191 L1603.3 690.191 L1603.86 690.191 L1604.42 690.191 L1604.98 690.191 L1605.54 690.191 L1606.1 690.191 L1606.66 690.191 L1607.22 690.191 L1607.78 690.191 L1608.34 690.191 L1608.9 690.191 L1609.46 690.191 L1610.02 690.191 L1610.57 690.191 L1611.13 690.191 L1611.69 690.191 L1612.25 690.191 L1612.81 690.191 L1613.37 690.191 L1613.93 690.191 L1614.49 690.191 L1615.05 690.191 L1615.61 690.191 L1616.17 690.191 L1616.73 690.191 L1617.29 690.191 L1617.84 690.191 L1618.4 690.191 L1618.96 690.191 L1619.52 690.191 L1620.08 690.191 L1620.64 690.191 L1621.2 690.191 L1621.76 690.191 L1622.32 690.191 L1622.88 690.191 L1623.44 690.191 L1624 690.191 L1624.56 690.191 L1625.11 690.191 L1625.67 690.191 L1626.23 690.191 L1626.79 690.191 L1627.35 690.191 L1627.91 690.191 L1628.47 690.191 L1629.03 690.191 L1629.59 690.191 L1630.15 690.191 L1630.71 690.191 L1631.27 690.191 L1631.83 690.191 L1632.39 690.191 L1632.94 690.191 L1633.5 690.191 L1634.06 690.191 L1634.62 690.191 L1635.18 690.191 L1635.74 690.191 L1636.3 690.191 L1636.86 690.191 L1637.42 690.191 L1637.98 690.191 L1638.54 690.191 L1639.1 690.191 L1639.66 690.191 L1640.21 690.191 L1640.77 690.191 L1641.33 690.191 L1641.89 690.191 L1642.45 690.191 L1643.01 690.191 L1643.57 690.191 L1644.13 690.191 L1644.69 690.191 L1645.25 690.191 L1645.81 690.191 L1646.37 690.191 L1646.93 690.191 L1647.48 690.191 L1648.04 690.191 L1648.6 690.191 L1649.16 690.191 L1649.72 690.191 L1650.28 690.191 L1650.84 690.191 L1651.4 690.191 L1651.96 690.191 L1652.52 690.191 L1653.08 690.191 L1653.64 690.191 L1654.2 690.191 L1654.76 690.191 L1655.31 690.191 L1655.87 690.191 L1656.43 690.191 L1656.99 690.191 L1657.55 690.191 L1658.11 690.191 L1658.67 690.191 L1659.23 690.191 L1659.79 690.191 L1660.35 690.191 L1660.91 690.191 L1661.47 690.191 L1662.03 690.191 L1662.58 690.191 L1663.14 690.191 L1663.7 690.191 L1664.26 690.191 L1664.82 690.191 L1665.38 690.191 L1665.94 690.191 L1666.5 690.191 L1667.06 690.191 L1667.62 690.191 L1668.18 690.191 L1668.74 690.191 L1669.3 690.191 L1669.85 690.191 L1670.41 690.191 L1670.97 690.191 L1671.53 690.191 L1672.09 690.191 L1672.65 690.191 L1673.21 690.191 L1673.77 690.191 L1674.33 690.191 L1674.89 690.191 L1675.45 690.191 L1676.01 690.191 L1676.57 690.191 L1677.13 690.191 L1677.68 690.191 L1678.24 690.191 L1678.8 690.191 L1679.36 690.191 L1679.92 690.191 L1680.48 690.191 L1681.04 690.191 L1681.6 690.191 L1682.16 690.191 L1682.72 690.191 L1683.28 690.191 L1683.84 690.191 L1684.4 690.191 L1684.95 690.191 L1685.51 690.191 L1686.07 690.191 L1686.63 690.191 L1687.19 690.191 L1687.75 690.191 L1688.31 690.191 L1688.87 690.191 L1689.43 690.191 L1689.99 690.191 L1690.55 690.191 L1691.11 690.191 L1691.67 690.191 L1692.23 690.191 L1692.78 690.191 L1693.34 690.191 L1693.9 690.191 L1694.46 690.191 L1695.02 690.191 L1695.58 690.191 L1696.14 690.191 L1696.7 690.191 L1697.26 690.191 L1697.82 690.191 L1698.38 690.191 L1698.94 690.191 L1699.5 690.191 L1700.05 690.191 L1700.61 690.191 L1701.17 690.191 L1701.73 690.191 L1702.29 690.191 L1702.85 690.191 L1703.41 690.191 L1703.97 690.191 L1704.53 690.191 L1705.09 690.191 L1705.65 690.191 L1706.21 690.191 L1706.77 690.191 L1707.32 690.191 L1707.88 690.191 L1708.44 690.191 L1709 690.191 L1709.56 690.191 L1710.12 690.191 L1710.68 690.191 L1711.24 690.191 L1711.8 690.191 L1712.36 690.191 L1712.92 690.191 L1713.48 690.191 L1714.04 690.191 L1714.6 690.191 L1715.15 690.191 L1715.71 690.191 L1716.27 690.191 L1716.83 690.191 L1717.39 690.191 L1717.95 690.191 L1718.51 690.191 L1719.07 690.191 L1719.63 690.191 L1720.19 690.191 L1720.75 690.191 L1721.31 690.191 L1721.87 690.191 L1722.42 690.191 L1722.98 690.191 L1723.54 690.191 L1724.1 690.191 L1724.66 690.191 L1725.22 690.191 L1725.78 690.191 L1726.34 690.191 L1726.9 690.191 L1727.46 690.191 L1728.02 690.191 L1728.58 690.191 L1729.14 690.191 L1729.69 690.191 L1730.25 690.191 L1730.81 690.191 L1731.37 690.191 L1731.93 690.191 L1732.49 690.191 L1733.05 690.191 L1733.61 690.191 L1734.17 690.191 L1734.73 690.191 L1735.29 690.191 L1735.85 690.191 L1736.41 690.191 L1736.97 690.191 L1737.52 690.191 L1738.08 690.191 L1738.64 690.191 L1739.2 690.191 L1739.76 690.191 L1740.32 690.191 L1740.88 690.191 L1741.44 690.191 L1742 690.191 L1742.56 690.191 L1743.12 690.191 L1743.68 690.191 L1744.24 690.191 L1744.79 690.191 L1745.35 690.191 L1745.91 690.191 L1746.47 690.191 L1747.03 690.191 L1747.59 690.191 L1748.15 690.191 L1748.71 690.191 L1749.27 690.191 L1749.83 690.191 L1750.39 690.191 L1750.95 690.191 L1751.51 690.191 L1752.06 690.191 L1752.62 690.191 L1753.18 690.191 L1753.74 690.191 L1754.3 690.191 L1754.86 690.191 L1755.42 690.191 L1755.98 690.191 L1756.54 690.191 L1757.1 690.191 L1757.66 690.191 L1758.22 690.191 L1758.78 690.191 L1759.34 690.191 L1759.89 690.191 L1760.45 690.191 L1761.01 690.191 L1761.57 690.191 L1762.13 690.191 L1762.69 690.191 L1763.25 690.191 L1763.81 690.191 L1764.37 690.191 L1764.93 690.191 L1765.49 690.191 L1766.05 690.191 L1766.61 690.191 L1767.16 690.191 L1767.72 690.191 L1768.28 690.191 L1768.84 690.191 L1769.4 690.191 L1769.96 690.191 L1770.52 690.191 L1771.08 690.191 L1771.64 690.191 L1772.2 690.191 L1772.76 690.191 L1773.32 690.191 L1773.88 690.191 L1774.43 690.191 L1774.99 690.191 L1775.55 690.191 L1776.11 690.191 L1776.67 690.191 L1777.23 690.191 L1777.79 690.191 L1778.35 690.191 L1778.91 690.191 L1779.47 690.191 L1780.03 690.191 L1780.59 690.191 L1781.15 690.191 L1781.71 690.191 L1782.26 690.191 L1782.82 690.191 L1783.38 690.191 L1783.94 690.191 L1784.5 690.191 L1785.06 690.191 L1785.62 690.191 L1786.18 690.191 L1786.74 690.191 L1787.3 690.191 L1787.86 690.191 L1788.42 690.191 L1788.98 690.191 L1789.53 690.191 L1790.09 690.191 L1790.65 690.191 L1791.21 690.191 L1791.77 690.191 L1792.33 690.191 L1792.89 690.191 L1793.45 690.191 L1794.01 690.191 L1794.57 690.191 L1795.13 690.191 L1795.69 690.191 L1796.25 690.191 L1796.8 690.191 L1797.36 690.191 L1797.92 690.191 L1798.48 690.191 L1799.04 690.191 L1799.6 690.191 L1800.16 690.191 L1800.72 690.191 L1801.28 690.191 L1801.84 690.191 L1802.4 690.191 L1802.96 690.191 L1803.52 690.191 L1804.08 690.191 L1804.63 690.191 L1805.19 690.191 L1805.75 690.191 L1806.31 690.191 L1806.87 690.191 L1807.43 690.191 L1807.99 690.191 L1808.55 690.191 L1809.11 690.191 L1809.67 690.191 L1810.23 690.191 L1810.79 690.191 L1811.35 690.191 L1811.9 690.191 L1812.46 690.191 L1813.02 690.191 L1813.58 690.191 L1814.14 690.191 L1814.7 690.191 L1815.26 690.191 L1815.82 690.191 L1816.38 690.191 L1816.94 690.191 L1817.5 690.191 L1818.06 690.191 L1818.62 690.191 L1819.18 690.191 L1819.73 690.191 L1820.29 690.191 L1820.85 690.191 L1821.41 690.191 L1821.97 690.191 L1822.53 690.191 L1823.09 690.191 L1823.65 690.191 L1824.21 690.191 L1824.77 690.191 L1825.33 690.191 L1825.89 690.191 L1826.45 690.191 L1827 690.191 L1827.56 690.191 L1828.12 690.191 L1828.68 690.191 L1829.24 690.191 L1829.8 690.191 L1830.36 690.191 L1830.92 690.191 L1831.48 690.191 L1832.04 690.191 L1832.6 690.191 L1833.16 690.191 L1833.72 690.191 L1834.27 690.191 L1834.83 690.191 L1835.39 690.191 L1835.95 690.191 L1836.51 690.191 L1837.07 690.191 L1837.63 690.191 L1838.19 690.191 L1838.19 681.461 L1837.63 681.461 L1837.07 681.461 L1836.51 681.461 L1835.95 681.461 L1835.39 681.461 L1834.83 681.461 L1834.27 681.461 L1833.72 681.461 L1833.16 681.461 L1832.6 681.461 L1832.04 681.461 L1831.48 681.461 L1830.92 681.461 L1830.36 681.461 L1829.8 681.461 L1829.24 681.461 L1828.68 681.461 L1828.12 681.461 L1827.56 681.461 L1827 681.461 L1826.45 681.461 L1825.89 681.461 L1825.33 681.461 L1824.77 681.461 L1824.21 681.461 L1823.65 681.461 L1823.09 681.461 L1822.53 681.461 L1821.97 681.461 L1821.41 681.461 L1820.85 681.461 L1820.29 681.461 L1819.73 681.461 L1819.18 681.461 L1818.62 681.461 L1818.06 681.461 L1817.5 681.461 L1816.94 681.461 L1816.38 681.461 L1815.82 681.461 L1815.26 681.461 L1814.7 681.461 L1814.14 681.461 L1813.58 681.461 L1813.02 681.461 L1812.46 681.461 L1811.9 681.461 L1811.35 681.461 L1810.79 681.461 L1810.23 681.461 L1809.67 681.461 L1809.11 681.461 L1808.55 681.461 L1807.99 681.461 L1807.43 681.461 L1806.87 681.461 L1806.31 681.461 L1805.75 681.461 L1805.19 681.461 L1804.63 681.461 L1804.08 681.461 L1803.52 681.461 L1802.96 681.461 L1802.4 681.461 L1801.84 681.461 L1801.28 681.461 L1800.72 681.461 L1800.16 681.461 L1799.6 681.461 L1799.04 681.461 L1798.48 681.461 L1797.92 681.461 L1797.36 681.461 L1796.8 681.461 L1796.25 681.461 L1795.69 681.461 L1795.13 681.461 L1794.57 681.461 L1794.01 681.461 L1793.45 681.461 L1792.89 681.461 L1792.33 681.461 L1791.77 681.461 L1791.21 681.461 L1790.65 681.461 L1790.09 681.461 L1789.53 681.461 L1788.98 681.461 L1788.42 681.461 L1787.86 681.461 L1787.3 681.461 L1786.74 681.461 L1786.18 681.461 L1785.62 681.461 L1785.06 681.461 L1784.5 681.461 L1783.94 681.461 L1783.38 681.461 L1782.82 681.461 L1782.26 681.461 L1781.71 681.461 L1781.15 681.461 L1780.59 681.461 L1780.03 681.461 L1779.47 681.461 L1778.91 681.461 L1778.35 681.461 L1777.79 681.461 L1777.23 681.461 L1776.67 681.461 L1776.11 681.461 L1775.55 681.461 L1774.99 681.461 L1774.43 681.461 L1773.88 681.461 L1773.32 681.461 L1772.76 681.461 L1772.2 681.461 L1771.64 681.461 L1771.08 681.461 L1770.52 681.461 L1769.96 681.461 L1769.4 681.461 L1768.84 681.461 L1768.28 681.461 L1767.72 681.461 L1767.16 681.461 L1766.61 681.461 L1766.05 681.461 L1765.49 681.461 L1764.93 681.461 L1764.37 681.461 L1763.81 681.461 L1763.25 681.461 L1762.69 681.461 L1762.13 681.461 L1761.57 681.461 L1761.01 681.461 L1760.45 681.461 L1759.89 681.461 L1759.34 681.461 L1758.78 681.461 L1758.22 681.461 L1757.66 681.461 L1757.1 681.461 L1756.54 681.461 L1755.98 681.461 L1755.42 681.461 L1754.86 681.461 L1754.3 681.461 L1753.74 681.461 L1753.18 681.461 L1752.62 681.461 L1752.06 681.461 L1751.51 681.461 L1750.95 681.461 L1750.39 681.461 L1749.83 681.461 L1749.27 681.461 L1748.71 681.461 L1748.15 681.461 L1747.59 681.461 L1747.03 681.461 L1746.47 681.461 L1745.91 681.461 L1745.35 681.461 L1744.79 681.461 L1744.24 681.461 L1743.68 681.461 L1743.12 681.461 L1742.56 681.461 L1742 681.461 L1741.44 681.461 L1740.88 681.461 L1740.32 681.461 L1739.76 681.461 L1739.2 681.461 L1738.64 681.461 L1738.08 681.461 L1737.52 681.461 L1736.97 681.461 L1736.41 681.461 L1735.85 681.461 L1735.29 681.461 L1734.73 681.461 L1734.17 681.461 L1733.61 681.461 L1733.05 681.461 L1732.49 681.461 L1731.93 681.461 L1731.37 681.461 L1730.81 681.461 L1730.25 681.461 L1729.69 681.461 L1729.14 681.461 L1728.58 681.461 L1728.02 681.461 L1727.46 681.461 L1726.9 681.461 L1726.34 681.461 L1725.78 681.461 L1725.22 681.461 L1724.66 681.461 L1724.1 681.461 L1723.54 681.461 L1722.98 681.461 L1722.42 681.461 L1721.87 681.461 L1721.31 681.461 L1720.75 681.461 L1720.19 681.461 L1719.63 681.461 L1719.07 681.461 L1718.51 681.461 L1717.95 681.461 L1717.39 681.461 L1716.83 681.461 L1716.27 681.461 L1715.71 681.461 L1715.15 681.461 L1714.6 681.461 L1714.04 681.461 L1713.48 681.461 L1712.92 681.461 L1712.36 681.461 L1711.8 681.461 L1711.24 681.461 L1710.68 681.461 L1710.12 681.461 L1709.56 681.461 L1709 681.461 L1708.44 681.461 L1707.88 681.461 L1707.32 681.461 L1706.77 681.461 L1706.21 681.461 L1705.65 681.461 L1705.09 681.461 L1704.53 681.461 L1703.97 681.461 L1703.41 681.461 L1702.85 681.461 L1702.29 681.461 L1701.73 681.461 L1701.17 681.461 L1700.61 681.461 L1700.05 681.461 L1699.5 681.461 L1698.94 681.461 L1698.38 681.461 L1697.82 681.461 L1697.26 681.461 L1696.7 681.461 L1696.14 681.461 L1695.58 681.461 L1695.02 681.461 L1694.46 681.461 L1693.9 681.461 L1693.34 681.461 L1692.78 681.461 L1692.23 681.461 L1691.67 681.461 L1691.11 681.461 L1690.55 681.461 L1689.99 681.461 L1689.43 681.461 L1688.87 681.461 L1688.31 681.461 L1687.75 681.461 L1687.19 681.461 L1686.63 681.461 L1686.07 681.461 L1685.51 681.461 L1684.95 681.461 L1684.4 681.461 L1683.84 681.461 L1683.28 681.461 L1682.72 681.461 L1682.16 681.461 L1681.6 681.461 L1681.04 681.461 L1680.48 681.461 L1679.92 681.461 L1679.36 681.461 L1678.8 681.461 L1678.24 681.461 L1677.68 681.461 L1677.13 681.461 L1676.57 681.461 L1676.01 681.461 L1675.45 681.461 L1674.89 681.461 L1674.33 681.461 L1673.77 681.461 L1673.21 681.461 L1672.65 681.461 L1672.09 681.461 L1671.53 681.461 L1670.97 681.461 L1670.41 681.461 L1669.85 681.461 L1669.3 681.461 L1668.74 681.461 L1668.18 681.461 L1667.62 681.461 L1667.06 681.461 L1666.5 681.461 L1665.94 681.461 L1665.38 681.461 L1664.82 681.461 L1664.26 681.461 L1663.7 681.461 L1663.14 681.461 L1662.58 681.461 L1662.03 681.461 L1661.47 681.461 L1660.91 681.461 L1660.35 681.461 L1659.79 681.461 L1659.23 681.461 L1658.67 681.461 L1658.11 681.461 L1657.55 681.461 L1656.99 681.461 L1656.43 681.461 L1655.87 681.461 L1655.31 681.461 L1654.76 681.461 L1654.2 681.461 L1653.64 681.461 L1653.08 681.461 L1652.52 681.461 L1651.96 681.461 L1651.4 681.461 L1650.84 681.461 L1650.28 681.461 L1649.72 681.461 L1649.16 681.461 L1648.6 681.461 L1648.04 681.461 L1647.48 681.461 L1646.93 681.461 L1646.37 681.461 L1645.81 681.461 L1645.25 681.461 L1644.69 681.461 L1644.13 681.461 L1643.57 681.461 L1643.01 681.461 L1642.45 681.461 L1641.89 681.461 L1641.33 681.461 L1640.77 681.461 L1640.21 681.461 L1639.66 681.461 L1639.1 681.461 L1638.54 681.461 L1637.98 681.461 L1637.42 681.461 L1636.86 681.461 L1636.3 681.461 L1635.74 681.461 L1635.18 681.461 L1634.62 681.461 L1634.06 681.461 L1633.5 681.461 L1632.94 681.461 L1632.39 681.461 L1631.83 681.461 L1631.27 681.461 L1630.71 681.461 L1630.15 681.461 L1629.59 681.461 L1629.03 681.461 L1628.47 681.461 L1627.91 681.461 L1627.35 681.461 L1626.79 681.461 L1626.23 681.461 L1625.67 681.461 L1625.11 681.461 L1624.56 681.461 L1624 681.461 L1623.44 681.461 L1622.88 681.461 L1622.32 681.461 L1621.76 681.461 L1621.2 681.461 L1620.64 681.461 L1620.08 681.461 L1619.52 681.461 L1618.96 681.461 L1618.4 681.461 L1617.84 681.461 L1617.29 681.461 L1616.73 681.461 L1616.17 681.461 L1615.61 681.461 L1615.05 681.461 L1614.49 681.461 L1613.93 681.461 L1613.37 681.461 L1612.81 681.461 L1612.25 681.461 L1611.69 681.461 L1611.13 681.461 L1610.57 681.461 L1610.02 681.461 L1609.46 681.461 L1608.9 681.461 L1608.34 681.461 L1607.78 681.461 L1607.22 681.461 L1606.66 681.461 L1606.1 681.461 L1605.54 681.461 L1604.98 681.461 L1604.42 681.461 L1603.86 681.461 L1603.3 681.461 L1602.74 681.461 L1602.19 681.461 L1601.63 681.461 L1601.07 681.461 L1600.51 681.461 L1599.95 681.461 L1599.39 681.461 L1598.83 681.461 L1598.27 681.461 L1597.71 681.461 L1597.15 681.461 L1596.59 681.461 L1596.03 681.461 L1595.47 681.461 L1594.92 681.461 L1594.36 681.461 L1593.8 681.461 L1593.24 681.461 L1592.68 681.461 L1592.12 681.461 L1591.56 681.461 L1591 681.461 L1590.44 681.461 L1589.88 681.461 L1589.32 681.461 L1588.76 681.461 L1588.2 681.461 L1587.65 681.461 L1587.09 681.461 L1586.53 681.461 L1585.97 681.461 L1585.41 681.461 L1584.85 681.461 L1584.29 681.461 L1583.73 681.461 L1583.17 681.461 L1582.61 681.461 L1582.05 681.461 L1581.49 681.461 L1580.93 681.461 L1580.37 681.461 L1579.82 681.461 L1579.26 681.461 L1578.7 681.461 L1578.14 681.461 L1577.58 681.461 L1577.02 681.461 L1576.46 681.461 L1575.9 681.461 L1575.34 681.461 L1574.78 681.461 L1574.22 681.461 L1573.66 681.461 L1573.1 681.461 L1572.55 681.461 L1571.99 681.461 L1571.43 681.461 L1570.87 681.461 L1570.31 681.461 L1569.75 681.461 L1569.19 681.461 L1568.63 681.461 L1568.07 681.461 L1567.51 681.461 L1566.95 681.461 L1566.39 681.461 L1565.83 681.461 L1565.28 681.461 L1564.72 681.461 L1564.16 681.461 L1563.6 681.461 L1563.04 681.461 L1562.48 681.461 L1561.92 681.461 L1561.36 681.461 L1560.8 681.461 L1560.24 681.461 L1559.68 681.461 L1559.12 681.461 L1558.56 681.461 L1558 681.461 L1557.45 681.461 L1556.89 681.461 L1556.33 681.461 L1555.77 681.461 L1555.21 681.461 L1554.65 681.461 L1554.09 681.461 L1553.53 681.461 L1552.97 681.461 L1552.41 681.461 L1551.85 681.461 L1551.29 681.461 L1550.73 681.461 L1550.18 681.461 L1549.62 681.461 L1549.06 681.461 L1548.5 681.461 L1547.94 681.461 L1547.38 681.461 L1546.82 681.461 L1546.26 681.461 L1545.7 681.461 L1545.14 681.461 L1544.58 681.461 L1544.02 681.461 L1543.46 681.461 L1542.9 681.461 L1542.35 681.461 L1541.79 681.461 L1541.23 681.461 L1540.67 681.461 L1540.11 681.461 L1539.55 681.461 L1538.99 681.461 L1538.43 681.461 L1537.87 681.461 L1537.31 681.461 L1536.75 681.461 L1536.19 681.461 L1535.63 681.461 L1535.08 681.461 L1534.52 681.461 L1533.96 681.461 L1533.4 681.461 L1532.84 681.461 L1532.28 681.461 L1531.72 681.461 L1531.16 681.461 L1530.6 681.461 L1530.04 681.461 L1529.48 681.461 L1528.92 681.461 L1528.36 681.461 L1527.81 681.461 L1527.25 681.461 L1526.69 681.461 L1526.13 681.461 L1525.57 681.461 L1525.01 681.461 L1524.45 681.461 L1523.89 681.461 L1523.33 681.461 L1522.77 681.461 L1522.21 681.461 L1521.65 681.461 L1521.09 681.461 L1520.53 681.461 L1519.98 681.461 L1519.42 681.461 L1518.86 681.461 L1518.3 681.461 L1517.74 681.461 L1517.18 681.461 L1516.62 681.461 L1516.06 681.461 L1515.5 681.461 L1514.94 681.461 L1514.38 681.461 L1513.82 681.461 L1513.26 681.461 L1512.71 681.461 L1512.15 681.461 L1511.59 681.461 L1511.03 681.461 L1510.47 681.461 L1509.91 681.461 L1509.35 681.461 L1508.79 681.461 L1508.23 681.461 L1507.67 681.461 L1507.11 681.461 L1506.55 681.461 L1505.99 681.461 L1505.44 681.461 L1504.88 681.461 L1504.32 681.461 L1503.76 681.461 L1503.2 681.461 L1502.64 681.461 L1502.08 681.461 L1501.52 681.461 L1500.96 681.461 L1500.4 681.461 L1499.84 681.461 L1499.28 681.461 L1498.72 681.461 L1498.16 681.461 L1497.61 681.461 L1497.05 681.461 L1496.49 681.461 L1495.93 681.461 L1495.37 681.461 L1494.81 681.461 L1494.25 681.461 L1493.69 681.461 L1493.13 681.461 L1492.57 681.461 L1492.01 681.461 L1491.45 681.461 L1490.89 681.461 L1490.34 681.461 L1489.78 681.461 L1489.22 681.461 L1488.66 681.461 L1488.1 681.461 L1487.54 681.461 L1486.98 681.461 L1486.42 681.461 L1485.86 681.461 L1485.3 681.461 L1484.74 681.461 L1484.18 681.461 L1483.62 681.461 L1483.07 681.461 L1482.51 681.461 L1481.95 681.461 L1481.39 681.461 L1480.83 681.461 L1480.27 681.461 L1479.71 681.461 L1479.15 681.461 L1478.59 681.461 L1478.03 681.461 L1477.47 681.461 L1476.91 681.461 L1476.35 681.461 L1475.79 681.461 L1475.24 681.461 L1474.68 681.461 L1474.12 681.461 L1473.56 681.461 L1473 681.461 L1472.44 681.461 L1471.88 681.461 L1471.32 681.461 L1470.76 681.461 L1470.2 681.461 L1469.64 681.461 L1469.08 681.461 L1468.52 681.461 L1467.97 681.461 L1467.41 681.461 L1466.85 681.461 L1466.29 681.461 L1465.73 681.461 L1465.17 681.461 L1464.61 681.461 L1464.05 681.461 L1463.49 681.461 L1462.93 681.461 L1462.37 681.461 L1461.81 681.461 L1461.25 681.461 L1460.7 681.461 L1460.14 681.461 L1459.58 681.461 L1459.02 681.461 L1458.46 681.461 L1457.9 681.461 L1457.34 681.461 L1456.78 681.461 L1456.22 681.461 L1455.66 681.461 L1455.1 681.461 L1454.54 681.461 L1453.98 681.461 L1453.42 681.461 L1452.87 681.461 L1452.31 681.461 L1451.75 681.461 L1451.19 681.461 L1450.63 681.461 L1450.07 681.461 L1449.51 681.461 L1448.95 681.461 L1448.39 681.461 L1447.83 681.461 L1447.27 681.461 L1446.71 681.461 L1446.15 681.461 L1445.6 681.461 L1445.04 681.461 L1444.48 681.461 L1443.92 681.461 L1443.36 681.461 L1442.8 681.461 L1442.24 681.461 L1441.68 681.461 L1441.12 681.461 L1440.56 681.461 L1440 681.461 L1439.44 681.461 L1438.88 681.461 L1438.33 681.461 L1437.77 681.461 L1437.21 681.461 L1436.65 681.461 L1436.09 681.461 L1435.53 681.461 L1434.97 681.461 L1434.41 681.461 L1433.85 681.461 L1433.29 681.461 L1432.73 681.461 L1432.17 681.461 L1431.61 681.461 L1431.05 681.461 L1430.5 681.461 L1429.94 681.461 L1429.38 681.461 L1428.82 681.461 L1428.26 681.461 L1427.7 681.461 L1427.14 681.461 L1426.58 681.461 L1426.02 681.461 L1425.46 681.461 L1424.9 681.461 L1424.34 681.461 L1423.78 681.461 L1423.23 681.461 L1422.67 681.461 L1422.11 681.461 L1421.55 681.461 L1420.99 681.461 L1420.43 681.461 L1419.87 681.461 L1419.31 681.461 L1418.75 681.461 L1418.19 681.461 L1417.63 681.461 L1417.07 681.461 L1416.51 681.461 L1415.95 681.461 L1415.4 681.461 L1414.84 681.461 L1414.28 681.461 L1413.72 681.461 L1413.16 681.461 L1412.6 681.461 L1412.04 681.461 L1411.48 681.461 L1410.92 681.461 L1410.36 681.461 L1409.8 681.461 L1409.24 681.461 L1408.68 681.461 L1408.13 681.461 L1407.57 681.461 L1407.01 681.461 L1406.45 681.461 L1405.89 681.461 L1405.33 681.461 L1404.77 681.461 L1404.21 681.461 L1403.65 681.461 L1403.09 681.461 L1402.53 681.461 L1401.97 681.461 L1401.41 681.461 L1400.86 681.461 L1400.3 681.461 L1399.74 681.461 L1399.18 681.461 L1398.62 681.461 L1398.06 681.461 L1397.5 681.461 L1396.94 681.461 L1396.38 681.461 L1395.82 681.461 L1395.26 681.461 L1394.7 681.461 L1394.14 681.461 L1393.58 681.461 L1393.03 681.461 L1392.47 681.461 L1391.91 681.461 L1391.35 681.461 L1390.79 681.461 L1390.23 681.461 L1389.67 681.461 L1389.11 681.461 L1388.55 681.461 L1387.99 681.461 L1387.43 681.461 L1386.87 681.461 L1386.31 681.461 L1385.76 681.461 L1385.2 681.461 L1384.64 681.461 L1384.08 681.461 L1383.52 681.461 L1382.96 681.461 L1382.4 681.461 L1381.84 681.461 L1381.28 681.461 L1380.72 681.461 L1380.16 681.461 L1379.6 681.461 L1379.04 681.461 L1378.49 681.461 L1377.93 681.461 L1377.37 681.461 L1376.81 681.461 L1376.25 681.461 L1375.69 681.461 L1375.13 681.461 L1374.57 681.461 L1374.01 681.461 L1373.45 681.461 L1372.89 681.461 L1372.33 681.461 L1371.77 681.461 L1371.21 681.461 L1370.66 681.461 L1370.1 681.461 L1369.54 681.461 L1368.98 681.461 L1368.42 681.461 L1367.86 681.461 L1367.3 681.461 L1366.74 681.461 L1366.18 681.461 L1365.62 681.461 L1365.06 681.461 L1364.5 681.461 L1363.94 681.461 L1363.39 681.461 L1362.83 681.461 L1362.27 681.461 L1361.71 681.461 L1361.15 681.461 L1360.59 681.461 L1360.03 681.461 L1359.47 681.461 L1358.91 681.461 L1358.35 681.461 L1357.79 681.461 L1357.23 681.461 L1356.67 681.461 L1356.12 681.461 L1355.56 681.461 L1355 681.461 L1354.44 681.461 L1353.88 681.461 L1353.32 681.461 L1352.76 681.461 L1352.2 681.461 L1351.64 681.461 L1351.08 681.461 L1350.52 681.461 L1349.96 681.461 L1349.4 681.461 L1348.84 681.461 L1348.29 681.461 L1347.73 681.461 L1347.17 681.461 L1346.61 681.461 L1346.05 681.461 L1345.49 681.461 L1344.93 681.461 L1344.37 681.461 L1343.81 681.461 L1343.25 681.461 L1342.69 681.461 L1342.13 681.461 L1341.57 681.461 L1341.02 681.461 L1340.46 681.461 L1339.9 681.461 L1339.34 681.461 L1338.78 681.461 L1338.22 681.461 L1337.66 681.461 L1337.1 681.461 L1336.54 681.461 L1335.98 681.461 L1335.42 681.461 L1334.86 681.461 L1334.3 681.461 L1333.75 681.461 L1333.19 681.461 L1332.63 681.461 L1332.07 681.461 L1331.51 681.461 L1330.95 681.461 L1330.39 681.461 L1329.83 681.461 L1329.27 681.461 L1328.71 681.461 L1328.15 681.461 L1327.59 681.461 L1327.03 681.461 L1326.47 681.461 L1325.92 681.461 L1325.36 681.461 L1324.8 681.461 L1324.24 681.461 L1323.68 681.461 L1323.12 681.461 L1322.56 681.461 L1322 681.461 L1321.44 681.461 L1320.88 681.461 L1320.32 681.461 L1319.76 681.461 L1319.2 681.461 L1318.65 681.461 L1318.09 681.461 L1317.53 681.461 L1316.97 681.461 L1316.41 681.461 L1315.85 681.461 L1315.29 681.461 L1314.73 681.461 L1314.17 681.461 L1313.61 681.461 L1313.05 681.461 L1312.49 681.461 L1311.93 681.461 L1311.38 681.461 L1310.82 681.461 L1310.26 681.461 L1309.7 681.461 L1309.14 681.461 L1308.58 681.461 L1308.02 681.461 L1307.46 681.461 L1306.9 681.461 L1306.34 681.461 L1305.78 681.461 L1305.22 681.461 L1304.66 681.461 L1304.1 681.461 L1303.55 681.461 L1302.99 681.461 L1302.43 681.461 L1301.87 681.461 L1301.31 681.461 L1300.75 681.461 L1300.19 681.461 L1299.63 681.461 L1299.07 681.461 L1298.51 681.461 L1297.95 681.461 L1297.39 681.461 L1296.83 681.461 L1296.28 681.461 L1295.72 681.461 L1295.16 681.461 L1294.6 681.461 L1294.04 681.461 L1293.48 681.461 L1292.92 681.461 L1292.36 681.461 L1291.8 681.461 L1291.24 681.461 L1290.68 681.461 L1290.12 681.461 L1289.56 681.461 L1289 681.461 L1288.45 681.461 L1287.89 681.461 L1287.33 681.461 L1286.77 681.461 L1286.21 681.461 L1285.65 681.461 L1285.09 681.461 L1284.53 681.461 L1283.97 681.461 L1283.41 681.461 L1282.85 681.461 L1282.29 681.461 L1281.73 681.461 L1281.18 681.461 L1280.62 681.461 L1280.06 681.461 L1279.5 681.461 L1278.94 681.461 L1278.38 681.461 L1277.82 681.461 L1277.26 681.461 L1276.7 681.461 L1276.14 681.461 L1275.58 681.461 L1275.02 681.461 L1274.46 681.461 L1273.91 681.461 L1273.35 681.461 L1272.79 681.461 L1272.23 681.461 L1271.67 681.461 L1271.11 681.461 L1270.55 681.461 L1269.99 681.461 L1269.43 681.461 L1268.87 681.461 L1268.31 681.461 L1267.75 681.461 L1267.19 681.461 L1266.63 681.461 L1266.08 681.461 L1265.52 681.461 L1264.96 681.461 L1264.4 681.461 L1263.84 681.461 L1263.28 681.461 L1262.72 681.461 L1262.16 681.461 L1261.6 681.461 L1261.04 681.461 L1260.48 681.461 L1259.92 681.461 L1259.36 681.461 L1258.81 681.461 L1258.25 681.461 L1257.69 681.461 L1257.13 681.461 L1256.57 681.461 L1256.01 681.461 L1255.45 681.461 L1254.89 681.461 L1254.33 681.461 L1253.77 681.461 L1253.21 681.461 L1252.65 681.461 L1252.09 681.461 L1251.54 681.461 L1250.98 681.461 L1250.42 681.461 L1249.86 681.461 L1249.3 681.461 L1248.74 681.461 L1248.18 681.461 L1247.62 681.461 L1247.06 681.461 L1246.5 681.461 L1245.94 681.461 L1245.38 681.461 L1244.82 681.461 L1244.26 681.461 L1243.71 681.461 L1243.15 681.461 L1242.59 681.461 L1242.03 681.461 L1241.47 681.461 L1240.91 681.461 L1240.35 681.461 L1239.79 681.461 L1239.23 681.461 L1238.67 681.461 L1238.11 681.461 L1237.55 681.461 L1236.99 681.461 L1236.44 681.461 L1235.88 681.461 L1235.32 681.461 L1234.76 681.461 L1234.2 681.461 L1233.64 681.461 L1233.08 681.461 L1232.52 681.461 L1231.96 681.461 L1231.4 681.461 L1230.84 681.461 L1230.28 681.461 L1229.72 681.461 L1229.17 681.461 L1228.61 681.461 L1228.05 681.461 L1227.49 681.461 L1226.93 681.461 L1226.37 681.461 L1225.81 681.461 L1225.25 681.461 L1224.69 681.461 L1224.13 681.461 L1223.57 681.461 L1223.01 681.461 L1222.45 681.461 L1221.89 681.461 L1221.34 681.461 L1220.78 681.461 L1220.22 681.461 L1219.66 681.461 L1219.1 681.461 L1218.54 681.461 L1217.98 681.461 L1217.42 681.461 L1216.86 681.461 L1216.3 681.461 L1215.74 681.461 L1215.18 681.461 L1214.62 681.461 L1214.07 681.461 L1213.51 681.461 L1212.95 681.461 L1212.39 681.461 L1211.83 681.461 L1211.27 681.461 L1210.71 681.461 L1210.15 681.461 L1209.59 681.461 L1209.03 681.461 L1208.47 681.461 L1207.91 681.461 L1207.35 681.461 L1206.8 681.461 L1206.24 681.461 L1205.68 681.461 L1205.12 681.461 L1204.56 681.461 L1204 681.461 L1203.44 681.461 L1202.88 681.461 L1202.32 681.461 L1201.76 681.461 L1201.2 681.461 L1200.64 681.461 L1200.08 681.461 L1199.52 681.461 L1198.97 681.461 L1198.41 681.461 L1197.85 681.461 L1197.29 681.461 L1196.73 681.461 L1196.17 681.461 L1195.61 681.461 L1195.05 681.461 L1194.49 681.461 L1193.93 681.461 L1193.37 681.461 L1192.81 681.461 L1192.25 681.461 L1191.7 681.461 L1191.14 681.461 L1190.58 681.461 L1190.02 681.461 L1189.46 681.461 L1188.9 681.461 L1188.34 681.461 L1187.78 681.461 L1187.22 681.461 L1186.66 681.461 L1186.1 681.461 L1185.54 681.461 L1184.98 681.461 L1184.43 681.461 L1183.87 681.461 L1183.31 681.461 L1182.75 681.461 L1182.19 681.461 L1181.63 681.461 L1181.07 681.461 L1180.51 681.461 L1179.95 681.461 L1179.39 681.461 L1178.83 681.461 L1178.27 681.461 L1177.71 681.461 L1177.15 681.461 L1176.6 681.461 L1176.04 681.461 L1175.48 681.461 L1174.92 681.461 L1174.36 681.461 L1173.8 681.461 L1173.24 681.461 L1172.68 681.461 L1172.12 681.461 L1171.56 681.461 L1171 681.461 L1170.44 681.461 L1169.88 681.461 L1169.33 681.461 L1168.77 681.461 L1168.21 681.461 L1167.65 681.461 L1167.09 681.461 L1166.53 681.461 L1165.97 681.461 L1165.41 681.461 L1164.85 681.461 L1164.29 681.461 L1163.73 681.461 L1163.17 681.461 L1162.61 681.461 L1162.05 681.461 L1161.5 681.461 L1160.94 681.461 L1160.38 681.461 L1159.82 681.461 L1159.26 681.461 L1158.7 681.461 L1158.14 681.461 L1157.58 681.461 L1157.02 681.461 L1156.46 681.461 L1155.9 681.461 L1155.34 681.461 L1154.78 681.461 L1154.23 681.461 L1153.67 681.461 L1153.11 681.461 L1152.55 681.461 L1151.99 681.461 L1151.43 681.461 L1150.87 681.461 L1150.31 681.461 L1149.75 681.461 L1149.19 681.461 L1148.63 681.461 L1148.07 681.461 L1147.51 681.461 L1146.96 681.461 L1146.4 681.461 L1145.84 681.461 L1145.28 681.461 L1144.72 681.461 L1144.16 681.461 L1143.6 681.461 L1143.04 681.461 L1142.48 681.461 L1141.92 681.461 L1141.36 681.461 L1140.8 681.461 L1140.24 681.461 L1139.68 681.461 L1139.13 681.461 L1138.57 681.461 L1138.01 681.461 L1137.45 681.461 L1136.89 681.461 L1136.33 681.461 L1135.77 681.461 L1135.21 681.461 L1134.65 681.461 L1134.09 681.461 L1133.53 681.461 L1132.97 681.461 L1132.41 681.461 L1131.86 681.461 L1131.3 681.461 L1130.74 681.461 L1130.18 681.461 L1129.62 681.461 L1129.06 681.461 L1128.5 681.461 L1127.94 681.461 L1127.38 681.461 L1126.82 681.461 L1126.26 681.461 L1125.7 681.461 L1125.14 681.461 L1124.59 681.461 L1124.03 681.461 L1123.47 681.461 L1122.91 681.461 L1122.35 681.461 L1121.79 681.461 L1121.23 681.461 L1120.67 681.461 L1120.11 681.461 L1119.55 681.461 L1118.99 681.461 L1118.43 681.461 L1117.87 681.461 L1117.31 681.461 L1116.76 681.461 L1116.2 681.461 L1115.64 681.461 L1115.08 681.461 L1114.52 681.461 L1113.96 681.461 L1113.4 681.461 L1112.84 681.461 L1112.28 681.461 L1111.72 681.461 L1111.16 681.461 L1110.6 681.461 L1110.04 681.461 L1109.49 681.461 L1108.93 681.461 L1108.37 681.461 L1107.81 681.461 L1107.25 681.461 L1106.69 681.461 L1106.13 681.461 L1105.57 681.461 L1105.01 681.461 L1104.45 681.461 L1103.89 681.461 L1103.33 681.461 L1102.77 681.461 L1102.22 681.461 L1101.66 681.461 L1101.1 681.461 L1100.54 681.461 L1099.98 681.461 L1099.42 681.461 L1098.86 681.461 L1098.3 681.461 L1097.74 681.461 L1097.18 681.461 L1096.62 681.461 L1096.06 681.461 L1095.5 681.461 L1094.94 681.461 L1094.39 681.461 L1093.83 681.461 L1093.27 681.461 L1092.71 681.461 L1092.15 681.461 L1091.59 681.461 L1091.03 681.461 L1090.47 681.461 L1089.91 681.461 L1089.35 681.461 L1088.79 681.461 L1088.23 681.461 L1087.67 681.461 L1087.12 681.461 L1086.56 681.461 L1086 681.461 L1085.44 681.461 L1084.88 681.461 L1084.32 681.461 L1083.76 681.461 L1083.2 681.461 L1082.64 681.461 L1082.08 681.461 L1081.52 681.461 L1080.96 681.461 L1080.4 681.461 L1079.85 681.461 L1079.29 681.461 L1078.73 681.461 L1078.17 681.461 L1077.61 681.461 L1077.05 681.461 L1076.49 681.461 L1075.93 681.461 L1075.37 681.461 L1074.81 681.461 L1074.25 681.461 L1073.69 681.461 L1073.13 681.461 L1072.57 681.461 L1072.02 681.461 L1071.46 681.461 L1070.9 681.461 L1070.34 681.461 L1069.78 681.461 L1069.22 681.461 L1068.66 681.461 L1068.1 681.461 L1067.54 681.461 L1066.98 681.461 L1066.42 681.461 L1065.86 681.461 L1065.3 681.461 L1064.75 681.461 L1064.19 681.461 L1063.63 681.461 L1063.07 681.461 L1062.51 681.461 L1061.95 681.461 L1061.39 681.461 L1060.83 681.461 L1060.27 681.461 L1059.71 681.461 L1059.15 681.461 L1058.59 681.461 L1058.03 681.461 L1057.48 681.461 L1056.92 681.461 L1056.36 681.461 L1055.8 681.461 L1055.24 681.461 L1054.68 681.461 L1054.12 681.461 L1053.56 681.461 L1053 681.461 L1052.44 681.461 L1051.88 681.461 L1051.32 681.461 L1050.76 681.461 L1050.2 681.461 L1049.65 681.461 L1049.09 681.461 L1048.53 681.461 L1047.97 681.461 L1047.41 681.461 L1046.85 681.461 L1046.29 681.461 L1045.73 681.461 L1045.17 681.461 L1044.61 681.461 L1044.05 681.461 L1043.49 681.461 L1042.93 681.461 L1042.38 681.461 L1041.82 681.461 L1041.26 681.461 L1040.7 681.461 L1040.14 681.461 L1039.58 681.461 L1039.02 681.461 L1038.46 681.461 L1037.9 681.461 L1037.34 681.461 L1036.78 681.461 L1036.22 681.461 L1035.66 681.461 L1035.1 681.461 L1034.55 681.461 L1033.99 681.461 L1033.43 681.461 L1032.87 681.461 L1032.31 681.461 L1031.75 681.461 L1031.19 681.461 L1030.63 681.461 L1030.07 681.461 L1029.51 681.461 L1028.95 681.461 L1028.39 681.461 L1027.83 681.461 L1027.28 681.461 L1026.72 681.461 L1026.16 681.461 L1025.6 681.461 L1025.04 681.461 L1024.48 681.461 L1023.92 681.461 L1023.36 681.461 L1022.8 681.461 L1022.24 681.461 L1021.68 681.461 L1021.12 681.461 L1020.56 681.461 L1020.01 681.461 L1019.45 681.461 L1018.89 681.461 L1018.33 681.461 L1017.77 681.461 L1017.21 681.461 L1016.65 681.461 L1016.09 681.461 L1015.53 681.461 L1014.97 681.461 L1014.41 681.461 L1013.85 681.461 L1013.29 681.461 L1012.73 681.461 L1012.18 681.461 L1011.62 681.461 L1011.06 681.461 L1010.5 681.461 L1009.94 681.461 L1009.38 681.461 L1008.82 681.461 L1008.26 681.461 L1007.7 681.461 L1007.14 681.461 L1006.58 681.461 L1006.02 681.461 L1005.46 681.461 L1004.91 681.461 L1004.35 681.461 L1003.79 681.461 L1003.23 681.461 L1002.67 681.461 L1002.11 681.461 L1001.55 681.461 L1000.99 681.461 L1000.43 681.461 L999.872 681.461 L999.313 681.461 L998.754 681.461 L998.194 681.461 L997.635 681.461 L997.076 681.461 L996.517 681.461 L995.957 681.461 L995.398 681.461 L994.839 681.461 L994.28 681.461 L993.72 681.461 L993.161 681.461 L992.602 681.461 L992.043 681.461 L991.483 681.461 L990.924 681.461 L990.365 681.461 L989.806 681.461 L989.246 681.461 L988.687 681.461 L988.128 681.461 L987.569 681.461 L987.009 681.461 L986.45 681.461 L985.891 681.461 L985.332 681.461 L984.772 681.461 L984.213 681.461 L983.654 681.461 L983.095 681.461 L982.535 681.461 L981.976 681.461 L981.417 681.461 L980.858 681.461 L980.298 681.461 L979.739 681.461 L979.18 681.461 L978.621 681.461 L978.061 681.461 L977.502 681.461 L976.943 681.461 L976.384 681.461 L975.824 681.461 L975.265 681.461 L974.706 681.461 L974.147 681.461 L973.587 681.461 L973.028 681.461 L972.469 681.461 L971.91 681.461 L971.35 681.461 L970.791 681.461 L970.232 681.461 L969.673 681.461 L969.113 681.461 L968.554 681.461 L967.995 681.461 L967.436 681.461 L966.876 681.461 L966.317 681.461 L965.758 681.461 L965.199 681.461 L964.639 681.461 L964.08 681.461 L963.521 681.461 L962.962 681.461 L962.402 681.461 L961.843 681.461 L961.284 681.461 L960.725 681.461 L960.165 681.461 L959.606 681.461 L959.047 681.461 L958.488 681.461 L957.928 681.461 L957.369 681.461 L956.81 681.461 L956.251 681.461 L955.691 681.461 L955.132 681.461 L954.573 681.461 L954.014 681.461 L953.454 681.461 L952.895 681.461 L952.336 681.461 L951.777 681.461 L951.217 681.461 L950.658 681.461 L950.099 681.461 L949.54 681.461 L948.98 681.461 L948.421 681.461 L947.862 681.461 L947.303 681.461 L946.743 681.461 L946.184 681.461 L945.625 681.461 L945.066 681.461 L944.506 681.461 L943.947 681.461 L943.388 681.461 L942.829 681.461 L942.269 681.461 L941.71 681.461 L941.151 681.461 L940.592 681.461 L940.032 681.461 L939.473 681.461 L938.914 681.461 L938.355 681.461 L937.795 681.461 L937.236 681.461 L936.677 681.461 L936.118 681.461 L935.558 681.461 L934.999 681.461 L934.44 681.461 L933.881 681.461 L933.321 681.461 L932.762 681.461 L932.203 681.461 L931.644 681.461 L931.084 681.461 L930.525 681.461 L929.966 681.461 L929.406 681.461 L928.847 681.461 L928.288 681.461 L927.729 681.461 L927.169 681.461 L926.61 681.461 L926.051 681.461 L925.492 681.461 L924.932 681.461 L924.373 681.461 L923.814 681.461 L923.255 681.461 L922.695 681.461 L922.136 681.461 L921.577 681.461 L921.018 681.461 L920.458 681.461 L919.899 681.461 L919.34 681.461 L918.781 681.461 L918.221 681.461 L917.662 681.461 L917.103 681.461 L916.544 681.461 L915.984 681.461 L915.425 681.461 L914.866 681.461 L914.307 681.461 L913.747 681.461 L913.188 681.461 L912.629 681.461 L912.07 681.461 L911.51 681.461 L910.951 681.461 L910.392 681.461 L909.833 681.461 L909.273 681.461 L908.714 681.461 L908.155 681.461 L907.596 681.461 L907.036 681.461 L906.477 681.461 L905.918 681.461 L905.359 681.461 L904.799 681.461 L904.24 681.461 L903.681 681.461 L903.122 681.461 L902.562 681.461 L902.003 681.461 L901.444 681.461 L900.885 681.461 L900.325 681.461 L899.766 681.461 L899.207 681.461 L898.648 681.461 L898.088 681.461 L897.529 681.461 L896.97 681.461 L896.411 681.461 L895.851 681.461 L895.292 681.461 L894.733 681.461 L894.174 681.461 L893.614 681.461 L893.055 681.461 L892.496 681.461 L891.937 681.461 L891.377 681.461 L890.818 681.461 L890.259 681.461 L889.7 681.461 L889.14 681.461 L888.581 681.461 L888.022 681.461 L887.463 681.461 L886.903 681.461 L886.344 681.461 L885.785 681.461 L885.226 681.461 L884.666 681.461 L884.107 681.461 L883.548 681.461 L882.989 681.461 L882.429 681.461 L881.87 681.461 L881.311 681.461 L880.752 681.461 L880.192 681.461 L879.633 681.461 L879.074 681.461 L878.515 681.461 L877.955 681.461 L877.396 681.461 L876.837 681.461 L876.278 681.461 L875.718 681.461 L875.159 681.461 L874.6 681.461 L874.041 681.461 L873.481 681.461 L872.922 681.461 L872.363 681.461 L871.804 681.461 L871.244 681.461 L870.685 681.461 L870.126 681.461 L869.567 681.461 L869.007 681.461 L868.448 681.461 L867.889 681.461 L867.33 681.461 L866.77 681.461 L866.211 681.461 L865.652 681.461 L865.093 681.461 L864.533 681.461 L863.974 681.461 L863.415 681.461 L862.856 681.461 L862.296 681.461 L861.737 681.461 L861.178 681.461 L860.619 681.461 L860.059 681.461 L859.5 681.461 L858.941 681.461 L858.382 681.461 L857.822 681.461 L857.263 681.461 L856.704 681.461 L856.145 681.461 L855.585 681.461 L855.026 681.461 L854.467 681.461 L853.908 681.461 L853.348 681.461 L852.789 681.461 L852.23 681.461 L851.671 681.461 L851.111 681.461 L850.552 681.461 L849.993 681.461 L849.434 681.461 L848.874 681.461 L848.315 681.461 L847.756 681.461 L847.197 681.461 L846.637 681.461 L846.078 681.461 L845.519 681.461 L844.96 681.461 L844.4 681.461 L843.841 681.461 L843.282 681.461 L842.723 681.461 L842.163 681.461 L841.604 681.461 L841.045 681.461 L840.486 681.461 L839.926 681.461 L839.367 681.461 L838.808 681.461 L838.249 681.461 L837.689 681.461 L837.13 681.461 L836.571 681.461 L836.012 681.461 L835.452 681.461 L834.893 681.461 L834.334 681.461 L833.775 681.461 L833.215 681.461 L832.656 681.461 L832.097 681.461 L831.538 681.461 L830.978 681.461 L830.419 681.461 L829.86 681.461 L829.301 681.461 L828.741 681.461 L828.182 681.461 L827.623 681.461 L827.064 681.461 L826.504 681.461 L825.945 681.461 L825.386 681.461 L824.827 681.461 L824.267 681.461 L823.708 681.461 L823.149 681.461 L822.59 681.461 L822.03 681.461 L821.471 681.461 L820.912 681.461 L820.353 681.461 L819.793 681.461 L819.234 681.461 L818.675 681.461 L818.116 681.461 L817.556 681.461 L816.997 681.461 L816.438 681.461 L815.879 681.461 L815.319 681.461 L814.76 681.461 L814.201 681.461 L813.642 681.461 L813.082 681.461 L812.523 681.461 L811.964 681.461 L811.405 681.461 L810.845 681.461 L810.286 681.461 L809.727 681.461 L809.168 681.461 L808.608 681.461 L808.049 681.461 L807.49 681.461 L806.931 681.461 L806.371 681.461 L805.812 681.461 L805.253 681.461 L804.693 681.461 L804.134 681.461 L803.575 681.461 L803.016 681.461 L802.456 681.461 L801.897 681.461 L801.338 681.461 L800.779 681.461 L800.219 681.461 L799.66 681.461 L799.101 681.461 L798.542 681.461 L797.982 681.461 L797.423 681.461 L796.864 681.461 L796.305 681.461 L795.745 681.461 L795.186 681.461 L794.627 681.461 L794.068 681.461 L793.508 681.461 L792.949 681.461 L792.39 681.461 L791.831 681.461 L791.271 681.461 L790.712 681.461 L790.153 681.461 L789.594 681.461 L789.034 681.461 L788.475 681.461 L787.916 681.461 L787.357 681.461 L786.797 681.461 L786.238 681.461 L785.679 681.461 L785.12 681.461 L784.56 681.461 L784.001 681.461 L783.442 681.461 L782.883 681.461 L782.323 681.461 L781.764 681.461 L781.205 681.461 L780.646 681.461 L780.086 681.461 L779.527 681.461 L778.968 681.461 L778.409 681.461 L777.849 681.461 L777.29 681.461 L776.731 681.461 L776.172 681.461 L775.612 681.461 L775.053 681.461 L774.494 681.461 L773.935 681.461 L773.375 681.461 L772.816 681.461 L772.257 681.461 L771.698 681.461 L771.138 681.461 L770.579 681.461 L770.02 681.461 L769.461 681.461 L768.901 681.461 L768.342 681.461 L767.783 681.461 L767.224 681.461 L766.664 681.461 L766.105 681.461 L765.546 681.461 L764.987 681.461 L764.427 681.461 L763.868 681.461 L763.309 681.461 L762.75 681.461 L762.19 681.461 L761.631 681.461 L761.072 681.461 L760.513 681.461 L759.953 681.461 L759.394 681.461 L758.835 681.461 L758.276 681.461 L757.716 681.461 L757.157 681.461 L756.598 681.461 L756.039 681.461 L755.479 681.461 L754.92 681.461 L754.361 681.461 L753.802 681.461 L753.242 681.461 L752.683 681.461 L752.124 681.461 L751.565 681.461 L751.005 681.461 L750.446 681.461 L749.887 681.461 L749.328 681.461 L748.768 681.461 L748.209 681.461 L747.65 681.461 L747.091 681.461 L746.531 681.461 L745.972 681.461 L745.413 681.461 L744.854 681.461 L744.294 681.461 L743.735 681.461 L743.176 681.461 L742.617 681.461 L742.057 681.461 L741.498 681.461 L740.939 681.461 L740.38 681.461 L739.82 681.461 L739.261 681.461 L738.702 681.461 L738.143 681.461 L737.583 681.461 L737.024 681.461 L736.465 681.461 L735.906 681.461 L735.346 681.461 L734.787 681.461 L734.228 681.461 L733.669 681.461 L733.109 681.461 L732.55 681.461 L731.991 681.461 L731.432 681.461 L730.872 681.461 L730.313 681.461 L729.754 681.461 L729.195 681.461 L728.635 681.461 L728.076 681.461 L727.517 681.461 L726.958 681.461 L726.398 681.461 L725.839 681.461 L725.28 681.461 L724.721 681.461 L724.161 681.461 L723.602 681.461 L723.043 681.461 L722.484 681.461 L721.924 681.461 L721.365 681.461 L720.806 681.461 L720.247 681.461  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.826 720.806,685.826 721.365,685.826 721.924,685.826 722.484,685.826 723.043,685.826 723.602,685.826 724.161,685.826 724.721,685.826 725.28,685.826 725.839,685.826 726.398,685.826 726.958,685.826 727.517,685.826 728.076,685.826 728.635,685.826 729.195,685.826 729.754,685.826 730.313,685.826 730.872,685.826 731.432,685.826 731.991,685.826 732.55,685.826 733.109,685.826 733.669,685.826 734.228,685.826 734.787,685.826 735.346,685.826 735.906,685.826 736.465,685.826 737.024,685.826 737.583,685.826 738.143,685.826 738.702,685.826 739.261,685.826 739.82,685.826 740.38,685.826 740.939,685.826 741.498,685.826 742.057,685.826 742.617,685.826 743.176,685.826 743.735,685.826 744.294,685.826 744.854,685.826 745.413,685.826 745.972,685.826 746.531,685.826 747.091,685.826 747.65,685.826 748.209,685.826 748.768,685.826 749.328,685.826 749.887,685.826 750.446,685.826 751.005,685.826 751.565,685.826 752.124,685.826 752.683,685.826 753.242,685.826 753.802,685.826 754.361,685.826 754.92,685.826 755.479,685.826 756.039,685.826 756.598,685.826 757.157,685.826 757.716,685.826 758.276,685.826 758.835,685.826 759.394,685.826 759.953,685.826 760.513,685.826 761.072,685.826 761.631,685.826 762.19,685.826 762.75,685.826 763.309,685.826 763.868,685.826 764.427,685.826 764.987,685.826 765.546,685.826 766.105,685.826 766.664,685.826 767.224,685.826 767.783,685.826 768.342,685.826 768.901,685.826 769.461,685.826 770.02,685.826 770.579,685.826 771.138,685.826 771.698,685.826 772.257,685.826 772.816,685.826 773.375,685.826 773.935,685.826 774.494,685.826 775.053,685.826 775.612,685.826 776.172,685.826 776.731,685.826 777.29,685.826 777.849,685.826 778.409,685.826 778.968,685.826 779.527,685.826 780.086,685.826 780.646,685.826 781.205,685.826 781.764,685.826 782.323,685.826 782.883,685.826 783.442,685.826 784.001,685.826 784.56,685.826 785.12,685.826 785.679,685.826 786.238,685.826 786.797,685.826 787.357,685.826 787.916,685.826 788.475,685.826 789.034,685.826 789.594,685.826 790.153,685.826 790.712,685.826 791.271,685.826 791.831,685.826 792.39,685.826 792.949,685.826 793.508,685.826 794.068,685.826 794.627,685.826 795.186,685.826 795.745,685.826 796.305,685.826 796.864,685.826 797.423,685.826 797.982,685.826 798.542,685.826 799.101,685.826 799.66,685.826 800.219,685.826 800.779,685.826 801.338,685.826 801.897,685.826 802.456,685.826 803.016,685.826 803.575,685.826 804.134,685.826 804.693,685.826 805.253,685.826 805.812,685.826 806.371,685.826 806.931,685.826 807.49,685.826 808.049,685.826 808.608,685.826 809.168,685.826 809.727,685.826 810.286,685.826 810.845,685.826 811.405,685.826 811.964,685.826 812.523,685.826 813.082,685.826 813.642,685.826 814.201,685.826 814.76,685.826 815.319,685.826 815.879,685.826 816.438,685.826 816.997,685.826 817.556,685.826 818.116,685.826 818.675,685.826 819.234,685.826 819.793,685.826 820.353,685.826 820.912,685.826 821.471,685.826 822.03,685.826 822.59,685.826 823.149,685.826 823.708,685.826 824.267,685.826 824.827,685.826 825.386,685.826 825.945,685.826 826.504,685.826 827.064,685.826 827.623,685.826 828.182,685.826 828.741,685.826 829.301,685.826 829.86,685.826 830.419,685.826 830.978,685.826 831.538,685.826 832.097,685.826 832.656,685.826 833.215,685.826 833.775,685.826 834.334,685.826 834.893,685.826 835.452,685.826 836.012,685.826 836.571,685.826 837.13,685.826 837.689,685.826 838.249,685.826 838.808,685.826 839.367,685.826 839.926,685.826 840.486,685.826 841.045,685.826 841.604,685.826 842.163,685.826 842.723,685.826 843.282,685.826 843.841,685.826 844.4,685.826 844.96,685.826 845.519,685.826 846.078,685.826 846.637,685.826 847.197,685.826 847.756,685.826 848.315,685.826 848.874,685.826 849.434,685.826 849.993,685.826 850.552,685.826 851.111,685.826 851.671,685.826 852.23,685.826 852.789,685.826 853.348,685.826 853.908,685.826 854.467,685.826 855.026,685.826 855.585,685.826 856.145,685.826 856.704,685.826 857.263,685.826 857.822,685.826 858.382,685.826 858.941,685.826 859.5,685.826 860.059,685.826 860.619,685.826 861.178,685.826 861.737,685.826 862.296,685.826 862.856,685.826 863.415,685.826 863.974,685.826 864.533,685.826 865.093,685.826 865.652,685.826 866.211,685.826 866.77,685.826 867.33,685.826 867.889,685.826 868.448,685.826 869.007,685.826 869.567,685.826 870.126,685.826 870.685,685.826 871.244,685.826 871.804,685.826 872.363,685.826 872.922,685.826 873.481,685.826 874.041,685.826 874.6,685.826 875.159,685.826 875.718,685.826 876.278,685.826 876.837,685.826 877.396,685.826 877.955,685.826 878.515,685.826 879.074,685.826 879.633,685.826 880.192,685.826 880.752,685.826 881.311,685.826 881.87,685.826 882.429,685.826 882.989,685.826 883.548,685.826 884.107,685.826 884.666,685.826 885.226,685.826 885.785,685.826 886.344,685.826 886.903,685.826 887.463,685.826 888.022,685.826 888.581,685.826 889.14,685.826 889.7,685.826 890.259,685.826 890.818,685.826 891.377,685.826 891.937,685.826 892.496,685.826 893.055,685.826 893.614,685.826 894.174,685.826 894.733,685.826 895.292,685.826 895.851,685.826 896.411,685.826 896.97,685.826 897.529,685.826 898.088,685.826 898.648,685.826 899.207,685.826 899.766,685.826 900.325,685.826 900.885,685.826 901.444,685.826 902.003,685.826 902.562,685.826 903.122,685.826 903.681,685.826 904.24,685.826 904.799,685.826 905.359,685.826 905.918,685.826 906.477,685.826 907.036,685.826 907.596,685.826 908.155,685.826 908.714,685.826 909.273,685.826 909.833,685.826 910.392,685.826 910.951,685.826 911.51,685.826 912.07,685.826 912.629,685.826 913.188,685.826 913.747,685.826 914.307,685.826 914.866,685.826 915.425,685.826 915.984,685.826 916.544,685.826 917.103,685.826 917.662,685.826 918.221,685.826 918.781,685.826 919.34,685.826 919.899,685.826 920.458,685.826 921.018,685.826 921.577,685.826 922.136,685.826 922.695,685.826 923.255,685.826 923.814,685.826 924.373,685.826 924.932,685.826 925.492,685.826 926.051,685.826 926.61,685.826 927.169,685.826 927.729,685.826 928.288,685.826 928.847,685.826 929.406,685.826 929.966,685.826 930.525,685.826 931.084,685.826 931.644,685.826 932.203,685.826 932.762,685.826 933.321,685.826 933.881,685.826 934.44,685.826 934.999,685.826 935.558,685.826 936.118,685.826 936.677,685.826 937.236,685.826 937.795,685.826 938.355,685.826 938.914,685.826 939.473,685.826 940.032,685.826 940.592,685.826 941.151,685.826 941.71,685.826 942.269,685.826 942.829,685.826 943.388,685.826 943.947,685.826 944.506,685.826 945.066,685.826 945.625,685.826 946.184,685.826 946.743,685.826 947.303,685.826 947.862,685.826 948.421,685.826 948.98,685.826 949.54,685.826 950.099,685.826 950.658,685.826 951.217,685.826 951.777,685.826 952.336,685.826 952.895,685.826 953.454,685.826 954.014,685.826 954.573,685.826 955.132,685.826 955.691,685.826 956.251,685.826 956.81,685.826 957.369,685.826 957.928,685.826 958.488,685.826 959.047,685.826 959.606,685.826 960.165,685.826 960.725,685.826 961.284,685.826 961.843,685.826 962.402,685.826 962.962,685.826 963.521,685.826 964.08,685.826 964.639,685.826 965.199,685.826 965.758,685.826 966.317,685.826 966.876,685.826 967.436,685.826 967.995,685.826 968.554,685.826 969.113,685.826 969.673,685.826 970.232,685.826 970.791,685.826 971.35,685.826 971.91,685.826 972.469,685.826 973.028,685.826 973.587,685.826 974.147,685.826 974.706,685.826 975.265,685.826 975.824,685.826 976.384,685.826 976.943,685.826 977.502,685.826 978.061,685.826 978.621,685.826 979.18,685.826 979.739,685.826 980.298,685.826 980.858,685.826 981.417,685.826 981.976,685.826 982.535,685.826 983.095,685.826 983.654,685.826 984.213,685.826 984.772,685.826 985.332,685.826 985.891,685.826 986.45,685.826 987.009,685.826 987.569,685.826 988.128,685.826 988.687,685.826 989.246,685.826 989.806,685.826 990.365,685.826 990.924,685.826 991.483,685.826 992.043,685.826 992.602,685.826 993.161,685.826 993.72,685.826 994.28,685.826 994.839,685.826 995.398,685.826 995.957,685.826 996.517,685.826 997.076,685.826 997.635,685.826 998.194,685.826 998.754,685.826 999.313,685.826 999.872,685.826 1000.43,685.826 1000.99,685.826 1001.55,685.826 1002.11,685.826 1002.67,685.826 1003.23,685.826 1003.79,685.826 1004.35,685.826 1004.91,685.826 1005.46,685.826 1006.02,685.826 1006.58,685.826 1007.14,685.826 1007.7,685.826 1008.26,685.826 1008.82,685.826 1009.38,685.826 1009.94,685.826 1010.5,685.826 1011.06,685.826 1011.62,685.826 1012.18,685.826 1012.73,685.826 1013.29,685.826 1013.85,685.826 1014.41,685.826 1014.97,685.826 1015.53,685.826 1016.09,685.826 1016.65,685.826 1017.21,685.826 1017.77,685.826 1018.33,685.826 1018.89,685.826 1019.45,685.826 1020.01,685.826 1020.56,685.826 1021.12,685.826 1021.68,685.826 1022.24,685.826 1022.8,685.826 1023.36,685.826 1023.92,685.826 1024.48,685.826 1025.04,685.826 1025.6,685.826 1026.16,685.826 1026.72,685.826 1027.28,685.826 1027.83,685.826 1028.39,685.826 1028.95,685.826 1029.51,685.826 1030.07,685.826 1030.63,685.826 1031.19,685.826 1031.75,685.826 1032.31,685.826 1032.87,685.826 1033.43,685.826 1033.99,685.826 1034.55,685.826 1035.1,685.826 1035.66,685.826 1036.22,685.826 1036.78,685.826 1037.34,685.826 1037.9,685.826 1038.46,685.826 1039.02,685.826 1039.58,685.826 1040.14,685.826 1040.7,685.826 1041.26,685.826 1041.82,685.826 1042.38,685.826 1042.93,685.826 1043.49,685.826 1044.05,685.826 1044.61,685.826 1045.17,685.826 1045.73,685.826 1046.29,685.826 1046.85,685.826 1047.41,685.826 1047.97,685.826 1048.53,685.826 1049.09,685.826 1049.65,685.826 1050.2,685.826 1050.76,685.826 1051.32,685.826 1051.88,685.826 1052.44,685.826 1053,685.826 1053.56,685.826 1054.12,685.826 1054.68,685.826 1055.24,685.826 1055.8,685.826 1056.36,685.826 1056.92,685.826 1057.48,685.826 1058.03,685.826 1058.59,685.826 1059.15,685.826 1059.71,685.826 1060.27,685.826 1060.83,685.826 1061.39,685.826 1061.95,685.826 1062.51,685.826 1063.07,685.826 1063.63,685.826 1064.19,685.826 1064.75,685.826 1065.3,685.826 1065.86,685.826 1066.42,685.826 1066.98,685.826 1067.54,685.826 1068.1,685.826 1068.66,685.826 1069.22,685.826 1069.78,685.826 1070.34,685.826 1070.9,685.826 1071.46,685.826 1072.02,685.826 1072.57,685.826 1073.13,685.826 1073.69,685.826 1074.25,685.826 1074.81,685.826 1075.37,685.826 1075.93,685.826 1076.49,685.826 1077.05,685.826 1077.61,685.826 1078.17,685.826 1078.73,685.826 1079.29,685.826 1079.85,685.826 1080.4,685.826 1080.96,685.826 1081.52,685.826 1082.08,685.826 1082.64,685.826 1083.2,685.826 1083.76,685.826 1084.32,685.826 1084.88,685.826 1085.44,685.826 1086,685.826 1086.56,685.826 1087.12,685.826 1087.67,685.826 1088.23,685.826 1088.79,685.826 1089.35,685.826 1089.91,685.826 1090.47,685.826 1091.03,685.826 1091.59,685.826 1092.15,685.826 1092.71,685.826 1093.27,685.826 1093.83,685.826 1094.39,685.826 1094.94,685.826 1095.5,685.826 1096.06,685.826 1096.62,685.826 1097.18,685.826 1097.74,685.826 1098.3,685.826 1098.86,685.826 1099.42,685.826 1099.98,685.826 1100.54,685.826 1101.1,685.826 1101.66,685.826 1102.22,685.826 1102.77,685.826 1103.33,685.826 1103.89,685.826 1104.45,685.826 1105.01,685.826 1105.57,685.826 1106.13,685.826 1106.69,685.826 1107.25,685.826 1107.81,685.826 1108.37,685.826 1108.93,685.826 1109.49,685.826 1110.04,685.826 1110.6,685.826 1111.16,685.826 1111.72,685.826 1112.28,685.826 1112.84,685.826 1113.4,685.826 1113.96,685.826 1114.52,685.826 1115.08,685.826 1115.64,685.826 1116.2,685.826 1116.76,685.826 1117.31,685.826 1117.87,685.826 1118.43,685.826 1118.99,685.826 1119.55,685.826 1120.11,685.826 1120.67,685.826 1121.23,685.826 1121.79,685.826 1122.35,685.826 1122.91,685.826 1123.47,685.826 1124.03,685.826 1124.59,685.826 1125.14,685.826 1125.7,685.826 1126.26,685.826 1126.82,685.826 1127.38,685.826 1127.94,685.826 1128.5,685.826 1129.06,685.826 1129.62,685.826 1130.18,685.826 1130.74,685.826 1131.3,685.826 1131.86,685.826 1132.41,685.826 1132.97,685.826 1133.53,685.826 1134.09,685.826 1134.65,685.826 1135.21,685.826 1135.77,685.826 1136.33,685.826 1136.89,685.826 1137.45,685.826 1138.01,685.826 1138.57,685.826 1139.13,685.826 1139.68,685.826 1140.24,685.826 1140.8,685.826 1141.36,685.826 1141.92,685.826 1142.48,685.826 1143.04,685.826 1143.6,685.826 1144.16,685.826 1144.72,685.826 1145.28,685.826 1145.84,685.826 1146.4,685.826 1146.96,685.826 1147.51,685.826 1148.07,685.826 1148.63,685.826 1149.19,685.826 1149.75,685.826 1150.31,685.826 1150.87,685.826 1151.43,685.826 1151.99,685.826 1152.55,685.826 1153.11,685.826 1153.67,685.826 1154.23,685.826 1154.78,685.826 1155.34,685.826 1155.9,685.826 1156.46,685.826 1157.02,685.826 1157.58,685.826 1158.14,685.826 1158.7,685.826 1159.26,685.826 1159.82,685.826 1160.38,685.826 1160.94,685.826 1161.5,685.826 1162.05,685.826 1162.61,685.826 1163.17,685.826 1163.73,685.826 1164.29,685.826 1164.85,685.826 1165.41,685.826 1165.97,685.826 1166.53,685.826 1167.09,685.826 1167.65,685.826 1168.21,685.826 1168.77,685.826 1169.33,685.826 1169.88,685.826 1170.44,685.826 1171,685.826 1171.56,685.826 1172.12,685.826 1172.68,685.826 1173.24,685.826 1173.8,685.826 1174.36,685.826 1174.92,685.826 1175.48,685.826 1176.04,685.826 1176.6,685.826 1177.15,685.826 1177.71,685.826 1178.27,685.826 1178.83,685.826 1179.39,685.826 1179.95,685.826 1180.51,685.826 1181.07,685.826 1181.63,685.826 1182.19,685.826 1182.75,685.826 1183.31,685.826 1183.87,685.826 1184.43,685.826 1184.98,685.826 1185.54,685.826 1186.1,685.826 1186.66,685.826 1187.22,685.826 1187.78,685.826 1188.34,685.826 1188.9,685.826 1189.46,685.826 1190.02,685.826 1190.58,685.826 1191.14,685.826 1191.7,685.826 1192.25,685.826 1192.81,685.826 1193.37,685.826 1193.93,685.826 1194.49,685.826 1195.05,685.826 1195.61,685.826 1196.17,685.826 1196.73,685.826 1197.29,685.826 1197.85,685.826 1198.41,685.826 1198.97,685.826 1199.52,685.826 1200.08,685.826 1200.64,685.826 1201.2,685.826 1201.76,685.826 1202.32,685.826 1202.88,685.826 1203.44,685.826 1204,685.826 1204.56,685.826 1205.12,685.826 1205.68,685.826 1206.24,685.826 1206.8,685.826 1207.35,685.826 1207.91,685.826 1208.47,685.826 1209.03,685.826 1209.59,685.826 1210.15,685.826 1210.71,685.826 1211.27,685.826 1211.83,685.826 1212.39,685.826 1212.95,685.826 1213.51,685.826 1214.07,685.826 1214.62,685.826 1215.18,685.826 1215.74,685.826 1216.3,685.826 1216.86,685.826 1217.42,685.826 1217.98,685.826 1218.54,685.826 1219.1,685.826 1219.66,685.826 1220.22,685.826 1220.78,685.826 1221.34,685.826 1221.89,685.826 1222.45,685.826 1223.01,685.826 1223.57,685.826 1224.13,685.826 1224.69,685.826 1225.25,685.826 1225.81,685.826 1226.37,685.826 1226.93,685.826 1227.49,685.826 1228.05,685.826 1228.61,685.826 1229.17,685.826 1229.72,685.826 1230.28,685.826 1230.84,685.826 1231.4,685.826 1231.96,685.826 1232.52,685.826 1233.08,685.826 1233.64,685.826 1234.2,685.826 1234.76,685.826 1235.32,685.826 1235.88,685.826 1236.44,685.826 1236.99,685.826 1237.55,685.826 1238.11,685.826 1238.67,685.826 1239.23,685.826 1239.79,685.826 1240.35,685.826 1240.91,685.826 1241.47,685.826 1242.03,685.826 1242.59,685.826 1243.15,685.826 1243.71,685.826 1244.26,685.826 1244.82,685.826 1245.38,685.826 1245.94,685.826 1246.5,685.826 1247.06,685.826 1247.62,685.826 1248.18,685.826 1248.74,685.826 1249.3,685.826 1249.86,685.826 1250.42,685.826 1250.98,685.826 1251.54,685.826 1252.09,685.826 1252.65,685.826 1253.21,685.826 1253.77,685.826 1254.33,685.826 1254.89,685.826 1255.45,685.826 1256.01,685.826 1256.57,685.826 1257.13,685.826 1257.69,685.826 1258.25,685.826 1258.81,685.826 1259.36,685.826 1259.92,685.826 1260.48,685.826 1261.04,685.826 1261.6,685.826 1262.16,685.826 1262.72,685.826 1263.28,685.826 1263.84,685.826 1264.4,685.826 1264.96,685.826 1265.52,685.826 1266.08,685.826 1266.63,685.826 1267.19,685.826 1267.75,685.826 1268.31,685.826 1268.87,685.826 1269.43,685.826 1269.99,685.826 1270.55,685.826 1271.11,685.826 1271.67,685.826 1272.23,685.826 1272.79,685.826 1273.35,685.826 1273.91,685.826 1274.46,685.826 1275.02,685.826 1275.58,685.826 1276.14,685.826 1276.7,685.826 1277.26,685.826 1277.82,685.826 1278.38,685.826 1278.94,685.826 1279.5,685.826 1280.06,685.826 1280.62,685.826 1281.18,685.826 1281.73,685.826 1282.29,685.826 1282.85,685.826 1283.41,685.826 1283.97,685.826 1284.53,685.826 1285.09,685.826 1285.65,685.826 1286.21,685.826 1286.77,685.826 1287.33,685.826 1287.89,685.826 1288.45,685.826 1289,685.826 1289.56,685.826 1290.12,685.826 1290.68,685.826 1291.24,685.826 1291.8,685.826 1292.36,685.826 1292.92,685.826 1293.48,685.826 1294.04,685.826 1294.6,685.826 1295.16,685.826 1295.72,685.826 1296.28,685.826 1296.83,685.826 1297.39,685.826 1297.95,685.826 1298.51,685.826 1299.07,685.826 1299.63,685.826 1300.19,685.826 1300.75,685.826 1301.31,685.826 1301.87,685.826 1302.43,685.826 1302.99,685.826 1303.55,685.826 1304.1,685.826 1304.66,685.826 1305.22,685.826 1305.78,685.826 1306.34,685.826 1306.9,685.826 1307.46,685.826 1308.02,685.826 1308.58,685.826 1309.14,685.826 1309.7,685.826 1310.26,685.826 1310.82,685.826 1311.38,685.826 1311.93,685.826 1312.49,685.826 1313.05,685.826 1313.61,685.826 1314.17,685.826 1314.73,685.826 1315.29,685.826 1315.85,685.826 1316.41,685.826 1316.97,685.826 1317.53,685.826 1318.09,685.826 1318.65,685.826 1319.2,685.826 1319.76,685.826 1320.32,685.826 1320.88,685.826 1321.44,685.826 1322,685.826 1322.56,685.826 1323.12,685.826 1323.68,685.826 1324.24,685.826 1324.8,685.826 1325.36,685.826 1325.92,685.826 1326.47,685.826 1327.03,685.826 1327.59,685.826 1328.15,685.826 1328.71,685.826 1329.27,685.826 1329.83,685.826 1330.39,685.826 1330.95,685.826 1331.51,685.826 1332.07,685.826 1332.63,685.826 1333.19,685.826 1333.75,685.826 1334.3,685.826 1334.86,685.826 1335.42,685.826 1335.98,685.826 1336.54,685.826 1337.1,685.826 1337.66,685.826 1338.22,685.826 1338.78,685.826 1339.34,685.826 1339.9,685.826 1340.46,685.826 1341.02,685.826 1341.57,685.826 1342.13,685.826 1342.69,685.826 1343.25,685.826 1343.81,685.826 1344.37,685.826 1344.93,685.826 1345.49,685.826 1346.05,685.826 1346.61,685.826 1347.17,685.826 1347.73,685.826 1348.29,685.826 1348.84,685.826 1349.4,685.826 1349.96,685.826 1350.52,685.826 1351.08,685.826 1351.64,685.826 1352.2,685.826 1352.76,685.826 1353.32,685.826 1353.88,685.826 1354.44,685.826 1355,685.826 1355.56,685.826 1356.12,685.826 1356.67,685.826 1357.23,685.826 1357.79,685.826 1358.35,685.826 1358.91,685.826 1359.47,685.826 1360.03,685.826 1360.59,685.826 1361.15,685.826 1361.71,685.826 1362.27,685.826 1362.83,685.826 1363.39,685.826 1363.94,685.826 1364.5,685.826 1365.06,685.826 1365.62,685.826 1366.18,685.826 1366.74,685.826 1367.3,685.826 1367.86,685.826 1368.42,685.826 1368.98,685.826 1369.54,685.826 1370.1,685.826 1370.66,685.826 1371.21,685.826 1371.77,685.826 1372.33,685.826 1372.89,685.826 1373.45,685.826 1374.01,685.826 1374.57,685.826 1375.13,685.826 1375.69,685.826 1376.25,685.826 1376.81,685.826 1377.37,685.826 1377.93,685.826 1378.49,685.826 1379.04,685.826 1379.6,685.826 1380.16,685.826 1380.72,685.826 1381.28,685.826 1381.84,685.826 1382.4,685.826 1382.96,685.826 1383.52,685.826 1384.08,685.826 1384.64,685.826 1385.2,685.826 1385.76,685.826 1386.31,685.826 1386.87,685.826 1387.43,685.826 1387.99,685.826 1388.55,685.826 1389.11,685.826 1389.67,685.826 1390.23,685.826 1390.79,685.826 1391.35,685.826 1391.91,685.826 1392.47,685.826 1393.03,685.826 1393.58,685.826 1394.14,685.826 1394.7,685.826 1395.26,685.826 1395.82,685.826 1396.38,685.826 1396.94,685.826 1397.5,685.826 1398.06,685.826 1398.62,685.826 1399.18,685.826 1399.74,685.826 1400.3,685.826 1400.86,685.826 1401.41,685.826 1401.97,685.826 1402.53,685.826 1403.09,685.826 1403.65,685.826 1404.21,685.826 1404.77,685.826 1405.33,685.826 1405.89,685.826 1406.45,685.826 1407.01,685.826 1407.57,685.826 1408.13,685.826 1408.68,685.826 1409.24,685.826 1409.8,685.826 1410.36,685.826 1410.92,685.826 1411.48,685.826 1412.04,685.826 1412.6,685.826 1413.16,685.826 1413.72,685.826 1414.28,685.826 1414.84,685.826 1415.4,685.826 1415.95,685.826 1416.51,685.826 1417.07,685.826 1417.63,685.826 1418.19,685.826 1418.75,685.826 1419.31,685.826 1419.87,685.826 1420.43,685.826 1420.99,685.826 1421.55,685.826 1422.11,685.826 1422.67,685.826 1423.23,685.826 1423.78,685.826 1424.34,685.826 1424.9,685.826 1425.46,685.826 1426.02,685.826 1426.58,685.826 1427.14,685.826 1427.7,685.826 1428.26,685.826 1428.82,685.826 1429.38,685.826 1429.94,685.826 1430.5,685.826 1431.05,685.826 1431.61,685.826 1432.17,685.826 1432.73,685.826 1433.29,685.826 1433.85,685.826 1434.41,685.826 1434.97,685.826 1435.53,685.826 1436.09,685.826 1436.65,685.826 1437.21,685.826 1437.77,685.826 1438.33,685.826 1438.88,685.826 1439.44,685.826 1440,685.826 1440.56,685.826 1441.12,685.826 1441.68,685.826 1442.24,685.826 1442.8,685.826 1443.36,685.826 1443.92,685.826 1444.48,685.826 1445.04,685.826 1445.6,685.826 1446.15,685.826 1446.71,685.826 1447.27,685.826 1447.83,685.826 1448.39,685.826 1448.95,685.826 1449.51,685.826 1450.07,685.826 1450.63,685.826 1451.19,685.826 1451.75,685.826 1452.31,685.826 1452.87,685.826 1453.42,685.826 1453.98,685.826 1454.54,685.826 1455.1,685.826 1455.66,685.826 1456.22,685.826 1456.78,685.826 1457.34,685.826 1457.9,685.826 1458.46,685.826 1459.02,685.826 1459.58,685.826 1460.14,685.826 1460.7,685.826 1461.25,685.826 1461.81,685.826 1462.37,685.826 1462.93,685.826 1463.49,685.826 1464.05,685.826 1464.61,685.826 1465.17,685.826 1465.73,685.826 1466.29,685.826 1466.85,685.826 1467.41,685.826 1467.97,685.826 1468.52,685.826 1469.08,685.826 1469.64,685.826 1470.2,685.826 1470.76,685.826 1471.32,685.826 1471.88,685.826 1472.44,685.826 1473,685.826 1473.56,685.826 1474.12,685.826 1474.68,685.826 1475.24,685.826 1475.79,685.826 1476.35,685.826 1476.91,685.826 1477.47,685.826 1478.03,685.826 1478.59,685.826 1479.15,685.826 1479.71,685.826 1480.27,685.826 1480.83,685.826 1481.39,685.826 1481.95,685.826 1482.51,685.826 1483.07,685.826 1483.62,685.826 1484.18,685.826 1484.74,685.826 1485.3,685.826 1485.86,685.826 1486.42,685.826 1486.98,685.826 1487.54,685.826 1488.1,685.826 1488.66,685.826 1489.22,685.826 1489.78,685.826 1490.34,685.826 1490.89,685.826 1491.45,685.826 1492.01,685.826 1492.57,685.826 1493.13,685.826 1493.69,685.826 1494.25,685.826 1494.81,685.826 1495.37,685.826 1495.93,685.826 1496.49,685.826 1497.05,685.826 1497.61,685.826 1498.16,685.826 1498.72,685.826 1499.28,685.826 1499.84,685.826 1500.4,685.826 1500.96,685.826 1501.52,685.826 1502.08,685.826 1502.64,685.826 1503.2,685.826 1503.76,685.826 1504.32,685.826 1504.88,685.826 1505.44,685.826 1505.99,685.826 1506.55,685.826 1507.11,685.826 1507.67,685.826 1508.23,685.826 1508.79,685.826 1509.35,685.826 1509.91,685.826 1510.47,685.826 1511.03,685.826 1511.59,685.826 1512.15,685.826 1512.71,685.826 1513.26,685.826 1513.82,685.826 1514.38,685.826 1514.94,685.826 1515.5,685.826 1516.06,685.826 1516.62,685.826 1517.18,685.826 1517.74,685.826 1518.3,685.826 1518.86,685.826 1519.42,685.826 1519.98,685.826 1520.53,685.826 1521.09,685.826 1521.65,685.826 1522.21,685.826 1522.77,685.826 1523.33,685.826 1523.89,685.826 1524.45,685.826 1525.01,685.826 1525.57,685.826 1526.13,685.826 1526.69,685.826 1527.25,685.826 1527.81,685.826 1528.36,685.826 1528.92,685.826 1529.48,685.826 1530.04,685.826 1530.6,685.826 1531.16,685.826 1531.72,685.826 1532.28,685.826 1532.84,685.826 1533.4,685.826 1533.96,685.826 1534.52,685.826 1535.08,685.826 1535.63,685.826 1536.19,685.826 1536.75,685.826 1537.31,685.826 1537.87,685.826 1538.43,685.826 1538.99,685.826 1539.55,685.826 1540.11,685.826 1540.67,685.826 1541.23,685.826 1541.79,685.826 1542.35,685.826 1542.9,685.826 1543.46,685.826 1544.02,685.826 1544.58,685.826 1545.14,685.826 1545.7,685.826 1546.26,685.826 1546.82,685.826 1547.38,685.826 1547.94,685.826 1548.5,685.826 1549.06,685.826 1549.62,685.826 1550.18,685.826 1550.73,685.826 1551.29,685.826 1551.85,685.826 1552.41,685.826 1552.97,685.826 1553.53,685.826 1554.09,685.826 1554.65,685.826 1555.21,685.826 1555.77,685.826 1556.33,685.826 1556.89,685.826 1557.45,685.826 1558,685.826 1558.56,685.826 1559.12,685.826 1559.68,685.826 1560.24,685.826 1560.8,685.826 1561.36,685.826 1561.92,685.826 1562.48,685.826 1563.04,685.826 1563.6,685.826 1564.16,685.826 1564.72,685.826 1565.28,685.826 1565.83,685.826 1566.39,685.826 1566.95,685.826 1567.51,685.826 1568.07,685.826 1568.63,685.826 1569.19,685.826 1569.75,685.826 1570.31,685.826 1570.87,685.826 1571.43,685.826 1571.99,685.826 1572.55,685.826 1573.1,685.826 1573.66,685.826 1574.22,685.826 1574.78,685.826 1575.34,685.826 1575.9,685.826 1576.46,685.826 1577.02,685.826 1577.58,685.826 1578.14,685.826 1578.7,685.826 1579.26,685.826 1579.82,685.826 1580.37,685.826 1580.93,685.826 1581.49,685.826 1582.05,685.826 1582.61,685.826 1583.17,685.826 1583.73,685.826 1584.29,685.826 1584.85,685.826 1585.41,685.826 1585.97,685.826 1586.53,685.826 1587.09,685.826 1587.65,685.826 1588.2,685.826 1588.76,685.826 1589.32,685.826 1589.88,685.826 1590.44,685.826 1591,685.826 1591.56,685.826 1592.12,685.826 1592.68,685.826 1593.24,685.826 1593.8,685.826 1594.36,685.826 1594.92,685.826 1595.47,685.826 1596.03,685.826 1596.59,685.826 1597.15,685.826 1597.71,685.826 1598.27,685.826 1598.83,685.826 1599.39,685.826 1599.95,685.826 1600.51,685.826 1601.07,685.826 1601.63,685.826 1602.19,685.826 1602.74,685.826 1603.3,685.826 1603.86,685.826 1604.42,685.826 1604.98,685.826 1605.54,685.826 1606.1,685.826 1606.66,685.826 1607.22,685.826 1607.78,685.826 1608.34,685.826 1608.9,685.826 1609.46,685.826 1610.02,685.826 1610.57,685.826 1611.13,685.826 1611.69,685.826 1612.25,685.826 1612.81,685.826 1613.37,685.826 1613.93,685.826 1614.49,685.826 1615.05,685.826 1615.61,685.826 1616.17,685.826 1616.73,685.826 1617.29,685.826 1617.84,685.826 1618.4,685.826 1618.96,685.826 1619.52,685.826 1620.08,685.826 1620.64,685.826 1621.2,685.826 1621.76,685.826 1622.32,685.826 1622.88,685.826 1623.44,685.826 1624,685.826 1624.56,685.826 1625.11,685.826 1625.67,685.826 1626.23,685.826 1626.79,685.826 1627.35,685.826 1627.91,685.826 1628.47,685.826 1629.03,685.826 1629.59,685.826 1630.15,685.826 1630.71,685.826 1631.27,685.826 1631.83,685.826 1632.39,685.826 1632.94,685.826 1633.5,685.826 1634.06,685.826 1634.62,685.826 1635.18,685.826 1635.74,685.826 1636.3,685.826 1636.86,685.826 1637.42,685.826 1637.98,685.826 1638.54,685.826 1639.1,685.826 1639.66,685.826 1640.21,685.826 1640.77,685.826 1641.33,685.826 1641.89,685.826 1642.45,685.826 1643.01,685.826 1643.57,685.826 1644.13,685.826 1644.69,685.826 1645.25,685.826 1645.81,685.826 1646.37,685.826 1646.93,685.826 1647.48,685.826 1648.04,685.826 1648.6,685.826 1649.16,685.826 1649.72,685.826 1650.28,685.826 1650.84,685.826 1651.4,685.826 1651.96,685.826 1652.52,685.826 1653.08,685.826 1653.64,685.826 1654.2,685.826 1654.76,685.826 1655.31,685.826 1655.87,685.826 1656.43,685.826 1656.99,685.826 1657.55,685.826 1658.11,685.826 1658.67,685.826 1659.23,685.826 1659.79,685.826 1660.35,685.826 1660.91,685.826 1661.47,685.826 1662.03,685.826 1662.58,685.826 1663.14,685.826 1663.7,685.826 1664.26,685.826 1664.82,685.826 1665.38,685.826 1665.94,685.826 1666.5,685.826 1667.06,685.826 1667.62,685.826 1668.18,685.826 1668.74,685.826 1669.3,685.826 1669.85,685.826 1670.41,685.826 1670.97,685.826 1671.53,685.826 1672.09,685.826 1672.65,685.826 1673.21,685.826 1673.77,685.826 1674.33,685.826 1674.89,685.826 1675.45,685.826 1676.01,685.826 1676.57,685.826 1677.13,685.826 1677.68,685.826 1678.24,685.826 1678.8,685.826 1679.36,685.826 1679.92,685.826 1680.48,685.826 1681.04,685.826 1681.6,685.826 1682.16,685.826 1682.72,685.826 1683.28,685.826 1683.84,685.826 1684.4,685.826 1684.95,685.826 1685.51,685.826 1686.07,685.826 1686.63,685.826 1687.19,685.826 1687.75,685.826 1688.31,685.826 1688.87,685.826 1689.43,685.826 1689.99,685.826 1690.55,685.826 1691.11,685.826 1691.67,685.826 1692.23,685.826 1692.78,685.826 1693.34,685.826 1693.9,685.826 1694.46,685.826 1695.02,685.826 1695.58,685.826 1696.14,685.826 1696.7,685.826 1697.26,685.826 1697.82,685.826 1698.38,685.826 1698.94,685.826 1699.5,685.826 1700.05,685.826 1700.61,685.826 1701.17,685.826 1701.73,685.826 1702.29,685.826 1702.85,685.826 1703.41,685.826 1703.97,685.826 1704.53,685.826 1705.09,685.826 1705.65,685.826 1706.21,685.826 1706.77,685.826 1707.32,685.826 1707.88,685.826 1708.44,685.826 1709,685.826 1709.56,685.826 1710.12,685.826 1710.68,685.826 1711.24,685.826 1711.8,685.826 1712.36,685.826 1712.92,685.826 1713.48,685.826 1714.04,685.826 1714.6,685.826 1715.15,685.826 1715.71,685.826 1716.27,685.826 1716.83,685.826 1717.39,685.826 1717.95,685.826 1718.51,685.826 1719.07,685.826 1719.63,685.826 1720.19,685.826 1720.75,685.826 1721.31,685.826 1721.87,685.826 1722.42,685.826 1722.98,685.826 1723.54,685.826 1724.1,685.826 1724.66,685.826 1725.22,685.826 1725.78,685.826 1726.34,685.826 1726.9,685.826 1727.46,685.826 1728.02,685.826 1728.58,685.826 1729.14,685.826 1729.69,685.826 1730.25,685.826 1730.81,685.826 1731.37,685.826 1731.93,685.826 1732.49,685.826 1733.05,685.826 1733.61,685.826 1734.17,685.826 1734.73,685.826 1735.29,685.826 1735.85,685.826 1736.41,685.826 1736.97,685.826 1737.52,685.826 1738.08,685.826 1738.64,685.826 1739.2,685.826 1739.76,685.826 1740.32,685.826 1740.88,685.826 1741.44,685.826 1742,685.826 1742.56,685.826 1743.12,685.826 1743.68,685.826 1744.24,685.826 1744.79,685.826 1745.35,685.826 1745.91,685.826 1746.47,685.826 1747.03,685.826 1747.59,685.826 1748.15,685.826 1748.71,685.826 1749.27,685.826 1749.83,685.826 1750.39,685.826 1750.95,685.826 1751.51,685.826 1752.06,685.826 1752.62,685.826 1753.18,685.826 1753.74,685.826 1754.3,685.826 1754.86,685.826 1755.42,685.826 1755.98,685.826 1756.54,685.826 1757.1,685.826 1757.66,685.826 1758.22,685.826 1758.78,685.826 1759.34,685.826 1759.89,685.826 1760.45,685.826 1761.01,685.826 1761.57,685.826 1762.13,685.826 1762.69,685.826 1763.25,685.826 1763.81,685.826 1764.37,685.826 1764.93,685.826 1765.49,685.826 1766.05,685.826 1766.61,685.826 1767.16,685.826 1767.72,685.826 1768.28,685.826 1768.84,685.826 1769.4,685.826 1769.96,685.826 1770.52,685.826 1771.08,685.826 1771.64,685.826 1772.2,685.826 1772.76,685.826 1773.32,685.826 1773.88,685.826 1774.43,685.826 1774.99,685.826 1775.55,685.826 1776.11,685.826 1776.67,685.826 1777.23,685.826 1777.79,685.826 1778.35,685.826 1778.91,685.826 1779.47,685.826 1780.03,685.826 1780.59,685.826 1781.15,685.826 1781.71,685.826 1782.26,685.826 1782.82,685.826 1783.38,685.826 1783.94,685.826 1784.5,685.826 1785.06,685.826 1785.62,685.826 1786.18,685.826 1786.74,685.826 1787.3,685.826 1787.86,685.826 1788.42,685.826 1788.98,685.826 1789.53,685.826 1790.09,685.826 1790.65,685.826 1791.21,685.826 1791.77,685.826 1792.33,685.826 1792.89,685.826 1793.45,685.826 1794.01,685.826 1794.57,685.826 1795.13,685.826 1795.69,685.826 1796.25,685.826 1796.8,685.826 1797.36,685.826 1797.92,685.826 1798.48,685.826 1799.04,685.826 1799.6,685.826 1800.16,685.826 1800.72,685.826 1801.28,685.826 1801.84,685.826 1802.4,685.826 1802.96,685.826 1803.52,685.826 1804.08,685.826 1804.63,685.826 1805.19,685.826 1805.75,685.826 1806.31,685.826 1806.87,685.826 1807.43,685.826 1807.99,685.826 1808.55,685.826 1809.11,685.826 1809.67,685.826 1810.23,685.826 1810.79,685.826 1811.35,685.826 1811.9,685.826 1812.46,685.826 1813.02,685.826 1813.58,685.826 1814.14,685.826 1814.7,685.826 1815.26,685.826 1815.82,685.826 1816.38,685.826 1816.94,685.826 1817.5,685.826 1818.06,685.826 1818.62,685.826 1819.18,685.826 1819.73,685.826 1820.29,685.826 1820.85,685.826 1821.41,685.826 1821.97,685.826 1822.53,685.826 1823.09,685.826 1823.65,685.826 1824.21,685.826 1824.77,685.826 1825.33,685.826 1825.89,685.826 1826.45,685.826 1827,685.826 1827.56,685.826 1828.12,685.826 1828.68,685.826 1829.24,685.826 1829.8,685.826 1830.36,685.826 1830.92,685.826 1831.48,685.826 1832.04,685.826 1832.6,685.826 1833.16,685.826 1833.72,685.826 1834.27,685.826 1834.83,685.826 1835.39,685.826 1835.95,685.826 1836.51,685.826 1837.07,685.826 1837.63,685.826 1838.19,685.826 \"/>\n<path clip-path=\"url(#clip903)\" d=\"M720.247 684.089 L720.806 684.089 L721.365 684.089 L721.924 684.089 L722.484 684.089 L723.043 684.089 L723.602 684.089 L724.161 684.089 L724.721 684.089 L725.28 684.089 L725.839 684.089 L726.398 684.089 L726.958 684.089 L727.517 684.089 L728.076 684.089 L728.635 684.089 L729.195 684.089 L729.754 684.089 L730.313 684.089 L730.872 684.089 L731.432 684.089 L731.991 684.089 L732.55 684.089 L733.109 684.089 L733.669 684.089 L734.228 684.089 L734.787 684.089 L735.346 684.089 L735.906 684.089 L736.465 684.089 L737.024 684.089 L737.583 684.089 L738.143 684.089 L738.702 684.089 L739.261 684.089 L739.82 684.089 L740.38 684.089 L740.939 684.089 L741.498 684.089 L742.057 684.089 L742.617 684.089 L743.176 684.089 L743.735 684.089 L744.294 684.089 L744.854 684.089 L745.413 684.089 L745.972 684.089 L746.531 684.089 L747.091 684.089 L747.65 684.089 L748.209 684.089 L748.768 684.089 L749.328 684.089 L749.887 684.089 L750.446 684.089 L751.005 684.089 L751.565 684.089 L752.124 684.089 L752.683 684.089 L753.242 684.089 L753.802 684.089 L754.361 684.089 L754.92 684.089 L755.479 684.089 L756.039 684.089 L756.598 684.089 L757.157 684.089 L757.716 684.089 L758.276 684.089 L758.835 684.089 L759.394 684.089 L759.953 684.089 L760.513 684.089 L761.072 684.089 L761.631 684.089 L762.19 684.089 L762.75 684.089 L763.309 684.089 L763.868 684.089 L764.427 684.089 L764.987 684.089 L765.546 684.089 L766.105 684.089 L766.664 684.089 L767.224 684.089 L767.783 684.089 L768.342 684.089 L768.901 684.089 L769.461 684.089 L770.02 684.089 L770.579 684.089 L771.138 684.089 L771.698 684.089 L772.257 684.089 L772.816 684.089 L773.375 684.089 L773.935 684.089 L774.494 684.089 L775.053 684.089 L775.612 684.089 L776.172 684.089 L776.731 684.089 L777.29 684.089 L777.849 684.089 L778.409 684.089 L778.968 684.089 L779.527 684.089 L780.086 684.089 L780.646 684.089 L781.205 684.089 L781.764 684.089 L782.323 684.089 L782.883 684.089 L783.442 684.089 L784.001 684.089 L784.56 684.089 L785.12 684.089 L785.679 684.089 L786.238 684.089 L786.797 684.089 L787.357 684.089 L787.916 684.089 L788.475 684.089 L789.034 684.089 L789.594 684.089 L790.153 684.089 L790.712 684.089 L791.271 684.089 L791.831 684.089 L792.39 684.089 L792.949 684.089 L793.508 684.089 L794.068 684.089 L794.627 684.089 L795.186 684.089 L795.745 684.089 L796.305 684.089 L796.864 684.089 L797.423 684.089 L797.982 684.089 L798.542 684.089 L799.101 684.089 L799.66 684.089 L800.219 684.089 L800.779 684.089 L801.338 684.089 L801.897 684.089 L802.456 684.089 L803.016 684.089 L803.575 684.089 L804.134 684.089 L804.693 684.089 L805.253 684.089 L805.812 684.089 L806.371 684.089 L806.931 684.089 L807.49 684.089 L808.049 684.089 L808.608 684.089 L809.168 684.089 L809.727 684.089 L810.286 684.089 L810.845 684.089 L811.405 684.089 L811.964 684.089 L812.523 684.089 L813.082 684.089 L813.642 684.089 L814.201 684.089 L814.76 684.089 L815.319 684.089 L815.879 684.089 L816.438 684.089 L816.997 684.089 L817.556 684.089 L818.116 684.089 L818.675 684.089 L819.234 684.089 L819.793 684.089 L820.353 684.089 L820.912 684.089 L821.471 684.089 L822.03 684.089 L822.59 684.089 L823.149 684.089 L823.708 684.089 L824.267 684.089 L824.827 684.089 L825.386 684.089 L825.945 684.089 L826.504 684.089 L827.064 684.089 L827.623 684.089 L828.182 684.089 L828.741 684.089 L829.301 684.089 L829.86 684.089 L830.419 684.089 L830.978 684.089 L831.538 684.089 L832.097 684.089 L832.656 684.089 L833.215 684.089 L833.775 684.089 L834.334 684.089 L834.893 684.089 L835.452 684.089 L836.012 684.089 L836.571 684.089 L837.13 684.089 L837.689 684.089 L838.249 684.089 L838.808 684.089 L839.367 684.089 L839.926 684.089 L840.486 684.089 L841.045 684.089 L841.604 684.089 L842.163 684.089 L842.723 684.089 L843.282 684.089 L843.841 684.089 L844.4 684.089 L844.96 684.089 L845.519 684.089 L846.078 684.089 L846.637 684.089 L847.197 684.089 L847.756 684.089 L848.315 684.089 L848.874 684.089 L849.434 684.089 L849.993 684.089 L850.552 684.089 L851.111 684.089 L851.671 684.089 L852.23 684.089 L852.789 684.089 L853.348 684.089 L853.908 684.089 L854.467 684.089 L855.026 684.089 L855.585 684.089 L856.145 684.089 L856.704 684.089 L857.263 684.089 L857.822 684.089 L858.382 684.089 L858.941 684.089 L859.5 684.089 L860.059 684.089 L860.619 684.089 L861.178 684.089 L861.737 684.089 L862.296 684.089 L862.856 684.089 L863.415 684.089 L863.974 684.089 L864.533 684.089 L865.093 684.089 L865.652 684.089 L866.211 684.089 L866.77 684.089 L867.33 684.089 L867.889 684.089 L868.448 684.089 L869.007 684.089 L869.567 684.089 L870.126 684.089 L870.685 684.089 L871.244 684.089 L871.804 684.089 L872.363 684.089 L872.922 684.089 L873.481 684.089 L874.041 684.089 L874.6 684.089 L875.159 684.089 L875.718 684.089 L876.278 684.089 L876.837 684.089 L877.396 684.089 L877.955 684.089 L878.515 684.089 L879.074 684.089 L879.633 684.089 L880.192 684.089 L880.752 684.089 L881.311 684.089 L881.87 684.089 L882.429 684.089 L882.989 684.089 L883.548 684.089 L884.107 684.089 L884.666 684.089 L885.226 684.089 L885.785 684.089 L886.344 684.089 L886.903 684.089 L887.463 684.089 L888.022 684.089 L888.581 684.089 L889.14 684.089 L889.7 684.089 L890.259 684.089 L890.818 684.089 L891.377 684.089 L891.937 684.089 L892.496 684.089 L893.055 684.089 L893.614 684.089 L894.174 684.089 L894.733 684.089 L895.292 684.089 L895.851 684.089 L896.411 684.089 L896.97 684.089 L897.529 684.089 L898.088 684.089 L898.648 684.089 L899.207 684.089 L899.766 684.089 L900.325 684.089 L900.885 684.089 L901.444 684.089 L902.003 684.089 L902.562 684.089 L903.122 684.089 L903.681 684.089 L904.24 684.089 L904.799 684.089 L905.359 684.089 L905.918 684.089 L906.477 684.089 L907.036 684.089 L907.596 684.089 L908.155 684.089 L908.714 684.089 L909.273 684.089 L909.833 684.089 L910.392 684.089 L910.951 684.089 L911.51 684.089 L912.07 684.089 L912.629 684.089 L913.188 684.089 L913.747 684.089 L914.307 684.089 L914.866 684.089 L915.425 684.089 L915.984 684.089 L916.544 684.089 L917.103 684.089 L917.662 684.089 L918.221 684.089 L918.781 684.089 L919.34 684.089 L919.899 684.089 L920.458 684.089 L921.018 684.089 L921.577 684.089 L922.136 684.089 L922.695 684.089 L923.255 684.089 L923.814 684.089 L924.373 684.089 L924.932 684.089 L925.492 684.089 L926.051 684.089 L926.61 684.089 L927.169 684.089 L927.729 684.089 L928.288 684.089 L928.847 684.089 L929.406 684.089 L929.966 684.089 L930.525 684.089 L931.084 684.089 L931.644 684.089 L932.203 684.089 L932.762 684.089 L933.321 684.089 L933.881 684.089 L934.44 684.089 L934.999 684.089 L935.558 684.089 L936.118 684.089 L936.677 684.089 L937.236 684.089 L937.795 684.089 L938.355 684.089 L938.914 684.089 L939.473 684.089 L940.032 684.089 L940.592 684.089 L941.151 684.089 L941.71 684.089 L942.269 684.089 L942.829 684.089 L943.388 684.089 L943.947 684.089 L944.506 684.089 L945.066 684.089 L945.625 684.089 L946.184 684.089 L946.743 684.089 L947.303 684.089 L947.862 684.089 L948.421 684.089 L948.98 684.089 L949.54 684.089 L950.099 684.089 L950.658 684.089 L951.217 684.089 L951.777 684.089 L952.336 684.089 L952.895 684.089 L953.454 684.089 L954.014 684.089 L954.573 684.089 L955.132 684.089 L955.691 684.089 L956.251 684.089 L956.81 684.089 L957.369 684.089 L957.928 684.089 L958.488 684.089 L959.047 684.089 L959.606 684.089 L960.165 684.089 L960.725 684.089 L961.284 684.089 L961.843 684.089 L962.402 684.089 L962.962 684.089 L963.521 684.089 L964.08 684.089 L964.639 684.089 L965.199 684.089 L965.758 684.089 L966.317 684.089 L966.876 684.089 L967.436 684.089 L967.995 684.089 L968.554 684.089 L969.113 684.089 L969.673 684.089 L970.232 684.089 L970.791 684.089 L971.35 684.089 L971.91 684.089 L972.469 684.089 L973.028 684.089 L973.587 684.089 L974.147 684.089 L974.706 684.089 L975.265 684.089 L975.824 684.089 L976.384 684.089 L976.943 684.089 L977.502 684.089 L978.061 684.089 L978.621 684.089 L979.18 684.089 L979.739 684.089 L980.298 684.089 L980.858 684.089 L981.417 684.089 L981.976 684.089 L982.535 684.089 L983.095 684.089 L983.654 684.089 L984.213 684.089 L984.772 684.089 L985.332 684.089 L985.891 684.089 L986.45 684.089 L987.009 684.089 L987.569 684.089 L988.128 684.089 L988.687 684.089 L989.246 684.089 L989.806 684.089 L990.365 684.089 L990.924 684.089 L991.483 684.089 L992.043 684.089 L992.602 684.089 L993.161 684.089 L993.72 684.089 L994.28 684.089 L994.839 684.089 L995.398 684.089 L995.957 684.089 L996.517 684.089 L997.076 684.089 L997.635 684.089 L998.194 684.089 L998.754 684.089 L999.313 684.089 L999.872 684.089 L1000.43 684.089 L1000.99 684.089 L1001.55 684.089 L1002.11 684.089 L1002.67 684.089 L1003.23 684.089 L1003.79 684.089 L1004.35 684.089 L1004.91 684.089 L1005.46 684.089 L1006.02 684.089 L1006.58 684.089 L1007.14 684.089 L1007.7 684.089 L1008.26 684.089 L1008.82 684.089 L1009.38 684.089 L1009.94 684.089 L1010.5 684.089 L1011.06 684.089 L1011.62 684.089 L1012.18 684.089 L1012.73 684.089 L1013.29 684.089 L1013.85 684.089 L1014.41 684.089 L1014.97 684.089 L1015.53 684.089 L1016.09 684.089 L1016.65 684.089 L1017.21 684.089 L1017.77 684.089 L1018.33 684.089 L1018.89 684.089 L1019.45 684.089 L1020.01 684.089 L1020.56 684.089 L1021.12 684.089 L1021.68 684.089 L1022.24 684.089 L1022.8 684.089 L1023.36 684.089 L1023.92 684.089 L1024.48 684.089 L1025.04 684.089 L1025.6 684.089 L1026.16 684.089 L1026.72 684.089 L1027.28 684.089 L1027.83 684.089 L1028.39 684.089 L1028.95 684.089 L1029.51 684.089 L1030.07 684.089 L1030.63 684.089 L1031.19 684.089 L1031.75 684.089 L1032.31 684.089 L1032.87 684.089 L1033.43 684.089 L1033.99 684.089 L1034.55 684.089 L1035.1 684.089 L1035.66 684.089 L1036.22 684.089 L1036.78 684.089 L1037.34 684.089 L1037.9 684.089 L1038.46 684.089 L1039.02 684.089 L1039.58 684.089 L1040.14 684.089 L1040.7 684.089 L1041.26 684.089 L1041.82 684.089 L1042.38 684.089 L1042.93 684.089 L1043.49 684.089 L1044.05 684.089 L1044.61 684.089 L1045.17 684.089 L1045.73 684.089 L1046.29 684.089 L1046.85 684.089 L1047.41 684.089 L1047.97 684.089 L1048.53 684.089 L1049.09 684.089 L1049.65 684.089 L1050.2 684.089 L1050.76 684.089 L1051.32 684.089 L1051.88 684.089 L1052.44 684.089 L1053 684.089 L1053.56 684.089 L1054.12 684.089 L1054.68 684.089 L1055.24 684.089 L1055.8 684.089 L1056.36 684.089 L1056.92 684.089 L1057.48 684.089 L1058.03 684.089 L1058.59 684.089 L1059.15 684.089 L1059.71 684.089 L1060.27 684.089 L1060.83 684.089 L1061.39 684.089 L1061.95 684.089 L1062.51 684.089 L1063.07 684.089 L1063.63 684.089 L1064.19 684.089 L1064.75 684.089 L1065.3 684.089 L1065.86 684.089 L1066.42 684.089 L1066.98 684.089 L1067.54 684.089 L1068.1 684.089 L1068.66 684.089 L1069.22 684.089 L1069.78 684.089 L1070.34 684.089 L1070.9 684.089 L1071.46 684.089 L1072.02 684.089 L1072.57 684.089 L1073.13 684.089 L1073.69 684.089 L1074.25 684.089 L1074.81 684.089 L1075.37 684.089 L1075.93 684.089 L1076.49 684.089 L1077.05 684.089 L1077.61 684.089 L1078.17 684.089 L1078.73 684.089 L1079.29 684.089 L1079.85 684.089 L1080.4 684.089 L1080.96 684.089 L1081.52 684.089 L1082.08 684.089 L1082.64 684.089 L1083.2 684.089 L1083.76 684.089 L1084.32 684.089 L1084.88 684.089 L1085.44 684.089 L1086 684.089 L1086.56 684.089 L1087.12 684.089 L1087.67 684.089 L1088.23 684.089 L1088.79 684.089 L1089.35 684.089 L1089.91 684.089 L1090.47 684.089 L1091.03 684.089 L1091.59 684.089 L1092.15 684.089 L1092.71 684.089 L1093.27 684.089 L1093.83 684.089 L1094.39 684.089 L1094.94 684.089 L1095.5 684.089 L1096.06 684.089 L1096.62 684.089 L1097.18 684.089 L1097.74 684.089 L1098.3 684.089 L1098.86 684.089 L1099.42 684.089 L1099.98 684.089 L1100.54 684.089 L1101.1 684.089 L1101.66 684.089 L1102.22 684.089 L1102.77 684.089 L1103.33 684.089 L1103.89 684.089 L1104.45 684.089 L1105.01 684.089 L1105.57 684.089 L1106.13 684.089 L1106.69 684.089 L1107.25 684.089 L1107.81 684.089 L1108.37 684.089 L1108.93 684.089 L1109.49 684.089 L1110.04 684.089 L1110.6 684.089 L1111.16 684.089 L1111.72 684.089 L1112.28 684.089 L1112.84 684.089 L1113.4 684.089 L1113.96 684.089 L1114.52 684.089 L1115.08 684.089 L1115.64 684.089 L1116.2 684.089 L1116.76 684.089 L1117.31 684.089 L1117.87 684.089 L1118.43 684.089 L1118.99 684.089 L1119.55 684.089 L1120.11 684.089 L1120.67 684.089 L1121.23 684.089 L1121.79 684.089 L1122.35 684.089 L1122.91 684.089 L1123.47 684.089 L1124.03 684.089 L1124.59 684.089 L1125.14 684.089 L1125.7 684.089 L1126.26 684.089 L1126.82 684.089 L1127.38 684.089 L1127.94 684.089 L1128.5 684.089 L1129.06 684.089 L1129.62 684.089 L1130.18 684.089 L1130.74 684.089 L1131.3 684.089 L1131.86 684.089 L1132.41 684.089 L1132.97 684.089 L1133.53 684.089 L1134.09 684.089 L1134.65 684.089 L1135.21 684.089 L1135.77 684.089 L1136.33 684.089 L1136.89 684.089 L1137.45 684.089 L1138.01 684.089 L1138.57 684.089 L1139.13 684.089 L1139.68 684.089 L1140.24 684.089 L1140.8 684.089 L1141.36 684.089 L1141.92 684.089 L1142.48 684.089 L1143.04 684.089 L1143.6 684.089 L1144.16 684.089 L1144.72 684.089 L1145.28 684.089 L1145.84 684.089 L1146.4 684.089 L1146.96 684.089 L1147.51 684.089 L1148.07 684.089 L1148.63 684.089 L1149.19 684.089 L1149.75 684.089 L1150.31 684.089 L1150.87 684.089 L1151.43 684.089 L1151.99 684.089 L1152.55 684.089 L1153.11 684.089 L1153.67 684.089 L1154.23 684.089 L1154.78 684.089 L1155.34 684.089 L1155.9 684.089 L1156.46 684.089 L1157.02 684.089 L1157.58 684.089 L1158.14 684.089 L1158.7 684.089 L1159.26 684.089 L1159.82 684.089 L1160.38 684.089 L1160.94 684.089 L1161.5 684.089 L1162.05 684.089 L1162.61 684.089 L1163.17 684.089 L1163.73 684.089 L1164.29 684.089 L1164.85 684.089 L1165.41 684.089 L1165.97 684.089 L1166.53 684.089 L1167.09 684.089 L1167.65 684.089 L1168.21 684.089 L1168.77 684.089 L1169.33 684.089 L1169.88 684.089 L1170.44 684.089 L1171 684.089 L1171.56 684.089 L1172.12 684.089 L1172.68 684.089 L1173.24 684.089 L1173.8 684.089 L1174.36 684.089 L1174.92 684.089 L1175.48 684.089 L1176.04 684.089 L1176.6 684.089 L1177.15 684.089 L1177.71 684.089 L1178.27 684.089 L1178.83 684.089 L1179.39 684.089 L1179.95 684.089 L1180.51 684.089 L1181.07 684.089 L1181.63 684.089 L1182.19 684.089 L1182.75 684.089 L1183.31 684.089 L1183.87 684.089 L1184.43 684.089 L1184.98 684.089 L1185.54 684.089 L1186.1 684.089 L1186.66 684.089 L1187.22 684.089 L1187.78 684.089 L1188.34 684.089 L1188.9 684.089 L1189.46 684.089 L1190.02 684.089 L1190.58 684.089 L1191.14 684.089 L1191.7 684.089 L1192.25 684.089 L1192.81 684.089 L1193.37 684.089 L1193.93 684.089 L1194.49 684.089 L1195.05 684.089 L1195.61 684.089 L1196.17 684.089 L1196.73 684.089 L1197.29 684.089 L1197.85 684.089 L1198.41 684.089 L1198.97 684.089 L1199.52 684.089 L1200.08 684.089 L1200.64 684.089 L1201.2 684.089 L1201.76 684.089 L1202.32 684.089 L1202.88 684.089 L1203.44 684.089 L1204 684.089 L1204.56 684.089 L1205.12 684.089 L1205.68 684.089 L1206.24 684.089 L1206.8 684.089 L1207.35 684.089 L1207.91 684.089 L1208.47 684.089 L1209.03 684.089 L1209.59 684.089 L1210.15 684.089 L1210.71 684.089 L1211.27 684.089 L1211.83 684.089 L1212.39 684.089 L1212.95 684.089 L1213.51 684.089 L1214.07 684.089 L1214.62 684.089 L1215.18 684.089 L1215.74 684.089 L1216.3 684.089 L1216.86 684.089 L1217.42 684.089 L1217.98 684.089 L1218.54 684.089 L1219.1 684.089 L1219.66 684.089 L1220.22 684.089 L1220.78 684.089 L1221.34 684.089 L1221.89 684.089 L1222.45 684.089 L1223.01 684.089 L1223.57 684.089 L1224.13 684.089 L1224.69 684.089 L1225.25 684.089 L1225.81 684.089 L1226.37 684.089 L1226.93 684.089 L1227.49 684.089 L1228.05 684.089 L1228.61 684.089 L1229.17 684.089 L1229.72 684.089 L1230.28 684.089 L1230.84 684.089 L1231.4 684.089 L1231.96 684.089 L1232.52 684.089 L1233.08 684.089 L1233.64 684.089 L1234.2 684.089 L1234.76 684.089 L1235.32 684.089 L1235.88 684.089 L1236.44 684.089 L1236.99 684.089 L1237.55 684.089 L1238.11 684.089 L1238.67 684.089 L1239.23 684.089 L1239.79 684.089 L1240.35 684.089 L1240.91 684.089 L1241.47 684.089 L1242.03 684.089 L1242.59 684.089 L1243.15 684.089 L1243.71 684.089 L1244.26 684.089 L1244.82 684.089 L1245.38 684.089 L1245.94 684.089 L1246.5 684.089 L1247.06 684.089 L1247.62 684.089 L1248.18 684.089 L1248.74 684.089 L1249.3 684.089 L1249.86 684.089 L1250.42 684.089 L1250.98 684.089 L1251.54 684.089 L1252.09 684.089 L1252.65 684.089 L1253.21 684.089 L1253.77 684.089 L1254.33 684.089 L1254.89 684.089 L1255.45 684.089 L1256.01 684.089 L1256.57 684.089 L1257.13 684.089 L1257.69 684.089 L1258.25 684.089 L1258.81 684.089 L1259.36 684.089 L1259.92 684.089 L1260.48 684.089 L1261.04 684.089 L1261.6 684.089 L1262.16 684.089 L1262.72 684.089 L1263.28 684.089 L1263.84 684.089 L1264.4 684.089 L1264.96 684.089 L1265.52 684.089 L1266.08 684.089 L1266.63 684.089 L1267.19 684.089 L1267.75 684.089 L1268.31 684.089 L1268.87 684.089 L1269.43 684.089 L1269.99 684.089 L1270.55 684.089 L1271.11 684.089 L1271.67 684.089 L1272.23 684.089 L1272.79 684.089 L1273.35 684.089 L1273.91 684.089 L1274.46 684.089 L1275.02 684.089 L1275.58 684.089 L1276.14 684.089 L1276.7 684.089 L1277.26 684.089 L1277.82 684.089 L1278.38 684.089 L1278.94 684.089 L1279.5 684.089 L1280.06 684.089 L1280.62 684.089 L1281.18 684.089 L1281.73 684.089 L1282.29 684.089 L1282.85 684.089 L1283.41 684.089 L1283.97 684.089 L1284.53 684.089 L1285.09 684.089 L1285.65 684.089 L1286.21 684.089 L1286.77 684.089 L1287.33 684.089 L1287.89 684.089 L1288.45 684.089 L1289 684.089 L1289.56 684.089 L1290.12 684.089 L1290.68 684.089 L1291.24 684.089 L1291.8 684.089 L1292.36 684.089 L1292.92 684.089 L1293.48 684.089 L1294.04 684.089 L1294.6 684.089 L1295.16 684.089 L1295.72 684.089 L1296.28 684.089 L1296.83 684.089 L1297.39 684.089 L1297.95 684.089 L1298.51 684.089 L1299.07 684.089 L1299.63 684.089 L1300.19 684.089 L1300.75 684.089 L1301.31 684.089 L1301.87 684.089 L1302.43 684.089 L1302.99 684.089 L1303.55 684.089 L1304.1 684.089 L1304.66 684.089 L1305.22 684.089 L1305.78 684.089 L1306.34 684.089 L1306.9 684.089 L1307.46 684.089 L1308.02 684.089 L1308.58 684.089 L1309.14 684.089 L1309.7 684.089 L1310.26 684.089 L1310.82 684.089 L1311.38 684.089 L1311.93 684.089 L1312.49 684.089 L1313.05 684.089 L1313.61 684.089 L1314.17 684.089 L1314.73 684.089 L1315.29 684.089 L1315.85 684.089 L1316.41 684.089 L1316.97 684.089 L1317.53 684.089 L1318.09 684.089 L1318.65 684.089 L1319.2 684.089 L1319.76 684.089 L1320.32 684.089 L1320.88 684.089 L1321.44 684.089 L1322 684.089 L1322.56 684.089 L1323.12 684.089 L1323.68 684.089 L1324.24 684.089 L1324.8 684.089 L1325.36 684.089 L1325.92 684.089 L1326.47 684.089 L1327.03 684.089 L1327.59 684.089 L1328.15 684.089 L1328.71 684.089 L1329.27 684.089 L1329.83 684.089 L1330.39 684.089 L1330.95 684.089 L1331.51 684.089 L1332.07 684.089 L1332.63 684.089 L1333.19 684.089 L1333.75 684.089 L1334.3 684.089 L1334.86 684.089 L1335.42 684.089 L1335.98 684.089 L1336.54 684.089 L1337.1 684.089 L1337.66 684.089 L1338.22 684.089 L1338.78 684.089 L1339.34 684.089 L1339.9 684.089 L1340.46 684.089 L1341.02 684.089 L1341.57 684.089 L1342.13 684.089 L1342.69 684.089 L1343.25 684.089 L1343.81 684.089 L1344.37 684.089 L1344.93 684.089 L1345.49 684.089 L1346.05 684.089 L1346.61 684.089 L1347.17 684.089 L1347.73 684.089 L1348.29 684.089 L1348.84 684.089 L1349.4 684.089 L1349.96 684.089 L1350.52 684.089 L1351.08 684.089 L1351.64 684.089 L1352.2 684.089 L1352.76 684.089 L1353.32 684.089 L1353.88 684.089 L1354.44 684.089 L1355 684.089 L1355.56 684.089 L1356.12 684.089 L1356.67 684.089 L1357.23 684.089 L1357.79 684.089 L1358.35 684.089 L1358.91 684.089 L1359.47 684.089 L1360.03 684.089 L1360.59 684.089 L1361.15 684.089 L1361.71 684.089 L1362.27 684.089 L1362.83 684.089 L1363.39 684.089 L1363.94 684.089 L1364.5 684.089 L1365.06 684.089 L1365.62 684.089 L1366.18 684.089 L1366.74 684.089 L1367.3 684.089 L1367.86 684.089 L1368.42 684.089 L1368.98 684.089 L1369.54 684.089 L1370.1 684.089 L1370.66 684.089 L1371.21 684.089 L1371.77 684.089 L1372.33 684.089 L1372.89 684.089 L1373.45 684.089 L1374.01 684.089 L1374.57 684.089 L1375.13 684.089 L1375.69 684.089 L1376.25 684.089 L1376.81 684.089 L1377.37 684.089 L1377.93 684.089 L1378.49 684.089 L1379.04 684.089 L1379.6 684.089 L1380.16 684.089 L1380.72 684.089 L1381.28 684.089 L1381.84 684.089 L1382.4 684.089 L1382.96 684.089 L1383.52 684.089 L1384.08 684.089 L1384.64 684.089 L1385.2 684.089 L1385.76 684.089 L1386.31 684.089 L1386.87 684.089 L1387.43 684.089 L1387.99 684.089 L1388.55 684.089 L1389.11 684.089 L1389.67 684.089 L1390.23 684.089 L1390.79 684.089 L1391.35 684.089 L1391.91 684.089 L1392.47 684.089 L1393.03 684.089 L1393.58 684.089 L1394.14 684.089 L1394.7 684.089 L1395.26 684.089 L1395.82 684.089 L1396.38 684.089 L1396.94 684.089 L1397.5 684.089 L1398.06 684.089 L1398.62 684.089 L1399.18 684.089 L1399.74 684.089 L1400.3 684.089 L1400.86 684.089 L1401.41 684.089 L1401.97 684.089 L1402.53 684.089 L1403.09 684.089 L1403.65 684.089 L1404.21 684.089 L1404.77 684.089 L1405.33 684.089 L1405.89 684.089 L1406.45 684.089 L1407.01 684.089 L1407.57 684.089 L1408.13 684.089 L1408.68 684.089 L1409.24 684.089 L1409.8 684.089 L1410.36 684.089 L1410.92 684.089 L1411.48 684.089 L1412.04 684.089 L1412.6 684.089 L1413.16 684.089 L1413.72 684.089 L1414.28 684.089 L1414.84 684.089 L1415.4 684.089 L1415.95 684.089 L1416.51 684.089 L1417.07 684.089 L1417.63 684.089 L1418.19 684.089 L1418.75 684.089 L1419.31 684.089 L1419.87 684.089 L1420.43 684.089 L1420.99 684.089 L1421.55 684.089 L1422.11 684.089 L1422.67 684.089 L1423.23 684.089 L1423.78 684.089 L1424.34 684.089 L1424.9 684.089 L1425.46 684.089 L1426.02 684.089 L1426.58 684.089 L1427.14 684.089 L1427.7 684.089 L1428.26 684.089 L1428.82 684.089 L1429.38 684.089 L1429.94 684.089 L1430.5 684.089 L1431.05 684.089 L1431.61 684.089 L1432.17 684.089 L1432.73 684.089 L1433.29 684.089 L1433.85 684.089 L1434.41 684.089 L1434.97 684.089 L1435.53 684.089 L1436.09 684.089 L1436.65 684.089 L1437.21 684.089 L1437.77 684.089 L1438.33 684.089 L1438.88 684.089 L1439.44 684.089 L1440 684.089 L1440.56 684.089 L1441.12 684.089 L1441.68 684.089 L1442.24 684.089 L1442.8 684.089 L1443.36 684.089 L1443.92 684.089 L1444.48 684.089 L1445.04 684.089 L1445.6 684.089 L1446.15 684.089 L1446.71 684.089 L1447.27 684.089 L1447.83 684.089 L1448.39 684.089 L1448.95 684.089 L1449.51 684.089 L1450.07 684.089 L1450.63 684.089 L1451.19 684.089 L1451.75 684.089 L1452.31 684.089 L1452.87 684.089 L1453.42 684.089 L1453.98 684.089 L1454.54 684.089 L1455.1 684.089 L1455.66 684.089 L1456.22 684.089 L1456.78 684.089 L1457.34 684.089 L1457.9 684.089 L1458.46 684.089 L1459.02 684.089 L1459.58 684.089 L1460.14 684.089 L1460.7 684.089 L1461.25 684.089 L1461.81 684.089 L1462.37 684.089 L1462.93 684.089 L1463.49 684.089 L1464.05 684.089 L1464.61 684.089 L1465.17 684.089 L1465.73 684.089 L1466.29 684.089 L1466.85 684.089 L1467.41 684.089 L1467.97 684.089 L1468.52 684.089 L1469.08 684.089 L1469.64 684.089 L1470.2 684.089 L1470.76 684.089 L1471.32 684.089 L1471.88 684.089 L1472.44 684.089 L1473 684.089 L1473.56 684.089 L1474.12 684.089 L1474.68 684.089 L1475.24 684.089 L1475.79 684.089 L1476.35 684.089 L1476.91 684.089 L1477.47 684.089 L1478.03 684.089 L1478.59 684.089 L1479.15 684.089 L1479.71 684.089 L1480.27 684.089 L1480.83 684.089 L1481.39 684.089 L1481.95 684.089 L1482.51 684.089 L1483.07 684.089 L1483.62 684.089 L1484.18 684.089 L1484.74 684.089 L1485.3 684.089 L1485.86 684.089 L1486.42 684.089 L1486.98 684.089 L1487.54 684.089 L1488.1 684.089 L1488.66 684.089 L1489.22 684.089 L1489.78 684.089 L1490.34 684.089 L1490.89 684.089 L1491.45 684.089 L1492.01 684.089 L1492.57 684.089 L1493.13 684.089 L1493.69 684.089 L1494.25 684.089 L1494.81 684.089 L1495.37 684.089 L1495.93 684.089 L1496.49 684.089 L1497.05 684.089 L1497.61 684.089 L1498.16 684.089 L1498.72 684.089 L1499.28 684.089 L1499.84 684.089 L1500.4 684.089 L1500.96 684.089 L1501.52 684.089 L1502.08 684.089 L1502.64 684.089 L1503.2 684.089 L1503.76 684.089 L1504.32 684.089 L1504.88 684.089 L1505.44 684.089 L1505.99 684.089 L1506.55 684.089 L1507.11 684.089 L1507.67 684.089 L1508.23 684.089 L1508.79 684.089 L1509.35 684.089 L1509.91 684.089 L1510.47 684.089 L1511.03 684.089 L1511.59 684.089 L1512.15 684.089 L1512.71 684.089 L1513.26 684.089 L1513.82 684.089 L1514.38 684.089 L1514.94 684.089 L1515.5 684.089 L1516.06 684.089 L1516.62 684.089 L1517.18 684.089 L1517.74 684.089 L1518.3 684.089 L1518.86 684.089 L1519.42 684.089 L1519.98 684.089 L1520.53 684.089 L1521.09 684.089 L1521.65 684.089 L1522.21 684.089 L1522.77 684.089 L1523.33 684.089 L1523.89 684.089 L1524.45 684.089 L1525.01 684.089 L1525.57 684.089 L1526.13 684.089 L1526.69 684.089 L1527.25 684.089 L1527.81 684.089 L1528.36 684.089 L1528.92 684.089 L1529.48 684.089 L1530.04 684.089 L1530.6 684.089 L1531.16 684.089 L1531.72 684.089 L1532.28 684.089 L1532.84 684.089 L1533.4 684.089 L1533.96 684.089 L1534.52 684.089 L1535.08 684.089 L1535.63 684.089 L1536.19 684.089 L1536.75 684.089 L1537.31 684.089 L1537.87 684.089 L1538.43 684.089 L1538.99 684.089 L1539.55 684.089 L1540.11 684.089 L1540.67 684.089 L1541.23 684.089 L1541.79 684.089 L1542.35 684.089 L1542.9 684.089 L1543.46 684.089 L1544.02 684.089 L1544.58 684.089 L1545.14 684.089 L1545.7 684.089 L1546.26 684.089 L1546.82 684.089 L1547.38 684.089 L1547.94 684.089 L1548.5 684.089 L1549.06 684.089 L1549.62 684.089 L1550.18 684.089 L1550.73 684.089 L1551.29 684.089 L1551.85 684.089 L1552.41 684.089 L1552.97 684.089 L1553.53 684.089 L1554.09 684.089 L1554.65 684.089 L1555.21 684.089 L1555.77 684.089 L1556.33 684.089 L1556.89 684.089 L1557.45 684.089 L1558 684.089 L1558.56 684.089 L1559.12 684.089 L1559.68 684.089 L1560.24 684.089 L1560.8 684.089 L1561.36 684.089 L1561.92 684.089 L1562.48 684.089 L1563.04 684.089 L1563.6 684.089 L1564.16 684.089 L1564.72 684.089 L1565.28 684.089 L1565.83 684.089 L1566.39 684.089 L1566.95 684.089 L1567.51 684.089 L1568.07 684.089 L1568.63 684.089 L1569.19 684.089 L1569.75 684.089 L1570.31 684.089 L1570.87 684.089 L1571.43 684.089 L1571.99 684.089 L1572.55 684.089 L1573.1 684.089 L1573.66 684.089 L1574.22 684.089 L1574.78 684.089 L1575.34 684.089 L1575.9 684.089 L1576.46 684.089 L1577.02 684.089 L1577.58 684.089 L1578.14 684.089 L1578.7 684.089 L1579.26 684.089 L1579.82 684.089 L1580.37 684.089 L1580.93 684.089 L1581.49 684.089 L1582.05 684.089 L1582.61 684.089 L1583.17 684.089 L1583.73 684.089 L1584.29 684.089 L1584.85 684.089 L1585.41 684.089 L1585.97 684.089 L1586.53 684.089 L1587.09 684.089 L1587.65 684.089 L1588.2 684.089 L1588.76 684.089 L1589.32 684.089 L1589.88 684.089 L1590.44 684.089 L1591 684.089 L1591.56 684.089 L1592.12 684.089 L1592.68 684.089 L1593.24 684.089 L1593.8 684.089 L1594.36 684.089 L1594.92 684.089 L1595.47 684.089 L1596.03 684.089 L1596.59 684.089 L1597.15 684.089 L1597.71 684.089 L1598.27 684.089 L1598.83 684.089 L1599.39 684.089 L1599.95 684.089 L1600.51 684.089 L1601.07 684.089 L1601.63 684.089 L1602.19 684.089 L1602.74 684.089 L1603.3 684.089 L1603.86 684.089 L1604.42 684.089 L1604.98 684.089 L1605.54 684.089 L1606.1 684.089 L1606.66 684.089 L1607.22 684.089 L1607.78 684.089 L1608.34 684.089 L1608.9 684.089 L1609.46 684.089 L1610.02 684.089 L1610.57 684.089 L1611.13 684.089 L1611.69 684.089 L1612.25 684.089 L1612.81 684.089 L1613.37 684.089 L1613.93 684.089 L1614.49 684.089 L1615.05 684.089 L1615.61 684.089 L1616.17 684.089 L1616.73 684.089 L1617.29 684.089 L1617.84 684.089 L1618.4 684.089 L1618.96 684.089 L1619.52 684.089 L1620.08 684.089 L1620.64 684.089 L1621.2 684.089 L1621.76 684.089 L1622.32 684.089 L1622.88 684.089 L1623.44 684.089 L1624 684.089 L1624.56 684.089 L1625.11 684.089 L1625.67 684.089 L1626.23 684.089 L1626.79 684.089 L1627.35 684.089 L1627.91 684.089 L1628.47 684.089 L1629.03 684.089 L1629.59 684.089 L1630.15 684.089 L1630.71 684.089 L1631.27 684.089 L1631.83 684.089 L1632.39 684.089 L1632.94 684.089 L1633.5 684.089 L1634.06 684.089 L1634.62 684.089 L1635.18 684.089 L1635.74 684.089 L1636.3 684.089 L1636.86 684.089 L1637.42 684.089 L1637.98 684.089 L1638.54 684.089 L1639.1 684.089 L1639.66 684.089 L1640.21 684.089 L1640.77 684.089 L1641.33 684.089 L1641.89 684.089 L1642.45 684.089 L1643.01 684.089 L1643.57 684.089 L1644.13 684.089 L1644.69 684.089 L1645.25 684.089 L1645.81 684.089 L1646.37 684.089 L1646.93 684.089 L1647.48 684.089 L1648.04 684.089 L1648.6 684.089 L1649.16 684.089 L1649.72 684.089 L1650.28 684.089 L1650.84 684.089 L1651.4 684.089 L1651.96 684.089 L1652.52 684.089 L1653.08 684.089 L1653.64 684.089 L1654.2 684.089 L1654.76 684.089 L1655.31 684.089 L1655.87 684.089 L1656.43 684.089 L1656.99 684.089 L1657.55 684.089 L1658.11 684.089 L1658.67 684.089 L1659.23 684.089 L1659.79 684.089 L1660.35 684.089 L1660.91 684.089 L1661.47 684.089 L1662.03 684.089 L1662.58 684.089 L1663.14 684.089 L1663.7 684.089 L1664.26 684.089 L1664.82 684.089 L1665.38 684.089 L1665.94 684.089 L1666.5 684.089 L1667.06 684.089 L1667.62 684.089 L1668.18 684.089 L1668.74 684.089 L1669.3 684.089 L1669.85 684.089 L1670.41 684.089 L1670.97 684.089 L1671.53 684.089 L1672.09 684.089 L1672.65 684.089 L1673.21 684.089 L1673.77 684.089 L1674.33 684.089 L1674.89 684.089 L1675.45 684.089 L1676.01 684.089 L1676.57 684.089 L1677.13 684.089 L1677.68 684.089 L1678.24 684.089 L1678.8 684.089 L1679.36 684.089 L1679.92 684.089 L1680.48 684.089 L1681.04 684.089 L1681.6 684.089 L1682.16 684.089 L1682.72 684.089 L1683.28 684.089 L1683.84 684.089 L1684.4 684.089 L1684.95 684.089 L1685.51 684.089 L1686.07 684.089 L1686.63 684.089 L1687.19 684.089 L1687.75 684.089 L1688.31 684.089 L1688.87 684.089 L1689.43 684.089 L1689.99 684.089 L1690.55 684.089 L1691.11 684.089 L1691.67 684.089 L1692.23 684.089 L1692.78 684.089 L1693.34 684.089 L1693.9 684.089 L1694.46 684.089 L1695.02 684.089 L1695.58 684.089 L1696.14 684.089 L1696.7 684.089 L1697.26 684.089 L1697.82 684.089 L1698.38 684.089 L1698.94 684.089 L1699.5 684.089 L1700.05 684.089 L1700.61 684.089 L1701.17 684.089 L1701.73 684.089 L1702.29 684.089 L1702.85 684.089 L1703.41 684.089 L1703.97 684.089 L1704.53 684.089 L1705.09 684.089 L1705.65 684.089 L1706.21 684.089 L1706.77 684.089 L1707.32 684.089 L1707.88 684.089 L1708.44 684.089 L1709 684.089 L1709.56 684.089 L1710.12 684.089 L1710.68 684.089 L1711.24 684.089 L1711.8 684.089 L1712.36 684.089 L1712.92 684.089 L1713.48 684.089 L1714.04 684.089 L1714.6 684.089 L1715.15 684.089 L1715.71 684.089 L1716.27 684.089 L1716.83 684.089 L1717.39 684.089 L1717.95 684.089 L1718.51 684.089 L1719.07 684.089 L1719.63 684.089 L1720.19 684.089 L1720.75 684.089 L1721.31 684.089 L1721.87 684.089 L1722.42 684.089 L1722.98 684.089 L1723.54 684.089 L1724.1 684.089 L1724.66 684.089 L1725.22 684.089 L1725.78 684.089 L1726.34 684.089 L1726.9 684.089 L1727.46 684.089 L1728.02 684.089 L1728.58 684.089 L1729.14 684.089 L1729.69 684.089 L1730.25 684.089 L1730.81 684.089 L1731.37 684.089 L1731.93 684.089 L1732.49 684.089 L1733.05 684.089 L1733.61 684.089 L1734.17 684.089 L1734.73 684.089 L1735.29 684.089 L1735.85 684.089 L1736.41 684.089 L1736.97 684.089 L1737.52 684.089 L1738.08 684.089 L1738.64 684.089 L1739.2 684.089 L1739.76 684.089 L1740.32 684.089 L1740.88 684.089 L1741.44 684.089 L1742 684.089 L1742.56 684.089 L1743.12 684.089 L1743.68 684.089 L1744.24 684.089 L1744.79 684.089 L1745.35 684.089 L1745.91 684.089 L1746.47 684.089 L1747.03 684.089 L1747.59 684.089 L1748.15 684.089 L1748.71 684.089 L1749.27 684.089 L1749.83 684.089 L1750.39 684.089 L1750.95 684.089 L1751.51 684.089 L1752.06 684.089 L1752.62 684.089 L1753.18 684.089 L1753.74 684.089 L1754.3 684.089 L1754.86 684.089 L1755.42 684.089 L1755.98 684.089 L1756.54 684.089 L1757.1 684.089 L1757.66 684.089 L1758.22 684.089 L1758.78 684.089 L1759.34 684.089 L1759.89 684.089 L1760.45 684.089 L1761.01 684.089 L1761.57 684.089 L1762.13 684.089 L1762.69 684.089 L1763.25 684.089 L1763.81 684.089 L1764.37 684.089 L1764.93 684.089 L1765.49 684.089 L1766.05 684.089 L1766.61 684.089 L1767.16 684.089 L1767.72 684.089 L1768.28 684.089 L1768.84 684.089 L1769.4 684.089 L1769.96 684.089 L1770.52 684.089 L1771.08 684.089 L1771.64 684.089 L1772.2 684.089 L1772.76 684.089 L1773.32 684.089 L1773.88 684.089 L1774.43 684.089 L1774.99 684.089 L1775.55 684.089 L1776.11 684.089 L1776.67 684.089 L1777.23 684.089 L1777.79 684.089 L1778.35 684.089 L1778.91 684.089 L1779.47 684.089 L1780.03 684.089 L1780.59 684.089 L1781.15 684.089 L1781.71 684.089 L1782.26 684.089 L1782.82 684.089 L1783.38 684.089 L1783.94 684.089 L1784.5 684.089 L1785.06 684.089 L1785.62 684.089 L1786.18 684.089 L1786.74 684.089 L1787.3 684.089 L1787.86 684.089 L1788.42 684.089 L1788.98 684.089 L1789.53 684.089 L1790.09 684.089 L1790.65 684.089 L1791.21 684.089 L1791.77 684.089 L1792.33 684.089 L1792.89 684.089 L1793.45 684.089 L1794.01 684.089 L1794.57 684.089 L1795.13 684.089 L1795.69 684.089 L1796.25 684.089 L1796.8 684.089 L1797.36 684.089 L1797.92 684.089 L1798.48 684.089 L1799.04 684.089 L1799.6 684.089 L1800.16 684.089 L1800.72 684.089 L1801.28 684.089 L1801.84 684.089 L1802.4 684.089 L1802.96 684.089 L1803.52 684.089 L1804.08 684.089 L1804.63 684.089 L1805.19 684.089 L1805.75 684.089 L1806.31 684.089 L1806.87 684.089 L1807.43 684.089 L1807.99 684.089 L1808.55 684.089 L1809.11 684.089 L1809.67 684.089 L1810.23 684.089 L1810.79 684.089 L1811.35 684.089 L1811.9 684.089 L1812.46 684.089 L1813.02 684.089 L1813.58 684.089 L1814.14 684.089 L1814.7 684.089 L1815.26 684.089 L1815.82 684.089 L1816.38 684.089 L1816.94 684.089 L1817.5 684.089 L1818.06 684.089 L1818.62 684.089 L1819.18 684.089 L1819.73 684.089 L1820.29 684.089 L1820.85 684.089 L1821.41 684.089 L1821.97 684.089 L1822.53 684.089 L1823.09 684.089 L1823.65 684.089 L1824.21 684.089 L1824.77 684.089 L1825.33 684.089 L1825.89 684.089 L1826.45 684.089 L1827 684.089 L1827.56 684.089 L1828.12 684.089 L1828.68 684.089 L1829.24 684.089 L1829.8 684.089 L1830.36 684.089 L1830.92 684.089 L1831.48 684.089 L1832.04 684.089 L1832.6 684.089 L1833.16 684.089 L1833.72 684.089 L1834.27 684.089 L1834.83 684.089 L1835.39 684.089 L1835.95 684.089 L1836.51 684.089 L1837.07 684.089 L1837.63 684.089 L1838.19 684.089 L1838.19 681.447 L1837.63 681.447 L1837.07 681.447 L1836.51 681.447 L1835.95 681.447 L1835.39 681.447 L1834.83 681.447 L1834.27 681.447 L1833.72 681.447 L1833.16 681.447 L1832.6 681.447 L1832.04 681.447 L1831.48 681.447 L1830.92 681.447 L1830.36 681.447 L1829.8 681.447 L1829.24 681.447 L1828.68 681.447 L1828.12 681.447 L1827.56 681.447 L1827 681.447 L1826.45 681.447 L1825.89 681.447 L1825.33 681.447 L1824.77 681.447 L1824.21 681.447 L1823.65 681.447 L1823.09 681.447 L1822.53 681.447 L1821.97 681.447 L1821.41 681.447 L1820.85 681.447 L1820.29 681.447 L1819.73 681.447 L1819.18 681.447 L1818.62 681.447 L1818.06 681.447 L1817.5 681.447 L1816.94 681.447 L1816.38 681.447 L1815.82 681.447 L1815.26 681.447 L1814.7 681.447 L1814.14 681.447 L1813.58 681.447 L1813.02 681.447 L1812.46 681.447 L1811.9 681.447 L1811.35 681.447 L1810.79 681.447 L1810.23 681.447 L1809.67 681.447 L1809.11 681.447 L1808.55 681.447 L1807.99 681.447 L1807.43 681.447 L1806.87 681.447 L1806.31 681.447 L1805.75 681.447 L1805.19 681.447 L1804.63 681.447 L1804.08 681.447 L1803.52 681.447 L1802.96 681.447 L1802.4 681.447 L1801.84 681.447 L1801.28 681.447 L1800.72 681.447 L1800.16 681.447 L1799.6 681.447 L1799.04 681.447 L1798.48 681.447 L1797.92 681.447 L1797.36 681.447 L1796.8 681.447 L1796.25 681.447 L1795.69 681.447 L1795.13 681.447 L1794.57 681.447 L1794.01 681.447 L1793.45 681.447 L1792.89 681.447 L1792.33 681.447 L1791.77 681.447 L1791.21 681.447 L1790.65 681.447 L1790.09 681.447 L1789.53 681.447 L1788.98 681.447 L1788.42 681.447 L1787.86 681.447 L1787.3 681.447 L1786.74 681.447 L1786.18 681.447 L1785.62 681.447 L1785.06 681.447 L1784.5 681.447 L1783.94 681.447 L1783.38 681.447 L1782.82 681.447 L1782.26 681.447 L1781.71 681.447 L1781.15 681.447 L1780.59 681.447 L1780.03 681.447 L1779.47 681.447 L1778.91 681.447 L1778.35 681.447 L1777.79 681.447 L1777.23 681.447 L1776.67 681.447 L1776.11 681.447 L1775.55 681.447 L1774.99 681.447 L1774.43 681.447 L1773.88 681.447 L1773.32 681.447 L1772.76 681.447 L1772.2 681.447 L1771.64 681.447 L1771.08 681.447 L1770.52 681.447 L1769.96 681.447 L1769.4 681.447 L1768.84 681.447 L1768.28 681.447 L1767.72 681.447 L1767.16 681.447 L1766.61 681.447 L1766.05 681.447 L1765.49 681.447 L1764.93 681.447 L1764.37 681.447 L1763.81 681.447 L1763.25 681.447 L1762.69 681.447 L1762.13 681.447 L1761.57 681.447 L1761.01 681.447 L1760.45 681.447 L1759.89 681.447 L1759.34 681.447 L1758.78 681.447 L1758.22 681.447 L1757.66 681.447 L1757.1 681.447 L1756.54 681.447 L1755.98 681.447 L1755.42 681.447 L1754.86 681.447 L1754.3 681.447 L1753.74 681.447 L1753.18 681.447 L1752.62 681.447 L1752.06 681.447 L1751.51 681.447 L1750.95 681.447 L1750.39 681.447 L1749.83 681.447 L1749.27 681.447 L1748.71 681.447 L1748.15 681.447 L1747.59 681.447 L1747.03 681.447 L1746.47 681.447 L1745.91 681.447 L1745.35 681.447 L1744.79 681.447 L1744.24 681.447 L1743.68 681.447 L1743.12 681.447 L1742.56 681.447 L1742 681.447 L1741.44 681.447 L1740.88 681.447 L1740.32 681.447 L1739.76 681.447 L1739.2 681.447 L1738.64 681.447 L1738.08 681.447 L1737.52 681.447 L1736.97 681.447 L1736.41 681.447 L1735.85 681.447 L1735.29 681.447 L1734.73 681.447 L1734.17 681.447 L1733.61 681.447 L1733.05 681.447 L1732.49 681.447 L1731.93 681.447 L1731.37 681.447 L1730.81 681.447 L1730.25 681.447 L1729.69 681.447 L1729.14 681.447 L1728.58 681.447 L1728.02 681.447 L1727.46 681.447 L1726.9 681.447 L1726.34 681.447 L1725.78 681.447 L1725.22 681.447 L1724.66 681.447 L1724.1 681.447 L1723.54 681.447 L1722.98 681.447 L1722.42 681.447 L1721.87 681.447 L1721.31 681.447 L1720.75 681.447 L1720.19 681.447 L1719.63 681.447 L1719.07 681.447 L1718.51 681.447 L1717.95 681.447 L1717.39 681.447 L1716.83 681.447 L1716.27 681.447 L1715.71 681.447 L1715.15 681.447 L1714.6 681.447 L1714.04 681.447 L1713.48 681.447 L1712.92 681.447 L1712.36 681.447 L1711.8 681.447 L1711.24 681.447 L1710.68 681.447 L1710.12 681.447 L1709.56 681.447 L1709 681.447 L1708.44 681.447 L1707.88 681.447 L1707.32 681.447 L1706.77 681.447 L1706.21 681.447 L1705.65 681.447 L1705.09 681.447 L1704.53 681.447 L1703.97 681.447 L1703.41 681.447 L1702.85 681.447 L1702.29 681.447 L1701.73 681.447 L1701.17 681.447 L1700.61 681.447 L1700.05 681.447 L1699.5 681.447 L1698.94 681.447 L1698.38 681.447 L1697.82 681.447 L1697.26 681.447 L1696.7 681.447 L1696.14 681.447 L1695.58 681.447 L1695.02 681.447 L1694.46 681.447 L1693.9 681.447 L1693.34 681.447 L1692.78 681.447 L1692.23 681.447 L1691.67 681.447 L1691.11 681.447 L1690.55 681.447 L1689.99 681.447 L1689.43 681.447 L1688.87 681.447 L1688.31 681.447 L1687.75 681.447 L1687.19 681.447 L1686.63 681.447 L1686.07 681.447 L1685.51 681.447 L1684.95 681.447 L1684.4 681.447 L1683.84 681.447 L1683.28 681.447 L1682.72 681.447 L1682.16 681.447 L1681.6 681.447 L1681.04 681.447 L1680.48 681.447 L1679.92 681.447 L1679.36 681.447 L1678.8 681.447 L1678.24 681.447 L1677.68 681.447 L1677.13 681.447 L1676.57 681.447 L1676.01 681.447 L1675.45 681.447 L1674.89 681.447 L1674.33 681.447 L1673.77 681.447 L1673.21 681.447 L1672.65 681.447 L1672.09 681.447 L1671.53 681.447 L1670.97 681.447 L1670.41 681.447 L1669.85 681.447 L1669.3 681.447 L1668.74 681.447 L1668.18 681.447 L1667.62 681.447 L1667.06 681.447 L1666.5 681.447 L1665.94 681.447 L1665.38 681.447 L1664.82 681.447 L1664.26 681.447 L1663.7 681.447 L1663.14 681.447 L1662.58 681.447 L1662.03 681.447 L1661.47 681.447 L1660.91 681.447 L1660.35 681.447 L1659.79 681.447 L1659.23 681.447 L1658.67 681.447 L1658.11 681.447 L1657.55 681.447 L1656.99 681.447 L1656.43 681.447 L1655.87 681.447 L1655.31 681.447 L1654.76 681.447 L1654.2 681.447 L1653.64 681.447 L1653.08 681.447 L1652.52 681.447 L1651.96 681.447 L1651.4 681.447 L1650.84 681.447 L1650.28 681.447 L1649.72 681.447 L1649.16 681.447 L1648.6 681.447 L1648.04 681.447 L1647.48 681.447 L1646.93 681.447 L1646.37 681.447 L1645.81 681.447 L1645.25 681.447 L1644.69 681.447 L1644.13 681.447 L1643.57 681.447 L1643.01 681.447 L1642.45 681.447 L1641.89 681.447 L1641.33 681.447 L1640.77 681.447 L1640.21 681.447 L1639.66 681.447 L1639.1 681.447 L1638.54 681.447 L1637.98 681.447 L1637.42 681.447 L1636.86 681.447 L1636.3 681.447 L1635.74 681.447 L1635.18 681.447 L1634.62 681.447 L1634.06 681.447 L1633.5 681.447 L1632.94 681.447 L1632.39 681.447 L1631.83 681.447 L1631.27 681.447 L1630.71 681.447 L1630.15 681.447 L1629.59 681.447 L1629.03 681.447 L1628.47 681.447 L1627.91 681.447 L1627.35 681.447 L1626.79 681.447 L1626.23 681.447 L1625.67 681.447 L1625.11 681.447 L1624.56 681.447 L1624 681.447 L1623.44 681.447 L1622.88 681.447 L1622.32 681.447 L1621.76 681.447 L1621.2 681.447 L1620.64 681.447 L1620.08 681.447 L1619.52 681.447 L1618.96 681.447 L1618.4 681.447 L1617.84 681.447 L1617.29 681.447 L1616.73 681.447 L1616.17 681.447 L1615.61 681.447 L1615.05 681.447 L1614.49 681.447 L1613.93 681.447 L1613.37 681.447 L1612.81 681.447 L1612.25 681.447 L1611.69 681.447 L1611.13 681.447 L1610.57 681.447 L1610.02 681.447 L1609.46 681.447 L1608.9 681.447 L1608.34 681.447 L1607.78 681.447 L1607.22 681.447 L1606.66 681.447 L1606.1 681.447 L1605.54 681.447 L1604.98 681.447 L1604.42 681.447 L1603.86 681.447 L1603.3 681.447 L1602.74 681.447 L1602.19 681.447 L1601.63 681.447 L1601.07 681.447 L1600.51 681.447 L1599.95 681.447 L1599.39 681.447 L1598.83 681.447 L1598.27 681.447 L1597.71 681.447 L1597.15 681.447 L1596.59 681.447 L1596.03 681.447 L1595.47 681.447 L1594.92 681.447 L1594.36 681.447 L1593.8 681.447 L1593.24 681.447 L1592.68 681.447 L1592.12 681.447 L1591.56 681.447 L1591 681.447 L1590.44 681.447 L1589.88 681.447 L1589.32 681.447 L1588.76 681.447 L1588.2 681.447 L1587.65 681.447 L1587.09 681.447 L1586.53 681.447 L1585.97 681.447 L1585.41 681.447 L1584.85 681.447 L1584.29 681.447 L1583.73 681.447 L1583.17 681.447 L1582.61 681.447 L1582.05 681.447 L1581.49 681.447 L1580.93 681.447 L1580.37 681.447 L1579.82 681.447 L1579.26 681.447 L1578.7 681.447 L1578.14 681.447 L1577.58 681.447 L1577.02 681.447 L1576.46 681.447 L1575.9 681.447 L1575.34 681.447 L1574.78 681.447 L1574.22 681.447 L1573.66 681.447 L1573.1 681.447 L1572.55 681.447 L1571.99 681.447 L1571.43 681.447 L1570.87 681.447 L1570.31 681.447 L1569.75 681.447 L1569.19 681.447 L1568.63 681.447 L1568.07 681.447 L1567.51 681.447 L1566.95 681.447 L1566.39 681.447 L1565.83 681.447 L1565.28 681.447 L1564.72 681.447 L1564.16 681.447 L1563.6 681.447 L1563.04 681.447 L1562.48 681.447 L1561.92 681.447 L1561.36 681.447 L1560.8 681.447 L1560.24 681.447 L1559.68 681.447 L1559.12 681.447 L1558.56 681.447 L1558 681.447 L1557.45 681.447 L1556.89 681.447 L1556.33 681.447 L1555.77 681.447 L1555.21 681.447 L1554.65 681.447 L1554.09 681.447 L1553.53 681.447 L1552.97 681.447 L1552.41 681.447 L1551.85 681.447 L1551.29 681.447 L1550.73 681.447 L1550.18 681.447 L1549.62 681.447 L1549.06 681.447 L1548.5 681.447 L1547.94 681.447 L1547.38 681.447 L1546.82 681.447 L1546.26 681.447 L1545.7 681.447 L1545.14 681.447 L1544.58 681.447 L1544.02 681.447 L1543.46 681.447 L1542.9 681.447 L1542.35 681.447 L1541.79 681.447 L1541.23 681.447 L1540.67 681.447 L1540.11 681.447 L1539.55 681.447 L1538.99 681.447 L1538.43 681.447 L1537.87 681.447 L1537.31 681.447 L1536.75 681.447 L1536.19 681.447 L1535.63 681.447 L1535.08 681.447 L1534.52 681.447 L1533.96 681.447 L1533.4 681.447 L1532.84 681.447 L1532.28 681.447 L1531.72 681.447 L1531.16 681.447 L1530.6 681.447 L1530.04 681.447 L1529.48 681.447 L1528.92 681.447 L1528.36 681.447 L1527.81 681.447 L1527.25 681.447 L1526.69 681.447 L1526.13 681.447 L1525.57 681.447 L1525.01 681.447 L1524.45 681.447 L1523.89 681.447 L1523.33 681.447 L1522.77 681.447 L1522.21 681.447 L1521.65 681.447 L1521.09 681.447 L1520.53 681.447 L1519.98 681.447 L1519.42 681.447 L1518.86 681.447 L1518.3 681.447 L1517.74 681.447 L1517.18 681.447 L1516.62 681.447 L1516.06 681.447 L1515.5 681.447 L1514.94 681.447 L1514.38 681.447 L1513.82 681.447 L1513.26 681.447 L1512.71 681.447 L1512.15 681.447 L1511.59 681.447 L1511.03 681.447 L1510.47 681.447 L1509.91 681.447 L1509.35 681.447 L1508.79 681.447 L1508.23 681.447 L1507.67 681.447 L1507.11 681.447 L1506.55 681.447 L1505.99 681.447 L1505.44 681.447 L1504.88 681.447 L1504.32 681.447 L1503.76 681.447 L1503.2 681.447 L1502.64 681.447 L1502.08 681.447 L1501.52 681.447 L1500.96 681.447 L1500.4 681.447 L1499.84 681.447 L1499.28 681.447 L1498.72 681.447 L1498.16 681.447 L1497.61 681.447 L1497.05 681.447 L1496.49 681.447 L1495.93 681.447 L1495.37 681.447 L1494.81 681.447 L1494.25 681.447 L1493.69 681.447 L1493.13 681.447 L1492.57 681.447 L1492.01 681.447 L1491.45 681.447 L1490.89 681.447 L1490.34 681.447 L1489.78 681.447 L1489.22 681.447 L1488.66 681.447 L1488.1 681.447 L1487.54 681.447 L1486.98 681.447 L1486.42 681.447 L1485.86 681.447 L1485.3 681.447 L1484.74 681.447 L1484.18 681.447 L1483.62 681.447 L1483.07 681.447 L1482.51 681.447 L1481.95 681.447 L1481.39 681.447 L1480.83 681.447 L1480.27 681.447 L1479.71 681.447 L1479.15 681.447 L1478.59 681.447 L1478.03 681.447 L1477.47 681.447 L1476.91 681.447 L1476.35 681.447 L1475.79 681.447 L1475.24 681.447 L1474.68 681.447 L1474.12 681.447 L1473.56 681.447 L1473 681.447 L1472.44 681.447 L1471.88 681.447 L1471.32 681.447 L1470.76 681.447 L1470.2 681.447 L1469.64 681.447 L1469.08 681.447 L1468.52 681.447 L1467.97 681.447 L1467.41 681.447 L1466.85 681.447 L1466.29 681.447 L1465.73 681.447 L1465.17 681.447 L1464.61 681.447 L1464.05 681.447 L1463.49 681.447 L1462.93 681.447 L1462.37 681.447 L1461.81 681.447 L1461.25 681.447 L1460.7 681.447 L1460.14 681.447 L1459.58 681.447 L1459.02 681.447 L1458.46 681.447 L1457.9 681.447 L1457.34 681.447 L1456.78 681.447 L1456.22 681.447 L1455.66 681.447 L1455.1 681.447 L1454.54 681.447 L1453.98 681.447 L1453.42 681.447 L1452.87 681.447 L1452.31 681.447 L1451.75 681.447 L1451.19 681.447 L1450.63 681.447 L1450.07 681.447 L1449.51 681.447 L1448.95 681.447 L1448.39 681.447 L1447.83 681.447 L1447.27 681.447 L1446.71 681.447 L1446.15 681.447 L1445.6 681.447 L1445.04 681.447 L1444.48 681.447 L1443.92 681.447 L1443.36 681.447 L1442.8 681.447 L1442.24 681.447 L1441.68 681.447 L1441.12 681.447 L1440.56 681.447 L1440 681.447 L1439.44 681.447 L1438.88 681.447 L1438.33 681.447 L1437.77 681.447 L1437.21 681.447 L1436.65 681.447 L1436.09 681.447 L1435.53 681.447 L1434.97 681.447 L1434.41 681.447 L1433.85 681.447 L1433.29 681.447 L1432.73 681.447 L1432.17 681.447 L1431.61 681.447 L1431.05 681.447 L1430.5 681.447 L1429.94 681.447 L1429.38 681.447 L1428.82 681.447 L1428.26 681.447 L1427.7 681.447 L1427.14 681.447 L1426.58 681.447 L1426.02 681.447 L1425.46 681.447 L1424.9 681.447 L1424.34 681.447 L1423.78 681.447 L1423.23 681.447 L1422.67 681.447 L1422.11 681.447 L1421.55 681.447 L1420.99 681.447 L1420.43 681.447 L1419.87 681.447 L1419.31 681.447 L1418.75 681.447 L1418.19 681.447 L1417.63 681.447 L1417.07 681.447 L1416.51 681.447 L1415.95 681.447 L1415.4 681.447 L1414.84 681.447 L1414.28 681.447 L1413.72 681.447 L1413.16 681.447 L1412.6 681.447 L1412.04 681.447 L1411.48 681.447 L1410.92 681.447 L1410.36 681.447 L1409.8 681.447 L1409.24 681.447 L1408.68 681.447 L1408.13 681.447 L1407.57 681.447 L1407.01 681.447 L1406.45 681.447 L1405.89 681.447 L1405.33 681.447 L1404.77 681.447 L1404.21 681.447 L1403.65 681.447 L1403.09 681.447 L1402.53 681.447 L1401.97 681.447 L1401.41 681.447 L1400.86 681.447 L1400.3 681.447 L1399.74 681.447 L1399.18 681.447 L1398.62 681.447 L1398.06 681.447 L1397.5 681.447 L1396.94 681.447 L1396.38 681.447 L1395.82 681.447 L1395.26 681.447 L1394.7 681.447 L1394.14 681.447 L1393.58 681.447 L1393.03 681.447 L1392.47 681.447 L1391.91 681.447 L1391.35 681.447 L1390.79 681.447 L1390.23 681.447 L1389.67 681.447 L1389.11 681.447 L1388.55 681.447 L1387.99 681.447 L1387.43 681.447 L1386.87 681.447 L1386.31 681.447 L1385.76 681.447 L1385.2 681.447 L1384.64 681.447 L1384.08 681.447 L1383.52 681.447 L1382.96 681.447 L1382.4 681.447 L1381.84 681.447 L1381.28 681.447 L1380.72 681.447 L1380.16 681.447 L1379.6 681.447 L1379.04 681.447 L1378.49 681.447 L1377.93 681.447 L1377.37 681.447 L1376.81 681.447 L1376.25 681.447 L1375.69 681.447 L1375.13 681.447 L1374.57 681.447 L1374.01 681.447 L1373.45 681.447 L1372.89 681.447 L1372.33 681.447 L1371.77 681.447 L1371.21 681.447 L1370.66 681.447 L1370.1 681.447 L1369.54 681.447 L1368.98 681.447 L1368.42 681.447 L1367.86 681.447 L1367.3 681.447 L1366.74 681.447 L1366.18 681.447 L1365.62 681.447 L1365.06 681.447 L1364.5 681.447 L1363.94 681.447 L1363.39 681.447 L1362.83 681.447 L1362.27 681.447 L1361.71 681.447 L1361.15 681.447 L1360.59 681.447 L1360.03 681.447 L1359.47 681.447 L1358.91 681.447 L1358.35 681.447 L1357.79 681.447 L1357.23 681.447 L1356.67 681.447 L1356.12 681.447 L1355.56 681.447 L1355 681.447 L1354.44 681.447 L1353.88 681.447 L1353.32 681.447 L1352.76 681.447 L1352.2 681.447 L1351.64 681.447 L1351.08 681.447 L1350.52 681.447 L1349.96 681.447 L1349.4 681.447 L1348.84 681.447 L1348.29 681.447 L1347.73 681.447 L1347.17 681.447 L1346.61 681.447 L1346.05 681.447 L1345.49 681.447 L1344.93 681.447 L1344.37 681.447 L1343.81 681.447 L1343.25 681.447 L1342.69 681.447 L1342.13 681.447 L1341.57 681.447 L1341.02 681.447 L1340.46 681.447 L1339.9 681.447 L1339.34 681.447 L1338.78 681.447 L1338.22 681.447 L1337.66 681.447 L1337.1 681.447 L1336.54 681.447 L1335.98 681.447 L1335.42 681.447 L1334.86 681.447 L1334.3 681.447 L1333.75 681.447 L1333.19 681.447 L1332.63 681.447 L1332.07 681.447 L1331.51 681.447 L1330.95 681.447 L1330.39 681.447 L1329.83 681.447 L1329.27 681.447 L1328.71 681.447 L1328.15 681.447 L1327.59 681.447 L1327.03 681.447 L1326.47 681.447 L1325.92 681.447 L1325.36 681.447 L1324.8 681.447 L1324.24 681.447 L1323.68 681.447 L1323.12 681.447 L1322.56 681.447 L1322 681.447 L1321.44 681.447 L1320.88 681.447 L1320.32 681.447 L1319.76 681.447 L1319.2 681.447 L1318.65 681.447 L1318.09 681.447 L1317.53 681.447 L1316.97 681.447 L1316.41 681.447 L1315.85 681.447 L1315.29 681.447 L1314.73 681.447 L1314.17 681.447 L1313.61 681.447 L1313.05 681.447 L1312.49 681.447 L1311.93 681.447 L1311.38 681.447 L1310.82 681.447 L1310.26 681.447 L1309.7 681.447 L1309.14 681.447 L1308.58 681.447 L1308.02 681.447 L1307.46 681.447 L1306.9 681.447 L1306.34 681.447 L1305.78 681.447 L1305.22 681.447 L1304.66 681.447 L1304.1 681.447 L1303.55 681.447 L1302.99 681.447 L1302.43 681.447 L1301.87 681.447 L1301.31 681.447 L1300.75 681.447 L1300.19 681.447 L1299.63 681.447 L1299.07 681.447 L1298.51 681.447 L1297.95 681.447 L1297.39 681.447 L1296.83 681.447 L1296.28 681.447 L1295.72 681.447 L1295.16 681.447 L1294.6 681.447 L1294.04 681.447 L1293.48 681.447 L1292.92 681.447 L1292.36 681.447 L1291.8 681.447 L1291.24 681.447 L1290.68 681.447 L1290.12 681.447 L1289.56 681.447 L1289 681.447 L1288.45 681.447 L1287.89 681.447 L1287.33 681.447 L1286.77 681.447 L1286.21 681.447 L1285.65 681.447 L1285.09 681.447 L1284.53 681.447 L1283.97 681.447 L1283.41 681.447 L1282.85 681.447 L1282.29 681.447 L1281.73 681.447 L1281.18 681.447 L1280.62 681.447 L1280.06 681.447 L1279.5 681.447 L1278.94 681.447 L1278.38 681.447 L1277.82 681.447 L1277.26 681.447 L1276.7 681.447 L1276.14 681.447 L1275.58 681.447 L1275.02 681.447 L1274.46 681.447 L1273.91 681.447 L1273.35 681.447 L1272.79 681.447 L1272.23 681.447 L1271.67 681.447 L1271.11 681.447 L1270.55 681.447 L1269.99 681.447 L1269.43 681.447 L1268.87 681.447 L1268.31 681.447 L1267.75 681.447 L1267.19 681.447 L1266.63 681.447 L1266.08 681.447 L1265.52 681.447 L1264.96 681.447 L1264.4 681.447 L1263.84 681.447 L1263.28 681.447 L1262.72 681.447 L1262.16 681.447 L1261.6 681.447 L1261.04 681.447 L1260.48 681.447 L1259.92 681.447 L1259.36 681.447 L1258.81 681.447 L1258.25 681.447 L1257.69 681.447 L1257.13 681.447 L1256.57 681.447 L1256.01 681.447 L1255.45 681.447 L1254.89 681.447 L1254.33 681.447 L1253.77 681.447 L1253.21 681.447 L1252.65 681.447 L1252.09 681.447 L1251.54 681.447 L1250.98 681.447 L1250.42 681.447 L1249.86 681.447 L1249.3 681.447 L1248.74 681.447 L1248.18 681.447 L1247.62 681.447 L1247.06 681.447 L1246.5 681.447 L1245.94 681.447 L1245.38 681.447 L1244.82 681.447 L1244.26 681.447 L1243.71 681.447 L1243.15 681.447 L1242.59 681.447 L1242.03 681.447 L1241.47 681.447 L1240.91 681.447 L1240.35 681.447 L1239.79 681.447 L1239.23 681.447 L1238.67 681.447 L1238.11 681.447 L1237.55 681.447 L1236.99 681.447 L1236.44 681.447 L1235.88 681.447 L1235.32 681.447 L1234.76 681.447 L1234.2 681.447 L1233.64 681.447 L1233.08 681.447 L1232.52 681.447 L1231.96 681.447 L1231.4 681.447 L1230.84 681.447 L1230.28 681.447 L1229.72 681.447 L1229.17 681.447 L1228.61 681.447 L1228.05 681.447 L1227.49 681.447 L1226.93 681.447 L1226.37 681.447 L1225.81 681.447 L1225.25 681.447 L1224.69 681.447 L1224.13 681.447 L1223.57 681.447 L1223.01 681.447 L1222.45 681.447 L1221.89 681.447 L1221.34 681.447 L1220.78 681.447 L1220.22 681.447 L1219.66 681.447 L1219.1 681.447 L1218.54 681.447 L1217.98 681.447 L1217.42 681.447 L1216.86 681.447 L1216.3 681.447 L1215.74 681.447 L1215.18 681.447 L1214.62 681.447 L1214.07 681.447 L1213.51 681.447 L1212.95 681.447 L1212.39 681.447 L1211.83 681.447 L1211.27 681.447 L1210.71 681.447 L1210.15 681.447 L1209.59 681.447 L1209.03 681.447 L1208.47 681.447 L1207.91 681.447 L1207.35 681.447 L1206.8 681.447 L1206.24 681.447 L1205.68 681.447 L1205.12 681.447 L1204.56 681.447 L1204 681.447 L1203.44 681.447 L1202.88 681.447 L1202.32 681.447 L1201.76 681.447 L1201.2 681.447 L1200.64 681.447 L1200.08 681.447 L1199.52 681.447 L1198.97 681.447 L1198.41 681.447 L1197.85 681.447 L1197.29 681.447 L1196.73 681.447 L1196.17 681.447 L1195.61 681.447 L1195.05 681.447 L1194.49 681.447 L1193.93 681.447 L1193.37 681.447 L1192.81 681.447 L1192.25 681.447 L1191.7 681.447 L1191.14 681.447 L1190.58 681.447 L1190.02 681.447 L1189.46 681.447 L1188.9 681.447 L1188.34 681.447 L1187.78 681.447 L1187.22 681.447 L1186.66 681.447 L1186.1 681.447 L1185.54 681.447 L1184.98 681.447 L1184.43 681.447 L1183.87 681.447 L1183.31 681.447 L1182.75 681.447 L1182.19 681.447 L1181.63 681.447 L1181.07 681.447 L1180.51 681.447 L1179.95 681.447 L1179.39 681.447 L1178.83 681.447 L1178.27 681.447 L1177.71 681.447 L1177.15 681.447 L1176.6 681.447 L1176.04 681.447 L1175.48 681.447 L1174.92 681.447 L1174.36 681.447 L1173.8 681.447 L1173.24 681.447 L1172.68 681.447 L1172.12 681.447 L1171.56 681.447 L1171 681.447 L1170.44 681.447 L1169.88 681.447 L1169.33 681.447 L1168.77 681.447 L1168.21 681.447 L1167.65 681.447 L1167.09 681.447 L1166.53 681.447 L1165.97 681.447 L1165.41 681.447 L1164.85 681.447 L1164.29 681.447 L1163.73 681.447 L1163.17 681.447 L1162.61 681.447 L1162.05 681.447 L1161.5 681.447 L1160.94 681.447 L1160.38 681.447 L1159.82 681.447 L1159.26 681.447 L1158.7 681.447 L1158.14 681.447 L1157.58 681.447 L1157.02 681.447 L1156.46 681.447 L1155.9 681.447 L1155.34 681.447 L1154.78 681.447 L1154.23 681.447 L1153.67 681.447 L1153.11 681.447 L1152.55 681.447 L1151.99 681.447 L1151.43 681.447 L1150.87 681.447 L1150.31 681.447 L1149.75 681.447 L1149.19 681.447 L1148.63 681.447 L1148.07 681.447 L1147.51 681.447 L1146.96 681.447 L1146.4 681.447 L1145.84 681.447 L1145.28 681.447 L1144.72 681.447 L1144.16 681.447 L1143.6 681.447 L1143.04 681.447 L1142.48 681.447 L1141.92 681.447 L1141.36 681.447 L1140.8 681.447 L1140.24 681.447 L1139.68 681.447 L1139.13 681.447 L1138.57 681.447 L1138.01 681.447 L1137.45 681.447 L1136.89 681.447 L1136.33 681.447 L1135.77 681.447 L1135.21 681.447 L1134.65 681.447 L1134.09 681.447 L1133.53 681.447 L1132.97 681.447 L1132.41 681.447 L1131.86 681.447 L1131.3 681.447 L1130.74 681.447 L1130.18 681.447 L1129.62 681.447 L1129.06 681.447 L1128.5 681.447 L1127.94 681.447 L1127.38 681.447 L1126.82 681.447 L1126.26 681.447 L1125.7 681.447 L1125.14 681.447 L1124.59 681.447 L1124.03 681.447 L1123.47 681.447 L1122.91 681.447 L1122.35 681.447 L1121.79 681.447 L1121.23 681.447 L1120.67 681.447 L1120.11 681.447 L1119.55 681.447 L1118.99 681.447 L1118.43 681.447 L1117.87 681.447 L1117.31 681.447 L1116.76 681.447 L1116.2 681.447 L1115.64 681.447 L1115.08 681.447 L1114.52 681.447 L1113.96 681.447 L1113.4 681.447 L1112.84 681.447 L1112.28 681.447 L1111.72 681.447 L1111.16 681.447 L1110.6 681.447 L1110.04 681.447 L1109.49 681.447 L1108.93 681.447 L1108.37 681.447 L1107.81 681.447 L1107.25 681.447 L1106.69 681.447 L1106.13 681.447 L1105.57 681.447 L1105.01 681.447 L1104.45 681.447 L1103.89 681.447 L1103.33 681.447 L1102.77 681.447 L1102.22 681.447 L1101.66 681.447 L1101.1 681.447 L1100.54 681.447 L1099.98 681.447 L1099.42 681.447 L1098.86 681.447 L1098.3 681.447 L1097.74 681.447 L1097.18 681.447 L1096.62 681.447 L1096.06 681.447 L1095.5 681.447 L1094.94 681.447 L1094.39 681.447 L1093.83 681.447 L1093.27 681.447 L1092.71 681.447 L1092.15 681.447 L1091.59 681.447 L1091.03 681.447 L1090.47 681.447 L1089.91 681.447 L1089.35 681.447 L1088.79 681.447 L1088.23 681.447 L1087.67 681.447 L1087.12 681.447 L1086.56 681.447 L1086 681.447 L1085.44 681.447 L1084.88 681.447 L1084.32 681.447 L1083.76 681.447 L1083.2 681.447 L1082.64 681.447 L1082.08 681.447 L1081.52 681.447 L1080.96 681.447 L1080.4 681.447 L1079.85 681.447 L1079.29 681.447 L1078.73 681.447 L1078.17 681.447 L1077.61 681.447 L1077.05 681.447 L1076.49 681.447 L1075.93 681.447 L1075.37 681.447 L1074.81 681.447 L1074.25 681.447 L1073.69 681.447 L1073.13 681.447 L1072.57 681.447 L1072.02 681.447 L1071.46 681.447 L1070.9 681.447 L1070.34 681.447 L1069.78 681.447 L1069.22 681.447 L1068.66 681.447 L1068.1 681.447 L1067.54 681.447 L1066.98 681.447 L1066.42 681.447 L1065.86 681.447 L1065.3 681.447 L1064.75 681.447 L1064.19 681.447 L1063.63 681.447 L1063.07 681.447 L1062.51 681.447 L1061.95 681.447 L1061.39 681.447 L1060.83 681.447 L1060.27 681.447 L1059.71 681.447 L1059.15 681.447 L1058.59 681.447 L1058.03 681.447 L1057.48 681.447 L1056.92 681.447 L1056.36 681.447 L1055.8 681.447 L1055.24 681.447 L1054.68 681.447 L1054.12 681.447 L1053.56 681.447 L1053 681.447 L1052.44 681.447 L1051.88 681.447 L1051.32 681.447 L1050.76 681.447 L1050.2 681.447 L1049.65 681.447 L1049.09 681.447 L1048.53 681.447 L1047.97 681.447 L1047.41 681.447 L1046.85 681.447 L1046.29 681.447 L1045.73 681.447 L1045.17 681.447 L1044.61 681.447 L1044.05 681.447 L1043.49 681.447 L1042.93 681.447 L1042.38 681.447 L1041.82 681.447 L1041.26 681.447 L1040.7 681.447 L1040.14 681.447 L1039.58 681.447 L1039.02 681.447 L1038.46 681.447 L1037.9 681.447 L1037.34 681.447 L1036.78 681.447 L1036.22 681.447 L1035.66 681.447 L1035.1 681.447 L1034.55 681.447 L1033.99 681.447 L1033.43 681.447 L1032.87 681.447 L1032.31 681.447 L1031.75 681.447 L1031.19 681.447 L1030.63 681.447 L1030.07 681.447 L1029.51 681.447 L1028.95 681.447 L1028.39 681.447 L1027.83 681.447 L1027.28 681.447 L1026.72 681.447 L1026.16 681.447 L1025.6 681.447 L1025.04 681.447 L1024.48 681.447 L1023.92 681.447 L1023.36 681.447 L1022.8 681.447 L1022.24 681.447 L1021.68 681.447 L1021.12 681.447 L1020.56 681.447 L1020.01 681.447 L1019.45 681.447 L1018.89 681.447 L1018.33 681.447 L1017.77 681.447 L1017.21 681.447 L1016.65 681.447 L1016.09 681.447 L1015.53 681.447 L1014.97 681.447 L1014.41 681.447 L1013.85 681.447 L1013.29 681.447 L1012.73 681.447 L1012.18 681.447 L1011.62 681.447 L1011.06 681.447 L1010.5 681.447 L1009.94 681.447 L1009.38 681.447 L1008.82 681.447 L1008.26 681.447 L1007.7 681.447 L1007.14 681.447 L1006.58 681.447 L1006.02 681.447 L1005.46 681.447 L1004.91 681.447 L1004.35 681.447 L1003.79 681.447 L1003.23 681.447 L1002.67 681.447 L1002.11 681.447 L1001.55 681.447 L1000.99 681.447 L1000.43 681.447 L999.872 681.447 L999.313 681.447 L998.754 681.447 L998.194 681.447 L997.635 681.447 L997.076 681.447 L996.517 681.447 L995.957 681.447 L995.398 681.447 L994.839 681.447 L994.28 681.447 L993.72 681.447 L993.161 681.447 L992.602 681.447 L992.043 681.447 L991.483 681.447 L990.924 681.447 L990.365 681.447 L989.806 681.447 L989.246 681.447 L988.687 681.447 L988.128 681.447 L987.569 681.447 L987.009 681.447 L986.45 681.447 L985.891 681.447 L985.332 681.447 L984.772 681.447 L984.213 681.447 L983.654 681.447 L983.095 681.447 L982.535 681.447 L981.976 681.447 L981.417 681.447 L980.858 681.447 L980.298 681.447 L979.739 681.447 L979.18 681.447 L978.621 681.447 L978.061 681.447 L977.502 681.447 L976.943 681.447 L976.384 681.447 L975.824 681.447 L975.265 681.447 L974.706 681.447 L974.147 681.447 L973.587 681.447 L973.028 681.447 L972.469 681.447 L971.91 681.447 L971.35 681.447 L970.791 681.447 L970.232 681.447 L969.673 681.447 L969.113 681.447 L968.554 681.447 L967.995 681.447 L967.436 681.447 L966.876 681.447 L966.317 681.447 L965.758 681.447 L965.199 681.447 L964.639 681.447 L964.08 681.447 L963.521 681.447 L962.962 681.447 L962.402 681.447 L961.843 681.447 L961.284 681.447 L960.725 681.447 L960.165 681.447 L959.606 681.447 L959.047 681.447 L958.488 681.447 L957.928 681.447 L957.369 681.447 L956.81 681.447 L956.251 681.447 L955.691 681.447 L955.132 681.447 L954.573 681.447 L954.014 681.447 L953.454 681.447 L952.895 681.447 L952.336 681.447 L951.777 681.447 L951.217 681.447 L950.658 681.447 L950.099 681.447 L949.54 681.447 L948.98 681.447 L948.421 681.447 L947.862 681.447 L947.303 681.447 L946.743 681.447 L946.184 681.447 L945.625 681.447 L945.066 681.447 L944.506 681.447 L943.947 681.447 L943.388 681.447 L942.829 681.447 L942.269 681.447 L941.71 681.447 L941.151 681.447 L940.592 681.447 L940.032 681.447 L939.473 681.447 L938.914 681.447 L938.355 681.447 L937.795 681.447 L937.236 681.447 L936.677 681.447 L936.118 681.447 L935.558 681.447 L934.999 681.447 L934.44 681.447 L933.881 681.447 L933.321 681.447 L932.762 681.447 L932.203 681.447 L931.644 681.447 L931.084 681.447 L930.525 681.447 L929.966 681.447 L929.406 681.447 L928.847 681.447 L928.288 681.447 L927.729 681.447 L927.169 681.447 L926.61 681.447 L926.051 681.447 L925.492 681.447 L924.932 681.447 L924.373 681.447 L923.814 681.447 L923.255 681.447 L922.695 681.447 L922.136 681.447 L921.577 681.447 L921.018 681.447 L920.458 681.447 L919.899 681.447 L919.34 681.447 L918.781 681.447 L918.221 681.447 L917.662 681.447 L917.103 681.447 L916.544 681.447 L915.984 681.447 L915.425 681.447 L914.866 681.447 L914.307 681.447 L913.747 681.447 L913.188 681.447 L912.629 681.447 L912.07 681.447 L911.51 681.447 L910.951 681.447 L910.392 681.447 L909.833 681.447 L909.273 681.447 L908.714 681.447 L908.155 681.447 L907.596 681.447 L907.036 681.447 L906.477 681.447 L905.918 681.447 L905.359 681.447 L904.799 681.447 L904.24 681.447 L903.681 681.447 L903.122 681.447 L902.562 681.447 L902.003 681.447 L901.444 681.447 L900.885 681.447 L900.325 681.447 L899.766 681.447 L899.207 681.447 L898.648 681.447 L898.088 681.447 L897.529 681.447 L896.97 681.447 L896.411 681.447 L895.851 681.447 L895.292 681.447 L894.733 681.447 L894.174 681.447 L893.614 681.447 L893.055 681.447 L892.496 681.447 L891.937 681.447 L891.377 681.447 L890.818 681.447 L890.259 681.447 L889.7 681.447 L889.14 681.447 L888.581 681.447 L888.022 681.447 L887.463 681.447 L886.903 681.447 L886.344 681.447 L885.785 681.447 L885.226 681.447 L884.666 681.447 L884.107 681.447 L883.548 681.447 L882.989 681.447 L882.429 681.447 L881.87 681.447 L881.311 681.447 L880.752 681.447 L880.192 681.447 L879.633 681.447 L879.074 681.447 L878.515 681.447 L877.955 681.447 L877.396 681.447 L876.837 681.447 L876.278 681.447 L875.718 681.447 L875.159 681.447 L874.6 681.447 L874.041 681.447 L873.481 681.447 L872.922 681.447 L872.363 681.447 L871.804 681.447 L871.244 681.447 L870.685 681.447 L870.126 681.447 L869.567 681.447 L869.007 681.447 L868.448 681.447 L867.889 681.447 L867.33 681.447 L866.77 681.447 L866.211 681.447 L865.652 681.447 L865.093 681.447 L864.533 681.447 L863.974 681.447 L863.415 681.447 L862.856 681.447 L862.296 681.447 L861.737 681.447 L861.178 681.447 L860.619 681.447 L860.059 681.447 L859.5 681.447 L858.941 681.447 L858.382 681.447 L857.822 681.447 L857.263 681.447 L856.704 681.447 L856.145 681.447 L855.585 681.447 L855.026 681.447 L854.467 681.447 L853.908 681.447 L853.348 681.447 L852.789 681.447 L852.23 681.447 L851.671 681.447 L851.111 681.447 L850.552 681.447 L849.993 681.447 L849.434 681.447 L848.874 681.447 L848.315 681.447 L847.756 681.447 L847.197 681.447 L846.637 681.447 L846.078 681.447 L845.519 681.447 L844.96 681.447 L844.4 681.447 L843.841 681.447 L843.282 681.447 L842.723 681.447 L842.163 681.447 L841.604 681.447 L841.045 681.447 L840.486 681.447 L839.926 681.447 L839.367 681.447 L838.808 681.447 L838.249 681.447 L837.689 681.447 L837.13 681.447 L836.571 681.447 L836.012 681.447 L835.452 681.447 L834.893 681.447 L834.334 681.447 L833.775 681.447 L833.215 681.447 L832.656 681.447 L832.097 681.447 L831.538 681.447 L830.978 681.447 L830.419 681.447 L829.86 681.447 L829.301 681.447 L828.741 681.447 L828.182 681.447 L827.623 681.447 L827.064 681.447 L826.504 681.447 L825.945 681.447 L825.386 681.447 L824.827 681.447 L824.267 681.447 L823.708 681.447 L823.149 681.447 L822.59 681.447 L822.03 681.447 L821.471 681.447 L820.912 681.447 L820.353 681.447 L819.793 681.447 L819.234 681.447 L818.675 681.447 L818.116 681.447 L817.556 681.447 L816.997 681.447 L816.438 681.447 L815.879 681.447 L815.319 681.447 L814.76 681.447 L814.201 681.447 L813.642 681.447 L813.082 681.447 L812.523 681.447 L811.964 681.447 L811.405 681.447 L810.845 681.447 L810.286 681.447 L809.727 681.447 L809.168 681.447 L808.608 681.447 L808.049 681.447 L807.49 681.447 L806.931 681.447 L806.371 681.447 L805.812 681.447 L805.253 681.447 L804.693 681.447 L804.134 681.447 L803.575 681.447 L803.016 681.447 L802.456 681.447 L801.897 681.447 L801.338 681.447 L800.779 681.447 L800.219 681.447 L799.66 681.447 L799.101 681.447 L798.542 681.447 L797.982 681.447 L797.423 681.447 L796.864 681.447 L796.305 681.447 L795.745 681.447 L795.186 681.447 L794.627 681.447 L794.068 681.447 L793.508 681.447 L792.949 681.447 L792.39 681.447 L791.831 681.447 L791.271 681.447 L790.712 681.447 L790.153 681.447 L789.594 681.447 L789.034 681.447 L788.475 681.447 L787.916 681.447 L787.357 681.447 L786.797 681.447 L786.238 681.447 L785.679 681.447 L785.12 681.447 L784.56 681.447 L784.001 681.447 L783.442 681.447 L782.883 681.447 L782.323 681.447 L781.764 681.447 L781.205 681.447 L780.646 681.447 L780.086 681.447 L779.527 681.447 L778.968 681.447 L778.409 681.447 L777.849 681.447 L777.29 681.447 L776.731 681.447 L776.172 681.447 L775.612 681.447 L775.053 681.447 L774.494 681.447 L773.935 681.447 L773.375 681.447 L772.816 681.447 L772.257 681.447 L771.698 681.447 L771.138 681.447 L770.579 681.447 L770.02 681.447 L769.461 681.447 L768.901 681.447 L768.342 681.447 L767.783 681.447 L767.224 681.447 L766.664 681.447 L766.105 681.447 L765.546 681.447 L764.987 681.447 L764.427 681.447 L763.868 681.447 L763.309 681.447 L762.75 681.447 L762.19 681.447 L761.631 681.447 L761.072 681.447 L760.513 681.447 L759.953 681.447 L759.394 681.447 L758.835 681.447 L758.276 681.447 L757.716 681.447 L757.157 681.447 L756.598 681.447 L756.039 681.447 L755.479 681.447 L754.92 681.447 L754.361 681.447 L753.802 681.447 L753.242 681.447 L752.683 681.447 L752.124 681.447 L751.565 681.447 L751.005 681.447 L750.446 681.447 L749.887 681.447 L749.328 681.447 L748.768 681.447 L748.209 681.447 L747.65 681.447 L747.091 681.447 L746.531 681.447 L745.972 681.447 L745.413 681.447 L744.854 681.447 L744.294 681.447 L743.735 681.447 L743.176 681.447 L742.617 681.447 L742.057 681.447 L741.498 681.447 L740.939 681.447 L740.38 681.447 L739.82 681.447 L739.261 681.447 L738.702 681.447 L738.143 681.447 L737.583 681.447 L737.024 681.447 L736.465 681.447 L735.906 681.447 L735.346 681.447 L734.787 681.447 L734.228 681.447 L733.669 681.447 L733.109 681.447 L732.55 681.447 L731.991 681.447 L731.432 681.447 L730.872 681.447 L730.313 681.447 L729.754 681.447 L729.195 681.447 L728.635 681.447 L728.076 681.447 L727.517 681.447 L726.958 681.447 L726.398 681.447 L725.839 681.447 L725.28 681.447 L724.721 681.447 L724.161 681.447 L723.602 681.447 L723.043 681.447 L722.484 681.447 L721.924 681.447 L721.365 681.447 L720.806 681.447 L720.247 681.447  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.773 720.806,682.773 721.365,682.773 721.924,682.773 722.484,682.773 723.043,682.773 723.602,682.773 724.161,682.773 724.721,682.773 725.28,682.773 725.839,682.773 726.398,682.773 726.958,682.773 727.517,682.773 728.076,682.773 728.635,682.773 729.195,682.773 729.754,682.773 730.313,682.773 730.872,682.773 731.432,682.773 731.991,682.773 732.55,682.773 733.109,682.773 733.669,682.773 734.228,682.773 734.787,682.773 735.346,682.773 735.906,682.773 736.465,682.773 737.024,682.773 737.583,682.773 738.143,682.773 738.702,682.773 739.261,682.773 739.82,682.773 740.38,682.773 740.939,682.773 741.498,682.773 742.057,682.773 742.617,682.773 743.176,682.773 743.735,682.773 744.294,682.773 744.854,682.773 745.413,682.773 745.972,682.773 746.531,682.773 747.091,682.773 747.65,682.773 748.209,682.773 748.768,682.773 749.328,682.773 749.887,682.773 750.446,682.773 751.005,682.773 751.565,682.773 752.124,682.773 752.683,682.773 753.242,682.773 753.802,682.773 754.361,682.773 754.92,682.773 755.479,682.773 756.039,682.773 756.598,682.773 757.157,682.773 757.716,682.773 758.276,682.773 758.835,682.773 759.394,682.773 759.953,682.773 760.513,682.773 761.072,682.773 761.631,682.773 762.19,682.773 762.75,682.773 763.309,682.773 763.868,682.773 764.427,682.773 764.987,682.773 765.546,682.773 766.105,682.773 766.664,682.773 767.224,682.773 767.783,682.773 768.342,682.773 768.901,682.773 769.461,682.773 770.02,682.773 770.579,682.773 771.138,682.773 771.698,682.773 772.257,682.773 772.816,682.773 773.375,682.773 773.935,682.773 774.494,682.773 775.053,682.773 775.612,682.773 776.172,682.773 776.731,682.773 777.29,682.773 777.849,682.773 778.409,682.773 778.968,682.773 779.527,682.773 780.086,682.773 780.646,682.773 781.205,682.773 781.764,682.773 782.323,682.773 782.883,682.773 783.442,682.773 784.001,682.773 784.56,682.773 785.12,682.773 785.679,682.773 786.238,682.773 786.797,682.773 787.357,682.773 787.916,682.773 788.475,682.773 789.034,682.773 789.594,682.773 790.153,682.773 790.712,682.773 791.271,682.773 791.831,682.773 792.39,682.773 792.949,682.773 793.508,682.773 794.068,682.773 794.627,682.773 795.186,682.773 795.745,682.773 796.305,682.773 796.864,682.773 797.423,682.773 797.982,682.773 798.542,682.773 799.101,682.773 799.66,682.773 800.219,682.773 800.779,682.773 801.338,682.773 801.897,682.773 802.456,682.773 803.016,682.773 803.575,682.773 804.134,682.773 804.693,682.773 805.253,682.773 805.812,682.773 806.371,682.773 806.931,682.773 807.49,682.773 808.049,682.773 808.608,682.773 809.168,682.773 809.727,682.773 810.286,682.773 810.845,682.773 811.405,682.773 811.964,682.773 812.523,682.773 813.082,682.773 813.642,682.773 814.201,682.773 814.76,682.773 815.319,682.773 815.879,682.773 816.438,682.773 816.997,682.773 817.556,682.773 818.116,682.773 818.675,682.773 819.234,682.773 819.793,682.773 820.353,682.773 820.912,682.773 821.471,682.773 822.03,682.773 822.59,682.773 823.149,682.773 823.708,682.773 824.267,682.773 824.827,682.773 825.386,682.773 825.945,682.773 826.504,682.773 827.064,682.773 827.623,682.773 828.182,682.773 828.741,682.773 829.301,682.773 829.86,682.773 830.419,682.773 830.978,682.773 831.538,682.773 832.097,682.773 832.656,682.773 833.215,682.773 833.775,682.773 834.334,682.773 834.893,682.773 835.452,682.773 836.012,682.773 836.571,682.773 837.13,682.773 837.689,682.773 838.249,682.773 838.808,682.773 839.367,682.773 839.926,682.773 840.486,682.773 841.045,682.773 841.604,682.773 842.163,682.773 842.723,682.773 843.282,682.773 843.841,682.773 844.4,682.773 844.96,682.773 845.519,682.773 846.078,682.773 846.637,682.773 847.197,682.773 847.756,682.773 848.315,682.773 848.874,682.773 849.434,682.773 849.993,682.773 850.552,682.773 851.111,682.773 851.671,682.773 852.23,682.773 852.789,682.773 853.348,682.773 853.908,682.773 854.467,682.773 855.026,682.773 855.585,682.773 856.145,682.773 856.704,682.773 857.263,682.773 857.822,682.773 858.382,682.773 858.941,682.773 859.5,682.773 860.059,682.773 860.619,682.773 861.178,682.773 861.737,682.773 862.296,682.773 862.856,682.773 863.415,682.773 863.974,682.773 864.533,682.773 865.093,682.773 865.652,682.773 866.211,682.773 866.77,682.773 867.33,682.773 867.889,682.773 868.448,682.773 869.007,682.773 869.567,682.773 870.126,682.773 870.685,682.773 871.244,682.773 871.804,682.773 872.363,682.773 872.922,682.773 873.481,682.773 874.041,682.773 874.6,682.773 875.159,682.773 875.718,682.773 876.278,682.773 876.837,682.773 877.396,682.773 877.955,682.773 878.515,682.773 879.074,682.773 879.633,682.773 880.192,682.773 880.752,682.773 881.311,682.773 881.87,682.773 882.429,682.773 882.989,682.773 883.548,682.773 884.107,682.773 884.666,682.773 885.226,682.773 885.785,682.773 886.344,682.773 886.903,682.773 887.463,682.773 888.022,682.773 888.581,682.773 889.14,682.773 889.7,682.773 890.259,682.773 890.818,682.773 891.377,682.773 891.937,682.773 892.496,682.773 893.055,682.773 893.614,682.773 894.174,682.773 894.733,682.773 895.292,682.773 895.851,682.773 896.411,682.773 896.97,682.773 897.529,682.773 898.088,682.773 898.648,682.773 899.207,682.773 899.766,682.773 900.325,682.773 900.885,682.773 901.444,682.773 902.003,682.773 902.562,682.773 903.122,682.773 903.681,682.773 904.24,682.773 904.799,682.773 905.359,682.773 905.918,682.773 906.477,682.773 907.036,682.773 907.596,682.773 908.155,682.773 908.714,682.773 909.273,682.773 909.833,682.773 910.392,682.773 910.951,682.773 911.51,682.773 912.07,682.773 912.629,682.773 913.188,682.773 913.747,682.773 914.307,682.773 914.866,682.773 915.425,682.773 915.984,682.773 916.544,682.773 917.103,682.773 917.662,682.773 918.221,682.773 918.781,682.773 919.34,682.773 919.899,682.773 920.458,682.773 921.018,682.773 921.577,682.773 922.136,682.773 922.695,682.773 923.255,682.773 923.814,682.773 924.373,682.773 924.932,682.773 925.492,682.773 926.051,682.773 926.61,682.773 927.169,682.773 927.729,682.773 928.288,682.773 928.847,682.773 929.406,682.773 929.966,682.773 930.525,682.773 931.084,682.773 931.644,682.773 932.203,682.773 932.762,682.773 933.321,682.773 933.881,682.773 934.44,682.773 934.999,682.773 935.558,682.773 936.118,682.773 936.677,682.773 937.236,682.773 937.795,682.773 938.355,682.773 938.914,682.773 939.473,682.773 940.032,682.773 940.592,682.773 941.151,682.773 941.71,682.773 942.269,682.773 942.829,682.773 943.388,682.773 943.947,682.773 944.506,682.773 945.066,682.773 945.625,682.773 946.184,682.773 946.743,682.773 947.303,682.773 947.862,682.773 948.421,682.773 948.98,682.773 949.54,682.773 950.099,682.773 950.658,682.773 951.217,682.773 951.777,682.773 952.336,682.773 952.895,682.773 953.454,682.773 954.014,682.773 954.573,682.773 955.132,682.773 955.691,682.773 956.251,682.773 956.81,682.773 957.369,682.773 957.928,682.773 958.488,682.773 959.047,682.773 959.606,682.773 960.165,682.773 960.725,682.773 961.284,682.773 961.843,682.773 962.402,682.773 962.962,682.773 963.521,682.773 964.08,682.773 964.639,682.773 965.199,682.773 965.758,682.773 966.317,682.773 966.876,682.773 967.436,682.773 967.995,682.773 968.554,682.773 969.113,682.773 969.673,682.773 970.232,682.773 970.791,682.773 971.35,682.773 971.91,682.773 972.469,682.773 973.028,682.773 973.587,682.773 974.147,682.773 974.706,682.773 975.265,682.773 975.824,682.773 976.384,682.773 976.943,682.773 977.502,682.773 978.061,682.773 978.621,682.773 979.18,682.773 979.739,682.773 980.298,682.773 980.858,682.773 981.417,682.773 981.976,682.773 982.535,682.773 983.095,682.773 983.654,682.773 984.213,682.773 984.772,682.773 985.332,682.773 985.891,682.773 986.45,682.773 987.009,682.773 987.569,682.773 988.128,682.773 988.687,682.773 989.246,682.773 989.806,682.773 990.365,682.773 990.924,682.773 991.483,682.773 992.043,682.773 992.602,682.773 993.161,682.773 993.72,682.773 994.28,682.773 994.839,682.773 995.398,682.773 995.957,682.773 996.517,682.773 997.076,682.773 997.635,682.773 998.194,682.773 998.754,682.773 999.313,682.773 999.872,682.773 1000.43,682.773 1000.99,682.773 1001.55,682.773 1002.11,682.773 1002.67,682.773 1003.23,682.773 1003.79,682.773 1004.35,682.773 1004.91,682.773 1005.46,682.773 1006.02,682.773 1006.58,682.773 1007.14,682.773 1007.7,682.773 1008.26,682.773 1008.82,682.773 1009.38,682.773 1009.94,682.773 1010.5,682.773 1011.06,682.773 1011.62,682.773 1012.18,682.773 1012.73,682.773 1013.29,682.773 1013.85,682.773 1014.41,682.773 1014.97,682.773 1015.53,682.773 1016.09,682.773 1016.65,682.773 1017.21,682.773 1017.77,682.773 1018.33,682.773 1018.89,682.773 1019.45,682.773 1020.01,682.773 1020.56,682.773 1021.12,682.773 1021.68,682.773 1022.24,682.773 1022.8,682.773 1023.36,682.773 1023.92,682.773 1024.48,682.773 1025.04,682.773 1025.6,682.773 1026.16,682.773 1026.72,682.773 1027.28,682.773 1027.83,682.773 1028.39,682.773 1028.95,682.773 1029.51,682.773 1030.07,682.773 1030.63,682.773 1031.19,682.773 1031.75,682.773 1032.31,682.773 1032.87,682.773 1033.43,682.773 1033.99,682.773 1034.55,682.773 1035.1,682.773 1035.66,682.773 1036.22,682.773 1036.78,682.773 1037.34,682.773 1037.9,682.773 1038.46,682.773 1039.02,682.773 1039.58,682.773 1040.14,682.773 1040.7,682.773 1041.26,682.773 1041.82,682.773 1042.38,682.773 1042.93,682.773 1043.49,682.773 1044.05,682.773 1044.61,682.773 1045.17,682.773 1045.73,682.773 1046.29,682.773 1046.85,682.773 1047.41,682.773 1047.97,682.773 1048.53,682.773 1049.09,682.773 1049.65,682.773 1050.2,682.773 1050.76,682.773 1051.32,682.773 1051.88,682.773 1052.44,682.773 1053,682.773 1053.56,682.773 1054.12,682.773 1054.68,682.773 1055.24,682.773 1055.8,682.773 1056.36,682.773 1056.92,682.773 1057.48,682.773 1058.03,682.773 1058.59,682.773 1059.15,682.773 1059.71,682.773 1060.27,682.773 1060.83,682.773 1061.39,682.773 1061.95,682.773 1062.51,682.773 1063.07,682.773 1063.63,682.773 1064.19,682.773 1064.75,682.773 1065.3,682.773 1065.86,682.773 1066.42,682.773 1066.98,682.773 1067.54,682.773 1068.1,682.773 1068.66,682.773 1069.22,682.773 1069.78,682.773 1070.34,682.773 1070.9,682.773 1071.46,682.773 1072.02,682.773 1072.57,682.773 1073.13,682.773 1073.69,682.773 1074.25,682.773 1074.81,682.773 1075.37,682.773 1075.93,682.773 1076.49,682.773 1077.05,682.773 1077.61,682.773 1078.17,682.773 1078.73,682.773 1079.29,682.773 1079.85,682.773 1080.4,682.773 1080.96,682.773 1081.52,682.773 1082.08,682.773 1082.64,682.773 1083.2,682.773 1083.76,682.773 1084.32,682.773 1084.88,682.773 1085.44,682.773 1086,682.773 1086.56,682.773 1087.12,682.773 1087.67,682.773 1088.23,682.773 1088.79,682.773 1089.35,682.773 1089.91,682.773 1090.47,682.773 1091.03,682.773 1091.59,682.773 1092.15,682.773 1092.71,682.773 1093.27,682.773 1093.83,682.773 1094.39,682.773 1094.94,682.773 1095.5,682.773 1096.06,682.773 1096.62,682.773 1097.18,682.773 1097.74,682.773 1098.3,682.773 1098.86,682.773 1099.42,682.773 1099.98,682.773 1100.54,682.773 1101.1,682.773 1101.66,682.773 1102.22,682.773 1102.77,682.773 1103.33,682.773 1103.89,682.773 1104.45,682.773 1105.01,682.773 1105.57,682.773 1106.13,682.773 1106.69,682.773 1107.25,682.773 1107.81,682.773 1108.37,682.773 1108.93,682.773 1109.49,682.773 1110.04,682.773 1110.6,682.773 1111.16,682.773 1111.72,682.773 1112.28,682.773 1112.84,682.773 1113.4,682.773 1113.96,682.773 1114.52,682.773 1115.08,682.773 1115.64,682.773 1116.2,682.773 1116.76,682.773 1117.31,682.773 1117.87,682.773 1118.43,682.773 1118.99,682.773 1119.55,682.773 1120.11,682.773 1120.67,682.773 1121.23,682.773 1121.79,682.773 1122.35,682.773 1122.91,682.773 1123.47,682.773 1124.03,682.773 1124.59,682.773 1125.14,682.773 1125.7,682.773 1126.26,682.773 1126.82,682.773 1127.38,682.773 1127.94,682.773 1128.5,682.773 1129.06,682.773 1129.62,682.773 1130.18,682.773 1130.74,682.773 1131.3,682.773 1131.86,682.773 1132.41,682.773 1132.97,682.773 1133.53,682.773 1134.09,682.773 1134.65,682.773 1135.21,682.773 1135.77,682.773 1136.33,682.773 1136.89,682.773 1137.45,682.773 1138.01,682.773 1138.57,682.773 1139.13,682.773 1139.68,682.773 1140.24,682.773 1140.8,682.773 1141.36,682.773 1141.92,682.773 1142.48,682.773 1143.04,682.773 1143.6,682.773 1144.16,682.773 1144.72,682.773 1145.28,682.773 1145.84,682.773 1146.4,682.773 1146.96,682.773 1147.51,682.773 1148.07,682.773 1148.63,682.773 1149.19,682.773 1149.75,682.773 1150.31,682.773 1150.87,682.773 1151.43,682.773 1151.99,682.773 1152.55,682.773 1153.11,682.773 1153.67,682.773 1154.23,682.773 1154.78,682.773 1155.34,682.773 1155.9,682.773 1156.46,682.773 1157.02,682.773 1157.58,682.773 1158.14,682.773 1158.7,682.773 1159.26,682.773 1159.82,682.773 1160.38,682.773 1160.94,682.773 1161.5,682.773 1162.05,682.773 1162.61,682.773 1163.17,682.773 1163.73,682.773 1164.29,682.773 1164.85,682.773 1165.41,682.773 1165.97,682.773 1166.53,682.773 1167.09,682.773 1167.65,682.773 1168.21,682.773 1168.77,682.773 1169.33,682.773 1169.88,682.773 1170.44,682.773 1171,682.773 1171.56,682.773 1172.12,682.773 1172.68,682.773 1173.24,682.773 1173.8,682.773 1174.36,682.773 1174.92,682.773 1175.48,682.773 1176.04,682.773 1176.6,682.773 1177.15,682.773 1177.71,682.773 1178.27,682.773 1178.83,682.773 1179.39,682.773 1179.95,682.773 1180.51,682.773 1181.07,682.773 1181.63,682.773 1182.19,682.773 1182.75,682.773 1183.31,682.773 1183.87,682.773 1184.43,682.773 1184.98,682.773 1185.54,682.773 1186.1,682.773 1186.66,682.773 1187.22,682.773 1187.78,682.773 1188.34,682.773 1188.9,682.773 1189.46,682.773 1190.02,682.773 1190.58,682.773 1191.14,682.773 1191.7,682.773 1192.25,682.773 1192.81,682.773 1193.37,682.773 1193.93,682.773 1194.49,682.773 1195.05,682.773 1195.61,682.773 1196.17,682.773 1196.73,682.773 1197.29,682.773 1197.85,682.773 1198.41,682.773 1198.97,682.773 1199.52,682.773 1200.08,682.773 1200.64,682.773 1201.2,682.773 1201.76,682.773 1202.32,682.773 1202.88,682.773 1203.44,682.773 1204,682.773 1204.56,682.773 1205.12,682.773 1205.68,682.773 1206.24,682.773 1206.8,682.773 1207.35,682.773 1207.91,682.773 1208.47,682.773 1209.03,682.773 1209.59,682.773 1210.15,682.773 1210.71,682.773 1211.27,682.773 1211.83,682.773 1212.39,682.773 1212.95,682.773 1213.51,682.773 1214.07,682.773 1214.62,682.773 1215.18,682.773 1215.74,682.773 1216.3,682.773 1216.86,682.773 1217.42,682.773 1217.98,682.773 1218.54,682.773 1219.1,682.773 1219.66,682.773 1220.22,682.773 1220.78,682.773 1221.34,682.773 1221.89,682.773 1222.45,682.773 1223.01,682.773 1223.57,682.773 1224.13,682.773 1224.69,682.773 1225.25,682.773 1225.81,682.773 1226.37,682.773 1226.93,682.773 1227.49,682.773 1228.05,682.773 1228.61,682.773 1229.17,682.773 1229.72,682.773 1230.28,682.773 1230.84,682.773 1231.4,682.773 1231.96,682.773 1232.52,682.773 1233.08,682.773 1233.64,682.773 1234.2,682.773 1234.76,682.773 1235.32,682.773 1235.88,682.773 1236.44,682.773 1236.99,682.773 1237.55,682.773 1238.11,682.773 1238.67,682.773 1239.23,682.773 1239.79,682.773 1240.35,682.773 1240.91,682.773 1241.47,682.773 1242.03,682.773 1242.59,682.773 1243.15,682.773 1243.71,682.773 1244.26,682.773 1244.82,682.773 1245.38,682.773 1245.94,682.773 1246.5,682.773 1247.06,682.773 1247.62,682.773 1248.18,682.773 1248.74,682.773 1249.3,682.773 1249.86,682.773 1250.42,682.773 1250.98,682.773 1251.54,682.773 1252.09,682.773 1252.65,682.773 1253.21,682.773 1253.77,682.773 1254.33,682.773 1254.89,682.773 1255.45,682.773 1256.01,682.773 1256.57,682.773 1257.13,682.773 1257.69,682.773 1258.25,682.773 1258.81,682.773 1259.36,682.773 1259.92,682.773 1260.48,682.773 1261.04,682.773 1261.6,682.773 1262.16,682.773 1262.72,682.773 1263.28,682.773 1263.84,682.773 1264.4,682.773 1264.96,682.773 1265.52,682.773 1266.08,682.773 1266.63,682.773 1267.19,682.773 1267.75,682.773 1268.31,682.773 1268.87,682.773 1269.43,682.773 1269.99,682.773 1270.55,682.773 1271.11,682.773 1271.67,682.773 1272.23,682.773 1272.79,682.773 1273.35,682.773 1273.91,682.773 1274.46,682.773 1275.02,682.773 1275.58,682.773 1276.14,682.773 1276.7,682.773 1277.26,682.773 1277.82,682.773 1278.38,682.773 1278.94,682.773 1279.5,682.773 1280.06,682.773 1280.62,682.773 1281.18,682.773 1281.73,682.773 1282.29,682.773 1282.85,682.773 1283.41,682.773 1283.97,682.773 1284.53,682.773 1285.09,682.773 1285.65,682.773 1286.21,682.773 1286.77,682.773 1287.33,682.773 1287.89,682.773 1288.45,682.773 1289,682.773 1289.56,682.773 1290.12,682.773 1290.68,682.773 1291.24,682.773 1291.8,682.773 1292.36,682.773 1292.92,682.773 1293.48,682.773 1294.04,682.773 1294.6,682.773 1295.16,682.773 1295.72,682.773 1296.28,682.773 1296.83,682.773 1297.39,682.773 1297.95,682.773 1298.51,682.773 1299.07,682.773 1299.63,682.773 1300.19,682.773 1300.75,682.773 1301.31,682.773 1301.87,682.773 1302.43,682.773 1302.99,682.773 1303.55,682.773 1304.1,682.773 1304.66,682.773 1305.22,682.773 1305.78,682.773 1306.34,682.773 1306.9,682.773 1307.46,682.773 1308.02,682.773 1308.58,682.773 1309.14,682.773 1309.7,682.773 1310.26,682.773 1310.82,682.773 1311.38,682.773 1311.93,682.773 1312.49,682.773 1313.05,682.773 1313.61,682.773 1314.17,682.773 1314.73,682.773 1315.29,682.773 1315.85,682.773 1316.41,682.773 1316.97,682.773 1317.53,682.773 1318.09,682.773 1318.65,682.773 1319.2,682.773 1319.76,682.773 1320.32,682.773 1320.88,682.773 1321.44,682.773 1322,682.773 1322.56,682.773 1323.12,682.773 1323.68,682.773 1324.24,682.773 1324.8,682.773 1325.36,682.773 1325.92,682.773 1326.47,682.773 1327.03,682.773 1327.59,682.773 1328.15,682.773 1328.71,682.773 1329.27,682.773 1329.83,682.773 1330.39,682.773 1330.95,682.773 1331.51,682.773 1332.07,682.773 1332.63,682.773 1333.19,682.773 1333.75,682.773 1334.3,682.773 1334.86,682.773 1335.42,682.773 1335.98,682.773 1336.54,682.773 1337.1,682.773 1337.66,682.773 1338.22,682.773 1338.78,682.773 1339.34,682.773 1339.9,682.773 1340.46,682.773 1341.02,682.773 1341.57,682.773 1342.13,682.773 1342.69,682.773 1343.25,682.773 1343.81,682.773 1344.37,682.773 1344.93,682.773 1345.49,682.773 1346.05,682.773 1346.61,682.773 1347.17,682.773 1347.73,682.773 1348.29,682.773 1348.84,682.773 1349.4,682.773 1349.96,682.773 1350.52,682.773 1351.08,682.773 1351.64,682.773 1352.2,682.773 1352.76,682.773 1353.32,682.773 1353.88,682.773 1354.44,682.773 1355,682.773 1355.56,682.773 1356.12,682.773 1356.67,682.773 1357.23,682.773 1357.79,682.773 1358.35,682.773 1358.91,682.773 1359.47,682.773 1360.03,682.773 1360.59,682.773 1361.15,682.773 1361.71,682.773 1362.27,682.773 1362.83,682.773 1363.39,682.773 1363.94,682.773 1364.5,682.773 1365.06,682.773 1365.62,682.773 1366.18,682.773 1366.74,682.773 1367.3,682.773 1367.86,682.773 1368.42,682.773 1368.98,682.773 1369.54,682.773 1370.1,682.773 1370.66,682.773 1371.21,682.773 1371.77,682.773 1372.33,682.773 1372.89,682.773 1373.45,682.773 1374.01,682.773 1374.57,682.773 1375.13,682.773 1375.69,682.773 1376.25,682.773 1376.81,682.773 1377.37,682.773 1377.93,682.773 1378.49,682.773 1379.04,682.773 1379.6,682.773 1380.16,682.773 1380.72,682.773 1381.28,682.773 1381.84,682.773 1382.4,682.773 1382.96,682.773 1383.52,682.773 1384.08,682.773 1384.64,682.773 1385.2,682.773 1385.76,682.773 1386.31,682.773 1386.87,682.773 1387.43,682.773 1387.99,682.773 1388.55,682.773 1389.11,682.773 1389.67,682.773 1390.23,682.773 1390.79,682.773 1391.35,682.773 1391.91,682.773 1392.47,682.773 1393.03,682.773 1393.58,682.773 1394.14,682.773 1394.7,682.773 1395.26,682.773 1395.82,682.773 1396.38,682.773 1396.94,682.773 1397.5,682.773 1398.06,682.773 1398.62,682.773 1399.18,682.773 1399.74,682.773 1400.3,682.773 1400.86,682.773 1401.41,682.773 1401.97,682.773 1402.53,682.773 1403.09,682.773 1403.65,682.773 1404.21,682.773 1404.77,682.773 1405.33,682.773 1405.89,682.773 1406.45,682.773 1407.01,682.773 1407.57,682.773 1408.13,682.773 1408.68,682.773 1409.24,682.773 1409.8,682.773 1410.36,682.773 1410.92,682.773 1411.48,682.773 1412.04,682.773 1412.6,682.773 1413.16,682.773 1413.72,682.773 1414.28,682.773 1414.84,682.773 1415.4,682.773 1415.95,682.773 1416.51,682.773 1417.07,682.773 1417.63,682.773 1418.19,682.773 1418.75,682.773 1419.31,682.773 1419.87,682.773 1420.43,682.773 1420.99,682.773 1421.55,682.773 1422.11,682.773 1422.67,682.773 1423.23,682.773 1423.78,682.773 1424.34,682.773 1424.9,682.773 1425.46,682.773 1426.02,682.773 1426.58,682.773 1427.14,682.773 1427.7,682.773 1428.26,682.773 1428.82,682.773 1429.38,682.773 1429.94,682.773 1430.5,682.773 1431.05,682.773 1431.61,682.773 1432.17,682.773 1432.73,682.773 1433.29,682.773 1433.85,682.773 1434.41,682.773 1434.97,682.773 1435.53,682.773 1436.09,682.773 1436.65,682.773 1437.21,682.773 1437.77,682.773 1438.33,682.773 1438.88,682.773 1439.44,682.773 1440,682.773 1440.56,682.773 1441.12,682.773 1441.68,682.773 1442.24,682.773 1442.8,682.773 1443.36,682.773 1443.92,682.773 1444.48,682.773 1445.04,682.773 1445.6,682.773 1446.15,682.773 1446.71,682.773 1447.27,682.773 1447.83,682.773 1448.39,682.773 1448.95,682.773 1449.51,682.773 1450.07,682.773 1450.63,682.773 1451.19,682.773 1451.75,682.773 1452.31,682.773 1452.87,682.773 1453.42,682.773 1453.98,682.773 1454.54,682.773 1455.1,682.773 1455.66,682.773 1456.22,682.773 1456.78,682.773 1457.34,682.773 1457.9,682.773 1458.46,682.773 1459.02,682.773 1459.58,682.773 1460.14,682.773 1460.7,682.773 1461.25,682.773 1461.81,682.773 1462.37,682.773 1462.93,682.773 1463.49,682.773 1464.05,682.773 1464.61,682.773 1465.17,682.773 1465.73,682.773 1466.29,682.773 1466.85,682.773 1467.41,682.773 1467.97,682.773 1468.52,682.773 1469.08,682.773 1469.64,682.773 1470.2,682.773 1470.76,682.773 1471.32,682.773 1471.88,682.773 1472.44,682.773 1473,682.773 1473.56,682.773 1474.12,682.773 1474.68,682.773 1475.24,682.773 1475.79,682.773 1476.35,682.773 1476.91,682.773 1477.47,682.773 1478.03,682.773 1478.59,682.773 1479.15,682.773 1479.71,682.773 1480.27,682.773 1480.83,682.773 1481.39,682.773 1481.95,682.773 1482.51,682.773 1483.07,682.773 1483.62,682.773 1484.18,682.773 1484.74,682.773 1485.3,682.773 1485.86,682.773 1486.42,682.773 1486.98,682.773 1487.54,682.773 1488.1,682.773 1488.66,682.773 1489.22,682.773 1489.78,682.773 1490.34,682.773 1490.89,682.773 1491.45,682.773 1492.01,682.773 1492.57,682.773 1493.13,682.773 1493.69,682.773 1494.25,682.773 1494.81,682.773 1495.37,682.773 1495.93,682.773 1496.49,682.773 1497.05,682.773 1497.61,682.773 1498.16,682.773 1498.72,682.773 1499.28,682.773 1499.84,682.773 1500.4,682.773 1500.96,682.773 1501.52,682.773 1502.08,682.773 1502.64,682.773 1503.2,682.773 1503.76,682.773 1504.32,682.773 1504.88,682.773 1505.44,682.773 1505.99,682.773 1506.55,682.773 1507.11,682.773 1507.67,682.773 1508.23,682.773 1508.79,682.773 1509.35,682.773 1509.91,682.773 1510.47,682.773 1511.03,682.773 1511.59,682.773 1512.15,682.773 1512.71,682.773 1513.26,682.773 1513.82,682.773 1514.38,682.773 1514.94,682.773 1515.5,682.773 1516.06,682.773 1516.62,682.773 1517.18,682.773 1517.74,682.773 1518.3,682.773 1518.86,682.773 1519.42,682.773 1519.98,682.773 1520.53,682.773 1521.09,682.773 1521.65,682.773 1522.21,682.773 1522.77,682.773 1523.33,682.773 1523.89,682.773 1524.45,682.773 1525.01,682.773 1525.57,682.773 1526.13,682.773 1526.69,682.773 1527.25,682.773 1527.81,682.773 1528.36,682.773 1528.92,682.773 1529.48,682.773 1530.04,682.773 1530.6,682.773 1531.16,682.773 1531.72,682.773 1532.28,682.773 1532.84,682.773 1533.4,682.773 1533.96,682.773 1534.52,682.773 1535.08,682.773 1535.63,682.773 1536.19,682.773 1536.75,682.773 1537.31,682.773 1537.87,682.773 1538.43,682.773 1538.99,682.773 1539.55,682.773 1540.11,682.773 1540.67,682.773 1541.23,682.773 1541.79,682.773 1542.35,682.773 1542.9,682.773 1543.46,682.773 1544.02,682.773 1544.58,682.773 1545.14,682.773 1545.7,682.773 1546.26,682.773 1546.82,682.773 1547.38,682.773 1547.94,682.773 1548.5,682.773 1549.06,682.773 1549.62,682.773 1550.18,682.773 1550.73,682.773 1551.29,682.773 1551.85,682.773 1552.41,682.773 1552.97,682.773 1553.53,682.773 1554.09,682.773 1554.65,682.773 1555.21,682.773 1555.77,682.773 1556.33,682.773 1556.89,682.773 1557.45,682.773 1558,682.773 1558.56,682.773 1559.12,682.773 1559.68,682.773 1560.24,682.773 1560.8,682.773 1561.36,682.773 1561.92,682.773 1562.48,682.773 1563.04,682.773 1563.6,682.773 1564.16,682.773 1564.72,682.773 1565.28,682.773 1565.83,682.773 1566.39,682.773 1566.95,682.773 1567.51,682.773 1568.07,682.773 1568.63,682.773 1569.19,682.773 1569.75,682.773 1570.31,682.773 1570.87,682.773 1571.43,682.773 1571.99,682.773 1572.55,682.773 1573.1,682.773 1573.66,682.773 1574.22,682.773 1574.78,682.773 1575.34,682.773 1575.9,682.773 1576.46,682.773 1577.02,682.773 1577.58,682.773 1578.14,682.773 1578.7,682.773 1579.26,682.773 1579.82,682.773 1580.37,682.773 1580.93,682.773 1581.49,682.773 1582.05,682.773 1582.61,682.773 1583.17,682.773 1583.73,682.773 1584.29,682.773 1584.85,682.773 1585.41,682.773 1585.97,682.773 1586.53,682.773 1587.09,682.773 1587.65,682.773 1588.2,682.773 1588.76,682.773 1589.32,682.773 1589.88,682.773 1590.44,682.773 1591,682.773 1591.56,682.773 1592.12,682.773 1592.68,682.773 1593.24,682.773 1593.8,682.773 1594.36,682.773 1594.92,682.773 1595.47,682.773 1596.03,682.773 1596.59,682.773 1597.15,682.773 1597.71,682.773 1598.27,682.773 1598.83,682.773 1599.39,682.773 1599.95,682.773 1600.51,682.773 1601.07,682.773 1601.63,682.773 1602.19,682.773 1602.74,682.773 1603.3,682.773 1603.86,682.773 1604.42,682.773 1604.98,682.773 1605.54,682.773 1606.1,682.773 1606.66,682.773 1607.22,682.773 1607.78,682.773 1608.34,682.773 1608.9,682.773 1609.46,682.773 1610.02,682.773 1610.57,682.773 1611.13,682.773 1611.69,682.773 1612.25,682.773 1612.81,682.773 1613.37,682.773 1613.93,682.773 1614.49,682.773 1615.05,682.773 1615.61,682.773 1616.17,682.773 1616.73,682.773 1617.29,682.773 1617.84,682.773 1618.4,682.773 1618.96,682.773 1619.52,682.773 1620.08,682.773 1620.64,682.773 1621.2,682.773 1621.76,682.773 1622.32,682.773 1622.88,682.773 1623.44,682.773 1624,682.773 1624.56,682.773 1625.11,682.773 1625.67,682.773 1626.23,682.773 1626.79,682.773 1627.35,682.773 1627.91,682.773 1628.47,682.773 1629.03,682.773 1629.59,682.773 1630.15,682.773 1630.71,682.773 1631.27,682.773 1631.83,682.773 1632.39,682.773 1632.94,682.773 1633.5,682.773 1634.06,682.773 1634.62,682.773 1635.18,682.773 1635.74,682.773 1636.3,682.773 1636.86,682.773 1637.42,682.773 1637.98,682.773 1638.54,682.773 1639.1,682.773 1639.66,682.773 1640.21,682.773 1640.77,682.773 1641.33,682.773 1641.89,682.773 1642.45,682.773 1643.01,682.773 1643.57,682.773 1644.13,682.773 1644.69,682.773 1645.25,682.773 1645.81,682.773 1646.37,682.773 1646.93,682.773 1647.48,682.773 1648.04,682.773 1648.6,682.773 1649.16,682.773 1649.72,682.773 1650.28,682.773 1650.84,682.773 1651.4,682.773 1651.96,682.773 1652.52,682.773 1653.08,682.773 1653.64,682.773 1654.2,682.773 1654.76,682.773 1655.31,682.773 1655.87,682.773 1656.43,682.773 1656.99,682.773 1657.55,682.773 1658.11,682.773 1658.67,682.773 1659.23,682.773 1659.79,682.773 1660.35,682.773 1660.91,682.773 1661.47,682.773 1662.03,682.773 1662.58,682.773 1663.14,682.773 1663.7,682.773 1664.26,682.773 1664.82,682.773 1665.38,682.773 1665.94,682.773 1666.5,682.773 1667.06,682.773 1667.62,682.773 1668.18,682.773 1668.74,682.773 1669.3,682.773 1669.85,682.773 1670.41,682.773 1670.97,682.773 1671.53,682.773 1672.09,682.773 1672.65,682.773 1673.21,682.773 1673.77,682.773 1674.33,682.773 1674.89,682.773 1675.45,682.773 1676.01,682.773 1676.57,682.773 1677.13,682.773 1677.68,682.773 1678.24,682.773 1678.8,682.773 1679.36,682.773 1679.92,682.773 1680.48,682.773 1681.04,682.773 1681.6,682.773 1682.16,682.773 1682.72,682.773 1683.28,682.773 1683.84,682.773 1684.4,682.773 1684.95,682.773 1685.51,682.773 1686.07,682.773 1686.63,682.773 1687.19,682.773 1687.75,682.773 1688.31,682.773 1688.87,682.773 1689.43,682.773 1689.99,682.773 1690.55,682.773 1691.11,682.773 1691.67,682.773 1692.23,682.773 1692.78,682.773 1693.34,682.773 1693.9,682.773 1694.46,682.773 1695.02,682.773 1695.58,682.773 1696.14,682.773 1696.7,682.773 1697.26,682.773 1697.82,682.773 1698.38,682.773 1698.94,682.773 1699.5,682.773 1700.05,682.773 1700.61,682.773 1701.17,682.773 1701.73,682.773 1702.29,682.773 1702.85,682.773 1703.41,682.773 1703.97,682.773 1704.53,682.773 1705.09,682.773 1705.65,682.773 1706.21,682.773 1706.77,682.773 1707.32,682.773 1707.88,682.773 1708.44,682.773 1709,682.773 1709.56,682.773 1710.12,682.773 1710.68,682.773 1711.24,682.773 1711.8,682.773 1712.36,682.773 1712.92,682.773 1713.48,682.773 1714.04,682.773 1714.6,682.773 1715.15,682.773 1715.71,682.773 1716.27,682.773 1716.83,682.773 1717.39,682.773 1717.95,682.773 1718.51,682.773 1719.07,682.773 1719.63,682.773 1720.19,682.773 1720.75,682.773 1721.31,682.773 1721.87,682.773 1722.42,682.773 1722.98,682.773 1723.54,682.773 1724.1,682.773 1724.66,682.773 1725.22,682.773 1725.78,682.773 1726.34,682.773 1726.9,682.773 1727.46,682.773 1728.02,682.773 1728.58,682.773 1729.14,682.773 1729.69,682.773 1730.25,682.773 1730.81,682.773 1731.37,682.773 1731.93,682.773 1732.49,682.773 1733.05,682.773 1733.61,682.773 1734.17,682.773 1734.73,682.773 1735.29,682.773 1735.85,682.773 1736.41,682.773 1736.97,682.773 1737.52,682.773 1738.08,682.773 1738.64,682.773 1739.2,682.773 1739.76,682.773 1740.32,682.773 1740.88,682.773 1741.44,682.773 1742,682.773 1742.56,682.773 1743.12,682.773 1743.68,682.773 1744.24,682.773 1744.79,682.773 1745.35,682.773 1745.91,682.773 1746.47,682.773 1747.03,682.773 1747.59,682.773 1748.15,682.773 1748.71,682.773 1749.27,682.773 1749.83,682.773 1750.39,682.773 1750.95,682.773 1751.51,682.773 1752.06,682.773 1752.62,682.773 1753.18,682.773 1753.74,682.773 1754.3,682.773 1754.86,682.773 1755.42,682.773 1755.98,682.773 1756.54,682.773 1757.1,682.773 1757.66,682.773 1758.22,682.773 1758.78,682.773 1759.34,682.773 1759.89,682.773 1760.45,682.773 1761.01,682.773 1761.57,682.773 1762.13,682.773 1762.69,682.773 1763.25,682.773 1763.81,682.773 1764.37,682.773 1764.93,682.773 1765.49,682.773 1766.05,682.773 1766.61,682.773 1767.16,682.773 1767.72,682.773 1768.28,682.773 1768.84,682.773 1769.4,682.773 1769.96,682.773 1770.52,682.773 1771.08,682.773 1771.64,682.773 1772.2,682.773 1772.76,682.773 1773.32,682.773 1773.88,682.773 1774.43,682.773 1774.99,682.773 1775.55,682.773 1776.11,682.773 1776.67,682.773 1777.23,682.773 1777.79,682.773 1778.35,682.773 1778.91,682.773 1779.47,682.773 1780.03,682.773 1780.59,682.773 1781.15,682.773 1781.71,682.773 1782.26,682.773 1782.82,682.773 1783.38,682.773 1783.94,682.773 1784.5,682.773 1785.06,682.773 1785.62,682.773 1786.18,682.773 1786.74,682.773 1787.3,682.773 1787.86,682.773 1788.42,682.773 1788.98,682.773 1789.53,682.773 1790.09,682.773 1790.65,682.773 1791.21,682.773 1791.77,682.773 1792.33,682.773 1792.89,682.773 1793.45,682.773 1794.01,682.773 1794.57,682.773 1795.13,682.773 1795.69,682.773 1796.25,682.773 1796.8,682.773 1797.36,682.773 1797.92,682.773 1798.48,682.773 1799.04,682.773 1799.6,682.773 1800.16,682.773 1800.72,682.773 1801.28,682.773 1801.84,682.773 1802.4,682.773 1802.96,682.773 1803.52,682.773 1804.08,682.773 1804.63,682.773 1805.19,682.773 1805.75,682.773 1806.31,682.773 1806.87,682.773 1807.43,682.773 1807.99,682.773 1808.55,682.773 1809.11,682.773 1809.67,682.773 1810.23,682.773 1810.79,682.773 1811.35,682.773 1811.9,682.773 1812.46,682.773 1813.02,682.773 1813.58,682.773 1814.14,682.773 1814.7,682.773 1815.26,682.773 1815.82,682.773 1816.38,682.773 1816.94,682.773 1817.5,682.773 1818.06,682.773 1818.62,682.773 1819.18,682.773 1819.73,682.773 1820.29,682.773 1820.85,682.773 1821.41,682.773 1821.97,682.773 1822.53,682.773 1823.09,682.773 1823.65,682.773 1824.21,682.773 1824.77,682.773 1825.33,682.773 1825.89,682.773 1826.45,682.773 1827,682.773 1827.56,682.773 1828.12,682.773 1828.68,682.773 1829.24,682.773 1829.8,682.773 1830.36,682.773 1830.92,682.773 1831.48,682.773 1832.04,682.773 1832.6,682.773 1833.16,682.773 1833.72,682.773 1834.27,682.773 1834.83,682.773 1835.39,682.773 1835.95,682.773 1836.51,682.773 1837.07,682.773 1837.63,682.773 1838.19,682.773 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.026367426833872 ± 0.021974944875414626\nProjected Energy: -4.0109982857477355 ± (0.0066275717783037535, 0.0066774308823518425)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\ntime_step = determine_constant_time_step(df) the time step\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\ntime_step = determine_constant_time_step(df) the time step\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.12538</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.6679e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.4205e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">2.0819e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.747e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">6.742e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.4387e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.3631242916133672\n -0.7590191922770941\n  0.13584182219622676\n  0.15789998694608265\n  0.8767114411781343\n  1.5305929970973216\n  1.583573261186742\n  3.0728703303258564\n  3.1256726539518445\n  4.862107221562176\n  6.260694850380599\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087834\n 0.03307039977204201\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\nRimuIO.save_state(filename, vector; metadata...) Save a vector and optinal metadata in Arrow format.\nRimuIO.load_state(filename) Load a file created through by save_state.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.DVecAsTable","page":"I/O","title":"Rimu.RimuIO.DVecAsTable","text":"struct DVecAsTable\n\nWrapper over the storage of a DVec that allows us to treat a DVec as a table from Tables.jl. Constructed with Tables.table(::DVec).\n\n\n\n\n\n","category":"type"},{"location":"rimuio.html#Rimu.RimuIO.PDVecAsTable","page":"I/O","title":"Rimu.RimuIO.PDVecAsTable","text":"struct PDVecAsTable\n\nWrapper over the storage of a PDVec that allows us to treat a PDVec as a table from Tables.jl. Constructed with Tables.table(::PDVec).\n\n\n\n\n\n","category":"type"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.load_state-Union{Tuple{D}, Tuple{Type{D}, Any}} where D","page":"I/O","title":"Rimu.RimuIO.load_state","text":"load_state(filename; kwargs...) -> PDVec, NamedTuple\nload_state(PDVec, filename; kwargs...) -> PDVec, NamedTuple\nload_state(DVec, filename; kwargs...) -> DVec, NamedTuple\n\nLoad the state saved in the Arrow file filename. kwargs are passed to the constructor of PDVec/DVec. Any metadata stored in the file is be parsed as a number (if possible) and returned alongside the vector in a NamedTuple.\n\nSee also save_state.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_state-Tuple{Any, Any}","page":"I/O","title":"Rimu.RimuIO.save_state","text":"save_state(filename, vector; io, kwargs...)\n\nSave PDVec or DVec vector to an arrow file filename.\n\nio determines the output stream to write progress to. Defaults to stderr when MPI is enabled and devnull otherwise.\n\nAll other kwargs are saved as strings to the arrow file and will be parsed back when the state is loaded.\n\nSee also load_state.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates. Indexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nFields\n\nspectral_states: Tuple of SpectralStates\nmax_length::Ref{Int}: Maximum length of the simulation\nstep::Ref{Int}: Current step of the simulation\nsimulation_plan: Simulation plan\nreporting_strategy: Reporting strategy\npost_step_strategy: Post-step strategy\nreplica_strategy: Replica strategy\n\nSee also ReplicaStrategy, Rimu.SpectralState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy for ProjectorMonteCarloProblem. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\nSee also ProjectorMonteCarloProblem, ReportToFile.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy for ProjectorMonteCarloProblem that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df, save_df, ReportDFAndInfo, and ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data during a simulation of a ProjectorMonteCarloProblem.\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nExtended help\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nRimu.refine_reporting_strategy\nRimu.report!\nRimu.report_after_step!\nRimu.finalize_report!\nRimu.reporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with Rimu.advance!.\n\nFields\n\nhamiltonian: Hamiltonian\nalgorithm: Algorithm\nv: Vector\npv: Previous vector\nwm: Working memory\nshift_parameters: Shift parameters\nid::String: id is appended to column names\n\nSee also SpectralStrategy, ReplicaStrategy, Rimu.SpectralState, Rimu.ReplicaState, Rimu.replica_stats, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several Rimu.SingleStates representing the ground state and excited states of a single replica. Indexing the SpectralState state[i] returns the ith SingleState.\n\nFields\n\nsingle_states: Tuple of SingleStates\nspectral_strategy: Strategy for computing the spectral states\nid::String: Identifies the replica\n\nSee also SpectralStrategy, Rimu.ReplicaState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after Rimu.reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an r×s AbstractMatrix of configuration vectors from the state, or the result of solve(::ProjectorMonteCarloProblem). The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also ProjectorMonteCarloProblem, Rimu.PMCSimulation, Rimu.SingleState, Rimu.ReplicaState, Rimu.SpectralState.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
