var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21353690363089603 ± 0.001133156449139742\n   G2(1) = 0.9147066636626142 ± 0.0007267000595072234\n   G2(2) = 0.9828142397777044 ± 0.0007093565772128698\n   G2(3) = 0.9914212894884668 ± 0.0010421522066160426\n   G2(4) = 0.9828142397777044 ± 0.0007093565772128698\n   G2(5) = 0.9147066636626142 ± 0.0007267000595072234\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.033313647271046 ± 0.12579334359481822\n   Replica 2: -4.1294769109761695 ± 0.13844245783833956\n   Replica 3: -4.126597294801979 ± 0.1417151911059999\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip100\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip100)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip101\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip100)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip102\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.12 2211.02,1003.12 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.401 2211.02,745.401 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.683 2211.02,487.683 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.965 2211.02,229.965 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.12 423.181,1003.12 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.401 423.181,745.401 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.683 423.181,487.683 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.965 423.181,229.965 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M290.043 1016.46 L306.363 1016.46 L306.363 1020.4 L284.418 1020.4 L284.418 1016.46 Q287.08 1013.71 291.664 1009.08 Q296.27 1004.43 297.451 1003.08 Q299.696 1000.56 300.576 998.825 Q301.478 997.066 301.478 995.376 Q301.478 992.622 299.534 990.886 Q297.613 989.149 294.511 989.149 Q292.312 989.149 289.858 989.913 Q287.427 990.677 284.65 992.228 L284.65 987.506 Q287.474 986.372 289.927 985.793 Q292.381 985.214 294.418 985.214 Q299.789 985.214 302.983 987.899 Q306.177 990.585 306.177 995.075 Q306.177 997.205 305.367 999.126 Q304.58 1001.02 302.474 1003.62 Q301.895 1004.29 298.793 1007.51 Q295.691 1010.7 290.043 1016.46 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M316.224 985.839 L334.58 985.839 L334.58 989.774 L320.506 989.774 L320.506 998.247 Q321.524 997.899 322.543 997.737 Q323.562 997.552 324.58 997.552 Q330.367 997.552 333.747 1000.72 Q337.126 1003.89 337.126 1009.31 Q337.126 1014.89 333.654 1017.99 Q330.182 1021.07 323.862 1021.07 Q321.687 1021.07 319.418 1020.7 Q317.173 1020.33 314.765 1019.59 L314.765 1014.89 Q316.849 1016.02 319.071 1016.58 Q321.293 1017.14 323.77 1017.14 Q327.774 1017.14 330.112 1015.03 Q332.45 1012.92 332.45 1009.31 Q332.45 1005.7 330.112 1003.59 Q327.774 1001.49 323.77 1001.49 Q321.895 1001.49 320.02 1001.9 Q318.168 1002.32 316.224 1003.2 L316.224 985.839 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M356.339 988.918 Q352.728 988.918 350.899 992.483 Q349.094 996.024 349.094 1003.15 Q349.094 1010.26 350.899 1013.83 Q352.728 1017.37 356.339 1017.37 Q359.973 1017.37 361.779 1013.83 Q363.608 1010.26 363.608 1003.15 Q363.608 996.024 361.779 992.483 Q359.973 988.918 356.339 988.918 M356.339 985.214 Q362.149 985.214 365.205 989.821 Q368.284 994.404 368.284 1003.15 Q368.284 1011.88 365.205 1016.49 Q362.149 1021.07 356.339 1021.07 Q350.529 1021.07 347.45 1016.49 Q344.395 1011.88 344.395 1003.15 Q344.395 994.404 347.45 989.821 Q350.529 985.214 356.339 985.214 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M286.062 728.121 L304.418 728.121 L304.418 732.056 L290.344 732.056 L290.344 740.529 Q291.363 740.181 292.381 740.019 Q293.4 739.834 294.418 739.834 Q300.205 739.834 303.585 743.005 Q306.964 746.177 306.964 751.593 Q306.964 757.172 303.492 760.274 Q300.02 763.352 293.701 763.352 Q291.525 763.352 289.256 762.982 Q287.011 762.612 284.603 761.871 L284.603 757.172 Q286.687 758.306 288.909 758.862 Q291.131 759.417 293.608 759.417 Q297.613 759.417 299.951 757.311 Q302.288 755.204 302.288 751.593 Q302.288 747.982 299.951 745.876 Q297.613 743.769 293.608 743.769 Q291.733 743.769 289.858 744.186 Q288.006 744.603 286.062 745.482 L286.062 728.121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M326.177 731.2 Q322.566 731.2 320.737 734.765 Q318.932 738.306 318.932 745.436 Q318.932 752.542 320.737 756.107 Q322.566 759.649 326.177 759.649 Q329.811 759.649 331.617 756.107 Q333.446 752.542 333.446 745.436 Q333.446 738.306 331.617 734.765 Q329.811 731.2 326.177 731.2 M326.177 727.496 Q331.987 727.496 335.043 732.103 Q338.122 736.686 338.122 745.436 Q338.122 754.163 335.043 758.769 Q331.987 763.352 326.177 763.352 Q320.367 763.352 317.288 758.769 Q314.233 754.163 314.233 745.436 Q314.233 736.686 317.288 732.103 Q320.367 727.496 326.177 727.496 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M356.339 731.2 Q352.728 731.2 350.899 734.765 Q349.094 738.306 349.094 745.436 Q349.094 752.542 350.899 756.107 Q352.728 759.649 356.339 759.649 Q359.973 759.649 361.779 756.107 Q363.608 752.542 363.608 745.436 Q363.608 738.306 361.779 734.765 Q359.973 731.2 356.339 731.2 M356.339 727.496 Q362.149 727.496 365.205 732.103 Q368.284 736.686 368.284 745.436 Q368.284 754.163 365.205 758.769 Q362.149 763.352 356.339 763.352 Q350.529 763.352 347.45 758.769 Q344.395 754.163 344.395 745.436 Q344.395 736.686 347.45 732.103 Q350.529 727.496 356.339 727.496 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M284.835 470.403 L307.057 470.403 L307.057 472.394 L294.511 504.963 L289.627 504.963 L301.432 474.338 L284.835 474.338 L284.835 470.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M316.224 470.403 L334.58 470.403 L334.58 474.338 L320.506 474.338 L320.506 482.81 Q321.524 482.463 322.543 482.301 Q323.562 482.116 324.58 482.116 Q330.367 482.116 333.747 485.287 Q337.126 488.459 337.126 493.875 Q337.126 499.454 333.654 502.556 Q330.182 505.634 323.862 505.634 Q321.687 505.634 319.418 505.264 Q317.173 504.894 314.765 504.153 L314.765 499.454 Q316.849 500.588 319.071 501.144 Q321.293 501.699 323.77 501.699 Q327.774 501.699 330.112 499.593 Q332.45 497.486 332.45 493.875 Q332.45 490.264 330.112 488.158 Q327.774 486.051 323.77 486.051 Q321.895 486.051 320.02 486.468 Q318.168 486.885 316.224 487.764 L316.224 470.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M356.339 473.482 Q352.728 473.482 350.899 477.047 Q349.094 480.588 349.094 487.718 Q349.094 494.824 350.899 498.389 Q352.728 501.931 356.339 501.931 Q359.973 501.931 361.779 498.389 Q363.608 494.824 363.608 487.718 Q363.608 480.588 361.779 477.047 Q359.973 473.482 356.339 473.482 M356.339 469.778 Q362.149 469.778 365.205 474.385 Q368.284 478.968 368.284 487.718 Q368.284 496.445 365.205 501.051 Q362.149 505.634 356.339 505.634 Q350.529 505.634 347.45 501.051 Q344.395 496.445 344.395 487.718 Q344.395 478.968 347.45 474.385 Q350.529 469.778 356.339 469.778 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M256.664 243.31 L264.303 243.31 L264.303 216.944 L255.992 218.611 L255.992 214.352 L264.256 212.685 L268.932 212.685 L268.932 243.31 L276.571 243.31 L276.571 247.245 L256.664 247.245 L256.664 243.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M296.015 215.764 Q292.404 215.764 290.576 219.329 Q288.77 222.87 288.77 230 Q288.77 237.106 290.576 240.671 Q292.404 244.213 296.015 244.213 Q299.65 244.213 301.455 240.671 Q303.284 237.106 303.284 230 Q303.284 222.87 301.455 219.329 Q299.65 215.764 296.015 215.764 M296.015 212.06 Q301.826 212.06 304.881 216.667 Q307.96 221.25 307.96 230 Q307.96 238.727 304.881 243.333 Q301.826 247.916 296.015 247.916 Q290.205 247.916 287.127 243.333 Q284.071 238.727 284.071 230 Q284.071 221.25 287.127 216.667 Q290.205 212.06 296.015 212.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M326.177 215.764 Q322.566 215.764 320.737 219.329 Q318.932 222.87 318.932 230 Q318.932 237.106 320.737 240.671 Q322.566 244.213 326.177 244.213 Q329.811 244.213 331.617 240.671 Q333.446 237.106 333.446 230 Q333.446 222.87 331.617 219.329 Q329.811 215.764 326.177 215.764 M326.177 212.06 Q331.987 212.06 335.043 216.667 Q338.122 221.25 338.122 230 Q338.122 238.727 335.043 243.333 Q331.987 247.916 326.177 247.916 Q320.367 247.916 317.288 243.333 Q314.233 238.727 314.233 230 Q314.233 221.25 317.288 216.667 Q320.367 212.06 326.177 212.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M356.339 215.764 Q352.728 215.764 350.899 219.329 Q349.094 222.87 349.094 230 Q349.094 237.106 350.899 240.671 Q352.728 244.213 356.339 244.213 Q359.973 244.213 361.779 240.671 Q363.608 237.106 363.608 230 Q363.608 222.87 361.779 219.329 Q359.973 215.764 356.339 215.764 M356.339 212.06 Q362.149 212.06 365.205 216.667 Q368.284 221.25 368.284 230 Q368.284 238.727 365.205 243.333 Q362.149 247.916 356.339 247.916 Q350.529 247.916 347.45 243.333 Q344.395 238.727 344.395 230 Q344.395 221.25 347.45 216.667 Q350.529 212.06 356.339 212.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip102)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.965 4017.76,229.965 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.32 457.123,1249.18 457.691,1248.91 458.259,1248.63 458.828,1248.25 459.396,1247.78 459.964,1247.27 460.533,1245.61 461.101,1245.02 461.669,1244.34 462.238,1243.57 462.806,1242.72 463.375,1240.73 463.943,1238.69 464.511,1236.56 465.08,1234.31 465.648,1233.01 466.216,1230.58 466.785,1228.04 467.353,1226.41 467.921,1224.63 468.49,1221.64 469.058,1219.56 469.626,1216.35 470.195,1213.93 470.763,1211.4 471.331,1207.69 471.9,1204.84 472.468,1201.82 473.036,1198.61 473.605,1194.11 474.173,1190.53 474.741,1186.72 475.31,1182.77 475.878,1178.55 476.446,1173.09 477.015,1168.58 477.583,1163.78 478.152,1158.8 478.72,1152.55 479.288,1147.09 479.857,1140.38 480.425,1134.55 480.993,1126.43 481.562,1118.12 482.13,1109.67 482.698,1102.22 483.267,1094.44 483.835,1087.49 484.403,1078.23 484.972,1070.81 485.54,1063.33 486.108,1055.53 486.677,1046.53 487.245,1036.21 487.813,1028.12 488.382,1017.68 488.95,1007.13 489.518,995.306 490.087,983.518 490.655,974.82 491.224,964.717 491.792,954.809 492.36,944.678 492.929,934.5 493.497,925.21 494.065,915.83 494.634,904.377 495.202,894.041 495.77,880.441 496.339,870.184 496.907,859.781 497.475,846.502 498.044,835.132 498.612,824.951 499.18,814.762 499.749,803.506 500.317,793.311 500.885,783.03 501.454,772.989 502.022,761.964 502.59,751.056 503.159,742.243 503.727,729.297 504.295,718.514 504.864,705.957 505.432,697.652 506.001,688.263 506.569,678.989 507.137,670.88 507.706,660.77 508.274,652.92 508.842,644.015 509.411,635.217 509.979,627.604 510.547,618.861 511.116,610.272 511.684,603.792 512.252,596.343 512.821,586.793 513.389,575.614 513.957,569.793 514.526,559.882 515.094,553.208 515.662,544.507 516.231,536 516.799,528.82 517.367,523.824 517.936,517.837 518.504,512.762 519.072,505.621 519.641,496.714 520.209,490.177 520.778,482.717 521.346,476.457 521.914,469.346 522.483,462.283 523.051,457.467 523.619,451.815 524.188,446.204 524.756,439.617 525.324,431.211 525.893,425.072 526.461,418.153 527.029,413.343 527.598,410.958 528.166,407.365 528.734,401.771 529.303,399.419 529.871,394.857 530.439,391.557 531.008,387.39 531.576,384.191 532.144,381.975 532.713,376.816 533.281,371.802 533.85,368.919 534.418,363.856 534.986,360.209 535.555,357.86 536.123,354.376 536.691,351.1 537.26,348.794 537.828,344.282 538.396,341.222 538.965,338.179 539.533,335.307 540.101,331.51 540.67,329.891 541.238,327.088 541.806,325.225 542.375,323.673 542.943,320.109 543.511,317.42 544.08,316.101 544.648,314.764 545.216,313.278 545.785,309.747 546.353,309.683 546.921,308.421 547.49,306.216 548.058,304.04 548.627,300.697 549.195,296.634 549.763,294.61 550.332,295.906 550.9,295.106 551.468,293.414 552.037,291.609 552.605,291.721 553.173,289.674 553.742,284.546 554.31,282.151 554.878,281.854 555.447,281.459 556.015,279.8 556.583,277.294 557.152,278.124 557.72,277.715 558.288,277.476 558.857,276.059 559.425,274.527 559.993,273.383 560.562,273.994 561.13,274.455 561.698,274.183 562.267,274.877 562.835,273.141 563.404,272.742 563.972,274.205 564.54,272.425 565.109,271.686 565.677,269.982 566.245,268.55 566.814,268.285 567.382,267.011 567.95,266.446 568.519,266.891 569.087,265.155 569.655,260.689 570.224,260.621 570.792,264.533 571.36,262.993 571.929,262.587 572.497,261.127 573.065,261.775 573.634,261.196 574.202,260.67 574.77,258.101 575.339,256.839 575.907,256.643 576.476,255.473 577.044,255.508 577.612,256.355 578.181,256.243 578.749,254.987 579.317,255.781 579.886,256.492 580.454,256.111 581.022,254.817 581.591,254.346 582.159,254.064 582.727,250.705 583.296,250.842 583.864,249.738 584.432,250.66 585.001,248.582 585.569,246.787 586.137,245.989 586.706,241.947 587.274,240.58 587.842,237.808 588.411,241.495 588.979,240.062 589.547,241.48 590.116,239.739 590.684,242.457 591.253,242.786 591.821,241.919 592.389,243.239 592.958,243.485 593.526,244.851 594.094,243.723 594.663,244.87 595.231,244.889 595.799,246.024 596.368,243.895 596.936,243.077 597.504,241.201 598.073,242.431 598.641,242.798 599.209,244.096 599.778,243.215 600.346,243.414 600.914,242.577 601.483,241.78 602.051,242.034 602.619,243.253 603.188,244.5 603.756,242.391 604.325,241.404 604.893,241.437 605.461,241.429 606.03,240.487 606.598,240.84 607.166,239.949 607.735,236.889 608.303,234.155 608.871,233.644 609.44,234.097 610.008,232.557 610.576,232.353 611.145,233.185 611.713,235.93 612.281,238.542 612.85,238.97 613.418,239.249 613.986,240.46 614.555,241.767 615.123,240.848 615.691,242.15 616.26,241.1 616.828,242.23 617.396,239.271 617.965,239.522 618.533,238.611 619.102,239.085 619.67,237.291 620.238,236.557 620.807,236.89 621.375,238.207 621.943,236.338 622.512,236.594 623.08,237.064 623.648,236.307 624.217,236.551 624.785,235.949 625.353,236.365 625.922,234.67 626.49,231.083 627.058,234.967 627.627,235.509 628.195,234.894 628.763,234.257 629.332,233.486 629.9,232.954 630.468,235.456 631.037,235.617 631.605,237.257 632.173,237.231 632.742,235.535 633.31,236.089 633.879,237.248 634.447,237.62 635.015,239.861 635.584,237.74 636.152,236.714 636.72,235.854 637.289,234.17 637.857,234.535 638.425,236.014 638.994,237.355 639.562,237.512 640.13,237.629 640.699,239.661 641.267,240.548 641.835,239.432 642.404,239.53 642.972,240.809 643.54,242.79 644.109,242.353 644.677,241.044 645.245,240.744 645.814,241.779 646.382,242.751 646.951,239.389 647.519,238.316 648.087,237.165 648.656,238.093 649.224,236.941 649.792,234.865 650.361,233.833 650.929,235.007 651.497,234.215 652.066,235.292 652.634,234.113 653.202,235.149 653.771,236.213 654.339,237.297 654.907,235.075 655.476,235.246 656.044,234.554 656.612,234.782 657.181,234.906 657.749,234.038 658.317,233.355 658.886,232.828 659.454,233.282 660.022,232.553 660.591,232.929 661.159,234.188 661.728,234.244 662.296,234.461 662.864,234.777 663.433,233.889 664.001,235.909 664.569,235.95 665.138,236.058 665.706,236.122 666.274,235.075 666.843,236.337 667.411,236.291 667.979,236.133 668.548,233.987 669.116,232.944 669.684,233.231 670.253,234.547 670.821,236.71 671.389,236.923 671.958,235.615 672.526,232.59 673.094,231.774 673.663,230.049 674.231,228.297 674.799,229.615 675.368,227.962 675.936,229.54 676.505,228.114 677.073,229.922 677.641,232.783 678.21,233.031 678.778,233.135 679.346,232.359 679.915,229.618 680.483,231.054 681.051,230.342 681.62,228.737 682.188,229.098 682.756,230.703 683.325,232.223 683.893,232.642 684.461,233.923 685.03,234.205 685.598,235.409 686.166,235.655 686.735,233.68 687.303,233.925 687.871,233.994 688.44,237.127 689.008,238.07 689.577,236.909 690.145,235.831 690.713,236.877 691.282,235.48 691.85,236.298 692.418,235.241 692.987,235.374 693.555,233.512 694.123,233.537 694.692,232.343 695.26,232.504 695.828,231.833 696.397,230.274 696.965,229.585 697.533,230.967 698.102,232.235 698.67,232.206 699.238,230.41 699.807,232.784 700.375,232.01 700.943,232.522 701.512,234.914 702.08,233.772 702.648,235.017 703.217,235.977 703.785,235.818 704.354,238.823 704.922,238.499 705.49,239.458 706.059,237.057 706.627,239.026 707.195,239.733 707.764,237.163 708.332,239.052 708.9,237.713 709.469,237.487 710.037,238.124 710.605,238.893 711.174,238.572 711.742,234.121 712.31,235.263 712.879,236.049 713.447,235.81 714.015,235.649 714.584,235.657 715.152,239.407 715.72,240.078 716.289,239.622 716.857,239.163 717.425,238.73 717.994,236.231 718.562,235.893 719.131,236.711 719.699,236.661 720.267,236.23 720.836,236.745 721.404,234.419 721.972,233.311 722.541,231.2 723.109,231.34 723.677,230.526 724.246,229.353 724.814,229.647 725.382,230.632 725.951,231.813 726.519,231.79 727.087,232.782 727.656,232.848 728.224,230.857 728.792,230.063 729.361,231.124 729.929,231.104 730.497,232.293 731.066,229.086 731.634,229.366 732.203,229.521 732.771,228.474 733.339,226.808 733.908,228.178 734.476,228.608 735.044,231.171 735.613,232.474 736.181,229.267 736.749,231.442 737.318,232.761 737.886,232.759 738.454,232.726 739.023,233.502 739.591,234.648 740.159,234.333 740.728,232.289 741.296,232.171 741.864,233.084 742.433,233.002 743.001,231.914 743.569,232.831 744.138,232.679 744.706,230.616 745.274,229.802 745.843,229.93 746.411,228.693 746.98,227.839 747.548,230.384 748.116,230.545 748.685,231.668 749.253,231.752 749.821,231.696 750.39,229.701 750.958,228.938 751.526,229.005 752.095,230.238 752.663,229.141 753.231,228.456 753.8,228.598 754.368,230.083 754.936,229.296 755.505,231.672 756.073,231.719 756.641,233.934 757.21,232.603 757.778,231.441 758.346,230.34 758.915,231.262 759.483,231.231 760.052,231.56 760.62,231.58 761.188,231.241 761.757,230.42 762.325,226.116 762.893,223.45 763.462,219.895 764.03,220.847 764.598,222.624 765.167,224.652 765.735,225.133 766.303,225.743 766.872,225.124 767.44,226.715 768.008,227.199 768.577,227.865 769.145,227.983 769.713,227.39 770.282,228.064 770.85,226.436 771.418,227.93 771.987,231.273 772.555,231.435 773.123,231.56 773.692,230.613 774.26,229.792 774.829,229.028 775.397,227.485 775.965,226.633 776.534,229.01 777.102,229.271 777.67,229.376 778.239,231.921 778.807,232.044 779.375,232.145 779.944,231.329 780.512,232.604 781.08,232.707 781.649,232.7 782.217,231.682 782.785,231.978 783.354,234.145 783.922,233.192 784.49,232.176 785.059,234.323 785.627,235.417 786.195,236.131 786.764,235.889 787.332,238.692 787.9,238.082 788.469,237.688 789.037,236.465 789.606,235.151 790.174,234.055 790.742,232.956 791.311,232.753 791.879,234.628 792.447,234.425 793.016,234.405 793.584,233.22 794.152,232.139 794.721,233.002 795.289,230.907 795.857,230.983 796.426,232.159 796.994,226.758 797.562,227.218 798.131,227.546 798.699,227.848 799.267,230.174 799.836,232.279 800.404,233.308 800.972,232.048 801.541,229.888 802.109,232.316 802.678,232.388 803.246,231.45 803.814,232.449 804.383,230.519 804.951,231.608 805.519,228.606 806.088,230.867 806.656,230.922 807.224,231.056 807.793,232.085 808.361,230.918 808.929,229.892 809.498,229.157 810.066,228.351 810.634,227.558 811.203,229.879 811.771,230.256 812.339,230.332 812.908,231.352 813.476,231.55 814.044,231.426 814.613,232.633 815.181,231.518 815.749,230.613 816.318,228.709 816.886,228.863 817.455,229.069 818.023,230.286 818.591,229.336 819.16,231.484 819.728,230.505 820.296,230.63 820.865,230.681 821.433,234.09 822.001,233.806 822.57,233.497 823.138,233.627 823.706,233.217 824.275,232.976 824.843,233.882 825.411,233.951 825.98,231.703 826.548,229.422 827.116,229.365 827.685,230.579 828.253,230.824 828.821,232.866 829.39,234.057 829.958,236.008 830.526,236.813 831.095,239.496 831.663,237.759 832.232,236.142 832.8,235.655 833.368,236.407 833.937,237.877 834.505,234.334 835.073,234.121 835.642,234.846 836.21,233.55 836.778,234.337 837.347,235.05 837.915,234.945 838.483,237.796 839.052,237.422 839.62,234.903 840.188,237.303 840.757,234.604 841.325,234.19 841.893,234.099 842.462,235.699 843.03,234.175 843.598,232.948 844.167,232.477 844.735,232.381 845.304,233.018 845.872,232.766 846.44,233.52 847.009,232.164 847.577,231.88 848.145,230.74 848.714,230.885 849.282,230.804 849.85,229.681 850.419,229.799 850.987,230.684 851.555,230.593 852.124,229.51 852.692,231.513 853.26,231.254 853.829,230.013 854.397,230.103 854.965,232.005 855.534,232.872 856.102,230.471 856.67,231.398 857.239,229.966 857.807,230.093 858.375,232.227 858.944,230.887 859.512,229.773 860.081,228.798 860.649,229.921 861.217,230.716 861.786,230.715 862.354,229.468 862.922,229.491 863.491,230.592 864.059,229.54 864.627,228.583 865.196,227.689 865.764,228.931 866.332,227.944 866.901,227.921 867.469,227.92 868.037,230.976 868.606,228.663 869.174,227.611 869.742,229.794 870.311,228.973 870.879,228.024 871.447,229.16 872.016,228.26 872.584,228.429 873.152,230.534 873.721,227.432 874.289,225.475 874.858,225.71 875.426,227.03 875.994,224.221 876.563,224.683 877.131,223.104 877.699,222.515 878.268,222.079 878.836,223.696 879.404,224.157 879.973,223.415 880.541,221.732 881.109,222.182 881.678,221.58 882.246,225.284 882.814,225.451 883.383,226.892 883.951,226.085 884.519,226.749 885.088,226.21 885.656,225.413 886.224,226.047 886.793,226.265 887.361,227.664 887.93,231.196 888.498,232.267 889.066,234.287 889.635,232.929 890.203,232.733 890.771,232.694 891.34,233.623 891.908,233.409 892.476,233.257 893.045,233.16 893.613,233 894.181,233.901 894.75,233.588 895.318,234.551 895.886,235.432 896.455,234.768 897.023,235.723 897.591,236.46 898.16,236.13 898.728,235.757 899.296,234.393 899.865,230.834 900.433,229.794 901.001,229.892 901.57,230.039 902.138,228.154 902.707,227.289 903.275,226.593 903.843,226.768 904.412,228.071 904.98,229.171 905.548,230.35 906.117,229.239 906.685,228.355 907.253,227.636 907.822,228.018 908.39,228.124 908.958,229.348 909.527,231.482 910.095,231.392 910.663,231.209 911.232,230.274 911.8,230.46 912.368,230.233 912.937,229.036 913.505,229.289 914.073,228.29 914.642,229.356 915.21,229.268 915.779,229.466 916.347,229.634 916.915,228.589 917.484,229.602 918.052,228.754 918.62,228.904 919.189,230.989 919.757,230.974 920.325,230.893 920.894,229.654 921.462,229.665 922.03,230.816 922.599,230.796 923.167,230.805 923.735,232.803 924.304,230.56 924.872,230.587 925.44,231.801 926.009,231.622 926.577,230.8 927.145,227.819 927.714,226.307 928.282,228.871 928.85,227.893 929.419,226.991 929.987,226.163 930.556,223.328 931.124,223.776 931.692,225.427 932.261,226.809 932.829,229.474 933.397,229.556 933.966,232.928 934.534,231.851 935.102,233.885 935.671,233.806 936.239,234.647 936.807,233.406 937.376,233.259 937.944,233.212 938.512,234.135 939.081,233.699 939.649,233.501 940.217,233.419 940.786,231.407 941.354,229.453 941.922,229.641 942.491,229.8 943.059,229.032 943.627,229.217 944.196,229.372 944.764,230.433 945.333,229.548 945.901,229.902 946.469,229.752 947.038,228.768 947.606,227.042 948.174,228.088 948.743,228.451 949.311,227.568 949.879,228.893 950.448,231.129 951.016,232.19 951.584,232.277 952.153,231.171 952.721,231.214 953.289,231.372 953.858,230.22 954.426,230.49 954.994,232.771 955.563,232.687 956.131,232.648 956.699,231.559 957.268,233.442 957.836,234.458 958.405,231.061 958.973,229.996 959.541,229.998 960.11,231.118 960.678,232.187 961.246,233.085 961.815,233.878 962.383,233.898 962.951,233.842 963.52,234.72 964.088,237.687 964.656,234.976 965.225,235.67 965.793,237.299 966.361,235.385 966.93,232.093 967.498,231.877 968.066,231.578 968.635,229.439 969.203,231.441 969.771,229.24 970.34,229.057 970.908,229.166 971.476,228.227 972.045,229.287 972.613,229.39 973.182,232.384 973.75,228.882 974.318,227.916 974.887,228.071 975.455,228.216 976.023,227.475 976.592,227.496 977.16,229.886 977.728,228.043 978.297,229.064 978.865,233.192 979.433,233.918 980.002,231.447 980.57,232.293 981.138,231.013 981.707,231.088 982.275,227.764 982.843,227.923 983.412,227.063 983.98,229.241 984.548,225.305 985.117,228.707 985.685,228.954 986.253,227.951 986.822,227.015 987.39,225.388 987.959,225.597 988.527,225.838 989.095,226.037 989.664,227.467 990.232,226.827 990.8,228.403 991.369,230.636 991.937,228.776 992.505,229.049 993.074,229.019 993.642,230.262 994.21,233.244 994.779,232.971 995.347,231.884 995.915,231.77 996.484,231.697 997.052,232.752 997.62,233.662 998.189,234.417 998.757,234.283 999.325,232.875 999.894,231.675 1000.46,230.354 1001.03,230.158 1001.6,230.215 1002.17,232.146 1002.74,230.079 1003.3,230.138 1003.87,229.929 1004.44,230.112 1005.01,228.859 1005.58,227.892 1006.15,229.043 1006.71,231.293 1007.28,232.252 1007.85,233.256 1008.42,235.123 1008.99,235.709 1009.56,236.165 1010.12,233.777 1010.69,231.334 1011.26,229.231 1011.83,228.286 1012.4,229.529 1012.97,231.67 1013.53,232.241 1014.1,234.258 1014.67,231.896 1015.24,230.784 1015.81,230.643 1016.38,230.291 1016.94,227.407 1017.51,226.52 1018.08,226.825 1018.65,227.022 1019.22,227.203 1019.79,228.452 1020.35,228.478 1020.92,229.647 1021.49,229.641 1022.06,230.557 1022.63,232.36 1023.2,232.16 1023.76,232.102 1024.33,232.984 1024.9,234.803 1025.47,233.58 1026.04,233.339 1026.61,231.97 1027.17,231.666 1027.74,230.705 1028.31,231.594 1028.88,233.341 1029.45,233.01 1030.02,233.758 1030.58,233.435 1031.15,233.311 1031.72,235.133 1032.29,235.908 1032.86,234.478 1033.43,233.07 1033.99,234.794 1034.56,235.202 1035.13,232.606 1035.7,234.458 1036.27,234.078 1036.84,233.706 1037.4,232.17 1037.97,229.974 1038.54,232.03 1039.11,229.612 1039.68,227.6 1040.25,227.499 1040.81,228.588 1041.38,227.735 1041.95,228.779 1042.52,227.855 1043.09,229.01 1043.66,229.026 1044.22,226.898 1044.79,230.121 1045.36,229.905 1045.93,231 1046.5,229.948 1047.07,226.752 1047.63,229.826 1048.2,228.81 1048.77,226.855 1049.34,226.945 1049.91,228.048 1050.48,226.191 1051.05,227.471 1051.61,226.45 1052.18,226.704 1052.75,224.882 1053.32,225.269 1053.89,226.626 1054.46,225.761 1055.02,223.858 1055.59,225.303 1056.16,227.734 1056.73,227.911 1057.3,228.025 1057.87,225.256 1058.43,226.859 1059,227.206 1059.57,229.435 1060.14,229.325 1060.71,229.372 1061.28,227.494 1061.84,228.982 1062.41,230.039 1062.98,229.197 1063.55,232.308 1064.12,231.045 1064.69,229.846 1065.25,230.88 1065.82,228.828 1066.39,228.82 1066.96,227.749 1067.53,225.96 1068.1,225.365 1068.66,224.746 1069.23,227.242 1069.8,226.163 1070.37,227.585 1070.94,228.801 1071.51,227.847 1072.07,227.979 1072.64,226.899 1073.21,225.265 1073.78,224.618 1074.35,226.028 1074.92,226.266 1075.48,227.992 1076.05,229.274 1076.62,231.439 1077.19,232.591 1077.76,233.48 1078.33,233.19 1078.89,235.07 1079.46,235.636 1080.03,234.078 1080.6,233.732 1081.17,232.399 1081.74,233.238 1082.3,235.063 1082.87,233.686 1083.44,232.27 1084.01,232.194 1084.58,230.878 1085.15,229.938 1085.71,230.047 1086.28,226.963 1086.85,226.098 1087.42,226.424 1087.99,226.656 1088.56,226.954 1089.12,229.176 1089.69,229.336 1090.26,231.401 1090.83,230.283 1091.4,232.318 1091.97,231.069 1092.53,229.24 1093.1,230.352 1093.67,230.302 1094.24,228.084 1094.81,227.356 1095.38,227.71 1095.94,229.122 1096.51,229.273 1097.08,230.404 1097.65,230.411 1098.22,230.39 1098.79,230.528 1099.35,231.65 1099.92,230.567 1100.49,233.573 1101.06,234.486 1101.63,234.357 1102.2,234.065 1102.76,234.976 1103.33,235.738 1103.9,235.354 1104.47,236.089 1105.04,235.734 1105.61,234.367 1106.17,235.252 1106.74,235.619 1107.31,233.819 1107.88,233.571 1108.45,233.303 1109.02,233.846 1109.58,232.41 1110.15,230.149 1110.72,229.336 1111.29,229.215 1111.86,228.337 1112.43,228.317 1112.99,228.325 1113.56,225.474 1114.13,224.686 1114.7,227.144 1115.27,229.49 1115.84,227.454 1116.4,228.379 1116.97,229.616 1117.54,228.723 1118.11,228.73 1118.68,228.809 1119.25,226.969 1119.81,227.28 1120.38,227.451 1120.95,227.706 1121.52,227.602 1122.09,228.827 1122.66,228.919 1123.23,228.964 1123.79,229.844 1124.36,229.971 1124.93,231.807 1125.5,229.477 1126.07,228.432 1126.64,227.685 1127.2,231.132 1127.77,230.995 1128.34,228.991 1128.91,231.808 1129.48,229.575 1130.05,229.668 1130.61,230.57 1131.18,229.337 1131.75,229.417 1132.32,227.327 1132.89,229.674 1133.46,227.513 1134.02,226.62 1134.59,225.802 1135.16,227.307 1135.73,228.591 1136.3,228.708 1136.87,228.926 1137.43,227.884 1138,226.787 1138.57,228.043 1139.14,227.226 1139.71,229.542 1140.28,229.729 1140.84,230.812 1141.41,231.911 1141.98,233.955 1142.55,233.657 1143.12,233.229 1143.69,231.895 1144.25,230.78 1144.82,229.842 1145.39,228.873 1145.96,230.946 1146.53,228.962 1147.1,230.054 1147.66,232.149 1148.23,232.118 1148.8,231.151 1149.37,230.174 1149.94,230.096 1150.51,230.04 1151.07,230.182 1151.64,233.203 1152.21,230.848 1152.78,227.663 1153.35,226.552 1153.92,226.963 1154.48,224.255 1155.05,223.437 1155.62,226.176 1156.19,227.556 1156.76,226.828 1157.33,224.892 1157.89,226.19 1158.46,228.54 1159.03,228.81 1159.6,229.825 1160.17,231.916 1160.74,232.475 1161.3,232.227 1161.87,232.944 1162.44,230.823 1163.01,229.929 1163.58,230.181 1164.15,230.102 1164.71,231.202 1165.28,232.151 1165.85,235.079 1166.42,234.531 1166.99,234.16 1167.56,234.033 1168.12,233.86 1168.69,232.554 1169.26,233.565 1169.83,232.461 1170.4,232.281 1170.97,233.196 1171.53,230.715 1172.1,231.698 1172.67,233.528 1173.24,234.441 1173.81,235.314 1174.38,232.864 1174.94,233.764 1175.51,234.386 1176.08,232.963 1176.65,231.472 1177.22,230.148 1177.79,231.271 1178.35,230.214 1178.92,231.182 1179.49,230.145 1180.06,229.828 1180.63,232.01 1181.2,230.967 1181.76,230.665 1182.33,228.632 1182.9,229.828 1183.47,230.949 1184.04,231.767 1184.61,231.631 1185.17,231.339 1185.74,232.271 1186.31,232.976 1186.88,232.612 1187.45,232.293 1188.02,231.33 1188.58,230.355 1189.15,230.371 1189.72,230.33 1190.29,231.441 1190.86,231.342 1191.43,231.262 1192,228.063 1192.56,226.002 1193.13,227.486 1193.7,226.568 1194.27,224.727 1194.84,223.727 1195.41,226.4 1195.97,227.614 1196.54,227.683 1197.11,227.089 1197.68,225.15 1198.25,224.639 1198.82,224.048 1199.38,223.564 1199.95,221.887 1200.52,222.32 1201.09,223.967 1201.66,224.46 1202.23,225.942 1202.79,226.306 1203.36,225.197 1203.93,225.537 1204.5,227.085 1205.07,227.607 1205.64,226.977 1206.2,229.221 1206.77,227.308 1207.34,228.5 1207.91,230.741 1208.48,231.813 1209.05,231.467 1209.61,232.59 1210.18,231.512 1210.75,230.41 1211.32,232.346 1211.89,233.093 1212.46,230.959 1213.02,229.049 1213.59,230.31 1214.16,231.283 1214.73,231.319 1215.3,230.433 1215.87,230.399 1216.43,230.495 1217,233.422 1217.57,231.965 1218.14,229.849 1218.71,228.766 1219.28,228.902 1219.84,229.251 1220.41,227.333 1220.98,228.594 1221.55,225.87 1222.12,227.407 1222.69,228.726 1223.25,230.023 1223.82,227.975 1224.39,230.097 1224.96,228.981 1225.53,231.08 1226.1,234.156 1226.66,234.025 1227.23,234.953 1227.8,233.869 1228.37,236.801 1228.94,236.053 1229.51,237.667 1230.07,236.003 1230.64,234.53 1231.21,235.042 1231.78,234.746 1232.35,233.395 1232.92,235.162 1233.48,234.871 1234.05,234.428 1234.62,235.124 1235.19,237.87 1235.76,237.216 1236.33,240.659 1236.89,240.737 1237.46,239.994 1238.03,239.079 1238.6,239.186 1239.17,236.317 1239.74,236.626 1240.3,235.937 1240.87,235.446 1241.44,232.923 1242.01,231.57 1242.58,230.377 1243.15,230.178 1243.71,229.125 1244.28,228.039 1244.85,228.15 1245.42,226.117 1245.99,224.364 1246.56,222.269 1247.12,223.671 1247.69,223.951 1248.26,225.226 1248.83,224.368 1249.4,224.414 1249.97,223.675 1250.53,223.208 1251.1,223.559 1251.67,223.949 1252.24,223.184 1252.81,226.111 1253.38,227.416 1253.94,227.611 1254.51,227.696 1255.08,228.818 1255.65,229.795 1256.22,230.666 1256.79,230.554 1257.35,231.269 1257.92,232.247 1258.49,231.973 1259.06,231.065 1259.63,230.86 1260.2,229.69 1260.76,230.612 1261.33,232.675 1261.9,232.325 1262.47,232.214 1263.04,232.297 1263.61,232.085 1264.18,232.012 1264.74,230.758 1265.31,228.592 1265.88,230.704 1266.45,230.589 1267.02,230.494 1267.59,231.412 1268.15,230.215 1268.72,229.276 1269.29,230.331 1269.86,230.214 1270.43,232.384 1271,229.957 1271.56,230.884 1272.13,229.741 1272.7,228.666 1273.27,229.85 1273.84,229.918 1274.41,229.95 1274.97,233.161 1275.54,231.919 1276.11,230.89 1276.68,229.863 1277.25,229.796 1277.82,230.967 1278.38,229.711 1278.95,227.835 1279.52,229.943 1280.09,230.901 1280.66,228.801 1281.23,228.892 1281.79,228.79 1282.36,228.631 1282.93,227.487 1283.5,228.853 1284.07,228.897 1284.64,227.862 1285.2,227.259 1285.77,226.286 1286.34,227.432 1286.91,226.612 1287.48,227.908 1288.05,225.035 1288.61,227.357 1289.18,227.624 1289.75,225.707 1290.32,226.81 1290.89,225.918 1291.46,225.212 1292.02,227.545 1292.59,227.64 1293.16,227.85 1293.73,228.189 1294.3,227.327 1294.87,229.458 1295.43,230.568 1296,232.637 1296.57,234.641 1297.14,234.306 1297.71,233.903 1298.28,230.747 1298.84,228.807 1299.41,228.982 1299.98,229.037 1300.55,227.067 1301.12,229.373 1301.69,228.459 1302.25,228.399 1302.82,226.551 1303.39,223.699 1303.96,222.906 1304.53,224.365 1305.1,222.566 1305.66,225.274 1306.23,224.647 1306.8,224.971 1307.37,228.351 1307.94,228.597 1308.51,229.797 1309.07,230.026 1309.64,232.121 1310.21,233.217 1310.78,235.251 1311.35,234.862 1311.92,235.575 1312.48,234.278 1313.05,235.111 1313.62,232.737 1314.19,232.56 1314.76,233.516 1315.33,233.015 1315.89,229.746 1316.46,229.916 1317.03,232.022 1317.6,230.8 1318.17,230.942 1318.74,229.76 1319.3,229.942 1319.87,228.95 1320.44,229.093 1321.01,229.138 1321.58,227.176 1322.15,227.41 1322.71,229.543 1323.28,229.471 1323.85,228.542 1324.42,231.728 1324.99,230.733 1325.56,230.722 1326.12,231.95 1326.69,229.693 1327.26,227.381 1327.83,227.717 1328.4,230.942 1328.97,233.997 1329.53,233.504 1330.1,232.188 1330.67,232.156 1331.24,230.98 1331.81,229.745 1332.38,229.917 1332.94,229.691 1333.51,229.514 1334.08,230.669 1334.65,227.425 1335.22,227.701 1335.79,226.989 1336.36,225.998 1336.92,227.466 1337.49,226.838 1338.06,227.333 1338.63,226.421 1339.2,227.734 1339.77,228.852 1340.33,229.924 1340.9,228.927 1341.47,229.992 1342.04,227.899 1342.61,227.986 1343.18,229.139 1343.74,230.178 1344.31,230.06 1344.88,231.066 1345.45,229.812 1346.02,229.808 1346.59,230.956 1347.15,232.853 1347.72,233.836 1348.29,233.552 1348.86,233.352 1349.43,233.058 1350,231.562 1350.56,231.471 1351.13,232.337 1351.7,234.335 1352.27,233.998 1352.84,232.767 1353.41,232.482 1353.97,233.298 1354.54,232.047 1355.11,229.885 1355.68,229.042 1356.25,227.894 1356.82,230.178 1357.38,231.305 1357.95,230.373 1358.52,227.404 1359.09,225.417 1359.66,221.755 1360.23,225.308 1360.79,224.482 1361.36,229.123 1361.93,231.111 1362.5,230.969 1363.07,229.946 1363.64,229.987 1364.2,227.041 1364.77,226.361 1365.34,225.86 1365.91,228.112 1366.48,226.224 1367.05,226.398 1367.61,226.987 1368.18,228.101 1368.75,228.168 1369.32,228.297 1369.89,227.394 1370.46,228.648 1371.02,226.917 1371.59,228.222 1372.16,229.387 1372.73,230.727 1373.3,232.818 1373.87,235.805 1374.43,237.263 1375,235.684 1375.57,235.164 1376.14,234.98 1376.71,234.857 1377.28,234.587 1377.84,235.251 1378.41,235.002 1378.98,235.701 1379.55,233.296 1380.12,234.398 1380.69,235.204 1381.25,235.837 1381.82,236.109 1382.39,235.789 1382.96,233.165 1383.53,230.783 1384.1,231.805 1384.66,230.623 1385.23,230.472 1385.8,230.267 1386.37,229.181 1386.94,229.144 1387.51,229.167 1388.07,228.336 1388.64,226.17 1389.21,230.365 1389.78,229.055 1390.35,228.105 1390.92,228.235 1391.48,229.542 1392.05,230.579 1392.62,229.359 1393.19,228.232 1393.76,228.407 1394.33,227.209 1394.89,228.145 1395.46,225.989 1396.03,223.127 1396.6,223.696 1397.17,224.437 1397.74,222.84 1398.3,224.491 1398.87,224.79 1399.44,227.26 1400.01,228.528 1400.58,230.403 1401.15,230.477 1401.71,232.595 1402.28,232.555 1402.85,234.135 1403.42,231.752 1403.99,232.651 1404.56,230.497 1405.13,230.533 1405.69,230.545 1406.26,229.305 1406.83,230.346 1407.4,228.222 1407.97,230.561 1408.54,229.444 1409.1,233.595 1409.67,233.524 1410.24,233.141 1410.81,233.916 1411.38,231.721 1411.95,231.512 1412.51,232.519 1413.08,233.306 1413.65,235.185 1414.22,234.896 1414.79,236.554 1415.36,235.315 1415.92,234.79 1416.49,233.053 1417.06,233.82 1417.63,234.619 1418.2,234.194 1418.77,232.729 1419.33,233.672 1419.9,232.201 1420.47,229.974 1421.04,231.596 1421.61,232.389 1422.18,232.103 1422.74,230.884 1423.31,229.736 1423.88,227.712 1424.45,228.762 1425.02,227.886 1425.59,227.16 1426.15,225.553 1426.72,224.93 1427.29,226.362 1427.86,226.542 1428.43,228.891 1429,228.898 1429.56,229.853 1430.13,230.684 1430.7,227.499 1431.27,228.607 1431.84,228.305 1432.41,228.248 1432.97,228.313 1433.54,228.468 1434.11,225.482 1434.68,225.577 1435.25,225.916 1435.82,227.21 1436.38,225.406 1436.95,226.861 1437.52,229.273 1438.09,230.352 1438.66,230.468 1439.23,231.471 1439.79,231.39 1440.36,232.428 1440.93,233.417 1441.5,232.984 1442.07,232.712 1442.64,232.273 1443.2,230.835 1443.77,229.659 1444.34,228.743 1444.91,229.83 1445.48,228.902 1446.05,228.996 1446.61,226.793 1447.18,226.861 1447.75,225.722 1448.32,225.003 1448.89,224.311 1449.46,224.698 1450.02,227.183 1450.59,228.421 1451.16,229.481 1451.73,229.502 1452.3,231.603 1452.87,231.659 1453.43,231.747 1454,229.53 1454.57,229.473 1455.14,228.806 1455.71,229.829 1456.28,227.68 1456.84,229.745 1457.41,231.009 1457.98,234.025 1458.55,232.732 1459.12,231.335 1459.69,233.223 1460.25,232.929 1460.82,233.711 1461.39,232.405 1461.96,230.345 1462.53,229.47 1463.1,228.526 1463.66,229.704 1464.23,229.809 1464.8,228.651 1465.37,228.753 1465.94,228.534 1466.51,227.473 1467.07,227.593 1467.64,228.606 1468.21,226.71 1468.78,228.935 1469.35,228.132 1469.92,230.241 1470.48,229.32 1471.05,230.504 1471.62,231.491 1472.19,231.259 1472.76,231.094 1473.33,231.137 1473.89,231.006 1474.46,230.858 1475.03,228.489 1475.6,228.486 1476.17,227.685 1476.74,227.934 1477.31,224.808 1477.87,223.049 1478.44,223.622 1479.01,225.409 1479.58,225.818 1480.15,226.283 1480.72,227.718 1481.28,227.915 1481.85,231.179 1482.42,233.469 1482.99,232.27 1483.56,232.197 1484.13,231.84 1484.69,230.704 1485.26,231.778 1485.83,231.661 1486.4,233.557 1486.97,232.115 1487.54,230.036 1488.1,229.957 1488.67,229.864 1489.24,229.937 1489.81,229.826 1490.38,231.939 1490.95,232.919 1491.51,232.734 1492.08,233.495 1492.65,233.249 1493.22,234.077 1493.79,232.788 1494.36,233.649 1494.92,231.204 1495.49,231.143 1496.06,229.839 1496.63,230.804 1497.2,230.81 1497.77,231.731 1498.33,233.7 1498.9,233.367 1499.47,233.194 1500.04,234.837 1500.61,233.183 1501.18,231.801 1501.74,230.702 1502.31,229.733 1502.88,228.635 1503.45,226.71 1504.02,224.796 1504.59,225.07 1505.15,225.495 1505.72,223.893 1506.29,225.282 1506.86,224.495 1507.43,226.864 1508,229.104 1508.56,229.165 1509.13,231.495 1509.7,231.642 1510.27,231.603 1510.84,231.375 1511.41,232.197 1511.97,232.94 1512.54,230.737 1513.11,229.55 1513.68,228.501 1514.25,228.48 1514.82,229.73 1515.38,229.761 1515.95,230.817 1516.52,231.046 1517.09,232.018 1517.66,233.058 1518.23,234.944 1518.79,233.437 1519.36,233.352 1519.93,232.049 1520.5,230.65 1521.07,228.749 1521.64,231.044 1522.2,230.963 1522.77,230.818 1523.34,229.87 1523.91,228.773 1524.48,230.802 1525.05,230.517 1525.61,230.525 1526.18,230.671 1526.75,228.658 1527.32,229.714 1527.89,228.541 1528.46,229.573 1529.02,228.507 1529.59,229.737 1530.16,227.806 1530.73,225.785 1531.3,225.859 1531.87,226.102 1532.43,228.285 1533,227.452 1533.57,228.628 1534.14,228.728 1534.71,227.856 1535.28,229.964 1535.84,231.171 1536.41,231.14 1536.98,229.945 1537.55,229.871 1538.12,229.906 1538.69,230.053 1539.25,233.123 1539.82,231.853 1540.39,231.571 1540.96,231.327 1541.53,231.361 1542.1,230.185 1542.66,228.282 1543.23,227.34 1543.8,227.418 1544.37,227.42 1544.94,228.745 1545.51,227.89 1546.08,226.052 1546.64,226.152 1547.21,228.625 1547.78,229.951 1548.35,232.039 1548.92,229.851 1549.49,230.853 1550.05,231.904 1550.62,229.732 1551.19,230.732 1551.76,229.687 1552.33,229.905 1552.9,228.739 1553.46,227.635 1554.03,225.673 1554.6,225.106 1555.17,222.322 1555.74,224.956 1556.31,225.474 1556.87,224.616 1557.44,225.211 1558.01,224.345 1558.58,226.706 1559.15,225.914 1559.72,226.266 1560.28,226.554 1560.85,225.884 1561.42,223.104 1561.99,222.404 1562.56,223.971 1563.13,224.238 1563.69,223.746 1564.26,224.197 1564.83,224.613 1565.4,225.016 1565.97,225.639 1566.54,225.15 1567.1,228.641 1567.67,227.653 1568.24,228.962 1568.81,228.343 1569.38,229.607 1569.95,230.008 1570.51,229.467 1571.08,230.684 1571.65,229.854 1572.22,231.272 1572.79,232.372 1573.36,233.366 1573.92,234.342 1574.49,233.154 1575.06,231.848 1575.63,231.78 1576.2,232.722 1576.77,232.562 1577.33,230.407 1577.9,230.446 1578.47,230.545 1579.04,229.528 1579.61,229.514 1580.18,228.389 1580.74,228.903 1581.31,227.957 1581.88,227.139 1582.45,225.314 1583.02,223.846 1583.59,222.397 1584.15,223.153 1584.72,224.105 1585.29,225.547 1585.86,225.148 1586.43,223.751 1587,226.411 1587.56,227.879 1588.13,229.464 1588.7,229.795 1589.27,231.163 1589.84,231.401 1590.41,232.579 1590.97,233.699 1591.54,234.451 1592.11,234.217 1592.68,236.123 1593.25,235.961 1593.82,235.797 1594.38,235.556 1594.95,237.501 1595.52,235.304 1596.09,234.037 1596.66,235.175 1597.23,233.837 1597.79,234.622 1598.36,235.349 1598.93,233.784 1599.5,235.577 1600.07,234.414 1600.64,231.883 1601.2,232.857 1601.77,233.606 1602.34,233.335 1602.91,233.306 1603.48,235.154 1604.05,234.667 1604.61,235.526 1605.18,234.28 1605.75,232.79 1606.32,232.67 1606.89,232.539 1607.46,233.345 1608.02,232.249 1608.59,230.945 1609.16,234.914 1609.73,235.717 1610.3,235.293 1610.87,234.096 1611.43,232.707 1612,232.463 1612.57,231.307 1613.14,231.181 1613.71,227.934 1614.28,228.014 1614.84,227.24 1615.41,227.329 1615.98,228.556 1616.55,229.759 1617.12,230.879 1617.69,230.909 1618.26,229.742 1618.82,229.799 1619.39,229.678 1619.96,231.894 1620.53,231.727 1621.1,229.615 1621.67,230.607 1622.23,229.605 1622.8,229.648 1623.37,228.585 1623.94,228.645 1624.51,229.669 1625.08,230.876 1625.64,231.906 1626.21,232.553 1626.78,231.271 1627.35,231.182 1627.92,234.201 1628.49,233.894 1629.05,232.682 1629.62,234.555 1630.19,233.279 1630.76,232.863 1631.33,228.588 1631.9,228.738 1632.46,228.811 1633.03,229.125 1633.6,229.942 1634.17,230.179 1634.74,230.144 1635.31,232.312 1635.87,232.134 1636.44,235.141 1637.01,232.809 1637.58,232.519 1638.15,231.332 1638.72,231.459 1639.28,232.124 1639.85,231.015 1640.42,229.839 1640.99,229.806 1641.56,230.63 1642.13,231.558 1642.69,230.274 1643.26,229.417 1643.83,227.495 1644.4,227.548 1644.97,225.702 1645.54,226.074 1646.1,228.291 1646.67,229.541 1647.24,232.773 1647.81,232.489 1648.38,232.045 1648.95,230.804 1649.51,230.51 1650.08,230.259 1650.65,229.171 1651.22,230.08 1651.79,230.929 1652.36,228.748 1652.92,229.751 1653.49,229.935 1654.06,229.903 1654.63,230.775 1655.2,230.516 1655.77,229.306 1656.33,230.374 1656.9,230.446 1657.47,230.314 1658.04,227.996 1658.61,228.023 1659.18,228.275 1659.74,228.336 1660.31,227.554 1660.88,227.606 1661.45,227.644 1662.02,227.702 1662.59,227.77 1663.15,226.896 1663.72,227.263 1664.29,226.513 1664.86,226.55 1665.43,226.671 1666,229.832 1666.56,228.793 1667.13,225.834 1667.7,225.96 1668.27,227.498 1668.84,228.434 1669.41,227.504 1669.97,228.726 1670.54,229.777 1671.11,230.767 1671.68,229.538 1672.25,229.786 1672.82,229.863 1673.38,230.841 1673.95,229.798 1674.52,230.783 1675.09,230.719 1675.66,231.661 1676.23,233.757 1676.79,232.543 1677.36,233.3 1677.93,233.108 1678.5,229.425 1679.07,229.46 1679.64,228.388 1680.2,227.575 1680.77,229.758 1681.34,231.709 1681.91,232.681 1682.48,231.658 1683.05,232.574 1683.61,231.412 1684.18,231.292 1684.75,231.092 1685.32,231.157 1685.89,231.089 1686.46,231.077 1687.02,232.688 1687.59,233.542 1688.16,232.294 1688.73,233.132 1689.3,231.008 1689.87,231.072 1690.44,231.798 1691,232.479 1691.57,233.158 1692.14,231.73 1692.71,232.436 1693.28,232.222 1693.85,231.865 1694.41,231.646 1694.98,229.484 1695.55,229.378 1696.12,228.311 1696.69,227.37 1697.26,226.343 1697.82,225.456 1698.39,222.645 1698.96,224.196 1699.53,225.507 1700.1,227.019 1700.67,226.321 1701.23,229.565 1701.8,229.603 1702.37,231.586 1702.94,230.482 1703.51,228.113 1704.08,227.204 1704.64,227.289 1705.21,226.387 1705.78,226.611 1706.35,227.813 1706.92,227.02 1707.49,226.176 1708.05,226.304 1708.62,225.609 1709.19,223.845 1709.76,225.351 1710.33,223.687 1710.9,221.045 1711.46,222.548 1712.03,226.212 1712.6,225.389 1713.17,227.866 1713.74,227.062 1714.31,227.665 1714.87,226.806 1715.44,227.094 1716.01,227.612 1716.58,227.867 1717.15,228.978 1717.72,229.103 1718.28,230.155 1718.85,231.496 1719.42,231.482 1719.99,230.443 1720.56,229.284 1721.13,230.496 1721.69,231.33 1722.26,232.324 1722.83,232.334 1723.4,234.198 1723.97,232.805 1724.54,232.66 1725.1,232.772 1725.67,232.441 1726.24,233.372 1726.81,233.202 1727.38,234.135 1727.95,233.038 1728.51,233.116 1729.08,232.01 1729.65,228.843 1730.22,229.022 1730.79,229.295 1731.36,227.508 1731.92,226.981 1732.49,227.881 1733.06,227.126 1733.63,227.384 1734.2,227.596 1734.77,232.997 1735.33,233.813 1735.9,230.667 1736.47,232.717 1737.04,232.676 1737.61,232.652 1738.18,232.597 1738.74,233.476 1739.31,232.241 1739.88,231.955 1740.45,231.851 1741.02,230.489 1741.59,231.495 1742.15,230.381 1742.72,231.427 1743.29,233.264 1743.86,235.182 1744.43,234.861 1745,235.824 1745.56,236.427 1746.13,235.945 1746.7,235.741 1747.27,237.577 1747.84,236.939 1748.41,237.554 1748.97,236.729 1749.54,237.354 1750.11,237.857 1750.68,236.051 1751.25,236.541 1751.82,235.906 1752.38,236.163 1752.95,234.472 1753.52,234.923 1754.09,232.396 1754.66,232.018 1755.23,228.994 1755.79,227.866 1756.36,229.151 1756.93,226.886 1757.5,224.987 1758.07,225.41 1758.64,225.59 1759.21,225.707 1759.77,225.987 1760.34,226.344 1760.91,228.711 1761.48,229.651 1762.05,229.72 1762.62,228.787 1763.18,229.845 1763.75,229.923 1764.32,227.82 1764.89,227.995 1765.46,228.195 1766.03,228.515 1766.59,229.566 1767.16,228.494 1767.73,228.364 1768.3,229.287 1768.87,228.536 1769.44,227.467 1770,228.569 1770.57,229.895 1771.14,229.681 1771.71,229.527 1772.28,229.612 1772.85,228.59 1773.41,229.51 1773.98,229.465 1774.55,229.545 1775.12,226.494 1775.69,226.839 1776.26,228.145 1776.82,229.329 1777.39,230.594 1777.96,231.42 1778.53,231.159 1779.1,231.074 1779.67,227.874 1780.23,227.897 1780.8,227.172 1781.37,227.164 1781.94,228.303 1782.51,228.238 1783.08,227.434 1783.64,227.614 1784.21,227.7 1784.78,227.744 1785.35,227.892 1785.92,230.127 1786.49,232.216 1787.05,231.929 1787.62,230.57 1788.19,229.661 1788.76,229.496 1789.33,228.422 1789.9,227.33 1790.46,229.607 1791.03,228.445 1791.6,228.796 1792.17,230.668 1792.74,231.652 1793.31,231.441 1793.87,230.403 1794.44,231.115 1795.01,233.03 1795.58,230.699 1796.15,230.689 1796.72,230.665 1797.28,231.461 1797.85,234.407 1798.42,235.454 1798.99,233.907 1799.56,233.492 1800.13,235.266 1800.69,236.831 1801.26,237.248 1801.83,235.73 1802.4,234.285 1802.97,232.844 1803.54,231.646 1804.1,230.716 1804.67,229.445 1805.24,228.295 1805.81,228.262 1806.38,228.269 1806.95,228.576 1807.51,231.431 1808.08,231.426 1808.65,229.32 1809.22,228.26 1809.79,227.468 1810.36,224.542 1810.92,226.849 1811.49,228.039 1812.06,229.274 1812.63,229.218 1813.2,228.264 1813.77,230.4 1814.33,230.251 1814.9,232.25 1815.47,232.994 1816.04,230.762 1816.61,228.448 1817.18,229.432 1817.74,229.326 1818.31,229.322 1818.88,229.114 1819.45,228.112 1820.02,227.008 1820.59,228.2 1821.15,229.154 1821.72,231.017 1822.29,229.714 1822.86,229.919 1823.43,230.052 1824,228.918 1824.56,229.024 1825.13,225.961 1825.7,225.031 1826.27,224.428 1826.84,225.861 1827.41,228.036 1827.97,230.011 1828.54,229.989 1829.11,229.804 1829.68,229.744 1830.25,229.774 1830.82,230.684 1831.39,230.638 1831.95,230.544 1832.52,230.593 1833.09,231.337 1833.66,229.116 1834.23,228.107 1834.8,227.324 1835.36,227.681 1835.93,227.751 1836.5,228.686 1837.07,228.566 1837.64,229.646 1838.21,230.476 1838.77,230.392 1839.34,233.319 1839.91,232.828 1840.48,232.625 1841.05,233.444 1841.62,231.021 1842.18,230.071 1842.75,232.04 1843.32,231.582 1843.89,230.554 1844.46,228.528 1845.03,228.625 1845.59,230.857 1846.16,230.777 1846.73,228.581 1847.3,228.493 1847.87,228.551 1848.44,227.681 1849,228.987 1849.57,229.971 1850.14,229.987 1850.71,229.954 1851.28,227.956 1851.85,226.949 1852.41,227.355 1852.98,227.471 1853.55,226.427 1854.12,227.807 1854.69,226.735 1855.26,226.953 1855.82,227.949 1856.39,227.1 1856.96,227.331 1857.53,225.433 1858.1,225.803 1858.67,224.134 1859.23,222.608 1859.8,224.234 1860.37,225.477 1860.94,225.815 1861.51,224.099 1862.08,227.549 1862.64,228.901 1863.21,229.058 1863.78,229.28 1864.35,231.374 1864.92,231.321 1865.49,230.574 1866.05,229.637 1866.62,231.52 1867.19,230.629 1867.76,230.319 1868.33,229.486 1868.9,228.669 1869.46,227.88 1870.03,229.775 1870.6,228.964 1871.17,227.023 1871.74,226.185 1872.31,227.316 1872.87,228.445 1873.44,227.639 1874.01,226.87 1874.58,228.594 1875.15,225.705 1875.72,225.894 1876.28,225.345 1876.85,225.66 1877.42,226.953 1877.99,229.2 1878.56,231.357 1879.13,231.346 1879.69,231.477 1880.26,227.208 1880.83,227.341 1881.4,226.561 1881.97,225.962 1882.54,226.343 1883.1,228.728 1883.67,228.23 1884.24,227.588 1884.81,229.915 1885.38,230.978 1885.95,229.992 1886.51,229.998 1887.08,229.937 1887.65,227.891 1888.22,228.447 1888.79,229.644 1889.36,227.953 1889.92,231.317 1890.49,230.547 1891.06,231.77 1891.63,232.857 1892.2,232.894 1892.77,232.717 1893.33,233.656 1893.9,233.43 1894.47,234.259 1895.04,235.106 1895.61,234.975 1896.18,233.693 1896.74,235.508 1897.31,233.279 1897.88,232.139 1898.45,232.217 1899.02,233.325 1899.59,232.145 1900.16,231.803 1900.72,232.766 1901.29,234.688 1901.86,233.291 1902.43,232.042 1903,231.149 1903.57,231.133 1904.13,233.26 1904.7,233.093 1905.27,231.909 1905.84,230.834 1906.41,232.781 1906.98,230.37 1907.54,229.465 1908.11,228.497 1908.68,229.814 1909.25,229.83 1909.82,229.965 1910.39,228.004 1910.95,228.153 1911.52,228.382 1912.09,224.414 1912.66,224.079 1913.23,224.464 1913.8,223.839 1914.36,225.519 1914.93,226.642 1915.5,226.97 1916.07,229.425 1916.64,228.479 1917.21,227.621 1917.77,227.83 1918.34,228.211 1918.91,229.38 1919.48,227.504 1920.05,229.846 1920.62,230.043 1921.18,228.051 1921.75,228.161 1922.32,228.511 1922.89,229.914 1923.46,229.086 1924.03,231.53 1924.59,231.374 1925.16,232.428 1925.73,231.283 1926.3,231.282 1926.87,229.312 1927.44,231.455 1928,232.489 1928.57,230.355 1929.14,232.405 1929.71,233.382 1930.28,232.402 1930.85,232.172 1931.41,231.077 1931.98,228.042 1932.55,230.251 1933.12,231.431 1933.69,232.373 1934.26,232.069 1934.82,233.932 1935.39,234.798 1935.96,234.49 1936.53,232.94 1937.1,232.604 1937.67,232.37 1938.23,234.169 1938.8,231.935 1939.37,230.715 1939.94,233.853 1940.51,232.466 1941.08,230.414 1941.64,230.339 1942.21,230.264 1942.78,232.34 1943.35,230.269 1943.92,230.218 1944.49,232.366 1945.05,233.454 1945.62,231.229 1946.19,231.877 1946.76,233.838 1947.33,231.382 1947.9,231.262 1948.46,228.966 1949.03,231.179 1949.6,233.177 1950.17,231.887 1950.74,232.791 1951.31,232.674 1951.87,236.352 1952.44,235.747 1953.01,234.481 1953.58,234.032 1954.15,231.781 1954.72,231.626 1955.28,230.545 1955.85,228.178 1956.42,227.208 1956.99,227.467 1957.56,226.555 1958.13,227.922 1958.69,228.237 1959.26,229.646 1959.83,228.608 1960.4,227.652 1960.97,227.777 1961.54,229.724 1962.1,230.825 1962.67,232.892 1963.24,234.732 1963.81,233.167 1964.38,233.835 1964.95,233.555 1965.51,234.185 1966.08,233.862 1966.65,231.341 1967.22,232.307 1967.79,233.151 1968.36,229.862 1968.92,229.758 1969.49,231.762 1970.06,231.631 1970.63,234.615 1971.2,234.294 1971.77,234.878 1972.34,233.362 1972.9,230.059 1973.47,229.996 1974.04,231.033 1974.61,231.912 1975.18,230.637 1975.75,229.458 1976.31,229.686 1976.88,229.493 1977.45,229.526 1978.02,230.56 1978.59,232.438 1979.16,232.186 1979.72,229.931 1980.29,228.652 1980.86,227.618 1981.43,225.679 1982,226.697 1982.57,226.923 1983.13,225.905 1983.7,226.2 1984.27,227.287 1984.84,226.605 1985.41,225.694 1985.98,227.115 1986.54,228.337 1987.11,230.415 1987.68,230.312 1988.25,230.472 1988.82,231.478 1989.39,230.405 1989.95,231.332 1990.52,230.24 1991.09,231.215 1991.66,231.132 1992.23,231.186 1992.8,231.124 1993.36,232.981 1993.93,231.543 1994.5,230.33 1995.07,231.353 1995.64,231.096 1996.21,229.842 1996.77,228.814 1997.34,228.89 1997.91,226.774 1998.48,225.012 1999.05,225.382 1999.62,223.403 2000.18,221.711 2000.75,222.166 2001.32,222.407 2001.89,223.857 2002.46,225.209 2003.03,227.667 2003.59,228.975 2004.16,230.093 2004.73,232.414 2005.3,228.247 2005.87,229.49 2006.44,229.515 2007,229.641 2007.57,230.001 2008.14,231.027 2008.71,232.048 2009.28,229.069 2009.85,229.105 2010.41,231.143 2010.98,233.021 2011.55,231.731 2012.12,231.668 2012.69,232.639 2013.26,232.336 2013.82,230.111 2014.39,231.017 2014.96,232.193 2015.53,232.113 2016.1,232.832 2016.67,233.558 2017.23,233.353 2017.8,232.047 2018.37,231.715 2018.94,231.563 2019.51,231.802 2020.08,231.347 2020.64,229.169 2021.21,230.047 2021.78,228.708 2022.35,230.531 2022.92,230.576 2023.49,232.612 2024.05,231.501 2024.62,231.305 2025.19,232.271 2025.76,233.22 2026.33,228.905 2026.9,229.95 2027.46,230.816 2028.03,233.736 2028.6,232.498 2029.17,232.252 2029.74,230.908 2030.31,228.582 2030.87,229.752 2031.44,231.772 2032.01,231.542 2032.58,231.63 2033.15,231.428 2033.72,230.909 2034.28,227.708 2034.85,226.681 2035.42,229.849 2035.99,229.744 2036.56,228.865 2037.13,229.97 2037.69,227.565 2038.26,230.553 2038.83,228.573 2039.4,232.68 2039.97,233.294 2040.54,232.98 2041.11,232.686 2041.67,233.329 2042.24,233.884 2042.81,233.483 2043.38,234.335 2043.95,233.953 2044.52,232.547 2045.08,231.209 2045.65,230.982 2046.22,230.749 2046.79,232.721 2047.36,232.382 2047.93,229.253 2048.49,230.184 2049.06,231.039 2049.63,231.835 2050.2,230.643 2050.77,229.514 2051.34,227.286 2051.9,229.135 2052.47,231.27 2053.04,227.171 2053.61,229.511 2054.18,227.232 2054.75,226.179 2055.31,228.269 2055.88,228.423 2056.45,228.278 2057.02,227.296 2057.59,227.452 2058.16,227.387 2058.72,228.48 2059.29,228.582 2059.86,227.681 2060.43,227.632 2061,227.616 2061.57,226.47 2062.13,226.645 2062.7,228.986 2063.27,229.938 2063.84,231.105 2064.41,228.975 2064.98,228.967 2065.54,228.002 2066.11,229.106 2066.68,228.268 2067.25,228.282 2067.82,229.369 2068.39,231.559 2068.95,229.457 2069.52,229.088 2070.09,226.007 2070.66,226.209 2071.23,226.425 2071.8,225.492 2072.36,224.759 2072.93,225.045 2073.5,223.454 2074.07,224.86 2074.64,226.418 2075.21,226.669 2075.77,226.796 2076.34,227.822 2076.91,227.045 2077.48,226.324 2078.05,226.447 2078.62,225.791 2079.18,227.498 2079.75,227.517 2080.32,226.528 2080.89,226.849 2081.46,228.975 2082.03,229.105 2082.59,230.159 2083.16,231.41 2083.73,233.38 2084.3,232.888 2084.87,233.72 2085.44,234.577 2086,234.335 2086.57,233.163 2087.14,231.629 2087.71,232.682 2088.28,233.579 2088.85,235.344 2089.41,234.673 2089.98,234.334 2090.55,234.048 2091.12,234.759 2091.69,232.383 2092.26,231.124 2092.82,228.991 2093.39,226.964 2093.96,227.521 2094.53,229.721 2095.1,230.92 2095.67,229.75 2096.23,231.018 2096.8,230.906 2097.37,231.787 2097.94,231.746 2098.51,229.542 2099.08,229.578 2099.64,230.552 2100.21,230.664 2100.78,230.628 2101.35,229.461 2101.92,230.411 2102.49,230.49 2103.05,231.444 2103.62,229.342 2104.19,226.203 2104.76,226.377 2105.33,227.574 2105.9,227.642 2106.46,227.509 2107.03,227.857 2107.6,226.939 2108.17,230.262 2108.74,229.324 2109.31,228.372 2109.87,227.461 2110.44,226.534 2111.01,227.803 2111.58,225.981 2112.15,223.383 2112.72,226.112 2113.29,226.269 2113.85,227.652 2114.42,228.002 2114.99,228.116 2115.56,227.233 2116.13,229.406 2116.7,229.788 2117.26,229.97 2117.83,229.996 2118.4,229.083 2118.97,229.28 2119.54,228.326 2120.11,228.525 2120.67,228.466 2121.24,227.524 2121.81,225.529 2122.38,224.813 2122.95,229.41 2123.52,230.149 2124.08,230.304 2124.65,229.489 2125.22,230.479 2125.79,230.407 2126.36,229.493 2126.93,229.461 2127.49,228.658 2128.06,227.713 2128.63,229.096 2129.2,227.967 2129.77,230.173 2130.34,230.358 2130.9,229.375 2131.47,229.285 2132.04,230.385 2132.61,230.412 2133.18,231.497 2133.75,231.489 2134.31,231.601 2134.88,231.488 2135.45,232.416 2136.02,231.116 2136.59,230.943 2137.16,229.954 2137.72,231.099 2138.29,232.277 2138.86,232.203 2139.43,232.06 2140,230.939 2140.57,229.929 2141.13,228.873 2141.7,229.981 2142.27,231.015 2142.84,231.136 2143.41,231.192 2143.98,232.13 2144.54,232.097 2145.11,232.026 2145.68,231.885 2146.25,230.857 2146.82,228.681 2147.39,228.693 2147.95,227.789 2148.52,226.913 2149.09,226.175 2149.66,227.618 2150.23,229.003 2150.8,232.097 2151.36,231.896 2151.93,231.893 2152.5,229.745 2153.07,229.664 2153.64,228.841 2154.21,227.052 2154.77,227.481 2155.34,227.698 2155.91,228.96 2156.48,230.255 2157.05,230.158 2157.62,231.155 2158.18,231.032 2158.75,229.91 2159.32,232.204 2159.89,233.031 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip100)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.025 ± 0.016\n  with uncertainty of ± 0.001014381209375522\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01091 ± (0.00364726, 0.00353425) (MC)\n  95% confidence interval: [-4.01789, -4.00406] (MC)\n  linear error propagation: -4.01112 ± 0.0036869\n  |δ_y| = |0.00226555| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.010911223476709, val_l = 0.006979311274610822, val_u = 0.006850792405058037)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip130\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip131\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip132\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1136.9 2211.02,1136.9 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,960.888 2211.02,960.888 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,784.876 2211.02,784.876 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,608.864 2211.02,608.864 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,432.852 2211.02,432.852 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,256.841 2211.02,256.841 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1136.9 365.751,1136.9 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,960.888 365.751,960.888 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,784.876 365.751,784.876 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,608.864 365.751,608.864 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,432.852 365.751,432.852 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,256.841 365.751,256.841 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M298.909 1122.7 Q295.298 1122.7 293.469 1126.26 Q291.664 1129.8 291.664 1136.93 Q291.664 1144.04 293.469 1147.61 Q295.298 1151.15 298.909 1151.15 Q302.543 1151.15 304.349 1147.61 Q306.177 1144.04 306.177 1136.93 Q306.177 1129.8 304.349 1126.26 Q302.543 1122.7 298.909 1122.7 M298.909 1118.99 Q304.719 1118.99 307.775 1123.6 Q310.853 1128.18 310.853 1136.93 Q310.853 1145.66 307.775 1150.27 Q304.719 1154.85 298.909 1154.85 Q293.099 1154.85 290.02 1150.27 Q286.964 1145.66 286.964 1136.93 Q286.964 1128.18 290.02 1123.6 Q293.099 1118.99 298.909 1118.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M259.557 974.233 L267.196 974.233 L267.196 947.867 L258.886 949.534 L258.886 945.274 L267.15 943.608 L271.826 943.608 L271.826 974.233 L279.465 974.233 L279.465 978.168 L259.557 978.168 L259.557 974.233 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 946.686 Q295.298 946.686 293.469 950.251 Q291.664 953.793 291.664 960.922 Q291.664 968.029 293.469 971.594 Q295.298 975.135 298.909 975.135 Q302.543 975.135 304.349 971.594 Q306.177 968.029 306.177 960.922 Q306.177 953.793 304.349 950.251 Q302.543 946.686 298.909 946.686 M298.909 942.983 Q304.719 942.983 307.775 947.589 Q310.853 952.172 310.853 960.922 Q310.853 969.649 307.775 974.256 Q304.719 978.839 298.909 978.839 Q293.099 978.839 290.02 974.256 Q286.964 969.649 286.964 960.922 Q286.964 952.172 290.02 947.589 Q293.099 942.983 298.909 942.983 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M262.775 798.221 L279.094 798.221 L279.094 802.156 L257.15 802.156 L257.15 798.221 Q259.812 795.466 264.395 790.837 Q269.002 786.184 270.182 784.841 Q272.428 782.318 273.307 780.582 Q274.21 778.823 274.21 777.133 Q274.21 774.378 272.266 772.642 Q270.344 770.906 267.242 770.906 Q265.043 770.906 262.59 771.67 Q260.159 772.434 257.381 773.985 L257.381 769.263 Q260.205 768.128 262.659 767.55 Q265.113 766.971 267.15 766.971 Q272.52 766.971 275.715 769.656 Q278.909 772.341 278.909 776.832 Q278.909 778.962 278.099 780.883 Q277.312 782.781 275.205 785.374 Q274.627 786.045 271.525 789.262 Q268.423 792.457 262.775 798.221 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 770.675 Q295.298 770.675 293.469 774.239 Q291.664 777.781 291.664 784.911 Q291.664 792.017 293.469 795.582 Q295.298 799.124 298.909 799.124 Q302.543 799.124 304.349 795.582 Q306.177 792.017 306.177 784.911 Q306.177 777.781 304.349 774.239 Q302.543 770.675 298.909 770.675 M298.909 766.971 Q304.719 766.971 307.775 771.577 Q310.853 776.161 310.853 784.911 Q310.853 793.637 307.775 798.244 Q304.719 802.827 298.909 802.827 Q293.099 802.827 290.02 798.244 Q286.964 793.637 286.964 784.911 Q286.964 776.161 290.02 771.577 Q293.099 766.971 298.909 766.971 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M272.914 607.51 Q276.27 608.228 278.145 610.496 Q280.043 612.765 280.043 616.098 Q280.043 621.214 276.525 624.015 Q273.006 626.815 266.525 626.815 Q264.349 626.815 262.034 626.376 Q259.742 625.959 257.289 625.103 L257.289 620.589 Q259.233 621.723 261.548 622.302 Q263.863 622.88 266.386 622.88 Q270.784 622.88 273.076 621.144 Q275.39 619.408 275.39 616.098 Q275.39 613.042 273.238 611.329 Q271.108 609.593 267.289 609.593 L263.261 609.593 L263.261 605.751 L267.474 605.751 Q270.923 605.751 272.752 604.385 Q274.58 602.996 274.58 600.404 Q274.58 597.742 272.682 596.33 Q270.807 594.894 267.289 594.894 Q265.367 594.894 263.168 595.311 Q260.969 595.728 258.33 596.607 L258.33 592.441 Q260.992 591.7 263.307 591.33 Q265.645 590.959 267.705 590.959 Q273.029 590.959 276.131 593.39 Q279.233 595.797 279.233 599.917 Q279.233 602.788 277.59 604.779 Q275.946 606.746 272.914 607.51 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 594.663 Q295.298 594.663 293.469 598.228 Q291.664 601.769 291.664 608.899 Q291.664 616.005 293.469 619.57 Q295.298 623.112 298.909 623.112 Q302.543 623.112 304.349 619.57 Q306.177 616.005 306.177 608.899 Q306.177 601.769 304.349 598.228 Q302.543 594.663 298.909 594.663 M298.909 590.959 Q304.719 590.959 307.775 595.566 Q310.853 600.149 310.853 608.899 Q310.853 617.626 307.775 622.232 Q304.719 626.815 298.909 626.815 Q293.099 626.815 290.02 622.232 Q286.964 617.626 286.964 608.899 Q286.964 600.149 290.02 595.566 Q293.099 590.959 298.909 590.959 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M271.594 419.646 L259.789 438.095 L271.594 438.095 L271.594 419.646 M270.367 415.572 L276.247 415.572 L276.247 438.095 L281.177 438.095 L281.177 441.984 L276.247 441.984 L276.247 450.132 L271.594 450.132 L271.594 441.984 L255.992 441.984 L255.992 437.47 L270.367 415.572 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 418.651 Q295.298 418.651 293.469 422.216 Q291.664 425.758 291.664 432.887 Q291.664 439.994 293.469 443.558 Q295.298 447.1 298.909 447.1 Q302.543 447.1 304.349 443.558 Q306.177 439.994 306.177 432.887 Q306.177 425.758 304.349 422.216 Q302.543 418.651 298.909 418.651 M298.909 414.947 Q304.719 414.947 307.775 419.554 Q310.853 424.137 310.853 432.887 Q310.853 441.614 307.775 446.22 Q304.719 450.804 298.909 450.804 Q293.099 450.804 290.02 446.22 Q286.964 441.614 286.964 432.887 Q286.964 424.137 290.02 419.554 Q293.099 414.947 298.909 414.947 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M258.793 239.561 L277.15 239.561 L277.15 243.496 L263.076 243.496 L263.076 251.968 Q264.094 251.621 265.113 251.459 Q266.131 251.274 267.15 251.274 Q272.937 251.274 276.316 254.445 Q279.696 257.616 279.696 263.033 Q279.696 268.611 276.224 271.713 Q272.752 274.792 266.432 274.792 Q264.256 274.792 261.988 274.422 Q259.742 274.051 257.335 273.311 L257.335 268.611 Q259.418 269.746 261.641 270.301 Q263.863 270.857 266.34 270.857 Q270.344 270.857 272.682 268.75 Q275.02 266.644 275.02 263.033 Q275.02 259.422 272.682 257.315 Q270.344 255.209 266.34 255.209 Q264.465 255.209 262.59 255.625 Q260.738 256.042 258.793 256.922 L258.793 239.561 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 242.639 Q295.298 242.639 293.469 246.204 Q291.664 249.746 291.664 256.875 Q291.664 263.982 293.469 267.547 Q295.298 271.088 298.909 271.088 Q302.543 271.088 304.349 267.547 Q306.177 263.982 306.177 256.875 Q306.177 249.746 304.349 246.204 Q302.543 242.639 298.909 242.639 M298.909 238.936 Q304.719 238.936 307.775 243.542 Q310.853 248.125 310.853 256.875 Q310.853 265.602 307.775 270.209 Q304.719 274.792 298.909 274.792 Q293.099 274.792 290.02 270.209 Q286.964 265.602 286.964 256.875 Q286.964 248.125 290.02 243.542 Q293.099 238.936 298.909 238.936 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip132)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1007.21 400.199,1024 400.786,909.991 401.372,801.034 401.958,707.35 402.545,615.604 403.131,533.964 403.718,463.291 404.304,395.321 404.891,438.284 405.477,374.645 406.063,317.099 406.65,266.495 407.236,219.895 407.823,256.186 408.409,284.284 408.995,307.872 409.582,329.76 410.168,295.237 410.755,313.765 411.341,330.179 411.927,302.555 412.514,279.333 413.1,299.007 413.687,281.045 414.273,298.08 414.86,285.558 415.446,274.117 416.032,292.384 416.619,283.994 417.205,277.524 417.792,272.995 418.378,294.235 418.964,292.106 419.551,292.298 420.137,292.72 420.724,295.609 421.31,316.778 421.896,319.346 422.483,324.206 423.069,329.547 423.656,349.808 424.242,357.019 424.829,377.22 425.415,384.657 426.001,415.054 426.588,443.787 427.174,470.746 427.761,485.829 428.347,501.825 428.933,509.268 429.52,533.812 430.106,542.246 430.693,550.092 431.279,559.211 431.865,575.357 432.452,598.685 433.038,606.583 433.625,627.709 434.211,648.005 434.798,673.965 435.384,698.152 435.97,705.531 436.557,719.285 437.143,731.424 437.73,744 438.316,756.22 438.902,764.146 439.489,772.131 440.075,788.208 440.662,799.358 441.248,822.544 441.835,832.686 442.421,843.105 443.007,863.304 443.594,876.514 444.18,885.553 444.767,894.498 445.353,906.701 445.939,915.476 446.526,924.449 447.112,932.664 447.699,943.693 448.285,954.317 448.871,959.105 449.458,975.17 450.044,985.36 450.631,1000.15 451.217,1004.04 451.804,1010.76 452.39,1017.28 452.976,1021.05 453.563,1029.74 454.149,1033.17 454.736,1039.18 455.322,1045.06 455.908,1048.37 456.495,1054.34 457.081,1060.09 457.668,1061.36 458.254,1064.87 458.84,1072.99 459.427,1084.65 460.013,1085.3 460.6,1094.49 461.186,1097.24 461.773,1104.19 462.359,1110.9 462.945,1115.14 463.532,1115.27 464.118,1117.44 464.705,1117.99 465.291,1122.61 465.877,1130.68 466.464,1134.48 467.05,1140.13 467.637,1143.72 468.223,1148.98 468.809,1154.3 469.396,1155.75 469.982,1158.79 470.569,1161.9 471.155,1166.83 471.742,1175.05 472.328,1179.53 472.914,1185.46 473.501,1187.96 474.087,1186.48 474.674,1187.1 475.26,1191.16 475.846,1189.96 476.433,1192.49 477.019,1193.04 477.606,1195.11 478.192,1195.69 478.778,1194.75 479.365,1198.67 479.951,1202.46 480.538,1202.94 481.124,1207 481.711,1208.91 482.297,1208.84 482.883,1210.64 483.47,1212.2 484.056,1212.32 484.643,1215.96 485.229,1217.43 485.815,1218.96 486.402,1220.3 486.988,1223.15 487.575,1222.73 488.161,1224.17 488.748,1224.25 489.334,1223.9 489.92,1226.67 490.507,1228.19 491.093,1227.7 491.68,1227.28 492.266,1227.11 492.852,1230.08 493.439,1227.91 494.025,1227.55 494.612,1228.64 495.198,1229.74 495.784,1232.65 496.371,1236.72 496.957,1237.85 497.544,1234.09 498.13,1233.42 498.717,1234.1 499.303,1234.99 499.889,1233.08 500.476,1234.38 501.062,1240.26 501.649,1242.25 502.235,1241.22 502.821,1240.34 503.408,1241.33 503.994,1243.6 504.581,1241.06 505.167,1240.31 505.753,1239.33 506.34,1240.07 506.926,1241.01 507.513,1241.43 508.099,1239.33 508.686,1237.43 509.272,1236.58 509.858,1234.34 510.445,1235.61 511.031,1234.99 511.618,1231.66 512.204,1233.02 512.79,1232.91 513.377,1234.22 513.963,1235.18 514.55,1234.48 515.136,1235.26 515.722,1235.05 516.309,1233.39 516.895,1234.87 517.482,1240.32 518.068,1239.56 518.655,1233.08 519.241,1234.34 519.827,1234.01 520.414,1235.2 521,1233.41 521.587,1233.36 522.173,1233.24 522.759,1236.08 523.346,1237.1 523.932,1236.64 524.519,1237.58 525.105,1236.82 525.691,1234.9 526.278,1234.33 526.864,1235.4 527.451,1233.57 528.037,1231.84 528.624,1231.65 529.21,1232.78 529.796,1232.76 530.383,1232.49 530.969,1236.61 531.556,1235.84 532.142,1236.84 532.728,1234.98 533.315,1237.36 533.901,1239.39 534.488,1240.06 535.074,1245.33 535.661,1246.92 536.247,1250.53 536.833,1245.13 537.42,1246.83 538.006,1244.55 538.593,1246.69 539.179,1242.59 539.765,1241.79 540.352,1242.66 540.938,1240.47 541.525,1239.75 542.111,1237.45 542.697,1238.64 543.284,1236.64 543.87,1236.2 544.457,1234.18 545.043,1236.75 545.63,1237.52 546.216,1239.81 546.802,1237.77 547.389,1236.9 547.975,1234.72 548.562,1235.57 549.148,1234.93 549.734,1235.74 550.321,1236.52 550.907,1235.84 551.494,1233.78 552.08,1231.66 552.666,1234.23 553.253,1235.29 553.839,1234.92 554.426,1234.62 555.012,1235.63 555.599,1234.85 556.185,1235.8 556.771,1239.83 557.358,1243.47 557.944,1244.07 558.531,1243.33 559.117,1245.37 559.703,1245.59 560.29,1244.36 560.876,1240.43 561.463,1236.6 562.049,1235.76 562.635,1235.12 563.222,1233.17 563.808,1231.04 564.395,1232.01 564.981,1229.87 565.568,1231.02 566.154,1229.12 566.74,1232.95 567.327,1232.34 567.913,1233.36 568.5,1232.46 569.086,1234.72 569.672,1235.55 570.259,1234.91 570.845,1232.87 571.432,1235.26 572.018,1234.73 572.605,1233.89 573.191,1234.76 573.777,1234.24 574.364,1234.9 574.95,1234.16 575.537,1236.36 576.123,1241.24 576.709,1235.78 577.296,1234.89 577.882,1235.59 578.469,1236.35 579.055,1237.31 579.641,1237.96 580.228,1234.38 580.814,1234 581.401,1231.55 581.987,1231.38 582.574,1233.56 583.16,1232.63 583.746,1230.84 584.333,1230.12 584.919,1226.76 585.506,1229.47 586.092,1230.69 586.678,1231.72 587.265,1233.91 587.851,1233.29 588.438,1231.09 589.024,1229.04 589.61,1228.62 590.197,1228.25 590.783,1225.18 591.37,1223.67 591.956,1224.95 592.543,1224.55 593.129,1222.49 593.715,1219.4 594.302,1219.66 594.888,1221.17 595.475,1221.28 596.061,1219.53 596.647,1217.84 597.234,1222.22 597.82,1223.47 598.407,1224.86 598.993,1223.36 599.579,1224.75 600.166,1227.47 600.752,1228.78 601.339,1227.03 601.925,1228 602.512,1226.38 603.098,1227.88 603.684,1226.32 604.271,1224.68 604.857,1222.99 605.444,1225.91 606.03,1225.53 606.616,1226.35 607.203,1225.91 607.789,1225.6 608.376,1226.68 608.962,1227.52 609.548,1228.17 610.135,1227.45 610.721,1228.38 611.308,1227.79 611.894,1225.94 612.481,1225.75 613.067,1225.33 613.653,1224.76 614.24,1225.87 614.826,1222.94 615.413,1222.72 615.999,1222.4 616.585,1222.15 617.172,1223.45 617.758,1221.54 618.345,1221.43 618.931,1221.48 619.518,1224.31 620.104,1225.66 620.69,1225.18 621.277,1223.25 621.863,1220.09 622.45,1219.61 623.036,1221.25 623.622,1225.33 624.209,1226.39 624.795,1228.75 625.382,1231.19 625.968,1229.4 626.554,1231.71 627.141,1229.57 627.727,1231.56 628.314,1229.1 628.9,1225.11 629.487,1224.68 630.073,1224.45 630.659,1225.45 631.246,1229.21 631.832,1227.22 632.419,1228.18 633.005,1230.4 633.591,1229.94 634.178,1227.72 634.764,1225.58 635.351,1224.93 635.937,1223.07 636.523,1222.57 637.11,1220.77 637.696,1220.27 638.283,1222.88 638.869,1222.44 639.456,1222.23 640.042,1217.73 640.628,1216.21 641.215,1217.62 641.801,1218.94 642.388,1217.31 642.974,1219.08 643.56,1217.79 644.147,1219.09 644.733,1218.76 645.32,1221.22 645.906,1221.09 646.492,1222.66 647.079,1222.37 647.665,1223.24 648.252,1225.36 648.838,1226.31 649.425,1224.4 650.011,1222.6 650.597,1222.58 651.184,1225.02 651.77,1221.7 652.357,1222.7 652.943,1221.93 653.529,1218.52 654.116,1219.98 654.702,1218.13 655.289,1216.65 655.875,1216.71 656.462,1212.33 657.048,1212.54 657.634,1210.96 658.221,1214.07 658.807,1211.11 659.394,1209.87 659.98,1213.21 660.566,1210.36 661.153,1211.99 661.739,1212.1 662.326,1211 662.912,1209.69 663.498,1209.9 664.085,1215.9 664.671,1214.19 665.258,1212.94 665.844,1213.11 666.431,1213.18 667.017,1213.01 667.603,1207.59 668.19,1206.39 668.776,1206.75 669.363,1207.13 669.949,1207.49 670.535,1210.76 671.122,1211.06 671.708,1209.75 672.295,1209.63 672.881,1210.05 673.467,1209.16 674.054,1212.23 674.64,1213.66 675.227,1216.52 675.813,1216.29 676.4,1217.38 676.986,1219 677.572,1218.61 678.159,1217.25 678.745,1215.58 679.332,1215.56 679.918,1214.13 680.504,1213.96 681.091,1216.66 681.677,1217.74 682.264,1216.26 682.85,1216.26 683.436,1214.57 684.023,1218.97 684.609,1218.61 685.196,1218.41 685.782,1219.88 686.369,1222.23 686.955,1220.42 687.541,1219.87 688.128,1216.33 688.714,1214.48 689.301,1218.89 689.887,1215.87 690.473,1213.99 691.06,1213.92 691.646,1213.89 692.233,1212.73 692.819,1211.03 693.405,1211.34 693.992,1214.08 694.578,1214.18 695.165,1212.84 695.751,1212.87 696.338,1214.31 696.924,1212.97 697.51,1213.11 698.097,1215.91 698.683,1217.03 699.27,1216.86 699.856,1218.58 700.442,1219.8 701.029,1216.32 701.615,1216.08 702.202,1214.5 702.788,1214.33 703.375,1214.36 703.961,1217.1 704.547,1218.17 705.134,1218.1 705.72,1216.41 706.307,1217.93 706.893,1218.91 707.479,1218.75 708.066,1216.72 708.652,1217.81 709.239,1214.52 709.825,1214.41 710.411,1211.27 710.998,1213.02 711.584,1214.57 712.171,1216.06 712.757,1214.77 713.344,1214.77 713.93,1214.28 714.516,1214.21 715.103,1214.64 715.689,1215.75 716.276,1221.72 716.862,1225.52 717.448,1230.61 718.035,1229.57 718.621,1227.37 719.208,1224.76 719.794,1224.23 720.38,1223.52 720.967,1224.49 721.553,1222.42 722.14,1221.83 722.726,1220.98 723.313,1220.88 723.899,1221.76 724.485,1220.89 725.072,1223.2 725.658,1221.22 726.245,1216.62 726.831,1216.36 727.417,1216.15 728.004,1217.42 728.59,1218.55 729.177,1219.62 729.763,1221.79 730.349,1223.04 730.936,1219.83 731.522,1219.49 732.109,1219.36 732.695,1215.83 733.282,1215.61 733.868,1215.41 734.454,1216.49 735.041,1214.67 735.627,1214.45 736.214,1214.39 736.8,1215.74 737.386,1215.28 737.973,1212.19 738.559,1213.41 739.146,1214.74 739.732,1211.68 740.318,1210.03 740.905,1208.88 741.491,1209.05 742.078,1204.95 742.664,1205.57 743.251,1205.9 743.837,1207.41 744.423,1209.07 745.01,1210.46 745.596,1211.89 746.183,1212.09 746.769,1209.39 747.355,1209.55 747.942,1209.45 748.528,1210.99 749.115,1212.41 749.701,1211.14 750.288,1213.98 750.874,1213.85 751.46,1212.18 752.047,1219.65 752.633,1219.09 753.22,1218.71 753.806,1218.36 754.392,1215.18 754.979,1212.24 755.565,1210.74 756.152,1212.41 756.738,1215.36 757.324,1211.98 757.911,1211.81 758.497,1213.05 759.084,1211.62 759.67,1214.24 760.257,1212.71 760.843,1216.85 761.429,1213.74 762.016,1213.64 762.602,1213.42 763.189,1211.96 763.775,1213.53 764.361,1214.93 764.948,1215.96 765.534,1217.1 766.121,1218.25 766.707,1215.08 767.293,1214.56 767.88,1214.45 768.466,1213.01 769.053,1212.7 769.639,1212.83 770.226,1211.1 770.812,1212.59 771.398,1213.81 771.985,1216.44 772.571,1216.26 773.158,1216 773.744,1214.33 774.33,1215.65 774.917,1212.67 775.503,1214 776.09,1213.81 776.676,1213.72 777.262,1208.94 777.849,1209.22 778.435,1209.55 779.022,1209.27 779.608,1209.74 780.195,1209.99 780.781,1208.64 781.367,1208.44 781.954,1211.47 782.54,1214.6 783.127,1214.7 783.713,1213.02 784.299,1212.66 784.886,1209.79 785.472,1208.04 786.059,1205.2 786.645,1203.91 787.232,1199.95 787.818,1202.13 788.404,1204.18 788.991,1204.7 789.577,1203.49 790.164,1201.25 790.75,1206 791.336,1206.18 791.923,1205.05 792.509,1206.73 793.096,1205.53 793.682,1204.41 794.268,1204.42 794.855,1200.28 795.441,1200.6 796.028,1203.92 796.614,1200.42 797.201,1204 797.787,1204.46 798.373,1204.47 798.96,1202.11 799.546,1204.09 800.133,1205.69 800.719,1206.27 801.305,1206.33 801.892,1205.38 802.478,1205.65 803.065,1204.52 803.651,1206.31 804.237,1206.65 804.824,1208.19 805.41,1207.96 805.997,1208.05 806.583,1209.59 807.17,1209.44 807.756,1208.21 808.342,1208.32 808.929,1209.81 809.515,1207.03 810.102,1207.35 810.688,1209.04 811.274,1208.92 811.861,1206.26 812.447,1204.99 813.034,1208.26 813.62,1206.96 814.206,1208.91 814.793,1208.74 815.379,1205.76 815.966,1207.56 816.552,1209.09 817.139,1210.45 817.725,1208.92 818.311,1207.82 818.898,1207.8 819.484,1209.51 820.071,1209.5 820.657,1207.97 821.243,1209.42 821.83,1210.77 822.416,1212.05 823.003,1210.38 823.589,1211.78 824.175,1211.87 824.762,1211.93 825.348,1207.73 825.935,1210.92 826.521,1212.42 827.108,1209.45 827.694,1210.6 828.28,1211.94 828.867,1210.42 829.453,1211.69 830.04,1211.5 830.626,1208.61 831.212,1212.91 831.799,1215.7 832.385,1215.5 832.972,1213.78 833.558,1217.76 834.145,1217.27 834.731,1219.61 835.317,1220.61 835.904,1221.41 836.49,1219.39 837.077,1218.92 837.663,1220.11 838.249,1222.61 838.836,1222.22 839.422,1223.26 840.009,1218.36 840.595,1218.26 841.181,1216.38 841.768,1217.58 842.354,1216.77 842.941,1217.6 843.527,1218.81 844.114,1218.06 844.7,1217.86 845.286,1216.02 845.873,1211.16 846.459,1209.63 847.046,1206.75 847.632,1208.53 848.218,1208.72 848.805,1208.7 849.391,1207.33 849.978,1207.53 850.564,1207.64 851.15,1207.69 851.737,1207.83 852.323,1206.48 852.91,1206.81 853.496,1205.37 854.083,1204.01 854.669,1204.79 855.255,1203.32 855.842,1202.13 856.428,1202.41 857.015,1202.77 857.601,1204.52 858.187,1209.37 858.774,1210.79 859.36,1210.66 859.947,1210.46 860.533,1213.08 861.119,1214.33 861.706,1215.37 862.292,1215.22 862.879,1213.5 863.465,1212.02 864.052,1210.4 864.638,1211.93 865.224,1213.18 865.811,1214.23 866.397,1213.76 866.984,1213.67 867.57,1212.01 868.156,1209.06 868.743,1209.14 869.329,1209.36 869.916,1210.63 870.502,1210.36 871.089,1210.66 871.675,1212.32 872.261,1211.99 872.848,1213.4 873.434,1211.97 874.021,1212.11 874.607,1211.85 875.193,1211.63 875.78,1213.09 876.366,1211.72 876.953,1212.91 877.539,1212.73 878.125,1209.86 878.712,1209.85 879.298,1209.94 879.885,1211.64 880.471,1211.63 881.058,1210.03 881.644,1210.04 882.23,1210 882.817,1207.19 883.403,1210.24 883.99,1210.19 884.576,1208.48 885.162,1208.68 885.749,1209.78 886.335,1213.91 886.922,1216.07 887.508,1212.61 888.094,1213.99 888.681,1215.3 889.267,1216.54 889.854,1220.57 890.44,1220.13 891.027,1218.01 891.613,1216.22 892.199,1212.6 892.786,1212.49 893.372,1207.8 893.959,1209.22 894.545,1206.33 895.131,1206.33 895.718,1205.05 896.304,1206.66 896.891,1206.77 897.477,1206.75 898.063,1205.37 898.65,1205.86 899.236,1206.04 899.823,1206.06 900.409,1208.77 900.996,1211.46 901.582,1211.21 902.168,1211 902.755,1212.07 903.341,1211.84 903.928,1211.64 904.514,1210.18 905.1,1211.4 905.687,1210.92 906.273,1211.13 906.86,1212.5 907.446,1214.94 908.032,1213.56 908.619,1213.11 909.205,1214.38 909.792,1212.6 910.378,1209.51 910.965,1208 911.551,1207.82 912.137,1209.3 912.724,1209.21 913.31,1208.95 913.897,1210.52 914.483,1210.14 915.069,1206.94 915.656,1206.98 916.242,1206.96 916.829,1208.41 917.415,1205.73 918.002,1204.22 918.588,1208.84 919.174,1210.3 919.761,1210.29 920.347,1208.73 920.934,1207.21 921.52,1205.89 922.106,1204.7 922.693,1204.56 923.279,1204.53 923.866,1203.2 924.452,1198.91 925.038,1202.5 925.625,1201.39 926.211,1198.95 926.798,1201.43 927.384,1205.89 927.971,1206.13 928.557,1206.49 929.143,1209.43 929.73,1206.66 930.316,1209.68 930.903,1209.96 931.489,1209.83 932.075,1211.16 932.662,1209.73 933.248,1209.61 933.835,1205.45 934.421,1210.26 935.007,1211.64 935.594,1211.48 936.18,1211.33 936.767,1212.41 937.353,1212.44 937.94,1209.19 938.526,1211.75 939.112,1210.39 939.699,1204.65 940.285,1203.55 940.872,1206.89 941.458,1205.67 942.044,1207.39 942.631,1207.26 943.217,1211.86 943.804,1211.7 944.39,1212.95 944.976,1210 945.563,1215.49 946.149,1210.89 946.736,1210.58 947.322,1212 947.909,1213.36 948.495,1215.7 949.081,1215.53 949.668,1215.32 950.254,1215.15 950.841,1213.27 951.427,1214.23 952.013,1212.13 952.6,1209.06 953.186,1211.63 953.773,1211.28 954.359,1211.35 954.945,1209.64 955.532,1205.47 956.118,1205.77 956.705,1207.2 957.291,1207.31 957.878,1207.36 958.464,1205.84 959.05,1204.49 959.637,1203.34 960.223,1203.4 960.81,1205.25 961.396,1206.85 961.982,1208.64 962.569,1208.91 963.155,1208.82 963.742,1206.12 964.328,1208.94 964.915,1208.86 965.501,1209.14 966.087,1208.89 966.674,1210.63 967.26,1212.01 967.847,1210.46 968.433,1207.35 969.019,1205.98 969.606,1204.51 970.192,1201.81 970.779,1200.85 971.365,1200.05 971.951,1203.23 972.538,1206.53 973.124,1209.43 973.711,1210.76 974.297,1209.08 974.884,1206.11 975.47,1205.26 976.056,1202.38 976.643,1205.56 977.229,1207.06 977.816,1207.24 978.402,1207.71 978.988,1211.71 979.575,1213.01 980.161,1212.69 980.748,1212.5 981.334,1212.33 981.92,1210.67 982.507,1210.67 983.093,1209.08 983.68,1209.1 984.266,1207.83 984.853,1205.3 985.439,1205.52 986.025,1205.54 986.612,1204.25 987.198,1201.62 987.785,1203.2 988.371,1203.44 988.957,1205.26 989.544,1205.63 990.13,1206.92 990.717,1205.66 991.303,1203.17 991.889,1203.55 992.476,1202.42 993.062,1202.76 993.649,1202.84 994.235,1200.2 994.822,1198.97 995.408,1200.81 995.994,1202.66 996.581,1200.16 997.167,1199.46 997.754,1202.95 998.34,1200.28 998.926,1200.69 999.513,1201.1 1000.1,1203.15 1000.69,1206.15 1001.27,1203.28 1001.86,1206.6 1002.44,1209.41 1003.03,1209.61 1003.62,1208.16 1004.2,1209.39 1004.79,1207.99 1005.38,1209.31 1005.96,1207.76 1006.55,1207.77 1007.14,1210.75 1007.72,1206.35 1008.31,1206.65 1008.9,1205.12 1009.48,1206.56 1010.07,1211.01 1010.65,1206.82 1011.24,1208.24 1011.83,1210.99 1012.41,1210.95 1013,1209.5 1013.59,1212.13 1014.17,1210.45 1014.76,1211.94 1015.35,1211.68 1015.93,1214.3 1016.52,1213.9 1017.11,1212.15 1017.69,1213.44 1018.28,1216.19 1018.86,1214.36 1019.45,1211.11 1020.04,1210.92 1020.62,1210.82 1021.21,1214.72 1021.8,1212.62 1022.38,1212.22 1022.97,1209.2 1023.56,1209.37 1024.14,1209.32 1024.73,1211.95 1025.32,1209.95 1025.9,1208.5 1026.49,1209.67 1027.07,1205.35 1027.66,1207.05 1028.25,1208.69 1028.83,1207.26 1029.42,1210.09 1030.01,1210.13 1030.59,1211.65 1031.18,1214.2 1031.77,1215.13 1032.35,1216.12 1032.94,1212.8 1033.52,1214.37 1034.11,1212.5 1034.7,1210.87 1035.28,1212.23 1035.87,1212.1 1036.46,1213.66 1037.04,1216.01 1037.63,1217.04 1038.22,1215.23 1038.8,1215 1039.39,1212.71 1039.98,1210.98 1040.56,1207.98 1041.15,1206.33 1041.73,1205.01 1042.32,1205.32 1042.91,1202.61 1043.49,1201.67 1044.08,1203.7 1044.67,1204.07 1045.25,1205.83 1045.84,1204.59 1046.43,1201.95 1047.01,1203.73 1047.6,1205.61 1048.19,1205.65 1048.77,1207.43 1049.36,1208.71 1049.94,1208.56 1050.53,1212.85 1051.12,1214.14 1051.7,1213.79 1052.29,1213.56 1052.88,1213.24 1053.46,1210.23 1054.05,1210.03 1054.64,1207.17 1055.22,1208.69 1055.81,1205.84 1056.39,1207.52 1056.98,1210.04 1057.57,1208.51 1058.15,1208.57 1058.74,1211.65 1059.33,1212.71 1059.91,1212.29 1060.5,1210.39 1061.09,1210.2 1061.67,1208.64 1062.26,1208.62 1062.85,1208.64 1063.43,1208.43 1064.02,1206.85 1064.6,1208.32 1065.19,1204.11 1065.78,1202.73 1066.36,1202.79 1066.95,1203.08 1067.54,1201.69 1068.12,1200.48 1068.71,1200.86 1069.3,1199.68 1069.88,1200.02 1070.47,1201.77 1071.06,1200.41 1071.64,1199.75 1072.23,1202.12 1072.81,1202.36 1073.4,1202.63 1073.99,1201.78 1074.57,1203.69 1075.16,1206.77 1075.75,1207.9 1076.33,1208.08 1076.92,1209.33 1077.51,1209.4 1078.09,1209.43 1078.68,1213.44 1079.26,1214.65 1079.85,1211.39 1080.44,1208.2 1081.02,1211.05 1081.61,1209.83 1082.2,1208.15 1082.78,1209.4 1083.37,1209.43 1083.96,1209.35 1084.54,1211.94 1085.13,1211.59 1085.72,1211.43 1086.3,1211.14 1086.89,1211.35 1087.47,1209.71 1088.06,1209.61 1088.65,1209.57 1089.23,1208.38 1089.82,1208.2 1090.41,1205.64 1090.99,1208.84 1091.58,1210.31 1092.17,1211.39 1092.75,1206.65 1093.34,1206.81 1093.93,1209.57 1094.51,1205.67 1095.1,1208.74 1095.68,1208.62 1096.27,1207.37 1096.86,1209.07 1097.44,1208.98 1098.03,1211.9 1098.62,1208.71 1099.2,1211.72 1099.79,1213.03 1100.38,1214.26 1100.96,1212.28 1101.55,1210.57 1102.14,1210.44 1102.72,1210.17 1103.31,1211.65 1103.89,1213.23 1104.48,1211.57 1105.07,1212.76 1105.65,1209.61 1106.24,1209.36 1106.83,1207.86 1107.41,1206.31 1108,1203.4 1108.59,1203.7 1109.17,1204.2 1109.76,1205.97 1110.34,1207.48 1110.93,1208.76 1111.52,1210.12 1112.1,1207.26 1112.69,1209.99 1113.28,1208.5 1113.86,1205.58 1114.45,1205.56 1115.04,1206.85 1115.62,1208.18 1116.21,1208.28 1116.8,1208.36 1117.38,1208.16 1117.97,1203.94 1118.55,1207.14 1119.14,1211.55 1119.73,1213.15 1120.31,1212.67 1120.9,1216.51 1121.49,1217.8 1122.07,1214.18 1122.66,1212.37 1123.25,1213.45 1123.83,1216.22 1124.42,1214.55 1125.01,1211.39 1125.59,1211.06 1126.18,1209.67 1126.76,1206.76 1127.35,1205.93 1127.94,1206.21 1128.52,1205.14 1129.11,1208.02 1129.7,1209.24 1130.28,1208.89 1130.87,1209 1131.46,1207.46 1132.04,1206.1 1132.63,1201.95 1133.21,1202.58 1133.8,1202.97 1134.39,1203.03 1134.97,1203.16 1135.56,1204.88 1136.15,1203.4 1136.73,1204.84 1137.32,1205.03 1137.91,1203.68 1138.49,1207.06 1139.08,1205.67 1139.67,1203.06 1140.25,1201.69 1140.84,1200.35 1141.42,1203.62 1142.01,1202.29 1142.6,1201.31 1143.18,1203.18 1143.77,1205.18 1144.36,1206.99 1144.94,1205.42 1145.53,1206.85 1146.12,1205.5 1146.7,1206.91 1147.29,1207.35 1147.88,1204.31 1148.46,1205.71 1149.05,1206.1 1149.63,1208.91 1150.22,1207.29 1150.81,1205.73 1151.39,1204.56 1151.98,1204.7 1152.57,1205.06 1153.15,1203.72 1153.74,1202.67 1154.33,1203.1 1154.91,1203.47 1155.5,1204.75 1156.09,1206.08 1156.67,1206.04 1157.26,1206.09 1157.84,1204.53 1158.43,1204.63 1159.02,1204.7 1159.6,1209.12 1160.19,1212.04 1160.78,1210.08 1161.36,1211.43 1161.95,1214.07 1162.54,1215.6 1163.12,1212.07 1163.71,1210.48 1164.29,1210.44 1164.88,1211.33 1165.47,1214.1 1166.05,1214.94 1166.64,1215.91 1167.23,1216.74 1167.81,1219.23 1168.4,1218.85 1168.99,1216.78 1169.57,1216.26 1170.16,1214.36 1170.75,1213.96 1171.33,1215.6 1171.92,1215.26 1172.5,1213.23 1173.09,1212.58 1173.68,1213.52 1174.26,1210.48 1174.85,1213.17 1175.44,1211.58 1176.02,1208.5 1176.61,1206.98 1177.2,1207.41 1177.78,1205.81 1178.37,1207.24 1178.96,1208.73 1179.54,1206.02 1180.13,1204.91 1180.71,1207.81 1181.3,1210.44 1181.89,1208.71 1182.47,1207.34 1183.06,1207.25 1183.65,1208.45 1184.23,1208.49 1184.82,1208.34 1185.41,1204.24 1185.99,1206.18 1186.58,1209.08 1187.16,1210.59 1187.75,1210.43 1188.34,1209.98 1188.92,1212.66 1189.51,1210.98 1190.1,1214.81 1190.68,1212.78 1191.27,1211.02 1191.86,1209.25 1192.44,1212.09 1193.03,1209.2 1193.62,1210.75 1194.2,1207.85 1194.79,1203.52 1195.37,1203.59 1195.96,1202.18 1196.55,1203.56 1197.13,1199.35 1197.72,1200.21 1198.31,1197.78 1198.89,1199.9 1199.48,1201.8 1200.07,1200.96 1200.65,1201.23 1201.24,1202.99 1201.83,1200.42 1202.41,1200.69 1203,1201.18 1203.58,1200.08 1204.17,1196.09 1204.76,1196.79 1205.34,1191.75 1205.93,1191.35 1206.52,1192.1 1207.1,1193.11 1207.69,1192.71 1208.28,1196.48 1208.86,1195.88 1209.45,1196.66 1210.03,1197.18 1210.62,1200.56 1211.21,1202.37 1211.79,1203.99 1212.38,1204.26 1212.97,1205.72 1213.55,1207.25 1214.14,1207.15 1214.73,1210.02 1215.31,1212.56 1215.9,1215.61 1216.49,1213.88 1217.07,1213.67 1217.66,1212.06 1218.24,1213.38 1218.83,1213.47 1219.42,1214.65 1220,1215.46 1220.59,1215.16 1221.18,1214.8 1221.76,1216.02 1222.35,1212.15 1222.94,1210.44 1223.52,1210.24 1224.11,1210.18 1224.7,1208.68 1225.28,1207.35 1225.87,1206.15 1226.45,1206.28 1227.04,1205.27 1227.63,1203.87 1228.21,1204.19 1228.8,1205.4 1229.39,1205.66 1229.97,1207.26 1230.56,1205.99 1231.15,1203.09 1231.73,1203.5 1232.32,1203.59 1232.91,1203.42 1233.49,1203.65 1234.08,1203.69 1234.66,1205.39 1235.25,1208.38 1235.84,1205.48 1236.42,1205.62 1237.01,1205.73 1237.6,1204.44 1238.18,1206.07 1238.77,1207.37 1239.36,1205.92 1239.94,1206.07 1240.53,1203.04 1241.11,1206.36 1241.7,1205.06 1242.29,1206.63 1242.87,1208.14 1243.46,1206.52 1244.05,1206.43 1244.63,1206.39 1245.22,1201.91 1245.81,1203.55 1246.39,1204.94 1246.98,1206.34 1247.57,1206.44 1248.15,1204.81 1248.74,1206.53 1249.32,1209.15 1249.91,1206.28 1250.5,1204.94 1251.08,1207.84 1251.67,1207.75 1252.26,1207.92 1252.84,1208.17 1253.43,1209.8 1254.02,1207.97 1254.6,1207.94 1255.19,1209.4 1255.78,1210.3 1256.36,1211.73 1256.95,1210.23 1257.53,1211.44 1258.12,1209.73 1258.71,1213.78 1259.29,1210.69 1259.88,1210.39 1260.47,1213.12 1261.05,1211.7 1261.64,1213.02 1262.23,1214.11 1262.81,1211.01 1263.4,1210.94 1263.98,1210.71 1264.57,1210.3 1265.16,1211.54 1265.74,1208.65 1266.33,1207.12 1266.92,1204.21 1267.5,1201.34 1268.09,1201.68 1268.68,1202.13 1269.26,1206.43 1269.85,1209.11 1270.44,1208.89 1271.02,1208.84 1271.61,1211.61 1272.19,1208.48 1272.78,1209.77 1273.37,1209.89 1273.95,1212.51 1274.54,1216.55 1275.13,1217.82 1275.71,1215.99 1276.3,1218.64 1276.89,1215.09 1277.47,1216.08 1278.06,1215.78 1278.65,1211.22 1279.23,1210.92 1279.82,1209.29 1280.4,1208.98 1280.99,1206.05 1281.58,1204.46 1282.16,1201.53 1282.75,1201.93 1283.34,1200.79 1283.92,1202.46 1284.51,1201.17 1285.1,1204.35 1285.68,1204.52 1286.27,1203.12 1286.86,1203.72 1287.44,1208.2 1288.03,1207.97 1288.61,1205.03 1289.2,1206.68 1289.79,1206.46 1290.37,1208.08 1290.96,1207.83 1291.55,1209.21 1292.13,1209.04 1292.72,1209 1293.31,1211.76 1293.89,1211.51 1294.48,1208.61 1295.06,1208.72 1295.65,1210.03 1296.24,1205.63 1296.82,1206.96 1297.41,1206.96 1298,1205.23 1298.58,1208.32 1299.17,1211.54 1299.76,1211.15 1300.34,1206.72 1300.93,1202.42 1301.52,1203 1302.1,1204.74 1302.69,1204.73 1303.27,1206.31 1303.86,1208 1304.45,1207.77 1305.03,1208.09 1305.62,1208.34 1306.21,1206.74 1306.79,1211.24 1307.38,1210.92 1307.97,1211.98 1308.55,1213.43 1309.14,1211.5 1309.73,1212.44 1310.31,1211.84 1310.9,1213.18 1311.48,1211.45 1312.07,1209.96 1312.66,1208.5 1313.24,1209.88 1313.83,1208.43 1314.42,1211.34 1315,1211.28 1315.59,1209.73 1316.18,1208.3 1316.76,1208.46 1317.35,1207.06 1317.93,1208.77 1318.52,1208.78 1319.11,1207.19 1319.69,1204.51 1320.28,1203.06 1320.87,1203.35 1321.45,1203.53 1322.04,1203.85 1322.63,1205.86 1323.21,1205.94 1323.8,1204.69 1324.39,1201.83 1324.97,1202.18 1325.56,1203.79 1326.14,1204.11 1326.73,1202.91 1327.32,1204.56 1327.9,1207.52 1328.49,1208.7 1329.08,1210.32 1329.66,1207.2 1330.25,1205.62 1330.84,1206.88 1331.42,1211 1332.01,1213.83 1332.6,1219.03 1333.18,1214.33 1333.77,1215.6 1334.35,1209.31 1334.94,1206.56 1335.53,1206.73 1336.11,1208.12 1336.7,1208.07 1337.29,1212.16 1337.87,1213.19 1338.46,1213.98 1339.05,1210.97 1339.63,1213.64 1340.22,1213.5 1340.8,1212.78 1341.39,1211.31 1341.98,1211.27 1342.56,1211.14 1343.15,1212.44 1343.74,1210.77 1344.32,1213.21 1344.91,1211.48 1345.5,1209.91 1346.08,1208.05 1346.67,1205.11 1347.26,1200.86 1347.84,1198.65 1348.43,1200.67 1349.01,1201.24 1349.6,1201.35 1350.19,1201.39 1350.77,1201.63 1351.36,1200.58 1351.95,1200.78 1352.53,1199.66 1353.12,1202.87 1353.71,1201.24 1354.29,1199.99 1354.88,1198.96 1355.47,1198.42 1356.05,1198.7 1356.64,1202.21 1357.22,1205.45 1357.81,1204 1358.4,1205.6 1358.98,1205.79 1359.57,1206.06 1360.16,1207.57 1360.74,1207.64 1361.33,1207.63 1361.92,1208.81 1362.5,1211.86 1363.09,1206.13 1363.68,1207.95 1364.26,1209.29 1364.85,1209.16 1365.43,1207.39 1366.02,1205.96 1366.61,1207.64 1367.19,1209.22 1367.78,1209.03 1368.37,1210.74 1368.95,1209.51 1369.54,1212.56 1370.13,1216.63 1370.71,1216.03 1371.3,1215.17 1371.88,1217.54 1372.47,1215.44 1373.06,1215.18 1373.64,1211.89 1374.23,1210.2 1374.82,1207.63 1375.4,1207.51 1375.99,1204.55 1376.58,1204.53 1377.16,1202.25 1377.75,1205.47 1378.34,1204.16 1378.92,1207.09 1379.51,1207.03 1380.09,1207 1380.68,1208.71 1381.27,1207.28 1381.85,1210.22 1382.44,1207.01 1383.03,1208.55 1383.61,1202.78 1384.2,1202.78 1384.79,1203.21 1385.37,1202.04 1385.96,1205 1386.55,1205.25 1387.13,1203.8 1387.72,1202.63 1388.3,1199.91 1388.89,1200.17 1389.48,1197.71 1390.06,1199.27 1390.65,1199.86 1391.24,1202.15 1391.82,1201 1392.41,1199.77 1393,1200.24 1393.58,1202.17 1394.17,1200.78 1394.75,1202.73 1395.34,1205.78 1395.93,1203.52 1396.51,1202.36 1397.1,1202.7 1397.69,1204.34 1398.27,1205.91 1398.86,1208.74 1399.45,1207.34 1400.03,1208.59 1400.62,1209.66 1401.21,1211.96 1401.79,1212.95 1402.38,1211.1 1402.96,1210.95 1403.55,1207.77 1404.14,1207.79 1404.72,1206.49 1405.31,1205.34 1405.9,1209.75 1406.48,1208.28 1407.07,1208.74 1407.66,1208.86 1408.24,1208.82 1408.83,1208.65 1409.42,1212.84 1410,1212.83 1410.59,1212.47 1411.17,1210.79 1411.76,1213.37 1412.35,1211.47 1412.93,1208.2 1413.52,1206.72 1414.11,1206.55 1414.69,1205.13 1415.28,1205.21 1415.87,1203.72 1416.45,1202.27 1417.04,1202.78 1417.63,1203.08 1418.21,1203.61 1418.8,1205.56 1419.38,1207.17 1419.97,1208.46 1420.56,1206.98 1421.14,1208.27 1421.73,1208.17 1422.32,1211.26 1422.9,1211.25 1423.49,1212.92 1424.08,1214.03 1424.66,1215.13 1425.25,1214.74 1425.83,1211.44 1426.42,1209.79 1427.01,1208.36 1427.59,1208.34 1428.18,1205.43 1428.77,1205.3 1429.35,1205.14 1429.94,1208.18 1430.53,1208.27 1431.11,1209.21 1431.7,1207.82 1432.29,1210.81 1432.87,1208 1433.46,1206.25 1434.04,1202 1434.63,1203.7 1435.22,1205.58 1435.8,1202.9 1436.39,1203.22 1436.98,1202.05 1437.56,1203.77 1438.15,1206.58 1438.74,1207.79 1439.32,1209.12 1439.91,1207.51 1440.5,1207.38 1441.08,1208.99 1441.67,1208.89 1442.25,1209.22 1442.84,1210.74 1443.43,1210.64 1444.01,1209.3 1444.6,1211.97 1445.19,1208.96 1445.77,1210.11 1446.36,1207.22 1446.95,1208.5 1447.53,1206.87 1448.12,1205.47 1448.7,1205.76 1449.29,1205.95 1449.88,1205.86 1450.46,1206.01 1451.05,1206.19 1451.64,1209.46 1452.22,1209.51 1452.81,1210.66 1453.4,1210.38 1453.98,1214.77 1454.57,1217.35 1455.16,1216.75 1455.74,1214.44 1456.33,1214 1456.91,1213.47 1457.5,1211.57 1458.09,1211.36 1458.67,1206.87 1459.26,1203.64 1459.85,1205.22 1460.43,1205.26 1461.02,1205.7 1461.61,1207.23 1462.19,1205.71 1462.78,1205.83 1463.37,1203.13 1463.95,1205.05 1464.54,1207.89 1465.12,1208 1465.71,1208.13 1466.3,1208.03 1466.88,1208.18 1467.47,1205.24 1468.06,1203.82 1468.64,1203.99 1469.23,1202.86 1469.82,1203.1 1470.4,1201.86 1470.99,1203.54 1471.57,1202.26 1472.16,1205.58 1472.75,1205.63 1473.33,1207.42 1473.92,1206.07 1474.51,1206.04 1475.09,1204.73 1475.68,1201.94 1476.27,1202.3 1476.85,1202.45 1477.44,1200.06 1478.03,1202.24 1478.61,1204.08 1479.2,1205.57 1479.78,1206.9 1480.37,1208.43 1480.96,1211.14 1481.54,1213.89 1482.13,1213.65 1482.72,1213.19 1483.3,1215.54 1483.89,1213.78 1484.48,1215 1485.06,1211.86 1485.65,1208.83 1486.24,1208.77 1486.82,1205.54 1487.41,1205.29 1487.99,1205.3 1488.58,1205.57 1489.17,1204.39 1489.75,1203.29 1490.34,1206.28 1490.93,1207.92 1491.51,1209.39 1492.1,1209.46 1492.69,1207.76 1493.27,1207.72 1493.86,1206.25 1494.45,1205.91 1495.03,1204.53 1495.62,1203.02 1496.2,1200.29 1496.79,1202.27 1497.38,1202.29 1497.96,1204.02 1498.55,1205.91 1499.14,1208.54 1499.72,1205.38 1500.31,1205.46 1500.9,1205.64 1501.48,1206.93 1502.07,1208.46 1502.65,1205.67 1503.24,1206.04 1503.83,1206.02 1504.41,1205.8 1505,1208.58 1505.59,1207.15 1506.17,1208.79 1506.76,1207.39 1507.35,1208.89 1507.93,1207.21 1508.52,1209.91 1509.11,1212.77 1509.69,1212.78 1510.28,1212.56 1510.86,1209.63 1511.45,1210.83 1512.04,1209.27 1512.62,1209.17 1513.21,1210.41 1513.8,1207.54 1514.38,1205.85 1514.97,1205.86 1515.56,1207.5 1516.14,1207.6 1516.73,1207.55 1517.32,1207.35 1517.9,1203.07 1518.49,1204.75 1519.07,1205.09 1519.66,1205.39 1520.25,1205.31 1520.83,1206.91 1521.42,1209.55 1522.01,1210.91 1522.59,1210.87 1523.18,1210.94 1523.77,1209.16 1524.35,1210.39 1524.94,1213 1525.52,1212.96 1526.11,1209.63 1526.7,1207.82 1527.28,1204.91 1527.87,1207.9 1528.46,1206.51 1529.04,1205.02 1529.63,1208 1530.22,1206.61 1530.8,1208.05 1531.39,1207.75 1531.98,1209.37 1532.56,1210.94 1533.15,1213.73 1533.73,1214.63 1534.32,1218.62 1534.91,1215.18 1535.49,1214.6 1536.08,1215.91 1536.67,1215.23 1537.25,1216.56 1537.84,1213.44 1538.43,1214.63 1539.01,1214.25 1539.6,1213.95 1540.19,1214.98 1540.77,1218.94 1541.36,1220.1 1541.94,1218.13 1542.53,1217.93 1543.12,1218.76 1543.7,1218.31 1544.29,1217.89 1544.88,1217.48 1545.46,1216.75 1546.05,1217.54 1546.64,1212.83 1547.22,1214.24 1547.81,1212.48 1548.4,1213.37 1548.98,1211.65 1549.57,1211.1 1550.15,1211.85 1550.74,1210.17 1551.33,1211.31 1551.91,1209.34 1552.5,1207.76 1553.09,1206.31 1553.67,1204.85 1554.26,1206.39 1554.85,1208.13 1555.43,1208.17 1556.02,1206.81 1556.6,1206.96 1557.19,1209.89 1557.78,1209.83 1558.36,1209.68 1558.95,1211.08 1559.54,1211.11 1560.12,1212.69 1560.71,1212.01 1561.3,1213.36 1561.88,1214.55 1562.47,1217.16 1563.06,1219.32 1563.64,1221.49 1564.23,1220.66 1564.81,1219.52 1565.4,1217.68 1565.99,1218.36 1566.57,1220.42 1567.16,1216.9 1567.75,1214.96 1568.33,1212.81 1568.92,1212.37 1569.51,1210.46 1570.09,1210.1 1570.68,1208.42 1571.27,1206.78 1571.85,1205.62 1572.44,1205.83 1573.02,1203.04 1573.61,1203.1 1574.2,1203.17 1574.78,1203.35 1575.37,1200.46 1575.96,1203.34 1576.54,1204.97 1577.13,1203.26 1577.72,1204.99 1578.3,1203.79 1578.89,1202.64 1579.47,1204.68 1580.06,1202.07 1580.65,1203.54 1581.23,1206.96 1581.82,1205.55 1582.41,1204.42 1582.99,1204.7 1583.58,1204.65 1584.17,1201.97 1584.75,1202.51 1585.34,1201.18 1585.93,1202.77 1586.51,1204.74 1587.1,1204.83 1587.68,1204.94 1588.27,1203.74 1588.86,1205.18 1589.44,1206.94 1590.03,1201.36 1590.62,1200.1 1591.2,1200.54 1591.79,1202.07 1592.38,1203.9 1592.96,1204.16 1593.55,1205.71 1594.14,1205.85 1594.72,1210.34 1595.31,1210.28 1595.89,1211.41 1596.48,1211.36 1597.07,1209.73 1597.65,1208.09 1598.24,1206.53 1598.83,1206.47 1599.41,1208.07 1600,1208 1600.59,1208.17 1601.17,1205.09 1601.76,1205.27 1602.34,1208.16 1602.93,1206.79 1603.52,1208.17 1604.1,1208.12 1604.69,1209.61 1605.28,1209.56 1605.86,1208.17 1606.45,1206.5 1607.04,1205.04 1607.62,1204.08 1608.21,1205.8 1608.8,1205.89 1609.38,1201.64 1609.97,1201.95 1610.55,1203.54 1611.14,1200.84 1611.73,1202.5 1612.31,1202.99 1612.9,1208.87 1613.49,1208.7 1614.07,1208.63 1614.66,1208.23 1615.25,1207.11 1615.83,1206.78 1616.42,1206.83 1617.01,1203.8 1617.59,1203.98 1618.18,1199.72 1618.76,1202.84 1619.35,1203.17 1619.94,1204.75 1620.52,1204.54 1621.11,1203.57 1621.7,1205.06 1622.28,1206.67 1622.87,1206.72 1623.46,1205.57 1624.04,1204.26 1624.63,1206.01 1625.22,1207.19 1625.8,1209.88 1626.39,1209.88 1626.97,1212.51 1627.56,1212.11 1628.15,1209.13 1628.73,1207.44 1629.32,1202.94 1629.91,1203.26 1630.49,1203.81 1631.08,1205.49 1631.67,1205.87 1632.25,1206.21 1632.84,1207.72 1633.42,1206.47 1634.01,1205.29 1634.6,1208.3 1635.18,1206.93 1635.77,1206.68 1636.36,1206.73 1636.94,1205.52 1637.53,1205.85 1638.12,1207.52 1638.7,1206.05 1639.29,1205.94 1639.88,1206.11 1640.46,1209.33 1641.05,1209.35 1641.63,1209.05 1642.22,1209.01 1642.81,1210.14 1643.39,1210.14 1643.98,1210.15 1644.57,1210.13 1645.15,1210.1 1645.74,1211.37 1646.33,1210.95 1646.91,1212.06 1647.5,1212.11 1648.09,1212.03 1648.67,1207.72 1649.26,1209.17 1649.84,1213.32 1650.43,1213.26 1651.02,1211.23 1651.6,1209.99 1652.19,1211.33 1652.78,1209.7 1653.36,1208.27 1653.95,1206.89 1654.54,1208.58 1655.12,1208.25 1655.71,1208.15 1656.29,1206.79 1656.88,1208.22 1657.47,1206.85 1658.05,1206.92 1658.64,1205.58 1659.23,1202.61 1659.81,1204.2 1660.4,1203.07 1660.99,1203.25 1661.57,1208.3 1662.16,1208.27 1662.75,1209.77 1663.33,1210.95 1663.92,1207.97 1664.5,1205.26 1665.09,1203.85 1665.68,1205.21 1666.26,1203.88 1666.85,1205.43 1667.44,1205.56 1668.02,1205.8 1668.61,1205.68 1669.2,1205.74 1669.78,1205.73 1670.37,1203.45 1670.96,1202.18 1671.54,1203.83 1672.13,1202.6 1672.71,1205.47 1673.3,1205.36 1673.89,1204.31 1674.47,1203.31 1675.06,1202.29 1675.65,1204.2 1676.23,1203.17 1676.82,1203.4 1677.41,1203.84 1677.99,1204.09 1678.58,1207.06 1679.17,1207.22 1679.75,1208.72 1680.34,1210.07 1680.92,1211.57 1681.51,1212.9 1682.1,1216.92 1682.68,1214.97 1683.27,1213.31 1683.86,1211.33 1684.44,1212.38 1685.03,1207.97 1685.62,1207.93 1686.2,1205.17 1686.79,1206.67 1687.37,1209.95 1687.96,1211.27 1688.55,1211.22 1689.13,1212.55 1689.72,1212.34 1690.31,1210.76 1690.89,1211.92 1691.48,1213.17 1692.07,1213.1 1692.65,1214.16 1693.24,1216.73 1693.83,1214.8 1694.41,1217.24 1695,1221.06 1695.58,1219.23 1696.17,1214.35 1696.76,1215.6 1697.34,1212.28 1697.93,1213.45 1698.52,1212.69 1699.1,1213.95 1699.69,1213.64 1700.28,1213 1700.86,1212.71 1701.45,1211.22 1702.04,1211.07 1702.62,1209.63 1703.21,1207.75 1703.79,1207.73 1704.38,1209.14 1704.97,1210.74 1705.55,1209.07 1706.14,1207.89 1706.73,1206.47 1707.31,1206.39 1707.9,1203.72 1708.49,1205.55 1709.07,1205.68 1709.66,1205.45 1710.24,1205.83 1710.83,1204.46 1711.42,1204.61 1712,1203.21 1712.59,1204.63 1713.18,1204.44 1713.76,1205.9 1714.35,1210.26 1714.94,1210.04 1715.52,1209.69 1716.11,1212.19 1716.7,1212.99 1717.28,1211.82 1717.87,1212.93 1718.45,1212.64 1719.04,1212.42 1719.63,1204.96 1720.21,1203.73 1720.8,1208.02 1721.39,1205.14 1721.97,1205.12 1722.56,1205.08 1723.15,1205.09 1723.73,1203.79 1724.32,1205.42 1724.91,1205.75 1725.49,1205.84 1726.08,1207.69 1726.66,1206.27 1727.25,1207.79 1727.84,1206.32 1728.42,1203.71 1729.01,1200.94 1729.6,1201.24 1730.18,1199.76 1730.77,1198.75 1731.36,1199.25 1731.94,1199.38 1732.53,1196.64 1733.11,1197.33 1733.7,1196.28 1734.29,1197.22 1734.87,1196.16 1735.46,1195.25 1736.05,1197.57 1736.63,1196.72 1737.22,1197.43 1737.81,1196.9 1738.39,1199.1 1738.98,1198.35 1739.57,1201.75 1740.15,1202.21 1740.74,1206.37 1741.32,1207.96 1741.91,1206.23 1742.5,1209.4 1743.08,1212.12 1743.67,1211.67 1744.26,1211.55 1744.84,1211.5 1745.43,1211.23 1746.02,1210.84 1746.6,1207.65 1747.19,1206.38 1747.78,1206.29 1748.36,1207.6 1748.95,1206.16 1749.53,1206.05 1750.12,1208.98 1750.71,1208.79 1751.29,1208.57 1751.88,1208.17 1752.47,1206.75 1753.05,1208.25 1753.64,1208.47 1754.23,1207.23 1754.81,1208.3 1755.4,1209.82 1755.99,1208.36 1756.57,1206.55 1757.16,1206.85 1757.74,1207.07 1758.33,1206.96 1758.92,1208.4 1759.5,1207.15 1760.09,1207.23 1760.68,1207.13 1761.26,1211.39 1761.85,1211 1762.44,1209.27 1763.02,1207.67 1763.61,1205.93 1764.19,1204.76 1764.78,1205.08 1765.37,1205.17 1765.95,1209.6 1766.54,1209.62 1767.13,1210.68 1767.71,1210.77 1768.3,1209.26 1768.89,1209.4 1769.47,1210.57 1770.06,1210.38 1770.65,1210.33 1771.23,1210.33 1771.82,1210.18 1772.4,1207.13 1772.99,1204.21 1773.58,1204.55 1774.16,1206.39 1774.75,1207.64 1775.34,1207.88 1775.92,1209.39 1776.51,1210.95 1777.1,1207.85 1777.68,1209.48 1778.27,1209.03 1778.86,1206.46 1779.44,1205.07 1780.03,1205.31 1780.61,1206.72 1781.2,1205.72 1781.79,1203.01 1782.37,1206.18 1782.96,1206.17 1783.55,1206.19 1784.13,1205.06 1784.72,1200.9 1785.31,1199.31 1785.89,1201.33 1786.48,1201.8 1787.06,1199.22 1787.65,1196.89 1788.24,1196.11 1788.82,1198.04 1789.41,1199.91 1790,1201.8 1790.58,1203.4 1791.17,1204.65 1791.76,1206.4 1792.34,1208.01 1792.93,1208.1 1793.52,1208.14 1794.1,1207.76 1794.69,1203.82 1795.27,1203.79 1795.86,1206.68 1796.45,1208.17 1797.03,1209.32 1797.62,1213.45 1798.21,1210.4 1798.79,1208.83 1799.38,1207.16 1799.97,1207.26 1800.55,1208.61 1801.14,1205.68 1801.73,1205.88 1802.31,1203.08 1802.9,1201.98 1803.48,1205.01 1804.07,1208.21 1804.66,1206.89 1805.24,1207.05 1805.83,1207.07 1806.42,1207.38 1807,1208.79 1807.59,1210.38 1808.18,1208.8 1808.76,1207.52 1809.35,1204.95 1809.94,1206.74 1810.52,1206.46 1811.11,1206.27 1811.69,1207.85 1812.28,1207.73 1812.87,1212.02 1813.45,1213.42 1814.04,1214.38 1814.63,1212.55 1815.21,1209.64 1815.8,1206.94 1816.39,1206.97 1816.97,1207.23 1817.56,1207.32 1818.14,1207.28 1818.73,1206.02 1819.32,1206.06 1819.9,1206.18 1820.49,1206.09 1821.08,1205.04 1821.66,1208.09 1822.25,1209.52 1822.84,1210.66 1823.42,1210.24 1824.01,1210.2 1824.6,1208.96 1825.18,1209.16 1825.77,1207.7 1826.35,1206.55 1826.94,1206.65 1827.53,1202.56 1828.11,1203.15 1828.7,1203.36 1829.29,1202.14 1829.87,1205.43 1830.46,1206.72 1831.05,1203.97 1831.63,1204.56 1832.22,1205.95 1832.81,1208.75 1833.39,1208.66 1833.98,1205.58 1834.56,1205.67 1835.15,1208.71 1835.74,1208.87 1836.32,1208.83 1836.91,1210.07 1837.5,1208.32 1838.08,1206.98 1838.67,1206.95 1839.26,1207 1839.84,1209.78 1840.43,1211.23 1841.01,1210.75 1841.6,1210.66 1842.19,1212.18 1842.77,1210.36 1843.36,1211.91 1843.95,1211.7 1844.53,1210.39 1845.12,1211.63 1845.71,1211.38 1846.29,1214.09 1846.88,1213.7 1847.47,1216.13 1848.05,1218.4 1848.64,1216.35 1849.22,1214.78 1849.81,1214.44 1850.4,1216.93 1850.98,1212.3 1851.57,1210.49 1852.16,1210.3 1852.74,1210.01 1853.33,1207.11 1853.92,1207.15 1854.5,1208.15 1855.09,1209.44 1855.68,1206.83 1856.26,1208.03 1856.85,1208.44 1857.43,1209.59 1858.02,1210.74 1858.61,1211.87 1859.19,1209.29 1859.78,1210.43 1860.37,1213.15 1860.95,1214.4 1861.54,1212.93 1862.13,1211.43 1862.71,1212.6 1863.3,1213.73 1863.88,1211.42 1864.47,1215.47 1865.06,1215.32 1865.64,1216.19 1866.23,1215.88 1866.82,1214.2 1867.4,1211.16 1867.99,1208.18 1868.58,1208.15 1869.16,1207.93 1869.75,1213.84 1870.34,1213.73 1870.92,1214.88 1871.51,1215.81 1872.09,1215.39 1872.68,1212.17 1873.27,1212.9 1873.85,1213.84 1874.44,1210.66 1875.03,1209.18 1875.61,1210.53 1876.2,1210.52 1876.79,1210.61 1877.37,1213.45 1877.96,1212.74 1878.55,1211.11 1879.13,1213.47 1879.72,1208.84 1880.3,1209.88 1880.89,1208.16 1881.48,1206.59 1882.06,1206.46 1882.65,1206.63 1883.24,1205.24 1883.82,1205.46 1884.41,1204.2 1885,1202.9 1885.58,1202.94 1886.17,1204.6 1886.76,1201.95 1887.34,1204.92 1887.93,1206.42 1888.51,1206.26 1889.1,1204.65 1889.69,1206.2 1890.27,1206.62 1890.86,1205.23 1891.45,1202.46 1892.03,1204.29 1892.62,1205.94 1893.21,1207.13 1893.79,1207.12 1894.38,1204.12 1894.96,1204.26 1895.55,1205.83 1896.14,1207.27 1896.72,1204.53 1897.31,1207.82 1897.9,1209.07 1898.48,1210.43 1899.07,1208.64 1899.66,1208.62 1900.24,1208.44 1900.83,1211.17 1901.42,1211.01 1902,1210.74 1902.59,1216.3 1903.17,1216.91 1903.76,1216.54 1904.35,1217.55 1904.93,1215.39 1905.52,1213.95 1906.11,1213.59 1906.69,1210.26 1907.28,1211.59 1907.87,1212.82 1908.45,1212.59 1909.04,1212.12 1909.63,1210.54 1910.21,1213.17 1910.8,1209.98 1911.38,1209.71 1911.97,1212.48 1912.56,1212.38 1913.14,1211.94 1913.73,1210.03 1914.32,1211.18 1914.9,1207.8 1915.49,1207.97 1916.08,1206.46 1916.66,1207.99 1917.25,1207.96 1917.83,1210.67 1918.42,1207.7 1919.01,1206.22 1919.59,1209.12 1920.18,1206.25 1920.77,1204.82 1921.35,1206.1 1921.94,1206.35 1922.53,1207.82 1923.11,1212.02 1923.7,1208.99 1924.29,1207.34 1924.87,1205.99 1925.46,1206.34 1926.04,1203.68 1926.63,1202.36 1927.22,1202.66 1927.8,1204.71 1928.39,1205.09 1928.98,1205.35 1929.56,1202.77 1930.15,1205.77 1930.74,1207.42 1931.32,1203.02 1931.91,1204.85 1932.5,1207.65 1933.08,1207.74 1933.67,1207.83 1934.25,1204.93 1934.84,1207.75 1935.43,1207.82 1936.01,1204.81 1936.6,1203.23 1937.19,1206.24 1937.77,1205.3 1938.36,1202.51 1938.95,1205.83 1939.53,1205.96 1940.12,1209.12 1940.71,1206.07 1941.29,1203.25 1941.88,1204.96 1942.46,1203.64 1943.05,1203.73 1943.64,1198.51 1944.22,1199.18 1944.81,1200.8 1945.4,1201.3 1945.98,1204.33 1946.57,1204.5 1947.16,1205.96 1947.74,1209.24 1948.33,1210.64 1948.91,1210.36 1949.5,1211.69 1950.09,1209.88 1950.67,1209.5 1951.26,1207.59 1951.85,1209.04 1952.43,1210.41 1953.02,1210.3 1953.61,1207.65 1954.19,1206.12 1954.78,1203.21 1955.37,1200.56 1955.95,1202.62 1956.54,1201.6 1957.12,1201.88 1957.71,1200.9 1958.3,1201.24 1958.88,1204.65 1959.47,1203.27 1960.06,1202.02 1960.64,1206.53 1961.23,1206.67 1961.82,1203.89 1962.4,1204.02 1962.99,1199.8 1963.58,1200.13 1964.16,1199.19 1964.75,1201.17 1965.33,1205.69 1965.92,1205.78 1966.51,1204.33 1967.09,1203.08 1967.68,1204.8 1968.27,1206.43 1968.85,1206.12 1969.44,1206.4 1970.03,1206.36 1970.61,1204.94 1971.2,1202.3 1971.78,1202.58 1972.37,1205.67 1972.96,1207.45 1973.54,1208.92 1974.13,1211.68 1974.72,1210.38 1975.3,1210.16 1975.89,1211.66 1976.48,1211.36 1977.06,1209.95 1977.65,1210.97 1978.24,1212.33 1978.82,1210.47 1979.41,1208.85 1979.99,1206 1980.58,1206.13 1981.17,1205.9 1981.75,1204.48 1982.34,1205.94 1982.93,1204.63 1983.51,1206.12 1984.1,1204.75 1984.69,1204.83 1985.27,1204.72 1985.86,1204.78 1986.45,1202.15 1987.03,1204.08 1987.62,1205.73 1988.2,1204.29 1988.79,1204.61 1989.38,1206.33 1989.96,1207.76 1990.55,1207.69 1991.14,1210.66 1991.72,1213.19 1992.31,1212.82 1992.9,1215.68 1993.48,1218.2 1994.07,1217.8 1994.65,1217.68 1995.24,1215.88 1995.83,1214.17 1996.41,1210.88 1997,1209.13 1997.59,1207.6 1998.17,1204.36 1998.76,1210.1 1999.35,1208.41 1999.93,1208.39 2000.52,1208.23 2001.11,1207.74 2001.69,1206.31 2002.28,1204.85 2002.86,1208.95 2003.45,1208.92 2004.04,1206.1 2004.62,1203.45 2005.21,1205.17 2005.8,1205.21 2006.38,1203.81 2006.97,1204.16 2007.56,1207.2 2008.14,1205.93 2008.73,1204.26 2009.32,1204.31 2009.9,1203.25 2010.49,1202.15 2011.07,1202.34 2011.66,1204.07 2012.25,1204.48 2012.83,1204.64 2013.42,1204.27 2014.01,1204.85 2014.59,1207.85 2015.18,1206.65 2015.77,1208.51 2016.35,1206.01 2016.94,1205.93 2017.53,1203.07 2018.11,1204.55 2018.7,1204.78 2019.28,1203.39 2019.87,1202.01 2020.46,1207.94 2021.04,1206.51 2021.63,1205.3 2022.22,1201.2 2022.8,1202.83 2023.39,1203.1 2023.98,1204.92 2024.56,1208.13 2025.15,1206.54 2025.73,1203.73 2026.32,1204 2026.91,1203.83 2027.49,1204.07 2028.08,1204.75 2028.67,1209.19 2029.25,1210.67 2029.84,1206.36 2030.43,1206.51 2031.01,1207.74 2031.6,1206.23 2032.19,1209.57 2032.77,1205.48 2033.36,1208.22 2033.94,1202.53 2034.53,1201.6 2035.12,1201.95 2035.7,1202.28 2036.29,1201.3 2036.88,1200.44 2037.46,1200.89 2038.05,1199.6 2038.64,1200.02 2039.22,1201.87 2039.81,1203.67 2040.4,1203.95 2040.98,1204.25 2041.57,1201.48 2042.15,1201.87 2042.74,1206.17 2043.33,1204.89 2043.91,1203.7 2044.5,1202.56 2045.09,1204.17 2045.67,1205.72 2046.26,1208.83 2046.85,1206.34 2047.43,1203.38 2048.02,1209.05 2048.6,1205.87 2049.19,1209.06 2049.78,1210.6 2050.36,1207.79 2050.95,1207.63 2051.54,1207.87 2052.12,1209.28 2052.71,1209.14 2053.3,1209.3 2053.88,1207.85 2054.47,1207.74 2055.06,1209.04 2055.64,1209.17 2056.23,1209.25 2056.81,1210.91 2057.4,1210.76 2057.99,1207.6 2058.57,1206.3 2059.16,1204.67 2059.75,1207.61 2060.33,1207.65 2060.92,1209.02 2061.51,1207.53 2062.09,1208.72 2062.68,1208.75 2063.27,1207.28 2063.85,1204.25 2064.44,1207.13 2065.02,1207.66 2065.61,1211.97 2066.2,1211.8 2066.78,1211.6 2067.37,1212.99 2067.96,1214.13 2068.54,1213.87 2069.13,1216.21 2069.72,1214.44 2070.3,1212.42 2070.89,1212.17 2071.48,1212.08 2072.06,1210.74 2072.65,1211.88 2073.23,1212.96 2073.82,1212.89 2074.41,1213.89 2074.99,1211.64 2075.58,1211.68 2076.17,1213.12 2076.75,1212.77 2077.34,1209.9 2077.93,1209.74 2078.51,1208.3 2079.1,1206.55 2079.68,1203.76 2080.27,1204.35 2080.86,1203.11 2081.44,1201.81 2082.03,1202.02 2082.62,1203.54 2083.2,1205.59 2083.79,1204.08 2084.38,1202.75 2084.96,1200.18 2085.55,1200.97 2086.14,1201.32 2086.72,1201.6 2087.31,1200.49 2087.89,1203.68 2088.48,1205.37 2089.07,1208.32 2089.65,1211.16 2090.24,1210.47 2090.83,1207.47 2091.41,1205.81 2092,1207.41 2092.59,1205.65 2093.17,1205.78 2093.76,1204.52 2094.35,1204.53 2094.93,1207.56 2095.52,1207.52 2096.1,1206.17 2096.69,1206 2097.28,1206.03 2097.86,1207.64 2098.45,1206.33 2099.04,1206.21 2099.62,1204.86 2100.21,1207.75 2100.8,1212.13 2101.38,1211.99 2101.97,1210.43 2102.55,1210.4 2103.14,1210.65 2103.73,1210.23 2104.31,1211.56 2104.9,1207.02 2105.49,1208.32 2106.07,1209.66 2106.66,1210.97 2107.25,1212.33 2107.83,1210.66 2108.42,1213.25 2109.01,1216.96 2109.59,1213.36 2110.18,1213.24 2110.76,1211.42 2111.35,1211 2111.94,1210.89 2112.52,1212.17 2113.11,1209.22 2113.7,1208.71 2114.28,1208.46 2114.87,1208.42 2115.46,1209.69 2116.04,1209.44 2116.63,1210.79 2117.22,1210.56 2117.8,1210.68 2118.39,1212.03 2118.97,1214.87 2119.56,1215.98 2120.15,1209.73 2120.73,1208.72 2121.32,1208.5 2121.91,1209.62 2122.49,1208.26 2123.08,1208.34 2123.67,1209.61 2124.25,1209.66 2124.84,1210.8 2125.42,1212.14 2126.01,1210.28 2126.6,1211.88 2127.18,1208.86 2127.77,1208.6 2128.36,1209.96 2128.94,1210.1 2129.53,1208.58 2130.12,1208.53 2130.7,1207.01 2131.29,1206.98 2131.88,1206.78 2132.46,1206.89 2133.05,1205.56 2133.63,1207.3 2134.22,1207.51 2134.81,1208.87 2135.39,1207.27 2135.98,1205.59 2136.57,1205.63 2137.15,1205.77 2137.74,1207.28 2138.33,1208.66 2138.91,1210.13 2139.5,1208.62 2140.09,1207.18 2140.67,1206.98 2141.26,1206.87 2141.84,1205.53 2142.43,1205.51 2143.02,1205.56 2143.6,1205.69 2144.19,1207.08 2144.78,1210.08 2145.36,1210.1 2145.95,1211.39 2146.54,1212.67 2147.12,1213.78 2147.71,1211.88 2148.3,1210.02 2148.88,1205.73 2149.47,1205.95 2150.05,1205.9 2150.64,1208.85 2151.23,1208.96 2151.81,1210.12 2152.4,1212.64 2152.99,1212.12 2153.57,1211.89 2154.16,1210.19 2154.75,1208.42 2155.33,1208.54 2155.92,1207.15 2156.5,1207.29 2157.09,1208.82 2157.68,1205.62 2158.26,1204.41 \"/>\n<path clip-path=\"url(#clip132)\" d=\"M986.025 1208.02 L986.612 1208.02 L987.198 1208.02 L987.785 1208.02 L988.371 1208.02 L988.957 1208.02 L989.544 1208.02 L990.13 1208.02 L990.717 1208.02 L991.303 1208.02 L991.889 1208.02 L992.476 1208.02 L993.062 1208.02 L993.649 1208.02 L994.235 1208.02 L994.822 1208.02 L995.408 1208.02 L995.994 1208.02 L996.581 1208.02 L997.167 1208.02 L997.754 1208.02 L998.34 1208.02 L998.926 1208.02 L999.513 1208.02 L1000.1 1208.02 L1000.69 1208.02 L1001.27 1208.02 L1001.86 1208.02 L1002.44 1208.02 L1003.03 1208.02 L1003.62 1208.02 L1004.2 1208.02 L1004.79 1208.02 L1005.38 1208.02 L1005.96 1208.02 L1006.55 1208.02 L1007.14 1208.02 L1007.72 1208.02 L1008.31 1208.02 L1008.9 1208.02 L1009.48 1208.02 L1010.07 1208.02 L1010.65 1208.02 L1011.24 1208.02 L1011.83 1208.02 L1012.41 1208.02 L1013 1208.02 L1013.59 1208.02 L1014.17 1208.02 L1014.76 1208.02 L1015.35 1208.02 L1015.93 1208.02 L1016.52 1208.02 L1017.11 1208.02 L1017.69 1208.02 L1018.28 1208.02 L1018.86 1208.02 L1019.45 1208.02 L1020.04 1208.02 L1020.62 1208.02 L1021.21 1208.02 L1021.8 1208.02 L1022.38 1208.02 L1022.97 1208.02 L1023.56 1208.02 L1024.14 1208.02 L1024.73 1208.02 L1025.32 1208.02 L1025.9 1208.02 L1026.49 1208.02 L1027.07 1208.02 L1027.66 1208.02 L1028.25 1208.02 L1028.83 1208.02 L1029.42 1208.02 L1030.01 1208.02 L1030.59 1208.02 L1031.18 1208.02 L1031.77 1208.02 L1032.35 1208.02 L1032.94 1208.02 L1033.52 1208.02 L1034.11 1208.02 L1034.7 1208.02 L1035.28 1208.02 L1035.87 1208.02 L1036.46 1208.02 L1037.04 1208.02 L1037.63 1208.02 L1038.22 1208.02 L1038.8 1208.02 L1039.39 1208.02 L1039.98 1208.02 L1040.56 1208.02 L1041.15 1208.02 L1041.73 1208.02 L1042.32 1208.02 L1042.91 1208.02 L1043.49 1208.02 L1044.08 1208.02 L1044.67 1208.02 L1045.25 1208.02 L1045.84 1208.02 L1046.43 1208.02 L1047.01 1208.02 L1047.6 1208.02 L1048.19 1208.02 L1048.77 1208.02 L1049.36 1208.02 L1049.94 1208.02 L1050.53 1208.02 L1051.12 1208.02 L1051.7 1208.02 L1052.29 1208.02 L1052.88 1208.02 L1053.46 1208.02 L1054.05 1208.02 L1054.64 1208.02 L1055.22 1208.02 L1055.81 1208.02 L1056.39 1208.02 L1056.98 1208.02 L1057.57 1208.02 L1058.15 1208.02 L1058.74 1208.02 L1059.33 1208.02 L1059.91 1208.02 L1060.5 1208.02 L1061.09 1208.02 L1061.67 1208.02 L1062.26 1208.02 L1062.85 1208.02 L1063.43 1208.02 L1064.02 1208.02 L1064.6 1208.02 L1065.19 1208.02 L1065.78 1208.02 L1066.36 1208.02 L1066.95 1208.02 L1067.54 1208.02 L1068.12 1208.02 L1068.71 1208.02 L1069.3 1208.02 L1069.88 1208.02 L1070.47 1208.02 L1071.06 1208.02 L1071.64 1208.02 L1072.23 1208.02 L1072.81 1208.02 L1073.4 1208.02 L1073.99 1208.02 L1074.57 1208.02 L1075.16 1208.02 L1075.75 1208.02 L1076.33 1208.02 L1076.92 1208.02 L1077.51 1208.02 L1078.09 1208.02 L1078.68 1208.02 L1079.26 1208.02 L1079.85 1208.02 L1080.44 1208.02 L1081.02 1208.02 L1081.61 1208.02 L1082.2 1208.02 L1082.78 1208.02 L1083.37 1208.02 L1083.96 1208.02 L1084.54 1208.02 L1085.13 1208.02 L1085.72 1208.02 L1086.3 1208.02 L1086.89 1208.02 L1087.47 1208.02 L1088.06 1208.02 L1088.65 1208.02 L1089.23 1208.02 L1089.82 1208.02 L1090.41 1208.02 L1090.99 1208.02 L1091.58 1208.02 L1092.17 1208.02 L1092.75 1208.02 L1093.34 1208.02 L1093.93 1208.02 L1094.51 1208.02 L1095.1 1208.02 L1095.68 1208.02 L1096.27 1208.02 L1096.86 1208.02 L1097.44 1208.02 L1098.03 1208.02 L1098.62 1208.02 L1099.2 1208.02 L1099.79 1208.02 L1100.38 1208.02 L1100.96 1208.02 L1101.55 1208.02 L1102.14 1208.02 L1102.72 1208.02 L1103.31 1208.02 L1103.89 1208.02 L1104.48 1208.02 L1105.07 1208.02 L1105.65 1208.02 L1106.24 1208.02 L1106.83 1208.02 L1107.41 1208.02 L1108 1208.02 L1108.59 1208.02 L1109.17 1208.02 L1109.76 1208.02 L1110.34 1208.02 L1110.93 1208.02 L1111.52 1208.02 L1112.1 1208.02 L1112.69 1208.02 L1113.28 1208.02 L1113.86 1208.02 L1114.45 1208.02 L1115.04 1208.02 L1115.62 1208.02 L1116.21 1208.02 L1116.8 1208.02 L1117.38 1208.02 L1117.97 1208.02 L1118.55 1208.02 L1119.14 1208.02 L1119.73 1208.02 L1120.31 1208.02 L1120.9 1208.02 L1121.49 1208.02 L1122.07 1208.02 L1122.66 1208.02 L1123.25 1208.02 L1123.83 1208.02 L1124.42 1208.02 L1125.01 1208.02 L1125.59 1208.02 L1126.18 1208.02 L1126.76 1208.02 L1127.35 1208.02 L1127.94 1208.02 L1128.52 1208.02 L1129.11 1208.02 L1129.7 1208.02 L1130.28 1208.02 L1130.87 1208.02 L1131.46 1208.02 L1132.04 1208.02 L1132.63 1208.02 L1133.21 1208.02 L1133.8 1208.02 L1134.39 1208.02 L1134.97 1208.02 L1135.56 1208.02 L1136.15 1208.02 L1136.73 1208.02 L1137.32 1208.02 L1137.91 1208.02 L1138.49 1208.02 L1139.08 1208.02 L1139.67 1208.02 L1140.25 1208.02 L1140.84 1208.02 L1141.42 1208.02 L1142.01 1208.02 L1142.6 1208.02 L1143.18 1208.02 L1143.77 1208.02 L1144.36 1208.02 L1144.94 1208.02 L1145.53 1208.02 L1146.12 1208.02 L1146.7 1208.02 L1147.29 1208.02 L1147.88 1208.02 L1148.46 1208.02 L1149.05 1208.02 L1149.63 1208.02 L1150.22 1208.02 L1150.81 1208.02 L1151.39 1208.02 L1151.98 1208.02 L1152.57 1208.02 L1153.15 1208.02 L1153.74 1208.02 L1154.33 1208.02 L1154.91 1208.02 L1155.5 1208.02 L1156.09 1208.02 L1156.67 1208.02 L1157.26 1208.02 L1157.84 1208.02 L1158.43 1208.02 L1159.02 1208.02 L1159.6 1208.02 L1160.19 1208.02 L1160.78 1208.02 L1161.36 1208.02 L1161.95 1208.02 L1162.54 1208.02 L1163.12 1208.02 L1163.71 1208.02 L1164.29 1208.02 L1164.88 1208.02 L1165.47 1208.02 L1166.05 1208.02 L1166.64 1208.02 L1167.23 1208.02 L1167.81 1208.02 L1168.4 1208.02 L1168.99 1208.02 L1169.57 1208.02 L1170.16 1208.02 L1170.75 1208.02 L1171.33 1208.02 L1171.92 1208.02 L1172.5 1208.02 L1173.09 1208.02 L1173.68 1208.02 L1174.26 1208.02 L1174.85 1208.02 L1175.44 1208.02 L1176.02 1208.02 L1176.61 1208.02 L1177.2 1208.02 L1177.78 1208.02 L1178.37 1208.02 L1178.96 1208.02 L1179.54 1208.02 L1180.13 1208.02 L1180.71 1208.02 L1181.3 1208.02 L1181.89 1208.02 L1182.47 1208.02 L1183.06 1208.02 L1183.65 1208.02 L1184.23 1208.02 L1184.82 1208.02 L1185.41 1208.02 L1185.99 1208.02 L1186.58 1208.02 L1187.16 1208.02 L1187.75 1208.02 L1188.34 1208.02 L1188.92 1208.02 L1189.51 1208.02 L1190.1 1208.02 L1190.68 1208.02 L1191.27 1208.02 L1191.86 1208.02 L1192.44 1208.02 L1193.03 1208.02 L1193.62 1208.02 L1194.2 1208.02 L1194.79 1208.02 L1195.37 1208.02 L1195.96 1208.02 L1196.55 1208.02 L1197.13 1208.02 L1197.72 1208.02 L1198.31 1208.02 L1198.89 1208.02 L1199.48 1208.02 L1200.07 1208.02 L1200.65 1208.02 L1201.24 1208.02 L1201.83 1208.02 L1202.41 1208.02 L1203 1208.02 L1203.58 1208.02 L1204.17 1208.02 L1204.76 1208.02 L1205.34 1208.02 L1205.93 1208.02 L1206.52 1208.02 L1207.1 1208.02 L1207.69 1208.02 L1208.28 1208.02 L1208.86 1208.02 L1209.45 1208.02 L1210.03 1208.02 L1210.62 1208.02 L1211.21 1208.02 L1211.79 1208.02 L1212.38 1208.02 L1212.97 1208.02 L1213.55 1208.02 L1214.14 1208.02 L1214.73 1208.02 L1215.31 1208.02 L1215.9 1208.02 L1216.49 1208.02 L1217.07 1208.02 L1217.66 1208.02 L1218.24 1208.02 L1218.83 1208.02 L1219.42 1208.02 L1220 1208.02 L1220.59 1208.02 L1221.18 1208.02 L1221.76 1208.02 L1222.35 1208.02 L1222.94 1208.02 L1223.52 1208.02 L1224.11 1208.02 L1224.7 1208.02 L1225.28 1208.02 L1225.87 1208.02 L1226.45 1208.02 L1227.04 1208.02 L1227.63 1208.02 L1228.21 1208.02 L1228.8 1208.02 L1229.39 1208.02 L1229.97 1208.02 L1230.56 1208.02 L1231.15 1208.02 L1231.73 1208.02 L1232.32 1208.02 L1232.91 1208.02 L1233.49 1208.02 L1234.08 1208.02 L1234.66 1208.02 L1235.25 1208.02 L1235.84 1208.02 L1236.42 1208.02 L1237.01 1208.02 L1237.6 1208.02 L1238.18 1208.02 L1238.77 1208.02 L1239.36 1208.02 L1239.94 1208.02 L1240.53 1208.02 L1241.11 1208.02 L1241.7 1208.02 L1242.29 1208.02 L1242.87 1208.02 L1243.46 1208.02 L1244.05 1208.02 L1244.63 1208.02 L1245.22 1208.02 L1245.81 1208.02 L1246.39 1208.02 L1246.98 1208.02 L1247.57 1208.02 L1248.15 1208.02 L1248.74 1208.02 L1249.32 1208.02 L1249.91 1208.02 L1250.5 1208.02 L1251.08 1208.02 L1251.67 1208.02 L1252.26 1208.02 L1252.84 1208.02 L1253.43 1208.02 L1254.02 1208.02 L1254.6 1208.02 L1255.19 1208.02 L1255.78 1208.02 L1256.36 1208.02 L1256.95 1208.02 L1257.53 1208.02 L1258.12 1208.02 L1258.71 1208.02 L1259.29 1208.02 L1259.88 1208.02 L1260.47 1208.02 L1261.05 1208.02 L1261.64 1208.02 L1262.23 1208.02 L1262.81 1208.02 L1263.4 1208.02 L1263.98 1208.02 L1264.57 1208.02 L1265.16 1208.02 L1265.74 1208.02 L1266.33 1208.02 L1266.92 1208.02 L1267.5 1208.02 L1268.09 1208.02 L1268.68 1208.02 L1269.26 1208.02 L1269.85 1208.02 L1270.44 1208.02 L1271.02 1208.02 L1271.61 1208.02 L1272.19 1208.02 L1272.78 1208.02 L1273.37 1208.02 L1273.95 1208.02 L1274.54 1208.02 L1275.13 1208.02 L1275.71 1208.02 L1276.3 1208.02 L1276.89 1208.02 L1277.47 1208.02 L1278.06 1208.02 L1278.65 1208.02 L1279.23 1208.02 L1279.82 1208.02 L1280.4 1208.02 L1280.99 1208.02 L1281.58 1208.02 L1282.16 1208.02 L1282.75 1208.02 L1283.34 1208.02 L1283.92 1208.02 L1284.51 1208.02 L1285.1 1208.02 L1285.68 1208.02 L1286.27 1208.02 L1286.86 1208.02 L1287.44 1208.02 L1288.03 1208.02 L1288.61 1208.02 L1289.2 1208.02 L1289.79 1208.02 L1290.37 1208.02 L1290.96 1208.02 L1291.55 1208.02 L1292.13 1208.02 L1292.72 1208.02 L1293.31 1208.02 L1293.89 1208.02 L1294.48 1208.02 L1295.06 1208.02 L1295.65 1208.02 L1296.24 1208.02 L1296.82 1208.02 L1297.41 1208.02 L1298 1208.02 L1298.58 1208.02 L1299.17 1208.02 L1299.76 1208.02 L1300.34 1208.02 L1300.93 1208.02 L1301.52 1208.02 L1302.1 1208.02 L1302.69 1208.02 L1303.27 1208.02 L1303.86 1208.02 L1304.45 1208.02 L1305.03 1208.02 L1305.62 1208.02 L1306.21 1208.02 L1306.79 1208.02 L1307.38 1208.02 L1307.97 1208.02 L1308.55 1208.02 L1309.14 1208.02 L1309.73 1208.02 L1310.31 1208.02 L1310.9 1208.02 L1311.48 1208.02 L1312.07 1208.02 L1312.66 1208.02 L1313.24 1208.02 L1313.83 1208.02 L1314.42 1208.02 L1315 1208.02 L1315.59 1208.02 L1316.18 1208.02 L1316.76 1208.02 L1317.35 1208.02 L1317.93 1208.02 L1318.52 1208.02 L1319.11 1208.02 L1319.69 1208.02 L1320.28 1208.02 L1320.87 1208.02 L1321.45 1208.02 L1322.04 1208.02 L1322.63 1208.02 L1323.21 1208.02 L1323.8 1208.02 L1324.39 1208.02 L1324.97 1208.02 L1325.56 1208.02 L1326.14 1208.02 L1326.73 1208.02 L1327.32 1208.02 L1327.9 1208.02 L1328.49 1208.02 L1329.08 1208.02 L1329.66 1208.02 L1330.25 1208.02 L1330.84 1208.02 L1331.42 1208.02 L1332.01 1208.02 L1332.6 1208.02 L1333.18 1208.02 L1333.77 1208.02 L1334.35 1208.02 L1334.94 1208.02 L1335.53 1208.02 L1336.11 1208.02 L1336.7 1208.02 L1337.29 1208.02 L1337.87 1208.02 L1338.46 1208.02 L1339.05 1208.02 L1339.63 1208.02 L1340.22 1208.02 L1340.8 1208.02 L1341.39 1208.02 L1341.98 1208.02 L1342.56 1208.02 L1343.15 1208.02 L1343.74 1208.02 L1344.32 1208.02 L1344.91 1208.02 L1345.5 1208.02 L1346.08 1208.02 L1346.67 1208.02 L1347.26 1208.02 L1347.84 1208.02 L1348.43 1208.02 L1349.01 1208.02 L1349.6 1208.02 L1350.19 1208.02 L1350.77 1208.02 L1351.36 1208.02 L1351.95 1208.02 L1352.53 1208.02 L1353.12 1208.02 L1353.71 1208.02 L1354.29 1208.02 L1354.88 1208.02 L1355.47 1208.02 L1356.05 1208.02 L1356.64 1208.02 L1357.22 1208.02 L1357.81 1208.02 L1358.4 1208.02 L1358.98 1208.02 L1359.57 1208.02 L1360.16 1208.02 L1360.74 1208.02 L1361.33 1208.02 L1361.92 1208.02 L1362.5 1208.02 L1363.09 1208.02 L1363.68 1208.02 L1364.26 1208.02 L1364.85 1208.02 L1365.43 1208.02 L1366.02 1208.02 L1366.61 1208.02 L1367.19 1208.02 L1367.78 1208.02 L1368.37 1208.02 L1368.95 1208.02 L1369.54 1208.02 L1370.13 1208.02 L1370.71 1208.02 L1371.3 1208.02 L1371.88 1208.02 L1372.47 1208.02 L1373.06 1208.02 L1373.64 1208.02 L1374.23 1208.02 L1374.82 1208.02 L1375.4 1208.02 L1375.99 1208.02 L1376.58 1208.02 L1377.16 1208.02 L1377.75 1208.02 L1378.34 1208.02 L1378.92 1208.02 L1379.51 1208.02 L1380.09 1208.02 L1380.68 1208.02 L1381.27 1208.02 L1381.85 1208.02 L1382.44 1208.02 L1383.03 1208.02 L1383.61 1208.02 L1384.2 1208.02 L1384.79 1208.02 L1385.37 1208.02 L1385.96 1208.02 L1386.55 1208.02 L1387.13 1208.02 L1387.72 1208.02 L1388.3 1208.02 L1388.89 1208.02 L1389.48 1208.02 L1390.06 1208.02 L1390.65 1208.02 L1391.24 1208.02 L1391.82 1208.02 L1392.41 1208.02 L1393 1208.02 L1393.58 1208.02 L1394.17 1208.02 L1394.75 1208.02 L1395.34 1208.02 L1395.93 1208.02 L1396.51 1208.02 L1397.1 1208.02 L1397.69 1208.02 L1398.27 1208.02 L1398.86 1208.02 L1399.45 1208.02 L1400.03 1208.02 L1400.62 1208.02 L1401.21 1208.02 L1401.79 1208.02 L1402.38 1208.02 L1402.96 1208.02 L1403.55 1208.02 L1404.14 1208.02 L1404.72 1208.02 L1405.31 1208.02 L1405.9 1208.02 L1406.48 1208.02 L1407.07 1208.02 L1407.66 1208.02 L1408.24 1208.02 L1408.83 1208.02 L1409.42 1208.02 L1410 1208.02 L1410.59 1208.02 L1411.17 1208.02 L1411.76 1208.02 L1412.35 1208.02 L1412.93 1208.02 L1413.52 1208.02 L1414.11 1208.02 L1414.69 1208.02 L1415.28 1208.02 L1415.87 1208.02 L1416.45 1208.02 L1417.04 1208.02 L1417.63 1208.02 L1418.21 1208.02 L1418.8 1208.02 L1419.38 1208.02 L1419.97 1208.02 L1420.56 1208.02 L1421.14 1208.02 L1421.73 1208.02 L1422.32 1208.02 L1422.9 1208.02 L1423.49 1208.02 L1424.08 1208.02 L1424.66 1208.02 L1425.25 1208.02 L1425.83 1208.02 L1426.42 1208.02 L1427.01 1208.02 L1427.59 1208.02 L1428.18 1208.02 L1428.77 1208.02 L1429.35 1208.02 L1429.94 1208.02 L1430.53 1208.02 L1431.11 1208.02 L1431.7 1208.02 L1432.29 1208.02 L1432.87 1208.02 L1433.46 1208.02 L1434.04 1208.02 L1434.63 1208.02 L1435.22 1208.02 L1435.8 1208.02 L1436.39 1208.02 L1436.98 1208.02 L1437.56 1208.02 L1438.15 1208.02 L1438.74 1208.02 L1439.32 1208.02 L1439.91 1208.02 L1440.5 1208.02 L1441.08 1208.02 L1441.67 1208.02 L1442.25 1208.02 L1442.84 1208.02 L1443.43 1208.02 L1444.01 1208.02 L1444.6 1208.02 L1445.19 1208.02 L1445.77 1208.02 L1446.36 1208.02 L1446.95 1208.02 L1447.53 1208.02 L1448.12 1208.02 L1448.7 1208.02 L1449.29 1208.02 L1449.88 1208.02 L1450.46 1208.02 L1451.05 1208.02 L1451.64 1208.02 L1452.22 1208.02 L1452.81 1208.02 L1453.4 1208.02 L1453.98 1208.02 L1454.57 1208.02 L1455.16 1208.02 L1455.74 1208.02 L1456.33 1208.02 L1456.91 1208.02 L1457.5 1208.02 L1458.09 1208.02 L1458.67 1208.02 L1459.26 1208.02 L1459.85 1208.02 L1460.43 1208.02 L1461.02 1208.02 L1461.61 1208.02 L1462.19 1208.02 L1462.78 1208.02 L1463.37 1208.02 L1463.95 1208.02 L1464.54 1208.02 L1465.12 1208.02 L1465.71 1208.02 L1466.3 1208.02 L1466.88 1208.02 L1467.47 1208.02 L1468.06 1208.02 L1468.64 1208.02 L1469.23 1208.02 L1469.82 1208.02 L1470.4 1208.02 L1470.99 1208.02 L1471.57 1208.02 L1472.16 1208.02 L1472.75 1208.02 L1473.33 1208.02 L1473.92 1208.02 L1474.51 1208.02 L1475.09 1208.02 L1475.68 1208.02 L1476.27 1208.02 L1476.85 1208.02 L1477.44 1208.02 L1478.03 1208.02 L1478.61 1208.02 L1479.2 1208.02 L1479.78 1208.02 L1480.37 1208.02 L1480.96 1208.02 L1481.54 1208.02 L1482.13 1208.02 L1482.72 1208.02 L1483.3 1208.02 L1483.89 1208.02 L1484.48 1208.02 L1485.06 1208.02 L1485.65 1208.02 L1486.24 1208.02 L1486.82 1208.02 L1487.41 1208.02 L1487.99 1208.02 L1488.58 1208.02 L1489.17 1208.02 L1489.75 1208.02 L1490.34 1208.02 L1490.93 1208.02 L1491.51 1208.02 L1492.1 1208.02 L1492.69 1208.02 L1493.27 1208.02 L1493.86 1208.02 L1494.45 1208.02 L1495.03 1208.02 L1495.62 1208.02 L1496.2 1208.02 L1496.79 1208.02 L1497.38 1208.02 L1497.96 1208.02 L1498.55 1208.02 L1499.14 1208.02 L1499.72 1208.02 L1500.31 1208.02 L1500.9 1208.02 L1501.48 1208.02 L1502.07 1208.02 L1502.65 1208.02 L1503.24 1208.02 L1503.83 1208.02 L1504.41 1208.02 L1505 1208.02 L1505.59 1208.02 L1506.17 1208.02 L1506.76 1208.02 L1507.35 1208.02 L1507.93 1208.02 L1508.52 1208.02 L1509.11 1208.02 L1509.69 1208.02 L1510.28 1208.02 L1510.86 1208.02 L1511.45 1208.02 L1512.04 1208.02 L1512.62 1208.02 L1513.21 1208.02 L1513.8 1208.02 L1514.38 1208.02 L1514.97 1208.02 L1515.56 1208.02 L1516.14 1208.02 L1516.73 1208.02 L1517.32 1208.02 L1517.9 1208.02 L1518.49 1208.02 L1519.07 1208.02 L1519.66 1208.02 L1520.25 1208.02 L1520.83 1208.02 L1521.42 1208.02 L1522.01 1208.02 L1522.59 1208.02 L1523.18 1208.02 L1523.77 1208.02 L1524.35 1208.02 L1524.94 1208.02 L1525.52 1208.02 L1526.11 1208.02 L1526.7 1208.02 L1527.28 1208.02 L1527.87 1208.02 L1528.46 1208.02 L1529.04 1208.02 L1529.63 1208.02 L1530.22 1208.02 L1530.8 1208.02 L1531.39 1208.02 L1531.98 1208.02 L1532.56 1208.02 L1533.15 1208.02 L1533.73 1208.02 L1534.32 1208.02 L1534.91 1208.02 L1535.49 1208.02 L1536.08 1208.02 L1536.67 1208.02 L1537.25 1208.02 L1537.84 1208.02 L1538.43 1208.02 L1539.01 1208.02 L1539.6 1208.02 L1540.19 1208.02 L1540.77 1208.02 L1541.36 1208.02 L1541.94 1208.02 L1542.53 1208.02 L1543.12 1208.02 L1543.7 1208.02 L1544.29 1208.02 L1544.88 1208.02 L1545.46 1208.02 L1546.05 1208.02 L1546.64 1208.02 L1547.22 1208.02 L1547.81 1208.02 L1548.4 1208.02 L1548.98 1208.02 L1549.57 1208.02 L1550.15 1208.02 L1550.74 1208.02 L1551.33 1208.02 L1551.91 1208.02 L1552.5 1208.02 L1553.09 1208.02 L1553.67 1208.02 L1554.26 1208.02 L1554.85 1208.02 L1555.43 1208.02 L1556.02 1208.02 L1556.6 1208.02 L1557.19 1208.02 L1557.78 1208.02 L1558.36 1208.02 L1558.95 1208.02 L1559.54 1208.02 L1560.12 1208.02 L1560.71 1208.02 L1561.3 1208.02 L1561.88 1208.02 L1562.47 1208.02 L1563.06 1208.02 L1563.64 1208.02 L1564.23 1208.02 L1564.81 1208.02 L1565.4 1208.02 L1565.99 1208.02 L1566.57 1208.02 L1567.16 1208.02 L1567.75 1208.02 L1568.33 1208.02 L1568.92 1208.02 L1569.51 1208.02 L1570.09 1208.02 L1570.68 1208.02 L1571.27 1208.02 L1571.85 1208.02 L1572.44 1208.02 L1573.02 1208.02 L1573.61 1208.02 L1574.2 1208.02 L1574.78 1208.02 L1575.37 1208.02 L1575.96 1208.02 L1576.54 1208.02 L1577.13 1208.02 L1577.72 1208.02 L1578.3 1208.02 L1578.89 1208.02 L1579.47 1208.02 L1580.06 1208.02 L1580.65 1208.02 L1581.23 1208.02 L1581.82 1208.02 L1582.41 1208.02 L1582.99 1208.02 L1583.58 1208.02 L1584.17 1208.02 L1584.75 1208.02 L1585.34 1208.02 L1585.93 1208.02 L1586.51 1208.02 L1587.1 1208.02 L1587.68 1208.02 L1588.27 1208.02 L1588.86 1208.02 L1589.44 1208.02 L1590.03 1208.02 L1590.62 1208.02 L1591.2 1208.02 L1591.79 1208.02 L1592.38 1208.02 L1592.96 1208.02 L1593.55 1208.02 L1594.14 1208.02 L1594.72 1208.02 L1595.31 1208.02 L1595.89 1208.02 L1596.48 1208.02 L1597.07 1208.02 L1597.65 1208.02 L1598.24 1208.02 L1598.83 1208.02 L1599.41 1208.02 L1600 1208.02 L1600.59 1208.02 L1601.17 1208.02 L1601.76 1208.02 L1602.34 1208.02 L1602.93 1208.02 L1603.52 1208.02 L1604.1 1208.02 L1604.69 1208.02 L1605.28 1208.02 L1605.86 1208.02 L1606.45 1208.02 L1607.04 1208.02 L1607.62 1208.02 L1608.21 1208.02 L1608.8 1208.02 L1609.38 1208.02 L1609.97 1208.02 L1610.55 1208.02 L1611.14 1208.02 L1611.73 1208.02 L1612.31 1208.02 L1612.9 1208.02 L1613.49 1208.02 L1614.07 1208.02 L1614.66 1208.02 L1615.25 1208.02 L1615.83 1208.02 L1616.42 1208.02 L1617.01 1208.02 L1617.59 1208.02 L1618.18 1208.02 L1618.76 1208.02 L1619.35 1208.02 L1619.94 1208.02 L1620.52 1208.02 L1621.11 1208.02 L1621.7 1208.02 L1622.28 1208.02 L1622.87 1208.02 L1623.46 1208.02 L1624.04 1208.02 L1624.63 1208.02 L1625.22 1208.02 L1625.8 1208.02 L1626.39 1208.02 L1626.97 1208.02 L1627.56 1208.02 L1628.15 1208.02 L1628.73 1208.02 L1629.32 1208.02 L1629.91 1208.02 L1630.49 1208.02 L1631.08 1208.02 L1631.67 1208.02 L1632.25 1208.02 L1632.84 1208.02 L1633.42 1208.02 L1634.01 1208.02 L1634.6 1208.02 L1635.18 1208.02 L1635.77 1208.02 L1636.36 1208.02 L1636.94 1208.02 L1637.53 1208.02 L1638.12 1208.02 L1638.7 1208.02 L1639.29 1208.02 L1639.88 1208.02 L1640.46 1208.02 L1641.05 1208.02 L1641.63 1208.02 L1642.22 1208.02 L1642.81 1208.02 L1643.39 1208.02 L1643.98 1208.02 L1644.57 1208.02 L1645.15 1208.02 L1645.74 1208.02 L1646.33 1208.02 L1646.91 1208.02 L1647.5 1208.02 L1648.09 1208.02 L1648.67 1208.02 L1649.26 1208.02 L1649.84 1208.02 L1650.43 1208.02 L1651.02 1208.02 L1651.6 1208.02 L1652.19 1208.02 L1652.78 1208.02 L1653.36 1208.02 L1653.95 1208.02 L1654.54 1208.02 L1655.12 1208.02 L1655.71 1208.02 L1656.29 1208.02 L1656.88 1208.02 L1657.47 1208.02 L1658.05 1208.02 L1658.64 1208.02 L1659.23 1208.02 L1659.81 1208.02 L1660.4 1208.02 L1660.99 1208.02 L1661.57 1208.02 L1662.16 1208.02 L1662.75 1208.02 L1663.33 1208.02 L1663.92 1208.02 L1664.5 1208.02 L1665.09 1208.02 L1665.68 1208.02 L1666.26 1208.02 L1666.85 1208.02 L1667.44 1208.02 L1668.02 1208.02 L1668.61 1208.02 L1669.2 1208.02 L1669.78 1208.02 L1670.37 1208.02 L1670.96 1208.02 L1671.54 1208.02 L1672.13 1208.02 L1672.71 1208.02 L1673.3 1208.02 L1673.89 1208.02 L1674.47 1208.02 L1675.06 1208.02 L1675.65 1208.02 L1676.23 1208.02 L1676.82 1208.02 L1677.41 1208.02 L1677.99 1208.02 L1678.58 1208.02 L1679.17 1208.02 L1679.75 1208.02 L1680.34 1208.02 L1680.92 1208.02 L1681.51 1208.02 L1682.1 1208.02 L1682.68 1208.02 L1683.27 1208.02 L1683.86 1208.02 L1684.44 1208.02 L1685.03 1208.02 L1685.62 1208.02 L1686.2 1208.02 L1686.79 1208.02 L1687.37 1208.02 L1687.96 1208.02 L1688.55 1208.02 L1689.13 1208.02 L1689.72 1208.02 L1690.31 1208.02 L1690.89 1208.02 L1691.48 1208.02 L1692.07 1208.02 L1692.65 1208.02 L1693.24 1208.02 L1693.83 1208.02 L1694.41 1208.02 L1695 1208.02 L1695.58 1208.02 L1696.17 1208.02 L1696.76 1208.02 L1697.34 1208.02 L1697.93 1208.02 L1698.52 1208.02 L1699.1 1208.02 L1699.69 1208.02 L1700.28 1208.02 L1700.86 1208.02 L1701.45 1208.02 L1702.04 1208.02 L1702.62 1208.02 L1703.21 1208.02 L1703.79 1208.02 L1704.38 1208.02 L1704.97 1208.02 L1705.55 1208.02 L1706.14 1208.02 L1706.73 1208.02 L1707.31 1208.02 L1707.9 1208.02 L1708.49 1208.02 L1709.07 1208.02 L1709.66 1208.02 L1710.24 1208.02 L1710.83 1208.02 L1711.42 1208.02 L1712 1208.02 L1712.59 1208.02 L1713.18 1208.02 L1713.76 1208.02 L1714.35 1208.02 L1714.94 1208.02 L1715.52 1208.02 L1716.11 1208.02 L1716.7 1208.02 L1717.28 1208.02 L1717.87 1208.02 L1718.45 1208.02 L1719.04 1208.02 L1719.63 1208.02 L1720.21 1208.02 L1720.8 1208.02 L1721.39 1208.02 L1721.97 1208.02 L1722.56 1208.02 L1723.15 1208.02 L1723.73 1208.02 L1724.32 1208.02 L1724.91 1208.02 L1725.49 1208.02 L1726.08 1208.02 L1726.66 1208.02 L1727.25 1208.02 L1727.84 1208.02 L1728.42 1208.02 L1729.01 1208.02 L1729.6 1208.02 L1730.18 1208.02 L1730.77 1208.02 L1731.36 1208.02 L1731.94 1208.02 L1732.53 1208.02 L1733.11 1208.02 L1733.7 1208.02 L1734.29 1208.02 L1734.87 1208.02 L1735.46 1208.02 L1736.05 1208.02 L1736.63 1208.02 L1737.22 1208.02 L1737.81 1208.02 L1738.39 1208.02 L1738.98 1208.02 L1739.57 1208.02 L1740.15 1208.02 L1740.74 1208.02 L1741.32 1208.02 L1741.91 1208.02 L1742.5 1208.02 L1743.08 1208.02 L1743.67 1208.02 L1744.26 1208.02 L1744.84 1208.02 L1745.43 1208.02 L1746.02 1208.02 L1746.6 1208.02 L1747.19 1208.02 L1747.78 1208.02 L1748.36 1208.02 L1748.95 1208.02 L1749.53 1208.02 L1750.12 1208.02 L1750.71 1208.02 L1751.29 1208.02 L1751.88 1208.02 L1752.47 1208.02 L1753.05 1208.02 L1753.64 1208.02 L1754.23 1208.02 L1754.81 1208.02 L1755.4 1208.02 L1755.99 1208.02 L1756.57 1208.02 L1757.16 1208.02 L1757.74 1208.02 L1758.33 1208.02 L1758.92 1208.02 L1759.5 1208.02 L1760.09 1208.02 L1760.68 1208.02 L1761.26 1208.02 L1761.85 1208.02 L1762.44 1208.02 L1763.02 1208.02 L1763.61 1208.02 L1764.19 1208.02 L1764.78 1208.02 L1765.37 1208.02 L1765.95 1208.02 L1766.54 1208.02 L1767.13 1208.02 L1767.71 1208.02 L1768.3 1208.02 L1768.89 1208.02 L1769.47 1208.02 L1770.06 1208.02 L1770.65 1208.02 L1771.23 1208.02 L1771.82 1208.02 L1772.4 1208.02 L1772.99 1208.02 L1773.58 1208.02 L1774.16 1208.02 L1774.75 1208.02 L1775.34 1208.02 L1775.92 1208.02 L1776.51 1208.02 L1777.1 1208.02 L1777.68 1208.02 L1778.27 1208.02 L1778.86 1208.02 L1779.44 1208.02 L1780.03 1208.02 L1780.61 1208.02 L1781.2 1208.02 L1781.79 1208.02 L1782.37 1208.02 L1782.96 1208.02 L1783.55 1208.02 L1784.13 1208.02 L1784.72 1208.02 L1785.31 1208.02 L1785.89 1208.02 L1786.48 1208.02 L1787.06 1208.02 L1787.65 1208.02 L1788.24 1208.02 L1788.82 1208.02 L1789.41 1208.02 L1790 1208.02 L1790.58 1208.02 L1791.17 1208.02 L1791.76 1208.02 L1792.34 1208.02 L1792.93 1208.02 L1793.52 1208.02 L1794.1 1208.02 L1794.69 1208.02 L1795.27 1208.02 L1795.86 1208.02 L1796.45 1208.02 L1797.03 1208.02 L1797.62 1208.02 L1798.21 1208.02 L1798.79 1208.02 L1799.38 1208.02 L1799.97 1208.02 L1800.55 1208.02 L1801.14 1208.02 L1801.73 1208.02 L1802.31 1208.02 L1802.9 1208.02 L1803.48 1208.02 L1804.07 1208.02 L1804.66 1208.02 L1805.24 1208.02 L1805.83 1208.02 L1806.42 1208.02 L1807 1208.02 L1807.59 1208.02 L1808.18 1208.02 L1808.76 1208.02 L1809.35 1208.02 L1809.94 1208.02 L1810.52 1208.02 L1811.11 1208.02 L1811.69 1208.02 L1812.28 1208.02 L1812.87 1208.02 L1813.45 1208.02 L1814.04 1208.02 L1814.63 1208.02 L1815.21 1208.02 L1815.8 1208.02 L1816.39 1208.02 L1816.97 1208.02 L1817.56 1208.02 L1818.14 1208.02 L1818.73 1208.02 L1819.32 1208.02 L1819.9 1208.02 L1820.49 1208.02 L1821.08 1208.02 L1821.66 1208.02 L1822.25 1208.02 L1822.84 1208.02 L1823.42 1208.02 L1824.01 1208.02 L1824.6 1208.02 L1825.18 1208.02 L1825.77 1208.02 L1826.35 1208.02 L1826.94 1208.02 L1827.53 1208.02 L1828.11 1208.02 L1828.7 1208.02 L1829.29 1208.02 L1829.87 1208.02 L1830.46 1208.02 L1831.05 1208.02 L1831.63 1208.02 L1832.22 1208.02 L1832.81 1208.02 L1833.39 1208.02 L1833.98 1208.02 L1834.56 1208.02 L1835.15 1208.02 L1835.74 1208.02 L1836.32 1208.02 L1836.91 1208.02 L1837.5 1208.02 L1838.08 1208.02 L1838.67 1208.02 L1839.26 1208.02 L1839.84 1208.02 L1840.43 1208.02 L1841.01 1208.02 L1841.6 1208.02 L1842.19 1208.02 L1842.77 1208.02 L1843.36 1208.02 L1843.95 1208.02 L1844.53 1208.02 L1845.12 1208.02 L1845.71 1208.02 L1846.29 1208.02 L1846.88 1208.02 L1847.47 1208.02 L1848.05 1208.02 L1848.64 1208.02 L1849.22 1208.02 L1849.81 1208.02 L1850.4 1208.02 L1850.98 1208.02 L1851.57 1208.02 L1852.16 1208.02 L1852.74 1208.02 L1853.33 1208.02 L1853.92 1208.02 L1854.5 1208.02 L1855.09 1208.02 L1855.68 1208.02 L1856.26 1208.02 L1856.85 1208.02 L1857.43 1208.02 L1858.02 1208.02 L1858.61 1208.02 L1859.19 1208.02 L1859.78 1208.02 L1860.37 1208.02 L1860.95 1208.02 L1861.54 1208.02 L1862.13 1208.02 L1862.71 1208.02 L1863.3 1208.02 L1863.88 1208.02 L1864.47 1208.02 L1865.06 1208.02 L1865.64 1208.02 L1866.23 1208.02 L1866.82 1208.02 L1867.4 1208.02 L1867.99 1208.02 L1868.58 1208.02 L1869.16 1208.02 L1869.75 1208.02 L1870.34 1208.02 L1870.92 1208.02 L1871.51 1208.02 L1872.09 1208.02 L1872.68 1208.02 L1873.27 1208.02 L1873.85 1208.02 L1874.44 1208.02 L1875.03 1208.02 L1875.61 1208.02 L1876.2 1208.02 L1876.79 1208.02 L1877.37 1208.02 L1877.96 1208.02 L1878.55 1208.02 L1879.13 1208.02 L1879.72 1208.02 L1880.3 1208.02 L1880.89 1208.02 L1881.48 1208.02 L1882.06 1208.02 L1882.65 1208.02 L1883.24 1208.02 L1883.82 1208.02 L1884.41 1208.02 L1885 1208.02 L1885.58 1208.02 L1886.17 1208.02 L1886.76 1208.02 L1887.34 1208.02 L1887.93 1208.02 L1888.51 1208.02 L1889.1 1208.02 L1889.69 1208.02 L1890.27 1208.02 L1890.86 1208.02 L1891.45 1208.02 L1892.03 1208.02 L1892.62 1208.02 L1893.21 1208.02 L1893.79 1208.02 L1894.38 1208.02 L1894.96 1208.02 L1895.55 1208.02 L1896.14 1208.02 L1896.72 1208.02 L1897.31 1208.02 L1897.9 1208.02 L1898.48 1208.02 L1899.07 1208.02 L1899.66 1208.02 L1900.24 1208.02 L1900.83 1208.02 L1901.42 1208.02 L1902 1208.02 L1902.59 1208.02 L1903.17 1208.02 L1903.76 1208.02 L1904.35 1208.02 L1904.93 1208.02 L1905.52 1208.02 L1906.11 1208.02 L1906.69 1208.02 L1907.28 1208.02 L1907.87 1208.02 L1908.45 1208.02 L1909.04 1208.02 L1909.63 1208.02 L1910.21 1208.02 L1910.8 1208.02 L1911.38 1208.02 L1911.97 1208.02 L1912.56 1208.02 L1913.14 1208.02 L1913.73 1208.02 L1914.32 1208.02 L1914.9 1208.02 L1915.49 1208.02 L1916.08 1208.02 L1916.66 1208.02 L1917.25 1208.02 L1917.83 1208.02 L1918.42 1208.02 L1919.01 1208.02 L1919.59 1208.02 L1920.18 1208.02 L1920.77 1208.02 L1921.35 1208.02 L1921.94 1208.02 L1922.53 1208.02 L1923.11 1208.02 L1923.7 1208.02 L1924.29 1208.02 L1924.87 1208.02 L1925.46 1208.02 L1926.04 1208.02 L1926.63 1208.02 L1927.22 1208.02 L1927.8 1208.02 L1928.39 1208.02 L1928.98 1208.02 L1929.56 1208.02 L1930.15 1208.02 L1930.74 1208.02 L1931.32 1208.02 L1931.91 1208.02 L1932.5 1208.02 L1933.08 1208.02 L1933.67 1208.02 L1934.25 1208.02 L1934.84 1208.02 L1935.43 1208.02 L1936.01 1208.02 L1936.6 1208.02 L1937.19 1208.02 L1937.77 1208.02 L1938.36 1208.02 L1938.95 1208.02 L1939.53 1208.02 L1940.12 1208.02 L1940.71 1208.02 L1941.29 1208.02 L1941.88 1208.02 L1942.46 1208.02 L1943.05 1208.02 L1943.64 1208.02 L1944.22 1208.02 L1944.81 1208.02 L1945.4 1208.02 L1945.98 1208.02 L1946.57 1208.02 L1947.16 1208.02 L1947.74 1208.02 L1948.33 1208.02 L1948.91 1208.02 L1949.5 1208.02 L1950.09 1208.02 L1950.67 1208.02 L1951.26 1208.02 L1951.85 1208.02 L1952.43 1208.02 L1953.02 1208.02 L1953.61 1208.02 L1954.19 1208.02 L1954.78 1208.02 L1955.37 1208.02 L1955.95 1208.02 L1956.54 1208.02 L1957.12 1208.02 L1957.71 1208.02 L1958.3 1208.02 L1958.88 1208.02 L1959.47 1208.02 L1960.06 1208.02 L1960.64 1208.02 L1961.23 1208.02 L1961.82 1208.02 L1962.4 1208.02 L1962.99 1208.02 L1963.58 1208.02 L1964.16 1208.02 L1964.75 1208.02 L1965.33 1208.02 L1965.92 1208.02 L1966.51 1208.02 L1967.09 1208.02 L1967.68 1208.02 L1968.27 1208.02 L1968.85 1208.02 L1969.44 1208.02 L1970.03 1208.02 L1970.61 1208.02 L1971.2 1208.02 L1971.78 1208.02 L1972.37 1208.02 L1972.96 1208.02 L1973.54 1208.02 L1974.13 1208.02 L1974.72 1208.02 L1975.3 1208.02 L1975.89 1208.02 L1976.48 1208.02 L1977.06 1208.02 L1977.65 1208.02 L1978.24 1208.02 L1978.82 1208.02 L1979.41 1208.02 L1979.99 1208.02 L1980.58 1208.02 L1981.17 1208.02 L1981.75 1208.02 L1982.34 1208.02 L1982.93 1208.02 L1983.51 1208.02 L1984.1 1208.02 L1984.69 1208.02 L1985.27 1208.02 L1985.86 1208.02 L1986.45 1208.02 L1987.03 1208.02 L1987.62 1208.02 L1988.2 1208.02 L1988.79 1208.02 L1989.38 1208.02 L1989.96 1208.02 L1990.55 1208.02 L1991.14 1208.02 L1991.72 1208.02 L1992.31 1208.02 L1992.9 1208.02 L1993.48 1208.02 L1994.07 1208.02 L1994.65 1208.02 L1995.24 1208.02 L1995.83 1208.02 L1996.41 1208.02 L1997 1208.02 L1997.59 1208.02 L1998.17 1208.02 L1998.76 1208.02 L1999.35 1208.02 L1999.93 1208.02 L2000.52 1208.02 L2001.11 1208.02 L2001.69 1208.02 L2002.28 1208.02 L2002.86 1208.02 L2003.45 1208.02 L2004.04 1208.02 L2004.62 1208.02 L2005.21 1208.02 L2005.8 1208.02 L2006.38 1208.02 L2006.97 1208.02 L2007.56 1208.02 L2008.14 1208.02 L2008.73 1208.02 L2009.32 1208.02 L2009.9 1208.02 L2010.49 1208.02 L2011.07 1208.02 L2011.66 1208.02 L2012.25 1208.02 L2012.83 1208.02 L2013.42 1208.02 L2014.01 1208.02 L2014.59 1208.02 L2015.18 1208.02 L2015.77 1208.02 L2016.35 1208.02 L2016.94 1208.02 L2017.53 1208.02 L2018.11 1208.02 L2018.7 1208.02 L2019.28 1208.02 L2019.87 1208.02 L2020.46 1208.02 L2021.04 1208.02 L2021.63 1208.02 L2022.22 1208.02 L2022.8 1208.02 L2023.39 1208.02 L2023.98 1208.02 L2024.56 1208.02 L2025.15 1208.02 L2025.73 1208.02 L2026.32 1208.02 L2026.91 1208.02 L2027.49 1208.02 L2028.08 1208.02 L2028.67 1208.02 L2029.25 1208.02 L2029.84 1208.02 L2030.43 1208.02 L2031.01 1208.02 L2031.6 1208.02 L2032.19 1208.02 L2032.77 1208.02 L2033.36 1208.02 L2033.94 1208.02 L2034.53 1208.02 L2035.12 1208.02 L2035.7 1208.02 L2036.29 1208.02 L2036.88 1208.02 L2037.46 1208.02 L2038.05 1208.02 L2038.64 1208.02 L2039.22 1208.02 L2039.81 1208.02 L2040.4 1208.02 L2040.98 1208.02 L2041.57 1208.02 L2042.15 1208.02 L2042.74 1208.02 L2043.33 1208.02 L2043.91 1208.02 L2044.5 1208.02 L2045.09 1208.02 L2045.67 1208.02 L2046.26 1208.02 L2046.85 1208.02 L2047.43 1208.02 L2048.02 1208.02 L2048.6 1208.02 L2049.19 1208.02 L2049.78 1208.02 L2050.36 1208.02 L2050.95 1208.02 L2051.54 1208.02 L2052.12 1208.02 L2052.71 1208.02 L2053.3 1208.02 L2053.88 1208.02 L2054.47 1208.02 L2055.06 1208.02 L2055.64 1208.02 L2056.23 1208.02 L2056.81 1208.02 L2057.4 1208.02 L2057.99 1208.02 L2058.57 1208.02 L2059.16 1208.02 L2059.75 1208.02 L2060.33 1208.02 L2060.92 1208.02 L2061.51 1208.02 L2062.09 1208.02 L2062.68 1208.02 L2063.27 1208.02 L2063.85 1208.02 L2064.44 1208.02 L2065.02 1208.02 L2065.61 1208.02 L2066.2 1208.02 L2066.78 1208.02 L2067.37 1208.02 L2067.96 1208.02 L2068.54 1208.02 L2069.13 1208.02 L2069.72 1208.02 L2070.3 1208.02 L2070.89 1208.02 L2071.48 1208.02 L2072.06 1208.02 L2072.65 1208.02 L2073.23 1208.02 L2073.82 1208.02 L2074.41 1208.02 L2074.99 1208.02 L2075.58 1208.02 L2076.17 1208.02 L2076.75 1208.02 L2077.34 1208.02 L2077.93 1208.02 L2078.51 1208.02 L2079.1 1208.02 L2079.68 1208.02 L2080.27 1208.02 L2080.86 1208.02 L2081.44 1208.02 L2082.03 1208.02 L2082.62 1208.02 L2083.2 1208.02 L2083.79 1208.02 L2084.38 1208.02 L2084.96 1208.02 L2085.55 1208.02 L2086.14 1208.02 L2086.72 1208.02 L2087.31 1208.02 L2087.89 1208.02 L2088.48 1208.02 L2089.07 1208.02 L2089.65 1208.02 L2090.24 1208.02 L2090.83 1208.02 L2091.41 1208.02 L2092 1208.02 L2092.59 1208.02 L2093.17 1208.02 L2093.76 1208.02 L2094.35 1208.02 L2094.93 1208.02 L2095.52 1208.02 L2096.1 1208.02 L2096.69 1208.02 L2097.28 1208.02 L2097.86 1208.02 L2098.45 1208.02 L2099.04 1208.02 L2099.62 1208.02 L2100.21 1208.02 L2100.8 1208.02 L2101.38 1208.02 L2101.97 1208.02 L2102.55 1208.02 L2103.14 1208.02 L2103.73 1208.02 L2104.31 1208.02 L2104.9 1208.02 L2105.49 1208.02 L2106.07 1208.02 L2106.66 1208.02 L2107.25 1208.02 L2107.83 1208.02 L2108.42 1208.02 L2109.01 1208.02 L2109.59 1208.02 L2110.18 1208.02 L2110.76 1208.02 L2111.35 1208.02 L2111.94 1208.02 L2112.52 1208.02 L2113.11 1208.02 L2113.7 1208.02 L2114.28 1208.02 L2114.87 1208.02 L2115.46 1208.02 L2116.04 1208.02 L2116.63 1208.02 L2117.22 1208.02 L2117.8 1208.02 L2118.39 1208.02 L2118.97 1208.02 L2119.56 1208.02 L2120.15 1208.02 L2120.73 1208.02 L2121.32 1208.02 L2121.91 1208.02 L2122.49 1208.02 L2123.08 1208.02 L2123.67 1208.02 L2124.25 1208.02 L2124.84 1208.02 L2125.42 1208.02 L2126.01 1208.02 L2126.6 1208.02 L2127.18 1208.02 L2127.77 1208.02 L2128.36 1208.02 L2128.94 1208.02 L2129.53 1208.02 L2130.12 1208.02 L2130.7 1208.02 L2131.29 1208.02 L2131.88 1208.02 L2132.46 1208.02 L2133.05 1208.02 L2133.63 1208.02 L2134.22 1208.02 L2134.81 1208.02 L2135.39 1208.02 L2135.98 1208.02 L2136.57 1208.02 L2137.15 1208.02 L2137.74 1208.02 L2138.33 1208.02 L2138.91 1208.02 L2139.5 1208.02 L2140.09 1208.02 L2140.67 1208.02 L2141.26 1208.02 L2141.84 1208.02 L2142.43 1208.02 L2143.02 1208.02 L2143.6 1208.02 L2144.19 1208.02 L2144.78 1208.02 L2145.36 1208.02 L2145.95 1208.02 L2146.54 1208.02 L2147.12 1208.02 L2147.71 1208.02 L2148.3 1208.02 L2148.88 1208.02 L2149.47 1208.02 L2150.05 1208.02 L2150.64 1208.02 L2151.23 1208.02 L2151.81 1208.02 L2152.4 1208.02 L2152.99 1208.02 L2153.57 1208.02 L2154.16 1208.02 L2154.75 1208.02 L2155.33 1208.02 L2155.92 1208.02 L2156.5 1208.02 L2157.09 1208.02 L2157.68 1208.02 L2158.26 1208.02 L2158.26 1207.46 L2157.68 1207.46 L2157.09 1207.46 L2156.5 1207.46 L2155.92 1207.46 L2155.33 1207.46 L2154.75 1207.46 L2154.16 1207.46 L2153.57 1207.46 L2152.99 1207.46 L2152.4 1207.46 L2151.81 1207.46 L2151.23 1207.46 L2150.64 1207.46 L2150.05 1207.46 L2149.47 1207.46 L2148.88 1207.46 L2148.3 1207.46 L2147.71 1207.46 L2147.12 1207.46 L2146.54 1207.46 L2145.95 1207.46 L2145.36 1207.46 L2144.78 1207.46 L2144.19 1207.46 L2143.6 1207.46 L2143.02 1207.46 L2142.43 1207.46 L2141.84 1207.46 L2141.26 1207.46 L2140.67 1207.46 L2140.09 1207.46 L2139.5 1207.46 L2138.91 1207.46 L2138.33 1207.46 L2137.74 1207.46 L2137.15 1207.46 L2136.57 1207.46 L2135.98 1207.46 L2135.39 1207.46 L2134.81 1207.46 L2134.22 1207.46 L2133.63 1207.46 L2133.05 1207.46 L2132.46 1207.46 L2131.88 1207.46 L2131.29 1207.46 L2130.7 1207.46 L2130.12 1207.46 L2129.53 1207.46 L2128.94 1207.46 L2128.36 1207.46 L2127.77 1207.46 L2127.18 1207.46 L2126.6 1207.46 L2126.01 1207.46 L2125.42 1207.46 L2124.84 1207.46 L2124.25 1207.46 L2123.67 1207.46 L2123.08 1207.46 L2122.49 1207.46 L2121.91 1207.46 L2121.32 1207.46 L2120.73 1207.46 L2120.15 1207.46 L2119.56 1207.46 L2118.97 1207.46 L2118.39 1207.46 L2117.8 1207.46 L2117.22 1207.46 L2116.63 1207.46 L2116.04 1207.46 L2115.46 1207.46 L2114.87 1207.46 L2114.28 1207.46 L2113.7 1207.46 L2113.11 1207.46 L2112.52 1207.46 L2111.94 1207.46 L2111.35 1207.46 L2110.76 1207.46 L2110.18 1207.46 L2109.59 1207.46 L2109.01 1207.46 L2108.42 1207.46 L2107.83 1207.46 L2107.25 1207.46 L2106.66 1207.46 L2106.07 1207.46 L2105.49 1207.46 L2104.9 1207.46 L2104.31 1207.46 L2103.73 1207.46 L2103.14 1207.46 L2102.55 1207.46 L2101.97 1207.46 L2101.38 1207.46 L2100.8 1207.46 L2100.21 1207.46 L2099.62 1207.46 L2099.04 1207.46 L2098.45 1207.46 L2097.86 1207.46 L2097.28 1207.46 L2096.69 1207.46 L2096.1 1207.46 L2095.52 1207.46 L2094.93 1207.46 L2094.35 1207.46 L2093.76 1207.46 L2093.17 1207.46 L2092.59 1207.46 L2092 1207.46 L2091.41 1207.46 L2090.83 1207.46 L2090.24 1207.46 L2089.65 1207.46 L2089.07 1207.46 L2088.48 1207.46 L2087.89 1207.46 L2087.31 1207.46 L2086.72 1207.46 L2086.14 1207.46 L2085.55 1207.46 L2084.96 1207.46 L2084.38 1207.46 L2083.79 1207.46 L2083.2 1207.46 L2082.62 1207.46 L2082.03 1207.46 L2081.44 1207.46 L2080.86 1207.46 L2080.27 1207.46 L2079.68 1207.46 L2079.1 1207.46 L2078.51 1207.46 L2077.93 1207.46 L2077.34 1207.46 L2076.75 1207.46 L2076.17 1207.46 L2075.58 1207.46 L2074.99 1207.46 L2074.41 1207.46 L2073.82 1207.46 L2073.23 1207.46 L2072.65 1207.46 L2072.06 1207.46 L2071.48 1207.46 L2070.89 1207.46 L2070.3 1207.46 L2069.72 1207.46 L2069.13 1207.46 L2068.54 1207.46 L2067.96 1207.46 L2067.37 1207.46 L2066.78 1207.46 L2066.2 1207.46 L2065.61 1207.46 L2065.02 1207.46 L2064.44 1207.46 L2063.85 1207.46 L2063.27 1207.46 L2062.68 1207.46 L2062.09 1207.46 L2061.51 1207.46 L2060.92 1207.46 L2060.33 1207.46 L2059.75 1207.46 L2059.16 1207.46 L2058.57 1207.46 L2057.99 1207.46 L2057.4 1207.46 L2056.81 1207.46 L2056.23 1207.46 L2055.64 1207.46 L2055.06 1207.46 L2054.47 1207.46 L2053.88 1207.46 L2053.3 1207.46 L2052.71 1207.46 L2052.12 1207.46 L2051.54 1207.46 L2050.95 1207.46 L2050.36 1207.46 L2049.78 1207.46 L2049.19 1207.46 L2048.6 1207.46 L2048.02 1207.46 L2047.43 1207.46 L2046.85 1207.46 L2046.26 1207.46 L2045.67 1207.46 L2045.09 1207.46 L2044.5 1207.46 L2043.91 1207.46 L2043.33 1207.46 L2042.74 1207.46 L2042.15 1207.46 L2041.57 1207.46 L2040.98 1207.46 L2040.4 1207.46 L2039.81 1207.46 L2039.22 1207.46 L2038.64 1207.46 L2038.05 1207.46 L2037.46 1207.46 L2036.88 1207.46 L2036.29 1207.46 L2035.7 1207.46 L2035.12 1207.46 L2034.53 1207.46 L2033.94 1207.46 L2033.36 1207.46 L2032.77 1207.46 L2032.19 1207.46 L2031.6 1207.46 L2031.01 1207.46 L2030.43 1207.46 L2029.84 1207.46 L2029.25 1207.46 L2028.67 1207.46 L2028.08 1207.46 L2027.49 1207.46 L2026.91 1207.46 L2026.32 1207.46 L2025.73 1207.46 L2025.15 1207.46 L2024.56 1207.46 L2023.98 1207.46 L2023.39 1207.46 L2022.8 1207.46 L2022.22 1207.46 L2021.63 1207.46 L2021.04 1207.46 L2020.46 1207.46 L2019.87 1207.46 L2019.28 1207.46 L2018.7 1207.46 L2018.11 1207.46 L2017.53 1207.46 L2016.94 1207.46 L2016.35 1207.46 L2015.77 1207.46 L2015.18 1207.46 L2014.59 1207.46 L2014.01 1207.46 L2013.42 1207.46 L2012.83 1207.46 L2012.25 1207.46 L2011.66 1207.46 L2011.07 1207.46 L2010.49 1207.46 L2009.9 1207.46 L2009.32 1207.46 L2008.73 1207.46 L2008.14 1207.46 L2007.56 1207.46 L2006.97 1207.46 L2006.38 1207.46 L2005.8 1207.46 L2005.21 1207.46 L2004.62 1207.46 L2004.04 1207.46 L2003.45 1207.46 L2002.86 1207.46 L2002.28 1207.46 L2001.69 1207.46 L2001.11 1207.46 L2000.52 1207.46 L1999.93 1207.46 L1999.35 1207.46 L1998.76 1207.46 L1998.17 1207.46 L1997.59 1207.46 L1997 1207.46 L1996.41 1207.46 L1995.83 1207.46 L1995.24 1207.46 L1994.65 1207.46 L1994.07 1207.46 L1993.48 1207.46 L1992.9 1207.46 L1992.31 1207.46 L1991.72 1207.46 L1991.14 1207.46 L1990.55 1207.46 L1989.96 1207.46 L1989.38 1207.46 L1988.79 1207.46 L1988.2 1207.46 L1987.62 1207.46 L1987.03 1207.46 L1986.45 1207.46 L1985.86 1207.46 L1985.27 1207.46 L1984.69 1207.46 L1984.1 1207.46 L1983.51 1207.46 L1982.93 1207.46 L1982.34 1207.46 L1981.75 1207.46 L1981.17 1207.46 L1980.58 1207.46 L1979.99 1207.46 L1979.41 1207.46 L1978.82 1207.46 L1978.24 1207.46 L1977.65 1207.46 L1977.06 1207.46 L1976.48 1207.46 L1975.89 1207.46 L1975.3 1207.46 L1974.72 1207.46 L1974.13 1207.46 L1973.54 1207.46 L1972.96 1207.46 L1972.37 1207.46 L1971.78 1207.46 L1971.2 1207.46 L1970.61 1207.46 L1970.03 1207.46 L1969.44 1207.46 L1968.85 1207.46 L1968.27 1207.46 L1967.68 1207.46 L1967.09 1207.46 L1966.51 1207.46 L1965.92 1207.46 L1965.33 1207.46 L1964.75 1207.46 L1964.16 1207.46 L1963.58 1207.46 L1962.99 1207.46 L1962.4 1207.46 L1961.82 1207.46 L1961.23 1207.46 L1960.64 1207.46 L1960.06 1207.46 L1959.47 1207.46 L1958.88 1207.46 L1958.3 1207.46 L1957.71 1207.46 L1957.12 1207.46 L1956.54 1207.46 L1955.95 1207.46 L1955.37 1207.46 L1954.78 1207.46 L1954.19 1207.46 L1953.61 1207.46 L1953.02 1207.46 L1952.43 1207.46 L1951.85 1207.46 L1951.26 1207.46 L1950.67 1207.46 L1950.09 1207.46 L1949.5 1207.46 L1948.91 1207.46 L1948.33 1207.46 L1947.74 1207.46 L1947.16 1207.46 L1946.57 1207.46 L1945.98 1207.46 L1945.4 1207.46 L1944.81 1207.46 L1944.22 1207.46 L1943.64 1207.46 L1943.05 1207.46 L1942.46 1207.46 L1941.88 1207.46 L1941.29 1207.46 L1940.71 1207.46 L1940.12 1207.46 L1939.53 1207.46 L1938.95 1207.46 L1938.36 1207.46 L1937.77 1207.46 L1937.19 1207.46 L1936.6 1207.46 L1936.01 1207.46 L1935.43 1207.46 L1934.84 1207.46 L1934.25 1207.46 L1933.67 1207.46 L1933.08 1207.46 L1932.5 1207.46 L1931.91 1207.46 L1931.32 1207.46 L1930.74 1207.46 L1930.15 1207.46 L1929.56 1207.46 L1928.98 1207.46 L1928.39 1207.46 L1927.8 1207.46 L1927.22 1207.46 L1926.63 1207.46 L1926.04 1207.46 L1925.46 1207.46 L1924.87 1207.46 L1924.29 1207.46 L1923.7 1207.46 L1923.11 1207.46 L1922.53 1207.46 L1921.94 1207.46 L1921.35 1207.46 L1920.77 1207.46 L1920.18 1207.46 L1919.59 1207.46 L1919.01 1207.46 L1918.42 1207.46 L1917.83 1207.46 L1917.25 1207.46 L1916.66 1207.46 L1916.08 1207.46 L1915.49 1207.46 L1914.9 1207.46 L1914.32 1207.46 L1913.73 1207.46 L1913.14 1207.46 L1912.56 1207.46 L1911.97 1207.46 L1911.38 1207.46 L1910.8 1207.46 L1910.21 1207.46 L1909.63 1207.46 L1909.04 1207.46 L1908.45 1207.46 L1907.87 1207.46 L1907.28 1207.46 L1906.69 1207.46 L1906.11 1207.46 L1905.52 1207.46 L1904.93 1207.46 L1904.35 1207.46 L1903.76 1207.46 L1903.17 1207.46 L1902.59 1207.46 L1902 1207.46 L1901.42 1207.46 L1900.83 1207.46 L1900.24 1207.46 L1899.66 1207.46 L1899.07 1207.46 L1898.48 1207.46 L1897.9 1207.46 L1897.31 1207.46 L1896.72 1207.46 L1896.14 1207.46 L1895.55 1207.46 L1894.96 1207.46 L1894.38 1207.46 L1893.79 1207.46 L1893.21 1207.46 L1892.62 1207.46 L1892.03 1207.46 L1891.45 1207.46 L1890.86 1207.46 L1890.27 1207.46 L1889.69 1207.46 L1889.1 1207.46 L1888.51 1207.46 L1887.93 1207.46 L1887.34 1207.46 L1886.76 1207.46 L1886.17 1207.46 L1885.58 1207.46 L1885 1207.46 L1884.41 1207.46 L1883.82 1207.46 L1883.24 1207.46 L1882.65 1207.46 L1882.06 1207.46 L1881.48 1207.46 L1880.89 1207.46 L1880.3 1207.46 L1879.72 1207.46 L1879.13 1207.46 L1878.55 1207.46 L1877.96 1207.46 L1877.37 1207.46 L1876.79 1207.46 L1876.2 1207.46 L1875.61 1207.46 L1875.03 1207.46 L1874.44 1207.46 L1873.85 1207.46 L1873.27 1207.46 L1872.68 1207.46 L1872.09 1207.46 L1871.51 1207.46 L1870.92 1207.46 L1870.34 1207.46 L1869.75 1207.46 L1869.16 1207.46 L1868.58 1207.46 L1867.99 1207.46 L1867.4 1207.46 L1866.82 1207.46 L1866.23 1207.46 L1865.64 1207.46 L1865.06 1207.46 L1864.47 1207.46 L1863.88 1207.46 L1863.3 1207.46 L1862.71 1207.46 L1862.13 1207.46 L1861.54 1207.46 L1860.95 1207.46 L1860.37 1207.46 L1859.78 1207.46 L1859.19 1207.46 L1858.61 1207.46 L1858.02 1207.46 L1857.43 1207.46 L1856.85 1207.46 L1856.26 1207.46 L1855.68 1207.46 L1855.09 1207.46 L1854.5 1207.46 L1853.92 1207.46 L1853.33 1207.46 L1852.74 1207.46 L1852.16 1207.46 L1851.57 1207.46 L1850.98 1207.46 L1850.4 1207.46 L1849.81 1207.46 L1849.22 1207.46 L1848.64 1207.46 L1848.05 1207.46 L1847.47 1207.46 L1846.88 1207.46 L1846.29 1207.46 L1845.71 1207.46 L1845.12 1207.46 L1844.53 1207.46 L1843.95 1207.46 L1843.36 1207.46 L1842.77 1207.46 L1842.19 1207.46 L1841.6 1207.46 L1841.01 1207.46 L1840.43 1207.46 L1839.84 1207.46 L1839.26 1207.46 L1838.67 1207.46 L1838.08 1207.46 L1837.5 1207.46 L1836.91 1207.46 L1836.32 1207.46 L1835.74 1207.46 L1835.15 1207.46 L1834.56 1207.46 L1833.98 1207.46 L1833.39 1207.46 L1832.81 1207.46 L1832.22 1207.46 L1831.63 1207.46 L1831.05 1207.46 L1830.46 1207.46 L1829.87 1207.46 L1829.29 1207.46 L1828.7 1207.46 L1828.11 1207.46 L1827.53 1207.46 L1826.94 1207.46 L1826.35 1207.46 L1825.77 1207.46 L1825.18 1207.46 L1824.6 1207.46 L1824.01 1207.46 L1823.42 1207.46 L1822.84 1207.46 L1822.25 1207.46 L1821.66 1207.46 L1821.08 1207.46 L1820.49 1207.46 L1819.9 1207.46 L1819.32 1207.46 L1818.73 1207.46 L1818.14 1207.46 L1817.56 1207.46 L1816.97 1207.46 L1816.39 1207.46 L1815.8 1207.46 L1815.21 1207.46 L1814.63 1207.46 L1814.04 1207.46 L1813.45 1207.46 L1812.87 1207.46 L1812.28 1207.46 L1811.69 1207.46 L1811.11 1207.46 L1810.52 1207.46 L1809.94 1207.46 L1809.35 1207.46 L1808.76 1207.46 L1808.18 1207.46 L1807.59 1207.46 L1807 1207.46 L1806.42 1207.46 L1805.83 1207.46 L1805.24 1207.46 L1804.66 1207.46 L1804.07 1207.46 L1803.48 1207.46 L1802.9 1207.46 L1802.31 1207.46 L1801.73 1207.46 L1801.14 1207.46 L1800.55 1207.46 L1799.97 1207.46 L1799.38 1207.46 L1798.79 1207.46 L1798.21 1207.46 L1797.62 1207.46 L1797.03 1207.46 L1796.45 1207.46 L1795.86 1207.46 L1795.27 1207.46 L1794.69 1207.46 L1794.1 1207.46 L1793.52 1207.46 L1792.93 1207.46 L1792.34 1207.46 L1791.76 1207.46 L1791.17 1207.46 L1790.58 1207.46 L1790 1207.46 L1789.41 1207.46 L1788.82 1207.46 L1788.24 1207.46 L1787.65 1207.46 L1787.06 1207.46 L1786.48 1207.46 L1785.89 1207.46 L1785.31 1207.46 L1784.72 1207.46 L1784.13 1207.46 L1783.55 1207.46 L1782.96 1207.46 L1782.37 1207.46 L1781.79 1207.46 L1781.2 1207.46 L1780.61 1207.46 L1780.03 1207.46 L1779.44 1207.46 L1778.86 1207.46 L1778.27 1207.46 L1777.68 1207.46 L1777.1 1207.46 L1776.51 1207.46 L1775.92 1207.46 L1775.34 1207.46 L1774.75 1207.46 L1774.16 1207.46 L1773.58 1207.46 L1772.99 1207.46 L1772.4 1207.46 L1771.82 1207.46 L1771.23 1207.46 L1770.65 1207.46 L1770.06 1207.46 L1769.47 1207.46 L1768.89 1207.46 L1768.3 1207.46 L1767.71 1207.46 L1767.13 1207.46 L1766.54 1207.46 L1765.95 1207.46 L1765.37 1207.46 L1764.78 1207.46 L1764.19 1207.46 L1763.61 1207.46 L1763.02 1207.46 L1762.44 1207.46 L1761.85 1207.46 L1761.26 1207.46 L1760.68 1207.46 L1760.09 1207.46 L1759.5 1207.46 L1758.92 1207.46 L1758.33 1207.46 L1757.74 1207.46 L1757.16 1207.46 L1756.57 1207.46 L1755.99 1207.46 L1755.4 1207.46 L1754.81 1207.46 L1754.23 1207.46 L1753.64 1207.46 L1753.05 1207.46 L1752.47 1207.46 L1751.88 1207.46 L1751.29 1207.46 L1750.71 1207.46 L1750.12 1207.46 L1749.53 1207.46 L1748.95 1207.46 L1748.36 1207.46 L1747.78 1207.46 L1747.19 1207.46 L1746.6 1207.46 L1746.02 1207.46 L1745.43 1207.46 L1744.84 1207.46 L1744.26 1207.46 L1743.67 1207.46 L1743.08 1207.46 L1742.5 1207.46 L1741.91 1207.46 L1741.32 1207.46 L1740.74 1207.46 L1740.15 1207.46 L1739.57 1207.46 L1738.98 1207.46 L1738.39 1207.46 L1737.81 1207.46 L1737.22 1207.46 L1736.63 1207.46 L1736.05 1207.46 L1735.46 1207.46 L1734.87 1207.46 L1734.29 1207.46 L1733.7 1207.46 L1733.11 1207.46 L1732.53 1207.46 L1731.94 1207.46 L1731.36 1207.46 L1730.77 1207.46 L1730.18 1207.46 L1729.6 1207.46 L1729.01 1207.46 L1728.42 1207.46 L1727.84 1207.46 L1727.25 1207.46 L1726.66 1207.46 L1726.08 1207.46 L1725.49 1207.46 L1724.91 1207.46 L1724.32 1207.46 L1723.73 1207.46 L1723.15 1207.46 L1722.56 1207.46 L1721.97 1207.46 L1721.39 1207.46 L1720.8 1207.46 L1720.21 1207.46 L1719.63 1207.46 L1719.04 1207.46 L1718.45 1207.46 L1717.87 1207.46 L1717.28 1207.46 L1716.7 1207.46 L1716.11 1207.46 L1715.52 1207.46 L1714.94 1207.46 L1714.35 1207.46 L1713.76 1207.46 L1713.18 1207.46 L1712.59 1207.46 L1712 1207.46 L1711.42 1207.46 L1710.83 1207.46 L1710.24 1207.46 L1709.66 1207.46 L1709.07 1207.46 L1708.49 1207.46 L1707.9 1207.46 L1707.31 1207.46 L1706.73 1207.46 L1706.14 1207.46 L1705.55 1207.46 L1704.97 1207.46 L1704.38 1207.46 L1703.79 1207.46 L1703.21 1207.46 L1702.62 1207.46 L1702.04 1207.46 L1701.45 1207.46 L1700.86 1207.46 L1700.28 1207.46 L1699.69 1207.46 L1699.1 1207.46 L1698.52 1207.46 L1697.93 1207.46 L1697.34 1207.46 L1696.76 1207.46 L1696.17 1207.46 L1695.58 1207.46 L1695 1207.46 L1694.41 1207.46 L1693.83 1207.46 L1693.24 1207.46 L1692.65 1207.46 L1692.07 1207.46 L1691.48 1207.46 L1690.89 1207.46 L1690.31 1207.46 L1689.72 1207.46 L1689.13 1207.46 L1688.55 1207.46 L1687.96 1207.46 L1687.37 1207.46 L1686.79 1207.46 L1686.2 1207.46 L1685.62 1207.46 L1685.03 1207.46 L1684.44 1207.46 L1683.86 1207.46 L1683.27 1207.46 L1682.68 1207.46 L1682.1 1207.46 L1681.51 1207.46 L1680.92 1207.46 L1680.34 1207.46 L1679.75 1207.46 L1679.17 1207.46 L1678.58 1207.46 L1677.99 1207.46 L1677.41 1207.46 L1676.82 1207.46 L1676.23 1207.46 L1675.65 1207.46 L1675.06 1207.46 L1674.47 1207.46 L1673.89 1207.46 L1673.3 1207.46 L1672.71 1207.46 L1672.13 1207.46 L1671.54 1207.46 L1670.96 1207.46 L1670.37 1207.46 L1669.78 1207.46 L1669.2 1207.46 L1668.61 1207.46 L1668.02 1207.46 L1667.44 1207.46 L1666.85 1207.46 L1666.26 1207.46 L1665.68 1207.46 L1665.09 1207.46 L1664.5 1207.46 L1663.92 1207.46 L1663.33 1207.46 L1662.75 1207.46 L1662.16 1207.46 L1661.57 1207.46 L1660.99 1207.46 L1660.4 1207.46 L1659.81 1207.46 L1659.23 1207.46 L1658.64 1207.46 L1658.05 1207.46 L1657.47 1207.46 L1656.88 1207.46 L1656.29 1207.46 L1655.71 1207.46 L1655.12 1207.46 L1654.54 1207.46 L1653.95 1207.46 L1653.36 1207.46 L1652.78 1207.46 L1652.19 1207.46 L1651.6 1207.46 L1651.02 1207.46 L1650.43 1207.46 L1649.84 1207.46 L1649.26 1207.46 L1648.67 1207.46 L1648.09 1207.46 L1647.5 1207.46 L1646.91 1207.46 L1646.33 1207.46 L1645.74 1207.46 L1645.15 1207.46 L1644.57 1207.46 L1643.98 1207.46 L1643.39 1207.46 L1642.81 1207.46 L1642.22 1207.46 L1641.63 1207.46 L1641.05 1207.46 L1640.46 1207.46 L1639.88 1207.46 L1639.29 1207.46 L1638.7 1207.46 L1638.12 1207.46 L1637.53 1207.46 L1636.94 1207.46 L1636.36 1207.46 L1635.77 1207.46 L1635.18 1207.46 L1634.6 1207.46 L1634.01 1207.46 L1633.42 1207.46 L1632.84 1207.46 L1632.25 1207.46 L1631.67 1207.46 L1631.08 1207.46 L1630.49 1207.46 L1629.91 1207.46 L1629.32 1207.46 L1628.73 1207.46 L1628.15 1207.46 L1627.56 1207.46 L1626.97 1207.46 L1626.39 1207.46 L1625.8 1207.46 L1625.22 1207.46 L1624.63 1207.46 L1624.04 1207.46 L1623.46 1207.46 L1622.87 1207.46 L1622.28 1207.46 L1621.7 1207.46 L1621.11 1207.46 L1620.52 1207.46 L1619.94 1207.46 L1619.35 1207.46 L1618.76 1207.46 L1618.18 1207.46 L1617.59 1207.46 L1617.01 1207.46 L1616.42 1207.46 L1615.83 1207.46 L1615.25 1207.46 L1614.66 1207.46 L1614.07 1207.46 L1613.49 1207.46 L1612.9 1207.46 L1612.31 1207.46 L1611.73 1207.46 L1611.14 1207.46 L1610.55 1207.46 L1609.97 1207.46 L1609.38 1207.46 L1608.8 1207.46 L1608.21 1207.46 L1607.62 1207.46 L1607.04 1207.46 L1606.45 1207.46 L1605.86 1207.46 L1605.28 1207.46 L1604.69 1207.46 L1604.1 1207.46 L1603.52 1207.46 L1602.93 1207.46 L1602.34 1207.46 L1601.76 1207.46 L1601.17 1207.46 L1600.59 1207.46 L1600 1207.46 L1599.41 1207.46 L1598.83 1207.46 L1598.24 1207.46 L1597.65 1207.46 L1597.07 1207.46 L1596.48 1207.46 L1595.89 1207.46 L1595.31 1207.46 L1594.72 1207.46 L1594.14 1207.46 L1593.55 1207.46 L1592.96 1207.46 L1592.38 1207.46 L1591.79 1207.46 L1591.2 1207.46 L1590.62 1207.46 L1590.03 1207.46 L1589.44 1207.46 L1588.86 1207.46 L1588.27 1207.46 L1587.68 1207.46 L1587.1 1207.46 L1586.51 1207.46 L1585.93 1207.46 L1585.34 1207.46 L1584.75 1207.46 L1584.17 1207.46 L1583.58 1207.46 L1582.99 1207.46 L1582.41 1207.46 L1581.82 1207.46 L1581.23 1207.46 L1580.65 1207.46 L1580.06 1207.46 L1579.47 1207.46 L1578.89 1207.46 L1578.3 1207.46 L1577.72 1207.46 L1577.13 1207.46 L1576.54 1207.46 L1575.96 1207.46 L1575.37 1207.46 L1574.78 1207.46 L1574.2 1207.46 L1573.61 1207.46 L1573.02 1207.46 L1572.44 1207.46 L1571.85 1207.46 L1571.27 1207.46 L1570.68 1207.46 L1570.09 1207.46 L1569.51 1207.46 L1568.92 1207.46 L1568.33 1207.46 L1567.75 1207.46 L1567.16 1207.46 L1566.57 1207.46 L1565.99 1207.46 L1565.4 1207.46 L1564.81 1207.46 L1564.23 1207.46 L1563.64 1207.46 L1563.06 1207.46 L1562.47 1207.46 L1561.88 1207.46 L1561.3 1207.46 L1560.71 1207.46 L1560.12 1207.46 L1559.54 1207.46 L1558.95 1207.46 L1558.36 1207.46 L1557.78 1207.46 L1557.19 1207.46 L1556.6 1207.46 L1556.02 1207.46 L1555.43 1207.46 L1554.85 1207.46 L1554.26 1207.46 L1553.67 1207.46 L1553.09 1207.46 L1552.5 1207.46 L1551.91 1207.46 L1551.33 1207.46 L1550.74 1207.46 L1550.15 1207.46 L1549.57 1207.46 L1548.98 1207.46 L1548.4 1207.46 L1547.81 1207.46 L1547.22 1207.46 L1546.64 1207.46 L1546.05 1207.46 L1545.46 1207.46 L1544.88 1207.46 L1544.29 1207.46 L1543.7 1207.46 L1543.12 1207.46 L1542.53 1207.46 L1541.94 1207.46 L1541.36 1207.46 L1540.77 1207.46 L1540.19 1207.46 L1539.6 1207.46 L1539.01 1207.46 L1538.43 1207.46 L1537.84 1207.46 L1537.25 1207.46 L1536.67 1207.46 L1536.08 1207.46 L1535.49 1207.46 L1534.91 1207.46 L1534.32 1207.46 L1533.73 1207.46 L1533.15 1207.46 L1532.56 1207.46 L1531.98 1207.46 L1531.39 1207.46 L1530.8 1207.46 L1530.22 1207.46 L1529.63 1207.46 L1529.04 1207.46 L1528.46 1207.46 L1527.87 1207.46 L1527.28 1207.46 L1526.7 1207.46 L1526.11 1207.46 L1525.52 1207.46 L1524.94 1207.46 L1524.35 1207.46 L1523.77 1207.46 L1523.18 1207.46 L1522.59 1207.46 L1522.01 1207.46 L1521.42 1207.46 L1520.83 1207.46 L1520.25 1207.46 L1519.66 1207.46 L1519.07 1207.46 L1518.49 1207.46 L1517.9 1207.46 L1517.32 1207.46 L1516.73 1207.46 L1516.14 1207.46 L1515.56 1207.46 L1514.97 1207.46 L1514.38 1207.46 L1513.8 1207.46 L1513.21 1207.46 L1512.62 1207.46 L1512.04 1207.46 L1511.45 1207.46 L1510.86 1207.46 L1510.28 1207.46 L1509.69 1207.46 L1509.11 1207.46 L1508.52 1207.46 L1507.93 1207.46 L1507.35 1207.46 L1506.76 1207.46 L1506.17 1207.46 L1505.59 1207.46 L1505 1207.46 L1504.41 1207.46 L1503.83 1207.46 L1503.24 1207.46 L1502.65 1207.46 L1502.07 1207.46 L1501.48 1207.46 L1500.9 1207.46 L1500.31 1207.46 L1499.72 1207.46 L1499.14 1207.46 L1498.55 1207.46 L1497.96 1207.46 L1497.38 1207.46 L1496.79 1207.46 L1496.2 1207.46 L1495.62 1207.46 L1495.03 1207.46 L1494.45 1207.46 L1493.86 1207.46 L1493.27 1207.46 L1492.69 1207.46 L1492.1 1207.46 L1491.51 1207.46 L1490.93 1207.46 L1490.34 1207.46 L1489.75 1207.46 L1489.17 1207.46 L1488.58 1207.46 L1487.99 1207.46 L1487.41 1207.46 L1486.82 1207.46 L1486.24 1207.46 L1485.65 1207.46 L1485.06 1207.46 L1484.48 1207.46 L1483.89 1207.46 L1483.3 1207.46 L1482.72 1207.46 L1482.13 1207.46 L1481.54 1207.46 L1480.96 1207.46 L1480.37 1207.46 L1479.78 1207.46 L1479.2 1207.46 L1478.61 1207.46 L1478.03 1207.46 L1477.44 1207.46 L1476.85 1207.46 L1476.27 1207.46 L1475.68 1207.46 L1475.09 1207.46 L1474.51 1207.46 L1473.92 1207.46 L1473.33 1207.46 L1472.75 1207.46 L1472.16 1207.46 L1471.57 1207.46 L1470.99 1207.46 L1470.4 1207.46 L1469.82 1207.46 L1469.23 1207.46 L1468.64 1207.46 L1468.06 1207.46 L1467.47 1207.46 L1466.88 1207.46 L1466.3 1207.46 L1465.71 1207.46 L1465.12 1207.46 L1464.54 1207.46 L1463.95 1207.46 L1463.37 1207.46 L1462.78 1207.46 L1462.19 1207.46 L1461.61 1207.46 L1461.02 1207.46 L1460.43 1207.46 L1459.85 1207.46 L1459.26 1207.46 L1458.67 1207.46 L1458.09 1207.46 L1457.5 1207.46 L1456.91 1207.46 L1456.33 1207.46 L1455.74 1207.46 L1455.16 1207.46 L1454.57 1207.46 L1453.98 1207.46 L1453.4 1207.46 L1452.81 1207.46 L1452.22 1207.46 L1451.64 1207.46 L1451.05 1207.46 L1450.46 1207.46 L1449.88 1207.46 L1449.29 1207.46 L1448.7 1207.46 L1448.12 1207.46 L1447.53 1207.46 L1446.95 1207.46 L1446.36 1207.46 L1445.77 1207.46 L1445.19 1207.46 L1444.6 1207.46 L1444.01 1207.46 L1443.43 1207.46 L1442.84 1207.46 L1442.25 1207.46 L1441.67 1207.46 L1441.08 1207.46 L1440.5 1207.46 L1439.91 1207.46 L1439.32 1207.46 L1438.74 1207.46 L1438.15 1207.46 L1437.56 1207.46 L1436.98 1207.46 L1436.39 1207.46 L1435.8 1207.46 L1435.22 1207.46 L1434.63 1207.46 L1434.04 1207.46 L1433.46 1207.46 L1432.87 1207.46 L1432.29 1207.46 L1431.7 1207.46 L1431.11 1207.46 L1430.53 1207.46 L1429.94 1207.46 L1429.35 1207.46 L1428.77 1207.46 L1428.18 1207.46 L1427.59 1207.46 L1427.01 1207.46 L1426.42 1207.46 L1425.83 1207.46 L1425.25 1207.46 L1424.66 1207.46 L1424.08 1207.46 L1423.49 1207.46 L1422.9 1207.46 L1422.32 1207.46 L1421.73 1207.46 L1421.14 1207.46 L1420.56 1207.46 L1419.97 1207.46 L1419.38 1207.46 L1418.8 1207.46 L1418.21 1207.46 L1417.63 1207.46 L1417.04 1207.46 L1416.45 1207.46 L1415.87 1207.46 L1415.28 1207.46 L1414.69 1207.46 L1414.11 1207.46 L1413.52 1207.46 L1412.93 1207.46 L1412.35 1207.46 L1411.76 1207.46 L1411.17 1207.46 L1410.59 1207.46 L1410 1207.46 L1409.42 1207.46 L1408.83 1207.46 L1408.24 1207.46 L1407.66 1207.46 L1407.07 1207.46 L1406.48 1207.46 L1405.9 1207.46 L1405.31 1207.46 L1404.72 1207.46 L1404.14 1207.46 L1403.55 1207.46 L1402.96 1207.46 L1402.38 1207.46 L1401.79 1207.46 L1401.21 1207.46 L1400.62 1207.46 L1400.03 1207.46 L1399.45 1207.46 L1398.86 1207.46 L1398.27 1207.46 L1397.69 1207.46 L1397.1 1207.46 L1396.51 1207.46 L1395.93 1207.46 L1395.34 1207.46 L1394.75 1207.46 L1394.17 1207.46 L1393.58 1207.46 L1393 1207.46 L1392.41 1207.46 L1391.82 1207.46 L1391.24 1207.46 L1390.65 1207.46 L1390.06 1207.46 L1389.48 1207.46 L1388.89 1207.46 L1388.3 1207.46 L1387.72 1207.46 L1387.13 1207.46 L1386.55 1207.46 L1385.96 1207.46 L1385.37 1207.46 L1384.79 1207.46 L1384.2 1207.46 L1383.61 1207.46 L1383.03 1207.46 L1382.44 1207.46 L1381.85 1207.46 L1381.27 1207.46 L1380.68 1207.46 L1380.09 1207.46 L1379.51 1207.46 L1378.92 1207.46 L1378.34 1207.46 L1377.75 1207.46 L1377.16 1207.46 L1376.58 1207.46 L1375.99 1207.46 L1375.4 1207.46 L1374.82 1207.46 L1374.23 1207.46 L1373.64 1207.46 L1373.06 1207.46 L1372.47 1207.46 L1371.88 1207.46 L1371.3 1207.46 L1370.71 1207.46 L1370.13 1207.46 L1369.54 1207.46 L1368.95 1207.46 L1368.37 1207.46 L1367.78 1207.46 L1367.19 1207.46 L1366.61 1207.46 L1366.02 1207.46 L1365.43 1207.46 L1364.85 1207.46 L1364.26 1207.46 L1363.68 1207.46 L1363.09 1207.46 L1362.5 1207.46 L1361.92 1207.46 L1361.33 1207.46 L1360.74 1207.46 L1360.16 1207.46 L1359.57 1207.46 L1358.98 1207.46 L1358.4 1207.46 L1357.81 1207.46 L1357.22 1207.46 L1356.64 1207.46 L1356.05 1207.46 L1355.47 1207.46 L1354.88 1207.46 L1354.29 1207.46 L1353.71 1207.46 L1353.12 1207.46 L1352.53 1207.46 L1351.95 1207.46 L1351.36 1207.46 L1350.77 1207.46 L1350.19 1207.46 L1349.6 1207.46 L1349.01 1207.46 L1348.43 1207.46 L1347.84 1207.46 L1347.26 1207.46 L1346.67 1207.46 L1346.08 1207.46 L1345.5 1207.46 L1344.91 1207.46 L1344.32 1207.46 L1343.74 1207.46 L1343.15 1207.46 L1342.56 1207.46 L1341.98 1207.46 L1341.39 1207.46 L1340.8 1207.46 L1340.22 1207.46 L1339.63 1207.46 L1339.05 1207.46 L1338.46 1207.46 L1337.87 1207.46 L1337.29 1207.46 L1336.7 1207.46 L1336.11 1207.46 L1335.53 1207.46 L1334.94 1207.46 L1334.35 1207.46 L1333.77 1207.46 L1333.18 1207.46 L1332.6 1207.46 L1332.01 1207.46 L1331.42 1207.46 L1330.84 1207.46 L1330.25 1207.46 L1329.66 1207.46 L1329.08 1207.46 L1328.49 1207.46 L1327.9 1207.46 L1327.32 1207.46 L1326.73 1207.46 L1326.14 1207.46 L1325.56 1207.46 L1324.97 1207.46 L1324.39 1207.46 L1323.8 1207.46 L1323.21 1207.46 L1322.63 1207.46 L1322.04 1207.46 L1321.45 1207.46 L1320.87 1207.46 L1320.28 1207.46 L1319.69 1207.46 L1319.11 1207.46 L1318.52 1207.46 L1317.93 1207.46 L1317.35 1207.46 L1316.76 1207.46 L1316.18 1207.46 L1315.59 1207.46 L1315 1207.46 L1314.42 1207.46 L1313.83 1207.46 L1313.24 1207.46 L1312.66 1207.46 L1312.07 1207.46 L1311.48 1207.46 L1310.9 1207.46 L1310.31 1207.46 L1309.73 1207.46 L1309.14 1207.46 L1308.55 1207.46 L1307.97 1207.46 L1307.38 1207.46 L1306.79 1207.46 L1306.21 1207.46 L1305.62 1207.46 L1305.03 1207.46 L1304.45 1207.46 L1303.86 1207.46 L1303.27 1207.46 L1302.69 1207.46 L1302.1 1207.46 L1301.52 1207.46 L1300.93 1207.46 L1300.34 1207.46 L1299.76 1207.46 L1299.17 1207.46 L1298.58 1207.46 L1298 1207.46 L1297.41 1207.46 L1296.82 1207.46 L1296.24 1207.46 L1295.65 1207.46 L1295.06 1207.46 L1294.48 1207.46 L1293.89 1207.46 L1293.31 1207.46 L1292.72 1207.46 L1292.13 1207.46 L1291.55 1207.46 L1290.96 1207.46 L1290.37 1207.46 L1289.79 1207.46 L1289.2 1207.46 L1288.61 1207.46 L1288.03 1207.46 L1287.44 1207.46 L1286.86 1207.46 L1286.27 1207.46 L1285.68 1207.46 L1285.1 1207.46 L1284.51 1207.46 L1283.92 1207.46 L1283.34 1207.46 L1282.75 1207.46 L1282.16 1207.46 L1281.58 1207.46 L1280.99 1207.46 L1280.4 1207.46 L1279.82 1207.46 L1279.23 1207.46 L1278.65 1207.46 L1278.06 1207.46 L1277.47 1207.46 L1276.89 1207.46 L1276.3 1207.46 L1275.71 1207.46 L1275.13 1207.46 L1274.54 1207.46 L1273.95 1207.46 L1273.37 1207.46 L1272.78 1207.46 L1272.19 1207.46 L1271.61 1207.46 L1271.02 1207.46 L1270.44 1207.46 L1269.85 1207.46 L1269.26 1207.46 L1268.68 1207.46 L1268.09 1207.46 L1267.5 1207.46 L1266.92 1207.46 L1266.33 1207.46 L1265.74 1207.46 L1265.16 1207.46 L1264.57 1207.46 L1263.98 1207.46 L1263.4 1207.46 L1262.81 1207.46 L1262.23 1207.46 L1261.64 1207.46 L1261.05 1207.46 L1260.47 1207.46 L1259.88 1207.46 L1259.29 1207.46 L1258.71 1207.46 L1258.12 1207.46 L1257.53 1207.46 L1256.95 1207.46 L1256.36 1207.46 L1255.78 1207.46 L1255.19 1207.46 L1254.6 1207.46 L1254.02 1207.46 L1253.43 1207.46 L1252.84 1207.46 L1252.26 1207.46 L1251.67 1207.46 L1251.08 1207.46 L1250.5 1207.46 L1249.91 1207.46 L1249.32 1207.46 L1248.74 1207.46 L1248.15 1207.46 L1247.57 1207.46 L1246.98 1207.46 L1246.39 1207.46 L1245.81 1207.46 L1245.22 1207.46 L1244.63 1207.46 L1244.05 1207.46 L1243.46 1207.46 L1242.87 1207.46 L1242.29 1207.46 L1241.7 1207.46 L1241.11 1207.46 L1240.53 1207.46 L1239.94 1207.46 L1239.36 1207.46 L1238.77 1207.46 L1238.18 1207.46 L1237.6 1207.46 L1237.01 1207.46 L1236.42 1207.46 L1235.84 1207.46 L1235.25 1207.46 L1234.66 1207.46 L1234.08 1207.46 L1233.49 1207.46 L1232.91 1207.46 L1232.32 1207.46 L1231.73 1207.46 L1231.15 1207.46 L1230.56 1207.46 L1229.97 1207.46 L1229.39 1207.46 L1228.8 1207.46 L1228.21 1207.46 L1227.63 1207.46 L1227.04 1207.46 L1226.45 1207.46 L1225.87 1207.46 L1225.28 1207.46 L1224.7 1207.46 L1224.11 1207.46 L1223.52 1207.46 L1222.94 1207.46 L1222.35 1207.46 L1221.76 1207.46 L1221.18 1207.46 L1220.59 1207.46 L1220 1207.46 L1219.42 1207.46 L1218.83 1207.46 L1218.24 1207.46 L1217.66 1207.46 L1217.07 1207.46 L1216.49 1207.46 L1215.9 1207.46 L1215.31 1207.46 L1214.73 1207.46 L1214.14 1207.46 L1213.55 1207.46 L1212.97 1207.46 L1212.38 1207.46 L1211.79 1207.46 L1211.21 1207.46 L1210.62 1207.46 L1210.03 1207.46 L1209.45 1207.46 L1208.86 1207.46 L1208.28 1207.46 L1207.69 1207.46 L1207.1 1207.46 L1206.52 1207.46 L1205.93 1207.46 L1205.34 1207.46 L1204.76 1207.46 L1204.17 1207.46 L1203.58 1207.46 L1203 1207.46 L1202.41 1207.46 L1201.83 1207.46 L1201.24 1207.46 L1200.65 1207.46 L1200.07 1207.46 L1199.48 1207.46 L1198.89 1207.46 L1198.31 1207.46 L1197.72 1207.46 L1197.13 1207.46 L1196.55 1207.46 L1195.96 1207.46 L1195.37 1207.46 L1194.79 1207.46 L1194.2 1207.46 L1193.62 1207.46 L1193.03 1207.46 L1192.44 1207.46 L1191.86 1207.46 L1191.27 1207.46 L1190.68 1207.46 L1190.1 1207.46 L1189.51 1207.46 L1188.92 1207.46 L1188.34 1207.46 L1187.75 1207.46 L1187.16 1207.46 L1186.58 1207.46 L1185.99 1207.46 L1185.41 1207.46 L1184.82 1207.46 L1184.23 1207.46 L1183.65 1207.46 L1183.06 1207.46 L1182.47 1207.46 L1181.89 1207.46 L1181.3 1207.46 L1180.71 1207.46 L1180.13 1207.46 L1179.54 1207.46 L1178.96 1207.46 L1178.37 1207.46 L1177.78 1207.46 L1177.2 1207.46 L1176.61 1207.46 L1176.02 1207.46 L1175.44 1207.46 L1174.85 1207.46 L1174.26 1207.46 L1173.68 1207.46 L1173.09 1207.46 L1172.5 1207.46 L1171.92 1207.46 L1171.33 1207.46 L1170.75 1207.46 L1170.16 1207.46 L1169.57 1207.46 L1168.99 1207.46 L1168.4 1207.46 L1167.81 1207.46 L1167.23 1207.46 L1166.64 1207.46 L1166.05 1207.46 L1165.47 1207.46 L1164.88 1207.46 L1164.29 1207.46 L1163.71 1207.46 L1163.12 1207.46 L1162.54 1207.46 L1161.95 1207.46 L1161.36 1207.46 L1160.78 1207.46 L1160.19 1207.46 L1159.6 1207.46 L1159.02 1207.46 L1158.43 1207.46 L1157.84 1207.46 L1157.26 1207.46 L1156.67 1207.46 L1156.09 1207.46 L1155.5 1207.46 L1154.91 1207.46 L1154.33 1207.46 L1153.74 1207.46 L1153.15 1207.46 L1152.57 1207.46 L1151.98 1207.46 L1151.39 1207.46 L1150.81 1207.46 L1150.22 1207.46 L1149.63 1207.46 L1149.05 1207.46 L1148.46 1207.46 L1147.88 1207.46 L1147.29 1207.46 L1146.7 1207.46 L1146.12 1207.46 L1145.53 1207.46 L1144.94 1207.46 L1144.36 1207.46 L1143.77 1207.46 L1143.18 1207.46 L1142.6 1207.46 L1142.01 1207.46 L1141.42 1207.46 L1140.84 1207.46 L1140.25 1207.46 L1139.67 1207.46 L1139.08 1207.46 L1138.49 1207.46 L1137.91 1207.46 L1137.32 1207.46 L1136.73 1207.46 L1136.15 1207.46 L1135.56 1207.46 L1134.97 1207.46 L1134.39 1207.46 L1133.8 1207.46 L1133.21 1207.46 L1132.63 1207.46 L1132.04 1207.46 L1131.46 1207.46 L1130.87 1207.46 L1130.28 1207.46 L1129.7 1207.46 L1129.11 1207.46 L1128.52 1207.46 L1127.94 1207.46 L1127.35 1207.46 L1126.76 1207.46 L1126.18 1207.46 L1125.59 1207.46 L1125.01 1207.46 L1124.42 1207.46 L1123.83 1207.46 L1123.25 1207.46 L1122.66 1207.46 L1122.07 1207.46 L1121.49 1207.46 L1120.9 1207.46 L1120.31 1207.46 L1119.73 1207.46 L1119.14 1207.46 L1118.55 1207.46 L1117.97 1207.46 L1117.38 1207.46 L1116.8 1207.46 L1116.21 1207.46 L1115.62 1207.46 L1115.04 1207.46 L1114.45 1207.46 L1113.86 1207.46 L1113.28 1207.46 L1112.69 1207.46 L1112.1 1207.46 L1111.52 1207.46 L1110.93 1207.46 L1110.34 1207.46 L1109.76 1207.46 L1109.17 1207.46 L1108.59 1207.46 L1108 1207.46 L1107.41 1207.46 L1106.83 1207.46 L1106.24 1207.46 L1105.65 1207.46 L1105.07 1207.46 L1104.48 1207.46 L1103.89 1207.46 L1103.31 1207.46 L1102.72 1207.46 L1102.14 1207.46 L1101.55 1207.46 L1100.96 1207.46 L1100.38 1207.46 L1099.79 1207.46 L1099.2 1207.46 L1098.62 1207.46 L1098.03 1207.46 L1097.44 1207.46 L1096.86 1207.46 L1096.27 1207.46 L1095.68 1207.46 L1095.1 1207.46 L1094.51 1207.46 L1093.93 1207.46 L1093.34 1207.46 L1092.75 1207.46 L1092.17 1207.46 L1091.58 1207.46 L1090.99 1207.46 L1090.41 1207.46 L1089.82 1207.46 L1089.23 1207.46 L1088.65 1207.46 L1088.06 1207.46 L1087.47 1207.46 L1086.89 1207.46 L1086.3 1207.46 L1085.72 1207.46 L1085.13 1207.46 L1084.54 1207.46 L1083.96 1207.46 L1083.37 1207.46 L1082.78 1207.46 L1082.2 1207.46 L1081.61 1207.46 L1081.02 1207.46 L1080.44 1207.46 L1079.85 1207.46 L1079.26 1207.46 L1078.68 1207.46 L1078.09 1207.46 L1077.51 1207.46 L1076.92 1207.46 L1076.33 1207.46 L1075.75 1207.46 L1075.16 1207.46 L1074.57 1207.46 L1073.99 1207.46 L1073.4 1207.46 L1072.81 1207.46 L1072.23 1207.46 L1071.64 1207.46 L1071.06 1207.46 L1070.47 1207.46 L1069.88 1207.46 L1069.3 1207.46 L1068.71 1207.46 L1068.12 1207.46 L1067.54 1207.46 L1066.95 1207.46 L1066.36 1207.46 L1065.78 1207.46 L1065.19 1207.46 L1064.6 1207.46 L1064.02 1207.46 L1063.43 1207.46 L1062.85 1207.46 L1062.26 1207.46 L1061.67 1207.46 L1061.09 1207.46 L1060.5 1207.46 L1059.91 1207.46 L1059.33 1207.46 L1058.74 1207.46 L1058.15 1207.46 L1057.57 1207.46 L1056.98 1207.46 L1056.39 1207.46 L1055.81 1207.46 L1055.22 1207.46 L1054.64 1207.46 L1054.05 1207.46 L1053.46 1207.46 L1052.88 1207.46 L1052.29 1207.46 L1051.7 1207.46 L1051.12 1207.46 L1050.53 1207.46 L1049.94 1207.46 L1049.36 1207.46 L1048.77 1207.46 L1048.19 1207.46 L1047.6 1207.46 L1047.01 1207.46 L1046.43 1207.46 L1045.84 1207.46 L1045.25 1207.46 L1044.67 1207.46 L1044.08 1207.46 L1043.49 1207.46 L1042.91 1207.46 L1042.32 1207.46 L1041.73 1207.46 L1041.15 1207.46 L1040.56 1207.46 L1039.98 1207.46 L1039.39 1207.46 L1038.8 1207.46 L1038.22 1207.46 L1037.63 1207.46 L1037.04 1207.46 L1036.46 1207.46 L1035.87 1207.46 L1035.28 1207.46 L1034.7 1207.46 L1034.11 1207.46 L1033.52 1207.46 L1032.94 1207.46 L1032.35 1207.46 L1031.77 1207.46 L1031.18 1207.46 L1030.59 1207.46 L1030.01 1207.46 L1029.42 1207.46 L1028.83 1207.46 L1028.25 1207.46 L1027.66 1207.46 L1027.07 1207.46 L1026.49 1207.46 L1025.9 1207.46 L1025.32 1207.46 L1024.73 1207.46 L1024.14 1207.46 L1023.56 1207.46 L1022.97 1207.46 L1022.38 1207.46 L1021.8 1207.46 L1021.21 1207.46 L1020.62 1207.46 L1020.04 1207.46 L1019.45 1207.46 L1018.86 1207.46 L1018.28 1207.46 L1017.69 1207.46 L1017.11 1207.46 L1016.52 1207.46 L1015.93 1207.46 L1015.35 1207.46 L1014.76 1207.46 L1014.17 1207.46 L1013.59 1207.46 L1013 1207.46 L1012.41 1207.46 L1011.83 1207.46 L1011.24 1207.46 L1010.65 1207.46 L1010.07 1207.46 L1009.48 1207.46 L1008.9 1207.46 L1008.31 1207.46 L1007.72 1207.46 L1007.14 1207.46 L1006.55 1207.46 L1005.96 1207.46 L1005.38 1207.46 L1004.79 1207.46 L1004.2 1207.46 L1003.62 1207.46 L1003.03 1207.46 L1002.44 1207.46 L1001.86 1207.46 L1001.27 1207.46 L1000.69 1207.46 L1000.1 1207.46 L999.513 1207.46 L998.926 1207.46 L998.34 1207.46 L997.754 1207.46 L997.167 1207.46 L996.581 1207.46 L995.994 1207.46 L995.408 1207.46 L994.822 1207.46 L994.235 1207.46 L993.649 1207.46 L993.062 1207.46 L992.476 1207.46 L991.889 1207.46 L991.303 1207.46 L990.717 1207.46 L990.13 1207.46 L989.544 1207.46 L988.957 1207.46 L988.371 1207.46 L987.785 1207.46 L987.198 1207.46 L986.612 1207.46 L986.025 1207.46  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.74 986.612,1207.74 987.198,1207.74 987.785,1207.74 988.371,1207.74 988.957,1207.74 989.544,1207.74 990.13,1207.74 990.717,1207.74 991.303,1207.74 991.889,1207.74 992.476,1207.74 993.062,1207.74 993.649,1207.74 994.235,1207.74 994.822,1207.74 995.408,1207.74 995.994,1207.74 996.581,1207.74 997.167,1207.74 997.754,1207.74 998.34,1207.74 998.926,1207.74 999.513,1207.74 1000.1,1207.74 1000.69,1207.74 1001.27,1207.74 1001.86,1207.74 1002.44,1207.74 1003.03,1207.74 1003.62,1207.74 1004.2,1207.74 1004.79,1207.74 1005.38,1207.74 1005.96,1207.74 1006.55,1207.74 1007.14,1207.74 1007.72,1207.74 1008.31,1207.74 1008.9,1207.74 1009.48,1207.74 1010.07,1207.74 1010.65,1207.74 1011.24,1207.74 1011.83,1207.74 1012.41,1207.74 1013,1207.74 1013.59,1207.74 1014.17,1207.74 1014.76,1207.74 1015.35,1207.74 1015.93,1207.74 1016.52,1207.74 1017.11,1207.74 1017.69,1207.74 1018.28,1207.74 1018.86,1207.74 1019.45,1207.74 1020.04,1207.74 1020.62,1207.74 1021.21,1207.74 1021.8,1207.74 1022.38,1207.74 1022.97,1207.74 1023.56,1207.74 1024.14,1207.74 1024.73,1207.74 1025.32,1207.74 1025.9,1207.74 1026.49,1207.74 1027.07,1207.74 1027.66,1207.74 1028.25,1207.74 1028.83,1207.74 1029.42,1207.74 1030.01,1207.74 1030.59,1207.74 1031.18,1207.74 1031.77,1207.74 1032.35,1207.74 1032.94,1207.74 1033.52,1207.74 1034.11,1207.74 1034.7,1207.74 1035.28,1207.74 1035.87,1207.74 1036.46,1207.74 1037.04,1207.74 1037.63,1207.74 1038.22,1207.74 1038.8,1207.74 1039.39,1207.74 1039.98,1207.74 1040.56,1207.74 1041.15,1207.74 1041.73,1207.74 1042.32,1207.74 1042.91,1207.74 1043.49,1207.74 1044.08,1207.74 1044.67,1207.74 1045.25,1207.74 1045.84,1207.74 1046.43,1207.74 1047.01,1207.74 1047.6,1207.74 1048.19,1207.74 1048.77,1207.74 1049.36,1207.74 1049.94,1207.74 1050.53,1207.74 1051.12,1207.74 1051.7,1207.74 1052.29,1207.74 1052.88,1207.74 1053.46,1207.74 1054.05,1207.74 1054.64,1207.74 1055.22,1207.74 1055.81,1207.74 1056.39,1207.74 1056.98,1207.74 1057.57,1207.74 1058.15,1207.74 1058.74,1207.74 1059.33,1207.74 1059.91,1207.74 1060.5,1207.74 1061.09,1207.74 1061.67,1207.74 1062.26,1207.74 1062.85,1207.74 1063.43,1207.74 1064.02,1207.74 1064.6,1207.74 1065.19,1207.74 1065.78,1207.74 1066.36,1207.74 1066.95,1207.74 1067.54,1207.74 1068.12,1207.74 1068.71,1207.74 1069.3,1207.74 1069.88,1207.74 1070.47,1207.74 1071.06,1207.74 1071.64,1207.74 1072.23,1207.74 1072.81,1207.74 1073.4,1207.74 1073.99,1207.74 1074.57,1207.74 1075.16,1207.74 1075.75,1207.74 1076.33,1207.74 1076.92,1207.74 1077.51,1207.74 1078.09,1207.74 1078.68,1207.74 1079.26,1207.74 1079.85,1207.74 1080.44,1207.74 1081.02,1207.74 1081.61,1207.74 1082.2,1207.74 1082.78,1207.74 1083.37,1207.74 1083.96,1207.74 1084.54,1207.74 1085.13,1207.74 1085.72,1207.74 1086.3,1207.74 1086.89,1207.74 1087.47,1207.74 1088.06,1207.74 1088.65,1207.74 1089.23,1207.74 1089.82,1207.74 1090.41,1207.74 1090.99,1207.74 1091.58,1207.74 1092.17,1207.74 1092.75,1207.74 1093.34,1207.74 1093.93,1207.74 1094.51,1207.74 1095.1,1207.74 1095.68,1207.74 1096.27,1207.74 1096.86,1207.74 1097.44,1207.74 1098.03,1207.74 1098.62,1207.74 1099.2,1207.74 1099.79,1207.74 1100.38,1207.74 1100.96,1207.74 1101.55,1207.74 1102.14,1207.74 1102.72,1207.74 1103.31,1207.74 1103.89,1207.74 1104.48,1207.74 1105.07,1207.74 1105.65,1207.74 1106.24,1207.74 1106.83,1207.74 1107.41,1207.74 1108,1207.74 1108.59,1207.74 1109.17,1207.74 1109.76,1207.74 1110.34,1207.74 1110.93,1207.74 1111.52,1207.74 1112.1,1207.74 1112.69,1207.74 1113.28,1207.74 1113.86,1207.74 1114.45,1207.74 1115.04,1207.74 1115.62,1207.74 1116.21,1207.74 1116.8,1207.74 1117.38,1207.74 1117.97,1207.74 1118.55,1207.74 1119.14,1207.74 1119.73,1207.74 1120.31,1207.74 1120.9,1207.74 1121.49,1207.74 1122.07,1207.74 1122.66,1207.74 1123.25,1207.74 1123.83,1207.74 1124.42,1207.74 1125.01,1207.74 1125.59,1207.74 1126.18,1207.74 1126.76,1207.74 1127.35,1207.74 1127.94,1207.74 1128.52,1207.74 1129.11,1207.74 1129.7,1207.74 1130.28,1207.74 1130.87,1207.74 1131.46,1207.74 1132.04,1207.74 1132.63,1207.74 1133.21,1207.74 1133.8,1207.74 1134.39,1207.74 1134.97,1207.74 1135.56,1207.74 1136.15,1207.74 1136.73,1207.74 1137.32,1207.74 1137.91,1207.74 1138.49,1207.74 1139.08,1207.74 1139.67,1207.74 1140.25,1207.74 1140.84,1207.74 1141.42,1207.74 1142.01,1207.74 1142.6,1207.74 1143.18,1207.74 1143.77,1207.74 1144.36,1207.74 1144.94,1207.74 1145.53,1207.74 1146.12,1207.74 1146.7,1207.74 1147.29,1207.74 1147.88,1207.74 1148.46,1207.74 1149.05,1207.74 1149.63,1207.74 1150.22,1207.74 1150.81,1207.74 1151.39,1207.74 1151.98,1207.74 1152.57,1207.74 1153.15,1207.74 1153.74,1207.74 1154.33,1207.74 1154.91,1207.74 1155.5,1207.74 1156.09,1207.74 1156.67,1207.74 1157.26,1207.74 1157.84,1207.74 1158.43,1207.74 1159.02,1207.74 1159.6,1207.74 1160.19,1207.74 1160.78,1207.74 1161.36,1207.74 1161.95,1207.74 1162.54,1207.74 1163.12,1207.74 1163.71,1207.74 1164.29,1207.74 1164.88,1207.74 1165.47,1207.74 1166.05,1207.74 1166.64,1207.74 1167.23,1207.74 1167.81,1207.74 1168.4,1207.74 1168.99,1207.74 1169.57,1207.74 1170.16,1207.74 1170.75,1207.74 1171.33,1207.74 1171.92,1207.74 1172.5,1207.74 1173.09,1207.74 1173.68,1207.74 1174.26,1207.74 1174.85,1207.74 1175.44,1207.74 1176.02,1207.74 1176.61,1207.74 1177.2,1207.74 1177.78,1207.74 1178.37,1207.74 1178.96,1207.74 1179.54,1207.74 1180.13,1207.74 1180.71,1207.74 1181.3,1207.74 1181.89,1207.74 1182.47,1207.74 1183.06,1207.74 1183.65,1207.74 1184.23,1207.74 1184.82,1207.74 1185.41,1207.74 1185.99,1207.74 1186.58,1207.74 1187.16,1207.74 1187.75,1207.74 1188.34,1207.74 1188.92,1207.74 1189.51,1207.74 1190.1,1207.74 1190.68,1207.74 1191.27,1207.74 1191.86,1207.74 1192.44,1207.74 1193.03,1207.74 1193.62,1207.74 1194.2,1207.74 1194.79,1207.74 1195.37,1207.74 1195.96,1207.74 1196.55,1207.74 1197.13,1207.74 1197.72,1207.74 1198.31,1207.74 1198.89,1207.74 1199.48,1207.74 1200.07,1207.74 1200.65,1207.74 1201.24,1207.74 1201.83,1207.74 1202.41,1207.74 1203,1207.74 1203.58,1207.74 1204.17,1207.74 1204.76,1207.74 1205.34,1207.74 1205.93,1207.74 1206.52,1207.74 1207.1,1207.74 1207.69,1207.74 1208.28,1207.74 1208.86,1207.74 1209.45,1207.74 1210.03,1207.74 1210.62,1207.74 1211.21,1207.74 1211.79,1207.74 1212.38,1207.74 1212.97,1207.74 1213.55,1207.74 1214.14,1207.74 1214.73,1207.74 1215.31,1207.74 1215.9,1207.74 1216.49,1207.74 1217.07,1207.74 1217.66,1207.74 1218.24,1207.74 1218.83,1207.74 1219.42,1207.74 1220,1207.74 1220.59,1207.74 1221.18,1207.74 1221.76,1207.74 1222.35,1207.74 1222.94,1207.74 1223.52,1207.74 1224.11,1207.74 1224.7,1207.74 1225.28,1207.74 1225.87,1207.74 1226.45,1207.74 1227.04,1207.74 1227.63,1207.74 1228.21,1207.74 1228.8,1207.74 1229.39,1207.74 1229.97,1207.74 1230.56,1207.74 1231.15,1207.74 1231.73,1207.74 1232.32,1207.74 1232.91,1207.74 1233.49,1207.74 1234.08,1207.74 1234.66,1207.74 1235.25,1207.74 1235.84,1207.74 1236.42,1207.74 1237.01,1207.74 1237.6,1207.74 1238.18,1207.74 1238.77,1207.74 1239.36,1207.74 1239.94,1207.74 1240.53,1207.74 1241.11,1207.74 1241.7,1207.74 1242.29,1207.74 1242.87,1207.74 1243.46,1207.74 1244.05,1207.74 1244.63,1207.74 1245.22,1207.74 1245.81,1207.74 1246.39,1207.74 1246.98,1207.74 1247.57,1207.74 1248.15,1207.74 1248.74,1207.74 1249.32,1207.74 1249.91,1207.74 1250.5,1207.74 1251.08,1207.74 1251.67,1207.74 1252.26,1207.74 1252.84,1207.74 1253.43,1207.74 1254.02,1207.74 1254.6,1207.74 1255.19,1207.74 1255.78,1207.74 1256.36,1207.74 1256.95,1207.74 1257.53,1207.74 1258.12,1207.74 1258.71,1207.74 1259.29,1207.74 1259.88,1207.74 1260.47,1207.74 1261.05,1207.74 1261.64,1207.74 1262.23,1207.74 1262.81,1207.74 1263.4,1207.74 1263.98,1207.74 1264.57,1207.74 1265.16,1207.74 1265.74,1207.74 1266.33,1207.74 1266.92,1207.74 1267.5,1207.74 1268.09,1207.74 1268.68,1207.74 1269.26,1207.74 1269.85,1207.74 1270.44,1207.74 1271.02,1207.74 1271.61,1207.74 1272.19,1207.74 1272.78,1207.74 1273.37,1207.74 1273.95,1207.74 1274.54,1207.74 1275.13,1207.74 1275.71,1207.74 1276.3,1207.74 1276.89,1207.74 1277.47,1207.74 1278.06,1207.74 1278.65,1207.74 1279.23,1207.74 1279.82,1207.74 1280.4,1207.74 1280.99,1207.74 1281.58,1207.74 1282.16,1207.74 1282.75,1207.74 1283.34,1207.74 1283.92,1207.74 1284.51,1207.74 1285.1,1207.74 1285.68,1207.74 1286.27,1207.74 1286.86,1207.74 1287.44,1207.74 1288.03,1207.74 1288.61,1207.74 1289.2,1207.74 1289.79,1207.74 1290.37,1207.74 1290.96,1207.74 1291.55,1207.74 1292.13,1207.74 1292.72,1207.74 1293.31,1207.74 1293.89,1207.74 1294.48,1207.74 1295.06,1207.74 1295.65,1207.74 1296.24,1207.74 1296.82,1207.74 1297.41,1207.74 1298,1207.74 1298.58,1207.74 1299.17,1207.74 1299.76,1207.74 1300.34,1207.74 1300.93,1207.74 1301.52,1207.74 1302.1,1207.74 1302.69,1207.74 1303.27,1207.74 1303.86,1207.74 1304.45,1207.74 1305.03,1207.74 1305.62,1207.74 1306.21,1207.74 1306.79,1207.74 1307.38,1207.74 1307.97,1207.74 1308.55,1207.74 1309.14,1207.74 1309.73,1207.74 1310.31,1207.74 1310.9,1207.74 1311.48,1207.74 1312.07,1207.74 1312.66,1207.74 1313.24,1207.74 1313.83,1207.74 1314.42,1207.74 1315,1207.74 1315.59,1207.74 1316.18,1207.74 1316.76,1207.74 1317.35,1207.74 1317.93,1207.74 1318.52,1207.74 1319.11,1207.74 1319.69,1207.74 1320.28,1207.74 1320.87,1207.74 1321.45,1207.74 1322.04,1207.74 1322.63,1207.74 1323.21,1207.74 1323.8,1207.74 1324.39,1207.74 1324.97,1207.74 1325.56,1207.74 1326.14,1207.74 1326.73,1207.74 1327.32,1207.74 1327.9,1207.74 1328.49,1207.74 1329.08,1207.74 1329.66,1207.74 1330.25,1207.74 1330.84,1207.74 1331.42,1207.74 1332.01,1207.74 1332.6,1207.74 1333.18,1207.74 1333.77,1207.74 1334.35,1207.74 1334.94,1207.74 1335.53,1207.74 1336.11,1207.74 1336.7,1207.74 1337.29,1207.74 1337.87,1207.74 1338.46,1207.74 1339.05,1207.74 1339.63,1207.74 1340.22,1207.74 1340.8,1207.74 1341.39,1207.74 1341.98,1207.74 1342.56,1207.74 1343.15,1207.74 1343.74,1207.74 1344.32,1207.74 1344.91,1207.74 1345.5,1207.74 1346.08,1207.74 1346.67,1207.74 1347.26,1207.74 1347.84,1207.74 1348.43,1207.74 1349.01,1207.74 1349.6,1207.74 1350.19,1207.74 1350.77,1207.74 1351.36,1207.74 1351.95,1207.74 1352.53,1207.74 1353.12,1207.74 1353.71,1207.74 1354.29,1207.74 1354.88,1207.74 1355.47,1207.74 1356.05,1207.74 1356.64,1207.74 1357.22,1207.74 1357.81,1207.74 1358.4,1207.74 1358.98,1207.74 1359.57,1207.74 1360.16,1207.74 1360.74,1207.74 1361.33,1207.74 1361.92,1207.74 1362.5,1207.74 1363.09,1207.74 1363.68,1207.74 1364.26,1207.74 1364.85,1207.74 1365.43,1207.74 1366.02,1207.74 1366.61,1207.74 1367.19,1207.74 1367.78,1207.74 1368.37,1207.74 1368.95,1207.74 1369.54,1207.74 1370.13,1207.74 1370.71,1207.74 1371.3,1207.74 1371.88,1207.74 1372.47,1207.74 1373.06,1207.74 1373.64,1207.74 1374.23,1207.74 1374.82,1207.74 1375.4,1207.74 1375.99,1207.74 1376.58,1207.74 1377.16,1207.74 1377.75,1207.74 1378.34,1207.74 1378.92,1207.74 1379.51,1207.74 1380.09,1207.74 1380.68,1207.74 1381.27,1207.74 1381.85,1207.74 1382.44,1207.74 1383.03,1207.74 1383.61,1207.74 1384.2,1207.74 1384.79,1207.74 1385.37,1207.74 1385.96,1207.74 1386.55,1207.74 1387.13,1207.74 1387.72,1207.74 1388.3,1207.74 1388.89,1207.74 1389.48,1207.74 1390.06,1207.74 1390.65,1207.74 1391.24,1207.74 1391.82,1207.74 1392.41,1207.74 1393,1207.74 1393.58,1207.74 1394.17,1207.74 1394.75,1207.74 1395.34,1207.74 1395.93,1207.74 1396.51,1207.74 1397.1,1207.74 1397.69,1207.74 1398.27,1207.74 1398.86,1207.74 1399.45,1207.74 1400.03,1207.74 1400.62,1207.74 1401.21,1207.74 1401.79,1207.74 1402.38,1207.74 1402.96,1207.74 1403.55,1207.74 1404.14,1207.74 1404.72,1207.74 1405.31,1207.74 1405.9,1207.74 1406.48,1207.74 1407.07,1207.74 1407.66,1207.74 1408.24,1207.74 1408.83,1207.74 1409.42,1207.74 1410,1207.74 1410.59,1207.74 1411.17,1207.74 1411.76,1207.74 1412.35,1207.74 1412.93,1207.74 1413.52,1207.74 1414.11,1207.74 1414.69,1207.74 1415.28,1207.74 1415.87,1207.74 1416.45,1207.74 1417.04,1207.74 1417.63,1207.74 1418.21,1207.74 1418.8,1207.74 1419.38,1207.74 1419.97,1207.74 1420.56,1207.74 1421.14,1207.74 1421.73,1207.74 1422.32,1207.74 1422.9,1207.74 1423.49,1207.74 1424.08,1207.74 1424.66,1207.74 1425.25,1207.74 1425.83,1207.74 1426.42,1207.74 1427.01,1207.74 1427.59,1207.74 1428.18,1207.74 1428.77,1207.74 1429.35,1207.74 1429.94,1207.74 1430.53,1207.74 1431.11,1207.74 1431.7,1207.74 1432.29,1207.74 1432.87,1207.74 1433.46,1207.74 1434.04,1207.74 1434.63,1207.74 1435.22,1207.74 1435.8,1207.74 1436.39,1207.74 1436.98,1207.74 1437.56,1207.74 1438.15,1207.74 1438.74,1207.74 1439.32,1207.74 1439.91,1207.74 1440.5,1207.74 1441.08,1207.74 1441.67,1207.74 1442.25,1207.74 1442.84,1207.74 1443.43,1207.74 1444.01,1207.74 1444.6,1207.74 1445.19,1207.74 1445.77,1207.74 1446.36,1207.74 1446.95,1207.74 1447.53,1207.74 1448.12,1207.74 1448.7,1207.74 1449.29,1207.74 1449.88,1207.74 1450.46,1207.74 1451.05,1207.74 1451.64,1207.74 1452.22,1207.74 1452.81,1207.74 1453.4,1207.74 1453.98,1207.74 1454.57,1207.74 1455.16,1207.74 1455.74,1207.74 1456.33,1207.74 1456.91,1207.74 1457.5,1207.74 1458.09,1207.74 1458.67,1207.74 1459.26,1207.74 1459.85,1207.74 1460.43,1207.74 1461.02,1207.74 1461.61,1207.74 1462.19,1207.74 1462.78,1207.74 1463.37,1207.74 1463.95,1207.74 1464.54,1207.74 1465.12,1207.74 1465.71,1207.74 1466.3,1207.74 1466.88,1207.74 1467.47,1207.74 1468.06,1207.74 1468.64,1207.74 1469.23,1207.74 1469.82,1207.74 1470.4,1207.74 1470.99,1207.74 1471.57,1207.74 1472.16,1207.74 1472.75,1207.74 1473.33,1207.74 1473.92,1207.74 1474.51,1207.74 1475.09,1207.74 1475.68,1207.74 1476.27,1207.74 1476.85,1207.74 1477.44,1207.74 1478.03,1207.74 1478.61,1207.74 1479.2,1207.74 1479.78,1207.74 1480.37,1207.74 1480.96,1207.74 1481.54,1207.74 1482.13,1207.74 1482.72,1207.74 1483.3,1207.74 1483.89,1207.74 1484.48,1207.74 1485.06,1207.74 1485.65,1207.74 1486.24,1207.74 1486.82,1207.74 1487.41,1207.74 1487.99,1207.74 1488.58,1207.74 1489.17,1207.74 1489.75,1207.74 1490.34,1207.74 1490.93,1207.74 1491.51,1207.74 1492.1,1207.74 1492.69,1207.74 1493.27,1207.74 1493.86,1207.74 1494.45,1207.74 1495.03,1207.74 1495.62,1207.74 1496.2,1207.74 1496.79,1207.74 1497.38,1207.74 1497.96,1207.74 1498.55,1207.74 1499.14,1207.74 1499.72,1207.74 1500.31,1207.74 1500.9,1207.74 1501.48,1207.74 1502.07,1207.74 1502.65,1207.74 1503.24,1207.74 1503.83,1207.74 1504.41,1207.74 1505,1207.74 1505.59,1207.74 1506.17,1207.74 1506.76,1207.74 1507.35,1207.74 1507.93,1207.74 1508.52,1207.74 1509.11,1207.74 1509.69,1207.74 1510.28,1207.74 1510.86,1207.74 1511.45,1207.74 1512.04,1207.74 1512.62,1207.74 1513.21,1207.74 1513.8,1207.74 1514.38,1207.74 1514.97,1207.74 1515.56,1207.74 1516.14,1207.74 1516.73,1207.74 1517.32,1207.74 1517.9,1207.74 1518.49,1207.74 1519.07,1207.74 1519.66,1207.74 1520.25,1207.74 1520.83,1207.74 1521.42,1207.74 1522.01,1207.74 1522.59,1207.74 1523.18,1207.74 1523.77,1207.74 1524.35,1207.74 1524.94,1207.74 1525.52,1207.74 1526.11,1207.74 1526.7,1207.74 1527.28,1207.74 1527.87,1207.74 1528.46,1207.74 1529.04,1207.74 1529.63,1207.74 1530.22,1207.74 1530.8,1207.74 1531.39,1207.74 1531.98,1207.74 1532.56,1207.74 1533.15,1207.74 1533.73,1207.74 1534.32,1207.74 1534.91,1207.74 1535.49,1207.74 1536.08,1207.74 1536.67,1207.74 1537.25,1207.74 1537.84,1207.74 1538.43,1207.74 1539.01,1207.74 1539.6,1207.74 1540.19,1207.74 1540.77,1207.74 1541.36,1207.74 1541.94,1207.74 1542.53,1207.74 1543.12,1207.74 1543.7,1207.74 1544.29,1207.74 1544.88,1207.74 1545.46,1207.74 1546.05,1207.74 1546.64,1207.74 1547.22,1207.74 1547.81,1207.74 1548.4,1207.74 1548.98,1207.74 1549.57,1207.74 1550.15,1207.74 1550.74,1207.74 1551.33,1207.74 1551.91,1207.74 1552.5,1207.74 1553.09,1207.74 1553.67,1207.74 1554.26,1207.74 1554.85,1207.74 1555.43,1207.74 1556.02,1207.74 1556.6,1207.74 1557.19,1207.74 1557.78,1207.74 1558.36,1207.74 1558.95,1207.74 1559.54,1207.74 1560.12,1207.74 1560.71,1207.74 1561.3,1207.74 1561.88,1207.74 1562.47,1207.74 1563.06,1207.74 1563.64,1207.74 1564.23,1207.74 1564.81,1207.74 1565.4,1207.74 1565.99,1207.74 1566.57,1207.74 1567.16,1207.74 1567.75,1207.74 1568.33,1207.74 1568.92,1207.74 1569.51,1207.74 1570.09,1207.74 1570.68,1207.74 1571.27,1207.74 1571.85,1207.74 1572.44,1207.74 1573.02,1207.74 1573.61,1207.74 1574.2,1207.74 1574.78,1207.74 1575.37,1207.74 1575.96,1207.74 1576.54,1207.74 1577.13,1207.74 1577.72,1207.74 1578.3,1207.74 1578.89,1207.74 1579.47,1207.74 1580.06,1207.74 1580.65,1207.74 1581.23,1207.74 1581.82,1207.74 1582.41,1207.74 1582.99,1207.74 1583.58,1207.74 1584.17,1207.74 1584.75,1207.74 1585.34,1207.74 1585.93,1207.74 1586.51,1207.74 1587.1,1207.74 1587.68,1207.74 1588.27,1207.74 1588.86,1207.74 1589.44,1207.74 1590.03,1207.74 1590.62,1207.74 1591.2,1207.74 1591.79,1207.74 1592.38,1207.74 1592.96,1207.74 1593.55,1207.74 1594.14,1207.74 1594.72,1207.74 1595.31,1207.74 1595.89,1207.74 1596.48,1207.74 1597.07,1207.74 1597.65,1207.74 1598.24,1207.74 1598.83,1207.74 1599.41,1207.74 1600,1207.74 1600.59,1207.74 1601.17,1207.74 1601.76,1207.74 1602.34,1207.74 1602.93,1207.74 1603.52,1207.74 1604.1,1207.74 1604.69,1207.74 1605.28,1207.74 1605.86,1207.74 1606.45,1207.74 1607.04,1207.74 1607.62,1207.74 1608.21,1207.74 1608.8,1207.74 1609.38,1207.74 1609.97,1207.74 1610.55,1207.74 1611.14,1207.74 1611.73,1207.74 1612.31,1207.74 1612.9,1207.74 1613.49,1207.74 1614.07,1207.74 1614.66,1207.74 1615.25,1207.74 1615.83,1207.74 1616.42,1207.74 1617.01,1207.74 1617.59,1207.74 1618.18,1207.74 1618.76,1207.74 1619.35,1207.74 1619.94,1207.74 1620.52,1207.74 1621.11,1207.74 1621.7,1207.74 1622.28,1207.74 1622.87,1207.74 1623.46,1207.74 1624.04,1207.74 1624.63,1207.74 1625.22,1207.74 1625.8,1207.74 1626.39,1207.74 1626.97,1207.74 1627.56,1207.74 1628.15,1207.74 1628.73,1207.74 1629.32,1207.74 1629.91,1207.74 1630.49,1207.74 1631.08,1207.74 1631.67,1207.74 1632.25,1207.74 1632.84,1207.74 1633.42,1207.74 1634.01,1207.74 1634.6,1207.74 1635.18,1207.74 1635.77,1207.74 1636.36,1207.74 1636.94,1207.74 1637.53,1207.74 1638.12,1207.74 1638.7,1207.74 1639.29,1207.74 1639.88,1207.74 1640.46,1207.74 1641.05,1207.74 1641.63,1207.74 1642.22,1207.74 1642.81,1207.74 1643.39,1207.74 1643.98,1207.74 1644.57,1207.74 1645.15,1207.74 1645.74,1207.74 1646.33,1207.74 1646.91,1207.74 1647.5,1207.74 1648.09,1207.74 1648.67,1207.74 1649.26,1207.74 1649.84,1207.74 1650.43,1207.74 1651.02,1207.74 1651.6,1207.74 1652.19,1207.74 1652.78,1207.74 1653.36,1207.74 1653.95,1207.74 1654.54,1207.74 1655.12,1207.74 1655.71,1207.74 1656.29,1207.74 1656.88,1207.74 1657.47,1207.74 1658.05,1207.74 1658.64,1207.74 1659.23,1207.74 1659.81,1207.74 1660.4,1207.74 1660.99,1207.74 1661.57,1207.74 1662.16,1207.74 1662.75,1207.74 1663.33,1207.74 1663.92,1207.74 1664.5,1207.74 1665.09,1207.74 1665.68,1207.74 1666.26,1207.74 1666.85,1207.74 1667.44,1207.74 1668.02,1207.74 1668.61,1207.74 1669.2,1207.74 1669.78,1207.74 1670.37,1207.74 1670.96,1207.74 1671.54,1207.74 1672.13,1207.74 1672.71,1207.74 1673.3,1207.74 1673.89,1207.74 1674.47,1207.74 1675.06,1207.74 1675.65,1207.74 1676.23,1207.74 1676.82,1207.74 1677.41,1207.74 1677.99,1207.74 1678.58,1207.74 1679.17,1207.74 1679.75,1207.74 1680.34,1207.74 1680.92,1207.74 1681.51,1207.74 1682.1,1207.74 1682.68,1207.74 1683.27,1207.74 1683.86,1207.74 1684.44,1207.74 1685.03,1207.74 1685.62,1207.74 1686.2,1207.74 1686.79,1207.74 1687.37,1207.74 1687.96,1207.74 1688.55,1207.74 1689.13,1207.74 1689.72,1207.74 1690.31,1207.74 1690.89,1207.74 1691.48,1207.74 1692.07,1207.74 1692.65,1207.74 1693.24,1207.74 1693.83,1207.74 1694.41,1207.74 1695,1207.74 1695.58,1207.74 1696.17,1207.74 1696.76,1207.74 1697.34,1207.74 1697.93,1207.74 1698.52,1207.74 1699.1,1207.74 1699.69,1207.74 1700.28,1207.74 1700.86,1207.74 1701.45,1207.74 1702.04,1207.74 1702.62,1207.74 1703.21,1207.74 1703.79,1207.74 1704.38,1207.74 1704.97,1207.74 1705.55,1207.74 1706.14,1207.74 1706.73,1207.74 1707.31,1207.74 1707.9,1207.74 1708.49,1207.74 1709.07,1207.74 1709.66,1207.74 1710.24,1207.74 1710.83,1207.74 1711.42,1207.74 1712,1207.74 1712.59,1207.74 1713.18,1207.74 1713.76,1207.74 1714.35,1207.74 1714.94,1207.74 1715.52,1207.74 1716.11,1207.74 1716.7,1207.74 1717.28,1207.74 1717.87,1207.74 1718.45,1207.74 1719.04,1207.74 1719.63,1207.74 1720.21,1207.74 1720.8,1207.74 1721.39,1207.74 1721.97,1207.74 1722.56,1207.74 1723.15,1207.74 1723.73,1207.74 1724.32,1207.74 1724.91,1207.74 1725.49,1207.74 1726.08,1207.74 1726.66,1207.74 1727.25,1207.74 1727.84,1207.74 1728.42,1207.74 1729.01,1207.74 1729.6,1207.74 1730.18,1207.74 1730.77,1207.74 1731.36,1207.74 1731.94,1207.74 1732.53,1207.74 1733.11,1207.74 1733.7,1207.74 1734.29,1207.74 1734.87,1207.74 1735.46,1207.74 1736.05,1207.74 1736.63,1207.74 1737.22,1207.74 1737.81,1207.74 1738.39,1207.74 1738.98,1207.74 1739.57,1207.74 1740.15,1207.74 1740.74,1207.74 1741.32,1207.74 1741.91,1207.74 1742.5,1207.74 1743.08,1207.74 1743.67,1207.74 1744.26,1207.74 1744.84,1207.74 1745.43,1207.74 1746.02,1207.74 1746.6,1207.74 1747.19,1207.74 1747.78,1207.74 1748.36,1207.74 1748.95,1207.74 1749.53,1207.74 1750.12,1207.74 1750.71,1207.74 1751.29,1207.74 1751.88,1207.74 1752.47,1207.74 1753.05,1207.74 1753.64,1207.74 1754.23,1207.74 1754.81,1207.74 1755.4,1207.74 1755.99,1207.74 1756.57,1207.74 1757.16,1207.74 1757.74,1207.74 1758.33,1207.74 1758.92,1207.74 1759.5,1207.74 1760.09,1207.74 1760.68,1207.74 1761.26,1207.74 1761.85,1207.74 1762.44,1207.74 1763.02,1207.74 1763.61,1207.74 1764.19,1207.74 1764.78,1207.74 1765.37,1207.74 1765.95,1207.74 1766.54,1207.74 1767.13,1207.74 1767.71,1207.74 1768.3,1207.74 1768.89,1207.74 1769.47,1207.74 1770.06,1207.74 1770.65,1207.74 1771.23,1207.74 1771.82,1207.74 1772.4,1207.74 1772.99,1207.74 1773.58,1207.74 1774.16,1207.74 1774.75,1207.74 1775.34,1207.74 1775.92,1207.74 1776.51,1207.74 1777.1,1207.74 1777.68,1207.74 1778.27,1207.74 1778.86,1207.74 1779.44,1207.74 1780.03,1207.74 1780.61,1207.74 1781.2,1207.74 1781.79,1207.74 1782.37,1207.74 1782.96,1207.74 1783.55,1207.74 1784.13,1207.74 1784.72,1207.74 1785.31,1207.74 1785.89,1207.74 1786.48,1207.74 1787.06,1207.74 1787.65,1207.74 1788.24,1207.74 1788.82,1207.74 1789.41,1207.74 1790,1207.74 1790.58,1207.74 1791.17,1207.74 1791.76,1207.74 1792.34,1207.74 1792.93,1207.74 1793.52,1207.74 1794.1,1207.74 1794.69,1207.74 1795.27,1207.74 1795.86,1207.74 1796.45,1207.74 1797.03,1207.74 1797.62,1207.74 1798.21,1207.74 1798.79,1207.74 1799.38,1207.74 1799.97,1207.74 1800.55,1207.74 1801.14,1207.74 1801.73,1207.74 1802.31,1207.74 1802.9,1207.74 1803.48,1207.74 1804.07,1207.74 1804.66,1207.74 1805.24,1207.74 1805.83,1207.74 1806.42,1207.74 1807,1207.74 1807.59,1207.74 1808.18,1207.74 1808.76,1207.74 1809.35,1207.74 1809.94,1207.74 1810.52,1207.74 1811.11,1207.74 1811.69,1207.74 1812.28,1207.74 1812.87,1207.74 1813.45,1207.74 1814.04,1207.74 1814.63,1207.74 1815.21,1207.74 1815.8,1207.74 1816.39,1207.74 1816.97,1207.74 1817.56,1207.74 1818.14,1207.74 1818.73,1207.74 1819.32,1207.74 1819.9,1207.74 1820.49,1207.74 1821.08,1207.74 1821.66,1207.74 1822.25,1207.74 1822.84,1207.74 1823.42,1207.74 1824.01,1207.74 1824.6,1207.74 1825.18,1207.74 1825.77,1207.74 1826.35,1207.74 1826.94,1207.74 1827.53,1207.74 1828.11,1207.74 1828.7,1207.74 1829.29,1207.74 1829.87,1207.74 1830.46,1207.74 1831.05,1207.74 1831.63,1207.74 1832.22,1207.74 1832.81,1207.74 1833.39,1207.74 1833.98,1207.74 1834.56,1207.74 1835.15,1207.74 1835.74,1207.74 1836.32,1207.74 1836.91,1207.74 1837.5,1207.74 1838.08,1207.74 1838.67,1207.74 1839.26,1207.74 1839.84,1207.74 1840.43,1207.74 1841.01,1207.74 1841.6,1207.74 1842.19,1207.74 1842.77,1207.74 1843.36,1207.74 1843.95,1207.74 1844.53,1207.74 1845.12,1207.74 1845.71,1207.74 1846.29,1207.74 1846.88,1207.74 1847.47,1207.74 1848.05,1207.74 1848.64,1207.74 1849.22,1207.74 1849.81,1207.74 1850.4,1207.74 1850.98,1207.74 1851.57,1207.74 1852.16,1207.74 1852.74,1207.74 1853.33,1207.74 1853.92,1207.74 1854.5,1207.74 1855.09,1207.74 1855.68,1207.74 1856.26,1207.74 1856.85,1207.74 1857.43,1207.74 1858.02,1207.74 1858.61,1207.74 1859.19,1207.74 1859.78,1207.74 1860.37,1207.74 1860.95,1207.74 1861.54,1207.74 1862.13,1207.74 1862.71,1207.74 1863.3,1207.74 1863.88,1207.74 1864.47,1207.74 1865.06,1207.74 1865.64,1207.74 1866.23,1207.74 1866.82,1207.74 1867.4,1207.74 1867.99,1207.74 1868.58,1207.74 1869.16,1207.74 1869.75,1207.74 1870.34,1207.74 1870.92,1207.74 1871.51,1207.74 1872.09,1207.74 1872.68,1207.74 1873.27,1207.74 1873.85,1207.74 1874.44,1207.74 1875.03,1207.74 1875.61,1207.74 1876.2,1207.74 1876.79,1207.74 1877.37,1207.74 1877.96,1207.74 1878.55,1207.74 1879.13,1207.74 1879.72,1207.74 1880.3,1207.74 1880.89,1207.74 1881.48,1207.74 1882.06,1207.74 1882.65,1207.74 1883.24,1207.74 1883.82,1207.74 1884.41,1207.74 1885,1207.74 1885.58,1207.74 1886.17,1207.74 1886.76,1207.74 1887.34,1207.74 1887.93,1207.74 1888.51,1207.74 1889.1,1207.74 1889.69,1207.74 1890.27,1207.74 1890.86,1207.74 1891.45,1207.74 1892.03,1207.74 1892.62,1207.74 1893.21,1207.74 1893.79,1207.74 1894.38,1207.74 1894.96,1207.74 1895.55,1207.74 1896.14,1207.74 1896.72,1207.74 1897.31,1207.74 1897.9,1207.74 1898.48,1207.74 1899.07,1207.74 1899.66,1207.74 1900.24,1207.74 1900.83,1207.74 1901.42,1207.74 1902,1207.74 1902.59,1207.74 1903.17,1207.74 1903.76,1207.74 1904.35,1207.74 1904.93,1207.74 1905.52,1207.74 1906.11,1207.74 1906.69,1207.74 1907.28,1207.74 1907.87,1207.74 1908.45,1207.74 1909.04,1207.74 1909.63,1207.74 1910.21,1207.74 1910.8,1207.74 1911.38,1207.74 1911.97,1207.74 1912.56,1207.74 1913.14,1207.74 1913.73,1207.74 1914.32,1207.74 1914.9,1207.74 1915.49,1207.74 1916.08,1207.74 1916.66,1207.74 1917.25,1207.74 1917.83,1207.74 1918.42,1207.74 1919.01,1207.74 1919.59,1207.74 1920.18,1207.74 1920.77,1207.74 1921.35,1207.74 1921.94,1207.74 1922.53,1207.74 1923.11,1207.74 1923.7,1207.74 1924.29,1207.74 1924.87,1207.74 1925.46,1207.74 1926.04,1207.74 1926.63,1207.74 1927.22,1207.74 1927.8,1207.74 1928.39,1207.74 1928.98,1207.74 1929.56,1207.74 1930.15,1207.74 1930.74,1207.74 1931.32,1207.74 1931.91,1207.74 1932.5,1207.74 1933.08,1207.74 1933.67,1207.74 1934.25,1207.74 1934.84,1207.74 1935.43,1207.74 1936.01,1207.74 1936.6,1207.74 1937.19,1207.74 1937.77,1207.74 1938.36,1207.74 1938.95,1207.74 1939.53,1207.74 1940.12,1207.74 1940.71,1207.74 1941.29,1207.74 1941.88,1207.74 1942.46,1207.74 1943.05,1207.74 1943.64,1207.74 1944.22,1207.74 1944.81,1207.74 1945.4,1207.74 1945.98,1207.74 1946.57,1207.74 1947.16,1207.74 1947.74,1207.74 1948.33,1207.74 1948.91,1207.74 1949.5,1207.74 1950.09,1207.74 1950.67,1207.74 1951.26,1207.74 1951.85,1207.74 1952.43,1207.74 1953.02,1207.74 1953.61,1207.74 1954.19,1207.74 1954.78,1207.74 1955.37,1207.74 1955.95,1207.74 1956.54,1207.74 1957.12,1207.74 1957.71,1207.74 1958.3,1207.74 1958.88,1207.74 1959.47,1207.74 1960.06,1207.74 1960.64,1207.74 1961.23,1207.74 1961.82,1207.74 1962.4,1207.74 1962.99,1207.74 1963.58,1207.74 1964.16,1207.74 1964.75,1207.74 1965.33,1207.74 1965.92,1207.74 1966.51,1207.74 1967.09,1207.74 1967.68,1207.74 1968.27,1207.74 1968.85,1207.74 1969.44,1207.74 1970.03,1207.74 1970.61,1207.74 1971.2,1207.74 1971.78,1207.74 1972.37,1207.74 1972.96,1207.74 1973.54,1207.74 1974.13,1207.74 1974.72,1207.74 1975.3,1207.74 1975.89,1207.74 1976.48,1207.74 1977.06,1207.74 1977.65,1207.74 1978.24,1207.74 1978.82,1207.74 1979.41,1207.74 1979.99,1207.74 1980.58,1207.74 1981.17,1207.74 1981.75,1207.74 1982.34,1207.74 1982.93,1207.74 1983.51,1207.74 1984.1,1207.74 1984.69,1207.74 1985.27,1207.74 1985.86,1207.74 1986.45,1207.74 1987.03,1207.74 1987.62,1207.74 1988.2,1207.74 1988.79,1207.74 1989.38,1207.74 1989.96,1207.74 1990.55,1207.74 1991.14,1207.74 1991.72,1207.74 1992.31,1207.74 1992.9,1207.74 1993.48,1207.74 1994.07,1207.74 1994.65,1207.74 1995.24,1207.74 1995.83,1207.74 1996.41,1207.74 1997,1207.74 1997.59,1207.74 1998.17,1207.74 1998.76,1207.74 1999.35,1207.74 1999.93,1207.74 2000.52,1207.74 2001.11,1207.74 2001.69,1207.74 2002.28,1207.74 2002.86,1207.74 2003.45,1207.74 2004.04,1207.74 2004.62,1207.74 2005.21,1207.74 2005.8,1207.74 2006.38,1207.74 2006.97,1207.74 2007.56,1207.74 2008.14,1207.74 2008.73,1207.74 2009.32,1207.74 2009.9,1207.74 2010.49,1207.74 2011.07,1207.74 2011.66,1207.74 2012.25,1207.74 2012.83,1207.74 2013.42,1207.74 2014.01,1207.74 2014.59,1207.74 2015.18,1207.74 2015.77,1207.74 2016.35,1207.74 2016.94,1207.74 2017.53,1207.74 2018.11,1207.74 2018.7,1207.74 2019.28,1207.74 2019.87,1207.74 2020.46,1207.74 2021.04,1207.74 2021.63,1207.74 2022.22,1207.74 2022.8,1207.74 2023.39,1207.74 2023.98,1207.74 2024.56,1207.74 2025.15,1207.74 2025.73,1207.74 2026.32,1207.74 2026.91,1207.74 2027.49,1207.74 2028.08,1207.74 2028.67,1207.74 2029.25,1207.74 2029.84,1207.74 2030.43,1207.74 2031.01,1207.74 2031.6,1207.74 2032.19,1207.74 2032.77,1207.74 2033.36,1207.74 2033.94,1207.74 2034.53,1207.74 2035.12,1207.74 2035.7,1207.74 2036.29,1207.74 2036.88,1207.74 2037.46,1207.74 2038.05,1207.74 2038.64,1207.74 2039.22,1207.74 2039.81,1207.74 2040.4,1207.74 2040.98,1207.74 2041.57,1207.74 2042.15,1207.74 2042.74,1207.74 2043.33,1207.74 2043.91,1207.74 2044.5,1207.74 2045.09,1207.74 2045.67,1207.74 2046.26,1207.74 2046.85,1207.74 2047.43,1207.74 2048.02,1207.74 2048.6,1207.74 2049.19,1207.74 2049.78,1207.74 2050.36,1207.74 2050.95,1207.74 2051.54,1207.74 2052.12,1207.74 2052.71,1207.74 2053.3,1207.74 2053.88,1207.74 2054.47,1207.74 2055.06,1207.74 2055.64,1207.74 2056.23,1207.74 2056.81,1207.74 2057.4,1207.74 2057.99,1207.74 2058.57,1207.74 2059.16,1207.74 2059.75,1207.74 2060.33,1207.74 2060.92,1207.74 2061.51,1207.74 2062.09,1207.74 2062.68,1207.74 2063.27,1207.74 2063.85,1207.74 2064.44,1207.74 2065.02,1207.74 2065.61,1207.74 2066.2,1207.74 2066.78,1207.74 2067.37,1207.74 2067.96,1207.74 2068.54,1207.74 2069.13,1207.74 2069.72,1207.74 2070.3,1207.74 2070.89,1207.74 2071.48,1207.74 2072.06,1207.74 2072.65,1207.74 2073.23,1207.74 2073.82,1207.74 2074.41,1207.74 2074.99,1207.74 2075.58,1207.74 2076.17,1207.74 2076.75,1207.74 2077.34,1207.74 2077.93,1207.74 2078.51,1207.74 2079.1,1207.74 2079.68,1207.74 2080.27,1207.74 2080.86,1207.74 2081.44,1207.74 2082.03,1207.74 2082.62,1207.74 2083.2,1207.74 2083.79,1207.74 2084.38,1207.74 2084.96,1207.74 2085.55,1207.74 2086.14,1207.74 2086.72,1207.74 2087.31,1207.74 2087.89,1207.74 2088.48,1207.74 2089.07,1207.74 2089.65,1207.74 2090.24,1207.74 2090.83,1207.74 2091.41,1207.74 2092,1207.74 2092.59,1207.74 2093.17,1207.74 2093.76,1207.74 2094.35,1207.74 2094.93,1207.74 2095.52,1207.74 2096.1,1207.74 2096.69,1207.74 2097.28,1207.74 2097.86,1207.74 2098.45,1207.74 2099.04,1207.74 2099.62,1207.74 2100.21,1207.74 2100.8,1207.74 2101.38,1207.74 2101.97,1207.74 2102.55,1207.74 2103.14,1207.74 2103.73,1207.74 2104.31,1207.74 2104.9,1207.74 2105.49,1207.74 2106.07,1207.74 2106.66,1207.74 2107.25,1207.74 2107.83,1207.74 2108.42,1207.74 2109.01,1207.74 2109.59,1207.74 2110.18,1207.74 2110.76,1207.74 2111.35,1207.74 2111.94,1207.74 2112.52,1207.74 2113.11,1207.74 2113.7,1207.74 2114.28,1207.74 2114.87,1207.74 2115.46,1207.74 2116.04,1207.74 2116.63,1207.74 2117.22,1207.74 2117.8,1207.74 2118.39,1207.74 2118.97,1207.74 2119.56,1207.74 2120.15,1207.74 2120.73,1207.74 2121.32,1207.74 2121.91,1207.74 2122.49,1207.74 2123.08,1207.74 2123.67,1207.74 2124.25,1207.74 2124.84,1207.74 2125.42,1207.74 2126.01,1207.74 2126.6,1207.74 2127.18,1207.74 2127.77,1207.74 2128.36,1207.74 2128.94,1207.74 2129.53,1207.74 2130.12,1207.74 2130.7,1207.74 2131.29,1207.74 2131.88,1207.74 2132.46,1207.74 2133.05,1207.74 2133.63,1207.74 2134.22,1207.74 2134.81,1207.74 2135.39,1207.74 2135.98,1207.74 2136.57,1207.74 2137.15,1207.74 2137.74,1207.74 2138.33,1207.74 2138.91,1207.74 2139.5,1207.74 2140.09,1207.74 2140.67,1207.74 2141.26,1207.74 2141.84,1207.74 2142.43,1207.74 2143.02,1207.74 2143.6,1207.74 2144.19,1207.74 2144.78,1207.74 2145.36,1207.74 2145.95,1207.74 2146.54,1207.74 2147.12,1207.74 2147.71,1207.74 2148.3,1207.74 2148.88,1207.74 2149.47,1207.74 2150.05,1207.74 2150.64,1207.74 2151.23,1207.74 2151.81,1207.74 2152.4,1207.74 2152.99,1207.74 2153.57,1207.74 2154.16,1207.74 2154.75,1207.74 2155.33,1207.74 2155.92,1207.74 2156.5,1207.74 2157.09,1207.74 2157.68,1207.74 2158.26,1207.74 \"/>\n<path clip-path=\"url(#clip132)\" d=\"M986.025 1207.62 L986.612 1207.62 L987.198 1207.62 L987.785 1207.62 L988.371 1207.62 L988.957 1207.62 L989.544 1207.62 L990.13 1207.62 L990.717 1207.62 L991.303 1207.62 L991.889 1207.62 L992.476 1207.62 L993.062 1207.62 L993.649 1207.62 L994.235 1207.62 L994.822 1207.62 L995.408 1207.62 L995.994 1207.62 L996.581 1207.62 L997.167 1207.62 L997.754 1207.62 L998.34 1207.62 L998.926 1207.62 L999.513 1207.62 L1000.1 1207.62 L1000.69 1207.62 L1001.27 1207.62 L1001.86 1207.62 L1002.44 1207.62 L1003.03 1207.62 L1003.62 1207.62 L1004.2 1207.62 L1004.79 1207.62 L1005.38 1207.62 L1005.96 1207.62 L1006.55 1207.62 L1007.14 1207.62 L1007.72 1207.62 L1008.31 1207.62 L1008.9 1207.62 L1009.48 1207.62 L1010.07 1207.62 L1010.65 1207.62 L1011.24 1207.62 L1011.83 1207.62 L1012.41 1207.62 L1013 1207.62 L1013.59 1207.62 L1014.17 1207.62 L1014.76 1207.62 L1015.35 1207.62 L1015.93 1207.62 L1016.52 1207.62 L1017.11 1207.62 L1017.69 1207.62 L1018.28 1207.62 L1018.86 1207.62 L1019.45 1207.62 L1020.04 1207.62 L1020.62 1207.62 L1021.21 1207.62 L1021.8 1207.62 L1022.38 1207.62 L1022.97 1207.62 L1023.56 1207.62 L1024.14 1207.62 L1024.73 1207.62 L1025.32 1207.62 L1025.9 1207.62 L1026.49 1207.62 L1027.07 1207.62 L1027.66 1207.62 L1028.25 1207.62 L1028.83 1207.62 L1029.42 1207.62 L1030.01 1207.62 L1030.59 1207.62 L1031.18 1207.62 L1031.77 1207.62 L1032.35 1207.62 L1032.94 1207.62 L1033.52 1207.62 L1034.11 1207.62 L1034.7 1207.62 L1035.28 1207.62 L1035.87 1207.62 L1036.46 1207.62 L1037.04 1207.62 L1037.63 1207.62 L1038.22 1207.62 L1038.8 1207.62 L1039.39 1207.62 L1039.98 1207.62 L1040.56 1207.62 L1041.15 1207.62 L1041.73 1207.62 L1042.32 1207.62 L1042.91 1207.62 L1043.49 1207.62 L1044.08 1207.62 L1044.67 1207.62 L1045.25 1207.62 L1045.84 1207.62 L1046.43 1207.62 L1047.01 1207.62 L1047.6 1207.62 L1048.19 1207.62 L1048.77 1207.62 L1049.36 1207.62 L1049.94 1207.62 L1050.53 1207.62 L1051.12 1207.62 L1051.7 1207.62 L1052.29 1207.62 L1052.88 1207.62 L1053.46 1207.62 L1054.05 1207.62 L1054.64 1207.62 L1055.22 1207.62 L1055.81 1207.62 L1056.39 1207.62 L1056.98 1207.62 L1057.57 1207.62 L1058.15 1207.62 L1058.74 1207.62 L1059.33 1207.62 L1059.91 1207.62 L1060.5 1207.62 L1061.09 1207.62 L1061.67 1207.62 L1062.26 1207.62 L1062.85 1207.62 L1063.43 1207.62 L1064.02 1207.62 L1064.6 1207.62 L1065.19 1207.62 L1065.78 1207.62 L1066.36 1207.62 L1066.95 1207.62 L1067.54 1207.62 L1068.12 1207.62 L1068.71 1207.62 L1069.3 1207.62 L1069.88 1207.62 L1070.47 1207.62 L1071.06 1207.62 L1071.64 1207.62 L1072.23 1207.62 L1072.81 1207.62 L1073.4 1207.62 L1073.99 1207.62 L1074.57 1207.62 L1075.16 1207.62 L1075.75 1207.62 L1076.33 1207.62 L1076.92 1207.62 L1077.51 1207.62 L1078.09 1207.62 L1078.68 1207.62 L1079.26 1207.62 L1079.85 1207.62 L1080.44 1207.62 L1081.02 1207.62 L1081.61 1207.62 L1082.2 1207.62 L1082.78 1207.62 L1083.37 1207.62 L1083.96 1207.62 L1084.54 1207.62 L1085.13 1207.62 L1085.72 1207.62 L1086.3 1207.62 L1086.89 1207.62 L1087.47 1207.62 L1088.06 1207.62 L1088.65 1207.62 L1089.23 1207.62 L1089.82 1207.62 L1090.41 1207.62 L1090.99 1207.62 L1091.58 1207.62 L1092.17 1207.62 L1092.75 1207.62 L1093.34 1207.62 L1093.93 1207.62 L1094.51 1207.62 L1095.1 1207.62 L1095.68 1207.62 L1096.27 1207.62 L1096.86 1207.62 L1097.44 1207.62 L1098.03 1207.62 L1098.62 1207.62 L1099.2 1207.62 L1099.79 1207.62 L1100.38 1207.62 L1100.96 1207.62 L1101.55 1207.62 L1102.14 1207.62 L1102.72 1207.62 L1103.31 1207.62 L1103.89 1207.62 L1104.48 1207.62 L1105.07 1207.62 L1105.65 1207.62 L1106.24 1207.62 L1106.83 1207.62 L1107.41 1207.62 L1108 1207.62 L1108.59 1207.62 L1109.17 1207.62 L1109.76 1207.62 L1110.34 1207.62 L1110.93 1207.62 L1111.52 1207.62 L1112.1 1207.62 L1112.69 1207.62 L1113.28 1207.62 L1113.86 1207.62 L1114.45 1207.62 L1115.04 1207.62 L1115.62 1207.62 L1116.21 1207.62 L1116.8 1207.62 L1117.38 1207.62 L1117.97 1207.62 L1118.55 1207.62 L1119.14 1207.62 L1119.73 1207.62 L1120.31 1207.62 L1120.9 1207.62 L1121.49 1207.62 L1122.07 1207.62 L1122.66 1207.62 L1123.25 1207.62 L1123.83 1207.62 L1124.42 1207.62 L1125.01 1207.62 L1125.59 1207.62 L1126.18 1207.62 L1126.76 1207.62 L1127.35 1207.62 L1127.94 1207.62 L1128.52 1207.62 L1129.11 1207.62 L1129.7 1207.62 L1130.28 1207.62 L1130.87 1207.62 L1131.46 1207.62 L1132.04 1207.62 L1132.63 1207.62 L1133.21 1207.62 L1133.8 1207.62 L1134.39 1207.62 L1134.97 1207.62 L1135.56 1207.62 L1136.15 1207.62 L1136.73 1207.62 L1137.32 1207.62 L1137.91 1207.62 L1138.49 1207.62 L1139.08 1207.62 L1139.67 1207.62 L1140.25 1207.62 L1140.84 1207.62 L1141.42 1207.62 L1142.01 1207.62 L1142.6 1207.62 L1143.18 1207.62 L1143.77 1207.62 L1144.36 1207.62 L1144.94 1207.62 L1145.53 1207.62 L1146.12 1207.62 L1146.7 1207.62 L1147.29 1207.62 L1147.88 1207.62 L1148.46 1207.62 L1149.05 1207.62 L1149.63 1207.62 L1150.22 1207.62 L1150.81 1207.62 L1151.39 1207.62 L1151.98 1207.62 L1152.57 1207.62 L1153.15 1207.62 L1153.74 1207.62 L1154.33 1207.62 L1154.91 1207.62 L1155.5 1207.62 L1156.09 1207.62 L1156.67 1207.62 L1157.26 1207.62 L1157.84 1207.62 L1158.43 1207.62 L1159.02 1207.62 L1159.6 1207.62 L1160.19 1207.62 L1160.78 1207.62 L1161.36 1207.62 L1161.95 1207.62 L1162.54 1207.62 L1163.12 1207.62 L1163.71 1207.62 L1164.29 1207.62 L1164.88 1207.62 L1165.47 1207.62 L1166.05 1207.62 L1166.64 1207.62 L1167.23 1207.62 L1167.81 1207.62 L1168.4 1207.62 L1168.99 1207.62 L1169.57 1207.62 L1170.16 1207.62 L1170.75 1207.62 L1171.33 1207.62 L1171.92 1207.62 L1172.5 1207.62 L1173.09 1207.62 L1173.68 1207.62 L1174.26 1207.62 L1174.85 1207.62 L1175.44 1207.62 L1176.02 1207.62 L1176.61 1207.62 L1177.2 1207.62 L1177.78 1207.62 L1178.37 1207.62 L1178.96 1207.62 L1179.54 1207.62 L1180.13 1207.62 L1180.71 1207.62 L1181.3 1207.62 L1181.89 1207.62 L1182.47 1207.62 L1183.06 1207.62 L1183.65 1207.62 L1184.23 1207.62 L1184.82 1207.62 L1185.41 1207.62 L1185.99 1207.62 L1186.58 1207.62 L1187.16 1207.62 L1187.75 1207.62 L1188.34 1207.62 L1188.92 1207.62 L1189.51 1207.62 L1190.1 1207.62 L1190.68 1207.62 L1191.27 1207.62 L1191.86 1207.62 L1192.44 1207.62 L1193.03 1207.62 L1193.62 1207.62 L1194.2 1207.62 L1194.79 1207.62 L1195.37 1207.62 L1195.96 1207.62 L1196.55 1207.62 L1197.13 1207.62 L1197.72 1207.62 L1198.31 1207.62 L1198.89 1207.62 L1199.48 1207.62 L1200.07 1207.62 L1200.65 1207.62 L1201.24 1207.62 L1201.83 1207.62 L1202.41 1207.62 L1203 1207.62 L1203.58 1207.62 L1204.17 1207.62 L1204.76 1207.62 L1205.34 1207.62 L1205.93 1207.62 L1206.52 1207.62 L1207.1 1207.62 L1207.69 1207.62 L1208.28 1207.62 L1208.86 1207.62 L1209.45 1207.62 L1210.03 1207.62 L1210.62 1207.62 L1211.21 1207.62 L1211.79 1207.62 L1212.38 1207.62 L1212.97 1207.62 L1213.55 1207.62 L1214.14 1207.62 L1214.73 1207.62 L1215.31 1207.62 L1215.9 1207.62 L1216.49 1207.62 L1217.07 1207.62 L1217.66 1207.62 L1218.24 1207.62 L1218.83 1207.62 L1219.42 1207.62 L1220 1207.62 L1220.59 1207.62 L1221.18 1207.62 L1221.76 1207.62 L1222.35 1207.62 L1222.94 1207.62 L1223.52 1207.62 L1224.11 1207.62 L1224.7 1207.62 L1225.28 1207.62 L1225.87 1207.62 L1226.45 1207.62 L1227.04 1207.62 L1227.63 1207.62 L1228.21 1207.62 L1228.8 1207.62 L1229.39 1207.62 L1229.97 1207.62 L1230.56 1207.62 L1231.15 1207.62 L1231.73 1207.62 L1232.32 1207.62 L1232.91 1207.62 L1233.49 1207.62 L1234.08 1207.62 L1234.66 1207.62 L1235.25 1207.62 L1235.84 1207.62 L1236.42 1207.62 L1237.01 1207.62 L1237.6 1207.62 L1238.18 1207.62 L1238.77 1207.62 L1239.36 1207.62 L1239.94 1207.62 L1240.53 1207.62 L1241.11 1207.62 L1241.7 1207.62 L1242.29 1207.62 L1242.87 1207.62 L1243.46 1207.62 L1244.05 1207.62 L1244.63 1207.62 L1245.22 1207.62 L1245.81 1207.62 L1246.39 1207.62 L1246.98 1207.62 L1247.57 1207.62 L1248.15 1207.62 L1248.74 1207.62 L1249.32 1207.62 L1249.91 1207.62 L1250.5 1207.62 L1251.08 1207.62 L1251.67 1207.62 L1252.26 1207.62 L1252.84 1207.62 L1253.43 1207.62 L1254.02 1207.62 L1254.6 1207.62 L1255.19 1207.62 L1255.78 1207.62 L1256.36 1207.62 L1256.95 1207.62 L1257.53 1207.62 L1258.12 1207.62 L1258.71 1207.62 L1259.29 1207.62 L1259.88 1207.62 L1260.47 1207.62 L1261.05 1207.62 L1261.64 1207.62 L1262.23 1207.62 L1262.81 1207.62 L1263.4 1207.62 L1263.98 1207.62 L1264.57 1207.62 L1265.16 1207.62 L1265.74 1207.62 L1266.33 1207.62 L1266.92 1207.62 L1267.5 1207.62 L1268.09 1207.62 L1268.68 1207.62 L1269.26 1207.62 L1269.85 1207.62 L1270.44 1207.62 L1271.02 1207.62 L1271.61 1207.62 L1272.19 1207.62 L1272.78 1207.62 L1273.37 1207.62 L1273.95 1207.62 L1274.54 1207.62 L1275.13 1207.62 L1275.71 1207.62 L1276.3 1207.62 L1276.89 1207.62 L1277.47 1207.62 L1278.06 1207.62 L1278.65 1207.62 L1279.23 1207.62 L1279.82 1207.62 L1280.4 1207.62 L1280.99 1207.62 L1281.58 1207.62 L1282.16 1207.62 L1282.75 1207.62 L1283.34 1207.62 L1283.92 1207.62 L1284.51 1207.62 L1285.1 1207.62 L1285.68 1207.62 L1286.27 1207.62 L1286.86 1207.62 L1287.44 1207.62 L1288.03 1207.62 L1288.61 1207.62 L1289.2 1207.62 L1289.79 1207.62 L1290.37 1207.62 L1290.96 1207.62 L1291.55 1207.62 L1292.13 1207.62 L1292.72 1207.62 L1293.31 1207.62 L1293.89 1207.62 L1294.48 1207.62 L1295.06 1207.62 L1295.65 1207.62 L1296.24 1207.62 L1296.82 1207.62 L1297.41 1207.62 L1298 1207.62 L1298.58 1207.62 L1299.17 1207.62 L1299.76 1207.62 L1300.34 1207.62 L1300.93 1207.62 L1301.52 1207.62 L1302.1 1207.62 L1302.69 1207.62 L1303.27 1207.62 L1303.86 1207.62 L1304.45 1207.62 L1305.03 1207.62 L1305.62 1207.62 L1306.21 1207.62 L1306.79 1207.62 L1307.38 1207.62 L1307.97 1207.62 L1308.55 1207.62 L1309.14 1207.62 L1309.73 1207.62 L1310.31 1207.62 L1310.9 1207.62 L1311.48 1207.62 L1312.07 1207.62 L1312.66 1207.62 L1313.24 1207.62 L1313.83 1207.62 L1314.42 1207.62 L1315 1207.62 L1315.59 1207.62 L1316.18 1207.62 L1316.76 1207.62 L1317.35 1207.62 L1317.93 1207.62 L1318.52 1207.62 L1319.11 1207.62 L1319.69 1207.62 L1320.28 1207.62 L1320.87 1207.62 L1321.45 1207.62 L1322.04 1207.62 L1322.63 1207.62 L1323.21 1207.62 L1323.8 1207.62 L1324.39 1207.62 L1324.97 1207.62 L1325.56 1207.62 L1326.14 1207.62 L1326.73 1207.62 L1327.32 1207.62 L1327.9 1207.62 L1328.49 1207.62 L1329.08 1207.62 L1329.66 1207.62 L1330.25 1207.62 L1330.84 1207.62 L1331.42 1207.62 L1332.01 1207.62 L1332.6 1207.62 L1333.18 1207.62 L1333.77 1207.62 L1334.35 1207.62 L1334.94 1207.62 L1335.53 1207.62 L1336.11 1207.62 L1336.7 1207.62 L1337.29 1207.62 L1337.87 1207.62 L1338.46 1207.62 L1339.05 1207.62 L1339.63 1207.62 L1340.22 1207.62 L1340.8 1207.62 L1341.39 1207.62 L1341.98 1207.62 L1342.56 1207.62 L1343.15 1207.62 L1343.74 1207.62 L1344.32 1207.62 L1344.91 1207.62 L1345.5 1207.62 L1346.08 1207.62 L1346.67 1207.62 L1347.26 1207.62 L1347.84 1207.62 L1348.43 1207.62 L1349.01 1207.62 L1349.6 1207.62 L1350.19 1207.62 L1350.77 1207.62 L1351.36 1207.62 L1351.95 1207.62 L1352.53 1207.62 L1353.12 1207.62 L1353.71 1207.62 L1354.29 1207.62 L1354.88 1207.62 L1355.47 1207.62 L1356.05 1207.62 L1356.64 1207.62 L1357.22 1207.62 L1357.81 1207.62 L1358.4 1207.62 L1358.98 1207.62 L1359.57 1207.62 L1360.16 1207.62 L1360.74 1207.62 L1361.33 1207.62 L1361.92 1207.62 L1362.5 1207.62 L1363.09 1207.62 L1363.68 1207.62 L1364.26 1207.62 L1364.85 1207.62 L1365.43 1207.62 L1366.02 1207.62 L1366.61 1207.62 L1367.19 1207.62 L1367.78 1207.62 L1368.37 1207.62 L1368.95 1207.62 L1369.54 1207.62 L1370.13 1207.62 L1370.71 1207.62 L1371.3 1207.62 L1371.88 1207.62 L1372.47 1207.62 L1373.06 1207.62 L1373.64 1207.62 L1374.23 1207.62 L1374.82 1207.62 L1375.4 1207.62 L1375.99 1207.62 L1376.58 1207.62 L1377.16 1207.62 L1377.75 1207.62 L1378.34 1207.62 L1378.92 1207.62 L1379.51 1207.62 L1380.09 1207.62 L1380.68 1207.62 L1381.27 1207.62 L1381.85 1207.62 L1382.44 1207.62 L1383.03 1207.62 L1383.61 1207.62 L1384.2 1207.62 L1384.79 1207.62 L1385.37 1207.62 L1385.96 1207.62 L1386.55 1207.62 L1387.13 1207.62 L1387.72 1207.62 L1388.3 1207.62 L1388.89 1207.62 L1389.48 1207.62 L1390.06 1207.62 L1390.65 1207.62 L1391.24 1207.62 L1391.82 1207.62 L1392.41 1207.62 L1393 1207.62 L1393.58 1207.62 L1394.17 1207.62 L1394.75 1207.62 L1395.34 1207.62 L1395.93 1207.62 L1396.51 1207.62 L1397.1 1207.62 L1397.69 1207.62 L1398.27 1207.62 L1398.86 1207.62 L1399.45 1207.62 L1400.03 1207.62 L1400.62 1207.62 L1401.21 1207.62 L1401.79 1207.62 L1402.38 1207.62 L1402.96 1207.62 L1403.55 1207.62 L1404.14 1207.62 L1404.72 1207.62 L1405.31 1207.62 L1405.9 1207.62 L1406.48 1207.62 L1407.07 1207.62 L1407.66 1207.62 L1408.24 1207.62 L1408.83 1207.62 L1409.42 1207.62 L1410 1207.62 L1410.59 1207.62 L1411.17 1207.62 L1411.76 1207.62 L1412.35 1207.62 L1412.93 1207.62 L1413.52 1207.62 L1414.11 1207.62 L1414.69 1207.62 L1415.28 1207.62 L1415.87 1207.62 L1416.45 1207.62 L1417.04 1207.62 L1417.63 1207.62 L1418.21 1207.62 L1418.8 1207.62 L1419.38 1207.62 L1419.97 1207.62 L1420.56 1207.62 L1421.14 1207.62 L1421.73 1207.62 L1422.32 1207.62 L1422.9 1207.62 L1423.49 1207.62 L1424.08 1207.62 L1424.66 1207.62 L1425.25 1207.62 L1425.83 1207.62 L1426.42 1207.62 L1427.01 1207.62 L1427.59 1207.62 L1428.18 1207.62 L1428.77 1207.62 L1429.35 1207.62 L1429.94 1207.62 L1430.53 1207.62 L1431.11 1207.62 L1431.7 1207.62 L1432.29 1207.62 L1432.87 1207.62 L1433.46 1207.62 L1434.04 1207.62 L1434.63 1207.62 L1435.22 1207.62 L1435.8 1207.62 L1436.39 1207.62 L1436.98 1207.62 L1437.56 1207.62 L1438.15 1207.62 L1438.74 1207.62 L1439.32 1207.62 L1439.91 1207.62 L1440.5 1207.62 L1441.08 1207.62 L1441.67 1207.62 L1442.25 1207.62 L1442.84 1207.62 L1443.43 1207.62 L1444.01 1207.62 L1444.6 1207.62 L1445.19 1207.62 L1445.77 1207.62 L1446.36 1207.62 L1446.95 1207.62 L1447.53 1207.62 L1448.12 1207.62 L1448.7 1207.62 L1449.29 1207.62 L1449.88 1207.62 L1450.46 1207.62 L1451.05 1207.62 L1451.64 1207.62 L1452.22 1207.62 L1452.81 1207.62 L1453.4 1207.62 L1453.98 1207.62 L1454.57 1207.62 L1455.16 1207.62 L1455.74 1207.62 L1456.33 1207.62 L1456.91 1207.62 L1457.5 1207.62 L1458.09 1207.62 L1458.67 1207.62 L1459.26 1207.62 L1459.85 1207.62 L1460.43 1207.62 L1461.02 1207.62 L1461.61 1207.62 L1462.19 1207.62 L1462.78 1207.62 L1463.37 1207.62 L1463.95 1207.62 L1464.54 1207.62 L1465.12 1207.62 L1465.71 1207.62 L1466.3 1207.62 L1466.88 1207.62 L1467.47 1207.62 L1468.06 1207.62 L1468.64 1207.62 L1469.23 1207.62 L1469.82 1207.62 L1470.4 1207.62 L1470.99 1207.62 L1471.57 1207.62 L1472.16 1207.62 L1472.75 1207.62 L1473.33 1207.62 L1473.92 1207.62 L1474.51 1207.62 L1475.09 1207.62 L1475.68 1207.62 L1476.27 1207.62 L1476.85 1207.62 L1477.44 1207.62 L1478.03 1207.62 L1478.61 1207.62 L1479.2 1207.62 L1479.78 1207.62 L1480.37 1207.62 L1480.96 1207.62 L1481.54 1207.62 L1482.13 1207.62 L1482.72 1207.62 L1483.3 1207.62 L1483.89 1207.62 L1484.48 1207.62 L1485.06 1207.62 L1485.65 1207.62 L1486.24 1207.62 L1486.82 1207.62 L1487.41 1207.62 L1487.99 1207.62 L1488.58 1207.62 L1489.17 1207.62 L1489.75 1207.62 L1490.34 1207.62 L1490.93 1207.62 L1491.51 1207.62 L1492.1 1207.62 L1492.69 1207.62 L1493.27 1207.62 L1493.86 1207.62 L1494.45 1207.62 L1495.03 1207.62 L1495.62 1207.62 L1496.2 1207.62 L1496.79 1207.62 L1497.38 1207.62 L1497.96 1207.62 L1498.55 1207.62 L1499.14 1207.62 L1499.72 1207.62 L1500.31 1207.62 L1500.9 1207.62 L1501.48 1207.62 L1502.07 1207.62 L1502.65 1207.62 L1503.24 1207.62 L1503.83 1207.62 L1504.41 1207.62 L1505 1207.62 L1505.59 1207.62 L1506.17 1207.62 L1506.76 1207.62 L1507.35 1207.62 L1507.93 1207.62 L1508.52 1207.62 L1509.11 1207.62 L1509.69 1207.62 L1510.28 1207.62 L1510.86 1207.62 L1511.45 1207.62 L1512.04 1207.62 L1512.62 1207.62 L1513.21 1207.62 L1513.8 1207.62 L1514.38 1207.62 L1514.97 1207.62 L1515.56 1207.62 L1516.14 1207.62 L1516.73 1207.62 L1517.32 1207.62 L1517.9 1207.62 L1518.49 1207.62 L1519.07 1207.62 L1519.66 1207.62 L1520.25 1207.62 L1520.83 1207.62 L1521.42 1207.62 L1522.01 1207.62 L1522.59 1207.62 L1523.18 1207.62 L1523.77 1207.62 L1524.35 1207.62 L1524.94 1207.62 L1525.52 1207.62 L1526.11 1207.62 L1526.7 1207.62 L1527.28 1207.62 L1527.87 1207.62 L1528.46 1207.62 L1529.04 1207.62 L1529.63 1207.62 L1530.22 1207.62 L1530.8 1207.62 L1531.39 1207.62 L1531.98 1207.62 L1532.56 1207.62 L1533.15 1207.62 L1533.73 1207.62 L1534.32 1207.62 L1534.91 1207.62 L1535.49 1207.62 L1536.08 1207.62 L1536.67 1207.62 L1537.25 1207.62 L1537.84 1207.62 L1538.43 1207.62 L1539.01 1207.62 L1539.6 1207.62 L1540.19 1207.62 L1540.77 1207.62 L1541.36 1207.62 L1541.94 1207.62 L1542.53 1207.62 L1543.12 1207.62 L1543.7 1207.62 L1544.29 1207.62 L1544.88 1207.62 L1545.46 1207.62 L1546.05 1207.62 L1546.64 1207.62 L1547.22 1207.62 L1547.81 1207.62 L1548.4 1207.62 L1548.98 1207.62 L1549.57 1207.62 L1550.15 1207.62 L1550.74 1207.62 L1551.33 1207.62 L1551.91 1207.62 L1552.5 1207.62 L1553.09 1207.62 L1553.67 1207.62 L1554.26 1207.62 L1554.85 1207.62 L1555.43 1207.62 L1556.02 1207.62 L1556.6 1207.62 L1557.19 1207.62 L1557.78 1207.62 L1558.36 1207.62 L1558.95 1207.62 L1559.54 1207.62 L1560.12 1207.62 L1560.71 1207.62 L1561.3 1207.62 L1561.88 1207.62 L1562.47 1207.62 L1563.06 1207.62 L1563.64 1207.62 L1564.23 1207.62 L1564.81 1207.62 L1565.4 1207.62 L1565.99 1207.62 L1566.57 1207.62 L1567.16 1207.62 L1567.75 1207.62 L1568.33 1207.62 L1568.92 1207.62 L1569.51 1207.62 L1570.09 1207.62 L1570.68 1207.62 L1571.27 1207.62 L1571.85 1207.62 L1572.44 1207.62 L1573.02 1207.62 L1573.61 1207.62 L1574.2 1207.62 L1574.78 1207.62 L1575.37 1207.62 L1575.96 1207.62 L1576.54 1207.62 L1577.13 1207.62 L1577.72 1207.62 L1578.3 1207.62 L1578.89 1207.62 L1579.47 1207.62 L1580.06 1207.62 L1580.65 1207.62 L1581.23 1207.62 L1581.82 1207.62 L1582.41 1207.62 L1582.99 1207.62 L1583.58 1207.62 L1584.17 1207.62 L1584.75 1207.62 L1585.34 1207.62 L1585.93 1207.62 L1586.51 1207.62 L1587.1 1207.62 L1587.68 1207.62 L1588.27 1207.62 L1588.86 1207.62 L1589.44 1207.62 L1590.03 1207.62 L1590.62 1207.62 L1591.2 1207.62 L1591.79 1207.62 L1592.38 1207.62 L1592.96 1207.62 L1593.55 1207.62 L1594.14 1207.62 L1594.72 1207.62 L1595.31 1207.62 L1595.89 1207.62 L1596.48 1207.62 L1597.07 1207.62 L1597.65 1207.62 L1598.24 1207.62 L1598.83 1207.62 L1599.41 1207.62 L1600 1207.62 L1600.59 1207.62 L1601.17 1207.62 L1601.76 1207.62 L1602.34 1207.62 L1602.93 1207.62 L1603.52 1207.62 L1604.1 1207.62 L1604.69 1207.62 L1605.28 1207.62 L1605.86 1207.62 L1606.45 1207.62 L1607.04 1207.62 L1607.62 1207.62 L1608.21 1207.62 L1608.8 1207.62 L1609.38 1207.62 L1609.97 1207.62 L1610.55 1207.62 L1611.14 1207.62 L1611.73 1207.62 L1612.31 1207.62 L1612.9 1207.62 L1613.49 1207.62 L1614.07 1207.62 L1614.66 1207.62 L1615.25 1207.62 L1615.83 1207.62 L1616.42 1207.62 L1617.01 1207.62 L1617.59 1207.62 L1618.18 1207.62 L1618.76 1207.62 L1619.35 1207.62 L1619.94 1207.62 L1620.52 1207.62 L1621.11 1207.62 L1621.7 1207.62 L1622.28 1207.62 L1622.87 1207.62 L1623.46 1207.62 L1624.04 1207.62 L1624.63 1207.62 L1625.22 1207.62 L1625.8 1207.62 L1626.39 1207.62 L1626.97 1207.62 L1627.56 1207.62 L1628.15 1207.62 L1628.73 1207.62 L1629.32 1207.62 L1629.91 1207.62 L1630.49 1207.62 L1631.08 1207.62 L1631.67 1207.62 L1632.25 1207.62 L1632.84 1207.62 L1633.42 1207.62 L1634.01 1207.62 L1634.6 1207.62 L1635.18 1207.62 L1635.77 1207.62 L1636.36 1207.62 L1636.94 1207.62 L1637.53 1207.62 L1638.12 1207.62 L1638.7 1207.62 L1639.29 1207.62 L1639.88 1207.62 L1640.46 1207.62 L1641.05 1207.62 L1641.63 1207.62 L1642.22 1207.62 L1642.81 1207.62 L1643.39 1207.62 L1643.98 1207.62 L1644.57 1207.62 L1645.15 1207.62 L1645.74 1207.62 L1646.33 1207.62 L1646.91 1207.62 L1647.5 1207.62 L1648.09 1207.62 L1648.67 1207.62 L1649.26 1207.62 L1649.84 1207.62 L1650.43 1207.62 L1651.02 1207.62 L1651.6 1207.62 L1652.19 1207.62 L1652.78 1207.62 L1653.36 1207.62 L1653.95 1207.62 L1654.54 1207.62 L1655.12 1207.62 L1655.71 1207.62 L1656.29 1207.62 L1656.88 1207.62 L1657.47 1207.62 L1658.05 1207.62 L1658.64 1207.62 L1659.23 1207.62 L1659.81 1207.62 L1660.4 1207.62 L1660.99 1207.62 L1661.57 1207.62 L1662.16 1207.62 L1662.75 1207.62 L1663.33 1207.62 L1663.92 1207.62 L1664.5 1207.62 L1665.09 1207.62 L1665.68 1207.62 L1666.26 1207.62 L1666.85 1207.62 L1667.44 1207.62 L1668.02 1207.62 L1668.61 1207.62 L1669.2 1207.62 L1669.78 1207.62 L1670.37 1207.62 L1670.96 1207.62 L1671.54 1207.62 L1672.13 1207.62 L1672.71 1207.62 L1673.3 1207.62 L1673.89 1207.62 L1674.47 1207.62 L1675.06 1207.62 L1675.65 1207.62 L1676.23 1207.62 L1676.82 1207.62 L1677.41 1207.62 L1677.99 1207.62 L1678.58 1207.62 L1679.17 1207.62 L1679.75 1207.62 L1680.34 1207.62 L1680.92 1207.62 L1681.51 1207.62 L1682.1 1207.62 L1682.68 1207.62 L1683.27 1207.62 L1683.86 1207.62 L1684.44 1207.62 L1685.03 1207.62 L1685.62 1207.62 L1686.2 1207.62 L1686.79 1207.62 L1687.37 1207.62 L1687.96 1207.62 L1688.55 1207.62 L1689.13 1207.62 L1689.72 1207.62 L1690.31 1207.62 L1690.89 1207.62 L1691.48 1207.62 L1692.07 1207.62 L1692.65 1207.62 L1693.24 1207.62 L1693.83 1207.62 L1694.41 1207.62 L1695 1207.62 L1695.58 1207.62 L1696.17 1207.62 L1696.76 1207.62 L1697.34 1207.62 L1697.93 1207.62 L1698.52 1207.62 L1699.1 1207.62 L1699.69 1207.62 L1700.28 1207.62 L1700.86 1207.62 L1701.45 1207.62 L1702.04 1207.62 L1702.62 1207.62 L1703.21 1207.62 L1703.79 1207.62 L1704.38 1207.62 L1704.97 1207.62 L1705.55 1207.62 L1706.14 1207.62 L1706.73 1207.62 L1707.31 1207.62 L1707.9 1207.62 L1708.49 1207.62 L1709.07 1207.62 L1709.66 1207.62 L1710.24 1207.62 L1710.83 1207.62 L1711.42 1207.62 L1712 1207.62 L1712.59 1207.62 L1713.18 1207.62 L1713.76 1207.62 L1714.35 1207.62 L1714.94 1207.62 L1715.52 1207.62 L1716.11 1207.62 L1716.7 1207.62 L1717.28 1207.62 L1717.87 1207.62 L1718.45 1207.62 L1719.04 1207.62 L1719.63 1207.62 L1720.21 1207.62 L1720.8 1207.62 L1721.39 1207.62 L1721.97 1207.62 L1722.56 1207.62 L1723.15 1207.62 L1723.73 1207.62 L1724.32 1207.62 L1724.91 1207.62 L1725.49 1207.62 L1726.08 1207.62 L1726.66 1207.62 L1727.25 1207.62 L1727.84 1207.62 L1728.42 1207.62 L1729.01 1207.62 L1729.6 1207.62 L1730.18 1207.62 L1730.77 1207.62 L1731.36 1207.62 L1731.94 1207.62 L1732.53 1207.62 L1733.11 1207.62 L1733.7 1207.62 L1734.29 1207.62 L1734.87 1207.62 L1735.46 1207.62 L1736.05 1207.62 L1736.63 1207.62 L1737.22 1207.62 L1737.81 1207.62 L1738.39 1207.62 L1738.98 1207.62 L1739.57 1207.62 L1740.15 1207.62 L1740.74 1207.62 L1741.32 1207.62 L1741.91 1207.62 L1742.5 1207.62 L1743.08 1207.62 L1743.67 1207.62 L1744.26 1207.62 L1744.84 1207.62 L1745.43 1207.62 L1746.02 1207.62 L1746.6 1207.62 L1747.19 1207.62 L1747.78 1207.62 L1748.36 1207.62 L1748.95 1207.62 L1749.53 1207.62 L1750.12 1207.62 L1750.71 1207.62 L1751.29 1207.62 L1751.88 1207.62 L1752.47 1207.62 L1753.05 1207.62 L1753.64 1207.62 L1754.23 1207.62 L1754.81 1207.62 L1755.4 1207.62 L1755.99 1207.62 L1756.57 1207.62 L1757.16 1207.62 L1757.74 1207.62 L1758.33 1207.62 L1758.92 1207.62 L1759.5 1207.62 L1760.09 1207.62 L1760.68 1207.62 L1761.26 1207.62 L1761.85 1207.62 L1762.44 1207.62 L1763.02 1207.62 L1763.61 1207.62 L1764.19 1207.62 L1764.78 1207.62 L1765.37 1207.62 L1765.95 1207.62 L1766.54 1207.62 L1767.13 1207.62 L1767.71 1207.62 L1768.3 1207.62 L1768.89 1207.62 L1769.47 1207.62 L1770.06 1207.62 L1770.65 1207.62 L1771.23 1207.62 L1771.82 1207.62 L1772.4 1207.62 L1772.99 1207.62 L1773.58 1207.62 L1774.16 1207.62 L1774.75 1207.62 L1775.34 1207.62 L1775.92 1207.62 L1776.51 1207.62 L1777.1 1207.62 L1777.68 1207.62 L1778.27 1207.62 L1778.86 1207.62 L1779.44 1207.62 L1780.03 1207.62 L1780.61 1207.62 L1781.2 1207.62 L1781.79 1207.62 L1782.37 1207.62 L1782.96 1207.62 L1783.55 1207.62 L1784.13 1207.62 L1784.72 1207.62 L1785.31 1207.62 L1785.89 1207.62 L1786.48 1207.62 L1787.06 1207.62 L1787.65 1207.62 L1788.24 1207.62 L1788.82 1207.62 L1789.41 1207.62 L1790 1207.62 L1790.58 1207.62 L1791.17 1207.62 L1791.76 1207.62 L1792.34 1207.62 L1792.93 1207.62 L1793.52 1207.62 L1794.1 1207.62 L1794.69 1207.62 L1795.27 1207.62 L1795.86 1207.62 L1796.45 1207.62 L1797.03 1207.62 L1797.62 1207.62 L1798.21 1207.62 L1798.79 1207.62 L1799.38 1207.62 L1799.97 1207.62 L1800.55 1207.62 L1801.14 1207.62 L1801.73 1207.62 L1802.31 1207.62 L1802.9 1207.62 L1803.48 1207.62 L1804.07 1207.62 L1804.66 1207.62 L1805.24 1207.62 L1805.83 1207.62 L1806.42 1207.62 L1807 1207.62 L1807.59 1207.62 L1808.18 1207.62 L1808.76 1207.62 L1809.35 1207.62 L1809.94 1207.62 L1810.52 1207.62 L1811.11 1207.62 L1811.69 1207.62 L1812.28 1207.62 L1812.87 1207.62 L1813.45 1207.62 L1814.04 1207.62 L1814.63 1207.62 L1815.21 1207.62 L1815.8 1207.62 L1816.39 1207.62 L1816.97 1207.62 L1817.56 1207.62 L1818.14 1207.62 L1818.73 1207.62 L1819.32 1207.62 L1819.9 1207.62 L1820.49 1207.62 L1821.08 1207.62 L1821.66 1207.62 L1822.25 1207.62 L1822.84 1207.62 L1823.42 1207.62 L1824.01 1207.62 L1824.6 1207.62 L1825.18 1207.62 L1825.77 1207.62 L1826.35 1207.62 L1826.94 1207.62 L1827.53 1207.62 L1828.11 1207.62 L1828.7 1207.62 L1829.29 1207.62 L1829.87 1207.62 L1830.46 1207.62 L1831.05 1207.62 L1831.63 1207.62 L1832.22 1207.62 L1832.81 1207.62 L1833.39 1207.62 L1833.98 1207.62 L1834.56 1207.62 L1835.15 1207.62 L1835.74 1207.62 L1836.32 1207.62 L1836.91 1207.62 L1837.5 1207.62 L1838.08 1207.62 L1838.67 1207.62 L1839.26 1207.62 L1839.84 1207.62 L1840.43 1207.62 L1841.01 1207.62 L1841.6 1207.62 L1842.19 1207.62 L1842.77 1207.62 L1843.36 1207.62 L1843.95 1207.62 L1844.53 1207.62 L1845.12 1207.62 L1845.71 1207.62 L1846.29 1207.62 L1846.88 1207.62 L1847.47 1207.62 L1848.05 1207.62 L1848.64 1207.62 L1849.22 1207.62 L1849.81 1207.62 L1850.4 1207.62 L1850.98 1207.62 L1851.57 1207.62 L1852.16 1207.62 L1852.74 1207.62 L1853.33 1207.62 L1853.92 1207.62 L1854.5 1207.62 L1855.09 1207.62 L1855.68 1207.62 L1856.26 1207.62 L1856.85 1207.62 L1857.43 1207.62 L1858.02 1207.62 L1858.61 1207.62 L1859.19 1207.62 L1859.78 1207.62 L1860.37 1207.62 L1860.95 1207.62 L1861.54 1207.62 L1862.13 1207.62 L1862.71 1207.62 L1863.3 1207.62 L1863.88 1207.62 L1864.47 1207.62 L1865.06 1207.62 L1865.64 1207.62 L1866.23 1207.62 L1866.82 1207.62 L1867.4 1207.62 L1867.99 1207.62 L1868.58 1207.62 L1869.16 1207.62 L1869.75 1207.62 L1870.34 1207.62 L1870.92 1207.62 L1871.51 1207.62 L1872.09 1207.62 L1872.68 1207.62 L1873.27 1207.62 L1873.85 1207.62 L1874.44 1207.62 L1875.03 1207.62 L1875.61 1207.62 L1876.2 1207.62 L1876.79 1207.62 L1877.37 1207.62 L1877.96 1207.62 L1878.55 1207.62 L1879.13 1207.62 L1879.72 1207.62 L1880.3 1207.62 L1880.89 1207.62 L1881.48 1207.62 L1882.06 1207.62 L1882.65 1207.62 L1883.24 1207.62 L1883.82 1207.62 L1884.41 1207.62 L1885 1207.62 L1885.58 1207.62 L1886.17 1207.62 L1886.76 1207.62 L1887.34 1207.62 L1887.93 1207.62 L1888.51 1207.62 L1889.1 1207.62 L1889.69 1207.62 L1890.27 1207.62 L1890.86 1207.62 L1891.45 1207.62 L1892.03 1207.62 L1892.62 1207.62 L1893.21 1207.62 L1893.79 1207.62 L1894.38 1207.62 L1894.96 1207.62 L1895.55 1207.62 L1896.14 1207.62 L1896.72 1207.62 L1897.31 1207.62 L1897.9 1207.62 L1898.48 1207.62 L1899.07 1207.62 L1899.66 1207.62 L1900.24 1207.62 L1900.83 1207.62 L1901.42 1207.62 L1902 1207.62 L1902.59 1207.62 L1903.17 1207.62 L1903.76 1207.62 L1904.35 1207.62 L1904.93 1207.62 L1905.52 1207.62 L1906.11 1207.62 L1906.69 1207.62 L1907.28 1207.62 L1907.87 1207.62 L1908.45 1207.62 L1909.04 1207.62 L1909.63 1207.62 L1910.21 1207.62 L1910.8 1207.62 L1911.38 1207.62 L1911.97 1207.62 L1912.56 1207.62 L1913.14 1207.62 L1913.73 1207.62 L1914.32 1207.62 L1914.9 1207.62 L1915.49 1207.62 L1916.08 1207.62 L1916.66 1207.62 L1917.25 1207.62 L1917.83 1207.62 L1918.42 1207.62 L1919.01 1207.62 L1919.59 1207.62 L1920.18 1207.62 L1920.77 1207.62 L1921.35 1207.62 L1921.94 1207.62 L1922.53 1207.62 L1923.11 1207.62 L1923.7 1207.62 L1924.29 1207.62 L1924.87 1207.62 L1925.46 1207.62 L1926.04 1207.62 L1926.63 1207.62 L1927.22 1207.62 L1927.8 1207.62 L1928.39 1207.62 L1928.98 1207.62 L1929.56 1207.62 L1930.15 1207.62 L1930.74 1207.62 L1931.32 1207.62 L1931.91 1207.62 L1932.5 1207.62 L1933.08 1207.62 L1933.67 1207.62 L1934.25 1207.62 L1934.84 1207.62 L1935.43 1207.62 L1936.01 1207.62 L1936.6 1207.62 L1937.19 1207.62 L1937.77 1207.62 L1938.36 1207.62 L1938.95 1207.62 L1939.53 1207.62 L1940.12 1207.62 L1940.71 1207.62 L1941.29 1207.62 L1941.88 1207.62 L1942.46 1207.62 L1943.05 1207.62 L1943.64 1207.62 L1944.22 1207.62 L1944.81 1207.62 L1945.4 1207.62 L1945.98 1207.62 L1946.57 1207.62 L1947.16 1207.62 L1947.74 1207.62 L1948.33 1207.62 L1948.91 1207.62 L1949.5 1207.62 L1950.09 1207.62 L1950.67 1207.62 L1951.26 1207.62 L1951.85 1207.62 L1952.43 1207.62 L1953.02 1207.62 L1953.61 1207.62 L1954.19 1207.62 L1954.78 1207.62 L1955.37 1207.62 L1955.95 1207.62 L1956.54 1207.62 L1957.12 1207.62 L1957.71 1207.62 L1958.3 1207.62 L1958.88 1207.62 L1959.47 1207.62 L1960.06 1207.62 L1960.64 1207.62 L1961.23 1207.62 L1961.82 1207.62 L1962.4 1207.62 L1962.99 1207.62 L1963.58 1207.62 L1964.16 1207.62 L1964.75 1207.62 L1965.33 1207.62 L1965.92 1207.62 L1966.51 1207.62 L1967.09 1207.62 L1967.68 1207.62 L1968.27 1207.62 L1968.85 1207.62 L1969.44 1207.62 L1970.03 1207.62 L1970.61 1207.62 L1971.2 1207.62 L1971.78 1207.62 L1972.37 1207.62 L1972.96 1207.62 L1973.54 1207.62 L1974.13 1207.62 L1974.72 1207.62 L1975.3 1207.62 L1975.89 1207.62 L1976.48 1207.62 L1977.06 1207.62 L1977.65 1207.62 L1978.24 1207.62 L1978.82 1207.62 L1979.41 1207.62 L1979.99 1207.62 L1980.58 1207.62 L1981.17 1207.62 L1981.75 1207.62 L1982.34 1207.62 L1982.93 1207.62 L1983.51 1207.62 L1984.1 1207.62 L1984.69 1207.62 L1985.27 1207.62 L1985.86 1207.62 L1986.45 1207.62 L1987.03 1207.62 L1987.62 1207.62 L1988.2 1207.62 L1988.79 1207.62 L1989.38 1207.62 L1989.96 1207.62 L1990.55 1207.62 L1991.14 1207.62 L1991.72 1207.62 L1992.31 1207.62 L1992.9 1207.62 L1993.48 1207.62 L1994.07 1207.62 L1994.65 1207.62 L1995.24 1207.62 L1995.83 1207.62 L1996.41 1207.62 L1997 1207.62 L1997.59 1207.62 L1998.17 1207.62 L1998.76 1207.62 L1999.35 1207.62 L1999.93 1207.62 L2000.52 1207.62 L2001.11 1207.62 L2001.69 1207.62 L2002.28 1207.62 L2002.86 1207.62 L2003.45 1207.62 L2004.04 1207.62 L2004.62 1207.62 L2005.21 1207.62 L2005.8 1207.62 L2006.38 1207.62 L2006.97 1207.62 L2007.56 1207.62 L2008.14 1207.62 L2008.73 1207.62 L2009.32 1207.62 L2009.9 1207.62 L2010.49 1207.62 L2011.07 1207.62 L2011.66 1207.62 L2012.25 1207.62 L2012.83 1207.62 L2013.42 1207.62 L2014.01 1207.62 L2014.59 1207.62 L2015.18 1207.62 L2015.77 1207.62 L2016.35 1207.62 L2016.94 1207.62 L2017.53 1207.62 L2018.11 1207.62 L2018.7 1207.62 L2019.28 1207.62 L2019.87 1207.62 L2020.46 1207.62 L2021.04 1207.62 L2021.63 1207.62 L2022.22 1207.62 L2022.8 1207.62 L2023.39 1207.62 L2023.98 1207.62 L2024.56 1207.62 L2025.15 1207.62 L2025.73 1207.62 L2026.32 1207.62 L2026.91 1207.62 L2027.49 1207.62 L2028.08 1207.62 L2028.67 1207.62 L2029.25 1207.62 L2029.84 1207.62 L2030.43 1207.62 L2031.01 1207.62 L2031.6 1207.62 L2032.19 1207.62 L2032.77 1207.62 L2033.36 1207.62 L2033.94 1207.62 L2034.53 1207.62 L2035.12 1207.62 L2035.7 1207.62 L2036.29 1207.62 L2036.88 1207.62 L2037.46 1207.62 L2038.05 1207.62 L2038.64 1207.62 L2039.22 1207.62 L2039.81 1207.62 L2040.4 1207.62 L2040.98 1207.62 L2041.57 1207.62 L2042.15 1207.62 L2042.74 1207.62 L2043.33 1207.62 L2043.91 1207.62 L2044.5 1207.62 L2045.09 1207.62 L2045.67 1207.62 L2046.26 1207.62 L2046.85 1207.62 L2047.43 1207.62 L2048.02 1207.62 L2048.6 1207.62 L2049.19 1207.62 L2049.78 1207.62 L2050.36 1207.62 L2050.95 1207.62 L2051.54 1207.62 L2052.12 1207.62 L2052.71 1207.62 L2053.3 1207.62 L2053.88 1207.62 L2054.47 1207.62 L2055.06 1207.62 L2055.64 1207.62 L2056.23 1207.62 L2056.81 1207.62 L2057.4 1207.62 L2057.99 1207.62 L2058.57 1207.62 L2059.16 1207.62 L2059.75 1207.62 L2060.33 1207.62 L2060.92 1207.62 L2061.51 1207.62 L2062.09 1207.62 L2062.68 1207.62 L2063.27 1207.62 L2063.85 1207.62 L2064.44 1207.62 L2065.02 1207.62 L2065.61 1207.62 L2066.2 1207.62 L2066.78 1207.62 L2067.37 1207.62 L2067.96 1207.62 L2068.54 1207.62 L2069.13 1207.62 L2069.72 1207.62 L2070.3 1207.62 L2070.89 1207.62 L2071.48 1207.62 L2072.06 1207.62 L2072.65 1207.62 L2073.23 1207.62 L2073.82 1207.62 L2074.41 1207.62 L2074.99 1207.62 L2075.58 1207.62 L2076.17 1207.62 L2076.75 1207.62 L2077.34 1207.62 L2077.93 1207.62 L2078.51 1207.62 L2079.1 1207.62 L2079.68 1207.62 L2080.27 1207.62 L2080.86 1207.62 L2081.44 1207.62 L2082.03 1207.62 L2082.62 1207.62 L2083.2 1207.62 L2083.79 1207.62 L2084.38 1207.62 L2084.96 1207.62 L2085.55 1207.62 L2086.14 1207.62 L2086.72 1207.62 L2087.31 1207.62 L2087.89 1207.62 L2088.48 1207.62 L2089.07 1207.62 L2089.65 1207.62 L2090.24 1207.62 L2090.83 1207.62 L2091.41 1207.62 L2092 1207.62 L2092.59 1207.62 L2093.17 1207.62 L2093.76 1207.62 L2094.35 1207.62 L2094.93 1207.62 L2095.52 1207.62 L2096.1 1207.62 L2096.69 1207.62 L2097.28 1207.62 L2097.86 1207.62 L2098.45 1207.62 L2099.04 1207.62 L2099.62 1207.62 L2100.21 1207.62 L2100.8 1207.62 L2101.38 1207.62 L2101.97 1207.62 L2102.55 1207.62 L2103.14 1207.62 L2103.73 1207.62 L2104.31 1207.62 L2104.9 1207.62 L2105.49 1207.62 L2106.07 1207.62 L2106.66 1207.62 L2107.25 1207.62 L2107.83 1207.62 L2108.42 1207.62 L2109.01 1207.62 L2109.59 1207.62 L2110.18 1207.62 L2110.76 1207.62 L2111.35 1207.62 L2111.94 1207.62 L2112.52 1207.62 L2113.11 1207.62 L2113.7 1207.62 L2114.28 1207.62 L2114.87 1207.62 L2115.46 1207.62 L2116.04 1207.62 L2116.63 1207.62 L2117.22 1207.62 L2117.8 1207.62 L2118.39 1207.62 L2118.97 1207.62 L2119.56 1207.62 L2120.15 1207.62 L2120.73 1207.62 L2121.32 1207.62 L2121.91 1207.62 L2122.49 1207.62 L2123.08 1207.62 L2123.67 1207.62 L2124.25 1207.62 L2124.84 1207.62 L2125.42 1207.62 L2126.01 1207.62 L2126.6 1207.62 L2127.18 1207.62 L2127.77 1207.62 L2128.36 1207.62 L2128.94 1207.62 L2129.53 1207.62 L2130.12 1207.62 L2130.7 1207.62 L2131.29 1207.62 L2131.88 1207.62 L2132.46 1207.62 L2133.05 1207.62 L2133.63 1207.62 L2134.22 1207.62 L2134.81 1207.62 L2135.39 1207.62 L2135.98 1207.62 L2136.57 1207.62 L2137.15 1207.62 L2137.74 1207.62 L2138.33 1207.62 L2138.91 1207.62 L2139.5 1207.62 L2140.09 1207.62 L2140.67 1207.62 L2141.26 1207.62 L2141.84 1207.62 L2142.43 1207.62 L2143.02 1207.62 L2143.6 1207.62 L2144.19 1207.62 L2144.78 1207.62 L2145.36 1207.62 L2145.95 1207.62 L2146.54 1207.62 L2147.12 1207.62 L2147.71 1207.62 L2148.3 1207.62 L2148.88 1207.62 L2149.47 1207.62 L2150.05 1207.62 L2150.64 1207.62 L2151.23 1207.62 L2151.81 1207.62 L2152.4 1207.62 L2152.99 1207.62 L2153.57 1207.62 L2154.16 1207.62 L2154.75 1207.62 L2155.33 1207.62 L2155.92 1207.62 L2156.5 1207.62 L2157.09 1207.62 L2157.68 1207.62 L2158.26 1207.62 L2158.26 1207.38 L2157.68 1207.38 L2157.09 1207.38 L2156.5 1207.38 L2155.92 1207.38 L2155.33 1207.38 L2154.75 1207.38 L2154.16 1207.38 L2153.57 1207.38 L2152.99 1207.38 L2152.4 1207.38 L2151.81 1207.38 L2151.23 1207.38 L2150.64 1207.38 L2150.05 1207.38 L2149.47 1207.38 L2148.88 1207.38 L2148.3 1207.38 L2147.71 1207.38 L2147.12 1207.38 L2146.54 1207.38 L2145.95 1207.38 L2145.36 1207.38 L2144.78 1207.38 L2144.19 1207.38 L2143.6 1207.38 L2143.02 1207.38 L2142.43 1207.38 L2141.84 1207.38 L2141.26 1207.38 L2140.67 1207.38 L2140.09 1207.38 L2139.5 1207.38 L2138.91 1207.38 L2138.33 1207.38 L2137.74 1207.38 L2137.15 1207.38 L2136.57 1207.38 L2135.98 1207.38 L2135.39 1207.38 L2134.81 1207.38 L2134.22 1207.38 L2133.63 1207.38 L2133.05 1207.38 L2132.46 1207.38 L2131.88 1207.38 L2131.29 1207.38 L2130.7 1207.38 L2130.12 1207.38 L2129.53 1207.38 L2128.94 1207.38 L2128.36 1207.38 L2127.77 1207.38 L2127.18 1207.38 L2126.6 1207.38 L2126.01 1207.38 L2125.42 1207.38 L2124.84 1207.38 L2124.25 1207.38 L2123.67 1207.38 L2123.08 1207.38 L2122.49 1207.38 L2121.91 1207.38 L2121.32 1207.38 L2120.73 1207.38 L2120.15 1207.38 L2119.56 1207.38 L2118.97 1207.38 L2118.39 1207.38 L2117.8 1207.38 L2117.22 1207.38 L2116.63 1207.38 L2116.04 1207.38 L2115.46 1207.38 L2114.87 1207.38 L2114.28 1207.38 L2113.7 1207.38 L2113.11 1207.38 L2112.52 1207.38 L2111.94 1207.38 L2111.35 1207.38 L2110.76 1207.38 L2110.18 1207.38 L2109.59 1207.38 L2109.01 1207.38 L2108.42 1207.38 L2107.83 1207.38 L2107.25 1207.38 L2106.66 1207.38 L2106.07 1207.38 L2105.49 1207.38 L2104.9 1207.38 L2104.31 1207.38 L2103.73 1207.38 L2103.14 1207.38 L2102.55 1207.38 L2101.97 1207.38 L2101.38 1207.38 L2100.8 1207.38 L2100.21 1207.38 L2099.62 1207.38 L2099.04 1207.38 L2098.45 1207.38 L2097.86 1207.38 L2097.28 1207.38 L2096.69 1207.38 L2096.1 1207.38 L2095.52 1207.38 L2094.93 1207.38 L2094.35 1207.38 L2093.76 1207.38 L2093.17 1207.38 L2092.59 1207.38 L2092 1207.38 L2091.41 1207.38 L2090.83 1207.38 L2090.24 1207.38 L2089.65 1207.38 L2089.07 1207.38 L2088.48 1207.38 L2087.89 1207.38 L2087.31 1207.38 L2086.72 1207.38 L2086.14 1207.38 L2085.55 1207.38 L2084.96 1207.38 L2084.38 1207.38 L2083.79 1207.38 L2083.2 1207.38 L2082.62 1207.38 L2082.03 1207.38 L2081.44 1207.38 L2080.86 1207.38 L2080.27 1207.38 L2079.68 1207.38 L2079.1 1207.38 L2078.51 1207.38 L2077.93 1207.38 L2077.34 1207.38 L2076.75 1207.38 L2076.17 1207.38 L2075.58 1207.38 L2074.99 1207.38 L2074.41 1207.38 L2073.82 1207.38 L2073.23 1207.38 L2072.65 1207.38 L2072.06 1207.38 L2071.48 1207.38 L2070.89 1207.38 L2070.3 1207.38 L2069.72 1207.38 L2069.13 1207.38 L2068.54 1207.38 L2067.96 1207.38 L2067.37 1207.38 L2066.78 1207.38 L2066.2 1207.38 L2065.61 1207.38 L2065.02 1207.38 L2064.44 1207.38 L2063.85 1207.38 L2063.27 1207.38 L2062.68 1207.38 L2062.09 1207.38 L2061.51 1207.38 L2060.92 1207.38 L2060.33 1207.38 L2059.75 1207.38 L2059.16 1207.38 L2058.57 1207.38 L2057.99 1207.38 L2057.4 1207.38 L2056.81 1207.38 L2056.23 1207.38 L2055.64 1207.38 L2055.06 1207.38 L2054.47 1207.38 L2053.88 1207.38 L2053.3 1207.38 L2052.71 1207.38 L2052.12 1207.38 L2051.54 1207.38 L2050.95 1207.38 L2050.36 1207.38 L2049.78 1207.38 L2049.19 1207.38 L2048.6 1207.38 L2048.02 1207.38 L2047.43 1207.38 L2046.85 1207.38 L2046.26 1207.38 L2045.67 1207.38 L2045.09 1207.38 L2044.5 1207.38 L2043.91 1207.38 L2043.33 1207.38 L2042.74 1207.38 L2042.15 1207.38 L2041.57 1207.38 L2040.98 1207.38 L2040.4 1207.38 L2039.81 1207.38 L2039.22 1207.38 L2038.64 1207.38 L2038.05 1207.38 L2037.46 1207.38 L2036.88 1207.38 L2036.29 1207.38 L2035.7 1207.38 L2035.12 1207.38 L2034.53 1207.38 L2033.94 1207.38 L2033.36 1207.38 L2032.77 1207.38 L2032.19 1207.38 L2031.6 1207.38 L2031.01 1207.38 L2030.43 1207.38 L2029.84 1207.38 L2029.25 1207.38 L2028.67 1207.38 L2028.08 1207.38 L2027.49 1207.38 L2026.91 1207.38 L2026.32 1207.38 L2025.73 1207.38 L2025.15 1207.38 L2024.56 1207.38 L2023.98 1207.38 L2023.39 1207.38 L2022.8 1207.38 L2022.22 1207.38 L2021.63 1207.38 L2021.04 1207.38 L2020.46 1207.38 L2019.87 1207.38 L2019.28 1207.38 L2018.7 1207.38 L2018.11 1207.38 L2017.53 1207.38 L2016.94 1207.38 L2016.35 1207.38 L2015.77 1207.38 L2015.18 1207.38 L2014.59 1207.38 L2014.01 1207.38 L2013.42 1207.38 L2012.83 1207.38 L2012.25 1207.38 L2011.66 1207.38 L2011.07 1207.38 L2010.49 1207.38 L2009.9 1207.38 L2009.32 1207.38 L2008.73 1207.38 L2008.14 1207.38 L2007.56 1207.38 L2006.97 1207.38 L2006.38 1207.38 L2005.8 1207.38 L2005.21 1207.38 L2004.62 1207.38 L2004.04 1207.38 L2003.45 1207.38 L2002.86 1207.38 L2002.28 1207.38 L2001.69 1207.38 L2001.11 1207.38 L2000.52 1207.38 L1999.93 1207.38 L1999.35 1207.38 L1998.76 1207.38 L1998.17 1207.38 L1997.59 1207.38 L1997 1207.38 L1996.41 1207.38 L1995.83 1207.38 L1995.24 1207.38 L1994.65 1207.38 L1994.07 1207.38 L1993.48 1207.38 L1992.9 1207.38 L1992.31 1207.38 L1991.72 1207.38 L1991.14 1207.38 L1990.55 1207.38 L1989.96 1207.38 L1989.38 1207.38 L1988.79 1207.38 L1988.2 1207.38 L1987.62 1207.38 L1987.03 1207.38 L1986.45 1207.38 L1985.86 1207.38 L1985.27 1207.38 L1984.69 1207.38 L1984.1 1207.38 L1983.51 1207.38 L1982.93 1207.38 L1982.34 1207.38 L1981.75 1207.38 L1981.17 1207.38 L1980.58 1207.38 L1979.99 1207.38 L1979.41 1207.38 L1978.82 1207.38 L1978.24 1207.38 L1977.65 1207.38 L1977.06 1207.38 L1976.48 1207.38 L1975.89 1207.38 L1975.3 1207.38 L1974.72 1207.38 L1974.13 1207.38 L1973.54 1207.38 L1972.96 1207.38 L1972.37 1207.38 L1971.78 1207.38 L1971.2 1207.38 L1970.61 1207.38 L1970.03 1207.38 L1969.44 1207.38 L1968.85 1207.38 L1968.27 1207.38 L1967.68 1207.38 L1967.09 1207.38 L1966.51 1207.38 L1965.92 1207.38 L1965.33 1207.38 L1964.75 1207.38 L1964.16 1207.38 L1963.58 1207.38 L1962.99 1207.38 L1962.4 1207.38 L1961.82 1207.38 L1961.23 1207.38 L1960.64 1207.38 L1960.06 1207.38 L1959.47 1207.38 L1958.88 1207.38 L1958.3 1207.38 L1957.71 1207.38 L1957.12 1207.38 L1956.54 1207.38 L1955.95 1207.38 L1955.37 1207.38 L1954.78 1207.38 L1954.19 1207.38 L1953.61 1207.38 L1953.02 1207.38 L1952.43 1207.38 L1951.85 1207.38 L1951.26 1207.38 L1950.67 1207.38 L1950.09 1207.38 L1949.5 1207.38 L1948.91 1207.38 L1948.33 1207.38 L1947.74 1207.38 L1947.16 1207.38 L1946.57 1207.38 L1945.98 1207.38 L1945.4 1207.38 L1944.81 1207.38 L1944.22 1207.38 L1943.64 1207.38 L1943.05 1207.38 L1942.46 1207.38 L1941.88 1207.38 L1941.29 1207.38 L1940.71 1207.38 L1940.12 1207.38 L1939.53 1207.38 L1938.95 1207.38 L1938.36 1207.38 L1937.77 1207.38 L1937.19 1207.38 L1936.6 1207.38 L1936.01 1207.38 L1935.43 1207.38 L1934.84 1207.38 L1934.25 1207.38 L1933.67 1207.38 L1933.08 1207.38 L1932.5 1207.38 L1931.91 1207.38 L1931.32 1207.38 L1930.74 1207.38 L1930.15 1207.38 L1929.56 1207.38 L1928.98 1207.38 L1928.39 1207.38 L1927.8 1207.38 L1927.22 1207.38 L1926.63 1207.38 L1926.04 1207.38 L1925.46 1207.38 L1924.87 1207.38 L1924.29 1207.38 L1923.7 1207.38 L1923.11 1207.38 L1922.53 1207.38 L1921.94 1207.38 L1921.35 1207.38 L1920.77 1207.38 L1920.18 1207.38 L1919.59 1207.38 L1919.01 1207.38 L1918.42 1207.38 L1917.83 1207.38 L1917.25 1207.38 L1916.66 1207.38 L1916.08 1207.38 L1915.49 1207.38 L1914.9 1207.38 L1914.32 1207.38 L1913.73 1207.38 L1913.14 1207.38 L1912.56 1207.38 L1911.97 1207.38 L1911.38 1207.38 L1910.8 1207.38 L1910.21 1207.38 L1909.63 1207.38 L1909.04 1207.38 L1908.45 1207.38 L1907.87 1207.38 L1907.28 1207.38 L1906.69 1207.38 L1906.11 1207.38 L1905.52 1207.38 L1904.93 1207.38 L1904.35 1207.38 L1903.76 1207.38 L1903.17 1207.38 L1902.59 1207.38 L1902 1207.38 L1901.42 1207.38 L1900.83 1207.38 L1900.24 1207.38 L1899.66 1207.38 L1899.07 1207.38 L1898.48 1207.38 L1897.9 1207.38 L1897.31 1207.38 L1896.72 1207.38 L1896.14 1207.38 L1895.55 1207.38 L1894.96 1207.38 L1894.38 1207.38 L1893.79 1207.38 L1893.21 1207.38 L1892.62 1207.38 L1892.03 1207.38 L1891.45 1207.38 L1890.86 1207.38 L1890.27 1207.38 L1889.69 1207.38 L1889.1 1207.38 L1888.51 1207.38 L1887.93 1207.38 L1887.34 1207.38 L1886.76 1207.38 L1886.17 1207.38 L1885.58 1207.38 L1885 1207.38 L1884.41 1207.38 L1883.82 1207.38 L1883.24 1207.38 L1882.65 1207.38 L1882.06 1207.38 L1881.48 1207.38 L1880.89 1207.38 L1880.3 1207.38 L1879.72 1207.38 L1879.13 1207.38 L1878.55 1207.38 L1877.96 1207.38 L1877.37 1207.38 L1876.79 1207.38 L1876.2 1207.38 L1875.61 1207.38 L1875.03 1207.38 L1874.44 1207.38 L1873.85 1207.38 L1873.27 1207.38 L1872.68 1207.38 L1872.09 1207.38 L1871.51 1207.38 L1870.92 1207.38 L1870.34 1207.38 L1869.75 1207.38 L1869.16 1207.38 L1868.58 1207.38 L1867.99 1207.38 L1867.4 1207.38 L1866.82 1207.38 L1866.23 1207.38 L1865.64 1207.38 L1865.06 1207.38 L1864.47 1207.38 L1863.88 1207.38 L1863.3 1207.38 L1862.71 1207.38 L1862.13 1207.38 L1861.54 1207.38 L1860.95 1207.38 L1860.37 1207.38 L1859.78 1207.38 L1859.19 1207.38 L1858.61 1207.38 L1858.02 1207.38 L1857.43 1207.38 L1856.85 1207.38 L1856.26 1207.38 L1855.68 1207.38 L1855.09 1207.38 L1854.5 1207.38 L1853.92 1207.38 L1853.33 1207.38 L1852.74 1207.38 L1852.16 1207.38 L1851.57 1207.38 L1850.98 1207.38 L1850.4 1207.38 L1849.81 1207.38 L1849.22 1207.38 L1848.64 1207.38 L1848.05 1207.38 L1847.47 1207.38 L1846.88 1207.38 L1846.29 1207.38 L1845.71 1207.38 L1845.12 1207.38 L1844.53 1207.38 L1843.95 1207.38 L1843.36 1207.38 L1842.77 1207.38 L1842.19 1207.38 L1841.6 1207.38 L1841.01 1207.38 L1840.43 1207.38 L1839.84 1207.38 L1839.26 1207.38 L1838.67 1207.38 L1838.08 1207.38 L1837.5 1207.38 L1836.91 1207.38 L1836.32 1207.38 L1835.74 1207.38 L1835.15 1207.38 L1834.56 1207.38 L1833.98 1207.38 L1833.39 1207.38 L1832.81 1207.38 L1832.22 1207.38 L1831.63 1207.38 L1831.05 1207.38 L1830.46 1207.38 L1829.87 1207.38 L1829.29 1207.38 L1828.7 1207.38 L1828.11 1207.38 L1827.53 1207.38 L1826.94 1207.38 L1826.35 1207.38 L1825.77 1207.38 L1825.18 1207.38 L1824.6 1207.38 L1824.01 1207.38 L1823.42 1207.38 L1822.84 1207.38 L1822.25 1207.38 L1821.66 1207.38 L1821.08 1207.38 L1820.49 1207.38 L1819.9 1207.38 L1819.32 1207.38 L1818.73 1207.38 L1818.14 1207.38 L1817.56 1207.38 L1816.97 1207.38 L1816.39 1207.38 L1815.8 1207.38 L1815.21 1207.38 L1814.63 1207.38 L1814.04 1207.38 L1813.45 1207.38 L1812.87 1207.38 L1812.28 1207.38 L1811.69 1207.38 L1811.11 1207.38 L1810.52 1207.38 L1809.94 1207.38 L1809.35 1207.38 L1808.76 1207.38 L1808.18 1207.38 L1807.59 1207.38 L1807 1207.38 L1806.42 1207.38 L1805.83 1207.38 L1805.24 1207.38 L1804.66 1207.38 L1804.07 1207.38 L1803.48 1207.38 L1802.9 1207.38 L1802.31 1207.38 L1801.73 1207.38 L1801.14 1207.38 L1800.55 1207.38 L1799.97 1207.38 L1799.38 1207.38 L1798.79 1207.38 L1798.21 1207.38 L1797.62 1207.38 L1797.03 1207.38 L1796.45 1207.38 L1795.86 1207.38 L1795.27 1207.38 L1794.69 1207.38 L1794.1 1207.38 L1793.52 1207.38 L1792.93 1207.38 L1792.34 1207.38 L1791.76 1207.38 L1791.17 1207.38 L1790.58 1207.38 L1790 1207.38 L1789.41 1207.38 L1788.82 1207.38 L1788.24 1207.38 L1787.65 1207.38 L1787.06 1207.38 L1786.48 1207.38 L1785.89 1207.38 L1785.31 1207.38 L1784.72 1207.38 L1784.13 1207.38 L1783.55 1207.38 L1782.96 1207.38 L1782.37 1207.38 L1781.79 1207.38 L1781.2 1207.38 L1780.61 1207.38 L1780.03 1207.38 L1779.44 1207.38 L1778.86 1207.38 L1778.27 1207.38 L1777.68 1207.38 L1777.1 1207.38 L1776.51 1207.38 L1775.92 1207.38 L1775.34 1207.38 L1774.75 1207.38 L1774.16 1207.38 L1773.58 1207.38 L1772.99 1207.38 L1772.4 1207.38 L1771.82 1207.38 L1771.23 1207.38 L1770.65 1207.38 L1770.06 1207.38 L1769.47 1207.38 L1768.89 1207.38 L1768.3 1207.38 L1767.71 1207.38 L1767.13 1207.38 L1766.54 1207.38 L1765.95 1207.38 L1765.37 1207.38 L1764.78 1207.38 L1764.19 1207.38 L1763.61 1207.38 L1763.02 1207.38 L1762.44 1207.38 L1761.85 1207.38 L1761.26 1207.38 L1760.68 1207.38 L1760.09 1207.38 L1759.5 1207.38 L1758.92 1207.38 L1758.33 1207.38 L1757.74 1207.38 L1757.16 1207.38 L1756.57 1207.38 L1755.99 1207.38 L1755.4 1207.38 L1754.81 1207.38 L1754.23 1207.38 L1753.64 1207.38 L1753.05 1207.38 L1752.47 1207.38 L1751.88 1207.38 L1751.29 1207.38 L1750.71 1207.38 L1750.12 1207.38 L1749.53 1207.38 L1748.95 1207.38 L1748.36 1207.38 L1747.78 1207.38 L1747.19 1207.38 L1746.6 1207.38 L1746.02 1207.38 L1745.43 1207.38 L1744.84 1207.38 L1744.26 1207.38 L1743.67 1207.38 L1743.08 1207.38 L1742.5 1207.38 L1741.91 1207.38 L1741.32 1207.38 L1740.74 1207.38 L1740.15 1207.38 L1739.57 1207.38 L1738.98 1207.38 L1738.39 1207.38 L1737.81 1207.38 L1737.22 1207.38 L1736.63 1207.38 L1736.05 1207.38 L1735.46 1207.38 L1734.87 1207.38 L1734.29 1207.38 L1733.7 1207.38 L1733.11 1207.38 L1732.53 1207.38 L1731.94 1207.38 L1731.36 1207.38 L1730.77 1207.38 L1730.18 1207.38 L1729.6 1207.38 L1729.01 1207.38 L1728.42 1207.38 L1727.84 1207.38 L1727.25 1207.38 L1726.66 1207.38 L1726.08 1207.38 L1725.49 1207.38 L1724.91 1207.38 L1724.32 1207.38 L1723.73 1207.38 L1723.15 1207.38 L1722.56 1207.38 L1721.97 1207.38 L1721.39 1207.38 L1720.8 1207.38 L1720.21 1207.38 L1719.63 1207.38 L1719.04 1207.38 L1718.45 1207.38 L1717.87 1207.38 L1717.28 1207.38 L1716.7 1207.38 L1716.11 1207.38 L1715.52 1207.38 L1714.94 1207.38 L1714.35 1207.38 L1713.76 1207.38 L1713.18 1207.38 L1712.59 1207.38 L1712 1207.38 L1711.42 1207.38 L1710.83 1207.38 L1710.24 1207.38 L1709.66 1207.38 L1709.07 1207.38 L1708.49 1207.38 L1707.9 1207.38 L1707.31 1207.38 L1706.73 1207.38 L1706.14 1207.38 L1705.55 1207.38 L1704.97 1207.38 L1704.38 1207.38 L1703.79 1207.38 L1703.21 1207.38 L1702.62 1207.38 L1702.04 1207.38 L1701.45 1207.38 L1700.86 1207.38 L1700.28 1207.38 L1699.69 1207.38 L1699.1 1207.38 L1698.52 1207.38 L1697.93 1207.38 L1697.34 1207.38 L1696.76 1207.38 L1696.17 1207.38 L1695.58 1207.38 L1695 1207.38 L1694.41 1207.38 L1693.83 1207.38 L1693.24 1207.38 L1692.65 1207.38 L1692.07 1207.38 L1691.48 1207.38 L1690.89 1207.38 L1690.31 1207.38 L1689.72 1207.38 L1689.13 1207.38 L1688.55 1207.38 L1687.96 1207.38 L1687.37 1207.38 L1686.79 1207.38 L1686.2 1207.38 L1685.62 1207.38 L1685.03 1207.38 L1684.44 1207.38 L1683.86 1207.38 L1683.27 1207.38 L1682.68 1207.38 L1682.1 1207.38 L1681.51 1207.38 L1680.92 1207.38 L1680.34 1207.38 L1679.75 1207.38 L1679.17 1207.38 L1678.58 1207.38 L1677.99 1207.38 L1677.41 1207.38 L1676.82 1207.38 L1676.23 1207.38 L1675.65 1207.38 L1675.06 1207.38 L1674.47 1207.38 L1673.89 1207.38 L1673.3 1207.38 L1672.71 1207.38 L1672.13 1207.38 L1671.54 1207.38 L1670.96 1207.38 L1670.37 1207.38 L1669.78 1207.38 L1669.2 1207.38 L1668.61 1207.38 L1668.02 1207.38 L1667.44 1207.38 L1666.85 1207.38 L1666.26 1207.38 L1665.68 1207.38 L1665.09 1207.38 L1664.5 1207.38 L1663.92 1207.38 L1663.33 1207.38 L1662.75 1207.38 L1662.16 1207.38 L1661.57 1207.38 L1660.99 1207.38 L1660.4 1207.38 L1659.81 1207.38 L1659.23 1207.38 L1658.64 1207.38 L1658.05 1207.38 L1657.47 1207.38 L1656.88 1207.38 L1656.29 1207.38 L1655.71 1207.38 L1655.12 1207.38 L1654.54 1207.38 L1653.95 1207.38 L1653.36 1207.38 L1652.78 1207.38 L1652.19 1207.38 L1651.6 1207.38 L1651.02 1207.38 L1650.43 1207.38 L1649.84 1207.38 L1649.26 1207.38 L1648.67 1207.38 L1648.09 1207.38 L1647.5 1207.38 L1646.91 1207.38 L1646.33 1207.38 L1645.74 1207.38 L1645.15 1207.38 L1644.57 1207.38 L1643.98 1207.38 L1643.39 1207.38 L1642.81 1207.38 L1642.22 1207.38 L1641.63 1207.38 L1641.05 1207.38 L1640.46 1207.38 L1639.88 1207.38 L1639.29 1207.38 L1638.7 1207.38 L1638.12 1207.38 L1637.53 1207.38 L1636.94 1207.38 L1636.36 1207.38 L1635.77 1207.38 L1635.18 1207.38 L1634.6 1207.38 L1634.01 1207.38 L1633.42 1207.38 L1632.84 1207.38 L1632.25 1207.38 L1631.67 1207.38 L1631.08 1207.38 L1630.49 1207.38 L1629.91 1207.38 L1629.32 1207.38 L1628.73 1207.38 L1628.15 1207.38 L1627.56 1207.38 L1626.97 1207.38 L1626.39 1207.38 L1625.8 1207.38 L1625.22 1207.38 L1624.63 1207.38 L1624.04 1207.38 L1623.46 1207.38 L1622.87 1207.38 L1622.28 1207.38 L1621.7 1207.38 L1621.11 1207.38 L1620.52 1207.38 L1619.94 1207.38 L1619.35 1207.38 L1618.76 1207.38 L1618.18 1207.38 L1617.59 1207.38 L1617.01 1207.38 L1616.42 1207.38 L1615.83 1207.38 L1615.25 1207.38 L1614.66 1207.38 L1614.07 1207.38 L1613.49 1207.38 L1612.9 1207.38 L1612.31 1207.38 L1611.73 1207.38 L1611.14 1207.38 L1610.55 1207.38 L1609.97 1207.38 L1609.38 1207.38 L1608.8 1207.38 L1608.21 1207.38 L1607.62 1207.38 L1607.04 1207.38 L1606.45 1207.38 L1605.86 1207.38 L1605.28 1207.38 L1604.69 1207.38 L1604.1 1207.38 L1603.52 1207.38 L1602.93 1207.38 L1602.34 1207.38 L1601.76 1207.38 L1601.17 1207.38 L1600.59 1207.38 L1600 1207.38 L1599.41 1207.38 L1598.83 1207.38 L1598.24 1207.38 L1597.65 1207.38 L1597.07 1207.38 L1596.48 1207.38 L1595.89 1207.38 L1595.31 1207.38 L1594.72 1207.38 L1594.14 1207.38 L1593.55 1207.38 L1592.96 1207.38 L1592.38 1207.38 L1591.79 1207.38 L1591.2 1207.38 L1590.62 1207.38 L1590.03 1207.38 L1589.44 1207.38 L1588.86 1207.38 L1588.27 1207.38 L1587.68 1207.38 L1587.1 1207.38 L1586.51 1207.38 L1585.93 1207.38 L1585.34 1207.38 L1584.75 1207.38 L1584.17 1207.38 L1583.58 1207.38 L1582.99 1207.38 L1582.41 1207.38 L1581.82 1207.38 L1581.23 1207.38 L1580.65 1207.38 L1580.06 1207.38 L1579.47 1207.38 L1578.89 1207.38 L1578.3 1207.38 L1577.72 1207.38 L1577.13 1207.38 L1576.54 1207.38 L1575.96 1207.38 L1575.37 1207.38 L1574.78 1207.38 L1574.2 1207.38 L1573.61 1207.38 L1573.02 1207.38 L1572.44 1207.38 L1571.85 1207.38 L1571.27 1207.38 L1570.68 1207.38 L1570.09 1207.38 L1569.51 1207.38 L1568.92 1207.38 L1568.33 1207.38 L1567.75 1207.38 L1567.16 1207.38 L1566.57 1207.38 L1565.99 1207.38 L1565.4 1207.38 L1564.81 1207.38 L1564.23 1207.38 L1563.64 1207.38 L1563.06 1207.38 L1562.47 1207.38 L1561.88 1207.38 L1561.3 1207.38 L1560.71 1207.38 L1560.12 1207.38 L1559.54 1207.38 L1558.95 1207.38 L1558.36 1207.38 L1557.78 1207.38 L1557.19 1207.38 L1556.6 1207.38 L1556.02 1207.38 L1555.43 1207.38 L1554.85 1207.38 L1554.26 1207.38 L1553.67 1207.38 L1553.09 1207.38 L1552.5 1207.38 L1551.91 1207.38 L1551.33 1207.38 L1550.74 1207.38 L1550.15 1207.38 L1549.57 1207.38 L1548.98 1207.38 L1548.4 1207.38 L1547.81 1207.38 L1547.22 1207.38 L1546.64 1207.38 L1546.05 1207.38 L1545.46 1207.38 L1544.88 1207.38 L1544.29 1207.38 L1543.7 1207.38 L1543.12 1207.38 L1542.53 1207.38 L1541.94 1207.38 L1541.36 1207.38 L1540.77 1207.38 L1540.19 1207.38 L1539.6 1207.38 L1539.01 1207.38 L1538.43 1207.38 L1537.84 1207.38 L1537.25 1207.38 L1536.67 1207.38 L1536.08 1207.38 L1535.49 1207.38 L1534.91 1207.38 L1534.32 1207.38 L1533.73 1207.38 L1533.15 1207.38 L1532.56 1207.38 L1531.98 1207.38 L1531.39 1207.38 L1530.8 1207.38 L1530.22 1207.38 L1529.63 1207.38 L1529.04 1207.38 L1528.46 1207.38 L1527.87 1207.38 L1527.28 1207.38 L1526.7 1207.38 L1526.11 1207.38 L1525.52 1207.38 L1524.94 1207.38 L1524.35 1207.38 L1523.77 1207.38 L1523.18 1207.38 L1522.59 1207.38 L1522.01 1207.38 L1521.42 1207.38 L1520.83 1207.38 L1520.25 1207.38 L1519.66 1207.38 L1519.07 1207.38 L1518.49 1207.38 L1517.9 1207.38 L1517.32 1207.38 L1516.73 1207.38 L1516.14 1207.38 L1515.56 1207.38 L1514.97 1207.38 L1514.38 1207.38 L1513.8 1207.38 L1513.21 1207.38 L1512.62 1207.38 L1512.04 1207.38 L1511.45 1207.38 L1510.86 1207.38 L1510.28 1207.38 L1509.69 1207.38 L1509.11 1207.38 L1508.52 1207.38 L1507.93 1207.38 L1507.35 1207.38 L1506.76 1207.38 L1506.17 1207.38 L1505.59 1207.38 L1505 1207.38 L1504.41 1207.38 L1503.83 1207.38 L1503.24 1207.38 L1502.65 1207.38 L1502.07 1207.38 L1501.48 1207.38 L1500.9 1207.38 L1500.31 1207.38 L1499.72 1207.38 L1499.14 1207.38 L1498.55 1207.38 L1497.96 1207.38 L1497.38 1207.38 L1496.79 1207.38 L1496.2 1207.38 L1495.62 1207.38 L1495.03 1207.38 L1494.45 1207.38 L1493.86 1207.38 L1493.27 1207.38 L1492.69 1207.38 L1492.1 1207.38 L1491.51 1207.38 L1490.93 1207.38 L1490.34 1207.38 L1489.75 1207.38 L1489.17 1207.38 L1488.58 1207.38 L1487.99 1207.38 L1487.41 1207.38 L1486.82 1207.38 L1486.24 1207.38 L1485.65 1207.38 L1485.06 1207.38 L1484.48 1207.38 L1483.89 1207.38 L1483.3 1207.38 L1482.72 1207.38 L1482.13 1207.38 L1481.54 1207.38 L1480.96 1207.38 L1480.37 1207.38 L1479.78 1207.38 L1479.2 1207.38 L1478.61 1207.38 L1478.03 1207.38 L1477.44 1207.38 L1476.85 1207.38 L1476.27 1207.38 L1475.68 1207.38 L1475.09 1207.38 L1474.51 1207.38 L1473.92 1207.38 L1473.33 1207.38 L1472.75 1207.38 L1472.16 1207.38 L1471.57 1207.38 L1470.99 1207.38 L1470.4 1207.38 L1469.82 1207.38 L1469.23 1207.38 L1468.64 1207.38 L1468.06 1207.38 L1467.47 1207.38 L1466.88 1207.38 L1466.3 1207.38 L1465.71 1207.38 L1465.12 1207.38 L1464.54 1207.38 L1463.95 1207.38 L1463.37 1207.38 L1462.78 1207.38 L1462.19 1207.38 L1461.61 1207.38 L1461.02 1207.38 L1460.43 1207.38 L1459.85 1207.38 L1459.26 1207.38 L1458.67 1207.38 L1458.09 1207.38 L1457.5 1207.38 L1456.91 1207.38 L1456.33 1207.38 L1455.74 1207.38 L1455.16 1207.38 L1454.57 1207.38 L1453.98 1207.38 L1453.4 1207.38 L1452.81 1207.38 L1452.22 1207.38 L1451.64 1207.38 L1451.05 1207.38 L1450.46 1207.38 L1449.88 1207.38 L1449.29 1207.38 L1448.7 1207.38 L1448.12 1207.38 L1447.53 1207.38 L1446.95 1207.38 L1446.36 1207.38 L1445.77 1207.38 L1445.19 1207.38 L1444.6 1207.38 L1444.01 1207.38 L1443.43 1207.38 L1442.84 1207.38 L1442.25 1207.38 L1441.67 1207.38 L1441.08 1207.38 L1440.5 1207.38 L1439.91 1207.38 L1439.32 1207.38 L1438.74 1207.38 L1438.15 1207.38 L1437.56 1207.38 L1436.98 1207.38 L1436.39 1207.38 L1435.8 1207.38 L1435.22 1207.38 L1434.63 1207.38 L1434.04 1207.38 L1433.46 1207.38 L1432.87 1207.38 L1432.29 1207.38 L1431.7 1207.38 L1431.11 1207.38 L1430.53 1207.38 L1429.94 1207.38 L1429.35 1207.38 L1428.77 1207.38 L1428.18 1207.38 L1427.59 1207.38 L1427.01 1207.38 L1426.42 1207.38 L1425.83 1207.38 L1425.25 1207.38 L1424.66 1207.38 L1424.08 1207.38 L1423.49 1207.38 L1422.9 1207.38 L1422.32 1207.38 L1421.73 1207.38 L1421.14 1207.38 L1420.56 1207.38 L1419.97 1207.38 L1419.38 1207.38 L1418.8 1207.38 L1418.21 1207.38 L1417.63 1207.38 L1417.04 1207.38 L1416.45 1207.38 L1415.87 1207.38 L1415.28 1207.38 L1414.69 1207.38 L1414.11 1207.38 L1413.52 1207.38 L1412.93 1207.38 L1412.35 1207.38 L1411.76 1207.38 L1411.17 1207.38 L1410.59 1207.38 L1410 1207.38 L1409.42 1207.38 L1408.83 1207.38 L1408.24 1207.38 L1407.66 1207.38 L1407.07 1207.38 L1406.48 1207.38 L1405.9 1207.38 L1405.31 1207.38 L1404.72 1207.38 L1404.14 1207.38 L1403.55 1207.38 L1402.96 1207.38 L1402.38 1207.38 L1401.79 1207.38 L1401.21 1207.38 L1400.62 1207.38 L1400.03 1207.38 L1399.45 1207.38 L1398.86 1207.38 L1398.27 1207.38 L1397.69 1207.38 L1397.1 1207.38 L1396.51 1207.38 L1395.93 1207.38 L1395.34 1207.38 L1394.75 1207.38 L1394.17 1207.38 L1393.58 1207.38 L1393 1207.38 L1392.41 1207.38 L1391.82 1207.38 L1391.24 1207.38 L1390.65 1207.38 L1390.06 1207.38 L1389.48 1207.38 L1388.89 1207.38 L1388.3 1207.38 L1387.72 1207.38 L1387.13 1207.38 L1386.55 1207.38 L1385.96 1207.38 L1385.37 1207.38 L1384.79 1207.38 L1384.2 1207.38 L1383.61 1207.38 L1383.03 1207.38 L1382.44 1207.38 L1381.85 1207.38 L1381.27 1207.38 L1380.68 1207.38 L1380.09 1207.38 L1379.51 1207.38 L1378.92 1207.38 L1378.34 1207.38 L1377.75 1207.38 L1377.16 1207.38 L1376.58 1207.38 L1375.99 1207.38 L1375.4 1207.38 L1374.82 1207.38 L1374.23 1207.38 L1373.64 1207.38 L1373.06 1207.38 L1372.47 1207.38 L1371.88 1207.38 L1371.3 1207.38 L1370.71 1207.38 L1370.13 1207.38 L1369.54 1207.38 L1368.95 1207.38 L1368.37 1207.38 L1367.78 1207.38 L1367.19 1207.38 L1366.61 1207.38 L1366.02 1207.38 L1365.43 1207.38 L1364.85 1207.38 L1364.26 1207.38 L1363.68 1207.38 L1363.09 1207.38 L1362.5 1207.38 L1361.92 1207.38 L1361.33 1207.38 L1360.74 1207.38 L1360.16 1207.38 L1359.57 1207.38 L1358.98 1207.38 L1358.4 1207.38 L1357.81 1207.38 L1357.22 1207.38 L1356.64 1207.38 L1356.05 1207.38 L1355.47 1207.38 L1354.88 1207.38 L1354.29 1207.38 L1353.71 1207.38 L1353.12 1207.38 L1352.53 1207.38 L1351.95 1207.38 L1351.36 1207.38 L1350.77 1207.38 L1350.19 1207.38 L1349.6 1207.38 L1349.01 1207.38 L1348.43 1207.38 L1347.84 1207.38 L1347.26 1207.38 L1346.67 1207.38 L1346.08 1207.38 L1345.5 1207.38 L1344.91 1207.38 L1344.32 1207.38 L1343.74 1207.38 L1343.15 1207.38 L1342.56 1207.38 L1341.98 1207.38 L1341.39 1207.38 L1340.8 1207.38 L1340.22 1207.38 L1339.63 1207.38 L1339.05 1207.38 L1338.46 1207.38 L1337.87 1207.38 L1337.29 1207.38 L1336.7 1207.38 L1336.11 1207.38 L1335.53 1207.38 L1334.94 1207.38 L1334.35 1207.38 L1333.77 1207.38 L1333.18 1207.38 L1332.6 1207.38 L1332.01 1207.38 L1331.42 1207.38 L1330.84 1207.38 L1330.25 1207.38 L1329.66 1207.38 L1329.08 1207.38 L1328.49 1207.38 L1327.9 1207.38 L1327.32 1207.38 L1326.73 1207.38 L1326.14 1207.38 L1325.56 1207.38 L1324.97 1207.38 L1324.39 1207.38 L1323.8 1207.38 L1323.21 1207.38 L1322.63 1207.38 L1322.04 1207.38 L1321.45 1207.38 L1320.87 1207.38 L1320.28 1207.38 L1319.69 1207.38 L1319.11 1207.38 L1318.52 1207.38 L1317.93 1207.38 L1317.35 1207.38 L1316.76 1207.38 L1316.18 1207.38 L1315.59 1207.38 L1315 1207.38 L1314.42 1207.38 L1313.83 1207.38 L1313.24 1207.38 L1312.66 1207.38 L1312.07 1207.38 L1311.48 1207.38 L1310.9 1207.38 L1310.31 1207.38 L1309.73 1207.38 L1309.14 1207.38 L1308.55 1207.38 L1307.97 1207.38 L1307.38 1207.38 L1306.79 1207.38 L1306.21 1207.38 L1305.62 1207.38 L1305.03 1207.38 L1304.45 1207.38 L1303.86 1207.38 L1303.27 1207.38 L1302.69 1207.38 L1302.1 1207.38 L1301.52 1207.38 L1300.93 1207.38 L1300.34 1207.38 L1299.76 1207.38 L1299.17 1207.38 L1298.58 1207.38 L1298 1207.38 L1297.41 1207.38 L1296.82 1207.38 L1296.24 1207.38 L1295.65 1207.38 L1295.06 1207.38 L1294.48 1207.38 L1293.89 1207.38 L1293.31 1207.38 L1292.72 1207.38 L1292.13 1207.38 L1291.55 1207.38 L1290.96 1207.38 L1290.37 1207.38 L1289.79 1207.38 L1289.2 1207.38 L1288.61 1207.38 L1288.03 1207.38 L1287.44 1207.38 L1286.86 1207.38 L1286.27 1207.38 L1285.68 1207.38 L1285.1 1207.38 L1284.51 1207.38 L1283.92 1207.38 L1283.34 1207.38 L1282.75 1207.38 L1282.16 1207.38 L1281.58 1207.38 L1280.99 1207.38 L1280.4 1207.38 L1279.82 1207.38 L1279.23 1207.38 L1278.65 1207.38 L1278.06 1207.38 L1277.47 1207.38 L1276.89 1207.38 L1276.3 1207.38 L1275.71 1207.38 L1275.13 1207.38 L1274.54 1207.38 L1273.95 1207.38 L1273.37 1207.38 L1272.78 1207.38 L1272.19 1207.38 L1271.61 1207.38 L1271.02 1207.38 L1270.44 1207.38 L1269.85 1207.38 L1269.26 1207.38 L1268.68 1207.38 L1268.09 1207.38 L1267.5 1207.38 L1266.92 1207.38 L1266.33 1207.38 L1265.74 1207.38 L1265.16 1207.38 L1264.57 1207.38 L1263.98 1207.38 L1263.4 1207.38 L1262.81 1207.38 L1262.23 1207.38 L1261.64 1207.38 L1261.05 1207.38 L1260.47 1207.38 L1259.88 1207.38 L1259.29 1207.38 L1258.71 1207.38 L1258.12 1207.38 L1257.53 1207.38 L1256.95 1207.38 L1256.36 1207.38 L1255.78 1207.38 L1255.19 1207.38 L1254.6 1207.38 L1254.02 1207.38 L1253.43 1207.38 L1252.84 1207.38 L1252.26 1207.38 L1251.67 1207.38 L1251.08 1207.38 L1250.5 1207.38 L1249.91 1207.38 L1249.32 1207.38 L1248.74 1207.38 L1248.15 1207.38 L1247.57 1207.38 L1246.98 1207.38 L1246.39 1207.38 L1245.81 1207.38 L1245.22 1207.38 L1244.63 1207.38 L1244.05 1207.38 L1243.46 1207.38 L1242.87 1207.38 L1242.29 1207.38 L1241.7 1207.38 L1241.11 1207.38 L1240.53 1207.38 L1239.94 1207.38 L1239.36 1207.38 L1238.77 1207.38 L1238.18 1207.38 L1237.6 1207.38 L1237.01 1207.38 L1236.42 1207.38 L1235.84 1207.38 L1235.25 1207.38 L1234.66 1207.38 L1234.08 1207.38 L1233.49 1207.38 L1232.91 1207.38 L1232.32 1207.38 L1231.73 1207.38 L1231.15 1207.38 L1230.56 1207.38 L1229.97 1207.38 L1229.39 1207.38 L1228.8 1207.38 L1228.21 1207.38 L1227.63 1207.38 L1227.04 1207.38 L1226.45 1207.38 L1225.87 1207.38 L1225.28 1207.38 L1224.7 1207.38 L1224.11 1207.38 L1223.52 1207.38 L1222.94 1207.38 L1222.35 1207.38 L1221.76 1207.38 L1221.18 1207.38 L1220.59 1207.38 L1220 1207.38 L1219.42 1207.38 L1218.83 1207.38 L1218.24 1207.38 L1217.66 1207.38 L1217.07 1207.38 L1216.49 1207.38 L1215.9 1207.38 L1215.31 1207.38 L1214.73 1207.38 L1214.14 1207.38 L1213.55 1207.38 L1212.97 1207.38 L1212.38 1207.38 L1211.79 1207.38 L1211.21 1207.38 L1210.62 1207.38 L1210.03 1207.38 L1209.45 1207.38 L1208.86 1207.38 L1208.28 1207.38 L1207.69 1207.38 L1207.1 1207.38 L1206.52 1207.38 L1205.93 1207.38 L1205.34 1207.38 L1204.76 1207.38 L1204.17 1207.38 L1203.58 1207.38 L1203 1207.38 L1202.41 1207.38 L1201.83 1207.38 L1201.24 1207.38 L1200.65 1207.38 L1200.07 1207.38 L1199.48 1207.38 L1198.89 1207.38 L1198.31 1207.38 L1197.72 1207.38 L1197.13 1207.38 L1196.55 1207.38 L1195.96 1207.38 L1195.37 1207.38 L1194.79 1207.38 L1194.2 1207.38 L1193.62 1207.38 L1193.03 1207.38 L1192.44 1207.38 L1191.86 1207.38 L1191.27 1207.38 L1190.68 1207.38 L1190.1 1207.38 L1189.51 1207.38 L1188.92 1207.38 L1188.34 1207.38 L1187.75 1207.38 L1187.16 1207.38 L1186.58 1207.38 L1185.99 1207.38 L1185.41 1207.38 L1184.82 1207.38 L1184.23 1207.38 L1183.65 1207.38 L1183.06 1207.38 L1182.47 1207.38 L1181.89 1207.38 L1181.3 1207.38 L1180.71 1207.38 L1180.13 1207.38 L1179.54 1207.38 L1178.96 1207.38 L1178.37 1207.38 L1177.78 1207.38 L1177.2 1207.38 L1176.61 1207.38 L1176.02 1207.38 L1175.44 1207.38 L1174.85 1207.38 L1174.26 1207.38 L1173.68 1207.38 L1173.09 1207.38 L1172.5 1207.38 L1171.92 1207.38 L1171.33 1207.38 L1170.75 1207.38 L1170.16 1207.38 L1169.57 1207.38 L1168.99 1207.38 L1168.4 1207.38 L1167.81 1207.38 L1167.23 1207.38 L1166.64 1207.38 L1166.05 1207.38 L1165.47 1207.38 L1164.88 1207.38 L1164.29 1207.38 L1163.71 1207.38 L1163.12 1207.38 L1162.54 1207.38 L1161.95 1207.38 L1161.36 1207.38 L1160.78 1207.38 L1160.19 1207.38 L1159.6 1207.38 L1159.02 1207.38 L1158.43 1207.38 L1157.84 1207.38 L1157.26 1207.38 L1156.67 1207.38 L1156.09 1207.38 L1155.5 1207.38 L1154.91 1207.38 L1154.33 1207.38 L1153.74 1207.38 L1153.15 1207.38 L1152.57 1207.38 L1151.98 1207.38 L1151.39 1207.38 L1150.81 1207.38 L1150.22 1207.38 L1149.63 1207.38 L1149.05 1207.38 L1148.46 1207.38 L1147.88 1207.38 L1147.29 1207.38 L1146.7 1207.38 L1146.12 1207.38 L1145.53 1207.38 L1144.94 1207.38 L1144.36 1207.38 L1143.77 1207.38 L1143.18 1207.38 L1142.6 1207.38 L1142.01 1207.38 L1141.42 1207.38 L1140.84 1207.38 L1140.25 1207.38 L1139.67 1207.38 L1139.08 1207.38 L1138.49 1207.38 L1137.91 1207.38 L1137.32 1207.38 L1136.73 1207.38 L1136.15 1207.38 L1135.56 1207.38 L1134.97 1207.38 L1134.39 1207.38 L1133.8 1207.38 L1133.21 1207.38 L1132.63 1207.38 L1132.04 1207.38 L1131.46 1207.38 L1130.87 1207.38 L1130.28 1207.38 L1129.7 1207.38 L1129.11 1207.38 L1128.52 1207.38 L1127.94 1207.38 L1127.35 1207.38 L1126.76 1207.38 L1126.18 1207.38 L1125.59 1207.38 L1125.01 1207.38 L1124.42 1207.38 L1123.83 1207.38 L1123.25 1207.38 L1122.66 1207.38 L1122.07 1207.38 L1121.49 1207.38 L1120.9 1207.38 L1120.31 1207.38 L1119.73 1207.38 L1119.14 1207.38 L1118.55 1207.38 L1117.97 1207.38 L1117.38 1207.38 L1116.8 1207.38 L1116.21 1207.38 L1115.62 1207.38 L1115.04 1207.38 L1114.45 1207.38 L1113.86 1207.38 L1113.28 1207.38 L1112.69 1207.38 L1112.1 1207.38 L1111.52 1207.38 L1110.93 1207.38 L1110.34 1207.38 L1109.76 1207.38 L1109.17 1207.38 L1108.59 1207.38 L1108 1207.38 L1107.41 1207.38 L1106.83 1207.38 L1106.24 1207.38 L1105.65 1207.38 L1105.07 1207.38 L1104.48 1207.38 L1103.89 1207.38 L1103.31 1207.38 L1102.72 1207.38 L1102.14 1207.38 L1101.55 1207.38 L1100.96 1207.38 L1100.38 1207.38 L1099.79 1207.38 L1099.2 1207.38 L1098.62 1207.38 L1098.03 1207.38 L1097.44 1207.38 L1096.86 1207.38 L1096.27 1207.38 L1095.68 1207.38 L1095.1 1207.38 L1094.51 1207.38 L1093.93 1207.38 L1093.34 1207.38 L1092.75 1207.38 L1092.17 1207.38 L1091.58 1207.38 L1090.99 1207.38 L1090.41 1207.38 L1089.82 1207.38 L1089.23 1207.38 L1088.65 1207.38 L1088.06 1207.38 L1087.47 1207.38 L1086.89 1207.38 L1086.3 1207.38 L1085.72 1207.38 L1085.13 1207.38 L1084.54 1207.38 L1083.96 1207.38 L1083.37 1207.38 L1082.78 1207.38 L1082.2 1207.38 L1081.61 1207.38 L1081.02 1207.38 L1080.44 1207.38 L1079.85 1207.38 L1079.26 1207.38 L1078.68 1207.38 L1078.09 1207.38 L1077.51 1207.38 L1076.92 1207.38 L1076.33 1207.38 L1075.75 1207.38 L1075.16 1207.38 L1074.57 1207.38 L1073.99 1207.38 L1073.4 1207.38 L1072.81 1207.38 L1072.23 1207.38 L1071.64 1207.38 L1071.06 1207.38 L1070.47 1207.38 L1069.88 1207.38 L1069.3 1207.38 L1068.71 1207.38 L1068.12 1207.38 L1067.54 1207.38 L1066.95 1207.38 L1066.36 1207.38 L1065.78 1207.38 L1065.19 1207.38 L1064.6 1207.38 L1064.02 1207.38 L1063.43 1207.38 L1062.85 1207.38 L1062.26 1207.38 L1061.67 1207.38 L1061.09 1207.38 L1060.5 1207.38 L1059.91 1207.38 L1059.33 1207.38 L1058.74 1207.38 L1058.15 1207.38 L1057.57 1207.38 L1056.98 1207.38 L1056.39 1207.38 L1055.81 1207.38 L1055.22 1207.38 L1054.64 1207.38 L1054.05 1207.38 L1053.46 1207.38 L1052.88 1207.38 L1052.29 1207.38 L1051.7 1207.38 L1051.12 1207.38 L1050.53 1207.38 L1049.94 1207.38 L1049.36 1207.38 L1048.77 1207.38 L1048.19 1207.38 L1047.6 1207.38 L1047.01 1207.38 L1046.43 1207.38 L1045.84 1207.38 L1045.25 1207.38 L1044.67 1207.38 L1044.08 1207.38 L1043.49 1207.38 L1042.91 1207.38 L1042.32 1207.38 L1041.73 1207.38 L1041.15 1207.38 L1040.56 1207.38 L1039.98 1207.38 L1039.39 1207.38 L1038.8 1207.38 L1038.22 1207.38 L1037.63 1207.38 L1037.04 1207.38 L1036.46 1207.38 L1035.87 1207.38 L1035.28 1207.38 L1034.7 1207.38 L1034.11 1207.38 L1033.52 1207.38 L1032.94 1207.38 L1032.35 1207.38 L1031.77 1207.38 L1031.18 1207.38 L1030.59 1207.38 L1030.01 1207.38 L1029.42 1207.38 L1028.83 1207.38 L1028.25 1207.38 L1027.66 1207.38 L1027.07 1207.38 L1026.49 1207.38 L1025.9 1207.38 L1025.32 1207.38 L1024.73 1207.38 L1024.14 1207.38 L1023.56 1207.38 L1022.97 1207.38 L1022.38 1207.38 L1021.8 1207.38 L1021.21 1207.38 L1020.62 1207.38 L1020.04 1207.38 L1019.45 1207.38 L1018.86 1207.38 L1018.28 1207.38 L1017.69 1207.38 L1017.11 1207.38 L1016.52 1207.38 L1015.93 1207.38 L1015.35 1207.38 L1014.76 1207.38 L1014.17 1207.38 L1013.59 1207.38 L1013 1207.38 L1012.41 1207.38 L1011.83 1207.38 L1011.24 1207.38 L1010.65 1207.38 L1010.07 1207.38 L1009.48 1207.38 L1008.9 1207.38 L1008.31 1207.38 L1007.72 1207.38 L1007.14 1207.38 L1006.55 1207.38 L1005.96 1207.38 L1005.38 1207.38 L1004.79 1207.38 L1004.2 1207.38 L1003.62 1207.38 L1003.03 1207.38 L1002.44 1207.38 L1001.86 1207.38 L1001.27 1207.38 L1000.69 1207.38 L1000.1 1207.38 L999.513 1207.38 L998.926 1207.38 L998.34 1207.38 L997.754 1207.38 L997.167 1207.38 L996.581 1207.38 L995.994 1207.38 L995.408 1207.38 L994.822 1207.38 L994.235 1207.38 L993.649 1207.38 L993.062 1207.38 L992.476 1207.38 L991.889 1207.38 L991.303 1207.38 L990.717 1207.38 L990.13 1207.38 L989.544 1207.38 L988.957 1207.38 L988.371 1207.38 L987.785 1207.38 L987.198 1207.38 L986.612 1207.38 L986.025 1207.38  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.5 986.612,1207.5 987.198,1207.5 987.785,1207.5 988.371,1207.5 988.957,1207.5 989.544,1207.5 990.13,1207.5 990.717,1207.5 991.303,1207.5 991.889,1207.5 992.476,1207.5 993.062,1207.5 993.649,1207.5 994.235,1207.5 994.822,1207.5 995.408,1207.5 995.994,1207.5 996.581,1207.5 997.167,1207.5 997.754,1207.5 998.34,1207.5 998.926,1207.5 999.513,1207.5 1000.1,1207.5 1000.69,1207.5 1001.27,1207.5 1001.86,1207.5 1002.44,1207.5 1003.03,1207.5 1003.62,1207.5 1004.2,1207.5 1004.79,1207.5 1005.38,1207.5 1005.96,1207.5 1006.55,1207.5 1007.14,1207.5 1007.72,1207.5 1008.31,1207.5 1008.9,1207.5 1009.48,1207.5 1010.07,1207.5 1010.65,1207.5 1011.24,1207.5 1011.83,1207.5 1012.41,1207.5 1013,1207.5 1013.59,1207.5 1014.17,1207.5 1014.76,1207.5 1015.35,1207.5 1015.93,1207.5 1016.52,1207.5 1017.11,1207.5 1017.69,1207.5 1018.28,1207.5 1018.86,1207.5 1019.45,1207.5 1020.04,1207.5 1020.62,1207.5 1021.21,1207.5 1021.8,1207.5 1022.38,1207.5 1022.97,1207.5 1023.56,1207.5 1024.14,1207.5 1024.73,1207.5 1025.32,1207.5 1025.9,1207.5 1026.49,1207.5 1027.07,1207.5 1027.66,1207.5 1028.25,1207.5 1028.83,1207.5 1029.42,1207.5 1030.01,1207.5 1030.59,1207.5 1031.18,1207.5 1031.77,1207.5 1032.35,1207.5 1032.94,1207.5 1033.52,1207.5 1034.11,1207.5 1034.7,1207.5 1035.28,1207.5 1035.87,1207.5 1036.46,1207.5 1037.04,1207.5 1037.63,1207.5 1038.22,1207.5 1038.8,1207.5 1039.39,1207.5 1039.98,1207.5 1040.56,1207.5 1041.15,1207.5 1041.73,1207.5 1042.32,1207.5 1042.91,1207.5 1043.49,1207.5 1044.08,1207.5 1044.67,1207.5 1045.25,1207.5 1045.84,1207.5 1046.43,1207.5 1047.01,1207.5 1047.6,1207.5 1048.19,1207.5 1048.77,1207.5 1049.36,1207.5 1049.94,1207.5 1050.53,1207.5 1051.12,1207.5 1051.7,1207.5 1052.29,1207.5 1052.88,1207.5 1053.46,1207.5 1054.05,1207.5 1054.64,1207.5 1055.22,1207.5 1055.81,1207.5 1056.39,1207.5 1056.98,1207.5 1057.57,1207.5 1058.15,1207.5 1058.74,1207.5 1059.33,1207.5 1059.91,1207.5 1060.5,1207.5 1061.09,1207.5 1061.67,1207.5 1062.26,1207.5 1062.85,1207.5 1063.43,1207.5 1064.02,1207.5 1064.6,1207.5 1065.19,1207.5 1065.78,1207.5 1066.36,1207.5 1066.95,1207.5 1067.54,1207.5 1068.12,1207.5 1068.71,1207.5 1069.3,1207.5 1069.88,1207.5 1070.47,1207.5 1071.06,1207.5 1071.64,1207.5 1072.23,1207.5 1072.81,1207.5 1073.4,1207.5 1073.99,1207.5 1074.57,1207.5 1075.16,1207.5 1075.75,1207.5 1076.33,1207.5 1076.92,1207.5 1077.51,1207.5 1078.09,1207.5 1078.68,1207.5 1079.26,1207.5 1079.85,1207.5 1080.44,1207.5 1081.02,1207.5 1081.61,1207.5 1082.2,1207.5 1082.78,1207.5 1083.37,1207.5 1083.96,1207.5 1084.54,1207.5 1085.13,1207.5 1085.72,1207.5 1086.3,1207.5 1086.89,1207.5 1087.47,1207.5 1088.06,1207.5 1088.65,1207.5 1089.23,1207.5 1089.82,1207.5 1090.41,1207.5 1090.99,1207.5 1091.58,1207.5 1092.17,1207.5 1092.75,1207.5 1093.34,1207.5 1093.93,1207.5 1094.51,1207.5 1095.1,1207.5 1095.68,1207.5 1096.27,1207.5 1096.86,1207.5 1097.44,1207.5 1098.03,1207.5 1098.62,1207.5 1099.2,1207.5 1099.79,1207.5 1100.38,1207.5 1100.96,1207.5 1101.55,1207.5 1102.14,1207.5 1102.72,1207.5 1103.31,1207.5 1103.89,1207.5 1104.48,1207.5 1105.07,1207.5 1105.65,1207.5 1106.24,1207.5 1106.83,1207.5 1107.41,1207.5 1108,1207.5 1108.59,1207.5 1109.17,1207.5 1109.76,1207.5 1110.34,1207.5 1110.93,1207.5 1111.52,1207.5 1112.1,1207.5 1112.69,1207.5 1113.28,1207.5 1113.86,1207.5 1114.45,1207.5 1115.04,1207.5 1115.62,1207.5 1116.21,1207.5 1116.8,1207.5 1117.38,1207.5 1117.97,1207.5 1118.55,1207.5 1119.14,1207.5 1119.73,1207.5 1120.31,1207.5 1120.9,1207.5 1121.49,1207.5 1122.07,1207.5 1122.66,1207.5 1123.25,1207.5 1123.83,1207.5 1124.42,1207.5 1125.01,1207.5 1125.59,1207.5 1126.18,1207.5 1126.76,1207.5 1127.35,1207.5 1127.94,1207.5 1128.52,1207.5 1129.11,1207.5 1129.7,1207.5 1130.28,1207.5 1130.87,1207.5 1131.46,1207.5 1132.04,1207.5 1132.63,1207.5 1133.21,1207.5 1133.8,1207.5 1134.39,1207.5 1134.97,1207.5 1135.56,1207.5 1136.15,1207.5 1136.73,1207.5 1137.32,1207.5 1137.91,1207.5 1138.49,1207.5 1139.08,1207.5 1139.67,1207.5 1140.25,1207.5 1140.84,1207.5 1141.42,1207.5 1142.01,1207.5 1142.6,1207.5 1143.18,1207.5 1143.77,1207.5 1144.36,1207.5 1144.94,1207.5 1145.53,1207.5 1146.12,1207.5 1146.7,1207.5 1147.29,1207.5 1147.88,1207.5 1148.46,1207.5 1149.05,1207.5 1149.63,1207.5 1150.22,1207.5 1150.81,1207.5 1151.39,1207.5 1151.98,1207.5 1152.57,1207.5 1153.15,1207.5 1153.74,1207.5 1154.33,1207.5 1154.91,1207.5 1155.5,1207.5 1156.09,1207.5 1156.67,1207.5 1157.26,1207.5 1157.84,1207.5 1158.43,1207.5 1159.02,1207.5 1159.6,1207.5 1160.19,1207.5 1160.78,1207.5 1161.36,1207.5 1161.95,1207.5 1162.54,1207.5 1163.12,1207.5 1163.71,1207.5 1164.29,1207.5 1164.88,1207.5 1165.47,1207.5 1166.05,1207.5 1166.64,1207.5 1167.23,1207.5 1167.81,1207.5 1168.4,1207.5 1168.99,1207.5 1169.57,1207.5 1170.16,1207.5 1170.75,1207.5 1171.33,1207.5 1171.92,1207.5 1172.5,1207.5 1173.09,1207.5 1173.68,1207.5 1174.26,1207.5 1174.85,1207.5 1175.44,1207.5 1176.02,1207.5 1176.61,1207.5 1177.2,1207.5 1177.78,1207.5 1178.37,1207.5 1178.96,1207.5 1179.54,1207.5 1180.13,1207.5 1180.71,1207.5 1181.3,1207.5 1181.89,1207.5 1182.47,1207.5 1183.06,1207.5 1183.65,1207.5 1184.23,1207.5 1184.82,1207.5 1185.41,1207.5 1185.99,1207.5 1186.58,1207.5 1187.16,1207.5 1187.75,1207.5 1188.34,1207.5 1188.92,1207.5 1189.51,1207.5 1190.1,1207.5 1190.68,1207.5 1191.27,1207.5 1191.86,1207.5 1192.44,1207.5 1193.03,1207.5 1193.62,1207.5 1194.2,1207.5 1194.79,1207.5 1195.37,1207.5 1195.96,1207.5 1196.55,1207.5 1197.13,1207.5 1197.72,1207.5 1198.31,1207.5 1198.89,1207.5 1199.48,1207.5 1200.07,1207.5 1200.65,1207.5 1201.24,1207.5 1201.83,1207.5 1202.41,1207.5 1203,1207.5 1203.58,1207.5 1204.17,1207.5 1204.76,1207.5 1205.34,1207.5 1205.93,1207.5 1206.52,1207.5 1207.1,1207.5 1207.69,1207.5 1208.28,1207.5 1208.86,1207.5 1209.45,1207.5 1210.03,1207.5 1210.62,1207.5 1211.21,1207.5 1211.79,1207.5 1212.38,1207.5 1212.97,1207.5 1213.55,1207.5 1214.14,1207.5 1214.73,1207.5 1215.31,1207.5 1215.9,1207.5 1216.49,1207.5 1217.07,1207.5 1217.66,1207.5 1218.24,1207.5 1218.83,1207.5 1219.42,1207.5 1220,1207.5 1220.59,1207.5 1221.18,1207.5 1221.76,1207.5 1222.35,1207.5 1222.94,1207.5 1223.52,1207.5 1224.11,1207.5 1224.7,1207.5 1225.28,1207.5 1225.87,1207.5 1226.45,1207.5 1227.04,1207.5 1227.63,1207.5 1228.21,1207.5 1228.8,1207.5 1229.39,1207.5 1229.97,1207.5 1230.56,1207.5 1231.15,1207.5 1231.73,1207.5 1232.32,1207.5 1232.91,1207.5 1233.49,1207.5 1234.08,1207.5 1234.66,1207.5 1235.25,1207.5 1235.84,1207.5 1236.42,1207.5 1237.01,1207.5 1237.6,1207.5 1238.18,1207.5 1238.77,1207.5 1239.36,1207.5 1239.94,1207.5 1240.53,1207.5 1241.11,1207.5 1241.7,1207.5 1242.29,1207.5 1242.87,1207.5 1243.46,1207.5 1244.05,1207.5 1244.63,1207.5 1245.22,1207.5 1245.81,1207.5 1246.39,1207.5 1246.98,1207.5 1247.57,1207.5 1248.15,1207.5 1248.74,1207.5 1249.32,1207.5 1249.91,1207.5 1250.5,1207.5 1251.08,1207.5 1251.67,1207.5 1252.26,1207.5 1252.84,1207.5 1253.43,1207.5 1254.02,1207.5 1254.6,1207.5 1255.19,1207.5 1255.78,1207.5 1256.36,1207.5 1256.95,1207.5 1257.53,1207.5 1258.12,1207.5 1258.71,1207.5 1259.29,1207.5 1259.88,1207.5 1260.47,1207.5 1261.05,1207.5 1261.64,1207.5 1262.23,1207.5 1262.81,1207.5 1263.4,1207.5 1263.98,1207.5 1264.57,1207.5 1265.16,1207.5 1265.74,1207.5 1266.33,1207.5 1266.92,1207.5 1267.5,1207.5 1268.09,1207.5 1268.68,1207.5 1269.26,1207.5 1269.85,1207.5 1270.44,1207.5 1271.02,1207.5 1271.61,1207.5 1272.19,1207.5 1272.78,1207.5 1273.37,1207.5 1273.95,1207.5 1274.54,1207.5 1275.13,1207.5 1275.71,1207.5 1276.3,1207.5 1276.89,1207.5 1277.47,1207.5 1278.06,1207.5 1278.65,1207.5 1279.23,1207.5 1279.82,1207.5 1280.4,1207.5 1280.99,1207.5 1281.58,1207.5 1282.16,1207.5 1282.75,1207.5 1283.34,1207.5 1283.92,1207.5 1284.51,1207.5 1285.1,1207.5 1285.68,1207.5 1286.27,1207.5 1286.86,1207.5 1287.44,1207.5 1288.03,1207.5 1288.61,1207.5 1289.2,1207.5 1289.79,1207.5 1290.37,1207.5 1290.96,1207.5 1291.55,1207.5 1292.13,1207.5 1292.72,1207.5 1293.31,1207.5 1293.89,1207.5 1294.48,1207.5 1295.06,1207.5 1295.65,1207.5 1296.24,1207.5 1296.82,1207.5 1297.41,1207.5 1298,1207.5 1298.58,1207.5 1299.17,1207.5 1299.76,1207.5 1300.34,1207.5 1300.93,1207.5 1301.52,1207.5 1302.1,1207.5 1302.69,1207.5 1303.27,1207.5 1303.86,1207.5 1304.45,1207.5 1305.03,1207.5 1305.62,1207.5 1306.21,1207.5 1306.79,1207.5 1307.38,1207.5 1307.97,1207.5 1308.55,1207.5 1309.14,1207.5 1309.73,1207.5 1310.31,1207.5 1310.9,1207.5 1311.48,1207.5 1312.07,1207.5 1312.66,1207.5 1313.24,1207.5 1313.83,1207.5 1314.42,1207.5 1315,1207.5 1315.59,1207.5 1316.18,1207.5 1316.76,1207.5 1317.35,1207.5 1317.93,1207.5 1318.52,1207.5 1319.11,1207.5 1319.69,1207.5 1320.28,1207.5 1320.87,1207.5 1321.45,1207.5 1322.04,1207.5 1322.63,1207.5 1323.21,1207.5 1323.8,1207.5 1324.39,1207.5 1324.97,1207.5 1325.56,1207.5 1326.14,1207.5 1326.73,1207.5 1327.32,1207.5 1327.9,1207.5 1328.49,1207.5 1329.08,1207.5 1329.66,1207.5 1330.25,1207.5 1330.84,1207.5 1331.42,1207.5 1332.01,1207.5 1332.6,1207.5 1333.18,1207.5 1333.77,1207.5 1334.35,1207.5 1334.94,1207.5 1335.53,1207.5 1336.11,1207.5 1336.7,1207.5 1337.29,1207.5 1337.87,1207.5 1338.46,1207.5 1339.05,1207.5 1339.63,1207.5 1340.22,1207.5 1340.8,1207.5 1341.39,1207.5 1341.98,1207.5 1342.56,1207.5 1343.15,1207.5 1343.74,1207.5 1344.32,1207.5 1344.91,1207.5 1345.5,1207.5 1346.08,1207.5 1346.67,1207.5 1347.26,1207.5 1347.84,1207.5 1348.43,1207.5 1349.01,1207.5 1349.6,1207.5 1350.19,1207.5 1350.77,1207.5 1351.36,1207.5 1351.95,1207.5 1352.53,1207.5 1353.12,1207.5 1353.71,1207.5 1354.29,1207.5 1354.88,1207.5 1355.47,1207.5 1356.05,1207.5 1356.64,1207.5 1357.22,1207.5 1357.81,1207.5 1358.4,1207.5 1358.98,1207.5 1359.57,1207.5 1360.16,1207.5 1360.74,1207.5 1361.33,1207.5 1361.92,1207.5 1362.5,1207.5 1363.09,1207.5 1363.68,1207.5 1364.26,1207.5 1364.85,1207.5 1365.43,1207.5 1366.02,1207.5 1366.61,1207.5 1367.19,1207.5 1367.78,1207.5 1368.37,1207.5 1368.95,1207.5 1369.54,1207.5 1370.13,1207.5 1370.71,1207.5 1371.3,1207.5 1371.88,1207.5 1372.47,1207.5 1373.06,1207.5 1373.64,1207.5 1374.23,1207.5 1374.82,1207.5 1375.4,1207.5 1375.99,1207.5 1376.58,1207.5 1377.16,1207.5 1377.75,1207.5 1378.34,1207.5 1378.92,1207.5 1379.51,1207.5 1380.09,1207.5 1380.68,1207.5 1381.27,1207.5 1381.85,1207.5 1382.44,1207.5 1383.03,1207.5 1383.61,1207.5 1384.2,1207.5 1384.79,1207.5 1385.37,1207.5 1385.96,1207.5 1386.55,1207.5 1387.13,1207.5 1387.72,1207.5 1388.3,1207.5 1388.89,1207.5 1389.48,1207.5 1390.06,1207.5 1390.65,1207.5 1391.24,1207.5 1391.82,1207.5 1392.41,1207.5 1393,1207.5 1393.58,1207.5 1394.17,1207.5 1394.75,1207.5 1395.34,1207.5 1395.93,1207.5 1396.51,1207.5 1397.1,1207.5 1397.69,1207.5 1398.27,1207.5 1398.86,1207.5 1399.45,1207.5 1400.03,1207.5 1400.62,1207.5 1401.21,1207.5 1401.79,1207.5 1402.38,1207.5 1402.96,1207.5 1403.55,1207.5 1404.14,1207.5 1404.72,1207.5 1405.31,1207.5 1405.9,1207.5 1406.48,1207.5 1407.07,1207.5 1407.66,1207.5 1408.24,1207.5 1408.83,1207.5 1409.42,1207.5 1410,1207.5 1410.59,1207.5 1411.17,1207.5 1411.76,1207.5 1412.35,1207.5 1412.93,1207.5 1413.52,1207.5 1414.11,1207.5 1414.69,1207.5 1415.28,1207.5 1415.87,1207.5 1416.45,1207.5 1417.04,1207.5 1417.63,1207.5 1418.21,1207.5 1418.8,1207.5 1419.38,1207.5 1419.97,1207.5 1420.56,1207.5 1421.14,1207.5 1421.73,1207.5 1422.32,1207.5 1422.9,1207.5 1423.49,1207.5 1424.08,1207.5 1424.66,1207.5 1425.25,1207.5 1425.83,1207.5 1426.42,1207.5 1427.01,1207.5 1427.59,1207.5 1428.18,1207.5 1428.77,1207.5 1429.35,1207.5 1429.94,1207.5 1430.53,1207.5 1431.11,1207.5 1431.7,1207.5 1432.29,1207.5 1432.87,1207.5 1433.46,1207.5 1434.04,1207.5 1434.63,1207.5 1435.22,1207.5 1435.8,1207.5 1436.39,1207.5 1436.98,1207.5 1437.56,1207.5 1438.15,1207.5 1438.74,1207.5 1439.32,1207.5 1439.91,1207.5 1440.5,1207.5 1441.08,1207.5 1441.67,1207.5 1442.25,1207.5 1442.84,1207.5 1443.43,1207.5 1444.01,1207.5 1444.6,1207.5 1445.19,1207.5 1445.77,1207.5 1446.36,1207.5 1446.95,1207.5 1447.53,1207.5 1448.12,1207.5 1448.7,1207.5 1449.29,1207.5 1449.88,1207.5 1450.46,1207.5 1451.05,1207.5 1451.64,1207.5 1452.22,1207.5 1452.81,1207.5 1453.4,1207.5 1453.98,1207.5 1454.57,1207.5 1455.16,1207.5 1455.74,1207.5 1456.33,1207.5 1456.91,1207.5 1457.5,1207.5 1458.09,1207.5 1458.67,1207.5 1459.26,1207.5 1459.85,1207.5 1460.43,1207.5 1461.02,1207.5 1461.61,1207.5 1462.19,1207.5 1462.78,1207.5 1463.37,1207.5 1463.95,1207.5 1464.54,1207.5 1465.12,1207.5 1465.71,1207.5 1466.3,1207.5 1466.88,1207.5 1467.47,1207.5 1468.06,1207.5 1468.64,1207.5 1469.23,1207.5 1469.82,1207.5 1470.4,1207.5 1470.99,1207.5 1471.57,1207.5 1472.16,1207.5 1472.75,1207.5 1473.33,1207.5 1473.92,1207.5 1474.51,1207.5 1475.09,1207.5 1475.68,1207.5 1476.27,1207.5 1476.85,1207.5 1477.44,1207.5 1478.03,1207.5 1478.61,1207.5 1479.2,1207.5 1479.78,1207.5 1480.37,1207.5 1480.96,1207.5 1481.54,1207.5 1482.13,1207.5 1482.72,1207.5 1483.3,1207.5 1483.89,1207.5 1484.48,1207.5 1485.06,1207.5 1485.65,1207.5 1486.24,1207.5 1486.82,1207.5 1487.41,1207.5 1487.99,1207.5 1488.58,1207.5 1489.17,1207.5 1489.75,1207.5 1490.34,1207.5 1490.93,1207.5 1491.51,1207.5 1492.1,1207.5 1492.69,1207.5 1493.27,1207.5 1493.86,1207.5 1494.45,1207.5 1495.03,1207.5 1495.62,1207.5 1496.2,1207.5 1496.79,1207.5 1497.38,1207.5 1497.96,1207.5 1498.55,1207.5 1499.14,1207.5 1499.72,1207.5 1500.31,1207.5 1500.9,1207.5 1501.48,1207.5 1502.07,1207.5 1502.65,1207.5 1503.24,1207.5 1503.83,1207.5 1504.41,1207.5 1505,1207.5 1505.59,1207.5 1506.17,1207.5 1506.76,1207.5 1507.35,1207.5 1507.93,1207.5 1508.52,1207.5 1509.11,1207.5 1509.69,1207.5 1510.28,1207.5 1510.86,1207.5 1511.45,1207.5 1512.04,1207.5 1512.62,1207.5 1513.21,1207.5 1513.8,1207.5 1514.38,1207.5 1514.97,1207.5 1515.56,1207.5 1516.14,1207.5 1516.73,1207.5 1517.32,1207.5 1517.9,1207.5 1518.49,1207.5 1519.07,1207.5 1519.66,1207.5 1520.25,1207.5 1520.83,1207.5 1521.42,1207.5 1522.01,1207.5 1522.59,1207.5 1523.18,1207.5 1523.77,1207.5 1524.35,1207.5 1524.94,1207.5 1525.52,1207.5 1526.11,1207.5 1526.7,1207.5 1527.28,1207.5 1527.87,1207.5 1528.46,1207.5 1529.04,1207.5 1529.63,1207.5 1530.22,1207.5 1530.8,1207.5 1531.39,1207.5 1531.98,1207.5 1532.56,1207.5 1533.15,1207.5 1533.73,1207.5 1534.32,1207.5 1534.91,1207.5 1535.49,1207.5 1536.08,1207.5 1536.67,1207.5 1537.25,1207.5 1537.84,1207.5 1538.43,1207.5 1539.01,1207.5 1539.6,1207.5 1540.19,1207.5 1540.77,1207.5 1541.36,1207.5 1541.94,1207.5 1542.53,1207.5 1543.12,1207.5 1543.7,1207.5 1544.29,1207.5 1544.88,1207.5 1545.46,1207.5 1546.05,1207.5 1546.64,1207.5 1547.22,1207.5 1547.81,1207.5 1548.4,1207.5 1548.98,1207.5 1549.57,1207.5 1550.15,1207.5 1550.74,1207.5 1551.33,1207.5 1551.91,1207.5 1552.5,1207.5 1553.09,1207.5 1553.67,1207.5 1554.26,1207.5 1554.85,1207.5 1555.43,1207.5 1556.02,1207.5 1556.6,1207.5 1557.19,1207.5 1557.78,1207.5 1558.36,1207.5 1558.95,1207.5 1559.54,1207.5 1560.12,1207.5 1560.71,1207.5 1561.3,1207.5 1561.88,1207.5 1562.47,1207.5 1563.06,1207.5 1563.64,1207.5 1564.23,1207.5 1564.81,1207.5 1565.4,1207.5 1565.99,1207.5 1566.57,1207.5 1567.16,1207.5 1567.75,1207.5 1568.33,1207.5 1568.92,1207.5 1569.51,1207.5 1570.09,1207.5 1570.68,1207.5 1571.27,1207.5 1571.85,1207.5 1572.44,1207.5 1573.02,1207.5 1573.61,1207.5 1574.2,1207.5 1574.78,1207.5 1575.37,1207.5 1575.96,1207.5 1576.54,1207.5 1577.13,1207.5 1577.72,1207.5 1578.3,1207.5 1578.89,1207.5 1579.47,1207.5 1580.06,1207.5 1580.65,1207.5 1581.23,1207.5 1581.82,1207.5 1582.41,1207.5 1582.99,1207.5 1583.58,1207.5 1584.17,1207.5 1584.75,1207.5 1585.34,1207.5 1585.93,1207.5 1586.51,1207.5 1587.1,1207.5 1587.68,1207.5 1588.27,1207.5 1588.86,1207.5 1589.44,1207.5 1590.03,1207.5 1590.62,1207.5 1591.2,1207.5 1591.79,1207.5 1592.38,1207.5 1592.96,1207.5 1593.55,1207.5 1594.14,1207.5 1594.72,1207.5 1595.31,1207.5 1595.89,1207.5 1596.48,1207.5 1597.07,1207.5 1597.65,1207.5 1598.24,1207.5 1598.83,1207.5 1599.41,1207.5 1600,1207.5 1600.59,1207.5 1601.17,1207.5 1601.76,1207.5 1602.34,1207.5 1602.93,1207.5 1603.52,1207.5 1604.1,1207.5 1604.69,1207.5 1605.28,1207.5 1605.86,1207.5 1606.45,1207.5 1607.04,1207.5 1607.62,1207.5 1608.21,1207.5 1608.8,1207.5 1609.38,1207.5 1609.97,1207.5 1610.55,1207.5 1611.14,1207.5 1611.73,1207.5 1612.31,1207.5 1612.9,1207.5 1613.49,1207.5 1614.07,1207.5 1614.66,1207.5 1615.25,1207.5 1615.83,1207.5 1616.42,1207.5 1617.01,1207.5 1617.59,1207.5 1618.18,1207.5 1618.76,1207.5 1619.35,1207.5 1619.94,1207.5 1620.52,1207.5 1621.11,1207.5 1621.7,1207.5 1622.28,1207.5 1622.87,1207.5 1623.46,1207.5 1624.04,1207.5 1624.63,1207.5 1625.22,1207.5 1625.8,1207.5 1626.39,1207.5 1626.97,1207.5 1627.56,1207.5 1628.15,1207.5 1628.73,1207.5 1629.32,1207.5 1629.91,1207.5 1630.49,1207.5 1631.08,1207.5 1631.67,1207.5 1632.25,1207.5 1632.84,1207.5 1633.42,1207.5 1634.01,1207.5 1634.6,1207.5 1635.18,1207.5 1635.77,1207.5 1636.36,1207.5 1636.94,1207.5 1637.53,1207.5 1638.12,1207.5 1638.7,1207.5 1639.29,1207.5 1639.88,1207.5 1640.46,1207.5 1641.05,1207.5 1641.63,1207.5 1642.22,1207.5 1642.81,1207.5 1643.39,1207.5 1643.98,1207.5 1644.57,1207.5 1645.15,1207.5 1645.74,1207.5 1646.33,1207.5 1646.91,1207.5 1647.5,1207.5 1648.09,1207.5 1648.67,1207.5 1649.26,1207.5 1649.84,1207.5 1650.43,1207.5 1651.02,1207.5 1651.6,1207.5 1652.19,1207.5 1652.78,1207.5 1653.36,1207.5 1653.95,1207.5 1654.54,1207.5 1655.12,1207.5 1655.71,1207.5 1656.29,1207.5 1656.88,1207.5 1657.47,1207.5 1658.05,1207.5 1658.64,1207.5 1659.23,1207.5 1659.81,1207.5 1660.4,1207.5 1660.99,1207.5 1661.57,1207.5 1662.16,1207.5 1662.75,1207.5 1663.33,1207.5 1663.92,1207.5 1664.5,1207.5 1665.09,1207.5 1665.68,1207.5 1666.26,1207.5 1666.85,1207.5 1667.44,1207.5 1668.02,1207.5 1668.61,1207.5 1669.2,1207.5 1669.78,1207.5 1670.37,1207.5 1670.96,1207.5 1671.54,1207.5 1672.13,1207.5 1672.71,1207.5 1673.3,1207.5 1673.89,1207.5 1674.47,1207.5 1675.06,1207.5 1675.65,1207.5 1676.23,1207.5 1676.82,1207.5 1677.41,1207.5 1677.99,1207.5 1678.58,1207.5 1679.17,1207.5 1679.75,1207.5 1680.34,1207.5 1680.92,1207.5 1681.51,1207.5 1682.1,1207.5 1682.68,1207.5 1683.27,1207.5 1683.86,1207.5 1684.44,1207.5 1685.03,1207.5 1685.62,1207.5 1686.2,1207.5 1686.79,1207.5 1687.37,1207.5 1687.96,1207.5 1688.55,1207.5 1689.13,1207.5 1689.72,1207.5 1690.31,1207.5 1690.89,1207.5 1691.48,1207.5 1692.07,1207.5 1692.65,1207.5 1693.24,1207.5 1693.83,1207.5 1694.41,1207.5 1695,1207.5 1695.58,1207.5 1696.17,1207.5 1696.76,1207.5 1697.34,1207.5 1697.93,1207.5 1698.52,1207.5 1699.1,1207.5 1699.69,1207.5 1700.28,1207.5 1700.86,1207.5 1701.45,1207.5 1702.04,1207.5 1702.62,1207.5 1703.21,1207.5 1703.79,1207.5 1704.38,1207.5 1704.97,1207.5 1705.55,1207.5 1706.14,1207.5 1706.73,1207.5 1707.31,1207.5 1707.9,1207.5 1708.49,1207.5 1709.07,1207.5 1709.66,1207.5 1710.24,1207.5 1710.83,1207.5 1711.42,1207.5 1712,1207.5 1712.59,1207.5 1713.18,1207.5 1713.76,1207.5 1714.35,1207.5 1714.94,1207.5 1715.52,1207.5 1716.11,1207.5 1716.7,1207.5 1717.28,1207.5 1717.87,1207.5 1718.45,1207.5 1719.04,1207.5 1719.63,1207.5 1720.21,1207.5 1720.8,1207.5 1721.39,1207.5 1721.97,1207.5 1722.56,1207.5 1723.15,1207.5 1723.73,1207.5 1724.32,1207.5 1724.91,1207.5 1725.49,1207.5 1726.08,1207.5 1726.66,1207.5 1727.25,1207.5 1727.84,1207.5 1728.42,1207.5 1729.01,1207.5 1729.6,1207.5 1730.18,1207.5 1730.77,1207.5 1731.36,1207.5 1731.94,1207.5 1732.53,1207.5 1733.11,1207.5 1733.7,1207.5 1734.29,1207.5 1734.87,1207.5 1735.46,1207.5 1736.05,1207.5 1736.63,1207.5 1737.22,1207.5 1737.81,1207.5 1738.39,1207.5 1738.98,1207.5 1739.57,1207.5 1740.15,1207.5 1740.74,1207.5 1741.32,1207.5 1741.91,1207.5 1742.5,1207.5 1743.08,1207.5 1743.67,1207.5 1744.26,1207.5 1744.84,1207.5 1745.43,1207.5 1746.02,1207.5 1746.6,1207.5 1747.19,1207.5 1747.78,1207.5 1748.36,1207.5 1748.95,1207.5 1749.53,1207.5 1750.12,1207.5 1750.71,1207.5 1751.29,1207.5 1751.88,1207.5 1752.47,1207.5 1753.05,1207.5 1753.64,1207.5 1754.23,1207.5 1754.81,1207.5 1755.4,1207.5 1755.99,1207.5 1756.57,1207.5 1757.16,1207.5 1757.74,1207.5 1758.33,1207.5 1758.92,1207.5 1759.5,1207.5 1760.09,1207.5 1760.68,1207.5 1761.26,1207.5 1761.85,1207.5 1762.44,1207.5 1763.02,1207.5 1763.61,1207.5 1764.19,1207.5 1764.78,1207.5 1765.37,1207.5 1765.95,1207.5 1766.54,1207.5 1767.13,1207.5 1767.71,1207.5 1768.3,1207.5 1768.89,1207.5 1769.47,1207.5 1770.06,1207.5 1770.65,1207.5 1771.23,1207.5 1771.82,1207.5 1772.4,1207.5 1772.99,1207.5 1773.58,1207.5 1774.16,1207.5 1774.75,1207.5 1775.34,1207.5 1775.92,1207.5 1776.51,1207.5 1777.1,1207.5 1777.68,1207.5 1778.27,1207.5 1778.86,1207.5 1779.44,1207.5 1780.03,1207.5 1780.61,1207.5 1781.2,1207.5 1781.79,1207.5 1782.37,1207.5 1782.96,1207.5 1783.55,1207.5 1784.13,1207.5 1784.72,1207.5 1785.31,1207.5 1785.89,1207.5 1786.48,1207.5 1787.06,1207.5 1787.65,1207.5 1788.24,1207.5 1788.82,1207.5 1789.41,1207.5 1790,1207.5 1790.58,1207.5 1791.17,1207.5 1791.76,1207.5 1792.34,1207.5 1792.93,1207.5 1793.52,1207.5 1794.1,1207.5 1794.69,1207.5 1795.27,1207.5 1795.86,1207.5 1796.45,1207.5 1797.03,1207.5 1797.62,1207.5 1798.21,1207.5 1798.79,1207.5 1799.38,1207.5 1799.97,1207.5 1800.55,1207.5 1801.14,1207.5 1801.73,1207.5 1802.31,1207.5 1802.9,1207.5 1803.48,1207.5 1804.07,1207.5 1804.66,1207.5 1805.24,1207.5 1805.83,1207.5 1806.42,1207.5 1807,1207.5 1807.59,1207.5 1808.18,1207.5 1808.76,1207.5 1809.35,1207.5 1809.94,1207.5 1810.52,1207.5 1811.11,1207.5 1811.69,1207.5 1812.28,1207.5 1812.87,1207.5 1813.45,1207.5 1814.04,1207.5 1814.63,1207.5 1815.21,1207.5 1815.8,1207.5 1816.39,1207.5 1816.97,1207.5 1817.56,1207.5 1818.14,1207.5 1818.73,1207.5 1819.32,1207.5 1819.9,1207.5 1820.49,1207.5 1821.08,1207.5 1821.66,1207.5 1822.25,1207.5 1822.84,1207.5 1823.42,1207.5 1824.01,1207.5 1824.6,1207.5 1825.18,1207.5 1825.77,1207.5 1826.35,1207.5 1826.94,1207.5 1827.53,1207.5 1828.11,1207.5 1828.7,1207.5 1829.29,1207.5 1829.87,1207.5 1830.46,1207.5 1831.05,1207.5 1831.63,1207.5 1832.22,1207.5 1832.81,1207.5 1833.39,1207.5 1833.98,1207.5 1834.56,1207.5 1835.15,1207.5 1835.74,1207.5 1836.32,1207.5 1836.91,1207.5 1837.5,1207.5 1838.08,1207.5 1838.67,1207.5 1839.26,1207.5 1839.84,1207.5 1840.43,1207.5 1841.01,1207.5 1841.6,1207.5 1842.19,1207.5 1842.77,1207.5 1843.36,1207.5 1843.95,1207.5 1844.53,1207.5 1845.12,1207.5 1845.71,1207.5 1846.29,1207.5 1846.88,1207.5 1847.47,1207.5 1848.05,1207.5 1848.64,1207.5 1849.22,1207.5 1849.81,1207.5 1850.4,1207.5 1850.98,1207.5 1851.57,1207.5 1852.16,1207.5 1852.74,1207.5 1853.33,1207.5 1853.92,1207.5 1854.5,1207.5 1855.09,1207.5 1855.68,1207.5 1856.26,1207.5 1856.85,1207.5 1857.43,1207.5 1858.02,1207.5 1858.61,1207.5 1859.19,1207.5 1859.78,1207.5 1860.37,1207.5 1860.95,1207.5 1861.54,1207.5 1862.13,1207.5 1862.71,1207.5 1863.3,1207.5 1863.88,1207.5 1864.47,1207.5 1865.06,1207.5 1865.64,1207.5 1866.23,1207.5 1866.82,1207.5 1867.4,1207.5 1867.99,1207.5 1868.58,1207.5 1869.16,1207.5 1869.75,1207.5 1870.34,1207.5 1870.92,1207.5 1871.51,1207.5 1872.09,1207.5 1872.68,1207.5 1873.27,1207.5 1873.85,1207.5 1874.44,1207.5 1875.03,1207.5 1875.61,1207.5 1876.2,1207.5 1876.79,1207.5 1877.37,1207.5 1877.96,1207.5 1878.55,1207.5 1879.13,1207.5 1879.72,1207.5 1880.3,1207.5 1880.89,1207.5 1881.48,1207.5 1882.06,1207.5 1882.65,1207.5 1883.24,1207.5 1883.82,1207.5 1884.41,1207.5 1885,1207.5 1885.58,1207.5 1886.17,1207.5 1886.76,1207.5 1887.34,1207.5 1887.93,1207.5 1888.51,1207.5 1889.1,1207.5 1889.69,1207.5 1890.27,1207.5 1890.86,1207.5 1891.45,1207.5 1892.03,1207.5 1892.62,1207.5 1893.21,1207.5 1893.79,1207.5 1894.38,1207.5 1894.96,1207.5 1895.55,1207.5 1896.14,1207.5 1896.72,1207.5 1897.31,1207.5 1897.9,1207.5 1898.48,1207.5 1899.07,1207.5 1899.66,1207.5 1900.24,1207.5 1900.83,1207.5 1901.42,1207.5 1902,1207.5 1902.59,1207.5 1903.17,1207.5 1903.76,1207.5 1904.35,1207.5 1904.93,1207.5 1905.52,1207.5 1906.11,1207.5 1906.69,1207.5 1907.28,1207.5 1907.87,1207.5 1908.45,1207.5 1909.04,1207.5 1909.63,1207.5 1910.21,1207.5 1910.8,1207.5 1911.38,1207.5 1911.97,1207.5 1912.56,1207.5 1913.14,1207.5 1913.73,1207.5 1914.32,1207.5 1914.9,1207.5 1915.49,1207.5 1916.08,1207.5 1916.66,1207.5 1917.25,1207.5 1917.83,1207.5 1918.42,1207.5 1919.01,1207.5 1919.59,1207.5 1920.18,1207.5 1920.77,1207.5 1921.35,1207.5 1921.94,1207.5 1922.53,1207.5 1923.11,1207.5 1923.7,1207.5 1924.29,1207.5 1924.87,1207.5 1925.46,1207.5 1926.04,1207.5 1926.63,1207.5 1927.22,1207.5 1927.8,1207.5 1928.39,1207.5 1928.98,1207.5 1929.56,1207.5 1930.15,1207.5 1930.74,1207.5 1931.32,1207.5 1931.91,1207.5 1932.5,1207.5 1933.08,1207.5 1933.67,1207.5 1934.25,1207.5 1934.84,1207.5 1935.43,1207.5 1936.01,1207.5 1936.6,1207.5 1937.19,1207.5 1937.77,1207.5 1938.36,1207.5 1938.95,1207.5 1939.53,1207.5 1940.12,1207.5 1940.71,1207.5 1941.29,1207.5 1941.88,1207.5 1942.46,1207.5 1943.05,1207.5 1943.64,1207.5 1944.22,1207.5 1944.81,1207.5 1945.4,1207.5 1945.98,1207.5 1946.57,1207.5 1947.16,1207.5 1947.74,1207.5 1948.33,1207.5 1948.91,1207.5 1949.5,1207.5 1950.09,1207.5 1950.67,1207.5 1951.26,1207.5 1951.85,1207.5 1952.43,1207.5 1953.02,1207.5 1953.61,1207.5 1954.19,1207.5 1954.78,1207.5 1955.37,1207.5 1955.95,1207.5 1956.54,1207.5 1957.12,1207.5 1957.71,1207.5 1958.3,1207.5 1958.88,1207.5 1959.47,1207.5 1960.06,1207.5 1960.64,1207.5 1961.23,1207.5 1961.82,1207.5 1962.4,1207.5 1962.99,1207.5 1963.58,1207.5 1964.16,1207.5 1964.75,1207.5 1965.33,1207.5 1965.92,1207.5 1966.51,1207.5 1967.09,1207.5 1967.68,1207.5 1968.27,1207.5 1968.85,1207.5 1969.44,1207.5 1970.03,1207.5 1970.61,1207.5 1971.2,1207.5 1971.78,1207.5 1972.37,1207.5 1972.96,1207.5 1973.54,1207.5 1974.13,1207.5 1974.72,1207.5 1975.3,1207.5 1975.89,1207.5 1976.48,1207.5 1977.06,1207.5 1977.65,1207.5 1978.24,1207.5 1978.82,1207.5 1979.41,1207.5 1979.99,1207.5 1980.58,1207.5 1981.17,1207.5 1981.75,1207.5 1982.34,1207.5 1982.93,1207.5 1983.51,1207.5 1984.1,1207.5 1984.69,1207.5 1985.27,1207.5 1985.86,1207.5 1986.45,1207.5 1987.03,1207.5 1987.62,1207.5 1988.2,1207.5 1988.79,1207.5 1989.38,1207.5 1989.96,1207.5 1990.55,1207.5 1991.14,1207.5 1991.72,1207.5 1992.31,1207.5 1992.9,1207.5 1993.48,1207.5 1994.07,1207.5 1994.65,1207.5 1995.24,1207.5 1995.83,1207.5 1996.41,1207.5 1997,1207.5 1997.59,1207.5 1998.17,1207.5 1998.76,1207.5 1999.35,1207.5 1999.93,1207.5 2000.52,1207.5 2001.11,1207.5 2001.69,1207.5 2002.28,1207.5 2002.86,1207.5 2003.45,1207.5 2004.04,1207.5 2004.62,1207.5 2005.21,1207.5 2005.8,1207.5 2006.38,1207.5 2006.97,1207.5 2007.56,1207.5 2008.14,1207.5 2008.73,1207.5 2009.32,1207.5 2009.9,1207.5 2010.49,1207.5 2011.07,1207.5 2011.66,1207.5 2012.25,1207.5 2012.83,1207.5 2013.42,1207.5 2014.01,1207.5 2014.59,1207.5 2015.18,1207.5 2015.77,1207.5 2016.35,1207.5 2016.94,1207.5 2017.53,1207.5 2018.11,1207.5 2018.7,1207.5 2019.28,1207.5 2019.87,1207.5 2020.46,1207.5 2021.04,1207.5 2021.63,1207.5 2022.22,1207.5 2022.8,1207.5 2023.39,1207.5 2023.98,1207.5 2024.56,1207.5 2025.15,1207.5 2025.73,1207.5 2026.32,1207.5 2026.91,1207.5 2027.49,1207.5 2028.08,1207.5 2028.67,1207.5 2029.25,1207.5 2029.84,1207.5 2030.43,1207.5 2031.01,1207.5 2031.6,1207.5 2032.19,1207.5 2032.77,1207.5 2033.36,1207.5 2033.94,1207.5 2034.53,1207.5 2035.12,1207.5 2035.7,1207.5 2036.29,1207.5 2036.88,1207.5 2037.46,1207.5 2038.05,1207.5 2038.64,1207.5 2039.22,1207.5 2039.81,1207.5 2040.4,1207.5 2040.98,1207.5 2041.57,1207.5 2042.15,1207.5 2042.74,1207.5 2043.33,1207.5 2043.91,1207.5 2044.5,1207.5 2045.09,1207.5 2045.67,1207.5 2046.26,1207.5 2046.85,1207.5 2047.43,1207.5 2048.02,1207.5 2048.6,1207.5 2049.19,1207.5 2049.78,1207.5 2050.36,1207.5 2050.95,1207.5 2051.54,1207.5 2052.12,1207.5 2052.71,1207.5 2053.3,1207.5 2053.88,1207.5 2054.47,1207.5 2055.06,1207.5 2055.64,1207.5 2056.23,1207.5 2056.81,1207.5 2057.4,1207.5 2057.99,1207.5 2058.57,1207.5 2059.16,1207.5 2059.75,1207.5 2060.33,1207.5 2060.92,1207.5 2061.51,1207.5 2062.09,1207.5 2062.68,1207.5 2063.27,1207.5 2063.85,1207.5 2064.44,1207.5 2065.02,1207.5 2065.61,1207.5 2066.2,1207.5 2066.78,1207.5 2067.37,1207.5 2067.96,1207.5 2068.54,1207.5 2069.13,1207.5 2069.72,1207.5 2070.3,1207.5 2070.89,1207.5 2071.48,1207.5 2072.06,1207.5 2072.65,1207.5 2073.23,1207.5 2073.82,1207.5 2074.41,1207.5 2074.99,1207.5 2075.58,1207.5 2076.17,1207.5 2076.75,1207.5 2077.34,1207.5 2077.93,1207.5 2078.51,1207.5 2079.1,1207.5 2079.68,1207.5 2080.27,1207.5 2080.86,1207.5 2081.44,1207.5 2082.03,1207.5 2082.62,1207.5 2083.2,1207.5 2083.79,1207.5 2084.38,1207.5 2084.96,1207.5 2085.55,1207.5 2086.14,1207.5 2086.72,1207.5 2087.31,1207.5 2087.89,1207.5 2088.48,1207.5 2089.07,1207.5 2089.65,1207.5 2090.24,1207.5 2090.83,1207.5 2091.41,1207.5 2092,1207.5 2092.59,1207.5 2093.17,1207.5 2093.76,1207.5 2094.35,1207.5 2094.93,1207.5 2095.52,1207.5 2096.1,1207.5 2096.69,1207.5 2097.28,1207.5 2097.86,1207.5 2098.45,1207.5 2099.04,1207.5 2099.62,1207.5 2100.21,1207.5 2100.8,1207.5 2101.38,1207.5 2101.97,1207.5 2102.55,1207.5 2103.14,1207.5 2103.73,1207.5 2104.31,1207.5 2104.9,1207.5 2105.49,1207.5 2106.07,1207.5 2106.66,1207.5 2107.25,1207.5 2107.83,1207.5 2108.42,1207.5 2109.01,1207.5 2109.59,1207.5 2110.18,1207.5 2110.76,1207.5 2111.35,1207.5 2111.94,1207.5 2112.52,1207.5 2113.11,1207.5 2113.7,1207.5 2114.28,1207.5 2114.87,1207.5 2115.46,1207.5 2116.04,1207.5 2116.63,1207.5 2117.22,1207.5 2117.8,1207.5 2118.39,1207.5 2118.97,1207.5 2119.56,1207.5 2120.15,1207.5 2120.73,1207.5 2121.32,1207.5 2121.91,1207.5 2122.49,1207.5 2123.08,1207.5 2123.67,1207.5 2124.25,1207.5 2124.84,1207.5 2125.42,1207.5 2126.01,1207.5 2126.6,1207.5 2127.18,1207.5 2127.77,1207.5 2128.36,1207.5 2128.94,1207.5 2129.53,1207.5 2130.12,1207.5 2130.7,1207.5 2131.29,1207.5 2131.88,1207.5 2132.46,1207.5 2133.05,1207.5 2133.63,1207.5 2134.22,1207.5 2134.81,1207.5 2135.39,1207.5 2135.98,1207.5 2136.57,1207.5 2137.15,1207.5 2137.74,1207.5 2138.33,1207.5 2138.91,1207.5 2139.5,1207.5 2140.09,1207.5 2140.67,1207.5 2141.26,1207.5 2141.84,1207.5 2142.43,1207.5 2143.02,1207.5 2143.6,1207.5 2144.19,1207.5 2144.78,1207.5 2145.36,1207.5 2145.95,1207.5 2146.54,1207.5 2147.12,1207.5 2147.71,1207.5 2148.3,1207.5 2148.88,1207.5 2149.47,1207.5 2150.05,1207.5 2150.64,1207.5 2151.23,1207.5 2151.81,1207.5 2152.4,1207.5 2152.99,1207.5 2153.57,1207.5 2154.16,1207.5 2154.75,1207.5 2155.33,1207.5 2155.92,1207.5 2156.5,1207.5 2157.09,1207.5 2157.68,1207.5 2158.26,1207.5 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.08,1187.94 1400.45,899.083 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.67 985.439,1187.94 2158.26,1187.94 2158.26,1226.67 985.439,1226.67 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip133\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip133)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2674.62 162.673,-3904.22 163.232,-4961.45 163.792,-5996.81 164.351,-6918.13 164.91,-7715.68 165.469,-8482.73 166.029,-7997.88 166.588,-8716.06 167.147,-9365.48 167.706,-9936.54 168.266,-10462.4 168.825,-10052.9 169.384,-9735.79 169.943,-9469.6 170.503,-9222.59 171.062,-9612.18 171.621,-9403.09 172.18,-9217.86 172.74,-9529.6 173.299,-9791.67 173.858,-9569.64 174.417,-9772.35 174.977,-9580.1 175.536,-9721.42 176.095,-9850.53 176.655,-9644.38 177.214,-9739.07 177.773,-9812.08 178.332,-9863.19 178.892,-9623.49 179.451,-9647.52 180.01,-9645.36 180.569,-9640.59 181.129,-9607.99 181.688,-9369.09 182.247,-9340.11 182.806,-9285.26 183.366,-9224.99 183.925,-8996.34 184.484,-8914.96 185.043,-8687 185.603,-8603.07 186.162,-8260.03 186.721,-7935.78 187.28,-7631.55 187.84,-7461.33 188.399,-7280.82 188.958,-7196.83 189.517,-6919.84 190.077,-6824.66 190.636,-6736.12 191.195,-6633.21 191.754,-6451 192.314,-6187.74 192.873,-6098.61 193.432,-5860.21 193.991,-5631.16 194.551,-5338.21 195.11,-5065.25 195.669,-4981.98 196.228,-4826.76 196.788,-4689.77 197.347,-4547.85 197.906,-4409.94 198.465,-4320.5 199.025,-4230.39 199.584,-4048.96 200.143,-3923.13 200.702,-3661.47 201.262,-3547.02 201.821,-3429.44 202.38,-3201.49 202.939,-3052.42 203.499,-2950.4 204.058,-2849.46 204.617,-2711.75 205.176,-2612.72 205.736,-2511.46 206.295,-2418.75 206.854,-2294.29 207.413,-2174.39 207.973,-2120.36 208.532,-1939.07 209.091,-1824.07 209.65,-1657.18 210.21,-1613.23 210.769,-1537.39 211.328,-1463.84 211.887,-1421.28 212.447,-1323.26 213.006,-1284.56 213.565,-1216.69 214.124,-1150.36 214.684,-1113.04 215.243,-1045.67 215.802,-980.77 216.361,-966.429 216.921,-926.834 217.48,-835.124 218.039,-703.546 218.598,-696.223 219.158,-592.521 219.717,-561.52 220.276,-483.011 220.835,-407.352 221.395,-359.518 221.954,-358.082 222.513,-333.592 223.072,-327.326 223.632,-275.233 224.191,-184.079 224.75,-141.186 225.309,-77.4851 225.869,-37.0098 226.428,22.4248 226.987,82.4355 227.546,98.7479 228.106,133.118 228.665,168.144 229.224,223.841 229.783,316.648 230.343,367.127 230.902,434.081 231.461,462.271 232.02,445.559 232.58,452.588 233.139,498.446 233.698,484.826 234.257,513.367 234.817,519.62 235.376,542.951 235.935,549.544 236.494,538.949 237.054,583.11 237.613,625.941 238.172,631.388 238.731,677.109 239.291,698.671 239.85,697.962 240.409,718.276 240.968,735.867 241.528,737.189 242.087,778.238 242.646,794.913 243.205,812.164 243.765,827.293 244.324,859.39 244.883,854.642 245.442,870.964 246.002,871.823 246.561,867.877 247.12,899.113 247.679,916.291 248.239,910.771 248.798,905.966 249.357,904.118 249.916,937.612 250.476,913.113 251.035,909.024 251.594,921.351 252.153,933.833 252.713,966.657 253.272,1012.52 253.831,1025.25 254.39,982.92 254.95,975.338 255.509,982.965 256.068,992.987 256.627,971.516 257.187,986.093 257.746,1052.49 258.305,1074.92 258.864,1063.33 259.424,1053.44 259.983,1064.59 260.542,1090.19 261.101,1061.57 261.661,1053.11 262.22,1041.98 262.779,1050.33 263.338,1060.98 263.898,1065.72 264.457,1042.02 265.016,1020.57 265.575,1011.02 266.135,985.681 266.694,1000.04 267.253,992.991 267.812,955.497 268.372,970.781 268.931,969.524 269.49,984.289 270.049,995.118 270.609,987.318 271.168,996.072 271.727,993.657 272.286,974.948 272.846,991.634 273.405,1053.14 273.964,1044.63 274.523,971.513 275.083,985.703 275.642,981.952 276.201,995.424 276.76,975.156 277.32,974.584 277.879,973.329 278.438,1005.3 278.997,1016.89 279.557,1011.67 280.116,1022.2 280.675,1013.69 281.234,992.039 281.794,985.614 282.353,997.659 282.912,977.052 283.471,957.518 284.031,955.373 284.59,968.068 285.149,967.901 285.708,964.845 286.268,1011.3 286.827,1002.65 287.386,1013.85 287.945,992.919 288.505,1019.78 289.064,1042.69 289.623,1050.23 290.182,1109.67 290.742,1127.69 291.301,1168.38 291.86,1107.43 292.419,1126.61 292.979,1100.96 293.538,1125.05 294.097,1078.82 294.656,1069.71 295.216,1079.54 295.775,1054.82 296.334,1046.78 296.893,1020.81 297.453,1034.16 298.012,1011.61 298.571,1006.68 299.13,983.92 299.69,1012.9 300.249,1021.6 300.808,1047.4 301.368,1024.35 301.927,1014.64 302.486,989.976 303.045,999.625 303.605,992.348 304.164,1001.5 304.723,1010.28 305.282,1002.57 305.842,979.423 306.401,955.416 306.96,984.499 307.519,996.356 308.079,992.279 308.638,988.859 309.197,1000.27 309.756,991.404 310.316,1002.17 310.875,1047.6 311.434,1088.67 311.993,1095.45 312.553,1087.16 313.112,1110.18 313.671,1112.6 314.23,1098.74 314.79,1054.39 315.349,1011.18 315.908,1001.75 316.467,994.524 317.027,972.433 317.586,948.405 318.145,959.357 318.704,935.278 319.264,948.195 319.823,926.778 320.382,969.985 320.941,963.125 321.501,974.608 322.06,964.421 322.619,990.031 323.178,999.374 323.738,992.068 324.297,969.071 324.856,996.109 325.415,990.099 325.975,980.6 326.534,990.387 327.093,984.559 327.652,992.058 328.212,983.624 328.771,1008.44 329.33,1063.55 329.889,1001.95 330.449,991.843 331.008,999.849 331.567,1008.39 332.126,1019.22 332.686,1026.52 333.245,986.097 333.804,981.862 334.363,954.16 334.923,952.318 335.482,976.911 336.041,966.421 336.6,946.188 337.16,938.043 337.719,900.141 338.278,930.706 338.837,944.541 339.397,956.068 339.956,980.848 340.515,973.794 341.074,948.995 341.634,925.91 342.193,921.131 342.752,916.949 343.311,882.349 343.871,865.268 344.43,879.699 344.989,875.224 345.548,851.938 346.108,817.083 346.667,820.05 347.226,837.037 347.785,838.361 348.345,818.569 348.904,799.436 349.463,848.907 350.022,863.002 350.582,878.654 351.141,861.734 351.7,877.454 352.259,908.137 352.819,922.914 353.378,903.177 353.937,914.135 354.496,895.806 355.056,912.787 355.615,895.14 356.174,876.716 356.733,857.631 357.293,890.503 357.852,886.222 358.411,895.522 358.97,890.509 359.53,887.059 360.089,899.243 360.648,908.755 361.207,916.021 361.767,907.972 362.326,918.452 362.885,911.727 363.444,890.946 364.004,888.757 364.563,884.001 365.122,877.628 365.681,890.156 366.241,857.031 366.8,854.553 367.359,850.994 367.918,848.097 368.478,862.741 369.037,841.208 369.596,839.97 370.155,840.516 370.715,872.513 371.274,887.73 371.833,882.281 372.392,860.496 372.952,824.894 373.511,819.433 374.07,837.972 374.629,883.98 375.189,896.024 375.748,922.615 376.307,950.117 376.866,929.923 377.426,955.989 377.985,931.831 378.544,954.35 379.103,926.525 379.663,881.496 380.222,876.71 380.781,874.124 381.34,885.375 381.9,927.786 382.459,905.306 383.018,916.164 383.577,941.275 384.137,935.993 384.696,911.023 385.255,886.856 385.814,879.551 386.374,858.524 386.933,852.852 387.492,832.516 388.051,826.944 388.611,856.391 389.17,851.369 389.729,849.053 390.288,798.28 390.848,781.131 391.407,797.008 391.966,811.927 392.525,793.555 393.085,813.514 393.644,798.876 394.203,813.629 394.762,809.907 395.322,837.629 395.881,836.144 396.44,853.863 396.999,850.595 397.559,860.376 398.118,884.339 398.677,895.086 399.236,873.462 399.796,853.186 400.355,852.944 400.914,880.53 401.473,843.009 402.033,854.325 402.592,845.628 403.151,807.104 403.71,823.599 404.27,802.772 404.829,786.025 405.388,786.68 405.947,737.289 406.507,739.679 407.066,721.836 407.625,756.941 408.184,723.551 408.744,709.532 409.303,747.248 409.862,715.078 410.421,733.491 410.981,734.678 411.54,722.248 412.099,707.533 412.658,709.865 413.218,777.62 413.777,758.289 414.336,744.232 414.895,746.125 415.455,746.859 416.014,744.989 416.573,683.827 417.132,670.253 417.692,674.359 418.251,678.643 418.81,682.674 419.369,719.541 419.929,722.95 420.488,708.171 421.047,706.869 421.606,711.629 422.166,701.529 422.725,736.215 423.284,752.324 423.843,784.561 424.403,781.97 424.962,794.352 425.521,812.633 426.08,808.194 426.64,792.804 427.199,774.009 427.758,773.798 428.318,757.606 428.877,755.698 429.436,786.166 429.995,798.373 430.555,781.658 431.114,781.621 431.673,762.531 432.232,812.275 432.792,808.155 433.351,805.895 433.91,822.473 434.469,849.08 435.029,828.565 435.588,822.353 436.147,782.488 436.706,761.591 437.266,811.283 437.825,777.279 438.384,756.042 438.943,755.221 439.503,754.873 440.062,741.785 440.621,722.598 441.18,726.128 441.74,757.018 442.299,758.155 442.858,743.085 443.417,743.417 443.977,759.624 444.536,744.568 445.095,746.081 445.654,777.738 446.214,790.335 446.773,788.377 447.332,807.822 447.891,821.614 448.451,782.296 449.01,779.641 449.569,761.779 450.128,759.928 450.688,760.254 451.247,791.108 451.806,803.185 452.365,802.453 452.925,783.373 453.484,800.531 454.043,811.531 454.602,809.769 455.162,786.864 455.721,799.191 456.28,762.03 456.839,760.755 457.399,725.289 457.958,745.062 458.517,762.559 459.076,779.42 459.636,764.8 460.195,764.892 460.754,759.322 461.313,758.518 461.873,763.355 462.432,775.88 462.991,843.296 463.55,886.185 464.11,943.633 464.669,931.899 465.228,906.985 465.787,877.541 466.347,871.646 466.906,863.595 467.465,874.578 468.024,851.154 468.584,844.557 469.143,834.97 469.702,833.767 470.261,843.676 470.821,833.898 471.38,860.003 471.939,837.675 472.498,785.758 473.058,782.797 473.617,780.37 474.176,794.793 474.735,807.496 475.295,819.568 475.854,844.074 476.413,858.196 476.972,821.925 477.532,818.118 478.091,816.682 478.65,776.814 479.209,774.285 479.769,772.041 480.328,784.229 480.887,763.713 481.446,761.283 482.006,760.539 482.565,775.745 483.124,770.542 483.683,735.755 484.243,749.495 484.802,764.524 485.361,729.978 485.92,711.339 486.48,698.363 487.039,700.281 487.598,654.075 488.157,661.038 488.717,664.771 489.276,681.744 489.835,700.511 490.394,716.21 490.954,732.298 491.513,734.575 492.072,704.116 492.631,705.882 493.191,704.822 493.75,722.154 494.309,738.196 494.868,723.912 495.428,755.979 495.987,754.489 496.546,735.655 497.105,819.866 497.665,813.64 498.224,809.338 498.783,805.354 499.342,769.464 499.902,736.252 500.461,719.324 501.02,738.156 501.579,771.507 502.139,733.316 502.698,731.451 503.257,745.484 503.816,729.277 504.376,758.912 504.935,741.596 505.494,788.3 506.053,753.173 506.613,752.036 507.172,749.631 507.731,733.08 508.29,750.814 508.85,766.648 509.409,778.222 509.968,791.126 510.527,804.066 511.087,768.361 511.646,762.469 512.205,761.175 512.764,745.012 513.324,741.476 513.883,742.929 514.442,723.471 515.001,740.216 515.561,753.976 516.12,783.705 516.679,781.674 517.238,778.776 517.798,759.923 518.357,774.752 518.916,741.165 519.475,756.104 520.035,753.971 520.594,752.966 521.153,699.021 521.712,702.226 522.272,705.91 522.831,702.768 523.39,708.104 523.949,710.902 524.509,695.679 525.068,693.39 525.627,727.592 526.186,762.939 526.746,764.009 527.305,745.101 527.864,741.06 528.423,708.635 528.983,688.94 529.542,656.857 530.101,642.255 530.66,597.611 531.22,622.199 531.779,645.378 532.338,651.179 532.897,637.516 533.457,612.262 534.016,665.846 534.575,667.859 535.134,655.13 535.694,674.077 536.253,660.544 536.812,647.944 537.371,648.028 537.931,601.375 538.49,604.886 539.049,642.419 539.608,602.928 540.168,643.354 540.727,648.449 541.286,648.58 541.845,622.021 542.405,644.33 542.964,662.385 543.523,668.897 544.082,669.634 544.642,658.849 545.201,661.879 545.76,649.117 546.319,669.401 546.879,673.204 547.438,690.555 547.997,688.029 548.556,689.021 549.116,706.434 549.675,704.666 550.234,690.794 550.793,692.01 551.353,708.833 551.912,677.465 552.471,681.071 553.031,700.201 553.59,698.769 554.149,668.782 554.708,654.494 555.268,691.403 555.827,676.669 556.386,698.754 556.945,696.761 557.505,663.118 558.064,683.526 558.623,700.771 559.182,716.141 559.742,698.852 560.301,686.365 560.86,686.145 561.419,705.528 561.979,705.325 562.538,688.15 563.097,704.5 563.656,719.672 564.216,734.122 564.775,715.336 565.334,731.15 565.893,732.127 566.453,732.778 567.012,685.385 567.571,721.433 568.13,738.343 568.69,704.786 569.249,717.736 569.808,732.948 570.367,715.708 570.927,730.081 571.486,727.963 572.045,695.347 572.604,743.902 573.164,775.344 573.723,773.044 574.282,753.671 574.841,798.564 575.401,793.102 575.96,819.409 576.519,830.708 577.078,839.809 577.638,816.971 578.197,811.693 578.756,825.071 579.315,853.37 579.875,848.877 580.434,860.657 580.993,805.349 581.552,804.188 582.112,782.991 582.671,796.591 583.23,787.379 583.789,796.82 584.349,810.456 584.908,801.928 585.467,799.712 586.026,778.925 586.586,724.12 587.145,706.872 587.704,674.305 588.263,694.396 588.823,696.579 589.382,696.332 589.941,680.84 590.5,683.085 591.06,684.411 591.619,684.93 592.178,686.469 592.737,671.31 593.297,675.045 593.856,658.721 594.415,643.38 594.974,652.184 595.534,635.609 596.093,622.173 596.652,625.385 597.211,629.37 597.771,649.136 598.33,703.878 598.889,719.963 599.448,718.475 600.008,716.179 600.567,745.77 601.126,759.906 601.685,771.646 602.245,769.937 602.804,750.487 603.363,733.793 603.922,715.5 604.482,732.846 605.041,746.952 605.6,758.733 606.159,753.461 606.719,752.392 607.278,733.747 607.837,700.362 608.396,701.321 608.956,703.754 609.515,718.087 610.074,715.055 610.633,718.479 611.193,737.206 611.752,733.517 612.311,749.426 612.87,733.192 613.43,734.772 613.989,731.871 614.548,729.374 615.107,745.893 615.667,730.404 616.226,743.851 616.785,741.868 617.344,709.406 617.904,709.332 618.463,710.295 619.022,729.492 619.581,729.418 620.141,711.405 620.7,711.459 621.259,711.053 621.818,679.324 622.378,713.772 622.937,713.175 623.496,693.874 624.055,696.123 624.615,708.542 625.174,755.128 625.733,779.498 626.292,740.411 626.852,756.091 627.411,770.874 627.97,784.776 628.529,830.285 629.089,825.337 629.648,801.414 630.207,781.163 630.766,740.308 631.326,739.158 631.885,686.203 632.444,702.259 633.003,669.606 633.563,669.647 634.122,655.181 634.681,673.331 635.24,674.59 635.8,674.314 636.359,658.743 636.918,664.33 637.477,666.305 638.037,666.506 638.596,697.157 639.155,727.437 639.714,724.645 640.274,722.245 640.833,734.36 641.392,731.748 641.951,729.543 642.511,713.041 643.07,726.808 643.629,721.376 644.188,723.751 644.748,739.28 645.307,766.737 645.866,751.221 646.425,746.108 646.985,760.432 647.544,740.368 648.103,705.534 648.662,688.474 649.222,686.414 649.781,703.115 650.34,702.067 650.899,699.193 651.459,716.887 652.018,712.567 652.577,676.483 653.136,676.944 653.696,676.716 654.255,693.04 654.814,662.873 655.373,645.765 655.933,697.94 656.492,714.356 657.051,714.31 657.61,696.673 658.17,679.481 658.729,664.652 659.288,651.172 659.847,649.645 660.407,649.313 660.966,634.252 661.525,585.852 662.084,626.348 662.644,613.831 663.203,586.296 663.762,614.302 664.321,664.576 664.881,667.32 665.44,671.447 665.999,704.596 666.558,673.268 667.118,707.43 667.677,710.531 668.236,709.098 668.795,724.092 669.355,707.976 669.914,706.567 670.473,659.635 671.032,713.977 671.592,729.481 672.151,727.678 672.71,725.981 673.269,738.156 673.829,738.596 674.388,701.82 674.947,730.795 675.506,715.358 676.066,650.659 676.625,638.195 677.184,675.93 677.743,662.148 678.303,681.591 678.862,680.087 679.421,731.983 679.981,730.159 680.54,744.271 681.099,710.985 681.658,772.939 682.218,721.039 682.777,717.534 683.336,733.595 683.895,748.904 684.455,775.29 685.014,773.438 685.573,770.995 686.132,769.163 686.692,747.948 687.251,758.749 687.81,735.002 688.369,700.38 688.929,729.413 689.488,725.488 690.047,726.241 690.606,706.993 691.166,659.937 691.725,663.228 692.284,679.443 692.843,680.64 693.403,681.238 693.962,664.079 694.521,648.87 695.08,635.801 695.64,636.537 696.199,657.42 696.758,675.432 697.317,695.698 697.877,698.659 698.436,697.712 698.995,667.231 699.554,699.101 700.114,698.14 700.673,701.361 701.232,698.501 701.791,718.148 702.351,733.668 702.91,716.23 703.469,681.133 704.028,665.628 704.588,649.082 705.147,618.588 705.706,607.741 706.265,598.749 706.825,634.568 707.384,671.892 707.943,704.541 708.502,719.615 709.062,700.608 709.621,667.058 710.18,657.536 710.739,625.026 711.299,660.938 711.858,677.853 712.417,679.821 712.976,685.153 713.536,730.341 714.095,745.035 714.654,741.322 715.213,739.198 715.773,737.261 716.332,718.52 716.891,718.575 717.45,700.664 718.01,700.859 718.569,686.561 719.128,657.992 719.687,660.401 720.247,660.636 720.806,646.077 721.365,616.437 721.924,634.245 722.484,636.938 723.043,657.468 723.602,661.643 724.161,676.236 724.721,662.02 725.28,633.977 725.839,638.167 726.398,625.421 726.958,629.347 727.517,630.226 728.076,600.429 728.635,586.588 729.195,607.341 729.754,628.162 730.313,600.004 730.872,592.064 731.432,631.418 731.991,601.374 732.55,605.989 733.109,610.6 733.669,633.655 734.228,667.548 734.787,635.173 735.346,672.593 735.906,704.297 736.465,706.601 737.024,690.274 737.583,704.094 738.143,688.384 738.702,703.256 739.261,685.77 739.82,685.823 740.38,719.503 740.939,669.847 741.498,673.186 742.057,655.979 742.617,672.208 743.176,722.383 743.735,675.118 744.294,691.124 744.854,722.158 745.413,721.707 745.972,705.339 746.531,735.048 747.091,716.143 747.65,732.909 748.209,730.02 748.768,759.553 749.328,755.065 749.887,735.258 750.446,749.83 751.005,780.901 751.565,760.169 752.124,723.503 752.683,721.416 753.242,720.266 753.802,764.256 754.361,740.602 754.92,736.109 755.479,701.965 756.039,703.86 756.598,703.316 757.157,732.988 757.716,710.394 758.276,694.085 758.835,707.294 759.394,658.585 759.953,677.749 760.513,696.272 761.072,680.049 761.631,712.035 762.19,712.497 762.75,729.676 763.309,758.398 763.868,768.936 764.427,780.04 764.987,742.556 765.546,760.308 766.105,739.186 766.664,720.837 767.224,736.173 767.783,734.752 768.342,752.291 768.901,778.832 769.461,790.412 770.02,769.984 770.579,767.457 771.138,741.541 771.698,722.015 772.257,688.171 772.816,669.566 773.375,654.745 773.935,658.227 774.494,627.56 775.053,617.032 775.612,639.885 776.172,644.08 776.731,663.938 777.29,649.967 777.849,620.146 778.409,640.306 778.968,661.482 779.527,661.975 780.086,682.005 780.646,696.508 781.205,694.809 781.764,743.198 782.323,757.686 782.883,753.768 783.442,751.218 784.001,747.568 784.56,713.613 785.12,711.35 785.679,679.062 786.238,696.208 786.797,664.075 787.357,683.021 787.916,711.452 788.475,694.19 789.034,694.858 789.594,729.603 790.153,741.605 790.712,736.857 791.271,715.37 791.831,713.257 792.39,695.69 792.949,695.459 793.508,695.651 794.068,693.34 794.627,675.509 795.186,692.033 795.745,644.49 796.305,628.962 796.864,629.604 797.423,632.863 797.982,617.211 798.542,603.606 799.101,607.89 799.66,594.604 800.219,598.337 800.779,618.142 801.338,602.813 801.897,595.377 802.456,622.053 803.016,624.779 803.575,627.888 804.134,618.291 804.693,639.748 805.253,674.58 805.812,687.302 806.371,689.397 806.931,703.423 807.49,704.244 808.049,704.616 808.608,749.817 809.168,763.524 809.727,726.655 810.286,690.691 810.845,722.807 811.405,709.074 811.964,690.131 812.523,704.257 813.082,704.536 813.642,703.681 814.201,732.9 814.76,728.949 815.319,727.095 815.879,723.866 816.438,726.199 816.997,707.696 817.556,706.603 818.116,706.214 818.675,692.695 819.234,690.74 819.793,661.847 820.353,697.933 820.912,714.504 821.471,726.695 822.03,673.23 822.59,675.032 823.149,706.214 823.708,662.202 824.267,696.78 824.827,695.427 825.386,681.332 825.945,700.538 826.504,699.47 827.064,732.455 827.623,696.409 828.182,730.441 828.741,745.188 829.301,759.043 829.86,736.741 830.419,717.399 830.978,715.997 831.538,712.953 832.097,729.634 832.656,747.471 833.215,728.753 833.775,742.171 834.334,706.657 834.893,703.835 835.452,686.882 836.012,669.315 836.571,636.488 837.13,639.964 837.689,645.564 838.249,665.586 838.808,682.541 839.367,697.044 839.926,712.311 840.486,680.052 841.045,710.941 841.604,694.093 842.163,661.095 842.723,660.903 843.282,675.471 843.841,690.469 844.4,691.632 844.96,692.477 845.519,690.215 846.078,642.576 846.637,678.687 847.197,728.45 847.756,746.581 848.315,741.186 848.874,784.508 849.434,799.05 849.993,758.199 850.552,737.743 851.111,749.895 851.671,781.177 852.23,762.413 852.789,726.734 853.348,722.929 853.908,707.335 854.467,674.464 855.026,665.06 855.585,668.199 856.145,656.195 856.704,688.678 857.263,702.488 857.822,698.53 858.382,699.705 858.941,682.361 859.5,667.032 860.059,620.157 860.619,627.233 861.178,631.685 861.737,632.393 862.296,633.854 862.856,653.262 863.415,636.511 863.974,652.805 864.533,654.876 865.093,639.733 865.652,677.829 866.211,662.122 866.77,632.731 867.33,617.221 867.889,602.054 868.448,639.067 869.007,623.987 869.567,612.986 870.126,634.074 870.685,656.646 871.244,677.021 871.804,659.291 872.363,675.518 872.922,660.211 873.481,676.145 874.041,681.082 874.6,646.785 875.159,662.577 875.718,667.014 876.278,698.762 876.837,680.384 877.396,662.783 877.955,649.604 878.515,651.198 879.074,655.271 879.633,640.165 880.192,628.348 880.752,633.151 881.311,637.368 881.87,651.819 882.429,666.739 882.989,666.37 883.548,666.888 884.107,649.288 884.666,650.396 885.226,651.226 885.785,701.115 886.344,734.01 886.903,711.968 887.463,727.125 888.022,756.993 888.581,774.246 889.14,734.338 889.7,716.393 890.259,716.029 890.818,726.055 891.377,757.31 891.937,766.789 892.496,777.663 893.055,787.052 893.614,815.203 894.174,810.923 894.733,787.558 895.292,781.683 895.851,760.183 896.411,755.725 896.97,774.209 897.529,770.358 898.088,747.469 898.648,740.171 899.207,750.766 899.766,716.47 900.325,746.738 900.885,728.844 901.444,694.071 902.003,676.951 902.562,681.832 903.122,663.682 903.681,679.85 904.24,696.723 904.799,666.104 905.359,653.588 905.918,686.244 906.477,715.968 907.036,696.435 907.596,681.015 908.155,680.033 908.714,693.572 909.273,693.954 909.833,692.318 910.392,646.04 910.951,667.933 911.51,700.625 912.07,717.67 912.629,715.914 913.188,710.755 913.747,741.083 914.307,722.098 914.866,765.245 915.425,742.411 915.984,722.501 916.544,702.496 917.103,734.649 917.662,701.934 918.221,719.435 918.781,686.732 919.34,637.899 919.899,638.668 920.458,622.755 921.018,638.334 921.577,590.796 922.136,600.517 922.695,573.074 923.255,597.037 923.814,618.445 924.373,608.955 924.932,612.06 925.492,631.91 926.051,602.948 926.61,605.945 927.169,611.425 927.729,599.049 928.288,553.999 928.847,561.916 929.406,505.059 929.966,500.515 930.525,508.971 931.084,520.382 931.644,515.868 932.203,558.466 932.762,551.612 933.321,560.449 933.881,566.37 934.44,604.507 934.999,624.907 935.558,643.19 936.118,646.192 936.677,662.686 937.236,679.998 937.795,678.85 938.355,711.275 938.914,739.899 939.473,774.355 940.032,754.824 940.592,752.372 941.151,734.289 941.71,749.161 942.269,750.17 942.829,763.432 943.388,772.65 943.947,769.249 944.506,765.129 945.066,778.926 945.625,735.231 946.184,715.954 946.743,713.678 947.303,713.079 947.862,696.154 948.421,681.16 948.98,667.513 949.54,669.064 950.099,657.626 950.658,641.824 951.217,645.431 951.777,659.119 952.336,662.007 952.895,680.128 953.454,665.712 954.014,633.017 954.573,637.707 955.132,638.718 955.691,636.725 956.251,639.346 956.81,639.836 957.369,658.957 957.928,692.756 958.488,659.976 959.047,661.557 959.606,662.867 960.165,648.249 960.725,666.638 961.284,681.318 961.843,664.948 962.402,666.672 962.962,632.445 963.521,669.899 964.08,655.315 964.639,673.004 965.199,689.97 965.758,671.766 966.317,670.738 966.876,670.248 967.436,619.681 967.995,638.27 968.554,653.87 969.113,669.739 969.673,670.822 970.232,652.457 970.791,671.899 971.35,701.45 971.91,668.986 972.469,653.932 973.028,686.656 973.587,685.592 974.147,687.515 974.706,690.382 975.265,708.746 975.824,688.065 976.384,687.72 976.943,704.294 977.502,714.408 978.061,730.486 978.621,713.659 979.18,727.285 979.739,708.001 980.298,753.644 980.858,718.786 981.417,715.401 981.976,746.171 982.535,730.201 983.095,745.146 983.654,757.446 984.213,722.356 984.772,721.608 985.332,719.038 985.891,714.359 986.45,728.434 987.009,695.785 987.569,678.493 988.128,645.727 988.687,613.287 989.246,617.123 989.806,622.151 990.365,670.669 990.924,700.924 991.483,698.526 992.043,697.972 992.602,729.176 993.161,693.874 993.72,708.407 994.28,709.816 994.839,739.288 995.398,784.959 995.957,799.274 996.517,778.651 997.076,808.482 997.635,768.425 998.194,779.671 998.754,776.238 999.313,724.798 999.872,721.44 1000.43,703.01 1000.99,699.459 1001.55,666.463 1002.11,648.521 1002.67,615.41 1003.23,619.909 1003.79,607.131 1004.35,625.894 1004.91,611.403 1005.46,647.283 1006.02,649.213 1006.58,633.34 1007.14,640.151 1007.7,690.668 1008.26,688.07 1008.82,654.941 1009.38,673.538 1009.94,671.043 1010.5,689.336 1011.06,686.535 1011.62,702.143 1012.18,700.205 1012.73,699.766 1013.29,730.822 1013.85,728.002 1014.41,695.301 1014.97,696.557 1015.53,711.314 1016.09,661.653 1016.65,676.76 1017.21,676.702 1017.77,657.141 1018.33,692.045 1018.89,728.418 1019.45,723.955 1020.01,673.967 1020.56,625.511 1021.12,632.048 1021.68,651.708 1022.24,651.518 1022.8,669.36 1023.36,688.484 1023.92,685.847 1024.48,689.413 1025.04,692.274 1025.6,674.246 1026.16,725.004 1026.72,721.446 1027.28,733.307 1027.83,749.754 1028.39,727.972 1028.95,738.58 1029.51,731.786 1030.07,746.901 1030.63,727.397 1031.19,710.541 1031.75,694.041 1032.31,709.708 1032.87,693.299 1033.43,726.161 1033.99,725.43 1034.55,707.945 1035.1,691.872 1035.66,693.657 1036.22,677.793 1036.78,697.185 1037.34,697.288 1037.9,679.288 1038.46,649.094 1039.02,632.699 1039.58,635.992 1040.14,638.029 1040.7,641.621 1041.26,664.24 1041.82,665.179 1042.38,651.085 1042.93,618.834 1043.49,622.796 1044.05,640.973 1044.61,644.597 1045.17,630.959 1045.73,649.653 1046.29,683.034 1046.85,696.298 1047.41,714.614 1047.97,679.378 1048.53,661.568 1049.09,675.827 1049.65,722.337 1050.2,754.256 1050.76,812.876 1051.32,759.889 1051.88,774.233 1052.44,703.171 1053,672.174 1053.56,674.055 1054.12,689.833 1054.68,689.195 1055.24,735.444 1055.8,747.008 1056.36,755.97 1056.92,721.912 1057.48,752.09 1058.03,750.517 1058.59,742.393 1059.15,725.836 1059.71,725.346 1060.27,723.874 1060.83,738.564 1061.39,719.682 1061.95,747.234 1062.51,727.704 1063.07,709.95 1063.63,689.049 1064.19,655.879 1064.75,607.849 1065.3,582.971 1065.86,605.69 1066.42,612.147 1066.98,613.447 1067.54,613.839 1068.1,616.583 1068.66,604.678 1069.22,606.974 1069.78,594.368 1070.34,630.571 1070.9,612.148 1071.46,598.047 1072.02,586.428 1072.57,580.309 1073.13,583.468 1073.69,623.11 1074.25,659.644 1074.81,643.299 1075.37,661.335 1075.93,663.512 1076.49,666.578 1077.05,683.561 1077.61,684.385 1078.17,684.281 1078.73,697.571 1079.29,732.047 1079.85,667.354 1080.4,687.824 1080.96,703.025 1081.52,701.552 1082.08,681.554 1082.64,665.385 1083.2,684.375 1083.76,702.263 1084.32,700.049 1084.88,719.327 1085.44,705.494 1086,739.861 1086.56,785.848 1087.12,779.052 1087.67,769.4 1088.23,796.057 1088.79,772.437 1089.35,769.444 1089.91,732.345 1090.47,713.294 1091.03,684.267 1091.59,682.964 1092.15,649.452 1092.71,649.28 1093.27,623.549 1093.83,659.846 1094.39,645.124 1094.94,678.219 1095.5,677.49 1096.06,677.126 1096.62,696.432 1097.18,680.267 1097.74,713.535 1098.3,677.313 1098.86,694.687 1099.42,629.494 1099.98,629.486 1100.54,634.43 1101.1,621.217 1101.66,654.612 1102.22,657.355 1102.77,641.011 1103.33,627.826 1103.89,597.128 1104.45,600.075 1105.01,572.332 1105.57,589.897 1106.13,596.53 1106.69,622.453 1107.25,609.396 1107.81,595.593 1108.37,600.876 1108.93,622.681 1109.49,606.958 1110.04,629.008 1110.6,663.358 1111.16,637.844 1111.72,624.837 1112.28,628.598 1112.84,647.141 1113.4,664.905 1113.96,696.77 1114.52,680.974 1115.08,695.097 1115.64,707.132 1116.2,733.169 1116.76,744.271 1117.31,723.397 1117.87,721.689 1118.43,685.901 1118.99,686.12 1119.55,671.441 1120.11,658.407 1120.67,708.208 1121.23,691.59 1121.79,696.751 1122.35,698.156 1122.91,697.667 1123.47,695.738 1124.03,743.005 1124.59,742.909 1125.14,738.936 1125.7,719.905 1126.26,749.02 1126.82,727.628 1127.38,690.736 1127.94,673.981 1128.5,672.043 1129.06,656.1 1129.62,656.914 1130.18,640.124 1130.74,623.773 1131.3,629.535 1131.86,632.888 1132.41,638.954 1132.97,660.897 1133.53,679.118 1134.09,693.597 1134.65,676.896 1135.21,691.52 1135.77,690.381 1136.33,725.248 1136.89,725.154 1137.45,743.959 1138.01,756.51 1138.57,768.866 1139.13,764.542 1139.68,727.241 1140.24,708.678 1140.8,692.513 1141.36,692.324 1141.92,659.409 1142.48,658.025 1143.04,656.121 1143.6,690.455 1144.16,691.484 1144.72,702.105 1145.28,686.39 1145.84,720.18 1146.4,688.453 1146.96,668.652 1147.51,620.787 1148.07,639.935 1148.63,661.085 1149.19,630.904 1149.75,634.534 1150.31,621.286 1150.87,640.729 1151.43,672.412 1151.99,686.05 1152.55,701.033 1153.11,682.964 1153.67,681.397 1154.23,699.637 1154.78,698.444 1155.34,702.255 1155.9,719.345 1156.46,718.232 1157.02,703.059 1157.58,733.23 1158.14,699.319 1158.7,712.245 1159.26,679.67 1159.82,694.07 1160.38,675.644 1160.94,659.941 1161.5,663.127 1162.05,665.329 1162.61,664.302 1163.17,666.002 1163.73,668.016 1164.29,704.971 1164.85,705.474 1165.41,718.505 1165.97,715.294 1166.53,764.897 1167.09,793.98 1167.65,787.16 1168.21,761.152 1168.77,756.162 1169.33,750.143 1169.88,728.781 1170.44,726.384 1171,675.71 1171.56,639.258 1172.12,657.069 1172.68,657.522 1173.24,662.453 1173.8,679.754 1174.36,662.621 1174.92,663.904 1175.48,633.5 1176.04,655.128 1176.6,687.183 1177.15,688.399 1177.71,689.864 1178.27,688.75 1178.83,690.501 1179.39,657.289 1179.95,641.231 1180.51,643.238 1181.07,630.382 1181.63,633.183 1182.19,619.1 1182.75,638.162 1183.31,623.717 1183.87,661.109 1184.43,661.684 1184.98,681.843 1185.54,666.703 1186.1,666.344 1186.66,651.579 1187.22,620.004 1187.78,624.096 1188.34,625.781 1188.9,598.85 1189.46,623.448 1190.02,644.244 1190.58,660.972 1191.14,675.989 1191.7,693.31 1192.25,723.913 1192.81,754.892 1193.37,752.19 1193.93,747.049 1194.49,773.479 1195.05,753.626 1195.61,767.381 1196.17,731.968 1196.73,697.763 1197.29,697.079 1197.85,660.667 1198.41,657.878 1198.97,657.975 1199.52,661.06 1200.08,647.683 1200.64,635.285 1201.2,669.071 1201.76,687.501 1202.32,704.1 1202.88,704.885 1203.44,685.697 1204,685.284 1204.56,668.747 1205.12,664.869 1205.68,649.235 1206.24,632.201 1206.8,601.483 1207.35,623.729 1207.91,624.002 1208.47,643.501 1209.03,664.88 1209.59,694.56 1210.15,658.852 1210.71,659.785 1211.27,661.756 1211.83,676.414 1212.39,693.682 1212.95,662.149 1213.51,666.369 1214.07,666.078 1214.62,663.611 1215.18,695.025 1215.74,678.842 1216.3,697.352 1216.86,681.57 1217.42,698.447 1217.98,679.568 1218.54,709.963 1219.1,742.31 1219.66,742.432 1220.22,739.891 1220.78,706.844 1221.34,720.431 1221.89,702.759 1222.45,701.605 1223.01,715.667 1223.57,683.205 1224.13,664.225 1224.69,664.336 1225.25,682.767 1225.81,683.942 1226.37,683.414 1226.93,681.128 1227.49,632.753 1228.05,651.804 1228.61,655.652 1229.17,659.004 1229.72,658.04 1230.28,676.127 1230.84,705.948 1231.4,721.248 1231.96,720.842 1232.52,721.588 1233.08,701.584 1233.64,715.377 1234.2,744.826 1234.76,744.469 1235.32,706.85 1235.88,686.434 1236.44,653.572 1236.99,687.367 1237.55,671.649 1238.11,654.821 1238.67,688.407 1239.23,672.751 1239.79,688.952 1240.35,685.598 1240.91,703.947 1241.47,721.654 1242.03,753.117 1242.59,763.311 1243.15,808.31 1243.71,769.501 1244.26,762.928 1244.82,777.745 1245.38,770.072 1245.94,785.092 1246.5,749.856 1247.06,763.267 1247.62,758.998 1248.18,755.618 1248.74,767.165 1249.3,811.902 1249.86,824.944 1250.42,802.79 1250.98,800.448 1251.54,809.904 1252.09,804.772 1252.65,800.039 1253.21,795.384 1253.77,787.153 1254.33,796.138 1254.89,742.897 1255.45,758.812 1256.01,738.964 1256.57,749.004 1257.13,729.638 1257.69,723.445 1258.25,731.935 1258.81,712.957 1259.36,725.791 1259.92,703.515 1260.48,685.781 1261.04,669.377 1261.6,652.915 1262.16,670.313 1262.72,689.919 1263.28,690.404 1263.84,674.992 1264.4,676.664 1264.96,709.805 1265.52,709.05 1266.08,707.348 1266.63,723.15 1267.19,723.514 1267.75,741.329 1268.31,733.734 1268.87,748.918 1269.43,762.363 1269.99,791.825 1270.55,816.216 1271.11,840.731 1271.67,831.257 1272.23,818.46 1272.79,797.708 1273.35,805.31 1273.91,828.645 1274.46,788.935 1275.02,767.008 1275.58,742.754 1276.14,737.702 1276.7,716.235 1277.26,712.121 1277.82,693.128 1278.38,674.655 1278.94,661.629 1279.5,663.936 1280.06,632.507 1280.62,633.166 1281.18,633.907 1281.73,635.91 1282.29,603.403 1282.85,635.827 1283.41,654.192 1283.97,634.968 1284.53,654.479 1285.09,640.9 1285.65,627.966 1286.21,651.015 1286.77,621.517 1287.33,638.153 1287.89,676.696 1288.45,660.756 1289,648.054 1289.56,651.213 1290.12,650.625 1290.68,620.418 1291.24,626.499 1291.8,611.477 1292.36,629.44 1292.92,651.624 1293.48,652.646 1294.04,653.871 1294.6,640.363 1295.16,656.603 1295.72,676.427 1296.28,613.552 1296.83,599.333 1297.39,604.25 1297.95,621.515 1298.51,642.138 1299.07,645.147 1299.63,662.576 1300.19,664.157 1300.75,714.812 1301.31,714.177 1301.87,726.929 1302.43,726.367 1302.99,707.928 1303.55,689.452 1304.1,671.908 1304.66,671.145 1305.22,689.209 1305.78,688.387 1306.34,690.338 1306.9,655.554 1307.46,657.595 1308.02,690.285 1308.58,674.789 1309.14,690.351 1309.7,689.788 1310.26,706.574 1310.82,706.061 1311.38,690.383 1311.93,671.485 1312.49,655 1313.05,644.207 1313.61,663.593 1314.17,664.6 1314.73,616.626 1315.29,620.17 1315.85,638.063 1316.41,607.682 1316.97,626.398 1317.53,631.93 1318.09,698.306 1318.65,696.375 1319.2,695.601 1319.76,691.031 1320.32,678.448 1320.88,674.727 1321.44,675.204 1322,641.021 1322.56,643.11 1323.12,594.992 1323.68,630.191 1324.24,633.896 1324.8,651.805 1325.36,649.381 1325.92,638.443 1326.47,655.25 1327.03,673.416 1327.59,673.975 1328.15,661.067 1328.71,646.257 1329.27,665.964 1329.83,679.355 1330.39,709.697 1330.95,709.622 1331.51,739.301 1332.07,734.784 1332.63,701.222 1333.19,682.1 1333.75,631.349 1334.3,634.965 1334.86,641.188 1335.42,660.082 1335.98,664.441 1336.54,668.22 1337.1,685.233 1337.66,671.193 1338.22,657.803 1338.78,691.794 1339.34,676.408 1339.9,673.588 1340.46,674.093 1341.02,660.405 1341.57,664.219 1342.13,683.074 1342.69,666.485 1343.25,665.226 1343.81,667.156 1344.37,703.468 1344.93,703.657 1345.49,700.295 1346.05,699.856 1346.61,712.634 1347.17,712.553 1347.73,712.683 1348.29,712.486 1348.84,712.124 1349.4,726.506 1349.96,721.69 1350.52,734.292 1351.08,734.768 1351.64,733.929 1352.2,685.312 1352.76,701.687 1353.32,748.451 1353.88,747.747 1354.44,724.868 1355,710.946 1355.56,726.013 1356.12,707.587 1356.67,691.461 1357.23,675.947 1357.79,695.031 1358.35,691.265 1358.91,690.107 1359.47,674.755 1360.03,690.886 1360.59,675.45 1361.15,676.204 1361.71,661.143 1362.27,627.583 1362.83,645.545 1363.39,632.819 1363.94,634.819 1364.5,691.82 1365.06,691.45 1365.62,708.436 1366.18,721.677 1366.74,688.141 1367.3,657.508 1367.86,641.654 1368.42,656.926 1368.98,641.975 1369.54,659.48 1370.1,660.922 1370.66,663.657 1371.21,662.281 1371.77,662.983 1372.33,662.839 1372.89,637.118 1373.45,622.802 1374.01,641.38 1374.57,627.446 1375.13,659.94 1375.69,658.603 1376.25,646.832 1376.81,635.534 1377.37,624.05 1377.93,645.582 1378.49,633.902 1379.04,636.518 1379.6,641.445 1380.16,644.308 1380.72,677.806 1381.28,679.613 1381.84,696.554 1382.4,711.833 1382.96,728.727 1383.52,743.729 1384.08,789.071 1384.64,767.082 1385.2,748.339 1385.76,726.021 1386.31,737.883 1386.87,688.098 1387.43,687.616 1387.99,656.53 1388.55,673.407 1389.11,710.477 1389.67,725.296 1390.23,724.814 1390.79,739.776 1391.35,737.379 1391.91,719.56 1392.47,732.653 1393.03,746.791 1393.58,745.948 1394.14,757.956 1394.7,786.904 1395.26,765.22 1395.82,792.668 1396.38,835.838 1396.94,815.129 1397.5,760.113 1398.06,774.152 1398.62,736.733 1399.18,749.991 1399.74,741.424 1400.3,755.602 1400.86,752.071 1401.41,744.828 1401.97,741.548 1402.53,724.753 1403.09,723.103 1403.65,706.827 1404.21,685.659 1404.77,685.41 1405.33,701.301 1405.89,719.374 1406.45,700.519 1407.01,687.234 1407.57,671.158 1408.13,670.275 1408.68,640.138 1409.24,660.812 1409.8,662.221 1410.36,659.625 1410.92,663.966 1411.48,648.521 1412.04,650.163 1412.6,634.429 1413.16,650.461 1413.72,648.284 1414.28,664.742 1414.84,713.924 1415.4,711.455 1415.95,707.466 1416.51,735.727 1417.07,744.738 1417.63,731.55 1418.19,744.037 1418.75,740.851 1419.31,738.332 1419.87,654.111 1420.43,640.3 1420.99,688.684 1421.55,656.185 1422.11,655.986 1422.67,655.514 1423.23,655.563 1423.78,640.892 1424.34,659.28 1424.9,663.078 1425.46,664.109 1426.02,684.953 1426.58,668.966 1427.14,686.02 1427.7,669.435 1428.26,640.028 1428.82,608.741 1429.38,612.19 1429.94,595.453 1430.5,584.11 1431.05,589.743 1431.61,591.119 1432.17,560.272 1432.73,568.023 1433.29,556.127 1433.85,566.832 1434.41,554.858 1434.97,544.598 1435.53,570.739 1436.09,561.116 1436.65,569.129 1437.21,563.218 1437.77,588.037 1438.33,579.521 1438.88,617.855 1439.44,623.066 1440,670.003 1440.56,688.006 1441.12,668.475 1441.68,704.28 1442.24,734.961 1442.8,729.871 1443.36,728.453 1443.92,727.968 1444.48,724.896 1445.04,720.523 1445.6,684.523 1446.15,670.134 1446.71,669.144 1447.27,683.888 1447.83,667.622 1448.39,666.437 1448.95,699.48 1449.51,697.385 1450.07,694.853 1450.63,690.376 1451.19,674.316 1451.75,691.283 1452.31,693.769 1452.87,679.768 1453.42,691.774 1453.98,708.987 1454.54,692.468 1455.1,672.066 1455.66,675.454 1456.22,677.958 1456.78,676.746 1457.34,692.915 1457.9,678.887 1458.46,679.73 1459.02,678.636 1459.58,726.646 1460.14,722.309 1460.7,702.778 1461.25,684.745 1461.81,665.055 1462.37,651.861 1462.93,655.515 1463.49,656.494 1464.05,706.445 1464.61,706.716 1465.17,718.729 1465.73,719.715 1466.29,702.716 1466.85,704.248 1467.41,717.393 1467.97,715.341 1468.52,714.718 1469.08,714.727 1469.64,713.089 1470.2,678.625 1470.76,645.689 1471.32,649.511 1471.88,670.294 1472.44,684.413 1473,687.087 1473.56,704.102 1474.12,721.721 1474.68,686.775 1475.24,705.151 1475.79,700.108 1476.35,671.036 1476.91,655.333 1477.47,658.139 1478.03,674.004 1478.59,662.666 1479.15,632.141 1479.71,667.918 1480.27,667.844 1480.83,668.006 1481.39,655.267 1481.95,608.349 1482.51,590.427 1483.07,613.167 1483.62,618.506 1484.18,589.392 1484.74,563.013 1485.3,554.288 1485.86,576.046 1486.42,597.093 1486.98,618.499 1487.54,636.484 1488.1,650.607 1488.66,670.363 1489.22,688.584 1489.78,689.616 1490.34,690.038 1490.89,685.729 1491.45,641.267 1492.01,640.907 1492.57,673.573 1493.13,690.416 1493.69,703.375 1494.25,749.968 1494.81,715.513 1495.37,697.81 1495.93,679.017 1496.49,680.097 1497.05,695.309 1497.61,662.282 1498.16,664.481 1498.72,632.923 1499.28,620.497 1499.84,654.71 1500.4,690.835 1500.96,675.859 1501.52,677.691 1502.08,677.941 1502.64,681.415 1503.2,697.401 1503.76,715.295 1504.32,697.507 1504.88,683.071 1505.44,654.016 1505.99,674.195 1506.55,671.054 1507.11,668.966 1507.67,686.762 1508.23,685.425 1508.79,733.763 1509.35,749.555 1509.91,760.493 1510.47,739.769 1511.03,706.947 1511.59,676.512 1512.15,676.848 1512.71,679.749 1513.26,680.739 1513.82,680.337 1514.38,666.081 1514.94,666.579 1515.5,667.861 1516.06,666.897 1516.62,655.009 1517.18,689.507 1517.74,705.614 1518.3,718.465 1518.86,713.685 1519.42,713.285 1519.98,699.288 1520.53,701.569 1521.09,685.041 1521.65,672.083 1522.21,673.247 1522.77,627.015 1523.33,633.726 1523.89,636.04 1524.45,622.291 1525.01,659.405 1525.57,674.028 1526.13,643.004 1526.69,649.581 1527.25,665.252 1527.81,696.916 1528.36,695.834 1528.92,661.165 1529.48,662.139 1530.04,696.409 1530.6,698.221 1531.16,697.767 1531.72,711.851 1532.28,692.057 1532.84,676.897 1533.4,676.633 1533.96,677.153 1534.52,708.531 1535.08,724.948 1535.63,719.515 1536.19,718.495 1536.75,735.634 1537.31,715.082 1537.87,732.559 1538.43,730.144 1538.99,715.443 1539.55,729.384 1540.11,726.637 1540.67,757.191 1541.23,752.795 1541.79,780.19 1542.35,805.813 1542.9,782.668 1543.46,764.995 1544.02,761.073 1544.58,789.213 1545.14,736.987 1545.7,716.498 1546.26,714.369 1546.82,711.159 1547.38,678.43 1547.94,678.828 1548.5,690.167 1549.06,704.713 1549.62,675.187 1550.18,688.745 1550.73,693.406 1551.29,706.398 1551.85,719.378 1552.41,732.163 1552.97,703.051 1553.53,715.854 1554.09,746.609 1554.65,760.661 1555.21,744.098 1555.77,727.188 1556.33,740.314 1556.89,753.081 1557.45,726.997 1558,772.711 1558.56,771.056 1559.12,780.904 1559.68,777.398 1560.24,758.46 1560.8,724.132 1561.36,690.433 1561.92,690.182 1562.48,687.689 1563.04,754.31 1563.6,753.079 1564.16,766.107 1564.72,776.533 1565.28,771.808 1565.83,735.514 1566.39,743.716 1566.95,754.314 1567.51,718.511 1568.07,701.804 1568.63,717.005 1569.19,716.892 1569.75,717.848 1570.31,749.986 1570.87,741.903 1571.43,723.565 1571.99,750.217 1572.55,697.962 1573.1,709.669 1573.66,690.234 1574.22,672.555 1574.78,671.068 1575.34,672.959 1575.9,657.3 1576.46,659.723 1577.02,645.569 1577.58,630.865 1578.14,631.342 1578.7,650.035 1579.26,620.217 1579.82,653.704 1580.37,670.654 1580.93,668.75 1581.49,650.6 1582.05,668.155 1582.61,672.868 1583.17,657.138 1583.73,625.939 1584.29,646.526 1584.85,665.185 1585.41,678.607 1585.97,678.505 1586.53,644.62 1587.09,646.246 1587.65,663.929 1588.2,680.257 1588.76,649.333 1589.32,686.417 1589.88,700.525 1590.44,715.882 1591,695.649 1591.56,695.436 1592.12,693.366 1592.68,724.174 1593.24,722.428 1593.8,719.395 1594.36,782.062 1594.92,789 1595.47,784.788 1596.03,796.246 1596.59,771.862 1597.15,755.633 1597.71,751.515 1598.27,713.908 1598.83,728.925 1599.39,742.86 1599.95,740.292 1600.51,734.967 1601.07,717.151 1601.63,746.783 1602.19,710.762 1602.74,707.709 1603.3,738.982 1603.86,737.846 1604.42,732.893 1604.98,711.311 1605.54,724.338 1606.1,686.16 1606.66,688.146 1607.22,671.094 1607.78,688.378 1608.34,687.986 1608.9,718.571 1609.46,685.057 1610.02,668.313 1610.57,701.127 1611.13,668.726 1611.69,652.567 1612.25,666.965 1612.81,669.847 1613.37,686.405 1613.93,733.763 1614.49,699.65 1615.05,680.988 1615.61,665.703 1616.17,669.753 1616.73,639.726 1617.29,624.819 1617.84,628.189 1618.4,651.263 1618.96,655.632 1619.52,658.503 1620.08,629.388 1620.64,663.314 1621.2,681.926 1621.76,632.247 1622.32,652.921 1622.88,684.447 1623.44,685.486 1624,686.554 1624.56,653.779 1625.11,685.656 1625.67,686.362 1626.23,652.469 1626.79,634.566 1627.35,668.558 1627.91,657.963 1628.47,626.449 1629.03,663.969 1629.59,665.425 1630.15,701.123 1630.71,666.635 1631.27,634.788 1631.83,654.125 1632.39,639.292 1632.94,640.26 1633.5,581.334 1634.06,588.931 1634.62,607.146 1635.18,612.833 1635.74,647.074 1636.3,648.967 1636.86,665.456 1637.42,702.479 1637.98,718.242 1638.54,715.025 1639.1,730.095 1639.66,709.707 1640.21,705.398 1640.77,683.801 1641.33,700.208 1641.89,715.627 1642.45,714.372 1643.01,684.479 1643.57,667.24 1644.13,634.41 1644.69,604.47 1645.25,627.7 1645.81,616.173 1646.37,619.399 1646.93,608.345 1647.48,612.131 1648.04,650.665 1648.6,635.026 1649.16,621.001 1649.72,671.814 1650.28,673.477 1650.84,642.008 1651.4,643.521 1651.96,595.932 1652.52,599.577 1653.08,589.011 1653.64,611.418 1654.2,662.397 1654.76,663.365 1655.31,647.04 1655.87,632.871 1656.43,652.344 1656.99,670.673 1657.55,667.241 1658.11,670.357 1658.67,669.983 1659.23,653.864 1659.79,624.109 1660.35,627.314 1660.91,662.127 1661.47,682.226 1662.03,698.861 1662.58,729.977 1663.14,715.347 1663.7,712.816 1664.26,729.704 1664.82,726.32 1665.38,710.441 1665.94,721.959 1666.5,737.272 1667.06,716.322 1667.62,698.023 1668.18,665.877 1668.74,667.346 1669.3,664.723 1669.85,648.745 1670.41,665.153 1670.97,650.437 1671.53,667.196 1672.09,651.775 1672.65,652.694 1673.21,651.481 1673.77,652.079 1674.33,622.461 1674.89,644.201 1675.45,662.797 1676.01,646.595 1676.57,650.202 1677.13,669.591 1677.68,685.77 1678.24,684.938 1678.8,718.468 1679.36,747.041 1679.92,742.784 1680.48,775.143 1681.04,803.559 1681.6,798.996 1682.16,797.63 1682.72,777.317 1683.28,758.047 1683.84,720.986 1684.4,701.166 1684.95,683.891 1685.51,647.327 1686.07,712.105 1686.63,693.111 1687.19,692.867 1687.75,691.023 1688.31,685.458 1688.87,669.318 1689.43,652.9 1689.99,699.134 1690.55,698.847 1691.11,667.053 1691.67,637.109 1692.23,656.49 1692.78,656.947 1693.34,641.117 1693.9,645.071 1694.46,679.365 1695.02,665.062 1695.58,646.219 1696.14,646.797 1696.7,634.791 1697.26,622.463 1697.82,624.585 1698.38,644.123 1698.94,648.721 1699.5,650.572 1700.05,646.303 1700.61,652.913 1701.17,686.736 1701.73,673.182 1702.29,694.194 1702.85,665.938 1703.41,665.052 1703.97,632.802 1704.53,649.478 1705.09,652.101 1705.65,636.468 1706.21,620.79 1706.77,687.712 1707.32,671.612 1707.88,657.995 1708.44,611.723 1709,630.077 1709.56,633.181 1710.12,653.634 1710.68,689.904 1711.24,671.95 1711.8,640.228 1712.36,643.294 1712.92,641.429 1713.48,644.098 1714.04,651.806 1714.6,701.815 1715.15,718.618 1715.71,669.902 1716.27,671.581 1716.83,685.455 1717.39,668.437 1717.95,706.213 1718.51,660.012 1719.07,690.938 1719.63,626.758 1720.19,616.245 1720.75,620.159 1721.31,623.871 1721.87,612.883 1722.42,603.088 1722.98,608.2 1723.54,593.666 1724.1,598.356 1724.66,619.296 1725.22,639.571 1725.78,642.764 1726.34,646.113 1726.9,614.824 1727.46,619.317 1728.02,667.809 1728.58,653.394 1729.14,639.863 1729.69,627.008 1730.25,645.197 1730.81,662.742 1731.37,697.853 1731.93,669.659 1732.49,636.34 1733.05,700.329 1733.61,664.459 1734.17,700.375 1734.73,717.731 1735.29,686.117 1735.85,684.22 1736.41,686.967 1736.97,702.903 1737.52,701.278 1738.08,703.061 1738.64,686.712 1739.2,685.563 1739.76,700.127 1740.32,701.603 1740.88,702.581 1741.44,721.264 1742,719.604 1742.56,683.886 1743.12,669.228 1743.68,650.879 1744.24,684.017 1744.79,684.448 1745.35,699.906 1745.91,683.188 1746.47,696.612 1747.03,696.904 1747.59,680.358 1748.15,646.083 1748.71,678.66 1749.27,684.61 1749.83,733.211 1750.39,731.272 1750.95,729.042 1751.51,744.747 1752.06,757.596 1752.62,754.724 1753.18,781.105 1753.74,761.126 1754.3,738.31 1754.86,735.457 1755.42,734.486 1755.98,719.365 1756.54,732.218 1757.1,744.423 1757.66,743.603 1758.22,754.966 1758.78,729.503 1759.34,729.963 1759.89,746.215 1760.45,742.244 1761.01,709.849 1761.57,708.105 1762.13,691.807 1762.69,672.061 1763.25,640.565 1763.81,647.269 1764.37,633.254 1764.93,618.564 1765.49,620.961 1766.05,638.105 1766.61,661.291 1767.16,644.188 1767.72,629.201 1768.28,600.217 1768.84,609.157 1769.4,613.047 1769.96,616.221 1770.52,603.723 1771.08,639.737 1771.64,658.812 1772.2,691.998 1772.76,724.109 1773.32,716.292 1773.88,682.509 1774.43,663.72 1774.99,681.833 1775.55,661.954 1776.11,663.381 1776.67,649.224 1777.23,649.318 1777.79,683.433 1778.35,682.999 1778.91,667.803 1779.47,665.861 1780.03,666.218 1780.59,684.365 1781.15,669.572 1781.71,668.203 1782.26,653.025 1782.82,685.635 1783.38,735.068 1783.94,733.505 1784.5,715.841 1785.06,715.517 1785.62,718.318 1786.18,713.611 1786.74,728.661 1787.3,677.413 1787.86,692.062 1788.42,707.216 1788.98,722.007 1789.53,737.302 1790.09,718.466 1790.65,747.697 1791.21,789.559 1791.77,748.887 1792.33,747.612 1792.89,727.061 1793.45,722.29 1794.01,721.107 1794.57,735.52 1795.13,702.26 1795.69,696.421 1796.25,693.618 1796.8,693.211 1797.36,707.54 1797.92,704.717 1798.48,719.924 1799.04,717.295 1799.6,718.671 1800.16,733.913 1800.72,765.928 1801.28,778.497 1801.84,708.008 1802.4,696.561 1802.96,694.062 1803.52,706.772 1804.08,691.359 1804.63,692.322 1805.19,706.567 1805.75,707.205 1806.31,719.986 1806.87,735.214 1807.43,714.19 1807.99,732.185 1808.55,698.157 1809.11,695.183 1809.67,710.507 1810.23,712.107 1810.79,695.024 1811.35,694.474 1811.9,677.256 1812.46,676.909 1813.02,674.672 1813.58,675.956 1814.14,660.866 1814.7,680.581 1815.26,682.943 1815.82,698.206 1816.38,680.196 1816.94,661.286 1817.5,661.739 1818.06,663.3 1818.62,680.313 1819.18,695.902 1819.73,712.496 1820.29,695.432 1820.85,679.157 1821.41,676.93 1821.97,675.686 1822.53,660.532 1823.09,660.389 1823.65,660.851 1824.21,662.428 1824.77,678.034 1825.33,711.959 1825.89,712.17 1826.45,726.753 1827,741.154 1827.56,753.662 1828.12,732.199 1828.68,711.185 1829.24,662.813 1829.8,665.314 1830.36,664.767 1830.92,697.98 1831.48,699.31 1832.04,712.344 1832.6,740.767 1833.16,734.923 1833.72,732.284 1834.27,713.177 1834.83,693.127 1835.39,694.566 1835.95,678.824 1836.51,680.399 1837.07,697.72 1837.63,661.629 1838.19,647.892 \"/>\n<path clip-path=\"url(#clip133)\" d=\"M720.247 688.688 L720.806 688.688 L721.365 688.688 L721.924 688.688 L722.484 688.688 L723.043 688.688 L723.602 688.688 L724.161 688.688 L724.721 688.688 L725.28 688.688 L725.839 688.688 L726.398 688.688 L726.958 688.688 L727.517 688.688 L728.076 688.688 L728.635 688.688 L729.195 688.688 L729.754 688.688 L730.313 688.688 L730.872 688.688 L731.432 688.688 L731.991 688.688 L732.55 688.688 L733.109 688.688 L733.669 688.688 L734.228 688.688 L734.787 688.688 L735.346 688.688 L735.906 688.688 L736.465 688.688 L737.024 688.688 L737.583 688.688 L738.143 688.688 L738.702 688.688 L739.261 688.688 L739.82 688.688 L740.38 688.688 L740.939 688.688 L741.498 688.688 L742.057 688.688 L742.617 688.688 L743.176 688.688 L743.735 688.688 L744.294 688.688 L744.854 688.688 L745.413 688.688 L745.972 688.688 L746.531 688.688 L747.091 688.688 L747.65 688.688 L748.209 688.688 L748.768 688.688 L749.328 688.688 L749.887 688.688 L750.446 688.688 L751.005 688.688 L751.565 688.688 L752.124 688.688 L752.683 688.688 L753.242 688.688 L753.802 688.688 L754.361 688.688 L754.92 688.688 L755.479 688.688 L756.039 688.688 L756.598 688.688 L757.157 688.688 L757.716 688.688 L758.276 688.688 L758.835 688.688 L759.394 688.688 L759.953 688.688 L760.513 688.688 L761.072 688.688 L761.631 688.688 L762.19 688.688 L762.75 688.688 L763.309 688.688 L763.868 688.688 L764.427 688.688 L764.987 688.688 L765.546 688.688 L766.105 688.688 L766.664 688.688 L767.224 688.688 L767.783 688.688 L768.342 688.688 L768.901 688.688 L769.461 688.688 L770.02 688.688 L770.579 688.688 L771.138 688.688 L771.698 688.688 L772.257 688.688 L772.816 688.688 L773.375 688.688 L773.935 688.688 L774.494 688.688 L775.053 688.688 L775.612 688.688 L776.172 688.688 L776.731 688.688 L777.29 688.688 L777.849 688.688 L778.409 688.688 L778.968 688.688 L779.527 688.688 L780.086 688.688 L780.646 688.688 L781.205 688.688 L781.764 688.688 L782.323 688.688 L782.883 688.688 L783.442 688.688 L784.001 688.688 L784.56 688.688 L785.12 688.688 L785.679 688.688 L786.238 688.688 L786.797 688.688 L787.357 688.688 L787.916 688.688 L788.475 688.688 L789.034 688.688 L789.594 688.688 L790.153 688.688 L790.712 688.688 L791.271 688.688 L791.831 688.688 L792.39 688.688 L792.949 688.688 L793.508 688.688 L794.068 688.688 L794.627 688.688 L795.186 688.688 L795.745 688.688 L796.305 688.688 L796.864 688.688 L797.423 688.688 L797.982 688.688 L798.542 688.688 L799.101 688.688 L799.66 688.688 L800.219 688.688 L800.779 688.688 L801.338 688.688 L801.897 688.688 L802.456 688.688 L803.016 688.688 L803.575 688.688 L804.134 688.688 L804.693 688.688 L805.253 688.688 L805.812 688.688 L806.371 688.688 L806.931 688.688 L807.49 688.688 L808.049 688.688 L808.608 688.688 L809.168 688.688 L809.727 688.688 L810.286 688.688 L810.845 688.688 L811.405 688.688 L811.964 688.688 L812.523 688.688 L813.082 688.688 L813.642 688.688 L814.201 688.688 L814.76 688.688 L815.319 688.688 L815.879 688.688 L816.438 688.688 L816.997 688.688 L817.556 688.688 L818.116 688.688 L818.675 688.688 L819.234 688.688 L819.793 688.688 L820.353 688.688 L820.912 688.688 L821.471 688.688 L822.03 688.688 L822.59 688.688 L823.149 688.688 L823.708 688.688 L824.267 688.688 L824.827 688.688 L825.386 688.688 L825.945 688.688 L826.504 688.688 L827.064 688.688 L827.623 688.688 L828.182 688.688 L828.741 688.688 L829.301 688.688 L829.86 688.688 L830.419 688.688 L830.978 688.688 L831.538 688.688 L832.097 688.688 L832.656 688.688 L833.215 688.688 L833.775 688.688 L834.334 688.688 L834.893 688.688 L835.452 688.688 L836.012 688.688 L836.571 688.688 L837.13 688.688 L837.689 688.688 L838.249 688.688 L838.808 688.688 L839.367 688.688 L839.926 688.688 L840.486 688.688 L841.045 688.688 L841.604 688.688 L842.163 688.688 L842.723 688.688 L843.282 688.688 L843.841 688.688 L844.4 688.688 L844.96 688.688 L845.519 688.688 L846.078 688.688 L846.637 688.688 L847.197 688.688 L847.756 688.688 L848.315 688.688 L848.874 688.688 L849.434 688.688 L849.993 688.688 L850.552 688.688 L851.111 688.688 L851.671 688.688 L852.23 688.688 L852.789 688.688 L853.348 688.688 L853.908 688.688 L854.467 688.688 L855.026 688.688 L855.585 688.688 L856.145 688.688 L856.704 688.688 L857.263 688.688 L857.822 688.688 L858.382 688.688 L858.941 688.688 L859.5 688.688 L860.059 688.688 L860.619 688.688 L861.178 688.688 L861.737 688.688 L862.296 688.688 L862.856 688.688 L863.415 688.688 L863.974 688.688 L864.533 688.688 L865.093 688.688 L865.652 688.688 L866.211 688.688 L866.77 688.688 L867.33 688.688 L867.889 688.688 L868.448 688.688 L869.007 688.688 L869.567 688.688 L870.126 688.688 L870.685 688.688 L871.244 688.688 L871.804 688.688 L872.363 688.688 L872.922 688.688 L873.481 688.688 L874.041 688.688 L874.6 688.688 L875.159 688.688 L875.718 688.688 L876.278 688.688 L876.837 688.688 L877.396 688.688 L877.955 688.688 L878.515 688.688 L879.074 688.688 L879.633 688.688 L880.192 688.688 L880.752 688.688 L881.311 688.688 L881.87 688.688 L882.429 688.688 L882.989 688.688 L883.548 688.688 L884.107 688.688 L884.666 688.688 L885.226 688.688 L885.785 688.688 L886.344 688.688 L886.903 688.688 L887.463 688.688 L888.022 688.688 L888.581 688.688 L889.14 688.688 L889.7 688.688 L890.259 688.688 L890.818 688.688 L891.377 688.688 L891.937 688.688 L892.496 688.688 L893.055 688.688 L893.614 688.688 L894.174 688.688 L894.733 688.688 L895.292 688.688 L895.851 688.688 L896.411 688.688 L896.97 688.688 L897.529 688.688 L898.088 688.688 L898.648 688.688 L899.207 688.688 L899.766 688.688 L900.325 688.688 L900.885 688.688 L901.444 688.688 L902.003 688.688 L902.562 688.688 L903.122 688.688 L903.681 688.688 L904.24 688.688 L904.799 688.688 L905.359 688.688 L905.918 688.688 L906.477 688.688 L907.036 688.688 L907.596 688.688 L908.155 688.688 L908.714 688.688 L909.273 688.688 L909.833 688.688 L910.392 688.688 L910.951 688.688 L911.51 688.688 L912.07 688.688 L912.629 688.688 L913.188 688.688 L913.747 688.688 L914.307 688.688 L914.866 688.688 L915.425 688.688 L915.984 688.688 L916.544 688.688 L917.103 688.688 L917.662 688.688 L918.221 688.688 L918.781 688.688 L919.34 688.688 L919.899 688.688 L920.458 688.688 L921.018 688.688 L921.577 688.688 L922.136 688.688 L922.695 688.688 L923.255 688.688 L923.814 688.688 L924.373 688.688 L924.932 688.688 L925.492 688.688 L926.051 688.688 L926.61 688.688 L927.169 688.688 L927.729 688.688 L928.288 688.688 L928.847 688.688 L929.406 688.688 L929.966 688.688 L930.525 688.688 L931.084 688.688 L931.644 688.688 L932.203 688.688 L932.762 688.688 L933.321 688.688 L933.881 688.688 L934.44 688.688 L934.999 688.688 L935.558 688.688 L936.118 688.688 L936.677 688.688 L937.236 688.688 L937.795 688.688 L938.355 688.688 L938.914 688.688 L939.473 688.688 L940.032 688.688 L940.592 688.688 L941.151 688.688 L941.71 688.688 L942.269 688.688 L942.829 688.688 L943.388 688.688 L943.947 688.688 L944.506 688.688 L945.066 688.688 L945.625 688.688 L946.184 688.688 L946.743 688.688 L947.303 688.688 L947.862 688.688 L948.421 688.688 L948.98 688.688 L949.54 688.688 L950.099 688.688 L950.658 688.688 L951.217 688.688 L951.777 688.688 L952.336 688.688 L952.895 688.688 L953.454 688.688 L954.014 688.688 L954.573 688.688 L955.132 688.688 L955.691 688.688 L956.251 688.688 L956.81 688.688 L957.369 688.688 L957.928 688.688 L958.488 688.688 L959.047 688.688 L959.606 688.688 L960.165 688.688 L960.725 688.688 L961.284 688.688 L961.843 688.688 L962.402 688.688 L962.962 688.688 L963.521 688.688 L964.08 688.688 L964.639 688.688 L965.199 688.688 L965.758 688.688 L966.317 688.688 L966.876 688.688 L967.436 688.688 L967.995 688.688 L968.554 688.688 L969.113 688.688 L969.673 688.688 L970.232 688.688 L970.791 688.688 L971.35 688.688 L971.91 688.688 L972.469 688.688 L973.028 688.688 L973.587 688.688 L974.147 688.688 L974.706 688.688 L975.265 688.688 L975.824 688.688 L976.384 688.688 L976.943 688.688 L977.502 688.688 L978.061 688.688 L978.621 688.688 L979.18 688.688 L979.739 688.688 L980.298 688.688 L980.858 688.688 L981.417 688.688 L981.976 688.688 L982.535 688.688 L983.095 688.688 L983.654 688.688 L984.213 688.688 L984.772 688.688 L985.332 688.688 L985.891 688.688 L986.45 688.688 L987.009 688.688 L987.569 688.688 L988.128 688.688 L988.687 688.688 L989.246 688.688 L989.806 688.688 L990.365 688.688 L990.924 688.688 L991.483 688.688 L992.043 688.688 L992.602 688.688 L993.161 688.688 L993.72 688.688 L994.28 688.688 L994.839 688.688 L995.398 688.688 L995.957 688.688 L996.517 688.688 L997.076 688.688 L997.635 688.688 L998.194 688.688 L998.754 688.688 L999.313 688.688 L999.872 688.688 L1000.43 688.688 L1000.99 688.688 L1001.55 688.688 L1002.11 688.688 L1002.67 688.688 L1003.23 688.688 L1003.79 688.688 L1004.35 688.688 L1004.91 688.688 L1005.46 688.688 L1006.02 688.688 L1006.58 688.688 L1007.14 688.688 L1007.7 688.688 L1008.26 688.688 L1008.82 688.688 L1009.38 688.688 L1009.94 688.688 L1010.5 688.688 L1011.06 688.688 L1011.62 688.688 L1012.18 688.688 L1012.73 688.688 L1013.29 688.688 L1013.85 688.688 L1014.41 688.688 L1014.97 688.688 L1015.53 688.688 L1016.09 688.688 L1016.65 688.688 L1017.21 688.688 L1017.77 688.688 L1018.33 688.688 L1018.89 688.688 L1019.45 688.688 L1020.01 688.688 L1020.56 688.688 L1021.12 688.688 L1021.68 688.688 L1022.24 688.688 L1022.8 688.688 L1023.36 688.688 L1023.92 688.688 L1024.48 688.688 L1025.04 688.688 L1025.6 688.688 L1026.16 688.688 L1026.72 688.688 L1027.28 688.688 L1027.83 688.688 L1028.39 688.688 L1028.95 688.688 L1029.51 688.688 L1030.07 688.688 L1030.63 688.688 L1031.19 688.688 L1031.75 688.688 L1032.31 688.688 L1032.87 688.688 L1033.43 688.688 L1033.99 688.688 L1034.55 688.688 L1035.1 688.688 L1035.66 688.688 L1036.22 688.688 L1036.78 688.688 L1037.34 688.688 L1037.9 688.688 L1038.46 688.688 L1039.02 688.688 L1039.58 688.688 L1040.14 688.688 L1040.7 688.688 L1041.26 688.688 L1041.82 688.688 L1042.38 688.688 L1042.93 688.688 L1043.49 688.688 L1044.05 688.688 L1044.61 688.688 L1045.17 688.688 L1045.73 688.688 L1046.29 688.688 L1046.85 688.688 L1047.41 688.688 L1047.97 688.688 L1048.53 688.688 L1049.09 688.688 L1049.65 688.688 L1050.2 688.688 L1050.76 688.688 L1051.32 688.688 L1051.88 688.688 L1052.44 688.688 L1053 688.688 L1053.56 688.688 L1054.12 688.688 L1054.68 688.688 L1055.24 688.688 L1055.8 688.688 L1056.36 688.688 L1056.92 688.688 L1057.48 688.688 L1058.03 688.688 L1058.59 688.688 L1059.15 688.688 L1059.71 688.688 L1060.27 688.688 L1060.83 688.688 L1061.39 688.688 L1061.95 688.688 L1062.51 688.688 L1063.07 688.688 L1063.63 688.688 L1064.19 688.688 L1064.75 688.688 L1065.3 688.688 L1065.86 688.688 L1066.42 688.688 L1066.98 688.688 L1067.54 688.688 L1068.1 688.688 L1068.66 688.688 L1069.22 688.688 L1069.78 688.688 L1070.34 688.688 L1070.9 688.688 L1071.46 688.688 L1072.02 688.688 L1072.57 688.688 L1073.13 688.688 L1073.69 688.688 L1074.25 688.688 L1074.81 688.688 L1075.37 688.688 L1075.93 688.688 L1076.49 688.688 L1077.05 688.688 L1077.61 688.688 L1078.17 688.688 L1078.73 688.688 L1079.29 688.688 L1079.85 688.688 L1080.4 688.688 L1080.96 688.688 L1081.52 688.688 L1082.08 688.688 L1082.64 688.688 L1083.2 688.688 L1083.76 688.688 L1084.32 688.688 L1084.88 688.688 L1085.44 688.688 L1086 688.688 L1086.56 688.688 L1087.12 688.688 L1087.67 688.688 L1088.23 688.688 L1088.79 688.688 L1089.35 688.688 L1089.91 688.688 L1090.47 688.688 L1091.03 688.688 L1091.59 688.688 L1092.15 688.688 L1092.71 688.688 L1093.27 688.688 L1093.83 688.688 L1094.39 688.688 L1094.94 688.688 L1095.5 688.688 L1096.06 688.688 L1096.62 688.688 L1097.18 688.688 L1097.74 688.688 L1098.3 688.688 L1098.86 688.688 L1099.42 688.688 L1099.98 688.688 L1100.54 688.688 L1101.1 688.688 L1101.66 688.688 L1102.22 688.688 L1102.77 688.688 L1103.33 688.688 L1103.89 688.688 L1104.45 688.688 L1105.01 688.688 L1105.57 688.688 L1106.13 688.688 L1106.69 688.688 L1107.25 688.688 L1107.81 688.688 L1108.37 688.688 L1108.93 688.688 L1109.49 688.688 L1110.04 688.688 L1110.6 688.688 L1111.16 688.688 L1111.72 688.688 L1112.28 688.688 L1112.84 688.688 L1113.4 688.688 L1113.96 688.688 L1114.52 688.688 L1115.08 688.688 L1115.64 688.688 L1116.2 688.688 L1116.76 688.688 L1117.31 688.688 L1117.87 688.688 L1118.43 688.688 L1118.99 688.688 L1119.55 688.688 L1120.11 688.688 L1120.67 688.688 L1121.23 688.688 L1121.79 688.688 L1122.35 688.688 L1122.91 688.688 L1123.47 688.688 L1124.03 688.688 L1124.59 688.688 L1125.14 688.688 L1125.7 688.688 L1126.26 688.688 L1126.82 688.688 L1127.38 688.688 L1127.94 688.688 L1128.5 688.688 L1129.06 688.688 L1129.62 688.688 L1130.18 688.688 L1130.74 688.688 L1131.3 688.688 L1131.86 688.688 L1132.41 688.688 L1132.97 688.688 L1133.53 688.688 L1134.09 688.688 L1134.65 688.688 L1135.21 688.688 L1135.77 688.688 L1136.33 688.688 L1136.89 688.688 L1137.45 688.688 L1138.01 688.688 L1138.57 688.688 L1139.13 688.688 L1139.68 688.688 L1140.24 688.688 L1140.8 688.688 L1141.36 688.688 L1141.92 688.688 L1142.48 688.688 L1143.04 688.688 L1143.6 688.688 L1144.16 688.688 L1144.72 688.688 L1145.28 688.688 L1145.84 688.688 L1146.4 688.688 L1146.96 688.688 L1147.51 688.688 L1148.07 688.688 L1148.63 688.688 L1149.19 688.688 L1149.75 688.688 L1150.31 688.688 L1150.87 688.688 L1151.43 688.688 L1151.99 688.688 L1152.55 688.688 L1153.11 688.688 L1153.67 688.688 L1154.23 688.688 L1154.78 688.688 L1155.34 688.688 L1155.9 688.688 L1156.46 688.688 L1157.02 688.688 L1157.58 688.688 L1158.14 688.688 L1158.7 688.688 L1159.26 688.688 L1159.82 688.688 L1160.38 688.688 L1160.94 688.688 L1161.5 688.688 L1162.05 688.688 L1162.61 688.688 L1163.17 688.688 L1163.73 688.688 L1164.29 688.688 L1164.85 688.688 L1165.41 688.688 L1165.97 688.688 L1166.53 688.688 L1167.09 688.688 L1167.65 688.688 L1168.21 688.688 L1168.77 688.688 L1169.33 688.688 L1169.88 688.688 L1170.44 688.688 L1171 688.688 L1171.56 688.688 L1172.12 688.688 L1172.68 688.688 L1173.24 688.688 L1173.8 688.688 L1174.36 688.688 L1174.92 688.688 L1175.48 688.688 L1176.04 688.688 L1176.6 688.688 L1177.15 688.688 L1177.71 688.688 L1178.27 688.688 L1178.83 688.688 L1179.39 688.688 L1179.95 688.688 L1180.51 688.688 L1181.07 688.688 L1181.63 688.688 L1182.19 688.688 L1182.75 688.688 L1183.31 688.688 L1183.87 688.688 L1184.43 688.688 L1184.98 688.688 L1185.54 688.688 L1186.1 688.688 L1186.66 688.688 L1187.22 688.688 L1187.78 688.688 L1188.34 688.688 L1188.9 688.688 L1189.46 688.688 L1190.02 688.688 L1190.58 688.688 L1191.14 688.688 L1191.7 688.688 L1192.25 688.688 L1192.81 688.688 L1193.37 688.688 L1193.93 688.688 L1194.49 688.688 L1195.05 688.688 L1195.61 688.688 L1196.17 688.688 L1196.73 688.688 L1197.29 688.688 L1197.85 688.688 L1198.41 688.688 L1198.97 688.688 L1199.52 688.688 L1200.08 688.688 L1200.64 688.688 L1201.2 688.688 L1201.76 688.688 L1202.32 688.688 L1202.88 688.688 L1203.44 688.688 L1204 688.688 L1204.56 688.688 L1205.12 688.688 L1205.68 688.688 L1206.24 688.688 L1206.8 688.688 L1207.35 688.688 L1207.91 688.688 L1208.47 688.688 L1209.03 688.688 L1209.59 688.688 L1210.15 688.688 L1210.71 688.688 L1211.27 688.688 L1211.83 688.688 L1212.39 688.688 L1212.95 688.688 L1213.51 688.688 L1214.07 688.688 L1214.62 688.688 L1215.18 688.688 L1215.74 688.688 L1216.3 688.688 L1216.86 688.688 L1217.42 688.688 L1217.98 688.688 L1218.54 688.688 L1219.1 688.688 L1219.66 688.688 L1220.22 688.688 L1220.78 688.688 L1221.34 688.688 L1221.89 688.688 L1222.45 688.688 L1223.01 688.688 L1223.57 688.688 L1224.13 688.688 L1224.69 688.688 L1225.25 688.688 L1225.81 688.688 L1226.37 688.688 L1226.93 688.688 L1227.49 688.688 L1228.05 688.688 L1228.61 688.688 L1229.17 688.688 L1229.72 688.688 L1230.28 688.688 L1230.84 688.688 L1231.4 688.688 L1231.96 688.688 L1232.52 688.688 L1233.08 688.688 L1233.64 688.688 L1234.2 688.688 L1234.76 688.688 L1235.32 688.688 L1235.88 688.688 L1236.44 688.688 L1236.99 688.688 L1237.55 688.688 L1238.11 688.688 L1238.67 688.688 L1239.23 688.688 L1239.79 688.688 L1240.35 688.688 L1240.91 688.688 L1241.47 688.688 L1242.03 688.688 L1242.59 688.688 L1243.15 688.688 L1243.71 688.688 L1244.26 688.688 L1244.82 688.688 L1245.38 688.688 L1245.94 688.688 L1246.5 688.688 L1247.06 688.688 L1247.62 688.688 L1248.18 688.688 L1248.74 688.688 L1249.3 688.688 L1249.86 688.688 L1250.42 688.688 L1250.98 688.688 L1251.54 688.688 L1252.09 688.688 L1252.65 688.688 L1253.21 688.688 L1253.77 688.688 L1254.33 688.688 L1254.89 688.688 L1255.45 688.688 L1256.01 688.688 L1256.57 688.688 L1257.13 688.688 L1257.69 688.688 L1258.25 688.688 L1258.81 688.688 L1259.36 688.688 L1259.92 688.688 L1260.48 688.688 L1261.04 688.688 L1261.6 688.688 L1262.16 688.688 L1262.72 688.688 L1263.28 688.688 L1263.84 688.688 L1264.4 688.688 L1264.96 688.688 L1265.52 688.688 L1266.08 688.688 L1266.63 688.688 L1267.19 688.688 L1267.75 688.688 L1268.31 688.688 L1268.87 688.688 L1269.43 688.688 L1269.99 688.688 L1270.55 688.688 L1271.11 688.688 L1271.67 688.688 L1272.23 688.688 L1272.79 688.688 L1273.35 688.688 L1273.91 688.688 L1274.46 688.688 L1275.02 688.688 L1275.58 688.688 L1276.14 688.688 L1276.7 688.688 L1277.26 688.688 L1277.82 688.688 L1278.38 688.688 L1278.94 688.688 L1279.5 688.688 L1280.06 688.688 L1280.62 688.688 L1281.18 688.688 L1281.73 688.688 L1282.29 688.688 L1282.85 688.688 L1283.41 688.688 L1283.97 688.688 L1284.53 688.688 L1285.09 688.688 L1285.65 688.688 L1286.21 688.688 L1286.77 688.688 L1287.33 688.688 L1287.89 688.688 L1288.45 688.688 L1289 688.688 L1289.56 688.688 L1290.12 688.688 L1290.68 688.688 L1291.24 688.688 L1291.8 688.688 L1292.36 688.688 L1292.92 688.688 L1293.48 688.688 L1294.04 688.688 L1294.6 688.688 L1295.16 688.688 L1295.72 688.688 L1296.28 688.688 L1296.83 688.688 L1297.39 688.688 L1297.95 688.688 L1298.51 688.688 L1299.07 688.688 L1299.63 688.688 L1300.19 688.688 L1300.75 688.688 L1301.31 688.688 L1301.87 688.688 L1302.43 688.688 L1302.99 688.688 L1303.55 688.688 L1304.1 688.688 L1304.66 688.688 L1305.22 688.688 L1305.78 688.688 L1306.34 688.688 L1306.9 688.688 L1307.46 688.688 L1308.02 688.688 L1308.58 688.688 L1309.14 688.688 L1309.7 688.688 L1310.26 688.688 L1310.82 688.688 L1311.38 688.688 L1311.93 688.688 L1312.49 688.688 L1313.05 688.688 L1313.61 688.688 L1314.17 688.688 L1314.73 688.688 L1315.29 688.688 L1315.85 688.688 L1316.41 688.688 L1316.97 688.688 L1317.53 688.688 L1318.09 688.688 L1318.65 688.688 L1319.2 688.688 L1319.76 688.688 L1320.32 688.688 L1320.88 688.688 L1321.44 688.688 L1322 688.688 L1322.56 688.688 L1323.12 688.688 L1323.68 688.688 L1324.24 688.688 L1324.8 688.688 L1325.36 688.688 L1325.92 688.688 L1326.47 688.688 L1327.03 688.688 L1327.59 688.688 L1328.15 688.688 L1328.71 688.688 L1329.27 688.688 L1329.83 688.688 L1330.39 688.688 L1330.95 688.688 L1331.51 688.688 L1332.07 688.688 L1332.63 688.688 L1333.19 688.688 L1333.75 688.688 L1334.3 688.688 L1334.86 688.688 L1335.42 688.688 L1335.98 688.688 L1336.54 688.688 L1337.1 688.688 L1337.66 688.688 L1338.22 688.688 L1338.78 688.688 L1339.34 688.688 L1339.9 688.688 L1340.46 688.688 L1341.02 688.688 L1341.57 688.688 L1342.13 688.688 L1342.69 688.688 L1343.25 688.688 L1343.81 688.688 L1344.37 688.688 L1344.93 688.688 L1345.49 688.688 L1346.05 688.688 L1346.61 688.688 L1347.17 688.688 L1347.73 688.688 L1348.29 688.688 L1348.84 688.688 L1349.4 688.688 L1349.96 688.688 L1350.52 688.688 L1351.08 688.688 L1351.64 688.688 L1352.2 688.688 L1352.76 688.688 L1353.32 688.688 L1353.88 688.688 L1354.44 688.688 L1355 688.688 L1355.56 688.688 L1356.12 688.688 L1356.67 688.688 L1357.23 688.688 L1357.79 688.688 L1358.35 688.688 L1358.91 688.688 L1359.47 688.688 L1360.03 688.688 L1360.59 688.688 L1361.15 688.688 L1361.71 688.688 L1362.27 688.688 L1362.83 688.688 L1363.39 688.688 L1363.94 688.688 L1364.5 688.688 L1365.06 688.688 L1365.62 688.688 L1366.18 688.688 L1366.74 688.688 L1367.3 688.688 L1367.86 688.688 L1368.42 688.688 L1368.98 688.688 L1369.54 688.688 L1370.1 688.688 L1370.66 688.688 L1371.21 688.688 L1371.77 688.688 L1372.33 688.688 L1372.89 688.688 L1373.45 688.688 L1374.01 688.688 L1374.57 688.688 L1375.13 688.688 L1375.69 688.688 L1376.25 688.688 L1376.81 688.688 L1377.37 688.688 L1377.93 688.688 L1378.49 688.688 L1379.04 688.688 L1379.6 688.688 L1380.16 688.688 L1380.72 688.688 L1381.28 688.688 L1381.84 688.688 L1382.4 688.688 L1382.96 688.688 L1383.52 688.688 L1384.08 688.688 L1384.64 688.688 L1385.2 688.688 L1385.76 688.688 L1386.31 688.688 L1386.87 688.688 L1387.43 688.688 L1387.99 688.688 L1388.55 688.688 L1389.11 688.688 L1389.67 688.688 L1390.23 688.688 L1390.79 688.688 L1391.35 688.688 L1391.91 688.688 L1392.47 688.688 L1393.03 688.688 L1393.58 688.688 L1394.14 688.688 L1394.7 688.688 L1395.26 688.688 L1395.82 688.688 L1396.38 688.688 L1396.94 688.688 L1397.5 688.688 L1398.06 688.688 L1398.62 688.688 L1399.18 688.688 L1399.74 688.688 L1400.3 688.688 L1400.86 688.688 L1401.41 688.688 L1401.97 688.688 L1402.53 688.688 L1403.09 688.688 L1403.65 688.688 L1404.21 688.688 L1404.77 688.688 L1405.33 688.688 L1405.89 688.688 L1406.45 688.688 L1407.01 688.688 L1407.57 688.688 L1408.13 688.688 L1408.68 688.688 L1409.24 688.688 L1409.8 688.688 L1410.36 688.688 L1410.92 688.688 L1411.48 688.688 L1412.04 688.688 L1412.6 688.688 L1413.16 688.688 L1413.72 688.688 L1414.28 688.688 L1414.84 688.688 L1415.4 688.688 L1415.95 688.688 L1416.51 688.688 L1417.07 688.688 L1417.63 688.688 L1418.19 688.688 L1418.75 688.688 L1419.31 688.688 L1419.87 688.688 L1420.43 688.688 L1420.99 688.688 L1421.55 688.688 L1422.11 688.688 L1422.67 688.688 L1423.23 688.688 L1423.78 688.688 L1424.34 688.688 L1424.9 688.688 L1425.46 688.688 L1426.02 688.688 L1426.58 688.688 L1427.14 688.688 L1427.7 688.688 L1428.26 688.688 L1428.82 688.688 L1429.38 688.688 L1429.94 688.688 L1430.5 688.688 L1431.05 688.688 L1431.61 688.688 L1432.17 688.688 L1432.73 688.688 L1433.29 688.688 L1433.85 688.688 L1434.41 688.688 L1434.97 688.688 L1435.53 688.688 L1436.09 688.688 L1436.65 688.688 L1437.21 688.688 L1437.77 688.688 L1438.33 688.688 L1438.88 688.688 L1439.44 688.688 L1440 688.688 L1440.56 688.688 L1441.12 688.688 L1441.68 688.688 L1442.24 688.688 L1442.8 688.688 L1443.36 688.688 L1443.92 688.688 L1444.48 688.688 L1445.04 688.688 L1445.6 688.688 L1446.15 688.688 L1446.71 688.688 L1447.27 688.688 L1447.83 688.688 L1448.39 688.688 L1448.95 688.688 L1449.51 688.688 L1450.07 688.688 L1450.63 688.688 L1451.19 688.688 L1451.75 688.688 L1452.31 688.688 L1452.87 688.688 L1453.42 688.688 L1453.98 688.688 L1454.54 688.688 L1455.1 688.688 L1455.66 688.688 L1456.22 688.688 L1456.78 688.688 L1457.34 688.688 L1457.9 688.688 L1458.46 688.688 L1459.02 688.688 L1459.58 688.688 L1460.14 688.688 L1460.7 688.688 L1461.25 688.688 L1461.81 688.688 L1462.37 688.688 L1462.93 688.688 L1463.49 688.688 L1464.05 688.688 L1464.61 688.688 L1465.17 688.688 L1465.73 688.688 L1466.29 688.688 L1466.85 688.688 L1467.41 688.688 L1467.97 688.688 L1468.52 688.688 L1469.08 688.688 L1469.64 688.688 L1470.2 688.688 L1470.76 688.688 L1471.32 688.688 L1471.88 688.688 L1472.44 688.688 L1473 688.688 L1473.56 688.688 L1474.12 688.688 L1474.68 688.688 L1475.24 688.688 L1475.79 688.688 L1476.35 688.688 L1476.91 688.688 L1477.47 688.688 L1478.03 688.688 L1478.59 688.688 L1479.15 688.688 L1479.71 688.688 L1480.27 688.688 L1480.83 688.688 L1481.39 688.688 L1481.95 688.688 L1482.51 688.688 L1483.07 688.688 L1483.62 688.688 L1484.18 688.688 L1484.74 688.688 L1485.3 688.688 L1485.86 688.688 L1486.42 688.688 L1486.98 688.688 L1487.54 688.688 L1488.1 688.688 L1488.66 688.688 L1489.22 688.688 L1489.78 688.688 L1490.34 688.688 L1490.89 688.688 L1491.45 688.688 L1492.01 688.688 L1492.57 688.688 L1493.13 688.688 L1493.69 688.688 L1494.25 688.688 L1494.81 688.688 L1495.37 688.688 L1495.93 688.688 L1496.49 688.688 L1497.05 688.688 L1497.61 688.688 L1498.16 688.688 L1498.72 688.688 L1499.28 688.688 L1499.84 688.688 L1500.4 688.688 L1500.96 688.688 L1501.52 688.688 L1502.08 688.688 L1502.64 688.688 L1503.2 688.688 L1503.76 688.688 L1504.32 688.688 L1504.88 688.688 L1505.44 688.688 L1505.99 688.688 L1506.55 688.688 L1507.11 688.688 L1507.67 688.688 L1508.23 688.688 L1508.79 688.688 L1509.35 688.688 L1509.91 688.688 L1510.47 688.688 L1511.03 688.688 L1511.59 688.688 L1512.15 688.688 L1512.71 688.688 L1513.26 688.688 L1513.82 688.688 L1514.38 688.688 L1514.94 688.688 L1515.5 688.688 L1516.06 688.688 L1516.62 688.688 L1517.18 688.688 L1517.74 688.688 L1518.3 688.688 L1518.86 688.688 L1519.42 688.688 L1519.98 688.688 L1520.53 688.688 L1521.09 688.688 L1521.65 688.688 L1522.21 688.688 L1522.77 688.688 L1523.33 688.688 L1523.89 688.688 L1524.45 688.688 L1525.01 688.688 L1525.57 688.688 L1526.13 688.688 L1526.69 688.688 L1527.25 688.688 L1527.81 688.688 L1528.36 688.688 L1528.92 688.688 L1529.48 688.688 L1530.04 688.688 L1530.6 688.688 L1531.16 688.688 L1531.72 688.688 L1532.28 688.688 L1532.84 688.688 L1533.4 688.688 L1533.96 688.688 L1534.52 688.688 L1535.08 688.688 L1535.63 688.688 L1536.19 688.688 L1536.75 688.688 L1537.31 688.688 L1537.87 688.688 L1538.43 688.688 L1538.99 688.688 L1539.55 688.688 L1540.11 688.688 L1540.67 688.688 L1541.23 688.688 L1541.79 688.688 L1542.35 688.688 L1542.9 688.688 L1543.46 688.688 L1544.02 688.688 L1544.58 688.688 L1545.14 688.688 L1545.7 688.688 L1546.26 688.688 L1546.82 688.688 L1547.38 688.688 L1547.94 688.688 L1548.5 688.688 L1549.06 688.688 L1549.62 688.688 L1550.18 688.688 L1550.73 688.688 L1551.29 688.688 L1551.85 688.688 L1552.41 688.688 L1552.97 688.688 L1553.53 688.688 L1554.09 688.688 L1554.65 688.688 L1555.21 688.688 L1555.77 688.688 L1556.33 688.688 L1556.89 688.688 L1557.45 688.688 L1558 688.688 L1558.56 688.688 L1559.12 688.688 L1559.68 688.688 L1560.24 688.688 L1560.8 688.688 L1561.36 688.688 L1561.92 688.688 L1562.48 688.688 L1563.04 688.688 L1563.6 688.688 L1564.16 688.688 L1564.72 688.688 L1565.28 688.688 L1565.83 688.688 L1566.39 688.688 L1566.95 688.688 L1567.51 688.688 L1568.07 688.688 L1568.63 688.688 L1569.19 688.688 L1569.75 688.688 L1570.31 688.688 L1570.87 688.688 L1571.43 688.688 L1571.99 688.688 L1572.55 688.688 L1573.1 688.688 L1573.66 688.688 L1574.22 688.688 L1574.78 688.688 L1575.34 688.688 L1575.9 688.688 L1576.46 688.688 L1577.02 688.688 L1577.58 688.688 L1578.14 688.688 L1578.7 688.688 L1579.26 688.688 L1579.82 688.688 L1580.37 688.688 L1580.93 688.688 L1581.49 688.688 L1582.05 688.688 L1582.61 688.688 L1583.17 688.688 L1583.73 688.688 L1584.29 688.688 L1584.85 688.688 L1585.41 688.688 L1585.97 688.688 L1586.53 688.688 L1587.09 688.688 L1587.65 688.688 L1588.2 688.688 L1588.76 688.688 L1589.32 688.688 L1589.88 688.688 L1590.44 688.688 L1591 688.688 L1591.56 688.688 L1592.12 688.688 L1592.68 688.688 L1593.24 688.688 L1593.8 688.688 L1594.36 688.688 L1594.92 688.688 L1595.47 688.688 L1596.03 688.688 L1596.59 688.688 L1597.15 688.688 L1597.71 688.688 L1598.27 688.688 L1598.83 688.688 L1599.39 688.688 L1599.95 688.688 L1600.51 688.688 L1601.07 688.688 L1601.63 688.688 L1602.19 688.688 L1602.74 688.688 L1603.3 688.688 L1603.86 688.688 L1604.42 688.688 L1604.98 688.688 L1605.54 688.688 L1606.1 688.688 L1606.66 688.688 L1607.22 688.688 L1607.78 688.688 L1608.34 688.688 L1608.9 688.688 L1609.46 688.688 L1610.02 688.688 L1610.57 688.688 L1611.13 688.688 L1611.69 688.688 L1612.25 688.688 L1612.81 688.688 L1613.37 688.688 L1613.93 688.688 L1614.49 688.688 L1615.05 688.688 L1615.61 688.688 L1616.17 688.688 L1616.73 688.688 L1617.29 688.688 L1617.84 688.688 L1618.4 688.688 L1618.96 688.688 L1619.52 688.688 L1620.08 688.688 L1620.64 688.688 L1621.2 688.688 L1621.76 688.688 L1622.32 688.688 L1622.88 688.688 L1623.44 688.688 L1624 688.688 L1624.56 688.688 L1625.11 688.688 L1625.67 688.688 L1626.23 688.688 L1626.79 688.688 L1627.35 688.688 L1627.91 688.688 L1628.47 688.688 L1629.03 688.688 L1629.59 688.688 L1630.15 688.688 L1630.71 688.688 L1631.27 688.688 L1631.83 688.688 L1632.39 688.688 L1632.94 688.688 L1633.5 688.688 L1634.06 688.688 L1634.62 688.688 L1635.18 688.688 L1635.74 688.688 L1636.3 688.688 L1636.86 688.688 L1637.42 688.688 L1637.98 688.688 L1638.54 688.688 L1639.1 688.688 L1639.66 688.688 L1640.21 688.688 L1640.77 688.688 L1641.33 688.688 L1641.89 688.688 L1642.45 688.688 L1643.01 688.688 L1643.57 688.688 L1644.13 688.688 L1644.69 688.688 L1645.25 688.688 L1645.81 688.688 L1646.37 688.688 L1646.93 688.688 L1647.48 688.688 L1648.04 688.688 L1648.6 688.688 L1649.16 688.688 L1649.72 688.688 L1650.28 688.688 L1650.84 688.688 L1651.4 688.688 L1651.96 688.688 L1652.52 688.688 L1653.08 688.688 L1653.64 688.688 L1654.2 688.688 L1654.76 688.688 L1655.31 688.688 L1655.87 688.688 L1656.43 688.688 L1656.99 688.688 L1657.55 688.688 L1658.11 688.688 L1658.67 688.688 L1659.23 688.688 L1659.79 688.688 L1660.35 688.688 L1660.91 688.688 L1661.47 688.688 L1662.03 688.688 L1662.58 688.688 L1663.14 688.688 L1663.7 688.688 L1664.26 688.688 L1664.82 688.688 L1665.38 688.688 L1665.94 688.688 L1666.5 688.688 L1667.06 688.688 L1667.62 688.688 L1668.18 688.688 L1668.74 688.688 L1669.3 688.688 L1669.85 688.688 L1670.41 688.688 L1670.97 688.688 L1671.53 688.688 L1672.09 688.688 L1672.65 688.688 L1673.21 688.688 L1673.77 688.688 L1674.33 688.688 L1674.89 688.688 L1675.45 688.688 L1676.01 688.688 L1676.57 688.688 L1677.13 688.688 L1677.68 688.688 L1678.24 688.688 L1678.8 688.688 L1679.36 688.688 L1679.92 688.688 L1680.48 688.688 L1681.04 688.688 L1681.6 688.688 L1682.16 688.688 L1682.72 688.688 L1683.28 688.688 L1683.84 688.688 L1684.4 688.688 L1684.95 688.688 L1685.51 688.688 L1686.07 688.688 L1686.63 688.688 L1687.19 688.688 L1687.75 688.688 L1688.31 688.688 L1688.87 688.688 L1689.43 688.688 L1689.99 688.688 L1690.55 688.688 L1691.11 688.688 L1691.67 688.688 L1692.23 688.688 L1692.78 688.688 L1693.34 688.688 L1693.9 688.688 L1694.46 688.688 L1695.02 688.688 L1695.58 688.688 L1696.14 688.688 L1696.7 688.688 L1697.26 688.688 L1697.82 688.688 L1698.38 688.688 L1698.94 688.688 L1699.5 688.688 L1700.05 688.688 L1700.61 688.688 L1701.17 688.688 L1701.73 688.688 L1702.29 688.688 L1702.85 688.688 L1703.41 688.688 L1703.97 688.688 L1704.53 688.688 L1705.09 688.688 L1705.65 688.688 L1706.21 688.688 L1706.77 688.688 L1707.32 688.688 L1707.88 688.688 L1708.44 688.688 L1709 688.688 L1709.56 688.688 L1710.12 688.688 L1710.68 688.688 L1711.24 688.688 L1711.8 688.688 L1712.36 688.688 L1712.92 688.688 L1713.48 688.688 L1714.04 688.688 L1714.6 688.688 L1715.15 688.688 L1715.71 688.688 L1716.27 688.688 L1716.83 688.688 L1717.39 688.688 L1717.95 688.688 L1718.51 688.688 L1719.07 688.688 L1719.63 688.688 L1720.19 688.688 L1720.75 688.688 L1721.31 688.688 L1721.87 688.688 L1722.42 688.688 L1722.98 688.688 L1723.54 688.688 L1724.1 688.688 L1724.66 688.688 L1725.22 688.688 L1725.78 688.688 L1726.34 688.688 L1726.9 688.688 L1727.46 688.688 L1728.02 688.688 L1728.58 688.688 L1729.14 688.688 L1729.69 688.688 L1730.25 688.688 L1730.81 688.688 L1731.37 688.688 L1731.93 688.688 L1732.49 688.688 L1733.05 688.688 L1733.61 688.688 L1734.17 688.688 L1734.73 688.688 L1735.29 688.688 L1735.85 688.688 L1736.41 688.688 L1736.97 688.688 L1737.52 688.688 L1738.08 688.688 L1738.64 688.688 L1739.2 688.688 L1739.76 688.688 L1740.32 688.688 L1740.88 688.688 L1741.44 688.688 L1742 688.688 L1742.56 688.688 L1743.12 688.688 L1743.68 688.688 L1744.24 688.688 L1744.79 688.688 L1745.35 688.688 L1745.91 688.688 L1746.47 688.688 L1747.03 688.688 L1747.59 688.688 L1748.15 688.688 L1748.71 688.688 L1749.27 688.688 L1749.83 688.688 L1750.39 688.688 L1750.95 688.688 L1751.51 688.688 L1752.06 688.688 L1752.62 688.688 L1753.18 688.688 L1753.74 688.688 L1754.3 688.688 L1754.86 688.688 L1755.42 688.688 L1755.98 688.688 L1756.54 688.688 L1757.1 688.688 L1757.66 688.688 L1758.22 688.688 L1758.78 688.688 L1759.34 688.688 L1759.89 688.688 L1760.45 688.688 L1761.01 688.688 L1761.57 688.688 L1762.13 688.688 L1762.69 688.688 L1763.25 688.688 L1763.81 688.688 L1764.37 688.688 L1764.93 688.688 L1765.49 688.688 L1766.05 688.688 L1766.61 688.688 L1767.16 688.688 L1767.72 688.688 L1768.28 688.688 L1768.84 688.688 L1769.4 688.688 L1769.96 688.688 L1770.52 688.688 L1771.08 688.688 L1771.64 688.688 L1772.2 688.688 L1772.76 688.688 L1773.32 688.688 L1773.88 688.688 L1774.43 688.688 L1774.99 688.688 L1775.55 688.688 L1776.11 688.688 L1776.67 688.688 L1777.23 688.688 L1777.79 688.688 L1778.35 688.688 L1778.91 688.688 L1779.47 688.688 L1780.03 688.688 L1780.59 688.688 L1781.15 688.688 L1781.71 688.688 L1782.26 688.688 L1782.82 688.688 L1783.38 688.688 L1783.94 688.688 L1784.5 688.688 L1785.06 688.688 L1785.62 688.688 L1786.18 688.688 L1786.74 688.688 L1787.3 688.688 L1787.86 688.688 L1788.42 688.688 L1788.98 688.688 L1789.53 688.688 L1790.09 688.688 L1790.65 688.688 L1791.21 688.688 L1791.77 688.688 L1792.33 688.688 L1792.89 688.688 L1793.45 688.688 L1794.01 688.688 L1794.57 688.688 L1795.13 688.688 L1795.69 688.688 L1796.25 688.688 L1796.8 688.688 L1797.36 688.688 L1797.92 688.688 L1798.48 688.688 L1799.04 688.688 L1799.6 688.688 L1800.16 688.688 L1800.72 688.688 L1801.28 688.688 L1801.84 688.688 L1802.4 688.688 L1802.96 688.688 L1803.52 688.688 L1804.08 688.688 L1804.63 688.688 L1805.19 688.688 L1805.75 688.688 L1806.31 688.688 L1806.87 688.688 L1807.43 688.688 L1807.99 688.688 L1808.55 688.688 L1809.11 688.688 L1809.67 688.688 L1810.23 688.688 L1810.79 688.688 L1811.35 688.688 L1811.9 688.688 L1812.46 688.688 L1813.02 688.688 L1813.58 688.688 L1814.14 688.688 L1814.7 688.688 L1815.26 688.688 L1815.82 688.688 L1816.38 688.688 L1816.94 688.688 L1817.5 688.688 L1818.06 688.688 L1818.62 688.688 L1819.18 688.688 L1819.73 688.688 L1820.29 688.688 L1820.85 688.688 L1821.41 688.688 L1821.97 688.688 L1822.53 688.688 L1823.09 688.688 L1823.65 688.688 L1824.21 688.688 L1824.77 688.688 L1825.33 688.688 L1825.89 688.688 L1826.45 688.688 L1827 688.688 L1827.56 688.688 L1828.12 688.688 L1828.68 688.688 L1829.24 688.688 L1829.8 688.688 L1830.36 688.688 L1830.92 688.688 L1831.48 688.688 L1832.04 688.688 L1832.6 688.688 L1833.16 688.688 L1833.72 688.688 L1834.27 688.688 L1834.83 688.688 L1835.39 688.688 L1835.95 688.688 L1836.51 688.688 L1837.07 688.688 L1837.63 688.688 L1838.19 688.688 L1838.19 682.342 L1837.63 682.342 L1837.07 682.342 L1836.51 682.342 L1835.95 682.342 L1835.39 682.342 L1834.83 682.342 L1834.27 682.342 L1833.72 682.342 L1833.16 682.342 L1832.6 682.342 L1832.04 682.342 L1831.48 682.342 L1830.92 682.342 L1830.36 682.342 L1829.8 682.342 L1829.24 682.342 L1828.68 682.342 L1828.12 682.342 L1827.56 682.342 L1827 682.342 L1826.45 682.342 L1825.89 682.342 L1825.33 682.342 L1824.77 682.342 L1824.21 682.342 L1823.65 682.342 L1823.09 682.342 L1822.53 682.342 L1821.97 682.342 L1821.41 682.342 L1820.85 682.342 L1820.29 682.342 L1819.73 682.342 L1819.18 682.342 L1818.62 682.342 L1818.06 682.342 L1817.5 682.342 L1816.94 682.342 L1816.38 682.342 L1815.82 682.342 L1815.26 682.342 L1814.7 682.342 L1814.14 682.342 L1813.58 682.342 L1813.02 682.342 L1812.46 682.342 L1811.9 682.342 L1811.35 682.342 L1810.79 682.342 L1810.23 682.342 L1809.67 682.342 L1809.11 682.342 L1808.55 682.342 L1807.99 682.342 L1807.43 682.342 L1806.87 682.342 L1806.31 682.342 L1805.75 682.342 L1805.19 682.342 L1804.63 682.342 L1804.08 682.342 L1803.52 682.342 L1802.96 682.342 L1802.4 682.342 L1801.84 682.342 L1801.28 682.342 L1800.72 682.342 L1800.16 682.342 L1799.6 682.342 L1799.04 682.342 L1798.48 682.342 L1797.92 682.342 L1797.36 682.342 L1796.8 682.342 L1796.25 682.342 L1795.69 682.342 L1795.13 682.342 L1794.57 682.342 L1794.01 682.342 L1793.45 682.342 L1792.89 682.342 L1792.33 682.342 L1791.77 682.342 L1791.21 682.342 L1790.65 682.342 L1790.09 682.342 L1789.53 682.342 L1788.98 682.342 L1788.42 682.342 L1787.86 682.342 L1787.3 682.342 L1786.74 682.342 L1786.18 682.342 L1785.62 682.342 L1785.06 682.342 L1784.5 682.342 L1783.94 682.342 L1783.38 682.342 L1782.82 682.342 L1782.26 682.342 L1781.71 682.342 L1781.15 682.342 L1780.59 682.342 L1780.03 682.342 L1779.47 682.342 L1778.91 682.342 L1778.35 682.342 L1777.79 682.342 L1777.23 682.342 L1776.67 682.342 L1776.11 682.342 L1775.55 682.342 L1774.99 682.342 L1774.43 682.342 L1773.88 682.342 L1773.32 682.342 L1772.76 682.342 L1772.2 682.342 L1771.64 682.342 L1771.08 682.342 L1770.52 682.342 L1769.96 682.342 L1769.4 682.342 L1768.84 682.342 L1768.28 682.342 L1767.72 682.342 L1767.16 682.342 L1766.61 682.342 L1766.05 682.342 L1765.49 682.342 L1764.93 682.342 L1764.37 682.342 L1763.81 682.342 L1763.25 682.342 L1762.69 682.342 L1762.13 682.342 L1761.57 682.342 L1761.01 682.342 L1760.45 682.342 L1759.89 682.342 L1759.34 682.342 L1758.78 682.342 L1758.22 682.342 L1757.66 682.342 L1757.1 682.342 L1756.54 682.342 L1755.98 682.342 L1755.42 682.342 L1754.86 682.342 L1754.3 682.342 L1753.74 682.342 L1753.18 682.342 L1752.62 682.342 L1752.06 682.342 L1751.51 682.342 L1750.95 682.342 L1750.39 682.342 L1749.83 682.342 L1749.27 682.342 L1748.71 682.342 L1748.15 682.342 L1747.59 682.342 L1747.03 682.342 L1746.47 682.342 L1745.91 682.342 L1745.35 682.342 L1744.79 682.342 L1744.24 682.342 L1743.68 682.342 L1743.12 682.342 L1742.56 682.342 L1742 682.342 L1741.44 682.342 L1740.88 682.342 L1740.32 682.342 L1739.76 682.342 L1739.2 682.342 L1738.64 682.342 L1738.08 682.342 L1737.52 682.342 L1736.97 682.342 L1736.41 682.342 L1735.85 682.342 L1735.29 682.342 L1734.73 682.342 L1734.17 682.342 L1733.61 682.342 L1733.05 682.342 L1732.49 682.342 L1731.93 682.342 L1731.37 682.342 L1730.81 682.342 L1730.25 682.342 L1729.69 682.342 L1729.14 682.342 L1728.58 682.342 L1728.02 682.342 L1727.46 682.342 L1726.9 682.342 L1726.34 682.342 L1725.78 682.342 L1725.22 682.342 L1724.66 682.342 L1724.1 682.342 L1723.54 682.342 L1722.98 682.342 L1722.42 682.342 L1721.87 682.342 L1721.31 682.342 L1720.75 682.342 L1720.19 682.342 L1719.63 682.342 L1719.07 682.342 L1718.51 682.342 L1717.95 682.342 L1717.39 682.342 L1716.83 682.342 L1716.27 682.342 L1715.71 682.342 L1715.15 682.342 L1714.6 682.342 L1714.04 682.342 L1713.48 682.342 L1712.92 682.342 L1712.36 682.342 L1711.8 682.342 L1711.24 682.342 L1710.68 682.342 L1710.12 682.342 L1709.56 682.342 L1709 682.342 L1708.44 682.342 L1707.88 682.342 L1707.32 682.342 L1706.77 682.342 L1706.21 682.342 L1705.65 682.342 L1705.09 682.342 L1704.53 682.342 L1703.97 682.342 L1703.41 682.342 L1702.85 682.342 L1702.29 682.342 L1701.73 682.342 L1701.17 682.342 L1700.61 682.342 L1700.05 682.342 L1699.5 682.342 L1698.94 682.342 L1698.38 682.342 L1697.82 682.342 L1697.26 682.342 L1696.7 682.342 L1696.14 682.342 L1695.58 682.342 L1695.02 682.342 L1694.46 682.342 L1693.9 682.342 L1693.34 682.342 L1692.78 682.342 L1692.23 682.342 L1691.67 682.342 L1691.11 682.342 L1690.55 682.342 L1689.99 682.342 L1689.43 682.342 L1688.87 682.342 L1688.31 682.342 L1687.75 682.342 L1687.19 682.342 L1686.63 682.342 L1686.07 682.342 L1685.51 682.342 L1684.95 682.342 L1684.4 682.342 L1683.84 682.342 L1683.28 682.342 L1682.72 682.342 L1682.16 682.342 L1681.6 682.342 L1681.04 682.342 L1680.48 682.342 L1679.92 682.342 L1679.36 682.342 L1678.8 682.342 L1678.24 682.342 L1677.68 682.342 L1677.13 682.342 L1676.57 682.342 L1676.01 682.342 L1675.45 682.342 L1674.89 682.342 L1674.33 682.342 L1673.77 682.342 L1673.21 682.342 L1672.65 682.342 L1672.09 682.342 L1671.53 682.342 L1670.97 682.342 L1670.41 682.342 L1669.85 682.342 L1669.3 682.342 L1668.74 682.342 L1668.18 682.342 L1667.62 682.342 L1667.06 682.342 L1666.5 682.342 L1665.94 682.342 L1665.38 682.342 L1664.82 682.342 L1664.26 682.342 L1663.7 682.342 L1663.14 682.342 L1662.58 682.342 L1662.03 682.342 L1661.47 682.342 L1660.91 682.342 L1660.35 682.342 L1659.79 682.342 L1659.23 682.342 L1658.67 682.342 L1658.11 682.342 L1657.55 682.342 L1656.99 682.342 L1656.43 682.342 L1655.87 682.342 L1655.31 682.342 L1654.76 682.342 L1654.2 682.342 L1653.64 682.342 L1653.08 682.342 L1652.52 682.342 L1651.96 682.342 L1651.4 682.342 L1650.84 682.342 L1650.28 682.342 L1649.72 682.342 L1649.16 682.342 L1648.6 682.342 L1648.04 682.342 L1647.48 682.342 L1646.93 682.342 L1646.37 682.342 L1645.81 682.342 L1645.25 682.342 L1644.69 682.342 L1644.13 682.342 L1643.57 682.342 L1643.01 682.342 L1642.45 682.342 L1641.89 682.342 L1641.33 682.342 L1640.77 682.342 L1640.21 682.342 L1639.66 682.342 L1639.1 682.342 L1638.54 682.342 L1637.98 682.342 L1637.42 682.342 L1636.86 682.342 L1636.3 682.342 L1635.74 682.342 L1635.18 682.342 L1634.62 682.342 L1634.06 682.342 L1633.5 682.342 L1632.94 682.342 L1632.39 682.342 L1631.83 682.342 L1631.27 682.342 L1630.71 682.342 L1630.15 682.342 L1629.59 682.342 L1629.03 682.342 L1628.47 682.342 L1627.91 682.342 L1627.35 682.342 L1626.79 682.342 L1626.23 682.342 L1625.67 682.342 L1625.11 682.342 L1624.56 682.342 L1624 682.342 L1623.44 682.342 L1622.88 682.342 L1622.32 682.342 L1621.76 682.342 L1621.2 682.342 L1620.64 682.342 L1620.08 682.342 L1619.52 682.342 L1618.96 682.342 L1618.4 682.342 L1617.84 682.342 L1617.29 682.342 L1616.73 682.342 L1616.17 682.342 L1615.61 682.342 L1615.05 682.342 L1614.49 682.342 L1613.93 682.342 L1613.37 682.342 L1612.81 682.342 L1612.25 682.342 L1611.69 682.342 L1611.13 682.342 L1610.57 682.342 L1610.02 682.342 L1609.46 682.342 L1608.9 682.342 L1608.34 682.342 L1607.78 682.342 L1607.22 682.342 L1606.66 682.342 L1606.1 682.342 L1605.54 682.342 L1604.98 682.342 L1604.42 682.342 L1603.86 682.342 L1603.3 682.342 L1602.74 682.342 L1602.19 682.342 L1601.63 682.342 L1601.07 682.342 L1600.51 682.342 L1599.95 682.342 L1599.39 682.342 L1598.83 682.342 L1598.27 682.342 L1597.71 682.342 L1597.15 682.342 L1596.59 682.342 L1596.03 682.342 L1595.47 682.342 L1594.92 682.342 L1594.36 682.342 L1593.8 682.342 L1593.24 682.342 L1592.68 682.342 L1592.12 682.342 L1591.56 682.342 L1591 682.342 L1590.44 682.342 L1589.88 682.342 L1589.32 682.342 L1588.76 682.342 L1588.2 682.342 L1587.65 682.342 L1587.09 682.342 L1586.53 682.342 L1585.97 682.342 L1585.41 682.342 L1584.85 682.342 L1584.29 682.342 L1583.73 682.342 L1583.17 682.342 L1582.61 682.342 L1582.05 682.342 L1581.49 682.342 L1580.93 682.342 L1580.37 682.342 L1579.82 682.342 L1579.26 682.342 L1578.7 682.342 L1578.14 682.342 L1577.58 682.342 L1577.02 682.342 L1576.46 682.342 L1575.9 682.342 L1575.34 682.342 L1574.78 682.342 L1574.22 682.342 L1573.66 682.342 L1573.1 682.342 L1572.55 682.342 L1571.99 682.342 L1571.43 682.342 L1570.87 682.342 L1570.31 682.342 L1569.75 682.342 L1569.19 682.342 L1568.63 682.342 L1568.07 682.342 L1567.51 682.342 L1566.95 682.342 L1566.39 682.342 L1565.83 682.342 L1565.28 682.342 L1564.72 682.342 L1564.16 682.342 L1563.6 682.342 L1563.04 682.342 L1562.48 682.342 L1561.92 682.342 L1561.36 682.342 L1560.8 682.342 L1560.24 682.342 L1559.68 682.342 L1559.12 682.342 L1558.56 682.342 L1558 682.342 L1557.45 682.342 L1556.89 682.342 L1556.33 682.342 L1555.77 682.342 L1555.21 682.342 L1554.65 682.342 L1554.09 682.342 L1553.53 682.342 L1552.97 682.342 L1552.41 682.342 L1551.85 682.342 L1551.29 682.342 L1550.73 682.342 L1550.18 682.342 L1549.62 682.342 L1549.06 682.342 L1548.5 682.342 L1547.94 682.342 L1547.38 682.342 L1546.82 682.342 L1546.26 682.342 L1545.7 682.342 L1545.14 682.342 L1544.58 682.342 L1544.02 682.342 L1543.46 682.342 L1542.9 682.342 L1542.35 682.342 L1541.79 682.342 L1541.23 682.342 L1540.67 682.342 L1540.11 682.342 L1539.55 682.342 L1538.99 682.342 L1538.43 682.342 L1537.87 682.342 L1537.31 682.342 L1536.75 682.342 L1536.19 682.342 L1535.63 682.342 L1535.08 682.342 L1534.52 682.342 L1533.96 682.342 L1533.4 682.342 L1532.84 682.342 L1532.28 682.342 L1531.72 682.342 L1531.16 682.342 L1530.6 682.342 L1530.04 682.342 L1529.48 682.342 L1528.92 682.342 L1528.36 682.342 L1527.81 682.342 L1527.25 682.342 L1526.69 682.342 L1526.13 682.342 L1525.57 682.342 L1525.01 682.342 L1524.45 682.342 L1523.89 682.342 L1523.33 682.342 L1522.77 682.342 L1522.21 682.342 L1521.65 682.342 L1521.09 682.342 L1520.53 682.342 L1519.98 682.342 L1519.42 682.342 L1518.86 682.342 L1518.3 682.342 L1517.74 682.342 L1517.18 682.342 L1516.62 682.342 L1516.06 682.342 L1515.5 682.342 L1514.94 682.342 L1514.38 682.342 L1513.82 682.342 L1513.26 682.342 L1512.71 682.342 L1512.15 682.342 L1511.59 682.342 L1511.03 682.342 L1510.47 682.342 L1509.91 682.342 L1509.35 682.342 L1508.79 682.342 L1508.23 682.342 L1507.67 682.342 L1507.11 682.342 L1506.55 682.342 L1505.99 682.342 L1505.44 682.342 L1504.88 682.342 L1504.32 682.342 L1503.76 682.342 L1503.2 682.342 L1502.64 682.342 L1502.08 682.342 L1501.52 682.342 L1500.96 682.342 L1500.4 682.342 L1499.84 682.342 L1499.28 682.342 L1498.72 682.342 L1498.16 682.342 L1497.61 682.342 L1497.05 682.342 L1496.49 682.342 L1495.93 682.342 L1495.37 682.342 L1494.81 682.342 L1494.25 682.342 L1493.69 682.342 L1493.13 682.342 L1492.57 682.342 L1492.01 682.342 L1491.45 682.342 L1490.89 682.342 L1490.34 682.342 L1489.78 682.342 L1489.22 682.342 L1488.66 682.342 L1488.1 682.342 L1487.54 682.342 L1486.98 682.342 L1486.42 682.342 L1485.86 682.342 L1485.3 682.342 L1484.74 682.342 L1484.18 682.342 L1483.62 682.342 L1483.07 682.342 L1482.51 682.342 L1481.95 682.342 L1481.39 682.342 L1480.83 682.342 L1480.27 682.342 L1479.71 682.342 L1479.15 682.342 L1478.59 682.342 L1478.03 682.342 L1477.47 682.342 L1476.91 682.342 L1476.35 682.342 L1475.79 682.342 L1475.24 682.342 L1474.68 682.342 L1474.12 682.342 L1473.56 682.342 L1473 682.342 L1472.44 682.342 L1471.88 682.342 L1471.32 682.342 L1470.76 682.342 L1470.2 682.342 L1469.64 682.342 L1469.08 682.342 L1468.52 682.342 L1467.97 682.342 L1467.41 682.342 L1466.85 682.342 L1466.29 682.342 L1465.73 682.342 L1465.17 682.342 L1464.61 682.342 L1464.05 682.342 L1463.49 682.342 L1462.93 682.342 L1462.37 682.342 L1461.81 682.342 L1461.25 682.342 L1460.7 682.342 L1460.14 682.342 L1459.58 682.342 L1459.02 682.342 L1458.46 682.342 L1457.9 682.342 L1457.34 682.342 L1456.78 682.342 L1456.22 682.342 L1455.66 682.342 L1455.1 682.342 L1454.54 682.342 L1453.98 682.342 L1453.42 682.342 L1452.87 682.342 L1452.31 682.342 L1451.75 682.342 L1451.19 682.342 L1450.63 682.342 L1450.07 682.342 L1449.51 682.342 L1448.95 682.342 L1448.39 682.342 L1447.83 682.342 L1447.27 682.342 L1446.71 682.342 L1446.15 682.342 L1445.6 682.342 L1445.04 682.342 L1444.48 682.342 L1443.92 682.342 L1443.36 682.342 L1442.8 682.342 L1442.24 682.342 L1441.68 682.342 L1441.12 682.342 L1440.56 682.342 L1440 682.342 L1439.44 682.342 L1438.88 682.342 L1438.33 682.342 L1437.77 682.342 L1437.21 682.342 L1436.65 682.342 L1436.09 682.342 L1435.53 682.342 L1434.97 682.342 L1434.41 682.342 L1433.85 682.342 L1433.29 682.342 L1432.73 682.342 L1432.17 682.342 L1431.61 682.342 L1431.05 682.342 L1430.5 682.342 L1429.94 682.342 L1429.38 682.342 L1428.82 682.342 L1428.26 682.342 L1427.7 682.342 L1427.14 682.342 L1426.58 682.342 L1426.02 682.342 L1425.46 682.342 L1424.9 682.342 L1424.34 682.342 L1423.78 682.342 L1423.23 682.342 L1422.67 682.342 L1422.11 682.342 L1421.55 682.342 L1420.99 682.342 L1420.43 682.342 L1419.87 682.342 L1419.31 682.342 L1418.75 682.342 L1418.19 682.342 L1417.63 682.342 L1417.07 682.342 L1416.51 682.342 L1415.95 682.342 L1415.4 682.342 L1414.84 682.342 L1414.28 682.342 L1413.72 682.342 L1413.16 682.342 L1412.6 682.342 L1412.04 682.342 L1411.48 682.342 L1410.92 682.342 L1410.36 682.342 L1409.8 682.342 L1409.24 682.342 L1408.68 682.342 L1408.13 682.342 L1407.57 682.342 L1407.01 682.342 L1406.45 682.342 L1405.89 682.342 L1405.33 682.342 L1404.77 682.342 L1404.21 682.342 L1403.65 682.342 L1403.09 682.342 L1402.53 682.342 L1401.97 682.342 L1401.41 682.342 L1400.86 682.342 L1400.3 682.342 L1399.74 682.342 L1399.18 682.342 L1398.62 682.342 L1398.06 682.342 L1397.5 682.342 L1396.94 682.342 L1396.38 682.342 L1395.82 682.342 L1395.26 682.342 L1394.7 682.342 L1394.14 682.342 L1393.58 682.342 L1393.03 682.342 L1392.47 682.342 L1391.91 682.342 L1391.35 682.342 L1390.79 682.342 L1390.23 682.342 L1389.67 682.342 L1389.11 682.342 L1388.55 682.342 L1387.99 682.342 L1387.43 682.342 L1386.87 682.342 L1386.31 682.342 L1385.76 682.342 L1385.2 682.342 L1384.64 682.342 L1384.08 682.342 L1383.52 682.342 L1382.96 682.342 L1382.4 682.342 L1381.84 682.342 L1381.28 682.342 L1380.72 682.342 L1380.16 682.342 L1379.6 682.342 L1379.04 682.342 L1378.49 682.342 L1377.93 682.342 L1377.37 682.342 L1376.81 682.342 L1376.25 682.342 L1375.69 682.342 L1375.13 682.342 L1374.57 682.342 L1374.01 682.342 L1373.45 682.342 L1372.89 682.342 L1372.33 682.342 L1371.77 682.342 L1371.21 682.342 L1370.66 682.342 L1370.1 682.342 L1369.54 682.342 L1368.98 682.342 L1368.42 682.342 L1367.86 682.342 L1367.3 682.342 L1366.74 682.342 L1366.18 682.342 L1365.62 682.342 L1365.06 682.342 L1364.5 682.342 L1363.94 682.342 L1363.39 682.342 L1362.83 682.342 L1362.27 682.342 L1361.71 682.342 L1361.15 682.342 L1360.59 682.342 L1360.03 682.342 L1359.47 682.342 L1358.91 682.342 L1358.35 682.342 L1357.79 682.342 L1357.23 682.342 L1356.67 682.342 L1356.12 682.342 L1355.56 682.342 L1355 682.342 L1354.44 682.342 L1353.88 682.342 L1353.32 682.342 L1352.76 682.342 L1352.2 682.342 L1351.64 682.342 L1351.08 682.342 L1350.52 682.342 L1349.96 682.342 L1349.4 682.342 L1348.84 682.342 L1348.29 682.342 L1347.73 682.342 L1347.17 682.342 L1346.61 682.342 L1346.05 682.342 L1345.49 682.342 L1344.93 682.342 L1344.37 682.342 L1343.81 682.342 L1343.25 682.342 L1342.69 682.342 L1342.13 682.342 L1341.57 682.342 L1341.02 682.342 L1340.46 682.342 L1339.9 682.342 L1339.34 682.342 L1338.78 682.342 L1338.22 682.342 L1337.66 682.342 L1337.1 682.342 L1336.54 682.342 L1335.98 682.342 L1335.42 682.342 L1334.86 682.342 L1334.3 682.342 L1333.75 682.342 L1333.19 682.342 L1332.63 682.342 L1332.07 682.342 L1331.51 682.342 L1330.95 682.342 L1330.39 682.342 L1329.83 682.342 L1329.27 682.342 L1328.71 682.342 L1328.15 682.342 L1327.59 682.342 L1327.03 682.342 L1326.47 682.342 L1325.92 682.342 L1325.36 682.342 L1324.8 682.342 L1324.24 682.342 L1323.68 682.342 L1323.12 682.342 L1322.56 682.342 L1322 682.342 L1321.44 682.342 L1320.88 682.342 L1320.32 682.342 L1319.76 682.342 L1319.2 682.342 L1318.65 682.342 L1318.09 682.342 L1317.53 682.342 L1316.97 682.342 L1316.41 682.342 L1315.85 682.342 L1315.29 682.342 L1314.73 682.342 L1314.17 682.342 L1313.61 682.342 L1313.05 682.342 L1312.49 682.342 L1311.93 682.342 L1311.38 682.342 L1310.82 682.342 L1310.26 682.342 L1309.7 682.342 L1309.14 682.342 L1308.58 682.342 L1308.02 682.342 L1307.46 682.342 L1306.9 682.342 L1306.34 682.342 L1305.78 682.342 L1305.22 682.342 L1304.66 682.342 L1304.1 682.342 L1303.55 682.342 L1302.99 682.342 L1302.43 682.342 L1301.87 682.342 L1301.31 682.342 L1300.75 682.342 L1300.19 682.342 L1299.63 682.342 L1299.07 682.342 L1298.51 682.342 L1297.95 682.342 L1297.39 682.342 L1296.83 682.342 L1296.28 682.342 L1295.72 682.342 L1295.16 682.342 L1294.6 682.342 L1294.04 682.342 L1293.48 682.342 L1292.92 682.342 L1292.36 682.342 L1291.8 682.342 L1291.24 682.342 L1290.68 682.342 L1290.12 682.342 L1289.56 682.342 L1289 682.342 L1288.45 682.342 L1287.89 682.342 L1287.33 682.342 L1286.77 682.342 L1286.21 682.342 L1285.65 682.342 L1285.09 682.342 L1284.53 682.342 L1283.97 682.342 L1283.41 682.342 L1282.85 682.342 L1282.29 682.342 L1281.73 682.342 L1281.18 682.342 L1280.62 682.342 L1280.06 682.342 L1279.5 682.342 L1278.94 682.342 L1278.38 682.342 L1277.82 682.342 L1277.26 682.342 L1276.7 682.342 L1276.14 682.342 L1275.58 682.342 L1275.02 682.342 L1274.46 682.342 L1273.91 682.342 L1273.35 682.342 L1272.79 682.342 L1272.23 682.342 L1271.67 682.342 L1271.11 682.342 L1270.55 682.342 L1269.99 682.342 L1269.43 682.342 L1268.87 682.342 L1268.31 682.342 L1267.75 682.342 L1267.19 682.342 L1266.63 682.342 L1266.08 682.342 L1265.52 682.342 L1264.96 682.342 L1264.4 682.342 L1263.84 682.342 L1263.28 682.342 L1262.72 682.342 L1262.16 682.342 L1261.6 682.342 L1261.04 682.342 L1260.48 682.342 L1259.92 682.342 L1259.36 682.342 L1258.81 682.342 L1258.25 682.342 L1257.69 682.342 L1257.13 682.342 L1256.57 682.342 L1256.01 682.342 L1255.45 682.342 L1254.89 682.342 L1254.33 682.342 L1253.77 682.342 L1253.21 682.342 L1252.65 682.342 L1252.09 682.342 L1251.54 682.342 L1250.98 682.342 L1250.42 682.342 L1249.86 682.342 L1249.3 682.342 L1248.74 682.342 L1248.18 682.342 L1247.62 682.342 L1247.06 682.342 L1246.5 682.342 L1245.94 682.342 L1245.38 682.342 L1244.82 682.342 L1244.26 682.342 L1243.71 682.342 L1243.15 682.342 L1242.59 682.342 L1242.03 682.342 L1241.47 682.342 L1240.91 682.342 L1240.35 682.342 L1239.79 682.342 L1239.23 682.342 L1238.67 682.342 L1238.11 682.342 L1237.55 682.342 L1236.99 682.342 L1236.44 682.342 L1235.88 682.342 L1235.32 682.342 L1234.76 682.342 L1234.2 682.342 L1233.64 682.342 L1233.08 682.342 L1232.52 682.342 L1231.96 682.342 L1231.4 682.342 L1230.84 682.342 L1230.28 682.342 L1229.72 682.342 L1229.17 682.342 L1228.61 682.342 L1228.05 682.342 L1227.49 682.342 L1226.93 682.342 L1226.37 682.342 L1225.81 682.342 L1225.25 682.342 L1224.69 682.342 L1224.13 682.342 L1223.57 682.342 L1223.01 682.342 L1222.45 682.342 L1221.89 682.342 L1221.34 682.342 L1220.78 682.342 L1220.22 682.342 L1219.66 682.342 L1219.1 682.342 L1218.54 682.342 L1217.98 682.342 L1217.42 682.342 L1216.86 682.342 L1216.3 682.342 L1215.74 682.342 L1215.18 682.342 L1214.62 682.342 L1214.07 682.342 L1213.51 682.342 L1212.95 682.342 L1212.39 682.342 L1211.83 682.342 L1211.27 682.342 L1210.71 682.342 L1210.15 682.342 L1209.59 682.342 L1209.03 682.342 L1208.47 682.342 L1207.91 682.342 L1207.35 682.342 L1206.8 682.342 L1206.24 682.342 L1205.68 682.342 L1205.12 682.342 L1204.56 682.342 L1204 682.342 L1203.44 682.342 L1202.88 682.342 L1202.32 682.342 L1201.76 682.342 L1201.2 682.342 L1200.64 682.342 L1200.08 682.342 L1199.52 682.342 L1198.97 682.342 L1198.41 682.342 L1197.85 682.342 L1197.29 682.342 L1196.73 682.342 L1196.17 682.342 L1195.61 682.342 L1195.05 682.342 L1194.49 682.342 L1193.93 682.342 L1193.37 682.342 L1192.81 682.342 L1192.25 682.342 L1191.7 682.342 L1191.14 682.342 L1190.58 682.342 L1190.02 682.342 L1189.46 682.342 L1188.9 682.342 L1188.34 682.342 L1187.78 682.342 L1187.22 682.342 L1186.66 682.342 L1186.1 682.342 L1185.54 682.342 L1184.98 682.342 L1184.43 682.342 L1183.87 682.342 L1183.31 682.342 L1182.75 682.342 L1182.19 682.342 L1181.63 682.342 L1181.07 682.342 L1180.51 682.342 L1179.95 682.342 L1179.39 682.342 L1178.83 682.342 L1178.27 682.342 L1177.71 682.342 L1177.15 682.342 L1176.6 682.342 L1176.04 682.342 L1175.48 682.342 L1174.92 682.342 L1174.36 682.342 L1173.8 682.342 L1173.24 682.342 L1172.68 682.342 L1172.12 682.342 L1171.56 682.342 L1171 682.342 L1170.44 682.342 L1169.88 682.342 L1169.33 682.342 L1168.77 682.342 L1168.21 682.342 L1167.65 682.342 L1167.09 682.342 L1166.53 682.342 L1165.97 682.342 L1165.41 682.342 L1164.85 682.342 L1164.29 682.342 L1163.73 682.342 L1163.17 682.342 L1162.61 682.342 L1162.05 682.342 L1161.5 682.342 L1160.94 682.342 L1160.38 682.342 L1159.82 682.342 L1159.26 682.342 L1158.7 682.342 L1158.14 682.342 L1157.58 682.342 L1157.02 682.342 L1156.46 682.342 L1155.9 682.342 L1155.34 682.342 L1154.78 682.342 L1154.23 682.342 L1153.67 682.342 L1153.11 682.342 L1152.55 682.342 L1151.99 682.342 L1151.43 682.342 L1150.87 682.342 L1150.31 682.342 L1149.75 682.342 L1149.19 682.342 L1148.63 682.342 L1148.07 682.342 L1147.51 682.342 L1146.96 682.342 L1146.4 682.342 L1145.84 682.342 L1145.28 682.342 L1144.72 682.342 L1144.16 682.342 L1143.6 682.342 L1143.04 682.342 L1142.48 682.342 L1141.92 682.342 L1141.36 682.342 L1140.8 682.342 L1140.24 682.342 L1139.68 682.342 L1139.13 682.342 L1138.57 682.342 L1138.01 682.342 L1137.45 682.342 L1136.89 682.342 L1136.33 682.342 L1135.77 682.342 L1135.21 682.342 L1134.65 682.342 L1134.09 682.342 L1133.53 682.342 L1132.97 682.342 L1132.41 682.342 L1131.86 682.342 L1131.3 682.342 L1130.74 682.342 L1130.18 682.342 L1129.62 682.342 L1129.06 682.342 L1128.5 682.342 L1127.94 682.342 L1127.38 682.342 L1126.82 682.342 L1126.26 682.342 L1125.7 682.342 L1125.14 682.342 L1124.59 682.342 L1124.03 682.342 L1123.47 682.342 L1122.91 682.342 L1122.35 682.342 L1121.79 682.342 L1121.23 682.342 L1120.67 682.342 L1120.11 682.342 L1119.55 682.342 L1118.99 682.342 L1118.43 682.342 L1117.87 682.342 L1117.31 682.342 L1116.76 682.342 L1116.2 682.342 L1115.64 682.342 L1115.08 682.342 L1114.52 682.342 L1113.96 682.342 L1113.4 682.342 L1112.84 682.342 L1112.28 682.342 L1111.72 682.342 L1111.16 682.342 L1110.6 682.342 L1110.04 682.342 L1109.49 682.342 L1108.93 682.342 L1108.37 682.342 L1107.81 682.342 L1107.25 682.342 L1106.69 682.342 L1106.13 682.342 L1105.57 682.342 L1105.01 682.342 L1104.45 682.342 L1103.89 682.342 L1103.33 682.342 L1102.77 682.342 L1102.22 682.342 L1101.66 682.342 L1101.1 682.342 L1100.54 682.342 L1099.98 682.342 L1099.42 682.342 L1098.86 682.342 L1098.3 682.342 L1097.74 682.342 L1097.18 682.342 L1096.62 682.342 L1096.06 682.342 L1095.5 682.342 L1094.94 682.342 L1094.39 682.342 L1093.83 682.342 L1093.27 682.342 L1092.71 682.342 L1092.15 682.342 L1091.59 682.342 L1091.03 682.342 L1090.47 682.342 L1089.91 682.342 L1089.35 682.342 L1088.79 682.342 L1088.23 682.342 L1087.67 682.342 L1087.12 682.342 L1086.56 682.342 L1086 682.342 L1085.44 682.342 L1084.88 682.342 L1084.32 682.342 L1083.76 682.342 L1083.2 682.342 L1082.64 682.342 L1082.08 682.342 L1081.52 682.342 L1080.96 682.342 L1080.4 682.342 L1079.85 682.342 L1079.29 682.342 L1078.73 682.342 L1078.17 682.342 L1077.61 682.342 L1077.05 682.342 L1076.49 682.342 L1075.93 682.342 L1075.37 682.342 L1074.81 682.342 L1074.25 682.342 L1073.69 682.342 L1073.13 682.342 L1072.57 682.342 L1072.02 682.342 L1071.46 682.342 L1070.9 682.342 L1070.34 682.342 L1069.78 682.342 L1069.22 682.342 L1068.66 682.342 L1068.1 682.342 L1067.54 682.342 L1066.98 682.342 L1066.42 682.342 L1065.86 682.342 L1065.3 682.342 L1064.75 682.342 L1064.19 682.342 L1063.63 682.342 L1063.07 682.342 L1062.51 682.342 L1061.95 682.342 L1061.39 682.342 L1060.83 682.342 L1060.27 682.342 L1059.71 682.342 L1059.15 682.342 L1058.59 682.342 L1058.03 682.342 L1057.48 682.342 L1056.92 682.342 L1056.36 682.342 L1055.8 682.342 L1055.24 682.342 L1054.68 682.342 L1054.12 682.342 L1053.56 682.342 L1053 682.342 L1052.44 682.342 L1051.88 682.342 L1051.32 682.342 L1050.76 682.342 L1050.2 682.342 L1049.65 682.342 L1049.09 682.342 L1048.53 682.342 L1047.97 682.342 L1047.41 682.342 L1046.85 682.342 L1046.29 682.342 L1045.73 682.342 L1045.17 682.342 L1044.61 682.342 L1044.05 682.342 L1043.49 682.342 L1042.93 682.342 L1042.38 682.342 L1041.82 682.342 L1041.26 682.342 L1040.7 682.342 L1040.14 682.342 L1039.58 682.342 L1039.02 682.342 L1038.46 682.342 L1037.9 682.342 L1037.34 682.342 L1036.78 682.342 L1036.22 682.342 L1035.66 682.342 L1035.1 682.342 L1034.55 682.342 L1033.99 682.342 L1033.43 682.342 L1032.87 682.342 L1032.31 682.342 L1031.75 682.342 L1031.19 682.342 L1030.63 682.342 L1030.07 682.342 L1029.51 682.342 L1028.95 682.342 L1028.39 682.342 L1027.83 682.342 L1027.28 682.342 L1026.72 682.342 L1026.16 682.342 L1025.6 682.342 L1025.04 682.342 L1024.48 682.342 L1023.92 682.342 L1023.36 682.342 L1022.8 682.342 L1022.24 682.342 L1021.68 682.342 L1021.12 682.342 L1020.56 682.342 L1020.01 682.342 L1019.45 682.342 L1018.89 682.342 L1018.33 682.342 L1017.77 682.342 L1017.21 682.342 L1016.65 682.342 L1016.09 682.342 L1015.53 682.342 L1014.97 682.342 L1014.41 682.342 L1013.85 682.342 L1013.29 682.342 L1012.73 682.342 L1012.18 682.342 L1011.62 682.342 L1011.06 682.342 L1010.5 682.342 L1009.94 682.342 L1009.38 682.342 L1008.82 682.342 L1008.26 682.342 L1007.7 682.342 L1007.14 682.342 L1006.58 682.342 L1006.02 682.342 L1005.46 682.342 L1004.91 682.342 L1004.35 682.342 L1003.79 682.342 L1003.23 682.342 L1002.67 682.342 L1002.11 682.342 L1001.55 682.342 L1000.99 682.342 L1000.43 682.342 L999.872 682.342 L999.313 682.342 L998.754 682.342 L998.194 682.342 L997.635 682.342 L997.076 682.342 L996.517 682.342 L995.957 682.342 L995.398 682.342 L994.839 682.342 L994.28 682.342 L993.72 682.342 L993.161 682.342 L992.602 682.342 L992.043 682.342 L991.483 682.342 L990.924 682.342 L990.365 682.342 L989.806 682.342 L989.246 682.342 L988.687 682.342 L988.128 682.342 L987.569 682.342 L987.009 682.342 L986.45 682.342 L985.891 682.342 L985.332 682.342 L984.772 682.342 L984.213 682.342 L983.654 682.342 L983.095 682.342 L982.535 682.342 L981.976 682.342 L981.417 682.342 L980.858 682.342 L980.298 682.342 L979.739 682.342 L979.18 682.342 L978.621 682.342 L978.061 682.342 L977.502 682.342 L976.943 682.342 L976.384 682.342 L975.824 682.342 L975.265 682.342 L974.706 682.342 L974.147 682.342 L973.587 682.342 L973.028 682.342 L972.469 682.342 L971.91 682.342 L971.35 682.342 L970.791 682.342 L970.232 682.342 L969.673 682.342 L969.113 682.342 L968.554 682.342 L967.995 682.342 L967.436 682.342 L966.876 682.342 L966.317 682.342 L965.758 682.342 L965.199 682.342 L964.639 682.342 L964.08 682.342 L963.521 682.342 L962.962 682.342 L962.402 682.342 L961.843 682.342 L961.284 682.342 L960.725 682.342 L960.165 682.342 L959.606 682.342 L959.047 682.342 L958.488 682.342 L957.928 682.342 L957.369 682.342 L956.81 682.342 L956.251 682.342 L955.691 682.342 L955.132 682.342 L954.573 682.342 L954.014 682.342 L953.454 682.342 L952.895 682.342 L952.336 682.342 L951.777 682.342 L951.217 682.342 L950.658 682.342 L950.099 682.342 L949.54 682.342 L948.98 682.342 L948.421 682.342 L947.862 682.342 L947.303 682.342 L946.743 682.342 L946.184 682.342 L945.625 682.342 L945.066 682.342 L944.506 682.342 L943.947 682.342 L943.388 682.342 L942.829 682.342 L942.269 682.342 L941.71 682.342 L941.151 682.342 L940.592 682.342 L940.032 682.342 L939.473 682.342 L938.914 682.342 L938.355 682.342 L937.795 682.342 L937.236 682.342 L936.677 682.342 L936.118 682.342 L935.558 682.342 L934.999 682.342 L934.44 682.342 L933.881 682.342 L933.321 682.342 L932.762 682.342 L932.203 682.342 L931.644 682.342 L931.084 682.342 L930.525 682.342 L929.966 682.342 L929.406 682.342 L928.847 682.342 L928.288 682.342 L927.729 682.342 L927.169 682.342 L926.61 682.342 L926.051 682.342 L925.492 682.342 L924.932 682.342 L924.373 682.342 L923.814 682.342 L923.255 682.342 L922.695 682.342 L922.136 682.342 L921.577 682.342 L921.018 682.342 L920.458 682.342 L919.899 682.342 L919.34 682.342 L918.781 682.342 L918.221 682.342 L917.662 682.342 L917.103 682.342 L916.544 682.342 L915.984 682.342 L915.425 682.342 L914.866 682.342 L914.307 682.342 L913.747 682.342 L913.188 682.342 L912.629 682.342 L912.07 682.342 L911.51 682.342 L910.951 682.342 L910.392 682.342 L909.833 682.342 L909.273 682.342 L908.714 682.342 L908.155 682.342 L907.596 682.342 L907.036 682.342 L906.477 682.342 L905.918 682.342 L905.359 682.342 L904.799 682.342 L904.24 682.342 L903.681 682.342 L903.122 682.342 L902.562 682.342 L902.003 682.342 L901.444 682.342 L900.885 682.342 L900.325 682.342 L899.766 682.342 L899.207 682.342 L898.648 682.342 L898.088 682.342 L897.529 682.342 L896.97 682.342 L896.411 682.342 L895.851 682.342 L895.292 682.342 L894.733 682.342 L894.174 682.342 L893.614 682.342 L893.055 682.342 L892.496 682.342 L891.937 682.342 L891.377 682.342 L890.818 682.342 L890.259 682.342 L889.7 682.342 L889.14 682.342 L888.581 682.342 L888.022 682.342 L887.463 682.342 L886.903 682.342 L886.344 682.342 L885.785 682.342 L885.226 682.342 L884.666 682.342 L884.107 682.342 L883.548 682.342 L882.989 682.342 L882.429 682.342 L881.87 682.342 L881.311 682.342 L880.752 682.342 L880.192 682.342 L879.633 682.342 L879.074 682.342 L878.515 682.342 L877.955 682.342 L877.396 682.342 L876.837 682.342 L876.278 682.342 L875.718 682.342 L875.159 682.342 L874.6 682.342 L874.041 682.342 L873.481 682.342 L872.922 682.342 L872.363 682.342 L871.804 682.342 L871.244 682.342 L870.685 682.342 L870.126 682.342 L869.567 682.342 L869.007 682.342 L868.448 682.342 L867.889 682.342 L867.33 682.342 L866.77 682.342 L866.211 682.342 L865.652 682.342 L865.093 682.342 L864.533 682.342 L863.974 682.342 L863.415 682.342 L862.856 682.342 L862.296 682.342 L861.737 682.342 L861.178 682.342 L860.619 682.342 L860.059 682.342 L859.5 682.342 L858.941 682.342 L858.382 682.342 L857.822 682.342 L857.263 682.342 L856.704 682.342 L856.145 682.342 L855.585 682.342 L855.026 682.342 L854.467 682.342 L853.908 682.342 L853.348 682.342 L852.789 682.342 L852.23 682.342 L851.671 682.342 L851.111 682.342 L850.552 682.342 L849.993 682.342 L849.434 682.342 L848.874 682.342 L848.315 682.342 L847.756 682.342 L847.197 682.342 L846.637 682.342 L846.078 682.342 L845.519 682.342 L844.96 682.342 L844.4 682.342 L843.841 682.342 L843.282 682.342 L842.723 682.342 L842.163 682.342 L841.604 682.342 L841.045 682.342 L840.486 682.342 L839.926 682.342 L839.367 682.342 L838.808 682.342 L838.249 682.342 L837.689 682.342 L837.13 682.342 L836.571 682.342 L836.012 682.342 L835.452 682.342 L834.893 682.342 L834.334 682.342 L833.775 682.342 L833.215 682.342 L832.656 682.342 L832.097 682.342 L831.538 682.342 L830.978 682.342 L830.419 682.342 L829.86 682.342 L829.301 682.342 L828.741 682.342 L828.182 682.342 L827.623 682.342 L827.064 682.342 L826.504 682.342 L825.945 682.342 L825.386 682.342 L824.827 682.342 L824.267 682.342 L823.708 682.342 L823.149 682.342 L822.59 682.342 L822.03 682.342 L821.471 682.342 L820.912 682.342 L820.353 682.342 L819.793 682.342 L819.234 682.342 L818.675 682.342 L818.116 682.342 L817.556 682.342 L816.997 682.342 L816.438 682.342 L815.879 682.342 L815.319 682.342 L814.76 682.342 L814.201 682.342 L813.642 682.342 L813.082 682.342 L812.523 682.342 L811.964 682.342 L811.405 682.342 L810.845 682.342 L810.286 682.342 L809.727 682.342 L809.168 682.342 L808.608 682.342 L808.049 682.342 L807.49 682.342 L806.931 682.342 L806.371 682.342 L805.812 682.342 L805.253 682.342 L804.693 682.342 L804.134 682.342 L803.575 682.342 L803.016 682.342 L802.456 682.342 L801.897 682.342 L801.338 682.342 L800.779 682.342 L800.219 682.342 L799.66 682.342 L799.101 682.342 L798.542 682.342 L797.982 682.342 L797.423 682.342 L796.864 682.342 L796.305 682.342 L795.745 682.342 L795.186 682.342 L794.627 682.342 L794.068 682.342 L793.508 682.342 L792.949 682.342 L792.39 682.342 L791.831 682.342 L791.271 682.342 L790.712 682.342 L790.153 682.342 L789.594 682.342 L789.034 682.342 L788.475 682.342 L787.916 682.342 L787.357 682.342 L786.797 682.342 L786.238 682.342 L785.679 682.342 L785.12 682.342 L784.56 682.342 L784.001 682.342 L783.442 682.342 L782.883 682.342 L782.323 682.342 L781.764 682.342 L781.205 682.342 L780.646 682.342 L780.086 682.342 L779.527 682.342 L778.968 682.342 L778.409 682.342 L777.849 682.342 L777.29 682.342 L776.731 682.342 L776.172 682.342 L775.612 682.342 L775.053 682.342 L774.494 682.342 L773.935 682.342 L773.375 682.342 L772.816 682.342 L772.257 682.342 L771.698 682.342 L771.138 682.342 L770.579 682.342 L770.02 682.342 L769.461 682.342 L768.901 682.342 L768.342 682.342 L767.783 682.342 L767.224 682.342 L766.664 682.342 L766.105 682.342 L765.546 682.342 L764.987 682.342 L764.427 682.342 L763.868 682.342 L763.309 682.342 L762.75 682.342 L762.19 682.342 L761.631 682.342 L761.072 682.342 L760.513 682.342 L759.953 682.342 L759.394 682.342 L758.835 682.342 L758.276 682.342 L757.716 682.342 L757.157 682.342 L756.598 682.342 L756.039 682.342 L755.479 682.342 L754.92 682.342 L754.361 682.342 L753.802 682.342 L753.242 682.342 L752.683 682.342 L752.124 682.342 L751.565 682.342 L751.005 682.342 L750.446 682.342 L749.887 682.342 L749.328 682.342 L748.768 682.342 L748.209 682.342 L747.65 682.342 L747.091 682.342 L746.531 682.342 L745.972 682.342 L745.413 682.342 L744.854 682.342 L744.294 682.342 L743.735 682.342 L743.176 682.342 L742.617 682.342 L742.057 682.342 L741.498 682.342 L740.939 682.342 L740.38 682.342 L739.82 682.342 L739.261 682.342 L738.702 682.342 L738.143 682.342 L737.583 682.342 L737.024 682.342 L736.465 682.342 L735.906 682.342 L735.346 682.342 L734.787 682.342 L734.228 682.342 L733.669 682.342 L733.109 682.342 L732.55 682.342 L731.991 682.342 L731.432 682.342 L730.872 682.342 L730.313 682.342 L729.754 682.342 L729.195 682.342 L728.635 682.342 L728.076 682.342 L727.517 682.342 L726.958 682.342 L726.398 682.342 L725.839 682.342 L725.28 682.342 L724.721 682.342 L724.161 682.342 L723.602 682.342 L723.043 682.342 L722.484 682.342 L721.924 682.342 L721.365 682.342 L720.806 682.342 L720.247 682.342  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.515 720.806,685.515 721.365,685.515 721.924,685.515 722.484,685.515 723.043,685.515 723.602,685.515 724.161,685.515 724.721,685.515 725.28,685.515 725.839,685.515 726.398,685.515 726.958,685.515 727.517,685.515 728.076,685.515 728.635,685.515 729.195,685.515 729.754,685.515 730.313,685.515 730.872,685.515 731.432,685.515 731.991,685.515 732.55,685.515 733.109,685.515 733.669,685.515 734.228,685.515 734.787,685.515 735.346,685.515 735.906,685.515 736.465,685.515 737.024,685.515 737.583,685.515 738.143,685.515 738.702,685.515 739.261,685.515 739.82,685.515 740.38,685.515 740.939,685.515 741.498,685.515 742.057,685.515 742.617,685.515 743.176,685.515 743.735,685.515 744.294,685.515 744.854,685.515 745.413,685.515 745.972,685.515 746.531,685.515 747.091,685.515 747.65,685.515 748.209,685.515 748.768,685.515 749.328,685.515 749.887,685.515 750.446,685.515 751.005,685.515 751.565,685.515 752.124,685.515 752.683,685.515 753.242,685.515 753.802,685.515 754.361,685.515 754.92,685.515 755.479,685.515 756.039,685.515 756.598,685.515 757.157,685.515 757.716,685.515 758.276,685.515 758.835,685.515 759.394,685.515 759.953,685.515 760.513,685.515 761.072,685.515 761.631,685.515 762.19,685.515 762.75,685.515 763.309,685.515 763.868,685.515 764.427,685.515 764.987,685.515 765.546,685.515 766.105,685.515 766.664,685.515 767.224,685.515 767.783,685.515 768.342,685.515 768.901,685.515 769.461,685.515 770.02,685.515 770.579,685.515 771.138,685.515 771.698,685.515 772.257,685.515 772.816,685.515 773.375,685.515 773.935,685.515 774.494,685.515 775.053,685.515 775.612,685.515 776.172,685.515 776.731,685.515 777.29,685.515 777.849,685.515 778.409,685.515 778.968,685.515 779.527,685.515 780.086,685.515 780.646,685.515 781.205,685.515 781.764,685.515 782.323,685.515 782.883,685.515 783.442,685.515 784.001,685.515 784.56,685.515 785.12,685.515 785.679,685.515 786.238,685.515 786.797,685.515 787.357,685.515 787.916,685.515 788.475,685.515 789.034,685.515 789.594,685.515 790.153,685.515 790.712,685.515 791.271,685.515 791.831,685.515 792.39,685.515 792.949,685.515 793.508,685.515 794.068,685.515 794.627,685.515 795.186,685.515 795.745,685.515 796.305,685.515 796.864,685.515 797.423,685.515 797.982,685.515 798.542,685.515 799.101,685.515 799.66,685.515 800.219,685.515 800.779,685.515 801.338,685.515 801.897,685.515 802.456,685.515 803.016,685.515 803.575,685.515 804.134,685.515 804.693,685.515 805.253,685.515 805.812,685.515 806.371,685.515 806.931,685.515 807.49,685.515 808.049,685.515 808.608,685.515 809.168,685.515 809.727,685.515 810.286,685.515 810.845,685.515 811.405,685.515 811.964,685.515 812.523,685.515 813.082,685.515 813.642,685.515 814.201,685.515 814.76,685.515 815.319,685.515 815.879,685.515 816.438,685.515 816.997,685.515 817.556,685.515 818.116,685.515 818.675,685.515 819.234,685.515 819.793,685.515 820.353,685.515 820.912,685.515 821.471,685.515 822.03,685.515 822.59,685.515 823.149,685.515 823.708,685.515 824.267,685.515 824.827,685.515 825.386,685.515 825.945,685.515 826.504,685.515 827.064,685.515 827.623,685.515 828.182,685.515 828.741,685.515 829.301,685.515 829.86,685.515 830.419,685.515 830.978,685.515 831.538,685.515 832.097,685.515 832.656,685.515 833.215,685.515 833.775,685.515 834.334,685.515 834.893,685.515 835.452,685.515 836.012,685.515 836.571,685.515 837.13,685.515 837.689,685.515 838.249,685.515 838.808,685.515 839.367,685.515 839.926,685.515 840.486,685.515 841.045,685.515 841.604,685.515 842.163,685.515 842.723,685.515 843.282,685.515 843.841,685.515 844.4,685.515 844.96,685.515 845.519,685.515 846.078,685.515 846.637,685.515 847.197,685.515 847.756,685.515 848.315,685.515 848.874,685.515 849.434,685.515 849.993,685.515 850.552,685.515 851.111,685.515 851.671,685.515 852.23,685.515 852.789,685.515 853.348,685.515 853.908,685.515 854.467,685.515 855.026,685.515 855.585,685.515 856.145,685.515 856.704,685.515 857.263,685.515 857.822,685.515 858.382,685.515 858.941,685.515 859.5,685.515 860.059,685.515 860.619,685.515 861.178,685.515 861.737,685.515 862.296,685.515 862.856,685.515 863.415,685.515 863.974,685.515 864.533,685.515 865.093,685.515 865.652,685.515 866.211,685.515 866.77,685.515 867.33,685.515 867.889,685.515 868.448,685.515 869.007,685.515 869.567,685.515 870.126,685.515 870.685,685.515 871.244,685.515 871.804,685.515 872.363,685.515 872.922,685.515 873.481,685.515 874.041,685.515 874.6,685.515 875.159,685.515 875.718,685.515 876.278,685.515 876.837,685.515 877.396,685.515 877.955,685.515 878.515,685.515 879.074,685.515 879.633,685.515 880.192,685.515 880.752,685.515 881.311,685.515 881.87,685.515 882.429,685.515 882.989,685.515 883.548,685.515 884.107,685.515 884.666,685.515 885.226,685.515 885.785,685.515 886.344,685.515 886.903,685.515 887.463,685.515 888.022,685.515 888.581,685.515 889.14,685.515 889.7,685.515 890.259,685.515 890.818,685.515 891.377,685.515 891.937,685.515 892.496,685.515 893.055,685.515 893.614,685.515 894.174,685.515 894.733,685.515 895.292,685.515 895.851,685.515 896.411,685.515 896.97,685.515 897.529,685.515 898.088,685.515 898.648,685.515 899.207,685.515 899.766,685.515 900.325,685.515 900.885,685.515 901.444,685.515 902.003,685.515 902.562,685.515 903.122,685.515 903.681,685.515 904.24,685.515 904.799,685.515 905.359,685.515 905.918,685.515 906.477,685.515 907.036,685.515 907.596,685.515 908.155,685.515 908.714,685.515 909.273,685.515 909.833,685.515 910.392,685.515 910.951,685.515 911.51,685.515 912.07,685.515 912.629,685.515 913.188,685.515 913.747,685.515 914.307,685.515 914.866,685.515 915.425,685.515 915.984,685.515 916.544,685.515 917.103,685.515 917.662,685.515 918.221,685.515 918.781,685.515 919.34,685.515 919.899,685.515 920.458,685.515 921.018,685.515 921.577,685.515 922.136,685.515 922.695,685.515 923.255,685.515 923.814,685.515 924.373,685.515 924.932,685.515 925.492,685.515 926.051,685.515 926.61,685.515 927.169,685.515 927.729,685.515 928.288,685.515 928.847,685.515 929.406,685.515 929.966,685.515 930.525,685.515 931.084,685.515 931.644,685.515 932.203,685.515 932.762,685.515 933.321,685.515 933.881,685.515 934.44,685.515 934.999,685.515 935.558,685.515 936.118,685.515 936.677,685.515 937.236,685.515 937.795,685.515 938.355,685.515 938.914,685.515 939.473,685.515 940.032,685.515 940.592,685.515 941.151,685.515 941.71,685.515 942.269,685.515 942.829,685.515 943.388,685.515 943.947,685.515 944.506,685.515 945.066,685.515 945.625,685.515 946.184,685.515 946.743,685.515 947.303,685.515 947.862,685.515 948.421,685.515 948.98,685.515 949.54,685.515 950.099,685.515 950.658,685.515 951.217,685.515 951.777,685.515 952.336,685.515 952.895,685.515 953.454,685.515 954.014,685.515 954.573,685.515 955.132,685.515 955.691,685.515 956.251,685.515 956.81,685.515 957.369,685.515 957.928,685.515 958.488,685.515 959.047,685.515 959.606,685.515 960.165,685.515 960.725,685.515 961.284,685.515 961.843,685.515 962.402,685.515 962.962,685.515 963.521,685.515 964.08,685.515 964.639,685.515 965.199,685.515 965.758,685.515 966.317,685.515 966.876,685.515 967.436,685.515 967.995,685.515 968.554,685.515 969.113,685.515 969.673,685.515 970.232,685.515 970.791,685.515 971.35,685.515 971.91,685.515 972.469,685.515 973.028,685.515 973.587,685.515 974.147,685.515 974.706,685.515 975.265,685.515 975.824,685.515 976.384,685.515 976.943,685.515 977.502,685.515 978.061,685.515 978.621,685.515 979.18,685.515 979.739,685.515 980.298,685.515 980.858,685.515 981.417,685.515 981.976,685.515 982.535,685.515 983.095,685.515 983.654,685.515 984.213,685.515 984.772,685.515 985.332,685.515 985.891,685.515 986.45,685.515 987.009,685.515 987.569,685.515 988.128,685.515 988.687,685.515 989.246,685.515 989.806,685.515 990.365,685.515 990.924,685.515 991.483,685.515 992.043,685.515 992.602,685.515 993.161,685.515 993.72,685.515 994.28,685.515 994.839,685.515 995.398,685.515 995.957,685.515 996.517,685.515 997.076,685.515 997.635,685.515 998.194,685.515 998.754,685.515 999.313,685.515 999.872,685.515 1000.43,685.515 1000.99,685.515 1001.55,685.515 1002.11,685.515 1002.67,685.515 1003.23,685.515 1003.79,685.515 1004.35,685.515 1004.91,685.515 1005.46,685.515 1006.02,685.515 1006.58,685.515 1007.14,685.515 1007.7,685.515 1008.26,685.515 1008.82,685.515 1009.38,685.515 1009.94,685.515 1010.5,685.515 1011.06,685.515 1011.62,685.515 1012.18,685.515 1012.73,685.515 1013.29,685.515 1013.85,685.515 1014.41,685.515 1014.97,685.515 1015.53,685.515 1016.09,685.515 1016.65,685.515 1017.21,685.515 1017.77,685.515 1018.33,685.515 1018.89,685.515 1019.45,685.515 1020.01,685.515 1020.56,685.515 1021.12,685.515 1021.68,685.515 1022.24,685.515 1022.8,685.515 1023.36,685.515 1023.92,685.515 1024.48,685.515 1025.04,685.515 1025.6,685.515 1026.16,685.515 1026.72,685.515 1027.28,685.515 1027.83,685.515 1028.39,685.515 1028.95,685.515 1029.51,685.515 1030.07,685.515 1030.63,685.515 1031.19,685.515 1031.75,685.515 1032.31,685.515 1032.87,685.515 1033.43,685.515 1033.99,685.515 1034.55,685.515 1035.1,685.515 1035.66,685.515 1036.22,685.515 1036.78,685.515 1037.34,685.515 1037.9,685.515 1038.46,685.515 1039.02,685.515 1039.58,685.515 1040.14,685.515 1040.7,685.515 1041.26,685.515 1041.82,685.515 1042.38,685.515 1042.93,685.515 1043.49,685.515 1044.05,685.515 1044.61,685.515 1045.17,685.515 1045.73,685.515 1046.29,685.515 1046.85,685.515 1047.41,685.515 1047.97,685.515 1048.53,685.515 1049.09,685.515 1049.65,685.515 1050.2,685.515 1050.76,685.515 1051.32,685.515 1051.88,685.515 1052.44,685.515 1053,685.515 1053.56,685.515 1054.12,685.515 1054.68,685.515 1055.24,685.515 1055.8,685.515 1056.36,685.515 1056.92,685.515 1057.48,685.515 1058.03,685.515 1058.59,685.515 1059.15,685.515 1059.71,685.515 1060.27,685.515 1060.83,685.515 1061.39,685.515 1061.95,685.515 1062.51,685.515 1063.07,685.515 1063.63,685.515 1064.19,685.515 1064.75,685.515 1065.3,685.515 1065.86,685.515 1066.42,685.515 1066.98,685.515 1067.54,685.515 1068.1,685.515 1068.66,685.515 1069.22,685.515 1069.78,685.515 1070.34,685.515 1070.9,685.515 1071.46,685.515 1072.02,685.515 1072.57,685.515 1073.13,685.515 1073.69,685.515 1074.25,685.515 1074.81,685.515 1075.37,685.515 1075.93,685.515 1076.49,685.515 1077.05,685.515 1077.61,685.515 1078.17,685.515 1078.73,685.515 1079.29,685.515 1079.85,685.515 1080.4,685.515 1080.96,685.515 1081.52,685.515 1082.08,685.515 1082.64,685.515 1083.2,685.515 1083.76,685.515 1084.32,685.515 1084.88,685.515 1085.44,685.515 1086,685.515 1086.56,685.515 1087.12,685.515 1087.67,685.515 1088.23,685.515 1088.79,685.515 1089.35,685.515 1089.91,685.515 1090.47,685.515 1091.03,685.515 1091.59,685.515 1092.15,685.515 1092.71,685.515 1093.27,685.515 1093.83,685.515 1094.39,685.515 1094.94,685.515 1095.5,685.515 1096.06,685.515 1096.62,685.515 1097.18,685.515 1097.74,685.515 1098.3,685.515 1098.86,685.515 1099.42,685.515 1099.98,685.515 1100.54,685.515 1101.1,685.515 1101.66,685.515 1102.22,685.515 1102.77,685.515 1103.33,685.515 1103.89,685.515 1104.45,685.515 1105.01,685.515 1105.57,685.515 1106.13,685.515 1106.69,685.515 1107.25,685.515 1107.81,685.515 1108.37,685.515 1108.93,685.515 1109.49,685.515 1110.04,685.515 1110.6,685.515 1111.16,685.515 1111.72,685.515 1112.28,685.515 1112.84,685.515 1113.4,685.515 1113.96,685.515 1114.52,685.515 1115.08,685.515 1115.64,685.515 1116.2,685.515 1116.76,685.515 1117.31,685.515 1117.87,685.515 1118.43,685.515 1118.99,685.515 1119.55,685.515 1120.11,685.515 1120.67,685.515 1121.23,685.515 1121.79,685.515 1122.35,685.515 1122.91,685.515 1123.47,685.515 1124.03,685.515 1124.59,685.515 1125.14,685.515 1125.7,685.515 1126.26,685.515 1126.82,685.515 1127.38,685.515 1127.94,685.515 1128.5,685.515 1129.06,685.515 1129.62,685.515 1130.18,685.515 1130.74,685.515 1131.3,685.515 1131.86,685.515 1132.41,685.515 1132.97,685.515 1133.53,685.515 1134.09,685.515 1134.65,685.515 1135.21,685.515 1135.77,685.515 1136.33,685.515 1136.89,685.515 1137.45,685.515 1138.01,685.515 1138.57,685.515 1139.13,685.515 1139.68,685.515 1140.24,685.515 1140.8,685.515 1141.36,685.515 1141.92,685.515 1142.48,685.515 1143.04,685.515 1143.6,685.515 1144.16,685.515 1144.72,685.515 1145.28,685.515 1145.84,685.515 1146.4,685.515 1146.96,685.515 1147.51,685.515 1148.07,685.515 1148.63,685.515 1149.19,685.515 1149.75,685.515 1150.31,685.515 1150.87,685.515 1151.43,685.515 1151.99,685.515 1152.55,685.515 1153.11,685.515 1153.67,685.515 1154.23,685.515 1154.78,685.515 1155.34,685.515 1155.9,685.515 1156.46,685.515 1157.02,685.515 1157.58,685.515 1158.14,685.515 1158.7,685.515 1159.26,685.515 1159.82,685.515 1160.38,685.515 1160.94,685.515 1161.5,685.515 1162.05,685.515 1162.61,685.515 1163.17,685.515 1163.73,685.515 1164.29,685.515 1164.85,685.515 1165.41,685.515 1165.97,685.515 1166.53,685.515 1167.09,685.515 1167.65,685.515 1168.21,685.515 1168.77,685.515 1169.33,685.515 1169.88,685.515 1170.44,685.515 1171,685.515 1171.56,685.515 1172.12,685.515 1172.68,685.515 1173.24,685.515 1173.8,685.515 1174.36,685.515 1174.92,685.515 1175.48,685.515 1176.04,685.515 1176.6,685.515 1177.15,685.515 1177.71,685.515 1178.27,685.515 1178.83,685.515 1179.39,685.515 1179.95,685.515 1180.51,685.515 1181.07,685.515 1181.63,685.515 1182.19,685.515 1182.75,685.515 1183.31,685.515 1183.87,685.515 1184.43,685.515 1184.98,685.515 1185.54,685.515 1186.1,685.515 1186.66,685.515 1187.22,685.515 1187.78,685.515 1188.34,685.515 1188.9,685.515 1189.46,685.515 1190.02,685.515 1190.58,685.515 1191.14,685.515 1191.7,685.515 1192.25,685.515 1192.81,685.515 1193.37,685.515 1193.93,685.515 1194.49,685.515 1195.05,685.515 1195.61,685.515 1196.17,685.515 1196.73,685.515 1197.29,685.515 1197.85,685.515 1198.41,685.515 1198.97,685.515 1199.52,685.515 1200.08,685.515 1200.64,685.515 1201.2,685.515 1201.76,685.515 1202.32,685.515 1202.88,685.515 1203.44,685.515 1204,685.515 1204.56,685.515 1205.12,685.515 1205.68,685.515 1206.24,685.515 1206.8,685.515 1207.35,685.515 1207.91,685.515 1208.47,685.515 1209.03,685.515 1209.59,685.515 1210.15,685.515 1210.71,685.515 1211.27,685.515 1211.83,685.515 1212.39,685.515 1212.95,685.515 1213.51,685.515 1214.07,685.515 1214.62,685.515 1215.18,685.515 1215.74,685.515 1216.3,685.515 1216.86,685.515 1217.42,685.515 1217.98,685.515 1218.54,685.515 1219.1,685.515 1219.66,685.515 1220.22,685.515 1220.78,685.515 1221.34,685.515 1221.89,685.515 1222.45,685.515 1223.01,685.515 1223.57,685.515 1224.13,685.515 1224.69,685.515 1225.25,685.515 1225.81,685.515 1226.37,685.515 1226.93,685.515 1227.49,685.515 1228.05,685.515 1228.61,685.515 1229.17,685.515 1229.72,685.515 1230.28,685.515 1230.84,685.515 1231.4,685.515 1231.96,685.515 1232.52,685.515 1233.08,685.515 1233.64,685.515 1234.2,685.515 1234.76,685.515 1235.32,685.515 1235.88,685.515 1236.44,685.515 1236.99,685.515 1237.55,685.515 1238.11,685.515 1238.67,685.515 1239.23,685.515 1239.79,685.515 1240.35,685.515 1240.91,685.515 1241.47,685.515 1242.03,685.515 1242.59,685.515 1243.15,685.515 1243.71,685.515 1244.26,685.515 1244.82,685.515 1245.38,685.515 1245.94,685.515 1246.5,685.515 1247.06,685.515 1247.62,685.515 1248.18,685.515 1248.74,685.515 1249.3,685.515 1249.86,685.515 1250.42,685.515 1250.98,685.515 1251.54,685.515 1252.09,685.515 1252.65,685.515 1253.21,685.515 1253.77,685.515 1254.33,685.515 1254.89,685.515 1255.45,685.515 1256.01,685.515 1256.57,685.515 1257.13,685.515 1257.69,685.515 1258.25,685.515 1258.81,685.515 1259.36,685.515 1259.92,685.515 1260.48,685.515 1261.04,685.515 1261.6,685.515 1262.16,685.515 1262.72,685.515 1263.28,685.515 1263.84,685.515 1264.4,685.515 1264.96,685.515 1265.52,685.515 1266.08,685.515 1266.63,685.515 1267.19,685.515 1267.75,685.515 1268.31,685.515 1268.87,685.515 1269.43,685.515 1269.99,685.515 1270.55,685.515 1271.11,685.515 1271.67,685.515 1272.23,685.515 1272.79,685.515 1273.35,685.515 1273.91,685.515 1274.46,685.515 1275.02,685.515 1275.58,685.515 1276.14,685.515 1276.7,685.515 1277.26,685.515 1277.82,685.515 1278.38,685.515 1278.94,685.515 1279.5,685.515 1280.06,685.515 1280.62,685.515 1281.18,685.515 1281.73,685.515 1282.29,685.515 1282.85,685.515 1283.41,685.515 1283.97,685.515 1284.53,685.515 1285.09,685.515 1285.65,685.515 1286.21,685.515 1286.77,685.515 1287.33,685.515 1287.89,685.515 1288.45,685.515 1289,685.515 1289.56,685.515 1290.12,685.515 1290.68,685.515 1291.24,685.515 1291.8,685.515 1292.36,685.515 1292.92,685.515 1293.48,685.515 1294.04,685.515 1294.6,685.515 1295.16,685.515 1295.72,685.515 1296.28,685.515 1296.83,685.515 1297.39,685.515 1297.95,685.515 1298.51,685.515 1299.07,685.515 1299.63,685.515 1300.19,685.515 1300.75,685.515 1301.31,685.515 1301.87,685.515 1302.43,685.515 1302.99,685.515 1303.55,685.515 1304.1,685.515 1304.66,685.515 1305.22,685.515 1305.78,685.515 1306.34,685.515 1306.9,685.515 1307.46,685.515 1308.02,685.515 1308.58,685.515 1309.14,685.515 1309.7,685.515 1310.26,685.515 1310.82,685.515 1311.38,685.515 1311.93,685.515 1312.49,685.515 1313.05,685.515 1313.61,685.515 1314.17,685.515 1314.73,685.515 1315.29,685.515 1315.85,685.515 1316.41,685.515 1316.97,685.515 1317.53,685.515 1318.09,685.515 1318.65,685.515 1319.2,685.515 1319.76,685.515 1320.32,685.515 1320.88,685.515 1321.44,685.515 1322,685.515 1322.56,685.515 1323.12,685.515 1323.68,685.515 1324.24,685.515 1324.8,685.515 1325.36,685.515 1325.92,685.515 1326.47,685.515 1327.03,685.515 1327.59,685.515 1328.15,685.515 1328.71,685.515 1329.27,685.515 1329.83,685.515 1330.39,685.515 1330.95,685.515 1331.51,685.515 1332.07,685.515 1332.63,685.515 1333.19,685.515 1333.75,685.515 1334.3,685.515 1334.86,685.515 1335.42,685.515 1335.98,685.515 1336.54,685.515 1337.1,685.515 1337.66,685.515 1338.22,685.515 1338.78,685.515 1339.34,685.515 1339.9,685.515 1340.46,685.515 1341.02,685.515 1341.57,685.515 1342.13,685.515 1342.69,685.515 1343.25,685.515 1343.81,685.515 1344.37,685.515 1344.93,685.515 1345.49,685.515 1346.05,685.515 1346.61,685.515 1347.17,685.515 1347.73,685.515 1348.29,685.515 1348.84,685.515 1349.4,685.515 1349.96,685.515 1350.52,685.515 1351.08,685.515 1351.64,685.515 1352.2,685.515 1352.76,685.515 1353.32,685.515 1353.88,685.515 1354.44,685.515 1355,685.515 1355.56,685.515 1356.12,685.515 1356.67,685.515 1357.23,685.515 1357.79,685.515 1358.35,685.515 1358.91,685.515 1359.47,685.515 1360.03,685.515 1360.59,685.515 1361.15,685.515 1361.71,685.515 1362.27,685.515 1362.83,685.515 1363.39,685.515 1363.94,685.515 1364.5,685.515 1365.06,685.515 1365.62,685.515 1366.18,685.515 1366.74,685.515 1367.3,685.515 1367.86,685.515 1368.42,685.515 1368.98,685.515 1369.54,685.515 1370.1,685.515 1370.66,685.515 1371.21,685.515 1371.77,685.515 1372.33,685.515 1372.89,685.515 1373.45,685.515 1374.01,685.515 1374.57,685.515 1375.13,685.515 1375.69,685.515 1376.25,685.515 1376.81,685.515 1377.37,685.515 1377.93,685.515 1378.49,685.515 1379.04,685.515 1379.6,685.515 1380.16,685.515 1380.72,685.515 1381.28,685.515 1381.84,685.515 1382.4,685.515 1382.96,685.515 1383.52,685.515 1384.08,685.515 1384.64,685.515 1385.2,685.515 1385.76,685.515 1386.31,685.515 1386.87,685.515 1387.43,685.515 1387.99,685.515 1388.55,685.515 1389.11,685.515 1389.67,685.515 1390.23,685.515 1390.79,685.515 1391.35,685.515 1391.91,685.515 1392.47,685.515 1393.03,685.515 1393.58,685.515 1394.14,685.515 1394.7,685.515 1395.26,685.515 1395.82,685.515 1396.38,685.515 1396.94,685.515 1397.5,685.515 1398.06,685.515 1398.62,685.515 1399.18,685.515 1399.74,685.515 1400.3,685.515 1400.86,685.515 1401.41,685.515 1401.97,685.515 1402.53,685.515 1403.09,685.515 1403.65,685.515 1404.21,685.515 1404.77,685.515 1405.33,685.515 1405.89,685.515 1406.45,685.515 1407.01,685.515 1407.57,685.515 1408.13,685.515 1408.68,685.515 1409.24,685.515 1409.8,685.515 1410.36,685.515 1410.92,685.515 1411.48,685.515 1412.04,685.515 1412.6,685.515 1413.16,685.515 1413.72,685.515 1414.28,685.515 1414.84,685.515 1415.4,685.515 1415.95,685.515 1416.51,685.515 1417.07,685.515 1417.63,685.515 1418.19,685.515 1418.75,685.515 1419.31,685.515 1419.87,685.515 1420.43,685.515 1420.99,685.515 1421.55,685.515 1422.11,685.515 1422.67,685.515 1423.23,685.515 1423.78,685.515 1424.34,685.515 1424.9,685.515 1425.46,685.515 1426.02,685.515 1426.58,685.515 1427.14,685.515 1427.7,685.515 1428.26,685.515 1428.82,685.515 1429.38,685.515 1429.94,685.515 1430.5,685.515 1431.05,685.515 1431.61,685.515 1432.17,685.515 1432.73,685.515 1433.29,685.515 1433.85,685.515 1434.41,685.515 1434.97,685.515 1435.53,685.515 1436.09,685.515 1436.65,685.515 1437.21,685.515 1437.77,685.515 1438.33,685.515 1438.88,685.515 1439.44,685.515 1440,685.515 1440.56,685.515 1441.12,685.515 1441.68,685.515 1442.24,685.515 1442.8,685.515 1443.36,685.515 1443.92,685.515 1444.48,685.515 1445.04,685.515 1445.6,685.515 1446.15,685.515 1446.71,685.515 1447.27,685.515 1447.83,685.515 1448.39,685.515 1448.95,685.515 1449.51,685.515 1450.07,685.515 1450.63,685.515 1451.19,685.515 1451.75,685.515 1452.31,685.515 1452.87,685.515 1453.42,685.515 1453.98,685.515 1454.54,685.515 1455.1,685.515 1455.66,685.515 1456.22,685.515 1456.78,685.515 1457.34,685.515 1457.9,685.515 1458.46,685.515 1459.02,685.515 1459.58,685.515 1460.14,685.515 1460.7,685.515 1461.25,685.515 1461.81,685.515 1462.37,685.515 1462.93,685.515 1463.49,685.515 1464.05,685.515 1464.61,685.515 1465.17,685.515 1465.73,685.515 1466.29,685.515 1466.85,685.515 1467.41,685.515 1467.97,685.515 1468.52,685.515 1469.08,685.515 1469.64,685.515 1470.2,685.515 1470.76,685.515 1471.32,685.515 1471.88,685.515 1472.44,685.515 1473,685.515 1473.56,685.515 1474.12,685.515 1474.68,685.515 1475.24,685.515 1475.79,685.515 1476.35,685.515 1476.91,685.515 1477.47,685.515 1478.03,685.515 1478.59,685.515 1479.15,685.515 1479.71,685.515 1480.27,685.515 1480.83,685.515 1481.39,685.515 1481.95,685.515 1482.51,685.515 1483.07,685.515 1483.62,685.515 1484.18,685.515 1484.74,685.515 1485.3,685.515 1485.86,685.515 1486.42,685.515 1486.98,685.515 1487.54,685.515 1488.1,685.515 1488.66,685.515 1489.22,685.515 1489.78,685.515 1490.34,685.515 1490.89,685.515 1491.45,685.515 1492.01,685.515 1492.57,685.515 1493.13,685.515 1493.69,685.515 1494.25,685.515 1494.81,685.515 1495.37,685.515 1495.93,685.515 1496.49,685.515 1497.05,685.515 1497.61,685.515 1498.16,685.515 1498.72,685.515 1499.28,685.515 1499.84,685.515 1500.4,685.515 1500.96,685.515 1501.52,685.515 1502.08,685.515 1502.64,685.515 1503.2,685.515 1503.76,685.515 1504.32,685.515 1504.88,685.515 1505.44,685.515 1505.99,685.515 1506.55,685.515 1507.11,685.515 1507.67,685.515 1508.23,685.515 1508.79,685.515 1509.35,685.515 1509.91,685.515 1510.47,685.515 1511.03,685.515 1511.59,685.515 1512.15,685.515 1512.71,685.515 1513.26,685.515 1513.82,685.515 1514.38,685.515 1514.94,685.515 1515.5,685.515 1516.06,685.515 1516.62,685.515 1517.18,685.515 1517.74,685.515 1518.3,685.515 1518.86,685.515 1519.42,685.515 1519.98,685.515 1520.53,685.515 1521.09,685.515 1521.65,685.515 1522.21,685.515 1522.77,685.515 1523.33,685.515 1523.89,685.515 1524.45,685.515 1525.01,685.515 1525.57,685.515 1526.13,685.515 1526.69,685.515 1527.25,685.515 1527.81,685.515 1528.36,685.515 1528.92,685.515 1529.48,685.515 1530.04,685.515 1530.6,685.515 1531.16,685.515 1531.72,685.515 1532.28,685.515 1532.84,685.515 1533.4,685.515 1533.96,685.515 1534.52,685.515 1535.08,685.515 1535.63,685.515 1536.19,685.515 1536.75,685.515 1537.31,685.515 1537.87,685.515 1538.43,685.515 1538.99,685.515 1539.55,685.515 1540.11,685.515 1540.67,685.515 1541.23,685.515 1541.79,685.515 1542.35,685.515 1542.9,685.515 1543.46,685.515 1544.02,685.515 1544.58,685.515 1545.14,685.515 1545.7,685.515 1546.26,685.515 1546.82,685.515 1547.38,685.515 1547.94,685.515 1548.5,685.515 1549.06,685.515 1549.62,685.515 1550.18,685.515 1550.73,685.515 1551.29,685.515 1551.85,685.515 1552.41,685.515 1552.97,685.515 1553.53,685.515 1554.09,685.515 1554.65,685.515 1555.21,685.515 1555.77,685.515 1556.33,685.515 1556.89,685.515 1557.45,685.515 1558,685.515 1558.56,685.515 1559.12,685.515 1559.68,685.515 1560.24,685.515 1560.8,685.515 1561.36,685.515 1561.92,685.515 1562.48,685.515 1563.04,685.515 1563.6,685.515 1564.16,685.515 1564.72,685.515 1565.28,685.515 1565.83,685.515 1566.39,685.515 1566.95,685.515 1567.51,685.515 1568.07,685.515 1568.63,685.515 1569.19,685.515 1569.75,685.515 1570.31,685.515 1570.87,685.515 1571.43,685.515 1571.99,685.515 1572.55,685.515 1573.1,685.515 1573.66,685.515 1574.22,685.515 1574.78,685.515 1575.34,685.515 1575.9,685.515 1576.46,685.515 1577.02,685.515 1577.58,685.515 1578.14,685.515 1578.7,685.515 1579.26,685.515 1579.82,685.515 1580.37,685.515 1580.93,685.515 1581.49,685.515 1582.05,685.515 1582.61,685.515 1583.17,685.515 1583.73,685.515 1584.29,685.515 1584.85,685.515 1585.41,685.515 1585.97,685.515 1586.53,685.515 1587.09,685.515 1587.65,685.515 1588.2,685.515 1588.76,685.515 1589.32,685.515 1589.88,685.515 1590.44,685.515 1591,685.515 1591.56,685.515 1592.12,685.515 1592.68,685.515 1593.24,685.515 1593.8,685.515 1594.36,685.515 1594.92,685.515 1595.47,685.515 1596.03,685.515 1596.59,685.515 1597.15,685.515 1597.71,685.515 1598.27,685.515 1598.83,685.515 1599.39,685.515 1599.95,685.515 1600.51,685.515 1601.07,685.515 1601.63,685.515 1602.19,685.515 1602.74,685.515 1603.3,685.515 1603.86,685.515 1604.42,685.515 1604.98,685.515 1605.54,685.515 1606.1,685.515 1606.66,685.515 1607.22,685.515 1607.78,685.515 1608.34,685.515 1608.9,685.515 1609.46,685.515 1610.02,685.515 1610.57,685.515 1611.13,685.515 1611.69,685.515 1612.25,685.515 1612.81,685.515 1613.37,685.515 1613.93,685.515 1614.49,685.515 1615.05,685.515 1615.61,685.515 1616.17,685.515 1616.73,685.515 1617.29,685.515 1617.84,685.515 1618.4,685.515 1618.96,685.515 1619.52,685.515 1620.08,685.515 1620.64,685.515 1621.2,685.515 1621.76,685.515 1622.32,685.515 1622.88,685.515 1623.44,685.515 1624,685.515 1624.56,685.515 1625.11,685.515 1625.67,685.515 1626.23,685.515 1626.79,685.515 1627.35,685.515 1627.91,685.515 1628.47,685.515 1629.03,685.515 1629.59,685.515 1630.15,685.515 1630.71,685.515 1631.27,685.515 1631.83,685.515 1632.39,685.515 1632.94,685.515 1633.5,685.515 1634.06,685.515 1634.62,685.515 1635.18,685.515 1635.74,685.515 1636.3,685.515 1636.86,685.515 1637.42,685.515 1637.98,685.515 1638.54,685.515 1639.1,685.515 1639.66,685.515 1640.21,685.515 1640.77,685.515 1641.33,685.515 1641.89,685.515 1642.45,685.515 1643.01,685.515 1643.57,685.515 1644.13,685.515 1644.69,685.515 1645.25,685.515 1645.81,685.515 1646.37,685.515 1646.93,685.515 1647.48,685.515 1648.04,685.515 1648.6,685.515 1649.16,685.515 1649.72,685.515 1650.28,685.515 1650.84,685.515 1651.4,685.515 1651.96,685.515 1652.52,685.515 1653.08,685.515 1653.64,685.515 1654.2,685.515 1654.76,685.515 1655.31,685.515 1655.87,685.515 1656.43,685.515 1656.99,685.515 1657.55,685.515 1658.11,685.515 1658.67,685.515 1659.23,685.515 1659.79,685.515 1660.35,685.515 1660.91,685.515 1661.47,685.515 1662.03,685.515 1662.58,685.515 1663.14,685.515 1663.7,685.515 1664.26,685.515 1664.82,685.515 1665.38,685.515 1665.94,685.515 1666.5,685.515 1667.06,685.515 1667.62,685.515 1668.18,685.515 1668.74,685.515 1669.3,685.515 1669.85,685.515 1670.41,685.515 1670.97,685.515 1671.53,685.515 1672.09,685.515 1672.65,685.515 1673.21,685.515 1673.77,685.515 1674.33,685.515 1674.89,685.515 1675.45,685.515 1676.01,685.515 1676.57,685.515 1677.13,685.515 1677.68,685.515 1678.24,685.515 1678.8,685.515 1679.36,685.515 1679.92,685.515 1680.48,685.515 1681.04,685.515 1681.6,685.515 1682.16,685.515 1682.72,685.515 1683.28,685.515 1683.84,685.515 1684.4,685.515 1684.95,685.515 1685.51,685.515 1686.07,685.515 1686.63,685.515 1687.19,685.515 1687.75,685.515 1688.31,685.515 1688.87,685.515 1689.43,685.515 1689.99,685.515 1690.55,685.515 1691.11,685.515 1691.67,685.515 1692.23,685.515 1692.78,685.515 1693.34,685.515 1693.9,685.515 1694.46,685.515 1695.02,685.515 1695.58,685.515 1696.14,685.515 1696.7,685.515 1697.26,685.515 1697.82,685.515 1698.38,685.515 1698.94,685.515 1699.5,685.515 1700.05,685.515 1700.61,685.515 1701.17,685.515 1701.73,685.515 1702.29,685.515 1702.85,685.515 1703.41,685.515 1703.97,685.515 1704.53,685.515 1705.09,685.515 1705.65,685.515 1706.21,685.515 1706.77,685.515 1707.32,685.515 1707.88,685.515 1708.44,685.515 1709,685.515 1709.56,685.515 1710.12,685.515 1710.68,685.515 1711.24,685.515 1711.8,685.515 1712.36,685.515 1712.92,685.515 1713.48,685.515 1714.04,685.515 1714.6,685.515 1715.15,685.515 1715.71,685.515 1716.27,685.515 1716.83,685.515 1717.39,685.515 1717.95,685.515 1718.51,685.515 1719.07,685.515 1719.63,685.515 1720.19,685.515 1720.75,685.515 1721.31,685.515 1721.87,685.515 1722.42,685.515 1722.98,685.515 1723.54,685.515 1724.1,685.515 1724.66,685.515 1725.22,685.515 1725.78,685.515 1726.34,685.515 1726.9,685.515 1727.46,685.515 1728.02,685.515 1728.58,685.515 1729.14,685.515 1729.69,685.515 1730.25,685.515 1730.81,685.515 1731.37,685.515 1731.93,685.515 1732.49,685.515 1733.05,685.515 1733.61,685.515 1734.17,685.515 1734.73,685.515 1735.29,685.515 1735.85,685.515 1736.41,685.515 1736.97,685.515 1737.52,685.515 1738.08,685.515 1738.64,685.515 1739.2,685.515 1739.76,685.515 1740.32,685.515 1740.88,685.515 1741.44,685.515 1742,685.515 1742.56,685.515 1743.12,685.515 1743.68,685.515 1744.24,685.515 1744.79,685.515 1745.35,685.515 1745.91,685.515 1746.47,685.515 1747.03,685.515 1747.59,685.515 1748.15,685.515 1748.71,685.515 1749.27,685.515 1749.83,685.515 1750.39,685.515 1750.95,685.515 1751.51,685.515 1752.06,685.515 1752.62,685.515 1753.18,685.515 1753.74,685.515 1754.3,685.515 1754.86,685.515 1755.42,685.515 1755.98,685.515 1756.54,685.515 1757.1,685.515 1757.66,685.515 1758.22,685.515 1758.78,685.515 1759.34,685.515 1759.89,685.515 1760.45,685.515 1761.01,685.515 1761.57,685.515 1762.13,685.515 1762.69,685.515 1763.25,685.515 1763.81,685.515 1764.37,685.515 1764.93,685.515 1765.49,685.515 1766.05,685.515 1766.61,685.515 1767.16,685.515 1767.72,685.515 1768.28,685.515 1768.84,685.515 1769.4,685.515 1769.96,685.515 1770.52,685.515 1771.08,685.515 1771.64,685.515 1772.2,685.515 1772.76,685.515 1773.32,685.515 1773.88,685.515 1774.43,685.515 1774.99,685.515 1775.55,685.515 1776.11,685.515 1776.67,685.515 1777.23,685.515 1777.79,685.515 1778.35,685.515 1778.91,685.515 1779.47,685.515 1780.03,685.515 1780.59,685.515 1781.15,685.515 1781.71,685.515 1782.26,685.515 1782.82,685.515 1783.38,685.515 1783.94,685.515 1784.5,685.515 1785.06,685.515 1785.62,685.515 1786.18,685.515 1786.74,685.515 1787.3,685.515 1787.86,685.515 1788.42,685.515 1788.98,685.515 1789.53,685.515 1790.09,685.515 1790.65,685.515 1791.21,685.515 1791.77,685.515 1792.33,685.515 1792.89,685.515 1793.45,685.515 1794.01,685.515 1794.57,685.515 1795.13,685.515 1795.69,685.515 1796.25,685.515 1796.8,685.515 1797.36,685.515 1797.92,685.515 1798.48,685.515 1799.04,685.515 1799.6,685.515 1800.16,685.515 1800.72,685.515 1801.28,685.515 1801.84,685.515 1802.4,685.515 1802.96,685.515 1803.52,685.515 1804.08,685.515 1804.63,685.515 1805.19,685.515 1805.75,685.515 1806.31,685.515 1806.87,685.515 1807.43,685.515 1807.99,685.515 1808.55,685.515 1809.11,685.515 1809.67,685.515 1810.23,685.515 1810.79,685.515 1811.35,685.515 1811.9,685.515 1812.46,685.515 1813.02,685.515 1813.58,685.515 1814.14,685.515 1814.7,685.515 1815.26,685.515 1815.82,685.515 1816.38,685.515 1816.94,685.515 1817.5,685.515 1818.06,685.515 1818.62,685.515 1819.18,685.515 1819.73,685.515 1820.29,685.515 1820.85,685.515 1821.41,685.515 1821.97,685.515 1822.53,685.515 1823.09,685.515 1823.65,685.515 1824.21,685.515 1824.77,685.515 1825.33,685.515 1825.89,685.515 1826.45,685.515 1827,685.515 1827.56,685.515 1828.12,685.515 1828.68,685.515 1829.24,685.515 1829.8,685.515 1830.36,685.515 1830.92,685.515 1831.48,685.515 1832.04,685.515 1832.6,685.515 1833.16,685.515 1833.72,685.515 1834.27,685.515 1834.83,685.515 1835.39,685.515 1835.95,685.515 1836.51,685.515 1837.07,685.515 1837.63,685.515 1838.19,685.515 \"/>\n<path clip-path=\"url(#clip133)\" d=\"M720.247 684.142 L720.806 684.142 L721.365 684.142 L721.924 684.142 L722.484 684.142 L723.043 684.142 L723.602 684.142 L724.161 684.142 L724.721 684.142 L725.28 684.142 L725.839 684.142 L726.398 684.142 L726.958 684.142 L727.517 684.142 L728.076 684.142 L728.635 684.142 L729.195 684.142 L729.754 684.142 L730.313 684.142 L730.872 684.142 L731.432 684.142 L731.991 684.142 L732.55 684.142 L733.109 684.142 L733.669 684.142 L734.228 684.142 L734.787 684.142 L735.346 684.142 L735.906 684.142 L736.465 684.142 L737.024 684.142 L737.583 684.142 L738.143 684.142 L738.702 684.142 L739.261 684.142 L739.82 684.142 L740.38 684.142 L740.939 684.142 L741.498 684.142 L742.057 684.142 L742.617 684.142 L743.176 684.142 L743.735 684.142 L744.294 684.142 L744.854 684.142 L745.413 684.142 L745.972 684.142 L746.531 684.142 L747.091 684.142 L747.65 684.142 L748.209 684.142 L748.768 684.142 L749.328 684.142 L749.887 684.142 L750.446 684.142 L751.005 684.142 L751.565 684.142 L752.124 684.142 L752.683 684.142 L753.242 684.142 L753.802 684.142 L754.361 684.142 L754.92 684.142 L755.479 684.142 L756.039 684.142 L756.598 684.142 L757.157 684.142 L757.716 684.142 L758.276 684.142 L758.835 684.142 L759.394 684.142 L759.953 684.142 L760.513 684.142 L761.072 684.142 L761.631 684.142 L762.19 684.142 L762.75 684.142 L763.309 684.142 L763.868 684.142 L764.427 684.142 L764.987 684.142 L765.546 684.142 L766.105 684.142 L766.664 684.142 L767.224 684.142 L767.783 684.142 L768.342 684.142 L768.901 684.142 L769.461 684.142 L770.02 684.142 L770.579 684.142 L771.138 684.142 L771.698 684.142 L772.257 684.142 L772.816 684.142 L773.375 684.142 L773.935 684.142 L774.494 684.142 L775.053 684.142 L775.612 684.142 L776.172 684.142 L776.731 684.142 L777.29 684.142 L777.849 684.142 L778.409 684.142 L778.968 684.142 L779.527 684.142 L780.086 684.142 L780.646 684.142 L781.205 684.142 L781.764 684.142 L782.323 684.142 L782.883 684.142 L783.442 684.142 L784.001 684.142 L784.56 684.142 L785.12 684.142 L785.679 684.142 L786.238 684.142 L786.797 684.142 L787.357 684.142 L787.916 684.142 L788.475 684.142 L789.034 684.142 L789.594 684.142 L790.153 684.142 L790.712 684.142 L791.271 684.142 L791.831 684.142 L792.39 684.142 L792.949 684.142 L793.508 684.142 L794.068 684.142 L794.627 684.142 L795.186 684.142 L795.745 684.142 L796.305 684.142 L796.864 684.142 L797.423 684.142 L797.982 684.142 L798.542 684.142 L799.101 684.142 L799.66 684.142 L800.219 684.142 L800.779 684.142 L801.338 684.142 L801.897 684.142 L802.456 684.142 L803.016 684.142 L803.575 684.142 L804.134 684.142 L804.693 684.142 L805.253 684.142 L805.812 684.142 L806.371 684.142 L806.931 684.142 L807.49 684.142 L808.049 684.142 L808.608 684.142 L809.168 684.142 L809.727 684.142 L810.286 684.142 L810.845 684.142 L811.405 684.142 L811.964 684.142 L812.523 684.142 L813.082 684.142 L813.642 684.142 L814.201 684.142 L814.76 684.142 L815.319 684.142 L815.879 684.142 L816.438 684.142 L816.997 684.142 L817.556 684.142 L818.116 684.142 L818.675 684.142 L819.234 684.142 L819.793 684.142 L820.353 684.142 L820.912 684.142 L821.471 684.142 L822.03 684.142 L822.59 684.142 L823.149 684.142 L823.708 684.142 L824.267 684.142 L824.827 684.142 L825.386 684.142 L825.945 684.142 L826.504 684.142 L827.064 684.142 L827.623 684.142 L828.182 684.142 L828.741 684.142 L829.301 684.142 L829.86 684.142 L830.419 684.142 L830.978 684.142 L831.538 684.142 L832.097 684.142 L832.656 684.142 L833.215 684.142 L833.775 684.142 L834.334 684.142 L834.893 684.142 L835.452 684.142 L836.012 684.142 L836.571 684.142 L837.13 684.142 L837.689 684.142 L838.249 684.142 L838.808 684.142 L839.367 684.142 L839.926 684.142 L840.486 684.142 L841.045 684.142 L841.604 684.142 L842.163 684.142 L842.723 684.142 L843.282 684.142 L843.841 684.142 L844.4 684.142 L844.96 684.142 L845.519 684.142 L846.078 684.142 L846.637 684.142 L847.197 684.142 L847.756 684.142 L848.315 684.142 L848.874 684.142 L849.434 684.142 L849.993 684.142 L850.552 684.142 L851.111 684.142 L851.671 684.142 L852.23 684.142 L852.789 684.142 L853.348 684.142 L853.908 684.142 L854.467 684.142 L855.026 684.142 L855.585 684.142 L856.145 684.142 L856.704 684.142 L857.263 684.142 L857.822 684.142 L858.382 684.142 L858.941 684.142 L859.5 684.142 L860.059 684.142 L860.619 684.142 L861.178 684.142 L861.737 684.142 L862.296 684.142 L862.856 684.142 L863.415 684.142 L863.974 684.142 L864.533 684.142 L865.093 684.142 L865.652 684.142 L866.211 684.142 L866.77 684.142 L867.33 684.142 L867.889 684.142 L868.448 684.142 L869.007 684.142 L869.567 684.142 L870.126 684.142 L870.685 684.142 L871.244 684.142 L871.804 684.142 L872.363 684.142 L872.922 684.142 L873.481 684.142 L874.041 684.142 L874.6 684.142 L875.159 684.142 L875.718 684.142 L876.278 684.142 L876.837 684.142 L877.396 684.142 L877.955 684.142 L878.515 684.142 L879.074 684.142 L879.633 684.142 L880.192 684.142 L880.752 684.142 L881.311 684.142 L881.87 684.142 L882.429 684.142 L882.989 684.142 L883.548 684.142 L884.107 684.142 L884.666 684.142 L885.226 684.142 L885.785 684.142 L886.344 684.142 L886.903 684.142 L887.463 684.142 L888.022 684.142 L888.581 684.142 L889.14 684.142 L889.7 684.142 L890.259 684.142 L890.818 684.142 L891.377 684.142 L891.937 684.142 L892.496 684.142 L893.055 684.142 L893.614 684.142 L894.174 684.142 L894.733 684.142 L895.292 684.142 L895.851 684.142 L896.411 684.142 L896.97 684.142 L897.529 684.142 L898.088 684.142 L898.648 684.142 L899.207 684.142 L899.766 684.142 L900.325 684.142 L900.885 684.142 L901.444 684.142 L902.003 684.142 L902.562 684.142 L903.122 684.142 L903.681 684.142 L904.24 684.142 L904.799 684.142 L905.359 684.142 L905.918 684.142 L906.477 684.142 L907.036 684.142 L907.596 684.142 L908.155 684.142 L908.714 684.142 L909.273 684.142 L909.833 684.142 L910.392 684.142 L910.951 684.142 L911.51 684.142 L912.07 684.142 L912.629 684.142 L913.188 684.142 L913.747 684.142 L914.307 684.142 L914.866 684.142 L915.425 684.142 L915.984 684.142 L916.544 684.142 L917.103 684.142 L917.662 684.142 L918.221 684.142 L918.781 684.142 L919.34 684.142 L919.899 684.142 L920.458 684.142 L921.018 684.142 L921.577 684.142 L922.136 684.142 L922.695 684.142 L923.255 684.142 L923.814 684.142 L924.373 684.142 L924.932 684.142 L925.492 684.142 L926.051 684.142 L926.61 684.142 L927.169 684.142 L927.729 684.142 L928.288 684.142 L928.847 684.142 L929.406 684.142 L929.966 684.142 L930.525 684.142 L931.084 684.142 L931.644 684.142 L932.203 684.142 L932.762 684.142 L933.321 684.142 L933.881 684.142 L934.44 684.142 L934.999 684.142 L935.558 684.142 L936.118 684.142 L936.677 684.142 L937.236 684.142 L937.795 684.142 L938.355 684.142 L938.914 684.142 L939.473 684.142 L940.032 684.142 L940.592 684.142 L941.151 684.142 L941.71 684.142 L942.269 684.142 L942.829 684.142 L943.388 684.142 L943.947 684.142 L944.506 684.142 L945.066 684.142 L945.625 684.142 L946.184 684.142 L946.743 684.142 L947.303 684.142 L947.862 684.142 L948.421 684.142 L948.98 684.142 L949.54 684.142 L950.099 684.142 L950.658 684.142 L951.217 684.142 L951.777 684.142 L952.336 684.142 L952.895 684.142 L953.454 684.142 L954.014 684.142 L954.573 684.142 L955.132 684.142 L955.691 684.142 L956.251 684.142 L956.81 684.142 L957.369 684.142 L957.928 684.142 L958.488 684.142 L959.047 684.142 L959.606 684.142 L960.165 684.142 L960.725 684.142 L961.284 684.142 L961.843 684.142 L962.402 684.142 L962.962 684.142 L963.521 684.142 L964.08 684.142 L964.639 684.142 L965.199 684.142 L965.758 684.142 L966.317 684.142 L966.876 684.142 L967.436 684.142 L967.995 684.142 L968.554 684.142 L969.113 684.142 L969.673 684.142 L970.232 684.142 L970.791 684.142 L971.35 684.142 L971.91 684.142 L972.469 684.142 L973.028 684.142 L973.587 684.142 L974.147 684.142 L974.706 684.142 L975.265 684.142 L975.824 684.142 L976.384 684.142 L976.943 684.142 L977.502 684.142 L978.061 684.142 L978.621 684.142 L979.18 684.142 L979.739 684.142 L980.298 684.142 L980.858 684.142 L981.417 684.142 L981.976 684.142 L982.535 684.142 L983.095 684.142 L983.654 684.142 L984.213 684.142 L984.772 684.142 L985.332 684.142 L985.891 684.142 L986.45 684.142 L987.009 684.142 L987.569 684.142 L988.128 684.142 L988.687 684.142 L989.246 684.142 L989.806 684.142 L990.365 684.142 L990.924 684.142 L991.483 684.142 L992.043 684.142 L992.602 684.142 L993.161 684.142 L993.72 684.142 L994.28 684.142 L994.839 684.142 L995.398 684.142 L995.957 684.142 L996.517 684.142 L997.076 684.142 L997.635 684.142 L998.194 684.142 L998.754 684.142 L999.313 684.142 L999.872 684.142 L1000.43 684.142 L1000.99 684.142 L1001.55 684.142 L1002.11 684.142 L1002.67 684.142 L1003.23 684.142 L1003.79 684.142 L1004.35 684.142 L1004.91 684.142 L1005.46 684.142 L1006.02 684.142 L1006.58 684.142 L1007.14 684.142 L1007.7 684.142 L1008.26 684.142 L1008.82 684.142 L1009.38 684.142 L1009.94 684.142 L1010.5 684.142 L1011.06 684.142 L1011.62 684.142 L1012.18 684.142 L1012.73 684.142 L1013.29 684.142 L1013.85 684.142 L1014.41 684.142 L1014.97 684.142 L1015.53 684.142 L1016.09 684.142 L1016.65 684.142 L1017.21 684.142 L1017.77 684.142 L1018.33 684.142 L1018.89 684.142 L1019.45 684.142 L1020.01 684.142 L1020.56 684.142 L1021.12 684.142 L1021.68 684.142 L1022.24 684.142 L1022.8 684.142 L1023.36 684.142 L1023.92 684.142 L1024.48 684.142 L1025.04 684.142 L1025.6 684.142 L1026.16 684.142 L1026.72 684.142 L1027.28 684.142 L1027.83 684.142 L1028.39 684.142 L1028.95 684.142 L1029.51 684.142 L1030.07 684.142 L1030.63 684.142 L1031.19 684.142 L1031.75 684.142 L1032.31 684.142 L1032.87 684.142 L1033.43 684.142 L1033.99 684.142 L1034.55 684.142 L1035.1 684.142 L1035.66 684.142 L1036.22 684.142 L1036.78 684.142 L1037.34 684.142 L1037.9 684.142 L1038.46 684.142 L1039.02 684.142 L1039.58 684.142 L1040.14 684.142 L1040.7 684.142 L1041.26 684.142 L1041.82 684.142 L1042.38 684.142 L1042.93 684.142 L1043.49 684.142 L1044.05 684.142 L1044.61 684.142 L1045.17 684.142 L1045.73 684.142 L1046.29 684.142 L1046.85 684.142 L1047.41 684.142 L1047.97 684.142 L1048.53 684.142 L1049.09 684.142 L1049.65 684.142 L1050.2 684.142 L1050.76 684.142 L1051.32 684.142 L1051.88 684.142 L1052.44 684.142 L1053 684.142 L1053.56 684.142 L1054.12 684.142 L1054.68 684.142 L1055.24 684.142 L1055.8 684.142 L1056.36 684.142 L1056.92 684.142 L1057.48 684.142 L1058.03 684.142 L1058.59 684.142 L1059.15 684.142 L1059.71 684.142 L1060.27 684.142 L1060.83 684.142 L1061.39 684.142 L1061.95 684.142 L1062.51 684.142 L1063.07 684.142 L1063.63 684.142 L1064.19 684.142 L1064.75 684.142 L1065.3 684.142 L1065.86 684.142 L1066.42 684.142 L1066.98 684.142 L1067.54 684.142 L1068.1 684.142 L1068.66 684.142 L1069.22 684.142 L1069.78 684.142 L1070.34 684.142 L1070.9 684.142 L1071.46 684.142 L1072.02 684.142 L1072.57 684.142 L1073.13 684.142 L1073.69 684.142 L1074.25 684.142 L1074.81 684.142 L1075.37 684.142 L1075.93 684.142 L1076.49 684.142 L1077.05 684.142 L1077.61 684.142 L1078.17 684.142 L1078.73 684.142 L1079.29 684.142 L1079.85 684.142 L1080.4 684.142 L1080.96 684.142 L1081.52 684.142 L1082.08 684.142 L1082.64 684.142 L1083.2 684.142 L1083.76 684.142 L1084.32 684.142 L1084.88 684.142 L1085.44 684.142 L1086 684.142 L1086.56 684.142 L1087.12 684.142 L1087.67 684.142 L1088.23 684.142 L1088.79 684.142 L1089.35 684.142 L1089.91 684.142 L1090.47 684.142 L1091.03 684.142 L1091.59 684.142 L1092.15 684.142 L1092.71 684.142 L1093.27 684.142 L1093.83 684.142 L1094.39 684.142 L1094.94 684.142 L1095.5 684.142 L1096.06 684.142 L1096.62 684.142 L1097.18 684.142 L1097.74 684.142 L1098.3 684.142 L1098.86 684.142 L1099.42 684.142 L1099.98 684.142 L1100.54 684.142 L1101.1 684.142 L1101.66 684.142 L1102.22 684.142 L1102.77 684.142 L1103.33 684.142 L1103.89 684.142 L1104.45 684.142 L1105.01 684.142 L1105.57 684.142 L1106.13 684.142 L1106.69 684.142 L1107.25 684.142 L1107.81 684.142 L1108.37 684.142 L1108.93 684.142 L1109.49 684.142 L1110.04 684.142 L1110.6 684.142 L1111.16 684.142 L1111.72 684.142 L1112.28 684.142 L1112.84 684.142 L1113.4 684.142 L1113.96 684.142 L1114.52 684.142 L1115.08 684.142 L1115.64 684.142 L1116.2 684.142 L1116.76 684.142 L1117.31 684.142 L1117.87 684.142 L1118.43 684.142 L1118.99 684.142 L1119.55 684.142 L1120.11 684.142 L1120.67 684.142 L1121.23 684.142 L1121.79 684.142 L1122.35 684.142 L1122.91 684.142 L1123.47 684.142 L1124.03 684.142 L1124.59 684.142 L1125.14 684.142 L1125.7 684.142 L1126.26 684.142 L1126.82 684.142 L1127.38 684.142 L1127.94 684.142 L1128.5 684.142 L1129.06 684.142 L1129.62 684.142 L1130.18 684.142 L1130.74 684.142 L1131.3 684.142 L1131.86 684.142 L1132.41 684.142 L1132.97 684.142 L1133.53 684.142 L1134.09 684.142 L1134.65 684.142 L1135.21 684.142 L1135.77 684.142 L1136.33 684.142 L1136.89 684.142 L1137.45 684.142 L1138.01 684.142 L1138.57 684.142 L1139.13 684.142 L1139.68 684.142 L1140.24 684.142 L1140.8 684.142 L1141.36 684.142 L1141.92 684.142 L1142.48 684.142 L1143.04 684.142 L1143.6 684.142 L1144.16 684.142 L1144.72 684.142 L1145.28 684.142 L1145.84 684.142 L1146.4 684.142 L1146.96 684.142 L1147.51 684.142 L1148.07 684.142 L1148.63 684.142 L1149.19 684.142 L1149.75 684.142 L1150.31 684.142 L1150.87 684.142 L1151.43 684.142 L1151.99 684.142 L1152.55 684.142 L1153.11 684.142 L1153.67 684.142 L1154.23 684.142 L1154.78 684.142 L1155.34 684.142 L1155.9 684.142 L1156.46 684.142 L1157.02 684.142 L1157.58 684.142 L1158.14 684.142 L1158.7 684.142 L1159.26 684.142 L1159.82 684.142 L1160.38 684.142 L1160.94 684.142 L1161.5 684.142 L1162.05 684.142 L1162.61 684.142 L1163.17 684.142 L1163.73 684.142 L1164.29 684.142 L1164.85 684.142 L1165.41 684.142 L1165.97 684.142 L1166.53 684.142 L1167.09 684.142 L1167.65 684.142 L1168.21 684.142 L1168.77 684.142 L1169.33 684.142 L1169.88 684.142 L1170.44 684.142 L1171 684.142 L1171.56 684.142 L1172.12 684.142 L1172.68 684.142 L1173.24 684.142 L1173.8 684.142 L1174.36 684.142 L1174.92 684.142 L1175.48 684.142 L1176.04 684.142 L1176.6 684.142 L1177.15 684.142 L1177.71 684.142 L1178.27 684.142 L1178.83 684.142 L1179.39 684.142 L1179.95 684.142 L1180.51 684.142 L1181.07 684.142 L1181.63 684.142 L1182.19 684.142 L1182.75 684.142 L1183.31 684.142 L1183.87 684.142 L1184.43 684.142 L1184.98 684.142 L1185.54 684.142 L1186.1 684.142 L1186.66 684.142 L1187.22 684.142 L1187.78 684.142 L1188.34 684.142 L1188.9 684.142 L1189.46 684.142 L1190.02 684.142 L1190.58 684.142 L1191.14 684.142 L1191.7 684.142 L1192.25 684.142 L1192.81 684.142 L1193.37 684.142 L1193.93 684.142 L1194.49 684.142 L1195.05 684.142 L1195.61 684.142 L1196.17 684.142 L1196.73 684.142 L1197.29 684.142 L1197.85 684.142 L1198.41 684.142 L1198.97 684.142 L1199.52 684.142 L1200.08 684.142 L1200.64 684.142 L1201.2 684.142 L1201.76 684.142 L1202.32 684.142 L1202.88 684.142 L1203.44 684.142 L1204 684.142 L1204.56 684.142 L1205.12 684.142 L1205.68 684.142 L1206.24 684.142 L1206.8 684.142 L1207.35 684.142 L1207.91 684.142 L1208.47 684.142 L1209.03 684.142 L1209.59 684.142 L1210.15 684.142 L1210.71 684.142 L1211.27 684.142 L1211.83 684.142 L1212.39 684.142 L1212.95 684.142 L1213.51 684.142 L1214.07 684.142 L1214.62 684.142 L1215.18 684.142 L1215.74 684.142 L1216.3 684.142 L1216.86 684.142 L1217.42 684.142 L1217.98 684.142 L1218.54 684.142 L1219.1 684.142 L1219.66 684.142 L1220.22 684.142 L1220.78 684.142 L1221.34 684.142 L1221.89 684.142 L1222.45 684.142 L1223.01 684.142 L1223.57 684.142 L1224.13 684.142 L1224.69 684.142 L1225.25 684.142 L1225.81 684.142 L1226.37 684.142 L1226.93 684.142 L1227.49 684.142 L1228.05 684.142 L1228.61 684.142 L1229.17 684.142 L1229.72 684.142 L1230.28 684.142 L1230.84 684.142 L1231.4 684.142 L1231.96 684.142 L1232.52 684.142 L1233.08 684.142 L1233.64 684.142 L1234.2 684.142 L1234.76 684.142 L1235.32 684.142 L1235.88 684.142 L1236.44 684.142 L1236.99 684.142 L1237.55 684.142 L1238.11 684.142 L1238.67 684.142 L1239.23 684.142 L1239.79 684.142 L1240.35 684.142 L1240.91 684.142 L1241.47 684.142 L1242.03 684.142 L1242.59 684.142 L1243.15 684.142 L1243.71 684.142 L1244.26 684.142 L1244.82 684.142 L1245.38 684.142 L1245.94 684.142 L1246.5 684.142 L1247.06 684.142 L1247.62 684.142 L1248.18 684.142 L1248.74 684.142 L1249.3 684.142 L1249.86 684.142 L1250.42 684.142 L1250.98 684.142 L1251.54 684.142 L1252.09 684.142 L1252.65 684.142 L1253.21 684.142 L1253.77 684.142 L1254.33 684.142 L1254.89 684.142 L1255.45 684.142 L1256.01 684.142 L1256.57 684.142 L1257.13 684.142 L1257.69 684.142 L1258.25 684.142 L1258.81 684.142 L1259.36 684.142 L1259.92 684.142 L1260.48 684.142 L1261.04 684.142 L1261.6 684.142 L1262.16 684.142 L1262.72 684.142 L1263.28 684.142 L1263.84 684.142 L1264.4 684.142 L1264.96 684.142 L1265.52 684.142 L1266.08 684.142 L1266.63 684.142 L1267.19 684.142 L1267.75 684.142 L1268.31 684.142 L1268.87 684.142 L1269.43 684.142 L1269.99 684.142 L1270.55 684.142 L1271.11 684.142 L1271.67 684.142 L1272.23 684.142 L1272.79 684.142 L1273.35 684.142 L1273.91 684.142 L1274.46 684.142 L1275.02 684.142 L1275.58 684.142 L1276.14 684.142 L1276.7 684.142 L1277.26 684.142 L1277.82 684.142 L1278.38 684.142 L1278.94 684.142 L1279.5 684.142 L1280.06 684.142 L1280.62 684.142 L1281.18 684.142 L1281.73 684.142 L1282.29 684.142 L1282.85 684.142 L1283.41 684.142 L1283.97 684.142 L1284.53 684.142 L1285.09 684.142 L1285.65 684.142 L1286.21 684.142 L1286.77 684.142 L1287.33 684.142 L1287.89 684.142 L1288.45 684.142 L1289 684.142 L1289.56 684.142 L1290.12 684.142 L1290.68 684.142 L1291.24 684.142 L1291.8 684.142 L1292.36 684.142 L1292.92 684.142 L1293.48 684.142 L1294.04 684.142 L1294.6 684.142 L1295.16 684.142 L1295.72 684.142 L1296.28 684.142 L1296.83 684.142 L1297.39 684.142 L1297.95 684.142 L1298.51 684.142 L1299.07 684.142 L1299.63 684.142 L1300.19 684.142 L1300.75 684.142 L1301.31 684.142 L1301.87 684.142 L1302.43 684.142 L1302.99 684.142 L1303.55 684.142 L1304.1 684.142 L1304.66 684.142 L1305.22 684.142 L1305.78 684.142 L1306.34 684.142 L1306.9 684.142 L1307.46 684.142 L1308.02 684.142 L1308.58 684.142 L1309.14 684.142 L1309.7 684.142 L1310.26 684.142 L1310.82 684.142 L1311.38 684.142 L1311.93 684.142 L1312.49 684.142 L1313.05 684.142 L1313.61 684.142 L1314.17 684.142 L1314.73 684.142 L1315.29 684.142 L1315.85 684.142 L1316.41 684.142 L1316.97 684.142 L1317.53 684.142 L1318.09 684.142 L1318.65 684.142 L1319.2 684.142 L1319.76 684.142 L1320.32 684.142 L1320.88 684.142 L1321.44 684.142 L1322 684.142 L1322.56 684.142 L1323.12 684.142 L1323.68 684.142 L1324.24 684.142 L1324.8 684.142 L1325.36 684.142 L1325.92 684.142 L1326.47 684.142 L1327.03 684.142 L1327.59 684.142 L1328.15 684.142 L1328.71 684.142 L1329.27 684.142 L1329.83 684.142 L1330.39 684.142 L1330.95 684.142 L1331.51 684.142 L1332.07 684.142 L1332.63 684.142 L1333.19 684.142 L1333.75 684.142 L1334.3 684.142 L1334.86 684.142 L1335.42 684.142 L1335.98 684.142 L1336.54 684.142 L1337.1 684.142 L1337.66 684.142 L1338.22 684.142 L1338.78 684.142 L1339.34 684.142 L1339.9 684.142 L1340.46 684.142 L1341.02 684.142 L1341.57 684.142 L1342.13 684.142 L1342.69 684.142 L1343.25 684.142 L1343.81 684.142 L1344.37 684.142 L1344.93 684.142 L1345.49 684.142 L1346.05 684.142 L1346.61 684.142 L1347.17 684.142 L1347.73 684.142 L1348.29 684.142 L1348.84 684.142 L1349.4 684.142 L1349.96 684.142 L1350.52 684.142 L1351.08 684.142 L1351.64 684.142 L1352.2 684.142 L1352.76 684.142 L1353.32 684.142 L1353.88 684.142 L1354.44 684.142 L1355 684.142 L1355.56 684.142 L1356.12 684.142 L1356.67 684.142 L1357.23 684.142 L1357.79 684.142 L1358.35 684.142 L1358.91 684.142 L1359.47 684.142 L1360.03 684.142 L1360.59 684.142 L1361.15 684.142 L1361.71 684.142 L1362.27 684.142 L1362.83 684.142 L1363.39 684.142 L1363.94 684.142 L1364.5 684.142 L1365.06 684.142 L1365.62 684.142 L1366.18 684.142 L1366.74 684.142 L1367.3 684.142 L1367.86 684.142 L1368.42 684.142 L1368.98 684.142 L1369.54 684.142 L1370.1 684.142 L1370.66 684.142 L1371.21 684.142 L1371.77 684.142 L1372.33 684.142 L1372.89 684.142 L1373.45 684.142 L1374.01 684.142 L1374.57 684.142 L1375.13 684.142 L1375.69 684.142 L1376.25 684.142 L1376.81 684.142 L1377.37 684.142 L1377.93 684.142 L1378.49 684.142 L1379.04 684.142 L1379.6 684.142 L1380.16 684.142 L1380.72 684.142 L1381.28 684.142 L1381.84 684.142 L1382.4 684.142 L1382.96 684.142 L1383.52 684.142 L1384.08 684.142 L1384.64 684.142 L1385.2 684.142 L1385.76 684.142 L1386.31 684.142 L1386.87 684.142 L1387.43 684.142 L1387.99 684.142 L1388.55 684.142 L1389.11 684.142 L1389.67 684.142 L1390.23 684.142 L1390.79 684.142 L1391.35 684.142 L1391.91 684.142 L1392.47 684.142 L1393.03 684.142 L1393.58 684.142 L1394.14 684.142 L1394.7 684.142 L1395.26 684.142 L1395.82 684.142 L1396.38 684.142 L1396.94 684.142 L1397.5 684.142 L1398.06 684.142 L1398.62 684.142 L1399.18 684.142 L1399.74 684.142 L1400.3 684.142 L1400.86 684.142 L1401.41 684.142 L1401.97 684.142 L1402.53 684.142 L1403.09 684.142 L1403.65 684.142 L1404.21 684.142 L1404.77 684.142 L1405.33 684.142 L1405.89 684.142 L1406.45 684.142 L1407.01 684.142 L1407.57 684.142 L1408.13 684.142 L1408.68 684.142 L1409.24 684.142 L1409.8 684.142 L1410.36 684.142 L1410.92 684.142 L1411.48 684.142 L1412.04 684.142 L1412.6 684.142 L1413.16 684.142 L1413.72 684.142 L1414.28 684.142 L1414.84 684.142 L1415.4 684.142 L1415.95 684.142 L1416.51 684.142 L1417.07 684.142 L1417.63 684.142 L1418.19 684.142 L1418.75 684.142 L1419.31 684.142 L1419.87 684.142 L1420.43 684.142 L1420.99 684.142 L1421.55 684.142 L1422.11 684.142 L1422.67 684.142 L1423.23 684.142 L1423.78 684.142 L1424.34 684.142 L1424.9 684.142 L1425.46 684.142 L1426.02 684.142 L1426.58 684.142 L1427.14 684.142 L1427.7 684.142 L1428.26 684.142 L1428.82 684.142 L1429.38 684.142 L1429.94 684.142 L1430.5 684.142 L1431.05 684.142 L1431.61 684.142 L1432.17 684.142 L1432.73 684.142 L1433.29 684.142 L1433.85 684.142 L1434.41 684.142 L1434.97 684.142 L1435.53 684.142 L1436.09 684.142 L1436.65 684.142 L1437.21 684.142 L1437.77 684.142 L1438.33 684.142 L1438.88 684.142 L1439.44 684.142 L1440 684.142 L1440.56 684.142 L1441.12 684.142 L1441.68 684.142 L1442.24 684.142 L1442.8 684.142 L1443.36 684.142 L1443.92 684.142 L1444.48 684.142 L1445.04 684.142 L1445.6 684.142 L1446.15 684.142 L1446.71 684.142 L1447.27 684.142 L1447.83 684.142 L1448.39 684.142 L1448.95 684.142 L1449.51 684.142 L1450.07 684.142 L1450.63 684.142 L1451.19 684.142 L1451.75 684.142 L1452.31 684.142 L1452.87 684.142 L1453.42 684.142 L1453.98 684.142 L1454.54 684.142 L1455.1 684.142 L1455.66 684.142 L1456.22 684.142 L1456.78 684.142 L1457.34 684.142 L1457.9 684.142 L1458.46 684.142 L1459.02 684.142 L1459.58 684.142 L1460.14 684.142 L1460.7 684.142 L1461.25 684.142 L1461.81 684.142 L1462.37 684.142 L1462.93 684.142 L1463.49 684.142 L1464.05 684.142 L1464.61 684.142 L1465.17 684.142 L1465.73 684.142 L1466.29 684.142 L1466.85 684.142 L1467.41 684.142 L1467.97 684.142 L1468.52 684.142 L1469.08 684.142 L1469.64 684.142 L1470.2 684.142 L1470.76 684.142 L1471.32 684.142 L1471.88 684.142 L1472.44 684.142 L1473 684.142 L1473.56 684.142 L1474.12 684.142 L1474.68 684.142 L1475.24 684.142 L1475.79 684.142 L1476.35 684.142 L1476.91 684.142 L1477.47 684.142 L1478.03 684.142 L1478.59 684.142 L1479.15 684.142 L1479.71 684.142 L1480.27 684.142 L1480.83 684.142 L1481.39 684.142 L1481.95 684.142 L1482.51 684.142 L1483.07 684.142 L1483.62 684.142 L1484.18 684.142 L1484.74 684.142 L1485.3 684.142 L1485.86 684.142 L1486.42 684.142 L1486.98 684.142 L1487.54 684.142 L1488.1 684.142 L1488.66 684.142 L1489.22 684.142 L1489.78 684.142 L1490.34 684.142 L1490.89 684.142 L1491.45 684.142 L1492.01 684.142 L1492.57 684.142 L1493.13 684.142 L1493.69 684.142 L1494.25 684.142 L1494.81 684.142 L1495.37 684.142 L1495.93 684.142 L1496.49 684.142 L1497.05 684.142 L1497.61 684.142 L1498.16 684.142 L1498.72 684.142 L1499.28 684.142 L1499.84 684.142 L1500.4 684.142 L1500.96 684.142 L1501.52 684.142 L1502.08 684.142 L1502.64 684.142 L1503.2 684.142 L1503.76 684.142 L1504.32 684.142 L1504.88 684.142 L1505.44 684.142 L1505.99 684.142 L1506.55 684.142 L1507.11 684.142 L1507.67 684.142 L1508.23 684.142 L1508.79 684.142 L1509.35 684.142 L1509.91 684.142 L1510.47 684.142 L1511.03 684.142 L1511.59 684.142 L1512.15 684.142 L1512.71 684.142 L1513.26 684.142 L1513.82 684.142 L1514.38 684.142 L1514.94 684.142 L1515.5 684.142 L1516.06 684.142 L1516.62 684.142 L1517.18 684.142 L1517.74 684.142 L1518.3 684.142 L1518.86 684.142 L1519.42 684.142 L1519.98 684.142 L1520.53 684.142 L1521.09 684.142 L1521.65 684.142 L1522.21 684.142 L1522.77 684.142 L1523.33 684.142 L1523.89 684.142 L1524.45 684.142 L1525.01 684.142 L1525.57 684.142 L1526.13 684.142 L1526.69 684.142 L1527.25 684.142 L1527.81 684.142 L1528.36 684.142 L1528.92 684.142 L1529.48 684.142 L1530.04 684.142 L1530.6 684.142 L1531.16 684.142 L1531.72 684.142 L1532.28 684.142 L1532.84 684.142 L1533.4 684.142 L1533.96 684.142 L1534.52 684.142 L1535.08 684.142 L1535.63 684.142 L1536.19 684.142 L1536.75 684.142 L1537.31 684.142 L1537.87 684.142 L1538.43 684.142 L1538.99 684.142 L1539.55 684.142 L1540.11 684.142 L1540.67 684.142 L1541.23 684.142 L1541.79 684.142 L1542.35 684.142 L1542.9 684.142 L1543.46 684.142 L1544.02 684.142 L1544.58 684.142 L1545.14 684.142 L1545.7 684.142 L1546.26 684.142 L1546.82 684.142 L1547.38 684.142 L1547.94 684.142 L1548.5 684.142 L1549.06 684.142 L1549.62 684.142 L1550.18 684.142 L1550.73 684.142 L1551.29 684.142 L1551.85 684.142 L1552.41 684.142 L1552.97 684.142 L1553.53 684.142 L1554.09 684.142 L1554.65 684.142 L1555.21 684.142 L1555.77 684.142 L1556.33 684.142 L1556.89 684.142 L1557.45 684.142 L1558 684.142 L1558.56 684.142 L1559.12 684.142 L1559.68 684.142 L1560.24 684.142 L1560.8 684.142 L1561.36 684.142 L1561.92 684.142 L1562.48 684.142 L1563.04 684.142 L1563.6 684.142 L1564.16 684.142 L1564.72 684.142 L1565.28 684.142 L1565.83 684.142 L1566.39 684.142 L1566.95 684.142 L1567.51 684.142 L1568.07 684.142 L1568.63 684.142 L1569.19 684.142 L1569.75 684.142 L1570.31 684.142 L1570.87 684.142 L1571.43 684.142 L1571.99 684.142 L1572.55 684.142 L1573.1 684.142 L1573.66 684.142 L1574.22 684.142 L1574.78 684.142 L1575.34 684.142 L1575.9 684.142 L1576.46 684.142 L1577.02 684.142 L1577.58 684.142 L1578.14 684.142 L1578.7 684.142 L1579.26 684.142 L1579.82 684.142 L1580.37 684.142 L1580.93 684.142 L1581.49 684.142 L1582.05 684.142 L1582.61 684.142 L1583.17 684.142 L1583.73 684.142 L1584.29 684.142 L1584.85 684.142 L1585.41 684.142 L1585.97 684.142 L1586.53 684.142 L1587.09 684.142 L1587.65 684.142 L1588.2 684.142 L1588.76 684.142 L1589.32 684.142 L1589.88 684.142 L1590.44 684.142 L1591 684.142 L1591.56 684.142 L1592.12 684.142 L1592.68 684.142 L1593.24 684.142 L1593.8 684.142 L1594.36 684.142 L1594.92 684.142 L1595.47 684.142 L1596.03 684.142 L1596.59 684.142 L1597.15 684.142 L1597.71 684.142 L1598.27 684.142 L1598.83 684.142 L1599.39 684.142 L1599.95 684.142 L1600.51 684.142 L1601.07 684.142 L1601.63 684.142 L1602.19 684.142 L1602.74 684.142 L1603.3 684.142 L1603.86 684.142 L1604.42 684.142 L1604.98 684.142 L1605.54 684.142 L1606.1 684.142 L1606.66 684.142 L1607.22 684.142 L1607.78 684.142 L1608.34 684.142 L1608.9 684.142 L1609.46 684.142 L1610.02 684.142 L1610.57 684.142 L1611.13 684.142 L1611.69 684.142 L1612.25 684.142 L1612.81 684.142 L1613.37 684.142 L1613.93 684.142 L1614.49 684.142 L1615.05 684.142 L1615.61 684.142 L1616.17 684.142 L1616.73 684.142 L1617.29 684.142 L1617.84 684.142 L1618.4 684.142 L1618.96 684.142 L1619.52 684.142 L1620.08 684.142 L1620.64 684.142 L1621.2 684.142 L1621.76 684.142 L1622.32 684.142 L1622.88 684.142 L1623.44 684.142 L1624 684.142 L1624.56 684.142 L1625.11 684.142 L1625.67 684.142 L1626.23 684.142 L1626.79 684.142 L1627.35 684.142 L1627.91 684.142 L1628.47 684.142 L1629.03 684.142 L1629.59 684.142 L1630.15 684.142 L1630.71 684.142 L1631.27 684.142 L1631.83 684.142 L1632.39 684.142 L1632.94 684.142 L1633.5 684.142 L1634.06 684.142 L1634.62 684.142 L1635.18 684.142 L1635.74 684.142 L1636.3 684.142 L1636.86 684.142 L1637.42 684.142 L1637.98 684.142 L1638.54 684.142 L1639.1 684.142 L1639.66 684.142 L1640.21 684.142 L1640.77 684.142 L1641.33 684.142 L1641.89 684.142 L1642.45 684.142 L1643.01 684.142 L1643.57 684.142 L1644.13 684.142 L1644.69 684.142 L1645.25 684.142 L1645.81 684.142 L1646.37 684.142 L1646.93 684.142 L1647.48 684.142 L1648.04 684.142 L1648.6 684.142 L1649.16 684.142 L1649.72 684.142 L1650.28 684.142 L1650.84 684.142 L1651.4 684.142 L1651.96 684.142 L1652.52 684.142 L1653.08 684.142 L1653.64 684.142 L1654.2 684.142 L1654.76 684.142 L1655.31 684.142 L1655.87 684.142 L1656.43 684.142 L1656.99 684.142 L1657.55 684.142 L1658.11 684.142 L1658.67 684.142 L1659.23 684.142 L1659.79 684.142 L1660.35 684.142 L1660.91 684.142 L1661.47 684.142 L1662.03 684.142 L1662.58 684.142 L1663.14 684.142 L1663.7 684.142 L1664.26 684.142 L1664.82 684.142 L1665.38 684.142 L1665.94 684.142 L1666.5 684.142 L1667.06 684.142 L1667.62 684.142 L1668.18 684.142 L1668.74 684.142 L1669.3 684.142 L1669.85 684.142 L1670.41 684.142 L1670.97 684.142 L1671.53 684.142 L1672.09 684.142 L1672.65 684.142 L1673.21 684.142 L1673.77 684.142 L1674.33 684.142 L1674.89 684.142 L1675.45 684.142 L1676.01 684.142 L1676.57 684.142 L1677.13 684.142 L1677.68 684.142 L1678.24 684.142 L1678.8 684.142 L1679.36 684.142 L1679.92 684.142 L1680.48 684.142 L1681.04 684.142 L1681.6 684.142 L1682.16 684.142 L1682.72 684.142 L1683.28 684.142 L1683.84 684.142 L1684.4 684.142 L1684.95 684.142 L1685.51 684.142 L1686.07 684.142 L1686.63 684.142 L1687.19 684.142 L1687.75 684.142 L1688.31 684.142 L1688.87 684.142 L1689.43 684.142 L1689.99 684.142 L1690.55 684.142 L1691.11 684.142 L1691.67 684.142 L1692.23 684.142 L1692.78 684.142 L1693.34 684.142 L1693.9 684.142 L1694.46 684.142 L1695.02 684.142 L1695.58 684.142 L1696.14 684.142 L1696.7 684.142 L1697.26 684.142 L1697.82 684.142 L1698.38 684.142 L1698.94 684.142 L1699.5 684.142 L1700.05 684.142 L1700.61 684.142 L1701.17 684.142 L1701.73 684.142 L1702.29 684.142 L1702.85 684.142 L1703.41 684.142 L1703.97 684.142 L1704.53 684.142 L1705.09 684.142 L1705.65 684.142 L1706.21 684.142 L1706.77 684.142 L1707.32 684.142 L1707.88 684.142 L1708.44 684.142 L1709 684.142 L1709.56 684.142 L1710.12 684.142 L1710.68 684.142 L1711.24 684.142 L1711.8 684.142 L1712.36 684.142 L1712.92 684.142 L1713.48 684.142 L1714.04 684.142 L1714.6 684.142 L1715.15 684.142 L1715.71 684.142 L1716.27 684.142 L1716.83 684.142 L1717.39 684.142 L1717.95 684.142 L1718.51 684.142 L1719.07 684.142 L1719.63 684.142 L1720.19 684.142 L1720.75 684.142 L1721.31 684.142 L1721.87 684.142 L1722.42 684.142 L1722.98 684.142 L1723.54 684.142 L1724.1 684.142 L1724.66 684.142 L1725.22 684.142 L1725.78 684.142 L1726.34 684.142 L1726.9 684.142 L1727.46 684.142 L1728.02 684.142 L1728.58 684.142 L1729.14 684.142 L1729.69 684.142 L1730.25 684.142 L1730.81 684.142 L1731.37 684.142 L1731.93 684.142 L1732.49 684.142 L1733.05 684.142 L1733.61 684.142 L1734.17 684.142 L1734.73 684.142 L1735.29 684.142 L1735.85 684.142 L1736.41 684.142 L1736.97 684.142 L1737.52 684.142 L1738.08 684.142 L1738.64 684.142 L1739.2 684.142 L1739.76 684.142 L1740.32 684.142 L1740.88 684.142 L1741.44 684.142 L1742 684.142 L1742.56 684.142 L1743.12 684.142 L1743.68 684.142 L1744.24 684.142 L1744.79 684.142 L1745.35 684.142 L1745.91 684.142 L1746.47 684.142 L1747.03 684.142 L1747.59 684.142 L1748.15 684.142 L1748.71 684.142 L1749.27 684.142 L1749.83 684.142 L1750.39 684.142 L1750.95 684.142 L1751.51 684.142 L1752.06 684.142 L1752.62 684.142 L1753.18 684.142 L1753.74 684.142 L1754.3 684.142 L1754.86 684.142 L1755.42 684.142 L1755.98 684.142 L1756.54 684.142 L1757.1 684.142 L1757.66 684.142 L1758.22 684.142 L1758.78 684.142 L1759.34 684.142 L1759.89 684.142 L1760.45 684.142 L1761.01 684.142 L1761.57 684.142 L1762.13 684.142 L1762.69 684.142 L1763.25 684.142 L1763.81 684.142 L1764.37 684.142 L1764.93 684.142 L1765.49 684.142 L1766.05 684.142 L1766.61 684.142 L1767.16 684.142 L1767.72 684.142 L1768.28 684.142 L1768.84 684.142 L1769.4 684.142 L1769.96 684.142 L1770.52 684.142 L1771.08 684.142 L1771.64 684.142 L1772.2 684.142 L1772.76 684.142 L1773.32 684.142 L1773.88 684.142 L1774.43 684.142 L1774.99 684.142 L1775.55 684.142 L1776.11 684.142 L1776.67 684.142 L1777.23 684.142 L1777.79 684.142 L1778.35 684.142 L1778.91 684.142 L1779.47 684.142 L1780.03 684.142 L1780.59 684.142 L1781.15 684.142 L1781.71 684.142 L1782.26 684.142 L1782.82 684.142 L1783.38 684.142 L1783.94 684.142 L1784.5 684.142 L1785.06 684.142 L1785.62 684.142 L1786.18 684.142 L1786.74 684.142 L1787.3 684.142 L1787.86 684.142 L1788.42 684.142 L1788.98 684.142 L1789.53 684.142 L1790.09 684.142 L1790.65 684.142 L1791.21 684.142 L1791.77 684.142 L1792.33 684.142 L1792.89 684.142 L1793.45 684.142 L1794.01 684.142 L1794.57 684.142 L1795.13 684.142 L1795.69 684.142 L1796.25 684.142 L1796.8 684.142 L1797.36 684.142 L1797.92 684.142 L1798.48 684.142 L1799.04 684.142 L1799.6 684.142 L1800.16 684.142 L1800.72 684.142 L1801.28 684.142 L1801.84 684.142 L1802.4 684.142 L1802.96 684.142 L1803.52 684.142 L1804.08 684.142 L1804.63 684.142 L1805.19 684.142 L1805.75 684.142 L1806.31 684.142 L1806.87 684.142 L1807.43 684.142 L1807.99 684.142 L1808.55 684.142 L1809.11 684.142 L1809.67 684.142 L1810.23 684.142 L1810.79 684.142 L1811.35 684.142 L1811.9 684.142 L1812.46 684.142 L1813.02 684.142 L1813.58 684.142 L1814.14 684.142 L1814.7 684.142 L1815.26 684.142 L1815.82 684.142 L1816.38 684.142 L1816.94 684.142 L1817.5 684.142 L1818.06 684.142 L1818.62 684.142 L1819.18 684.142 L1819.73 684.142 L1820.29 684.142 L1820.85 684.142 L1821.41 684.142 L1821.97 684.142 L1822.53 684.142 L1823.09 684.142 L1823.65 684.142 L1824.21 684.142 L1824.77 684.142 L1825.33 684.142 L1825.89 684.142 L1826.45 684.142 L1827 684.142 L1827.56 684.142 L1828.12 684.142 L1828.68 684.142 L1829.24 684.142 L1829.8 684.142 L1830.36 684.142 L1830.92 684.142 L1831.48 684.142 L1832.04 684.142 L1832.6 684.142 L1833.16 684.142 L1833.72 684.142 L1834.27 684.142 L1834.83 684.142 L1835.39 684.142 L1835.95 684.142 L1836.51 684.142 L1837.07 684.142 L1837.63 684.142 L1838.19 684.142 L1838.19 681.395 L1837.63 681.395 L1837.07 681.395 L1836.51 681.395 L1835.95 681.395 L1835.39 681.395 L1834.83 681.395 L1834.27 681.395 L1833.72 681.395 L1833.16 681.395 L1832.6 681.395 L1832.04 681.395 L1831.48 681.395 L1830.92 681.395 L1830.36 681.395 L1829.8 681.395 L1829.24 681.395 L1828.68 681.395 L1828.12 681.395 L1827.56 681.395 L1827 681.395 L1826.45 681.395 L1825.89 681.395 L1825.33 681.395 L1824.77 681.395 L1824.21 681.395 L1823.65 681.395 L1823.09 681.395 L1822.53 681.395 L1821.97 681.395 L1821.41 681.395 L1820.85 681.395 L1820.29 681.395 L1819.73 681.395 L1819.18 681.395 L1818.62 681.395 L1818.06 681.395 L1817.5 681.395 L1816.94 681.395 L1816.38 681.395 L1815.82 681.395 L1815.26 681.395 L1814.7 681.395 L1814.14 681.395 L1813.58 681.395 L1813.02 681.395 L1812.46 681.395 L1811.9 681.395 L1811.35 681.395 L1810.79 681.395 L1810.23 681.395 L1809.67 681.395 L1809.11 681.395 L1808.55 681.395 L1807.99 681.395 L1807.43 681.395 L1806.87 681.395 L1806.31 681.395 L1805.75 681.395 L1805.19 681.395 L1804.63 681.395 L1804.08 681.395 L1803.52 681.395 L1802.96 681.395 L1802.4 681.395 L1801.84 681.395 L1801.28 681.395 L1800.72 681.395 L1800.16 681.395 L1799.6 681.395 L1799.04 681.395 L1798.48 681.395 L1797.92 681.395 L1797.36 681.395 L1796.8 681.395 L1796.25 681.395 L1795.69 681.395 L1795.13 681.395 L1794.57 681.395 L1794.01 681.395 L1793.45 681.395 L1792.89 681.395 L1792.33 681.395 L1791.77 681.395 L1791.21 681.395 L1790.65 681.395 L1790.09 681.395 L1789.53 681.395 L1788.98 681.395 L1788.42 681.395 L1787.86 681.395 L1787.3 681.395 L1786.74 681.395 L1786.18 681.395 L1785.62 681.395 L1785.06 681.395 L1784.5 681.395 L1783.94 681.395 L1783.38 681.395 L1782.82 681.395 L1782.26 681.395 L1781.71 681.395 L1781.15 681.395 L1780.59 681.395 L1780.03 681.395 L1779.47 681.395 L1778.91 681.395 L1778.35 681.395 L1777.79 681.395 L1777.23 681.395 L1776.67 681.395 L1776.11 681.395 L1775.55 681.395 L1774.99 681.395 L1774.43 681.395 L1773.88 681.395 L1773.32 681.395 L1772.76 681.395 L1772.2 681.395 L1771.64 681.395 L1771.08 681.395 L1770.52 681.395 L1769.96 681.395 L1769.4 681.395 L1768.84 681.395 L1768.28 681.395 L1767.72 681.395 L1767.16 681.395 L1766.61 681.395 L1766.05 681.395 L1765.49 681.395 L1764.93 681.395 L1764.37 681.395 L1763.81 681.395 L1763.25 681.395 L1762.69 681.395 L1762.13 681.395 L1761.57 681.395 L1761.01 681.395 L1760.45 681.395 L1759.89 681.395 L1759.34 681.395 L1758.78 681.395 L1758.22 681.395 L1757.66 681.395 L1757.1 681.395 L1756.54 681.395 L1755.98 681.395 L1755.42 681.395 L1754.86 681.395 L1754.3 681.395 L1753.74 681.395 L1753.18 681.395 L1752.62 681.395 L1752.06 681.395 L1751.51 681.395 L1750.95 681.395 L1750.39 681.395 L1749.83 681.395 L1749.27 681.395 L1748.71 681.395 L1748.15 681.395 L1747.59 681.395 L1747.03 681.395 L1746.47 681.395 L1745.91 681.395 L1745.35 681.395 L1744.79 681.395 L1744.24 681.395 L1743.68 681.395 L1743.12 681.395 L1742.56 681.395 L1742 681.395 L1741.44 681.395 L1740.88 681.395 L1740.32 681.395 L1739.76 681.395 L1739.2 681.395 L1738.64 681.395 L1738.08 681.395 L1737.52 681.395 L1736.97 681.395 L1736.41 681.395 L1735.85 681.395 L1735.29 681.395 L1734.73 681.395 L1734.17 681.395 L1733.61 681.395 L1733.05 681.395 L1732.49 681.395 L1731.93 681.395 L1731.37 681.395 L1730.81 681.395 L1730.25 681.395 L1729.69 681.395 L1729.14 681.395 L1728.58 681.395 L1728.02 681.395 L1727.46 681.395 L1726.9 681.395 L1726.34 681.395 L1725.78 681.395 L1725.22 681.395 L1724.66 681.395 L1724.1 681.395 L1723.54 681.395 L1722.98 681.395 L1722.42 681.395 L1721.87 681.395 L1721.31 681.395 L1720.75 681.395 L1720.19 681.395 L1719.63 681.395 L1719.07 681.395 L1718.51 681.395 L1717.95 681.395 L1717.39 681.395 L1716.83 681.395 L1716.27 681.395 L1715.71 681.395 L1715.15 681.395 L1714.6 681.395 L1714.04 681.395 L1713.48 681.395 L1712.92 681.395 L1712.36 681.395 L1711.8 681.395 L1711.24 681.395 L1710.68 681.395 L1710.12 681.395 L1709.56 681.395 L1709 681.395 L1708.44 681.395 L1707.88 681.395 L1707.32 681.395 L1706.77 681.395 L1706.21 681.395 L1705.65 681.395 L1705.09 681.395 L1704.53 681.395 L1703.97 681.395 L1703.41 681.395 L1702.85 681.395 L1702.29 681.395 L1701.73 681.395 L1701.17 681.395 L1700.61 681.395 L1700.05 681.395 L1699.5 681.395 L1698.94 681.395 L1698.38 681.395 L1697.82 681.395 L1697.26 681.395 L1696.7 681.395 L1696.14 681.395 L1695.58 681.395 L1695.02 681.395 L1694.46 681.395 L1693.9 681.395 L1693.34 681.395 L1692.78 681.395 L1692.23 681.395 L1691.67 681.395 L1691.11 681.395 L1690.55 681.395 L1689.99 681.395 L1689.43 681.395 L1688.87 681.395 L1688.31 681.395 L1687.75 681.395 L1687.19 681.395 L1686.63 681.395 L1686.07 681.395 L1685.51 681.395 L1684.95 681.395 L1684.4 681.395 L1683.84 681.395 L1683.28 681.395 L1682.72 681.395 L1682.16 681.395 L1681.6 681.395 L1681.04 681.395 L1680.48 681.395 L1679.92 681.395 L1679.36 681.395 L1678.8 681.395 L1678.24 681.395 L1677.68 681.395 L1677.13 681.395 L1676.57 681.395 L1676.01 681.395 L1675.45 681.395 L1674.89 681.395 L1674.33 681.395 L1673.77 681.395 L1673.21 681.395 L1672.65 681.395 L1672.09 681.395 L1671.53 681.395 L1670.97 681.395 L1670.41 681.395 L1669.85 681.395 L1669.3 681.395 L1668.74 681.395 L1668.18 681.395 L1667.62 681.395 L1667.06 681.395 L1666.5 681.395 L1665.94 681.395 L1665.38 681.395 L1664.82 681.395 L1664.26 681.395 L1663.7 681.395 L1663.14 681.395 L1662.58 681.395 L1662.03 681.395 L1661.47 681.395 L1660.91 681.395 L1660.35 681.395 L1659.79 681.395 L1659.23 681.395 L1658.67 681.395 L1658.11 681.395 L1657.55 681.395 L1656.99 681.395 L1656.43 681.395 L1655.87 681.395 L1655.31 681.395 L1654.76 681.395 L1654.2 681.395 L1653.64 681.395 L1653.08 681.395 L1652.52 681.395 L1651.96 681.395 L1651.4 681.395 L1650.84 681.395 L1650.28 681.395 L1649.72 681.395 L1649.16 681.395 L1648.6 681.395 L1648.04 681.395 L1647.48 681.395 L1646.93 681.395 L1646.37 681.395 L1645.81 681.395 L1645.25 681.395 L1644.69 681.395 L1644.13 681.395 L1643.57 681.395 L1643.01 681.395 L1642.45 681.395 L1641.89 681.395 L1641.33 681.395 L1640.77 681.395 L1640.21 681.395 L1639.66 681.395 L1639.1 681.395 L1638.54 681.395 L1637.98 681.395 L1637.42 681.395 L1636.86 681.395 L1636.3 681.395 L1635.74 681.395 L1635.18 681.395 L1634.62 681.395 L1634.06 681.395 L1633.5 681.395 L1632.94 681.395 L1632.39 681.395 L1631.83 681.395 L1631.27 681.395 L1630.71 681.395 L1630.15 681.395 L1629.59 681.395 L1629.03 681.395 L1628.47 681.395 L1627.91 681.395 L1627.35 681.395 L1626.79 681.395 L1626.23 681.395 L1625.67 681.395 L1625.11 681.395 L1624.56 681.395 L1624 681.395 L1623.44 681.395 L1622.88 681.395 L1622.32 681.395 L1621.76 681.395 L1621.2 681.395 L1620.64 681.395 L1620.08 681.395 L1619.52 681.395 L1618.96 681.395 L1618.4 681.395 L1617.84 681.395 L1617.29 681.395 L1616.73 681.395 L1616.17 681.395 L1615.61 681.395 L1615.05 681.395 L1614.49 681.395 L1613.93 681.395 L1613.37 681.395 L1612.81 681.395 L1612.25 681.395 L1611.69 681.395 L1611.13 681.395 L1610.57 681.395 L1610.02 681.395 L1609.46 681.395 L1608.9 681.395 L1608.34 681.395 L1607.78 681.395 L1607.22 681.395 L1606.66 681.395 L1606.1 681.395 L1605.54 681.395 L1604.98 681.395 L1604.42 681.395 L1603.86 681.395 L1603.3 681.395 L1602.74 681.395 L1602.19 681.395 L1601.63 681.395 L1601.07 681.395 L1600.51 681.395 L1599.95 681.395 L1599.39 681.395 L1598.83 681.395 L1598.27 681.395 L1597.71 681.395 L1597.15 681.395 L1596.59 681.395 L1596.03 681.395 L1595.47 681.395 L1594.92 681.395 L1594.36 681.395 L1593.8 681.395 L1593.24 681.395 L1592.68 681.395 L1592.12 681.395 L1591.56 681.395 L1591 681.395 L1590.44 681.395 L1589.88 681.395 L1589.32 681.395 L1588.76 681.395 L1588.2 681.395 L1587.65 681.395 L1587.09 681.395 L1586.53 681.395 L1585.97 681.395 L1585.41 681.395 L1584.85 681.395 L1584.29 681.395 L1583.73 681.395 L1583.17 681.395 L1582.61 681.395 L1582.05 681.395 L1581.49 681.395 L1580.93 681.395 L1580.37 681.395 L1579.82 681.395 L1579.26 681.395 L1578.7 681.395 L1578.14 681.395 L1577.58 681.395 L1577.02 681.395 L1576.46 681.395 L1575.9 681.395 L1575.34 681.395 L1574.78 681.395 L1574.22 681.395 L1573.66 681.395 L1573.1 681.395 L1572.55 681.395 L1571.99 681.395 L1571.43 681.395 L1570.87 681.395 L1570.31 681.395 L1569.75 681.395 L1569.19 681.395 L1568.63 681.395 L1568.07 681.395 L1567.51 681.395 L1566.95 681.395 L1566.39 681.395 L1565.83 681.395 L1565.28 681.395 L1564.72 681.395 L1564.16 681.395 L1563.6 681.395 L1563.04 681.395 L1562.48 681.395 L1561.92 681.395 L1561.36 681.395 L1560.8 681.395 L1560.24 681.395 L1559.68 681.395 L1559.12 681.395 L1558.56 681.395 L1558 681.395 L1557.45 681.395 L1556.89 681.395 L1556.33 681.395 L1555.77 681.395 L1555.21 681.395 L1554.65 681.395 L1554.09 681.395 L1553.53 681.395 L1552.97 681.395 L1552.41 681.395 L1551.85 681.395 L1551.29 681.395 L1550.73 681.395 L1550.18 681.395 L1549.62 681.395 L1549.06 681.395 L1548.5 681.395 L1547.94 681.395 L1547.38 681.395 L1546.82 681.395 L1546.26 681.395 L1545.7 681.395 L1545.14 681.395 L1544.58 681.395 L1544.02 681.395 L1543.46 681.395 L1542.9 681.395 L1542.35 681.395 L1541.79 681.395 L1541.23 681.395 L1540.67 681.395 L1540.11 681.395 L1539.55 681.395 L1538.99 681.395 L1538.43 681.395 L1537.87 681.395 L1537.31 681.395 L1536.75 681.395 L1536.19 681.395 L1535.63 681.395 L1535.08 681.395 L1534.52 681.395 L1533.96 681.395 L1533.4 681.395 L1532.84 681.395 L1532.28 681.395 L1531.72 681.395 L1531.16 681.395 L1530.6 681.395 L1530.04 681.395 L1529.48 681.395 L1528.92 681.395 L1528.36 681.395 L1527.81 681.395 L1527.25 681.395 L1526.69 681.395 L1526.13 681.395 L1525.57 681.395 L1525.01 681.395 L1524.45 681.395 L1523.89 681.395 L1523.33 681.395 L1522.77 681.395 L1522.21 681.395 L1521.65 681.395 L1521.09 681.395 L1520.53 681.395 L1519.98 681.395 L1519.42 681.395 L1518.86 681.395 L1518.3 681.395 L1517.74 681.395 L1517.18 681.395 L1516.62 681.395 L1516.06 681.395 L1515.5 681.395 L1514.94 681.395 L1514.38 681.395 L1513.82 681.395 L1513.26 681.395 L1512.71 681.395 L1512.15 681.395 L1511.59 681.395 L1511.03 681.395 L1510.47 681.395 L1509.91 681.395 L1509.35 681.395 L1508.79 681.395 L1508.23 681.395 L1507.67 681.395 L1507.11 681.395 L1506.55 681.395 L1505.99 681.395 L1505.44 681.395 L1504.88 681.395 L1504.32 681.395 L1503.76 681.395 L1503.2 681.395 L1502.64 681.395 L1502.08 681.395 L1501.52 681.395 L1500.96 681.395 L1500.4 681.395 L1499.84 681.395 L1499.28 681.395 L1498.72 681.395 L1498.16 681.395 L1497.61 681.395 L1497.05 681.395 L1496.49 681.395 L1495.93 681.395 L1495.37 681.395 L1494.81 681.395 L1494.25 681.395 L1493.69 681.395 L1493.13 681.395 L1492.57 681.395 L1492.01 681.395 L1491.45 681.395 L1490.89 681.395 L1490.34 681.395 L1489.78 681.395 L1489.22 681.395 L1488.66 681.395 L1488.1 681.395 L1487.54 681.395 L1486.98 681.395 L1486.42 681.395 L1485.86 681.395 L1485.3 681.395 L1484.74 681.395 L1484.18 681.395 L1483.62 681.395 L1483.07 681.395 L1482.51 681.395 L1481.95 681.395 L1481.39 681.395 L1480.83 681.395 L1480.27 681.395 L1479.71 681.395 L1479.15 681.395 L1478.59 681.395 L1478.03 681.395 L1477.47 681.395 L1476.91 681.395 L1476.35 681.395 L1475.79 681.395 L1475.24 681.395 L1474.68 681.395 L1474.12 681.395 L1473.56 681.395 L1473 681.395 L1472.44 681.395 L1471.88 681.395 L1471.32 681.395 L1470.76 681.395 L1470.2 681.395 L1469.64 681.395 L1469.08 681.395 L1468.52 681.395 L1467.97 681.395 L1467.41 681.395 L1466.85 681.395 L1466.29 681.395 L1465.73 681.395 L1465.17 681.395 L1464.61 681.395 L1464.05 681.395 L1463.49 681.395 L1462.93 681.395 L1462.37 681.395 L1461.81 681.395 L1461.25 681.395 L1460.7 681.395 L1460.14 681.395 L1459.58 681.395 L1459.02 681.395 L1458.46 681.395 L1457.9 681.395 L1457.34 681.395 L1456.78 681.395 L1456.22 681.395 L1455.66 681.395 L1455.1 681.395 L1454.54 681.395 L1453.98 681.395 L1453.42 681.395 L1452.87 681.395 L1452.31 681.395 L1451.75 681.395 L1451.19 681.395 L1450.63 681.395 L1450.07 681.395 L1449.51 681.395 L1448.95 681.395 L1448.39 681.395 L1447.83 681.395 L1447.27 681.395 L1446.71 681.395 L1446.15 681.395 L1445.6 681.395 L1445.04 681.395 L1444.48 681.395 L1443.92 681.395 L1443.36 681.395 L1442.8 681.395 L1442.24 681.395 L1441.68 681.395 L1441.12 681.395 L1440.56 681.395 L1440 681.395 L1439.44 681.395 L1438.88 681.395 L1438.33 681.395 L1437.77 681.395 L1437.21 681.395 L1436.65 681.395 L1436.09 681.395 L1435.53 681.395 L1434.97 681.395 L1434.41 681.395 L1433.85 681.395 L1433.29 681.395 L1432.73 681.395 L1432.17 681.395 L1431.61 681.395 L1431.05 681.395 L1430.5 681.395 L1429.94 681.395 L1429.38 681.395 L1428.82 681.395 L1428.26 681.395 L1427.7 681.395 L1427.14 681.395 L1426.58 681.395 L1426.02 681.395 L1425.46 681.395 L1424.9 681.395 L1424.34 681.395 L1423.78 681.395 L1423.23 681.395 L1422.67 681.395 L1422.11 681.395 L1421.55 681.395 L1420.99 681.395 L1420.43 681.395 L1419.87 681.395 L1419.31 681.395 L1418.75 681.395 L1418.19 681.395 L1417.63 681.395 L1417.07 681.395 L1416.51 681.395 L1415.95 681.395 L1415.4 681.395 L1414.84 681.395 L1414.28 681.395 L1413.72 681.395 L1413.16 681.395 L1412.6 681.395 L1412.04 681.395 L1411.48 681.395 L1410.92 681.395 L1410.36 681.395 L1409.8 681.395 L1409.24 681.395 L1408.68 681.395 L1408.13 681.395 L1407.57 681.395 L1407.01 681.395 L1406.45 681.395 L1405.89 681.395 L1405.33 681.395 L1404.77 681.395 L1404.21 681.395 L1403.65 681.395 L1403.09 681.395 L1402.53 681.395 L1401.97 681.395 L1401.41 681.395 L1400.86 681.395 L1400.3 681.395 L1399.74 681.395 L1399.18 681.395 L1398.62 681.395 L1398.06 681.395 L1397.5 681.395 L1396.94 681.395 L1396.38 681.395 L1395.82 681.395 L1395.26 681.395 L1394.7 681.395 L1394.14 681.395 L1393.58 681.395 L1393.03 681.395 L1392.47 681.395 L1391.91 681.395 L1391.35 681.395 L1390.79 681.395 L1390.23 681.395 L1389.67 681.395 L1389.11 681.395 L1388.55 681.395 L1387.99 681.395 L1387.43 681.395 L1386.87 681.395 L1386.31 681.395 L1385.76 681.395 L1385.2 681.395 L1384.64 681.395 L1384.08 681.395 L1383.52 681.395 L1382.96 681.395 L1382.4 681.395 L1381.84 681.395 L1381.28 681.395 L1380.72 681.395 L1380.16 681.395 L1379.6 681.395 L1379.04 681.395 L1378.49 681.395 L1377.93 681.395 L1377.37 681.395 L1376.81 681.395 L1376.25 681.395 L1375.69 681.395 L1375.13 681.395 L1374.57 681.395 L1374.01 681.395 L1373.45 681.395 L1372.89 681.395 L1372.33 681.395 L1371.77 681.395 L1371.21 681.395 L1370.66 681.395 L1370.1 681.395 L1369.54 681.395 L1368.98 681.395 L1368.42 681.395 L1367.86 681.395 L1367.3 681.395 L1366.74 681.395 L1366.18 681.395 L1365.62 681.395 L1365.06 681.395 L1364.5 681.395 L1363.94 681.395 L1363.39 681.395 L1362.83 681.395 L1362.27 681.395 L1361.71 681.395 L1361.15 681.395 L1360.59 681.395 L1360.03 681.395 L1359.47 681.395 L1358.91 681.395 L1358.35 681.395 L1357.79 681.395 L1357.23 681.395 L1356.67 681.395 L1356.12 681.395 L1355.56 681.395 L1355 681.395 L1354.44 681.395 L1353.88 681.395 L1353.32 681.395 L1352.76 681.395 L1352.2 681.395 L1351.64 681.395 L1351.08 681.395 L1350.52 681.395 L1349.96 681.395 L1349.4 681.395 L1348.84 681.395 L1348.29 681.395 L1347.73 681.395 L1347.17 681.395 L1346.61 681.395 L1346.05 681.395 L1345.49 681.395 L1344.93 681.395 L1344.37 681.395 L1343.81 681.395 L1343.25 681.395 L1342.69 681.395 L1342.13 681.395 L1341.57 681.395 L1341.02 681.395 L1340.46 681.395 L1339.9 681.395 L1339.34 681.395 L1338.78 681.395 L1338.22 681.395 L1337.66 681.395 L1337.1 681.395 L1336.54 681.395 L1335.98 681.395 L1335.42 681.395 L1334.86 681.395 L1334.3 681.395 L1333.75 681.395 L1333.19 681.395 L1332.63 681.395 L1332.07 681.395 L1331.51 681.395 L1330.95 681.395 L1330.39 681.395 L1329.83 681.395 L1329.27 681.395 L1328.71 681.395 L1328.15 681.395 L1327.59 681.395 L1327.03 681.395 L1326.47 681.395 L1325.92 681.395 L1325.36 681.395 L1324.8 681.395 L1324.24 681.395 L1323.68 681.395 L1323.12 681.395 L1322.56 681.395 L1322 681.395 L1321.44 681.395 L1320.88 681.395 L1320.32 681.395 L1319.76 681.395 L1319.2 681.395 L1318.65 681.395 L1318.09 681.395 L1317.53 681.395 L1316.97 681.395 L1316.41 681.395 L1315.85 681.395 L1315.29 681.395 L1314.73 681.395 L1314.17 681.395 L1313.61 681.395 L1313.05 681.395 L1312.49 681.395 L1311.93 681.395 L1311.38 681.395 L1310.82 681.395 L1310.26 681.395 L1309.7 681.395 L1309.14 681.395 L1308.58 681.395 L1308.02 681.395 L1307.46 681.395 L1306.9 681.395 L1306.34 681.395 L1305.78 681.395 L1305.22 681.395 L1304.66 681.395 L1304.1 681.395 L1303.55 681.395 L1302.99 681.395 L1302.43 681.395 L1301.87 681.395 L1301.31 681.395 L1300.75 681.395 L1300.19 681.395 L1299.63 681.395 L1299.07 681.395 L1298.51 681.395 L1297.95 681.395 L1297.39 681.395 L1296.83 681.395 L1296.28 681.395 L1295.72 681.395 L1295.16 681.395 L1294.6 681.395 L1294.04 681.395 L1293.48 681.395 L1292.92 681.395 L1292.36 681.395 L1291.8 681.395 L1291.24 681.395 L1290.68 681.395 L1290.12 681.395 L1289.56 681.395 L1289 681.395 L1288.45 681.395 L1287.89 681.395 L1287.33 681.395 L1286.77 681.395 L1286.21 681.395 L1285.65 681.395 L1285.09 681.395 L1284.53 681.395 L1283.97 681.395 L1283.41 681.395 L1282.85 681.395 L1282.29 681.395 L1281.73 681.395 L1281.18 681.395 L1280.62 681.395 L1280.06 681.395 L1279.5 681.395 L1278.94 681.395 L1278.38 681.395 L1277.82 681.395 L1277.26 681.395 L1276.7 681.395 L1276.14 681.395 L1275.58 681.395 L1275.02 681.395 L1274.46 681.395 L1273.91 681.395 L1273.35 681.395 L1272.79 681.395 L1272.23 681.395 L1271.67 681.395 L1271.11 681.395 L1270.55 681.395 L1269.99 681.395 L1269.43 681.395 L1268.87 681.395 L1268.31 681.395 L1267.75 681.395 L1267.19 681.395 L1266.63 681.395 L1266.08 681.395 L1265.52 681.395 L1264.96 681.395 L1264.4 681.395 L1263.84 681.395 L1263.28 681.395 L1262.72 681.395 L1262.16 681.395 L1261.6 681.395 L1261.04 681.395 L1260.48 681.395 L1259.92 681.395 L1259.36 681.395 L1258.81 681.395 L1258.25 681.395 L1257.69 681.395 L1257.13 681.395 L1256.57 681.395 L1256.01 681.395 L1255.45 681.395 L1254.89 681.395 L1254.33 681.395 L1253.77 681.395 L1253.21 681.395 L1252.65 681.395 L1252.09 681.395 L1251.54 681.395 L1250.98 681.395 L1250.42 681.395 L1249.86 681.395 L1249.3 681.395 L1248.74 681.395 L1248.18 681.395 L1247.62 681.395 L1247.06 681.395 L1246.5 681.395 L1245.94 681.395 L1245.38 681.395 L1244.82 681.395 L1244.26 681.395 L1243.71 681.395 L1243.15 681.395 L1242.59 681.395 L1242.03 681.395 L1241.47 681.395 L1240.91 681.395 L1240.35 681.395 L1239.79 681.395 L1239.23 681.395 L1238.67 681.395 L1238.11 681.395 L1237.55 681.395 L1236.99 681.395 L1236.44 681.395 L1235.88 681.395 L1235.32 681.395 L1234.76 681.395 L1234.2 681.395 L1233.64 681.395 L1233.08 681.395 L1232.52 681.395 L1231.96 681.395 L1231.4 681.395 L1230.84 681.395 L1230.28 681.395 L1229.72 681.395 L1229.17 681.395 L1228.61 681.395 L1228.05 681.395 L1227.49 681.395 L1226.93 681.395 L1226.37 681.395 L1225.81 681.395 L1225.25 681.395 L1224.69 681.395 L1224.13 681.395 L1223.57 681.395 L1223.01 681.395 L1222.45 681.395 L1221.89 681.395 L1221.34 681.395 L1220.78 681.395 L1220.22 681.395 L1219.66 681.395 L1219.1 681.395 L1218.54 681.395 L1217.98 681.395 L1217.42 681.395 L1216.86 681.395 L1216.3 681.395 L1215.74 681.395 L1215.18 681.395 L1214.62 681.395 L1214.07 681.395 L1213.51 681.395 L1212.95 681.395 L1212.39 681.395 L1211.83 681.395 L1211.27 681.395 L1210.71 681.395 L1210.15 681.395 L1209.59 681.395 L1209.03 681.395 L1208.47 681.395 L1207.91 681.395 L1207.35 681.395 L1206.8 681.395 L1206.24 681.395 L1205.68 681.395 L1205.12 681.395 L1204.56 681.395 L1204 681.395 L1203.44 681.395 L1202.88 681.395 L1202.32 681.395 L1201.76 681.395 L1201.2 681.395 L1200.64 681.395 L1200.08 681.395 L1199.52 681.395 L1198.97 681.395 L1198.41 681.395 L1197.85 681.395 L1197.29 681.395 L1196.73 681.395 L1196.17 681.395 L1195.61 681.395 L1195.05 681.395 L1194.49 681.395 L1193.93 681.395 L1193.37 681.395 L1192.81 681.395 L1192.25 681.395 L1191.7 681.395 L1191.14 681.395 L1190.58 681.395 L1190.02 681.395 L1189.46 681.395 L1188.9 681.395 L1188.34 681.395 L1187.78 681.395 L1187.22 681.395 L1186.66 681.395 L1186.1 681.395 L1185.54 681.395 L1184.98 681.395 L1184.43 681.395 L1183.87 681.395 L1183.31 681.395 L1182.75 681.395 L1182.19 681.395 L1181.63 681.395 L1181.07 681.395 L1180.51 681.395 L1179.95 681.395 L1179.39 681.395 L1178.83 681.395 L1178.27 681.395 L1177.71 681.395 L1177.15 681.395 L1176.6 681.395 L1176.04 681.395 L1175.48 681.395 L1174.92 681.395 L1174.36 681.395 L1173.8 681.395 L1173.24 681.395 L1172.68 681.395 L1172.12 681.395 L1171.56 681.395 L1171 681.395 L1170.44 681.395 L1169.88 681.395 L1169.33 681.395 L1168.77 681.395 L1168.21 681.395 L1167.65 681.395 L1167.09 681.395 L1166.53 681.395 L1165.97 681.395 L1165.41 681.395 L1164.85 681.395 L1164.29 681.395 L1163.73 681.395 L1163.17 681.395 L1162.61 681.395 L1162.05 681.395 L1161.5 681.395 L1160.94 681.395 L1160.38 681.395 L1159.82 681.395 L1159.26 681.395 L1158.7 681.395 L1158.14 681.395 L1157.58 681.395 L1157.02 681.395 L1156.46 681.395 L1155.9 681.395 L1155.34 681.395 L1154.78 681.395 L1154.23 681.395 L1153.67 681.395 L1153.11 681.395 L1152.55 681.395 L1151.99 681.395 L1151.43 681.395 L1150.87 681.395 L1150.31 681.395 L1149.75 681.395 L1149.19 681.395 L1148.63 681.395 L1148.07 681.395 L1147.51 681.395 L1146.96 681.395 L1146.4 681.395 L1145.84 681.395 L1145.28 681.395 L1144.72 681.395 L1144.16 681.395 L1143.6 681.395 L1143.04 681.395 L1142.48 681.395 L1141.92 681.395 L1141.36 681.395 L1140.8 681.395 L1140.24 681.395 L1139.68 681.395 L1139.13 681.395 L1138.57 681.395 L1138.01 681.395 L1137.45 681.395 L1136.89 681.395 L1136.33 681.395 L1135.77 681.395 L1135.21 681.395 L1134.65 681.395 L1134.09 681.395 L1133.53 681.395 L1132.97 681.395 L1132.41 681.395 L1131.86 681.395 L1131.3 681.395 L1130.74 681.395 L1130.18 681.395 L1129.62 681.395 L1129.06 681.395 L1128.5 681.395 L1127.94 681.395 L1127.38 681.395 L1126.82 681.395 L1126.26 681.395 L1125.7 681.395 L1125.14 681.395 L1124.59 681.395 L1124.03 681.395 L1123.47 681.395 L1122.91 681.395 L1122.35 681.395 L1121.79 681.395 L1121.23 681.395 L1120.67 681.395 L1120.11 681.395 L1119.55 681.395 L1118.99 681.395 L1118.43 681.395 L1117.87 681.395 L1117.31 681.395 L1116.76 681.395 L1116.2 681.395 L1115.64 681.395 L1115.08 681.395 L1114.52 681.395 L1113.96 681.395 L1113.4 681.395 L1112.84 681.395 L1112.28 681.395 L1111.72 681.395 L1111.16 681.395 L1110.6 681.395 L1110.04 681.395 L1109.49 681.395 L1108.93 681.395 L1108.37 681.395 L1107.81 681.395 L1107.25 681.395 L1106.69 681.395 L1106.13 681.395 L1105.57 681.395 L1105.01 681.395 L1104.45 681.395 L1103.89 681.395 L1103.33 681.395 L1102.77 681.395 L1102.22 681.395 L1101.66 681.395 L1101.1 681.395 L1100.54 681.395 L1099.98 681.395 L1099.42 681.395 L1098.86 681.395 L1098.3 681.395 L1097.74 681.395 L1097.18 681.395 L1096.62 681.395 L1096.06 681.395 L1095.5 681.395 L1094.94 681.395 L1094.39 681.395 L1093.83 681.395 L1093.27 681.395 L1092.71 681.395 L1092.15 681.395 L1091.59 681.395 L1091.03 681.395 L1090.47 681.395 L1089.91 681.395 L1089.35 681.395 L1088.79 681.395 L1088.23 681.395 L1087.67 681.395 L1087.12 681.395 L1086.56 681.395 L1086 681.395 L1085.44 681.395 L1084.88 681.395 L1084.32 681.395 L1083.76 681.395 L1083.2 681.395 L1082.64 681.395 L1082.08 681.395 L1081.52 681.395 L1080.96 681.395 L1080.4 681.395 L1079.85 681.395 L1079.29 681.395 L1078.73 681.395 L1078.17 681.395 L1077.61 681.395 L1077.05 681.395 L1076.49 681.395 L1075.93 681.395 L1075.37 681.395 L1074.81 681.395 L1074.25 681.395 L1073.69 681.395 L1073.13 681.395 L1072.57 681.395 L1072.02 681.395 L1071.46 681.395 L1070.9 681.395 L1070.34 681.395 L1069.78 681.395 L1069.22 681.395 L1068.66 681.395 L1068.1 681.395 L1067.54 681.395 L1066.98 681.395 L1066.42 681.395 L1065.86 681.395 L1065.3 681.395 L1064.75 681.395 L1064.19 681.395 L1063.63 681.395 L1063.07 681.395 L1062.51 681.395 L1061.95 681.395 L1061.39 681.395 L1060.83 681.395 L1060.27 681.395 L1059.71 681.395 L1059.15 681.395 L1058.59 681.395 L1058.03 681.395 L1057.48 681.395 L1056.92 681.395 L1056.36 681.395 L1055.8 681.395 L1055.24 681.395 L1054.68 681.395 L1054.12 681.395 L1053.56 681.395 L1053 681.395 L1052.44 681.395 L1051.88 681.395 L1051.32 681.395 L1050.76 681.395 L1050.2 681.395 L1049.65 681.395 L1049.09 681.395 L1048.53 681.395 L1047.97 681.395 L1047.41 681.395 L1046.85 681.395 L1046.29 681.395 L1045.73 681.395 L1045.17 681.395 L1044.61 681.395 L1044.05 681.395 L1043.49 681.395 L1042.93 681.395 L1042.38 681.395 L1041.82 681.395 L1041.26 681.395 L1040.7 681.395 L1040.14 681.395 L1039.58 681.395 L1039.02 681.395 L1038.46 681.395 L1037.9 681.395 L1037.34 681.395 L1036.78 681.395 L1036.22 681.395 L1035.66 681.395 L1035.1 681.395 L1034.55 681.395 L1033.99 681.395 L1033.43 681.395 L1032.87 681.395 L1032.31 681.395 L1031.75 681.395 L1031.19 681.395 L1030.63 681.395 L1030.07 681.395 L1029.51 681.395 L1028.95 681.395 L1028.39 681.395 L1027.83 681.395 L1027.28 681.395 L1026.72 681.395 L1026.16 681.395 L1025.6 681.395 L1025.04 681.395 L1024.48 681.395 L1023.92 681.395 L1023.36 681.395 L1022.8 681.395 L1022.24 681.395 L1021.68 681.395 L1021.12 681.395 L1020.56 681.395 L1020.01 681.395 L1019.45 681.395 L1018.89 681.395 L1018.33 681.395 L1017.77 681.395 L1017.21 681.395 L1016.65 681.395 L1016.09 681.395 L1015.53 681.395 L1014.97 681.395 L1014.41 681.395 L1013.85 681.395 L1013.29 681.395 L1012.73 681.395 L1012.18 681.395 L1011.62 681.395 L1011.06 681.395 L1010.5 681.395 L1009.94 681.395 L1009.38 681.395 L1008.82 681.395 L1008.26 681.395 L1007.7 681.395 L1007.14 681.395 L1006.58 681.395 L1006.02 681.395 L1005.46 681.395 L1004.91 681.395 L1004.35 681.395 L1003.79 681.395 L1003.23 681.395 L1002.67 681.395 L1002.11 681.395 L1001.55 681.395 L1000.99 681.395 L1000.43 681.395 L999.872 681.395 L999.313 681.395 L998.754 681.395 L998.194 681.395 L997.635 681.395 L997.076 681.395 L996.517 681.395 L995.957 681.395 L995.398 681.395 L994.839 681.395 L994.28 681.395 L993.72 681.395 L993.161 681.395 L992.602 681.395 L992.043 681.395 L991.483 681.395 L990.924 681.395 L990.365 681.395 L989.806 681.395 L989.246 681.395 L988.687 681.395 L988.128 681.395 L987.569 681.395 L987.009 681.395 L986.45 681.395 L985.891 681.395 L985.332 681.395 L984.772 681.395 L984.213 681.395 L983.654 681.395 L983.095 681.395 L982.535 681.395 L981.976 681.395 L981.417 681.395 L980.858 681.395 L980.298 681.395 L979.739 681.395 L979.18 681.395 L978.621 681.395 L978.061 681.395 L977.502 681.395 L976.943 681.395 L976.384 681.395 L975.824 681.395 L975.265 681.395 L974.706 681.395 L974.147 681.395 L973.587 681.395 L973.028 681.395 L972.469 681.395 L971.91 681.395 L971.35 681.395 L970.791 681.395 L970.232 681.395 L969.673 681.395 L969.113 681.395 L968.554 681.395 L967.995 681.395 L967.436 681.395 L966.876 681.395 L966.317 681.395 L965.758 681.395 L965.199 681.395 L964.639 681.395 L964.08 681.395 L963.521 681.395 L962.962 681.395 L962.402 681.395 L961.843 681.395 L961.284 681.395 L960.725 681.395 L960.165 681.395 L959.606 681.395 L959.047 681.395 L958.488 681.395 L957.928 681.395 L957.369 681.395 L956.81 681.395 L956.251 681.395 L955.691 681.395 L955.132 681.395 L954.573 681.395 L954.014 681.395 L953.454 681.395 L952.895 681.395 L952.336 681.395 L951.777 681.395 L951.217 681.395 L950.658 681.395 L950.099 681.395 L949.54 681.395 L948.98 681.395 L948.421 681.395 L947.862 681.395 L947.303 681.395 L946.743 681.395 L946.184 681.395 L945.625 681.395 L945.066 681.395 L944.506 681.395 L943.947 681.395 L943.388 681.395 L942.829 681.395 L942.269 681.395 L941.71 681.395 L941.151 681.395 L940.592 681.395 L940.032 681.395 L939.473 681.395 L938.914 681.395 L938.355 681.395 L937.795 681.395 L937.236 681.395 L936.677 681.395 L936.118 681.395 L935.558 681.395 L934.999 681.395 L934.44 681.395 L933.881 681.395 L933.321 681.395 L932.762 681.395 L932.203 681.395 L931.644 681.395 L931.084 681.395 L930.525 681.395 L929.966 681.395 L929.406 681.395 L928.847 681.395 L928.288 681.395 L927.729 681.395 L927.169 681.395 L926.61 681.395 L926.051 681.395 L925.492 681.395 L924.932 681.395 L924.373 681.395 L923.814 681.395 L923.255 681.395 L922.695 681.395 L922.136 681.395 L921.577 681.395 L921.018 681.395 L920.458 681.395 L919.899 681.395 L919.34 681.395 L918.781 681.395 L918.221 681.395 L917.662 681.395 L917.103 681.395 L916.544 681.395 L915.984 681.395 L915.425 681.395 L914.866 681.395 L914.307 681.395 L913.747 681.395 L913.188 681.395 L912.629 681.395 L912.07 681.395 L911.51 681.395 L910.951 681.395 L910.392 681.395 L909.833 681.395 L909.273 681.395 L908.714 681.395 L908.155 681.395 L907.596 681.395 L907.036 681.395 L906.477 681.395 L905.918 681.395 L905.359 681.395 L904.799 681.395 L904.24 681.395 L903.681 681.395 L903.122 681.395 L902.562 681.395 L902.003 681.395 L901.444 681.395 L900.885 681.395 L900.325 681.395 L899.766 681.395 L899.207 681.395 L898.648 681.395 L898.088 681.395 L897.529 681.395 L896.97 681.395 L896.411 681.395 L895.851 681.395 L895.292 681.395 L894.733 681.395 L894.174 681.395 L893.614 681.395 L893.055 681.395 L892.496 681.395 L891.937 681.395 L891.377 681.395 L890.818 681.395 L890.259 681.395 L889.7 681.395 L889.14 681.395 L888.581 681.395 L888.022 681.395 L887.463 681.395 L886.903 681.395 L886.344 681.395 L885.785 681.395 L885.226 681.395 L884.666 681.395 L884.107 681.395 L883.548 681.395 L882.989 681.395 L882.429 681.395 L881.87 681.395 L881.311 681.395 L880.752 681.395 L880.192 681.395 L879.633 681.395 L879.074 681.395 L878.515 681.395 L877.955 681.395 L877.396 681.395 L876.837 681.395 L876.278 681.395 L875.718 681.395 L875.159 681.395 L874.6 681.395 L874.041 681.395 L873.481 681.395 L872.922 681.395 L872.363 681.395 L871.804 681.395 L871.244 681.395 L870.685 681.395 L870.126 681.395 L869.567 681.395 L869.007 681.395 L868.448 681.395 L867.889 681.395 L867.33 681.395 L866.77 681.395 L866.211 681.395 L865.652 681.395 L865.093 681.395 L864.533 681.395 L863.974 681.395 L863.415 681.395 L862.856 681.395 L862.296 681.395 L861.737 681.395 L861.178 681.395 L860.619 681.395 L860.059 681.395 L859.5 681.395 L858.941 681.395 L858.382 681.395 L857.822 681.395 L857.263 681.395 L856.704 681.395 L856.145 681.395 L855.585 681.395 L855.026 681.395 L854.467 681.395 L853.908 681.395 L853.348 681.395 L852.789 681.395 L852.23 681.395 L851.671 681.395 L851.111 681.395 L850.552 681.395 L849.993 681.395 L849.434 681.395 L848.874 681.395 L848.315 681.395 L847.756 681.395 L847.197 681.395 L846.637 681.395 L846.078 681.395 L845.519 681.395 L844.96 681.395 L844.4 681.395 L843.841 681.395 L843.282 681.395 L842.723 681.395 L842.163 681.395 L841.604 681.395 L841.045 681.395 L840.486 681.395 L839.926 681.395 L839.367 681.395 L838.808 681.395 L838.249 681.395 L837.689 681.395 L837.13 681.395 L836.571 681.395 L836.012 681.395 L835.452 681.395 L834.893 681.395 L834.334 681.395 L833.775 681.395 L833.215 681.395 L832.656 681.395 L832.097 681.395 L831.538 681.395 L830.978 681.395 L830.419 681.395 L829.86 681.395 L829.301 681.395 L828.741 681.395 L828.182 681.395 L827.623 681.395 L827.064 681.395 L826.504 681.395 L825.945 681.395 L825.386 681.395 L824.827 681.395 L824.267 681.395 L823.708 681.395 L823.149 681.395 L822.59 681.395 L822.03 681.395 L821.471 681.395 L820.912 681.395 L820.353 681.395 L819.793 681.395 L819.234 681.395 L818.675 681.395 L818.116 681.395 L817.556 681.395 L816.997 681.395 L816.438 681.395 L815.879 681.395 L815.319 681.395 L814.76 681.395 L814.201 681.395 L813.642 681.395 L813.082 681.395 L812.523 681.395 L811.964 681.395 L811.405 681.395 L810.845 681.395 L810.286 681.395 L809.727 681.395 L809.168 681.395 L808.608 681.395 L808.049 681.395 L807.49 681.395 L806.931 681.395 L806.371 681.395 L805.812 681.395 L805.253 681.395 L804.693 681.395 L804.134 681.395 L803.575 681.395 L803.016 681.395 L802.456 681.395 L801.897 681.395 L801.338 681.395 L800.779 681.395 L800.219 681.395 L799.66 681.395 L799.101 681.395 L798.542 681.395 L797.982 681.395 L797.423 681.395 L796.864 681.395 L796.305 681.395 L795.745 681.395 L795.186 681.395 L794.627 681.395 L794.068 681.395 L793.508 681.395 L792.949 681.395 L792.39 681.395 L791.831 681.395 L791.271 681.395 L790.712 681.395 L790.153 681.395 L789.594 681.395 L789.034 681.395 L788.475 681.395 L787.916 681.395 L787.357 681.395 L786.797 681.395 L786.238 681.395 L785.679 681.395 L785.12 681.395 L784.56 681.395 L784.001 681.395 L783.442 681.395 L782.883 681.395 L782.323 681.395 L781.764 681.395 L781.205 681.395 L780.646 681.395 L780.086 681.395 L779.527 681.395 L778.968 681.395 L778.409 681.395 L777.849 681.395 L777.29 681.395 L776.731 681.395 L776.172 681.395 L775.612 681.395 L775.053 681.395 L774.494 681.395 L773.935 681.395 L773.375 681.395 L772.816 681.395 L772.257 681.395 L771.698 681.395 L771.138 681.395 L770.579 681.395 L770.02 681.395 L769.461 681.395 L768.901 681.395 L768.342 681.395 L767.783 681.395 L767.224 681.395 L766.664 681.395 L766.105 681.395 L765.546 681.395 L764.987 681.395 L764.427 681.395 L763.868 681.395 L763.309 681.395 L762.75 681.395 L762.19 681.395 L761.631 681.395 L761.072 681.395 L760.513 681.395 L759.953 681.395 L759.394 681.395 L758.835 681.395 L758.276 681.395 L757.716 681.395 L757.157 681.395 L756.598 681.395 L756.039 681.395 L755.479 681.395 L754.92 681.395 L754.361 681.395 L753.802 681.395 L753.242 681.395 L752.683 681.395 L752.124 681.395 L751.565 681.395 L751.005 681.395 L750.446 681.395 L749.887 681.395 L749.328 681.395 L748.768 681.395 L748.209 681.395 L747.65 681.395 L747.091 681.395 L746.531 681.395 L745.972 681.395 L745.413 681.395 L744.854 681.395 L744.294 681.395 L743.735 681.395 L743.176 681.395 L742.617 681.395 L742.057 681.395 L741.498 681.395 L740.939 681.395 L740.38 681.395 L739.82 681.395 L739.261 681.395 L738.702 681.395 L738.143 681.395 L737.583 681.395 L737.024 681.395 L736.465 681.395 L735.906 681.395 L735.346 681.395 L734.787 681.395 L734.228 681.395 L733.669 681.395 L733.109 681.395 L732.55 681.395 L731.991 681.395 L731.432 681.395 L730.872 681.395 L730.313 681.395 L729.754 681.395 L729.195 681.395 L728.635 681.395 L728.076 681.395 L727.517 681.395 L726.958 681.395 L726.398 681.395 L725.839 681.395 L725.28 681.395 L724.721 681.395 L724.161 681.395 L723.602 681.395 L723.043 681.395 L722.484 681.395 L721.924 681.395 L721.365 681.395 L720.806 681.395 L720.247 681.395  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.756 720.806,682.756 721.365,682.756 721.924,682.756 722.484,682.756 723.043,682.756 723.602,682.756 724.161,682.756 724.721,682.756 725.28,682.756 725.839,682.756 726.398,682.756 726.958,682.756 727.517,682.756 728.076,682.756 728.635,682.756 729.195,682.756 729.754,682.756 730.313,682.756 730.872,682.756 731.432,682.756 731.991,682.756 732.55,682.756 733.109,682.756 733.669,682.756 734.228,682.756 734.787,682.756 735.346,682.756 735.906,682.756 736.465,682.756 737.024,682.756 737.583,682.756 738.143,682.756 738.702,682.756 739.261,682.756 739.82,682.756 740.38,682.756 740.939,682.756 741.498,682.756 742.057,682.756 742.617,682.756 743.176,682.756 743.735,682.756 744.294,682.756 744.854,682.756 745.413,682.756 745.972,682.756 746.531,682.756 747.091,682.756 747.65,682.756 748.209,682.756 748.768,682.756 749.328,682.756 749.887,682.756 750.446,682.756 751.005,682.756 751.565,682.756 752.124,682.756 752.683,682.756 753.242,682.756 753.802,682.756 754.361,682.756 754.92,682.756 755.479,682.756 756.039,682.756 756.598,682.756 757.157,682.756 757.716,682.756 758.276,682.756 758.835,682.756 759.394,682.756 759.953,682.756 760.513,682.756 761.072,682.756 761.631,682.756 762.19,682.756 762.75,682.756 763.309,682.756 763.868,682.756 764.427,682.756 764.987,682.756 765.546,682.756 766.105,682.756 766.664,682.756 767.224,682.756 767.783,682.756 768.342,682.756 768.901,682.756 769.461,682.756 770.02,682.756 770.579,682.756 771.138,682.756 771.698,682.756 772.257,682.756 772.816,682.756 773.375,682.756 773.935,682.756 774.494,682.756 775.053,682.756 775.612,682.756 776.172,682.756 776.731,682.756 777.29,682.756 777.849,682.756 778.409,682.756 778.968,682.756 779.527,682.756 780.086,682.756 780.646,682.756 781.205,682.756 781.764,682.756 782.323,682.756 782.883,682.756 783.442,682.756 784.001,682.756 784.56,682.756 785.12,682.756 785.679,682.756 786.238,682.756 786.797,682.756 787.357,682.756 787.916,682.756 788.475,682.756 789.034,682.756 789.594,682.756 790.153,682.756 790.712,682.756 791.271,682.756 791.831,682.756 792.39,682.756 792.949,682.756 793.508,682.756 794.068,682.756 794.627,682.756 795.186,682.756 795.745,682.756 796.305,682.756 796.864,682.756 797.423,682.756 797.982,682.756 798.542,682.756 799.101,682.756 799.66,682.756 800.219,682.756 800.779,682.756 801.338,682.756 801.897,682.756 802.456,682.756 803.016,682.756 803.575,682.756 804.134,682.756 804.693,682.756 805.253,682.756 805.812,682.756 806.371,682.756 806.931,682.756 807.49,682.756 808.049,682.756 808.608,682.756 809.168,682.756 809.727,682.756 810.286,682.756 810.845,682.756 811.405,682.756 811.964,682.756 812.523,682.756 813.082,682.756 813.642,682.756 814.201,682.756 814.76,682.756 815.319,682.756 815.879,682.756 816.438,682.756 816.997,682.756 817.556,682.756 818.116,682.756 818.675,682.756 819.234,682.756 819.793,682.756 820.353,682.756 820.912,682.756 821.471,682.756 822.03,682.756 822.59,682.756 823.149,682.756 823.708,682.756 824.267,682.756 824.827,682.756 825.386,682.756 825.945,682.756 826.504,682.756 827.064,682.756 827.623,682.756 828.182,682.756 828.741,682.756 829.301,682.756 829.86,682.756 830.419,682.756 830.978,682.756 831.538,682.756 832.097,682.756 832.656,682.756 833.215,682.756 833.775,682.756 834.334,682.756 834.893,682.756 835.452,682.756 836.012,682.756 836.571,682.756 837.13,682.756 837.689,682.756 838.249,682.756 838.808,682.756 839.367,682.756 839.926,682.756 840.486,682.756 841.045,682.756 841.604,682.756 842.163,682.756 842.723,682.756 843.282,682.756 843.841,682.756 844.4,682.756 844.96,682.756 845.519,682.756 846.078,682.756 846.637,682.756 847.197,682.756 847.756,682.756 848.315,682.756 848.874,682.756 849.434,682.756 849.993,682.756 850.552,682.756 851.111,682.756 851.671,682.756 852.23,682.756 852.789,682.756 853.348,682.756 853.908,682.756 854.467,682.756 855.026,682.756 855.585,682.756 856.145,682.756 856.704,682.756 857.263,682.756 857.822,682.756 858.382,682.756 858.941,682.756 859.5,682.756 860.059,682.756 860.619,682.756 861.178,682.756 861.737,682.756 862.296,682.756 862.856,682.756 863.415,682.756 863.974,682.756 864.533,682.756 865.093,682.756 865.652,682.756 866.211,682.756 866.77,682.756 867.33,682.756 867.889,682.756 868.448,682.756 869.007,682.756 869.567,682.756 870.126,682.756 870.685,682.756 871.244,682.756 871.804,682.756 872.363,682.756 872.922,682.756 873.481,682.756 874.041,682.756 874.6,682.756 875.159,682.756 875.718,682.756 876.278,682.756 876.837,682.756 877.396,682.756 877.955,682.756 878.515,682.756 879.074,682.756 879.633,682.756 880.192,682.756 880.752,682.756 881.311,682.756 881.87,682.756 882.429,682.756 882.989,682.756 883.548,682.756 884.107,682.756 884.666,682.756 885.226,682.756 885.785,682.756 886.344,682.756 886.903,682.756 887.463,682.756 888.022,682.756 888.581,682.756 889.14,682.756 889.7,682.756 890.259,682.756 890.818,682.756 891.377,682.756 891.937,682.756 892.496,682.756 893.055,682.756 893.614,682.756 894.174,682.756 894.733,682.756 895.292,682.756 895.851,682.756 896.411,682.756 896.97,682.756 897.529,682.756 898.088,682.756 898.648,682.756 899.207,682.756 899.766,682.756 900.325,682.756 900.885,682.756 901.444,682.756 902.003,682.756 902.562,682.756 903.122,682.756 903.681,682.756 904.24,682.756 904.799,682.756 905.359,682.756 905.918,682.756 906.477,682.756 907.036,682.756 907.596,682.756 908.155,682.756 908.714,682.756 909.273,682.756 909.833,682.756 910.392,682.756 910.951,682.756 911.51,682.756 912.07,682.756 912.629,682.756 913.188,682.756 913.747,682.756 914.307,682.756 914.866,682.756 915.425,682.756 915.984,682.756 916.544,682.756 917.103,682.756 917.662,682.756 918.221,682.756 918.781,682.756 919.34,682.756 919.899,682.756 920.458,682.756 921.018,682.756 921.577,682.756 922.136,682.756 922.695,682.756 923.255,682.756 923.814,682.756 924.373,682.756 924.932,682.756 925.492,682.756 926.051,682.756 926.61,682.756 927.169,682.756 927.729,682.756 928.288,682.756 928.847,682.756 929.406,682.756 929.966,682.756 930.525,682.756 931.084,682.756 931.644,682.756 932.203,682.756 932.762,682.756 933.321,682.756 933.881,682.756 934.44,682.756 934.999,682.756 935.558,682.756 936.118,682.756 936.677,682.756 937.236,682.756 937.795,682.756 938.355,682.756 938.914,682.756 939.473,682.756 940.032,682.756 940.592,682.756 941.151,682.756 941.71,682.756 942.269,682.756 942.829,682.756 943.388,682.756 943.947,682.756 944.506,682.756 945.066,682.756 945.625,682.756 946.184,682.756 946.743,682.756 947.303,682.756 947.862,682.756 948.421,682.756 948.98,682.756 949.54,682.756 950.099,682.756 950.658,682.756 951.217,682.756 951.777,682.756 952.336,682.756 952.895,682.756 953.454,682.756 954.014,682.756 954.573,682.756 955.132,682.756 955.691,682.756 956.251,682.756 956.81,682.756 957.369,682.756 957.928,682.756 958.488,682.756 959.047,682.756 959.606,682.756 960.165,682.756 960.725,682.756 961.284,682.756 961.843,682.756 962.402,682.756 962.962,682.756 963.521,682.756 964.08,682.756 964.639,682.756 965.199,682.756 965.758,682.756 966.317,682.756 966.876,682.756 967.436,682.756 967.995,682.756 968.554,682.756 969.113,682.756 969.673,682.756 970.232,682.756 970.791,682.756 971.35,682.756 971.91,682.756 972.469,682.756 973.028,682.756 973.587,682.756 974.147,682.756 974.706,682.756 975.265,682.756 975.824,682.756 976.384,682.756 976.943,682.756 977.502,682.756 978.061,682.756 978.621,682.756 979.18,682.756 979.739,682.756 980.298,682.756 980.858,682.756 981.417,682.756 981.976,682.756 982.535,682.756 983.095,682.756 983.654,682.756 984.213,682.756 984.772,682.756 985.332,682.756 985.891,682.756 986.45,682.756 987.009,682.756 987.569,682.756 988.128,682.756 988.687,682.756 989.246,682.756 989.806,682.756 990.365,682.756 990.924,682.756 991.483,682.756 992.043,682.756 992.602,682.756 993.161,682.756 993.72,682.756 994.28,682.756 994.839,682.756 995.398,682.756 995.957,682.756 996.517,682.756 997.076,682.756 997.635,682.756 998.194,682.756 998.754,682.756 999.313,682.756 999.872,682.756 1000.43,682.756 1000.99,682.756 1001.55,682.756 1002.11,682.756 1002.67,682.756 1003.23,682.756 1003.79,682.756 1004.35,682.756 1004.91,682.756 1005.46,682.756 1006.02,682.756 1006.58,682.756 1007.14,682.756 1007.7,682.756 1008.26,682.756 1008.82,682.756 1009.38,682.756 1009.94,682.756 1010.5,682.756 1011.06,682.756 1011.62,682.756 1012.18,682.756 1012.73,682.756 1013.29,682.756 1013.85,682.756 1014.41,682.756 1014.97,682.756 1015.53,682.756 1016.09,682.756 1016.65,682.756 1017.21,682.756 1017.77,682.756 1018.33,682.756 1018.89,682.756 1019.45,682.756 1020.01,682.756 1020.56,682.756 1021.12,682.756 1021.68,682.756 1022.24,682.756 1022.8,682.756 1023.36,682.756 1023.92,682.756 1024.48,682.756 1025.04,682.756 1025.6,682.756 1026.16,682.756 1026.72,682.756 1027.28,682.756 1027.83,682.756 1028.39,682.756 1028.95,682.756 1029.51,682.756 1030.07,682.756 1030.63,682.756 1031.19,682.756 1031.75,682.756 1032.31,682.756 1032.87,682.756 1033.43,682.756 1033.99,682.756 1034.55,682.756 1035.1,682.756 1035.66,682.756 1036.22,682.756 1036.78,682.756 1037.34,682.756 1037.9,682.756 1038.46,682.756 1039.02,682.756 1039.58,682.756 1040.14,682.756 1040.7,682.756 1041.26,682.756 1041.82,682.756 1042.38,682.756 1042.93,682.756 1043.49,682.756 1044.05,682.756 1044.61,682.756 1045.17,682.756 1045.73,682.756 1046.29,682.756 1046.85,682.756 1047.41,682.756 1047.97,682.756 1048.53,682.756 1049.09,682.756 1049.65,682.756 1050.2,682.756 1050.76,682.756 1051.32,682.756 1051.88,682.756 1052.44,682.756 1053,682.756 1053.56,682.756 1054.12,682.756 1054.68,682.756 1055.24,682.756 1055.8,682.756 1056.36,682.756 1056.92,682.756 1057.48,682.756 1058.03,682.756 1058.59,682.756 1059.15,682.756 1059.71,682.756 1060.27,682.756 1060.83,682.756 1061.39,682.756 1061.95,682.756 1062.51,682.756 1063.07,682.756 1063.63,682.756 1064.19,682.756 1064.75,682.756 1065.3,682.756 1065.86,682.756 1066.42,682.756 1066.98,682.756 1067.54,682.756 1068.1,682.756 1068.66,682.756 1069.22,682.756 1069.78,682.756 1070.34,682.756 1070.9,682.756 1071.46,682.756 1072.02,682.756 1072.57,682.756 1073.13,682.756 1073.69,682.756 1074.25,682.756 1074.81,682.756 1075.37,682.756 1075.93,682.756 1076.49,682.756 1077.05,682.756 1077.61,682.756 1078.17,682.756 1078.73,682.756 1079.29,682.756 1079.85,682.756 1080.4,682.756 1080.96,682.756 1081.52,682.756 1082.08,682.756 1082.64,682.756 1083.2,682.756 1083.76,682.756 1084.32,682.756 1084.88,682.756 1085.44,682.756 1086,682.756 1086.56,682.756 1087.12,682.756 1087.67,682.756 1088.23,682.756 1088.79,682.756 1089.35,682.756 1089.91,682.756 1090.47,682.756 1091.03,682.756 1091.59,682.756 1092.15,682.756 1092.71,682.756 1093.27,682.756 1093.83,682.756 1094.39,682.756 1094.94,682.756 1095.5,682.756 1096.06,682.756 1096.62,682.756 1097.18,682.756 1097.74,682.756 1098.3,682.756 1098.86,682.756 1099.42,682.756 1099.98,682.756 1100.54,682.756 1101.1,682.756 1101.66,682.756 1102.22,682.756 1102.77,682.756 1103.33,682.756 1103.89,682.756 1104.45,682.756 1105.01,682.756 1105.57,682.756 1106.13,682.756 1106.69,682.756 1107.25,682.756 1107.81,682.756 1108.37,682.756 1108.93,682.756 1109.49,682.756 1110.04,682.756 1110.6,682.756 1111.16,682.756 1111.72,682.756 1112.28,682.756 1112.84,682.756 1113.4,682.756 1113.96,682.756 1114.52,682.756 1115.08,682.756 1115.64,682.756 1116.2,682.756 1116.76,682.756 1117.31,682.756 1117.87,682.756 1118.43,682.756 1118.99,682.756 1119.55,682.756 1120.11,682.756 1120.67,682.756 1121.23,682.756 1121.79,682.756 1122.35,682.756 1122.91,682.756 1123.47,682.756 1124.03,682.756 1124.59,682.756 1125.14,682.756 1125.7,682.756 1126.26,682.756 1126.82,682.756 1127.38,682.756 1127.94,682.756 1128.5,682.756 1129.06,682.756 1129.62,682.756 1130.18,682.756 1130.74,682.756 1131.3,682.756 1131.86,682.756 1132.41,682.756 1132.97,682.756 1133.53,682.756 1134.09,682.756 1134.65,682.756 1135.21,682.756 1135.77,682.756 1136.33,682.756 1136.89,682.756 1137.45,682.756 1138.01,682.756 1138.57,682.756 1139.13,682.756 1139.68,682.756 1140.24,682.756 1140.8,682.756 1141.36,682.756 1141.92,682.756 1142.48,682.756 1143.04,682.756 1143.6,682.756 1144.16,682.756 1144.72,682.756 1145.28,682.756 1145.84,682.756 1146.4,682.756 1146.96,682.756 1147.51,682.756 1148.07,682.756 1148.63,682.756 1149.19,682.756 1149.75,682.756 1150.31,682.756 1150.87,682.756 1151.43,682.756 1151.99,682.756 1152.55,682.756 1153.11,682.756 1153.67,682.756 1154.23,682.756 1154.78,682.756 1155.34,682.756 1155.9,682.756 1156.46,682.756 1157.02,682.756 1157.58,682.756 1158.14,682.756 1158.7,682.756 1159.26,682.756 1159.82,682.756 1160.38,682.756 1160.94,682.756 1161.5,682.756 1162.05,682.756 1162.61,682.756 1163.17,682.756 1163.73,682.756 1164.29,682.756 1164.85,682.756 1165.41,682.756 1165.97,682.756 1166.53,682.756 1167.09,682.756 1167.65,682.756 1168.21,682.756 1168.77,682.756 1169.33,682.756 1169.88,682.756 1170.44,682.756 1171,682.756 1171.56,682.756 1172.12,682.756 1172.68,682.756 1173.24,682.756 1173.8,682.756 1174.36,682.756 1174.92,682.756 1175.48,682.756 1176.04,682.756 1176.6,682.756 1177.15,682.756 1177.71,682.756 1178.27,682.756 1178.83,682.756 1179.39,682.756 1179.95,682.756 1180.51,682.756 1181.07,682.756 1181.63,682.756 1182.19,682.756 1182.75,682.756 1183.31,682.756 1183.87,682.756 1184.43,682.756 1184.98,682.756 1185.54,682.756 1186.1,682.756 1186.66,682.756 1187.22,682.756 1187.78,682.756 1188.34,682.756 1188.9,682.756 1189.46,682.756 1190.02,682.756 1190.58,682.756 1191.14,682.756 1191.7,682.756 1192.25,682.756 1192.81,682.756 1193.37,682.756 1193.93,682.756 1194.49,682.756 1195.05,682.756 1195.61,682.756 1196.17,682.756 1196.73,682.756 1197.29,682.756 1197.85,682.756 1198.41,682.756 1198.97,682.756 1199.52,682.756 1200.08,682.756 1200.64,682.756 1201.2,682.756 1201.76,682.756 1202.32,682.756 1202.88,682.756 1203.44,682.756 1204,682.756 1204.56,682.756 1205.12,682.756 1205.68,682.756 1206.24,682.756 1206.8,682.756 1207.35,682.756 1207.91,682.756 1208.47,682.756 1209.03,682.756 1209.59,682.756 1210.15,682.756 1210.71,682.756 1211.27,682.756 1211.83,682.756 1212.39,682.756 1212.95,682.756 1213.51,682.756 1214.07,682.756 1214.62,682.756 1215.18,682.756 1215.74,682.756 1216.3,682.756 1216.86,682.756 1217.42,682.756 1217.98,682.756 1218.54,682.756 1219.1,682.756 1219.66,682.756 1220.22,682.756 1220.78,682.756 1221.34,682.756 1221.89,682.756 1222.45,682.756 1223.01,682.756 1223.57,682.756 1224.13,682.756 1224.69,682.756 1225.25,682.756 1225.81,682.756 1226.37,682.756 1226.93,682.756 1227.49,682.756 1228.05,682.756 1228.61,682.756 1229.17,682.756 1229.72,682.756 1230.28,682.756 1230.84,682.756 1231.4,682.756 1231.96,682.756 1232.52,682.756 1233.08,682.756 1233.64,682.756 1234.2,682.756 1234.76,682.756 1235.32,682.756 1235.88,682.756 1236.44,682.756 1236.99,682.756 1237.55,682.756 1238.11,682.756 1238.67,682.756 1239.23,682.756 1239.79,682.756 1240.35,682.756 1240.91,682.756 1241.47,682.756 1242.03,682.756 1242.59,682.756 1243.15,682.756 1243.71,682.756 1244.26,682.756 1244.82,682.756 1245.38,682.756 1245.94,682.756 1246.5,682.756 1247.06,682.756 1247.62,682.756 1248.18,682.756 1248.74,682.756 1249.3,682.756 1249.86,682.756 1250.42,682.756 1250.98,682.756 1251.54,682.756 1252.09,682.756 1252.65,682.756 1253.21,682.756 1253.77,682.756 1254.33,682.756 1254.89,682.756 1255.45,682.756 1256.01,682.756 1256.57,682.756 1257.13,682.756 1257.69,682.756 1258.25,682.756 1258.81,682.756 1259.36,682.756 1259.92,682.756 1260.48,682.756 1261.04,682.756 1261.6,682.756 1262.16,682.756 1262.72,682.756 1263.28,682.756 1263.84,682.756 1264.4,682.756 1264.96,682.756 1265.52,682.756 1266.08,682.756 1266.63,682.756 1267.19,682.756 1267.75,682.756 1268.31,682.756 1268.87,682.756 1269.43,682.756 1269.99,682.756 1270.55,682.756 1271.11,682.756 1271.67,682.756 1272.23,682.756 1272.79,682.756 1273.35,682.756 1273.91,682.756 1274.46,682.756 1275.02,682.756 1275.58,682.756 1276.14,682.756 1276.7,682.756 1277.26,682.756 1277.82,682.756 1278.38,682.756 1278.94,682.756 1279.5,682.756 1280.06,682.756 1280.62,682.756 1281.18,682.756 1281.73,682.756 1282.29,682.756 1282.85,682.756 1283.41,682.756 1283.97,682.756 1284.53,682.756 1285.09,682.756 1285.65,682.756 1286.21,682.756 1286.77,682.756 1287.33,682.756 1287.89,682.756 1288.45,682.756 1289,682.756 1289.56,682.756 1290.12,682.756 1290.68,682.756 1291.24,682.756 1291.8,682.756 1292.36,682.756 1292.92,682.756 1293.48,682.756 1294.04,682.756 1294.6,682.756 1295.16,682.756 1295.72,682.756 1296.28,682.756 1296.83,682.756 1297.39,682.756 1297.95,682.756 1298.51,682.756 1299.07,682.756 1299.63,682.756 1300.19,682.756 1300.75,682.756 1301.31,682.756 1301.87,682.756 1302.43,682.756 1302.99,682.756 1303.55,682.756 1304.1,682.756 1304.66,682.756 1305.22,682.756 1305.78,682.756 1306.34,682.756 1306.9,682.756 1307.46,682.756 1308.02,682.756 1308.58,682.756 1309.14,682.756 1309.7,682.756 1310.26,682.756 1310.82,682.756 1311.38,682.756 1311.93,682.756 1312.49,682.756 1313.05,682.756 1313.61,682.756 1314.17,682.756 1314.73,682.756 1315.29,682.756 1315.85,682.756 1316.41,682.756 1316.97,682.756 1317.53,682.756 1318.09,682.756 1318.65,682.756 1319.2,682.756 1319.76,682.756 1320.32,682.756 1320.88,682.756 1321.44,682.756 1322,682.756 1322.56,682.756 1323.12,682.756 1323.68,682.756 1324.24,682.756 1324.8,682.756 1325.36,682.756 1325.92,682.756 1326.47,682.756 1327.03,682.756 1327.59,682.756 1328.15,682.756 1328.71,682.756 1329.27,682.756 1329.83,682.756 1330.39,682.756 1330.95,682.756 1331.51,682.756 1332.07,682.756 1332.63,682.756 1333.19,682.756 1333.75,682.756 1334.3,682.756 1334.86,682.756 1335.42,682.756 1335.98,682.756 1336.54,682.756 1337.1,682.756 1337.66,682.756 1338.22,682.756 1338.78,682.756 1339.34,682.756 1339.9,682.756 1340.46,682.756 1341.02,682.756 1341.57,682.756 1342.13,682.756 1342.69,682.756 1343.25,682.756 1343.81,682.756 1344.37,682.756 1344.93,682.756 1345.49,682.756 1346.05,682.756 1346.61,682.756 1347.17,682.756 1347.73,682.756 1348.29,682.756 1348.84,682.756 1349.4,682.756 1349.96,682.756 1350.52,682.756 1351.08,682.756 1351.64,682.756 1352.2,682.756 1352.76,682.756 1353.32,682.756 1353.88,682.756 1354.44,682.756 1355,682.756 1355.56,682.756 1356.12,682.756 1356.67,682.756 1357.23,682.756 1357.79,682.756 1358.35,682.756 1358.91,682.756 1359.47,682.756 1360.03,682.756 1360.59,682.756 1361.15,682.756 1361.71,682.756 1362.27,682.756 1362.83,682.756 1363.39,682.756 1363.94,682.756 1364.5,682.756 1365.06,682.756 1365.62,682.756 1366.18,682.756 1366.74,682.756 1367.3,682.756 1367.86,682.756 1368.42,682.756 1368.98,682.756 1369.54,682.756 1370.1,682.756 1370.66,682.756 1371.21,682.756 1371.77,682.756 1372.33,682.756 1372.89,682.756 1373.45,682.756 1374.01,682.756 1374.57,682.756 1375.13,682.756 1375.69,682.756 1376.25,682.756 1376.81,682.756 1377.37,682.756 1377.93,682.756 1378.49,682.756 1379.04,682.756 1379.6,682.756 1380.16,682.756 1380.72,682.756 1381.28,682.756 1381.84,682.756 1382.4,682.756 1382.96,682.756 1383.52,682.756 1384.08,682.756 1384.64,682.756 1385.2,682.756 1385.76,682.756 1386.31,682.756 1386.87,682.756 1387.43,682.756 1387.99,682.756 1388.55,682.756 1389.11,682.756 1389.67,682.756 1390.23,682.756 1390.79,682.756 1391.35,682.756 1391.91,682.756 1392.47,682.756 1393.03,682.756 1393.58,682.756 1394.14,682.756 1394.7,682.756 1395.26,682.756 1395.82,682.756 1396.38,682.756 1396.94,682.756 1397.5,682.756 1398.06,682.756 1398.62,682.756 1399.18,682.756 1399.74,682.756 1400.3,682.756 1400.86,682.756 1401.41,682.756 1401.97,682.756 1402.53,682.756 1403.09,682.756 1403.65,682.756 1404.21,682.756 1404.77,682.756 1405.33,682.756 1405.89,682.756 1406.45,682.756 1407.01,682.756 1407.57,682.756 1408.13,682.756 1408.68,682.756 1409.24,682.756 1409.8,682.756 1410.36,682.756 1410.92,682.756 1411.48,682.756 1412.04,682.756 1412.6,682.756 1413.16,682.756 1413.72,682.756 1414.28,682.756 1414.84,682.756 1415.4,682.756 1415.95,682.756 1416.51,682.756 1417.07,682.756 1417.63,682.756 1418.19,682.756 1418.75,682.756 1419.31,682.756 1419.87,682.756 1420.43,682.756 1420.99,682.756 1421.55,682.756 1422.11,682.756 1422.67,682.756 1423.23,682.756 1423.78,682.756 1424.34,682.756 1424.9,682.756 1425.46,682.756 1426.02,682.756 1426.58,682.756 1427.14,682.756 1427.7,682.756 1428.26,682.756 1428.82,682.756 1429.38,682.756 1429.94,682.756 1430.5,682.756 1431.05,682.756 1431.61,682.756 1432.17,682.756 1432.73,682.756 1433.29,682.756 1433.85,682.756 1434.41,682.756 1434.97,682.756 1435.53,682.756 1436.09,682.756 1436.65,682.756 1437.21,682.756 1437.77,682.756 1438.33,682.756 1438.88,682.756 1439.44,682.756 1440,682.756 1440.56,682.756 1441.12,682.756 1441.68,682.756 1442.24,682.756 1442.8,682.756 1443.36,682.756 1443.92,682.756 1444.48,682.756 1445.04,682.756 1445.6,682.756 1446.15,682.756 1446.71,682.756 1447.27,682.756 1447.83,682.756 1448.39,682.756 1448.95,682.756 1449.51,682.756 1450.07,682.756 1450.63,682.756 1451.19,682.756 1451.75,682.756 1452.31,682.756 1452.87,682.756 1453.42,682.756 1453.98,682.756 1454.54,682.756 1455.1,682.756 1455.66,682.756 1456.22,682.756 1456.78,682.756 1457.34,682.756 1457.9,682.756 1458.46,682.756 1459.02,682.756 1459.58,682.756 1460.14,682.756 1460.7,682.756 1461.25,682.756 1461.81,682.756 1462.37,682.756 1462.93,682.756 1463.49,682.756 1464.05,682.756 1464.61,682.756 1465.17,682.756 1465.73,682.756 1466.29,682.756 1466.85,682.756 1467.41,682.756 1467.97,682.756 1468.52,682.756 1469.08,682.756 1469.64,682.756 1470.2,682.756 1470.76,682.756 1471.32,682.756 1471.88,682.756 1472.44,682.756 1473,682.756 1473.56,682.756 1474.12,682.756 1474.68,682.756 1475.24,682.756 1475.79,682.756 1476.35,682.756 1476.91,682.756 1477.47,682.756 1478.03,682.756 1478.59,682.756 1479.15,682.756 1479.71,682.756 1480.27,682.756 1480.83,682.756 1481.39,682.756 1481.95,682.756 1482.51,682.756 1483.07,682.756 1483.62,682.756 1484.18,682.756 1484.74,682.756 1485.3,682.756 1485.86,682.756 1486.42,682.756 1486.98,682.756 1487.54,682.756 1488.1,682.756 1488.66,682.756 1489.22,682.756 1489.78,682.756 1490.34,682.756 1490.89,682.756 1491.45,682.756 1492.01,682.756 1492.57,682.756 1493.13,682.756 1493.69,682.756 1494.25,682.756 1494.81,682.756 1495.37,682.756 1495.93,682.756 1496.49,682.756 1497.05,682.756 1497.61,682.756 1498.16,682.756 1498.72,682.756 1499.28,682.756 1499.84,682.756 1500.4,682.756 1500.96,682.756 1501.52,682.756 1502.08,682.756 1502.64,682.756 1503.2,682.756 1503.76,682.756 1504.32,682.756 1504.88,682.756 1505.44,682.756 1505.99,682.756 1506.55,682.756 1507.11,682.756 1507.67,682.756 1508.23,682.756 1508.79,682.756 1509.35,682.756 1509.91,682.756 1510.47,682.756 1511.03,682.756 1511.59,682.756 1512.15,682.756 1512.71,682.756 1513.26,682.756 1513.82,682.756 1514.38,682.756 1514.94,682.756 1515.5,682.756 1516.06,682.756 1516.62,682.756 1517.18,682.756 1517.74,682.756 1518.3,682.756 1518.86,682.756 1519.42,682.756 1519.98,682.756 1520.53,682.756 1521.09,682.756 1521.65,682.756 1522.21,682.756 1522.77,682.756 1523.33,682.756 1523.89,682.756 1524.45,682.756 1525.01,682.756 1525.57,682.756 1526.13,682.756 1526.69,682.756 1527.25,682.756 1527.81,682.756 1528.36,682.756 1528.92,682.756 1529.48,682.756 1530.04,682.756 1530.6,682.756 1531.16,682.756 1531.72,682.756 1532.28,682.756 1532.84,682.756 1533.4,682.756 1533.96,682.756 1534.52,682.756 1535.08,682.756 1535.63,682.756 1536.19,682.756 1536.75,682.756 1537.31,682.756 1537.87,682.756 1538.43,682.756 1538.99,682.756 1539.55,682.756 1540.11,682.756 1540.67,682.756 1541.23,682.756 1541.79,682.756 1542.35,682.756 1542.9,682.756 1543.46,682.756 1544.02,682.756 1544.58,682.756 1545.14,682.756 1545.7,682.756 1546.26,682.756 1546.82,682.756 1547.38,682.756 1547.94,682.756 1548.5,682.756 1549.06,682.756 1549.62,682.756 1550.18,682.756 1550.73,682.756 1551.29,682.756 1551.85,682.756 1552.41,682.756 1552.97,682.756 1553.53,682.756 1554.09,682.756 1554.65,682.756 1555.21,682.756 1555.77,682.756 1556.33,682.756 1556.89,682.756 1557.45,682.756 1558,682.756 1558.56,682.756 1559.12,682.756 1559.68,682.756 1560.24,682.756 1560.8,682.756 1561.36,682.756 1561.92,682.756 1562.48,682.756 1563.04,682.756 1563.6,682.756 1564.16,682.756 1564.72,682.756 1565.28,682.756 1565.83,682.756 1566.39,682.756 1566.95,682.756 1567.51,682.756 1568.07,682.756 1568.63,682.756 1569.19,682.756 1569.75,682.756 1570.31,682.756 1570.87,682.756 1571.43,682.756 1571.99,682.756 1572.55,682.756 1573.1,682.756 1573.66,682.756 1574.22,682.756 1574.78,682.756 1575.34,682.756 1575.9,682.756 1576.46,682.756 1577.02,682.756 1577.58,682.756 1578.14,682.756 1578.7,682.756 1579.26,682.756 1579.82,682.756 1580.37,682.756 1580.93,682.756 1581.49,682.756 1582.05,682.756 1582.61,682.756 1583.17,682.756 1583.73,682.756 1584.29,682.756 1584.85,682.756 1585.41,682.756 1585.97,682.756 1586.53,682.756 1587.09,682.756 1587.65,682.756 1588.2,682.756 1588.76,682.756 1589.32,682.756 1589.88,682.756 1590.44,682.756 1591,682.756 1591.56,682.756 1592.12,682.756 1592.68,682.756 1593.24,682.756 1593.8,682.756 1594.36,682.756 1594.92,682.756 1595.47,682.756 1596.03,682.756 1596.59,682.756 1597.15,682.756 1597.71,682.756 1598.27,682.756 1598.83,682.756 1599.39,682.756 1599.95,682.756 1600.51,682.756 1601.07,682.756 1601.63,682.756 1602.19,682.756 1602.74,682.756 1603.3,682.756 1603.86,682.756 1604.42,682.756 1604.98,682.756 1605.54,682.756 1606.1,682.756 1606.66,682.756 1607.22,682.756 1607.78,682.756 1608.34,682.756 1608.9,682.756 1609.46,682.756 1610.02,682.756 1610.57,682.756 1611.13,682.756 1611.69,682.756 1612.25,682.756 1612.81,682.756 1613.37,682.756 1613.93,682.756 1614.49,682.756 1615.05,682.756 1615.61,682.756 1616.17,682.756 1616.73,682.756 1617.29,682.756 1617.84,682.756 1618.4,682.756 1618.96,682.756 1619.52,682.756 1620.08,682.756 1620.64,682.756 1621.2,682.756 1621.76,682.756 1622.32,682.756 1622.88,682.756 1623.44,682.756 1624,682.756 1624.56,682.756 1625.11,682.756 1625.67,682.756 1626.23,682.756 1626.79,682.756 1627.35,682.756 1627.91,682.756 1628.47,682.756 1629.03,682.756 1629.59,682.756 1630.15,682.756 1630.71,682.756 1631.27,682.756 1631.83,682.756 1632.39,682.756 1632.94,682.756 1633.5,682.756 1634.06,682.756 1634.62,682.756 1635.18,682.756 1635.74,682.756 1636.3,682.756 1636.86,682.756 1637.42,682.756 1637.98,682.756 1638.54,682.756 1639.1,682.756 1639.66,682.756 1640.21,682.756 1640.77,682.756 1641.33,682.756 1641.89,682.756 1642.45,682.756 1643.01,682.756 1643.57,682.756 1644.13,682.756 1644.69,682.756 1645.25,682.756 1645.81,682.756 1646.37,682.756 1646.93,682.756 1647.48,682.756 1648.04,682.756 1648.6,682.756 1649.16,682.756 1649.72,682.756 1650.28,682.756 1650.84,682.756 1651.4,682.756 1651.96,682.756 1652.52,682.756 1653.08,682.756 1653.64,682.756 1654.2,682.756 1654.76,682.756 1655.31,682.756 1655.87,682.756 1656.43,682.756 1656.99,682.756 1657.55,682.756 1658.11,682.756 1658.67,682.756 1659.23,682.756 1659.79,682.756 1660.35,682.756 1660.91,682.756 1661.47,682.756 1662.03,682.756 1662.58,682.756 1663.14,682.756 1663.7,682.756 1664.26,682.756 1664.82,682.756 1665.38,682.756 1665.94,682.756 1666.5,682.756 1667.06,682.756 1667.62,682.756 1668.18,682.756 1668.74,682.756 1669.3,682.756 1669.85,682.756 1670.41,682.756 1670.97,682.756 1671.53,682.756 1672.09,682.756 1672.65,682.756 1673.21,682.756 1673.77,682.756 1674.33,682.756 1674.89,682.756 1675.45,682.756 1676.01,682.756 1676.57,682.756 1677.13,682.756 1677.68,682.756 1678.24,682.756 1678.8,682.756 1679.36,682.756 1679.92,682.756 1680.48,682.756 1681.04,682.756 1681.6,682.756 1682.16,682.756 1682.72,682.756 1683.28,682.756 1683.84,682.756 1684.4,682.756 1684.95,682.756 1685.51,682.756 1686.07,682.756 1686.63,682.756 1687.19,682.756 1687.75,682.756 1688.31,682.756 1688.87,682.756 1689.43,682.756 1689.99,682.756 1690.55,682.756 1691.11,682.756 1691.67,682.756 1692.23,682.756 1692.78,682.756 1693.34,682.756 1693.9,682.756 1694.46,682.756 1695.02,682.756 1695.58,682.756 1696.14,682.756 1696.7,682.756 1697.26,682.756 1697.82,682.756 1698.38,682.756 1698.94,682.756 1699.5,682.756 1700.05,682.756 1700.61,682.756 1701.17,682.756 1701.73,682.756 1702.29,682.756 1702.85,682.756 1703.41,682.756 1703.97,682.756 1704.53,682.756 1705.09,682.756 1705.65,682.756 1706.21,682.756 1706.77,682.756 1707.32,682.756 1707.88,682.756 1708.44,682.756 1709,682.756 1709.56,682.756 1710.12,682.756 1710.68,682.756 1711.24,682.756 1711.8,682.756 1712.36,682.756 1712.92,682.756 1713.48,682.756 1714.04,682.756 1714.6,682.756 1715.15,682.756 1715.71,682.756 1716.27,682.756 1716.83,682.756 1717.39,682.756 1717.95,682.756 1718.51,682.756 1719.07,682.756 1719.63,682.756 1720.19,682.756 1720.75,682.756 1721.31,682.756 1721.87,682.756 1722.42,682.756 1722.98,682.756 1723.54,682.756 1724.1,682.756 1724.66,682.756 1725.22,682.756 1725.78,682.756 1726.34,682.756 1726.9,682.756 1727.46,682.756 1728.02,682.756 1728.58,682.756 1729.14,682.756 1729.69,682.756 1730.25,682.756 1730.81,682.756 1731.37,682.756 1731.93,682.756 1732.49,682.756 1733.05,682.756 1733.61,682.756 1734.17,682.756 1734.73,682.756 1735.29,682.756 1735.85,682.756 1736.41,682.756 1736.97,682.756 1737.52,682.756 1738.08,682.756 1738.64,682.756 1739.2,682.756 1739.76,682.756 1740.32,682.756 1740.88,682.756 1741.44,682.756 1742,682.756 1742.56,682.756 1743.12,682.756 1743.68,682.756 1744.24,682.756 1744.79,682.756 1745.35,682.756 1745.91,682.756 1746.47,682.756 1747.03,682.756 1747.59,682.756 1748.15,682.756 1748.71,682.756 1749.27,682.756 1749.83,682.756 1750.39,682.756 1750.95,682.756 1751.51,682.756 1752.06,682.756 1752.62,682.756 1753.18,682.756 1753.74,682.756 1754.3,682.756 1754.86,682.756 1755.42,682.756 1755.98,682.756 1756.54,682.756 1757.1,682.756 1757.66,682.756 1758.22,682.756 1758.78,682.756 1759.34,682.756 1759.89,682.756 1760.45,682.756 1761.01,682.756 1761.57,682.756 1762.13,682.756 1762.69,682.756 1763.25,682.756 1763.81,682.756 1764.37,682.756 1764.93,682.756 1765.49,682.756 1766.05,682.756 1766.61,682.756 1767.16,682.756 1767.72,682.756 1768.28,682.756 1768.84,682.756 1769.4,682.756 1769.96,682.756 1770.52,682.756 1771.08,682.756 1771.64,682.756 1772.2,682.756 1772.76,682.756 1773.32,682.756 1773.88,682.756 1774.43,682.756 1774.99,682.756 1775.55,682.756 1776.11,682.756 1776.67,682.756 1777.23,682.756 1777.79,682.756 1778.35,682.756 1778.91,682.756 1779.47,682.756 1780.03,682.756 1780.59,682.756 1781.15,682.756 1781.71,682.756 1782.26,682.756 1782.82,682.756 1783.38,682.756 1783.94,682.756 1784.5,682.756 1785.06,682.756 1785.62,682.756 1786.18,682.756 1786.74,682.756 1787.3,682.756 1787.86,682.756 1788.42,682.756 1788.98,682.756 1789.53,682.756 1790.09,682.756 1790.65,682.756 1791.21,682.756 1791.77,682.756 1792.33,682.756 1792.89,682.756 1793.45,682.756 1794.01,682.756 1794.57,682.756 1795.13,682.756 1795.69,682.756 1796.25,682.756 1796.8,682.756 1797.36,682.756 1797.92,682.756 1798.48,682.756 1799.04,682.756 1799.6,682.756 1800.16,682.756 1800.72,682.756 1801.28,682.756 1801.84,682.756 1802.4,682.756 1802.96,682.756 1803.52,682.756 1804.08,682.756 1804.63,682.756 1805.19,682.756 1805.75,682.756 1806.31,682.756 1806.87,682.756 1807.43,682.756 1807.99,682.756 1808.55,682.756 1809.11,682.756 1809.67,682.756 1810.23,682.756 1810.79,682.756 1811.35,682.756 1811.9,682.756 1812.46,682.756 1813.02,682.756 1813.58,682.756 1814.14,682.756 1814.7,682.756 1815.26,682.756 1815.82,682.756 1816.38,682.756 1816.94,682.756 1817.5,682.756 1818.06,682.756 1818.62,682.756 1819.18,682.756 1819.73,682.756 1820.29,682.756 1820.85,682.756 1821.41,682.756 1821.97,682.756 1822.53,682.756 1823.09,682.756 1823.65,682.756 1824.21,682.756 1824.77,682.756 1825.33,682.756 1825.89,682.756 1826.45,682.756 1827,682.756 1827.56,682.756 1828.12,682.756 1828.68,682.756 1829.24,682.756 1829.8,682.756 1830.36,682.756 1830.92,682.756 1831.48,682.756 1832.04,682.756 1832.6,682.756 1833.16,682.756 1833.72,682.756 1834.27,682.756 1834.83,682.756 1835.39,682.756 1835.95,682.756 1836.51,682.756 1837.07,682.756 1837.63,682.756 1838.19,682.756 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.024802159823314 ± 0.01597449125974497\nProjected Energy: -4.010911223476709 ± (0.006979311274610822, 0.006850792405058037)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\ntime_step = determine_constant_time_step(df) the time step\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\ntime_step = determine_constant_time_step(df) the time step\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.1496</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.5967e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.7752e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5038e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.967e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">6.873e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3956e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.3631242916133672\n -0.7590191922770817\n  0.13584182219621788\n  0.15789998694608798\n  0.8767114411781414\n  1.5305929970973313\n  1.5835732611867392\n  3.072870330325868\n  3.125672653951839\n  4.862107221562171\n  6.260694850380595\n  6.402671211183111\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087834\n 0.03307039977204201\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.DVecAsTable","page":"I/O","title":"Rimu.RimuIO.DVecAsTable","text":"struct DVecAsTable\n\nWrapper over the storage of a DVec that allows us to treat a DVec as a table from Tables.jl. Constructed with Tables.table(::DVec).\n\n\n\n\n\n","category":"type"},{"location":"rimuio.html#Rimu.RimuIO.PDVecAsTable","page":"I/O","title":"Rimu.RimuIO.PDVecAsTable","text":"struct PDVecAsTable\n\nWrapper over the storage of a PDVec that allows us to treat a PDVec as a table from Tables.jl. Constructed with Tables.table(::PDVec).\n\n\n\n\n\n","category":"type"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.load_state-Union{Tuple{D}, Tuple{Type{D}, Any}} where D","page":"I/O","title":"Rimu.RimuIO.load_state","text":"load_state(filename; kwargs...) -> PDVec, NamedTuple\nload_state(PDVec, filename; kwargs...) -> PDVec, NamedTuple\nload_state(DVec, filename; kwargs...) -> DVec, NamedTuple\n\nLoad the state saved in the Arrow file filename. kwargs are passed to the constructor of PDVec. Any metadata stored in the file is be parsed as a number (if possible) and returned alongside the vector in a NamedTuple.\n\nSee also save_state.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_state-Tuple","page":"I/O","title":"Rimu.RimuIO.save_state","text":"save_state(filename, vector; io, kwargs...)\n\nSave PDVec or DVec vector to an arrow file filename.\n\nio determines the output stream to write progress to. Defaults to stderr when MPI is enabled and devnull otherwise.\n\nAll other kwargs are saved as strings to the arrow file and will be parsed back when the state is loaded.\n\nSee also load_state.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates. Indexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nFields\n\nspectral_states: Tuple of SpectralStates\nmax_length::Ref{Int}: Maximum length of the simulation\nstep::Ref{Int}: Current step of the simulation\nsimulation_plan: Simulation plan\nreporting_strategy: Reporting strategy\npost_step_strategy: Post-step strategy\nreplica_strategy: Replica strategy\n\nSee also ReplicaStrategy, Rimu.SpectralState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy for ProjectorMonteCarloProblem. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\nSee also ProjectorMonteCarloProblem, ReportToFile.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy for ProjectorMonteCarloProblem that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df, save_df, ReportDFAndInfo, and ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data during a simulation of a ProjectorMonteCarloProblem.\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nExtended help\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nRimu.refine_reporting_strategy\nRimu.report!\nRimu.report_after_step!\nRimu.finalize_report!\nRimu.reporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with Rimu.advance!.\n\nFields\n\nhamiltonian: Hamiltonian\nalgorithm: Algorithm\nv: Vector\npv: Previous vector\nwm: Working memory\nshift_parameters: Shift parameters\nid::String: id is appended to column names\n\nSee also SpectralStrategy, ReplicaStrategy, Rimu.SpectralState, Rimu.ReplicaState, Rimu.replica_stats, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several Rimu.SingleStates representing the ground state and excited states of a single replica. Indexing the SpectralState state[i] returns the ith SingleState.\n\nFields\n\nsingle_states: Tuple of SingleStates\nspectral_strategy: Strategy for computing the spectral states\nid::String: Identifies the replica\n\nSee also SpectralStrategy, Rimu.ReplicaState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after Rimu.reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an r×s AbstractMatrix of configuration vectors from the state, or the result of solve(::ProjectorMonteCarloProblem). The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also ProjectorMonteCarloProblem, Rimu.PMCSimulation, Rimu.SingleState, Rimu.ReplicaState, Rimu.SpectralState.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
