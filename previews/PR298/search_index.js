var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21846496865209677 ± 0.0020201751871064605\n   G2(1) = 0.9156526127515234 ± 0.0009563854841126394\n   G2(2) = 0.9801189529505338 ± 0.0007976286486032519\n   G2(3) = 0.9899918999437883 ± 0.0012228622823785829\n   G2(4) = 0.9801189529505338 ± 0.0007976286486032519\n   G2(5) = 0.9156526127515234 ± 0.0009563854841126394\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.037132339276625 ± 0.1556759385599559\n   Replica 2: -3.994339397704067 ± 0.15596170135223086\n   Replica 3: -4.075279238300452 ± 0.11900859229433296\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip100\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip100)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip101\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip100)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip102\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.85 2211.02,1260.85 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.73 2211.02,1002.73 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,744.615 2211.02,744.615 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,486.496 2211.02,486.496 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,228.377 2211.02,228.377 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.85 423.181,1260.85 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.73 423.181,1002.73 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,744.615 423.181,744.615 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,486.496 423.181,486.496 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,228.377 423.181,228.377 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M356.339 1246.65 Q352.728 1246.65 350.899 1250.22 Q349.094 1253.76 349.094 1260.89 Q349.094 1267.99 350.899 1271.56 Q352.728 1275.1 356.339 1275.1 Q359.973 1275.1 361.779 1271.56 Q363.608 1267.99 363.608 1260.89 Q363.608 1253.76 361.779 1250.22 Q359.973 1246.65 356.339 1246.65 M356.339 1242.95 Q362.149 1242.95 365.205 1247.55 Q368.284 1252.14 368.284 1260.89 Q368.284 1269.61 365.205 1274.22 Q362.149 1278.8 356.339 1278.8 Q350.529 1278.8 347.45 1274.22 Q344.395 1269.61 344.395 1260.89 Q344.395 1252.14 347.45 1247.55 Q350.529 1242.95 356.339 1242.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M290.043 1016.08 L306.363 1016.08 L306.363 1020.01 L284.418 1020.01 L284.418 1016.08 Q287.08 1013.32 291.664 1008.69 Q296.27 1004.04 297.451 1002.7 Q299.696 1000.18 300.576 998.44 Q301.478 996.681 301.478 994.991 Q301.478 992.237 299.534 990.5 Q297.613 988.764 294.511 988.764 Q292.312 988.764 289.858 989.528 Q287.427 990.292 284.65 991.843 L284.65 987.121 Q287.474 985.987 289.927 985.408 Q292.381 984.829 294.418 984.829 Q299.789 984.829 302.983 987.514 Q306.177 990.2 306.177 994.69 Q306.177 996.82 305.367 998.741 Q304.58 1000.64 302.474 1003.23 Q301.895 1003.9 298.793 1007.12 Q295.691 1010.32 290.043 1016.08 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M316.224 985.454 L334.58 985.454 L334.58 989.389 L320.506 989.389 L320.506 997.862 Q321.524 997.514 322.543 997.352 Q323.562 997.167 324.58 997.167 Q330.367 997.167 333.747 1000.34 Q337.126 1003.51 337.126 1008.93 Q337.126 1014.5 333.654 1017.61 Q330.182 1020.69 323.862 1020.69 Q321.687 1020.69 319.418 1020.32 Q317.173 1019.94 314.765 1019.2 L314.765 1014.5 Q316.849 1015.64 319.071 1016.19 Q321.293 1016.75 323.77 1016.75 Q327.774 1016.75 330.112 1014.64 Q332.45 1012.54 332.45 1008.93 Q332.45 1005.32 330.112 1003.21 Q327.774 1001.1 323.77 1001.1 Q321.895 1001.1 320.02 1001.52 Q318.168 1001.94 316.224 1002.82 L316.224 985.454 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M356.339 988.533 Q352.728 988.533 350.899 992.098 Q349.094 995.639 349.094 1002.77 Q349.094 1009.88 350.899 1013.44 Q352.728 1016.98 356.339 1016.98 Q359.973 1016.98 361.779 1013.44 Q363.608 1009.88 363.608 1002.77 Q363.608 995.639 361.779 992.098 Q359.973 988.533 356.339 988.533 M356.339 984.829 Q362.149 984.829 365.205 989.436 Q368.284 994.019 368.284 1002.77 Q368.284 1011.5 365.205 1016.1 Q362.149 1020.69 356.339 1020.69 Q350.529 1020.69 347.45 1016.1 Q344.395 1011.5 344.395 1002.77 Q344.395 994.019 347.45 989.436 Q350.529 984.829 356.339 984.829 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M286.062 727.335 L304.418 727.335 L304.418 731.27 L290.344 731.27 L290.344 739.742 Q291.363 739.395 292.381 739.233 Q293.4 739.048 294.418 739.048 Q300.205 739.048 303.585 742.219 Q306.964 745.39 306.964 750.807 Q306.964 756.386 303.492 759.488 Q300.02 762.566 293.701 762.566 Q291.525 762.566 289.256 762.196 Q287.011 761.826 284.603 761.085 L284.603 756.386 Q286.687 757.52 288.909 758.076 Q291.131 758.631 293.608 758.631 Q297.613 758.631 299.951 756.525 Q302.288 754.418 302.288 750.807 Q302.288 747.196 299.951 745.09 Q297.613 742.983 293.608 742.983 Q291.733 742.983 289.858 743.4 Q288.006 743.816 286.062 744.696 L286.062 727.335 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M326.177 730.414 Q322.566 730.414 320.737 733.979 Q318.932 737.52 318.932 744.65 Q318.932 751.756 320.737 755.321 Q322.566 758.863 326.177 758.863 Q329.811 758.863 331.617 755.321 Q333.446 751.756 333.446 744.65 Q333.446 737.52 331.617 733.979 Q329.811 730.414 326.177 730.414 M326.177 726.71 Q331.987 726.71 335.043 731.316 Q338.122 735.9 338.122 744.65 Q338.122 753.377 335.043 757.983 Q331.987 762.566 326.177 762.566 Q320.367 762.566 317.288 757.983 Q314.233 753.377 314.233 744.65 Q314.233 735.9 317.288 731.316 Q320.367 726.71 326.177 726.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M356.339 730.414 Q352.728 730.414 350.899 733.979 Q349.094 737.52 349.094 744.65 Q349.094 751.756 350.899 755.321 Q352.728 758.863 356.339 758.863 Q359.973 758.863 361.779 755.321 Q363.608 751.756 363.608 744.65 Q363.608 737.52 361.779 733.979 Q359.973 730.414 356.339 730.414 M356.339 726.71 Q362.149 726.71 365.205 731.316 Q368.284 735.9 368.284 744.65 Q368.284 753.377 365.205 757.983 Q362.149 762.566 356.339 762.566 Q350.529 762.566 347.45 757.983 Q344.395 753.377 344.395 744.65 Q344.395 735.9 347.45 731.316 Q350.529 726.71 356.339 726.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M284.835 469.216 L307.057 469.216 L307.057 471.207 L294.511 503.776 L289.627 503.776 L301.432 473.151 L284.835 473.151 L284.835 469.216 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M316.224 469.216 L334.58 469.216 L334.58 473.151 L320.506 473.151 L320.506 481.623 Q321.524 481.276 322.543 481.114 Q323.562 480.929 324.58 480.929 Q330.367 480.929 333.747 484.1 Q337.126 487.271 337.126 492.688 Q337.126 498.267 333.654 501.368 Q330.182 504.447 323.862 504.447 Q321.687 504.447 319.418 504.077 Q317.173 503.706 314.765 502.966 L314.765 498.267 Q316.849 499.401 319.071 499.956 Q321.293 500.512 323.77 500.512 Q327.774 500.512 330.112 498.406 Q332.45 496.299 332.45 492.688 Q332.45 489.077 330.112 486.97 Q327.774 484.864 323.77 484.864 Q321.895 484.864 320.02 485.281 Q318.168 485.697 316.224 486.577 L316.224 469.216 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M356.339 472.295 Q352.728 472.295 350.899 475.859 Q349.094 479.401 349.094 486.531 Q349.094 493.637 350.899 497.202 Q352.728 500.743 356.339 500.743 Q359.973 500.743 361.779 497.202 Q363.608 493.637 363.608 486.531 Q363.608 479.401 361.779 475.859 Q359.973 472.295 356.339 472.295 M356.339 468.591 Q362.149 468.591 365.205 473.197 Q368.284 477.781 368.284 486.531 Q368.284 495.257 365.205 499.864 Q362.149 504.447 356.339 504.447 Q350.529 504.447 347.45 499.864 Q344.395 495.257 344.395 486.531 Q344.395 477.781 347.45 473.197 Q350.529 468.591 356.339 468.591 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M256.664 241.722 L264.303 241.722 L264.303 215.356 L255.992 217.023 L255.992 212.763 L264.256 211.097 L268.932 211.097 L268.932 241.722 L276.571 241.722 L276.571 245.657 L256.664 245.657 L256.664 241.722 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M296.015 214.175 Q292.404 214.175 290.576 217.74 Q288.77 221.282 288.77 228.411 Q288.77 235.518 290.576 239.083 Q292.404 242.624 296.015 242.624 Q299.65 242.624 301.455 239.083 Q303.284 235.518 303.284 228.411 Q303.284 221.282 301.455 217.74 Q299.65 214.175 296.015 214.175 M296.015 210.472 Q301.826 210.472 304.881 215.078 Q307.96 219.662 307.96 228.411 Q307.96 237.138 304.881 241.745 Q301.826 246.328 296.015 246.328 Q290.205 246.328 287.127 241.745 Q284.071 237.138 284.071 228.411 Q284.071 219.662 287.127 215.078 Q290.205 210.472 296.015 210.472 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M326.177 214.175 Q322.566 214.175 320.737 217.74 Q318.932 221.282 318.932 228.411 Q318.932 235.518 320.737 239.083 Q322.566 242.624 326.177 242.624 Q329.811 242.624 331.617 239.083 Q333.446 235.518 333.446 228.411 Q333.446 221.282 331.617 217.74 Q329.811 214.175 326.177 214.175 M326.177 210.472 Q331.987 210.472 335.043 215.078 Q338.122 219.662 338.122 228.411 Q338.122 237.138 335.043 241.745 Q331.987 246.328 326.177 246.328 Q320.367 246.328 317.288 241.745 Q314.233 237.138 314.233 228.411 Q314.233 219.662 317.288 215.078 Q320.367 210.472 326.177 210.472 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M356.339 214.175 Q352.728 214.175 350.899 217.74 Q349.094 221.282 349.094 228.411 Q349.094 235.518 350.899 239.083 Q352.728 242.624 356.339 242.624 Q359.973 242.624 361.779 239.083 Q363.608 235.518 363.608 228.411 Q363.608 221.282 361.779 217.74 Q359.973 214.175 356.339 214.175 M356.339 210.472 Q362.149 210.472 365.205 215.078 Q368.284 219.662 368.284 228.411 Q368.284 237.138 365.205 241.745 Q362.149 246.328 356.339 246.328 Q350.529 246.328 347.45 241.745 Q344.395 237.138 344.395 228.411 Q344.395 219.662 347.45 215.078 Q350.529 210.472 356.339 210.472 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip102)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,228.377 4017.76,228.377 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.42 461.101,1246.74 461.669,1245.98 462.238,1245.14 462.806,1244.21 463.375,1243.2 463.943,1242.1 464.511,1239.86 465.08,1237.52 465.648,1236.09 466.216,1234.55 466.785,1232.89 467.353,1230.05 467.921,1228.11 468.49,1225 469.058,1222.75 469.626,1218.29 470.195,1214.64 470.763,1210.86 471.331,1206.95 471.9,1203.88 472.468,1200.6 473.036,1196.13 473.605,1192.43 474.173,1186.47 474.741,1182.38 475.31,1178.09 475.878,1173.57 476.446,1168.82 477.015,1163.92 477.583,1157.74 478.152,1151.42 478.72,1145.8 479.288,1140.05 479.857,1133.97 480.425,1126.71 480.993,1120.19 481.562,1113.4 482.13,1105.46 482.698,1098.38 483.267,1090.01 483.835,1082.47 484.403,1074.83 484.972,1066.89 485.54,1057.69 486.108,1049.22 486.677,1039.55 487.245,1030.78 487.813,1019.82 488.382,1009.75 488.95,997.571 489.518,988.58 490.087,976.212 490.655,967.02 491.224,956.667 491.792,947.213 492.36,936.607 492.929,923.88 493.497,912.971 494.065,903.071 494.634,892.13 495.202,881.105 495.77,869.151 496.339,858.142 496.907,846.104 497.475,835.145 498.044,825.279 498.612,814.421 499.18,802.576 499.749,790.846 500.317,778.153 500.885,766.691 501.454,757.358 502.022,745.997 502.59,734.715 503.159,724.584 503.727,713.471 504.295,703.635 504.864,693.872 505.432,685.222 506.001,674.622 506.569,662.042 507.137,649.838 507.706,641.07 508.274,632.406 508.842,623.625 509.411,614.99 509.979,603.486 510.547,594.285 511.116,585.399 511.684,577.508 512.252,567.725 512.821,560.151 513.389,554.851 513.957,546.367 514.526,540.409 515.094,534.157 515.662,527.166 516.231,519.079 516.799,512.271 517.367,503.67 517.936,497.231 518.504,492.038 519.072,485.711 519.641,479.616 520.209,473.658 520.778,468.902 521.346,461.123 521.914,456.646 522.483,448.022 523.051,442.935 523.619,439.01 524.188,433.873 524.756,430.126 525.324,426.214 525.893,422.496 526.461,416.518 527.029,410.725 527.598,404.186 528.166,401.097 528.734,395.991 529.303,392.983 529.871,389.883 530.439,388.052 531.008,385.023 531.576,379.987 532.144,377.106 532.713,374.432 533.281,370.565 533.85,365.781 534.418,361.098 534.986,357.796 535.555,355.536 536.123,353.416 536.691,348.234 537.26,346.289 537.828,342.335 538.396,339.421 538.965,336.818 539.533,335.999 540.101,334.08 540.67,332.112 541.238,328.463 541.806,322.947 542.375,319.502 542.943,315.048 543.511,310.871 544.08,310.066 544.648,308.214 545.216,305.446 545.785,303.821 546.353,302.126 546.921,300.624 547.49,297.915 548.058,296.459 548.627,295.116 549.195,293.659 549.763,294.243 550.332,289.386 550.9,290.148 551.468,289.729 552.037,289.218 552.605,286.93 553.173,284.668 553.742,283.391 554.31,283.25 554.878,280.959 555.447,280.874 556.015,281.738 556.583,282.339 557.152,281.026 557.72,280.644 558.288,280.202 558.857,276.602 559.425,277.345 559.993,277.854 560.562,276.353 561.13,277.072 561.698,274.612 562.267,273.129 562.835,271.961 563.404,272.665 563.972,272.306 564.54,273.054 565.109,272.529 565.677,272.918 566.245,272.295 566.814,268.614 567.382,267.126 567.95,265.723 568.519,264.538 569.087,265.466 569.655,266.102 570.224,266.734 570.792,265.173 571.36,263.619 571.929,264.187 572.497,263.675 573.065,264.443 573.634,263.844 574.202,262.212 574.77,261.811 575.339,259.312 575.907,258.909 576.476,259.55 577.044,258.954 577.612,257.366 578.181,256.089 578.749,256.757 579.317,258.512 579.886,256.981 580.454,255.889 581.022,254.534 581.591,254.329 582.159,254.218 582.727,253.859 583.296,251.623 583.864,246.481 584.432,245.572 585.001,245.725 585.569,247.127 586.137,245.351 586.706,247.504 587.274,248.341 587.842,247.131 588.411,245.086 588.979,245.179 589.547,244.259 590.116,243.552 590.684,241.841 591.253,241.938 591.821,238.212 592.389,237.763 592.958,238.452 593.526,239.88 594.094,240.473 594.663,238.863 595.231,240.287 595.799,240.741 596.368,241.985 596.936,240.305 597.504,240.597 598.073,241.889 598.641,244.282 599.209,244.487 599.778,244.611 600.346,243.512 600.914,242.391 601.483,241.551 602.051,241.557 602.619,242.882 603.188,243.055 603.756,241.101 604.325,241.374 604.893,242.752 605.461,240.687 606.03,239.889 606.598,238.13 607.166,238.55 607.735,237.867 608.303,236.242 608.871,236.67 609.44,237.182 610.008,236.779 610.576,238.348 611.145,240.658 611.713,238.556 612.281,239.825 612.85,239.971 613.418,240.15 613.986,241.522 614.555,242.638 615.123,242.53 615.691,244.677 616.26,242.39 616.828,241.502 617.396,240.521 617.965,240.573 618.533,239.753 619.102,240.87 619.67,240.879 620.238,238.748 620.807,237.852 621.375,238.278 621.943,239.083 622.512,240.141 623.08,238.995 623.648,239.185 624.217,238.088 624.785,239.084 625.353,239.235 625.922,238.304 626.49,238.334 627.058,239.564 627.627,240.469 628.195,241.417 628.763,241.015 629.332,239.633 629.9,237.682 630.468,238.671 631.037,237.686 631.605,237.609 632.173,233.679 632.742,233.127 633.31,232.397 633.879,232.735 634.447,233.164 635.015,233.493 635.584,233.906 636.152,234.012 636.72,232.256 637.289,234.603 637.857,236.111 638.425,231.315 638.994,232.867 639.562,233.139 640.13,234.488 640.699,236.127 641.267,235.158 641.835,235.218 642.404,235.402 642.972,234.569 643.54,236.66 644.109,232.779 644.677,234.386 645.245,234.774 645.814,236.184 646.382,235.309 646.951,234.392 647.519,236.911 648.087,235.692 648.656,233.934 649.224,233.153 649.792,234.37 650.361,233.522 650.929,233.817 651.497,233.889 652.066,234.932 652.634,233.943 653.202,233.012 653.771,233.263 654.339,233.342 654.907,234.76 655.476,233.938 656.044,234.037 656.612,235.175 657.181,234.231 657.749,232.309 658.317,232.657 658.886,231.952 659.454,230.824 660.022,230.173 660.591,230.625 661.159,230.774 661.728,231.162 662.296,231.516 662.864,232.956 663.433,233.094 664.001,231.442 664.569,232.868 665.138,234.002 665.706,235.461 666.274,235.576 666.843,235.722 667.411,235.796 667.979,235.815 668.548,233.786 669.116,231.972 669.684,235.475 670.253,236.543 670.821,236.413 671.389,236.408 671.958,235.358 672.526,234.284 673.094,234.195 673.663,236.391 674.231,233.294 674.799,235.365 675.368,235.506 675.936,235.704 676.505,238.905 677.073,237.521 677.641,239.589 678.21,237.225 678.778,235.927 679.346,235.696 679.915,233.509 680.483,232.546 681.051,230.649 681.62,230.893 682.188,229.935 682.756,229.294 683.325,229.589 683.893,227.66 684.461,226.946 685.03,228.663 685.598,231.114 686.166,232.41 686.735,230.392 687.303,230.596 687.871,230.794 688.44,233.139 689.008,233.537 689.577,234.547 690.145,236.573 690.713,235.552 691.282,237.242 691.85,238.843 692.418,239.376 692.987,237.963 693.555,234.353 694.123,235.219 694.692,231.894 695.26,232.277 695.828,229.31 696.397,231.859 696.965,229.863 697.533,228.013 698.102,230.634 698.67,230.893 699.238,232.058 699.807,229.972 700.375,230.177 700.943,229.523 701.512,229.767 702.08,229.943 702.648,227.863 703.217,228.371 703.785,224.535 704.354,226.205 704.922,225.67 705.49,225.005 706.059,225.632 706.627,223.083 707.195,225.572 707.764,227.273 708.332,228.715 708.9,227.789 709.469,229.188 710.037,229.613 710.605,231.047 711.174,232.109 711.742,233.186 712.31,234.073 712.879,234.934 713.447,233.939 714.015,233.859 714.584,232.895 715.152,231.906 715.72,233.981 716.289,235.018 716.857,233.966 717.425,232.871 717.994,232.891 718.562,232.875 719.131,231.889 719.699,229.905 720.267,230.31 720.836,230.336 721.404,232.591 721.972,232.759 722.541,232.753 723.109,233.76 723.677,232.742 724.246,233.691 724.814,232.718 725.382,230.858 725.951,233.832 726.519,234.975 727.087,234.685 727.656,235.525 728.224,237.317 728.792,237.9 729.361,235.28 729.929,234.884 730.497,234.662 731.066,232.149 731.634,226.854 732.203,229.477 732.771,230.733 733.339,230.465 733.908,229.601 734.476,229.953 735.044,230.095 735.613,229.121 736.181,230.309 736.749,231.507 737.318,229.487 737.886,228.539 738.454,227.771 739.023,228.191 739.591,229.356 740.159,230.47 740.728,228.481 741.296,228.806 741.864,228.046 742.433,230.293 743.001,229.293 743.569,230.52 744.138,231.718 744.706,231.569 745.274,230.477 745.843,230.548 746.411,229.621 746.98,231.715 747.548,230.685 748.116,229.764 748.685,229.914 749.253,231.28 749.821,229.055 750.39,229.042 750.958,227.177 751.526,228.371 752.095,226.652 752.663,230.051 753.231,231.36 753.8,231.377 754.368,232.533 754.936,233.805 755.505,233.722 756.073,233.637 756.641,233.526 757.21,234.388 757.778,234.089 758.346,233.817 758.915,233.612 759.483,233.382 760.052,231.106 760.62,232.314 761.188,230.122 761.757,229.04 762.325,230.148 762.893,229.054 763.462,230.144 764.03,232.327 764.598,229.965 765.167,228.051 765.735,230.433 766.303,232.463 766.872,231.182 767.44,230.193 768.008,232.397 768.577,233.326 769.145,235.117 769.713,234.575 770.282,235.348 770.85,235.102 771.418,234.681 771.987,234.417 772.555,232.854 773.123,232.585 773.692,231.409 774.26,230.181 774.829,229.019 775.397,229.091 775.965,230.141 776.534,232.227 777.102,228.01 777.67,228.291 778.239,229.731 778.807,227.853 779.375,228.046 779.944,228.047 780.512,229.188 781.08,228.062 781.649,228.299 782.217,228.643 782.785,230.672 783.354,229.774 783.922,229.716 784.49,230.74 785.059,230.592 785.627,232.541 786.195,234.542 786.764,235.234 787.332,234.623 787.9,234.189 788.469,234.906 789.037,234.541 789.606,231.9 790.174,231.774 790.742,232.504 791.311,232.232 791.879,232.123 792.447,231.889 793.016,232.666 793.584,233.287 794.152,233.956 794.721,230.341 795.289,230.089 795.857,232.392 796.426,231.901 796.994,230.572 797.562,232.332 798.131,231.042 798.699,228.824 799.267,231.004 799.836,229.873 800.404,228.634 800.972,228.666 801.541,227.57 802.109,226.566 802.678,224.651 803.246,223.862 803.814,224.211 804.383,224.604 804.951,220.775 805.519,221.328 806.088,221.939 806.656,220.59 807.224,221.122 807.793,224.595 808.361,224.931 808.929,226.256 809.498,224.441 810.066,223.744 810.634,224.074 811.203,223.494 811.771,226.046 812.339,225.103 812.908,227.447 813.476,227.467 814.044,228.575 814.613,229.59 815.181,227.289 815.749,229.386 816.318,228.386 816.886,229.581 817.455,230.505 818.023,231.358 818.591,232.206 819.16,230.046 819.728,229.099 820.296,230.177 820.865,227.179 821.433,228.378 822.001,229.378 822.57,229.358 823.138,231.451 823.706,230.383 824.275,231.293 824.843,232.158 825.411,229.889 825.98,228.971 826.548,228.869 827.116,230.799 827.685,233.788 828.253,233.303 828.821,231.779 829.39,230.607 829.958,229.43 830.526,229.472 831.095,229.093 831.663,226.04 832.232,225.336 832.8,223.399 833.368,222.927 833.937,223.346 834.505,224.68 835.073,223.905 835.642,224.071 836.21,223.314 836.778,223.695 837.347,223.053 837.915,222.522 838.483,222.182 839.052,221.893 839.62,222.442 840.188,224.939 840.757,224.145 841.325,226.831 841.893,227.115 842.462,226.397 843.03,224.687 843.598,223.015 844.167,224.663 844.735,223.747 845.304,224.294 845.872,226.967 846.44,228.117 847.009,226.373 847.577,224.474 848.145,224.064 848.714,225.777 849.282,225.193 849.85,223.584 850.419,226.373 850.987,224.599 851.555,227.882 852.124,225.1 852.692,226.615 853.26,226.082 853.829,228.4 854.397,227.565 854.965,228.989 855.534,227.89 856.102,229.299 856.67,231.566 857.239,232.831 857.807,232.75 858.375,232.658 858.944,234.606 859.512,235.568 860.081,236.301 860.649,235.11 861.217,234.826 861.786,234.689 862.354,236.553 862.922,238.169 863.491,238.698 864.059,239.377 864.627,240.084 865.196,239.493 865.764,238.691 866.332,234.818 866.901,233.231 867.469,232.867 868.037,232.426 868.606,230.185 869.174,229.022 869.742,229.955 870.311,230.046 870.879,231.006 871.447,232.984 872.016,232.656 872.584,231.396 873.152,232.48 873.721,232.491 874.289,232.373 874.858,232.983 875.426,232.766 875.994,232.455 876.563,231.968 877.131,231.76 877.699,231.534 878.268,231.344 878.836,231.237 879.404,229.122 879.973,227.901 880.541,225.955 881.109,225.127 881.678,227.674 882.246,226.654 882.814,225.76 883.383,225.952 883.951,225.005 884.519,225.356 885.088,225.396 885.656,226.815 886.224,228.126 886.793,228.272 887.361,228.367 887.93,228.228 888.498,228.416 889.066,228.437 889.635,229.81 890.203,230.841 890.771,232.709 891.34,234.685 891.908,235.165 892.476,235.809 893.045,236.211 893.613,233.479 894.181,231.102 894.75,229.998 895.318,229.687 895.886,229.629 896.455,227.446 897.023,226.521 897.591,225.532 898.16,226.77 898.728,227.854 899.296,228.712 899.865,224.87 900.433,227.16 901.001,224.009 901.57,224.362 902.138,224.045 902.707,224.426 903.275,224.655 903.843,228.195 904.412,228.508 904.98,227.395 905.548,226.599 906.117,227.771 906.685,228.077 907.253,226.164 907.822,226.318 908.39,225.519 908.958,225.861 909.527,230.232 910.095,231.152 910.663,232.182 911.232,231.854 911.8,231.496 912.368,232.242 912.937,231.915 913.505,232.819 914.073,233.667 914.642,235.276 915.21,234.964 915.779,234.488 916.347,233.238 916.915,232.692 917.484,229.278 918.052,230.37 918.62,232.356 919.189,228.844 919.757,231.807 920.325,229.498 920.894,229.634 921.462,229.537 922.03,227.412 922.599,228.415 923.167,228.356 923.735,227.362 924.304,227.455 924.872,226.617 925.44,227.745 926.009,227.566 926.577,230.781 927.145,230.814 927.714,230.752 928.282,229.521 928.85,231.517 929.419,231.266 929.987,232.154 930.556,229.806 931.124,229.624 931.692,228.21 932.261,228.317 932.829,226.285 933.397,225.288 933.966,227.431 934.534,226.27 935.102,223.501 935.671,223.921 936.239,226.257 936.807,228.542 937.376,228.792 937.944,228.925 938.512,228.091 939.081,229.164 939.649,230.129 940.217,230.086 940.786,228.877 941.354,226.665 941.922,226.754 942.491,228.125 943.059,227.148 943.627,227.227 944.196,228.451 944.764,227.819 945.333,223.637 945.901,224.831 946.469,223.974 947.038,223.351 947.606,223.805 948.174,225.222 948.743,223.437 949.311,225.066 949.879,224.275 950.448,223.683 951.016,222.045 951.584,220.561 952.153,221.029 952.721,223.794 953.289,224.249 953.858,226.701 954.426,226.854 954.994,227.218 955.563,229.53 956.131,231.786 956.699,235.64 957.268,236.143 957.836,234.771 958.405,234.44 958.973,233.161 959.541,230.773 960.11,231.723 960.678,230.665 961.246,229.359 961.815,230.357 962.383,231.33 962.951,230.398 963.52,232.18 964.088,231.971 964.656,231.881 965.225,230.538 965.793,230.354 966.361,231.257 966.93,232.09 967.498,230.876 968.066,229.813 968.635,230.958 969.203,232.213 969.771,227.743 970.34,227.78 970.908,228.875 971.476,229.811 972.045,230.566 972.613,233.335 973.182,232.999 973.75,230.658 974.318,231.49 974.887,231.27 975.455,232.178 976.023,231.816 976.592,233.45 977.16,234.902 977.728,234.341 978.297,233.753 978.865,234.247 979.433,232.762 980.002,232.651 980.57,233.342 981.138,233.977 981.707,233.601 982.275,234.365 982.843,233.889 983.412,234.241 983.98,232.612 984.548,230.259 985.117,230.999 985.685,229.716 986.253,229.38 986.822,229.268 987.39,229.09 987.959,225.946 988.527,224.92 989.095,226.084 989.664,226.14 990.232,225.004 990.8,224.972 991.369,226.352 991.937,227.322 992.505,225.144 993.074,226.298 993.642,225.265 994.21,225.46 994.779,226.504 995.347,226.617 995.915,226.713 996.484,225.878 997.052,225.036 997.62,225.271 998.189,224.391 998.757,225.838 999.325,227.992 999.894,228.132 1000.46,226.781 1001.03,228.177 1001.6,228.353 1002.17,228.28 1002.74,228.194 1003.3,228.135 1003.87,226.757 1004.44,226.711 1005.01,226.712 1005.58,226.856 1006.15,225.799 1006.71,226.889 1007.28,225.011 1007.85,224.175 1008.42,224.445 1008.99,222.755 1009.56,223.597 1010.12,221.992 1010.69,221.342 1011.26,223.982 1011.83,225.275 1012.4,225.42 1012.97,224.514 1013.53,223.736 1014.1,223.03 1014.67,226.441 1015.24,228.993 1015.81,229.967 1016.38,229.981 1016.94,229.936 1017.51,227.895 1018.08,227.119 1018.65,228.608 1019.22,229.737 1019.79,230.634 1020.35,231.621 1020.92,232.511 1021.49,233.399 1022.06,233.081 1022.63,232.85 1023.2,232.596 1023.76,232.163 1024.33,233.789 1024.9,233.571 1025.47,233.431 1026.04,233.126 1026.61,231.976 1027.17,228.503 1027.74,230.603 1028.31,230.386 1028.88,231.169 1029.45,231.116 1030.02,232.905 1030.58,231.562 1031.15,233.149 1031.72,230.636 1032.29,231.518 1032.86,230.171 1033.43,227.933 1033.99,225.906 1034.56,225.864 1035.13,227.1 1035.7,227.323 1036.27,225.451 1036.84,227.66 1037.4,228.853 1037.97,230.851 1038.54,230.656 1039.11,231.372 1039.68,231.88 1040.25,228.824 1040.81,227.898 1041.38,227.667 1041.95,224.584 1042.52,226.534 1043.09,227.785 1043.66,226.968 1044.22,226.897 1044.79,224.849 1045.36,225.101 1045.93,226.336 1046.5,228.574 1047.07,231.664 1047.63,231.395 1048.2,230.339 1048.77,233.299 1049.34,231.884 1049.91,231.485 1050.48,233.242 1051.05,232.705 1051.61,232.246 1052.18,230.992 1052.75,228.717 1053.32,231.56 1053.89,229.268 1054.46,227.007 1055.02,224.764 1055.59,223.688 1056.16,226.094 1056.73,225.25 1057.3,227.391 1057.87,226.482 1058.43,225.413 1059,225.65 1059.57,224.804 1060.14,224.938 1060.71,225.223 1061.28,228.72 1061.84,229.73 1062.41,231.647 1062.98,231.51 1063.55,231.143 1064.12,230.878 1064.69,233.665 1065.25,234.178 1065.82,232.771 1066.39,232.298 1066.96,230.912 1067.53,229.689 1068.1,228.408 1068.66,227.39 1069.23,225.435 1069.8,225.463 1070.37,227.789 1070.94,225.852 1071.51,226.098 1072.07,228.472 1072.64,228.565 1073.21,228.814 1073.78,228.684 1074.35,224.593 1074.92,222.81 1075.48,223.227 1076.05,224.486 1076.62,223.768 1077.19,225.201 1077.76,226.315 1078.33,227.479 1078.89,228.464 1079.46,227.652 1080.03,227.689 1080.6,229.755 1081.17,228.574 1081.74,226.489 1082.3,226.63 1082.87,227.736 1083.44,226.821 1084.01,225.743 1084.58,225.872 1085.15,225.95 1085.71,224.007 1086.28,225.359 1086.85,226.539 1087.42,227.784 1087.99,228.852 1088.56,228.817 1089.12,227.595 1089.69,227.52 1090.26,227.462 1090.83,225.535 1091.4,225.662 1091.97,223.701 1092.53,224.886 1093.1,224.976 1093.67,227.148 1094.24,225.295 1094.81,225.5 1095.38,225.699 1095.94,225.939 1096.51,226.09 1097.08,225.31 1097.65,223.44 1098.22,224.027 1098.79,224.32 1099.35,224.52 1099.92,226.032 1100.49,227.374 1101.06,227.44 1101.63,226.581 1102.2,226.8 1102.76,224.998 1103.33,225.377 1103.9,224.428 1104.47,221.761 1105.04,225.347 1105.61,227.798 1106.17,227.821 1106.74,229.965 1107.31,230.025 1107.88,228.026 1108.45,228.204 1109.02,228.245 1109.58,227.4 1110.15,227.751 1110.72,226.994 1111.29,227.158 1111.86,226.253 1112.43,226.559 1112.99,225.737 1113.56,223.967 1114.13,224.177 1114.7,225.579 1115.27,226.769 1115.84,228.229 1116.4,230.306 1116.97,231.333 1117.54,232.34 1118.11,233.286 1118.68,233.004 1119.25,232.915 1119.81,230.929 1120.38,231.1 1120.95,228.972 1121.52,229.07 1122.09,227.079 1122.66,227.464 1123.23,227.484 1123.79,228.789 1124.36,231.031 1124.93,233.053 1125.5,232.811 1126.07,232.719 1126.64,233.641 1127.2,233.323 1127.77,232.806 1128.34,232.757 1128.91,233.635 1129.48,234.415 1130.05,232.894 1130.61,230.729 1131.18,229.641 1131.75,228.613 1132.32,228.656 1132.89,227.774 1133.46,229.889 1134.02,229.616 1134.59,229.586 1135.16,229.677 1135.73,228.343 1136.3,228.635 1136.87,228.806 1137.43,229.891 1138,229.922 1138.57,230.016 1139.14,229.046 1139.71,229.772 1140.28,229.738 1140.84,231.723 1141.41,231.589 1141.98,231.528 1142.55,233.459 1143.12,232.083 1143.69,229.855 1144.25,228.674 1144.82,229.578 1145.39,227.549 1145.96,225.693 1146.53,227.723 1147.1,227.842 1147.66,225.753 1148.23,229.201 1148.8,229.33 1149.37,229.081 1149.94,229.05 1150.51,229.291 1151.07,227.049 1151.64,227.19 1152.21,226.144 1152.78,226.291 1153.35,226.434 1153.92,228.644 1154.48,227.448 1155.05,228.806 1155.62,228.818 1156.19,229.041 1156.76,227.031 1157.33,226.028 1157.89,227.196 1158.46,228.445 1159.03,228.432 1159.6,227.436 1160.17,229.701 1160.74,230.668 1161.3,231.533 1161.87,231.362 1162.44,230.363 1163.01,228.177 1163.58,227.123 1164.15,226.42 1164.71,227.562 1165.28,227.505 1165.85,229.694 1166.42,227.507 1166.99,226.783 1167.56,225.826 1168.12,222.793 1168.69,222.177 1169.26,221.764 1169.83,221.317 1170.4,219.895 1170.97,221.438 1171.53,223.074 1172.1,222.399 1172.67,223.064 1173.24,224.768 1173.81,226.183 1174.38,227.529 1174.94,227.561 1175.51,228.967 1176.08,231.279 1176.65,231.186 1177.22,231.195 1177.79,231.237 1178.35,233.166 1178.92,232.053 1179.49,232.882 1180.06,232.638 1180.63,232.405 1181.2,233.081 1181.76,232.844 1182.33,230.556 1182.9,230.446 1183.47,230.235 1184.04,230.113 1184.61,231.136 1185.17,230.95 1185.74,230.719 1186.31,230.569 1186.88,231.193 1187.45,230.968 1188.02,230.93 1188.58,233.781 1189.15,233.344 1189.72,236.051 1190.29,235.633 1190.86,234.23 1191.43,233.854 1192,233.633 1192.56,233.197 1193.13,232.735 1193.7,231.567 1194.27,231.379 1194.84,228.932 1195.41,230.148 1195.97,229.004 1196.54,226.802 1197.11,226.978 1197.68,225.946 1198.25,227.035 1198.82,229.221 1199.38,228.939 1199.95,227.807 1200.52,224.569 1201.09,224.775 1201.66,223.06 1202.23,223.156 1202.79,222.591 1203.36,222.931 1203.93,222.334 1204.5,223.958 1205.07,225.168 1205.64,225.026 1206.2,225.138 1206.77,223.371 1207.34,221.797 1207.91,223.363 1208.48,221.894 1209.05,223.663 1209.61,224.288 1210.18,223.855 1210.75,225.184 1211.32,223.278 1211.89,222.385 1212.46,222.851 1213.02,223.026 1213.59,223.565 1214.16,226.217 1214.73,229.82 1215.3,229.797 1215.87,228.502 1216.43,229.616 1217,229.634 1217.57,227.646 1218.14,228.112 1218.71,227.472 1219.28,227.747 1219.84,225.993 1220.41,227.288 1220.98,224.399 1221.55,227.915 1222.12,226.843 1222.69,228.953 1223.25,230.078 1223.82,229.942 1224.39,229.618 1224.96,229.595 1225.53,230.494 1226.1,228.522 1226.66,229.661 1227.23,228.576 1227.8,226.661 1228.37,226.814 1228.94,226.077 1229.51,224.322 1230.07,223.697 1230.64,224.158 1231.21,224.493 1231.78,225.694 1232.35,227.848 1232.92,227.852 1233.48,228.961 1234.05,232.002 1234.62,230.821 1235.19,232.849 1235.76,232.874 1236.33,233.861 1236.89,235.511 1237.46,232.123 1238.03,230.73 1238.6,228.535 1239.17,229.308 1239.74,229.138 1240.3,228.215 1240.87,230.159 1241.44,228.245 1242.01,227.291 1242.58,226.209 1243.15,225.417 1243.71,226.683 1244.28,226.92 1244.85,228.327 1245.42,228.52 1245.99,228.543 1246.56,229.687 1247.12,232.669 1247.69,232.502 1248.26,232.275 1248.83,234.251 1249.4,233.619 1249.97,233.288 1250.53,233.82 1251.1,232.433 1251.67,231.164 1252.24,231.062 1252.81,234.042 1253.38,231.724 1253.94,233.662 1254.51,233.442 1255.08,231.996 1255.65,236.809 1256.22,236.302 1256.79,234.861 1257.35,232.22 1257.92,233.891 1258.49,231.607 1259.06,230.166 1259.63,231.074 1260.2,230.66 1260.76,232.582 1261.33,230.329 1261.9,229.085 1262.47,229.809 1263.04,230.848 1263.61,231.715 1264.18,232.308 1264.74,232.051 1265.31,231.692 1265.88,230.335 1266.45,228.358 1267.02,229.383 1267.59,229.174 1268.15,231.1 1268.72,229.874 1269.29,230.655 1269.86,230.418 1270.43,229.361 1271,231.378 1271.56,227.992 1272.13,226.548 1272.7,226.482 1273.27,226.342 1273.84,230.493 1274.41,230.242 1274.97,229.043 1275.54,227.86 1276.11,228.716 1276.68,228.527 1277.25,227.396 1277.82,227.471 1278.38,227.31 1278.95,225.342 1279.52,224.371 1280.09,223.606 1280.66,224.837 1281.23,224.955 1281.79,225.081 1282.36,226.084 1282.93,226.249 1283.5,228.33 1284.07,227.451 1284.64,227.351 1285.2,228.589 1285.77,229.627 1286.34,228.329 1286.91,228.215 1287.48,229.072 1288.05,231.264 1288.61,231.077 1289.18,229.908 1289.75,230.651 1290.32,229.528 1290.89,230.284 1291.46,229.058 1292.02,231.066 1292.59,230.788 1293.16,230.515 1293.73,228.418 1294.3,226.19 1294.87,227.119 1295.43,225.064 1296,225.376 1296.57,225.434 1297.14,224.389 1297.71,225.861 1298.28,230.255 1298.84,231.057 1299.41,231.117 1299.98,231.077 1300.55,231.703 1301.12,230.529 1301.69,230.182 1302.25,232.161 1302.82,232.89 1303.39,232.51 1303.96,232.203 1304.53,232.758 1305.1,231.324 1305.66,232.079 1306.23,230.538 1306.8,227.407 1307.37,227.498 1307.94,227.282 1308.51,226.314 1309.07,227.311 1309.64,227.088 1310.21,227.136 1310.78,227.371 1311.35,226.307 1311.92,227.582 1312.48,229.665 1313.05,228.33 1313.62,230.229 1314.19,234.03 1314.76,233.584 1315.33,233.971 1315.89,233.518 1316.46,235.132 1317.03,233.381 1317.6,233.883 1318.17,231.298 1318.74,229.067 1319.3,228.796 1319.87,227.509 1320.44,225.569 1321.01,224.42 1321.58,225.572 1322.15,224.76 1322.71,223.552 1323.28,223.735 1323.85,224.946 1324.42,222.897 1324.99,221.151 1325.56,221.621 1326.12,222.085 1326.69,221.365 1327.26,221.87 1327.83,221.389 1328.4,223.85 1328.97,226.113 1329.53,225.43 1330.1,227.88 1330.67,227.775 1331.24,228.767 1331.81,227.751 1332.38,227.899 1332.94,229.987 1333.51,231.98 1334.08,231.45 1334.65,230.077 1335.22,232.009 1335.79,230.558 1336.36,229.269 1336.92,228.266 1337.49,228.214 1338.06,228.132 1338.63,227.072 1339.2,228.175 1339.77,230.242 1340.33,229.255 1340.9,228.109 1341.47,226.043 1342.04,224.191 1342.61,225.548 1343.18,225.797 1343.74,226.752 1344.31,227.916 1344.88,231.065 1345.45,231.691 1346.02,230.427 1346.59,229.296 1347.15,229.133 1347.72,228.049 1348.29,227.011 1348.86,229.161 1349.43,228.951 1350,228.635 1350.56,227.346 1351.13,229.3 1351.7,229.226 1352.27,229.198 1352.84,231.017 1353.41,230.001 1353.97,228.8 1354.54,223.439 1355.11,223.813 1355.68,224.971 1356.25,224.985 1356.82,226.107 1357.38,224.118 1357.95,223.648 1358.52,227.078 1359.09,227.202 1359.66,227.51 1360.23,229.705 1360.79,229.67 1361.36,229.566 1361.93,228.599 1362.5,229.64 1363.07,229.566 1363.64,228.486 1364.2,228.765 1364.77,226.767 1365.34,226.979 1365.91,224.914 1366.48,223.976 1367.05,224.267 1367.61,225.749 1368.18,227.077 1368.75,228.236 1369.32,227.087 1369.89,228.205 1370.46,229.109 1371.02,231.177 1371.59,231.88 1372.16,231.498 1372.73,229.325 1373.3,230.213 1373.87,229.986 1374.43,227.597 1375,227.646 1375.57,227.535 1376.14,227.558 1376.71,228.5 1377.28,226.425 1377.84,226.513 1378.41,225.575 1378.98,224.635 1379.55,225.896 1380.12,230.285 1380.69,230.114 1381.25,226.866 1381.82,227.876 1382.39,228.905 1382.96,228.858 1383.53,229.068 1384.1,228.069 1384.66,227.813 1385.23,226.726 1385.8,225.878 1386.37,224.976 1386.94,225.106 1387.51,224.219 1388.07,223.421 1388.64,224.946 1389.21,226.441 1389.78,224.429 1390.35,224.601 1390.92,225.952 1391.48,228.144 1392.05,227.359 1392.62,229.521 1393.19,228.385 1393.76,230.622 1394.33,231.507 1394.89,233.357 1395.46,232.87 1396.03,231.456 1396.6,230.036 1397.17,230.078 1397.74,230.854 1398.3,232.775 1398.87,233.513 1399.44,232.036 1400.01,231.88 1400.58,232.499 1401.15,231.353 1401.71,230.017 1402.28,231.557 1402.85,231.217 1403.42,231.853 1403.99,231.673 1404.56,233.608 1405.13,230.319 1405.69,228.162 1406.26,226.953 1406.83,226.941 1407.4,226.125 1407.97,225.283 1408.54,224.439 1409.1,224.539 1409.67,224.722 1410.24,225.008 1410.81,225.262 1411.38,223.68 1411.95,226.091 1412.51,226.478 1413.08,224.618 1413.65,224.044 1414.22,224.55 1414.79,225.775 1415.36,223.751 1415.92,224.046 1416.49,223.428 1417.06,223.928 1417.63,224.13 1418.2,223.518 1418.77,220.816 1419.33,223.447 1419.9,222.01 1420.47,222.82 1421.04,223.226 1421.61,223.736 1422.18,221.978 1422.74,222.297 1423.31,222.641 1423.88,223.249 1424.45,223.713 1425.02,224.297 1425.59,223.799 1426.15,225.272 1426.72,224.555 1427.29,222.907 1427.86,224.619 1428.43,225.104 1429,227.634 1429.56,226.859 1430.13,225.124 1430.7,225.363 1431.27,225.721 1431.84,227.948 1432.41,228.106 1432.97,230.253 1433.54,230.393 1434.11,231.468 1434.68,232.482 1435.25,235.671 1435.82,235.443 1436.38,236.063 1436.95,235.458 1437.52,233.868 1438.09,232.504 1438.66,231.187 1439.23,231.182 1439.79,230.238 1440.36,232.127 1440.93,232.012 1441.5,229.752 1442.07,231.786 1442.64,231.53 1443.2,231.343 1443.77,233.333 1444.34,232.998 1444.91,234.726 1445.48,235.33 1446.05,236.049 1446.61,236.326 1447.18,236.844 1447.75,235.179 1448.32,234.761 1448.89,233.179 1449.46,232.8 1450.02,236.526 1450.59,235.695 1451.16,235.103 1451.73,235.568 1452.3,232.956 1452.87,232.639 1453.43,230.161 1454,233.02 1454.57,232.579 1455.14,231.243 1455.71,233.89 1456.28,232.424 1456.84,234.214 1457.41,234.611 1457.98,234.17 1458.55,233.479 1459.12,233.087 1459.69,232.659 1460.25,233.174 1460.82,232.801 1461.39,232.287 1461.96,232.746 1462.53,232.25 1463.1,231.813 1463.66,230.212 1464.23,229.705 1464.8,228.416 1465.37,229.215 1465.94,228.245 1466.51,227.05 1467.07,227.17 1467.64,226.091 1468.21,227.098 1468.78,226.927 1469.35,227.934 1469.92,228.567 1470.48,230.438 1471.05,229.106 1471.62,227.855 1472.19,228.735 1472.76,228.611 1473.33,229.687 1473.89,228.645 1474.46,224.394 1475.03,224.548 1475.6,227.869 1476.17,226.836 1476.74,226.757 1477.31,226.705 1477.87,225.473 1478.44,223.749 1479.01,225.212 1479.58,223.38 1480.15,222.513 1480.72,222.726 1481.28,224.049 1481.85,223.361 1482.42,221.605 1482.99,223.962 1483.56,224.268 1484.13,225.666 1484.69,223.697 1485.26,224.322 1485.83,224.699 1486.4,224.915 1486.97,224.13 1487.54,228.648 1488.1,227.49 1488.67,228.576 1489.24,228.49 1489.81,229.332 1490.38,229.069 1490.95,227.934 1491.51,226.856 1492.08,226.862 1492.65,226.897 1493.22,227.049 1493.79,228.268 1494.36,227.124 1494.92,226.202 1495.49,227.162 1496.06,230.352 1496.63,229.02 1497.2,227.018 1497.77,227.073 1498.33,225.267 1498.9,224.53 1499.47,226.838 1500.04,227.046 1500.61,227.941 1501.18,227.081 1501.74,226.94 1502.31,225.819 1502.88,223.968 1503.45,223.106 1504.02,222.591 1504.59,223.922 1505.15,225.382 1505.72,226.585 1506.29,224.789 1506.86,226.117 1507.43,226.486 1508,226.697 1508.56,228.773 1509.13,226.888 1509.7,225.823 1510.27,227.061 1510.84,229.385 1511.41,229.454 1511.97,230.56 1512.54,228.553 1513.11,227.622 1513.68,228.818 1514.25,229.85 1514.82,231.917 1515.38,230.499 1515.95,230.268 1516.52,227.136 1517.09,228.155 1517.66,224.243 1518.23,224.666 1518.79,225.833 1519.36,223.935 1519.93,226.356 1520.5,226.484 1521.07,227.716 1521.64,226.65 1522.2,225.963 1522.77,225.128 1523.34,225.288 1523.91,225.4 1524.48,223.585 1525.05,224.899 1525.61,225.337 1526.18,225.571 1526.75,224.789 1527.32,225.165 1527.89,225.63 1528.46,224.551 1529.02,223.948 1529.59,224.412 1530.16,225.865 1530.73,227.2 1531.3,227.198 1531.87,227.282 1532.43,227.426 1533,228.459 1533.57,224.438 1534.14,223.755 1534.71,223.241 1535.28,223.612 1535.84,225.031 1536.41,222.51 1536.98,224.259 1537.55,222.694 1538.12,222.234 1538.69,221.754 1539.25,223.088 1539.82,224.463 1540.39,223.881 1540.96,226.471 1541.53,226.782 1542.1,225.174 1542.66,227.475 1543.23,225.563 1543.8,225.933 1544.37,225.166 1544.94,226.642 1545.51,224.853 1546.08,225.257 1546.64,227.527 1547.21,231.792 1547.78,233.776 1548.35,233.527 1548.92,234.29 1549.49,233.113 1550.05,233.071 1550.62,234.059 1551.19,232.528 1551.76,233.429 1552.33,233.342 1552.9,234.215 1553.46,231.689 1554.03,230.589 1554.6,230.548 1555.17,231.797 1555.74,232.766 1556.31,231.402 1556.87,233.306 1557.44,230.872 1558.01,228.745 1558.58,228.958 1559.15,230.169 1559.72,232.218 1560.28,232.069 1560.85,232.913 1561.42,229.57 1561.99,228.576 1562.56,227.662 1563.13,227.838 1563.69,230.004 1564.26,231.055 1564.83,230.875 1565.4,230.926 1565.97,232.887 1566.54,231.403 1567.1,231.246 1567.67,231.152 1568.24,231.215 1568.81,229.854 1569.38,228.924 1569.95,230.824 1570.51,230.822 1571.08,232.724 1571.65,234.7 1572.22,236.475 1572.79,232.84 1573.36,231.409 1573.92,229.107 1574.49,231.131 1575.06,230.744 1575.63,230.528 1576.2,230.482 1576.77,231.122 1577.33,229.927 1577.9,229.612 1578.47,230.536 1579.04,229.278 1579.61,229.097 1580.18,230.925 1580.74,228.745 1581.31,230.771 1581.88,229.704 1582.45,228.71 1583.02,229.586 1583.59,229.539 1584.15,230.667 1584.72,230.629 1585.29,229.519 1585.86,228.331 1586.43,228.509 1587,226.316 1587.56,227.557 1588.13,228.702 1588.7,227.453 1589.27,228.573 1589.84,228.546 1590.41,228.741 1590.97,225.795 1591.54,226.722 1592.11,226.654 1592.68,225.601 1593.25,226.658 1593.82,230.719 1594.38,234.778 1594.95,233.082 1595.52,232.906 1596.09,232.692 1596.66,231.391 1597.23,233.285 1597.79,230.789 1598.36,227.407 1598.93,226.623 1599.5,226.851 1600.07,225.956 1600.64,225.777 1601.2,228.106 1601.77,227.1 1602.34,226.09 1602.91,224.114 1603.48,223.378 1604.05,223.843 1604.61,220.172 1605.18,221.797 1605.75,224.219 1606.32,225.638 1606.89,226.801 1607.46,225.872 1608.02,227.995 1608.59,228.937 1609.16,231.083 1609.73,230.98 1610.3,232.62 1610.87,231.68 1611.43,232.509 1612,233.218 1612.57,232.822 1613.14,233.527 1613.71,234.493 1614.28,232.98 1614.84,232.392 1615.41,231.046 1615.98,230.858 1616.55,233.603 1617.12,233.907 1617.69,233.486 1618.26,233.283 1618.82,233.882 1619.39,233.54 1619.96,233.078 1620.53,230.838 1621.1,231.483 1621.67,230.093 1622.23,230.903 1622.8,230.606 1623.37,228.321 1623.94,227.381 1624.51,227.342 1625.08,225.334 1625.64,226.575 1626.21,227.645 1626.78,227.649 1627.35,227.746 1627.92,228.862 1628.49,230.826 1629.05,231.645 1629.62,231.308 1630.19,231.055 1630.76,231.832 1631.33,231.478 1631.9,232.083 1632.46,233.703 1633.03,236.281 1633.6,234.489 1634.17,232.786 1634.74,231.079 1635.31,229.559 1635.87,229.145 1636.44,228.946 1637.01,228.853 1637.58,228.875 1638.15,227.763 1638.72,227.601 1639.28,226.29 1639.85,225.244 1640.42,224.092 1640.99,224.359 1641.56,222.664 1642.13,225.191 1642.69,224.213 1643.26,223.425 1643.83,222.842 1644.4,222.094 1644.97,222.69 1645.54,223.033 1646.1,222.173 1646.67,221.54 1647.24,223.912 1647.81,225.139 1648.38,226.274 1648.95,225.473 1649.51,225.678 1650.08,225.836 1650.65,224.971 1651.22,225.094 1651.79,226.344 1652.36,227.602 1652.92,228.797 1653.49,229.795 1654.06,228.748 1654.63,229.591 1655.2,231.395 1655.77,231.11 1656.33,229.923 1656.9,229.739 1657.47,230.513 1658.04,231.307 1658.61,230.014 1659.18,229.602 1659.74,230.521 1660.31,231.548 1660.88,230.131 1661.45,229.937 1662.02,230.685 1662.59,229.64 1663.15,230.536 1663.72,228.665 1664.29,227.716 1664.86,227.429 1665.43,227.231 1666,225.037 1666.56,226.31 1667.13,227.481 1667.7,227.693 1668.27,227.6 1668.84,227.566 1669.41,228.767 1669.97,228.63 1670.54,226.456 1671.11,225.602 1671.68,223.773 1672.25,225.006 1672.82,226.181 1673.38,228.481 1673.95,227.293 1674.52,223.938 1675.09,224.34 1675.66,224.574 1676.23,222.705 1676.79,222.057 1677.36,223.222 1677.93,224.604 1678.5,225.775 1679.07,227.916 1679.64,227.928 1680.2,228.138 1680.77,227.046 1681.34,230.225 1681.91,232.464 1682.48,232.132 1683.05,230.746 1683.61,227.422 1684.18,229.408 1684.75,229.333 1685.32,229.426 1685.89,228.477 1686.46,228.781 1687.02,229.763 1687.59,229.809 1688.16,229.886 1688.73,228.858 1689.3,226.753 1689.87,225.896 1690.44,227.091 1691,227.26 1691.57,228.279 1692.14,228.619 1692.71,228.669 1693.28,228.739 1693.85,229.864 1694.41,229.552 1694.98,231.608 1695.55,228.198 1696.12,229.31 1696.69,229.261 1697.26,229.355 1697.82,229.26 1698.39,228.026 1698.96,229.08 1699.53,223.713 1700.1,222.733 1700.67,224.275 1701.23,224.502 1701.8,225.018 1702.37,225.366 1702.94,227.495 1703.51,231.749 1704.08,234.651 1704.64,233.161 1705.21,232.779 1705.78,231.312 1706.35,233.226 1706.92,232.785 1707.49,232.546 1708.05,235.428 1708.62,236.116 1709.19,234.622 1709.76,234.096 1710.33,232.698 1710.9,231.262 1711.46,229.824 1712.03,231.449 1712.6,232.157 1713.17,232.637 1713.74,232.198 1714.31,231.945 1714.87,231.457 1715.44,229.089 1716.01,227.75 1716.58,227.6 1717.15,226.572 1717.72,226.693 1718.28,225.79 1718.85,223.881 1719.42,224.233 1719.99,223.511 1720.56,222.869 1721.13,224.222 1721.69,222.493 1722.26,221.86 1722.83,221.242 1723.4,221.659 1723.97,222.095 1724.54,222.43 1725.1,221.065 1725.67,221.7 1726.24,221.255 1726.81,223.699 1727.38,226.332 1727.95,225.488 1728.51,228.905 1729.08,227.864 1729.65,228.968 1730.22,232.266 1730.79,228.89 1731.36,228.045 1731.92,225.253 1732.49,226.447 1733.06,228.559 1733.63,227.521 1734.2,226.562 1734.77,226.576 1735.33,223.74 1735.9,225.105 1736.47,226.32 1737.04,226.346 1737.61,225.728 1738.18,226.098 1738.74,224.179 1739.31,224.666 1739.88,227.23 1740.45,227.477 1741.02,227.54 1741.59,228.596 1742.15,228.694 1742.72,228.622 1743.29,227.812 1743.86,228.943 1744.43,230.001 1745,231.976 1745.56,231.762 1746.13,234.531 1746.7,231.938 1747.27,231.717 1747.84,230.572 1748.41,231.445 1748.97,230.136 1749.54,229.99 1750.11,225.767 1750.68,225.979 1751.25,226.211 1751.82,225.263 1752.38,225.428 1752.95,227.559 1753.52,228.52 1754.09,228.534 1754.66,224.575 1755.23,223.93 1755.79,225.181 1756.36,226.45 1756.93,227.841 1757.5,227.009 1758.07,229.288 1758.64,231.392 1759.21,234.138 1759.77,233.848 1760.34,233.325 1760.91,232.036 1761.48,230.903 1762.05,233.84 1762.62,233.471 1763.18,232.282 1763.75,231.733 1764.32,233.517 1764.89,233.328 1765.46,229.885 1766.03,229.94 1766.59,229.613 1767.16,229.417 1767.73,227.44 1768.3,227.37 1768.87,227.599 1769.44,228.518 1770,230.532 1770.57,230.05 1771.14,228.945 1771.71,230.819 1772.28,225.551 1772.85,224.693 1773.41,225.929 1773.98,226.132 1774.55,229.414 1775.12,230.371 1775.69,229.06 1776.26,228.937 1776.82,229.762 1777.39,229.673 1777.96,228.329 1778.53,229.28 1779.1,227.065 1779.67,224.022 1780.23,226.144 1780.8,225.327 1781.37,225.578 1781.94,224.683 1782.51,225.847 1783.08,224.886 1783.64,225.927 1784.21,224.911 1784.78,224.001 1785.35,223.242 1785.92,222.511 1786.49,222.004 1787.05,225.47 1787.62,223.67 1788.19,224.133 1788.76,225.473 1789.33,225.719 1789.9,227.954 1790.46,228.032 1791.03,229.135 1791.6,227.224 1792.17,227.265 1792.74,230.342 1793.31,228.312 1793.87,229.461 1794.44,229.494 1795.01,227.574 1795.58,227.495 1796.15,228.598 1796.72,227.662 1797.28,226.734 1797.85,229.181 1798.42,228.23 1798.99,228.385 1799.56,229.426 1800.13,230.534 1800.69,229.556 1801.26,228.471 1801.83,229.381 1802.4,227.35 1802.97,229.434 1803.54,229.686 1804.1,228.404 1804.67,227.637 1805.24,226.682 1805.81,226.958 1806.38,227.14 1806.95,227.192 1807.51,226.365 1808.08,226.54 1808.65,228.944 1809.22,228.831 1809.79,227.887 1810.36,224.024 1810.92,224.529 1811.49,224.726 1812.06,226.354 1812.63,226.647 1813.2,227.483 1813.77,224.603 1814.33,222.065 1814.9,224.872 1815.47,228.183 1816.04,229.559 1816.61,232.429 1817.18,234.352 1817.74,235.125 1818.31,236.682 1818.88,236.389 1819.45,236.967 1820.02,236.438 1820.59,232.748 1821.15,232.497 1821.72,230.284 1822.29,229.27 1822.86,227.227 1823.43,230.529 1824,229.226 1824.56,228.242 1825.13,228.423 1825.7,229.557 1826.27,228.518 1826.84,226.609 1827.41,226.901 1827.97,224.882 1828.54,228.274 1829.11,227.231 1829.68,228.473 1830.25,226.473 1830.82,228.57 1831.39,231.634 1831.95,230.346 1832.52,229.559 1833.09,231.676 1833.66,232.452 1834.23,234.002 1834.8,233.795 1835.36,234.41 1835.93,236.121 1836.5,236.733 1837.07,237.113 1837.64,236.476 1838.21,235.765 1838.77,237.06 1839.34,235.297 1839.91,234.4 1840.48,233.845 1841.05,233.459 1841.62,230.891 1842.18,231.674 1842.75,233.468 1843.32,234.051 1843.89,231.849 1844.46,229.372 1845.03,229.136 1845.59,226.703 1846.16,226.798 1846.73,226.687 1847.3,227.57 1847.87,226.585 1848.44,226.364 1849,226.394 1849.57,226.2 1850.14,226.119 1850.71,225.162 1851.28,224.307 1851.85,225.623 1852.41,225.6 1852.98,225.985 1853.55,226.061 1854.12,228.25 1854.69,228.153 1855.26,226.852 1855.82,225.499 1856.39,224.622 1856.96,226.856 1857.53,226.946 1858.1,227.064 1858.67,228.236 1859.23,227.259 1859.8,228.378 1860.37,226.216 1860.94,225.352 1861.51,223.642 1862.08,225.048 1862.64,225.105 1863.21,223.132 1863.78,223.186 1864.35,222.589 1864.92,222.071 1865.49,222.633 1866.05,225.172 1866.62,224.338 1867.19,226.853 1867.76,225.885 1868.33,227.025 1868.9,225.095 1869.46,225.259 1870.03,225.644 1870.6,227.198 1871.17,228.477 1871.74,231.553 1872.31,231.306 1872.87,231.364 1873.44,230.289 1874.01,227.192 1874.58,226.107 1875.15,226.363 1875.72,228.834 1876.28,231.969 1876.85,232.629 1877.42,231.128 1877.99,229.728 1878.56,231.945 1879.13,230.671 1879.69,230.393 1880.26,230.359 1880.83,232.587 1881.4,232.216 1881.97,231.983 1882.54,234.922 1883.1,233.407 1883.67,233.036 1884.24,232.639 1884.81,234.442 1885.38,231.937 1885.95,231.39 1886.51,230.8 1887.08,231.479 1887.65,233.384 1888.22,232.071 1888.79,233.819 1889.36,231.341 1889.92,229.035 1890.49,229.601 1891.06,229.48 1891.63,228.309 1892.2,227.165 1892.77,227.387 1893.33,228.388 1893.9,227.241 1894.47,229.004 1895.04,226.67 1895.61,224.652 1896.18,224.817 1896.74,225.148 1897.31,225.429 1897.88,223.413 1898.45,224.807 1899.02,223.96 1899.59,226.295 1900.16,226.391 1900.72,226.519 1901.29,227.685 1901.86,227.533 1902.43,226.608 1903,224.726 1903.57,226.012 1904.13,227.17 1904.7,227.501 1905.27,227.789 1905.84,227.768 1906.41,229.946 1906.98,231.809 1907.54,231.48 1908.11,232.223 1908.68,231.994 1909.25,230.811 1909.82,231.73 1910.39,231.445 1910.95,231.252 1911.52,230.915 1912.09,232.022 1912.66,228.531 1913.23,227.682 1913.8,228.621 1914.36,230.68 1914.93,229.429 1915.5,230.114 1916.07,228.772 1916.64,226.588 1917.21,225.858 1917.77,226.08 1918.34,226.202 1918.91,226.251 1919.48,227.636 1920.05,225.793 1920.62,225.893 1921.18,226.184 1921.75,222.144 1922.32,225.631 1922.89,225.924 1923.46,227.043 1924.03,226.071 1924.59,226.34 1925.16,224.157 1925.73,227.26 1926.3,225.29 1926.87,226.415 1927.44,227.555 1928,227.646 1928.57,225.577 1929.14,227.841 1929.71,228.643 1930.28,228.313 1930.85,230.329 1931.41,230.086 1931.98,231.773 1932.55,229.173 1933.12,229.232 1933.69,230.158 1934.26,230.141 1934.82,232.042 1935.39,228.619 1935.96,228.559 1936.53,229.511 1937.1,228.563 1937.67,228.542 1938.23,228.451 1938.8,230.62 1939.37,230.392 1939.94,230.237 1940.51,229.094 1941.08,227.854 1941.64,227.834 1942.21,228.966 1942.78,227.757 1943.35,226.732 1943.92,227.625 1944.49,227.547 1945.05,228.346 1945.62,228.4 1946.19,229.143 1946.76,226.885 1947.33,225.095 1947.9,226.185 1948.46,227.499 1949.03,227.675 1949.6,227.577 1950.17,227.428 1950.74,227.281 1951.31,226.323 1951.87,227.516 1952.44,226.466 1953.01,226.395 1953.58,226.517 1954.15,226.694 1954.72,228.59 1955.28,229.517 1955.85,229.197 1956.42,230.215 1956.99,230.973 1957.56,232.861 1958.13,232.44 1958.69,232.274 1959.26,232.153 1959.83,230.874 1960.4,229.543 1960.97,229.558 1961.54,229.513 1962.1,229.418 1962.67,229.399 1963.24,230.031 1963.81,231.153 1964.38,231.934 1964.95,231.576 1965.51,231.181 1966.08,231.955 1966.65,227.718 1967.22,227.665 1967.79,227.605 1968.36,227.516 1968.92,227.161 1969.49,227.051 1970.06,229.087 1970.63,228.17 1971.2,226.915 1971.77,226.868 1972.34,227.13 1972.9,227.196 1973.47,225.21 1974.04,225.461 1974.61,227.452 1975.18,229.509 1975.75,229.467 1976.31,224.983 1976.88,224.353 1977.45,223.591 1978.02,223.899 1978.59,223.252 1979.16,222.821 1979.72,222.222 1980.29,223.889 1980.86,223.082 1981.43,221.429 1982,222.873 1982.57,224.349 1983.13,225.598 1983.7,225.932 1984.27,225.306 1984.84,223.366 1985.41,223.929 1985.98,223.184 1986.54,221.496 1987.11,224.11 1987.68,224.22 1988.25,226.48 1988.82,226.695 1989.39,225.742 1989.95,227.086 1990.52,226.092 1991.09,226.364 1991.66,226.363 1992.23,226.697 1992.8,228.068 1993.36,229.181 1993.93,229.212 1994.5,229.195 1995.07,229.997 1995.64,230.087 1996.21,231.013 1996.77,230.946 1997.34,229.675 1997.91,228.535 1998.48,229.529 1999.05,230.472 1999.62,230.492 2000.18,227.007 2000.75,226.006 2001.32,225.196 2001.89,226.402 2002.46,227.617 2003.03,225.624 2003.59,226.479 2004.16,226.701 2004.73,226.723 2005.3,224.886 2005.87,224.368 2006.44,224.607 2007,222.902 2007.57,224.224 2008.14,225.581 2008.71,224.622 2009.28,228.007 2009.85,228.255 2010.41,230.526 2010.98,229.609 2011.55,228.433 2012.12,228.429 2012.69,230.568 2013.26,228.474 2013.82,228.839 2014.39,230.973 2014.96,234.802 2015.53,231.336 2016.1,229.939 2016.67,229.867 2017.23,228.943 2017.8,230.306 2018.37,230.387 2018.94,230.225 2019.51,231.142 2020.08,229.996 2020.64,230.052 2021.21,231.07 2021.78,230.074 2022.35,230.121 2022.92,231.293 2023.49,229.173 2024.05,228.121 2024.62,228.405 2025.19,228.362 2025.76,228.464 2026.33,229.271 2026.9,227.991 2027.46,230.127 2028.03,229.919 2028.6,230.941 2029.17,233.053 2029.74,232.788 2030.31,235.631 2030.87,231.103 2031.44,229.712 2032.01,230.623 2032.58,228.551 2033.15,228.697 2033.72,226.457 2034.28,223.419 2034.85,221.807 2035.42,222.349 2035.99,221.348 2036.56,224.787 2037.13,225.201 2037.69,224.48 2038.26,224.88 2038.83,226.168 2039.4,225.505 2039.97,224.782 2040.54,226.171 2041.11,225.348 2041.67,225.663 2042.24,226.997 2042.81,227.434 2043.38,228.952 2043.95,228.215 2044.52,229.463 2045.08,229.436 2045.65,230.431 2046.22,230.166 2046.79,229.387 2047.36,230.46 2047.93,232.376 2048.49,231.152 2049.06,232.126 2049.63,232.99 2050.2,233.769 2050.77,234.495 2051.34,234.041 2051.9,233.685 2052.47,233.092 2053.04,230.68 2053.61,227.355 2054.18,228.624 2054.75,227.481 2055.31,225.619 2055.88,225.862 2056.45,225.018 2057.02,225.525 2057.59,226.67 2058.16,226.869 2058.72,227.106 2059.29,228.191 2059.86,231.149 2060.43,229.883 2061,231.057 2061.57,230.933 2062.13,230.797 2062.7,229.486 2063.27,227.373 2063.84,228.452 2064.41,228.459 2064.98,230.43 2065.54,229.097 2066.11,228.08 2066.68,228.825 2067.25,227.6 2067.82,226.691 2068.39,227.682 2068.95,226.615 2069.52,225.572 2070.09,224.709 2070.66,225.039 2071.23,224.277 2071.8,225.739 2072.36,225.939 2072.93,225.312 2073.5,225.703 2074.07,228.016 2074.64,229.261 2075.21,227.234 2075.77,227.087 2076.34,227.202 2076.91,227.404 2077.48,227.3 2078.05,228.571 2078.62,226.456 2079.18,228.661 2079.75,228.81 2080.32,227.902 2080.89,228.147 2081.46,227.238 2082.03,227.256 2082.59,228.397 2083.16,228.638 2083.73,228.852 2084.3,228.947 2084.87,230.936 2085.44,230.823 2086,230.688 2086.57,230.646 2087.14,230.401 2087.71,230.316 2088.28,231.13 2088.85,230.082 2089.41,231.197 2089.98,230.878 2090.55,230.766 2091.12,232.698 2091.69,232.609 2092.26,232.478 2092.82,233.353 2093.39,231.967 2093.96,234.698 2094.53,234.321 2095.1,233.983 2095.67,230.402 2096.23,230.261 2096.8,229.083 2097.37,229.059 2097.94,228.864 2098.51,227.847 2099.08,229.84 2099.64,230.484 2100.21,229.355 2100.78,228.454 2101.35,228.511 2101.92,227.319 2102.49,228.545 2103.05,227.612 2103.62,226.613 2104.19,226.715 2104.76,228.935 2105.33,228.105 2105.9,227.288 2106.46,226.359 2107.03,224.403 2107.6,224.844 2108.17,227.11 2108.74,226.206 2109.31,227.524 2109.87,227.32 2110.44,226.433 2111.01,226.703 2111.58,227.78 2112.15,228.957 2112.72,228.777 2113.29,229.078 2113.85,230.237 2114.42,231.158 2114.99,232.928 2115.56,231.668 2116.13,232.355 2116.7,230.941 2117.26,228.533 2117.83,229.389 2118.4,226.318 2118.97,226.768 2119.54,226.025 2120.11,226.423 2120.67,223.484 2121.24,225.77 2121.81,224.983 2122.38,224.098 2122.95,221.141 2123.52,222.598 2124.08,221.064 2124.65,224.578 2125.22,223.996 2125.79,224.186 2126.36,227.693 2126.93,227.821 2127.49,227.857 2128.06,228.996 2128.63,230.041 2129.2,231.879 2129.77,230.695 2130.34,229.47 2130.9,226.391 2131.47,227.606 2132.04,225.76 2132.61,224.922 2133.18,223.232 2133.75,224.675 2134.31,224.928 2134.88,225.392 2135.45,225.732 2136.02,223.95 2136.59,225.375 2137.16,223.663 2137.72,223.013 2138.29,225.418 2138.86,229.85 2139.43,230.09 2140,229.048 2140.57,227.923 2141.13,227.085 2141.7,229.105 2142.27,228.005 2142.84,229.144 2143.41,230.082 2143.98,228.862 2144.54,228.172 2145.11,226.172 2145.68,228.455 2146.25,231.827 2146.82,232.937 2147.39,232.879 2147.95,231.632 2148.52,232.263 2149.09,233.991 2149.66,234.775 2150.23,234.375 2150.8,233.908 2151.36,233.411 2151.93,231.906 2152.5,232.528 2153.07,231.436 2153.64,229.2 2154.21,229.269 2154.77,232.216 2155.34,230.91 2155.91,230.775 2156.48,230.482 2157.05,231.253 2157.62,230.995 2158.18,231.85 2158.75,231.527 2159.32,232.405 2159.89,232.156 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip100)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.033 ± 0.019\n  with uncertainty of ± 0.0011766653596272196\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01275 ± (0.00234496, 0.00210688) (MC)\n  95% confidence interval: [-4.01712, -4.00827] (MC)\n  linear error propagation: -4.01287 ± 0.00230657\n  |δ_y| = |0.00169763| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.012748595672859, val_l = 0.004371553913697923, val_u = 0.004478957938207628)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip130\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip131\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip132\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1154.55 2211.02,1154.55 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1008.88 2211.02,1008.88 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,863.222 2211.02,863.222 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,717.561 2211.02,717.561 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,571.899 2211.02,571.899 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,426.237 2211.02,426.237 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,280.576 2211.02,280.576 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1154.55 365.751,1154.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1008.88 365.751,1008.88 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,863.222 365.751,863.222 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,717.561 365.751,717.561 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,571.899 365.751,571.899 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,426.237 365.751,426.237 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,280.576 365.751,280.576 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M298.909 1140.34 Q295.298 1140.34 293.469 1143.91 Q291.664 1147.45 291.664 1154.58 Q291.664 1161.69 293.469 1165.25 Q295.298 1168.79 298.909 1168.79 Q302.543 1168.79 304.349 1165.25 Q306.177 1161.69 306.177 1154.58 Q306.177 1147.45 304.349 1143.91 Q302.543 1140.34 298.909 1140.34 M298.909 1136.64 Q304.719 1136.64 307.775 1141.25 Q310.853 1145.83 310.853 1154.58 Q310.853 1163.31 307.775 1167.91 Q304.719 1172.5 298.909 1172.5 Q293.099 1172.5 290.02 1167.91 Q286.964 1163.31 286.964 1154.58 Q286.964 1145.83 290.02 1141.25 Q293.099 1136.64 298.909 1136.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M259.557 1022.23 L267.196 1022.23 L267.196 995.863 L258.886 997.53 L258.886 993.271 L267.15 991.604 L271.826 991.604 L271.826 1022.23 L279.465 1022.23 L279.465 1026.16 L259.557 1026.16 L259.557 1022.23 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 994.683 Q295.298 994.683 293.469 998.247 Q291.664 1001.79 291.664 1008.92 Q291.664 1016.03 293.469 1019.59 Q295.298 1023.13 298.909 1023.13 Q302.543 1023.13 304.349 1019.59 Q306.177 1016.03 306.177 1008.92 Q306.177 1001.79 304.349 998.247 Q302.543 994.683 298.909 994.683 M298.909 990.979 Q304.719 990.979 307.775 995.585 Q310.853 1000.17 310.853 1008.92 Q310.853 1017.65 307.775 1022.25 Q304.719 1026.84 298.909 1026.84 Q293.099 1026.84 290.02 1022.25 Q286.964 1017.65 286.964 1008.92 Q286.964 1000.17 290.02 995.585 Q293.099 990.979 298.909 990.979 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M262.775 876.567 L279.094 876.567 L279.094 880.502 L257.15 880.502 L257.15 876.567 Q259.812 873.813 264.395 869.183 Q269.002 864.53 270.182 863.188 Q272.428 860.664 273.307 858.928 Q274.21 857.169 274.21 855.479 Q274.21 852.725 272.266 850.989 Q270.344 849.252 267.242 849.252 Q265.043 849.252 262.59 850.016 Q260.159 850.78 257.381 852.331 L257.381 847.609 Q260.205 846.475 262.659 845.896 Q265.113 845.317 267.15 845.317 Q272.52 845.317 275.715 848.002 Q278.909 850.688 278.909 855.178 Q278.909 857.308 278.099 859.229 Q277.312 861.127 275.205 863.72 Q274.627 864.391 271.525 867.609 Q268.423 870.803 262.775 876.567 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 849.021 Q295.298 849.021 293.469 852.586 Q291.664 856.127 291.664 863.257 Q291.664 870.363 293.469 873.928 Q295.298 877.47 298.909 877.47 Q302.543 877.47 304.349 873.928 Q306.177 870.363 306.177 863.257 Q306.177 856.127 304.349 852.586 Q302.543 849.021 298.909 849.021 M298.909 845.317 Q304.719 845.317 307.775 849.924 Q310.853 854.507 310.853 863.257 Q310.853 871.984 307.775 876.59 Q304.719 881.174 298.909 881.174 Q293.099 881.174 290.02 876.59 Q286.964 871.984 286.964 863.257 Q286.964 854.507 290.02 849.924 Q293.099 845.317 298.909 845.317 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M272.914 716.206 Q276.27 716.924 278.145 719.193 Q280.043 721.461 280.043 724.794 Q280.043 729.91 276.525 732.711 Q273.006 735.512 266.525 735.512 Q264.349 735.512 262.034 735.072 Q259.742 734.655 257.289 733.799 L257.289 729.285 Q259.233 730.419 261.548 730.998 Q263.863 731.577 266.386 731.577 Q270.784 731.577 273.076 729.841 Q275.39 728.105 275.39 724.794 Q275.39 721.739 273.238 720.026 Q271.108 718.29 267.289 718.29 L263.261 718.29 L263.261 714.447 L267.474 714.447 Q270.923 714.447 272.752 713.081 Q274.58 711.693 274.58 709.1 Q274.58 706.438 272.682 705.026 Q270.807 703.591 267.289 703.591 Q265.367 703.591 263.168 704.007 Q260.969 704.424 258.33 705.304 L258.33 701.137 Q260.992 700.396 263.307 700.026 Q265.645 699.656 267.705 699.656 Q273.029 699.656 276.131 702.086 Q279.233 704.494 279.233 708.614 Q279.233 711.484 277.59 713.475 Q275.946 715.443 272.914 716.206 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 703.359 Q295.298 703.359 293.469 706.924 Q291.664 710.466 291.664 717.595 Q291.664 724.702 293.469 728.267 Q295.298 731.808 298.909 731.808 Q302.543 731.808 304.349 728.267 Q306.177 724.702 306.177 717.595 Q306.177 710.466 304.349 706.924 Q302.543 703.359 298.909 703.359 M298.909 699.656 Q304.719 699.656 307.775 704.262 Q310.853 708.845 310.853 717.595 Q310.853 726.322 307.775 730.929 Q304.719 735.512 298.909 735.512 Q293.099 735.512 290.02 730.929 Q286.964 726.322 286.964 717.595 Q286.964 708.845 290.02 704.262 Q293.099 699.656 298.909 699.656 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M271.594 558.693 L259.789 577.142 L271.594 577.142 L271.594 558.693 M270.367 554.619 L276.247 554.619 L276.247 577.142 L281.177 577.142 L281.177 581.031 L276.247 581.031 L276.247 589.179 L271.594 589.179 L271.594 581.031 L255.992 581.031 L255.992 576.517 L270.367 554.619 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 557.698 Q295.298 557.698 293.469 561.262 Q291.664 564.804 291.664 571.934 Q291.664 579.04 293.469 582.605 Q295.298 586.147 298.909 586.147 Q302.543 586.147 304.349 582.605 Q306.177 579.04 306.177 571.934 Q306.177 564.804 304.349 561.262 Q302.543 557.698 298.909 557.698 M298.909 553.994 Q304.719 553.994 307.775 558.6 Q310.853 563.184 310.853 571.934 Q310.853 580.66 307.775 585.267 Q304.719 589.85 298.909 589.85 Q293.099 589.85 290.02 585.267 Q286.964 580.66 286.964 571.934 Q286.964 563.184 290.02 558.6 Q293.099 553.994 298.909 553.994 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M258.793 408.957 L277.15 408.957 L277.15 412.892 L263.076 412.892 L263.076 421.365 Q264.094 421.017 265.113 420.855 Q266.131 420.67 267.15 420.67 Q272.937 420.67 276.316 423.841 Q279.696 427.013 279.696 432.429 Q279.696 438.008 276.224 441.11 Q272.752 444.189 266.432 444.189 Q264.256 444.189 261.988 443.818 Q259.742 443.448 257.335 442.707 L257.335 438.008 Q259.418 439.142 261.641 439.698 Q263.863 440.253 266.34 440.253 Q270.344 440.253 272.682 438.147 Q275.02 436.04 275.02 432.429 Q275.02 428.818 272.682 426.712 Q270.344 424.605 266.34 424.605 Q264.465 424.605 262.59 425.022 Q260.738 425.439 258.793 426.318 L258.793 408.957 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 412.036 Q295.298 412.036 293.469 415.601 Q291.664 419.142 291.664 426.272 Q291.664 433.378 293.469 436.943 Q295.298 440.485 298.909 440.485 Q302.543 440.485 304.349 436.943 Q306.177 433.378 306.177 426.272 Q306.177 419.142 304.349 415.601 Q302.543 412.036 298.909 412.036 M298.909 408.332 Q304.719 408.332 307.775 412.939 Q310.853 417.522 310.853 426.272 Q310.853 434.999 307.775 439.605 Q304.719 444.189 298.909 444.189 Q293.099 444.189 290.02 439.605 Q286.964 434.999 286.964 426.272 Q286.964 417.522 290.02 412.939 Q293.099 408.332 298.909 408.332 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M269.326 278.712 Q266.178 278.712 264.326 280.865 Q262.497 283.018 262.497 286.768 Q262.497 290.494 264.326 292.67 Q266.178 294.823 269.326 294.823 Q272.474 294.823 274.303 292.67 Q276.154 290.494 276.154 286.768 Q276.154 283.018 274.303 280.865 Q272.474 278.712 269.326 278.712 M278.608 264.059 L278.608 268.319 Q276.849 267.485 275.043 267.046 Q273.261 266.606 271.502 266.606 Q266.872 266.606 264.418 269.731 Q261.988 272.856 261.641 279.175 Q263.006 277.161 265.066 276.096 Q267.127 275.008 269.603 275.008 Q274.812 275.008 277.821 278.18 Q280.853 281.328 280.853 286.768 Q280.853 292.092 277.705 295.309 Q274.557 298.527 269.326 298.527 Q263.33 298.527 260.159 293.944 Q256.988 289.337 256.988 280.61 Q256.988 272.416 260.877 267.555 Q264.766 262.671 271.316 262.671 Q273.076 262.671 274.858 263.018 Q276.664 263.365 278.608 264.059 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 266.374 Q295.298 266.374 293.469 269.939 Q291.664 273.481 291.664 280.61 Q291.664 287.717 293.469 291.282 Q295.298 294.823 298.909 294.823 Q302.543 294.823 304.349 291.282 Q306.177 287.717 306.177 280.61 Q306.177 273.481 304.349 269.939 Q302.543 266.374 298.909 266.374 M298.909 262.671 Q304.719 262.671 307.775 267.277 Q310.853 271.86 310.853 280.61 Q310.853 289.337 307.775 293.944 Q304.719 298.527 298.909 298.527 Q293.099 298.527 290.02 293.944 Q286.964 289.337 286.964 280.61 Q286.964 271.86 290.02 267.277 Q293.099 262.671 298.909 262.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip132)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1047.22 400.199,948.616 400.786,858.146 401.372,775.26 401.958,699.454 402.545,630.261 403.131,567.247 403.718,510.01 404.304,458.175 404.891,411.393 405.477,369.338 406.063,331.702 406.65,298.201 407.236,268.565 407.823,242.542 408.409,219.895 408.995,260.347 409.582,295.335 410.168,277.393 410.755,262.193 411.341,249.551 411.927,280.548 412.514,271.229 413.1,298.747 413.687,292.559 414.273,347.331 414.86,370.886 415.446,391.808 416.032,410.669 416.619,407.815 417.205,406.764 417.792,425.697 418.378,427.203 418.964,463.227 419.551,465.481 420.137,468.759 420.724,473.051 421.31,478.461 421.896,483.822 422.483,502.185 423.069,519.204 423.656,526.374 424.242,533.249 424.829,541.518 425.415,558.867 426.001,567.692 426.588,577.302 427.174,594.283 427.761,603.042 428.347,619.705 428.933,629.079 429.52,638.004 430.106,647.765 430.693,663.851 431.279,674.526 431.865,690.677 432.452,700.964 433.038,721.322 433.625,736.035 434.211,759.399 434.798,767.465 435.384,789.2 435.97,796.948 436.557,808.819 437.143,816.716 437.73,828.478 438.316,847.246 438.902,859.02 439.489,867.019 440.075,878.121 440.662,889.145 441.248,902.673 441.835,913.029 442.421,926.096 443.007,935.838 443.594,942.422 444.18,951.573 444.767,963.159 445.353,974.269 445.939,987.602 446.526,997.776 447.112,1002.84 447.699,1012.63 448.285,1022.17 448.871,1029.13 449.458,1038.25 450.044,1044.62 450.631,1050.89 451.217,1054.92 451.804,1062.99 452.39,1075.04 452.976,1086.32 453.563,1091.03 454.149,1095.64 454.736,1100.56 455.322,1105.31 455.908,1115.36 456.495,1121.36 457.081,1126.91 457.668,1130.82 458.254,1138.1 458.84,1141.73 459.427,1141.65 460.013,1146.99 460.6,1148.28 461.186,1150.17 461.773,1153.36 462.359,1158.43 462.945,1161.58 463.532,1167.67 464.118,1170.5 464.705,1171.53 465.291,1174.4 465.877,1177.03 466.464,1179.56 467.05,1180.4 467.637,1185.83 468.223,1186.52 468.809,1193.37 469.396,1195.21 469.982,1195.47 470.569,1197.56 471.155,1197.76 471.742,1198.28 472.328,1198.61 472.914,1202.2 473.501,1205.64 474.087,1210.21 474.674,1210.14 475.26,1212.91 475.846,1212.91 476.433,1213.1 477.019,1211.63 477.606,1211.84 478.192,1214.82 478.778,1214.99 479.365,1214.96 479.951,1216.58 480.538,1219.5 481.124,1222.37 481.711,1223.52 482.297,1223.37 482.883,1223.09 483.47,1226.85 484.056,1226.5 484.643,1228.8 485.229,1229.84 485.815,1230.54 486.402,1229.01 486.988,1228.91 487.575,1228.91 488.161,1231.1 488.748,1235.74 489.334,1237.86 489.92,1241.31 490.507,1244.51 491.093,1243.57 491.68,1243.97 492.266,1245.54 492.852,1245.75 493.439,1246.09 494.025,1246.22 494.612,1247.88 495.198,1248.05 495.784,1248.11 496.371,1248.35 496.957,1246.11 497.544,1250.53 498.13,1248.18 498.717,1247.25 499.303,1246.45 499.889,1247.83 500.476,1249.23 501.062,1249.47 501.649,1248.37 502.235,1249.88 502.821,1248.76 503.408,1246.5 503.994,1244.53 504.581,1244.87 505.167,1244.12 505.753,1243.44 506.34,1246.6 506.926,1244.59 507.513,1242.84 508.099,1243.51 508.686,1241.53 509.272,1243.37 509.858,1244.09 510.445,1244.46 511.031,1242.61 511.618,1242.02 512.204,1240.11 512.79,1239.71 513.377,1238.22 513.963,1237.94 514.55,1241.35 515.136,1242.2 515.722,1242.99 516.309,1243.54 516.895,1241.6 517.482,1239.99 518.068,1238.37 518.655,1239.35 519.241,1240.36 519.827,1238.87 520.414,1238.66 521,1236.94 521.587,1236.82 522.173,1237.95 522.759,1237.65 523.346,1239.85 523.932,1239.62 524.519,1238.16 525.105,1238.15 525.691,1239.34 526.278,1240.18 526.864,1238.76 527.451,1236.03 528.037,1237.16 528.624,1237.79 529.21,1238.76 529.796,1238.41 530.383,1237.95 530.969,1237.78 531.556,1239.83 532.142,1245.34 532.728,1246 533.315,1245.42 533.901,1243.39 534.488,1245.04 535.074,1242.13 535.661,1240.71 536.247,1241.68 536.833,1243.65 537.42,1243.16 538.006,1243.85 538.593,1244.32 539.179,1245.97 539.765,1245.55 540.352,1249.58 540.938,1249.88 541.525,1248.86 542.111,1246.98 542.697,1246.02 543.284,1247.62 543.87,1245.73 544.457,1244.93 545.043,1243.2 545.63,1244.85 546.216,1244.23 546.802,1242.45 547.389,1239.35 547.975,1238.75 548.562,1238.24 549.148,1239.15 549.734,1240.12 550.321,1240.78 550.907,1240.47 551.494,1238.63 552.08,1238.09 552.666,1240.04 553.253,1239.43 553.839,1237.53 554.426,1239.61 555.012,1240.26 555.599,1242.05 556.185,1241.34 556.771,1241.9 557.358,1243.57 557.944,1242.9 558.531,1242.11 559.117,1242.38 559.703,1240.37 560.29,1237.46 560.876,1239.62 561.463,1237.92 562.049,1237.49 562.635,1237.01 563.222,1235.15 563.808,1233.55 564.395,1233.35 564.981,1230.52 565.568,1232.82 566.154,1233.54 566.74,1234.38 567.327,1234.05 567.913,1234.72 568.5,1233.16 569.086,1232.87 569.672,1235.07 570.259,1235.87 570.845,1235.16 571.432,1234 572.018,1232.53 572.605,1233.6 573.191,1233.13 573.777,1234.16 574.364,1232.79 574.95,1232.37 575.537,1233.2 576.123,1232.94 576.709,1231.29 577.296,1229.98 577.882,1228.6 578.469,1228.77 579.055,1230.09 579.641,1232.11 580.228,1230.75 580.814,1231.66 581.401,1231.54 581.987,1235.88 582.574,1236.4 583.16,1237.14 583.746,1236.66 584.333,1236.06 584.919,1235.57 585.506,1234.98 586.092,1234.73 586.678,1236.64 587.265,1233.83 587.851,1231.94 588.438,1237.32 589.024,1235.46 589.61,1235.04 590.197,1233.37 590.783,1231.34 591.37,1232.28 591.956,1232.06 592.543,1231.69 593.129,1232.5 593.715,1229.93 594.302,1234.24 594.888,1232.28 595.475,1231.7 596.061,1229.92 596.647,1230.76 597.234,1231.66 597.82,1228.6 598.407,1229.83 598.993,1231.7 599.579,1232.47 600.166,1230.96 600.752,1231.8 601.339,1231.35 601.925,1231.14 602.512,1229.81 603.098,1230.8 603.684,1231.76 604.271,1231.36 604.857,1231.16 605.444,1229.4 606.03,1230.21 606.616,1229.97 607.203,1228.52 607.789,1229.46 608.376,1231.55 608.962,1231.06 609.548,1231.78 610.135,1233 610.721,1233.7 611.308,1233.14 611.894,1232.91 612.481,1232.41 613.067,1231.94 613.653,1230.2 614.24,1229.94 614.826,1231.74 615.413,1230.03 615.999,1228.61 616.585,1226.8 617.172,1226.5 617.758,1226.17 618.345,1225.92 618.931,1225.73 619.518,1227.91 620.104,1229.89 620.69,1225.75 621.277,1224.35 621.863,1224.32 622.45,1224.14 623.036,1225.18 623.622,1226.26 624.209,1226.23 624.795,1223.55 625.382,1226.96 625.968,1224.45 626.554,1224.13 627.141,1223.74 627.727,1219.86 628.314,1221.22 628.9,1218.61 629.487,1221.11 630.073,1222.41 630.659,1222.51 631.246,1224.88 631.832,1225.87 632.419,1227.97 633.005,1227.64 633.591,1228.69 634.178,1229.39 634.764,1229.03 635.351,1231.22 635.937,1232.06 636.523,1230.12 637.11,1227.28 637.696,1225.73 638.283,1227.96 638.869,1227.68 639.456,1227.41 640.042,1224.64 640.628,1224.07 641.215,1222.79 641.801,1220.3 642.388,1221.3 642.974,1219.17 643.56,1217.11 644.147,1216.25 644.733,1217.65 645.32,1221.62 645.906,1220.48 646.492,1224.17 647.079,1223.65 647.665,1226.99 648.252,1224.02 648.838,1226.25 649.425,1228.35 650.011,1225.33 650.597,1224.98 651.184,1223.58 651.77,1225.91 652.357,1225.63 652.943,1226.35 653.529,1226.04 654.116,1225.81 654.702,1228.17 655.289,1227.59 655.875,1232 656.462,1230.17 657.048,1230.83 657.634,1231.66 658.221,1231.01 658.807,1234 659.394,1231.26 659.98,1229.37 660.566,1227.74 661.153,1228.8 661.739,1227.2 662.326,1226.69 662.912,1225.01 663.498,1223.72 664.085,1222.39 664.671,1221.26 665.258,1220.13 665.844,1221.14 666.431,1221.1 667.017,1222.09 667.603,1223.13 668.19,1220.65 668.776,1219.33 669.363,1220.4 669.949,1221.54 670.535,1221.41 671.122,1221.33 671.708,1222.36 672.295,1224.58 672.881,1224.07 673.467,1224 674.054,1221.35 674.64,1221.06 675.227,1220.97 675.813,1219.71 676.4,1220.76 676.986,1219.57 677.572,1220.57 678.159,1222.62 678.745,1219.13 679.332,1217.68 679.918,1217.87 680.504,1216.75 681.091,1214.51 681.677,1213.63 682.264,1216.45 682.85,1216.76 683.436,1216.87 684.023,1219.63 684.609,1225.65 685.196,1222.66 685.782,1221.19 686.369,1221.45 686.955,1222.4 687.541,1221.96 688.128,1221.76 688.714,1222.85 689.301,1221.46 689.887,1220.03 690.473,1222.29 691.06,1223.36 691.646,1224.24 692.233,1223.77 692.819,1222.43 693.405,1221.13 693.992,1223.37 694.578,1223 695.165,1223.86 695.751,1221.28 696.338,1222.39 696.924,1220.95 697.51,1219.52 698.097,1219.62 698.683,1220.81 699.27,1220.68 699.856,1221.7 700.442,1219.25 701.029,1220.37 701.615,1221.38 702.202,1221.17 702.788,1219.56 703.375,1222.06 703.961,1222.06 704.547,1224.19 705.134,1222.85 705.72,1224.82 706.307,1220.95 706.893,1219.4 707.479,1219.32 708.066,1217.91 708.652,1216.35 709.239,1216.32 709.825,1216.3 710.411,1216.31 710.998,1215.19 711.584,1215.4 712.171,1215.59 712.757,1215.7 713.344,1215.85 713.93,1218.37 714.516,1216.91 715.103,1219.35 715.689,1220.56 716.276,1219.27 716.862,1220.49 717.448,1219.22 718.035,1216.66 718.621,1219.29 719.208,1221.46 719.794,1218.72 720.38,1216.33 720.967,1217.72 721.553,1218.8 722.14,1216.21 722.726,1215.05 723.313,1212.86 723.899,1213.34 724.485,1212.3 725.072,1212.43 725.658,1212.77 726.245,1212.93 726.831,1214.6 727.417,1214.81 728.004,1216.07 728.59,1217.42 729.177,1218.72 729.763,1218.62 730.349,1217.4 730.936,1214.95 731.522,1219.72 732.109,1219.41 732.695,1217.75 733.282,1219.88 733.868,1219.67 734.454,1219.68 735.041,1218.37 735.627,1219.65 736.214,1219.39 736.8,1218.99 737.386,1216.65 737.973,1217.63 738.559,1217.67 739.146,1216.46 739.732,1216.57 740.318,1214.27 740.905,1211.86 741.491,1210.92 742.078,1211.47 742.664,1211.84 743.251,1210.87 743.837,1211.15 744.423,1214.06 745.01,1214.13 745.596,1213.21 746.183,1213.43 746.769,1213.47 747.355,1213.65 747.942,1212.68 748.528,1211.86 749.115,1210.98 749.701,1215.03 750.288,1215.27 750.874,1212.58 751.46,1213.05 752.047,1214.51 752.633,1212.43 753.22,1213.83 753.806,1216.32 754.392,1213.8 754.979,1215.04 755.565,1216.44 756.152,1216.4 756.738,1217.65 757.324,1218.82 757.911,1221.06 758.497,1222.05 759.084,1221.75 759.67,1221.4 760.257,1225.86 760.843,1225.4 761.429,1224.86 762.016,1226.55 762.602,1226.12 763.189,1222.3 763.775,1222 764.361,1220.56 764.948,1222.69 765.534,1223.58 766.121,1223.31 766.707,1224.07 767.293,1221.25 767.88,1222.38 768.466,1219.77 769.053,1219.76 769.639,1218.51 770.226,1217.34 770.812,1219.96 771.398,1217.57 771.985,1218.7 772.571,1217.32 773.158,1216.23 773.744,1215.19 774.33,1214.15 774.917,1216.55 775.503,1217.61 776.09,1216.35 776.676,1219.76 777.262,1218.41 777.849,1217.26 778.435,1217.26 779.022,1214.82 779.608,1215.98 780.195,1214.89 780.781,1213.82 781.367,1216.36 781.954,1217.38 782.54,1217.48 783.127,1215.25 783.713,1211.74 784.299,1212.18 784.886,1213.83 785.472,1215.1 786.059,1216.41 786.645,1216.34 787.232,1216.75 787.818,1220.25 788.404,1221.11 788.991,1223.4 789.577,1224.05 790.164,1223.69 790.75,1222.28 791.336,1223.25 791.923,1223.16 792.509,1224.12 793.096,1223.8 793.682,1224.64 794.268,1225.37 794.855,1225.89 795.441,1226.36 796.028,1225.88 796.614,1223.15 797.201,1224.14 797.787,1221.15 798.373,1220.86 798.96,1221.71 799.546,1223.72 800.133,1225.72 800.719,1223.95 801.305,1225.09 801.892,1224.56 802.478,1221.59 803.065,1220.3 803.651,1222.31 804.237,1224.53 804.824,1225.09 805.41,1223.22 805.997,1223.95 806.583,1225.87 807.17,1222.77 807.756,1224.86 808.342,1221.17 808.929,1224.38 809.515,1222.71 810.102,1223.36 810.688,1220.75 811.274,1221.71 811.861,1220.09 812.447,1221.34 813.034,1219.73 813.62,1217.09 814.206,1215.56 814.793,1215.55 815.379,1215.56 815.966,1213.21 816.552,1211.95 817.139,1210.94 817.725,1212.14 818.311,1212.32 818.898,1212.33 819.484,1210.03 820.071,1207.97 820.657,1207.13 821.243,1206.11 821.83,1205.03 822.416,1205.45 823.003,1206.13 823.589,1210.4 824.175,1212.09 824.762,1212.4 825.348,1212.81 825.935,1215.3 826.521,1216.6 827.108,1215.51 827.694,1215.37 828.28,1214.23 828.867,1211.88 829.453,1212.16 830.04,1213.52 830.626,1212.19 831.212,1212.09 831.799,1212.13 832.385,1211.34 832.972,1211.48 833.558,1211.74 834.145,1212.22 834.731,1212.37 835.317,1212.56 835.904,1212.71 836.49,1212.76 837.077,1215.14 837.663,1216.53 838.249,1218.77 838.836,1219.78 839.422,1216.93 840.009,1218.11 840.595,1219.18 841.181,1219.02 841.768,1220.16 842.354,1219.83 842.941,1219.86 843.527,1218.29 844.114,1216.82 844.7,1216.66 845.286,1216.55 845.873,1216.71 846.459,1216.5 847.046,1216.47 847.632,1214.89 848.218,1213.67 848.805,1211.46 849.391,1209.07 849.978,1208.37 850.564,1207.47 851.15,1206.84 851.737,1209.82 852.323,1212.46 852.91,1213.67 853.496,1213.99 854.083,1214.03 854.669,1216.51 855.255,1217.6 855.842,1218.77 856.428,1217.42 857.015,1216.21 857.601,1215.23 858.187,1219.64 858.774,1217.09 859.36,1220.73 859.947,1220.43 860.533,1220.88 861.119,1220.54 861.706,1220.37 862.292,1216.38 862.879,1216.03 863.465,1217.31 864.052,1218.24 864.638,1216.94 865.224,1216.6 865.811,1218.8 866.397,1218.68 866.984,1219.64 867.57,1219.31 868.156,1214.34 868.743,1213.24 869.329,1211.98 869.916,1212.27 870.502,1212.61 871.089,1211.68 871.675,1211.97 872.261,1210.84 872.848,1209.76 873.434,1207.78 874.021,1207.98 874.607,1208.39 875.193,1209.7 875.78,1210.22 876.366,1214.06 876.953,1212.78 877.539,1210.44 878.125,1214.4 878.712,1210.98 879.298,1213.56 879.885,1213.38 880.471,1213.46 881.058,1215.88 881.644,1214.75 882.23,1214.82 882.817,1215.96 883.403,1215.88 883.99,1216.86 884.576,1215.61 885.162,1215.83 885.749,1212.14 886.335,1212.05 886.922,1212.06 887.508,1213.43 888.094,1211.1 888.681,1211.32 889.267,1210.23 889.854,1212.85 890.44,1213.03 891.027,1214.63 891.613,1214.51 892.199,1216.85 892.786,1218.04 893.372,1215.65 893.959,1217.01 894.545,1220.23 895.131,1219.86 895.718,1217.28 896.304,1214.7 896.891,1214.41 897.477,1214.24 898.063,1215.19 898.65,1213.96 899.236,1212.83 899.823,1212.84 900.409,1214.2 900.996,1216.73 901.582,1216.67 902.168,1215.13 902.755,1216.26 903.341,1216.19 903.928,1214.81 904.514,1215.54 905.1,1220.35 905.687,1219.09 906.273,1220.15 906.86,1220.96 907.446,1220.56 908.032,1219.04 908.619,1221.15 909.205,1219.4 909.792,1220.38 910.378,1221.15 910.965,1223.13 911.551,1224.97 912.137,1224.61 912.724,1221.61 913.31,1221.19 913.897,1218.47 914.483,1218.33 915.069,1217.95 915.656,1215.31 916.242,1212.69 916.829,1208.15 917.415,1207.4 918.002,1208.81 918.588,1209.05 919.174,1210.4 919.761,1213.05 920.347,1211.9 920.934,1213.04 921.52,1214.5 922.106,1213.32 922.693,1212.16 923.279,1213.16 923.866,1211.06 924.452,1211.22 925.038,1211.24 925.625,1212.71 926.211,1212.87 926.798,1211.79 927.384,1210.76 927.971,1212.08 928.557,1213.25 929.143,1211.9 929.73,1210.39 930.316,1215.45 930.903,1215.43 931.489,1214.18 932.075,1213.09 932.662,1212.19 933.248,1208.94 933.835,1209.21 934.421,1211.81 935.007,1210.8 935.594,1210.98 936.18,1209.87 936.767,1210.2 937.353,1208.24 937.94,1206.44 938.526,1206.94 939.112,1207.49 939.699,1206.79 940.285,1208.38 940.872,1208.41 941.458,1207.51 942.044,1206.67 942.631,1206.97 943.217,1205.97 943.804,1206.39 944.39,1205.86 944.976,1207.61 945.563,1210.23 946.149,1209.33 946.736,1210.75 947.322,1211.11 947.909,1211.22 948.495,1211.4 949.081,1215 949.668,1216.23 950.254,1214.98 950.841,1214.96 951.427,1216.32 952.013,1216.43 952.6,1214.92 953.186,1213.85 953.773,1216.38 954.359,1215.13 954.945,1216.36 955.532,1216.21 956.118,1215.07 956.705,1214.98 957.291,1214.91 957.878,1215.91 958.464,1216.93 959.05,1216.74 959.637,1217.82 960.223,1216.25 960.81,1213.83 961.396,1213.68 961.982,1215.24 962.569,1213.67 963.155,1213.47 963.742,1213.55 964.328,1213.66 964.915,1213.73 965.501,1215.32 966.087,1215.41 966.674,1215.44 967.26,1215.32 967.847,1216.56 968.433,1215.37 969.019,1217.56 969.606,1218.59 970.192,1218.38 970.779,1220.41 971.365,1219.57 971.951,1221.51 972.538,1222.4 973.124,1219.54 973.711,1218.15 974.297,1218.05 974.884,1219.16 975.47,1220.14 976.056,1221.05 976.643,1217.26 977.229,1214.37 977.816,1213.23 978.402,1213.18 978.988,1213.2 979.575,1215.51 980.161,1216.41 980.748,1214.73 981.334,1213.42 981.92,1212.36 982.507,1211.17 983.093,1210.07 983.68,1208.95 984.266,1209.2 984.853,1209.36 985.439,1209.55 986.025,1209.96 986.612,1207.99 987.198,1208.12 987.785,1208.17 988.371,1208.41 988.957,1209.63 989.544,1213.55 990.13,1211.13 990.717,1211.33 991.303,1210.38 991.889,1210.38 992.476,1208.25 993.062,1209.7 993.649,1207.79 994.235,1210.59 994.822,1209.52 995.408,1211 995.994,1213.54 996.581,1215.88 997.167,1215.98 997.754,1214.62 998.34,1214.39 998.926,1216.57 999.513,1214.09 1000.1,1212.74 1000.69,1210.42 1001.27,1210.59 1001.86,1209.71 1002.44,1209.06 1003.03,1212.5 1003.62,1213.56 1004.2,1213.84 1004.79,1217.39 1005.38,1215.24 1005.96,1213.85 1006.55,1214.8 1007.14,1214.91 1007.72,1217.3 1008.31,1217.09 1008.9,1215.74 1009.48,1213.21 1010.07,1209.65 1010.65,1209.88 1011.24,1211.03 1011.83,1207.57 1012.41,1209.09 1013,1209.48 1013.59,1207.38 1014.17,1207.89 1014.76,1208.32 1015.35,1209.68 1015.93,1212.24 1016.52,1208.96 1017.11,1211.53 1017.69,1214.11 1018.28,1216.72 1018.86,1218.03 1019.45,1215.38 1020.04,1216.4 1020.62,1214.01 1021.21,1215.08 1021.8,1216.35 1022.38,1216.14 1022.97,1217.17 1023.56,1217.1 1024.14,1216.85 1024.73,1212.9 1025.32,1211.73 1025.9,1209.49 1026.49,1209.57 1027.07,1209.93 1027.66,1210.17 1028.25,1206.89 1028.83,1206.18 1029.42,1207.67 1030.01,1208.12 1030.59,1209.63 1031.18,1210.99 1031.77,1212.43 1032.35,1213.6 1032.94,1215.87 1033.52,1215.91 1034.11,1213.3 1034.7,1215.54 1035.28,1215.31 1035.87,1212.63 1036.46,1212.53 1037.04,1212.23 1037.63,1212.37 1038.22,1217.07 1038.8,1219.2 1039.39,1218.85 1039.98,1217.52 1040.56,1218.43 1041.15,1216.89 1041.73,1215.68 1042.32,1214.39 1042.91,1213.28 1043.49,1214.21 1044.08,1214.18 1044.67,1211.82 1045.25,1213.15 1045.84,1215.54 1046.43,1215.42 1047.01,1214.19 1047.6,1215.26 1048.19,1216.53 1048.77,1216.44 1049.36,1216.41 1049.94,1218.69 1050.53,1217.24 1051.12,1215.95 1051.7,1214.56 1052.29,1213.35 1052.88,1213.38 1053.46,1214.77 1054.05,1214.88 1054.64,1214.96 1055.22,1217.2 1055.81,1217.12 1056.39,1219.43 1056.98,1218.17 1057.57,1218.15 1058.15,1215.73 1058.74,1217.89 1059.33,1217.72 1059.91,1217.56 1060.5,1217.34 1061.09,1217.22 1061.67,1218.17 1062.26,1220.39 1062.85,1219.82 1063.43,1219.59 1064.02,1219.45 1064.6,1217.8 1065.19,1216.31 1065.78,1216.26 1066.36,1217.27 1066.95,1217.05 1067.54,1219.16 1068.12,1218.8 1068.71,1219.96 1069.3,1223.1 1069.88,1219.14 1070.47,1216.39 1071.06,1216.38 1071.64,1213.92 1072.23,1213.82 1072.81,1216.08 1073.4,1215.88 1073.99,1215.84 1074.57,1216.82 1075.16,1216.44 1075.75,1217.32 1076.33,1217.16 1076.92,1218.23 1077.51,1217.93 1078.09,1218.91 1078.68,1221 1079.26,1220.86 1079.85,1219.35 1080.44,1218.04 1081.02,1216.4 1081.61,1214.01 1082.2,1212.78 1082.78,1211.55 1083.37,1210.37 1083.96,1210.58 1084.54,1210.58 1085.13,1212.77 1085.72,1212.52 1086.3,1214.91 1086.89,1214.78 1087.47,1217.06 1088.06,1216.65 1088.65,1216.64 1089.23,1215.16 1089.82,1212.57 1090.41,1210.17 1090.99,1210.34 1091.58,1210.35 1092.17,1209.19 1092.75,1209.43 1093.34,1209.92 1093.93,1209.88 1094.51,1208.76 1095.1,1207.74 1095.68,1209.37 1096.27,1211.76 1096.86,1212.96 1097.44,1214.12 1098.03,1214.07 1098.62,1215.07 1099.2,1212.65 1099.79,1212.93 1100.38,1212.94 1100.96,1212.81 1101.55,1214.31 1102.14,1213.98 1102.72,1213.78 1103.31,1212.52 1103.89,1212.45 1104.48,1212.3 1105.07,1213.38 1105.65,1212.53 1106.24,1212.54 1106.83,1210.22 1107.41,1210.3 1108,1210.3 1108.59,1207.99 1109.17,1209.47 1109.76,1211.96 1110.34,1213.28 1110.93,1212.23 1111.52,1214.54 1112.1,1216.7 1112.69,1214.42 1113.28,1214.3 1113.86,1216.71 1114.45,1212.81 1115.04,1212.64 1115.62,1212.91 1116.21,1212.93 1116.8,1212.63 1117.38,1215.19 1117.97,1215.06 1118.55,1216.29 1119.14,1216.17 1119.73,1216.05 1120.31,1213.56 1120.9,1214.93 1121.49,1213.38 1122.07,1213.36 1122.66,1213.09 1123.25,1215.39 1123.83,1216.57 1124.42,1215.29 1125.01,1213.87 1125.59,1213.89 1126.18,1215.03 1126.76,1212.45 1127.35,1211.3 1127.94,1210.25 1128.52,1210.38 1129.11,1211.46 1129.7,1213.94 1130.28,1215.15 1130.87,1215.99 1131.46,1214.72 1132.04,1214.8 1132.63,1212.3 1133.21,1214.79 1133.8,1215.64 1134.39,1216.78 1134.97,1220.31 1135.56,1221.15 1136.15,1221.76 1136.73,1222.42 1137.32,1224.2 1137.91,1222.63 1138.49,1220.91 1139.08,1221.81 1139.67,1221.18 1140.25,1219.34 1140.84,1217.8 1141.42,1216.3 1142.01,1216.29 1142.6,1214.69 1143.18,1212.01 1143.77,1212.05 1144.36,1211.97 1144.94,1211.86 1145.53,1209.57 1146.12,1210.75 1146.7,1209.71 1147.29,1209.89 1147.88,1210.06 1148.46,1209.19 1149.05,1209.35 1149.63,1211.9 1150.22,1211.97 1150.81,1212.17 1151.39,1212.27 1151.98,1211.05 1152.57,1211.2 1153.15,1211.41 1153.74,1211.53 1154.33,1210.76 1154.91,1210.96 1155.5,1210.94 1156.09,1207.59 1156.67,1207.97 1157.26,1204.72 1157.84,1205.04 1158.43,1206.5 1159.02,1206.8 1159.6,1206.93 1160.19,1207.32 1160.78,1207.74 1161.36,1208.99 1161.95,1209.14 1162.54,1211.89 1163.12,1210.48 1163.71,1211.76 1164.29,1214.28 1164.88,1214.11 1165.47,1215.33 1166.05,1214.13 1166.64,1211.64 1167.23,1211.95 1167.81,1213.24 1168.4,1216.97 1168.99,1216.82 1169.57,1218.87 1170.16,1218.88 1170.75,1219.64 1171.33,1219.38 1171.92,1220.19 1172.5,1218.47 1173.09,1217.18 1173.68,1217.41 1174.26,1217.36 1174.85,1219.46 1175.44,1221.37 1176.02,1219.73 1176.61,1221.52 1177.2,1219.64 1177.78,1219.03 1178.37,1219.62 1178.96,1218.2 1179.54,1220.46 1180.13,1221.59 1180.71,1221.2 1181.3,1221.12 1181.89,1220.62 1182.47,1217.69 1183.06,1213.59 1183.65,1213.58 1184.23,1215.04 1184.82,1213.76 1185.41,1213.71 1185.99,1215.97 1186.58,1215.45 1187.16,1216.19 1187.75,1215.9 1188.34,1217.93 1188.92,1216.49 1189.51,1219.84 1190.1,1215.89 1190.68,1217.13 1191.27,1214.74 1191.86,1213.43 1192.44,1213.55 1193.03,1213.88 1193.62,1213.88 1194.2,1212.82 1194.79,1215.04 1195.37,1213.73 1195.96,1214.95 1196.55,1217.15 1197.13,1217.01 1197.72,1217.89 1198.31,1219.96 1198.89,1220.77 1199.48,1220.34 1200.07,1220.05 1200.65,1218.76 1201.24,1216.35 1201.83,1216.35 1202.41,1215.09 1203,1211.57 1203.58,1212.85 1204.17,1210.45 1204.76,1210.32 1205.34,1209.08 1205.93,1207.04 1206.52,1210.8 1207.1,1212.33 1207.69,1214.8 1208.28,1213.91 1208.86,1214.08 1209.45,1215.13 1210.03,1212.89 1210.62,1215.06 1211.21,1216.16 1211.79,1217.43 1212.38,1218.39 1212.97,1217 1213.55,1216.76 1214.14,1215.18 1214.73,1214.96 1215.31,1214.93 1215.9,1213.61 1216.49,1210.13 1217.07,1210.23 1217.66,1210.4 1218.24,1208.03 1218.83,1208.62 1219.42,1208.89 1220,1208.16 1220.59,1209.64 1221.18,1211.02 1221.76,1211.07 1222.35,1207.57 1222.94,1210.12 1223.52,1207.8 1224.11,1207.94 1224.7,1209.49 1225.28,1203.84 1225.87,1204.24 1226.45,1205.73 1227.04,1208.64 1227.63,1206.62 1228.21,1209.13 1228.8,1210.72 1229.39,1209.63 1229.97,1210.05 1230.56,1207.78 1231.15,1210.29 1231.73,1211.68 1232.32,1210.83 1232.91,1209.59 1233.49,1208.54 1234.08,1207.78 1234.66,1207.98 1235.25,1208.32 1235.84,1209.81 1236.42,1212.04 1237.01,1210.86 1237.6,1211.08 1238.18,1208.84 1238.77,1210.19 1239.36,1209.26 1239.94,1209.48 1240.53,1210.65 1241.11,1208.3 1241.7,1212.14 1242.29,1213.81 1242.87,1213.93 1243.46,1214.13 1244.05,1209.4 1244.63,1209.64 1245.22,1210.98 1245.81,1212.33 1246.39,1211.35 1246.98,1211.56 1247.57,1212.86 1248.15,1212.8 1248.74,1213 1249.32,1215.29 1249.91,1216.47 1250.5,1217.44 1251.08,1216.13 1251.67,1216.08 1252.26,1216.01 1252.84,1214.93 1253.43,1214.79 1254.02,1212.45 1254.6,1213.46 1255.19,1213.6 1255.78,1212.2 1256.36,1210.99 1256.95,1212.46 1257.53,1212.59 1258.12,1211.61 1258.71,1209.07 1259.29,1209.22 1259.88,1210.51 1260.47,1209.61 1261.05,1210.86 1261.64,1209.96 1262.23,1211.33 1262.81,1209 1263.4,1209.26 1263.98,1209.52 1264.57,1211.89 1265.16,1214.45 1265.74,1213.43 1266.33,1215.82 1266.92,1215.54 1267.5,1215.54 1268.09,1216.8 1268.68,1215.2 1269.26,1210.2 1269.85,1209.24 1270.44,1209.11 1271.02,1209.09 1271.61,1208.31 1272.19,1209.59 1272.78,1209.94 1273.37,1207.61 1273.95,1206.68 1274.54,1207.02 1275.13,1207.28 1275.71,1206.55 1276.3,1208.11 1276.89,1207.17 1277.47,1208.87 1278.06,1212.43 1278.65,1212.34 1279.23,1212.61 1279.82,1213.75 1280.4,1212.65 1280.99,1212.93 1281.58,1212.9 1282.16,1212.66 1282.75,1213.91 1283.34,1212.49 1283.92,1210.11 1284.51,1211.62 1285.1,1209.43 1285.68,1205 1286.27,1205.38 1286.86,1204.82 1287.44,1205.22 1288.03,1203.23 1288.61,1205.11 1289.2,1204.41 1289.79,1207.27 1290.37,1209.78 1290.96,1210.08 1291.55,1211.55 1292.13,1213.8 1292.72,1215.18 1293.31,1213.95 1293.89,1214.94 1294.48,1216.41 1295.06,1216.31 1295.65,1215.02 1296.24,1217.45 1296.82,1219.57 1297.41,1219.2 1298,1218.82 1298.58,1219.78 1299.17,1219.36 1299.76,1220.06 1300.34,1217.4 1300.93,1214.9 1301.52,1215.74 1302.1,1212.99 1302.69,1213.12 1303.27,1211.99 1303.86,1213.15 1304.45,1213 1305.03,1210.6 1305.62,1208.27 1306.21,1208.8 1306.79,1210.31 1307.38,1208.04 1307.97,1209.64 1308.55,1211.07 1309.14,1212.21 1309.73,1212.27 1310.31,1212.37 1310.9,1213.6 1311.48,1212.36 1312.07,1209.98 1312.66,1211.07 1313.24,1212.37 1313.83,1214.76 1314.42,1216.93 1315,1215.47 1315.59,1215.25 1316.18,1214.21 1316.76,1212.91 1317.35,1209.29 1317.93,1208.51 1318.52,1209.89 1319.11,1211.15 1319.69,1211.31 1320.28,1212.55 1320.87,1213.75 1321.45,1211.3 1322.04,1211.53 1322.63,1211.88 1323.21,1213.36 1323.8,1211.13 1324.39,1211.19 1324.97,1211.21 1325.56,1209.09 1326.14,1210.2 1326.73,1211.55 1327.32,1217.7 1327.9,1217.38 1328.49,1216.16 1329.08,1216.22 1329.66,1215.01 1330.25,1217.34 1330.84,1217.97 1331.42,1214.14 1332.01,1214.03 1332.6,1213.7 1333.18,1211.19 1333.77,1211.21 1334.35,1211.3 1334.94,1212.38 1335.53,1211.18 1336.11,1211.23 1336.7,1212.45 1337.29,1212.13 1337.87,1214.42 1338.46,1214.21 1339.05,1216.61 1339.63,1217.77 1340.22,1217.53 1340.8,1215.93 1341.39,1214.46 1341.98,1213.16 1342.56,1214.48 1343.15,1213.22 1343.74,1212.19 1344.32,1209.79 1344.91,1208.91 1345.5,1209.27 1346.08,1211.71 1346.67,1210.66 1347.26,1210.88 1347.84,1213.6 1348.43,1213.56 1349.01,1213.7 1349.6,1213.7 1350.19,1212.63 1350.77,1215.01 1351.36,1214.96 1351.95,1216.08 1352.53,1217.22 1353.12,1215.86 1353.71,1210.86 1354.29,1211.01 1354.88,1214.71 1355.47,1213.59 1356.05,1212.41 1356.64,1212.46 1357.22,1212.2 1357.81,1213.34 1358.4,1213.64 1358.98,1214.9 1359.57,1215.91 1360.16,1217.01 1360.74,1216.93 1361.33,1218.02 1361.92,1219.03 1362.5,1217.39 1363.09,1215.76 1363.68,1218.11 1364.26,1218 1364.85,1216.54 1365.43,1214.07 1366.02,1214.98 1366.61,1212.51 1367.19,1213.8 1367.78,1211.22 1368.37,1210.14 1368.95,1207.94 1369.54,1208.39 1370.13,1209.92 1370.71,1211.49 1371.3,1211.4 1371.88,1210.47 1372.47,1208.19 1373.06,1207.24 1373.64,1208.83 1374.23,1208.93 1374.82,1208.13 1375.4,1209.36 1375.99,1210.84 1376.58,1209.02 1377.16,1209.35 1377.75,1208.55 1378.34,1208.68 1378.92,1206.36 1379.51,1210.05 1380.09,1212.49 1380.68,1213.88 1381.27,1213.93 1381.85,1214.9 1382.44,1215.92 1383.03,1216.95 1383.61,1216.93 1384.2,1216.8 1384.79,1216.56 1385.37,1216.34 1385.96,1218.23 1386.55,1215.57 1387.13,1215.17 1387.72,1217.35 1388.3,1218.1 1388.89,1217.61 1389.48,1216.29 1390.06,1218.67 1390.65,1218.44 1391.24,1219.25 1391.82,1218.78 1392.41,1218.65 1393,1219.45 1393.58,1222.65 1394.17,1219.81 1394.75,1221.57 1395.34,1220.78 1395.93,1220.44 1396.51,1219.98 1397.1,1222.09 1397.69,1221.87 1398.27,1221.61 1398.86,1221.05 1399.45,1220.63 1400.03,1220.07 1400.62,1220.73 1401.21,1219.14 1401.79,1220.04 1402.38,1222.01 1402.96,1220.17 1403.55,1219.7 1404.14,1216.87 1404.72,1217.77 1405.31,1219.8 1405.9,1219.6 1406.48,1219.26 1407.07,1216.76 1407.66,1216.59 1408.24,1214.12 1408.83,1213.91 1409.42,1212.63 1410,1211.39 1410.59,1207.6 1411.17,1207.7 1411.76,1206.82 1412.35,1207.35 1412.93,1209.03 1413.52,1210.48 1414.11,1211.91 1414.69,1211.85 1415.28,1212.88 1415.87,1210.66 1416.45,1210.71 1417.04,1213.23 1417.63,1210.85 1418.21,1211.07 1418.8,1211.22 1419.38,1208.85 1419.97,1209.13 1420.56,1207.02 1421.14,1206.18 1421.73,1205.19 1422.32,1204.69 1422.9,1203.91 1423.49,1205.65 1424.08,1205.98 1424.66,1207.67 1425.25,1208 1425.83,1203.58 1426.42,1204.36 1427.01,1204.88 1427.59,1204.19 1428.18,1207.05 1428.77,1207.31 1429.35,1210.08 1429.94,1206.74 1430.53,1207.14 1431.11,1208.59 1431.7,1205.46 1432.29,1207.03 1432.87,1204.87 1433.46,1204.28 1434.04,1204.65 1434.63,1205.32 1435.22,1205.66 1435.8,1206.04 1436.39,1205.35 1436.98,1205.68 1437.56,1206.17 1438.15,1205.55 1438.74,1206.02 1439.32,1206.44 1439.91,1208.21 1440.5,1208.76 1441.08,1210.21 1441.67,1209.29 1442.25,1210.39 1442.84,1211.77 1443.43,1211.66 1444.01,1212.92 1444.6,1211.82 1445.19,1212.04 1445.77,1210.92 1446.36,1210.2 1446.95,1208.04 1447.53,1209.53 1448.12,1210.95 1448.7,1209.95 1449.29,1210.09 1449.88,1208.84 1450.46,1210.01 1451.05,1214.89 1451.64,1214.8 1452.22,1211.07 1452.81,1212.27 1453.4,1212.4 1453.98,1212.5 1454.57,1213.95 1455.16,1215.99 1455.74,1214.42 1456.33,1216.59 1456.91,1217.7 1457.5,1217.58 1458.09,1216.2 1458.67,1217.08 1459.26,1219.2 1459.85,1216.66 1460.43,1216.41 1461.02,1214.89 1461.61,1217.21 1462.19,1216.6 1462.78,1216.26 1463.37,1216.1 1463.95,1217.08 1464.54,1211.98 1465.12,1213.31 1465.71,1212.08 1466.3,1212.17 1466.88,1211.2 1467.47,1211.48 1468.06,1212.77 1468.64,1214.02 1469.23,1214.05 1469.82,1214.04 1470.4,1213.9 1470.99,1212.53 1471.57,1213.85 1472.16,1214.94 1472.75,1213.88 1473.33,1210.24 1473.92,1211.73 1474.51,1214.02 1475.09,1213.98 1475.68,1216.09 1476.27,1217 1476.85,1214.44 1477.44,1214.23 1478.03,1213.24 1478.61,1214.23 1479.2,1214.43 1479.78,1215.75 1480.37,1217.93 1480.96,1219.01 1481.54,1219.72 1482.13,1218.33 1482.72,1216.75 1483.3,1215.44 1483.89,1217.54 1484.48,1216.1 1485.06,1215.73 1485.65,1215.53 1486.24,1213.18 1486.82,1215.33 1487.41,1216.59 1487.99,1215.23 1488.58,1212.58 1489.17,1212.48 1489.75,1211.18 1490.34,1213.44 1490.93,1214.51 1491.51,1213.15 1492.1,1211.95 1492.69,1209.53 1493.27,1211.09 1493.86,1211.31 1494.45,1214.87 1495.03,1213.73 1495.62,1218.23 1496.2,1217.84 1496.79,1216.58 1497.38,1218.82 1497.96,1216.14 1498.55,1216.04 1499.14,1214.66 1499.72,1215.9 1500.31,1216.73 1500.9,1217.74 1501.48,1217.63 1502.07,1217.57 1502.65,1219.72 1503.24,1218.32 1503.83,1217.9 1504.41,1217.7 1505,1218.66 1505.59,1218.31 1506.17,1217.85 1506.76,1219.15 1507.35,1219.93 1507.93,1219.49 1508.52,1217.92 1509.11,1216.44 1509.69,1216.47 1510.28,1216.4 1510.86,1216.26 1511.45,1215.09 1512.04,1219.71 1512.62,1220.58 1513.21,1221.27 1513.8,1220.96 1514.38,1219.44 1514.97,1222.41 1515.56,1220.54 1516.14,1222.42 1516.73,1223.08 1517.32,1223.76 1517.9,1222.39 1518.49,1220.93 1519.07,1221.68 1519.66,1218.81 1520.25,1218.5 1520.83,1220.38 1521.42,1217.81 1522.01,1220.03 1522.59,1219.67 1523.18,1220.6 1523.77,1218.98 1524.35,1221.07 1524.94,1220.69 1525.52,1218.15 1526.11,1213.25 1526.7,1210.88 1527.28,1211.05 1527.87,1210.05 1528.46,1211.28 1529.04,1211.22 1529.63,1209.97 1530.22,1211.61 1530.8,1210.48 1531.39,1210.46 1531.98,1209.34 1532.56,1212.13 1533.15,1213.32 1533.73,1213.32 1534.32,1211.83 1534.91,1210.63 1535.49,1212.11 1536.08,1209.84 1536.67,1212.54 1537.25,1214.94 1537.84,1214.68 1538.43,1213.27 1539.01,1210.87 1539.6,1210.95 1540.19,1209.89 1540.77,1213.65 1541.36,1214.77 1541.94,1215.82 1542.53,1215.63 1543.12,1213.15 1543.7,1211.9 1544.29,1212.05 1544.88,1211.93 1545.46,1209.61 1546.05,1211.22 1546.64,1211.33 1547.22,1211.38 1547.81,1211.24 1548.4,1212.75 1548.98,1213.79 1549.57,1211.58 1550.15,1211.53 1550.74,1209.28 1551.33,1206.89 1551.91,1204.69 1552.5,1208.72 1553.09,1210.27 1553.67,1212.86 1554.26,1210.51 1554.85,1210.89 1555.43,1211.09 1556.02,1211.09 1556.6,1210.31 1557.19,1211.62 1557.78,1211.95 1558.36,1210.86 1558.95,1212.26 1559.54,1212.45 1560.12,1210.32 1560.71,1212.78 1561.3,1210.43 1561.88,1211.61 1562.47,1212.73 1563.06,1211.71 1563.64,1211.74 1564.23,1210.41 1564.81,1210.4 1565.4,1211.63 1565.99,1212.97 1566.57,1212.77 1567.16,1215.29 1567.75,1213.91 1568.33,1212.61 1568.92,1214.04 1569.51,1212.77 1570.09,1212.8 1570.68,1212.57 1571.27,1215.95 1571.85,1214.94 1572.44,1215.06 1573.02,1216.31 1573.61,1215.15 1574.2,1210.52 1574.78,1205.77 1575.37,1207.59 1575.96,1207.69 1576.54,1207.83 1577.13,1209.24 1577.72,1206.98 1578.3,1209.75 1578.89,1213.59 1579.47,1214.52 1580.06,1214.29 1580.65,1215.36 1581.23,1215.62 1581.82,1213 1582.41,1214.16 1582.99,1215.35 1583.58,1217.67 1584.17,1218.61 1584.75,1218.19 1585.34,1222.49 1585.93,1220.82 1586.51,1218.19 1587.1,1216.66 1587.68,1215.38 1588.27,1216.49 1588.86,1214.1 1589.44,1213.03 1590.03,1210.54 1590.62,1210.6 1591.2,1208.64 1591.79,1209.63 1592.38,1208.6 1592.96,1207.69 1593.55,1208.04 1594.14,1207.12 1594.72,1205.89 1595.31,1207.5 1595.89,1208.08 1596.48,1209.54 1597.07,1209.7 1597.65,1206.47 1598.24,1206 1598.83,1206.36 1599.41,1206.48 1600,1205.67 1600.59,1205.95 1601.17,1206.36 1601.76,1208.84 1602.34,1208.04 1602.93,1209.58 1603.52,1208.6 1604.1,1208.89 1604.69,1211.47 1605.28,1212.56 1605.86,1212.62 1606.45,1214.95 1607.04,1213.6 1607.62,1212.41 1608.21,1212.42 1608.8,1212.32 1609.38,1211.05 1609.97,1208.78 1610.55,1207.78 1611.14,1208.09 1611.73,1208.32 1612.31,1207.36 1612.9,1207.69 1613.49,1206.92 1614.07,1204.97 1614.66,1201.86 1615.25,1203.76 1615.83,1205.59 1616.42,1207.46 1617.01,1209.15 1617.59,1209.6 1618.18,1209.81 1618.76,1209.91 1619.35,1209.87 1619.94,1211.14 1620.52,1211.34 1621.11,1212.87 1621.7,1214.12 1622.28,1215.51 1622.87,1215.3 1623.46,1217.33 1624.04,1214.56 1624.63,1215.76 1625.22,1216.75 1625.8,1217.53 1626.39,1218.51 1626.97,1217.97 1627.56,1217.71 1628.15,1218.81 1628.73,1219.68 1629.32,1217.11 1629.91,1215.81 1630.49,1214.58 1631.08,1215.54 1631.67,1215.37 1632.25,1215.25 1632.84,1216.3 1633.42,1216.24 1634.01,1214.88 1634.6,1213.48 1635.18,1212.12 1635.77,1210.96 1636.36,1212.13 1636.94,1211.16 1637.53,1209.05 1638.12,1209.31 1638.7,1210.62 1639.29,1210.79 1639.88,1209.87 1640.46,1208.9 1641.05,1210.33 1641.63,1210.77 1642.22,1209.68 1642.81,1208.45 1643.39,1210.01 1643.98,1210.19 1644.57,1209.3 1645.15,1210.45 1645.74,1209.39 1646.33,1211.5 1646.91,1212.58 1647.5,1212.93 1648.09,1213.18 1648.67,1215.72 1649.26,1214.34 1649.84,1213.04 1650.43,1212.81 1651.02,1212.93 1651.6,1212.99 1652.19,1211.63 1652.78,1211.78 1653.36,1214.27 1653.95,1215.3 1654.54,1217.46 1655.12,1216.15 1655.71,1214.87 1656.29,1212.28 1656.88,1213.64 1657.47,1217.52 1658.05,1217.16 1658.64,1216.98 1659.23,1219.21 1659.81,1220.08 1660.4,1218.88 1660.99,1217.42 1661.57,1216.16 1662.16,1213.75 1662.75,1213.75 1663.33,1213.52 1663.92,1214.78 1664.5,1211.15 1665.09,1208.52 1665.68,1208.82 1666.26,1210.33 1666.85,1214.11 1667.44,1211.84 1668.02,1211.9 1668.61,1211.78 1669.2,1212.85 1669.78,1212.49 1670.37,1211.35 1670.96,1211.27 1671.54,1211.15 1672.13,1212.3 1672.71,1214.71 1673.3,1215.73 1673.89,1214.41 1674.47,1214.25 1675.06,1213.1 1675.65,1212.71 1676.23,1212.65 1676.82,1212.56 1677.41,1211.26 1677.99,1211.58 1678.58,1209.18 1679.17,1213.04 1679.75,1211.77 1680.34,1211.8 1680.92,1211.67 1681.51,1211.76 1682.1,1213.16 1682.68,1211.96 1683.27,1218.11 1683.86,1219.33 1684.44,1217.69 1685.03,1217.53 1685.62,1217.02 1686.2,1216.7 1686.79,1214.32 1687.37,1209.44 1687.96,1206 1688.55,1207.59 1689.13,1207.92 1689.72,1209.52 1690.31,1207.24 1690.89,1207.64 1691.48,1207.81 1692.07,1204.38 1692.65,1203.43 1693.24,1204.98 1693.83,1205.45 1694.41,1206.94 1695,1208.5 1695.58,1210.09 1696.17,1208.19 1696.76,1207.3 1697.34,1206.66 1697.93,1207.07 1698.52,1207.27 1699.1,1207.76 1699.69,1210.42 1700.28,1211.94 1700.86,1212.13 1701.45,1213.33 1702.04,1213.23 1702.62,1214.31 1703.21,1216.56 1703.79,1216.25 1704.38,1217.18 1704.97,1218.02 1705.55,1216.59 1706.14,1218.67 1706.73,1219.52 1707.31,1220.38 1707.9,1220.06 1708.49,1219.71 1709.07,1219.47 1709.66,1221.17 1710.24,1220.61 1710.83,1221.26 1711.42,1218.63 1712,1215.71 1712.59,1216.73 1713.18,1212.86 1713.76,1214.05 1714.35,1212.79 1714.94,1208.97 1715.52,1212.78 1716.11,1213.74 1716.7,1216.96 1717.28,1215.66 1717.87,1213.27 1718.45,1214.46 1719.04,1215.58 1719.63,1215.61 1720.21,1218.9 1720.8,1217.44 1721.39,1216.12 1721.97,1216.14 1722.56,1216.89 1723.15,1216.53 1723.73,1218.78 1724.32,1218.32 1724.91,1215.45 1725.49,1215.2 1726.08,1215.14 1726.66,1213.95 1727.25,1213.83 1727.84,1213.91 1728.42,1214.83 1729.01,1213.54 1729.6,1212.31 1730.18,1209.99 1730.77,1210.16 1731.36,1206.88 1731.94,1209.74 1732.53,1209.92 1733.11,1211.16 1733.7,1210.11 1734.29,1211.55 1734.87,1211.68 1735.46,1216.5 1736.05,1216.31 1736.63,1216.1 1737.22,1217.24 1737.81,1217.12 1738.39,1214.74 1738.98,1213.65 1739.57,1213.63 1740.15,1218.18 1740.74,1219 1741.32,1217.67 1741.91,1216.28 1742.5,1214.73 1743.08,1215.69 1743.67,1213.1 1744.26,1210.65 1744.84,1207.41 1745.43,1207.62 1746.02,1208.1 1746.6,1209.48 1747.19,1210.7 1747.78,1207.25 1748.36,1207.55 1748.95,1208.81 1749.53,1209.36 1750.12,1207.22 1750.71,1207.32 1751.29,1211.19 1751.88,1211.09 1752.47,1211.43 1753.05,1211.63 1753.64,1213.88 1754.23,1213.98 1754.81,1213.74 1755.4,1212.7 1755.99,1210.38 1756.57,1210.89 1757.16,1212.12 1757.74,1209.95 1758.33,1215.96 1758.92,1217.01 1759.5,1215.67 1760.09,1215.49 1760.68,1211.77 1761.26,1210.64 1761.85,1212.11 1762.44,1212.23 1763.02,1211.27 1763.61,1211.34 1764.19,1212.86 1764.78,1211.76 1765.37,1214.29 1765.95,1217.82 1766.54,1215.48 1767.13,1216.47 1767.71,1216.25 1768.3,1217.34 1768.89,1216.09 1769.47,1217.25 1770.06,1216.13 1770.65,1217.35 1771.23,1218.47 1771.82,1219.44 1772.4,1220.39 1772.99,1221.11 1773.58,1217.28 1774.16,1219.41 1774.75,1218.98 1775.34,1217.54 1775.92,1217.32 1776.51,1214.82 1777.1,1214.74 1777.68,1213.47 1778.27,1215.65 1778.86,1215.63 1779.44,1212.12 1780.03,1214.41 1780.61,1213.09 1781.2,1213.03 1781.79,1215.21 1782.37,1215.32 1782.96,1214.07 1783.55,1215.14 1784.13,1216.23 1784.72,1213.45 1785.31,1214.52 1785.89,1214.35 1786.48,1213.15 1787.06,1211.85 1787.65,1212.93 1788.24,1214.15 1788.82,1213.1 1789.41,1215.42 1790,1213.04 1790.58,1212.73 1791.17,1214.17 1791.76,1215.05 1792.34,1216.17 1792.93,1215.89 1793.52,1215.71 1794.1,1215.68 1794.69,1216.66 1795.27,1216.5 1795.86,1213.78 1796.45,1213.9 1797.03,1214.97 1797.62,1219.42 1798.21,1218.94 1798.79,1218.8 1799.38,1217.01 1799.97,1216.72 1800.55,1215.8 1801.14,1219.13 1801.73,1222.12 1802.31,1219.05 1802.9,1215.32 1803.48,1213.74 1804.07,1210.4 1804.66,1208.08 1805.24,1207.05 1805.83,1205.1 1806.42,1205.25 1807,1204.39 1807.59,1204.81 1808.18,1208.91 1808.76,1209.1 1809.35,1211.56 1809.94,1212.68 1810.52,1215.02 1811.11,1211.24 1811.69,1212.69 1812.28,1213.81 1812.87,1213.6 1813.45,1212.29 1814.04,1213.46 1814.63,1215.66 1815.21,1215.36 1815.8,1217.71 1816.39,1213.89 1816.97,1215.1 1817.56,1213.69 1818.14,1215.99 1818.73,1213.62 1819.32,1210.08 1819.9,1211.5 1820.49,1212.36 1821.08,1209.89 1821.66,1208.92 1822.25,1207.03 1822.84,1207.15 1823.42,1206.31 1824.01,1204.19 1824.6,1203.31 1825.18,1202.68 1825.77,1203.22 1826.35,1203.86 1826.94,1202.19 1827.53,1204.04 1828.11,1204.92 1828.7,1205.43 1829.29,1205.75 1829.87,1208.6 1830.46,1207.64 1831.05,1205.49 1831.63,1204.7 1832.22,1207.12 1832.81,1209.9 1833.39,1210.15 1833.98,1212.93 1834.56,1212.86 1835.15,1213.02 1835.74,1212.05 1836.32,1213.2 1836.91,1213.49 1837.5,1213.5 1838.08,1213.77 1838.67,1213.91 1839.26,1215.06 1839.84,1216.11 1840.43,1214.7 1841.01,1214.78 1841.6,1214.41 1842.19,1214.37 1842.77,1211.91 1843.36,1212.02 1843.95,1213.52 1844.53,1215.11 1845.12,1216.18 1845.71,1213.7 1846.29,1213.63 1846.88,1213.53 1847.47,1212.21 1848.05,1213.34 1848.64,1212.08 1849.22,1214.56 1849.81,1215.6 1850.4,1217.63 1850.98,1216.13 1851.57,1216.14 1852.16,1218.47 1852.74,1218.53 1853.33,1219.33 1853.92,1220.05 1854.5,1219.55 1855.09,1216.77 1855.68,1217.8 1856.26,1215 1856.85,1216.15 1857.43,1214.9 1858.02,1217.14 1858.61,1217.03 1859.19,1216.66 1859.78,1214.93 1860.37,1213.49 1860.95,1209.94 1861.54,1210.15 1862.13,1210.02 1862.71,1211.19 1863.3,1214.71 1863.88,1215.99 1864.47,1215.75 1865.06,1212.95 1865.64,1209.32 1866.23,1208.48 1866.82,1210.12 1867.4,1211.67 1867.99,1209.08 1868.58,1210.47 1869.16,1210.74 1869.75,1210.73 1870.34,1208.12 1870.92,1208.45 1871.51,1208.63 1872.09,1205.15 1872.68,1206.75 1873.27,1207.07 1873.85,1207.42 1874.44,1205.24 1875.03,1208 1875.61,1208.55 1876.2,1209.17 1876.79,1208.33 1877.37,1206.06 1877.96,1207.46 1878.55,1205.36 1879.13,1208.1 1879.72,1210.69 1880.3,1210.02 1880.89,1210.13 1881.48,1211.46 1882.06,1212.77 1882.65,1212.55 1883.24,1211.42 1883.82,1212.74 1884.41,1210.73 1885,1213.4 1885.58,1215.76 1886.17,1215.66 1886.76,1215.35 1887.34,1215.11 1887.93,1217.48 1888.51,1216 1889.1,1217.05 1889.69,1214.47 1890.27,1214.41 1890.86,1214.3 1891.45,1213 1892.03,1213.2 1892.62,1214.28 1893.21,1216.48 1893.79,1215.09 1894.38,1213.81 1894.96,1213.45 1895.55,1213.14 1896.14,1213.18 1896.72,1210.68 1897.31,1208.5 1897.9,1208.8 1898.48,1207.87 1899.07,1208.05 1899.66,1209.34 1900.24,1208.22 1900.83,1208.47 1901.42,1208.63 1902,1208.95 1902.59,1207.61 1903.17,1211.56 1903.76,1212.53 1904.35,1211.47 1904.93,1209.09 1905.52,1210.48 1906.11,1209.67 1906.69,1211.17 1907.28,1213.68 1907.87,1214.56 1908.45,1214.36 1909.04,1214.27 1909.63,1214.26 1910.21,1212.72 1910.8,1214.85 1911.38,1214.8 1911.97,1214.52 1912.56,1219.2 1913.14,1215.34 1913.73,1215.07 1914.32,1213.84 1914.9,1214.98 1915.49,1214.73 1916.08,1217.28 1916.66,1213.81 1917.25,1216.1 1917.83,1214.88 1918.42,1213.61 1919.01,1213.52 1919.59,1215.92 1920.18,1213.38 1920.77,1212.47 1921.35,1212.84 1921.94,1210.52 1922.53,1210.76 1923.11,1208.77 1923.7,1211.69 1924.29,1211.61 1924.87,1210.52 1925.46,1210.5 1926.04,1208.27 1926.63,1212.13 1927.22,1212.19 1927.8,1211.09 1928.39,1212.16 1928.98,1212.18 1929.56,1212.28 1930.15,1209.78 1930.74,1209.99 1931.32,1210.13 1931.91,1211.4 1932.5,1212.81 1933.08,1212.85 1933.67,1211.56 1934.25,1212.93 1934.84,1214.13 1935.43,1213.14 1936.01,1213.24 1936.6,1212.34 1937.19,1212.28 1937.77,1211.43 1938.36,1214.01 1938.95,1216.1 1939.53,1214.92 1940.12,1213.46 1940.71,1213.28 1941.29,1213.4 1941.88,1213.59 1942.46,1213.78 1943.05,1214.91 1943.64,1213.58 1944.22,1214.81 1944.81,1214.94 1945.4,1214.84 1945.98,1214.68 1946.57,1212.54 1947.16,1211.46 1947.74,1211.81 1948.33,1210.61 1948.91,1209.7 1949.5,1207.46 1950.09,1207.84 1950.67,1207.94 1951.26,1208 1951.85,1209.39 1952.43,1210.87 1953.02,1210.82 1953.61,1210.85 1954.19,1210.93 1954.78,1210.93 1955.37,1210.18 1955.95,1208.85 1956.54,1207.88 1957.12,1208.21 1957.71,1208.6 1958.3,1207.64 1958.88,1212.44 1959.47,1212.52 1960.06,1212.61 1960.64,1212.73 1961.23,1213.15 1961.82,1213.31 1962.4,1210.99 1962.99,1212.03 1963.58,1213.48 1964.16,1213.57 1964.75,1213.3 1965.33,1213.25 1965.92,1215.56 1966.51,1215.35 1967.09,1213.12 1967.68,1210.78 1968.27,1210.8 1968.85,1215.93 1969.44,1216.73 1970.03,1217.69 1970.61,1217.45 1971.2,1218.29 1971.78,1218.9 1972.37,1219.71 1972.96,1217.94 1973.54,1218.97 1974.13,1220.98 1974.72,1219.48 1975.3,1217.91 1975.89,1216.57 1976.48,1216.25 1977.06,1217.02 1977.65,1219.32 1978.24,1218.78 1978.82,1219.74 1979.41,1221.79 1979.99,1218.95 1980.58,1218.92 1981.17,1216.42 1981.75,1216.21 1982.34,1217.35 1982.93,1215.86 1983.51,1217.03 1984.1,1216.77 1984.69,1216.82 1985.27,1216.48 1985.86,1214.94 1986.45,1213.67 1987.03,1213.61 1987.62,1213.61 1988.2,1212.67 1988.79,1212.53 1989.38,1211.42 1989.96,1211.44 1990.55,1212.85 1991.14,1214.13 1991.72,1212.98 1992.31,1211.87 1992.9,1211.8 1993.48,1215.77 1994.07,1216.95 1994.65,1217.93 1995.24,1216.62 1995.83,1215.27 1996.41,1217.57 1997,1216.65 1997.59,1216.44 1998.17,1216.45 1998.76,1218.6 1999.35,1219.27 1999.93,1219.09 2000.52,1221.13 2001.11,1219.74 2001.69,1218.27 2002.28,1219.44 2002.86,1215.63 2003.45,1215.36 2004.04,1212.74 2004.62,1213.75 2005.21,1215.08 2005.8,1215.08 2006.38,1212.61 2006.97,1214.98 2007.56,1214.56 2008.14,1212.08 2008.73,1207.6 2009.32,1211.46 2009.9,1213.01 2010.49,1213.05 2011.07,1214.08 2011.66,1212.5 2012.25,1212.36 2012.83,1212.51 2013.42,1211.41 2014.01,1212.67 2014.59,1212.56 2015.18,1211.35 2015.77,1212.44 2016.35,1212.35 2016.94,1210.96 2017.53,1213.34 2018.11,1214.53 2018.7,1214.21 2019.28,1214.26 2019.87,1214.14 2020.46,1213.21 2021.04,1214.66 2021.63,1212.21 2022.22,1212.41 2022.8,1211.2 2023.39,1208.7 2023.98,1208.9 2024.56,1205.51 2025.15,1210.58 2025.73,1212.12 2026.32,1211.04 2026.91,1213.38 2027.49,1213.21 2028.08,1215.78 2028.67,1219.31 2029.25,1221.26 2029.84,1220.79 2030.43,1222.07 2031.01,1218.29 2031.6,1217.9 2032.19,1218.8 2032.77,1218.43 2033.36,1217.03 2033.94,1217.84 2034.53,1218.73 2035.12,1217.22 2035.7,1218.21 2036.29,1217.92 2036.88,1216.45 2037.46,1215.98 2038.05,1214.25 2038.64,1215.09 2039.22,1213.65 2039.81,1213.66 2040.4,1212.49 2040.98,1212.75 2041.57,1213.6 2042.15,1212.34 2042.74,1210.08 2043.33,1211.41 2043.91,1210.22 2044.5,1209.14 2045.09,1208.13 2045.67,1207.17 2046.26,1207.56 2046.85,1207.84 2047.43,1208.41 2048.02,1211.09 2048.6,1214.86 2049.19,1213.43 2049.78,1214.74 2050.36,1216.9 2050.95,1216.68 2051.54,1217.71 2052.12,1217.2 2052.71,1215.95 2053.3,1215.76 2053.88,1215.52 2054.47,1214.3 2055.06,1210.89 2055.64,1212.29 2056.23,1210.9 2056.81,1210.99 2057.4,1211.09 2057.99,1212.54 2058.57,1214.95 2059.16,1213.73 2059.75,1213.72 2060.33,1211.45 2060.92,1212.94 2061.51,1214.09 2062.09,1213.24 2062.68,1214.64 2063.27,1215.71 2063.85,1214.6 2064.44,1215.85 2065.02,1217.08 2065.61,1218.14 2066.2,1217.84 2066.78,1218.79 2067.37,1217.21 2067.96,1217.04 2068.54,1217.81 2069.13,1217.43 2069.72,1214.83 2070.3,1213.41 2070.89,1215.72 2071.48,1215.91 2072.06,1215.81 2072.65,1215.61 2073.23,1215.75 2073.82,1214.31 2074.41,1216.74 2074.99,1214.24 2075.58,1214.07 2076.17,1215.1 2076.75,1214.83 2077.34,1215.88 2077.93,1215.89 2078.51,1214.6 2079.1,1214.32 2079.68,1214.07 2080.27,1213.95 2080.86,1211.64 2081.44,1211.71 2082.03,1211.81 2082.62,1211.81 2083.2,1212.04 2083.79,1212.09 2084.38,1211.11 2084.96,1212.26 2085.55,1210.93 2086.14,1211.24 2086.72,1211.31 2087.31,1209.03 2087.89,1209.03 2088.48,1209.09 2089.07,1207.98 2089.65,1209.47 2090.24,1206.23 2090.83,1206.52 2091.41,1206.78 2092,1210.79 2092.59,1210.91 2093.17,1212.22 2093.76,1212.24 2094.35,1212.45 2094.93,1213.6 2095.52,1211.32 2096.1,1210.55 2096.69,1211.8 2097.28,1212.82 2097.86,1212.75 2098.45,1214.12 2099.04,1212.73 2099.62,1213.8 2100.21,1214.97 2100.8,1214.89 2101.38,1212.37 2101.97,1213.31 2102.55,1214.26 2103.14,1215.35 2103.73,1217.64 2104.31,1217.23 2104.9,1214.7 2105.49,1215.77 2106.07,1214.31 2106.66,1214.56 2107.25,1215.6 2107.83,1215.34 2108.42,1214.14 2109.01,1212.79 2109.59,1212.99 2110.18,1212.63 2110.76,1211.28 2111.35,1210.18 2111.94,1208.07 2112.52,1209.42 2113.11,1208.55 2113.7,1210.1 2114.28,1212.81 2114.87,1211.82 2115.46,1215.34 2116.04,1214.87 2116.63,1215.76 2117.22,1215.35 2117.8,1218.77 2118.39,1216.26 2118.97,1217.22 2119.56,1218.31 2120.15,1221.79 2120.73,1220.29 2121.32,1222.17 2121.91,1218.31 2122.49,1219.06 2123.08,1218.95 2123.67,1215.01 2124.25,1214.88 2124.84,1214.85 2125.42,1213.55 2126.01,1212.33 2126.6,1210.18 2127.18,1211.46 2127.77,1212.82 2128.36,1216.34 2128.94,1214.99 2129.53,1217.13 2130.12,1218.15 2130.7,1220.16 2131.29,1218.63 2131.88,1218.42 2132.46,1217.97 2133.05,1217.64 2133.63,1219.75 2134.22,1218.21 2134.81,1220.24 2135.39,1221.09 2135.98,1218.46 2136.57,1213.42 2137.15,1213.11 2137.74,1214.28 2138.33,1215.56 2138.91,1216.53 2139.5,1214.24 2140.09,1215.49 2140.67,1214.18 2141.26,1213.08 2141.84,1214.45 2142.43,1215.23 2143.02,1217.54 2143.6,1214.96 2144.19,1211.07 2144.78,1209.71 2145.36,1209.68 2145.95,1211.02 2146.54,1210.21 2147.12,1208.13 2147.71,1207.09 2148.3,1207.41 2148.88,1207.82 2149.47,1208.26 2150.05,1209.89 2150.64,1209.09 2151.23,1210.26 2151.81,1212.77 2152.4,1212.67 2152.99,1209.25 2153.57,1210.67 2154.16,1210.77 2154.75,1211.05 2155.33,1210.12 2155.92,1210.35 2156.5,1209.3 2157.09,1209.6 2157.68,1208.51 2158.26,1208.71 \"/>\n<path clip-path=\"url(#clip132)\" d=\"M986.025 1213.56 L986.612 1213.56 L987.198 1213.56 L987.785 1213.56 L988.371 1213.56 L988.957 1213.56 L989.544 1213.56 L990.13 1213.56 L990.717 1213.56 L991.303 1213.56 L991.889 1213.56 L992.476 1213.56 L993.062 1213.56 L993.649 1213.56 L994.235 1213.56 L994.822 1213.56 L995.408 1213.56 L995.994 1213.56 L996.581 1213.56 L997.167 1213.56 L997.754 1213.56 L998.34 1213.56 L998.926 1213.56 L999.513 1213.56 L1000.1 1213.56 L1000.69 1213.56 L1001.27 1213.56 L1001.86 1213.56 L1002.44 1213.56 L1003.03 1213.56 L1003.62 1213.56 L1004.2 1213.56 L1004.79 1213.56 L1005.38 1213.56 L1005.96 1213.56 L1006.55 1213.56 L1007.14 1213.56 L1007.72 1213.56 L1008.31 1213.56 L1008.9 1213.56 L1009.48 1213.56 L1010.07 1213.56 L1010.65 1213.56 L1011.24 1213.56 L1011.83 1213.56 L1012.41 1213.56 L1013 1213.56 L1013.59 1213.56 L1014.17 1213.56 L1014.76 1213.56 L1015.35 1213.56 L1015.93 1213.56 L1016.52 1213.56 L1017.11 1213.56 L1017.69 1213.56 L1018.28 1213.56 L1018.86 1213.56 L1019.45 1213.56 L1020.04 1213.56 L1020.62 1213.56 L1021.21 1213.56 L1021.8 1213.56 L1022.38 1213.56 L1022.97 1213.56 L1023.56 1213.56 L1024.14 1213.56 L1024.73 1213.56 L1025.32 1213.56 L1025.9 1213.56 L1026.49 1213.56 L1027.07 1213.56 L1027.66 1213.56 L1028.25 1213.56 L1028.83 1213.56 L1029.42 1213.56 L1030.01 1213.56 L1030.59 1213.56 L1031.18 1213.56 L1031.77 1213.56 L1032.35 1213.56 L1032.94 1213.56 L1033.52 1213.56 L1034.11 1213.56 L1034.7 1213.56 L1035.28 1213.56 L1035.87 1213.56 L1036.46 1213.56 L1037.04 1213.56 L1037.63 1213.56 L1038.22 1213.56 L1038.8 1213.56 L1039.39 1213.56 L1039.98 1213.56 L1040.56 1213.56 L1041.15 1213.56 L1041.73 1213.56 L1042.32 1213.56 L1042.91 1213.56 L1043.49 1213.56 L1044.08 1213.56 L1044.67 1213.56 L1045.25 1213.56 L1045.84 1213.56 L1046.43 1213.56 L1047.01 1213.56 L1047.6 1213.56 L1048.19 1213.56 L1048.77 1213.56 L1049.36 1213.56 L1049.94 1213.56 L1050.53 1213.56 L1051.12 1213.56 L1051.7 1213.56 L1052.29 1213.56 L1052.88 1213.56 L1053.46 1213.56 L1054.05 1213.56 L1054.64 1213.56 L1055.22 1213.56 L1055.81 1213.56 L1056.39 1213.56 L1056.98 1213.56 L1057.57 1213.56 L1058.15 1213.56 L1058.74 1213.56 L1059.33 1213.56 L1059.91 1213.56 L1060.5 1213.56 L1061.09 1213.56 L1061.67 1213.56 L1062.26 1213.56 L1062.85 1213.56 L1063.43 1213.56 L1064.02 1213.56 L1064.6 1213.56 L1065.19 1213.56 L1065.78 1213.56 L1066.36 1213.56 L1066.95 1213.56 L1067.54 1213.56 L1068.12 1213.56 L1068.71 1213.56 L1069.3 1213.56 L1069.88 1213.56 L1070.47 1213.56 L1071.06 1213.56 L1071.64 1213.56 L1072.23 1213.56 L1072.81 1213.56 L1073.4 1213.56 L1073.99 1213.56 L1074.57 1213.56 L1075.16 1213.56 L1075.75 1213.56 L1076.33 1213.56 L1076.92 1213.56 L1077.51 1213.56 L1078.09 1213.56 L1078.68 1213.56 L1079.26 1213.56 L1079.85 1213.56 L1080.44 1213.56 L1081.02 1213.56 L1081.61 1213.56 L1082.2 1213.56 L1082.78 1213.56 L1083.37 1213.56 L1083.96 1213.56 L1084.54 1213.56 L1085.13 1213.56 L1085.72 1213.56 L1086.3 1213.56 L1086.89 1213.56 L1087.47 1213.56 L1088.06 1213.56 L1088.65 1213.56 L1089.23 1213.56 L1089.82 1213.56 L1090.41 1213.56 L1090.99 1213.56 L1091.58 1213.56 L1092.17 1213.56 L1092.75 1213.56 L1093.34 1213.56 L1093.93 1213.56 L1094.51 1213.56 L1095.1 1213.56 L1095.68 1213.56 L1096.27 1213.56 L1096.86 1213.56 L1097.44 1213.56 L1098.03 1213.56 L1098.62 1213.56 L1099.2 1213.56 L1099.79 1213.56 L1100.38 1213.56 L1100.96 1213.56 L1101.55 1213.56 L1102.14 1213.56 L1102.72 1213.56 L1103.31 1213.56 L1103.89 1213.56 L1104.48 1213.56 L1105.07 1213.56 L1105.65 1213.56 L1106.24 1213.56 L1106.83 1213.56 L1107.41 1213.56 L1108 1213.56 L1108.59 1213.56 L1109.17 1213.56 L1109.76 1213.56 L1110.34 1213.56 L1110.93 1213.56 L1111.52 1213.56 L1112.1 1213.56 L1112.69 1213.56 L1113.28 1213.56 L1113.86 1213.56 L1114.45 1213.56 L1115.04 1213.56 L1115.62 1213.56 L1116.21 1213.56 L1116.8 1213.56 L1117.38 1213.56 L1117.97 1213.56 L1118.55 1213.56 L1119.14 1213.56 L1119.73 1213.56 L1120.31 1213.56 L1120.9 1213.56 L1121.49 1213.56 L1122.07 1213.56 L1122.66 1213.56 L1123.25 1213.56 L1123.83 1213.56 L1124.42 1213.56 L1125.01 1213.56 L1125.59 1213.56 L1126.18 1213.56 L1126.76 1213.56 L1127.35 1213.56 L1127.94 1213.56 L1128.52 1213.56 L1129.11 1213.56 L1129.7 1213.56 L1130.28 1213.56 L1130.87 1213.56 L1131.46 1213.56 L1132.04 1213.56 L1132.63 1213.56 L1133.21 1213.56 L1133.8 1213.56 L1134.39 1213.56 L1134.97 1213.56 L1135.56 1213.56 L1136.15 1213.56 L1136.73 1213.56 L1137.32 1213.56 L1137.91 1213.56 L1138.49 1213.56 L1139.08 1213.56 L1139.67 1213.56 L1140.25 1213.56 L1140.84 1213.56 L1141.42 1213.56 L1142.01 1213.56 L1142.6 1213.56 L1143.18 1213.56 L1143.77 1213.56 L1144.36 1213.56 L1144.94 1213.56 L1145.53 1213.56 L1146.12 1213.56 L1146.7 1213.56 L1147.29 1213.56 L1147.88 1213.56 L1148.46 1213.56 L1149.05 1213.56 L1149.63 1213.56 L1150.22 1213.56 L1150.81 1213.56 L1151.39 1213.56 L1151.98 1213.56 L1152.57 1213.56 L1153.15 1213.56 L1153.74 1213.56 L1154.33 1213.56 L1154.91 1213.56 L1155.5 1213.56 L1156.09 1213.56 L1156.67 1213.56 L1157.26 1213.56 L1157.84 1213.56 L1158.43 1213.56 L1159.02 1213.56 L1159.6 1213.56 L1160.19 1213.56 L1160.78 1213.56 L1161.36 1213.56 L1161.95 1213.56 L1162.54 1213.56 L1163.12 1213.56 L1163.71 1213.56 L1164.29 1213.56 L1164.88 1213.56 L1165.47 1213.56 L1166.05 1213.56 L1166.64 1213.56 L1167.23 1213.56 L1167.81 1213.56 L1168.4 1213.56 L1168.99 1213.56 L1169.57 1213.56 L1170.16 1213.56 L1170.75 1213.56 L1171.33 1213.56 L1171.92 1213.56 L1172.5 1213.56 L1173.09 1213.56 L1173.68 1213.56 L1174.26 1213.56 L1174.85 1213.56 L1175.44 1213.56 L1176.02 1213.56 L1176.61 1213.56 L1177.2 1213.56 L1177.78 1213.56 L1178.37 1213.56 L1178.96 1213.56 L1179.54 1213.56 L1180.13 1213.56 L1180.71 1213.56 L1181.3 1213.56 L1181.89 1213.56 L1182.47 1213.56 L1183.06 1213.56 L1183.65 1213.56 L1184.23 1213.56 L1184.82 1213.56 L1185.41 1213.56 L1185.99 1213.56 L1186.58 1213.56 L1187.16 1213.56 L1187.75 1213.56 L1188.34 1213.56 L1188.92 1213.56 L1189.51 1213.56 L1190.1 1213.56 L1190.68 1213.56 L1191.27 1213.56 L1191.86 1213.56 L1192.44 1213.56 L1193.03 1213.56 L1193.62 1213.56 L1194.2 1213.56 L1194.79 1213.56 L1195.37 1213.56 L1195.96 1213.56 L1196.55 1213.56 L1197.13 1213.56 L1197.72 1213.56 L1198.31 1213.56 L1198.89 1213.56 L1199.48 1213.56 L1200.07 1213.56 L1200.65 1213.56 L1201.24 1213.56 L1201.83 1213.56 L1202.41 1213.56 L1203 1213.56 L1203.58 1213.56 L1204.17 1213.56 L1204.76 1213.56 L1205.34 1213.56 L1205.93 1213.56 L1206.52 1213.56 L1207.1 1213.56 L1207.69 1213.56 L1208.28 1213.56 L1208.86 1213.56 L1209.45 1213.56 L1210.03 1213.56 L1210.62 1213.56 L1211.21 1213.56 L1211.79 1213.56 L1212.38 1213.56 L1212.97 1213.56 L1213.55 1213.56 L1214.14 1213.56 L1214.73 1213.56 L1215.31 1213.56 L1215.9 1213.56 L1216.49 1213.56 L1217.07 1213.56 L1217.66 1213.56 L1218.24 1213.56 L1218.83 1213.56 L1219.42 1213.56 L1220 1213.56 L1220.59 1213.56 L1221.18 1213.56 L1221.76 1213.56 L1222.35 1213.56 L1222.94 1213.56 L1223.52 1213.56 L1224.11 1213.56 L1224.7 1213.56 L1225.28 1213.56 L1225.87 1213.56 L1226.45 1213.56 L1227.04 1213.56 L1227.63 1213.56 L1228.21 1213.56 L1228.8 1213.56 L1229.39 1213.56 L1229.97 1213.56 L1230.56 1213.56 L1231.15 1213.56 L1231.73 1213.56 L1232.32 1213.56 L1232.91 1213.56 L1233.49 1213.56 L1234.08 1213.56 L1234.66 1213.56 L1235.25 1213.56 L1235.84 1213.56 L1236.42 1213.56 L1237.01 1213.56 L1237.6 1213.56 L1238.18 1213.56 L1238.77 1213.56 L1239.36 1213.56 L1239.94 1213.56 L1240.53 1213.56 L1241.11 1213.56 L1241.7 1213.56 L1242.29 1213.56 L1242.87 1213.56 L1243.46 1213.56 L1244.05 1213.56 L1244.63 1213.56 L1245.22 1213.56 L1245.81 1213.56 L1246.39 1213.56 L1246.98 1213.56 L1247.57 1213.56 L1248.15 1213.56 L1248.74 1213.56 L1249.32 1213.56 L1249.91 1213.56 L1250.5 1213.56 L1251.08 1213.56 L1251.67 1213.56 L1252.26 1213.56 L1252.84 1213.56 L1253.43 1213.56 L1254.02 1213.56 L1254.6 1213.56 L1255.19 1213.56 L1255.78 1213.56 L1256.36 1213.56 L1256.95 1213.56 L1257.53 1213.56 L1258.12 1213.56 L1258.71 1213.56 L1259.29 1213.56 L1259.88 1213.56 L1260.47 1213.56 L1261.05 1213.56 L1261.64 1213.56 L1262.23 1213.56 L1262.81 1213.56 L1263.4 1213.56 L1263.98 1213.56 L1264.57 1213.56 L1265.16 1213.56 L1265.74 1213.56 L1266.33 1213.56 L1266.92 1213.56 L1267.5 1213.56 L1268.09 1213.56 L1268.68 1213.56 L1269.26 1213.56 L1269.85 1213.56 L1270.44 1213.56 L1271.02 1213.56 L1271.61 1213.56 L1272.19 1213.56 L1272.78 1213.56 L1273.37 1213.56 L1273.95 1213.56 L1274.54 1213.56 L1275.13 1213.56 L1275.71 1213.56 L1276.3 1213.56 L1276.89 1213.56 L1277.47 1213.56 L1278.06 1213.56 L1278.65 1213.56 L1279.23 1213.56 L1279.82 1213.56 L1280.4 1213.56 L1280.99 1213.56 L1281.58 1213.56 L1282.16 1213.56 L1282.75 1213.56 L1283.34 1213.56 L1283.92 1213.56 L1284.51 1213.56 L1285.1 1213.56 L1285.68 1213.56 L1286.27 1213.56 L1286.86 1213.56 L1287.44 1213.56 L1288.03 1213.56 L1288.61 1213.56 L1289.2 1213.56 L1289.79 1213.56 L1290.37 1213.56 L1290.96 1213.56 L1291.55 1213.56 L1292.13 1213.56 L1292.72 1213.56 L1293.31 1213.56 L1293.89 1213.56 L1294.48 1213.56 L1295.06 1213.56 L1295.65 1213.56 L1296.24 1213.56 L1296.82 1213.56 L1297.41 1213.56 L1298 1213.56 L1298.58 1213.56 L1299.17 1213.56 L1299.76 1213.56 L1300.34 1213.56 L1300.93 1213.56 L1301.52 1213.56 L1302.1 1213.56 L1302.69 1213.56 L1303.27 1213.56 L1303.86 1213.56 L1304.45 1213.56 L1305.03 1213.56 L1305.62 1213.56 L1306.21 1213.56 L1306.79 1213.56 L1307.38 1213.56 L1307.97 1213.56 L1308.55 1213.56 L1309.14 1213.56 L1309.73 1213.56 L1310.31 1213.56 L1310.9 1213.56 L1311.48 1213.56 L1312.07 1213.56 L1312.66 1213.56 L1313.24 1213.56 L1313.83 1213.56 L1314.42 1213.56 L1315 1213.56 L1315.59 1213.56 L1316.18 1213.56 L1316.76 1213.56 L1317.35 1213.56 L1317.93 1213.56 L1318.52 1213.56 L1319.11 1213.56 L1319.69 1213.56 L1320.28 1213.56 L1320.87 1213.56 L1321.45 1213.56 L1322.04 1213.56 L1322.63 1213.56 L1323.21 1213.56 L1323.8 1213.56 L1324.39 1213.56 L1324.97 1213.56 L1325.56 1213.56 L1326.14 1213.56 L1326.73 1213.56 L1327.32 1213.56 L1327.9 1213.56 L1328.49 1213.56 L1329.08 1213.56 L1329.66 1213.56 L1330.25 1213.56 L1330.84 1213.56 L1331.42 1213.56 L1332.01 1213.56 L1332.6 1213.56 L1333.18 1213.56 L1333.77 1213.56 L1334.35 1213.56 L1334.94 1213.56 L1335.53 1213.56 L1336.11 1213.56 L1336.7 1213.56 L1337.29 1213.56 L1337.87 1213.56 L1338.46 1213.56 L1339.05 1213.56 L1339.63 1213.56 L1340.22 1213.56 L1340.8 1213.56 L1341.39 1213.56 L1341.98 1213.56 L1342.56 1213.56 L1343.15 1213.56 L1343.74 1213.56 L1344.32 1213.56 L1344.91 1213.56 L1345.5 1213.56 L1346.08 1213.56 L1346.67 1213.56 L1347.26 1213.56 L1347.84 1213.56 L1348.43 1213.56 L1349.01 1213.56 L1349.6 1213.56 L1350.19 1213.56 L1350.77 1213.56 L1351.36 1213.56 L1351.95 1213.56 L1352.53 1213.56 L1353.12 1213.56 L1353.71 1213.56 L1354.29 1213.56 L1354.88 1213.56 L1355.47 1213.56 L1356.05 1213.56 L1356.64 1213.56 L1357.22 1213.56 L1357.81 1213.56 L1358.4 1213.56 L1358.98 1213.56 L1359.57 1213.56 L1360.16 1213.56 L1360.74 1213.56 L1361.33 1213.56 L1361.92 1213.56 L1362.5 1213.56 L1363.09 1213.56 L1363.68 1213.56 L1364.26 1213.56 L1364.85 1213.56 L1365.43 1213.56 L1366.02 1213.56 L1366.61 1213.56 L1367.19 1213.56 L1367.78 1213.56 L1368.37 1213.56 L1368.95 1213.56 L1369.54 1213.56 L1370.13 1213.56 L1370.71 1213.56 L1371.3 1213.56 L1371.88 1213.56 L1372.47 1213.56 L1373.06 1213.56 L1373.64 1213.56 L1374.23 1213.56 L1374.82 1213.56 L1375.4 1213.56 L1375.99 1213.56 L1376.58 1213.56 L1377.16 1213.56 L1377.75 1213.56 L1378.34 1213.56 L1378.92 1213.56 L1379.51 1213.56 L1380.09 1213.56 L1380.68 1213.56 L1381.27 1213.56 L1381.85 1213.56 L1382.44 1213.56 L1383.03 1213.56 L1383.61 1213.56 L1384.2 1213.56 L1384.79 1213.56 L1385.37 1213.56 L1385.96 1213.56 L1386.55 1213.56 L1387.13 1213.56 L1387.72 1213.56 L1388.3 1213.56 L1388.89 1213.56 L1389.48 1213.56 L1390.06 1213.56 L1390.65 1213.56 L1391.24 1213.56 L1391.82 1213.56 L1392.41 1213.56 L1393 1213.56 L1393.58 1213.56 L1394.17 1213.56 L1394.75 1213.56 L1395.34 1213.56 L1395.93 1213.56 L1396.51 1213.56 L1397.1 1213.56 L1397.69 1213.56 L1398.27 1213.56 L1398.86 1213.56 L1399.45 1213.56 L1400.03 1213.56 L1400.62 1213.56 L1401.21 1213.56 L1401.79 1213.56 L1402.38 1213.56 L1402.96 1213.56 L1403.55 1213.56 L1404.14 1213.56 L1404.72 1213.56 L1405.31 1213.56 L1405.9 1213.56 L1406.48 1213.56 L1407.07 1213.56 L1407.66 1213.56 L1408.24 1213.56 L1408.83 1213.56 L1409.42 1213.56 L1410 1213.56 L1410.59 1213.56 L1411.17 1213.56 L1411.76 1213.56 L1412.35 1213.56 L1412.93 1213.56 L1413.52 1213.56 L1414.11 1213.56 L1414.69 1213.56 L1415.28 1213.56 L1415.87 1213.56 L1416.45 1213.56 L1417.04 1213.56 L1417.63 1213.56 L1418.21 1213.56 L1418.8 1213.56 L1419.38 1213.56 L1419.97 1213.56 L1420.56 1213.56 L1421.14 1213.56 L1421.73 1213.56 L1422.32 1213.56 L1422.9 1213.56 L1423.49 1213.56 L1424.08 1213.56 L1424.66 1213.56 L1425.25 1213.56 L1425.83 1213.56 L1426.42 1213.56 L1427.01 1213.56 L1427.59 1213.56 L1428.18 1213.56 L1428.77 1213.56 L1429.35 1213.56 L1429.94 1213.56 L1430.53 1213.56 L1431.11 1213.56 L1431.7 1213.56 L1432.29 1213.56 L1432.87 1213.56 L1433.46 1213.56 L1434.04 1213.56 L1434.63 1213.56 L1435.22 1213.56 L1435.8 1213.56 L1436.39 1213.56 L1436.98 1213.56 L1437.56 1213.56 L1438.15 1213.56 L1438.74 1213.56 L1439.32 1213.56 L1439.91 1213.56 L1440.5 1213.56 L1441.08 1213.56 L1441.67 1213.56 L1442.25 1213.56 L1442.84 1213.56 L1443.43 1213.56 L1444.01 1213.56 L1444.6 1213.56 L1445.19 1213.56 L1445.77 1213.56 L1446.36 1213.56 L1446.95 1213.56 L1447.53 1213.56 L1448.12 1213.56 L1448.7 1213.56 L1449.29 1213.56 L1449.88 1213.56 L1450.46 1213.56 L1451.05 1213.56 L1451.64 1213.56 L1452.22 1213.56 L1452.81 1213.56 L1453.4 1213.56 L1453.98 1213.56 L1454.57 1213.56 L1455.16 1213.56 L1455.74 1213.56 L1456.33 1213.56 L1456.91 1213.56 L1457.5 1213.56 L1458.09 1213.56 L1458.67 1213.56 L1459.26 1213.56 L1459.85 1213.56 L1460.43 1213.56 L1461.02 1213.56 L1461.61 1213.56 L1462.19 1213.56 L1462.78 1213.56 L1463.37 1213.56 L1463.95 1213.56 L1464.54 1213.56 L1465.12 1213.56 L1465.71 1213.56 L1466.3 1213.56 L1466.88 1213.56 L1467.47 1213.56 L1468.06 1213.56 L1468.64 1213.56 L1469.23 1213.56 L1469.82 1213.56 L1470.4 1213.56 L1470.99 1213.56 L1471.57 1213.56 L1472.16 1213.56 L1472.75 1213.56 L1473.33 1213.56 L1473.92 1213.56 L1474.51 1213.56 L1475.09 1213.56 L1475.68 1213.56 L1476.27 1213.56 L1476.85 1213.56 L1477.44 1213.56 L1478.03 1213.56 L1478.61 1213.56 L1479.2 1213.56 L1479.78 1213.56 L1480.37 1213.56 L1480.96 1213.56 L1481.54 1213.56 L1482.13 1213.56 L1482.72 1213.56 L1483.3 1213.56 L1483.89 1213.56 L1484.48 1213.56 L1485.06 1213.56 L1485.65 1213.56 L1486.24 1213.56 L1486.82 1213.56 L1487.41 1213.56 L1487.99 1213.56 L1488.58 1213.56 L1489.17 1213.56 L1489.75 1213.56 L1490.34 1213.56 L1490.93 1213.56 L1491.51 1213.56 L1492.1 1213.56 L1492.69 1213.56 L1493.27 1213.56 L1493.86 1213.56 L1494.45 1213.56 L1495.03 1213.56 L1495.62 1213.56 L1496.2 1213.56 L1496.79 1213.56 L1497.38 1213.56 L1497.96 1213.56 L1498.55 1213.56 L1499.14 1213.56 L1499.72 1213.56 L1500.31 1213.56 L1500.9 1213.56 L1501.48 1213.56 L1502.07 1213.56 L1502.65 1213.56 L1503.24 1213.56 L1503.83 1213.56 L1504.41 1213.56 L1505 1213.56 L1505.59 1213.56 L1506.17 1213.56 L1506.76 1213.56 L1507.35 1213.56 L1507.93 1213.56 L1508.52 1213.56 L1509.11 1213.56 L1509.69 1213.56 L1510.28 1213.56 L1510.86 1213.56 L1511.45 1213.56 L1512.04 1213.56 L1512.62 1213.56 L1513.21 1213.56 L1513.8 1213.56 L1514.38 1213.56 L1514.97 1213.56 L1515.56 1213.56 L1516.14 1213.56 L1516.73 1213.56 L1517.32 1213.56 L1517.9 1213.56 L1518.49 1213.56 L1519.07 1213.56 L1519.66 1213.56 L1520.25 1213.56 L1520.83 1213.56 L1521.42 1213.56 L1522.01 1213.56 L1522.59 1213.56 L1523.18 1213.56 L1523.77 1213.56 L1524.35 1213.56 L1524.94 1213.56 L1525.52 1213.56 L1526.11 1213.56 L1526.7 1213.56 L1527.28 1213.56 L1527.87 1213.56 L1528.46 1213.56 L1529.04 1213.56 L1529.63 1213.56 L1530.22 1213.56 L1530.8 1213.56 L1531.39 1213.56 L1531.98 1213.56 L1532.56 1213.56 L1533.15 1213.56 L1533.73 1213.56 L1534.32 1213.56 L1534.91 1213.56 L1535.49 1213.56 L1536.08 1213.56 L1536.67 1213.56 L1537.25 1213.56 L1537.84 1213.56 L1538.43 1213.56 L1539.01 1213.56 L1539.6 1213.56 L1540.19 1213.56 L1540.77 1213.56 L1541.36 1213.56 L1541.94 1213.56 L1542.53 1213.56 L1543.12 1213.56 L1543.7 1213.56 L1544.29 1213.56 L1544.88 1213.56 L1545.46 1213.56 L1546.05 1213.56 L1546.64 1213.56 L1547.22 1213.56 L1547.81 1213.56 L1548.4 1213.56 L1548.98 1213.56 L1549.57 1213.56 L1550.15 1213.56 L1550.74 1213.56 L1551.33 1213.56 L1551.91 1213.56 L1552.5 1213.56 L1553.09 1213.56 L1553.67 1213.56 L1554.26 1213.56 L1554.85 1213.56 L1555.43 1213.56 L1556.02 1213.56 L1556.6 1213.56 L1557.19 1213.56 L1557.78 1213.56 L1558.36 1213.56 L1558.95 1213.56 L1559.54 1213.56 L1560.12 1213.56 L1560.71 1213.56 L1561.3 1213.56 L1561.88 1213.56 L1562.47 1213.56 L1563.06 1213.56 L1563.64 1213.56 L1564.23 1213.56 L1564.81 1213.56 L1565.4 1213.56 L1565.99 1213.56 L1566.57 1213.56 L1567.16 1213.56 L1567.75 1213.56 L1568.33 1213.56 L1568.92 1213.56 L1569.51 1213.56 L1570.09 1213.56 L1570.68 1213.56 L1571.27 1213.56 L1571.85 1213.56 L1572.44 1213.56 L1573.02 1213.56 L1573.61 1213.56 L1574.2 1213.56 L1574.78 1213.56 L1575.37 1213.56 L1575.96 1213.56 L1576.54 1213.56 L1577.13 1213.56 L1577.72 1213.56 L1578.3 1213.56 L1578.89 1213.56 L1579.47 1213.56 L1580.06 1213.56 L1580.65 1213.56 L1581.23 1213.56 L1581.82 1213.56 L1582.41 1213.56 L1582.99 1213.56 L1583.58 1213.56 L1584.17 1213.56 L1584.75 1213.56 L1585.34 1213.56 L1585.93 1213.56 L1586.51 1213.56 L1587.1 1213.56 L1587.68 1213.56 L1588.27 1213.56 L1588.86 1213.56 L1589.44 1213.56 L1590.03 1213.56 L1590.62 1213.56 L1591.2 1213.56 L1591.79 1213.56 L1592.38 1213.56 L1592.96 1213.56 L1593.55 1213.56 L1594.14 1213.56 L1594.72 1213.56 L1595.31 1213.56 L1595.89 1213.56 L1596.48 1213.56 L1597.07 1213.56 L1597.65 1213.56 L1598.24 1213.56 L1598.83 1213.56 L1599.41 1213.56 L1600 1213.56 L1600.59 1213.56 L1601.17 1213.56 L1601.76 1213.56 L1602.34 1213.56 L1602.93 1213.56 L1603.52 1213.56 L1604.1 1213.56 L1604.69 1213.56 L1605.28 1213.56 L1605.86 1213.56 L1606.45 1213.56 L1607.04 1213.56 L1607.62 1213.56 L1608.21 1213.56 L1608.8 1213.56 L1609.38 1213.56 L1609.97 1213.56 L1610.55 1213.56 L1611.14 1213.56 L1611.73 1213.56 L1612.31 1213.56 L1612.9 1213.56 L1613.49 1213.56 L1614.07 1213.56 L1614.66 1213.56 L1615.25 1213.56 L1615.83 1213.56 L1616.42 1213.56 L1617.01 1213.56 L1617.59 1213.56 L1618.18 1213.56 L1618.76 1213.56 L1619.35 1213.56 L1619.94 1213.56 L1620.52 1213.56 L1621.11 1213.56 L1621.7 1213.56 L1622.28 1213.56 L1622.87 1213.56 L1623.46 1213.56 L1624.04 1213.56 L1624.63 1213.56 L1625.22 1213.56 L1625.8 1213.56 L1626.39 1213.56 L1626.97 1213.56 L1627.56 1213.56 L1628.15 1213.56 L1628.73 1213.56 L1629.32 1213.56 L1629.91 1213.56 L1630.49 1213.56 L1631.08 1213.56 L1631.67 1213.56 L1632.25 1213.56 L1632.84 1213.56 L1633.42 1213.56 L1634.01 1213.56 L1634.6 1213.56 L1635.18 1213.56 L1635.77 1213.56 L1636.36 1213.56 L1636.94 1213.56 L1637.53 1213.56 L1638.12 1213.56 L1638.7 1213.56 L1639.29 1213.56 L1639.88 1213.56 L1640.46 1213.56 L1641.05 1213.56 L1641.63 1213.56 L1642.22 1213.56 L1642.81 1213.56 L1643.39 1213.56 L1643.98 1213.56 L1644.57 1213.56 L1645.15 1213.56 L1645.74 1213.56 L1646.33 1213.56 L1646.91 1213.56 L1647.5 1213.56 L1648.09 1213.56 L1648.67 1213.56 L1649.26 1213.56 L1649.84 1213.56 L1650.43 1213.56 L1651.02 1213.56 L1651.6 1213.56 L1652.19 1213.56 L1652.78 1213.56 L1653.36 1213.56 L1653.95 1213.56 L1654.54 1213.56 L1655.12 1213.56 L1655.71 1213.56 L1656.29 1213.56 L1656.88 1213.56 L1657.47 1213.56 L1658.05 1213.56 L1658.64 1213.56 L1659.23 1213.56 L1659.81 1213.56 L1660.4 1213.56 L1660.99 1213.56 L1661.57 1213.56 L1662.16 1213.56 L1662.75 1213.56 L1663.33 1213.56 L1663.92 1213.56 L1664.5 1213.56 L1665.09 1213.56 L1665.68 1213.56 L1666.26 1213.56 L1666.85 1213.56 L1667.44 1213.56 L1668.02 1213.56 L1668.61 1213.56 L1669.2 1213.56 L1669.78 1213.56 L1670.37 1213.56 L1670.96 1213.56 L1671.54 1213.56 L1672.13 1213.56 L1672.71 1213.56 L1673.3 1213.56 L1673.89 1213.56 L1674.47 1213.56 L1675.06 1213.56 L1675.65 1213.56 L1676.23 1213.56 L1676.82 1213.56 L1677.41 1213.56 L1677.99 1213.56 L1678.58 1213.56 L1679.17 1213.56 L1679.75 1213.56 L1680.34 1213.56 L1680.92 1213.56 L1681.51 1213.56 L1682.1 1213.56 L1682.68 1213.56 L1683.27 1213.56 L1683.86 1213.56 L1684.44 1213.56 L1685.03 1213.56 L1685.62 1213.56 L1686.2 1213.56 L1686.79 1213.56 L1687.37 1213.56 L1687.96 1213.56 L1688.55 1213.56 L1689.13 1213.56 L1689.72 1213.56 L1690.31 1213.56 L1690.89 1213.56 L1691.48 1213.56 L1692.07 1213.56 L1692.65 1213.56 L1693.24 1213.56 L1693.83 1213.56 L1694.41 1213.56 L1695 1213.56 L1695.58 1213.56 L1696.17 1213.56 L1696.76 1213.56 L1697.34 1213.56 L1697.93 1213.56 L1698.52 1213.56 L1699.1 1213.56 L1699.69 1213.56 L1700.28 1213.56 L1700.86 1213.56 L1701.45 1213.56 L1702.04 1213.56 L1702.62 1213.56 L1703.21 1213.56 L1703.79 1213.56 L1704.38 1213.56 L1704.97 1213.56 L1705.55 1213.56 L1706.14 1213.56 L1706.73 1213.56 L1707.31 1213.56 L1707.9 1213.56 L1708.49 1213.56 L1709.07 1213.56 L1709.66 1213.56 L1710.24 1213.56 L1710.83 1213.56 L1711.42 1213.56 L1712 1213.56 L1712.59 1213.56 L1713.18 1213.56 L1713.76 1213.56 L1714.35 1213.56 L1714.94 1213.56 L1715.52 1213.56 L1716.11 1213.56 L1716.7 1213.56 L1717.28 1213.56 L1717.87 1213.56 L1718.45 1213.56 L1719.04 1213.56 L1719.63 1213.56 L1720.21 1213.56 L1720.8 1213.56 L1721.39 1213.56 L1721.97 1213.56 L1722.56 1213.56 L1723.15 1213.56 L1723.73 1213.56 L1724.32 1213.56 L1724.91 1213.56 L1725.49 1213.56 L1726.08 1213.56 L1726.66 1213.56 L1727.25 1213.56 L1727.84 1213.56 L1728.42 1213.56 L1729.01 1213.56 L1729.6 1213.56 L1730.18 1213.56 L1730.77 1213.56 L1731.36 1213.56 L1731.94 1213.56 L1732.53 1213.56 L1733.11 1213.56 L1733.7 1213.56 L1734.29 1213.56 L1734.87 1213.56 L1735.46 1213.56 L1736.05 1213.56 L1736.63 1213.56 L1737.22 1213.56 L1737.81 1213.56 L1738.39 1213.56 L1738.98 1213.56 L1739.57 1213.56 L1740.15 1213.56 L1740.74 1213.56 L1741.32 1213.56 L1741.91 1213.56 L1742.5 1213.56 L1743.08 1213.56 L1743.67 1213.56 L1744.26 1213.56 L1744.84 1213.56 L1745.43 1213.56 L1746.02 1213.56 L1746.6 1213.56 L1747.19 1213.56 L1747.78 1213.56 L1748.36 1213.56 L1748.95 1213.56 L1749.53 1213.56 L1750.12 1213.56 L1750.71 1213.56 L1751.29 1213.56 L1751.88 1213.56 L1752.47 1213.56 L1753.05 1213.56 L1753.64 1213.56 L1754.23 1213.56 L1754.81 1213.56 L1755.4 1213.56 L1755.99 1213.56 L1756.57 1213.56 L1757.16 1213.56 L1757.74 1213.56 L1758.33 1213.56 L1758.92 1213.56 L1759.5 1213.56 L1760.09 1213.56 L1760.68 1213.56 L1761.26 1213.56 L1761.85 1213.56 L1762.44 1213.56 L1763.02 1213.56 L1763.61 1213.56 L1764.19 1213.56 L1764.78 1213.56 L1765.37 1213.56 L1765.95 1213.56 L1766.54 1213.56 L1767.13 1213.56 L1767.71 1213.56 L1768.3 1213.56 L1768.89 1213.56 L1769.47 1213.56 L1770.06 1213.56 L1770.65 1213.56 L1771.23 1213.56 L1771.82 1213.56 L1772.4 1213.56 L1772.99 1213.56 L1773.58 1213.56 L1774.16 1213.56 L1774.75 1213.56 L1775.34 1213.56 L1775.92 1213.56 L1776.51 1213.56 L1777.1 1213.56 L1777.68 1213.56 L1778.27 1213.56 L1778.86 1213.56 L1779.44 1213.56 L1780.03 1213.56 L1780.61 1213.56 L1781.2 1213.56 L1781.79 1213.56 L1782.37 1213.56 L1782.96 1213.56 L1783.55 1213.56 L1784.13 1213.56 L1784.72 1213.56 L1785.31 1213.56 L1785.89 1213.56 L1786.48 1213.56 L1787.06 1213.56 L1787.65 1213.56 L1788.24 1213.56 L1788.82 1213.56 L1789.41 1213.56 L1790 1213.56 L1790.58 1213.56 L1791.17 1213.56 L1791.76 1213.56 L1792.34 1213.56 L1792.93 1213.56 L1793.52 1213.56 L1794.1 1213.56 L1794.69 1213.56 L1795.27 1213.56 L1795.86 1213.56 L1796.45 1213.56 L1797.03 1213.56 L1797.62 1213.56 L1798.21 1213.56 L1798.79 1213.56 L1799.38 1213.56 L1799.97 1213.56 L1800.55 1213.56 L1801.14 1213.56 L1801.73 1213.56 L1802.31 1213.56 L1802.9 1213.56 L1803.48 1213.56 L1804.07 1213.56 L1804.66 1213.56 L1805.24 1213.56 L1805.83 1213.56 L1806.42 1213.56 L1807 1213.56 L1807.59 1213.56 L1808.18 1213.56 L1808.76 1213.56 L1809.35 1213.56 L1809.94 1213.56 L1810.52 1213.56 L1811.11 1213.56 L1811.69 1213.56 L1812.28 1213.56 L1812.87 1213.56 L1813.45 1213.56 L1814.04 1213.56 L1814.63 1213.56 L1815.21 1213.56 L1815.8 1213.56 L1816.39 1213.56 L1816.97 1213.56 L1817.56 1213.56 L1818.14 1213.56 L1818.73 1213.56 L1819.32 1213.56 L1819.9 1213.56 L1820.49 1213.56 L1821.08 1213.56 L1821.66 1213.56 L1822.25 1213.56 L1822.84 1213.56 L1823.42 1213.56 L1824.01 1213.56 L1824.6 1213.56 L1825.18 1213.56 L1825.77 1213.56 L1826.35 1213.56 L1826.94 1213.56 L1827.53 1213.56 L1828.11 1213.56 L1828.7 1213.56 L1829.29 1213.56 L1829.87 1213.56 L1830.46 1213.56 L1831.05 1213.56 L1831.63 1213.56 L1832.22 1213.56 L1832.81 1213.56 L1833.39 1213.56 L1833.98 1213.56 L1834.56 1213.56 L1835.15 1213.56 L1835.74 1213.56 L1836.32 1213.56 L1836.91 1213.56 L1837.5 1213.56 L1838.08 1213.56 L1838.67 1213.56 L1839.26 1213.56 L1839.84 1213.56 L1840.43 1213.56 L1841.01 1213.56 L1841.6 1213.56 L1842.19 1213.56 L1842.77 1213.56 L1843.36 1213.56 L1843.95 1213.56 L1844.53 1213.56 L1845.12 1213.56 L1845.71 1213.56 L1846.29 1213.56 L1846.88 1213.56 L1847.47 1213.56 L1848.05 1213.56 L1848.64 1213.56 L1849.22 1213.56 L1849.81 1213.56 L1850.4 1213.56 L1850.98 1213.56 L1851.57 1213.56 L1852.16 1213.56 L1852.74 1213.56 L1853.33 1213.56 L1853.92 1213.56 L1854.5 1213.56 L1855.09 1213.56 L1855.68 1213.56 L1856.26 1213.56 L1856.85 1213.56 L1857.43 1213.56 L1858.02 1213.56 L1858.61 1213.56 L1859.19 1213.56 L1859.78 1213.56 L1860.37 1213.56 L1860.95 1213.56 L1861.54 1213.56 L1862.13 1213.56 L1862.71 1213.56 L1863.3 1213.56 L1863.88 1213.56 L1864.47 1213.56 L1865.06 1213.56 L1865.64 1213.56 L1866.23 1213.56 L1866.82 1213.56 L1867.4 1213.56 L1867.99 1213.56 L1868.58 1213.56 L1869.16 1213.56 L1869.75 1213.56 L1870.34 1213.56 L1870.92 1213.56 L1871.51 1213.56 L1872.09 1213.56 L1872.68 1213.56 L1873.27 1213.56 L1873.85 1213.56 L1874.44 1213.56 L1875.03 1213.56 L1875.61 1213.56 L1876.2 1213.56 L1876.79 1213.56 L1877.37 1213.56 L1877.96 1213.56 L1878.55 1213.56 L1879.13 1213.56 L1879.72 1213.56 L1880.3 1213.56 L1880.89 1213.56 L1881.48 1213.56 L1882.06 1213.56 L1882.65 1213.56 L1883.24 1213.56 L1883.82 1213.56 L1884.41 1213.56 L1885 1213.56 L1885.58 1213.56 L1886.17 1213.56 L1886.76 1213.56 L1887.34 1213.56 L1887.93 1213.56 L1888.51 1213.56 L1889.1 1213.56 L1889.69 1213.56 L1890.27 1213.56 L1890.86 1213.56 L1891.45 1213.56 L1892.03 1213.56 L1892.62 1213.56 L1893.21 1213.56 L1893.79 1213.56 L1894.38 1213.56 L1894.96 1213.56 L1895.55 1213.56 L1896.14 1213.56 L1896.72 1213.56 L1897.31 1213.56 L1897.9 1213.56 L1898.48 1213.56 L1899.07 1213.56 L1899.66 1213.56 L1900.24 1213.56 L1900.83 1213.56 L1901.42 1213.56 L1902 1213.56 L1902.59 1213.56 L1903.17 1213.56 L1903.76 1213.56 L1904.35 1213.56 L1904.93 1213.56 L1905.52 1213.56 L1906.11 1213.56 L1906.69 1213.56 L1907.28 1213.56 L1907.87 1213.56 L1908.45 1213.56 L1909.04 1213.56 L1909.63 1213.56 L1910.21 1213.56 L1910.8 1213.56 L1911.38 1213.56 L1911.97 1213.56 L1912.56 1213.56 L1913.14 1213.56 L1913.73 1213.56 L1914.32 1213.56 L1914.9 1213.56 L1915.49 1213.56 L1916.08 1213.56 L1916.66 1213.56 L1917.25 1213.56 L1917.83 1213.56 L1918.42 1213.56 L1919.01 1213.56 L1919.59 1213.56 L1920.18 1213.56 L1920.77 1213.56 L1921.35 1213.56 L1921.94 1213.56 L1922.53 1213.56 L1923.11 1213.56 L1923.7 1213.56 L1924.29 1213.56 L1924.87 1213.56 L1925.46 1213.56 L1926.04 1213.56 L1926.63 1213.56 L1927.22 1213.56 L1927.8 1213.56 L1928.39 1213.56 L1928.98 1213.56 L1929.56 1213.56 L1930.15 1213.56 L1930.74 1213.56 L1931.32 1213.56 L1931.91 1213.56 L1932.5 1213.56 L1933.08 1213.56 L1933.67 1213.56 L1934.25 1213.56 L1934.84 1213.56 L1935.43 1213.56 L1936.01 1213.56 L1936.6 1213.56 L1937.19 1213.56 L1937.77 1213.56 L1938.36 1213.56 L1938.95 1213.56 L1939.53 1213.56 L1940.12 1213.56 L1940.71 1213.56 L1941.29 1213.56 L1941.88 1213.56 L1942.46 1213.56 L1943.05 1213.56 L1943.64 1213.56 L1944.22 1213.56 L1944.81 1213.56 L1945.4 1213.56 L1945.98 1213.56 L1946.57 1213.56 L1947.16 1213.56 L1947.74 1213.56 L1948.33 1213.56 L1948.91 1213.56 L1949.5 1213.56 L1950.09 1213.56 L1950.67 1213.56 L1951.26 1213.56 L1951.85 1213.56 L1952.43 1213.56 L1953.02 1213.56 L1953.61 1213.56 L1954.19 1213.56 L1954.78 1213.56 L1955.37 1213.56 L1955.95 1213.56 L1956.54 1213.56 L1957.12 1213.56 L1957.71 1213.56 L1958.3 1213.56 L1958.88 1213.56 L1959.47 1213.56 L1960.06 1213.56 L1960.64 1213.56 L1961.23 1213.56 L1961.82 1213.56 L1962.4 1213.56 L1962.99 1213.56 L1963.58 1213.56 L1964.16 1213.56 L1964.75 1213.56 L1965.33 1213.56 L1965.92 1213.56 L1966.51 1213.56 L1967.09 1213.56 L1967.68 1213.56 L1968.27 1213.56 L1968.85 1213.56 L1969.44 1213.56 L1970.03 1213.56 L1970.61 1213.56 L1971.2 1213.56 L1971.78 1213.56 L1972.37 1213.56 L1972.96 1213.56 L1973.54 1213.56 L1974.13 1213.56 L1974.72 1213.56 L1975.3 1213.56 L1975.89 1213.56 L1976.48 1213.56 L1977.06 1213.56 L1977.65 1213.56 L1978.24 1213.56 L1978.82 1213.56 L1979.41 1213.56 L1979.99 1213.56 L1980.58 1213.56 L1981.17 1213.56 L1981.75 1213.56 L1982.34 1213.56 L1982.93 1213.56 L1983.51 1213.56 L1984.1 1213.56 L1984.69 1213.56 L1985.27 1213.56 L1985.86 1213.56 L1986.45 1213.56 L1987.03 1213.56 L1987.62 1213.56 L1988.2 1213.56 L1988.79 1213.56 L1989.38 1213.56 L1989.96 1213.56 L1990.55 1213.56 L1991.14 1213.56 L1991.72 1213.56 L1992.31 1213.56 L1992.9 1213.56 L1993.48 1213.56 L1994.07 1213.56 L1994.65 1213.56 L1995.24 1213.56 L1995.83 1213.56 L1996.41 1213.56 L1997 1213.56 L1997.59 1213.56 L1998.17 1213.56 L1998.76 1213.56 L1999.35 1213.56 L1999.93 1213.56 L2000.52 1213.56 L2001.11 1213.56 L2001.69 1213.56 L2002.28 1213.56 L2002.86 1213.56 L2003.45 1213.56 L2004.04 1213.56 L2004.62 1213.56 L2005.21 1213.56 L2005.8 1213.56 L2006.38 1213.56 L2006.97 1213.56 L2007.56 1213.56 L2008.14 1213.56 L2008.73 1213.56 L2009.32 1213.56 L2009.9 1213.56 L2010.49 1213.56 L2011.07 1213.56 L2011.66 1213.56 L2012.25 1213.56 L2012.83 1213.56 L2013.42 1213.56 L2014.01 1213.56 L2014.59 1213.56 L2015.18 1213.56 L2015.77 1213.56 L2016.35 1213.56 L2016.94 1213.56 L2017.53 1213.56 L2018.11 1213.56 L2018.7 1213.56 L2019.28 1213.56 L2019.87 1213.56 L2020.46 1213.56 L2021.04 1213.56 L2021.63 1213.56 L2022.22 1213.56 L2022.8 1213.56 L2023.39 1213.56 L2023.98 1213.56 L2024.56 1213.56 L2025.15 1213.56 L2025.73 1213.56 L2026.32 1213.56 L2026.91 1213.56 L2027.49 1213.56 L2028.08 1213.56 L2028.67 1213.56 L2029.25 1213.56 L2029.84 1213.56 L2030.43 1213.56 L2031.01 1213.56 L2031.6 1213.56 L2032.19 1213.56 L2032.77 1213.56 L2033.36 1213.56 L2033.94 1213.56 L2034.53 1213.56 L2035.12 1213.56 L2035.7 1213.56 L2036.29 1213.56 L2036.88 1213.56 L2037.46 1213.56 L2038.05 1213.56 L2038.64 1213.56 L2039.22 1213.56 L2039.81 1213.56 L2040.4 1213.56 L2040.98 1213.56 L2041.57 1213.56 L2042.15 1213.56 L2042.74 1213.56 L2043.33 1213.56 L2043.91 1213.56 L2044.5 1213.56 L2045.09 1213.56 L2045.67 1213.56 L2046.26 1213.56 L2046.85 1213.56 L2047.43 1213.56 L2048.02 1213.56 L2048.6 1213.56 L2049.19 1213.56 L2049.78 1213.56 L2050.36 1213.56 L2050.95 1213.56 L2051.54 1213.56 L2052.12 1213.56 L2052.71 1213.56 L2053.3 1213.56 L2053.88 1213.56 L2054.47 1213.56 L2055.06 1213.56 L2055.64 1213.56 L2056.23 1213.56 L2056.81 1213.56 L2057.4 1213.56 L2057.99 1213.56 L2058.57 1213.56 L2059.16 1213.56 L2059.75 1213.56 L2060.33 1213.56 L2060.92 1213.56 L2061.51 1213.56 L2062.09 1213.56 L2062.68 1213.56 L2063.27 1213.56 L2063.85 1213.56 L2064.44 1213.56 L2065.02 1213.56 L2065.61 1213.56 L2066.2 1213.56 L2066.78 1213.56 L2067.37 1213.56 L2067.96 1213.56 L2068.54 1213.56 L2069.13 1213.56 L2069.72 1213.56 L2070.3 1213.56 L2070.89 1213.56 L2071.48 1213.56 L2072.06 1213.56 L2072.65 1213.56 L2073.23 1213.56 L2073.82 1213.56 L2074.41 1213.56 L2074.99 1213.56 L2075.58 1213.56 L2076.17 1213.56 L2076.75 1213.56 L2077.34 1213.56 L2077.93 1213.56 L2078.51 1213.56 L2079.1 1213.56 L2079.68 1213.56 L2080.27 1213.56 L2080.86 1213.56 L2081.44 1213.56 L2082.03 1213.56 L2082.62 1213.56 L2083.2 1213.56 L2083.79 1213.56 L2084.38 1213.56 L2084.96 1213.56 L2085.55 1213.56 L2086.14 1213.56 L2086.72 1213.56 L2087.31 1213.56 L2087.89 1213.56 L2088.48 1213.56 L2089.07 1213.56 L2089.65 1213.56 L2090.24 1213.56 L2090.83 1213.56 L2091.41 1213.56 L2092 1213.56 L2092.59 1213.56 L2093.17 1213.56 L2093.76 1213.56 L2094.35 1213.56 L2094.93 1213.56 L2095.52 1213.56 L2096.1 1213.56 L2096.69 1213.56 L2097.28 1213.56 L2097.86 1213.56 L2098.45 1213.56 L2099.04 1213.56 L2099.62 1213.56 L2100.21 1213.56 L2100.8 1213.56 L2101.38 1213.56 L2101.97 1213.56 L2102.55 1213.56 L2103.14 1213.56 L2103.73 1213.56 L2104.31 1213.56 L2104.9 1213.56 L2105.49 1213.56 L2106.07 1213.56 L2106.66 1213.56 L2107.25 1213.56 L2107.83 1213.56 L2108.42 1213.56 L2109.01 1213.56 L2109.59 1213.56 L2110.18 1213.56 L2110.76 1213.56 L2111.35 1213.56 L2111.94 1213.56 L2112.52 1213.56 L2113.11 1213.56 L2113.7 1213.56 L2114.28 1213.56 L2114.87 1213.56 L2115.46 1213.56 L2116.04 1213.56 L2116.63 1213.56 L2117.22 1213.56 L2117.8 1213.56 L2118.39 1213.56 L2118.97 1213.56 L2119.56 1213.56 L2120.15 1213.56 L2120.73 1213.56 L2121.32 1213.56 L2121.91 1213.56 L2122.49 1213.56 L2123.08 1213.56 L2123.67 1213.56 L2124.25 1213.56 L2124.84 1213.56 L2125.42 1213.56 L2126.01 1213.56 L2126.6 1213.56 L2127.18 1213.56 L2127.77 1213.56 L2128.36 1213.56 L2128.94 1213.56 L2129.53 1213.56 L2130.12 1213.56 L2130.7 1213.56 L2131.29 1213.56 L2131.88 1213.56 L2132.46 1213.56 L2133.05 1213.56 L2133.63 1213.56 L2134.22 1213.56 L2134.81 1213.56 L2135.39 1213.56 L2135.98 1213.56 L2136.57 1213.56 L2137.15 1213.56 L2137.74 1213.56 L2138.33 1213.56 L2138.91 1213.56 L2139.5 1213.56 L2140.09 1213.56 L2140.67 1213.56 L2141.26 1213.56 L2141.84 1213.56 L2142.43 1213.56 L2143.02 1213.56 L2143.6 1213.56 L2144.19 1213.56 L2144.78 1213.56 L2145.36 1213.56 L2145.95 1213.56 L2146.54 1213.56 L2147.12 1213.56 L2147.71 1213.56 L2148.3 1213.56 L2148.88 1213.56 L2149.47 1213.56 L2150.05 1213.56 L2150.64 1213.56 L2151.23 1213.56 L2151.81 1213.56 L2152.4 1213.56 L2152.99 1213.56 L2153.57 1213.56 L2154.16 1213.56 L2154.75 1213.56 L2155.33 1213.56 L2155.92 1213.56 L2156.5 1213.56 L2157.09 1213.56 L2157.68 1213.56 L2158.26 1213.56 L2158.26 1213.02 L2157.68 1213.02 L2157.09 1213.02 L2156.5 1213.02 L2155.92 1213.02 L2155.33 1213.02 L2154.75 1213.02 L2154.16 1213.02 L2153.57 1213.02 L2152.99 1213.02 L2152.4 1213.02 L2151.81 1213.02 L2151.23 1213.02 L2150.64 1213.02 L2150.05 1213.02 L2149.47 1213.02 L2148.88 1213.02 L2148.3 1213.02 L2147.71 1213.02 L2147.12 1213.02 L2146.54 1213.02 L2145.95 1213.02 L2145.36 1213.02 L2144.78 1213.02 L2144.19 1213.02 L2143.6 1213.02 L2143.02 1213.02 L2142.43 1213.02 L2141.84 1213.02 L2141.26 1213.02 L2140.67 1213.02 L2140.09 1213.02 L2139.5 1213.02 L2138.91 1213.02 L2138.33 1213.02 L2137.74 1213.02 L2137.15 1213.02 L2136.57 1213.02 L2135.98 1213.02 L2135.39 1213.02 L2134.81 1213.02 L2134.22 1213.02 L2133.63 1213.02 L2133.05 1213.02 L2132.46 1213.02 L2131.88 1213.02 L2131.29 1213.02 L2130.7 1213.02 L2130.12 1213.02 L2129.53 1213.02 L2128.94 1213.02 L2128.36 1213.02 L2127.77 1213.02 L2127.18 1213.02 L2126.6 1213.02 L2126.01 1213.02 L2125.42 1213.02 L2124.84 1213.02 L2124.25 1213.02 L2123.67 1213.02 L2123.08 1213.02 L2122.49 1213.02 L2121.91 1213.02 L2121.32 1213.02 L2120.73 1213.02 L2120.15 1213.02 L2119.56 1213.02 L2118.97 1213.02 L2118.39 1213.02 L2117.8 1213.02 L2117.22 1213.02 L2116.63 1213.02 L2116.04 1213.02 L2115.46 1213.02 L2114.87 1213.02 L2114.28 1213.02 L2113.7 1213.02 L2113.11 1213.02 L2112.52 1213.02 L2111.94 1213.02 L2111.35 1213.02 L2110.76 1213.02 L2110.18 1213.02 L2109.59 1213.02 L2109.01 1213.02 L2108.42 1213.02 L2107.83 1213.02 L2107.25 1213.02 L2106.66 1213.02 L2106.07 1213.02 L2105.49 1213.02 L2104.9 1213.02 L2104.31 1213.02 L2103.73 1213.02 L2103.14 1213.02 L2102.55 1213.02 L2101.97 1213.02 L2101.38 1213.02 L2100.8 1213.02 L2100.21 1213.02 L2099.62 1213.02 L2099.04 1213.02 L2098.45 1213.02 L2097.86 1213.02 L2097.28 1213.02 L2096.69 1213.02 L2096.1 1213.02 L2095.52 1213.02 L2094.93 1213.02 L2094.35 1213.02 L2093.76 1213.02 L2093.17 1213.02 L2092.59 1213.02 L2092 1213.02 L2091.41 1213.02 L2090.83 1213.02 L2090.24 1213.02 L2089.65 1213.02 L2089.07 1213.02 L2088.48 1213.02 L2087.89 1213.02 L2087.31 1213.02 L2086.72 1213.02 L2086.14 1213.02 L2085.55 1213.02 L2084.96 1213.02 L2084.38 1213.02 L2083.79 1213.02 L2083.2 1213.02 L2082.62 1213.02 L2082.03 1213.02 L2081.44 1213.02 L2080.86 1213.02 L2080.27 1213.02 L2079.68 1213.02 L2079.1 1213.02 L2078.51 1213.02 L2077.93 1213.02 L2077.34 1213.02 L2076.75 1213.02 L2076.17 1213.02 L2075.58 1213.02 L2074.99 1213.02 L2074.41 1213.02 L2073.82 1213.02 L2073.23 1213.02 L2072.65 1213.02 L2072.06 1213.02 L2071.48 1213.02 L2070.89 1213.02 L2070.3 1213.02 L2069.72 1213.02 L2069.13 1213.02 L2068.54 1213.02 L2067.96 1213.02 L2067.37 1213.02 L2066.78 1213.02 L2066.2 1213.02 L2065.61 1213.02 L2065.02 1213.02 L2064.44 1213.02 L2063.85 1213.02 L2063.27 1213.02 L2062.68 1213.02 L2062.09 1213.02 L2061.51 1213.02 L2060.92 1213.02 L2060.33 1213.02 L2059.75 1213.02 L2059.16 1213.02 L2058.57 1213.02 L2057.99 1213.02 L2057.4 1213.02 L2056.81 1213.02 L2056.23 1213.02 L2055.64 1213.02 L2055.06 1213.02 L2054.47 1213.02 L2053.88 1213.02 L2053.3 1213.02 L2052.71 1213.02 L2052.12 1213.02 L2051.54 1213.02 L2050.95 1213.02 L2050.36 1213.02 L2049.78 1213.02 L2049.19 1213.02 L2048.6 1213.02 L2048.02 1213.02 L2047.43 1213.02 L2046.85 1213.02 L2046.26 1213.02 L2045.67 1213.02 L2045.09 1213.02 L2044.5 1213.02 L2043.91 1213.02 L2043.33 1213.02 L2042.74 1213.02 L2042.15 1213.02 L2041.57 1213.02 L2040.98 1213.02 L2040.4 1213.02 L2039.81 1213.02 L2039.22 1213.02 L2038.64 1213.02 L2038.05 1213.02 L2037.46 1213.02 L2036.88 1213.02 L2036.29 1213.02 L2035.7 1213.02 L2035.12 1213.02 L2034.53 1213.02 L2033.94 1213.02 L2033.36 1213.02 L2032.77 1213.02 L2032.19 1213.02 L2031.6 1213.02 L2031.01 1213.02 L2030.43 1213.02 L2029.84 1213.02 L2029.25 1213.02 L2028.67 1213.02 L2028.08 1213.02 L2027.49 1213.02 L2026.91 1213.02 L2026.32 1213.02 L2025.73 1213.02 L2025.15 1213.02 L2024.56 1213.02 L2023.98 1213.02 L2023.39 1213.02 L2022.8 1213.02 L2022.22 1213.02 L2021.63 1213.02 L2021.04 1213.02 L2020.46 1213.02 L2019.87 1213.02 L2019.28 1213.02 L2018.7 1213.02 L2018.11 1213.02 L2017.53 1213.02 L2016.94 1213.02 L2016.35 1213.02 L2015.77 1213.02 L2015.18 1213.02 L2014.59 1213.02 L2014.01 1213.02 L2013.42 1213.02 L2012.83 1213.02 L2012.25 1213.02 L2011.66 1213.02 L2011.07 1213.02 L2010.49 1213.02 L2009.9 1213.02 L2009.32 1213.02 L2008.73 1213.02 L2008.14 1213.02 L2007.56 1213.02 L2006.97 1213.02 L2006.38 1213.02 L2005.8 1213.02 L2005.21 1213.02 L2004.62 1213.02 L2004.04 1213.02 L2003.45 1213.02 L2002.86 1213.02 L2002.28 1213.02 L2001.69 1213.02 L2001.11 1213.02 L2000.52 1213.02 L1999.93 1213.02 L1999.35 1213.02 L1998.76 1213.02 L1998.17 1213.02 L1997.59 1213.02 L1997 1213.02 L1996.41 1213.02 L1995.83 1213.02 L1995.24 1213.02 L1994.65 1213.02 L1994.07 1213.02 L1993.48 1213.02 L1992.9 1213.02 L1992.31 1213.02 L1991.72 1213.02 L1991.14 1213.02 L1990.55 1213.02 L1989.96 1213.02 L1989.38 1213.02 L1988.79 1213.02 L1988.2 1213.02 L1987.62 1213.02 L1987.03 1213.02 L1986.45 1213.02 L1985.86 1213.02 L1985.27 1213.02 L1984.69 1213.02 L1984.1 1213.02 L1983.51 1213.02 L1982.93 1213.02 L1982.34 1213.02 L1981.75 1213.02 L1981.17 1213.02 L1980.58 1213.02 L1979.99 1213.02 L1979.41 1213.02 L1978.82 1213.02 L1978.24 1213.02 L1977.65 1213.02 L1977.06 1213.02 L1976.48 1213.02 L1975.89 1213.02 L1975.3 1213.02 L1974.72 1213.02 L1974.13 1213.02 L1973.54 1213.02 L1972.96 1213.02 L1972.37 1213.02 L1971.78 1213.02 L1971.2 1213.02 L1970.61 1213.02 L1970.03 1213.02 L1969.44 1213.02 L1968.85 1213.02 L1968.27 1213.02 L1967.68 1213.02 L1967.09 1213.02 L1966.51 1213.02 L1965.92 1213.02 L1965.33 1213.02 L1964.75 1213.02 L1964.16 1213.02 L1963.58 1213.02 L1962.99 1213.02 L1962.4 1213.02 L1961.82 1213.02 L1961.23 1213.02 L1960.64 1213.02 L1960.06 1213.02 L1959.47 1213.02 L1958.88 1213.02 L1958.3 1213.02 L1957.71 1213.02 L1957.12 1213.02 L1956.54 1213.02 L1955.95 1213.02 L1955.37 1213.02 L1954.78 1213.02 L1954.19 1213.02 L1953.61 1213.02 L1953.02 1213.02 L1952.43 1213.02 L1951.85 1213.02 L1951.26 1213.02 L1950.67 1213.02 L1950.09 1213.02 L1949.5 1213.02 L1948.91 1213.02 L1948.33 1213.02 L1947.74 1213.02 L1947.16 1213.02 L1946.57 1213.02 L1945.98 1213.02 L1945.4 1213.02 L1944.81 1213.02 L1944.22 1213.02 L1943.64 1213.02 L1943.05 1213.02 L1942.46 1213.02 L1941.88 1213.02 L1941.29 1213.02 L1940.71 1213.02 L1940.12 1213.02 L1939.53 1213.02 L1938.95 1213.02 L1938.36 1213.02 L1937.77 1213.02 L1937.19 1213.02 L1936.6 1213.02 L1936.01 1213.02 L1935.43 1213.02 L1934.84 1213.02 L1934.25 1213.02 L1933.67 1213.02 L1933.08 1213.02 L1932.5 1213.02 L1931.91 1213.02 L1931.32 1213.02 L1930.74 1213.02 L1930.15 1213.02 L1929.56 1213.02 L1928.98 1213.02 L1928.39 1213.02 L1927.8 1213.02 L1927.22 1213.02 L1926.63 1213.02 L1926.04 1213.02 L1925.46 1213.02 L1924.87 1213.02 L1924.29 1213.02 L1923.7 1213.02 L1923.11 1213.02 L1922.53 1213.02 L1921.94 1213.02 L1921.35 1213.02 L1920.77 1213.02 L1920.18 1213.02 L1919.59 1213.02 L1919.01 1213.02 L1918.42 1213.02 L1917.83 1213.02 L1917.25 1213.02 L1916.66 1213.02 L1916.08 1213.02 L1915.49 1213.02 L1914.9 1213.02 L1914.32 1213.02 L1913.73 1213.02 L1913.14 1213.02 L1912.56 1213.02 L1911.97 1213.02 L1911.38 1213.02 L1910.8 1213.02 L1910.21 1213.02 L1909.63 1213.02 L1909.04 1213.02 L1908.45 1213.02 L1907.87 1213.02 L1907.28 1213.02 L1906.69 1213.02 L1906.11 1213.02 L1905.52 1213.02 L1904.93 1213.02 L1904.35 1213.02 L1903.76 1213.02 L1903.17 1213.02 L1902.59 1213.02 L1902 1213.02 L1901.42 1213.02 L1900.83 1213.02 L1900.24 1213.02 L1899.66 1213.02 L1899.07 1213.02 L1898.48 1213.02 L1897.9 1213.02 L1897.31 1213.02 L1896.72 1213.02 L1896.14 1213.02 L1895.55 1213.02 L1894.96 1213.02 L1894.38 1213.02 L1893.79 1213.02 L1893.21 1213.02 L1892.62 1213.02 L1892.03 1213.02 L1891.45 1213.02 L1890.86 1213.02 L1890.27 1213.02 L1889.69 1213.02 L1889.1 1213.02 L1888.51 1213.02 L1887.93 1213.02 L1887.34 1213.02 L1886.76 1213.02 L1886.17 1213.02 L1885.58 1213.02 L1885 1213.02 L1884.41 1213.02 L1883.82 1213.02 L1883.24 1213.02 L1882.65 1213.02 L1882.06 1213.02 L1881.48 1213.02 L1880.89 1213.02 L1880.3 1213.02 L1879.72 1213.02 L1879.13 1213.02 L1878.55 1213.02 L1877.96 1213.02 L1877.37 1213.02 L1876.79 1213.02 L1876.2 1213.02 L1875.61 1213.02 L1875.03 1213.02 L1874.44 1213.02 L1873.85 1213.02 L1873.27 1213.02 L1872.68 1213.02 L1872.09 1213.02 L1871.51 1213.02 L1870.92 1213.02 L1870.34 1213.02 L1869.75 1213.02 L1869.16 1213.02 L1868.58 1213.02 L1867.99 1213.02 L1867.4 1213.02 L1866.82 1213.02 L1866.23 1213.02 L1865.64 1213.02 L1865.06 1213.02 L1864.47 1213.02 L1863.88 1213.02 L1863.3 1213.02 L1862.71 1213.02 L1862.13 1213.02 L1861.54 1213.02 L1860.95 1213.02 L1860.37 1213.02 L1859.78 1213.02 L1859.19 1213.02 L1858.61 1213.02 L1858.02 1213.02 L1857.43 1213.02 L1856.85 1213.02 L1856.26 1213.02 L1855.68 1213.02 L1855.09 1213.02 L1854.5 1213.02 L1853.92 1213.02 L1853.33 1213.02 L1852.74 1213.02 L1852.16 1213.02 L1851.57 1213.02 L1850.98 1213.02 L1850.4 1213.02 L1849.81 1213.02 L1849.22 1213.02 L1848.64 1213.02 L1848.05 1213.02 L1847.47 1213.02 L1846.88 1213.02 L1846.29 1213.02 L1845.71 1213.02 L1845.12 1213.02 L1844.53 1213.02 L1843.95 1213.02 L1843.36 1213.02 L1842.77 1213.02 L1842.19 1213.02 L1841.6 1213.02 L1841.01 1213.02 L1840.43 1213.02 L1839.84 1213.02 L1839.26 1213.02 L1838.67 1213.02 L1838.08 1213.02 L1837.5 1213.02 L1836.91 1213.02 L1836.32 1213.02 L1835.74 1213.02 L1835.15 1213.02 L1834.56 1213.02 L1833.98 1213.02 L1833.39 1213.02 L1832.81 1213.02 L1832.22 1213.02 L1831.63 1213.02 L1831.05 1213.02 L1830.46 1213.02 L1829.87 1213.02 L1829.29 1213.02 L1828.7 1213.02 L1828.11 1213.02 L1827.53 1213.02 L1826.94 1213.02 L1826.35 1213.02 L1825.77 1213.02 L1825.18 1213.02 L1824.6 1213.02 L1824.01 1213.02 L1823.42 1213.02 L1822.84 1213.02 L1822.25 1213.02 L1821.66 1213.02 L1821.08 1213.02 L1820.49 1213.02 L1819.9 1213.02 L1819.32 1213.02 L1818.73 1213.02 L1818.14 1213.02 L1817.56 1213.02 L1816.97 1213.02 L1816.39 1213.02 L1815.8 1213.02 L1815.21 1213.02 L1814.63 1213.02 L1814.04 1213.02 L1813.45 1213.02 L1812.87 1213.02 L1812.28 1213.02 L1811.69 1213.02 L1811.11 1213.02 L1810.52 1213.02 L1809.94 1213.02 L1809.35 1213.02 L1808.76 1213.02 L1808.18 1213.02 L1807.59 1213.02 L1807 1213.02 L1806.42 1213.02 L1805.83 1213.02 L1805.24 1213.02 L1804.66 1213.02 L1804.07 1213.02 L1803.48 1213.02 L1802.9 1213.02 L1802.31 1213.02 L1801.73 1213.02 L1801.14 1213.02 L1800.55 1213.02 L1799.97 1213.02 L1799.38 1213.02 L1798.79 1213.02 L1798.21 1213.02 L1797.62 1213.02 L1797.03 1213.02 L1796.45 1213.02 L1795.86 1213.02 L1795.27 1213.02 L1794.69 1213.02 L1794.1 1213.02 L1793.52 1213.02 L1792.93 1213.02 L1792.34 1213.02 L1791.76 1213.02 L1791.17 1213.02 L1790.58 1213.02 L1790 1213.02 L1789.41 1213.02 L1788.82 1213.02 L1788.24 1213.02 L1787.65 1213.02 L1787.06 1213.02 L1786.48 1213.02 L1785.89 1213.02 L1785.31 1213.02 L1784.72 1213.02 L1784.13 1213.02 L1783.55 1213.02 L1782.96 1213.02 L1782.37 1213.02 L1781.79 1213.02 L1781.2 1213.02 L1780.61 1213.02 L1780.03 1213.02 L1779.44 1213.02 L1778.86 1213.02 L1778.27 1213.02 L1777.68 1213.02 L1777.1 1213.02 L1776.51 1213.02 L1775.92 1213.02 L1775.34 1213.02 L1774.75 1213.02 L1774.16 1213.02 L1773.58 1213.02 L1772.99 1213.02 L1772.4 1213.02 L1771.82 1213.02 L1771.23 1213.02 L1770.65 1213.02 L1770.06 1213.02 L1769.47 1213.02 L1768.89 1213.02 L1768.3 1213.02 L1767.71 1213.02 L1767.13 1213.02 L1766.54 1213.02 L1765.95 1213.02 L1765.37 1213.02 L1764.78 1213.02 L1764.19 1213.02 L1763.61 1213.02 L1763.02 1213.02 L1762.44 1213.02 L1761.85 1213.02 L1761.26 1213.02 L1760.68 1213.02 L1760.09 1213.02 L1759.5 1213.02 L1758.92 1213.02 L1758.33 1213.02 L1757.74 1213.02 L1757.16 1213.02 L1756.57 1213.02 L1755.99 1213.02 L1755.4 1213.02 L1754.81 1213.02 L1754.23 1213.02 L1753.64 1213.02 L1753.05 1213.02 L1752.47 1213.02 L1751.88 1213.02 L1751.29 1213.02 L1750.71 1213.02 L1750.12 1213.02 L1749.53 1213.02 L1748.95 1213.02 L1748.36 1213.02 L1747.78 1213.02 L1747.19 1213.02 L1746.6 1213.02 L1746.02 1213.02 L1745.43 1213.02 L1744.84 1213.02 L1744.26 1213.02 L1743.67 1213.02 L1743.08 1213.02 L1742.5 1213.02 L1741.91 1213.02 L1741.32 1213.02 L1740.74 1213.02 L1740.15 1213.02 L1739.57 1213.02 L1738.98 1213.02 L1738.39 1213.02 L1737.81 1213.02 L1737.22 1213.02 L1736.63 1213.02 L1736.05 1213.02 L1735.46 1213.02 L1734.87 1213.02 L1734.29 1213.02 L1733.7 1213.02 L1733.11 1213.02 L1732.53 1213.02 L1731.94 1213.02 L1731.36 1213.02 L1730.77 1213.02 L1730.18 1213.02 L1729.6 1213.02 L1729.01 1213.02 L1728.42 1213.02 L1727.84 1213.02 L1727.25 1213.02 L1726.66 1213.02 L1726.08 1213.02 L1725.49 1213.02 L1724.91 1213.02 L1724.32 1213.02 L1723.73 1213.02 L1723.15 1213.02 L1722.56 1213.02 L1721.97 1213.02 L1721.39 1213.02 L1720.8 1213.02 L1720.21 1213.02 L1719.63 1213.02 L1719.04 1213.02 L1718.45 1213.02 L1717.87 1213.02 L1717.28 1213.02 L1716.7 1213.02 L1716.11 1213.02 L1715.52 1213.02 L1714.94 1213.02 L1714.35 1213.02 L1713.76 1213.02 L1713.18 1213.02 L1712.59 1213.02 L1712 1213.02 L1711.42 1213.02 L1710.83 1213.02 L1710.24 1213.02 L1709.66 1213.02 L1709.07 1213.02 L1708.49 1213.02 L1707.9 1213.02 L1707.31 1213.02 L1706.73 1213.02 L1706.14 1213.02 L1705.55 1213.02 L1704.97 1213.02 L1704.38 1213.02 L1703.79 1213.02 L1703.21 1213.02 L1702.62 1213.02 L1702.04 1213.02 L1701.45 1213.02 L1700.86 1213.02 L1700.28 1213.02 L1699.69 1213.02 L1699.1 1213.02 L1698.52 1213.02 L1697.93 1213.02 L1697.34 1213.02 L1696.76 1213.02 L1696.17 1213.02 L1695.58 1213.02 L1695 1213.02 L1694.41 1213.02 L1693.83 1213.02 L1693.24 1213.02 L1692.65 1213.02 L1692.07 1213.02 L1691.48 1213.02 L1690.89 1213.02 L1690.31 1213.02 L1689.72 1213.02 L1689.13 1213.02 L1688.55 1213.02 L1687.96 1213.02 L1687.37 1213.02 L1686.79 1213.02 L1686.2 1213.02 L1685.62 1213.02 L1685.03 1213.02 L1684.44 1213.02 L1683.86 1213.02 L1683.27 1213.02 L1682.68 1213.02 L1682.1 1213.02 L1681.51 1213.02 L1680.92 1213.02 L1680.34 1213.02 L1679.75 1213.02 L1679.17 1213.02 L1678.58 1213.02 L1677.99 1213.02 L1677.41 1213.02 L1676.82 1213.02 L1676.23 1213.02 L1675.65 1213.02 L1675.06 1213.02 L1674.47 1213.02 L1673.89 1213.02 L1673.3 1213.02 L1672.71 1213.02 L1672.13 1213.02 L1671.54 1213.02 L1670.96 1213.02 L1670.37 1213.02 L1669.78 1213.02 L1669.2 1213.02 L1668.61 1213.02 L1668.02 1213.02 L1667.44 1213.02 L1666.85 1213.02 L1666.26 1213.02 L1665.68 1213.02 L1665.09 1213.02 L1664.5 1213.02 L1663.92 1213.02 L1663.33 1213.02 L1662.75 1213.02 L1662.16 1213.02 L1661.57 1213.02 L1660.99 1213.02 L1660.4 1213.02 L1659.81 1213.02 L1659.23 1213.02 L1658.64 1213.02 L1658.05 1213.02 L1657.47 1213.02 L1656.88 1213.02 L1656.29 1213.02 L1655.71 1213.02 L1655.12 1213.02 L1654.54 1213.02 L1653.95 1213.02 L1653.36 1213.02 L1652.78 1213.02 L1652.19 1213.02 L1651.6 1213.02 L1651.02 1213.02 L1650.43 1213.02 L1649.84 1213.02 L1649.26 1213.02 L1648.67 1213.02 L1648.09 1213.02 L1647.5 1213.02 L1646.91 1213.02 L1646.33 1213.02 L1645.74 1213.02 L1645.15 1213.02 L1644.57 1213.02 L1643.98 1213.02 L1643.39 1213.02 L1642.81 1213.02 L1642.22 1213.02 L1641.63 1213.02 L1641.05 1213.02 L1640.46 1213.02 L1639.88 1213.02 L1639.29 1213.02 L1638.7 1213.02 L1638.12 1213.02 L1637.53 1213.02 L1636.94 1213.02 L1636.36 1213.02 L1635.77 1213.02 L1635.18 1213.02 L1634.6 1213.02 L1634.01 1213.02 L1633.42 1213.02 L1632.84 1213.02 L1632.25 1213.02 L1631.67 1213.02 L1631.08 1213.02 L1630.49 1213.02 L1629.91 1213.02 L1629.32 1213.02 L1628.73 1213.02 L1628.15 1213.02 L1627.56 1213.02 L1626.97 1213.02 L1626.39 1213.02 L1625.8 1213.02 L1625.22 1213.02 L1624.63 1213.02 L1624.04 1213.02 L1623.46 1213.02 L1622.87 1213.02 L1622.28 1213.02 L1621.7 1213.02 L1621.11 1213.02 L1620.52 1213.02 L1619.94 1213.02 L1619.35 1213.02 L1618.76 1213.02 L1618.18 1213.02 L1617.59 1213.02 L1617.01 1213.02 L1616.42 1213.02 L1615.83 1213.02 L1615.25 1213.02 L1614.66 1213.02 L1614.07 1213.02 L1613.49 1213.02 L1612.9 1213.02 L1612.31 1213.02 L1611.73 1213.02 L1611.14 1213.02 L1610.55 1213.02 L1609.97 1213.02 L1609.38 1213.02 L1608.8 1213.02 L1608.21 1213.02 L1607.62 1213.02 L1607.04 1213.02 L1606.45 1213.02 L1605.86 1213.02 L1605.28 1213.02 L1604.69 1213.02 L1604.1 1213.02 L1603.52 1213.02 L1602.93 1213.02 L1602.34 1213.02 L1601.76 1213.02 L1601.17 1213.02 L1600.59 1213.02 L1600 1213.02 L1599.41 1213.02 L1598.83 1213.02 L1598.24 1213.02 L1597.65 1213.02 L1597.07 1213.02 L1596.48 1213.02 L1595.89 1213.02 L1595.31 1213.02 L1594.72 1213.02 L1594.14 1213.02 L1593.55 1213.02 L1592.96 1213.02 L1592.38 1213.02 L1591.79 1213.02 L1591.2 1213.02 L1590.62 1213.02 L1590.03 1213.02 L1589.44 1213.02 L1588.86 1213.02 L1588.27 1213.02 L1587.68 1213.02 L1587.1 1213.02 L1586.51 1213.02 L1585.93 1213.02 L1585.34 1213.02 L1584.75 1213.02 L1584.17 1213.02 L1583.58 1213.02 L1582.99 1213.02 L1582.41 1213.02 L1581.82 1213.02 L1581.23 1213.02 L1580.65 1213.02 L1580.06 1213.02 L1579.47 1213.02 L1578.89 1213.02 L1578.3 1213.02 L1577.72 1213.02 L1577.13 1213.02 L1576.54 1213.02 L1575.96 1213.02 L1575.37 1213.02 L1574.78 1213.02 L1574.2 1213.02 L1573.61 1213.02 L1573.02 1213.02 L1572.44 1213.02 L1571.85 1213.02 L1571.27 1213.02 L1570.68 1213.02 L1570.09 1213.02 L1569.51 1213.02 L1568.92 1213.02 L1568.33 1213.02 L1567.75 1213.02 L1567.16 1213.02 L1566.57 1213.02 L1565.99 1213.02 L1565.4 1213.02 L1564.81 1213.02 L1564.23 1213.02 L1563.64 1213.02 L1563.06 1213.02 L1562.47 1213.02 L1561.88 1213.02 L1561.3 1213.02 L1560.71 1213.02 L1560.12 1213.02 L1559.54 1213.02 L1558.95 1213.02 L1558.36 1213.02 L1557.78 1213.02 L1557.19 1213.02 L1556.6 1213.02 L1556.02 1213.02 L1555.43 1213.02 L1554.85 1213.02 L1554.26 1213.02 L1553.67 1213.02 L1553.09 1213.02 L1552.5 1213.02 L1551.91 1213.02 L1551.33 1213.02 L1550.74 1213.02 L1550.15 1213.02 L1549.57 1213.02 L1548.98 1213.02 L1548.4 1213.02 L1547.81 1213.02 L1547.22 1213.02 L1546.64 1213.02 L1546.05 1213.02 L1545.46 1213.02 L1544.88 1213.02 L1544.29 1213.02 L1543.7 1213.02 L1543.12 1213.02 L1542.53 1213.02 L1541.94 1213.02 L1541.36 1213.02 L1540.77 1213.02 L1540.19 1213.02 L1539.6 1213.02 L1539.01 1213.02 L1538.43 1213.02 L1537.84 1213.02 L1537.25 1213.02 L1536.67 1213.02 L1536.08 1213.02 L1535.49 1213.02 L1534.91 1213.02 L1534.32 1213.02 L1533.73 1213.02 L1533.15 1213.02 L1532.56 1213.02 L1531.98 1213.02 L1531.39 1213.02 L1530.8 1213.02 L1530.22 1213.02 L1529.63 1213.02 L1529.04 1213.02 L1528.46 1213.02 L1527.87 1213.02 L1527.28 1213.02 L1526.7 1213.02 L1526.11 1213.02 L1525.52 1213.02 L1524.94 1213.02 L1524.35 1213.02 L1523.77 1213.02 L1523.18 1213.02 L1522.59 1213.02 L1522.01 1213.02 L1521.42 1213.02 L1520.83 1213.02 L1520.25 1213.02 L1519.66 1213.02 L1519.07 1213.02 L1518.49 1213.02 L1517.9 1213.02 L1517.32 1213.02 L1516.73 1213.02 L1516.14 1213.02 L1515.56 1213.02 L1514.97 1213.02 L1514.38 1213.02 L1513.8 1213.02 L1513.21 1213.02 L1512.62 1213.02 L1512.04 1213.02 L1511.45 1213.02 L1510.86 1213.02 L1510.28 1213.02 L1509.69 1213.02 L1509.11 1213.02 L1508.52 1213.02 L1507.93 1213.02 L1507.35 1213.02 L1506.76 1213.02 L1506.17 1213.02 L1505.59 1213.02 L1505 1213.02 L1504.41 1213.02 L1503.83 1213.02 L1503.24 1213.02 L1502.65 1213.02 L1502.07 1213.02 L1501.48 1213.02 L1500.9 1213.02 L1500.31 1213.02 L1499.72 1213.02 L1499.14 1213.02 L1498.55 1213.02 L1497.96 1213.02 L1497.38 1213.02 L1496.79 1213.02 L1496.2 1213.02 L1495.62 1213.02 L1495.03 1213.02 L1494.45 1213.02 L1493.86 1213.02 L1493.27 1213.02 L1492.69 1213.02 L1492.1 1213.02 L1491.51 1213.02 L1490.93 1213.02 L1490.34 1213.02 L1489.75 1213.02 L1489.17 1213.02 L1488.58 1213.02 L1487.99 1213.02 L1487.41 1213.02 L1486.82 1213.02 L1486.24 1213.02 L1485.65 1213.02 L1485.06 1213.02 L1484.48 1213.02 L1483.89 1213.02 L1483.3 1213.02 L1482.72 1213.02 L1482.13 1213.02 L1481.54 1213.02 L1480.96 1213.02 L1480.37 1213.02 L1479.78 1213.02 L1479.2 1213.02 L1478.61 1213.02 L1478.03 1213.02 L1477.44 1213.02 L1476.85 1213.02 L1476.27 1213.02 L1475.68 1213.02 L1475.09 1213.02 L1474.51 1213.02 L1473.92 1213.02 L1473.33 1213.02 L1472.75 1213.02 L1472.16 1213.02 L1471.57 1213.02 L1470.99 1213.02 L1470.4 1213.02 L1469.82 1213.02 L1469.23 1213.02 L1468.64 1213.02 L1468.06 1213.02 L1467.47 1213.02 L1466.88 1213.02 L1466.3 1213.02 L1465.71 1213.02 L1465.12 1213.02 L1464.54 1213.02 L1463.95 1213.02 L1463.37 1213.02 L1462.78 1213.02 L1462.19 1213.02 L1461.61 1213.02 L1461.02 1213.02 L1460.43 1213.02 L1459.85 1213.02 L1459.26 1213.02 L1458.67 1213.02 L1458.09 1213.02 L1457.5 1213.02 L1456.91 1213.02 L1456.33 1213.02 L1455.74 1213.02 L1455.16 1213.02 L1454.57 1213.02 L1453.98 1213.02 L1453.4 1213.02 L1452.81 1213.02 L1452.22 1213.02 L1451.64 1213.02 L1451.05 1213.02 L1450.46 1213.02 L1449.88 1213.02 L1449.29 1213.02 L1448.7 1213.02 L1448.12 1213.02 L1447.53 1213.02 L1446.95 1213.02 L1446.36 1213.02 L1445.77 1213.02 L1445.19 1213.02 L1444.6 1213.02 L1444.01 1213.02 L1443.43 1213.02 L1442.84 1213.02 L1442.25 1213.02 L1441.67 1213.02 L1441.08 1213.02 L1440.5 1213.02 L1439.91 1213.02 L1439.32 1213.02 L1438.74 1213.02 L1438.15 1213.02 L1437.56 1213.02 L1436.98 1213.02 L1436.39 1213.02 L1435.8 1213.02 L1435.22 1213.02 L1434.63 1213.02 L1434.04 1213.02 L1433.46 1213.02 L1432.87 1213.02 L1432.29 1213.02 L1431.7 1213.02 L1431.11 1213.02 L1430.53 1213.02 L1429.94 1213.02 L1429.35 1213.02 L1428.77 1213.02 L1428.18 1213.02 L1427.59 1213.02 L1427.01 1213.02 L1426.42 1213.02 L1425.83 1213.02 L1425.25 1213.02 L1424.66 1213.02 L1424.08 1213.02 L1423.49 1213.02 L1422.9 1213.02 L1422.32 1213.02 L1421.73 1213.02 L1421.14 1213.02 L1420.56 1213.02 L1419.97 1213.02 L1419.38 1213.02 L1418.8 1213.02 L1418.21 1213.02 L1417.63 1213.02 L1417.04 1213.02 L1416.45 1213.02 L1415.87 1213.02 L1415.28 1213.02 L1414.69 1213.02 L1414.11 1213.02 L1413.52 1213.02 L1412.93 1213.02 L1412.35 1213.02 L1411.76 1213.02 L1411.17 1213.02 L1410.59 1213.02 L1410 1213.02 L1409.42 1213.02 L1408.83 1213.02 L1408.24 1213.02 L1407.66 1213.02 L1407.07 1213.02 L1406.48 1213.02 L1405.9 1213.02 L1405.31 1213.02 L1404.72 1213.02 L1404.14 1213.02 L1403.55 1213.02 L1402.96 1213.02 L1402.38 1213.02 L1401.79 1213.02 L1401.21 1213.02 L1400.62 1213.02 L1400.03 1213.02 L1399.45 1213.02 L1398.86 1213.02 L1398.27 1213.02 L1397.69 1213.02 L1397.1 1213.02 L1396.51 1213.02 L1395.93 1213.02 L1395.34 1213.02 L1394.75 1213.02 L1394.17 1213.02 L1393.58 1213.02 L1393 1213.02 L1392.41 1213.02 L1391.82 1213.02 L1391.24 1213.02 L1390.65 1213.02 L1390.06 1213.02 L1389.48 1213.02 L1388.89 1213.02 L1388.3 1213.02 L1387.72 1213.02 L1387.13 1213.02 L1386.55 1213.02 L1385.96 1213.02 L1385.37 1213.02 L1384.79 1213.02 L1384.2 1213.02 L1383.61 1213.02 L1383.03 1213.02 L1382.44 1213.02 L1381.85 1213.02 L1381.27 1213.02 L1380.68 1213.02 L1380.09 1213.02 L1379.51 1213.02 L1378.92 1213.02 L1378.34 1213.02 L1377.75 1213.02 L1377.16 1213.02 L1376.58 1213.02 L1375.99 1213.02 L1375.4 1213.02 L1374.82 1213.02 L1374.23 1213.02 L1373.64 1213.02 L1373.06 1213.02 L1372.47 1213.02 L1371.88 1213.02 L1371.3 1213.02 L1370.71 1213.02 L1370.13 1213.02 L1369.54 1213.02 L1368.95 1213.02 L1368.37 1213.02 L1367.78 1213.02 L1367.19 1213.02 L1366.61 1213.02 L1366.02 1213.02 L1365.43 1213.02 L1364.85 1213.02 L1364.26 1213.02 L1363.68 1213.02 L1363.09 1213.02 L1362.5 1213.02 L1361.92 1213.02 L1361.33 1213.02 L1360.74 1213.02 L1360.16 1213.02 L1359.57 1213.02 L1358.98 1213.02 L1358.4 1213.02 L1357.81 1213.02 L1357.22 1213.02 L1356.64 1213.02 L1356.05 1213.02 L1355.47 1213.02 L1354.88 1213.02 L1354.29 1213.02 L1353.71 1213.02 L1353.12 1213.02 L1352.53 1213.02 L1351.95 1213.02 L1351.36 1213.02 L1350.77 1213.02 L1350.19 1213.02 L1349.6 1213.02 L1349.01 1213.02 L1348.43 1213.02 L1347.84 1213.02 L1347.26 1213.02 L1346.67 1213.02 L1346.08 1213.02 L1345.5 1213.02 L1344.91 1213.02 L1344.32 1213.02 L1343.74 1213.02 L1343.15 1213.02 L1342.56 1213.02 L1341.98 1213.02 L1341.39 1213.02 L1340.8 1213.02 L1340.22 1213.02 L1339.63 1213.02 L1339.05 1213.02 L1338.46 1213.02 L1337.87 1213.02 L1337.29 1213.02 L1336.7 1213.02 L1336.11 1213.02 L1335.53 1213.02 L1334.94 1213.02 L1334.35 1213.02 L1333.77 1213.02 L1333.18 1213.02 L1332.6 1213.02 L1332.01 1213.02 L1331.42 1213.02 L1330.84 1213.02 L1330.25 1213.02 L1329.66 1213.02 L1329.08 1213.02 L1328.49 1213.02 L1327.9 1213.02 L1327.32 1213.02 L1326.73 1213.02 L1326.14 1213.02 L1325.56 1213.02 L1324.97 1213.02 L1324.39 1213.02 L1323.8 1213.02 L1323.21 1213.02 L1322.63 1213.02 L1322.04 1213.02 L1321.45 1213.02 L1320.87 1213.02 L1320.28 1213.02 L1319.69 1213.02 L1319.11 1213.02 L1318.52 1213.02 L1317.93 1213.02 L1317.35 1213.02 L1316.76 1213.02 L1316.18 1213.02 L1315.59 1213.02 L1315 1213.02 L1314.42 1213.02 L1313.83 1213.02 L1313.24 1213.02 L1312.66 1213.02 L1312.07 1213.02 L1311.48 1213.02 L1310.9 1213.02 L1310.31 1213.02 L1309.73 1213.02 L1309.14 1213.02 L1308.55 1213.02 L1307.97 1213.02 L1307.38 1213.02 L1306.79 1213.02 L1306.21 1213.02 L1305.62 1213.02 L1305.03 1213.02 L1304.45 1213.02 L1303.86 1213.02 L1303.27 1213.02 L1302.69 1213.02 L1302.1 1213.02 L1301.52 1213.02 L1300.93 1213.02 L1300.34 1213.02 L1299.76 1213.02 L1299.17 1213.02 L1298.58 1213.02 L1298 1213.02 L1297.41 1213.02 L1296.82 1213.02 L1296.24 1213.02 L1295.65 1213.02 L1295.06 1213.02 L1294.48 1213.02 L1293.89 1213.02 L1293.31 1213.02 L1292.72 1213.02 L1292.13 1213.02 L1291.55 1213.02 L1290.96 1213.02 L1290.37 1213.02 L1289.79 1213.02 L1289.2 1213.02 L1288.61 1213.02 L1288.03 1213.02 L1287.44 1213.02 L1286.86 1213.02 L1286.27 1213.02 L1285.68 1213.02 L1285.1 1213.02 L1284.51 1213.02 L1283.92 1213.02 L1283.34 1213.02 L1282.75 1213.02 L1282.16 1213.02 L1281.58 1213.02 L1280.99 1213.02 L1280.4 1213.02 L1279.82 1213.02 L1279.23 1213.02 L1278.65 1213.02 L1278.06 1213.02 L1277.47 1213.02 L1276.89 1213.02 L1276.3 1213.02 L1275.71 1213.02 L1275.13 1213.02 L1274.54 1213.02 L1273.95 1213.02 L1273.37 1213.02 L1272.78 1213.02 L1272.19 1213.02 L1271.61 1213.02 L1271.02 1213.02 L1270.44 1213.02 L1269.85 1213.02 L1269.26 1213.02 L1268.68 1213.02 L1268.09 1213.02 L1267.5 1213.02 L1266.92 1213.02 L1266.33 1213.02 L1265.74 1213.02 L1265.16 1213.02 L1264.57 1213.02 L1263.98 1213.02 L1263.4 1213.02 L1262.81 1213.02 L1262.23 1213.02 L1261.64 1213.02 L1261.05 1213.02 L1260.47 1213.02 L1259.88 1213.02 L1259.29 1213.02 L1258.71 1213.02 L1258.12 1213.02 L1257.53 1213.02 L1256.95 1213.02 L1256.36 1213.02 L1255.78 1213.02 L1255.19 1213.02 L1254.6 1213.02 L1254.02 1213.02 L1253.43 1213.02 L1252.84 1213.02 L1252.26 1213.02 L1251.67 1213.02 L1251.08 1213.02 L1250.5 1213.02 L1249.91 1213.02 L1249.32 1213.02 L1248.74 1213.02 L1248.15 1213.02 L1247.57 1213.02 L1246.98 1213.02 L1246.39 1213.02 L1245.81 1213.02 L1245.22 1213.02 L1244.63 1213.02 L1244.05 1213.02 L1243.46 1213.02 L1242.87 1213.02 L1242.29 1213.02 L1241.7 1213.02 L1241.11 1213.02 L1240.53 1213.02 L1239.94 1213.02 L1239.36 1213.02 L1238.77 1213.02 L1238.18 1213.02 L1237.6 1213.02 L1237.01 1213.02 L1236.42 1213.02 L1235.84 1213.02 L1235.25 1213.02 L1234.66 1213.02 L1234.08 1213.02 L1233.49 1213.02 L1232.91 1213.02 L1232.32 1213.02 L1231.73 1213.02 L1231.15 1213.02 L1230.56 1213.02 L1229.97 1213.02 L1229.39 1213.02 L1228.8 1213.02 L1228.21 1213.02 L1227.63 1213.02 L1227.04 1213.02 L1226.45 1213.02 L1225.87 1213.02 L1225.28 1213.02 L1224.7 1213.02 L1224.11 1213.02 L1223.52 1213.02 L1222.94 1213.02 L1222.35 1213.02 L1221.76 1213.02 L1221.18 1213.02 L1220.59 1213.02 L1220 1213.02 L1219.42 1213.02 L1218.83 1213.02 L1218.24 1213.02 L1217.66 1213.02 L1217.07 1213.02 L1216.49 1213.02 L1215.9 1213.02 L1215.31 1213.02 L1214.73 1213.02 L1214.14 1213.02 L1213.55 1213.02 L1212.97 1213.02 L1212.38 1213.02 L1211.79 1213.02 L1211.21 1213.02 L1210.62 1213.02 L1210.03 1213.02 L1209.45 1213.02 L1208.86 1213.02 L1208.28 1213.02 L1207.69 1213.02 L1207.1 1213.02 L1206.52 1213.02 L1205.93 1213.02 L1205.34 1213.02 L1204.76 1213.02 L1204.17 1213.02 L1203.58 1213.02 L1203 1213.02 L1202.41 1213.02 L1201.83 1213.02 L1201.24 1213.02 L1200.65 1213.02 L1200.07 1213.02 L1199.48 1213.02 L1198.89 1213.02 L1198.31 1213.02 L1197.72 1213.02 L1197.13 1213.02 L1196.55 1213.02 L1195.96 1213.02 L1195.37 1213.02 L1194.79 1213.02 L1194.2 1213.02 L1193.62 1213.02 L1193.03 1213.02 L1192.44 1213.02 L1191.86 1213.02 L1191.27 1213.02 L1190.68 1213.02 L1190.1 1213.02 L1189.51 1213.02 L1188.92 1213.02 L1188.34 1213.02 L1187.75 1213.02 L1187.16 1213.02 L1186.58 1213.02 L1185.99 1213.02 L1185.41 1213.02 L1184.82 1213.02 L1184.23 1213.02 L1183.65 1213.02 L1183.06 1213.02 L1182.47 1213.02 L1181.89 1213.02 L1181.3 1213.02 L1180.71 1213.02 L1180.13 1213.02 L1179.54 1213.02 L1178.96 1213.02 L1178.37 1213.02 L1177.78 1213.02 L1177.2 1213.02 L1176.61 1213.02 L1176.02 1213.02 L1175.44 1213.02 L1174.85 1213.02 L1174.26 1213.02 L1173.68 1213.02 L1173.09 1213.02 L1172.5 1213.02 L1171.92 1213.02 L1171.33 1213.02 L1170.75 1213.02 L1170.16 1213.02 L1169.57 1213.02 L1168.99 1213.02 L1168.4 1213.02 L1167.81 1213.02 L1167.23 1213.02 L1166.64 1213.02 L1166.05 1213.02 L1165.47 1213.02 L1164.88 1213.02 L1164.29 1213.02 L1163.71 1213.02 L1163.12 1213.02 L1162.54 1213.02 L1161.95 1213.02 L1161.36 1213.02 L1160.78 1213.02 L1160.19 1213.02 L1159.6 1213.02 L1159.02 1213.02 L1158.43 1213.02 L1157.84 1213.02 L1157.26 1213.02 L1156.67 1213.02 L1156.09 1213.02 L1155.5 1213.02 L1154.91 1213.02 L1154.33 1213.02 L1153.74 1213.02 L1153.15 1213.02 L1152.57 1213.02 L1151.98 1213.02 L1151.39 1213.02 L1150.81 1213.02 L1150.22 1213.02 L1149.63 1213.02 L1149.05 1213.02 L1148.46 1213.02 L1147.88 1213.02 L1147.29 1213.02 L1146.7 1213.02 L1146.12 1213.02 L1145.53 1213.02 L1144.94 1213.02 L1144.36 1213.02 L1143.77 1213.02 L1143.18 1213.02 L1142.6 1213.02 L1142.01 1213.02 L1141.42 1213.02 L1140.84 1213.02 L1140.25 1213.02 L1139.67 1213.02 L1139.08 1213.02 L1138.49 1213.02 L1137.91 1213.02 L1137.32 1213.02 L1136.73 1213.02 L1136.15 1213.02 L1135.56 1213.02 L1134.97 1213.02 L1134.39 1213.02 L1133.8 1213.02 L1133.21 1213.02 L1132.63 1213.02 L1132.04 1213.02 L1131.46 1213.02 L1130.87 1213.02 L1130.28 1213.02 L1129.7 1213.02 L1129.11 1213.02 L1128.52 1213.02 L1127.94 1213.02 L1127.35 1213.02 L1126.76 1213.02 L1126.18 1213.02 L1125.59 1213.02 L1125.01 1213.02 L1124.42 1213.02 L1123.83 1213.02 L1123.25 1213.02 L1122.66 1213.02 L1122.07 1213.02 L1121.49 1213.02 L1120.9 1213.02 L1120.31 1213.02 L1119.73 1213.02 L1119.14 1213.02 L1118.55 1213.02 L1117.97 1213.02 L1117.38 1213.02 L1116.8 1213.02 L1116.21 1213.02 L1115.62 1213.02 L1115.04 1213.02 L1114.45 1213.02 L1113.86 1213.02 L1113.28 1213.02 L1112.69 1213.02 L1112.1 1213.02 L1111.52 1213.02 L1110.93 1213.02 L1110.34 1213.02 L1109.76 1213.02 L1109.17 1213.02 L1108.59 1213.02 L1108 1213.02 L1107.41 1213.02 L1106.83 1213.02 L1106.24 1213.02 L1105.65 1213.02 L1105.07 1213.02 L1104.48 1213.02 L1103.89 1213.02 L1103.31 1213.02 L1102.72 1213.02 L1102.14 1213.02 L1101.55 1213.02 L1100.96 1213.02 L1100.38 1213.02 L1099.79 1213.02 L1099.2 1213.02 L1098.62 1213.02 L1098.03 1213.02 L1097.44 1213.02 L1096.86 1213.02 L1096.27 1213.02 L1095.68 1213.02 L1095.1 1213.02 L1094.51 1213.02 L1093.93 1213.02 L1093.34 1213.02 L1092.75 1213.02 L1092.17 1213.02 L1091.58 1213.02 L1090.99 1213.02 L1090.41 1213.02 L1089.82 1213.02 L1089.23 1213.02 L1088.65 1213.02 L1088.06 1213.02 L1087.47 1213.02 L1086.89 1213.02 L1086.3 1213.02 L1085.72 1213.02 L1085.13 1213.02 L1084.54 1213.02 L1083.96 1213.02 L1083.37 1213.02 L1082.78 1213.02 L1082.2 1213.02 L1081.61 1213.02 L1081.02 1213.02 L1080.44 1213.02 L1079.85 1213.02 L1079.26 1213.02 L1078.68 1213.02 L1078.09 1213.02 L1077.51 1213.02 L1076.92 1213.02 L1076.33 1213.02 L1075.75 1213.02 L1075.16 1213.02 L1074.57 1213.02 L1073.99 1213.02 L1073.4 1213.02 L1072.81 1213.02 L1072.23 1213.02 L1071.64 1213.02 L1071.06 1213.02 L1070.47 1213.02 L1069.88 1213.02 L1069.3 1213.02 L1068.71 1213.02 L1068.12 1213.02 L1067.54 1213.02 L1066.95 1213.02 L1066.36 1213.02 L1065.78 1213.02 L1065.19 1213.02 L1064.6 1213.02 L1064.02 1213.02 L1063.43 1213.02 L1062.85 1213.02 L1062.26 1213.02 L1061.67 1213.02 L1061.09 1213.02 L1060.5 1213.02 L1059.91 1213.02 L1059.33 1213.02 L1058.74 1213.02 L1058.15 1213.02 L1057.57 1213.02 L1056.98 1213.02 L1056.39 1213.02 L1055.81 1213.02 L1055.22 1213.02 L1054.64 1213.02 L1054.05 1213.02 L1053.46 1213.02 L1052.88 1213.02 L1052.29 1213.02 L1051.7 1213.02 L1051.12 1213.02 L1050.53 1213.02 L1049.94 1213.02 L1049.36 1213.02 L1048.77 1213.02 L1048.19 1213.02 L1047.6 1213.02 L1047.01 1213.02 L1046.43 1213.02 L1045.84 1213.02 L1045.25 1213.02 L1044.67 1213.02 L1044.08 1213.02 L1043.49 1213.02 L1042.91 1213.02 L1042.32 1213.02 L1041.73 1213.02 L1041.15 1213.02 L1040.56 1213.02 L1039.98 1213.02 L1039.39 1213.02 L1038.8 1213.02 L1038.22 1213.02 L1037.63 1213.02 L1037.04 1213.02 L1036.46 1213.02 L1035.87 1213.02 L1035.28 1213.02 L1034.7 1213.02 L1034.11 1213.02 L1033.52 1213.02 L1032.94 1213.02 L1032.35 1213.02 L1031.77 1213.02 L1031.18 1213.02 L1030.59 1213.02 L1030.01 1213.02 L1029.42 1213.02 L1028.83 1213.02 L1028.25 1213.02 L1027.66 1213.02 L1027.07 1213.02 L1026.49 1213.02 L1025.9 1213.02 L1025.32 1213.02 L1024.73 1213.02 L1024.14 1213.02 L1023.56 1213.02 L1022.97 1213.02 L1022.38 1213.02 L1021.8 1213.02 L1021.21 1213.02 L1020.62 1213.02 L1020.04 1213.02 L1019.45 1213.02 L1018.86 1213.02 L1018.28 1213.02 L1017.69 1213.02 L1017.11 1213.02 L1016.52 1213.02 L1015.93 1213.02 L1015.35 1213.02 L1014.76 1213.02 L1014.17 1213.02 L1013.59 1213.02 L1013 1213.02 L1012.41 1213.02 L1011.83 1213.02 L1011.24 1213.02 L1010.65 1213.02 L1010.07 1213.02 L1009.48 1213.02 L1008.9 1213.02 L1008.31 1213.02 L1007.72 1213.02 L1007.14 1213.02 L1006.55 1213.02 L1005.96 1213.02 L1005.38 1213.02 L1004.79 1213.02 L1004.2 1213.02 L1003.62 1213.02 L1003.03 1213.02 L1002.44 1213.02 L1001.86 1213.02 L1001.27 1213.02 L1000.69 1213.02 L1000.1 1213.02 L999.513 1213.02 L998.926 1213.02 L998.34 1213.02 L997.754 1213.02 L997.167 1213.02 L996.581 1213.02 L995.994 1213.02 L995.408 1213.02 L994.822 1213.02 L994.235 1213.02 L993.649 1213.02 L993.062 1213.02 L992.476 1213.02 L991.889 1213.02 L991.303 1213.02 L990.717 1213.02 L990.13 1213.02 L989.544 1213.02 L988.957 1213.02 L988.371 1213.02 L987.785 1213.02 L987.198 1213.02 L986.612 1213.02 L986.025 1213.02  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.29 986.612,1213.29 987.198,1213.29 987.785,1213.29 988.371,1213.29 988.957,1213.29 989.544,1213.29 990.13,1213.29 990.717,1213.29 991.303,1213.29 991.889,1213.29 992.476,1213.29 993.062,1213.29 993.649,1213.29 994.235,1213.29 994.822,1213.29 995.408,1213.29 995.994,1213.29 996.581,1213.29 997.167,1213.29 997.754,1213.29 998.34,1213.29 998.926,1213.29 999.513,1213.29 1000.1,1213.29 1000.69,1213.29 1001.27,1213.29 1001.86,1213.29 1002.44,1213.29 1003.03,1213.29 1003.62,1213.29 1004.2,1213.29 1004.79,1213.29 1005.38,1213.29 1005.96,1213.29 1006.55,1213.29 1007.14,1213.29 1007.72,1213.29 1008.31,1213.29 1008.9,1213.29 1009.48,1213.29 1010.07,1213.29 1010.65,1213.29 1011.24,1213.29 1011.83,1213.29 1012.41,1213.29 1013,1213.29 1013.59,1213.29 1014.17,1213.29 1014.76,1213.29 1015.35,1213.29 1015.93,1213.29 1016.52,1213.29 1017.11,1213.29 1017.69,1213.29 1018.28,1213.29 1018.86,1213.29 1019.45,1213.29 1020.04,1213.29 1020.62,1213.29 1021.21,1213.29 1021.8,1213.29 1022.38,1213.29 1022.97,1213.29 1023.56,1213.29 1024.14,1213.29 1024.73,1213.29 1025.32,1213.29 1025.9,1213.29 1026.49,1213.29 1027.07,1213.29 1027.66,1213.29 1028.25,1213.29 1028.83,1213.29 1029.42,1213.29 1030.01,1213.29 1030.59,1213.29 1031.18,1213.29 1031.77,1213.29 1032.35,1213.29 1032.94,1213.29 1033.52,1213.29 1034.11,1213.29 1034.7,1213.29 1035.28,1213.29 1035.87,1213.29 1036.46,1213.29 1037.04,1213.29 1037.63,1213.29 1038.22,1213.29 1038.8,1213.29 1039.39,1213.29 1039.98,1213.29 1040.56,1213.29 1041.15,1213.29 1041.73,1213.29 1042.32,1213.29 1042.91,1213.29 1043.49,1213.29 1044.08,1213.29 1044.67,1213.29 1045.25,1213.29 1045.84,1213.29 1046.43,1213.29 1047.01,1213.29 1047.6,1213.29 1048.19,1213.29 1048.77,1213.29 1049.36,1213.29 1049.94,1213.29 1050.53,1213.29 1051.12,1213.29 1051.7,1213.29 1052.29,1213.29 1052.88,1213.29 1053.46,1213.29 1054.05,1213.29 1054.64,1213.29 1055.22,1213.29 1055.81,1213.29 1056.39,1213.29 1056.98,1213.29 1057.57,1213.29 1058.15,1213.29 1058.74,1213.29 1059.33,1213.29 1059.91,1213.29 1060.5,1213.29 1061.09,1213.29 1061.67,1213.29 1062.26,1213.29 1062.85,1213.29 1063.43,1213.29 1064.02,1213.29 1064.6,1213.29 1065.19,1213.29 1065.78,1213.29 1066.36,1213.29 1066.95,1213.29 1067.54,1213.29 1068.12,1213.29 1068.71,1213.29 1069.3,1213.29 1069.88,1213.29 1070.47,1213.29 1071.06,1213.29 1071.64,1213.29 1072.23,1213.29 1072.81,1213.29 1073.4,1213.29 1073.99,1213.29 1074.57,1213.29 1075.16,1213.29 1075.75,1213.29 1076.33,1213.29 1076.92,1213.29 1077.51,1213.29 1078.09,1213.29 1078.68,1213.29 1079.26,1213.29 1079.85,1213.29 1080.44,1213.29 1081.02,1213.29 1081.61,1213.29 1082.2,1213.29 1082.78,1213.29 1083.37,1213.29 1083.96,1213.29 1084.54,1213.29 1085.13,1213.29 1085.72,1213.29 1086.3,1213.29 1086.89,1213.29 1087.47,1213.29 1088.06,1213.29 1088.65,1213.29 1089.23,1213.29 1089.82,1213.29 1090.41,1213.29 1090.99,1213.29 1091.58,1213.29 1092.17,1213.29 1092.75,1213.29 1093.34,1213.29 1093.93,1213.29 1094.51,1213.29 1095.1,1213.29 1095.68,1213.29 1096.27,1213.29 1096.86,1213.29 1097.44,1213.29 1098.03,1213.29 1098.62,1213.29 1099.2,1213.29 1099.79,1213.29 1100.38,1213.29 1100.96,1213.29 1101.55,1213.29 1102.14,1213.29 1102.72,1213.29 1103.31,1213.29 1103.89,1213.29 1104.48,1213.29 1105.07,1213.29 1105.65,1213.29 1106.24,1213.29 1106.83,1213.29 1107.41,1213.29 1108,1213.29 1108.59,1213.29 1109.17,1213.29 1109.76,1213.29 1110.34,1213.29 1110.93,1213.29 1111.52,1213.29 1112.1,1213.29 1112.69,1213.29 1113.28,1213.29 1113.86,1213.29 1114.45,1213.29 1115.04,1213.29 1115.62,1213.29 1116.21,1213.29 1116.8,1213.29 1117.38,1213.29 1117.97,1213.29 1118.55,1213.29 1119.14,1213.29 1119.73,1213.29 1120.31,1213.29 1120.9,1213.29 1121.49,1213.29 1122.07,1213.29 1122.66,1213.29 1123.25,1213.29 1123.83,1213.29 1124.42,1213.29 1125.01,1213.29 1125.59,1213.29 1126.18,1213.29 1126.76,1213.29 1127.35,1213.29 1127.94,1213.29 1128.52,1213.29 1129.11,1213.29 1129.7,1213.29 1130.28,1213.29 1130.87,1213.29 1131.46,1213.29 1132.04,1213.29 1132.63,1213.29 1133.21,1213.29 1133.8,1213.29 1134.39,1213.29 1134.97,1213.29 1135.56,1213.29 1136.15,1213.29 1136.73,1213.29 1137.32,1213.29 1137.91,1213.29 1138.49,1213.29 1139.08,1213.29 1139.67,1213.29 1140.25,1213.29 1140.84,1213.29 1141.42,1213.29 1142.01,1213.29 1142.6,1213.29 1143.18,1213.29 1143.77,1213.29 1144.36,1213.29 1144.94,1213.29 1145.53,1213.29 1146.12,1213.29 1146.7,1213.29 1147.29,1213.29 1147.88,1213.29 1148.46,1213.29 1149.05,1213.29 1149.63,1213.29 1150.22,1213.29 1150.81,1213.29 1151.39,1213.29 1151.98,1213.29 1152.57,1213.29 1153.15,1213.29 1153.74,1213.29 1154.33,1213.29 1154.91,1213.29 1155.5,1213.29 1156.09,1213.29 1156.67,1213.29 1157.26,1213.29 1157.84,1213.29 1158.43,1213.29 1159.02,1213.29 1159.6,1213.29 1160.19,1213.29 1160.78,1213.29 1161.36,1213.29 1161.95,1213.29 1162.54,1213.29 1163.12,1213.29 1163.71,1213.29 1164.29,1213.29 1164.88,1213.29 1165.47,1213.29 1166.05,1213.29 1166.64,1213.29 1167.23,1213.29 1167.81,1213.29 1168.4,1213.29 1168.99,1213.29 1169.57,1213.29 1170.16,1213.29 1170.75,1213.29 1171.33,1213.29 1171.92,1213.29 1172.5,1213.29 1173.09,1213.29 1173.68,1213.29 1174.26,1213.29 1174.85,1213.29 1175.44,1213.29 1176.02,1213.29 1176.61,1213.29 1177.2,1213.29 1177.78,1213.29 1178.37,1213.29 1178.96,1213.29 1179.54,1213.29 1180.13,1213.29 1180.71,1213.29 1181.3,1213.29 1181.89,1213.29 1182.47,1213.29 1183.06,1213.29 1183.65,1213.29 1184.23,1213.29 1184.82,1213.29 1185.41,1213.29 1185.99,1213.29 1186.58,1213.29 1187.16,1213.29 1187.75,1213.29 1188.34,1213.29 1188.92,1213.29 1189.51,1213.29 1190.1,1213.29 1190.68,1213.29 1191.27,1213.29 1191.86,1213.29 1192.44,1213.29 1193.03,1213.29 1193.62,1213.29 1194.2,1213.29 1194.79,1213.29 1195.37,1213.29 1195.96,1213.29 1196.55,1213.29 1197.13,1213.29 1197.72,1213.29 1198.31,1213.29 1198.89,1213.29 1199.48,1213.29 1200.07,1213.29 1200.65,1213.29 1201.24,1213.29 1201.83,1213.29 1202.41,1213.29 1203,1213.29 1203.58,1213.29 1204.17,1213.29 1204.76,1213.29 1205.34,1213.29 1205.93,1213.29 1206.52,1213.29 1207.1,1213.29 1207.69,1213.29 1208.28,1213.29 1208.86,1213.29 1209.45,1213.29 1210.03,1213.29 1210.62,1213.29 1211.21,1213.29 1211.79,1213.29 1212.38,1213.29 1212.97,1213.29 1213.55,1213.29 1214.14,1213.29 1214.73,1213.29 1215.31,1213.29 1215.9,1213.29 1216.49,1213.29 1217.07,1213.29 1217.66,1213.29 1218.24,1213.29 1218.83,1213.29 1219.42,1213.29 1220,1213.29 1220.59,1213.29 1221.18,1213.29 1221.76,1213.29 1222.35,1213.29 1222.94,1213.29 1223.52,1213.29 1224.11,1213.29 1224.7,1213.29 1225.28,1213.29 1225.87,1213.29 1226.45,1213.29 1227.04,1213.29 1227.63,1213.29 1228.21,1213.29 1228.8,1213.29 1229.39,1213.29 1229.97,1213.29 1230.56,1213.29 1231.15,1213.29 1231.73,1213.29 1232.32,1213.29 1232.91,1213.29 1233.49,1213.29 1234.08,1213.29 1234.66,1213.29 1235.25,1213.29 1235.84,1213.29 1236.42,1213.29 1237.01,1213.29 1237.6,1213.29 1238.18,1213.29 1238.77,1213.29 1239.36,1213.29 1239.94,1213.29 1240.53,1213.29 1241.11,1213.29 1241.7,1213.29 1242.29,1213.29 1242.87,1213.29 1243.46,1213.29 1244.05,1213.29 1244.63,1213.29 1245.22,1213.29 1245.81,1213.29 1246.39,1213.29 1246.98,1213.29 1247.57,1213.29 1248.15,1213.29 1248.74,1213.29 1249.32,1213.29 1249.91,1213.29 1250.5,1213.29 1251.08,1213.29 1251.67,1213.29 1252.26,1213.29 1252.84,1213.29 1253.43,1213.29 1254.02,1213.29 1254.6,1213.29 1255.19,1213.29 1255.78,1213.29 1256.36,1213.29 1256.95,1213.29 1257.53,1213.29 1258.12,1213.29 1258.71,1213.29 1259.29,1213.29 1259.88,1213.29 1260.47,1213.29 1261.05,1213.29 1261.64,1213.29 1262.23,1213.29 1262.81,1213.29 1263.4,1213.29 1263.98,1213.29 1264.57,1213.29 1265.16,1213.29 1265.74,1213.29 1266.33,1213.29 1266.92,1213.29 1267.5,1213.29 1268.09,1213.29 1268.68,1213.29 1269.26,1213.29 1269.85,1213.29 1270.44,1213.29 1271.02,1213.29 1271.61,1213.29 1272.19,1213.29 1272.78,1213.29 1273.37,1213.29 1273.95,1213.29 1274.54,1213.29 1275.13,1213.29 1275.71,1213.29 1276.3,1213.29 1276.89,1213.29 1277.47,1213.29 1278.06,1213.29 1278.65,1213.29 1279.23,1213.29 1279.82,1213.29 1280.4,1213.29 1280.99,1213.29 1281.58,1213.29 1282.16,1213.29 1282.75,1213.29 1283.34,1213.29 1283.92,1213.29 1284.51,1213.29 1285.1,1213.29 1285.68,1213.29 1286.27,1213.29 1286.86,1213.29 1287.44,1213.29 1288.03,1213.29 1288.61,1213.29 1289.2,1213.29 1289.79,1213.29 1290.37,1213.29 1290.96,1213.29 1291.55,1213.29 1292.13,1213.29 1292.72,1213.29 1293.31,1213.29 1293.89,1213.29 1294.48,1213.29 1295.06,1213.29 1295.65,1213.29 1296.24,1213.29 1296.82,1213.29 1297.41,1213.29 1298,1213.29 1298.58,1213.29 1299.17,1213.29 1299.76,1213.29 1300.34,1213.29 1300.93,1213.29 1301.52,1213.29 1302.1,1213.29 1302.69,1213.29 1303.27,1213.29 1303.86,1213.29 1304.45,1213.29 1305.03,1213.29 1305.62,1213.29 1306.21,1213.29 1306.79,1213.29 1307.38,1213.29 1307.97,1213.29 1308.55,1213.29 1309.14,1213.29 1309.73,1213.29 1310.31,1213.29 1310.9,1213.29 1311.48,1213.29 1312.07,1213.29 1312.66,1213.29 1313.24,1213.29 1313.83,1213.29 1314.42,1213.29 1315,1213.29 1315.59,1213.29 1316.18,1213.29 1316.76,1213.29 1317.35,1213.29 1317.93,1213.29 1318.52,1213.29 1319.11,1213.29 1319.69,1213.29 1320.28,1213.29 1320.87,1213.29 1321.45,1213.29 1322.04,1213.29 1322.63,1213.29 1323.21,1213.29 1323.8,1213.29 1324.39,1213.29 1324.97,1213.29 1325.56,1213.29 1326.14,1213.29 1326.73,1213.29 1327.32,1213.29 1327.9,1213.29 1328.49,1213.29 1329.08,1213.29 1329.66,1213.29 1330.25,1213.29 1330.84,1213.29 1331.42,1213.29 1332.01,1213.29 1332.6,1213.29 1333.18,1213.29 1333.77,1213.29 1334.35,1213.29 1334.94,1213.29 1335.53,1213.29 1336.11,1213.29 1336.7,1213.29 1337.29,1213.29 1337.87,1213.29 1338.46,1213.29 1339.05,1213.29 1339.63,1213.29 1340.22,1213.29 1340.8,1213.29 1341.39,1213.29 1341.98,1213.29 1342.56,1213.29 1343.15,1213.29 1343.74,1213.29 1344.32,1213.29 1344.91,1213.29 1345.5,1213.29 1346.08,1213.29 1346.67,1213.29 1347.26,1213.29 1347.84,1213.29 1348.43,1213.29 1349.01,1213.29 1349.6,1213.29 1350.19,1213.29 1350.77,1213.29 1351.36,1213.29 1351.95,1213.29 1352.53,1213.29 1353.12,1213.29 1353.71,1213.29 1354.29,1213.29 1354.88,1213.29 1355.47,1213.29 1356.05,1213.29 1356.64,1213.29 1357.22,1213.29 1357.81,1213.29 1358.4,1213.29 1358.98,1213.29 1359.57,1213.29 1360.16,1213.29 1360.74,1213.29 1361.33,1213.29 1361.92,1213.29 1362.5,1213.29 1363.09,1213.29 1363.68,1213.29 1364.26,1213.29 1364.85,1213.29 1365.43,1213.29 1366.02,1213.29 1366.61,1213.29 1367.19,1213.29 1367.78,1213.29 1368.37,1213.29 1368.95,1213.29 1369.54,1213.29 1370.13,1213.29 1370.71,1213.29 1371.3,1213.29 1371.88,1213.29 1372.47,1213.29 1373.06,1213.29 1373.64,1213.29 1374.23,1213.29 1374.82,1213.29 1375.4,1213.29 1375.99,1213.29 1376.58,1213.29 1377.16,1213.29 1377.75,1213.29 1378.34,1213.29 1378.92,1213.29 1379.51,1213.29 1380.09,1213.29 1380.68,1213.29 1381.27,1213.29 1381.85,1213.29 1382.44,1213.29 1383.03,1213.29 1383.61,1213.29 1384.2,1213.29 1384.79,1213.29 1385.37,1213.29 1385.96,1213.29 1386.55,1213.29 1387.13,1213.29 1387.72,1213.29 1388.3,1213.29 1388.89,1213.29 1389.48,1213.29 1390.06,1213.29 1390.65,1213.29 1391.24,1213.29 1391.82,1213.29 1392.41,1213.29 1393,1213.29 1393.58,1213.29 1394.17,1213.29 1394.75,1213.29 1395.34,1213.29 1395.93,1213.29 1396.51,1213.29 1397.1,1213.29 1397.69,1213.29 1398.27,1213.29 1398.86,1213.29 1399.45,1213.29 1400.03,1213.29 1400.62,1213.29 1401.21,1213.29 1401.79,1213.29 1402.38,1213.29 1402.96,1213.29 1403.55,1213.29 1404.14,1213.29 1404.72,1213.29 1405.31,1213.29 1405.9,1213.29 1406.48,1213.29 1407.07,1213.29 1407.66,1213.29 1408.24,1213.29 1408.83,1213.29 1409.42,1213.29 1410,1213.29 1410.59,1213.29 1411.17,1213.29 1411.76,1213.29 1412.35,1213.29 1412.93,1213.29 1413.52,1213.29 1414.11,1213.29 1414.69,1213.29 1415.28,1213.29 1415.87,1213.29 1416.45,1213.29 1417.04,1213.29 1417.63,1213.29 1418.21,1213.29 1418.8,1213.29 1419.38,1213.29 1419.97,1213.29 1420.56,1213.29 1421.14,1213.29 1421.73,1213.29 1422.32,1213.29 1422.9,1213.29 1423.49,1213.29 1424.08,1213.29 1424.66,1213.29 1425.25,1213.29 1425.83,1213.29 1426.42,1213.29 1427.01,1213.29 1427.59,1213.29 1428.18,1213.29 1428.77,1213.29 1429.35,1213.29 1429.94,1213.29 1430.53,1213.29 1431.11,1213.29 1431.7,1213.29 1432.29,1213.29 1432.87,1213.29 1433.46,1213.29 1434.04,1213.29 1434.63,1213.29 1435.22,1213.29 1435.8,1213.29 1436.39,1213.29 1436.98,1213.29 1437.56,1213.29 1438.15,1213.29 1438.74,1213.29 1439.32,1213.29 1439.91,1213.29 1440.5,1213.29 1441.08,1213.29 1441.67,1213.29 1442.25,1213.29 1442.84,1213.29 1443.43,1213.29 1444.01,1213.29 1444.6,1213.29 1445.19,1213.29 1445.77,1213.29 1446.36,1213.29 1446.95,1213.29 1447.53,1213.29 1448.12,1213.29 1448.7,1213.29 1449.29,1213.29 1449.88,1213.29 1450.46,1213.29 1451.05,1213.29 1451.64,1213.29 1452.22,1213.29 1452.81,1213.29 1453.4,1213.29 1453.98,1213.29 1454.57,1213.29 1455.16,1213.29 1455.74,1213.29 1456.33,1213.29 1456.91,1213.29 1457.5,1213.29 1458.09,1213.29 1458.67,1213.29 1459.26,1213.29 1459.85,1213.29 1460.43,1213.29 1461.02,1213.29 1461.61,1213.29 1462.19,1213.29 1462.78,1213.29 1463.37,1213.29 1463.95,1213.29 1464.54,1213.29 1465.12,1213.29 1465.71,1213.29 1466.3,1213.29 1466.88,1213.29 1467.47,1213.29 1468.06,1213.29 1468.64,1213.29 1469.23,1213.29 1469.82,1213.29 1470.4,1213.29 1470.99,1213.29 1471.57,1213.29 1472.16,1213.29 1472.75,1213.29 1473.33,1213.29 1473.92,1213.29 1474.51,1213.29 1475.09,1213.29 1475.68,1213.29 1476.27,1213.29 1476.85,1213.29 1477.44,1213.29 1478.03,1213.29 1478.61,1213.29 1479.2,1213.29 1479.78,1213.29 1480.37,1213.29 1480.96,1213.29 1481.54,1213.29 1482.13,1213.29 1482.72,1213.29 1483.3,1213.29 1483.89,1213.29 1484.48,1213.29 1485.06,1213.29 1485.65,1213.29 1486.24,1213.29 1486.82,1213.29 1487.41,1213.29 1487.99,1213.29 1488.58,1213.29 1489.17,1213.29 1489.75,1213.29 1490.34,1213.29 1490.93,1213.29 1491.51,1213.29 1492.1,1213.29 1492.69,1213.29 1493.27,1213.29 1493.86,1213.29 1494.45,1213.29 1495.03,1213.29 1495.62,1213.29 1496.2,1213.29 1496.79,1213.29 1497.38,1213.29 1497.96,1213.29 1498.55,1213.29 1499.14,1213.29 1499.72,1213.29 1500.31,1213.29 1500.9,1213.29 1501.48,1213.29 1502.07,1213.29 1502.65,1213.29 1503.24,1213.29 1503.83,1213.29 1504.41,1213.29 1505,1213.29 1505.59,1213.29 1506.17,1213.29 1506.76,1213.29 1507.35,1213.29 1507.93,1213.29 1508.52,1213.29 1509.11,1213.29 1509.69,1213.29 1510.28,1213.29 1510.86,1213.29 1511.45,1213.29 1512.04,1213.29 1512.62,1213.29 1513.21,1213.29 1513.8,1213.29 1514.38,1213.29 1514.97,1213.29 1515.56,1213.29 1516.14,1213.29 1516.73,1213.29 1517.32,1213.29 1517.9,1213.29 1518.49,1213.29 1519.07,1213.29 1519.66,1213.29 1520.25,1213.29 1520.83,1213.29 1521.42,1213.29 1522.01,1213.29 1522.59,1213.29 1523.18,1213.29 1523.77,1213.29 1524.35,1213.29 1524.94,1213.29 1525.52,1213.29 1526.11,1213.29 1526.7,1213.29 1527.28,1213.29 1527.87,1213.29 1528.46,1213.29 1529.04,1213.29 1529.63,1213.29 1530.22,1213.29 1530.8,1213.29 1531.39,1213.29 1531.98,1213.29 1532.56,1213.29 1533.15,1213.29 1533.73,1213.29 1534.32,1213.29 1534.91,1213.29 1535.49,1213.29 1536.08,1213.29 1536.67,1213.29 1537.25,1213.29 1537.84,1213.29 1538.43,1213.29 1539.01,1213.29 1539.6,1213.29 1540.19,1213.29 1540.77,1213.29 1541.36,1213.29 1541.94,1213.29 1542.53,1213.29 1543.12,1213.29 1543.7,1213.29 1544.29,1213.29 1544.88,1213.29 1545.46,1213.29 1546.05,1213.29 1546.64,1213.29 1547.22,1213.29 1547.81,1213.29 1548.4,1213.29 1548.98,1213.29 1549.57,1213.29 1550.15,1213.29 1550.74,1213.29 1551.33,1213.29 1551.91,1213.29 1552.5,1213.29 1553.09,1213.29 1553.67,1213.29 1554.26,1213.29 1554.85,1213.29 1555.43,1213.29 1556.02,1213.29 1556.6,1213.29 1557.19,1213.29 1557.78,1213.29 1558.36,1213.29 1558.95,1213.29 1559.54,1213.29 1560.12,1213.29 1560.71,1213.29 1561.3,1213.29 1561.88,1213.29 1562.47,1213.29 1563.06,1213.29 1563.64,1213.29 1564.23,1213.29 1564.81,1213.29 1565.4,1213.29 1565.99,1213.29 1566.57,1213.29 1567.16,1213.29 1567.75,1213.29 1568.33,1213.29 1568.92,1213.29 1569.51,1213.29 1570.09,1213.29 1570.68,1213.29 1571.27,1213.29 1571.85,1213.29 1572.44,1213.29 1573.02,1213.29 1573.61,1213.29 1574.2,1213.29 1574.78,1213.29 1575.37,1213.29 1575.96,1213.29 1576.54,1213.29 1577.13,1213.29 1577.72,1213.29 1578.3,1213.29 1578.89,1213.29 1579.47,1213.29 1580.06,1213.29 1580.65,1213.29 1581.23,1213.29 1581.82,1213.29 1582.41,1213.29 1582.99,1213.29 1583.58,1213.29 1584.17,1213.29 1584.75,1213.29 1585.34,1213.29 1585.93,1213.29 1586.51,1213.29 1587.1,1213.29 1587.68,1213.29 1588.27,1213.29 1588.86,1213.29 1589.44,1213.29 1590.03,1213.29 1590.62,1213.29 1591.2,1213.29 1591.79,1213.29 1592.38,1213.29 1592.96,1213.29 1593.55,1213.29 1594.14,1213.29 1594.72,1213.29 1595.31,1213.29 1595.89,1213.29 1596.48,1213.29 1597.07,1213.29 1597.65,1213.29 1598.24,1213.29 1598.83,1213.29 1599.41,1213.29 1600,1213.29 1600.59,1213.29 1601.17,1213.29 1601.76,1213.29 1602.34,1213.29 1602.93,1213.29 1603.52,1213.29 1604.1,1213.29 1604.69,1213.29 1605.28,1213.29 1605.86,1213.29 1606.45,1213.29 1607.04,1213.29 1607.62,1213.29 1608.21,1213.29 1608.8,1213.29 1609.38,1213.29 1609.97,1213.29 1610.55,1213.29 1611.14,1213.29 1611.73,1213.29 1612.31,1213.29 1612.9,1213.29 1613.49,1213.29 1614.07,1213.29 1614.66,1213.29 1615.25,1213.29 1615.83,1213.29 1616.42,1213.29 1617.01,1213.29 1617.59,1213.29 1618.18,1213.29 1618.76,1213.29 1619.35,1213.29 1619.94,1213.29 1620.52,1213.29 1621.11,1213.29 1621.7,1213.29 1622.28,1213.29 1622.87,1213.29 1623.46,1213.29 1624.04,1213.29 1624.63,1213.29 1625.22,1213.29 1625.8,1213.29 1626.39,1213.29 1626.97,1213.29 1627.56,1213.29 1628.15,1213.29 1628.73,1213.29 1629.32,1213.29 1629.91,1213.29 1630.49,1213.29 1631.08,1213.29 1631.67,1213.29 1632.25,1213.29 1632.84,1213.29 1633.42,1213.29 1634.01,1213.29 1634.6,1213.29 1635.18,1213.29 1635.77,1213.29 1636.36,1213.29 1636.94,1213.29 1637.53,1213.29 1638.12,1213.29 1638.7,1213.29 1639.29,1213.29 1639.88,1213.29 1640.46,1213.29 1641.05,1213.29 1641.63,1213.29 1642.22,1213.29 1642.81,1213.29 1643.39,1213.29 1643.98,1213.29 1644.57,1213.29 1645.15,1213.29 1645.74,1213.29 1646.33,1213.29 1646.91,1213.29 1647.5,1213.29 1648.09,1213.29 1648.67,1213.29 1649.26,1213.29 1649.84,1213.29 1650.43,1213.29 1651.02,1213.29 1651.6,1213.29 1652.19,1213.29 1652.78,1213.29 1653.36,1213.29 1653.95,1213.29 1654.54,1213.29 1655.12,1213.29 1655.71,1213.29 1656.29,1213.29 1656.88,1213.29 1657.47,1213.29 1658.05,1213.29 1658.64,1213.29 1659.23,1213.29 1659.81,1213.29 1660.4,1213.29 1660.99,1213.29 1661.57,1213.29 1662.16,1213.29 1662.75,1213.29 1663.33,1213.29 1663.92,1213.29 1664.5,1213.29 1665.09,1213.29 1665.68,1213.29 1666.26,1213.29 1666.85,1213.29 1667.44,1213.29 1668.02,1213.29 1668.61,1213.29 1669.2,1213.29 1669.78,1213.29 1670.37,1213.29 1670.96,1213.29 1671.54,1213.29 1672.13,1213.29 1672.71,1213.29 1673.3,1213.29 1673.89,1213.29 1674.47,1213.29 1675.06,1213.29 1675.65,1213.29 1676.23,1213.29 1676.82,1213.29 1677.41,1213.29 1677.99,1213.29 1678.58,1213.29 1679.17,1213.29 1679.75,1213.29 1680.34,1213.29 1680.92,1213.29 1681.51,1213.29 1682.1,1213.29 1682.68,1213.29 1683.27,1213.29 1683.86,1213.29 1684.44,1213.29 1685.03,1213.29 1685.62,1213.29 1686.2,1213.29 1686.79,1213.29 1687.37,1213.29 1687.96,1213.29 1688.55,1213.29 1689.13,1213.29 1689.72,1213.29 1690.31,1213.29 1690.89,1213.29 1691.48,1213.29 1692.07,1213.29 1692.65,1213.29 1693.24,1213.29 1693.83,1213.29 1694.41,1213.29 1695,1213.29 1695.58,1213.29 1696.17,1213.29 1696.76,1213.29 1697.34,1213.29 1697.93,1213.29 1698.52,1213.29 1699.1,1213.29 1699.69,1213.29 1700.28,1213.29 1700.86,1213.29 1701.45,1213.29 1702.04,1213.29 1702.62,1213.29 1703.21,1213.29 1703.79,1213.29 1704.38,1213.29 1704.97,1213.29 1705.55,1213.29 1706.14,1213.29 1706.73,1213.29 1707.31,1213.29 1707.9,1213.29 1708.49,1213.29 1709.07,1213.29 1709.66,1213.29 1710.24,1213.29 1710.83,1213.29 1711.42,1213.29 1712,1213.29 1712.59,1213.29 1713.18,1213.29 1713.76,1213.29 1714.35,1213.29 1714.94,1213.29 1715.52,1213.29 1716.11,1213.29 1716.7,1213.29 1717.28,1213.29 1717.87,1213.29 1718.45,1213.29 1719.04,1213.29 1719.63,1213.29 1720.21,1213.29 1720.8,1213.29 1721.39,1213.29 1721.97,1213.29 1722.56,1213.29 1723.15,1213.29 1723.73,1213.29 1724.32,1213.29 1724.91,1213.29 1725.49,1213.29 1726.08,1213.29 1726.66,1213.29 1727.25,1213.29 1727.84,1213.29 1728.42,1213.29 1729.01,1213.29 1729.6,1213.29 1730.18,1213.29 1730.77,1213.29 1731.36,1213.29 1731.94,1213.29 1732.53,1213.29 1733.11,1213.29 1733.7,1213.29 1734.29,1213.29 1734.87,1213.29 1735.46,1213.29 1736.05,1213.29 1736.63,1213.29 1737.22,1213.29 1737.81,1213.29 1738.39,1213.29 1738.98,1213.29 1739.57,1213.29 1740.15,1213.29 1740.74,1213.29 1741.32,1213.29 1741.91,1213.29 1742.5,1213.29 1743.08,1213.29 1743.67,1213.29 1744.26,1213.29 1744.84,1213.29 1745.43,1213.29 1746.02,1213.29 1746.6,1213.29 1747.19,1213.29 1747.78,1213.29 1748.36,1213.29 1748.95,1213.29 1749.53,1213.29 1750.12,1213.29 1750.71,1213.29 1751.29,1213.29 1751.88,1213.29 1752.47,1213.29 1753.05,1213.29 1753.64,1213.29 1754.23,1213.29 1754.81,1213.29 1755.4,1213.29 1755.99,1213.29 1756.57,1213.29 1757.16,1213.29 1757.74,1213.29 1758.33,1213.29 1758.92,1213.29 1759.5,1213.29 1760.09,1213.29 1760.68,1213.29 1761.26,1213.29 1761.85,1213.29 1762.44,1213.29 1763.02,1213.29 1763.61,1213.29 1764.19,1213.29 1764.78,1213.29 1765.37,1213.29 1765.95,1213.29 1766.54,1213.29 1767.13,1213.29 1767.71,1213.29 1768.3,1213.29 1768.89,1213.29 1769.47,1213.29 1770.06,1213.29 1770.65,1213.29 1771.23,1213.29 1771.82,1213.29 1772.4,1213.29 1772.99,1213.29 1773.58,1213.29 1774.16,1213.29 1774.75,1213.29 1775.34,1213.29 1775.92,1213.29 1776.51,1213.29 1777.1,1213.29 1777.68,1213.29 1778.27,1213.29 1778.86,1213.29 1779.44,1213.29 1780.03,1213.29 1780.61,1213.29 1781.2,1213.29 1781.79,1213.29 1782.37,1213.29 1782.96,1213.29 1783.55,1213.29 1784.13,1213.29 1784.72,1213.29 1785.31,1213.29 1785.89,1213.29 1786.48,1213.29 1787.06,1213.29 1787.65,1213.29 1788.24,1213.29 1788.82,1213.29 1789.41,1213.29 1790,1213.29 1790.58,1213.29 1791.17,1213.29 1791.76,1213.29 1792.34,1213.29 1792.93,1213.29 1793.52,1213.29 1794.1,1213.29 1794.69,1213.29 1795.27,1213.29 1795.86,1213.29 1796.45,1213.29 1797.03,1213.29 1797.62,1213.29 1798.21,1213.29 1798.79,1213.29 1799.38,1213.29 1799.97,1213.29 1800.55,1213.29 1801.14,1213.29 1801.73,1213.29 1802.31,1213.29 1802.9,1213.29 1803.48,1213.29 1804.07,1213.29 1804.66,1213.29 1805.24,1213.29 1805.83,1213.29 1806.42,1213.29 1807,1213.29 1807.59,1213.29 1808.18,1213.29 1808.76,1213.29 1809.35,1213.29 1809.94,1213.29 1810.52,1213.29 1811.11,1213.29 1811.69,1213.29 1812.28,1213.29 1812.87,1213.29 1813.45,1213.29 1814.04,1213.29 1814.63,1213.29 1815.21,1213.29 1815.8,1213.29 1816.39,1213.29 1816.97,1213.29 1817.56,1213.29 1818.14,1213.29 1818.73,1213.29 1819.32,1213.29 1819.9,1213.29 1820.49,1213.29 1821.08,1213.29 1821.66,1213.29 1822.25,1213.29 1822.84,1213.29 1823.42,1213.29 1824.01,1213.29 1824.6,1213.29 1825.18,1213.29 1825.77,1213.29 1826.35,1213.29 1826.94,1213.29 1827.53,1213.29 1828.11,1213.29 1828.7,1213.29 1829.29,1213.29 1829.87,1213.29 1830.46,1213.29 1831.05,1213.29 1831.63,1213.29 1832.22,1213.29 1832.81,1213.29 1833.39,1213.29 1833.98,1213.29 1834.56,1213.29 1835.15,1213.29 1835.74,1213.29 1836.32,1213.29 1836.91,1213.29 1837.5,1213.29 1838.08,1213.29 1838.67,1213.29 1839.26,1213.29 1839.84,1213.29 1840.43,1213.29 1841.01,1213.29 1841.6,1213.29 1842.19,1213.29 1842.77,1213.29 1843.36,1213.29 1843.95,1213.29 1844.53,1213.29 1845.12,1213.29 1845.71,1213.29 1846.29,1213.29 1846.88,1213.29 1847.47,1213.29 1848.05,1213.29 1848.64,1213.29 1849.22,1213.29 1849.81,1213.29 1850.4,1213.29 1850.98,1213.29 1851.57,1213.29 1852.16,1213.29 1852.74,1213.29 1853.33,1213.29 1853.92,1213.29 1854.5,1213.29 1855.09,1213.29 1855.68,1213.29 1856.26,1213.29 1856.85,1213.29 1857.43,1213.29 1858.02,1213.29 1858.61,1213.29 1859.19,1213.29 1859.78,1213.29 1860.37,1213.29 1860.95,1213.29 1861.54,1213.29 1862.13,1213.29 1862.71,1213.29 1863.3,1213.29 1863.88,1213.29 1864.47,1213.29 1865.06,1213.29 1865.64,1213.29 1866.23,1213.29 1866.82,1213.29 1867.4,1213.29 1867.99,1213.29 1868.58,1213.29 1869.16,1213.29 1869.75,1213.29 1870.34,1213.29 1870.92,1213.29 1871.51,1213.29 1872.09,1213.29 1872.68,1213.29 1873.27,1213.29 1873.85,1213.29 1874.44,1213.29 1875.03,1213.29 1875.61,1213.29 1876.2,1213.29 1876.79,1213.29 1877.37,1213.29 1877.96,1213.29 1878.55,1213.29 1879.13,1213.29 1879.72,1213.29 1880.3,1213.29 1880.89,1213.29 1881.48,1213.29 1882.06,1213.29 1882.65,1213.29 1883.24,1213.29 1883.82,1213.29 1884.41,1213.29 1885,1213.29 1885.58,1213.29 1886.17,1213.29 1886.76,1213.29 1887.34,1213.29 1887.93,1213.29 1888.51,1213.29 1889.1,1213.29 1889.69,1213.29 1890.27,1213.29 1890.86,1213.29 1891.45,1213.29 1892.03,1213.29 1892.62,1213.29 1893.21,1213.29 1893.79,1213.29 1894.38,1213.29 1894.96,1213.29 1895.55,1213.29 1896.14,1213.29 1896.72,1213.29 1897.31,1213.29 1897.9,1213.29 1898.48,1213.29 1899.07,1213.29 1899.66,1213.29 1900.24,1213.29 1900.83,1213.29 1901.42,1213.29 1902,1213.29 1902.59,1213.29 1903.17,1213.29 1903.76,1213.29 1904.35,1213.29 1904.93,1213.29 1905.52,1213.29 1906.11,1213.29 1906.69,1213.29 1907.28,1213.29 1907.87,1213.29 1908.45,1213.29 1909.04,1213.29 1909.63,1213.29 1910.21,1213.29 1910.8,1213.29 1911.38,1213.29 1911.97,1213.29 1912.56,1213.29 1913.14,1213.29 1913.73,1213.29 1914.32,1213.29 1914.9,1213.29 1915.49,1213.29 1916.08,1213.29 1916.66,1213.29 1917.25,1213.29 1917.83,1213.29 1918.42,1213.29 1919.01,1213.29 1919.59,1213.29 1920.18,1213.29 1920.77,1213.29 1921.35,1213.29 1921.94,1213.29 1922.53,1213.29 1923.11,1213.29 1923.7,1213.29 1924.29,1213.29 1924.87,1213.29 1925.46,1213.29 1926.04,1213.29 1926.63,1213.29 1927.22,1213.29 1927.8,1213.29 1928.39,1213.29 1928.98,1213.29 1929.56,1213.29 1930.15,1213.29 1930.74,1213.29 1931.32,1213.29 1931.91,1213.29 1932.5,1213.29 1933.08,1213.29 1933.67,1213.29 1934.25,1213.29 1934.84,1213.29 1935.43,1213.29 1936.01,1213.29 1936.6,1213.29 1937.19,1213.29 1937.77,1213.29 1938.36,1213.29 1938.95,1213.29 1939.53,1213.29 1940.12,1213.29 1940.71,1213.29 1941.29,1213.29 1941.88,1213.29 1942.46,1213.29 1943.05,1213.29 1943.64,1213.29 1944.22,1213.29 1944.81,1213.29 1945.4,1213.29 1945.98,1213.29 1946.57,1213.29 1947.16,1213.29 1947.74,1213.29 1948.33,1213.29 1948.91,1213.29 1949.5,1213.29 1950.09,1213.29 1950.67,1213.29 1951.26,1213.29 1951.85,1213.29 1952.43,1213.29 1953.02,1213.29 1953.61,1213.29 1954.19,1213.29 1954.78,1213.29 1955.37,1213.29 1955.95,1213.29 1956.54,1213.29 1957.12,1213.29 1957.71,1213.29 1958.3,1213.29 1958.88,1213.29 1959.47,1213.29 1960.06,1213.29 1960.64,1213.29 1961.23,1213.29 1961.82,1213.29 1962.4,1213.29 1962.99,1213.29 1963.58,1213.29 1964.16,1213.29 1964.75,1213.29 1965.33,1213.29 1965.92,1213.29 1966.51,1213.29 1967.09,1213.29 1967.68,1213.29 1968.27,1213.29 1968.85,1213.29 1969.44,1213.29 1970.03,1213.29 1970.61,1213.29 1971.2,1213.29 1971.78,1213.29 1972.37,1213.29 1972.96,1213.29 1973.54,1213.29 1974.13,1213.29 1974.72,1213.29 1975.3,1213.29 1975.89,1213.29 1976.48,1213.29 1977.06,1213.29 1977.65,1213.29 1978.24,1213.29 1978.82,1213.29 1979.41,1213.29 1979.99,1213.29 1980.58,1213.29 1981.17,1213.29 1981.75,1213.29 1982.34,1213.29 1982.93,1213.29 1983.51,1213.29 1984.1,1213.29 1984.69,1213.29 1985.27,1213.29 1985.86,1213.29 1986.45,1213.29 1987.03,1213.29 1987.62,1213.29 1988.2,1213.29 1988.79,1213.29 1989.38,1213.29 1989.96,1213.29 1990.55,1213.29 1991.14,1213.29 1991.72,1213.29 1992.31,1213.29 1992.9,1213.29 1993.48,1213.29 1994.07,1213.29 1994.65,1213.29 1995.24,1213.29 1995.83,1213.29 1996.41,1213.29 1997,1213.29 1997.59,1213.29 1998.17,1213.29 1998.76,1213.29 1999.35,1213.29 1999.93,1213.29 2000.52,1213.29 2001.11,1213.29 2001.69,1213.29 2002.28,1213.29 2002.86,1213.29 2003.45,1213.29 2004.04,1213.29 2004.62,1213.29 2005.21,1213.29 2005.8,1213.29 2006.38,1213.29 2006.97,1213.29 2007.56,1213.29 2008.14,1213.29 2008.73,1213.29 2009.32,1213.29 2009.9,1213.29 2010.49,1213.29 2011.07,1213.29 2011.66,1213.29 2012.25,1213.29 2012.83,1213.29 2013.42,1213.29 2014.01,1213.29 2014.59,1213.29 2015.18,1213.29 2015.77,1213.29 2016.35,1213.29 2016.94,1213.29 2017.53,1213.29 2018.11,1213.29 2018.7,1213.29 2019.28,1213.29 2019.87,1213.29 2020.46,1213.29 2021.04,1213.29 2021.63,1213.29 2022.22,1213.29 2022.8,1213.29 2023.39,1213.29 2023.98,1213.29 2024.56,1213.29 2025.15,1213.29 2025.73,1213.29 2026.32,1213.29 2026.91,1213.29 2027.49,1213.29 2028.08,1213.29 2028.67,1213.29 2029.25,1213.29 2029.84,1213.29 2030.43,1213.29 2031.01,1213.29 2031.6,1213.29 2032.19,1213.29 2032.77,1213.29 2033.36,1213.29 2033.94,1213.29 2034.53,1213.29 2035.12,1213.29 2035.7,1213.29 2036.29,1213.29 2036.88,1213.29 2037.46,1213.29 2038.05,1213.29 2038.64,1213.29 2039.22,1213.29 2039.81,1213.29 2040.4,1213.29 2040.98,1213.29 2041.57,1213.29 2042.15,1213.29 2042.74,1213.29 2043.33,1213.29 2043.91,1213.29 2044.5,1213.29 2045.09,1213.29 2045.67,1213.29 2046.26,1213.29 2046.85,1213.29 2047.43,1213.29 2048.02,1213.29 2048.6,1213.29 2049.19,1213.29 2049.78,1213.29 2050.36,1213.29 2050.95,1213.29 2051.54,1213.29 2052.12,1213.29 2052.71,1213.29 2053.3,1213.29 2053.88,1213.29 2054.47,1213.29 2055.06,1213.29 2055.64,1213.29 2056.23,1213.29 2056.81,1213.29 2057.4,1213.29 2057.99,1213.29 2058.57,1213.29 2059.16,1213.29 2059.75,1213.29 2060.33,1213.29 2060.92,1213.29 2061.51,1213.29 2062.09,1213.29 2062.68,1213.29 2063.27,1213.29 2063.85,1213.29 2064.44,1213.29 2065.02,1213.29 2065.61,1213.29 2066.2,1213.29 2066.78,1213.29 2067.37,1213.29 2067.96,1213.29 2068.54,1213.29 2069.13,1213.29 2069.72,1213.29 2070.3,1213.29 2070.89,1213.29 2071.48,1213.29 2072.06,1213.29 2072.65,1213.29 2073.23,1213.29 2073.82,1213.29 2074.41,1213.29 2074.99,1213.29 2075.58,1213.29 2076.17,1213.29 2076.75,1213.29 2077.34,1213.29 2077.93,1213.29 2078.51,1213.29 2079.1,1213.29 2079.68,1213.29 2080.27,1213.29 2080.86,1213.29 2081.44,1213.29 2082.03,1213.29 2082.62,1213.29 2083.2,1213.29 2083.79,1213.29 2084.38,1213.29 2084.96,1213.29 2085.55,1213.29 2086.14,1213.29 2086.72,1213.29 2087.31,1213.29 2087.89,1213.29 2088.48,1213.29 2089.07,1213.29 2089.65,1213.29 2090.24,1213.29 2090.83,1213.29 2091.41,1213.29 2092,1213.29 2092.59,1213.29 2093.17,1213.29 2093.76,1213.29 2094.35,1213.29 2094.93,1213.29 2095.52,1213.29 2096.1,1213.29 2096.69,1213.29 2097.28,1213.29 2097.86,1213.29 2098.45,1213.29 2099.04,1213.29 2099.62,1213.29 2100.21,1213.29 2100.8,1213.29 2101.38,1213.29 2101.97,1213.29 2102.55,1213.29 2103.14,1213.29 2103.73,1213.29 2104.31,1213.29 2104.9,1213.29 2105.49,1213.29 2106.07,1213.29 2106.66,1213.29 2107.25,1213.29 2107.83,1213.29 2108.42,1213.29 2109.01,1213.29 2109.59,1213.29 2110.18,1213.29 2110.76,1213.29 2111.35,1213.29 2111.94,1213.29 2112.52,1213.29 2113.11,1213.29 2113.7,1213.29 2114.28,1213.29 2114.87,1213.29 2115.46,1213.29 2116.04,1213.29 2116.63,1213.29 2117.22,1213.29 2117.8,1213.29 2118.39,1213.29 2118.97,1213.29 2119.56,1213.29 2120.15,1213.29 2120.73,1213.29 2121.32,1213.29 2121.91,1213.29 2122.49,1213.29 2123.08,1213.29 2123.67,1213.29 2124.25,1213.29 2124.84,1213.29 2125.42,1213.29 2126.01,1213.29 2126.6,1213.29 2127.18,1213.29 2127.77,1213.29 2128.36,1213.29 2128.94,1213.29 2129.53,1213.29 2130.12,1213.29 2130.7,1213.29 2131.29,1213.29 2131.88,1213.29 2132.46,1213.29 2133.05,1213.29 2133.63,1213.29 2134.22,1213.29 2134.81,1213.29 2135.39,1213.29 2135.98,1213.29 2136.57,1213.29 2137.15,1213.29 2137.74,1213.29 2138.33,1213.29 2138.91,1213.29 2139.5,1213.29 2140.09,1213.29 2140.67,1213.29 2141.26,1213.29 2141.84,1213.29 2142.43,1213.29 2143.02,1213.29 2143.6,1213.29 2144.19,1213.29 2144.78,1213.29 2145.36,1213.29 2145.95,1213.29 2146.54,1213.29 2147.12,1213.29 2147.71,1213.29 2148.3,1213.29 2148.88,1213.29 2149.47,1213.29 2150.05,1213.29 2150.64,1213.29 2151.23,1213.29 2151.81,1213.29 2152.4,1213.29 2152.99,1213.29 2153.57,1213.29 2154.16,1213.29 2154.75,1213.29 2155.33,1213.29 2155.92,1213.29 2156.5,1213.29 2157.09,1213.29 2157.68,1213.29 2158.26,1213.29 \"/>\n<path clip-path=\"url(#clip132)\" d=\"M986.025 1213.06 L986.612 1213.06 L987.198 1213.06 L987.785 1213.06 L988.371 1213.06 L988.957 1213.06 L989.544 1213.06 L990.13 1213.06 L990.717 1213.06 L991.303 1213.06 L991.889 1213.06 L992.476 1213.06 L993.062 1213.06 L993.649 1213.06 L994.235 1213.06 L994.822 1213.06 L995.408 1213.06 L995.994 1213.06 L996.581 1213.06 L997.167 1213.06 L997.754 1213.06 L998.34 1213.06 L998.926 1213.06 L999.513 1213.06 L1000.1 1213.06 L1000.69 1213.06 L1001.27 1213.06 L1001.86 1213.06 L1002.44 1213.06 L1003.03 1213.06 L1003.62 1213.06 L1004.2 1213.06 L1004.79 1213.06 L1005.38 1213.06 L1005.96 1213.06 L1006.55 1213.06 L1007.14 1213.06 L1007.72 1213.06 L1008.31 1213.06 L1008.9 1213.06 L1009.48 1213.06 L1010.07 1213.06 L1010.65 1213.06 L1011.24 1213.06 L1011.83 1213.06 L1012.41 1213.06 L1013 1213.06 L1013.59 1213.06 L1014.17 1213.06 L1014.76 1213.06 L1015.35 1213.06 L1015.93 1213.06 L1016.52 1213.06 L1017.11 1213.06 L1017.69 1213.06 L1018.28 1213.06 L1018.86 1213.06 L1019.45 1213.06 L1020.04 1213.06 L1020.62 1213.06 L1021.21 1213.06 L1021.8 1213.06 L1022.38 1213.06 L1022.97 1213.06 L1023.56 1213.06 L1024.14 1213.06 L1024.73 1213.06 L1025.32 1213.06 L1025.9 1213.06 L1026.49 1213.06 L1027.07 1213.06 L1027.66 1213.06 L1028.25 1213.06 L1028.83 1213.06 L1029.42 1213.06 L1030.01 1213.06 L1030.59 1213.06 L1031.18 1213.06 L1031.77 1213.06 L1032.35 1213.06 L1032.94 1213.06 L1033.52 1213.06 L1034.11 1213.06 L1034.7 1213.06 L1035.28 1213.06 L1035.87 1213.06 L1036.46 1213.06 L1037.04 1213.06 L1037.63 1213.06 L1038.22 1213.06 L1038.8 1213.06 L1039.39 1213.06 L1039.98 1213.06 L1040.56 1213.06 L1041.15 1213.06 L1041.73 1213.06 L1042.32 1213.06 L1042.91 1213.06 L1043.49 1213.06 L1044.08 1213.06 L1044.67 1213.06 L1045.25 1213.06 L1045.84 1213.06 L1046.43 1213.06 L1047.01 1213.06 L1047.6 1213.06 L1048.19 1213.06 L1048.77 1213.06 L1049.36 1213.06 L1049.94 1213.06 L1050.53 1213.06 L1051.12 1213.06 L1051.7 1213.06 L1052.29 1213.06 L1052.88 1213.06 L1053.46 1213.06 L1054.05 1213.06 L1054.64 1213.06 L1055.22 1213.06 L1055.81 1213.06 L1056.39 1213.06 L1056.98 1213.06 L1057.57 1213.06 L1058.15 1213.06 L1058.74 1213.06 L1059.33 1213.06 L1059.91 1213.06 L1060.5 1213.06 L1061.09 1213.06 L1061.67 1213.06 L1062.26 1213.06 L1062.85 1213.06 L1063.43 1213.06 L1064.02 1213.06 L1064.6 1213.06 L1065.19 1213.06 L1065.78 1213.06 L1066.36 1213.06 L1066.95 1213.06 L1067.54 1213.06 L1068.12 1213.06 L1068.71 1213.06 L1069.3 1213.06 L1069.88 1213.06 L1070.47 1213.06 L1071.06 1213.06 L1071.64 1213.06 L1072.23 1213.06 L1072.81 1213.06 L1073.4 1213.06 L1073.99 1213.06 L1074.57 1213.06 L1075.16 1213.06 L1075.75 1213.06 L1076.33 1213.06 L1076.92 1213.06 L1077.51 1213.06 L1078.09 1213.06 L1078.68 1213.06 L1079.26 1213.06 L1079.85 1213.06 L1080.44 1213.06 L1081.02 1213.06 L1081.61 1213.06 L1082.2 1213.06 L1082.78 1213.06 L1083.37 1213.06 L1083.96 1213.06 L1084.54 1213.06 L1085.13 1213.06 L1085.72 1213.06 L1086.3 1213.06 L1086.89 1213.06 L1087.47 1213.06 L1088.06 1213.06 L1088.65 1213.06 L1089.23 1213.06 L1089.82 1213.06 L1090.41 1213.06 L1090.99 1213.06 L1091.58 1213.06 L1092.17 1213.06 L1092.75 1213.06 L1093.34 1213.06 L1093.93 1213.06 L1094.51 1213.06 L1095.1 1213.06 L1095.68 1213.06 L1096.27 1213.06 L1096.86 1213.06 L1097.44 1213.06 L1098.03 1213.06 L1098.62 1213.06 L1099.2 1213.06 L1099.79 1213.06 L1100.38 1213.06 L1100.96 1213.06 L1101.55 1213.06 L1102.14 1213.06 L1102.72 1213.06 L1103.31 1213.06 L1103.89 1213.06 L1104.48 1213.06 L1105.07 1213.06 L1105.65 1213.06 L1106.24 1213.06 L1106.83 1213.06 L1107.41 1213.06 L1108 1213.06 L1108.59 1213.06 L1109.17 1213.06 L1109.76 1213.06 L1110.34 1213.06 L1110.93 1213.06 L1111.52 1213.06 L1112.1 1213.06 L1112.69 1213.06 L1113.28 1213.06 L1113.86 1213.06 L1114.45 1213.06 L1115.04 1213.06 L1115.62 1213.06 L1116.21 1213.06 L1116.8 1213.06 L1117.38 1213.06 L1117.97 1213.06 L1118.55 1213.06 L1119.14 1213.06 L1119.73 1213.06 L1120.31 1213.06 L1120.9 1213.06 L1121.49 1213.06 L1122.07 1213.06 L1122.66 1213.06 L1123.25 1213.06 L1123.83 1213.06 L1124.42 1213.06 L1125.01 1213.06 L1125.59 1213.06 L1126.18 1213.06 L1126.76 1213.06 L1127.35 1213.06 L1127.94 1213.06 L1128.52 1213.06 L1129.11 1213.06 L1129.7 1213.06 L1130.28 1213.06 L1130.87 1213.06 L1131.46 1213.06 L1132.04 1213.06 L1132.63 1213.06 L1133.21 1213.06 L1133.8 1213.06 L1134.39 1213.06 L1134.97 1213.06 L1135.56 1213.06 L1136.15 1213.06 L1136.73 1213.06 L1137.32 1213.06 L1137.91 1213.06 L1138.49 1213.06 L1139.08 1213.06 L1139.67 1213.06 L1140.25 1213.06 L1140.84 1213.06 L1141.42 1213.06 L1142.01 1213.06 L1142.6 1213.06 L1143.18 1213.06 L1143.77 1213.06 L1144.36 1213.06 L1144.94 1213.06 L1145.53 1213.06 L1146.12 1213.06 L1146.7 1213.06 L1147.29 1213.06 L1147.88 1213.06 L1148.46 1213.06 L1149.05 1213.06 L1149.63 1213.06 L1150.22 1213.06 L1150.81 1213.06 L1151.39 1213.06 L1151.98 1213.06 L1152.57 1213.06 L1153.15 1213.06 L1153.74 1213.06 L1154.33 1213.06 L1154.91 1213.06 L1155.5 1213.06 L1156.09 1213.06 L1156.67 1213.06 L1157.26 1213.06 L1157.84 1213.06 L1158.43 1213.06 L1159.02 1213.06 L1159.6 1213.06 L1160.19 1213.06 L1160.78 1213.06 L1161.36 1213.06 L1161.95 1213.06 L1162.54 1213.06 L1163.12 1213.06 L1163.71 1213.06 L1164.29 1213.06 L1164.88 1213.06 L1165.47 1213.06 L1166.05 1213.06 L1166.64 1213.06 L1167.23 1213.06 L1167.81 1213.06 L1168.4 1213.06 L1168.99 1213.06 L1169.57 1213.06 L1170.16 1213.06 L1170.75 1213.06 L1171.33 1213.06 L1171.92 1213.06 L1172.5 1213.06 L1173.09 1213.06 L1173.68 1213.06 L1174.26 1213.06 L1174.85 1213.06 L1175.44 1213.06 L1176.02 1213.06 L1176.61 1213.06 L1177.2 1213.06 L1177.78 1213.06 L1178.37 1213.06 L1178.96 1213.06 L1179.54 1213.06 L1180.13 1213.06 L1180.71 1213.06 L1181.3 1213.06 L1181.89 1213.06 L1182.47 1213.06 L1183.06 1213.06 L1183.65 1213.06 L1184.23 1213.06 L1184.82 1213.06 L1185.41 1213.06 L1185.99 1213.06 L1186.58 1213.06 L1187.16 1213.06 L1187.75 1213.06 L1188.34 1213.06 L1188.92 1213.06 L1189.51 1213.06 L1190.1 1213.06 L1190.68 1213.06 L1191.27 1213.06 L1191.86 1213.06 L1192.44 1213.06 L1193.03 1213.06 L1193.62 1213.06 L1194.2 1213.06 L1194.79 1213.06 L1195.37 1213.06 L1195.96 1213.06 L1196.55 1213.06 L1197.13 1213.06 L1197.72 1213.06 L1198.31 1213.06 L1198.89 1213.06 L1199.48 1213.06 L1200.07 1213.06 L1200.65 1213.06 L1201.24 1213.06 L1201.83 1213.06 L1202.41 1213.06 L1203 1213.06 L1203.58 1213.06 L1204.17 1213.06 L1204.76 1213.06 L1205.34 1213.06 L1205.93 1213.06 L1206.52 1213.06 L1207.1 1213.06 L1207.69 1213.06 L1208.28 1213.06 L1208.86 1213.06 L1209.45 1213.06 L1210.03 1213.06 L1210.62 1213.06 L1211.21 1213.06 L1211.79 1213.06 L1212.38 1213.06 L1212.97 1213.06 L1213.55 1213.06 L1214.14 1213.06 L1214.73 1213.06 L1215.31 1213.06 L1215.9 1213.06 L1216.49 1213.06 L1217.07 1213.06 L1217.66 1213.06 L1218.24 1213.06 L1218.83 1213.06 L1219.42 1213.06 L1220 1213.06 L1220.59 1213.06 L1221.18 1213.06 L1221.76 1213.06 L1222.35 1213.06 L1222.94 1213.06 L1223.52 1213.06 L1224.11 1213.06 L1224.7 1213.06 L1225.28 1213.06 L1225.87 1213.06 L1226.45 1213.06 L1227.04 1213.06 L1227.63 1213.06 L1228.21 1213.06 L1228.8 1213.06 L1229.39 1213.06 L1229.97 1213.06 L1230.56 1213.06 L1231.15 1213.06 L1231.73 1213.06 L1232.32 1213.06 L1232.91 1213.06 L1233.49 1213.06 L1234.08 1213.06 L1234.66 1213.06 L1235.25 1213.06 L1235.84 1213.06 L1236.42 1213.06 L1237.01 1213.06 L1237.6 1213.06 L1238.18 1213.06 L1238.77 1213.06 L1239.36 1213.06 L1239.94 1213.06 L1240.53 1213.06 L1241.11 1213.06 L1241.7 1213.06 L1242.29 1213.06 L1242.87 1213.06 L1243.46 1213.06 L1244.05 1213.06 L1244.63 1213.06 L1245.22 1213.06 L1245.81 1213.06 L1246.39 1213.06 L1246.98 1213.06 L1247.57 1213.06 L1248.15 1213.06 L1248.74 1213.06 L1249.32 1213.06 L1249.91 1213.06 L1250.5 1213.06 L1251.08 1213.06 L1251.67 1213.06 L1252.26 1213.06 L1252.84 1213.06 L1253.43 1213.06 L1254.02 1213.06 L1254.6 1213.06 L1255.19 1213.06 L1255.78 1213.06 L1256.36 1213.06 L1256.95 1213.06 L1257.53 1213.06 L1258.12 1213.06 L1258.71 1213.06 L1259.29 1213.06 L1259.88 1213.06 L1260.47 1213.06 L1261.05 1213.06 L1261.64 1213.06 L1262.23 1213.06 L1262.81 1213.06 L1263.4 1213.06 L1263.98 1213.06 L1264.57 1213.06 L1265.16 1213.06 L1265.74 1213.06 L1266.33 1213.06 L1266.92 1213.06 L1267.5 1213.06 L1268.09 1213.06 L1268.68 1213.06 L1269.26 1213.06 L1269.85 1213.06 L1270.44 1213.06 L1271.02 1213.06 L1271.61 1213.06 L1272.19 1213.06 L1272.78 1213.06 L1273.37 1213.06 L1273.95 1213.06 L1274.54 1213.06 L1275.13 1213.06 L1275.71 1213.06 L1276.3 1213.06 L1276.89 1213.06 L1277.47 1213.06 L1278.06 1213.06 L1278.65 1213.06 L1279.23 1213.06 L1279.82 1213.06 L1280.4 1213.06 L1280.99 1213.06 L1281.58 1213.06 L1282.16 1213.06 L1282.75 1213.06 L1283.34 1213.06 L1283.92 1213.06 L1284.51 1213.06 L1285.1 1213.06 L1285.68 1213.06 L1286.27 1213.06 L1286.86 1213.06 L1287.44 1213.06 L1288.03 1213.06 L1288.61 1213.06 L1289.2 1213.06 L1289.79 1213.06 L1290.37 1213.06 L1290.96 1213.06 L1291.55 1213.06 L1292.13 1213.06 L1292.72 1213.06 L1293.31 1213.06 L1293.89 1213.06 L1294.48 1213.06 L1295.06 1213.06 L1295.65 1213.06 L1296.24 1213.06 L1296.82 1213.06 L1297.41 1213.06 L1298 1213.06 L1298.58 1213.06 L1299.17 1213.06 L1299.76 1213.06 L1300.34 1213.06 L1300.93 1213.06 L1301.52 1213.06 L1302.1 1213.06 L1302.69 1213.06 L1303.27 1213.06 L1303.86 1213.06 L1304.45 1213.06 L1305.03 1213.06 L1305.62 1213.06 L1306.21 1213.06 L1306.79 1213.06 L1307.38 1213.06 L1307.97 1213.06 L1308.55 1213.06 L1309.14 1213.06 L1309.73 1213.06 L1310.31 1213.06 L1310.9 1213.06 L1311.48 1213.06 L1312.07 1213.06 L1312.66 1213.06 L1313.24 1213.06 L1313.83 1213.06 L1314.42 1213.06 L1315 1213.06 L1315.59 1213.06 L1316.18 1213.06 L1316.76 1213.06 L1317.35 1213.06 L1317.93 1213.06 L1318.52 1213.06 L1319.11 1213.06 L1319.69 1213.06 L1320.28 1213.06 L1320.87 1213.06 L1321.45 1213.06 L1322.04 1213.06 L1322.63 1213.06 L1323.21 1213.06 L1323.8 1213.06 L1324.39 1213.06 L1324.97 1213.06 L1325.56 1213.06 L1326.14 1213.06 L1326.73 1213.06 L1327.32 1213.06 L1327.9 1213.06 L1328.49 1213.06 L1329.08 1213.06 L1329.66 1213.06 L1330.25 1213.06 L1330.84 1213.06 L1331.42 1213.06 L1332.01 1213.06 L1332.6 1213.06 L1333.18 1213.06 L1333.77 1213.06 L1334.35 1213.06 L1334.94 1213.06 L1335.53 1213.06 L1336.11 1213.06 L1336.7 1213.06 L1337.29 1213.06 L1337.87 1213.06 L1338.46 1213.06 L1339.05 1213.06 L1339.63 1213.06 L1340.22 1213.06 L1340.8 1213.06 L1341.39 1213.06 L1341.98 1213.06 L1342.56 1213.06 L1343.15 1213.06 L1343.74 1213.06 L1344.32 1213.06 L1344.91 1213.06 L1345.5 1213.06 L1346.08 1213.06 L1346.67 1213.06 L1347.26 1213.06 L1347.84 1213.06 L1348.43 1213.06 L1349.01 1213.06 L1349.6 1213.06 L1350.19 1213.06 L1350.77 1213.06 L1351.36 1213.06 L1351.95 1213.06 L1352.53 1213.06 L1353.12 1213.06 L1353.71 1213.06 L1354.29 1213.06 L1354.88 1213.06 L1355.47 1213.06 L1356.05 1213.06 L1356.64 1213.06 L1357.22 1213.06 L1357.81 1213.06 L1358.4 1213.06 L1358.98 1213.06 L1359.57 1213.06 L1360.16 1213.06 L1360.74 1213.06 L1361.33 1213.06 L1361.92 1213.06 L1362.5 1213.06 L1363.09 1213.06 L1363.68 1213.06 L1364.26 1213.06 L1364.85 1213.06 L1365.43 1213.06 L1366.02 1213.06 L1366.61 1213.06 L1367.19 1213.06 L1367.78 1213.06 L1368.37 1213.06 L1368.95 1213.06 L1369.54 1213.06 L1370.13 1213.06 L1370.71 1213.06 L1371.3 1213.06 L1371.88 1213.06 L1372.47 1213.06 L1373.06 1213.06 L1373.64 1213.06 L1374.23 1213.06 L1374.82 1213.06 L1375.4 1213.06 L1375.99 1213.06 L1376.58 1213.06 L1377.16 1213.06 L1377.75 1213.06 L1378.34 1213.06 L1378.92 1213.06 L1379.51 1213.06 L1380.09 1213.06 L1380.68 1213.06 L1381.27 1213.06 L1381.85 1213.06 L1382.44 1213.06 L1383.03 1213.06 L1383.61 1213.06 L1384.2 1213.06 L1384.79 1213.06 L1385.37 1213.06 L1385.96 1213.06 L1386.55 1213.06 L1387.13 1213.06 L1387.72 1213.06 L1388.3 1213.06 L1388.89 1213.06 L1389.48 1213.06 L1390.06 1213.06 L1390.65 1213.06 L1391.24 1213.06 L1391.82 1213.06 L1392.41 1213.06 L1393 1213.06 L1393.58 1213.06 L1394.17 1213.06 L1394.75 1213.06 L1395.34 1213.06 L1395.93 1213.06 L1396.51 1213.06 L1397.1 1213.06 L1397.69 1213.06 L1398.27 1213.06 L1398.86 1213.06 L1399.45 1213.06 L1400.03 1213.06 L1400.62 1213.06 L1401.21 1213.06 L1401.79 1213.06 L1402.38 1213.06 L1402.96 1213.06 L1403.55 1213.06 L1404.14 1213.06 L1404.72 1213.06 L1405.31 1213.06 L1405.9 1213.06 L1406.48 1213.06 L1407.07 1213.06 L1407.66 1213.06 L1408.24 1213.06 L1408.83 1213.06 L1409.42 1213.06 L1410 1213.06 L1410.59 1213.06 L1411.17 1213.06 L1411.76 1213.06 L1412.35 1213.06 L1412.93 1213.06 L1413.52 1213.06 L1414.11 1213.06 L1414.69 1213.06 L1415.28 1213.06 L1415.87 1213.06 L1416.45 1213.06 L1417.04 1213.06 L1417.63 1213.06 L1418.21 1213.06 L1418.8 1213.06 L1419.38 1213.06 L1419.97 1213.06 L1420.56 1213.06 L1421.14 1213.06 L1421.73 1213.06 L1422.32 1213.06 L1422.9 1213.06 L1423.49 1213.06 L1424.08 1213.06 L1424.66 1213.06 L1425.25 1213.06 L1425.83 1213.06 L1426.42 1213.06 L1427.01 1213.06 L1427.59 1213.06 L1428.18 1213.06 L1428.77 1213.06 L1429.35 1213.06 L1429.94 1213.06 L1430.53 1213.06 L1431.11 1213.06 L1431.7 1213.06 L1432.29 1213.06 L1432.87 1213.06 L1433.46 1213.06 L1434.04 1213.06 L1434.63 1213.06 L1435.22 1213.06 L1435.8 1213.06 L1436.39 1213.06 L1436.98 1213.06 L1437.56 1213.06 L1438.15 1213.06 L1438.74 1213.06 L1439.32 1213.06 L1439.91 1213.06 L1440.5 1213.06 L1441.08 1213.06 L1441.67 1213.06 L1442.25 1213.06 L1442.84 1213.06 L1443.43 1213.06 L1444.01 1213.06 L1444.6 1213.06 L1445.19 1213.06 L1445.77 1213.06 L1446.36 1213.06 L1446.95 1213.06 L1447.53 1213.06 L1448.12 1213.06 L1448.7 1213.06 L1449.29 1213.06 L1449.88 1213.06 L1450.46 1213.06 L1451.05 1213.06 L1451.64 1213.06 L1452.22 1213.06 L1452.81 1213.06 L1453.4 1213.06 L1453.98 1213.06 L1454.57 1213.06 L1455.16 1213.06 L1455.74 1213.06 L1456.33 1213.06 L1456.91 1213.06 L1457.5 1213.06 L1458.09 1213.06 L1458.67 1213.06 L1459.26 1213.06 L1459.85 1213.06 L1460.43 1213.06 L1461.02 1213.06 L1461.61 1213.06 L1462.19 1213.06 L1462.78 1213.06 L1463.37 1213.06 L1463.95 1213.06 L1464.54 1213.06 L1465.12 1213.06 L1465.71 1213.06 L1466.3 1213.06 L1466.88 1213.06 L1467.47 1213.06 L1468.06 1213.06 L1468.64 1213.06 L1469.23 1213.06 L1469.82 1213.06 L1470.4 1213.06 L1470.99 1213.06 L1471.57 1213.06 L1472.16 1213.06 L1472.75 1213.06 L1473.33 1213.06 L1473.92 1213.06 L1474.51 1213.06 L1475.09 1213.06 L1475.68 1213.06 L1476.27 1213.06 L1476.85 1213.06 L1477.44 1213.06 L1478.03 1213.06 L1478.61 1213.06 L1479.2 1213.06 L1479.78 1213.06 L1480.37 1213.06 L1480.96 1213.06 L1481.54 1213.06 L1482.13 1213.06 L1482.72 1213.06 L1483.3 1213.06 L1483.89 1213.06 L1484.48 1213.06 L1485.06 1213.06 L1485.65 1213.06 L1486.24 1213.06 L1486.82 1213.06 L1487.41 1213.06 L1487.99 1213.06 L1488.58 1213.06 L1489.17 1213.06 L1489.75 1213.06 L1490.34 1213.06 L1490.93 1213.06 L1491.51 1213.06 L1492.1 1213.06 L1492.69 1213.06 L1493.27 1213.06 L1493.86 1213.06 L1494.45 1213.06 L1495.03 1213.06 L1495.62 1213.06 L1496.2 1213.06 L1496.79 1213.06 L1497.38 1213.06 L1497.96 1213.06 L1498.55 1213.06 L1499.14 1213.06 L1499.72 1213.06 L1500.31 1213.06 L1500.9 1213.06 L1501.48 1213.06 L1502.07 1213.06 L1502.65 1213.06 L1503.24 1213.06 L1503.83 1213.06 L1504.41 1213.06 L1505 1213.06 L1505.59 1213.06 L1506.17 1213.06 L1506.76 1213.06 L1507.35 1213.06 L1507.93 1213.06 L1508.52 1213.06 L1509.11 1213.06 L1509.69 1213.06 L1510.28 1213.06 L1510.86 1213.06 L1511.45 1213.06 L1512.04 1213.06 L1512.62 1213.06 L1513.21 1213.06 L1513.8 1213.06 L1514.38 1213.06 L1514.97 1213.06 L1515.56 1213.06 L1516.14 1213.06 L1516.73 1213.06 L1517.32 1213.06 L1517.9 1213.06 L1518.49 1213.06 L1519.07 1213.06 L1519.66 1213.06 L1520.25 1213.06 L1520.83 1213.06 L1521.42 1213.06 L1522.01 1213.06 L1522.59 1213.06 L1523.18 1213.06 L1523.77 1213.06 L1524.35 1213.06 L1524.94 1213.06 L1525.52 1213.06 L1526.11 1213.06 L1526.7 1213.06 L1527.28 1213.06 L1527.87 1213.06 L1528.46 1213.06 L1529.04 1213.06 L1529.63 1213.06 L1530.22 1213.06 L1530.8 1213.06 L1531.39 1213.06 L1531.98 1213.06 L1532.56 1213.06 L1533.15 1213.06 L1533.73 1213.06 L1534.32 1213.06 L1534.91 1213.06 L1535.49 1213.06 L1536.08 1213.06 L1536.67 1213.06 L1537.25 1213.06 L1537.84 1213.06 L1538.43 1213.06 L1539.01 1213.06 L1539.6 1213.06 L1540.19 1213.06 L1540.77 1213.06 L1541.36 1213.06 L1541.94 1213.06 L1542.53 1213.06 L1543.12 1213.06 L1543.7 1213.06 L1544.29 1213.06 L1544.88 1213.06 L1545.46 1213.06 L1546.05 1213.06 L1546.64 1213.06 L1547.22 1213.06 L1547.81 1213.06 L1548.4 1213.06 L1548.98 1213.06 L1549.57 1213.06 L1550.15 1213.06 L1550.74 1213.06 L1551.33 1213.06 L1551.91 1213.06 L1552.5 1213.06 L1553.09 1213.06 L1553.67 1213.06 L1554.26 1213.06 L1554.85 1213.06 L1555.43 1213.06 L1556.02 1213.06 L1556.6 1213.06 L1557.19 1213.06 L1557.78 1213.06 L1558.36 1213.06 L1558.95 1213.06 L1559.54 1213.06 L1560.12 1213.06 L1560.71 1213.06 L1561.3 1213.06 L1561.88 1213.06 L1562.47 1213.06 L1563.06 1213.06 L1563.64 1213.06 L1564.23 1213.06 L1564.81 1213.06 L1565.4 1213.06 L1565.99 1213.06 L1566.57 1213.06 L1567.16 1213.06 L1567.75 1213.06 L1568.33 1213.06 L1568.92 1213.06 L1569.51 1213.06 L1570.09 1213.06 L1570.68 1213.06 L1571.27 1213.06 L1571.85 1213.06 L1572.44 1213.06 L1573.02 1213.06 L1573.61 1213.06 L1574.2 1213.06 L1574.78 1213.06 L1575.37 1213.06 L1575.96 1213.06 L1576.54 1213.06 L1577.13 1213.06 L1577.72 1213.06 L1578.3 1213.06 L1578.89 1213.06 L1579.47 1213.06 L1580.06 1213.06 L1580.65 1213.06 L1581.23 1213.06 L1581.82 1213.06 L1582.41 1213.06 L1582.99 1213.06 L1583.58 1213.06 L1584.17 1213.06 L1584.75 1213.06 L1585.34 1213.06 L1585.93 1213.06 L1586.51 1213.06 L1587.1 1213.06 L1587.68 1213.06 L1588.27 1213.06 L1588.86 1213.06 L1589.44 1213.06 L1590.03 1213.06 L1590.62 1213.06 L1591.2 1213.06 L1591.79 1213.06 L1592.38 1213.06 L1592.96 1213.06 L1593.55 1213.06 L1594.14 1213.06 L1594.72 1213.06 L1595.31 1213.06 L1595.89 1213.06 L1596.48 1213.06 L1597.07 1213.06 L1597.65 1213.06 L1598.24 1213.06 L1598.83 1213.06 L1599.41 1213.06 L1600 1213.06 L1600.59 1213.06 L1601.17 1213.06 L1601.76 1213.06 L1602.34 1213.06 L1602.93 1213.06 L1603.52 1213.06 L1604.1 1213.06 L1604.69 1213.06 L1605.28 1213.06 L1605.86 1213.06 L1606.45 1213.06 L1607.04 1213.06 L1607.62 1213.06 L1608.21 1213.06 L1608.8 1213.06 L1609.38 1213.06 L1609.97 1213.06 L1610.55 1213.06 L1611.14 1213.06 L1611.73 1213.06 L1612.31 1213.06 L1612.9 1213.06 L1613.49 1213.06 L1614.07 1213.06 L1614.66 1213.06 L1615.25 1213.06 L1615.83 1213.06 L1616.42 1213.06 L1617.01 1213.06 L1617.59 1213.06 L1618.18 1213.06 L1618.76 1213.06 L1619.35 1213.06 L1619.94 1213.06 L1620.52 1213.06 L1621.11 1213.06 L1621.7 1213.06 L1622.28 1213.06 L1622.87 1213.06 L1623.46 1213.06 L1624.04 1213.06 L1624.63 1213.06 L1625.22 1213.06 L1625.8 1213.06 L1626.39 1213.06 L1626.97 1213.06 L1627.56 1213.06 L1628.15 1213.06 L1628.73 1213.06 L1629.32 1213.06 L1629.91 1213.06 L1630.49 1213.06 L1631.08 1213.06 L1631.67 1213.06 L1632.25 1213.06 L1632.84 1213.06 L1633.42 1213.06 L1634.01 1213.06 L1634.6 1213.06 L1635.18 1213.06 L1635.77 1213.06 L1636.36 1213.06 L1636.94 1213.06 L1637.53 1213.06 L1638.12 1213.06 L1638.7 1213.06 L1639.29 1213.06 L1639.88 1213.06 L1640.46 1213.06 L1641.05 1213.06 L1641.63 1213.06 L1642.22 1213.06 L1642.81 1213.06 L1643.39 1213.06 L1643.98 1213.06 L1644.57 1213.06 L1645.15 1213.06 L1645.74 1213.06 L1646.33 1213.06 L1646.91 1213.06 L1647.5 1213.06 L1648.09 1213.06 L1648.67 1213.06 L1649.26 1213.06 L1649.84 1213.06 L1650.43 1213.06 L1651.02 1213.06 L1651.6 1213.06 L1652.19 1213.06 L1652.78 1213.06 L1653.36 1213.06 L1653.95 1213.06 L1654.54 1213.06 L1655.12 1213.06 L1655.71 1213.06 L1656.29 1213.06 L1656.88 1213.06 L1657.47 1213.06 L1658.05 1213.06 L1658.64 1213.06 L1659.23 1213.06 L1659.81 1213.06 L1660.4 1213.06 L1660.99 1213.06 L1661.57 1213.06 L1662.16 1213.06 L1662.75 1213.06 L1663.33 1213.06 L1663.92 1213.06 L1664.5 1213.06 L1665.09 1213.06 L1665.68 1213.06 L1666.26 1213.06 L1666.85 1213.06 L1667.44 1213.06 L1668.02 1213.06 L1668.61 1213.06 L1669.2 1213.06 L1669.78 1213.06 L1670.37 1213.06 L1670.96 1213.06 L1671.54 1213.06 L1672.13 1213.06 L1672.71 1213.06 L1673.3 1213.06 L1673.89 1213.06 L1674.47 1213.06 L1675.06 1213.06 L1675.65 1213.06 L1676.23 1213.06 L1676.82 1213.06 L1677.41 1213.06 L1677.99 1213.06 L1678.58 1213.06 L1679.17 1213.06 L1679.75 1213.06 L1680.34 1213.06 L1680.92 1213.06 L1681.51 1213.06 L1682.1 1213.06 L1682.68 1213.06 L1683.27 1213.06 L1683.86 1213.06 L1684.44 1213.06 L1685.03 1213.06 L1685.62 1213.06 L1686.2 1213.06 L1686.79 1213.06 L1687.37 1213.06 L1687.96 1213.06 L1688.55 1213.06 L1689.13 1213.06 L1689.72 1213.06 L1690.31 1213.06 L1690.89 1213.06 L1691.48 1213.06 L1692.07 1213.06 L1692.65 1213.06 L1693.24 1213.06 L1693.83 1213.06 L1694.41 1213.06 L1695 1213.06 L1695.58 1213.06 L1696.17 1213.06 L1696.76 1213.06 L1697.34 1213.06 L1697.93 1213.06 L1698.52 1213.06 L1699.1 1213.06 L1699.69 1213.06 L1700.28 1213.06 L1700.86 1213.06 L1701.45 1213.06 L1702.04 1213.06 L1702.62 1213.06 L1703.21 1213.06 L1703.79 1213.06 L1704.38 1213.06 L1704.97 1213.06 L1705.55 1213.06 L1706.14 1213.06 L1706.73 1213.06 L1707.31 1213.06 L1707.9 1213.06 L1708.49 1213.06 L1709.07 1213.06 L1709.66 1213.06 L1710.24 1213.06 L1710.83 1213.06 L1711.42 1213.06 L1712 1213.06 L1712.59 1213.06 L1713.18 1213.06 L1713.76 1213.06 L1714.35 1213.06 L1714.94 1213.06 L1715.52 1213.06 L1716.11 1213.06 L1716.7 1213.06 L1717.28 1213.06 L1717.87 1213.06 L1718.45 1213.06 L1719.04 1213.06 L1719.63 1213.06 L1720.21 1213.06 L1720.8 1213.06 L1721.39 1213.06 L1721.97 1213.06 L1722.56 1213.06 L1723.15 1213.06 L1723.73 1213.06 L1724.32 1213.06 L1724.91 1213.06 L1725.49 1213.06 L1726.08 1213.06 L1726.66 1213.06 L1727.25 1213.06 L1727.84 1213.06 L1728.42 1213.06 L1729.01 1213.06 L1729.6 1213.06 L1730.18 1213.06 L1730.77 1213.06 L1731.36 1213.06 L1731.94 1213.06 L1732.53 1213.06 L1733.11 1213.06 L1733.7 1213.06 L1734.29 1213.06 L1734.87 1213.06 L1735.46 1213.06 L1736.05 1213.06 L1736.63 1213.06 L1737.22 1213.06 L1737.81 1213.06 L1738.39 1213.06 L1738.98 1213.06 L1739.57 1213.06 L1740.15 1213.06 L1740.74 1213.06 L1741.32 1213.06 L1741.91 1213.06 L1742.5 1213.06 L1743.08 1213.06 L1743.67 1213.06 L1744.26 1213.06 L1744.84 1213.06 L1745.43 1213.06 L1746.02 1213.06 L1746.6 1213.06 L1747.19 1213.06 L1747.78 1213.06 L1748.36 1213.06 L1748.95 1213.06 L1749.53 1213.06 L1750.12 1213.06 L1750.71 1213.06 L1751.29 1213.06 L1751.88 1213.06 L1752.47 1213.06 L1753.05 1213.06 L1753.64 1213.06 L1754.23 1213.06 L1754.81 1213.06 L1755.4 1213.06 L1755.99 1213.06 L1756.57 1213.06 L1757.16 1213.06 L1757.74 1213.06 L1758.33 1213.06 L1758.92 1213.06 L1759.5 1213.06 L1760.09 1213.06 L1760.68 1213.06 L1761.26 1213.06 L1761.85 1213.06 L1762.44 1213.06 L1763.02 1213.06 L1763.61 1213.06 L1764.19 1213.06 L1764.78 1213.06 L1765.37 1213.06 L1765.95 1213.06 L1766.54 1213.06 L1767.13 1213.06 L1767.71 1213.06 L1768.3 1213.06 L1768.89 1213.06 L1769.47 1213.06 L1770.06 1213.06 L1770.65 1213.06 L1771.23 1213.06 L1771.82 1213.06 L1772.4 1213.06 L1772.99 1213.06 L1773.58 1213.06 L1774.16 1213.06 L1774.75 1213.06 L1775.34 1213.06 L1775.92 1213.06 L1776.51 1213.06 L1777.1 1213.06 L1777.68 1213.06 L1778.27 1213.06 L1778.86 1213.06 L1779.44 1213.06 L1780.03 1213.06 L1780.61 1213.06 L1781.2 1213.06 L1781.79 1213.06 L1782.37 1213.06 L1782.96 1213.06 L1783.55 1213.06 L1784.13 1213.06 L1784.72 1213.06 L1785.31 1213.06 L1785.89 1213.06 L1786.48 1213.06 L1787.06 1213.06 L1787.65 1213.06 L1788.24 1213.06 L1788.82 1213.06 L1789.41 1213.06 L1790 1213.06 L1790.58 1213.06 L1791.17 1213.06 L1791.76 1213.06 L1792.34 1213.06 L1792.93 1213.06 L1793.52 1213.06 L1794.1 1213.06 L1794.69 1213.06 L1795.27 1213.06 L1795.86 1213.06 L1796.45 1213.06 L1797.03 1213.06 L1797.62 1213.06 L1798.21 1213.06 L1798.79 1213.06 L1799.38 1213.06 L1799.97 1213.06 L1800.55 1213.06 L1801.14 1213.06 L1801.73 1213.06 L1802.31 1213.06 L1802.9 1213.06 L1803.48 1213.06 L1804.07 1213.06 L1804.66 1213.06 L1805.24 1213.06 L1805.83 1213.06 L1806.42 1213.06 L1807 1213.06 L1807.59 1213.06 L1808.18 1213.06 L1808.76 1213.06 L1809.35 1213.06 L1809.94 1213.06 L1810.52 1213.06 L1811.11 1213.06 L1811.69 1213.06 L1812.28 1213.06 L1812.87 1213.06 L1813.45 1213.06 L1814.04 1213.06 L1814.63 1213.06 L1815.21 1213.06 L1815.8 1213.06 L1816.39 1213.06 L1816.97 1213.06 L1817.56 1213.06 L1818.14 1213.06 L1818.73 1213.06 L1819.32 1213.06 L1819.9 1213.06 L1820.49 1213.06 L1821.08 1213.06 L1821.66 1213.06 L1822.25 1213.06 L1822.84 1213.06 L1823.42 1213.06 L1824.01 1213.06 L1824.6 1213.06 L1825.18 1213.06 L1825.77 1213.06 L1826.35 1213.06 L1826.94 1213.06 L1827.53 1213.06 L1828.11 1213.06 L1828.7 1213.06 L1829.29 1213.06 L1829.87 1213.06 L1830.46 1213.06 L1831.05 1213.06 L1831.63 1213.06 L1832.22 1213.06 L1832.81 1213.06 L1833.39 1213.06 L1833.98 1213.06 L1834.56 1213.06 L1835.15 1213.06 L1835.74 1213.06 L1836.32 1213.06 L1836.91 1213.06 L1837.5 1213.06 L1838.08 1213.06 L1838.67 1213.06 L1839.26 1213.06 L1839.84 1213.06 L1840.43 1213.06 L1841.01 1213.06 L1841.6 1213.06 L1842.19 1213.06 L1842.77 1213.06 L1843.36 1213.06 L1843.95 1213.06 L1844.53 1213.06 L1845.12 1213.06 L1845.71 1213.06 L1846.29 1213.06 L1846.88 1213.06 L1847.47 1213.06 L1848.05 1213.06 L1848.64 1213.06 L1849.22 1213.06 L1849.81 1213.06 L1850.4 1213.06 L1850.98 1213.06 L1851.57 1213.06 L1852.16 1213.06 L1852.74 1213.06 L1853.33 1213.06 L1853.92 1213.06 L1854.5 1213.06 L1855.09 1213.06 L1855.68 1213.06 L1856.26 1213.06 L1856.85 1213.06 L1857.43 1213.06 L1858.02 1213.06 L1858.61 1213.06 L1859.19 1213.06 L1859.78 1213.06 L1860.37 1213.06 L1860.95 1213.06 L1861.54 1213.06 L1862.13 1213.06 L1862.71 1213.06 L1863.3 1213.06 L1863.88 1213.06 L1864.47 1213.06 L1865.06 1213.06 L1865.64 1213.06 L1866.23 1213.06 L1866.82 1213.06 L1867.4 1213.06 L1867.99 1213.06 L1868.58 1213.06 L1869.16 1213.06 L1869.75 1213.06 L1870.34 1213.06 L1870.92 1213.06 L1871.51 1213.06 L1872.09 1213.06 L1872.68 1213.06 L1873.27 1213.06 L1873.85 1213.06 L1874.44 1213.06 L1875.03 1213.06 L1875.61 1213.06 L1876.2 1213.06 L1876.79 1213.06 L1877.37 1213.06 L1877.96 1213.06 L1878.55 1213.06 L1879.13 1213.06 L1879.72 1213.06 L1880.3 1213.06 L1880.89 1213.06 L1881.48 1213.06 L1882.06 1213.06 L1882.65 1213.06 L1883.24 1213.06 L1883.82 1213.06 L1884.41 1213.06 L1885 1213.06 L1885.58 1213.06 L1886.17 1213.06 L1886.76 1213.06 L1887.34 1213.06 L1887.93 1213.06 L1888.51 1213.06 L1889.1 1213.06 L1889.69 1213.06 L1890.27 1213.06 L1890.86 1213.06 L1891.45 1213.06 L1892.03 1213.06 L1892.62 1213.06 L1893.21 1213.06 L1893.79 1213.06 L1894.38 1213.06 L1894.96 1213.06 L1895.55 1213.06 L1896.14 1213.06 L1896.72 1213.06 L1897.31 1213.06 L1897.9 1213.06 L1898.48 1213.06 L1899.07 1213.06 L1899.66 1213.06 L1900.24 1213.06 L1900.83 1213.06 L1901.42 1213.06 L1902 1213.06 L1902.59 1213.06 L1903.17 1213.06 L1903.76 1213.06 L1904.35 1213.06 L1904.93 1213.06 L1905.52 1213.06 L1906.11 1213.06 L1906.69 1213.06 L1907.28 1213.06 L1907.87 1213.06 L1908.45 1213.06 L1909.04 1213.06 L1909.63 1213.06 L1910.21 1213.06 L1910.8 1213.06 L1911.38 1213.06 L1911.97 1213.06 L1912.56 1213.06 L1913.14 1213.06 L1913.73 1213.06 L1914.32 1213.06 L1914.9 1213.06 L1915.49 1213.06 L1916.08 1213.06 L1916.66 1213.06 L1917.25 1213.06 L1917.83 1213.06 L1918.42 1213.06 L1919.01 1213.06 L1919.59 1213.06 L1920.18 1213.06 L1920.77 1213.06 L1921.35 1213.06 L1921.94 1213.06 L1922.53 1213.06 L1923.11 1213.06 L1923.7 1213.06 L1924.29 1213.06 L1924.87 1213.06 L1925.46 1213.06 L1926.04 1213.06 L1926.63 1213.06 L1927.22 1213.06 L1927.8 1213.06 L1928.39 1213.06 L1928.98 1213.06 L1929.56 1213.06 L1930.15 1213.06 L1930.74 1213.06 L1931.32 1213.06 L1931.91 1213.06 L1932.5 1213.06 L1933.08 1213.06 L1933.67 1213.06 L1934.25 1213.06 L1934.84 1213.06 L1935.43 1213.06 L1936.01 1213.06 L1936.6 1213.06 L1937.19 1213.06 L1937.77 1213.06 L1938.36 1213.06 L1938.95 1213.06 L1939.53 1213.06 L1940.12 1213.06 L1940.71 1213.06 L1941.29 1213.06 L1941.88 1213.06 L1942.46 1213.06 L1943.05 1213.06 L1943.64 1213.06 L1944.22 1213.06 L1944.81 1213.06 L1945.4 1213.06 L1945.98 1213.06 L1946.57 1213.06 L1947.16 1213.06 L1947.74 1213.06 L1948.33 1213.06 L1948.91 1213.06 L1949.5 1213.06 L1950.09 1213.06 L1950.67 1213.06 L1951.26 1213.06 L1951.85 1213.06 L1952.43 1213.06 L1953.02 1213.06 L1953.61 1213.06 L1954.19 1213.06 L1954.78 1213.06 L1955.37 1213.06 L1955.95 1213.06 L1956.54 1213.06 L1957.12 1213.06 L1957.71 1213.06 L1958.3 1213.06 L1958.88 1213.06 L1959.47 1213.06 L1960.06 1213.06 L1960.64 1213.06 L1961.23 1213.06 L1961.82 1213.06 L1962.4 1213.06 L1962.99 1213.06 L1963.58 1213.06 L1964.16 1213.06 L1964.75 1213.06 L1965.33 1213.06 L1965.92 1213.06 L1966.51 1213.06 L1967.09 1213.06 L1967.68 1213.06 L1968.27 1213.06 L1968.85 1213.06 L1969.44 1213.06 L1970.03 1213.06 L1970.61 1213.06 L1971.2 1213.06 L1971.78 1213.06 L1972.37 1213.06 L1972.96 1213.06 L1973.54 1213.06 L1974.13 1213.06 L1974.72 1213.06 L1975.3 1213.06 L1975.89 1213.06 L1976.48 1213.06 L1977.06 1213.06 L1977.65 1213.06 L1978.24 1213.06 L1978.82 1213.06 L1979.41 1213.06 L1979.99 1213.06 L1980.58 1213.06 L1981.17 1213.06 L1981.75 1213.06 L1982.34 1213.06 L1982.93 1213.06 L1983.51 1213.06 L1984.1 1213.06 L1984.69 1213.06 L1985.27 1213.06 L1985.86 1213.06 L1986.45 1213.06 L1987.03 1213.06 L1987.62 1213.06 L1988.2 1213.06 L1988.79 1213.06 L1989.38 1213.06 L1989.96 1213.06 L1990.55 1213.06 L1991.14 1213.06 L1991.72 1213.06 L1992.31 1213.06 L1992.9 1213.06 L1993.48 1213.06 L1994.07 1213.06 L1994.65 1213.06 L1995.24 1213.06 L1995.83 1213.06 L1996.41 1213.06 L1997 1213.06 L1997.59 1213.06 L1998.17 1213.06 L1998.76 1213.06 L1999.35 1213.06 L1999.93 1213.06 L2000.52 1213.06 L2001.11 1213.06 L2001.69 1213.06 L2002.28 1213.06 L2002.86 1213.06 L2003.45 1213.06 L2004.04 1213.06 L2004.62 1213.06 L2005.21 1213.06 L2005.8 1213.06 L2006.38 1213.06 L2006.97 1213.06 L2007.56 1213.06 L2008.14 1213.06 L2008.73 1213.06 L2009.32 1213.06 L2009.9 1213.06 L2010.49 1213.06 L2011.07 1213.06 L2011.66 1213.06 L2012.25 1213.06 L2012.83 1213.06 L2013.42 1213.06 L2014.01 1213.06 L2014.59 1213.06 L2015.18 1213.06 L2015.77 1213.06 L2016.35 1213.06 L2016.94 1213.06 L2017.53 1213.06 L2018.11 1213.06 L2018.7 1213.06 L2019.28 1213.06 L2019.87 1213.06 L2020.46 1213.06 L2021.04 1213.06 L2021.63 1213.06 L2022.22 1213.06 L2022.8 1213.06 L2023.39 1213.06 L2023.98 1213.06 L2024.56 1213.06 L2025.15 1213.06 L2025.73 1213.06 L2026.32 1213.06 L2026.91 1213.06 L2027.49 1213.06 L2028.08 1213.06 L2028.67 1213.06 L2029.25 1213.06 L2029.84 1213.06 L2030.43 1213.06 L2031.01 1213.06 L2031.6 1213.06 L2032.19 1213.06 L2032.77 1213.06 L2033.36 1213.06 L2033.94 1213.06 L2034.53 1213.06 L2035.12 1213.06 L2035.7 1213.06 L2036.29 1213.06 L2036.88 1213.06 L2037.46 1213.06 L2038.05 1213.06 L2038.64 1213.06 L2039.22 1213.06 L2039.81 1213.06 L2040.4 1213.06 L2040.98 1213.06 L2041.57 1213.06 L2042.15 1213.06 L2042.74 1213.06 L2043.33 1213.06 L2043.91 1213.06 L2044.5 1213.06 L2045.09 1213.06 L2045.67 1213.06 L2046.26 1213.06 L2046.85 1213.06 L2047.43 1213.06 L2048.02 1213.06 L2048.6 1213.06 L2049.19 1213.06 L2049.78 1213.06 L2050.36 1213.06 L2050.95 1213.06 L2051.54 1213.06 L2052.12 1213.06 L2052.71 1213.06 L2053.3 1213.06 L2053.88 1213.06 L2054.47 1213.06 L2055.06 1213.06 L2055.64 1213.06 L2056.23 1213.06 L2056.81 1213.06 L2057.4 1213.06 L2057.99 1213.06 L2058.57 1213.06 L2059.16 1213.06 L2059.75 1213.06 L2060.33 1213.06 L2060.92 1213.06 L2061.51 1213.06 L2062.09 1213.06 L2062.68 1213.06 L2063.27 1213.06 L2063.85 1213.06 L2064.44 1213.06 L2065.02 1213.06 L2065.61 1213.06 L2066.2 1213.06 L2066.78 1213.06 L2067.37 1213.06 L2067.96 1213.06 L2068.54 1213.06 L2069.13 1213.06 L2069.72 1213.06 L2070.3 1213.06 L2070.89 1213.06 L2071.48 1213.06 L2072.06 1213.06 L2072.65 1213.06 L2073.23 1213.06 L2073.82 1213.06 L2074.41 1213.06 L2074.99 1213.06 L2075.58 1213.06 L2076.17 1213.06 L2076.75 1213.06 L2077.34 1213.06 L2077.93 1213.06 L2078.51 1213.06 L2079.1 1213.06 L2079.68 1213.06 L2080.27 1213.06 L2080.86 1213.06 L2081.44 1213.06 L2082.03 1213.06 L2082.62 1213.06 L2083.2 1213.06 L2083.79 1213.06 L2084.38 1213.06 L2084.96 1213.06 L2085.55 1213.06 L2086.14 1213.06 L2086.72 1213.06 L2087.31 1213.06 L2087.89 1213.06 L2088.48 1213.06 L2089.07 1213.06 L2089.65 1213.06 L2090.24 1213.06 L2090.83 1213.06 L2091.41 1213.06 L2092 1213.06 L2092.59 1213.06 L2093.17 1213.06 L2093.76 1213.06 L2094.35 1213.06 L2094.93 1213.06 L2095.52 1213.06 L2096.1 1213.06 L2096.69 1213.06 L2097.28 1213.06 L2097.86 1213.06 L2098.45 1213.06 L2099.04 1213.06 L2099.62 1213.06 L2100.21 1213.06 L2100.8 1213.06 L2101.38 1213.06 L2101.97 1213.06 L2102.55 1213.06 L2103.14 1213.06 L2103.73 1213.06 L2104.31 1213.06 L2104.9 1213.06 L2105.49 1213.06 L2106.07 1213.06 L2106.66 1213.06 L2107.25 1213.06 L2107.83 1213.06 L2108.42 1213.06 L2109.01 1213.06 L2109.59 1213.06 L2110.18 1213.06 L2110.76 1213.06 L2111.35 1213.06 L2111.94 1213.06 L2112.52 1213.06 L2113.11 1213.06 L2113.7 1213.06 L2114.28 1213.06 L2114.87 1213.06 L2115.46 1213.06 L2116.04 1213.06 L2116.63 1213.06 L2117.22 1213.06 L2117.8 1213.06 L2118.39 1213.06 L2118.97 1213.06 L2119.56 1213.06 L2120.15 1213.06 L2120.73 1213.06 L2121.32 1213.06 L2121.91 1213.06 L2122.49 1213.06 L2123.08 1213.06 L2123.67 1213.06 L2124.25 1213.06 L2124.84 1213.06 L2125.42 1213.06 L2126.01 1213.06 L2126.6 1213.06 L2127.18 1213.06 L2127.77 1213.06 L2128.36 1213.06 L2128.94 1213.06 L2129.53 1213.06 L2130.12 1213.06 L2130.7 1213.06 L2131.29 1213.06 L2131.88 1213.06 L2132.46 1213.06 L2133.05 1213.06 L2133.63 1213.06 L2134.22 1213.06 L2134.81 1213.06 L2135.39 1213.06 L2135.98 1213.06 L2136.57 1213.06 L2137.15 1213.06 L2137.74 1213.06 L2138.33 1213.06 L2138.91 1213.06 L2139.5 1213.06 L2140.09 1213.06 L2140.67 1213.06 L2141.26 1213.06 L2141.84 1213.06 L2142.43 1213.06 L2143.02 1213.06 L2143.6 1213.06 L2144.19 1213.06 L2144.78 1213.06 L2145.36 1213.06 L2145.95 1213.06 L2146.54 1213.06 L2147.12 1213.06 L2147.71 1213.06 L2148.3 1213.06 L2148.88 1213.06 L2149.47 1213.06 L2150.05 1213.06 L2150.64 1213.06 L2151.23 1213.06 L2151.81 1213.06 L2152.4 1213.06 L2152.99 1213.06 L2153.57 1213.06 L2154.16 1213.06 L2154.75 1213.06 L2155.33 1213.06 L2155.92 1213.06 L2156.5 1213.06 L2157.09 1213.06 L2157.68 1213.06 L2158.26 1213.06 L2158.26 1212.93 L2157.68 1212.93 L2157.09 1212.93 L2156.5 1212.93 L2155.92 1212.93 L2155.33 1212.93 L2154.75 1212.93 L2154.16 1212.93 L2153.57 1212.93 L2152.99 1212.93 L2152.4 1212.93 L2151.81 1212.93 L2151.23 1212.93 L2150.64 1212.93 L2150.05 1212.93 L2149.47 1212.93 L2148.88 1212.93 L2148.3 1212.93 L2147.71 1212.93 L2147.12 1212.93 L2146.54 1212.93 L2145.95 1212.93 L2145.36 1212.93 L2144.78 1212.93 L2144.19 1212.93 L2143.6 1212.93 L2143.02 1212.93 L2142.43 1212.93 L2141.84 1212.93 L2141.26 1212.93 L2140.67 1212.93 L2140.09 1212.93 L2139.5 1212.93 L2138.91 1212.93 L2138.33 1212.93 L2137.74 1212.93 L2137.15 1212.93 L2136.57 1212.93 L2135.98 1212.93 L2135.39 1212.93 L2134.81 1212.93 L2134.22 1212.93 L2133.63 1212.93 L2133.05 1212.93 L2132.46 1212.93 L2131.88 1212.93 L2131.29 1212.93 L2130.7 1212.93 L2130.12 1212.93 L2129.53 1212.93 L2128.94 1212.93 L2128.36 1212.93 L2127.77 1212.93 L2127.18 1212.93 L2126.6 1212.93 L2126.01 1212.93 L2125.42 1212.93 L2124.84 1212.93 L2124.25 1212.93 L2123.67 1212.93 L2123.08 1212.93 L2122.49 1212.93 L2121.91 1212.93 L2121.32 1212.93 L2120.73 1212.93 L2120.15 1212.93 L2119.56 1212.93 L2118.97 1212.93 L2118.39 1212.93 L2117.8 1212.93 L2117.22 1212.93 L2116.63 1212.93 L2116.04 1212.93 L2115.46 1212.93 L2114.87 1212.93 L2114.28 1212.93 L2113.7 1212.93 L2113.11 1212.93 L2112.52 1212.93 L2111.94 1212.93 L2111.35 1212.93 L2110.76 1212.93 L2110.18 1212.93 L2109.59 1212.93 L2109.01 1212.93 L2108.42 1212.93 L2107.83 1212.93 L2107.25 1212.93 L2106.66 1212.93 L2106.07 1212.93 L2105.49 1212.93 L2104.9 1212.93 L2104.31 1212.93 L2103.73 1212.93 L2103.14 1212.93 L2102.55 1212.93 L2101.97 1212.93 L2101.38 1212.93 L2100.8 1212.93 L2100.21 1212.93 L2099.62 1212.93 L2099.04 1212.93 L2098.45 1212.93 L2097.86 1212.93 L2097.28 1212.93 L2096.69 1212.93 L2096.1 1212.93 L2095.52 1212.93 L2094.93 1212.93 L2094.35 1212.93 L2093.76 1212.93 L2093.17 1212.93 L2092.59 1212.93 L2092 1212.93 L2091.41 1212.93 L2090.83 1212.93 L2090.24 1212.93 L2089.65 1212.93 L2089.07 1212.93 L2088.48 1212.93 L2087.89 1212.93 L2087.31 1212.93 L2086.72 1212.93 L2086.14 1212.93 L2085.55 1212.93 L2084.96 1212.93 L2084.38 1212.93 L2083.79 1212.93 L2083.2 1212.93 L2082.62 1212.93 L2082.03 1212.93 L2081.44 1212.93 L2080.86 1212.93 L2080.27 1212.93 L2079.68 1212.93 L2079.1 1212.93 L2078.51 1212.93 L2077.93 1212.93 L2077.34 1212.93 L2076.75 1212.93 L2076.17 1212.93 L2075.58 1212.93 L2074.99 1212.93 L2074.41 1212.93 L2073.82 1212.93 L2073.23 1212.93 L2072.65 1212.93 L2072.06 1212.93 L2071.48 1212.93 L2070.89 1212.93 L2070.3 1212.93 L2069.72 1212.93 L2069.13 1212.93 L2068.54 1212.93 L2067.96 1212.93 L2067.37 1212.93 L2066.78 1212.93 L2066.2 1212.93 L2065.61 1212.93 L2065.02 1212.93 L2064.44 1212.93 L2063.85 1212.93 L2063.27 1212.93 L2062.68 1212.93 L2062.09 1212.93 L2061.51 1212.93 L2060.92 1212.93 L2060.33 1212.93 L2059.75 1212.93 L2059.16 1212.93 L2058.57 1212.93 L2057.99 1212.93 L2057.4 1212.93 L2056.81 1212.93 L2056.23 1212.93 L2055.64 1212.93 L2055.06 1212.93 L2054.47 1212.93 L2053.88 1212.93 L2053.3 1212.93 L2052.71 1212.93 L2052.12 1212.93 L2051.54 1212.93 L2050.95 1212.93 L2050.36 1212.93 L2049.78 1212.93 L2049.19 1212.93 L2048.6 1212.93 L2048.02 1212.93 L2047.43 1212.93 L2046.85 1212.93 L2046.26 1212.93 L2045.67 1212.93 L2045.09 1212.93 L2044.5 1212.93 L2043.91 1212.93 L2043.33 1212.93 L2042.74 1212.93 L2042.15 1212.93 L2041.57 1212.93 L2040.98 1212.93 L2040.4 1212.93 L2039.81 1212.93 L2039.22 1212.93 L2038.64 1212.93 L2038.05 1212.93 L2037.46 1212.93 L2036.88 1212.93 L2036.29 1212.93 L2035.7 1212.93 L2035.12 1212.93 L2034.53 1212.93 L2033.94 1212.93 L2033.36 1212.93 L2032.77 1212.93 L2032.19 1212.93 L2031.6 1212.93 L2031.01 1212.93 L2030.43 1212.93 L2029.84 1212.93 L2029.25 1212.93 L2028.67 1212.93 L2028.08 1212.93 L2027.49 1212.93 L2026.91 1212.93 L2026.32 1212.93 L2025.73 1212.93 L2025.15 1212.93 L2024.56 1212.93 L2023.98 1212.93 L2023.39 1212.93 L2022.8 1212.93 L2022.22 1212.93 L2021.63 1212.93 L2021.04 1212.93 L2020.46 1212.93 L2019.87 1212.93 L2019.28 1212.93 L2018.7 1212.93 L2018.11 1212.93 L2017.53 1212.93 L2016.94 1212.93 L2016.35 1212.93 L2015.77 1212.93 L2015.18 1212.93 L2014.59 1212.93 L2014.01 1212.93 L2013.42 1212.93 L2012.83 1212.93 L2012.25 1212.93 L2011.66 1212.93 L2011.07 1212.93 L2010.49 1212.93 L2009.9 1212.93 L2009.32 1212.93 L2008.73 1212.93 L2008.14 1212.93 L2007.56 1212.93 L2006.97 1212.93 L2006.38 1212.93 L2005.8 1212.93 L2005.21 1212.93 L2004.62 1212.93 L2004.04 1212.93 L2003.45 1212.93 L2002.86 1212.93 L2002.28 1212.93 L2001.69 1212.93 L2001.11 1212.93 L2000.52 1212.93 L1999.93 1212.93 L1999.35 1212.93 L1998.76 1212.93 L1998.17 1212.93 L1997.59 1212.93 L1997 1212.93 L1996.41 1212.93 L1995.83 1212.93 L1995.24 1212.93 L1994.65 1212.93 L1994.07 1212.93 L1993.48 1212.93 L1992.9 1212.93 L1992.31 1212.93 L1991.72 1212.93 L1991.14 1212.93 L1990.55 1212.93 L1989.96 1212.93 L1989.38 1212.93 L1988.79 1212.93 L1988.2 1212.93 L1987.62 1212.93 L1987.03 1212.93 L1986.45 1212.93 L1985.86 1212.93 L1985.27 1212.93 L1984.69 1212.93 L1984.1 1212.93 L1983.51 1212.93 L1982.93 1212.93 L1982.34 1212.93 L1981.75 1212.93 L1981.17 1212.93 L1980.58 1212.93 L1979.99 1212.93 L1979.41 1212.93 L1978.82 1212.93 L1978.24 1212.93 L1977.65 1212.93 L1977.06 1212.93 L1976.48 1212.93 L1975.89 1212.93 L1975.3 1212.93 L1974.72 1212.93 L1974.13 1212.93 L1973.54 1212.93 L1972.96 1212.93 L1972.37 1212.93 L1971.78 1212.93 L1971.2 1212.93 L1970.61 1212.93 L1970.03 1212.93 L1969.44 1212.93 L1968.85 1212.93 L1968.27 1212.93 L1967.68 1212.93 L1967.09 1212.93 L1966.51 1212.93 L1965.92 1212.93 L1965.33 1212.93 L1964.75 1212.93 L1964.16 1212.93 L1963.58 1212.93 L1962.99 1212.93 L1962.4 1212.93 L1961.82 1212.93 L1961.23 1212.93 L1960.64 1212.93 L1960.06 1212.93 L1959.47 1212.93 L1958.88 1212.93 L1958.3 1212.93 L1957.71 1212.93 L1957.12 1212.93 L1956.54 1212.93 L1955.95 1212.93 L1955.37 1212.93 L1954.78 1212.93 L1954.19 1212.93 L1953.61 1212.93 L1953.02 1212.93 L1952.43 1212.93 L1951.85 1212.93 L1951.26 1212.93 L1950.67 1212.93 L1950.09 1212.93 L1949.5 1212.93 L1948.91 1212.93 L1948.33 1212.93 L1947.74 1212.93 L1947.16 1212.93 L1946.57 1212.93 L1945.98 1212.93 L1945.4 1212.93 L1944.81 1212.93 L1944.22 1212.93 L1943.64 1212.93 L1943.05 1212.93 L1942.46 1212.93 L1941.88 1212.93 L1941.29 1212.93 L1940.71 1212.93 L1940.12 1212.93 L1939.53 1212.93 L1938.95 1212.93 L1938.36 1212.93 L1937.77 1212.93 L1937.19 1212.93 L1936.6 1212.93 L1936.01 1212.93 L1935.43 1212.93 L1934.84 1212.93 L1934.25 1212.93 L1933.67 1212.93 L1933.08 1212.93 L1932.5 1212.93 L1931.91 1212.93 L1931.32 1212.93 L1930.74 1212.93 L1930.15 1212.93 L1929.56 1212.93 L1928.98 1212.93 L1928.39 1212.93 L1927.8 1212.93 L1927.22 1212.93 L1926.63 1212.93 L1926.04 1212.93 L1925.46 1212.93 L1924.87 1212.93 L1924.29 1212.93 L1923.7 1212.93 L1923.11 1212.93 L1922.53 1212.93 L1921.94 1212.93 L1921.35 1212.93 L1920.77 1212.93 L1920.18 1212.93 L1919.59 1212.93 L1919.01 1212.93 L1918.42 1212.93 L1917.83 1212.93 L1917.25 1212.93 L1916.66 1212.93 L1916.08 1212.93 L1915.49 1212.93 L1914.9 1212.93 L1914.32 1212.93 L1913.73 1212.93 L1913.14 1212.93 L1912.56 1212.93 L1911.97 1212.93 L1911.38 1212.93 L1910.8 1212.93 L1910.21 1212.93 L1909.63 1212.93 L1909.04 1212.93 L1908.45 1212.93 L1907.87 1212.93 L1907.28 1212.93 L1906.69 1212.93 L1906.11 1212.93 L1905.52 1212.93 L1904.93 1212.93 L1904.35 1212.93 L1903.76 1212.93 L1903.17 1212.93 L1902.59 1212.93 L1902 1212.93 L1901.42 1212.93 L1900.83 1212.93 L1900.24 1212.93 L1899.66 1212.93 L1899.07 1212.93 L1898.48 1212.93 L1897.9 1212.93 L1897.31 1212.93 L1896.72 1212.93 L1896.14 1212.93 L1895.55 1212.93 L1894.96 1212.93 L1894.38 1212.93 L1893.79 1212.93 L1893.21 1212.93 L1892.62 1212.93 L1892.03 1212.93 L1891.45 1212.93 L1890.86 1212.93 L1890.27 1212.93 L1889.69 1212.93 L1889.1 1212.93 L1888.51 1212.93 L1887.93 1212.93 L1887.34 1212.93 L1886.76 1212.93 L1886.17 1212.93 L1885.58 1212.93 L1885 1212.93 L1884.41 1212.93 L1883.82 1212.93 L1883.24 1212.93 L1882.65 1212.93 L1882.06 1212.93 L1881.48 1212.93 L1880.89 1212.93 L1880.3 1212.93 L1879.72 1212.93 L1879.13 1212.93 L1878.55 1212.93 L1877.96 1212.93 L1877.37 1212.93 L1876.79 1212.93 L1876.2 1212.93 L1875.61 1212.93 L1875.03 1212.93 L1874.44 1212.93 L1873.85 1212.93 L1873.27 1212.93 L1872.68 1212.93 L1872.09 1212.93 L1871.51 1212.93 L1870.92 1212.93 L1870.34 1212.93 L1869.75 1212.93 L1869.16 1212.93 L1868.58 1212.93 L1867.99 1212.93 L1867.4 1212.93 L1866.82 1212.93 L1866.23 1212.93 L1865.64 1212.93 L1865.06 1212.93 L1864.47 1212.93 L1863.88 1212.93 L1863.3 1212.93 L1862.71 1212.93 L1862.13 1212.93 L1861.54 1212.93 L1860.95 1212.93 L1860.37 1212.93 L1859.78 1212.93 L1859.19 1212.93 L1858.61 1212.93 L1858.02 1212.93 L1857.43 1212.93 L1856.85 1212.93 L1856.26 1212.93 L1855.68 1212.93 L1855.09 1212.93 L1854.5 1212.93 L1853.92 1212.93 L1853.33 1212.93 L1852.74 1212.93 L1852.16 1212.93 L1851.57 1212.93 L1850.98 1212.93 L1850.4 1212.93 L1849.81 1212.93 L1849.22 1212.93 L1848.64 1212.93 L1848.05 1212.93 L1847.47 1212.93 L1846.88 1212.93 L1846.29 1212.93 L1845.71 1212.93 L1845.12 1212.93 L1844.53 1212.93 L1843.95 1212.93 L1843.36 1212.93 L1842.77 1212.93 L1842.19 1212.93 L1841.6 1212.93 L1841.01 1212.93 L1840.43 1212.93 L1839.84 1212.93 L1839.26 1212.93 L1838.67 1212.93 L1838.08 1212.93 L1837.5 1212.93 L1836.91 1212.93 L1836.32 1212.93 L1835.74 1212.93 L1835.15 1212.93 L1834.56 1212.93 L1833.98 1212.93 L1833.39 1212.93 L1832.81 1212.93 L1832.22 1212.93 L1831.63 1212.93 L1831.05 1212.93 L1830.46 1212.93 L1829.87 1212.93 L1829.29 1212.93 L1828.7 1212.93 L1828.11 1212.93 L1827.53 1212.93 L1826.94 1212.93 L1826.35 1212.93 L1825.77 1212.93 L1825.18 1212.93 L1824.6 1212.93 L1824.01 1212.93 L1823.42 1212.93 L1822.84 1212.93 L1822.25 1212.93 L1821.66 1212.93 L1821.08 1212.93 L1820.49 1212.93 L1819.9 1212.93 L1819.32 1212.93 L1818.73 1212.93 L1818.14 1212.93 L1817.56 1212.93 L1816.97 1212.93 L1816.39 1212.93 L1815.8 1212.93 L1815.21 1212.93 L1814.63 1212.93 L1814.04 1212.93 L1813.45 1212.93 L1812.87 1212.93 L1812.28 1212.93 L1811.69 1212.93 L1811.11 1212.93 L1810.52 1212.93 L1809.94 1212.93 L1809.35 1212.93 L1808.76 1212.93 L1808.18 1212.93 L1807.59 1212.93 L1807 1212.93 L1806.42 1212.93 L1805.83 1212.93 L1805.24 1212.93 L1804.66 1212.93 L1804.07 1212.93 L1803.48 1212.93 L1802.9 1212.93 L1802.31 1212.93 L1801.73 1212.93 L1801.14 1212.93 L1800.55 1212.93 L1799.97 1212.93 L1799.38 1212.93 L1798.79 1212.93 L1798.21 1212.93 L1797.62 1212.93 L1797.03 1212.93 L1796.45 1212.93 L1795.86 1212.93 L1795.27 1212.93 L1794.69 1212.93 L1794.1 1212.93 L1793.52 1212.93 L1792.93 1212.93 L1792.34 1212.93 L1791.76 1212.93 L1791.17 1212.93 L1790.58 1212.93 L1790 1212.93 L1789.41 1212.93 L1788.82 1212.93 L1788.24 1212.93 L1787.65 1212.93 L1787.06 1212.93 L1786.48 1212.93 L1785.89 1212.93 L1785.31 1212.93 L1784.72 1212.93 L1784.13 1212.93 L1783.55 1212.93 L1782.96 1212.93 L1782.37 1212.93 L1781.79 1212.93 L1781.2 1212.93 L1780.61 1212.93 L1780.03 1212.93 L1779.44 1212.93 L1778.86 1212.93 L1778.27 1212.93 L1777.68 1212.93 L1777.1 1212.93 L1776.51 1212.93 L1775.92 1212.93 L1775.34 1212.93 L1774.75 1212.93 L1774.16 1212.93 L1773.58 1212.93 L1772.99 1212.93 L1772.4 1212.93 L1771.82 1212.93 L1771.23 1212.93 L1770.65 1212.93 L1770.06 1212.93 L1769.47 1212.93 L1768.89 1212.93 L1768.3 1212.93 L1767.71 1212.93 L1767.13 1212.93 L1766.54 1212.93 L1765.95 1212.93 L1765.37 1212.93 L1764.78 1212.93 L1764.19 1212.93 L1763.61 1212.93 L1763.02 1212.93 L1762.44 1212.93 L1761.85 1212.93 L1761.26 1212.93 L1760.68 1212.93 L1760.09 1212.93 L1759.5 1212.93 L1758.92 1212.93 L1758.33 1212.93 L1757.74 1212.93 L1757.16 1212.93 L1756.57 1212.93 L1755.99 1212.93 L1755.4 1212.93 L1754.81 1212.93 L1754.23 1212.93 L1753.64 1212.93 L1753.05 1212.93 L1752.47 1212.93 L1751.88 1212.93 L1751.29 1212.93 L1750.71 1212.93 L1750.12 1212.93 L1749.53 1212.93 L1748.95 1212.93 L1748.36 1212.93 L1747.78 1212.93 L1747.19 1212.93 L1746.6 1212.93 L1746.02 1212.93 L1745.43 1212.93 L1744.84 1212.93 L1744.26 1212.93 L1743.67 1212.93 L1743.08 1212.93 L1742.5 1212.93 L1741.91 1212.93 L1741.32 1212.93 L1740.74 1212.93 L1740.15 1212.93 L1739.57 1212.93 L1738.98 1212.93 L1738.39 1212.93 L1737.81 1212.93 L1737.22 1212.93 L1736.63 1212.93 L1736.05 1212.93 L1735.46 1212.93 L1734.87 1212.93 L1734.29 1212.93 L1733.7 1212.93 L1733.11 1212.93 L1732.53 1212.93 L1731.94 1212.93 L1731.36 1212.93 L1730.77 1212.93 L1730.18 1212.93 L1729.6 1212.93 L1729.01 1212.93 L1728.42 1212.93 L1727.84 1212.93 L1727.25 1212.93 L1726.66 1212.93 L1726.08 1212.93 L1725.49 1212.93 L1724.91 1212.93 L1724.32 1212.93 L1723.73 1212.93 L1723.15 1212.93 L1722.56 1212.93 L1721.97 1212.93 L1721.39 1212.93 L1720.8 1212.93 L1720.21 1212.93 L1719.63 1212.93 L1719.04 1212.93 L1718.45 1212.93 L1717.87 1212.93 L1717.28 1212.93 L1716.7 1212.93 L1716.11 1212.93 L1715.52 1212.93 L1714.94 1212.93 L1714.35 1212.93 L1713.76 1212.93 L1713.18 1212.93 L1712.59 1212.93 L1712 1212.93 L1711.42 1212.93 L1710.83 1212.93 L1710.24 1212.93 L1709.66 1212.93 L1709.07 1212.93 L1708.49 1212.93 L1707.9 1212.93 L1707.31 1212.93 L1706.73 1212.93 L1706.14 1212.93 L1705.55 1212.93 L1704.97 1212.93 L1704.38 1212.93 L1703.79 1212.93 L1703.21 1212.93 L1702.62 1212.93 L1702.04 1212.93 L1701.45 1212.93 L1700.86 1212.93 L1700.28 1212.93 L1699.69 1212.93 L1699.1 1212.93 L1698.52 1212.93 L1697.93 1212.93 L1697.34 1212.93 L1696.76 1212.93 L1696.17 1212.93 L1695.58 1212.93 L1695 1212.93 L1694.41 1212.93 L1693.83 1212.93 L1693.24 1212.93 L1692.65 1212.93 L1692.07 1212.93 L1691.48 1212.93 L1690.89 1212.93 L1690.31 1212.93 L1689.72 1212.93 L1689.13 1212.93 L1688.55 1212.93 L1687.96 1212.93 L1687.37 1212.93 L1686.79 1212.93 L1686.2 1212.93 L1685.62 1212.93 L1685.03 1212.93 L1684.44 1212.93 L1683.86 1212.93 L1683.27 1212.93 L1682.68 1212.93 L1682.1 1212.93 L1681.51 1212.93 L1680.92 1212.93 L1680.34 1212.93 L1679.75 1212.93 L1679.17 1212.93 L1678.58 1212.93 L1677.99 1212.93 L1677.41 1212.93 L1676.82 1212.93 L1676.23 1212.93 L1675.65 1212.93 L1675.06 1212.93 L1674.47 1212.93 L1673.89 1212.93 L1673.3 1212.93 L1672.71 1212.93 L1672.13 1212.93 L1671.54 1212.93 L1670.96 1212.93 L1670.37 1212.93 L1669.78 1212.93 L1669.2 1212.93 L1668.61 1212.93 L1668.02 1212.93 L1667.44 1212.93 L1666.85 1212.93 L1666.26 1212.93 L1665.68 1212.93 L1665.09 1212.93 L1664.5 1212.93 L1663.92 1212.93 L1663.33 1212.93 L1662.75 1212.93 L1662.16 1212.93 L1661.57 1212.93 L1660.99 1212.93 L1660.4 1212.93 L1659.81 1212.93 L1659.23 1212.93 L1658.64 1212.93 L1658.05 1212.93 L1657.47 1212.93 L1656.88 1212.93 L1656.29 1212.93 L1655.71 1212.93 L1655.12 1212.93 L1654.54 1212.93 L1653.95 1212.93 L1653.36 1212.93 L1652.78 1212.93 L1652.19 1212.93 L1651.6 1212.93 L1651.02 1212.93 L1650.43 1212.93 L1649.84 1212.93 L1649.26 1212.93 L1648.67 1212.93 L1648.09 1212.93 L1647.5 1212.93 L1646.91 1212.93 L1646.33 1212.93 L1645.74 1212.93 L1645.15 1212.93 L1644.57 1212.93 L1643.98 1212.93 L1643.39 1212.93 L1642.81 1212.93 L1642.22 1212.93 L1641.63 1212.93 L1641.05 1212.93 L1640.46 1212.93 L1639.88 1212.93 L1639.29 1212.93 L1638.7 1212.93 L1638.12 1212.93 L1637.53 1212.93 L1636.94 1212.93 L1636.36 1212.93 L1635.77 1212.93 L1635.18 1212.93 L1634.6 1212.93 L1634.01 1212.93 L1633.42 1212.93 L1632.84 1212.93 L1632.25 1212.93 L1631.67 1212.93 L1631.08 1212.93 L1630.49 1212.93 L1629.91 1212.93 L1629.32 1212.93 L1628.73 1212.93 L1628.15 1212.93 L1627.56 1212.93 L1626.97 1212.93 L1626.39 1212.93 L1625.8 1212.93 L1625.22 1212.93 L1624.63 1212.93 L1624.04 1212.93 L1623.46 1212.93 L1622.87 1212.93 L1622.28 1212.93 L1621.7 1212.93 L1621.11 1212.93 L1620.52 1212.93 L1619.94 1212.93 L1619.35 1212.93 L1618.76 1212.93 L1618.18 1212.93 L1617.59 1212.93 L1617.01 1212.93 L1616.42 1212.93 L1615.83 1212.93 L1615.25 1212.93 L1614.66 1212.93 L1614.07 1212.93 L1613.49 1212.93 L1612.9 1212.93 L1612.31 1212.93 L1611.73 1212.93 L1611.14 1212.93 L1610.55 1212.93 L1609.97 1212.93 L1609.38 1212.93 L1608.8 1212.93 L1608.21 1212.93 L1607.62 1212.93 L1607.04 1212.93 L1606.45 1212.93 L1605.86 1212.93 L1605.28 1212.93 L1604.69 1212.93 L1604.1 1212.93 L1603.52 1212.93 L1602.93 1212.93 L1602.34 1212.93 L1601.76 1212.93 L1601.17 1212.93 L1600.59 1212.93 L1600 1212.93 L1599.41 1212.93 L1598.83 1212.93 L1598.24 1212.93 L1597.65 1212.93 L1597.07 1212.93 L1596.48 1212.93 L1595.89 1212.93 L1595.31 1212.93 L1594.72 1212.93 L1594.14 1212.93 L1593.55 1212.93 L1592.96 1212.93 L1592.38 1212.93 L1591.79 1212.93 L1591.2 1212.93 L1590.62 1212.93 L1590.03 1212.93 L1589.44 1212.93 L1588.86 1212.93 L1588.27 1212.93 L1587.68 1212.93 L1587.1 1212.93 L1586.51 1212.93 L1585.93 1212.93 L1585.34 1212.93 L1584.75 1212.93 L1584.17 1212.93 L1583.58 1212.93 L1582.99 1212.93 L1582.41 1212.93 L1581.82 1212.93 L1581.23 1212.93 L1580.65 1212.93 L1580.06 1212.93 L1579.47 1212.93 L1578.89 1212.93 L1578.3 1212.93 L1577.72 1212.93 L1577.13 1212.93 L1576.54 1212.93 L1575.96 1212.93 L1575.37 1212.93 L1574.78 1212.93 L1574.2 1212.93 L1573.61 1212.93 L1573.02 1212.93 L1572.44 1212.93 L1571.85 1212.93 L1571.27 1212.93 L1570.68 1212.93 L1570.09 1212.93 L1569.51 1212.93 L1568.92 1212.93 L1568.33 1212.93 L1567.75 1212.93 L1567.16 1212.93 L1566.57 1212.93 L1565.99 1212.93 L1565.4 1212.93 L1564.81 1212.93 L1564.23 1212.93 L1563.64 1212.93 L1563.06 1212.93 L1562.47 1212.93 L1561.88 1212.93 L1561.3 1212.93 L1560.71 1212.93 L1560.12 1212.93 L1559.54 1212.93 L1558.95 1212.93 L1558.36 1212.93 L1557.78 1212.93 L1557.19 1212.93 L1556.6 1212.93 L1556.02 1212.93 L1555.43 1212.93 L1554.85 1212.93 L1554.26 1212.93 L1553.67 1212.93 L1553.09 1212.93 L1552.5 1212.93 L1551.91 1212.93 L1551.33 1212.93 L1550.74 1212.93 L1550.15 1212.93 L1549.57 1212.93 L1548.98 1212.93 L1548.4 1212.93 L1547.81 1212.93 L1547.22 1212.93 L1546.64 1212.93 L1546.05 1212.93 L1545.46 1212.93 L1544.88 1212.93 L1544.29 1212.93 L1543.7 1212.93 L1543.12 1212.93 L1542.53 1212.93 L1541.94 1212.93 L1541.36 1212.93 L1540.77 1212.93 L1540.19 1212.93 L1539.6 1212.93 L1539.01 1212.93 L1538.43 1212.93 L1537.84 1212.93 L1537.25 1212.93 L1536.67 1212.93 L1536.08 1212.93 L1535.49 1212.93 L1534.91 1212.93 L1534.32 1212.93 L1533.73 1212.93 L1533.15 1212.93 L1532.56 1212.93 L1531.98 1212.93 L1531.39 1212.93 L1530.8 1212.93 L1530.22 1212.93 L1529.63 1212.93 L1529.04 1212.93 L1528.46 1212.93 L1527.87 1212.93 L1527.28 1212.93 L1526.7 1212.93 L1526.11 1212.93 L1525.52 1212.93 L1524.94 1212.93 L1524.35 1212.93 L1523.77 1212.93 L1523.18 1212.93 L1522.59 1212.93 L1522.01 1212.93 L1521.42 1212.93 L1520.83 1212.93 L1520.25 1212.93 L1519.66 1212.93 L1519.07 1212.93 L1518.49 1212.93 L1517.9 1212.93 L1517.32 1212.93 L1516.73 1212.93 L1516.14 1212.93 L1515.56 1212.93 L1514.97 1212.93 L1514.38 1212.93 L1513.8 1212.93 L1513.21 1212.93 L1512.62 1212.93 L1512.04 1212.93 L1511.45 1212.93 L1510.86 1212.93 L1510.28 1212.93 L1509.69 1212.93 L1509.11 1212.93 L1508.52 1212.93 L1507.93 1212.93 L1507.35 1212.93 L1506.76 1212.93 L1506.17 1212.93 L1505.59 1212.93 L1505 1212.93 L1504.41 1212.93 L1503.83 1212.93 L1503.24 1212.93 L1502.65 1212.93 L1502.07 1212.93 L1501.48 1212.93 L1500.9 1212.93 L1500.31 1212.93 L1499.72 1212.93 L1499.14 1212.93 L1498.55 1212.93 L1497.96 1212.93 L1497.38 1212.93 L1496.79 1212.93 L1496.2 1212.93 L1495.62 1212.93 L1495.03 1212.93 L1494.45 1212.93 L1493.86 1212.93 L1493.27 1212.93 L1492.69 1212.93 L1492.1 1212.93 L1491.51 1212.93 L1490.93 1212.93 L1490.34 1212.93 L1489.75 1212.93 L1489.17 1212.93 L1488.58 1212.93 L1487.99 1212.93 L1487.41 1212.93 L1486.82 1212.93 L1486.24 1212.93 L1485.65 1212.93 L1485.06 1212.93 L1484.48 1212.93 L1483.89 1212.93 L1483.3 1212.93 L1482.72 1212.93 L1482.13 1212.93 L1481.54 1212.93 L1480.96 1212.93 L1480.37 1212.93 L1479.78 1212.93 L1479.2 1212.93 L1478.61 1212.93 L1478.03 1212.93 L1477.44 1212.93 L1476.85 1212.93 L1476.27 1212.93 L1475.68 1212.93 L1475.09 1212.93 L1474.51 1212.93 L1473.92 1212.93 L1473.33 1212.93 L1472.75 1212.93 L1472.16 1212.93 L1471.57 1212.93 L1470.99 1212.93 L1470.4 1212.93 L1469.82 1212.93 L1469.23 1212.93 L1468.64 1212.93 L1468.06 1212.93 L1467.47 1212.93 L1466.88 1212.93 L1466.3 1212.93 L1465.71 1212.93 L1465.12 1212.93 L1464.54 1212.93 L1463.95 1212.93 L1463.37 1212.93 L1462.78 1212.93 L1462.19 1212.93 L1461.61 1212.93 L1461.02 1212.93 L1460.43 1212.93 L1459.85 1212.93 L1459.26 1212.93 L1458.67 1212.93 L1458.09 1212.93 L1457.5 1212.93 L1456.91 1212.93 L1456.33 1212.93 L1455.74 1212.93 L1455.16 1212.93 L1454.57 1212.93 L1453.98 1212.93 L1453.4 1212.93 L1452.81 1212.93 L1452.22 1212.93 L1451.64 1212.93 L1451.05 1212.93 L1450.46 1212.93 L1449.88 1212.93 L1449.29 1212.93 L1448.7 1212.93 L1448.12 1212.93 L1447.53 1212.93 L1446.95 1212.93 L1446.36 1212.93 L1445.77 1212.93 L1445.19 1212.93 L1444.6 1212.93 L1444.01 1212.93 L1443.43 1212.93 L1442.84 1212.93 L1442.25 1212.93 L1441.67 1212.93 L1441.08 1212.93 L1440.5 1212.93 L1439.91 1212.93 L1439.32 1212.93 L1438.74 1212.93 L1438.15 1212.93 L1437.56 1212.93 L1436.98 1212.93 L1436.39 1212.93 L1435.8 1212.93 L1435.22 1212.93 L1434.63 1212.93 L1434.04 1212.93 L1433.46 1212.93 L1432.87 1212.93 L1432.29 1212.93 L1431.7 1212.93 L1431.11 1212.93 L1430.53 1212.93 L1429.94 1212.93 L1429.35 1212.93 L1428.77 1212.93 L1428.18 1212.93 L1427.59 1212.93 L1427.01 1212.93 L1426.42 1212.93 L1425.83 1212.93 L1425.25 1212.93 L1424.66 1212.93 L1424.08 1212.93 L1423.49 1212.93 L1422.9 1212.93 L1422.32 1212.93 L1421.73 1212.93 L1421.14 1212.93 L1420.56 1212.93 L1419.97 1212.93 L1419.38 1212.93 L1418.8 1212.93 L1418.21 1212.93 L1417.63 1212.93 L1417.04 1212.93 L1416.45 1212.93 L1415.87 1212.93 L1415.28 1212.93 L1414.69 1212.93 L1414.11 1212.93 L1413.52 1212.93 L1412.93 1212.93 L1412.35 1212.93 L1411.76 1212.93 L1411.17 1212.93 L1410.59 1212.93 L1410 1212.93 L1409.42 1212.93 L1408.83 1212.93 L1408.24 1212.93 L1407.66 1212.93 L1407.07 1212.93 L1406.48 1212.93 L1405.9 1212.93 L1405.31 1212.93 L1404.72 1212.93 L1404.14 1212.93 L1403.55 1212.93 L1402.96 1212.93 L1402.38 1212.93 L1401.79 1212.93 L1401.21 1212.93 L1400.62 1212.93 L1400.03 1212.93 L1399.45 1212.93 L1398.86 1212.93 L1398.27 1212.93 L1397.69 1212.93 L1397.1 1212.93 L1396.51 1212.93 L1395.93 1212.93 L1395.34 1212.93 L1394.75 1212.93 L1394.17 1212.93 L1393.58 1212.93 L1393 1212.93 L1392.41 1212.93 L1391.82 1212.93 L1391.24 1212.93 L1390.65 1212.93 L1390.06 1212.93 L1389.48 1212.93 L1388.89 1212.93 L1388.3 1212.93 L1387.72 1212.93 L1387.13 1212.93 L1386.55 1212.93 L1385.96 1212.93 L1385.37 1212.93 L1384.79 1212.93 L1384.2 1212.93 L1383.61 1212.93 L1383.03 1212.93 L1382.44 1212.93 L1381.85 1212.93 L1381.27 1212.93 L1380.68 1212.93 L1380.09 1212.93 L1379.51 1212.93 L1378.92 1212.93 L1378.34 1212.93 L1377.75 1212.93 L1377.16 1212.93 L1376.58 1212.93 L1375.99 1212.93 L1375.4 1212.93 L1374.82 1212.93 L1374.23 1212.93 L1373.64 1212.93 L1373.06 1212.93 L1372.47 1212.93 L1371.88 1212.93 L1371.3 1212.93 L1370.71 1212.93 L1370.13 1212.93 L1369.54 1212.93 L1368.95 1212.93 L1368.37 1212.93 L1367.78 1212.93 L1367.19 1212.93 L1366.61 1212.93 L1366.02 1212.93 L1365.43 1212.93 L1364.85 1212.93 L1364.26 1212.93 L1363.68 1212.93 L1363.09 1212.93 L1362.5 1212.93 L1361.92 1212.93 L1361.33 1212.93 L1360.74 1212.93 L1360.16 1212.93 L1359.57 1212.93 L1358.98 1212.93 L1358.4 1212.93 L1357.81 1212.93 L1357.22 1212.93 L1356.64 1212.93 L1356.05 1212.93 L1355.47 1212.93 L1354.88 1212.93 L1354.29 1212.93 L1353.71 1212.93 L1353.12 1212.93 L1352.53 1212.93 L1351.95 1212.93 L1351.36 1212.93 L1350.77 1212.93 L1350.19 1212.93 L1349.6 1212.93 L1349.01 1212.93 L1348.43 1212.93 L1347.84 1212.93 L1347.26 1212.93 L1346.67 1212.93 L1346.08 1212.93 L1345.5 1212.93 L1344.91 1212.93 L1344.32 1212.93 L1343.74 1212.93 L1343.15 1212.93 L1342.56 1212.93 L1341.98 1212.93 L1341.39 1212.93 L1340.8 1212.93 L1340.22 1212.93 L1339.63 1212.93 L1339.05 1212.93 L1338.46 1212.93 L1337.87 1212.93 L1337.29 1212.93 L1336.7 1212.93 L1336.11 1212.93 L1335.53 1212.93 L1334.94 1212.93 L1334.35 1212.93 L1333.77 1212.93 L1333.18 1212.93 L1332.6 1212.93 L1332.01 1212.93 L1331.42 1212.93 L1330.84 1212.93 L1330.25 1212.93 L1329.66 1212.93 L1329.08 1212.93 L1328.49 1212.93 L1327.9 1212.93 L1327.32 1212.93 L1326.73 1212.93 L1326.14 1212.93 L1325.56 1212.93 L1324.97 1212.93 L1324.39 1212.93 L1323.8 1212.93 L1323.21 1212.93 L1322.63 1212.93 L1322.04 1212.93 L1321.45 1212.93 L1320.87 1212.93 L1320.28 1212.93 L1319.69 1212.93 L1319.11 1212.93 L1318.52 1212.93 L1317.93 1212.93 L1317.35 1212.93 L1316.76 1212.93 L1316.18 1212.93 L1315.59 1212.93 L1315 1212.93 L1314.42 1212.93 L1313.83 1212.93 L1313.24 1212.93 L1312.66 1212.93 L1312.07 1212.93 L1311.48 1212.93 L1310.9 1212.93 L1310.31 1212.93 L1309.73 1212.93 L1309.14 1212.93 L1308.55 1212.93 L1307.97 1212.93 L1307.38 1212.93 L1306.79 1212.93 L1306.21 1212.93 L1305.62 1212.93 L1305.03 1212.93 L1304.45 1212.93 L1303.86 1212.93 L1303.27 1212.93 L1302.69 1212.93 L1302.1 1212.93 L1301.52 1212.93 L1300.93 1212.93 L1300.34 1212.93 L1299.76 1212.93 L1299.17 1212.93 L1298.58 1212.93 L1298 1212.93 L1297.41 1212.93 L1296.82 1212.93 L1296.24 1212.93 L1295.65 1212.93 L1295.06 1212.93 L1294.48 1212.93 L1293.89 1212.93 L1293.31 1212.93 L1292.72 1212.93 L1292.13 1212.93 L1291.55 1212.93 L1290.96 1212.93 L1290.37 1212.93 L1289.79 1212.93 L1289.2 1212.93 L1288.61 1212.93 L1288.03 1212.93 L1287.44 1212.93 L1286.86 1212.93 L1286.27 1212.93 L1285.68 1212.93 L1285.1 1212.93 L1284.51 1212.93 L1283.92 1212.93 L1283.34 1212.93 L1282.75 1212.93 L1282.16 1212.93 L1281.58 1212.93 L1280.99 1212.93 L1280.4 1212.93 L1279.82 1212.93 L1279.23 1212.93 L1278.65 1212.93 L1278.06 1212.93 L1277.47 1212.93 L1276.89 1212.93 L1276.3 1212.93 L1275.71 1212.93 L1275.13 1212.93 L1274.54 1212.93 L1273.95 1212.93 L1273.37 1212.93 L1272.78 1212.93 L1272.19 1212.93 L1271.61 1212.93 L1271.02 1212.93 L1270.44 1212.93 L1269.85 1212.93 L1269.26 1212.93 L1268.68 1212.93 L1268.09 1212.93 L1267.5 1212.93 L1266.92 1212.93 L1266.33 1212.93 L1265.74 1212.93 L1265.16 1212.93 L1264.57 1212.93 L1263.98 1212.93 L1263.4 1212.93 L1262.81 1212.93 L1262.23 1212.93 L1261.64 1212.93 L1261.05 1212.93 L1260.47 1212.93 L1259.88 1212.93 L1259.29 1212.93 L1258.71 1212.93 L1258.12 1212.93 L1257.53 1212.93 L1256.95 1212.93 L1256.36 1212.93 L1255.78 1212.93 L1255.19 1212.93 L1254.6 1212.93 L1254.02 1212.93 L1253.43 1212.93 L1252.84 1212.93 L1252.26 1212.93 L1251.67 1212.93 L1251.08 1212.93 L1250.5 1212.93 L1249.91 1212.93 L1249.32 1212.93 L1248.74 1212.93 L1248.15 1212.93 L1247.57 1212.93 L1246.98 1212.93 L1246.39 1212.93 L1245.81 1212.93 L1245.22 1212.93 L1244.63 1212.93 L1244.05 1212.93 L1243.46 1212.93 L1242.87 1212.93 L1242.29 1212.93 L1241.7 1212.93 L1241.11 1212.93 L1240.53 1212.93 L1239.94 1212.93 L1239.36 1212.93 L1238.77 1212.93 L1238.18 1212.93 L1237.6 1212.93 L1237.01 1212.93 L1236.42 1212.93 L1235.84 1212.93 L1235.25 1212.93 L1234.66 1212.93 L1234.08 1212.93 L1233.49 1212.93 L1232.91 1212.93 L1232.32 1212.93 L1231.73 1212.93 L1231.15 1212.93 L1230.56 1212.93 L1229.97 1212.93 L1229.39 1212.93 L1228.8 1212.93 L1228.21 1212.93 L1227.63 1212.93 L1227.04 1212.93 L1226.45 1212.93 L1225.87 1212.93 L1225.28 1212.93 L1224.7 1212.93 L1224.11 1212.93 L1223.52 1212.93 L1222.94 1212.93 L1222.35 1212.93 L1221.76 1212.93 L1221.18 1212.93 L1220.59 1212.93 L1220 1212.93 L1219.42 1212.93 L1218.83 1212.93 L1218.24 1212.93 L1217.66 1212.93 L1217.07 1212.93 L1216.49 1212.93 L1215.9 1212.93 L1215.31 1212.93 L1214.73 1212.93 L1214.14 1212.93 L1213.55 1212.93 L1212.97 1212.93 L1212.38 1212.93 L1211.79 1212.93 L1211.21 1212.93 L1210.62 1212.93 L1210.03 1212.93 L1209.45 1212.93 L1208.86 1212.93 L1208.28 1212.93 L1207.69 1212.93 L1207.1 1212.93 L1206.52 1212.93 L1205.93 1212.93 L1205.34 1212.93 L1204.76 1212.93 L1204.17 1212.93 L1203.58 1212.93 L1203 1212.93 L1202.41 1212.93 L1201.83 1212.93 L1201.24 1212.93 L1200.65 1212.93 L1200.07 1212.93 L1199.48 1212.93 L1198.89 1212.93 L1198.31 1212.93 L1197.72 1212.93 L1197.13 1212.93 L1196.55 1212.93 L1195.96 1212.93 L1195.37 1212.93 L1194.79 1212.93 L1194.2 1212.93 L1193.62 1212.93 L1193.03 1212.93 L1192.44 1212.93 L1191.86 1212.93 L1191.27 1212.93 L1190.68 1212.93 L1190.1 1212.93 L1189.51 1212.93 L1188.92 1212.93 L1188.34 1212.93 L1187.75 1212.93 L1187.16 1212.93 L1186.58 1212.93 L1185.99 1212.93 L1185.41 1212.93 L1184.82 1212.93 L1184.23 1212.93 L1183.65 1212.93 L1183.06 1212.93 L1182.47 1212.93 L1181.89 1212.93 L1181.3 1212.93 L1180.71 1212.93 L1180.13 1212.93 L1179.54 1212.93 L1178.96 1212.93 L1178.37 1212.93 L1177.78 1212.93 L1177.2 1212.93 L1176.61 1212.93 L1176.02 1212.93 L1175.44 1212.93 L1174.85 1212.93 L1174.26 1212.93 L1173.68 1212.93 L1173.09 1212.93 L1172.5 1212.93 L1171.92 1212.93 L1171.33 1212.93 L1170.75 1212.93 L1170.16 1212.93 L1169.57 1212.93 L1168.99 1212.93 L1168.4 1212.93 L1167.81 1212.93 L1167.23 1212.93 L1166.64 1212.93 L1166.05 1212.93 L1165.47 1212.93 L1164.88 1212.93 L1164.29 1212.93 L1163.71 1212.93 L1163.12 1212.93 L1162.54 1212.93 L1161.95 1212.93 L1161.36 1212.93 L1160.78 1212.93 L1160.19 1212.93 L1159.6 1212.93 L1159.02 1212.93 L1158.43 1212.93 L1157.84 1212.93 L1157.26 1212.93 L1156.67 1212.93 L1156.09 1212.93 L1155.5 1212.93 L1154.91 1212.93 L1154.33 1212.93 L1153.74 1212.93 L1153.15 1212.93 L1152.57 1212.93 L1151.98 1212.93 L1151.39 1212.93 L1150.81 1212.93 L1150.22 1212.93 L1149.63 1212.93 L1149.05 1212.93 L1148.46 1212.93 L1147.88 1212.93 L1147.29 1212.93 L1146.7 1212.93 L1146.12 1212.93 L1145.53 1212.93 L1144.94 1212.93 L1144.36 1212.93 L1143.77 1212.93 L1143.18 1212.93 L1142.6 1212.93 L1142.01 1212.93 L1141.42 1212.93 L1140.84 1212.93 L1140.25 1212.93 L1139.67 1212.93 L1139.08 1212.93 L1138.49 1212.93 L1137.91 1212.93 L1137.32 1212.93 L1136.73 1212.93 L1136.15 1212.93 L1135.56 1212.93 L1134.97 1212.93 L1134.39 1212.93 L1133.8 1212.93 L1133.21 1212.93 L1132.63 1212.93 L1132.04 1212.93 L1131.46 1212.93 L1130.87 1212.93 L1130.28 1212.93 L1129.7 1212.93 L1129.11 1212.93 L1128.52 1212.93 L1127.94 1212.93 L1127.35 1212.93 L1126.76 1212.93 L1126.18 1212.93 L1125.59 1212.93 L1125.01 1212.93 L1124.42 1212.93 L1123.83 1212.93 L1123.25 1212.93 L1122.66 1212.93 L1122.07 1212.93 L1121.49 1212.93 L1120.9 1212.93 L1120.31 1212.93 L1119.73 1212.93 L1119.14 1212.93 L1118.55 1212.93 L1117.97 1212.93 L1117.38 1212.93 L1116.8 1212.93 L1116.21 1212.93 L1115.62 1212.93 L1115.04 1212.93 L1114.45 1212.93 L1113.86 1212.93 L1113.28 1212.93 L1112.69 1212.93 L1112.1 1212.93 L1111.52 1212.93 L1110.93 1212.93 L1110.34 1212.93 L1109.76 1212.93 L1109.17 1212.93 L1108.59 1212.93 L1108 1212.93 L1107.41 1212.93 L1106.83 1212.93 L1106.24 1212.93 L1105.65 1212.93 L1105.07 1212.93 L1104.48 1212.93 L1103.89 1212.93 L1103.31 1212.93 L1102.72 1212.93 L1102.14 1212.93 L1101.55 1212.93 L1100.96 1212.93 L1100.38 1212.93 L1099.79 1212.93 L1099.2 1212.93 L1098.62 1212.93 L1098.03 1212.93 L1097.44 1212.93 L1096.86 1212.93 L1096.27 1212.93 L1095.68 1212.93 L1095.1 1212.93 L1094.51 1212.93 L1093.93 1212.93 L1093.34 1212.93 L1092.75 1212.93 L1092.17 1212.93 L1091.58 1212.93 L1090.99 1212.93 L1090.41 1212.93 L1089.82 1212.93 L1089.23 1212.93 L1088.65 1212.93 L1088.06 1212.93 L1087.47 1212.93 L1086.89 1212.93 L1086.3 1212.93 L1085.72 1212.93 L1085.13 1212.93 L1084.54 1212.93 L1083.96 1212.93 L1083.37 1212.93 L1082.78 1212.93 L1082.2 1212.93 L1081.61 1212.93 L1081.02 1212.93 L1080.44 1212.93 L1079.85 1212.93 L1079.26 1212.93 L1078.68 1212.93 L1078.09 1212.93 L1077.51 1212.93 L1076.92 1212.93 L1076.33 1212.93 L1075.75 1212.93 L1075.16 1212.93 L1074.57 1212.93 L1073.99 1212.93 L1073.4 1212.93 L1072.81 1212.93 L1072.23 1212.93 L1071.64 1212.93 L1071.06 1212.93 L1070.47 1212.93 L1069.88 1212.93 L1069.3 1212.93 L1068.71 1212.93 L1068.12 1212.93 L1067.54 1212.93 L1066.95 1212.93 L1066.36 1212.93 L1065.78 1212.93 L1065.19 1212.93 L1064.6 1212.93 L1064.02 1212.93 L1063.43 1212.93 L1062.85 1212.93 L1062.26 1212.93 L1061.67 1212.93 L1061.09 1212.93 L1060.5 1212.93 L1059.91 1212.93 L1059.33 1212.93 L1058.74 1212.93 L1058.15 1212.93 L1057.57 1212.93 L1056.98 1212.93 L1056.39 1212.93 L1055.81 1212.93 L1055.22 1212.93 L1054.64 1212.93 L1054.05 1212.93 L1053.46 1212.93 L1052.88 1212.93 L1052.29 1212.93 L1051.7 1212.93 L1051.12 1212.93 L1050.53 1212.93 L1049.94 1212.93 L1049.36 1212.93 L1048.77 1212.93 L1048.19 1212.93 L1047.6 1212.93 L1047.01 1212.93 L1046.43 1212.93 L1045.84 1212.93 L1045.25 1212.93 L1044.67 1212.93 L1044.08 1212.93 L1043.49 1212.93 L1042.91 1212.93 L1042.32 1212.93 L1041.73 1212.93 L1041.15 1212.93 L1040.56 1212.93 L1039.98 1212.93 L1039.39 1212.93 L1038.8 1212.93 L1038.22 1212.93 L1037.63 1212.93 L1037.04 1212.93 L1036.46 1212.93 L1035.87 1212.93 L1035.28 1212.93 L1034.7 1212.93 L1034.11 1212.93 L1033.52 1212.93 L1032.94 1212.93 L1032.35 1212.93 L1031.77 1212.93 L1031.18 1212.93 L1030.59 1212.93 L1030.01 1212.93 L1029.42 1212.93 L1028.83 1212.93 L1028.25 1212.93 L1027.66 1212.93 L1027.07 1212.93 L1026.49 1212.93 L1025.9 1212.93 L1025.32 1212.93 L1024.73 1212.93 L1024.14 1212.93 L1023.56 1212.93 L1022.97 1212.93 L1022.38 1212.93 L1021.8 1212.93 L1021.21 1212.93 L1020.62 1212.93 L1020.04 1212.93 L1019.45 1212.93 L1018.86 1212.93 L1018.28 1212.93 L1017.69 1212.93 L1017.11 1212.93 L1016.52 1212.93 L1015.93 1212.93 L1015.35 1212.93 L1014.76 1212.93 L1014.17 1212.93 L1013.59 1212.93 L1013 1212.93 L1012.41 1212.93 L1011.83 1212.93 L1011.24 1212.93 L1010.65 1212.93 L1010.07 1212.93 L1009.48 1212.93 L1008.9 1212.93 L1008.31 1212.93 L1007.72 1212.93 L1007.14 1212.93 L1006.55 1212.93 L1005.96 1212.93 L1005.38 1212.93 L1004.79 1212.93 L1004.2 1212.93 L1003.62 1212.93 L1003.03 1212.93 L1002.44 1212.93 L1001.86 1212.93 L1001.27 1212.93 L1000.69 1212.93 L1000.1 1212.93 L999.513 1212.93 L998.926 1212.93 L998.34 1212.93 L997.754 1212.93 L997.167 1212.93 L996.581 1212.93 L995.994 1212.93 L995.408 1212.93 L994.822 1212.93 L994.235 1212.93 L993.649 1212.93 L993.062 1212.93 L992.476 1212.93 L991.889 1212.93 L991.303 1212.93 L990.717 1212.93 L990.13 1212.93 L989.544 1212.93 L988.957 1212.93 L988.371 1212.93 L987.785 1212.93 L987.198 1212.93 L986.612 1212.93 L986.025 1212.93  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213 986.612,1213 987.198,1213 987.785,1213 988.371,1213 988.957,1213 989.544,1213 990.13,1213 990.717,1213 991.303,1213 991.889,1213 992.476,1213 993.062,1213 993.649,1213 994.235,1213 994.822,1213 995.408,1213 995.994,1213 996.581,1213 997.167,1213 997.754,1213 998.34,1213 998.926,1213 999.513,1213 1000.1,1213 1000.69,1213 1001.27,1213 1001.86,1213 1002.44,1213 1003.03,1213 1003.62,1213 1004.2,1213 1004.79,1213 1005.38,1213 1005.96,1213 1006.55,1213 1007.14,1213 1007.72,1213 1008.31,1213 1008.9,1213 1009.48,1213 1010.07,1213 1010.65,1213 1011.24,1213 1011.83,1213 1012.41,1213 1013,1213 1013.59,1213 1014.17,1213 1014.76,1213 1015.35,1213 1015.93,1213 1016.52,1213 1017.11,1213 1017.69,1213 1018.28,1213 1018.86,1213 1019.45,1213 1020.04,1213 1020.62,1213 1021.21,1213 1021.8,1213 1022.38,1213 1022.97,1213 1023.56,1213 1024.14,1213 1024.73,1213 1025.32,1213 1025.9,1213 1026.49,1213 1027.07,1213 1027.66,1213 1028.25,1213 1028.83,1213 1029.42,1213 1030.01,1213 1030.59,1213 1031.18,1213 1031.77,1213 1032.35,1213 1032.94,1213 1033.52,1213 1034.11,1213 1034.7,1213 1035.28,1213 1035.87,1213 1036.46,1213 1037.04,1213 1037.63,1213 1038.22,1213 1038.8,1213 1039.39,1213 1039.98,1213 1040.56,1213 1041.15,1213 1041.73,1213 1042.32,1213 1042.91,1213 1043.49,1213 1044.08,1213 1044.67,1213 1045.25,1213 1045.84,1213 1046.43,1213 1047.01,1213 1047.6,1213 1048.19,1213 1048.77,1213 1049.36,1213 1049.94,1213 1050.53,1213 1051.12,1213 1051.7,1213 1052.29,1213 1052.88,1213 1053.46,1213 1054.05,1213 1054.64,1213 1055.22,1213 1055.81,1213 1056.39,1213 1056.98,1213 1057.57,1213 1058.15,1213 1058.74,1213 1059.33,1213 1059.91,1213 1060.5,1213 1061.09,1213 1061.67,1213 1062.26,1213 1062.85,1213 1063.43,1213 1064.02,1213 1064.6,1213 1065.19,1213 1065.78,1213 1066.36,1213 1066.95,1213 1067.54,1213 1068.12,1213 1068.71,1213 1069.3,1213 1069.88,1213 1070.47,1213 1071.06,1213 1071.64,1213 1072.23,1213 1072.81,1213 1073.4,1213 1073.99,1213 1074.57,1213 1075.16,1213 1075.75,1213 1076.33,1213 1076.92,1213 1077.51,1213 1078.09,1213 1078.68,1213 1079.26,1213 1079.85,1213 1080.44,1213 1081.02,1213 1081.61,1213 1082.2,1213 1082.78,1213 1083.37,1213 1083.96,1213 1084.54,1213 1085.13,1213 1085.72,1213 1086.3,1213 1086.89,1213 1087.47,1213 1088.06,1213 1088.65,1213 1089.23,1213 1089.82,1213 1090.41,1213 1090.99,1213 1091.58,1213 1092.17,1213 1092.75,1213 1093.34,1213 1093.93,1213 1094.51,1213 1095.1,1213 1095.68,1213 1096.27,1213 1096.86,1213 1097.44,1213 1098.03,1213 1098.62,1213 1099.2,1213 1099.79,1213 1100.38,1213 1100.96,1213 1101.55,1213 1102.14,1213 1102.72,1213 1103.31,1213 1103.89,1213 1104.48,1213 1105.07,1213 1105.65,1213 1106.24,1213 1106.83,1213 1107.41,1213 1108,1213 1108.59,1213 1109.17,1213 1109.76,1213 1110.34,1213 1110.93,1213 1111.52,1213 1112.1,1213 1112.69,1213 1113.28,1213 1113.86,1213 1114.45,1213 1115.04,1213 1115.62,1213 1116.21,1213 1116.8,1213 1117.38,1213 1117.97,1213 1118.55,1213 1119.14,1213 1119.73,1213 1120.31,1213 1120.9,1213 1121.49,1213 1122.07,1213 1122.66,1213 1123.25,1213 1123.83,1213 1124.42,1213 1125.01,1213 1125.59,1213 1126.18,1213 1126.76,1213 1127.35,1213 1127.94,1213 1128.52,1213 1129.11,1213 1129.7,1213 1130.28,1213 1130.87,1213 1131.46,1213 1132.04,1213 1132.63,1213 1133.21,1213 1133.8,1213 1134.39,1213 1134.97,1213 1135.56,1213 1136.15,1213 1136.73,1213 1137.32,1213 1137.91,1213 1138.49,1213 1139.08,1213 1139.67,1213 1140.25,1213 1140.84,1213 1141.42,1213 1142.01,1213 1142.6,1213 1143.18,1213 1143.77,1213 1144.36,1213 1144.94,1213 1145.53,1213 1146.12,1213 1146.7,1213 1147.29,1213 1147.88,1213 1148.46,1213 1149.05,1213 1149.63,1213 1150.22,1213 1150.81,1213 1151.39,1213 1151.98,1213 1152.57,1213 1153.15,1213 1153.74,1213 1154.33,1213 1154.91,1213 1155.5,1213 1156.09,1213 1156.67,1213 1157.26,1213 1157.84,1213 1158.43,1213 1159.02,1213 1159.6,1213 1160.19,1213 1160.78,1213 1161.36,1213 1161.95,1213 1162.54,1213 1163.12,1213 1163.71,1213 1164.29,1213 1164.88,1213 1165.47,1213 1166.05,1213 1166.64,1213 1167.23,1213 1167.81,1213 1168.4,1213 1168.99,1213 1169.57,1213 1170.16,1213 1170.75,1213 1171.33,1213 1171.92,1213 1172.5,1213 1173.09,1213 1173.68,1213 1174.26,1213 1174.85,1213 1175.44,1213 1176.02,1213 1176.61,1213 1177.2,1213 1177.78,1213 1178.37,1213 1178.96,1213 1179.54,1213 1180.13,1213 1180.71,1213 1181.3,1213 1181.89,1213 1182.47,1213 1183.06,1213 1183.65,1213 1184.23,1213 1184.82,1213 1185.41,1213 1185.99,1213 1186.58,1213 1187.16,1213 1187.75,1213 1188.34,1213 1188.92,1213 1189.51,1213 1190.1,1213 1190.68,1213 1191.27,1213 1191.86,1213 1192.44,1213 1193.03,1213 1193.62,1213 1194.2,1213 1194.79,1213 1195.37,1213 1195.96,1213 1196.55,1213 1197.13,1213 1197.72,1213 1198.31,1213 1198.89,1213 1199.48,1213 1200.07,1213 1200.65,1213 1201.24,1213 1201.83,1213 1202.41,1213 1203,1213 1203.58,1213 1204.17,1213 1204.76,1213 1205.34,1213 1205.93,1213 1206.52,1213 1207.1,1213 1207.69,1213 1208.28,1213 1208.86,1213 1209.45,1213 1210.03,1213 1210.62,1213 1211.21,1213 1211.79,1213 1212.38,1213 1212.97,1213 1213.55,1213 1214.14,1213 1214.73,1213 1215.31,1213 1215.9,1213 1216.49,1213 1217.07,1213 1217.66,1213 1218.24,1213 1218.83,1213 1219.42,1213 1220,1213 1220.59,1213 1221.18,1213 1221.76,1213 1222.35,1213 1222.94,1213 1223.52,1213 1224.11,1213 1224.7,1213 1225.28,1213 1225.87,1213 1226.45,1213 1227.04,1213 1227.63,1213 1228.21,1213 1228.8,1213 1229.39,1213 1229.97,1213 1230.56,1213 1231.15,1213 1231.73,1213 1232.32,1213 1232.91,1213 1233.49,1213 1234.08,1213 1234.66,1213 1235.25,1213 1235.84,1213 1236.42,1213 1237.01,1213 1237.6,1213 1238.18,1213 1238.77,1213 1239.36,1213 1239.94,1213 1240.53,1213 1241.11,1213 1241.7,1213 1242.29,1213 1242.87,1213 1243.46,1213 1244.05,1213 1244.63,1213 1245.22,1213 1245.81,1213 1246.39,1213 1246.98,1213 1247.57,1213 1248.15,1213 1248.74,1213 1249.32,1213 1249.91,1213 1250.5,1213 1251.08,1213 1251.67,1213 1252.26,1213 1252.84,1213 1253.43,1213 1254.02,1213 1254.6,1213 1255.19,1213 1255.78,1213 1256.36,1213 1256.95,1213 1257.53,1213 1258.12,1213 1258.71,1213 1259.29,1213 1259.88,1213 1260.47,1213 1261.05,1213 1261.64,1213 1262.23,1213 1262.81,1213 1263.4,1213 1263.98,1213 1264.57,1213 1265.16,1213 1265.74,1213 1266.33,1213 1266.92,1213 1267.5,1213 1268.09,1213 1268.68,1213 1269.26,1213 1269.85,1213 1270.44,1213 1271.02,1213 1271.61,1213 1272.19,1213 1272.78,1213 1273.37,1213 1273.95,1213 1274.54,1213 1275.13,1213 1275.71,1213 1276.3,1213 1276.89,1213 1277.47,1213 1278.06,1213 1278.65,1213 1279.23,1213 1279.82,1213 1280.4,1213 1280.99,1213 1281.58,1213 1282.16,1213 1282.75,1213 1283.34,1213 1283.92,1213 1284.51,1213 1285.1,1213 1285.68,1213 1286.27,1213 1286.86,1213 1287.44,1213 1288.03,1213 1288.61,1213 1289.2,1213 1289.79,1213 1290.37,1213 1290.96,1213 1291.55,1213 1292.13,1213 1292.72,1213 1293.31,1213 1293.89,1213 1294.48,1213 1295.06,1213 1295.65,1213 1296.24,1213 1296.82,1213 1297.41,1213 1298,1213 1298.58,1213 1299.17,1213 1299.76,1213 1300.34,1213 1300.93,1213 1301.52,1213 1302.1,1213 1302.69,1213 1303.27,1213 1303.86,1213 1304.45,1213 1305.03,1213 1305.62,1213 1306.21,1213 1306.79,1213 1307.38,1213 1307.97,1213 1308.55,1213 1309.14,1213 1309.73,1213 1310.31,1213 1310.9,1213 1311.48,1213 1312.07,1213 1312.66,1213 1313.24,1213 1313.83,1213 1314.42,1213 1315,1213 1315.59,1213 1316.18,1213 1316.76,1213 1317.35,1213 1317.93,1213 1318.52,1213 1319.11,1213 1319.69,1213 1320.28,1213 1320.87,1213 1321.45,1213 1322.04,1213 1322.63,1213 1323.21,1213 1323.8,1213 1324.39,1213 1324.97,1213 1325.56,1213 1326.14,1213 1326.73,1213 1327.32,1213 1327.9,1213 1328.49,1213 1329.08,1213 1329.66,1213 1330.25,1213 1330.84,1213 1331.42,1213 1332.01,1213 1332.6,1213 1333.18,1213 1333.77,1213 1334.35,1213 1334.94,1213 1335.53,1213 1336.11,1213 1336.7,1213 1337.29,1213 1337.87,1213 1338.46,1213 1339.05,1213 1339.63,1213 1340.22,1213 1340.8,1213 1341.39,1213 1341.98,1213 1342.56,1213 1343.15,1213 1343.74,1213 1344.32,1213 1344.91,1213 1345.5,1213 1346.08,1213 1346.67,1213 1347.26,1213 1347.84,1213 1348.43,1213 1349.01,1213 1349.6,1213 1350.19,1213 1350.77,1213 1351.36,1213 1351.95,1213 1352.53,1213 1353.12,1213 1353.71,1213 1354.29,1213 1354.88,1213 1355.47,1213 1356.05,1213 1356.64,1213 1357.22,1213 1357.81,1213 1358.4,1213 1358.98,1213 1359.57,1213 1360.16,1213 1360.74,1213 1361.33,1213 1361.92,1213 1362.5,1213 1363.09,1213 1363.68,1213 1364.26,1213 1364.85,1213 1365.43,1213 1366.02,1213 1366.61,1213 1367.19,1213 1367.78,1213 1368.37,1213 1368.95,1213 1369.54,1213 1370.13,1213 1370.71,1213 1371.3,1213 1371.88,1213 1372.47,1213 1373.06,1213 1373.64,1213 1374.23,1213 1374.82,1213 1375.4,1213 1375.99,1213 1376.58,1213 1377.16,1213 1377.75,1213 1378.34,1213 1378.92,1213 1379.51,1213 1380.09,1213 1380.68,1213 1381.27,1213 1381.85,1213 1382.44,1213 1383.03,1213 1383.61,1213 1384.2,1213 1384.79,1213 1385.37,1213 1385.96,1213 1386.55,1213 1387.13,1213 1387.72,1213 1388.3,1213 1388.89,1213 1389.48,1213 1390.06,1213 1390.65,1213 1391.24,1213 1391.82,1213 1392.41,1213 1393,1213 1393.58,1213 1394.17,1213 1394.75,1213 1395.34,1213 1395.93,1213 1396.51,1213 1397.1,1213 1397.69,1213 1398.27,1213 1398.86,1213 1399.45,1213 1400.03,1213 1400.62,1213 1401.21,1213 1401.79,1213 1402.38,1213 1402.96,1213 1403.55,1213 1404.14,1213 1404.72,1213 1405.31,1213 1405.9,1213 1406.48,1213 1407.07,1213 1407.66,1213 1408.24,1213 1408.83,1213 1409.42,1213 1410,1213 1410.59,1213 1411.17,1213 1411.76,1213 1412.35,1213 1412.93,1213 1413.52,1213 1414.11,1213 1414.69,1213 1415.28,1213 1415.87,1213 1416.45,1213 1417.04,1213 1417.63,1213 1418.21,1213 1418.8,1213 1419.38,1213 1419.97,1213 1420.56,1213 1421.14,1213 1421.73,1213 1422.32,1213 1422.9,1213 1423.49,1213 1424.08,1213 1424.66,1213 1425.25,1213 1425.83,1213 1426.42,1213 1427.01,1213 1427.59,1213 1428.18,1213 1428.77,1213 1429.35,1213 1429.94,1213 1430.53,1213 1431.11,1213 1431.7,1213 1432.29,1213 1432.87,1213 1433.46,1213 1434.04,1213 1434.63,1213 1435.22,1213 1435.8,1213 1436.39,1213 1436.98,1213 1437.56,1213 1438.15,1213 1438.74,1213 1439.32,1213 1439.91,1213 1440.5,1213 1441.08,1213 1441.67,1213 1442.25,1213 1442.84,1213 1443.43,1213 1444.01,1213 1444.6,1213 1445.19,1213 1445.77,1213 1446.36,1213 1446.95,1213 1447.53,1213 1448.12,1213 1448.7,1213 1449.29,1213 1449.88,1213 1450.46,1213 1451.05,1213 1451.64,1213 1452.22,1213 1452.81,1213 1453.4,1213 1453.98,1213 1454.57,1213 1455.16,1213 1455.74,1213 1456.33,1213 1456.91,1213 1457.5,1213 1458.09,1213 1458.67,1213 1459.26,1213 1459.85,1213 1460.43,1213 1461.02,1213 1461.61,1213 1462.19,1213 1462.78,1213 1463.37,1213 1463.95,1213 1464.54,1213 1465.12,1213 1465.71,1213 1466.3,1213 1466.88,1213 1467.47,1213 1468.06,1213 1468.64,1213 1469.23,1213 1469.82,1213 1470.4,1213 1470.99,1213 1471.57,1213 1472.16,1213 1472.75,1213 1473.33,1213 1473.92,1213 1474.51,1213 1475.09,1213 1475.68,1213 1476.27,1213 1476.85,1213 1477.44,1213 1478.03,1213 1478.61,1213 1479.2,1213 1479.78,1213 1480.37,1213 1480.96,1213 1481.54,1213 1482.13,1213 1482.72,1213 1483.3,1213 1483.89,1213 1484.48,1213 1485.06,1213 1485.65,1213 1486.24,1213 1486.82,1213 1487.41,1213 1487.99,1213 1488.58,1213 1489.17,1213 1489.75,1213 1490.34,1213 1490.93,1213 1491.51,1213 1492.1,1213 1492.69,1213 1493.27,1213 1493.86,1213 1494.45,1213 1495.03,1213 1495.62,1213 1496.2,1213 1496.79,1213 1497.38,1213 1497.96,1213 1498.55,1213 1499.14,1213 1499.72,1213 1500.31,1213 1500.9,1213 1501.48,1213 1502.07,1213 1502.65,1213 1503.24,1213 1503.83,1213 1504.41,1213 1505,1213 1505.59,1213 1506.17,1213 1506.76,1213 1507.35,1213 1507.93,1213 1508.52,1213 1509.11,1213 1509.69,1213 1510.28,1213 1510.86,1213 1511.45,1213 1512.04,1213 1512.62,1213 1513.21,1213 1513.8,1213 1514.38,1213 1514.97,1213 1515.56,1213 1516.14,1213 1516.73,1213 1517.32,1213 1517.9,1213 1518.49,1213 1519.07,1213 1519.66,1213 1520.25,1213 1520.83,1213 1521.42,1213 1522.01,1213 1522.59,1213 1523.18,1213 1523.77,1213 1524.35,1213 1524.94,1213 1525.52,1213 1526.11,1213 1526.7,1213 1527.28,1213 1527.87,1213 1528.46,1213 1529.04,1213 1529.63,1213 1530.22,1213 1530.8,1213 1531.39,1213 1531.98,1213 1532.56,1213 1533.15,1213 1533.73,1213 1534.32,1213 1534.91,1213 1535.49,1213 1536.08,1213 1536.67,1213 1537.25,1213 1537.84,1213 1538.43,1213 1539.01,1213 1539.6,1213 1540.19,1213 1540.77,1213 1541.36,1213 1541.94,1213 1542.53,1213 1543.12,1213 1543.7,1213 1544.29,1213 1544.88,1213 1545.46,1213 1546.05,1213 1546.64,1213 1547.22,1213 1547.81,1213 1548.4,1213 1548.98,1213 1549.57,1213 1550.15,1213 1550.74,1213 1551.33,1213 1551.91,1213 1552.5,1213 1553.09,1213 1553.67,1213 1554.26,1213 1554.85,1213 1555.43,1213 1556.02,1213 1556.6,1213 1557.19,1213 1557.78,1213 1558.36,1213 1558.95,1213 1559.54,1213 1560.12,1213 1560.71,1213 1561.3,1213 1561.88,1213 1562.47,1213 1563.06,1213 1563.64,1213 1564.23,1213 1564.81,1213 1565.4,1213 1565.99,1213 1566.57,1213 1567.16,1213 1567.75,1213 1568.33,1213 1568.92,1213 1569.51,1213 1570.09,1213 1570.68,1213 1571.27,1213 1571.85,1213 1572.44,1213 1573.02,1213 1573.61,1213 1574.2,1213 1574.78,1213 1575.37,1213 1575.96,1213 1576.54,1213 1577.13,1213 1577.72,1213 1578.3,1213 1578.89,1213 1579.47,1213 1580.06,1213 1580.65,1213 1581.23,1213 1581.82,1213 1582.41,1213 1582.99,1213 1583.58,1213 1584.17,1213 1584.75,1213 1585.34,1213 1585.93,1213 1586.51,1213 1587.1,1213 1587.68,1213 1588.27,1213 1588.86,1213 1589.44,1213 1590.03,1213 1590.62,1213 1591.2,1213 1591.79,1213 1592.38,1213 1592.96,1213 1593.55,1213 1594.14,1213 1594.72,1213 1595.31,1213 1595.89,1213 1596.48,1213 1597.07,1213 1597.65,1213 1598.24,1213 1598.83,1213 1599.41,1213 1600,1213 1600.59,1213 1601.17,1213 1601.76,1213 1602.34,1213 1602.93,1213 1603.52,1213 1604.1,1213 1604.69,1213 1605.28,1213 1605.86,1213 1606.45,1213 1607.04,1213 1607.62,1213 1608.21,1213 1608.8,1213 1609.38,1213 1609.97,1213 1610.55,1213 1611.14,1213 1611.73,1213 1612.31,1213 1612.9,1213 1613.49,1213 1614.07,1213 1614.66,1213 1615.25,1213 1615.83,1213 1616.42,1213 1617.01,1213 1617.59,1213 1618.18,1213 1618.76,1213 1619.35,1213 1619.94,1213 1620.52,1213 1621.11,1213 1621.7,1213 1622.28,1213 1622.87,1213 1623.46,1213 1624.04,1213 1624.63,1213 1625.22,1213 1625.8,1213 1626.39,1213 1626.97,1213 1627.56,1213 1628.15,1213 1628.73,1213 1629.32,1213 1629.91,1213 1630.49,1213 1631.08,1213 1631.67,1213 1632.25,1213 1632.84,1213 1633.42,1213 1634.01,1213 1634.6,1213 1635.18,1213 1635.77,1213 1636.36,1213 1636.94,1213 1637.53,1213 1638.12,1213 1638.7,1213 1639.29,1213 1639.88,1213 1640.46,1213 1641.05,1213 1641.63,1213 1642.22,1213 1642.81,1213 1643.39,1213 1643.98,1213 1644.57,1213 1645.15,1213 1645.74,1213 1646.33,1213 1646.91,1213 1647.5,1213 1648.09,1213 1648.67,1213 1649.26,1213 1649.84,1213 1650.43,1213 1651.02,1213 1651.6,1213 1652.19,1213 1652.78,1213 1653.36,1213 1653.95,1213 1654.54,1213 1655.12,1213 1655.71,1213 1656.29,1213 1656.88,1213 1657.47,1213 1658.05,1213 1658.64,1213 1659.23,1213 1659.81,1213 1660.4,1213 1660.99,1213 1661.57,1213 1662.16,1213 1662.75,1213 1663.33,1213 1663.92,1213 1664.5,1213 1665.09,1213 1665.68,1213 1666.26,1213 1666.85,1213 1667.44,1213 1668.02,1213 1668.61,1213 1669.2,1213 1669.78,1213 1670.37,1213 1670.96,1213 1671.54,1213 1672.13,1213 1672.71,1213 1673.3,1213 1673.89,1213 1674.47,1213 1675.06,1213 1675.65,1213 1676.23,1213 1676.82,1213 1677.41,1213 1677.99,1213 1678.58,1213 1679.17,1213 1679.75,1213 1680.34,1213 1680.92,1213 1681.51,1213 1682.1,1213 1682.68,1213 1683.27,1213 1683.86,1213 1684.44,1213 1685.03,1213 1685.62,1213 1686.2,1213 1686.79,1213 1687.37,1213 1687.96,1213 1688.55,1213 1689.13,1213 1689.72,1213 1690.31,1213 1690.89,1213 1691.48,1213 1692.07,1213 1692.65,1213 1693.24,1213 1693.83,1213 1694.41,1213 1695,1213 1695.58,1213 1696.17,1213 1696.76,1213 1697.34,1213 1697.93,1213 1698.52,1213 1699.1,1213 1699.69,1213 1700.28,1213 1700.86,1213 1701.45,1213 1702.04,1213 1702.62,1213 1703.21,1213 1703.79,1213 1704.38,1213 1704.97,1213 1705.55,1213 1706.14,1213 1706.73,1213 1707.31,1213 1707.9,1213 1708.49,1213 1709.07,1213 1709.66,1213 1710.24,1213 1710.83,1213 1711.42,1213 1712,1213 1712.59,1213 1713.18,1213 1713.76,1213 1714.35,1213 1714.94,1213 1715.52,1213 1716.11,1213 1716.7,1213 1717.28,1213 1717.87,1213 1718.45,1213 1719.04,1213 1719.63,1213 1720.21,1213 1720.8,1213 1721.39,1213 1721.97,1213 1722.56,1213 1723.15,1213 1723.73,1213 1724.32,1213 1724.91,1213 1725.49,1213 1726.08,1213 1726.66,1213 1727.25,1213 1727.84,1213 1728.42,1213 1729.01,1213 1729.6,1213 1730.18,1213 1730.77,1213 1731.36,1213 1731.94,1213 1732.53,1213 1733.11,1213 1733.7,1213 1734.29,1213 1734.87,1213 1735.46,1213 1736.05,1213 1736.63,1213 1737.22,1213 1737.81,1213 1738.39,1213 1738.98,1213 1739.57,1213 1740.15,1213 1740.74,1213 1741.32,1213 1741.91,1213 1742.5,1213 1743.08,1213 1743.67,1213 1744.26,1213 1744.84,1213 1745.43,1213 1746.02,1213 1746.6,1213 1747.19,1213 1747.78,1213 1748.36,1213 1748.95,1213 1749.53,1213 1750.12,1213 1750.71,1213 1751.29,1213 1751.88,1213 1752.47,1213 1753.05,1213 1753.64,1213 1754.23,1213 1754.81,1213 1755.4,1213 1755.99,1213 1756.57,1213 1757.16,1213 1757.74,1213 1758.33,1213 1758.92,1213 1759.5,1213 1760.09,1213 1760.68,1213 1761.26,1213 1761.85,1213 1762.44,1213 1763.02,1213 1763.61,1213 1764.19,1213 1764.78,1213 1765.37,1213 1765.95,1213 1766.54,1213 1767.13,1213 1767.71,1213 1768.3,1213 1768.89,1213 1769.47,1213 1770.06,1213 1770.65,1213 1771.23,1213 1771.82,1213 1772.4,1213 1772.99,1213 1773.58,1213 1774.16,1213 1774.75,1213 1775.34,1213 1775.92,1213 1776.51,1213 1777.1,1213 1777.68,1213 1778.27,1213 1778.86,1213 1779.44,1213 1780.03,1213 1780.61,1213 1781.2,1213 1781.79,1213 1782.37,1213 1782.96,1213 1783.55,1213 1784.13,1213 1784.72,1213 1785.31,1213 1785.89,1213 1786.48,1213 1787.06,1213 1787.65,1213 1788.24,1213 1788.82,1213 1789.41,1213 1790,1213 1790.58,1213 1791.17,1213 1791.76,1213 1792.34,1213 1792.93,1213 1793.52,1213 1794.1,1213 1794.69,1213 1795.27,1213 1795.86,1213 1796.45,1213 1797.03,1213 1797.62,1213 1798.21,1213 1798.79,1213 1799.38,1213 1799.97,1213 1800.55,1213 1801.14,1213 1801.73,1213 1802.31,1213 1802.9,1213 1803.48,1213 1804.07,1213 1804.66,1213 1805.24,1213 1805.83,1213 1806.42,1213 1807,1213 1807.59,1213 1808.18,1213 1808.76,1213 1809.35,1213 1809.94,1213 1810.52,1213 1811.11,1213 1811.69,1213 1812.28,1213 1812.87,1213 1813.45,1213 1814.04,1213 1814.63,1213 1815.21,1213 1815.8,1213 1816.39,1213 1816.97,1213 1817.56,1213 1818.14,1213 1818.73,1213 1819.32,1213 1819.9,1213 1820.49,1213 1821.08,1213 1821.66,1213 1822.25,1213 1822.84,1213 1823.42,1213 1824.01,1213 1824.6,1213 1825.18,1213 1825.77,1213 1826.35,1213 1826.94,1213 1827.53,1213 1828.11,1213 1828.7,1213 1829.29,1213 1829.87,1213 1830.46,1213 1831.05,1213 1831.63,1213 1832.22,1213 1832.81,1213 1833.39,1213 1833.98,1213 1834.56,1213 1835.15,1213 1835.74,1213 1836.32,1213 1836.91,1213 1837.5,1213 1838.08,1213 1838.67,1213 1839.26,1213 1839.84,1213 1840.43,1213 1841.01,1213 1841.6,1213 1842.19,1213 1842.77,1213 1843.36,1213 1843.95,1213 1844.53,1213 1845.12,1213 1845.71,1213 1846.29,1213 1846.88,1213 1847.47,1213 1848.05,1213 1848.64,1213 1849.22,1213 1849.81,1213 1850.4,1213 1850.98,1213 1851.57,1213 1852.16,1213 1852.74,1213 1853.33,1213 1853.92,1213 1854.5,1213 1855.09,1213 1855.68,1213 1856.26,1213 1856.85,1213 1857.43,1213 1858.02,1213 1858.61,1213 1859.19,1213 1859.78,1213 1860.37,1213 1860.95,1213 1861.54,1213 1862.13,1213 1862.71,1213 1863.3,1213 1863.88,1213 1864.47,1213 1865.06,1213 1865.64,1213 1866.23,1213 1866.82,1213 1867.4,1213 1867.99,1213 1868.58,1213 1869.16,1213 1869.75,1213 1870.34,1213 1870.92,1213 1871.51,1213 1872.09,1213 1872.68,1213 1873.27,1213 1873.85,1213 1874.44,1213 1875.03,1213 1875.61,1213 1876.2,1213 1876.79,1213 1877.37,1213 1877.96,1213 1878.55,1213 1879.13,1213 1879.72,1213 1880.3,1213 1880.89,1213 1881.48,1213 1882.06,1213 1882.65,1213 1883.24,1213 1883.82,1213 1884.41,1213 1885,1213 1885.58,1213 1886.17,1213 1886.76,1213 1887.34,1213 1887.93,1213 1888.51,1213 1889.1,1213 1889.69,1213 1890.27,1213 1890.86,1213 1891.45,1213 1892.03,1213 1892.62,1213 1893.21,1213 1893.79,1213 1894.38,1213 1894.96,1213 1895.55,1213 1896.14,1213 1896.72,1213 1897.31,1213 1897.9,1213 1898.48,1213 1899.07,1213 1899.66,1213 1900.24,1213 1900.83,1213 1901.42,1213 1902,1213 1902.59,1213 1903.17,1213 1903.76,1213 1904.35,1213 1904.93,1213 1905.52,1213 1906.11,1213 1906.69,1213 1907.28,1213 1907.87,1213 1908.45,1213 1909.04,1213 1909.63,1213 1910.21,1213 1910.8,1213 1911.38,1213 1911.97,1213 1912.56,1213 1913.14,1213 1913.73,1213 1914.32,1213 1914.9,1213 1915.49,1213 1916.08,1213 1916.66,1213 1917.25,1213 1917.83,1213 1918.42,1213 1919.01,1213 1919.59,1213 1920.18,1213 1920.77,1213 1921.35,1213 1921.94,1213 1922.53,1213 1923.11,1213 1923.7,1213 1924.29,1213 1924.87,1213 1925.46,1213 1926.04,1213 1926.63,1213 1927.22,1213 1927.8,1213 1928.39,1213 1928.98,1213 1929.56,1213 1930.15,1213 1930.74,1213 1931.32,1213 1931.91,1213 1932.5,1213 1933.08,1213 1933.67,1213 1934.25,1213 1934.84,1213 1935.43,1213 1936.01,1213 1936.6,1213 1937.19,1213 1937.77,1213 1938.36,1213 1938.95,1213 1939.53,1213 1940.12,1213 1940.71,1213 1941.29,1213 1941.88,1213 1942.46,1213 1943.05,1213 1943.64,1213 1944.22,1213 1944.81,1213 1945.4,1213 1945.98,1213 1946.57,1213 1947.16,1213 1947.74,1213 1948.33,1213 1948.91,1213 1949.5,1213 1950.09,1213 1950.67,1213 1951.26,1213 1951.85,1213 1952.43,1213 1953.02,1213 1953.61,1213 1954.19,1213 1954.78,1213 1955.37,1213 1955.95,1213 1956.54,1213 1957.12,1213 1957.71,1213 1958.3,1213 1958.88,1213 1959.47,1213 1960.06,1213 1960.64,1213 1961.23,1213 1961.82,1213 1962.4,1213 1962.99,1213 1963.58,1213 1964.16,1213 1964.75,1213 1965.33,1213 1965.92,1213 1966.51,1213 1967.09,1213 1967.68,1213 1968.27,1213 1968.85,1213 1969.44,1213 1970.03,1213 1970.61,1213 1971.2,1213 1971.78,1213 1972.37,1213 1972.96,1213 1973.54,1213 1974.13,1213 1974.72,1213 1975.3,1213 1975.89,1213 1976.48,1213 1977.06,1213 1977.65,1213 1978.24,1213 1978.82,1213 1979.41,1213 1979.99,1213 1980.58,1213 1981.17,1213 1981.75,1213 1982.34,1213 1982.93,1213 1983.51,1213 1984.1,1213 1984.69,1213 1985.27,1213 1985.86,1213 1986.45,1213 1987.03,1213 1987.62,1213 1988.2,1213 1988.79,1213 1989.38,1213 1989.96,1213 1990.55,1213 1991.14,1213 1991.72,1213 1992.31,1213 1992.9,1213 1993.48,1213 1994.07,1213 1994.65,1213 1995.24,1213 1995.83,1213 1996.41,1213 1997,1213 1997.59,1213 1998.17,1213 1998.76,1213 1999.35,1213 1999.93,1213 2000.52,1213 2001.11,1213 2001.69,1213 2002.28,1213 2002.86,1213 2003.45,1213 2004.04,1213 2004.62,1213 2005.21,1213 2005.8,1213 2006.38,1213 2006.97,1213 2007.56,1213 2008.14,1213 2008.73,1213 2009.32,1213 2009.9,1213 2010.49,1213 2011.07,1213 2011.66,1213 2012.25,1213 2012.83,1213 2013.42,1213 2014.01,1213 2014.59,1213 2015.18,1213 2015.77,1213 2016.35,1213 2016.94,1213 2017.53,1213 2018.11,1213 2018.7,1213 2019.28,1213 2019.87,1213 2020.46,1213 2021.04,1213 2021.63,1213 2022.22,1213 2022.8,1213 2023.39,1213 2023.98,1213 2024.56,1213 2025.15,1213 2025.73,1213 2026.32,1213 2026.91,1213 2027.49,1213 2028.08,1213 2028.67,1213 2029.25,1213 2029.84,1213 2030.43,1213 2031.01,1213 2031.6,1213 2032.19,1213 2032.77,1213 2033.36,1213 2033.94,1213 2034.53,1213 2035.12,1213 2035.7,1213 2036.29,1213 2036.88,1213 2037.46,1213 2038.05,1213 2038.64,1213 2039.22,1213 2039.81,1213 2040.4,1213 2040.98,1213 2041.57,1213 2042.15,1213 2042.74,1213 2043.33,1213 2043.91,1213 2044.5,1213 2045.09,1213 2045.67,1213 2046.26,1213 2046.85,1213 2047.43,1213 2048.02,1213 2048.6,1213 2049.19,1213 2049.78,1213 2050.36,1213 2050.95,1213 2051.54,1213 2052.12,1213 2052.71,1213 2053.3,1213 2053.88,1213 2054.47,1213 2055.06,1213 2055.64,1213 2056.23,1213 2056.81,1213 2057.4,1213 2057.99,1213 2058.57,1213 2059.16,1213 2059.75,1213 2060.33,1213 2060.92,1213 2061.51,1213 2062.09,1213 2062.68,1213 2063.27,1213 2063.85,1213 2064.44,1213 2065.02,1213 2065.61,1213 2066.2,1213 2066.78,1213 2067.37,1213 2067.96,1213 2068.54,1213 2069.13,1213 2069.72,1213 2070.3,1213 2070.89,1213 2071.48,1213 2072.06,1213 2072.65,1213 2073.23,1213 2073.82,1213 2074.41,1213 2074.99,1213 2075.58,1213 2076.17,1213 2076.75,1213 2077.34,1213 2077.93,1213 2078.51,1213 2079.1,1213 2079.68,1213 2080.27,1213 2080.86,1213 2081.44,1213 2082.03,1213 2082.62,1213 2083.2,1213 2083.79,1213 2084.38,1213 2084.96,1213 2085.55,1213 2086.14,1213 2086.72,1213 2087.31,1213 2087.89,1213 2088.48,1213 2089.07,1213 2089.65,1213 2090.24,1213 2090.83,1213 2091.41,1213 2092,1213 2092.59,1213 2093.17,1213 2093.76,1213 2094.35,1213 2094.93,1213 2095.52,1213 2096.1,1213 2096.69,1213 2097.28,1213 2097.86,1213 2098.45,1213 2099.04,1213 2099.62,1213 2100.21,1213 2100.8,1213 2101.38,1213 2101.97,1213 2102.55,1213 2103.14,1213 2103.73,1213 2104.31,1213 2104.9,1213 2105.49,1213 2106.07,1213 2106.66,1213 2107.25,1213 2107.83,1213 2108.42,1213 2109.01,1213 2109.59,1213 2110.18,1213 2110.76,1213 2111.35,1213 2111.94,1213 2112.52,1213 2113.11,1213 2113.7,1213 2114.28,1213 2114.87,1213 2115.46,1213 2116.04,1213 2116.63,1213 2117.22,1213 2117.8,1213 2118.39,1213 2118.97,1213 2119.56,1213 2120.15,1213 2120.73,1213 2121.32,1213 2121.91,1213 2122.49,1213 2123.08,1213 2123.67,1213 2124.25,1213 2124.84,1213 2125.42,1213 2126.01,1213 2126.6,1213 2127.18,1213 2127.77,1213 2128.36,1213 2128.94,1213 2129.53,1213 2130.12,1213 2130.7,1213 2131.29,1213 2131.88,1213 2132.46,1213 2133.05,1213 2133.63,1213 2134.22,1213 2134.81,1213 2135.39,1213 2135.98,1213 2136.57,1213 2137.15,1213 2137.74,1213 2138.33,1213 2138.91,1213 2139.5,1213 2140.09,1213 2140.67,1213 2141.26,1213 2141.84,1213 2142.43,1213 2143.02,1213 2143.6,1213 2144.19,1213 2144.78,1213 2145.36,1213 2145.95,1213 2146.54,1213 2147.12,1213 2147.71,1213 2148.3,1213 2148.88,1213 2149.47,1213 2150.05,1213 2150.64,1213 2151.23,1213 2151.81,1213 2152.4,1213 2152.99,1213 2153.57,1213 2154.16,1213 2154.75,1213 2155.33,1213 2155.92,1213 2156.5,1213 2157.09,1213 2157.68,1213 2158.26,1213 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.03,1196.79 1399.19,899.083 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.83 985.439,1196.79 2158.26,1196.79 2158.26,1228.83 985.439,1228.83 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip133\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip133)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-12195.6 168.825,-12550.4 169.384,-12859.3 169.943,-12307.6 170.503,-11830.5 171.062,-12075.2 171.621,-12282.5 172.18,-12454.9 172.74,-12032.2 173.299,-12159.3 173.858,-11784 174.417,-11868.4 174.977,-11121.5 175.536,-10800.3 176.095,-10515 176.655,-10257.8 177.214,-10296.7 177.773,-10311 178.332,-10052.9 178.892,-10032.3 179.451,-9541.08 180.01,-9510.34 180.569,-9465.65 181.129,-9407.11 181.688,-9333.34 182.247,-9260.25 182.806,-9009.83 183.366,-8777.75 183.925,-8679.98 184.484,-8586.24 185.043,-8473.46 185.603,-8236.89 186.162,-8116.55 186.721,-7985.51 187.28,-7753.95 187.84,-7634.5 188.399,-7407.28 188.958,-7279.44 189.517,-7157.75 190.077,-7024.63 190.636,-6805.27 191.195,-6659.71 191.754,-6439.47 192.314,-6299.19 192.873,-6021.58 193.432,-5820.94 193.991,-5502.35 194.551,-5392.35 195.11,-5095.96 195.669,-4990.31 196.228,-4828.43 196.788,-4720.74 197.347,-4560.35 197.906,-4304.42 198.465,-4143.86 199.025,-4034.79 199.584,-3883.4 200.143,-3733.07 200.702,-3548.6 201.262,-3407.37 201.821,-3229.18 202.38,-3096.34 202.939,-3006.55 203.499,-2881.77 204.058,-2723.78 204.617,-2572.28 205.176,-2390.46 205.736,-2251.72 206.295,-2182.64 206.854,-2049.2 207.413,-1919.01 207.973,-1824.14 208.532,-1699.86 209.091,-1612.89 209.65,-1527.37 210.21,-1472.45 210.769,-1362.37 211.328,-1198.12 211.887,-1044.25 212.447,-980.021 213.006,-917.208 213.565,-850.084 214.124,-785.295 214.684,-648.226 215.243,-566.435 215.802,-490.855 216.361,-437.436 216.921,-338.209 217.48,-288.718 218.039,-289.766 218.598,-216.941 219.158,-199.364 219.717,-173.669 220.276,-130.107 220.835,-60.9992 221.395,-18.0198 221.954,64.9808 222.513,103.666 223.072,117.648 223.632,156.783 224.191,192.626 224.75,227.155 225.309,238.579 225.869,312.719 226.428,322.022 226.987,415.499 227.546,440.606 228.106,444.156 228.665,472.639 229.224,475.392 229.783,482.442 230.343,486.881 230.902,535.85 231.461,582.75 232.02,645.173 232.58,644.192 233.139,681.98 233.698,681.96 234.257,684.561 234.817,664.54 235.376,667.292 235.935,707.937 236.494,710.377 237.054,709.918 237.613,732.01 238.172,771.779 238.731,810.97 239.291,826.606 239.85,824.561 240.409,820.702 240.968,871.976 241.528,867.255 242.087,898.636 242.646,912.821 243.205,922.371 243.765,901.473 244.324,900.075 244.883,900.143 245.442,930.051 246.002,993.238 246.561,1022.14 247.12,1069.28 247.679,1112.84 248.239,1100.1 248.798,1105.45 249.357,1126.9 249.916,1129.78 250.476,1134.36 251.035,1136.18 251.594,1158.79 252.153,1161.11 252.713,1161.99 253.272,1165.18 253.831,1134.65 254.39,1194.93 254.95,1162.86 255.509,1150.24 256.068,1139.3 256.627,1158.12 257.187,1177.16 257.746,1180.54 258.305,1165.47 258.864,1186.05 259.424,1170.84 259.983,1139.96 260.542,1113.15 261.101,1117.82 261.661,1107.51 262.22,1098.31 262.779,1141.33 263.338,1113.89 263.898,1090.06 264.457,1099.18 265.016,1072.22 265.575,1097.34 266.135,1107.14 266.694,1112.22 267.253,1086.96 267.812,1078.9 268.372,1052.82 268.931,1047.38 269.49,1027.11 270.049,1023.31 270.609,1069.73 271.168,1081.39 271.727,1092.09 272.286,1099.69 272.846,1073.24 273.405,1051.26 273.964,1029.13 274.523,1042.52 275.083,1056.27 275.642,1036.01 276.201,1033.11 276.76,1009.57 277.32,1008 277.879,1023.41 278.438,1019.32 278.997,1049.36 279.557,1046.21 280.116,1026.29 280.675,1026.19 281.234,1042.31 281.794,1053.87 282.353,1034.45 282.912,997.235 283.471,1012.56 284.031,1021.25 284.59,1034.51 285.149,1029.65 285.708,1023.35 286.268,1021.07 286.827,1049.08 287.386,1124.22 287.945,1133.11 288.505,1125.33 289.064,1097.55 289.623,1120.09 290.182,1080.42 290.742,1061.08 291.301,1074.23 291.86,1101.08 292.419,1094.41 292.979,1103.87 293.538,1110.22 294.097,1132.75 294.656,1127.02 295.216,1181.99 295.775,1186.07 296.334,1172.23 296.893,1146.48 297.453,1133.5 298.012,1155.31 298.571,1129.45 299.13,1118.56 299.69,1094.95 300.249,1117.44 300.808,1109.1 301.368,1084.78 301.927,1042.49 302.486,1034.28 303.045,1027.3 303.605,1039.79 304.164,1052.95 304.723,1061.96 305.282,1057.79 305.842,1032.62 306.401,1025.37 306.96,1051.91 307.519,1043.63 308.079,1017.68 308.638,1046.06 309.197,1054.93 309.756,1079.27 310.316,1069.59 310.875,1077.27 311.434,1100.05 311.993,1090.86 312.553,1080.18 313.112,1083.84 313.671,1056.4 314.23,1016.66 314.79,1046.21 315.349,1022.94 315.908,1017.07 316.467,1010.64 317.027,985.2 317.586,963.368 318.145,960.66 318.704,922.069 319.264,953.45 319.823,963.233 320.382,974.754 320.941,970.163 321.501,979.409 322.06,958.146 322.619,954.137 323.178,984.092 323.738,995.096 324.297,985.416 324.856,969.58 325.415,949.482 325.975,964.022 326.534,957.718 327.093,971.778 327.652,952.977 328.212,947.266 328.771,958.675 329.33,955.123 329.889,932.542 330.449,914.702 331.008,895.902 331.567,898.251 332.126,916.282 332.686,943.74 333.245,925.181 333.804,937.615 334.363,935.96 334.923,995.232 335.482,1002.31 336.041,1012.35 336.6,1005.78 337.16,997.674 337.719,991.009 338.278,982.911 338.837,979.521 339.397,1005.47 339.956,967.264 340.515,941.498 341.074,1014.79 341.634,989.442 342.193,983.766 342.752,961.002 343.311,933.212 343.871,946.141 344.43,943.094 344.989,938.072 345.548,949.072 346.108,914.101 346.667,972.836 347.226,946.127 347.785,938.144 348.345,913.882 348.904,925.298 349.463,937.647 350.022,895.964 350.582,912.619 351.141,938.129 351.7,948.736 352.259,928.06 352.819,939.583 353.378,933.346 353.937,930.525 354.496,912.365 355.056,925.952 355.615,938.928 356.174,933.533 356.733,930.778 357.293,906.864 357.852,917.87 358.411,914.596 358.97,894.875 359.53,907.678 360.089,936.195 360.648,929.502 361.207,939.279 361.767,955.937 362.326,965.429 362.885,957.766 363.444,954.72 364.004,947.888 364.563,941.451 365.122,917.786 365.681,914.201 366.241,938.775 366.8,915.361 367.359,896.092 367.918,871.315 368.478,867.305 369.037,862.777 369.596,859.337 370.155,856.737 370.715,886.5 371.274,913.43 371.833,857.035 372.392,837.963 372.952,837.495 373.511,835.082 374.07,849.2 374.629,864.012 375.189,863.6 375.748,827.101 376.307,873.548 376.866,839.331 377.426,834.945 377.985,829.613 378.544,776.655 379.103,795.331 379.663,759.721 380.222,793.731 380.781,811.526 381.34,812.842 381.9,845.131 382.459,858.735 383.018,887.317 383.577,882.782 384.137,897.071 384.696,906.672 385.255,901.755 385.814,931.67 386.374,943.083 386.933,916.578 387.492,877.969 388.051,856.707 388.611,887.228 389.17,883.408 389.729,879.613 390.288,841.919 390.848,834.178 391.407,816.633 391.966,782.705 392.525,796.324 393.085,767.37 393.644,739.253 394.203,727.558 394.762,746.557 395.322,800.691 395.881,785.171 396.44,835.517 396.999,828.408 397.559,873.891 398.118,833.506 398.677,863.833 399.236,892.437 399.796,851.36 400.355,846.586 400.914,827.465 401.473,859.171 402.033,855.459 402.592,865.187 403.151,860.993 403.71,857.794 404.27,889.99 404.829,882.166 405.388,942.277 405.947,917.324 406.507,926.363 407.066,937.599 407.625,928.834 408.184,969.534 408.744,932.238 409.303,906.453 409.862,884.152 410.421,898.596 410.981,876.805 411.54,869.879 412.099,846.945 412.658,829.395 413.218,811.262 413.777,795.79 414.336,780.438 414.895,794.125 415.455,793.662 416.014,807.185 416.573,821.374 417.132,787.561 417.692,769.458 418.251,784.018 418.81,799.565 419.369,797.872 419.929,796.736 420.488,810.874 421.047,841.02 421.606,834.173 422.166,833.169 422.725,797.063 423.284,793.12 423.843,791.852 424.403,774.621 424.962,789.019 425.521,772.711 426.08,786.411 426.64,814.372 427.199,766.741 427.758,747.01 428.318,749.545 428.877,734.322 429.436,703.77 429.995,691.772 430.555,730.284 431.114,734.406 431.673,735.913 432.232,773.603 432.792,855.66 433.351,814.957 433.91,794.876 434.469,798.361 435.029,811.306 435.588,805.397 436.147,802.667 436.706,817.447 437.266,798.547 437.825,779.098 438.384,809.912 438.943,824.462 439.503,836.469 440.062,830.068 440.621,811.817 441.18,794.01 441.74,824.617 442.299,819.49 442.858,831.279 443.417,796.085 443.977,811.206 444.536,791.64 445.095,772.124 445.654,773.432 446.214,789.645 446.773,787.885 447.332,801.779 447.891,768.449 448.451,783.648 449.01,797.416 449.569,794.632 450.128,772.668 450.688,806.759 451.247,806.758 451.806,835.814 452.365,817.451 452.925,844.415 453.484,791.598 454.043,770.486 454.602,769.3 455.162,750.154 455.721,728.821 456.28,728.458 456.839,728.148 457.399,728.265 457.958,713.082 458.517,715.944 459.076,718.465 459.636,720.021 460.195,722.045 460.754,756.366 461.313,736.497 461.873,769.789 462.432,786.251 462.991,768.632 463.55,785.281 464.11,767.941 464.669,733.039 465.228,768.99 465.787,798.575 466.347,761.243 466.906,728.648 467.465,747.563 468.024,762.262 468.584,727.008 469.143,711.122 469.702,681.31 470.261,687.802 470.821,673.667 471.38,675.409 471.939,679.978 472.498,682.205 473.058,704.99 473.617,707.858 474.176,725.083 474.735,743.477 475.295,761.183 475.854,759.852 476.413,743.13 476.972,709.746 477.532,774.873 478.091,770.584 478.65,747.982 479.209,777.057 479.769,774.191 480.328,774.276 480.887,756.459 481.446,773.901 482.006,770.266 482.565,764.89 483.124,732.918 483.683,746.338 484.243,746.823 484.802,730.307 485.361,731.9 485.92,700.525 486.48,667.672 487.039,654.83 487.598,662.367 488.157,667.295 488.717,654.18 489.276,657.933 489.835,697.681 490.394,698.584 490.954,686.024 491.513,689.048 492.072,689.57 492.631,692.101 493.191,678.779 493.75,667.661 494.309,655.597 494.868,710.822 495.428,714.181 495.987,677.403 496.546,683.895 497.105,703.734 497.665,675.342 498.224,694.439 498.783,728.488 499.342,694.084 499.902,711.059 500.461,730.071 501.02,729.486 501.579,746.593 502.139,762.585 502.698,793.122 503.257,806.615 503.816,802.542 504.376,797.671 504.935,858.605 505.494,852.327 506.053,844.949 506.613,867.963 507.172,862.055 507.731,810.048 508.29,805.965 508.85,786.282 509.409,815.336 509.968,827.445 510.527,823.713 511.087,834.094 511.646,795.671 512.205,811.147 512.764,775.426 513.324,775.402 513.883,758.295 514.442,742.297 515.001,778.035 515.561,745.458 516.12,760.853 516.679,742.079 517.238,727.18 517.798,713.106 518.357,698.821 518.916,731.642 519.475,746.01 520.035,728.841 520.594,775.371 521.153,756.927 521.712,741.213 522.272,741.224 522.831,707.996 523.39,723.87 523.949,708.92 524.509,694.405 525.068,728.953 525.627,742.901 526.186,744.323 526.746,713.832 527.305,665.99 527.864,671.964 528.423,694.471 528.983,711.864 529.542,729.693 530.101,728.7 530.66,734.322 531.22,781.985 531.779,793.737 532.338,824.955 532.897,833.861 533.457,828.982 534.016,809.68 534.575,822.927 535.134,821.711 535.694,834.867 536.253,830.462 536.812,841.931 537.371,851.862 537.931,858.961 538.49,865.373 539.049,858.794 539.608,821.591 540.168,835.068 540.727,794.316 541.286,790.339 541.845,801.988 542.405,829.369 542.964,856.632 543.523,832.528 544.082,847.985 544.642,840.858 545.201,800.266 545.76,782.655 546.319,810.081 546.879,840.431 547.438,848.032 547.997,822.558 548.556,832.494 549.116,858.633 549.675,816.463 550.234,844.866 550.793,794.582 551.353,838.337 551.912,815.623 552.471,824.51 553.031,788.872 553.59,801.962 554.149,779.855 554.708,796.926 555.268,774.951 555.827,739.012 556.386,718.086 556.945,717.995 557.505,718.101 558.064,686.037 558.623,668.918 559.182,655.104 559.742,671.476 560.301,673.889 560.86,674.068 561.419,642.646 561.979,614.519 562.538,603.111 563.097,589.155 563.656,574.52 564.216,580.277 564.775,589.556 565.334,647.669 565.893,670.731 566.453,674.971 567.012,680.544 567.571,714.568 568.13,732.285 568.69,717.437 569.249,715.514 569.808,699.894 570.367,667.923 570.927,671.682 571.486,690.21 572.045,672.196 572.604,670.769 573.164,671.346 573.723,660.495 574.282,662.502 574.841,666.057 575.401,672.471 575.96,674.639 576.519,677.157 577.078,679.174 577.638,679.936 578.197,712.316 578.756,731.257 579.315,761.917 579.875,775.622 580.434,736.715 580.993,752.916 581.552,767.461 582.112,765.261 582.671,780.825 583.23,776.361 583.789,776.676 584.349,755.358 584.908,735.279 585.467,733.057 586.026,731.605 586.586,733.789 587.145,730.889 587.704,730.543 588.263,708.948 588.823,692.3 589.382,662.12 589.941,629.599 590.5,620.068 591.06,607.794 591.619,599.142 592.178,639.871 592.737,675.755 593.297,692.279 593.856,696.673 594.415,697.18 594.974,731.08 595.534,745.864 596.093,761.914 596.652,743.406 597.211,726.902 597.771,713.597 598.33,773.705 598.889,738.919 599.448,788.624 600.008,784.45 600.567,790.636 601.126,786.008 601.685,783.648 602.245,729.314 602.804,724.468 603.363,741.884 603.922,754.67 604.482,736.842 605.041,732.219 605.6,762.301 606.159,760.576 606.719,773.724 607.278,769.246 607.837,701.417 608.396,686.383 608.956,669.296 609.515,673.286 610.074,677.858 610.633,665.143 611.193,669.105 611.752,653.77 612.311,639.029 612.87,611.986 613.43,614.783 613.989,620.267 614.548,638.108 615.107,645.221 615.667,697.617 616.226,680.173 616.785,648.283 617.344,702.313 617.904,655.576 618.463,690.842 619.022,688.361 619.581,689.49 620.141,722.498 620.7,707.058 621.259,707.971 621.818,723.569 622.378,722.431 622.937,735.849 623.496,718.702 624.055,721.702 624.615,671.453 625.174,670.191 625.733,670.41 626.292,689.038 626.852,657.285 627.411,660.272 627.97,645.392 628.529,681.187 629.089,683.599 629.648,705.425 630.207,703.797 630.766,735.688 631.326,751.942 631.885,719.316 632.444,737.795 633.003,781.772 633.563,776.701 634.122,741.518 634.681,706.341 635.24,702.352 635.8,700.143 636.359,713.059 636.918,696.308 637.477,680.888 638.037,681.027 638.596,699.501 639.155,734.062 639.714,733.188 640.274,712.182 640.833,727.588 641.392,726.718 641.951,707.868 642.511,717.775 643.07,783.427 643.629,766.213 644.188,780.7 644.748,791.788 645.307,786.247 645.866,765.481 646.425,794.358 646.985,770.408 647.544,783.806 648.103,794.311 648.662,821.339 649.222,846.423 649.781,841.522 650.34,800.609 650.899,794.908 651.459,757.8 652.018,755.907 652.577,750.68 653.136,714.732 653.696,678.89 654.255,617.022 654.814,606.824 655.373,626.101 655.933,629.356 656.492,647.677 657.051,683.816 657.61,668.124 658.17,683.74 658.729,703.575 659.288,687.583 659.847,671.654 660.407,685.418 660.966,656.739 661.525,658.857 662.084,659.176 662.644,679.235 663.203,681.462 663.762,666.641 664.321,652.626 664.881,670.611 665.44,686.55 665.999,668.108 666.558,647.543 667.118,716.636 667.677,716.255 668.236,699.256 668.795,684.383 669.355,672.07 669.914,627.772 670.473,631.542 671.032,666.99 671.592,653.204 672.151,655.694 672.71,640.503 673.269,645.047 673.829,618.219 674.388,593.734 674.947,600.577 675.506,608.012 676.066,598.555 676.625,620.182 677.184,620.581 677.743,608.365 678.303,596.811 678.862,601.01 679.421,587.345 679.981,593.004 680.54,585.744 681.099,609.638 681.658,645.38 682.218,633.152 682.777,652.533 683.336,657.397 683.895,658.845 684.455,661.368 685.014,710.467 685.573,727.276 686.132,710.108 686.692,709.95 687.251,728.423 687.81,729.951 688.369,709.4 688.929,694.813 689.488,729.259 690.047,712.182 690.606,729.002 691.166,726.903 691.725,711.443 692.284,710.241 692.843,709.281 693.403,722.885 693.962,736.822 694.521,734.173 695.08,748.895 695.64,727.48 696.199,694.496 696.758,692.418 697.317,713.681 697.877,692.275 698.436,689.568 698.995,690.725 699.554,692.114 700.114,693.081 700.673,714.771 701.232,715.989 701.791,716.487 702.351,714.745 702.91,731.772 703.469,715.489 704.028,745.363 704.588,759.471 705.147,756.533 705.706,784.154 706.265,772.731 706.825,799.256 707.384,811.354 707.943,772.291 708.502,753.419 709.062,752.104 709.621,767.194 710.18,780.544 710.739,792.996 711.299,741.275 711.858,701.84 712.417,686.34 712.976,685.629 713.536,685.847 714.095,717.415 714.654,729.732 715.213,706.769 715.773,688.962 716.332,674.425 716.891,658.195 717.45,643.184 718.01,627.904 718.569,631.365 719.128,633.561 719.687,636.177 720.247,641.703 720.806,614.892 721.365,616.659 721.924,617.266 722.484,620.517 723.043,637.191 723.602,690.687 724.161,657.647 724.721,660.372 725.28,647.439 725.839,647.416 726.398,618.377 726.958,638.155 727.517,612.16 728.076,650.27 728.635,635.683 729.195,655.918 729.754,690.525 730.313,722.435 730.872,723.85 731.432,705.25 731.991,702.157 732.55,731.81 733.109,698.085 733.669,679.587 734.228,648.031 734.787,650.331 735.346,638.364 735.906,629.446 736.465,676.423 737.024,690.831 737.583,694.594 738.143,743.104 738.702,713.747 739.261,694.699 739.82,707.698 740.38,709.238 740.939,741.768 741.498,738.907 742.057,720.579 742.617,686.1 743.176,637.451 743.735,640.677 744.294,656.353 744.854,609.138 745.413,629.911 745.972,635.124 746.531,606.472 747.091,613.44 747.65,619.333 748.209,637.891 748.768,672.855 749.328,628.036 749.887,663.117 750.446,698.319 751.005,733.865 751.565,751.803 752.124,715.598 752.683,729.521 753.242,696.928 753.802,711.492 754.361,728.807 754.92,726.007 755.479,740.1 756.039,739.101 756.598,735.684 757.157,681.841 757.716,665.861 758.276,635.277 758.835,636.43 759.394,641.25 759.953,644.559 760.513,599.877 761.072,590.148 761.631,610.551 762.19,616.648 762.75,637.263 763.309,655.716 763.868,675.439 764.427,691.406 764.987,722.338 765.546,722.805 766.105,687.245 766.664,717.789 767.224,714.713 767.783,678.186 768.342,676.706 768.901,672.725 769.461,674.64 770.02,738.651 770.579,767.683 771.138,762.889 771.698,744.79 772.257,757.211 772.816,736.209 773.375,719.748 773.935,702.13 774.494,686.953 775.053,699.669 775.612,699.306 776.172,667.081 776.731,685.207 777.29,717.851 777.849,716.225 778.409,699.418 778.968,713.958 779.527,731.333 780.086,730.114 780.646,729.663 781.205,760.82 781.764,741.014 782.323,723.453 782.883,704.498 783.442,687.919 784.001,688.314 784.56,707.366 785.12,708.787 785.679,709.953 786.238,740.432 786.797,739.309 787.357,770.832 787.916,753.73 788.475,753.392 789.034,720.428 789.594,749.827 790.153,747.567 790.712,745.333 791.271,742.393 791.831,740.781 792.39,753.696 792.949,783.884 793.508,776.233 794.068,772.985 794.627,771.108 795.186,748.616 795.745,728.307 796.305,727.585 796.864,741.337 797.423,738.455 797.982,767.161 798.542,762.27 799.101,778.043 799.66,820.907 800.219,766.899 800.779,729.427 801.338,729.242 801.897,695.745 802.456,694.312 803.016,725.197 803.575,722.514 804.134,721.92 804.693,735.224 805.253,730.02 805.812,742.08 806.371,739.944 806.931,754.49 807.49,750.356 808.049,763.795 808.608,792.288 809.168,790.36 809.727,769.719 810.286,751.931 810.845,729.532 811.405,696.94 811.964,680.182 812.523,663.41 813.082,647.283 813.642,650.213 814.201,650.188 814.76,680.066 815.319,676.595 815.879,709.211 816.438,707.493 816.997,738.523 817.556,732.893 818.116,732.853 818.675,712.652 819.234,677.266 819.793,644.598 820.353,646.966 820.912,647.05 821.471,631.176 822.03,634.561 822.59,641.191 823.149,640.594 823.708,625.402 824.267,611.458 824.827,633.607 825.386,666.309 825.945,682.694 826.504,698.46 827.064,697.7 827.623,711.464 828.182,678.431 828.741,682.252 829.301,682.345 829.86,680.546 830.419,701.092 830.978,696.522 831.538,693.763 832.097,676.571 832.656,675.617 833.215,673.677 833.775,688.404 834.334,676.792 834.893,676.907 835.452,645.25 836.012,646.321 836.571,646.291 837.13,614.888 837.689,635.022 838.249,668.936 838.808,687.031 839.367,672.74 839.926,704.225 840.486,733.574 841.045,702.586 841.604,700.919 842.163,733.825 842.723,680.545 843.282,678.275 843.841,681.885 844.4,682.158 844.96,678.164 845.519,713.073 846.078,711.276 846.637,728.026 847.197,726.415 847.756,724.811 848.315,690.75 848.874,709.427 849.434,688.404 849.993,688.081 850.552,684.452 851.111,715.777 851.671,731.922 852.23,714.336 852.789,695.092 853.348,695.288 853.908,710.896 854.467,675.613 855.026,660 855.585,645.676 856.145,647.408 856.704,662.205 857.263,695.933 857.822,712.536 858.382,723.931 858.941,706.643 859.5,707.788 860.059,673.671 860.619,707.61 861.178,719.235 861.737,734.724 862.296,782.92 862.856,794.255 863.415,802.605 863.974,811.608 864.533,835.919 865.093,814.474 865.652,791.079 866.211,803.248 866.77,794.694 867.33,769.687 867.889,748.651 868.448,728.226 869.007,727.983 869.567,706.17 870.126,669.629 870.685,670.203 871.244,669.188 871.804,667.654 872.363,636.388 872.922,652.451 873.481,638.256 874.041,640.706 874.6,643.064 875.159,631.172 875.718,633.452 876.278,668.115 876.837,669.165 877.396,671.848 877.955,673.193 878.515,656.57 879.074,658.641 879.633,661.482 880.192,663.127 880.752,652.622 881.311,655.303 881.87,655.094 882.429,609.389 882.989,614.618 883.548,570.328 884.107,574.564 884.666,594.487 885.226,598.613 885.785,600.409 886.344,605.662 886.903,611.47 887.463,628.515 888.022,630.498 888.581,668.055 889.14,648.777 889.7,666.209 890.259,700.571 890.818,698.284 891.377,714.884 891.937,698.576 892.496,664.685 893.055,668.855 893.614,686.443 894.174,737.347 894.733,735.301 895.292,763.212 895.851,763.337 896.411,773.771 896.97,770.237 897.529,781.219 898.088,757.708 898.648,740.139 899.207,743.348 899.766,742.631 900.325,771.261 900.885,797.364 901.444,774.937 902.003,799.405 902.562,773.785 903.122,765.462 903.681,773.488 904.24,754.092 904.799,784.861 905.359,800.375 905.918,794.943 906.477,793.897 907.036,787.123 907.596,747.115 908.155,691.229 908.714,691.145 909.273,711.057 909.833,693.525 910.392,692.853 910.951,723.683 911.51,716.593 912.07,726.725 912.629,722.682 913.188,750.371 913.747,730.805 914.307,776.392 914.866,722.537 915.425,739.489 915.984,706.855 916.544,688.99 917.103,690.609 917.662,695.216 918.221,695.205 918.781,680.687 919.34,711.021 919.899,693.095 920.458,709.736 921.018,739.713 921.577,737.844 922.136,749.872 922.695,778.043 923.255,789.069 923.814,783.303 924.373,779.348 924.932,761.751 925.492,728.815 926.051,728.92 926.61,711.668 927.169,663.657 927.729,681.133 928.288,648.425 928.847,646.653 929.406,629.705 929.966,601.944 930.525,653.215 931.084,673.993 931.644,707.764 932.203,695.572 932.762,697.962 933.321,712.213 933.881,681.72 934.44,711.246 934.999,726.251 935.558,743.547 936.118,756.612 936.677,737.694 937.236,734.506 937.795,712.884 938.355,709.864 938.914,709.459 939.473,691.435 940.032,644.092 940.592,645.403 941.151,647.701 941.71,615.337 942.269,623.492 942.829,627.093 943.388,617.193 943.947,637.385 944.506,656.12 945.066,656.866 945.625,609.065 946.184,643.872 946.743,612.285 947.303,614.122 947.862,635.36 948.421,558.237 948.98,563.659 949.54,583.988 950.099,623.654 950.658,596.112 951.217,630.424 951.777,652.103 952.336,637.269 952.895,642.96 953.454,611.986 954.014,646.162 954.573,665.118 955.132,653.524 955.691,636.731 956.251,622.322 956.81,611.946 957.369,614.782 957.928,619.316 958.488,639.646 959.047,670.101 959.606,654.009 960.165,656.987 960.725,626.462 961.284,644.909 961.843,632.16 962.402,635.178 962.962,651.179 963.521,619.141 964.08,671.446 964.639,694.205 965.199,695.805 965.758,698.583 966.317,634.035 966.876,637.339 967.436,655.603 967.995,673.973 968.554,660.701 969.113,663.561 969.673,681.257 970.232,680.384 970.791,683.189 971.35,714.357 971.91,730.479 972.469,743.662 973.028,725.883 973.587,725.128 974.147,724.198 974.706,709.517 975.265,707.634 975.824,675.655 976.384,689.467 976.943,691.305 977.502,672.198 978.061,655.823 978.621,675.84 979.18,677.63 979.739,664.23 980.298,629.542 980.858,631.597 981.417,649.158 981.976,637 982.535,653.951 983.095,641.721 983.654,660.4 984.213,628.621 984.772,632.154 985.332,635.717 985.891,668.004 986.45,702.94 987.009,689.043 987.569,721.628 988.128,717.767 988.687,717.77 989.246,735.029 989.806,713.225 990.365,645.035 990.924,631.835 991.483,630.067 992.043,629.844 992.602,619.158 993.161,636.619 993.72,641.418 994.28,609.7 994.839,597.044 995.398,601.65 995.957,605.216 996.517,595.278 997.076,616.523 997.635,603.716 998.194,626.84 998.754,675.358 999.313,674.219 999.872,677.888 1000.43,693.392 1000.99,678.407 1001.55,682.222 1002.11,681.865 1002.67,678.564 1003.23,695.558 1003.79,676.203 1004.35,643.735 1004.91,664.31 1005.46,634.489 1006.02,574.035 1006.58,579.325 1007.14,571.606 1007.7,577.027 1008.26,549.957 1008.82,575.519 1009.38,566.06 1009.94,605.106 1010.5,639.286 1011.06,643.331 1011.62,663.409 1012.18,694.07 1012.73,712.917 1013.29,696.105 1013.85,709.671 1014.41,729.662 1014.97,728.293 1015.53,710.782 1016.09,743.86 1016.65,772.788 1017.21,767.672 1017.77,762.516 1018.33,775.676 1018.89,769.946 1019.45,779.441 1020.01,743.171 1020.56,709.149 1021.12,720.541 1021.68,683.049 1022.24,684.855 1022.8,669.458 1023.36,685.283 1023.92,683.158 1024.48,650.504 1025.04,618.648 1025.6,625.889 1026.16,646.535 1026.72,615.606 1027.28,637.327 1027.83,656.922 1028.39,672.4 1028.95,673.256 1029.51,674.596 1030.07,691.29 1030.63,674.387 1031.19,641.984 1031.75,656.923 1032.31,674.647 1032.87,707.123 1033.43,736.812 1033.99,716.878 1034.55,713.841 1035.1,699.676 1035.66,681.92 1036.22,632.575 1036.78,621.893 1037.34,640.768 1037.9,657.91 1038.46,660.191 1039.02,676.977 1039.58,693.358 1040.14,660.033 1040.7,663.094 1041.26,667.874 1041.82,688.027 1042.38,657.678 1042.93,658.555 1043.49,658.731 1044.05,629.876 1044.61,645.038 1045.17,663.423 1045.73,747.26 1046.29,742.927 1046.85,726.226 1047.41,727.049 1047.97,710.53 1048.53,742.353 1049.09,751.002 1049.65,698.776 1050.2,697.22 1050.76,692.753 1051.32,658.552 1051.88,658.703 1052.44,659.935 1053,674.767 1053.56,658.33 1054.12,659.104 1054.68,675.705 1055.24,671.293 1055.8,702.526 1056.36,699.694 1056.92,732.47 1057.48,748.194 1058.03,745.003 1058.59,723.067 1059.15,703.068 1059.71,685.291 1060.27,703.368 1060.83,686.211 1061.39,672.072 1061.95,639.336 1062.51,627.405 1063.07,632.327 1063.63,665.547 1064.19,651.304 1064.75,654.298 1065.3,691.321 1065.86,690.799 1066.42,692.76 1066.98,692.662 1067.54,678.125 1068.1,710.647 1068.66,709.863 1069.22,725.121 1069.78,740.691 1070.34,722.108 1070.9,653.984 1071.46,656.088 1072.02,706.558 1072.57,691.183 1073.13,675.172 1073.69,675.746 1074.25,672.312 1074.81,687.784 1075.37,691.885 1075.93,709.112 1076.49,722.902 1077.05,737.789 1077.61,736.794 1078.17,751.688 1078.73,765.43 1079.29,743.104 1079.85,720.759 1080.4,752.845 1080.96,751.373 1081.52,731.38 1082.08,697.76 1082.64,710.15 1083.2,676.528 1083.76,694.018 1084.32,658.857 1084.88,644.236 1085.44,614.11 1086,620.25 1086.56,641.147 1087.12,662.545 1087.67,661.363 1088.23,648.633 1088.79,617.612 1089.35,604.625 1089.91,626.318 1090.47,627.651 1091.03,616.818 1091.59,633.591 1092.15,653.71 1092.71,628.961 1093.27,633.341 1093.83,622.444 1094.39,624.21 1094.94,592.692 1095.5,642.889 1096.06,676.186 1096.62,695.217 1097.18,695.831 1097.74,709.067 1098.3,722.949 1098.86,737.096 1099.42,736.74 1099.98,735.057 1100.54,731.713 1101.1,728.777 1101.66,754.472 1102.22,718.189 1102.77,712.831 1103.33,742.53 1103.89,752.668 1104.45,746.085 1105.01,728.081 1105.57,760.549 1106.13,757.363 1106.69,768.346 1107.25,762.048 1107.81,760.265 1108.37,771.134 1108.93,814.792 1109.49,776.056 1110.04,800.009 1110.6,789.318 1111.16,784.685 1111.72,778.297 1112.28,807.167 1112.84,804.157 1113.4,800.649 1113.96,792.919 1114.52,787.245 1115.08,779.543 1115.64,788.58 1116.2,766.95 1116.76,779.116 1117.31,806.049 1117.87,780.978 1118.43,774.537 1118.99,735.91 1119.55,748.289 1120.11,775.936 1120.67,773.193 1121.23,768.517 1121.79,734.416 1122.35,732.072 1122.91,698.423 1123.47,695.643 1124.03,678.1 1124.59,661.17 1125.14,609.578 1125.7,610.921 1126.26,598.931 1126.82,606.122 1127.38,629.048 1127.94,648.876 1128.5,668.341 1129.06,667.557 1129.62,681.547 1130.18,651.228 1130.74,651.894 1131.3,686.338 1131.86,653.908 1132.41,656.889 1132.97,658.857 1133.53,626.582 1134.09,630.34 1134.65,601.633 1135.21,590.139 1135.77,576.629 1136.33,569.877 1136.89,559.221 1137.45,582.925 1138.01,587.439 1138.57,610.439 1139.13,614.937 1139.68,554.721 1140.24,565.338 1140.8,572.442 1141.36,563.004 1141.92,602.026 1142.48,605.613 1143.04,643.319 1143.6,597.747 1144.16,603.27 1144.72,623.017 1145.28,580.405 1145.84,601.828 1146.4,572.342 1146.96,564.268 1147.51,569.301 1148.07,578.424 1148.63,583.042 1149.19,588.329 1149.75,578.893 1150.31,583.298 1150.87,590.022 1151.43,581.588 1151.99,588.05 1152.55,593.745 1153.11,617.883 1153.67,625.295 1154.23,645.137 1154.78,632.565 1155.34,647.541 1155.9,666.338 1156.46,664.851 1157.02,682.146 1157.58,667.062 1158.14,670.133 1158.7,654.793 1159.26,644.992 1159.82,615.532 1160.38,635.834 1160.94,655.238 1161.5,641.595 1162.05,643.434 1162.61,626.451 1163.17,642.417 1163.73,708.953 1164.29,707.761 1164.85,656.915 1165.41,673.273 1165.97,674.99 1166.53,676.294 1167.09,696.11 1167.65,723.974 1168.21,702.511 1168.77,732.137 1169.33,747.209 1169.88,745.671 1170.44,726.745 1171,738.82 1171.56,767.772 1172.12,733.046 1172.68,729.628 1173.24,709.005 1173.8,740.637 1174.36,732.305 1174.92,727.657 1175.48,725.419 1176.04,738.754 1176.6,669.275 1177.15,687.352 1177.71,670.58 1178.27,671.879 1178.83,658.62 1179.39,662.446 1179.95,680.064 1180.51,697.106 1181.07,697.481 1181.63,697.393 1182.19,695.47 1182.75,676.754 1183.31,694.731 1183.87,709.576 1184.43,695.188 1184.98,645.471 1185.54,665.803 1186.1,697.024 1186.66,696.568 1187.22,725.264 1187.78,737.749 1188.34,702.795 1188.9,700.006 1189.46,686.38 1190.02,699.997 1190.58,702.611 1191.14,720.613 1191.7,750.363 1192.25,765.187 1192.81,774.846 1193.37,755.826 1193.93,734.368 1194.49,716.434 1195.05,745.113 1195.61,725.423 1196.17,720.345 1196.73,717.616 1197.29,685.568 1197.85,715.012 1198.41,732.163 1198.97,713.547 1199.52,677.48 1200.08,676.078 1200.64,658.352 1201.2,689.222 1201.76,703.79 1202.32,685.238 1202.88,668.893 1203.44,635.91 1204,657.146 1204.56,660.122 1205.12,708.725 1205.68,693.11 1206.24,754.475 1206.8,749.116 1207.35,731.997 1207.91,762.481 1208.47,725.953 1209.03,724.572 1209.59,705.832 1210.15,722.748 1210.71,734.051 1211.27,747.858 1211.83,746.351 1212.39,745.548 1212.95,774.851 1213.51,755.785 1214.07,749.994 1214.62,747.264 1215.18,760.365 1215.74,755.589 1216.3,749.289 1216.86,767.026 1217.42,777.629 1217.98,771.728 1218.54,750.213 1219.1,730.057 1219.66,730.457 1220.22,729.503 1220.78,727.58 1221.34,711.67 1221.89,774.646 1222.45,786.529 1223.01,795.984 1223.57,791.767 1224.13,771.033 1224.69,811.464 1225.25,785.949 1225.81,811.653 1226.37,820.583 1226.93,829.963 1227.49,811.166 1228.05,791.302 1228.61,801.601 1229.17,762.456 1229.72,758.163 1230.28,783.838 1230.84,748.778 1231.4,779.005 1231.96,774.079 1232.52,786.835 1233.08,764.711 1233.64,793.253 1234.2,788.013 1234.76,753.409 1235.32,686.642 1235.88,654.298 1236.44,656.563 1236.99,642.932 1237.55,659.682 1238.11,658.881 1238.67,641.839 1239.23,664.237 1239.79,648.758 1240.35,648.566 1240.91,633.254 1241.47,671.289 1242.03,687.577 1242.59,687.538 1243.15,667.216 1243.71,650.893 1244.26,671.026 1244.82,640.089 1245.38,676.915 1245.94,709.58 1246.5,706.124 1247.06,686.917 1247.62,654.108 1248.18,655.265 1248.74,640.827 1249.3,692.062 1249.86,707.302 1250.42,721.584 1250.98,719.05 1251.54,685.195 1252.09,668.162 1252.65,670.162 1253.21,668.596 1253.77,636.913 1254.33,658.899 1254.89,660.448 1255.45,661.044 1256.01,659.188 1256.57,679.722 1257.13,693.889 1257.69,663.844 1258.25,663.126 1258.81,632.414 1259.36,599.89 1259.92,569.886 1260.48,624.787 1261.04,645.952 1261.6,681.235 1262.16,649.17 1262.72,654.409 1263.28,657.092 1263.84,657.146 1264.4,646.431 1264.96,664.376 1265.52,668.856 1266.08,653.942 1266.63,673.06 1267.19,675.621 1267.75,646.653 1268.31,680.139 1268.87,648.189 1269.43,664.232 1269.99,679.428 1270.55,665.575 1271.11,665.935 1271.67,647.841 1272.23,647.735 1272.79,664.499 1273.35,682.793 1273.91,680.024 1274.46,714.373 1275.02,695.555 1275.58,677.837 1276.14,697.336 1276.7,680.042 1277.26,680.402 1277.82,677.3 1278.38,723.378 1278.94,709.651 1279.5,711.225 1280.06,728.253 1280.62,712.54 1281.18,649.308 1281.73,584.597 1282.29,609.383 1282.85,610.71 1283.41,612.681 1283.97,631.841 1284.53,601.071 1285.09,638.878 1285.65,691.262 1286.21,703.86 1286.77,700.826 1287.33,715.311 1287.89,718.862 1288.45,683.148 1289,699.017 1289.56,715.229 1290.12,746.857 1290.68,759.673 1291.24,753.937 1291.8,812.614 1292.36,789.793 1292.92,753.987 1293.48,733.07 1294.04,715.681 1294.6,730.729 1295.16,698.213 1295.72,683.55 1296.28,649.63 1296.83,650.415 1297.39,623.777 1297.95,637.279 1298.51,623.201 1299.07,610.754 1299.63,615.509 1300.19,603.013 1300.75,586.18 1301.31,608.159 1301.87,616.015 1302.43,635.973 1302.99,638.113 1303.55,594.098 1304.1,587.673 1304.66,592.62 1305.22,594.245 1305.78,583.27 1306.34,586.98 1306.9,592.676 1307.46,626.504 1308.02,615.602 1308.58,636.516 1309.14,623.231 1309.7,627.133 1310.26,662.36 1310.82,677.122 1311.38,678.035 1311.93,709.823 1312.49,691.316 1313.05,675.09 1313.61,675.257 1314.17,673.955 1314.73,656.642 1315.29,625.613 1315.85,611.956 1316.41,616.253 1316.97,619.334 1317.53,606.288 1318.09,610.79 1318.65,600.301 1319.2,573.62 1319.76,531.241 1320.32,557.131 1320.88,582.107 1321.44,607.635 1322,630.719 1322.56,636.855 1323.12,639.742 1323.68,641.028 1324.24,640.54 1324.8,657.844 1325.36,660.565 1325.92,681.362 1326.47,698.381 1327.03,717.371 1327.59,714.513 1328.15,742.231 1328.71,704.476 1329.27,720.757 1329.83,734.352 1330.39,744.979 1330.95,758.353 1331.51,750.982 1332.07,747.374 1332.63,762.427 1333.19,774.219 1333.75,739.276 1334.3,721.455 1334.86,704.684 1335.42,717.876 1335.98,715.558 1336.54,713.905 1337.1,728.227 1337.66,727.345 1338.22,708.796 1338.78,689.695 1339.34,671.172 1339.9,655.362 1340.46,671.375 1341.02,658.022 1341.57,629.265 1342.13,632.818 1342.69,650.657 1343.25,653.069 1343.81,640.483 1344.37,627.325 1344.93,646.763 1345.49,652.734 1346.05,637.911 1346.61,621.088 1347.17,642.407 1347.73,644.91 1348.29,632.675 1348.84,648.396 1349.4,633.919 1349.96,662.658 1350.52,677.456 1351.08,682.165 1351.64,685.562 1352.2,720.282 1352.76,701.383 1353.32,683.66 1353.88,680.604 1354.44,682.283 1355,683.045 1355.56,664.451 1356.12,666.488 1356.67,700.504 1357.23,714.472 1357.79,743.93 1358.35,726.069 1358.91,708.711 1359.47,673.317 1360.03,691.914 1360.59,744.779 1361.15,739.856 1361.71,737.438 1362.27,767.81 1362.83,779.666 1363.39,763.419 1363.94,743.397 1364.5,726.23 1365.06,693.467 1365.62,693.425 1366.18,690.276 1366.74,707.477 1367.3,657.958 1367.86,622.145 1368.42,626.114 1368.98,646.782 1369.54,698.261 1370.1,667.389 1370.66,668.24 1371.21,666.486 1371.77,681.063 1372.33,676.267 1372.89,660.71 1373.45,659.56 1374.01,657.903 1374.57,673.599 1375.13,706.473 1375.69,720.406 1376.25,702.441 1376.81,700.188 1377.37,684.548 1377.93,679.228 1378.49,678.372 1379.04,677.187 1379.6,659.394 1380.16,663.844 1380.72,631.132 1381.28,683.752 1381.84,666.341 1382.4,666.83 1382.96,665.078 1383.52,666.268 1384.08,685.373 1384.64,668.926 1385.2,752.804 1385.76,769.555 1386.31,747.192 1386.87,744.899 1387.43,738.011 1387.99,733.601 1388.55,701.172 1389.11,634.574 1389.67,587.772 1390.23,609.346 1390.79,613.899 1391.35,635.653 1391.91,604.578 1392.47,610.039 1393.03,612.443 1393.58,565.669 1394.14,552.616 1394.7,573.831 1395.26,580.216 1395.82,600.511 1396.38,621.797 1396.94,643.532 1397.5,617.519 1398.06,605.416 1398.62,596.689 1399.18,602.291 1399.74,605.104 1400.3,611.682 1400.86,647.982 1401.41,668.783 1401.97,671.33 1402.53,687.687 1403.09,686.344 1403.65,700.999 1404.21,731.663 1404.77,727.55 1405.33,740.109 1405.89,751.63 1406.45,732.168 1407.01,760.463 1407.57,772.15 1408.13,783.777 1408.68,779.462 1409.24,774.732 1409.8,771.42 1410.36,794.55 1410.92,786.886 1411.48,795.872 1412.04,759.912 1412.6,720.143 1413.16,733.985 1413.72,681.306 1414.28,697.472 1414.84,680.312 1415.4,628.231 1415.95,680.153 1416.51,693.252 1417.07,737.119 1417.63,719.385 1418.19,686.846 1418.75,703.083 1419.31,718.371 1419.87,718.719 1420.43,763.659 1420.99,743.731 1421.55,725.707 1422.11,725.93 1422.67,736.234 1423.23,731.256 1423.78,761.987 1424.34,755.67 1424.9,716.652 1425.46,713.135 1426.02,712.424 1426.58,696.107 1427.14,694.495 1427.7,695.522 1428.26,708.168 1428.82,690.577 1429.38,673.788 1429.94,642.197 1430.5,644.46 1431.05,599.74 1431.61,638.741 1432.17,641.127 1432.73,658.122 1433.29,643.7 1433.85,663.352 1434.41,665.111 1434.97,730.872 1435.53,728.359 1436.09,725.464 1436.65,740.968 1437.21,739.344 1437.77,706.857 1438.33,692.037 1438.88,691.77 1439.44,753.753 1440,765.006 1440.56,746.816 1441.12,727.919 1441.68,706.702 1442.24,719.918 1442.8,684.573 1443.36,651.189 1443.92,606.975 1444.48,609.773 1445.04,616.334 1445.6,635.124 1446.15,651.841 1446.71,604.777 1447.27,608.909 1447.83,626.09 1448.39,633.533 1448.95,604.382 1449.51,605.773 1450.07,658.464 1450.63,657.13 1451.19,661.787 1451.75,664.489 1452.31,695.211 1452.87,696.594 1453.42,693.319 1453.98,679.126 1454.54,647.433 1455.1,654.356 1455.66,671.206 1456.22,641.568 1456.78,723.5 1457.34,737.798 1457.9,719.577 1458.46,717.159 1459.02,666.348 1459.58,650.979 1460.14,670.981 1460.7,672.706 1461.25,659.558 1461.81,660.534 1462.37,681.247 1462.93,666.328 1463.49,700.819 1464.05,748.855 1464.61,716.994 1465.17,730.465 1465.73,727.474 1466.29,742.349 1466.85,725.256 1467.41,741.077 1467.97,725.856 1468.52,742.522 1469.08,757.807 1469.64,771.02 1470.2,784.009 1470.76,793.717 1471.32,741.502 1471.88,770.557 1472.44,764.771 1473,745.107 1473.56,742.14 1474.12,707.933 1474.68,706.84 1475.24,689.619 1475.79,719.38 1476.35,719.093 1476.91,671.113 1477.47,702.401 1478.03,684.381 1478.59,683.523 1479.15,713.332 1479.71,714.809 1480.27,697.775 1480.83,712.392 1481.39,727.163 1481.95,689.27 1482.51,703.954 1483.07,701.578 1483.62,685.226 1484.18,667.475 1484.74,682.186 1485.3,698.869 1485.86,684.547 1486.42,716.115 1486.98,683.726 1487.54,679.429 1488.1,699.165 1488.66,711.194 1489.22,726.397 1489.78,722.586 1490.34,720.176 1490.89,719.743 1491.45,733.066 1492.01,730.94 1492.57,693.79 1493.13,695.398 1493.69,710.069 1494.25,770.728 1494.81,764.165 1495.37,762.265 1495.93,737.9 1496.49,733.938 1497.05,721.352 1497.61,766.738 1498.16,807.545 1498.72,765.624 1499.28,714.815 1499.84,693.276 1500.4,647.743 1500.96,616.145 1501.52,602.103 1502.08,575.398 1502.64,577.454 1503.2,565.832 1503.76,571.559 1504.32,627.346 1504.88,629.942 1505.44,663.528 1505.99,678.876 1506.55,710.663 1507.11,659.155 1507.67,678.985 1508.23,694.167 1508.79,691.37 1509.35,673.542 1509.91,689.507 1510.47,719.401 1511.03,715.371 1511.59,747.444 1512.15,695.361 1512.71,711.755 1513.26,692.616 1513.82,723.955 1514.38,691.659 1514.94,643.406 1515.5,662.679 1516.06,674.442 1516.62,640.78 1517.18,627.527 1517.74,601.823 1518.3,603.357 1518.86,591.973 1519.42,563.074 1519.98,551.002 1520.53,542.398 1521.09,549.79 1521.65,558.528 1522.21,535.759 1522.77,560.966 1523.33,572.993 1523.89,579.887 1524.45,584.294 1525.01,623.187 1525.57,610.096 1526.13,580.79 1526.69,570.02 1527.25,602.988 1527.81,640.89 1528.36,644.289 1528.92,682.237 1529.48,681.256 1530.04,683.486 1530.6,670.166 1531.16,685.849 1531.72,689.862 1532.28,690.011 1532.84,693.66 1533.4,695.605 1533.96,711.28 1534.52,725.65 1535.08,706.307 1535.63,707.511 1536.19,702.338 1536.75,701.882 1537.31,668.272 1537.87,669.834 1538.43,690.315 1538.99,711.966 1539.55,726.581 1540.11,692.75 1540.67,691.811 1541.23,690.391 1541.79,672.414 1542.35,687.793 1542.9,670.571 1543.46,704.476 1544.02,718.679 1544.58,746.351 1545.14,725.81 1545.7,725.947 1546.26,757.796 1546.82,758.557 1547.38,769.475 1547.94,779.345 1548.5,772.499 1549.06,734.575 1549.62,748.619 1550.18,710.477 1550.73,726.121 1551.29,709.021 1551.85,739.67 1552.41,738.106 1552.97,733.041 1553.53,709.53 1554.09,689.827 1554.65,641.433 1555.21,644.335 1555.77,642.517 1556.33,658.514 1556.89,706.555 1557.45,723.937 1558,720.615 1558.56,682.482 1559.12,633.016 1559.68,621.509 1560.24,643.844 1560.8,665.021 1561.36,629.71 1561.92,648.668 1562.48,652.343 1563.04,652.249 1563.6,616.566 1564.16,621.104 1564.72,623.603 1565.28,576.12 1565.83,598.009 1566.39,602.321 1566.95,607.137 1567.51,577.371 1568.07,615.018 1568.63,622.531 1569.19,630.889 1569.75,619.453 1570.31,588.477 1570.87,607.619 1571.43,578.925 1571.99,616.302 1572.55,651.657 1573.1,642.565 1573.66,644.083 1574.22,662.131 1574.78,680.101 1575.34,676.992 1575.9,661.588 1576.46,679.579 1577.02,652.265 1577.58,688.696 1578.14,720.811 1578.7,719.382 1579.26,715.285 1579.82,711.88 1580.37,744.326 1580.93,724.048 1581.49,738.389 1582.05,703.208 1582.61,702.351 1583.17,700.951 1583.73,683.241 1584.29,685.844 1584.85,700.606 1585.41,730.614 1585.97,711.609 1586.53,694.186 1587.09,689.356 1587.65,685.11 1588.2,685.623 1588.76,651.598 1589.32,621.798 1589.88,625.932 1590.44,613.259 1591,615.686 1591.56,633.206 1592.12,617.979 1592.68,621.441 1593.24,623.529 1593.8,627.948 1594.36,609.729 1594.92,663.52 1595.47,676.787 1596.03,662.272 1596.59,629.834 1597.15,648.793 1597.71,637.702 1598.27,658.253 1598.83,692.394 1599.39,704.383 1599.95,701.676 1600.51,700.472 1601.07,700.376 1601.63,679.318 1602.19,708.431 1602.74,707.653 1603.3,703.86 1603.86,767.704 1604.42,715.102 1604.98,711.373 1605.54,694.58 1606.1,710.226 1606.66,706.714 1607.22,741.508 1607.78,694.224 1608.34,725.428 1608.9,708.756 1609.46,691.488 1610.02,690.316 1610.57,722.969 1611.13,688.337 1611.69,675.926 1612.25,681.015 1612.81,649.357 1613.37,652.576 1613.93,625.498 1614.49,665.358 1615.05,664.181 1615.61,649.373 1616.17,649.082 1616.73,618.616 1617.29,671.332 1617.84,672.192 1618.4,657.182 1618.96,671.733 1619.52,672.005 1620.08,673.373 1620.64,639.269 1621.2,642.163 1621.76,643.982 1622.32,661.371 1622.88,680.616 1623.44,681.091 1624,663.492 1624.56,682.283 1625.11,698.549 1625.67,685.054 1626.23,686.501 1626.79,674.223 1627.35,673.388 1627.91,661.712 1628.47,696.915 1629.03,725.404 1629.59,709.347 1630.15,689.419 1630.71,686.929 1631.27,688.686 1631.83,691.265 1632.39,693.865 1632.94,709.228 1633.5,691.148 1634.06,707.876 1634.62,709.577 1635.18,708.282 1635.74,706.08 1636.3,676.848 1636.86,662.213 1637.42,666.889 1637.98,650.639 1638.54,638.149 1639.1,607.616 1639.66,612.864 1640.21,614.224 1640.77,614.932 1641.33,633.905 1641.89,654.068 1642.45,653.473 1643.01,653.813 1643.57,654.958 1644.13,654.942 1644.69,644.686 1645.25,626.534 1645.81,613.369 1646.37,617.912 1646.93,623.147 1647.48,610.088 1648.04,675.595 1648.6,676.633 1649.16,677.79 1649.72,679.431 1650.28,685.254 1650.84,687.366 1651.4,655.811 1651.96,669.999 1652.52,689.742 1653.08,690.933 1653.64,687.284 1654.2,686.628 1654.76,718.111 1655.31,715.161 1655.87,684.85 1656.43,652.838 1656.99,653.158 1657.55,723.135 1658.11,734.034 1658.67,747.185 1659.23,743.833 1659.79,755.32 1660.35,763.622 1660.91,774.683 1661.47,750.527 1662.03,764.521 1662.58,791.946 1663.14,771.542 1663.7,750.167 1664.26,731.867 1664.82,727.482 1665.38,738.039 1665.94,769.312 1666.5,762.055 1667.06,775.065 1667.62,803.008 1668.18,764.297 1668.74,763.888 1669.3,729.789 1669.85,727.007 1670.41,742.456 1670.97,722.211 1671.53,738.179 1672.09,734.617 1672.65,735.249 1673.21,730.637 1673.77,709.658 1674.33,692.282 1674.89,691.541 1675.45,691.545 1676.01,678.699 1676.57,676.776 1677.13,661.677 1677.68,661.923 1678.24,681.128 1678.8,698.626 1679.36,682.965 1679.92,667.781 1680.48,666.821 1681.04,720.898 1681.6,737.015 1682.16,750.419 1682.72,732.517 1683.28,714.071 1683.84,745.535 1684.4,732.992 1684.95,730.102 1685.51,730.267 1686.07,759.553 1686.63,768.717 1687.19,766.22 1687.75,794.023 1688.31,775.041 1688.87,755.083 1689.43,770.961 1689.99,719.076 1690.55,715.3 1691.11,679.644 1691.67,693.398 1692.23,711.504 1692.78,711.539 1693.34,677.916 1693.9,710.142 1694.46,704.38 1695.02,670.689 1695.58,609.51 1696.14,662.193 1696.7,683.259 1697.26,683.912 1697.82,697.967 1698.38,676.373 1698.94,674.501 1699.5,676.431 1700.05,661.433 1700.61,678.614 1701.17,677.238 1701.73,660.707 1702.29,675.543 1702.85,674.273 1703.41,655.297 1703.97,687.747 1704.53,704.021 1705.09,699.638 1705.65,700.304 1706.21,698.712 1706.77,686.005 1707.32,705.827 1707.88,672.387 1708.44,675.118 1709,658.572 1709.56,624.507 1710.12,627.244 1710.68,581.007 1711.24,650.187 1711.8,671.235 1712.36,656.488 1712.92,688.372 1713.48,686.013 1714.04,721.066 1714.6,769.185 1715.15,795.865 1715.71,789.433 1716.27,806.889 1716.83,755.345 1717.39,749.961 1717.95,762.222 1718.51,757.167 1719.07,738.068 1719.63,749.128 1720.19,761.33 1720.75,740.697 1721.31,754.258 1721.87,750.257 1722.42,730.191 1722.98,723.76 1723.54,700.222 1724.1,711.614 1724.66,692.063 1725.22,692.156 1725.78,676.183 1726.34,679.726 1726.9,691.424 1727.46,674.231 1728.02,643.421 1728.58,661.477 1729.14,645.282 1729.69,630.502 1730.25,616.798 1730.81,603.667 1731.37,608.951 1731.93,612.818 1732.49,620.529 1733.05,657.067 1733.61,708.596 1734.17,688.998 1734.73,706.848 1735.29,736.31 1735.85,733.356 1736.41,747.338 1736.97,740.435 1737.52,723.378 1738.08,720.78 1738.64,717.524 1739.2,700.907 1739.76,654.468 1740.32,673.519 1740.88,654.593 1741.44,655.72 1742,657.066 1742.56,676.942 1743.12,709.775 1743.68,693.141 1744.24,693.008 1744.79,662.016 1745.35,682.334 1745.91,698.09 1746.47,686.472 1747.03,705.569 1747.59,720.068 1748.15,705.044 1748.71,721.981 1749.27,738.866 1749.83,753.224 1750.39,749.195 1750.95,762.134 1751.51,740.522 1752.06,738.21 1752.62,748.768 1753.18,743.586 1753.74,708.155 1754.3,688.718 1754.86,720.265 1755.42,722.912 1755.98,721.51 1756.54,718.704 1757.1,720.637 1757.66,701.018 1758.22,734.137 1758.78,700.134 1759.34,697.714 1759.89,711.833 1760.45,708.129 1761.01,722.464 1761.57,722.535 1762.13,704.978 1762.69,701.192 1763.25,697.737 1763.81,696.099 1764.37,664.658 1764.93,665.646 1765.49,667.012 1766.05,666.967 1766.61,670.119 1767.16,670.832 1767.72,657.431 1768.28,673.064 1768.84,655.002 1769.4,659.15 1769.96,660.15 1770.52,628.983 1771.08,629.048 1771.64,629.805 1772.2,614.742 1772.76,635.063 1773.32,590.866 1773.88,594.875 1774.43,598.372 1774.99,653.078 1775.55,654.662 1776.11,672.594 1776.67,672.763 1777.23,675.615 1777.79,691.422 1778.35,660.296 1778.91,649.717 1779.47,666.812 1780.03,680.668 1780.59,679.74 1781.15,698.406 1781.71,679.491 1782.26,694.09 1782.82,709.977 1783.38,708.926 1783.94,674.611 1784.5,687.463 1785.06,700.373 1785.62,715.256 1786.18,746.496 1786.74,740.82 1787.3,706.417 1787.86,720.978 1788.42,700.991 1788.98,704.451 1789.53,718.681 1790.09,715.044 1790.65,698.668 1791.21,680.371 1791.77,683.018 1792.33,678.172 1792.89,659.742 1793.45,644.675 1794.01,615.932 1794.57,634.383 1795.13,622.55 1795.69,643.593 1796.25,680.647 1796.8,667.149 1797.36,715.033 1797.92,708.614 1798.48,720.752 1799.04,715.234 1799.6,761.822 1800.16,727.566 1800.72,740.69 1801.28,755.577 1801.84,803.054 1802.4,782.546 1802.96,808.24 1803.52,755.612 1804.08,765.879 1804.63,764.257 1805.19,710.618 1805.75,708.825 1806.31,708.423 1806.87,690.705 1807.43,674.094 1807.99,644.663 1808.55,662.212 1809.11,680.761 1809.67,728.742 1810.23,710.299 1810.79,739.468 1811.35,753.389 1811.9,780.88 1812.46,759.904 1813.02,757.074 1813.58,750.884 1814.14,746.48 1814.7,775.16 1815.26,754.239 1815.82,781.933 1816.38,793.54 1816.94,757.578 1817.5,688.968 1818.06,684.74 1818.62,700.591 1819.18,718.046 1819.73,731.323 1820.29,700.019 1820.85,717.073 1821.41,699.295 1821.97,684.321 1822.53,702.967 1823.09,713.645 1823.65,745.078 1824.21,709.942 1824.77,656.897 1825.33,638.343 1825.89,637.845 1826.45,656.111 1827,645.16 1827.56,616.707 1828.12,602.6 1828.68,606.938 1829.24,612.471 1829.8,618.603 1830.36,640.765 1830.92,629.877 1831.48,645.804 1832.04,680.032 1832.6,678.697 1833.16,632.041 1833.72,651.422 1834.27,652.779 1834.83,656.635 1835.39,643.862 1835.95,647.041 1836.51,632.763 1837.07,636.783 1837.63,621.974 1838.19,624.664 \"/>\n<path clip-path=\"url(#clip133)\" d=\"M720.247 690.779 L720.806 690.779 L721.365 690.779 L721.924 690.779 L722.484 690.779 L723.043 690.779 L723.602 690.779 L724.161 690.779 L724.721 690.779 L725.28 690.779 L725.839 690.779 L726.398 690.779 L726.958 690.779 L727.517 690.779 L728.076 690.779 L728.635 690.779 L729.195 690.779 L729.754 690.779 L730.313 690.779 L730.872 690.779 L731.432 690.779 L731.991 690.779 L732.55 690.779 L733.109 690.779 L733.669 690.779 L734.228 690.779 L734.787 690.779 L735.346 690.779 L735.906 690.779 L736.465 690.779 L737.024 690.779 L737.583 690.779 L738.143 690.779 L738.702 690.779 L739.261 690.779 L739.82 690.779 L740.38 690.779 L740.939 690.779 L741.498 690.779 L742.057 690.779 L742.617 690.779 L743.176 690.779 L743.735 690.779 L744.294 690.779 L744.854 690.779 L745.413 690.779 L745.972 690.779 L746.531 690.779 L747.091 690.779 L747.65 690.779 L748.209 690.779 L748.768 690.779 L749.328 690.779 L749.887 690.779 L750.446 690.779 L751.005 690.779 L751.565 690.779 L752.124 690.779 L752.683 690.779 L753.242 690.779 L753.802 690.779 L754.361 690.779 L754.92 690.779 L755.479 690.779 L756.039 690.779 L756.598 690.779 L757.157 690.779 L757.716 690.779 L758.276 690.779 L758.835 690.779 L759.394 690.779 L759.953 690.779 L760.513 690.779 L761.072 690.779 L761.631 690.779 L762.19 690.779 L762.75 690.779 L763.309 690.779 L763.868 690.779 L764.427 690.779 L764.987 690.779 L765.546 690.779 L766.105 690.779 L766.664 690.779 L767.224 690.779 L767.783 690.779 L768.342 690.779 L768.901 690.779 L769.461 690.779 L770.02 690.779 L770.579 690.779 L771.138 690.779 L771.698 690.779 L772.257 690.779 L772.816 690.779 L773.375 690.779 L773.935 690.779 L774.494 690.779 L775.053 690.779 L775.612 690.779 L776.172 690.779 L776.731 690.779 L777.29 690.779 L777.849 690.779 L778.409 690.779 L778.968 690.779 L779.527 690.779 L780.086 690.779 L780.646 690.779 L781.205 690.779 L781.764 690.779 L782.323 690.779 L782.883 690.779 L783.442 690.779 L784.001 690.779 L784.56 690.779 L785.12 690.779 L785.679 690.779 L786.238 690.779 L786.797 690.779 L787.357 690.779 L787.916 690.779 L788.475 690.779 L789.034 690.779 L789.594 690.779 L790.153 690.779 L790.712 690.779 L791.271 690.779 L791.831 690.779 L792.39 690.779 L792.949 690.779 L793.508 690.779 L794.068 690.779 L794.627 690.779 L795.186 690.779 L795.745 690.779 L796.305 690.779 L796.864 690.779 L797.423 690.779 L797.982 690.779 L798.542 690.779 L799.101 690.779 L799.66 690.779 L800.219 690.779 L800.779 690.779 L801.338 690.779 L801.897 690.779 L802.456 690.779 L803.016 690.779 L803.575 690.779 L804.134 690.779 L804.693 690.779 L805.253 690.779 L805.812 690.779 L806.371 690.779 L806.931 690.779 L807.49 690.779 L808.049 690.779 L808.608 690.779 L809.168 690.779 L809.727 690.779 L810.286 690.779 L810.845 690.779 L811.405 690.779 L811.964 690.779 L812.523 690.779 L813.082 690.779 L813.642 690.779 L814.201 690.779 L814.76 690.779 L815.319 690.779 L815.879 690.779 L816.438 690.779 L816.997 690.779 L817.556 690.779 L818.116 690.779 L818.675 690.779 L819.234 690.779 L819.793 690.779 L820.353 690.779 L820.912 690.779 L821.471 690.779 L822.03 690.779 L822.59 690.779 L823.149 690.779 L823.708 690.779 L824.267 690.779 L824.827 690.779 L825.386 690.779 L825.945 690.779 L826.504 690.779 L827.064 690.779 L827.623 690.779 L828.182 690.779 L828.741 690.779 L829.301 690.779 L829.86 690.779 L830.419 690.779 L830.978 690.779 L831.538 690.779 L832.097 690.779 L832.656 690.779 L833.215 690.779 L833.775 690.779 L834.334 690.779 L834.893 690.779 L835.452 690.779 L836.012 690.779 L836.571 690.779 L837.13 690.779 L837.689 690.779 L838.249 690.779 L838.808 690.779 L839.367 690.779 L839.926 690.779 L840.486 690.779 L841.045 690.779 L841.604 690.779 L842.163 690.779 L842.723 690.779 L843.282 690.779 L843.841 690.779 L844.4 690.779 L844.96 690.779 L845.519 690.779 L846.078 690.779 L846.637 690.779 L847.197 690.779 L847.756 690.779 L848.315 690.779 L848.874 690.779 L849.434 690.779 L849.993 690.779 L850.552 690.779 L851.111 690.779 L851.671 690.779 L852.23 690.779 L852.789 690.779 L853.348 690.779 L853.908 690.779 L854.467 690.779 L855.026 690.779 L855.585 690.779 L856.145 690.779 L856.704 690.779 L857.263 690.779 L857.822 690.779 L858.382 690.779 L858.941 690.779 L859.5 690.779 L860.059 690.779 L860.619 690.779 L861.178 690.779 L861.737 690.779 L862.296 690.779 L862.856 690.779 L863.415 690.779 L863.974 690.779 L864.533 690.779 L865.093 690.779 L865.652 690.779 L866.211 690.779 L866.77 690.779 L867.33 690.779 L867.889 690.779 L868.448 690.779 L869.007 690.779 L869.567 690.779 L870.126 690.779 L870.685 690.779 L871.244 690.779 L871.804 690.779 L872.363 690.779 L872.922 690.779 L873.481 690.779 L874.041 690.779 L874.6 690.779 L875.159 690.779 L875.718 690.779 L876.278 690.779 L876.837 690.779 L877.396 690.779 L877.955 690.779 L878.515 690.779 L879.074 690.779 L879.633 690.779 L880.192 690.779 L880.752 690.779 L881.311 690.779 L881.87 690.779 L882.429 690.779 L882.989 690.779 L883.548 690.779 L884.107 690.779 L884.666 690.779 L885.226 690.779 L885.785 690.779 L886.344 690.779 L886.903 690.779 L887.463 690.779 L888.022 690.779 L888.581 690.779 L889.14 690.779 L889.7 690.779 L890.259 690.779 L890.818 690.779 L891.377 690.779 L891.937 690.779 L892.496 690.779 L893.055 690.779 L893.614 690.779 L894.174 690.779 L894.733 690.779 L895.292 690.779 L895.851 690.779 L896.411 690.779 L896.97 690.779 L897.529 690.779 L898.088 690.779 L898.648 690.779 L899.207 690.779 L899.766 690.779 L900.325 690.779 L900.885 690.779 L901.444 690.779 L902.003 690.779 L902.562 690.779 L903.122 690.779 L903.681 690.779 L904.24 690.779 L904.799 690.779 L905.359 690.779 L905.918 690.779 L906.477 690.779 L907.036 690.779 L907.596 690.779 L908.155 690.779 L908.714 690.779 L909.273 690.779 L909.833 690.779 L910.392 690.779 L910.951 690.779 L911.51 690.779 L912.07 690.779 L912.629 690.779 L913.188 690.779 L913.747 690.779 L914.307 690.779 L914.866 690.779 L915.425 690.779 L915.984 690.779 L916.544 690.779 L917.103 690.779 L917.662 690.779 L918.221 690.779 L918.781 690.779 L919.34 690.779 L919.899 690.779 L920.458 690.779 L921.018 690.779 L921.577 690.779 L922.136 690.779 L922.695 690.779 L923.255 690.779 L923.814 690.779 L924.373 690.779 L924.932 690.779 L925.492 690.779 L926.051 690.779 L926.61 690.779 L927.169 690.779 L927.729 690.779 L928.288 690.779 L928.847 690.779 L929.406 690.779 L929.966 690.779 L930.525 690.779 L931.084 690.779 L931.644 690.779 L932.203 690.779 L932.762 690.779 L933.321 690.779 L933.881 690.779 L934.44 690.779 L934.999 690.779 L935.558 690.779 L936.118 690.779 L936.677 690.779 L937.236 690.779 L937.795 690.779 L938.355 690.779 L938.914 690.779 L939.473 690.779 L940.032 690.779 L940.592 690.779 L941.151 690.779 L941.71 690.779 L942.269 690.779 L942.829 690.779 L943.388 690.779 L943.947 690.779 L944.506 690.779 L945.066 690.779 L945.625 690.779 L946.184 690.779 L946.743 690.779 L947.303 690.779 L947.862 690.779 L948.421 690.779 L948.98 690.779 L949.54 690.779 L950.099 690.779 L950.658 690.779 L951.217 690.779 L951.777 690.779 L952.336 690.779 L952.895 690.779 L953.454 690.779 L954.014 690.779 L954.573 690.779 L955.132 690.779 L955.691 690.779 L956.251 690.779 L956.81 690.779 L957.369 690.779 L957.928 690.779 L958.488 690.779 L959.047 690.779 L959.606 690.779 L960.165 690.779 L960.725 690.779 L961.284 690.779 L961.843 690.779 L962.402 690.779 L962.962 690.779 L963.521 690.779 L964.08 690.779 L964.639 690.779 L965.199 690.779 L965.758 690.779 L966.317 690.779 L966.876 690.779 L967.436 690.779 L967.995 690.779 L968.554 690.779 L969.113 690.779 L969.673 690.779 L970.232 690.779 L970.791 690.779 L971.35 690.779 L971.91 690.779 L972.469 690.779 L973.028 690.779 L973.587 690.779 L974.147 690.779 L974.706 690.779 L975.265 690.779 L975.824 690.779 L976.384 690.779 L976.943 690.779 L977.502 690.779 L978.061 690.779 L978.621 690.779 L979.18 690.779 L979.739 690.779 L980.298 690.779 L980.858 690.779 L981.417 690.779 L981.976 690.779 L982.535 690.779 L983.095 690.779 L983.654 690.779 L984.213 690.779 L984.772 690.779 L985.332 690.779 L985.891 690.779 L986.45 690.779 L987.009 690.779 L987.569 690.779 L988.128 690.779 L988.687 690.779 L989.246 690.779 L989.806 690.779 L990.365 690.779 L990.924 690.779 L991.483 690.779 L992.043 690.779 L992.602 690.779 L993.161 690.779 L993.72 690.779 L994.28 690.779 L994.839 690.779 L995.398 690.779 L995.957 690.779 L996.517 690.779 L997.076 690.779 L997.635 690.779 L998.194 690.779 L998.754 690.779 L999.313 690.779 L999.872 690.779 L1000.43 690.779 L1000.99 690.779 L1001.55 690.779 L1002.11 690.779 L1002.67 690.779 L1003.23 690.779 L1003.79 690.779 L1004.35 690.779 L1004.91 690.779 L1005.46 690.779 L1006.02 690.779 L1006.58 690.779 L1007.14 690.779 L1007.7 690.779 L1008.26 690.779 L1008.82 690.779 L1009.38 690.779 L1009.94 690.779 L1010.5 690.779 L1011.06 690.779 L1011.62 690.779 L1012.18 690.779 L1012.73 690.779 L1013.29 690.779 L1013.85 690.779 L1014.41 690.779 L1014.97 690.779 L1015.53 690.779 L1016.09 690.779 L1016.65 690.779 L1017.21 690.779 L1017.77 690.779 L1018.33 690.779 L1018.89 690.779 L1019.45 690.779 L1020.01 690.779 L1020.56 690.779 L1021.12 690.779 L1021.68 690.779 L1022.24 690.779 L1022.8 690.779 L1023.36 690.779 L1023.92 690.779 L1024.48 690.779 L1025.04 690.779 L1025.6 690.779 L1026.16 690.779 L1026.72 690.779 L1027.28 690.779 L1027.83 690.779 L1028.39 690.779 L1028.95 690.779 L1029.51 690.779 L1030.07 690.779 L1030.63 690.779 L1031.19 690.779 L1031.75 690.779 L1032.31 690.779 L1032.87 690.779 L1033.43 690.779 L1033.99 690.779 L1034.55 690.779 L1035.1 690.779 L1035.66 690.779 L1036.22 690.779 L1036.78 690.779 L1037.34 690.779 L1037.9 690.779 L1038.46 690.779 L1039.02 690.779 L1039.58 690.779 L1040.14 690.779 L1040.7 690.779 L1041.26 690.779 L1041.82 690.779 L1042.38 690.779 L1042.93 690.779 L1043.49 690.779 L1044.05 690.779 L1044.61 690.779 L1045.17 690.779 L1045.73 690.779 L1046.29 690.779 L1046.85 690.779 L1047.41 690.779 L1047.97 690.779 L1048.53 690.779 L1049.09 690.779 L1049.65 690.779 L1050.2 690.779 L1050.76 690.779 L1051.32 690.779 L1051.88 690.779 L1052.44 690.779 L1053 690.779 L1053.56 690.779 L1054.12 690.779 L1054.68 690.779 L1055.24 690.779 L1055.8 690.779 L1056.36 690.779 L1056.92 690.779 L1057.48 690.779 L1058.03 690.779 L1058.59 690.779 L1059.15 690.779 L1059.71 690.779 L1060.27 690.779 L1060.83 690.779 L1061.39 690.779 L1061.95 690.779 L1062.51 690.779 L1063.07 690.779 L1063.63 690.779 L1064.19 690.779 L1064.75 690.779 L1065.3 690.779 L1065.86 690.779 L1066.42 690.779 L1066.98 690.779 L1067.54 690.779 L1068.1 690.779 L1068.66 690.779 L1069.22 690.779 L1069.78 690.779 L1070.34 690.779 L1070.9 690.779 L1071.46 690.779 L1072.02 690.779 L1072.57 690.779 L1073.13 690.779 L1073.69 690.779 L1074.25 690.779 L1074.81 690.779 L1075.37 690.779 L1075.93 690.779 L1076.49 690.779 L1077.05 690.779 L1077.61 690.779 L1078.17 690.779 L1078.73 690.779 L1079.29 690.779 L1079.85 690.779 L1080.4 690.779 L1080.96 690.779 L1081.52 690.779 L1082.08 690.779 L1082.64 690.779 L1083.2 690.779 L1083.76 690.779 L1084.32 690.779 L1084.88 690.779 L1085.44 690.779 L1086 690.779 L1086.56 690.779 L1087.12 690.779 L1087.67 690.779 L1088.23 690.779 L1088.79 690.779 L1089.35 690.779 L1089.91 690.779 L1090.47 690.779 L1091.03 690.779 L1091.59 690.779 L1092.15 690.779 L1092.71 690.779 L1093.27 690.779 L1093.83 690.779 L1094.39 690.779 L1094.94 690.779 L1095.5 690.779 L1096.06 690.779 L1096.62 690.779 L1097.18 690.779 L1097.74 690.779 L1098.3 690.779 L1098.86 690.779 L1099.42 690.779 L1099.98 690.779 L1100.54 690.779 L1101.1 690.779 L1101.66 690.779 L1102.22 690.779 L1102.77 690.779 L1103.33 690.779 L1103.89 690.779 L1104.45 690.779 L1105.01 690.779 L1105.57 690.779 L1106.13 690.779 L1106.69 690.779 L1107.25 690.779 L1107.81 690.779 L1108.37 690.779 L1108.93 690.779 L1109.49 690.779 L1110.04 690.779 L1110.6 690.779 L1111.16 690.779 L1111.72 690.779 L1112.28 690.779 L1112.84 690.779 L1113.4 690.779 L1113.96 690.779 L1114.52 690.779 L1115.08 690.779 L1115.64 690.779 L1116.2 690.779 L1116.76 690.779 L1117.31 690.779 L1117.87 690.779 L1118.43 690.779 L1118.99 690.779 L1119.55 690.779 L1120.11 690.779 L1120.67 690.779 L1121.23 690.779 L1121.79 690.779 L1122.35 690.779 L1122.91 690.779 L1123.47 690.779 L1124.03 690.779 L1124.59 690.779 L1125.14 690.779 L1125.7 690.779 L1126.26 690.779 L1126.82 690.779 L1127.38 690.779 L1127.94 690.779 L1128.5 690.779 L1129.06 690.779 L1129.62 690.779 L1130.18 690.779 L1130.74 690.779 L1131.3 690.779 L1131.86 690.779 L1132.41 690.779 L1132.97 690.779 L1133.53 690.779 L1134.09 690.779 L1134.65 690.779 L1135.21 690.779 L1135.77 690.779 L1136.33 690.779 L1136.89 690.779 L1137.45 690.779 L1138.01 690.779 L1138.57 690.779 L1139.13 690.779 L1139.68 690.779 L1140.24 690.779 L1140.8 690.779 L1141.36 690.779 L1141.92 690.779 L1142.48 690.779 L1143.04 690.779 L1143.6 690.779 L1144.16 690.779 L1144.72 690.779 L1145.28 690.779 L1145.84 690.779 L1146.4 690.779 L1146.96 690.779 L1147.51 690.779 L1148.07 690.779 L1148.63 690.779 L1149.19 690.779 L1149.75 690.779 L1150.31 690.779 L1150.87 690.779 L1151.43 690.779 L1151.99 690.779 L1152.55 690.779 L1153.11 690.779 L1153.67 690.779 L1154.23 690.779 L1154.78 690.779 L1155.34 690.779 L1155.9 690.779 L1156.46 690.779 L1157.02 690.779 L1157.58 690.779 L1158.14 690.779 L1158.7 690.779 L1159.26 690.779 L1159.82 690.779 L1160.38 690.779 L1160.94 690.779 L1161.5 690.779 L1162.05 690.779 L1162.61 690.779 L1163.17 690.779 L1163.73 690.779 L1164.29 690.779 L1164.85 690.779 L1165.41 690.779 L1165.97 690.779 L1166.53 690.779 L1167.09 690.779 L1167.65 690.779 L1168.21 690.779 L1168.77 690.779 L1169.33 690.779 L1169.88 690.779 L1170.44 690.779 L1171 690.779 L1171.56 690.779 L1172.12 690.779 L1172.68 690.779 L1173.24 690.779 L1173.8 690.779 L1174.36 690.779 L1174.92 690.779 L1175.48 690.779 L1176.04 690.779 L1176.6 690.779 L1177.15 690.779 L1177.71 690.779 L1178.27 690.779 L1178.83 690.779 L1179.39 690.779 L1179.95 690.779 L1180.51 690.779 L1181.07 690.779 L1181.63 690.779 L1182.19 690.779 L1182.75 690.779 L1183.31 690.779 L1183.87 690.779 L1184.43 690.779 L1184.98 690.779 L1185.54 690.779 L1186.1 690.779 L1186.66 690.779 L1187.22 690.779 L1187.78 690.779 L1188.34 690.779 L1188.9 690.779 L1189.46 690.779 L1190.02 690.779 L1190.58 690.779 L1191.14 690.779 L1191.7 690.779 L1192.25 690.779 L1192.81 690.779 L1193.37 690.779 L1193.93 690.779 L1194.49 690.779 L1195.05 690.779 L1195.61 690.779 L1196.17 690.779 L1196.73 690.779 L1197.29 690.779 L1197.85 690.779 L1198.41 690.779 L1198.97 690.779 L1199.52 690.779 L1200.08 690.779 L1200.64 690.779 L1201.2 690.779 L1201.76 690.779 L1202.32 690.779 L1202.88 690.779 L1203.44 690.779 L1204 690.779 L1204.56 690.779 L1205.12 690.779 L1205.68 690.779 L1206.24 690.779 L1206.8 690.779 L1207.35 690.779 L1207.91 690.779 L1208.47 690.779 L1209.03 690.779 L1209.59 690.779 L1210.15 690.779 L1210.71 690.779 L1211.27 690.779 L1211.83 690.779 L1212.39 690.779 L1212.95 690.779 L1213.51 690.779 L1214.07 690.779 L1214.62 690.779 L1215.18 690.779 L1215.74 690.779 L1216.3 690.779 L1216.86 690.779 L1217.42 690.779 L1217.98 690.779 L1218.54 690.779 L1219.1 690.779 L1219.66 690.779 L1220.22 690.779 L1220.78 690.779 L1221.34 690.779 L1221.89 690.779 L1222.45 690.779 L1223.01 690.779 L1223.57 690.779 L1224.13 690.779 L1224.69 690.779 L1225.25 690.779 L1225.81 690.779 L1226.37 690.779 L1226.93 690.779 L1227.49 690.779 L1228.05 690.779 L1228.61 690.779 L1229.17 690.779 L1229.72 690.779 L1230.28 690.779 L1230.84 690.779 L1231.4 690.779 L1231.96 690.779 L1232.52 690.779 L1233.08 690.779 L1233.64 690.779 L1234.2 690.779 L1234.76 690.779 L1235.32 690.779 L1235.88 690.779 L1236.44 690.779 L1236.99 690.779 L1237.55 690.779 L1238.11 690.779 L1238.67 690.779 L1239.23 690.779 L1239.79 690.779 L1240.35 690.779 L1240.91 690.779 L1241.47 690.779 L1242.03 690.779 L1242.59 690.779 L1243.15 690.779 L1243.71 690.779 L1244.26 690.779 L1244.82 690.779 L1245.38 690.779 L1245.94 690.779 L1246.5 690.779 L1247.06 690.779 L1247.62 690.779 L1248.18 690.779 L1248.74 690.779 L1249.3 690.779 L1249.86 690.779 L1250.42 690.779 L1250.98 690.779 L1251.54 690.779 L1252.09 690.779 L1252.65 690.779 L1253.21 690.779 L1253.77 690.779 L1254.33 690.779 L1254.89 690.779 L1255.45 690.779 L1256.01 690.779 L1256.57 690.779 L1257.13 690.779 L1257.69 690.779 L1258.25 690.779 L1258.81 690.779 L1259.36 690.779 L1259.92 690.779 L1260.48 690.779 L1261.04 690.779 L1261.6 690.779 L1262.16 690.779 L1262.72 690.779 L1263.28 690.779 L1263.84 690.779 L1264.4 690.779 L1264.96 690.779 L1265.52 690.779 L1266.08 690.779 L1266.63 690.779 L1267.19 690.779 L1267.75 690.779 L1268.31 690.779 L1268.87 690.779 L1269.43 690.779 L1269.99 690.779 L1270.55 690.779 L1271.11 690.779 L1271.67 690.779 L1272.23 690.779 L1272.79 690.779 L1273.35 690.779 L1273.91 690.779 L1274.46 690.779 L1275.02 690.779 L1275.58 690.779 L1276.14 690.779 L1276.7 690.779 L1277.26 690.779 L1277.82 690.779 L1278.38 690.779 L1278.94 690.779 L1279.5 690.779 L1280.06 690.779 L1280.62 690.779 L1281.18 690.779 L1281.73 690.779 L1282.29 690.779 L1282.85 690.779 L1283.41 690.779 L1283.97 690.779 L1284.53 690.779 L1285.09 690.779 L1285.65 690.779 L1286.21 690.779 L1286.77 690.779 L1287.33 690.779 L1287.89 690.779 L1288.45 690.779 L1289 690.779 L1289.56 690.779 L1290.12 690.779 L1290.68 690.779 L1291.24 690.779 L1291.8 690.779 L1292.36 690.779 L1292.92 690.779 L1293.48 690.779 L1294.04 690.779 L1294.6 690.779 L1295.16 690.779 L1295.72 690.779 L1296.28 690.779 L1296.83 690.779 L1297.39 690.779 L1297.95 690.779 L1298.51 690.779 L1299.07 690.779 L1299.63 690.779 L1300.19 690.779 L1300.75 690.779 L1301.31 690.779 L1301.87 690.779 L1302.43 690.779 L1302.99 690.779 L1303.55 690.779 L1304.1 690.779 L1304.66 690.779 L1305.22 690.779 L1305.78 690.779 L1306.34 690.779 L1306.9 690.779 L1307.46 690.779 L1308.02 690.779 L1308.58 690.779 L1309.14 690.779 L1309.7 690.779 L1310.26 690.779 L1310.82 690.779 L1311.38 690.779 L1311.93 690.779 L1312.49 690.779 L1313.05 690.779 L1313.61 690.779 L1314.17 690.779 L1314.73 690.779 L1315.29 690.779 L1315.85 690.779 L1316.41 690.779 L1316.97 690.779 L1317.53 690.779 L1318.09 690.779 L1318.65 690.779 L1319.2 690.779 L1319.76 690.779 L1320.32 690.779 L1320.88 690.779 L1321.44 690.779 L1322 690.779 L1322.56 690.779 L1323.12 690.779 L1323.68 690.779 L1324.24 690.779 L1324.8 690.779 L1325.36 690.779 L1325.92 690.779 L1326.47 690.779 L1327.03 690.779 L1327.59 690.779 L1328.15 690.779 L1328.71 690.779 L1329.27 690.779 L1329.83 690.779 L1330.39 690.779 L1330.95 690.779 L1331.51 690.779 L1332.07 690.779 L1332.63 690.779 L1333.19 690.779 L1333.75 690.779 L1334.3 690.779 L1334.86 690.779 L1335.42 690.779 L1335.98 690.779 L1336.54 690.779 L1337.1 690.779 L1337.66 690.779 L1338.22 690.779 L1338.78 690.779 L1339.34 690.779 L1339.9 690.779 L1340.46 690.779 L1341.02 690.779 L1341.57 690.779 L1342.13 690.779 L1342.69 690.779 L1343.25 690.779 L1343.81 690.779 L1344.37 690.779 L1344.93 690.779 L1345.49 690.779 L1346.05 690.779 L1346.61 690.779 L1347.17 690.779 L1347.73 690.779 L1348.29 690.779 L1348.84 690.779 L1349.4 690.779 L1349.96 690.779 L1350.52 690.779 L1351.08 690.779 L1351.64 690.779 L1352.2 690.779 L1352.76 690.779 L1353.32 690.779 L1353.88 690.779 L1354.44 690.779 L1355 690.779 L1355.56 690.779 L1356.12 690.779 L1356.67 690.779 L1357.23 690.779 L1357.79 690.779 L1358.35 690.779 L1358.91 690.779 L1359.47 690.779 L1360.03 690.779 L1360.59 690.779 L1361.15 690.779 L1361.71 690.779 L1362.27 690.779 L1362.83 690.779 L1363.39 690.779 L1363.94 690.779 L1364.5 690.779 L1365.06 690.779 L1365.62 690.779 L1366.18 690.779 L1366.74 690.779 L1367.3 690.779 L1367.86 690.779 L1368.42 690.779 L1368.98 690.779 L1369.54 690.779 L1370.1 690.779 L1370.66 690.779 L1371.21 690.779 L1371.77 690.779 L1372.33 690.779 L1372.89 690.779 L1373.45 690.779 L1374.01 690.779 L1374.57 690.779 L1375.13 690.779 L1375.69 690.779 L1376.25 690.779 L1376.81 690.779 L1377.37 690.779 L1377.93 690.779 L1378.49 690.779 L1379.04 690.779 L1379.6 690.779 L1380.16 690.779 L1380.72 690.779 L1381.28 690.779 L1381.84 690.779 L1382.4 690.779 L1382.96 690.779 L1383.52 690.779 L1384.08 690.779 L1384.64 690.779 L1385.2 690.779 L1385.76 690.779 L1386.31 690.779 L1386.87 690.779 L1387.43 690.779 L1387.99 690.779 L1388.55 690.779 L1389.11 690.779 L1389.67 690.779 L1390.23 690.779 L1390.79 690.779 L1391.35 690.779 L1391.91 690.779 L1392.47 690.779 L1393.03 690.779 L1393.58 690.779 L1394.14 690.779 L1394.7 690.779 L1395.26 690.779 L1395.82 690.779 L1396.38 690.779 L1396.94 690.779 L1397.5 690.779 L1398.06 690.779 L1398.62 690.779 L1399.18 690.779 L1399.74 690.779 L1400.3 690.779 L1400.86 690.779 L1401.41 690.779 L1401.97 690.779 L1402.53 690.779 L1403.09 690.779 L1403.65 690.779 L1404.21 690.779 L1404.77 690.779 L1405.33 690.779 L1405.89 690.779 L1406.45 690.779 L1407.01 690.779 L1407.57 690.779 L1408.13 690.779 L1408.68 690.779 L1409.24 690.779 L1409.8 690.779 L1410.36 690.779 L1410.92 690.779 L1411.48 690.779 L1412.04 690.779 L1412.6 690.779 L1413.16 690.779 L1413.72 690.779 L1414.28 690.779 L1414.84 690.779 L1415.4 690.779 L1415.95 690.779 L1416.51 690.779 L1417.07 690.779 L1417.63 690.779 L1418.19 690.779 L1418.75 690.779 L1419.31 690.779 L1419.87 690.779 L1420.43 690.779 L1420.99 690.779 L1421.55 690.779 L1422.11 690.779 L1422.67 690.779 L1423.23 690.779 L1423.78 690.779 L1424.34 690.779 L1424.9 690.779 L1425.46 690.779 L1426.02 690.779 L1426.58 690.779 L1427.14 690.779 L1427.7 690.779 L1428.26 690.779 L1428.82 690.779 L1429.38 690.779 L1429.94 690.779 L1430.5 690.779 L1431.05 690.779 L1431.61 690.779 L1432.17 690.779 L1432.73 690.779 L1433.29 690.779 L1433.85 690.779 L1434.41 690.779 L1434.97 690.779 L1435.53 690.779 L1436.09 690.779 L1436.65 690.779 L1437.21 690.779 L1437.77 690.779 L1438.33 690.779 L1438.88 690.779 L1439.44 690.779 L1440 690.779 L1440.56 690.779 L1441.12 690.779 L1441.68 690.779 L1442.24 690.779 L1442.8 690.779 L1443.36 690.779 L1443.92 690.779 L1444.48 690.779 L1445.04 690.779 L1445.6 690.779 L1446.15 690.779 L1446.71 690.779 L1447.27 690.779 L1447.83 690.779 L1448.39 690.779 L1448.95 690.779 L1449.51 690.779 L1450.07 690.779 L1450.63 690.779 L1451.19 690.779 L1451.75 690.779 L1452.31 690.779 L1452.87 690.779 L1453.42 690.779 L1453.98 690.779 L1454.54 690.779 L1455.1 690.779 L1455.66 690.779 L1456.22 690.779 L1456.78 690.779 L1457.34 690.779 L1457.9 690.779 L1458.46 690.779 L1459.02 690.779 L1459.58 690.779 L1460.14 690.779 L1460.7 690.779 L1461.25 690.779 L1461.81 690.779 L1462.37 690.779 L1462.93 690.779 L1463.49 690.779 L1464.05 690.779 L1464.61 690.779 L1465.17 690.779 L1465.73 690.779 L1466.29 690.779 L1466.85 690.779 L1467.41 690.779 L1467.97 690.779 L1468.52 690.779 L1469.08 690.779 L1469.64 690.779 L1470.2 690.779 L1470.76 690.779 L1471.32 690.779 L1471.88 690.779 L1472.44 690.779 L1473 690.779 L1473.56 690.779 L1474.12 690.779 L1474.68 690.779 L1475.24 690.779 L1475.79 690.779 L1476.35 690.779 L1476.91 690.779 L1477.47 690.779 L1478.03 690.779 L1478.59 690.779 L1479.15 690.779 L1479.71 690.779 L1480.27 690.779 L1480.83 690.779 L1481.39 690.779 L1481.95 690.779 L1482.51 690.779 L1483.07 690.779 L1483.62 690.779 L1484.18 690.779 L1484.74 690.779 L1485.3 690.779 L1485.86 690.779 L1486.42 690.779 L1486.98 690.779 L1487.54 690.779 L1488.1 690.779 L1488.66 690.779 L1489.22 690.779 L1489.78 690.779 L1490.34 690.779 L1490.89 690.779 L1491.45 690.779 L1492.01 690.779 L1492.57 690.779 L1493.13 690.779 L1493.69 690.779 L1494.25 690.779 L1494.81 690.779 L1495.37 690.779 L1495.93 690.779 L1496.49 690.779 L1497.05 690.779 L1497.61 690.779 L1498.16 690.779 L1498.72 690.779 L1499.28 690.779 L1499.84 690.779 L1500.4 690.779 L1500.96 690.779 L1501.52 690.779 L1502.08 690.779 L1502.64 690.779 L1503.2 690.779 L1503.76 690.779 L1504.32 690.779 L1504.88 690.779 L1505.44 690.779 L1505.99 690.779 L1506.55 690.779 L1507.11 690.779 L1507.67 690.779 L1508.23 690.779 L1508.79 690.779 L1509.35 690.779 L1509.91 690.779 L1510.47 690.779 L1511.03 690.779 L1511.59 690.779 L1512.15 690.779 L1512.71 690.779 L1513.26 690.779 L1513.82 690.779 L1514.38 690.779 L1514.94 690.779 L1515.5 690.779 L1516.06 690.779 L1516.62 690.779 L1517.18 690.779 L1517.74 690.779 L1518.3 690.779 L1518.86 690.779 L1519.42 690.779 L1519.98 690.779 L1520.53 690.779 L1521.09 690.779 L1521.65 690.779 L1522.21 690.779 L1522.77 690.779 L1523.33 690.779 L1523.89 690.779 L1524.45 690.779 L1525.01 690.779 L1525.57 690.779 L1526.13 690.779 L1526.69 690.779 L1527.25 690.779 L1527.81 690.779 L1528.36 690.779 L1528.92 690.779 L1529.48 690.779 L1530.04 690.779 L1530.6 690.779 L1531.16 690.779 L1531.72 690.779 L1532.28 690.779 L1532.84 690.779 L1533.4 690.779 L1533.96 690.779 L1534.52 690.779 L1535.08 690.779 L1535.63 690.779 L1536.19 690.779 L1536.75 690.779 L1537.31 690.779 L1537.87 690.779 L1538.43 690.779 L1538.99 690.779 L1539.55 690.779 L1540.11 690.779 L1540.67 690.779 L1541.23 690.779 L1541.79 690.779 L1542.35 690.779 L1542.9 690.779 L1543.46 690.779 L1544.02 690.779 L1544.58 690.779 L1545.14 690.779 L1545.7 690.779 L1546.26 690.779 L1546.82 690.779 L1547.38 690.779 L1547.94 690.779 L1548.5 690.779 L1549.06 690.779 L1549.62 690.779 L1550.18 690.779 L1550.73 690.779 L1551.29 690.779 L1551.85 690.779 L1552.41 690.779 L1552.97 690.779 L1553.53 690.779 L1554.09 690.779 L1554.65 690.779 L1555.21 690.779 L1555.77 690.779 L1556.33 690.779 L1556.89 690.779 L1557.45 690.779 L1558 690.779 L1558.56 690.779 L1559.12 690.779 L1559.68 690.779 L1560.24 690.779 L1560.8 690.779 L1561.36 690.779 L1561.92 690.779 L1562.48 690.779 L1563.04 690.779 L1563.6 690.779 L1564.16 690.779 L1564.72 690.779 L1565.28 690.779 L1565.83 690.779 L1566.39 690.779 L1566.95 690.779 L1567.51 690.779 L1568.07 690.779 L1568.63 690.779 L1569.19 690.779 L1569.75 690.779 L1570.31 690.779 L1570.87 690.779 L1571.43 690.779 L1571.99 690.779 L1572.55 690.779 L1573.1 690.779 L1573.66 690.779 L1574.22 690.779 L1574.78 690.779 L1575.34 690.779 L1575.9 690.779 L1576.46 690.779 L1577.02 690.779 L1577.58 690.779 L1578.14 690.779 L1578.7 690.779 L1579.26 690.779 L1579.82 690.779 L1580.37 690.779 L1580.93 690.779 L1581.49 690.779 L1582.05 690.779 L1582.61 690.779 L1583.17 690.779 L1583.73 690.779 L1584.29 690.779 L1584.85 690.779 L1585.41 690.779 L1585.97 690.779 L1586.53 690.779 L1587.09 690.779 L1587.65 690.779 L1588.2 690.779 L1588.76 690.779 L1589.32 690.779 L1589.88 690.779 L1590.44 690.779 L1591 690.779 L1591.56 690.779 L1592.12 690.779 L1592.68 690.779 L1593.24 690.779 L1593.8 690.779 L1594.36 690.779 L1594.92 690.779 L1595.47 690.779 L1596.03 690.779 L1596.59 690.779 L1597.15 690.779 L1597.71 690.779 L1598.27 690.779 L1598.83 690.779 L1599.39 690.779 L1599.95 690.779 L1600.51 690.779 L1601.07 690.779 L1601.63 690.779 L1602.19 690.779 L1602.74 690.779 L1603.3 690.779 L1603.86 690.779 L1604.42 690.779 L1604.98 690.779 L1605.54 690.779 L1606.1 690.779 L1606.66 690.779 L1607.22 690.779 L1607.78 690.779 L1608.34 690.779 L1608.9 690.779 L1609.46 690.779 L1610.02 690.779 L1610.57 690.779 L1611.13 690.779 L1611.69 690.779 L1612.25 690.779 L1612.81 690.779 L1613.37 690.779 L1613.93 690.779 L1614.49 690.779 L1615.05 690.779 L1615.61 690.779 L1616.17 690.779 L1616.73 690.779 L1617.29 690.779 L1617.84 690.779 L1618.4 690.779 L1618.96 690.779 L1619.52 690.779 L1620.08 690.779 L1620.64 690.779 L1621.2 690.779 L1621.76 690.779 L1622.32 690.779 L1622.88 690.779 L1623.44 690.779 L1624 690.779 L1624.56 690.779 L1625.11 690.779 L1625.67 690.779 L1626.23 690.779 L1626.79 690.779 L1627.35 690.779 L1627.91 690.779 L1628.47 690.779 L1629.03 690.779 L1629.59 690.779 L1630.15 690.779 L1630.71 690.779 L1631.27 690.779 L1631.83 690.779 L1632.39 690.779 L1632.94 690.779 L1633.5 690.779 L1634.06 690.779 L1634.62 690.779 L1635.18 690.779 L1635.74 690.779 L1636.3 690.779 L1636.86 690.779 L1637.42 690.779 L1637.98 690.779 L1638.54 690.779 L1639.1 690.779 L1639.66 690.779 L1640.21 690.779 L1640.77 690.779 L1641.33 690.779 L1641.89 690.779 L1642.45 690.779 L1643.01 690.779 L1643.57 690.779 L1644.13 690.779 L1644.69 690.779 L1645.25 690.779 L1645.81 690.779 L1646.37 690.779 L1646.93 690.779 L1647.48 690.779 L1648.04 690.779 L1648.6 690.779 L1649.16 690.779 L1649.72 690.779 L1650.28 690.779 L1650.84 690.779 L1651.4 690.779 L1651.96 690.779 L1652.52 690.779 L1653.08 690.779 L1653.64 690.779 L1654.2 690.779 L1654.76 690.779 L1655.31 690.779 L1655.87 690.779 L1656.43 690.779 L1656.99 690.779 L1657.55 690.779 L1658.11 690.779 L1658.67 690.779 L1659.23 690.779 L1659.79 690.779 L1660.35 690.779 L1660.91 690.779 L1661.47 690.779 L1662.03 690.779 L1662.58 690.779 L1663.14 690.779 L1663.7 690.779 L1664.26 690.779 L1664.82 690.779 L1665.38 690.779 L1665.94 690.779 L1666.5 690.779 L1667.06 690.779 L1667.62 690.779 L1668.18 690.779 L1668.74 690.779 L1669.3 690.779 L1669.85 690.779 L1670.41 690.779 L1670.97 690.779 L1671.53 690.779 L1672.09 690.779 L1672.65 690.779 L1673.21 690.779 L1673.77 690.779 L1674.33 690.779 L1674.89 690.779 L1675.45 690.779 L1676.01 690.779 L1676.57 690.779 L1677.13 690.779 L1677.68 690.779 L1678.24 690.779 L1678.8 690.779 L1679.36 690.779 L1679.92 690.779 L1680.48 690.779 L1681.04 690.779 L1681.6 690.779 L1682.16 690.779 L1682.72 690.779 L1683.28 690.779 L1683.84 690.779 L1684.4 690.779 L1684.95 690.779 L1685.51 690.779 L1686.07 690.779 L1686.63 690.779 L1687.19 690.779 L1687.75 690.779 L1688.31 690.779 L1688.87 690.779 L1689.43 690.779 L1689.99 690.779 L1690.55 690.779 L1691.11 690.779 L1691.67 690.779 L1692.23 690.779 L1692.78 690.779 L1693.34 690.779 L1693.9 690.779 L1694.46 690.779 L1695.02 690.779 L1695.58 690.779 L1696.14 690.779 L1696.7 690.779 L1697.26 690.779 L1697.82 690.779 L1698.38 690.779 L1698.94 690.779 L1699.5 690.779 L1700.05 690.779 L1700.61 690.779 L1701.17 690.779 L1701.73 690.779 L1702.29 690.779 L1702.85 690.779 L1703.41 690.779 L1703.97 690.779 L1704.53 690.779 L1705.09 690.779 L1705.65 690.779 L1706.21 690.779 L1706.77 690.779 L1707.32 690.779 L1707.88 690.779 L1708.44 690.779 L1709 690.779 L1709.56 690.779 L1710.12 690.779 L1710.68 690.779 L1711.24 690.779 L1711.8 690.779 L1712.36 690.779 L1712.92 690.779 L1713.48 690.779 L1714.04 690.779 L1714.6 690.779 L1715.15 690.779 L1715.71 690.779 L1716.27 690.779 L1716.83 690.779 L1717.39 690.779 L1717.95 690.779 L1718.51 690.779 L1719.07 690.779 L1719.63 690.779 L1720.19 690.779 L1720.75 690.779 L1721.31 690.779 L1721.87 690.779 L1722.42 690.779 L1722.98 690.779 L1723.54 690.779 L1724.1 690.779 L1724.66 690.779 L1725.22 690.779 L1725.78 690.779 L1726.34 690.779 L1726.9 690.779 L1727.46 690.779 L1728.02 690.779 L1728.58 690.779 L1729.14 690.779 L1729.69 690.779 L1730.25 690.779 L1730.81 690.779 L1731.37 690.779 L1731.93 690.779 L1732.49 690.779 L1733.05 690.779 L1733.61 690.779 L1734.17 690.779 L1734.73 690.779 L1735.29 690.779 L1735.85 690.779 L1736.41 690.779 L1736.97 690.779 L1737.52 690.779 L1738.08 690.779 L1738.64 690.779 L1739.2 690.779 L1739.76 690.779 L1740.32 690.779 L1740.88 690.779 L1741.44 690.779 L1742 690.779 L1742.56 690.779 L1743.12 690.779 L1743.68 690.779 L1744.24 690.779 L1744.79 690.779 L1745.35 690.779 L1745.91 690.779 L1746.47 690.779 L1747.03 690.779 L1747.59 690.779 L1748.15 690.779 L1748.71 690.779 L1749.27 690.779 L1749.83 690.779 L1750.39 690.779 L1750.95 690.779 L1751.51 690.779 L1752.06 690.779 L1752.62 690.779 L1753.18 690.779 L1753.74 690.779 L1754.3 690.779 L1754.86 690.779 L1755.42 690.779 L1755.98 690.779 L1756.54 690.779 L1757.1 690.779 L1757.66 690.779 L1758.22 690.779 L1758.78 690.779 L1759.34 690.779 L1759.89 690.779 L1760.45 690.779 L1761.01 690.779 L1761.57 690.779 L1762.13 690.779 L1762.69 690.779 L1763.25 690.779 L1763.81 690.779 L1764.37 690.779 L1764.93 690.779 L1765.49 690.779 L1766.05 690.779 L1766.61 690.779 L1767.16 690.779 L1767.72 690.779 L1768.28 690.779 L1768.84 690.779 L1769.4 690.779 L1769.96 690.779 L1770.52 690.779 L1771.08 690.779 L1771.64 690.779 L1772.2 690.779 L1772.76 690.779 L1773.32 690.779 L1773.88 690.779 L1774.43 690.779 L1774.99 690.779 L1775.55 690.779 L1776.11 690.779 L1776.67 690.779 L1777.23 690.779 L1777.79 690.779 L1778.35 690.779 L1778.91 690.779 L1779.47 690.779 L1780.03 690.779 L1780.59 690.779 L1781.15 690.779 L1781.71 690.779 L1782.26 690.779 L1782.82 690.779 L1783.38 690.779 L1783.94 690.779 L1784.5 690.779 L1785.06 690.779 L1785.62 690.779 L1786.18 690.779 L1786.74 690.779 L1787.3 690.779 L1787.86 690.779 L1788.42 690.779 L1788.98 690.779 L1789.53 690.779 L1790.09 690.779 L1790.65 690.779 L1791.21 690.779 L1791.77 690.779 L1792.33 690.779 L1792.89 690.779 L1793.45 690.779 L1794.01 690.779 L1794.57 690.779 L1795.13 690.779 L1795.69 690.779 L1796.25 690.779 L1796.8 690.779 L1797.36 690.779 L1797.92 690.779 L1798.48 690.779 L1799.04 690.779 L1799.6 690.779 L1800.16 690.779 L1800.72 690.779 L1801.28 690.779 L1801.84 690.779 L1802.4 690.779 L1802.96 690.779 L1803.52 690.779 L1804.08 690.779 L1804.63 690.779 L1805.19 690.779 L1805.75 690.779 L1806.31 690.779 L1806.87 690.779 L1807.43 690.779 L1807.99 690.779 L1808.55 690.779 L1809.11 690.779 L1809.67 690.779 L1810.23 690.779 L1810.79 690.779 L1811.35 690.779 L1811.9 690.779 L1812.46 690.779 L1813.02 690.779 L1813.58 690.779 L1814.14 690.779 L1814.7 690.779 L1815.26 690.779 L1815.82 690.779 L1816.38 690.779 L1816.94 690.779 L1817.5 690.779 L1818.06 690.779 L1818.62 690.779 L1819.18 690.779 L1819.73 690.779 L1820.29 690.779 L1820.85 690.779 L1821.41 690.779 L1821.97 690.779 L1822.53 690.779 L1823.09 690.779 L1823.65 690.779 L1824.21 690.779 L1824.77 690.779 L1825.33 690.779 L1825.89 690.779 L1826.45 690.779 L1827 690.779 L1827.56 690.779 L1828.12 690.779 L1828.68 690.779 L1829.24 690.779 L1829.8 690.779 L1830.36 690.779 L1830.92 690.779 L1831.48 690.779 L1832.04 690.779 L1832.6 690.779 L1833.16 690.779 L1833.72 690.779 L1834.27 690.779 L1834.83 690.779 L1835.39 690.779 L1835.95 690.779 L1836.51 690.779 L1837.07 690.779 L1837.63 690.779 L1838.19 690.779 L1838.19 683.418 L1837.63 683.418 L1837.07 683.418 L1836.51 683.418 L1835.95 683.418 L1835.39 683.418 L1834.83 683.418 L1834.27 683.418 L1833.72 683.418 L1833.16 683.418 L1832.6 683.418 L1832.04 683.418 L1831.48 683.418 L1830.92 683.418 L1830.36 683.418 L1829.8 683.418 L1829.24 683.418 L1828.68 683.418 L1828.12 683.418 L1827.56 683.418 L1827 683.418 L1826.45 683.418 L1825.89 683.418 L1825.33 683.418 L1824.77 683.418 L1824.21 683.418 L1823.65 683.418 L1823.09 683.418 L1822.53 683.418 L1821.97 683.418 L1821.41 683.418 L1820.85 683.418 L1820.29 683.418 L1819.73 683.418 L1819.18 683.418 L1818.62 683.418 L1818.06 683.418 L1817.5 683.418 L1816.94 683.418 L1816.38 683.418 L1815.82 683.418 L1815.26 683.418 L1814.7 683.418 L1814.14 683.418 L1813.58 683.418 L1813.02 683.418 L1812.46 683.418 L1811.9 683.418 L1811.35 683.418 L1810.79 683.418 L1810.23 683.418 L1809.67 683.418 L1809.11 683.418 L1808.55 683.418 L1807.99 683.418 L1807.43 683.418 L1806.87 683.418 L1806.31 683.418 L1805.75 683.418 L1805.19 683.418 L1804.63 683.418 L1804.08 683.418 L1803.52 683.418 L1802.96 683.418 L1802.4 683.418 L1801.84 683.418 L1801.28 683.418 L1800.72 683.418 L1800.16 683.418 L1799.6 683.418 L1799.04 683.418 L1798.48 683.418 L1797.92 683.418 L1797.36 683.418 L1796.8 683.418 L1796.25 683.418 L1795.69 683.418 L1795.13 683.418 L1794.57 683.418 L1794.01 683.418 L1793.45 683.418 L1792.89 683.418 L1792.33 683.418 L1791.77 683.418 L1791.21 683.418 L1790.65 683.418 L1790.09 683.418 L1789.53 683.418 L1788.98 683.418 L1788.42 683.418 L1787.86 683.418 L1787.3 683.418 L1786.74 683.418 L1786.18 683.418 L1785.62 683.418 L1785.06 683.418 L1784.5 683.418 L1783.94 683.418 L1783.38 683.418 L1782.82 683.418 L1782.26 683.418 L1781.71 683.418 L1781.15 683.418 L1780.59 683.418 L1780.03 683.418 L1779.47 683.418 L1778.91 683.418 L1778.35 683.418 L1777.79 683.418 L1777.23 683.418 L1776.67 683.418 L1776.11 683.418 L1775.55 683.418 L1774.99 683.418 L1774.43 683.418 L1773.88 683.418 L1773.32 683.418 L1772.76 683.418 L1772.2 683.418 L1771.64 683.418 L1771.08 683.418 L1770.52 683.418 L1769.96 683.418 L1769.4 683.418 L1768.84 683.418 L1768.28 683.418 L1767.72 683.418 L1767.16 683.418 L1766.61 683.418 L1766.05 683.418 L1765.49 683.418 L1764.93 683.418 L1764.37 683.418 L1763.81 683.418 L1763.25 683.418 L1762.69 683.418 L1762.13 683.418 L1761.57 683.418 L1761.01 683.418 L1760.45 683.418 L1759.89 683.418 L1759.34 683.418 L1758.78 683.418 L1758.22 683.418 L1757.66 683.418 L1757.1 683.418 L1756.54 683.418 L1755.98 683.418 L1755.42 683.418 L1754.86 683.418 L1754.3 683.418 L1753.74 683.418 L1753.18 683.418 L1752.62 683.418 L1752.06 683.418 L1751.51 683.418 L1750.95 683.418 L1750.39 683.418 L1749.83 683.418 L1749.27 683.418 L1748.71 683.418 L1748.15 683.418 L1747.59 683.418 L1747.03 683.418 L1746.47 683.418 L1745.91 683.418 L1745.35 683.418 L1744.79 683.418 L1744.24 683.418 L1743.68 683.418 L1743.12 683.418 L1742.56 683.418 L1742 683.418 L1741.44 683.418 L1740.88 683.418 L1740.32 683.418 L1739.76 683.418 L1739.2 683.418 L1738.64 683.418 L1738.08 683.418 L1737.52 683.418 L1736.97 683.418 L1736.41 683.418 L1735.85 683.418 L1735.29 683.418 L1734.73 683.418 L1734.17 683.418 L1733.61 683.418 L1733.05 683.418 L1732.49 683.418 L1731.93 683.418 L1731.37 683.418 L1730.81 683.418 L1730.25 683.418 L1729.69 683.418 L1729.14 683.418 L1728.58 683.418 L1728.02 683.418 L1727.46 683.418 L1726.9 683.418 L1726.34 683.418 L1725.78 683.418 L1725.22 683.418 L1724.66 683.418 L1724.1 683.418 L1723.54 683.418 L1722.98 683.418 L1722.42 683.418 L1721.87 683.418 L1721.31 683.418 L1720.75 683.418 L1720.19 683.418 L1719.63 683.418 L1719.07 683.418 L1718.51 683.418 L1717.95 683.418 L1717.39 683.418 L1716.83 683.418 L1716.27 683.418 L1715.71 683.418 L1715.15 683.418 L1714.6 683.418 L1714.04 683.418 L1713.48 683.418 L1712.92 683.418 L1712.36 683.418 L1711.8 683.418 L1711.24 683.418 L1710.68 683.418 L1710.12 683.418 L1709.56 683.418 L1709 683.418 L1708.44 683.418 L1707.88 683.418 L1707.32 683.418 L1706.77 683.418 L1706.21 683.418 L1705.65 683.418 L1705.09 683.418 L1704.53 683.418 L1703.97 683.418 L1703.41 683.418 L1702.85 683.418 L1702.29 683.418 L1701.73 683.418 L1701.17 683.418 L1700.61 683.418 L1700.05 683.418 L1699.5 683.418 L1698.94 683.418 L1698.38 683.418 L1697.82 683.418 L1697.26 683.418 L1696.7 683.418 L1696.14 683.418 L1695.58 683.418 L1695.02 683.418 L1694.46 683.418 L1693.9 683.418 L1693.34 683.418 L1692.78 683.418 L1692.23 683.418 L1691.67 683.418 L1691.11 683.418 L1690.55 683.418 L1689.99 683.418 L1689.43 683.418 L1688.87 683.418 L1688.31 683.418 L1687.75 683.418 L1687.19 683.418 L1686.63 683.418 L1686.07 683.418 L1685.51 683.418 L1684.95 683.418 L1684.4 683.418 L1683.84 683.418 L1683.28 683.418 L1682.72 683.418 L1682.16 683.418 L1681.6 683.418 L1681.04 683.418 L1680.48 683.418 L1679.92 683.418 L1679.36 683.418 L1678.8 683.418 L1678.24 683.418 L1677.68 683.418 L1677.13 683.418 L1676.57 683.418 L1676.01 683.418 L1675.45 683.418 L1674.89 683.418 L1674.33 683.418 L1673.77 683.418 L1673.21 683.418 L1672.65 683.418 L1672.09 683.418 L1671.53 683.418 L1670.97 683.418 L1670.41 683.418 L1669.85 683.418 L1669.3 683.418 L1668.74 683.418 L1668.18 683.418 L1667.62 683.418 L1667.06 683.418 L1666.5 683.418 L1665.94 683.418 L1665.38 683.418 L1664.82 683.418 L1664.26 683.418 L1663.7 683.418 L1663.14 683.418 L1662.58 683.418 L1662.03 683.418 L1661.47 683.418 L1660.91 683.418 L1660.35 683.418 L1659.79 683.418 L1659.23 683.418 L1658.67 683.418 L1658.11 683.418 L1657.55 683.418 L1656.99 683.418 L1656.43 683.418 L1655.87 683.418 L1655.31 683.418 L1654.76 683.418 L1654.2 683.418 L1653.64 683.418 L1653.08 683.418 L1652.52 683.418 L1651.96 683.418 L1651.4 683.418 L1650.84 683.418 L1650.28 683.418 L1649.72 683.418 L1649.16 683.418 L1648.6 683.418 L1648.04 683.418 L1647.48 683.418 L1646.93 683.418 L1646.37 683.418 L1645.81 683.418 L1645.25 683.418 L1644.69 683.418 L1644.13 683.418 L1643.57 683.418 L1643.01 683.418 L1642.45 683.418 L1641.89 683.418 L1641.33 683.418 L1640.77 683.418 L1640.21 683.418 L1639.66 683.418 L1639.1 683.418 L1638.54 683.418 L1637.98 683.418 L1637.42 683.418 L1636.86 683.418 L1636.3 683.418 L1635.74 683.418 L1635.18 683.418 L1634.62 683.418 L1634.06 683.418 L1633.5 683.418 L1632.94 683.418 L1632.39 683.418 L1631.83 683.418 L1631.27 683.418 L1630.71 683.418 L1630.15 683.418 L1629.59 683.418 L1629.03 683.418 L1628.47 683.418 L1627.91 683.418 L1627.35 683.418 L1626.79 683.418 L1626.23 683.418 L1625.67 683.418 L1625.11 683.418 L1624.56 683.418 L1624 683.418 L1623.44 683.418 L1622.88 683.418 L1622.32 683.418 L1621.76 683.418 L1621.2 683.418 L1620.64 683.418 L1620.08 683.418 L1619.52 683.418 L1618.96 683.418 L1618.4 683.418 L1617.84 683.418 L1617.29 683.418 L1616.73 683.418 L1616.17 683.418 L1615.61 683.418 L1615.05 683.418 L1614.49 683.418 L1613.93 683.418 L1613.37 683.418 L1612.81 683.418 L1612.25 683.418 L1611.69 683.418 L1611.13 683.418 L1610.57 683.418 L1610.02 683.418 L1609.46 683.418 L1608.9 683.418 L1608.34 683.418 L1607.78 683.418 L1607.22 683.418 L1606.66 683.418 L1606.1 683.418 L1605.54 683.418 L1604.98 683.418 L1604.42 683.418 L1603.86 683.418 L1603.3 683.418 L1602.74 683.418 L1602.19 683.418 L1601.63 683.418 L1601.07 683.418 L1600.51 683.418 L1599.95 683.418 L1599.39 683.418 L1598.83 683.418 L1598.27 683.418 L1597.71 683.418 L1597.15 683.418 L1596.59 683.418 L1596.03 683.418 L1595.47 683.418 L1594.92 683.418 L1594.36 683.418 L1593.8 683.418 L1593.24 683.418 L1592.68 683.418 L1592.12 683.418 L1591.56 683.418 L1591 683.418 L1590.44 683.418 L1589.88 683.418 L1589.32 683.418 L1588.76 683.418 L1588.2 683.418 L1587.65 683.418 L1587.09 683.418 L1586.53 683.418 L1585.97 683.418 L1585.41 683.418 L1584.85 683.418 L1584.29 683.418 L1583.73 683.418 L1583.17 683.418 L1582.61 683.418 L1582.05 683.418 L1581.49 683.418 L1580.93 683.418 L1580.37 683.418 L1579.82 683.418 L1579.26 683.418 L1578.7 683.418 L1578.14 683.418 L1577.58 683.418 L1577.02 683.418 L1576.46 683.418 L1575.9 683.418 L1575.34 683.418 L1574.78 683.418 L1574.22 683.418 L1573.66 683.418 L1573.1 683.418 L1572.55 683.418 L1571.99 683.418 L1571.43 683.418 L1570.87 683.418 L1570.31 683.418 L1569.75 683.418 L1569.19 683.418 L1568.63 683.418 L1568.07 683.418 L1567.51 683.418 L1566.95 683.418 L1566.39 683.418 L1565.83 683.418 L1565.28 683.418 L1564.72 683.418 L1564.16 683.418 L1563.6 683.418 L1563.04 683.418 L1562.48 683.418 L1561.92 683.418 L1561.36 683.418 L1560.8 683.418 L1560.24 683.418 L1559.68 683.418 L1559.12 683.418 L1558.56 683.418 L1558 683.418 L1557.45 683.418 L1556.89 683.418 L1556.33 683.418 L1555.77 683.418 L1555.21 683.418 L1554.65 683.418 L1554.09 683.418 L1553.53 683.418 L1552.97 683.418 L1552.41 683.418 L1551.85 683.418 L1551.29 683.418 L1550.73 683.418 L1550.18 683.418 L1549.62 683.418 L1549.06 683.418 L1548.5 683.418 L1547.94 683.418 L1547.38 683.418 L1546.82 683.418 L1546.26 683.418 L1545.7 683.418 L1545.14 683.418 L1544.58 683.418 L1544.02 683.418 L1543.46 683.418 L1542.9 683.418 L1542.35 683.418 L1541.79 683.418 L1541.23 683.418 L1540.67 683.418 L1540.11 683.418 L1539.55 683.418 L1538.99 683.418 L1538.43 683.418 L1537.87 683.418 L1537.31 683.418 L1536.75 683.418 L1536.19 683.418 L1535.63 683.418 L1535.08 683.418 L1534.52 683.418 L1533.96 683.418 L1533.4 683.418 L1532.84 683.418 L1532.28 683.418 L1531.72 683.418 L1531.16 683.418 L1530.6 683.418 L1530.04 683.418 L1529.48 683.418 L1528.92 683.418 L1528.36 683.418 L1527.81 683.418 L1527.25 683.418 L1526.69 683.418 L1526.13 683.418 L1525.57 683.418 L1525.01 683.418 L1524.45 683.418 L1523.89 683.418 L1523.33 683.418 L1522.77 683.418 L1522.21 683.418 L1521.65 683.418 L1521.09 683.418 L1520.53 683.418 L1519.98 683.418 L1519.42 683.418 L1518.86 683.418 L1518.3 683.418 L1517.74 683.418 L1517.18 683.418 L1516.62 683.418 L1516.06 683.418 L1515.5 683.418 L1514.94 683.418 L1514.38 683.418 L1513.82 683.418 L1513.26 683.418 L1512.71 683.418 L1512.15 683.418 L1511.59 683.418 L1511.03 683.418 L1510.47 683.418 L1509.91 683.418 L1509.35 683.418 L1508.79 683.418 L1508.23 683.418 L1507.67 683.418 L1507.11 683.418 L1506.55 683.418 L1505.99 683.418 L1505.44 683.418 L1504.88 683.418 L1504.32 683.418 L1503.76 683.418 L1503.2 683.418 L1502.64 683.418 L1502.08 683.418 L1501.52 683.418 L1500.96 683.418 L1500.4 683.418 L1499.84 683.418 L1499.28 683.418 L1498.72 683.418 L1498.16 683.418 L1497.61 683.418 L1497.05 683.418 L1496.49 683.418 L1495.93 683.418 L1495.37 683.418 L1494.81 683.418 L1494.25 683.418 L1493.69 683.418 L1493.13 683.418 L1492.57 683.418 L1492.01 683.418 L1491.45 683.418 L1490.89 683.418 L1490.34 683.418 L1489.78 683.418 L1489.22 683.418 L1488.66 683.418 L1488.1 683.418 L1487.54 683.418 L1486.98 683.418 L1486.42 683.418 L1485.86 683.418 L1485.3 683.418 L1484.74 683.418 L1484.18 683.418 L1483.62 683.418 L1483.07 683.418 L1482.51 683.418 L1481.95 683.418 L1481.39 683.418 L1480.83 683.418 L1480.27 683.418 L1479.71 683.418 L1479.15 683.418 L1478.59 683.418 L1478.03 683.418 L1477.47 683.418 L1476.91 683.418 L1476.35 683.418 L1475.79 683.418 L1475.24 683.418 L1474.68 683.418 L1474.12 683.418 L1473.56 683.418 L1473 683.418 L1472.44 683.418 L1471.88 683.418 L1471.32 683.418 L1470.76 683.418 L1470.2 683.418 L1469.64 683.418 L1469.08 683.418 L1468.52 683.418 L1467.97 683.418 L1467.41 683.418 L1466.85 683.418 L1466.29 683.418 L1465.73 683.418 L1465.17 683.418 L1464.61 683.418 L1464.05 683.418 L1463.49 683.418 L1462.93 683.418 L1462.37 683.418 L1461.81 683.418 L1461.25 683.418 L1460.7 683.418 L1460.14 683.418 L1459.58 683.418 L1459.02 683.418 L1458.46 683.418 L1457.9 683.418 L1457.34 683.418 L1456.78 683.418 L1456.22 683.418 L1455.66 683.418 L1455.1 683.418 L1454.54 683.418 L1453.98 683.418 L1453.42 683.418 L1452.87 683.418 L1452.31 683.418 L1451.75 683.418 L1451.19 683.418 L1450.63 683.418 L1450.07 683.418 L1449.51 683.418 L1448.95 683.418 L1448.39 683.418 L1447.83 683.418 L1447.27 683.418 L1446.71 683.418 L1446.15 683.418 L1445.6 683.418 L1445.04 683.418 L1444.48 683.418 L1443.92 683.418 L1443.36 683.418 L1442.8 683.418 L1442.24 683.418 L1441.68 683.418 L1441.12 683.418 L1440.56 683.418 L1440 683.418 L1439.44 683.418 L1438.88 683.418 L1438.33 683.418 L1437.77 683.418 L1437.21 683.418 L1436.65 683.418 L1436.09 683.418 L1435.53 683.418 L1434.97 683.418 L1434.41 683.418 L1433.85 683.418 L1433.29 683.418 L1432.73 683.418 L1432.17 683.418 L1431.61 683.418 L1431.05 683.418 L1430.5 683.418 L1429.94 683.418 L1429.38 683.418 L1428.82 683.418 L1428.26 683.418 L1427.7 683.418 L1427.14 683.418 L1426.58 683.418 L1426.02 683.418 L1425.46 683.418 L1424.9 683.418 L1424.34 683.418 L1423.78 683.418 L1423.23 683.418 L1422.67 683.418 L1422.11 683.418 L1421.55 683.418 L1420.99 683.418 L1420.43 683.418 L1419.87 683.418 L1419.31 683.418 L1418.75 683.418 L1418.19 683.418 L1417.63 683.418 L1417.07 683.418 L1416.51 683.418 L1415.95 683.418 L1415.4 683.418 L1414.84 683.418 L1414.28 683.418 L1413.72 683.418 L1413.16 683.418 L1412.6 683.418 L1412.04 683.418 L1411.48 683.418 L1410.92 683.418 L1410.36 683.418 L1409.8 683.418 L1409.24 683.418 L1408.68 683.418 L1408.13 683.418 L1407.57 683.418 L1407.01 683.418 L1406.45 683.418 L1405.89 683.418 L1405.33 683.418 L1404.77 683.418 L1404.21 683.418 L1403.65 683.418 L1403.09 683.418 L1402.53 683.418 L1401.97 683.418 L1401.41 683.418 L1400.86 683.418 L1400.3 683.418 L1399.74 683.418 L1399.18 683.418 L1398.62 683.418 L1398.06 683.418 L1397.5 683.418 L1396.94 683.418 L1396.38 683.418 L1395.82 683.418 L1395.26 683.418 L1394.7 683.418 L1394.14 683.418 L1393.58 683.418 L1393.03 683.418 L1392.47 683.418 L1391.91 683.418 L1391.35 683.418 L1390.79 683.418 L1390.23 683.418 L1389.67 683.418 L1389.11 683.418 L1388.55 683.418 L1387.99 683.418 L1387.43 683.418 L1386.87 683.418 L1386.31 683.418 L1385.76 683.418 L1385.2 683.418 L1384.64 683.418 L1384.08 683.418 L1383.52 683.418 L1382.96 683.418 L1382.4 683.418 L1381.84 683.418 L1381.28 683.418 L1380.72 683.418 L1380.16 683.418 L1379.6 683.418 L1379.04 683.418 L1378.49 683.418 L1377.93 683.418 L1377.37 683.418 L1376.81 683.418 L1376.25 683.418 L1375.69 683.418 L1375.13 683.418 L1374.57 683.418 L1374.01 683.418 L1373.45 683.418 L1372.89 683.418 L1372.33 683.418 L1371.77 683.418 L1371.21 683.418 L1370.66 683.418 L1370.1 683.418 L1369.54 683.418 L1368.98 683.418 L1368.42 683.418 L1367.86 683.418 L1367.3 683.418 L1366.74 683.418 L1366.18 683.418 L1365.62 683.418 L1365.06 683.418 L1364.5 683.418 L1363.94 683.418 L1363.39 683.418 L1362.83 683.418 L1362.27 683.418 L1361.71 683.418 L1361.15 683.418 L1360.59 683.418 L1360.03 683.418 L1359.47 683.418 L1358.91 683.418 L1358.35 683.418 L1357.79 683.418 L1357.23 683.418 L1356.67 683.418 L1356.12 683.418 L1355.56 683.418 L1355 683.418 L1354.44 683.418 L1353.88 683.418 L1353.32 683.418 L1352.76 683.418 L1352.2 683.418 L1351.64 683.418 L1351.08 683.418 L1350.52 683.418 L1349.96 683.418 L1349.4 683.418 L1348.84 683.418 L1348.29 683.418 L1347.73 683.418 L1347.17 683.418 L1346.61 683.418 L1346.05 683.418 L1345.49 683.418 L1344.93 683.418 L1344.37 683.418 L1343.81 683.418 L1343.25 683.418 L1342.69 683.418 L1342.13 683.418 L1341.57 683.418 L1341.02 683.418 L1340.46 683.418 L1339.9 683.418 L1339.34 683.418 L1338.78 683.418 L1338.22 683.418 L1337.66 683.418 L1337.1 683.418 L1336.54 683.418 L1335.98 683.418 L1335.42 683.418 L1334.86 683.418 L1334.3 683.418 L1333.75 683.418 L1333.19 683.418 L1332.63 683.418 L1332.07 683.418 L1331.51 683.418 L1330.95 683.418 L1330.39 683.418 L1329.83 683.418 L1329.27 683.418 L1328.71 683.418 L1328.15 683.418 L1327.59 683.418 L1327.03 683.418 L1326.47 683.418 L1325.92 683.418 L1325.36 683.418 L1324.8 683.418 L1324.24 683.418 L1323.68 683.418 L1323.12 683.418 L1322.56 683.418 L1322 683.418 L1321.44 683.418 L1320.88 683.418 L1320.32 683.418 L1319.76 683.418 L1319.2 683.418 L1318.65 683.418 L1318.09 683.418 L1317.53 683.418 L1316.97 683.418 L1316.41 683.418 L1315.85 683.418 L1315.29 683.418 L1314.73 683.418 L1314.17 683.418 L1313.61 683.418 L1313.05 683.418 L1312.49 683.418 L1311.93 683.418 L1311.38 683.418 L1310.82 683.418 L1310.26 683.418 L1309.7 683.418 L1309.14 683.418 L1308.58 683.418 L1308.02 683.418 L1307.46 683.418 L1306.9 683.418 L1306.34 683.418 L1305.78 683.418 L1305.22 683.418 L1304.66 683.418 L1304.1 683.418 L1303.55 683.418 L1302.99 683.418 L1302.43 683.418 L1301.87 683.418 L1301.31 683.418 L1300.75 683.418 L1300.19 683.418 L1299.63 683.418 L1299.07 683.418 L1298.51 683.418 L1297.95 683.418 L1297.39 683.418 L1296.83 683.418 L1296.28 683.418 L1295.72 683.418 L1295.16 683.418 L1294.6 683.418 L1294.04 683.418 L1293.48 683.418 L1292.92 683.418 L1292.36 683.418 L1291.8 683.418 L1291.24 683.418 L1290.68 683.418 L1290.12 683.418 L1289.56 683.418 L1289 683.418 L1288.45 683.418 L1287.89 683.418 L1287.33 683.418 L1286.77 683.418 L1286.21 683.418 L1285.65 683.418 L1285.09 683.418 L1284.53 683.418 L1283.97 683.418 L1283.41 683.418 L1282.85 683.418 L1282.29 683.418 L1281.73 683.418 L1281.18 683.418 L1280.62 683.418 L1280.06 683.418 L1279.5 683.418 L1278.94 683.418 L1278.38 683.418 L1277.82 683.418 L1277.26 683.418 L1276.7 683.418 L1276.14 683.418 L1275.58 683.418 L1275.02 683.418 L1274.46 683.418 L1273.91 683.418 L1273.35 683.418 L1272.79 683.418 L1272.23 683.418 L1271.67 683.418 L1271.11 683.418 L1270.55 683.418 L1269.99 683.418 L1269.43 683.418 L1268.87 683.418 L1268.31 683.418 L1267.75 683.418 L1267.19 683.418 L1266.63 683.418 L1266.08 683.418 L1265.52 683.418 L1264.96 683.418 L1264.4 683.418 L1263.84 683.418 L1263.28 683.418 L1262.72 683.418 L1262.16 683.418 L1261.6 683.418 L1261.04 683.418 L1260.48 683.418 L1259.92 683.418 L1259.36 683.418 L1258.81 683.418 L1258.25 683.418 L1257.69 683.418 L1257.13 683.418 L1256.57 683.418 L1256.01 683.418 L1255.45 683.418 L1254.89 683.418 L1254.33 683.418 L1253.77 683.418 L1253.21 683.418 L1252.65 683.418 L1252.09 683.418 L1251.54 683.418 L1250.98 683.418 L1250.42 683.418 L1249.86 683.418 L1249.3 683.418 L1248.74 683.418 L1248.18 683.418 L1247.62 683.418 L1247.06 683.418 L1246.5 683.418 L1245.94 683.418 L1245.38 683.418 L1244.82 683.418 L1244.26 683.418 L1243.71 683.418 L1243.15 683.418 L1242.59 683.418 L1242.03 683.418 L1241.47 683.418 L1240.91 683.418 L1240.35 683.418 L1239.79 683.418 L1239.23 683.418 L1238.67 683.418 L1238.11 683.418 L1237.55 683.418 L1236.99 683.418 L1236.44 683.418 L1235.88 683.418 L1235.32 683.418 L1234.76 683.418 L1234.2 683.418 L1233.64 683.418 L1233.08 683.418 L1232.52 683.418 L1231.96 683.418 L1231.4 683.418 L1230.84 683.418 L1230.28 683.418 L1229.72 683.418 L1229.17 683.418 L1228.61 683.418 L1228.05 683.418 L1227.49 683.418 L1226.93 683.418 L1226.37 683.418 L1225.81 683.418 L1225.25 683.418 L1224.69 683.418 L1224.13 683.418 L1223.57 683.418 L1223.01 683.418 L1222.45 683.418 L1221.89 683.418 L1221.34 683.418 L1220.78 683.418 L1220.22 683.418 L1219.66 683.418 L1219.1 683.418 L1218.54 683.418 L1217.98 683.418 L1217.42 683.418 L1216.86 683.418 L1216.3 683.418 L1215.74 683.418 L1215.18 683.418 L1214.62 683.418 L1214.07 683.418 L1213.51 683.418 L1212.95 683.418 L1212.39 683.418 L1211.83 683.418 L1211.27 683.418 L1210.71 683.418 L1210.15 683.418 L1209.59 683.418 L1209.03 683.418 L1208.47 683.418 L1207.91 683.418 L1207.35 683.418 L1206.8 683.418 L1206.24 683.418 L1205.68 683.418 L1205.12 683.418 L1204.56 683.418 L1204 683.418 L1203.44 683.418 L1202.88 683.418 L1202.32 683.418 L1201.76 683.418 L1201.2 683.418 L1200.64 683.418 L1200.08 683.418 L1199.52 683.418 L1198.97 683.418 L1198.41 683.418 L1197.85 683.418 L1197.29 683.418 L1196.73 683.418 L1196.17 683.418 L1195.61 683.418 L1195.05 683.418 L1194.49 683.418 L1193.93 683.418 L1193.37 683.418 L1192.81 683.418 L1192.25 683.418 L1191.7 683.418 L1191.14 683.418 L1190.58 683.418 L1190.02 683.418 L1189.46 683.418 L1188.9 683.418 L1188.34 683.418 L1187.78 683.418 L1187.22 683.418 L1186.66 683.418 L1186.1 683.418 L1185.54 683.418 L1184.98 683.418 L1184.43 683.418 L1183.87 683.418 L1183.31 683.418 L1182.75 683.418 L1182.19 683.418 L1181.63 683.418 L1181.07 683.418 L1180.51 683.418 L1179.95 683.418 L1179.39 683.418 L1178.83 683.418 L1178.27 683.418 L1177.71 683.418 L1177.15 683.418 L1176.6 683.418 L1176.04 683.418 L1175.48 683.418 L1174.92 683.418 L1174.36 683.418 L1173.8 683.418 L1173.24 683.418 L1172.68 683.418 L1172.12 683.418 L1171.56 683.418 L1171 683.418 L1170.44 683.418 L1169.88 683.418 L1169.33 683.418 L1168.77 683.418 L1168.21 683.418 L1167.65 683.418 L1167.09 683.418 L1166.53 683.418 L1165.97 683.418 L1165.41 683.418 L1164.85 683.418 L1164.29 683.418 L1163.73 683.418 L1163.17 683.418 L1162.61 683.418 L1162.05 683.418 L1161.5 683.418 L1160.94 683.418 L1160.38 683.418 L1159.82 683.418 L1159.26 683.418 L1158.7 683.418 L1158.14 683.418 L1157.58 683.418 L1157.02 683.418 L1156.46 683.418 L1155.9 683.418 L1155.34 683.418 L1154.78 683.418 L1154.23 683.418 L1153.67 683.418 L1153.11 683.418 L1152.55 683.418 L1151.99 683.418 L1151.43 683.418 L1150.87 683.418 L1150.31 683.418 L1149.75 683.418 L1149.19 683.418 L1148.63 683.418 L1148.07 683.418 L1147.51 683.418 L1146.96 683.418 L1146.4 683.418 L1145.84 683.418 L1145.28 683.418 L1144.72 683.418 L1144.16 683.418 L1143.6 683.418 L1143.04 683.418 L1142.48 683.418 L1141.92 683.418 L1141.36 683.418 L1140.8 683.418 L1140.24 683.418 L1139.68 683.418 L1139.13 683.418 L1138.57 683.418 L1138.01 683.418 L1137.45 683.418 L1136.89 683.418 L1136.33 683.418 L1135.77 683.418 L1135.21 683.418 L1134.65 683.418 L1134.09 683.418 L1133.53 683.418 L1132.97 683.418 L1132.41 683.418 L1131.86 683.418 L1131.3 683.418 L1130.74 683.418 L1130.18 683.418 L1129.62 683.418 L1129.06 683.418 L1128.5 683.418 L1127.94 683.418 L1127.38 683.418 L1126.82 683.418 L1126.26 683.418 L1125.7 683.418 L1125.14 683.418 L1124.59 683.418 L1124.03 683.418 L1123.47 683.418 L1122.91 683.418 L1122.35 683.418 L1121.79 683.418 L1121.23 683.418 L1120.67 683.418 L1120.11 683.418 L1119.55 683.418 L1118.99 683.418 L1118.43 683.418 L1117.87 683.418 L1117.31 683.418 L1116.76 683.418 L1116.2 683.418 L1115.64 683.418 L1115.08 683.418 L1114.52 683.418 L1113.96 683.418 L1113.4 683.418 L1112.84 683.418 L1112.28 683.418 L1111.72 683.418 L1111.16 683.418 L1110.6 683.418 L1110.04 683.418 L1109.49 683.418 L1108.93 683.418 L1108.37 683.418 L1107.81 683.418 L1107.25 683.418 L1106.69 683.418 L1106.13 683.418 L1105.57 683.418 L1105.01 683.418 L1104.45 683.418 L1103.89 683.418 L1103.33 683.418 L1102.77 683.418 L1102.22 683.418 L1101.66 683.418 L1101.1 683.418 L1100.54 683.418 L1099.98 683.418 L1099.42 683.418 L1098.86 683.418 L1098.3 683.418 L1097.74 683.418 L1097.18 683.418 L1096.62 683.418 L1096.06 683.418 L1095.5 683.418 L1094.94 683.418 L1094.39 683.418 L1093.83 683.418 L1093.27 683.418 L1092.71 683.418 L1092.15 683.418 L1091.59 683.418 L1091.03 683.418 L1090.47 683.418 L1089.91 683.418 L1089.35 683.418 L1088.79 683.418 L1088.23 683.418 L1087.67 683.418 L1087.12 683.418 L1086.56 683.418 L1086 683.418 L1085.44 683.418 L1084.88 683.418 L1084.32 683.418 L1083.76 683.418 L1083.2 683.418 L1082.64 683.418 L1082.08 683.418 L1081.52 683.418 L1080.96 683.418 L1080.4 683.418 L1079.85 683.418 L1079.29 683.418 L1078.73 683.418 L1078.17 683.418 L1077.61 683.418 L1077.05 683.418 L1076.49 683.418 L1075.93 683.418 L1075.37 683.418 L1074.81 683.418 L1074.25 683.418 L1073.69 683.418 L1073.13 683.418 L1072.57 683.418 L1072.02 683.418 L1071.46 683.418 L1070.9 683.418 L1070.34 683.418 L1069.78 683.418 L1069.22 683.418 L1068.66 683.418 L1068.1 683.418 L1067.54 683.418 L1066.98 683.418 L1066.42 683.418 L1065.86 683.418 L1065.3 683.418 L1064.75 683.418 L1064.19 683.418 L1063.63 683.418 L1063.07 683.418 L1062.51 683.418 L1061.95 683.418 L1061.39 683.418 L1060.83 683.418 L1060.27 683.418 L1059.71 683.418 L1059.15 683.418 L1058.59 683.418 L1058.03 683.418 L1057.48 683.418 L1056.92 683.418 L1056.36 683.418 L1055.8 683.418 L1055.24 683.418 L1054.68 683.418 L1054.12 683.418 L1053.56 683.418 L1053 683.418 L1052.44 683.418 L1051.88 683.418 L1051.32 683.418 L1050.76 683.418 L1050.2 683.418 L1049.65 683.418 L1049.09 683.418 L1048.53 683.418 L1047.97 683.418 L1047.41 683.418 L1046.85 683.418 L1046.29 683.418 L1045.73 683.418 L1045.17 683.418 L1044.61 683.418 L1044.05 683.418 L1043.49 683.418 L1042.93 683.418 L1042.38 683.418 L1041.82 683.418 L1041.26 683.418 L1040.7 683.418 L1040.14 683.418 L1039.58 683.418 L1039.02 683.418 L1038.46 683.418 L1037.9 683.418 L1037.34 683.418 L1036.78 683.418 L1036.22 683.418 L1035.66 683.418 L1035.1 683.418 L1034.55 683.418 L1033.99 683.418 L1033.43 683.418 L1032.87 683.418 L1032.31 683.418 L1031.75 683.418 L1031.19 683.418 L1030.63 683.418 L1030.07 683.418 L1029.51 683.418 L1028.95 683.418 L1028.39 683.418 L1027.83 683.418 L1027.28 683.418 L1026.72 683.418 L1026.16 683.418 L1025.6 683.418 L1025.04 683.418 L1024.48 683.418 L1023.92 683.418 L1023.36 683.418 L1022.8 683.418 L1022.24 683.418 L1021.68 683.418 L1021.12 683.418 L1020.56 683.418 L1020.01 683.418 L1019.45 683.418 L1018.89 683.418 L1018.33 683.418 L1017.77 683.418 L1017.21 683.418 L1016.65 683.418 L1016.09 683.418 L1015.53 683.418 L1014.97 683.418 L1014.41 683.418 L1013.85 683.418 L1013.29 683.418 L1012.73 683.418 L1012.18 683.418 L1011.62 683.418 L1011.06 683.418 L1010.5 683.418 L1009.94 683.418 L1009.38 683.418 L1008.82 683.418 L1008.26 683.418 L1007.7 683.418 L1007.14 683.418 L1006.58 683.418 L1006.02 683.418 L1005.46 683.418 L1004.91 683.418 L1004.35 683.418 L1003.79 683.418 L1003.23 683.418 L1002.67 683.418 L1002.11 683.418 L1001.55 683.418 L1000.99 683.418 L1000.43 683.418 L999.872 683.418 L999.313 683.418 L998.754 683.418 L998.194 683.418 L997.635 683.418 L997.076 683.418 L996.517 683.418 L995.957 683.418 L995.398 683.418 L994.839 683.418 L994.28 683.418 L993.72 683.418 L993.161 683.418 L992.602 683.418 L992.043 683.418 L991.483 683.418 L990.924 683.418 L990.365 683.418 L989.806 683.418 L989.246 683.418 L988.687 683.418 L988.128 683.418 L987.569 683.418 L987.009 683.418 L986.45 683.418 L985.891 683.418 L985.332 683.418 L984.772 683.418 L984.213 683.418 L983.654 683.418 L983.095 683.418 L982.535 683.418 L981.976 683.418 L981.417 683.418 L980.858 683.418 L980.298 683.418 L979.739 683.418 L979.18 683.418 L978.621 683.418 L978.061 683.418 L977.502 683.418 L976.943 683.418 L976.384 683.418 L975.824 683.418 L975.265 683.418 L974.706 683.418 L974.147 683.418 L973.587 683.418 L973.028 683.418 L972.469 683.418 L971.91 683.418 L971.35 683.418 L970.791 683.418 L970.232 683.418 L969.673 683.418 L969.113 683.418 L968.554 683.418 L967.995 683.418 L967.436 683.418 L966.876 683.418 L966.317 683.418 L965.758 683.418 L965.199 683.418 L964.639 683.418 L964.08 683.418 L963.521 683.418 L962.962 683.418 L962.402 683.418 L961.843 683.418 L961.284 683.418 L960.725 683.418 L960.165 683.418 L959.606 683.418 L959.047 683.418 L958.488 683.418 L957.928 683.418 L957.369 683.418 L956.81 683.418 L956.251 683.418 L955.691 683.418 L955.132 683.418 L954.573 683.418 L954.014 683.418 L953.454 683.418 L952.895 683.418 L952.336 683.418 L951.777 683.418 L951.217 683.418 L950.658 683.418 L950.099 683.418 L949.54 683.418 L948.98 683.418 L948.421 683.418 L947.862 683.418 L947.303 683.418 L946.743 683.418 L946.184 683.418 L945.625 683.418 L945.066 683.418 L944.506 683.418 L943.947 683.418 L943.388 683.418 L942.829 683.418 L942.269 683.418 L941.71 683.418 L941.151 683.418 L940.592 683.418 L940.032 683.418 L939.473 683.418 L938.914 683.418 L938.355 683.418 L937.795 683.418 L937.236 683.418 L936.677 683.418 L936.118 683.418 L935.558 683.418 L934.999 683.418 L934.44 683.418 L933.881 683.418 L933.321 683.418 L932.762 683.418 L932.203 683.418 L931.644 683.418 L931.084 683.418 L930.525 683.418 L929.966 683.418 L929.406 683.418 L928.847 683.418 L928.288 683.418 L927.729 683.418 L927.169 683.418 L926.61 683.418 L926.051 683.418 L925.492 683.418 L924.932 683.418 L924.373 683.418 L923.814 683.418 L923.255 683.418 L922.695 683.418 L922.136 683.418 L921.577 683.418 L921.018 683.418 L920.458 683.418 L919.899 683.418 L919.34 683.418 L918.781 683.418 L918.221 683.418 L917.662 683.418 L917.103 683.418 L916.544 683.418 L915.984 683.418 L915.425 683.418 L914.866 683.418 L914.307 683.418 L913.747 683.418 L913.188 683.418 L912.629 683.418 L912.07 683.418 L911.51 683.418 L910.951 683.418 L910.392 683.418 L909.833 683.418 L909.273 683.418 L908.714 683.418 L908.155 683.418 L907.596 683.418 L907.036 683.418 L906.477 683.418 L905.918 683.418 L905.359 683.418 L904.799 683.418 L904.24 683.418 L903.681 683.418 L903.122 683.418 L902.562 683.418 L902.003 683.418 L901.444 683.418 L900.885 683.418 L900.325 683.418 L899.766 683.418 L899.207 683.418 L898.648 683.418 L898.088 683.418 L897.529 683.418 L896.97 683.418 L896.411 683.418 L895.851 683.418 L895.292 683.418 L894.733 683.418 L894.174 683.418 L893.614 683.418 L893.055 683.418 L892.496 683.418 L891.937 683.418 L891.377 683.418 L890.818 683.418 L890.259 683.418 L889.7 683.418 L889.14 683.418 L888.581 683.418 L888.022 683.418 L887.463 683.418 L886.903 683.418 L886.344 683.418 L885.785 683.418 L885.226 683.418 L884.666 683.418 L884.107 683.418 L883.548 683.418 L882.989 683.418 L882.429 683.418 L881.87 683.418 L881.311 683.418 L880.752 683.418 L880.192 683.418 L879.633 683.418 L879.074 683.418 L878.515 683.418 L877.955 683.418 L877.396 683.418 L876.837 683.418 L876.278 683.418 L875.718 683.418 L875.159 683.418 L874.6 683.418 L874.041 683.418 L873.481 683.418 L872.922 683.418 L872.363 683.418 L871.804 683.418 L871.244 683.418 L870.685 683.418 L870.126 683.418 L869.567 683.418 L869.007 683.418 L868.448 683.418 L867.889 683.418 L867.33 683.418 L866.77 683.418 L866.211 683.418 L865.652 683.418 L865.093 683.418 L864.533 683.418 L863.974 683.418 L863.415 683.418 L862.856 683.418 L862.296 683.418 L861.737 683.418 L861.178 683.418 L860.619 683.418 L860.059 683.418 L859.5 683.418 L858.941 683.418 L858.382 683.418 L857.822 683.418 L857.263 683.418 L856.704 683.418 L856.145 683.418 L855.585 683.418 L855.026 683.418 L854.467 683.418 L853.908 683.418 L853.348 683.418 L852.789 683.418 L852.23 683.418 L851.671 683.418 L851.111 683.418 L850.552 683.418 L849.993 683.418 L849.434 683.418 L848.874 683.418 L848.315 683.418 L847.756 683.418 L847.197 683.418 L846.637 683.418 L846.078 683.418 L845.519 683.418 L844.96 683.418 L844.4 683.418 L843.841 683.418 L843.282 683.418 L842.723 683.418 L842.163 683.418 L841.604 683.418 L841.045 683.418 L840.486 683.418 L839.926 683.418 L839.367 683.418 L838.808 683.418 L838.249 683.418 L837.689 683.418 L837.13 683.418 L836.571 683.418 L836.012 683.418 L835.452 683.418 L834.893 683.418 L834.334 683.418 L833.775 683.418 L833.215 683.418 L832.656 683.418 L832.097 683.418 L831.538 683.418 L830.978 683.418 L830.419 683.418 L829.86 683.418 L829.301 683.418 L828.741 683.418 L828.182 683.418 L827.623 683.418 L827.064 683.418 L826.504 683.418 L825.945 683.418 L825.386 683.418 L824.827 683.418 L824.267 683.418 L823.708 683.418 L823.149 683.418 L822.59 683.418 L822.03 683.418 L821.471 683.418 L820.912 683.418 L820.353 683.418 L819.793 683.418 L819.234 683.418 L818.675 683.418 L818.116 683.418 L817.556 683.418 L816.997 683.418 L816.438 683.418 L815.879 683.418 L815.319 683.418 L814.76 683.418 L814.201 683.418 L813.642 683.418 L813.082 683.418 L812.523 683.418 L811.964 683.418 L811.405 683.418 L810.845 683.418 L810.286 683.418 L809.727 683.418 L809.168 683.418 L808.608 683.418 L808.049 683.418 L807.49 683.418 L806.931 683.418 L806.371 683.418 L805.812 683.418 L805.253 683.418 L804.693 683.418 L804.134 683.418 L803.575 683.418 L803.016 683.418 L802.456 683.418 L801.897 683.418 L801.338 683.418 L800.779 683.418 L800.219 683.418 L799.66 683.418 L799.101 683.418 L798.542 683.418 L797.982 683.418 L797.423 683.418 L796.864 683.418 L796.305 683.418 L795.745 683.418 L795.186 683.418 L794.627 683.418 L794.068 683.418 L793.508 683.418 L792.949 683.418 L792.39 683.418 L791.831 683.418 L791.271 683.418 L790.712 683.418 L790.153 683.418 L789.594 683.418 L789.034 683.418 L788.475 683.418 L787.916 683.418 L787.357 683.418 L786.797 683.418 L786.238 683.418 L785.679 683.418 L785.12 683.418 L784.56 683.418 L784.001 683.418 L783.442 683.418 L782.883 683.418 L782.323 683.418 L781.764 683.418 L781.205 683.418 L780.646 683.418 L780.086 683.418 L779.527 683.418 L778.968 683.418 L778.409 683.418 L777.849 683.418 L777.29 683.418 L776.731 683.418 L776.172 683.418 L775.612 683.418 L775.053 683.418 L774.494 683.418 L773.935 683.418 L773.375 683.418 L772.816 683.418 L772.257 683.418 L771.698 683.418 L771.138 683.418 L770.579 683.418 L770.02 683.418 L769.461 683.418 L768.901 683.418 L768.342 683.418 L767.783 683.418 L767.224 683.418 L766.664 683.418 L766.105 683.418 L765.546 683.418 L764.987 683.418 L764.427 683.418 L763.868 683.418 L763.309 683.418 L762.75 683.418 L762.19 683.418 L761.631 683.418 L761.072 683.418 L760.513 683.418 L759.953 683.418 L759.394 683.418 L758.835 683.418 L758.276 683.418 L757.716 683.418 L757.157 683.418 L756.598 683.418 L756.039 683.418 L755.479 683.418 L754.92 683.418 L754.361 683.418 L753.802 683.418 L753.242 683.418 L752.683 683.418 L752.124 683.418 L751.565 683.418 L751.005 683.418 L750.446 683.418 L749.887 683.418 L749.328 683.418 L748.768 683.418 L748.209 683.418 L747.65 683.418 L747.091 683.418 L746.531 683.418 L745.972 683.418 L745.413 683.418 L744.854 683.418 L744.294 683.418 L743.735 683.418 L743.176 683.418 L742.617 683.418 L742.057 683.418 L741.498 683.418 L740.939 683.418 L740.38 683.418 L739.82 683.418 L739.261 683.418 L738.702 683.418 L738.143 683.418 L737.583 683.418 L737.024 683.418 L736.465 683.418 L735.906 683.418 L735.346 683.418 L734.787 683.418 L734.228 683.418 L733.669 683.418 L733.109 683.418 L732.55 683.418 L731.991 683.418 L731.432 683.418 L730.872 683.418 L730.313 683.418 L729.754 683.418 L729.195 683.418 L728.635 683.418 L728.076 683.418 L727.517 683.418 L726.958 683.418 L726.398 683.418 L725.839 683.418 L725.28 683.418 L724.721 683.418 L724.161 683.418 L723.602 683.418 L723.043 683.418 L722.484 683.418 L721.924 683.418 L721.365 683.418 L720.806 683.418 L720.247 683.418  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.099 720.806,687.099 721.365,687.099 721.924,687.099 722.484,687.099 723.043,687.099 723.602,687.099 724.161,687.099 724.721,687.099 725.28,687.099 725.839,687.099 726.398,687.099 726.958,687.099 727.517,687.099 728.076,687.099 728.635,687.099 729.195,687.099 729.754,687.099 730.313,687.099 730.872,687.099 731.432,687.099 731.991,687.099 732.55,687.099 733.109,687.099 733.669,687.099 734.228,687.099 734.787,687.099 735.346,687.099 735.906,687.099 736.465,687.099 737.024,687.099 737.583,687.099 738.143,687.099 738.702,687.099 739.261,687.099 739.82,687.099 740.38,687.099 740.939,687.099 741.498,687.099 742.057,687.099 742.617,687.099 743.176,687.099 743.735,687.099 744.294,687.099 744.854,687.099 745.413,687.099 745.972,687.099 746.531,687.099 747.091,687.099 747.65,687.099 748.209,687.099 748.768,687.099 749.328,687.099 749.887,687.099 750.446,687.099 751.005,687.099 751.565,687.099 752.124,687.099 752.683,687.099 753.242,687.099 753.802,687.099 754.361,687.099 754.92,687.099 755.479,687.099 756.039,687.099 756.598,687.099 757.157,687.099 757.716,687.099 758.276,687.099 758.835,687.099 759.394,687.099 759.953,687.099 760.513,687.099 761.072,687.099 761.631,687.099 762.19,687.099 762.75,687.099 763.309,687.099 763.868,687.099 764.427,687.099 764.987,687.099 765.546,687.099 766.105,687.099 766.664,687.099 767.224,687.099 767.783,687.099 768.342,687.099 768.901,687.099 769.461,687.099 770.02,687.099 770.579,687.099 771.138,687.099 771.698,687.099 772.257,687.099 772.816,687.099 773.375,687.099 773.935,687.099 774.494,687.099 775.053,687.099 775.612,687.099 776.172,687.099 776.731,687.099 777.29,687.099 777.849,687.099 778.409,687.099 778.968,687.099 779.527,687.099 780.086,687.099 780.646,687.099 781.205,687.099 781.764,687.099 782.323,687.099 782.883,687.099 783.442,687.099 784.001,687.099 784.56,687.099 785.12,687.099 785.679,687.099 786.238,687.099 786.797,687.099 787.357,687.099 787.916,687.099 788.475,687.099 789.034,687.099 789.594,687.099 790.153,687.099 790.712,687.099 791.271,687.099 791.831,687.099 792.39,687.099 792.949,687.099 793.508,687.099 794.068,687.099 794.627,687.099 795.186,687.099 795.745,687.099 796.305,687.099 796.864,687.099 797.423,687.099 797.982,687.099 798.542,687.099 799.101,687.099 799.66,687.099 800.219,687.099 800.779,687.099 801.338,687.099 801.897,687.099 802.456,687.099 803.016,687.099 803.575,687.099 804.134,687.099 804.693,687.099 805.253,687.099 805.812,687.099 806.371,687.099 806.931,687.099 807.49,687.099 808.049,687.099 808.608,687.099 809.168,687.099 809.727,687.099 810.286,687.099 810.845,687.099 811.405,687.099 811.964,687.099 812.523,687.099 813.082,687.099 813.642,687.099 814.201,687.099 814.76,687.099 815.319,687.099 815.879,687.099 816.438,687.099 816.997,687.099 817.556,687.099 818.116,687.099 818.675,687.099 819.234,687.099 819.793,687.099 820.353,687.099 820.912,687.099 821.471,687.099 822.03,687.099 822.59,687.099 823.149,687.099 823.708,687.099 824.267,687.099 824.827,687.099 825.386,687.099 825.945,687.099 826.504,687.099 827.064,687.099 827.623,687.099 828.182,687.099 828.741,687.099 829.301,687.099 829.86,687.099 830.419,687.099 830.978,687.099 831.538,687.099 832.097,687.099 832.656,687.099 833.215,687.099 833.775,687.099 834.334,687.099 834.893,687.099 835.452,687.099 836.012,687.099 836.571,687.099 837.13,687.099 837.689,687.099 838.249,687.099 838.808,687.099 839.367,687.099 839.926,687.099 840.486,687.099 841.045,687.099 841.604,687.099 842.163,687.099 842.723,687.099 843.282,687.099 843.841,687.099 844.4,687.099 844.96,687.099 845.519,687.099 846.078,687.099 846.637,687.099 847.197,687.099 847.756,687.099 848.315,687.099 848.874,687.099 849.434,687.099 849.993,687.099 850.552,687.099 851.111,687.099 851.671,687.099 852.23,687.099 852.789,687.099 853.348,687.099 853.908,687.099 854.467,687.099 855.026,687.099 855.585,687.099 856.145,687.099 856.704,687.099 857.263,687.099 857.822,687.099 858.382,687.099 858.941,687.099 859.5,687.099 860.059,687.099 860.619,687.099 861.178,687.099 861.737,687.099 862.296,687.099 862.856,687.099 863.415,687.099 863.974,687.099 864.533,687.099 865.093,687.099 865.652,687.099 866.211,687.099 866.77,687.099 867.33,687.099 867.889,687.099 868.448,687.099 869.007,687.099 869.567,687.099 870.126,687.099 870.685,687.099 871.244,687.099 871.804,687.099 872.363,687.099 872.922,687.099 873.481,687.099 874.041,687.099 874.6,687.099 875.159,687.099 875.718,687.099 876.278,687.099 876.837,687.099 877.396,687.099 877.955,687.099 878.515,687.099 879.074,687.099 879.633,687.099 880.192,687.099 880.752,687.099 881.311,687.099 881.87,687.099 882.429,687.099 882.989,687.099 883.548,687.099 884.107,687.099 884.666,687.099 885.226,687.099 885.785,687.099 886.344,687.099 886.903,687.099 887.463,687.099 888.022,687.099 888.581,687.099 889.14,687.099 889.7,687.099 890.259,687.099 890.818,687.099 891.377,687.099 891.937,687.099 892.496,687.099 893.055,687.099 893.614,687.099 894.174,687.099 894.733,687.099 895.292,687.099 895.851,687.099 896.411,687.099 896.97,687.099 897.529,687.099 898.088,687.099 898.648,687.099 899.207,687.099 899.766,687.099 900.325,687.099 900.885,687.099 901.444,687.099 902.003,687.099 902.562,687.099 903.122,687.099 903.681,687.099 904.24,687.099 904.799,687.099 905.359,687.099 905.918,687.099 906.477,687.099 907.036,687.099 907.596,687.099 908.155,687.099 908.714,687.099 909.273,687.099 909.833,687.099 910.392,687.099 910.951,687.099 911.51,687.099 912.07,687.099 912.629,687.099 913.188,687.099 913.747,687.099 914.307,687.099 914.866,687.099 915.425,687.099 915.984,687.099 916.544,687.099 917.103,687.099 917.662,687.099 918.221,687.099 918.781,687.099 919.34,687.099 919.899,687.099 920.458,687.099 921.018,687.099 921.577,687.099 922.136,687.099 922.695,687.099 923.255,687.099 923.814,687.099 924.373,687.099 924.932,687.099 925.492,687.099 926.051,687.099 926.61,687.099 927.169,687.099 927.729,687.099 928.288,687.099 928.847,687.099 929.406,687.099 929.966,687.099 930.525,687.099 931.084,687.099 931.644,687.099 932.203,687.099 932.762,687.099 933.321,687.099 933.881,687.099 934.44,687.099 934.999,687.099 935.558,687.099 936.118,687.099 936.677,687.099 937.236,687.099 937.795,687.099 938.355,687.099 938.914,687.099 939.473,687.099 940.032,687.099 940.592,687.099 941.151,687.099 941.71,687.099 942.269,687.099 942.829,687.099 943.388,687.099 943.947,687.099 944.506,687.099 945.066,687.099 945.625,687.099 946.184,687.099 946.743,687.099 947.303,687.099 947.862,687.099 948.421,687.099 948.98,687.099 949.54,687.099 950.099,687.099 950.658,687.099 951.217,687.099 951.777,687.099 952.336,687.099 952.895,687.099 953.454,687.099 954.014,687.099 954.573,687.099 955.132,687.099 955.691,687.099 956.251,687.099 956.81,687.099 957.369,687.099 957.928,687.099 958.488,687.099 959.047,687.099 959.606,687.099 960.165,687.099 960.725,687.099 961.284,687.099 961.843,687.099 962.402,687.099 962.962,687.099 963.521,687.099 964.08,687.099 964.639,687.099 965.199,687.099 965.758,687.099 966.317,687.099 966.876,687.099 967.436,687.099 967.995,687.099 968.554,687.099 969.113,687.099 969.673,687.099 970.232,687.099 970.791,687.099 971.35,687.099 971.91,687.099 972.469,687.099 973.028,687.099 973.587,687.099 974.147,687.099 974.706,687.099 975.265,687.099 975.824,687.099 976.384,687.099 976.943,687.099 977.502,687.099 978.061,687.099 978.621,687.099 979.18,687.099 979.739,687.099 980.298,687.099 980.858,687.099 981.417,687.099 981.976,687.099 982.535,687.099 983.095,687.099 983.654,687.099 984.213,687.099 984.772,687.099 985.332,687.099 985.891,687.099 986.45,687.099 987.009,687.099 987.569,687.099 988.128,687.099 988.687,687.099 989.246,687.099 989.806,687.099 990.365,687.099 990.924,687.099 991.483,687.099 992.043,687.099 992.602,687.099 993.161,687.099 993.72,687.099 994.28,687.099 994.839,687.099 995.398,687.099 995.957,687.099 996.517,687.099 997.076,687.099 997.635,687.099 998.194,687.099 998.754,687.099 999.313,687.099 999.872,687.099 1000.43,687.099 1000.99,687.099 1001.55,687.099 1002.11,687.099 1002.67,687.099 1003.23,687.099 1003.79,687.099 1004.35,687.099 1004.91,687.099 1005.46,687.099 1006.02,687.099 1006.58,687.099 1007.14,687.099 1007.7,687.099 1008.26,687.099 1008.82,687.099 1009.38,687.099 1009.94,687.099 1010.5,687.099 1011.06,687.099 1011.62,687.099 1012.18,687.099 1012.73,687.099 1013.29,687.099 1013.85,687.099 1014.41,687.099 1014.97,687.099 1015.53,687.099 1016.09,687.099 1016.65,687.099 1017.21,687.099 1017.77,687.099 1018.33,687.099 1018.89,687.099 1019.45,687.099 1020.01,687.099 1020.56,687.099 1021.12,687.099 1021.68,687.099 1022.24,687.099 1022.8,687.099 1023.36,687.099 1023.92,687.099 1024.48,687.099 1025.04,687.099 1025.6,687.099 1026.16,687.099 1026.72,687.099 1027.28,687.099 1027.83,687.099 1028.39,687.099 1028.95,687.099 1029.51,687.099 1030.07,687.099 1030.63,687.099 1031.19,687.099 1031.75,687.099 1032.31,687.099 1032.87,687.099 1033.43,687.099 1033.99,687.099 1034.55,687.099 1035.1,687.099 1035.66,687.099 1036.22,687.099 1036.78,687.099 1037.34,687.099 1037.9,687.099 1038.46,687.099 1039.02,687.099 1039.58,687.099 1040.14,687.099 1040.7,687.099 1041.26,687.099 1041.82,687.099 1042.38,687.099 1042.93,687.099 1043.49,687.099 1044.05,687.099 1044.61,687.099 1045.17,687.099 1045.73,687.099 1046.29,687.099 1046.85,687.099 1047.41,687.099 1047.97,687.099 1048.53,687.099 1049.09,687.099 1049.65,687.099 1050.2,687.099 1050.76,687.099 1051.32,687.099 1051.88,687.099 1052.44,687.099 1053,687.099 1053.56,687.099 1054.12,687.099 1054.68,687.099 1055.24,687.099 1055.8,687.099 1056.36,687.099 1056.92,687.099 1057.48,687.099 1058.03,687.099 1058.59,687.099 1059.15,687.099 1059.71,687.099 1060.27,687.099 1060.83,687.099 1061.39,687.099 1061.95,687.099 1062.51,687.099 1063.07,687.099 1063.63,687.099 1064.19,687.099 1064.75,687.099 1065.3,687.099 1065.86,687.099 1066.42,687.099 1066.98,687.099 1067.54,687.099 1068.1,687.099 1068.66,687.099 1069.22,687.099 1069.78,687.099 1070.34,687.099 1070.9,687.099 1071.46,687.099 1072.02,687.099 1072.57,687.099 1073.13,687.099 1073.69,687.099 1074.25,687.099 1074.81,687.099 1075.37,687.099 1075.93,687.099 1076.49,687.099 1077.05,687.099 1077.61,687.099 1078.17,687.099 1078.73,687.099 1079.29,687.099 1079.85,687.099 1080.4,687.099 1080.96,687.099 1081.52,687.099 1082.08,687.099 1082.64,687.099 1083.2,687.099 1083.76,687.099 1084.32,687.099 1084.88,687.099 1085.44,687.099 1086,687.099 1086.56,687.099 1087.12,687.099 1087.67,687.099 1088.23,687.099 1088.79,687.099 1089.35,687.099 1089.91,687.099 1090.47,687.099 1091.03,687.099 1091.59,687.099 1092.15,687.099 1092.71,687.099 1093.27,687.099 1093.83,687.099 1094.39,687.099 1094.94,687.099 1095.5,687.099 1096.06,687.099 1096.62,687.099 1097.18,687.099 1097.74,687.099 1098.3,687.099 1098.86,687.099 1099.42,687.099 1099.98,687.099 1100.54,687.099 1101.1,687.099 1101.66,687.099 1102.22,687.099 1102.77,687.099 1103.33,687.099 1103.89,687.099 1104.45,687.099 1105.01,687.099 1105.57,687.099 1106.13,687.099 1106.69,687.099 1107.25,687.099 1107.81,687.099 1108.37,687.099 1108.93,687.099 1109.49,687.099 1110.04,687.099 1110.6,687.099 1111.16,687.099 1111.72,687.099 1112.28,687.099 1112.84,687.099 1113.4,687.099 1113.96,687.099 1114.52,687.099 1115.08,687.099 1115.64,687.099 1116.2,687.099 1116.76,687.099 1117.31,687.099 1117.87,687.099 1118.43,687.099 1118.99,687.099 1119.55,687.099 1120.11,687.099 1120.67,687.099 1121.23,687.099 1121.79,687.099 1122.35,687.099 1122.91,687.099 1123.47,687.099 1124.03,687.099 1124.59,687.099 1125.14,687.099 1125.7,687.099 1126.26,687.099 1126.82,687.099 1127.38,687.099 1127.94,687.099 1128.5,687.099 1129.06,687.099 1129.62,687.099 1130.18,687.099 1130.74,687.099 1131.3,687.099 1131.86,687.099 1132.41,687.099 1132.97,687.099 1133.53,687.099 1134.09,687.099 1134.65,687.099 1135.21,687.099 1135.77,687.099 1136.33,687.099 1136.89,687.099 1137.45,687.099 1138.01,687.099 1138.57,687.099 1139.13,687.099 1139.68,687.099 1140.24,687.099 1140.8,687.099 1141.36,687.099 1141.92,687.099 1142.48,687.099 1143.04,687.099 1143.6,687.099 1144.16,687.099 1144.72,687.099 1145.28,687.099 1145.84,687.099 1146.4,687.099 1146.96,687.099 1147.51,687.099 1148.07,687.099 1148.63,687.099 1149.19,687.099 1149.75,687.099 1150.31,687.099 1150.87,687.099 1151.43,687.099 1151.99,687.099 1152.55,687.099 1153.11,687.099 1153.67,687.099 1154.23,687.099 1154.78,687.099 1155.34,687.099 1155.9,687.099 1156.46,687.099 1157.02,687.099 1157.58,687.099 1158.14,687.099 1158.7,687.099 1159.26,687.099 1159.82,687.099 1160.38,687.099 1160.94,687.099 1161.5,687.099 1162.05,687.099 1162.61,687.099 1163.17,687.099 1163.73,687.099 1164.29,687.099 1164.85,687.099 1165.41,687.099 1165.97,687.099 1166.53,687.099 1167.09,687.099 1167.65,687.099 1168.21,687.099 1168.77,687.099 1169.33,687.099 1169.88,687.099 1170.44,687.099 1171,687.099 1171.56,687.099 1172.12,687.099 1172.68,687.099 1173.24,687.099 1173.8,687.099 1174.36,687.099 1174.92,687.099 1175.48,687.099 1176.04,687.099 1176.6,687.099 1177.15,687.099 1177.71,687.099 1178.27,687.099 1178.83,687.099 1179.39,687.099 1179.95,687.099 1180.51,687.099 1181.07,687.099 1181.63,687.099 1182.19,687.099 1182.75,687.099 1183.31,687.099 1183.87,687.099 1184.43,687.099 1184.98,687.099 1185.54,687.099 1186.1,687.099 1186.66,687.099 1187.22,687.099 1187.78,687.099 1188.34,687.099 1188.9,687.099 1189.46,687.099 1190.02,687.099 1190.58,687.099 1191.14,687.099 1191.7,687.099 1192.25,687.099 1192.81,687.099 1193.37,687.099 1193.93,687.099 1194.49,687.099 1195.05,687.099 1195.61,687.099 1196.17,687.099 1196.73,687.099 1197.29,687.099 1197.85,687.099 1198.41,687.099 1198.97,687.099 1199.52,687.099 1200.08,687.099 1200.64,687.099 1201.2,687.099 1201.76,687.099 1202.32,687.099 1202.88,687.099 1203.44,687.099 1204,687.099 1204.56,687.099 1205.12,687.099 1205.68,687.099 1206.24,687.099 1206.8,687.099 1207.35,687.099 1207.91,687.099 1208.47,687.099 1209.03,687.099 1209.59,687.099 1210.15,687.099 1210.71,687.099 1211.27,687.099 1211.83,687.099 1212.39,687.099 1212.95,687.099 1213.51,687.099 1214.07,687.099 1214.62,687.099 1215.18,687.099 1215.74,687.099 1216.3,687.099 1216.86,687.099 1217.42,687.099 1217.98,687.099 1218.54,687.099 1219.1,687.099 1219.66,687.099 1220.22,687.099 1220.78,687.099 1221.34,687.099 1221.89,687.099 1222.45,687.099 1223.01,687.099 1223.57,687.099 1224.13,687.099 1224.69,687.099 1225.25,687.099 1225.81,687.099 1226.37,687.099 1226.93,687.099 1227.49,687.099 1228.05,687.099 1228.61,687.099 1229.17,687.099 1229.72,687.099 1230.28,687.099 1230.84,687.099 1231.4,687.099 1231.96,687.099 1232.52,687.099 1233.08,687.099 1233.64,687.099 1234.2,687.099 1234.76,687.099 1235.32,687.099 1235.88,687.099 1236.44,687.099 1236.99,687.099 1237.55,687.099 1238.11,687.099 1238.67,687.099 1239.23,687.099 1239.79,687.099 1240.35,687.099 1240.91,687.099 1241.47,687.099 1242.03,687.099 1242.59,687.099 1243.15,687.099 1243.71,687.099 1244.26,687.099 1244.82,687.099 1245.38,687.099 1245.94,687.099 1246.5,687.099 1247.06,687.099 1247.62,687.099 1248.18,687.099 1248.74,687.099 1249.3,687.099 1249.86,687.099 1250.42,687.099 1250.98,687.099 1251.54,687.099 1252.09,687.099 1252.65,687.099 1253.21,687.099 1253.77,687.099 1254.33,687.099 1254.89,687.099 1255.45,687.099 1256.01,687.099 1256.57,687.099 1257.13,687.099 1257.69,687.099 1258.25,687.099 1258.81,687.099 1259.36,687.099 1259.92,687.099 1260.48,687.099 1261.04,687.099 1261.6,687.099 1262.16,687.099 1262.72,687.099 1263.28,687.099 1263.84,687.099 1264.4,687.099 1264.96,687.099 1265.52,687.099 1266.08,687.099 1266.63,687.099 1267.19,687.099 1267.75,687.099 1268.31,687.099 1268.87,687.099 1269.43,687.099 1269.99,687.099 1270.55,687.099 1271.11,687.099 1271.67,687.099 1272.23,687.099 1272.79,687.099 1273.35,687.099 1273.91,687.099 1274.46,687.099 1275.02,687.099 1275.58,687.099 1276.14,687.099 1276.7,687.099 1277.26,687.099 1277.82,687.099 1278.38,687.099 1278.94,687.099 1279.5,687.099 1280.06,687.099 1280.62,687.099 1281.18,687.099 1281.73,687.099 1282.29,687.099 1282.85,687.099 1283.41,687.099 1283.97,687.099 1284.53,687.099 1285.09,687.099 1285.65,687.099 1286.21,687.099 1286.77,687.099 1287.33,687.099 1287.89,687.099 1288.45,687.099 1289,687.099 1289.56,687.099 1290.12,687.099 1290.68,687.099 1291.24,687.099 1291.8,687.099 1292.36,687.099 1292.92,687.099 1293.48,687.099 1294.04,687.099 1294.6,687.099 1295.16,687.099 1295.72,687.099 1296.28,687.099 1296.83,687.099 1297.39,687.099 1297.95,687.099 1298.51,687.099 1299.07,687.099 1299.63,687.099 1300.19,687.099 1300.75,687.099 1301.31,687.099 1301.87,687.099 1302.43,687.099 1302.99,687.099 1303.55,687.099 1304.1,687.099 1304.66,687.099 1305.22,687.099 1305.78,687.099 1306.34,687.099 1306.9,687.099 1307.46,687.099 1308.02,687.099 1308.58,687.099 1309.14,687.099 1309.7,687.099 1310.26,687.099 1310.82,687.099 1311.38,687.099 1311.93,687.099 1312.49,687.099 1313.05,687.099 1313.61,687.099 1314.17,687.099 1314.73,687.099 1315.29,687.099 1315.85,687.099 1316.41,687.099 1316.97,687.099 1317.53,687.099 1318.09,687.099 1318.65,687.099 1319.2,687.099 1319.76,687.099 1320.32,687.099 1320.88,687.099 1321.44,687.099 1322,687.099 1322.56,687.099 1323.12,687.099 1323.68,687.099 1324.24,687.099 1324.8,687.099 1325.36,687.099 1325.92,687.099 1326.47,687.099 1327.03,687.099 1327.59,687.099 1328.15,687.099 1328.71,687.099 1329.27,687.099 1329.83,687.099 1330.39,687.099 1330.95,687.099 1331.51,687.099 1332.07,687.099 1332.63,687.099 1333.19,687.099 1333.75,687.099 1334.3,687.099 1334.86,687.099 1335.42,687.099 1335.98,687.099 1336.54,687.099 1337.1,687.099 1337.66,687.099 1338.22,687.099 1338.78,687.099 1339.34,687.099 1339.9,687.099 1340.46,687.099 1341.02,687.099 1341.57,687.099 1342.13,687.099 1342.69,687.099 1343.25,687.099 1343.81,687.099 1344.37,687.099 1344.93,687.099 1345.49,687.099 1346.05,687.099 1346.61,687.099 1347.17,687.099 1347.73,687.099 1348.29,687.099 1348.84,687.099 1349.4,687.099 1349.96,687.099 1350.52,687.099 1351.08,687.099 1351.64,687.099 1352.2,687.099 1352.76,687.099 1353.32,687.099 1353.88,687.099 1354.44,687.099 1355,687.099 1355.56,687.099 1356.12,687.099 1356.67,687.099 1357.23,687.099 1357.79,687.099 1358.35,687.099 1358.91,687.099 1359.47,687.099 1360.03,687.099 1360.59,687.099 1361.15,687.099 1361.71,687.099 1362.27,687.099 1362.83,687.099 1363.39,687.099 1363.94,687.099 1364.5,687.099 1365.06,687.099 1365.62,687.099 1366.18,687.099 1366.74,687.099 1367.3,687.099 1367.86,687.099 1368.42,687.099 1368.98,687.099 1369.54,687.099 1370.1,687.099 1370.66,687.099 1371.21,687.099 1371.77,687.099 1372.33,687.099 1372.89,687.099 1373.45,687.099 1374.01,687.099 1374.57,687.099 1375.13,687.099 1375.69,687.099 1376.25,687.099 1376.81,687.099 1377.37,687.099 1377.93,687.099 1378.49,687.099 1379.04,687.099 1379.6,687.099 1380.16,687.099 1380.72,687.099 1381.28,687.099 1381.84,687.099 1382.4,687.099 1382.96,687.099 1383.52,687.099 1384.08,687.099 1384.64,687.099 1385.2,687.099 1385.76,687.099 1386.31,687.099 1386.87,687.099 1387.43,687.099 1387.99,687.099 1388.55,687.099 1389.11,687.099 1389.67,687.099 1390.23,687.099 1390.79,687.099 1391.35,687.099 1391.91,687.099 1392.47,687.099 1393.03,687.099 1393.58,687.099 1394.14,687.099 1394.7,687.099 1395.26,687.099 1395.82,687.099 1396.38,687.099 1396.94,687.099 1397.5,687.099 1398.06,687.099 1398.62,687.099 1399.18,687.099 1399.74,687.099 1400.3,687.099 1400.86,687.099 1401.41,687.099 1401.97,687.099 1402.53,687.099 1403.09,687.099 1403.65,687.099 1404.21,687.099 1404.77,687.099 1405.33,687.099 1405.89,687.099 1406.45,687.099 1407.01,687.099 1407.57,687.099 1408.13,687.099 1408.68,687.099 1409.24,687.099 1409.8,687.099 1410.36,687.099 1410.92,687.099 1411.48,687.099 1412.04,687.099 1412.6,687.099 1413.16,687.099 1413.72,687.099 1414.28,687.099 1414.84,687.099 1415.4,687.099 1415.95,687.099 1416.51,687.099 1417.07,687.099 1417.63,687.099 1418.19,687.099 1418.75,687.099 1419.31,687.099 1419.87,687.099 1420.43,687.099 1420.99,687.099 1421.55,687.099 1422.11,687.099 1422.67,687.099 1423.23,687.099 1423.78,687.099 1424.34,687.099 1424.9,687.099 1425.46,687.099 1426.02,687.099 1426.58,687.099 1427.14,687.099 1427.7,687.099 1428.26,687.099 1428.82,687.099 1429.38,687.099 1429.94,687.099 1430.5,687.099 1431.05,687.099 1431.61,687.099 1432.17,687.099 1432.73,687.099 1433.29,687.099 1433.85,687.099 1434.41,687.099 1434.97,687.099 1435.53,687.099 1436.09,687.099 1436.65,687.099 1437.21,687.099 1437.77,687.099 1438.33,687.099 1438.88,687.099 1439.44,687.099 1440,687.099 1440.56,687.099 1441.12,687.099 1441.68,687.099 1442.24,687.099 1442.8,687.099 1443.36,687.099 1443.92,687.099 1444.48,687.099 1445.04,687.099 1445.6,687.099 1446.15,687.099 1446.71,687.099 1447.27,687.099 1447.83,687.099 1448.39,687.099 1448.95,687.099 1449.51,687.099 1450.07,687.099 1450.63,687.099 1451.19,687.099 1451.75,687.099 1452.31,687.099 1452.87,687.099 1453.42,687.099 1453.98,687.099 1454.54,687.099 1455.1,687.099 1455.66,687.099 1456.22,687.099 1456.78,687.099 1457.34,687.099 1457.9,687.099 1458.46,687.099 1459.02,687.099 1459.58,687.099 1460.14,687.099 1460.7,687.099 1461.25,687.099 1461.81,687.099 1462.37,687.099 1462.93,687.099 1463.49,687.099 1464.05,687.099 1464.61,687.099 1465.17,687.099 1465.73,687.099 1466.29,687.099 1466.85,687.099 1467.41,687.099 1467.97,687.099 1468.52,687.099 1469.08,687.099 1469.64,687.099 1470.2,687.099 1470.76,687.099 1471.32,687.099 1471.88,687.099 1472.44,687.099 1473,687.099 1473.56,687.099 1474.12,687.099 1474.68,687.099 1475.24,687.099 1475.79,687.099 1476.35,687.099 1476.91,687.099 1477.47,687.099 1478.03,687.099 1478.59,687.099 1479.15,687.099 1479.71,687.099 1480.27,687.099 1480.83,687.099 1481.39,687.099 1481.95,687.099 1482.51,687.099 1483.07,687.099 1483.62,687.099 1484.18,687.099 1484.74,687.099 1485.3,687.099 1485.86,687.099 1486.42,687.099 1486.98,687.099 1487.54,687.099 1488.1,687.099 1488.66,687.099 1489.22,687.099 1489.78,687.099 1490.34,687.099 1490.89,687.099 1491.45,687.099 1492.01,687.099 1492.57,687.099 1493.13,687.099 1493.69,687.099 1494.25,687.099 1494.81,687.099 1495.37,687.099 1495.93,687.099 1496.49,687.099 1497.05,687.099 1497.61,687.099 1498.16,687.099 1498.72,687.099 1499.28,687.099 1499.84,687.099 1500.4,687.099 1500.96,687.099 1501.52,687.099 1502.08,687.099 1502.64,687.099 1503.2,687.099 1503.76,687.099 1504.32,687.099 1504.88,687.099 1505.44,687.099 1505.99,687.099 1506.55,687.099 1507.11,687.099 1507.67,687.099 1508.23,687.099 1508.79,687.099 1509.35,687.099 1509.91,687.099 1510.47,687.099 1511.03,687.099 1511.59,687.099 1512.15,687.099 1512.71,687.099 1513.26,687.099 1513.82,687.099 1514.38,687.099 1514.94,687.099 1515.5,687.099 1516.06,687.099 1516.62,687.099 1517.18,687.099 1517.74,687.099 1518.3,687.099 1518.86,687.099 1519.42,687.099 1519.98,687.099 1520.53,687.099 1521.09,687.099 1521.65,687.099 1522.21,687.099 1522.77,687.099 1523.33,687.099 1523.89,687.099 1524.45,687.099 1525.01,687.099 1525.57,687.099 1526.13,687.099 1526.69,687.099 1527.25,687.099 1527.81,687.099 1528.36,687.099 1528.92,687.099 1529.48,687.099 1530.04,687.099 1530.6,687.099 1531.16,687.099 1531.72,687.099 1532.28,687.099 1532.84,687.099 1533.4,687.099 1533.96,687.099 1534.52,687.099 1535.08,687.099 1535.63,687.099 1536.19,687.099 1536.75,687.099 1537.31,687.099 1537.87,687.099 1538.43,687.099 1538.99,687.099 1539.55,687.099 1540.11,687.099 1540.67,687.099 1541.23,687.099 1541.79,687.099 1542.35,687.099 1542.9,687.099 1543.46,687.099 1544.02,687.099 1544.58,687.099 1545.14,687.099 1545.7,687.099 1546.26,687.099 1546.82,687.099 1547.38,687.099 1547.94,687.099 1548.5,687.099 1549.06,687.099 1549.62,687.099 1550.18,687.099 1550.73,687.099 1551.29,687.099 1551.85,687.099 1552.41,687.099 1552.97,687.099 1553.53,687.099 1554.09,687.099 1554.65,687.099 1555.21,687.099 1555.77,687.099 1556.33,687.099 1556.89,687.099 1557.45,687.099 1558,687.099 1558.56,687.099 1559.12,687.099 1559.68,687.099 1560.24,687.099 1560.8,687.099 1561.36,687.099 1561.92,687.099 1562.48,687.099 1563.04,687.099 1563.6,687.099 1564.16,687.099 1564.72,687.099 1565.28,687.099 1565.83,687.099 1566.39,687.099 1566.95,687.099 1567.51,687.099 1568.07,687.099 1568.63,687.099 1569.19,687.099 1569.75,687.099 1570.31,687.099 1570.87,687.099 1571.43,687.099 1571.99,687.099 1572.55,687.099 1573.1,687.099 1573.66,687.099 1574.22,687.099 1574.78,687.099 1575.34,687.099 1575.9,687.099 1576.46,687.099 1577.02,687.099 1577.58,687.099 1578.14,687.099 1578.7,687.099 1579.26,687.099 1579.82,687.099 1580.37,687.099 1580.93,687.099 1581.49,687.099 1582.05,687.099 1582.61,687.099 1583.17,687.099 1583.73,687.099 1584.29,687.099 1584.85,687.099 1585.41,687.099 1585.97,687.099 1586.53,687.099 1587.09,687.099 1587.65,687.099 1588.2,687.099 1588.76,687.099 1589.32,687.099 1589.88,687.099 1590.44,687.099 1591,687.099 1591.56,687.099 1592.12,687.099 1592.68,687.099 1593.24,687.099 1593.8,687.099 1594.36,687.099 1594.92,687.099 1595.47,687.099 1596.03,687.099 1596.59,687.099 1597.15,687.099 1597.71,687.099 1598.27,687.099 1598.83,687.099 1599.39,687.099 1599.95,687.099 1600.51,687.099 1601.07,687.099 1601.63,687.099 1602.19,687.099 1602.74,687.099 1603.3,687.099 1603.86,687.099 1604.42,687.099 1604.98,687.099 1605.54,687.099 1606.1,687.099 1606.66,687.099 1607.22,687.099 1607.78,687.099 1608.34,687.099 1608.9,687.099 1609.46,687.099 1610.02,687.099 1610.57,687.099 1611.13,687.099 1611.69,687.099 1612.25,687.099 1612.81,687.099 1613.37,687.099 1613.93,687.099 1614.49,687.099 1615.05,687.099 1615.61,687.099 1616.17,687.099 1616.73,687.099 1617.29,687.099 1617.84,687.099 1618.4,687.099 1618.96,687.099 1619.52,687.099 1620.08,687.099 1620.64,687.099 1621.2,687.099 1621.76,687.099 1622.32,687.099 1622.88,687.099 1623.44,687.099 1624,687.099 1624.56,687.099 1625.11,687.099 1625.67,687.099 1626.23,687.099 1626.79,687.099 1627.35,687.099 1627.91,687.099 1628.47,687.099 1629.03,687.099 1629.59,687.099 1630.15,687.099 1630.71,687.099 1631.27,687.099 1631.83,687.099 1632.39,687.099 1632.94,687.099 1633.5,687.099 1634.06,687.099 1634.62,687.099 1635.18,687.099 1635.74,687.099 1636.3,687.099 1636.86,687.099 1637.42,687.099 1637.98,687.099 1638.54,687.099 1639.1,687.099 1639.66,687.099 1640.21,687.099 1640.77,687.099 1641.33,687.099 1641.89,687.099 1642.45,687.099 1643.01,687.099 1643.57,687.099 1644.13,687.099 1644.69,687.099 1645.25,687.099 1645.81,687.099 1646.37,687.099 1646.93,687.099 1647.48,687.099 1648.04,687.099 1648.6,687.099 1649.16,687.099 1649.72,687.099 1650.28,687.099 1650.84,687.099 1651.4,687.099 1651.96,687.099 1652.52,687.099 1653.08,687.099 1653.64,687.099 1654.2,687.099 1654.76,687.099 1655.31,687.099 1655.87,687.099 1656.43,687.099 1656.99,687.099 1657.55,687.099 1658.11,687.099 1658.67,687.099 1659.23,687.099 1659.79,687.099 1660.35,687.099 1660.91,687.099 1661.47,687.099 1662.03,687.099 1662.58,687.099 1663.14,687.099 1663.7,687.099 1664.26,687.099 1664.82,687.099 1665.38,687.099 1665.94,687.099 1666.5,687.099 1667.06,687.099 1667.62,687.099 1668.18,687.099 1668.74,687.099 1669.3,687.099 1669.85,687.099 1670.41,687.099 1670.97,687.099 1671.53,687.099 1672.09,687.099 1672.65,687.099 1673.21,687.099 1673.77,687.099 1674.33,687.099 1674.89,687.099 1675.45,687.099 1676.01,687.099 1676.57,687.099 1677.13,687.099 1677.68,687.099 1678.24,687.099 1678.8,687.099 1679.36,687.099 1679.92,687.099 1680.48,687.099 1681.04,687.099 1681.6,687.099 1682.16,687.099 1682.72,687.099 1683.28,687.099 1683.84,687.099 1684.4,687.099 1684.95,687.099 1685.51,687.099 1686.07,687.099 1686.63,687.099 1687.19,687.099 1687.75,687.099 1688.31,687.099 1688.87,687.099 1689.43,687.099 1689.99,687.099 1690.55,687.099 1691.11,687.099 1691.67,687.099 1692.23,687.099 1692.78,687.099 1693.34,687.099 1693.9,687.099 1694.46,687.099 1695.02,687.099 1695.58,687.099 1696.14,687.099 1696.7,687.099 1697.26,687.099 1697.82,687.099 1698.38,687.099 1698.94,687.099 1699.5,687.099 1700.05,687.099 1700.61,687.099 1701.17,687.099 1701.73,687.099 1702.29,687.099 1702.85,687.099 1703.41,687.099 1703.97,687.099 1704.53,687.099 1705.09,687.099 1705.65,687.099 1706.21,687.099 1706.77,687.099 1707.32,687.099 1707.88,687.099 1708.44,687.099 1709,687.099 1709.56,687.099 1710.12,687.099 1710.68,687.099 1711.24,687.099 1711.8,687.099 1712.36,687.099 1712.92,687.099 1713.48,687.099 1714.04,687.099 1714.6,687.099 1715.15,687.099 1715.71,687.099 1716.27,687.099 1716.83,687.099 1717.39,687.099 1717.95,687.099 1718.51,687.099 1719.07,687.099 1719.63,687.099 1720.19,687.099 1720.75,687.099 1721.31,687.099 1721.87,687.099 1722.42,687.099 1722.98,687.099 1723.54,687.099 1724.1,687.099 1724.66,687.099 1725.22,687.099 1725.78,687.099 1726.34,687.099 1726.9,687.099 1727.46,687.099 1728.02,687.099 1728.58,687.099 1729.14,687.099 1729.69,687.099 1730.25,687.099 1730.81,687.099 1731.37,687.099 1731.93,687.099 1732.49,687.099 1733.05,687.099 1733.61,687.099 1734.17,687.099 1734.73,687.099 1735.29,687.099 1735.85,687.099 1736.41,687.099 1736.97,687.099 1737.52,687.099 1738.08,687.099 1738.64,687.099 1739.2,687.099 1739.76,687.099 1740.32,687.099 1740.88,687.099 1741.44,687.099 1742,687.099 1742.56,687.099 1743.12,687.099 1743.68,687.099 1744.24,687.099 1744.79,687.099 1745.35,687.099 1745.91,687.099 1746.47,687.099 1747.03,687.099 1747.59,687.099 1748.15,687.099 1748.71,687.099 1749.27,687.099 1749.83,687.099 1750.39,687.099 1750.95,687.099 1751.51,687.099 1752.06,687.099 1752.62,687.099 1753.18,687.099 1753.74,687.099 1754.3,687.099 1754.86,687.099 1755.42,687.099 1755.98,687.099 1756.54,687.099 1757.1,687.099 1757.66,687.099 1758.22,687.099 1758.78,687.099 1759.34,687.099 1759.89,687.099 1760.45,687.099 1761.01,687.099 1761.57,687.099 1762.13,687.099 1762.69,687.099 1763.25,687.099 1763.81,687.099 1764.37,687.099 1764.93,687.099 1765.49,687.099 1766.05,687.099 1766.61,687.099 1767.16,687.099 1767.72,687.099 1768.28,687.099 1768.84,687.099 1769.4,687.099 1769.96,687.099 1770.52,687.099 1771.08,687.099 1771.64,687.099 1772.2,687.099 1772.76,687.099 1773.32,687.099 1773.88,687.099 1774.43,687.099 1774.99,687.099 1775.55,687.099 1776.11,687.099 1776.67,687.099 1777.23,687.099 1777.79,687.099 1778.35,687.099 1778.91,687.099 1779.47,687.099 1780.03,687.099 1780.59,687.099 1781.15,687.099 1781.71,687.099 1782.26,687.099 1782.82,687.099 1783.38,687.099 1783.94,687.099 1784.5,687.099 1785.06,687.099 1785.62,687.099 1786.18,687.099 1786.74,687.099 1787.3,687.099 1787.86,687.099 1788.42,687.099 1788.98,687.099 1789.53,687.099 1790.09,687.099 1790.65,687.099 1791.21,687.099 1791.77,687.099 1792.33,687.099 1792.89,687.099 1793.45,687.099 1794.01,687.099 1794.57,687.099 1795.13,687.099 1795.69,687.099 1796.25,687.099 1796.8,687.099 1797.36,687.099 1797.92,687.099 1798.48,687.099 1799.04,687.099 1799.6,687.099 1800.16,687.099 1800.72,687.099 1801.28,687.099 1801.84,687.099 1802.4,687.099 1802.96,687.099 1803.52,687.099 1804.08,687.099 1804.63,687.099 1805.19,687.099 1805.75,687.099 1806.31,687.099 1806.87,687.099 1807.43,687.099 1807.99,687.099 1808.55,687.099 1809.11,687.099 1809.67,687.099 1810.23,687.099 1810.79,687.099 1811.35,687.099 1811.9,687.099 1812.46,687.099 1813.02,687.099 1813.58,687.099 1814.14,687.099 1814.7,687.099 1815.26,687.099 1815.82,687.099 1816.38,687.099 1816.94,687.099 1817.5,687.099 1818.06,687.099 1818.62,687.099 1819.18,687.099 1819.73,687.099 1820.29,687.099 1820.85,687.099 1821.41,687.099 1821.97,687.099 1822.53,687.099 1823.09,687.099 1823.65,687.099 1824.21,687.099 1824.77,687.099 1825.33,687.099 1825.89,687.099 1826.45,687.099 1827,687.099 1827.56,687.099 1828.12,687.099 1828.68,687.099 1829.24,687.099 1829.8,687.099 1830.36,687.099 1830.92,687.099 1831.48,687.099 1832.04,687.099 1832.6,687.099 1833.16,687.099 1833.72,687.099 1834.27,687.099 1834.83,687.099 1835.39,687.099 1835.95,687.099 1836.51,687.099 1837.07,687.099 1837.63,687.099 1838.19,687.099 \"/>\n<path clip-path=\"url(#clip133)\" d=\"M720.247 683.989 L720.806 683.989 L721.365 683.989 L721.924 683.989 L722.484 683.989 L723.043 683.989 L723.602 683.989 L724.161 683.989 L724.721 683.989 L725.28 683.989 L725.839 683.989 L726.398 683.989 L726.958 683.989 L727.517 683.989 L728.076 683.989 L728.635 683.989 L729.195 683.989 L729.754 683.989 L730.313 683.989 L730.872 683.989 L731.432 683.989 L731.991 683.989 L732.55 683.989 L733.109 683.989 L733.669 683.989 L734.228 683.989 L734.787 683.989 L735.346 683.989 L735.906 683.989 L736.465 683.989 L737.024 683.989 L737.583 683.989 L738.143 683.989 L738.702 683.989 L739.261 683.989 L739.82 683.989 L740.38 683.989 L740.939 683.989 L741.498 683.989 L742.057 683.989 L742.617 683.989 L743.176 683.989 L743.735 683.989 L744.294 683.989 L744.854 683.989 L745.413 683.989 L745.972 683.989 L746.531 683.989 L747.091 683.989 L747.65 683.989 L748.209 683.989 L748.768 683.989 L749.328 683.989 L749.887 683.989 L750.446 683.989 L751.005 683.989 L751.565 683.989 L752.124 683.989 L752.683 683.989 L753.242 683.989 L753.802 683.989 L754.361 683.989 L754.92 683.989 L755.479 683.989 L756.039 683.989 L756.598 683.989 L757.157 683.989 L757.716 683.989 L758.276 683.989 L758.835 683.989 L759.394 683.989 L759.953 683.989 L760.513 683.989 L761.072 683.989 L761.631 683.989 L762.19 683.989 L762.75 683.989 L763.309 683.989 L763.868 683.989 L764.427 683.989 L764.987 683.989 L765.546 683.989 L766.105 683.989 L766.664 683.989 L767.224 683.989 L767.783 683.989 L768.342 683.989 L768.901 683.989 L769.461 683.989 L770.02 683.989 L770.579 683.989 L771.138 683.989 L771.698 683.989 L772.257 683.989 L772.816 683.989 L773.375 683.989 L773.935 683.989 L774.494 683.989 L775.053 683.989 L775.612 683.989 L776.172 683.989 L776.731 683.989 L777.29 683.989 L777.849 683.989 L778.409 683.989 L778.968 683.989 L779.527 683.989 L780.086 683.989 L780.646 683.989 L781.205 683.989 L781.764 683.989 L782.323 683.989 L782.883 683.989 L783.442 683.989 L784.001 683.989 L784.56 683.989 L785.12 683.989 L785.679 683.989 L786.238 683.989 L786.797 683.989 L787.357 683.989 L787.916 683.989 L788.475 683.989 L789.034 683.989 L789.594 683.989 L790.153 683.989 L790.712 683.989 L791.271 683.989 L791.831 683.989 L792.39 683.989 L792.949 683.989 L793.508 683.989 L794.068 683.989 L794.627 683.989 L795.186 683.989 L795.745 683.989 L796.305 683.989 L796.864 683.989 L797.423 683.989 L797.982 683.989 L798.542 683.989 L799.101 683.989 L799.66 683.989 L800.219 683.989 L800.779 683.989 L801.338 683.989 L801.897 683.989 L802.456 683.989 L803.016 683.989 L803.575 683.989 L804.134 683.989 L804.693 683.989 L805.253 683.989 L805.812 683.989 L806.371 683.989 L806.931 683.989 L807.49 683.989 L808.049 683.989 L808.608 683.989 L809.168 683.989 L809.727 683.989 L810.286 683.989 L810.845 683.989 L811.405 683.989 L811.964 683.989 L812.523 683.989 L813.082 683.989 L813.642 683.989 L814.201 683.989 L814.76 683.989 L815.319 683.989 L815.879 683.989 L816.438 683.989 L816.997 683.989 L817.556 683.989 L818.116 683.989 L818.675 683.989 L819.234 683.989 L819.793 683.989 L820.353 683.989 L820.912 683.989 L821.471 683.989 L822.03 683.989 L822.59 683.989 L823.149 683.989 L823.708 683.989 L824.267 683.989 L824.827 683.989 L825.386 683.989 L825.945 683.989 L826.504 683.989 L827.064 683.989 L827.623 683.989 L828.182 683.989 L828.741 683.989 L829.301 683.989 L829.86 683.989 L830.419 683.989 L830.978 683.989 L831.538 683.989 L832.097 683.989 L832.656 683.989 L833.215 683.989 L833.775 683.989 L834.334 683.989 L834.893 683.989 L835.452 683.989 L836.012 683.989 L836.571 683.989 L837.13 683.989 L837.689 683.989 L838.249 683.989 L838.808 683.989 L839.367 683.989 L839.926 683.989 L840.486 683.989 L841.045 683.989 L841.604 683.989 L842.163 683.989 L842.723 683.989 L843.282 683.989 L843.841 683.989 L844.4 683.989 L844.96 683.989 L845.519 683.989 L846.078 683.989 L846.637 683.989 L847.197 683.989 L847.756 683.989 L848.315 683.989 L848.874 683.989 L849.434 683.989 L849.993 683.989 L850.552 683.989 L851.111 683.989 L851.671 683.989 L852.23 683.989 L852.789 683.989 L853.348 683.989 L853.908 683.989 L854.467 683.989 L855.026 683.989 L855.585 683.989 L856.145 683.989 L856.704 683.989 L857.263 683.989 L857.822 683.989 L858.382 683.989 L858.941 683.989 L859.5 683.989 L860.059 683.989 L860.619 683.989 L861.178 683.989 L861.737 683.989 L862.296 683.989 L862.856 683.989 L863.415 683.989 L863.974 683.989 L864.533 683.989 L865.093 683.989 L865.652 683.989 L866.211 683.989 L866.77 683.989 L867.33 683.989 L867.889 683.989 L868.448 683.989 L869.007 683.989 L869.567 683.989 L870.126 683.989 L870.685 683.989 L871.244 683.989 L871.804 683.989 L872.363 683.989 L872.922 683.989 L873.481 683.989 L874.041 683.989 L874.6 683.989 L875.159 683.989 L875.718 683.989 L876.278 683.989 L876.837 683.989 L877.396 683.989 L877.955 683.989 L878.515 683.989 L879.074 683.989 L879.633 683.989 L880.192 683.989 L880.752 683.989 L881.311 683.989 L881.87 683.989 L882.429 683.989 L882.989 683.989 L883.548 683.989 L884.107 683.989 L884.666 683.989 L885.226 683.989 L885.785 683.989 L886.344 683.989 L886.903 683.989 L887.463 683.989 L888.022 683.989 L888.581 683.989 L889.14 683.989 L889.7 683.989 L890.259 683.989 L890.818 683.989 L891.377 683.989 L891.937 683.989 L892.496 683.989 L893.055 683.989 L893.614 683.989 L894.174 683.989 L894.733 683.989 L895.292 683.989 L895.851 683.989 L896.411 683.989 L896.97 683.989 L897.529 683.989 L898.088 683.989 L898.648 683.989 L899.207 683.989 L899.766 683.989 L900.325 683.989 L900.885 683.989 L901.444 683.989 L902.003 683.989 L902.562 683.989 L903.122 683.989 L903.681 683.989 L904.24 683.989 L904.799 683.989 L905.359 683.989 L905.918 683.989 L906.477 683.989 L907.036 683.989 L907.596 683.989 L908.155 683.989 L908.714 683.989 L909.273 683.989 L909.833 683.989 L910.392 683.989 L910.951 683.989 L911.51 683.989 L912.07 683.989 L912.629 683.989 L913.188 683.989 L913.747 683.989 L914.307 683.989 L914.866 683.989 L915.425 683.989 L915.984 683.989 L916.544 683.989 L917.103 683.989 L917.662 683.989 L918.221 683.989 L918.781 683.989 L919.34 683.989 L919.899 683.989 L920.458 683.989 L921.018 683.989 L921.577 683.989 L922.136 683.989 L922.695 683.989 L923.255 683.989 L923.814 683.989 L924.373 683.989 L924.932 683.989 L925.492 683.989 L926.051 683.989 L926.61 683.989 L927.169 683.989 L927.729 683.989 L928.288 683.989 L928.847 683.989 L929.406 683.989 L929.966 683.989 L930.525 683.989 L931.084 683.989 L931.644 683.989 L932.203 683.989 L932.762 683.989 L933.321 683.989 L933.881 683.989 L934.44 683.989 L934.999 683.989 L935.558 683.989 L936.118 683.989 L936.677 683.989 L937.236 683.989 L937.795 683.989 L938.355 683.989 L938.914 683.989 L939.473 683.989 L940.032 683.989 L940.592 683.989 L941.151 683.989 L941.71 683.989 L942.269 683.989 L942.829 683.989 L943.388 683.989 L943.947 683.989 L944.506 683.989 L945.066 683.989 L945.625 683.989 L946.184 683.989 L946.743 683.989 L947.303 683.989 L947.862 683.989 L948.421 683.989 L948.98 683.989 L949.54 683.989 L950.099 683.989 L950.658 683.989 L951.217 683.989 L951.777 683.989 L952.336 683.989 L952.895 683.989 L953.454 683.989 L954.014 683.989 L954.573 683.989 L955.132 683.989 L955.691 683.989 L956.251 683.989 L956.81 683.989 L957.369 683.989 L957.928 683.989 L958.488 683.989 L959.047 683.989 L959.606 683.989 L960.165 683.989 L960.725 683.989 L961.284 683.989 L961.843 683.989 L962.402 683.989 L962.962 683.989 L963.521 683.989 L964.08 683.989 L964.639 683.989 L965.199 683.989 L965.758 683.989 L966.317 683.989 L966.876 683.989 L967.436 683.989 L967.995 683.989 L968.554 683.989 L969.113 683.989 L969.673 683.989 L970.232 683.989 L970.791 683.989 L971.35 683.989 L971.91 683.989 L972.469 683.989 L973.028 683.989 L973.587 683.989 L974.147 683.989 L974.706 683.989 L975.265 683.989 L975.824 683.989 L976.384 683.989 L976.943 683.989 L977.502 683.989 L978.061 683.989 L978.621 683.989 L979.18 683.989 L979.739 683.989 L980.298 683.989 L980.858 683.989 L981.417 683.989 L981.976 683.989 L982.535 683.989 L983.095 683.989 L983.654 683.989 L984.213 683.989 L984.772 683.989 L985.332 683.989 L985.891 683.989 L986.45 683.989 L987.009 683.989 L987.569 683.989 L988.128 683.989 L988.687 683.989 L989.246 683.989 L989.806 683.989 L990.365 683.989 L990.924 683.989 L991.483 683.989 L992.043 683.989 L992.602 683.989 L993.161 683.989 L993.72 683.989 L994.28 683.989 L994.839 683.989 L995.398 683.989 L995.957 683.989 L996.517 683.989 L997.076 683.989 L997.635 683.989 L998.194 683.989 L998.754 683.989 L999.313 683.989 L999.872 683.989 L1000.43 683.989 L1000.99 683.989 L1001.55 683.989 L1002.11 683.989 L1002.67 683.989 L1003.23 683.989 L1003.79 683.989 L1004.35 683.989 L1004.91 683.989 L1005.46 683.989 L1006.02 683.989 L1006.58 683.989 L1007.14 683.989 L1007.7 683.989 L1008.26 683.989 L1008.82 683.989 L1009.38 683.989 L1009.94 683.989 L1010.5 683.989 L1011.06 683.989 L1011.62 683.989 L1012.18 683.989 L1012.73 683.989 L1013.29 683.989 L1013.85 683.989 L1014.41 683.989 L1014.97 683.989 L1015.53 683.989 L1016.09 683.989 L1016.65 683.989 L1017.21 683.989 L1017.77 683.989 L1018.33 683.989 L1018.89 683.989 L1019.45 683.989 L1020.01 683.989 L1020.56 683.989 L1021.12 683.989 L1021.68 683.989 L1022.24 683.989 L1022.8 683.989 L1023.36 683.989 L1023.92 683.989 L1024.48 683.989 L1025.04 683.989 L1025.6 683.989 L1026.16 683.989 L1026.72 683.989 L1027.28 683.989 L1027.83 683.989 L1028.39 683.989 L1028.95 683.989 L1029.51 683.989 L1030.07 683.989 L1030.63 683.989 L1031.19 683.989 L1031.75 683.989 L1032.31 683.989 L1032.87 683.989 L1033.43 683.989 L1033.99 683.989 L1034.55 683.989 L1035.1 683.989 L1035.66 683.989 L1036.22 683.989 L1036.78 683.989 L1037.34 683.989 L1037.9 683.989 L1038.46 683.989 L1039.02 683.989 L1039.58 683.989 L1040.14 683.989 L1040.7 683.989 L1041.26 683.989 L1041.82 683.989 L1042.38 683.989 L1042.93 683.989 L1043.49 683.989 L1044.05 683.989 L1044.61 683.989 L1045.17 683.989 L1045.73 683.989 L1046.29 683.989 L1046.85 683.989 L1047.41 683.989 L1047.97 683.989 L1048.53 683.989 L1049.09 683.989 L1049.65 683.989 L1050.2 683.989 L1050.76 683.989 L1051.32 683.989 L1051.88 683.989 L1052.44 683.989 L1053 683.989 L1053.56 683.989 L1054.12 683.989 L1054.68 683.989 L1055.24 683.989 L1055.8 683.989 L1056.36 683.989 L1056.92 683.989 L1057.48 683.989 L1058.03 683.989 L1058.59 683.989 L1059.15 683.989 L1059.71 683.989 L1060.27 683.989 L1060.83 683.989 L1061.39 683.989 L1061.95 683.989 L1062.51 683.989 L1063.07 683.989 L1063.63 683.989 L1064.19 683.989 L1064.75 683.989 L1065.3 683.989 L1065.86 683.989 L1066.42 683.989 L1066.98 683.989 L1067.54 683.989 L1068.1 683.989 L1068.66 683.989 L1069.22 683.989 L1069.78 683.989 L1070.34 683.989 L1070.9 683.989 L1071.46 683.989 L1072.02 683.989 L1072.57 683.989 L1073.13 683.989 L1073.69 683.989 L1074.25 683.989 L1074.81 683.989 L1075.37 683.989 L1075.93 683.989 L1076.49 683.989 L1077.05 683.989 L1077.61 683.989 L1078.17 683.989 L1078.73 683.989 L1079.29 683.989 L1079.85 683.989 L1080.4 683.989 L1080.96 683.989 L1081.52 683.989 L1082.08 683.989 L1082.64 683.989 L1083.2 683.989 L1083.76 683.989 L1084.32 683.989 L1084.88 683.989 L1085.44 683.989 L1086 683.989 L1086.56 683.989 L1087.12 683.989 L1087.67 683.989 L1088.23 683.989 L1088.79 683.989 L1089.35 683.989 L1089.91 683.989 L1090.47 683.989 L1091.03 683.989 L1091.59 683.989 L1092.15 683.989 L1092.71 683.989 L1093.27 683.989 L1093.83 683.989 L1094.39 683.989 L1094.94 683.989 L1095.5 683.989 L1096.06 683.989 L1096.62 683.989 L1097.18 683.989 L1097.74 683.989 L1098.3 683.989 L1098.86 683.989 L1099.42 683.989 L1099.98 683.989 L1100.54 683.989 L1101.1 683.989 L1101.66 683.989 L1102.22 683.989 L1102.77 683.989 L1103.33 683.989 L1103.89 683.989 L1104.45 683.989 L1105.01 683.989 L1105.57 683.989 L1106.13 683.989 L1106.69 683.989 L1107.25 683.989 L1107.81 683.989 L1108.37 683.989 L1108.93 683.989 L1109.49 683.989 L1110.04 683.989 L1110.6 683.989 L1111.16 683.989 L1111.72 683.989 L1112.28 683.989 L1112.84 683.989 L1113.4 683.989 L1113.96 683.989 L1114.52 683.989 L1115.08 683.989 L1115.64 683.989 L1116.2 683.989 L1116.76 683.989 L1117.31 683.989 L1117.87 683.989 L1118.43 683.989 L1118.99 683.989 L1119.55 683.989 L1120.11 683.989 L1120.67 683.989 L1121.23 683.989 L1121.79 683.989 L1122.35 683.989 L1122.91 683.989 L1123.47 683.989 L1124.03 683.989 L1124.59 683.989 L1125.14 683.989 L1125.7 683.989 L1126.26 683.989 L1126.82 683.989 L1127.38 683.989 L1127.94 683.989 L1128.5 683.989 L1129.06 683.989 L1129.62 683.989 L1130.18 683.989 L1130.74 683.989 L1131.3 683.989 L1131.86 683.989 L1132.41 683.989 L1132.97 683.989 L1133.53 683.989 L1134.09 683.989 L1134.65 683.989 L1135.21 683.989 L1135.77 683.989 L1136.33 683.989 L1136.89 683.989 L1137.45 683.989 L1138.01 683.989 L1138.57 683.989 L1139.13 683.989 L1139.68 683.989 L1140.24 683.989 L1140.8 683.989 L1141.36 683.989 L1141.92 683.989 L1142.48 683.989 L1143.04 683.989 L1143.6 683.989 L1144.16 683.989 L1144.72 683.989 L1145.28 683.989 L1145.84 683.989 L1146.4 683.989 L1146.96 683.989 L1147.51 683.989 L1148.07 683.989 L1148.63 683.989 L1149.19 683.989 L1149.75 683.989 L1150.31 683.989 L1150.87 683.989 L1151.43 683.989 L1151.99 683.989 L1152.55 683.989 L1153.11 683.989 L1153.67 683.989 L1154.23 683.989 L1154.78 683.989 L1155.34 683.989 L1155.9 683.989 L1156.46 683.989 L1157.02 683.989 L1157.58 683.989 L1158.14 683.989 L1158.7 683.989 L1159.26 683.989 L1159.82 683.989 L1160.38 683.989 L1160.94 683.989 L1161.5 683.989 L1162.05 683.989 L1162.61 683.989 L1163.17 683.989 L1163.73 683.989 L1164.29 683.989 L1164.85 683.989 L1165.41 683.989 L1165.97 683.989 L1166.53 683.989 L1167.09 683.989 L1167.65 683.989 L1168.21 683.989 L1168.77 683.989 L1169.33 683.989 L1169.88 683.989 L1170.44 683.989 L1171 683.989 L1171.56 683.989 L1172.12 683.989 L1172.68 683.989 L1173.24 683.989 L1173.8 683.989 L1174.36 683.989 L1174.92 683.989 L1175.48 683.989 L1176.04 683.989 L1176.6 683.989 L1177.15 683.989 L1177.71 683.989 L1178.27 683.989 L1178.83 683.989 L1179.39 683.989 L1179.95 683.989 L1180.51 683.989 L1181.07 683.989 L1181.63 683.989 L1182.19 683.989 L1182.75 683.989 L1183.31 683.989 L1183.87 683.989 L1184.43 683.989 L1184.98 683.989 L1185.54 683.989 L1186.1 683.989 L1186.66 683.989 L1187.22 683.989 L1187.78 683.989 L1188.34 683.989 L1188.9 683.989 L1189.46 683.989 L1190.02 683.989 L1190.58 683.989 L1191.14 683.989 L1191.7 683.989 L1192.25 683.989 L1192.81 683.989 L1193.37 683.989 L1193.93 683.989 L1194.49 683.989 L1195.05 683.989 L1195.61 683.989 L1196.17 683.989 L1196.73 683.989 L1197.29 683.989 L1197.85 683.989 L1198.41 683.989 L1198.97 683.989 L1199.52 683.989 L1200.08 683.989 L1200.64 683.989 L1201.2 683.989 L1201.76 683.989 L1202.32 683.989 L1202.88 683.989 L1203.44 683.989 L1204 683.989 L1204.56 683.989 L1205.12 683.989 L1205.68 683.989 L1206.24 683.989 L1206.8 683.989 L1207.35 683.989 L1207.91 683.989 L1208.47 683.989 L1209.03 683.989 L1209.59 683.989 L1210.15 683.989 L1210.71 683.989 L1211.27 683.989 L1211.83 683.989 L1212.39 683.989 L1212.95 683.989 L1213.51 683.989 L1214.07 683.989 L1214.62 683.989 L1215.18 683.989 L1215.74 683.989 L1216.3 683.989 L1216.86 683.989 L1217.42 683.989 L1217.98 683.989 L1218.54 683.989 L1219.1 683.989 L1219.66 683.989 L1220.22 683.989 L1220.78 683.989 L1221.34 683.989 L1221.89 683.989 L1222.45 683.989 L1223.01 683.989 L1223.57 683.989 L1224.13 683.989 L1224.69 683.989 L1225.25 683.989 L1225.81 683.989 L1226.37 683.989 L1226.93 683.989 L1227.49 683.989 L1228.05 683.989 L1228.61 683.989 L1229.17 683.989 L1229.72 683.989 L1230.28 683.989 L1230.84 683.989 L1231.4 683.989 L1231.96 683.989 L1232.52 683.989 L1233.08 683.989 L1233.64 683.989 L1234.2 683.989 L1234.76 683.989 L1235.32 683.989 L1235.88 683.989 L1236.44 683.989 L1236.99 683.989 L1237.55 683.989 L1238.11 683.989 L1238.67 683.989 L1239.23 683.989 L1239.79 683.989 L1240.35 683.989 L1240.91 683.989 L1241.47 683.989 L1242.03 683.989 L1242.59 683.989 L1243.15 683.989 L1243.71 683.989 L1244.26 683.989 L1244.82 683.989 L1245.38 683.989 L1245.94 683.989 L1246.5 683.989 L1247.06 683.989 L1247.62 683.989 L1248.18 683.989 L1248.74 683.989 L1249.3 683.989 L1249.86 683.989 L1250.42 683.989 L1250.98 683.989 L1251.54 683.989 L1252.09 683.989 L1252.65 683.989 L1253.21 683.989 L1253.77 683.989 L1254.33 683.989 L1254.89 683.989 L1255.45 683.989 L1256.01 683.989 L1256.57 683.989 L1257.13 683.989 L1257.69 683.989 L1258.25 683.989 L1258.81 683.989 L1259.36 683.989 L1259.92 683.989 L1260.48 683.989 L1261.04 683.989 L1261.6 683.989 L1262.16 683.989 L1262.72 683.989 L1263.28 683.989 L1263.84 683.989 L1264.4 683.989 L1264.96 683.989 L1265.52 683.989 L1266.08 683.989 L1266.63 683.989 L1267.19 683.989 L1267.75 683.989 L1268.31 683.989 L1268.87 683.989 L1269.43 683.989 L1269.99 683.989 L1270.55 683.989 L1271.11 683.989 L1271.67 683.989 L1272.23 683.989 L1272.79 683.989 L1273.35 683.989 L1273.91 683.989 L1274.46 683.989 L1275.02 683.989 L1275.58 683.989 L1276.14 683.989 L1276.7 683.989 L1277.26 683.989 L1277.82 683.989 L1278.38 683.989 L1278.94 683.989 L1279.5 683.989 L1280.06 683.989 L1280.62 683.989 L1281.18 683.989 L1281.73 683.989 L1282.29 683.989 L1282.85 683.989 L1283.41 683.989 L1283.97 683.989 L1284.53 683.989 L1285.09 683.989 L1285.65 683.989 L1286.21 683.989 L1286.77 683.989 L1287.33 683.989 L1287.89 683.989 L1288.45 683.989 L1289 683.989 L1289.56 683.989 L1290.12 683.989 L1290.68 683.989 L1291.24 683.989 L1291.8 683.989 L1292.36 683.989 L1292.92 683.989 L1293.48 683.989 L1294.04 683.989 L1294.6 683.989 L1295.16 683.989 L1295.72 683.989 L1296.28 683.989 L1296.83 683.989 L1297.39 683.989 L1297.95 683.989 L1298.51 683.989 L1299.07 683.989 L1299.63 683.989 L1300.19 683.989 L1300.75 683.989 L1301.31 683.989 L1301.87 683.989 L1302.43 683.989 L1302.99 683.989 L1303.55 683.989 L1304.1 683.989 L1304.66 683.989 L1305.22 683.989 L1305.78 683.989 L1306.34 683.989 L1306.9 683.989 L1307.46 683.989 L1308.02 683.989 L1308.58 683.989 L1309.14 683.989 L1309.7 683.989 L1310.26 683.989 L1310.82 683.989 L1311.38 683.989 L1311.93 683.989 L1312.49 683.989 L1313.05 683.989 L1313.61 683.989 L1314.17 683.989 L1314.73 683.989 L1315.29 683.989 L1315.85 683.989 L1316.41 683.989 L1316.97 683.989 L1317.53 683.989 L1318.09 683.989 L1318.65 683.989 L1319.2 683.989 L1319.76 683.989 L1320.32 683.989 L1320.88 683.989 L1321.44 683.989 L1322 683.989 L1322.56 683.989 L1323.12 683.989 L1323.68 683.989 L1324.24 683.989 L1324.8 683.989 L1325.36 683.989 L1325.92 683.989 L1326.47 683.989 L1327.03 683.989 L1327.59 683.989 L1328.15 683.989 L1328.71 683.989 L1329.27 683.989 L1329.83 683.989 L1330.39 683.989 L1330.95 683.989 L1331.51 683.989 L1332.07 683.989 L1332.63 683.989 L1333.19 683.989 L1333.75 683.989 L1334.3 683.989 L1334.86 683.989 L1335.42 683.989 L1335.98 683.989 L1336.54 683.989 L1337.1 683.989 L1337.66 683.989 L1338.22 683.989 L1338.78 683.989 L1339.34 683.989 L1339.9 683.989 L1340.46 683.989 L1341.02 683.989 L1341.57 683.989 L1342.13 683.989 L1342.69 683.989 L1343.25 683.989 L1343.81 683.989 L1344.37 683.989 L1344.93 683.989 L1345.49 683.989 L1346.05 683.989 L1346.61 683.989 L1347.17 683.989 L1347.73 683.989 L1348.29 683.989 L1348.84 683.989 L1349.4 683.989 L1349.96 683.989 L1350.52 683.989 L1351.08 683.989 L1351.64 683.989 L1352.2 683.989 L1352.76 683.989 L1353.32 683.989 L1353.88 683.989 L1354.44 683.989 L1355 683.989 L1355.56 683.989 L1356.12 683.989 L1356.67 683.989 L1357.23 683.989 L1357.79 683.989 L1358.35 683.989 L1358.91 683.989 L1359.47 683.989 L1360.03 683.989 L1360.59 683.989 L1361.15 683.989 L1361.71 683.989 L1362.27 683.989 L1362.83 683.989 L1363.39 683.989 L1363.94 683.989 L1364.5 683.989 L1365.06 683.989 L1365.62 683.989 L1366.18 683.989 L1366.74 683.989 L1367.3 683.989 L1367.86 683.989 L1368.42 683.989 L1368.98 683.989 L1369.54 683.989 L1370.1 683.989 L1370.66 683.989 L1371.21 683.989 L1371.77 683.989 L1372.33 683.989 L1372.89 683.989 L1373.45 683.989 L1374.01 683.989 L1374.57 683.989 L1375.13 683.989 L1375.69 683.989 L1376.25 683.989 L1376.81 683.989 L1377.37 683.989 L1377.93 683.989 L1378.49 683.989 L1379.04 683.989 L1379.6 683.989 L1380.16 683.989 L1380.72 683.989 L1381.28 683.989 L1381.84 683.989 L1382.4 683.989 L1382.96 683.989 L1383.52 683.989 L1384.08 683.989 L1384.64 683.989 L1385.2 683.989 L1385.76 683.989 L1386.31 683.989 L1386.87 683.989 L1387.43 683.989 L1387.99 683.989 L1388.55 683.989 L1389.11 683.989 L1389.67 683.989 L1390.23 683.989 L1390.79 683.989 L1391.35 683.989 L1391.91 683.989 L1392.47 683.989 L1393.03 683.989 L1393.58 683.989 L1394.14 683.989 L1394.7 683.989 L1395.26 683.989 L1395.82 683.989 L1396.38 683.989 L1396.94 683.989 L1397.5 683.989 L1398.06 683.989 L1398.62 683.989 L1399.18 683.989 L1399.74 683.989 L1400.3 683.989 L1400.86 683.989 L1401.41 683.989 L1401.97 683.989 L1402.53 683.989 L1403.09 683.989 L1403.65 683.989 L1404.21 683.989 L1404.77 683.989 L1405.33 683.989 L1405.89 683.989 L1406.45 683.989 L1407.01 683.989 L1407.57 683.989 L1408.13 683.989 L1408.68 683.989 L1409.24 683.989 L1409.8 683.989 L1410.36 683.989 L1410.92 683.989 L1411.48 683.989 L1412.04 683.989 L1412.6 683.989 L1413.16 683.989 L1413.72 683.989 L1414.28 683.989 L1414.84 683.989 L1415.4 683.989 L1415.95 683.989 L1416.51 683.989 L1417.07 683.989 L1417.63 683.989 L1418.19 683.989 L1418.75 683.989 L1419.31 683.989 L1419.87 683.989 L1420.43 683.989 L1420.99 683.989 L1421.55 683.989 L1422.11 683.989 L1422.67 683.989 L1423.23 683.989 L1423.78 683.989 L1424.34 683.989 L1424.9 683.989 L1425.46 683.989 L1426.02 683.989 L1426.58 683.989 L1427.14 683.989 L1427.7 683.989 L1428.26 683.989 L1428.82 683.989 L1429.38 683.989 L1429.94 683.989 L1430.5 683.989 L1431.05 683.989 L1431.61 683.989 L1432.17 683.989 L1432.73 683.989 L1433.29 683.989 L1433.85 683.989 L1434.41 683.989 L1434.97 683.989 L1435.53 683.989 L1436.09 683.989 L1436.65 683.989 L1437.21 683.989 L1437.77 683.989 L1438.33 683.989 L1438.88 683.989 L1439.44 683.989 L1440 683.989 L1440.56 683.989 L1441.12 683.989 L1441.68 683.989 L1442.24 683.989 L1442.8 683.989 L1443.36 683.989 L1443.92 683.989 L1444.48 683.989 L1445.04 683.989 L1445.6 683.989 L1446.15 683.989 L1446.71 683.989 L1447.27 683.989 L1447.83 683.989 L1448.39 683.989 L1448.95 683.989 L1449.51 683.989 L1450.07 683.989 L1450.63 683.989 L1451.19 683.989 L1451.75 683.989 L1452.31 683.989 L1452.87 683.989 L1453.42 683.989 L1453.98 683.989 L1454.54 683.989 L1455.1 683.989 L1455.66 683.989 L1456.22 683.989 L1456.78 683.989 L1457.34 683.989 L1457.9 683.989 L1458.46 683.989 L1459.02 683.989 L1459.58 683.989 L1460.14 683.989 L1460.7 683.989 L1461.25 683.989 L1461.81 683.989 L1462.37 683.989 L1462.93 683.989 L1463.49 683.989 L1464.05 683.989 L1464.61 683.989 L1465.17 683.989 L1465.73 683.989 L1466.29 683.989 L1466.85 683.989 L1467.41 683.989 L1467.97 683.989 L1468.52 683.989 L1469.08 683.989 L1469.64 683.989 L1470.2 683.989 L1470.76 683.989 L1471.32 683.989 L1471.88 683.989 L1472.44 683.989 L1473 683.989 L1473.56 683.989 L1474.12 683.989 L1474.68 683.989 L1475.24 683.989 L1475.79 683.989 L1476.35 683.989 L1476.91 683.989 L1477.47 683.989 L1478.03 683.989 L1478.59 683.989 L1479.15 683.989 L1479.71 683.989 L1480.27 683.989 L1480.83 683.989 L1481.39 683.989 L1481.95 683.989 L1482.51 683.989 L1483.07 683.989 L1483.62 683.989 L1484.18 683.989 L1484.74 683.989 L1485.3 683.989 L1485.86 683.989 L1486.42 683.989 L1486.98 683.989 L1487.54 683.989 L1488.1 683.989 L1488.66 683.989 L1489.22 683.989 L1489.78 683.989 L1490.34 683.989 L1490.89 683.989 L1491.45 683.989 L1492.01 683.989 L1492.57 683.989 L1493.13 683.989 L1493.69 683.989 L1494.25 683.989 L1494.81 683.989 L1495.37 683.989 L1495.93 683.989 L1496.49 683.989 L1497.05 683.989 L1497.61 683.989 L1498.16 683.989 L1498.72 683.989 L1499.28 683.989 L1499.84 683.989 L1500.4 683.989 L1500.96 683.989 L1501.52 683.989 L1502.08 683.989 L1502.64 683.989 L1503.2 683.989 L1503.76 683.989 L1504.32 683.989 L1504.88 683.989 L1505.44 683.989 L1505.99 683.989 L1506.55 683.989 L1507.11 683.989 L1507.67 683.989 L1508.23 683.989 L1508.79 683.989 L1509.35 683.989 L1509.91 683.989 L1510.47 683.989 L1511.03 683.989 L1511.59 683.989 L1512.15 683.989 L1512.71 683.989 L1513.26 683.989 L1513.82 683.989 L1514.38 683.989 L1514.94 683.989 L1515.5 683.989 L1516.06 683.989 L1516.62 683.989 L1517.18 683.989 L1517.74 683.989 L1518.3 683.989 L1518.86 683.989 L1519.42 683.989 L1519.98 683.989 L1520.53 683.989 L1521.09 683.989 L1521.65 683.989 L1522.21 683.989 L1522.77 683.989 L1523.33 683.989 L1523.89 683.989 L1524.45 683.989 L1525.01 683.989 L1525.57 683.989 L1526.13 683.989 L1526.69 683.989 L1527.25 683.989 L1527.81 683.989 L1528.36 683.989 L1528.92 683.989 L1529.48 683.989 L1530.04 683.989 L1530.6 683.989 L1531.16 683.989 L1531.72 683.989 L1532.28 683.989 L1532.84 683.989 L1533.4 683.989 L1533.96 683.989 L1534.52 683.989 L1535.08 683.989 L1535.63 683.989 L1536.19 683.989 L1536.75 683.989 L1537.31 683.989 L1537.87 683.989 L1538.43 683.989 L1538.99 683.989 L1539.55 683.989 L1540.11 683.989 L1540.67 683.989 L1541.23 683.989 L1541.79 683.989 L1542.35 683.989 L1542.9 683.989 L1543.46 683.989 L1544.02 683.989 L1544.58 683.989 L1545.14 683.989 L1545.7 683.989 L1546.26 683.989 L1546.82 683.989 L1547.38 683.989 L1547.94 683.989 L1548.5 683.989 L1549.06 683.989 L1549.62 683.989 L1550.18 683.989 L1550.73 683.989 L1551.29 683.989 L1551.85 683.989 L1552.41 683.989 L1552.97 683.989 L1553.53 683.989 L1554.09 683.989 L1554.65 683.989 L1555.21 683.989 L1555.77 683.989 L1556.33 683.989 L1556.89 683.989 L1557.45 683.989 L1558 683.989 L1558.56 683.989 L1559.12 683.989 L1559.68 683.989 L1560.24 683.989 L1560.8 683.989 L1561.36 683.989 L1561.92 683.989 L1562.48 683.989 L1563.04 683.989 L1563.6 683.989 L1564.16 683.989 L1564.72 683.989 L1565.28 683.989 L1565.83 683.989 L1566.39 683.989 L1566.95 683.989 L1567.51 683.989 L1568.07 683.989 L1568.63 683.989 L1569.19 683.989 L1569.75 683.989 L1570.31 683.989 L1570.87 683.989 L1571.43 683.989 L1571.99 683.989 L1572.55 683.989 L1573.1 683.989 L1573.66 683.989 L1574.22 683.989 L1574.78 683.989 L1575.34 683.989 L1575.9 683.989 L1576.46 683.989 L1577.02 683.989 L1577.58 683.989 L1578.14 683.989 L1578.7 683.989 L1579.26 683.989 L1579.82 683.989 L1580.37 683.989 L1580.93 683.989 L1581.49 683.989 L1582.05 683.989 L1582.61 683.989 L1583.17 683.989 L1583.73 683.989 L1584.29 683.989 L1584.85 683.989 L1585.41 683.989 L1585.97 683.989 L1586.53 683.989 L1587.09 683.989 L1587.65 683.989 L1588.2 683.989 L1588.76 683.989 L1589.32 683.989 L1589.88 683.989 L1590.44 683.989 L1591 683.989 L1591.56 683.989 L1592.12 683.989 L1592.68 683.989 L1593.24 683.989 L1593.8 683.989 L1594.36 683.989 L1594.92 683.989 L1595.47 683.989 L1596.03 683.989 L1596.59 683.989 L1597.15 683.989 L1597.71 683.989 L1598.27 683.989 L1598.83 683.989 L1599.39 683.989 L1599.95 683.989 L1600.51 683.989 L1601.07 683.989 L1601.63 683.989 L1602.19 683.989 L1602.74 683.989 L1603.3 683.989 L1603.86 683.989 L1604.42 683.989 L1604.98 683.989 L1605.54 683.989 L1606.1 683.989 L1606.66 683.989 L1607.22 683.989 L1607.78 683.989 L1608.34 683.989 L1608.9 683.989 L1609.46 683.989 L1610.02 683.989 L1610.57 683.989 L1611.13 683.989 L1611.69 683.989 L1612.25 683.989 L1612.81 683.989 L1613.37 683.989 L1613.93 683.989 L1614.49 683.989 L1615.05 683.989 L1615.61 683.989 L1616.17 683.989 L1616.73 683.989 L1617.29 683.989 L1617.84 683.989 L1618.4 683.989 L1618.96 683.989 L1619.52 683.989 L1620.08 683.989 L1620.64 683.989 L1621.2 683.989 L1621.76 683.989 L1622.32 683.989 L1622.88 683.989 L1623.44 683.989 L1624 683.989 L1624.56 683.989 L1625.11 683.989 L1625.67 683.989 L1626.23 683.989 L1626.79 683.989 L1627.35 683.989 L1627.91 683.989 L1628.47 683.989 L1629.03 683.989 L1629.59 683.989 L1630.15 683.989 L1630.71 683.989 L1631.27 683.989 L1631.83 683.989 L1632.39 683.989 L1632.94 683.989 L1633.5 683.989 L1634.06 683.989 L1634.62 683.989 L1635.18 683.989 L1635.74 683.989 L1636.3 683.989 L1636.86 683.989 L1637.42 683.989 L1637.98 683.989 L1638.54 683.989 L1639.1 683.989 L1639.66 683.989 L1640.21 683.989 L1640.77 683.989 L1641.33 683.989 L1641.89 683.989 L1642.45 683.989 L1643.01 683.989 L1643.57 683.989 L1644.13 683.989 L1644.69 683.989 L1645.25 683.989 L1645.81 683.989 L1646.37 683.989 L1646.93 683.989 L1647.48 683.989 L1648.04 683.989 L1648.6 683.989 L1649.16 683.989 L1649.72 683.989 L1650.28 683.989 L1650.84 683.989 L1651.4 683.989 L1651.96 683.989 L1652.52 683.989 L1653.08 683.989 L1653.64 683.989 L1654.2 683.989 L1654.76 683.989 L1655.31 683.989 L1655.87 683.989 L1656.43 683.989 L1656.99 683.989 L1657.55 683.989 L1658.11 683.989 L1658.67 683.989 L1659.23 683.989 L1659.79 683.989 L1660.35 683.989 L1660.91 683.989 L1661.47 683.989 L1662.03 683.989 L1662.58 683.989 L1663.14 683.989 L1663.7 683.989 L1664.26 683.989 L1664.82 683.989 L1665.38 683.989 L1665.94 683.989 L1666.5 683.989 L1667.06 683.989 L1667.62 683.989 L1668.18 683.989 L1668.74 683.989 L1669.3 683.989 L1669.85 683.989 L1670.41 683.989 L1670.97 683.989 L1671.53 683.989 L1672.09 683.989 L1672.65 683.989 L1673.21 683.989 L1673.77 683.989 L1674.33 683.989 L1674.89 683.989 L1675.45 683.989 L1676.01 683.989 L1676.57 683.989 L1677.13 683.989 L1677.68 683.989 L1678.24 683.989 L1678.8 683.989 L1679.36 683.989 L1679.92 683.989 L1680.48 683.989 L1681.04 683.989 L1681.6 683.989 L1682.16 683.989 L1682.72 683.989 L1683.28 683.989 L1683.84 683.989 L1684.4 683.989 L1684.95 683.989 L1685.51 683.989 L1686.07 683.989 L1686.63 683.989 L1687.19 683.989 L1687.75 683.989 L1688.31 683.989 L1688.87 683.989 L1689.43 683.989 L1689.99 683.989 L1690.55 683.989 L1691.11 683.989 L1691.67 683.989 L1692.23 683.989 L1692.78 683.989 L1693.34 683.989 L1693.9 683.989 L1694.46 683.989 L1695.02 683.989 L1695.58 683.989 L1696.14 683.989 L1696.7 683.989 L1697.26 683.989 L1697.82 683.989 L1698.38 683.989 L1698.94 683.989 L1699.5 683.989 L1700.05 683.989 L1700.61 683.989 L1701.17 683.989 L1701.73 683.989 L1702.29 683.989 L1702.85 683.989 L1703.41 683.989 L1703.97 683.989 L1704.53 683.989 L1705.09 683.989 L1705.65 683.989 L1706.21 683.989 L1706.77 683.989 L1707.32 683.989 L1707.88 683.989 L1708.44 683.989 L1709 683.989 L1709.56 683.989 L1710.12 683.989 L1710.68 683.989 L1711.24 683.989 L1711.8 683.989 L1712.36 683.989 L1712.92 683.989 L1713.48 683.989 L1714.04 683.989 L1714.6 683.989 L1715.15 683.989 L1715.71 683.989 L1716.27 683.989 L1716.83 683.989 L1717.39 683.989 L1717.95 683.989 L1718.51 683.989 L1719.07 683.989 L1719.63 683.989 L1720.19 683.989 L1720.75 683.989 L1721.31 683.989 L1721.87 683.989 L1722.42 683.989 L1722.98 683.989 L1723.54 683.989 L1724.1 683.989 L1724.66 683.989 L1725.22 683.989 L1725.78 683.989 L1726.34 683.989 L1726.9 683.989 L1727.46 683.989 L1728.02 683.989 L1728.58 683.989 L1729.14 683.989 L1729.69 683.989 L1730.25 683.989 L1730.81 683.989 L1731.37 683.989 L1731.93 683.989 L1732.49 683.989 L1733.05 683.989 L1733.61 683.989 L1734.17 683.989 L1734.73 683.989 L1735.29 683.989 L1735.85 683.989 L1736.41 683.989 L1736.97 683.989 L1737.52 683.989 L1738.08 683.989 L1738.64 683.989 L1739.2 683.989 L1739.76 683.989 L1740.32 683.989 L1740.88 683.989 L1741.44 683.989 L1742 683.989 L1742.56 683.989 L1743.12 683.989 L1743.68 683.989 L1744.24 683.989 L1744.79 683.989 L1745.35 683.989 L1745.91 683.989 L1746.47 683.989 L1747.03 683.989 L1747.59 683.989 L1748.15 683.989 L1748.71 683.989 L1749.27 683.989 L1749.83 683.989 L1750.39 683.989 L1750.95 683.989 L1751.51 683.989 L1752.06 683.989 L1752.62 683.989 L1753.18 683.989 L1753.74 683.989 L1754.3 683.989 L1754.86 683.989 L1755.42 683.989 L1755.98 683.989 L1756.54 683.989 L1757.1 683.989 L1757.66 683.989 L1758.22 683.989 L1758.78 683.989 L1759.34 683.989 L1759.89 683.989 L1760.45 683.989 L1761.01 683.989 L1761.57 683.989 L1762.13 683.989 L1762.69 683.989 L1763.25 683.989 L1763.81 683.989 L1764.37 683.989 L1764.93 683.989 L1765.49 683.989 L1766.05 683.989 L1766.61 683.989 L1767.16 683.989 L1767.72 683.989 L1768.28 683.989 L1768.84 683.989 L1769.4 683.989 L1769.96 683.989 L1770.52 683.989 L1771.08 683.989 L1771.64 683.989 L1772.2 683.989 L1772.76 683.989 L1773.32 683.989 L1773.88 683.989 L1774.43 683.989 L1774.99 683.989 L1775.55 683.989 L1776.11 683.989 L1776.67 683.989 L1777.23 683.989 L1777.79 683.989 L1778.35 683.989 L1778.91 683.989 L1779.47 683.989 L1780.03 683.989 L1780.59 683.989 L1781.15 683.989 L1781.71 683.989 L1782.26 683.989 L1782.82 683.989 L1783.38 683.989 L1783.94 683.989 L1784.5 683.989 L1785.06 683.989 L1785.62 683.989 L1786.18 683.989 L1786.74 683.989 L1787.3 683.989 L1787.86 683.989 L1788.42 683.989 L1788.98 683.989 L1789.53 683.989 L1790.09 683.989 L1790.65 683.989 L1791.21 683.989 L1791.77 683.989 L1792.33 683.989 L1792.89 683.989 L1793.45 683.989 L1794.01 683.989 L1794.57 683.989 L1795.13 683.989 L1795.69 683.989 L1796.25 683.989 L1796.8 683.989 L1797.36 683.989 L1797.92 683.989 L1798.48 683.989 L1799.04 683.989 L1799.6 683.989 L1800.16 683.989 L1800.72 683.989 L1801.28 683.989 L1801.84 683.989 L1802.4 683.989 L1802.96 683.989 L1803.52 683.989 L1804.08 683.989 L1804.63 683.989 L1805.19 683.989 L1805.75 683.989 L1806.31 683.989 L1806.87 683.989 L1807.43 683.989 L1807.99 683.989 L1808.55 683.989 L1809.11 683.989 L1809.67 683.989 L1810.23 683.989 L1810.79 683.989 L1811.35 683.989 L1811.9 683.989 L1812.46 683.989 L1813.02 683.989 L1813.58 683.989 L1814.14 683.989 L1814.7 683.989 L1815.26 683.989 L1815.82 683.989 L1816.38 683.989 L1816.94 683.989 L1817.5 683.989 L1818.06 683.989 L1818.62 683.989 L1819.18 683.989 L1819.73 683.989 L1820.29 683.989 L1820.85 683.989 L1821.41 683.989 L1821.97 683.989 L1822.53 683.989 L1823.09 683.989 L1823.65 683.989 L1824.21 683.989 L1824.77 683.989 L1825.33 683.989 L1825.89 683.989 L1826.45 683.989 L1827 683.989 L1827.56 683.989 L1828.12 683.989 L1828.68 683.989 L1829.24 683.989 L1829.8 683.989 L1830.36 683.989 L1830.92 683.989 L1831.48 683.989 L1832.04 683.989 L1832.6 683.989 L1833.16 683.989 L1833.72 683.989 L1834.27 683.989 L1834.83 683.989 L1835.39 683.989 L1835.95 683.989 L1836.51 683.989 L1837.07 683.989 L1837.63 683.989 L1838.19 683.989 L1838.19 682.231 L1837.63 682.231 L1837.07 682.231 L1836.51 682.231 L1835.95 682.231 L1835.39 682.231 L1834.83 682.231 L1834.27 682.231 L1833.72 682.231 L1833.16 682.231 L1832.6 682.231 L1832.04 682.231 L1831.48 682.231 L1830.92 682.231 L1830.36 682.231 L1829.8 682.231 L1829.24 682.231 L1828.68 682.231 L1828.12 682.231 L1827.56 682.231 L1827 682.231 L1826.45 682.231 L1825.89 682.231 L1825.33 682.231 L1824.77 682.231 L1824.21 682.231 L1823.65 682.231 L1823.09 682.231 L1822.53 682.231 L1821.97 682.231 L1821.41 682.231 L1820.85 682.231 L1820.29 682.231 L1819.73 682.231 L1819.18 682.231 L1818.62 682.231 L1818.06 682.231 L1817.5 682.231 L1816.94 682.231 L1816.38 682.231 L1815.82 682.231 L1815.26 682.231 L1814.7 682.231 L1814.14 682.231 L1813.58 682.231 L1813.02 682.231 L1812.46 682.231 L1811.9 682.231 L1811.35 682.231 L1810.79 682.231 L1810.23 682.231 L1809.67 682.231 L1809.11 682.231 L1808.55 682.231 L1807.99 682.231 L1807.43 682.231 L1806.87 682.231 L1806.31 682.231 L1805.75 682.231 L1805.19 682.231 L1804.63 682.231 L1804.08 682.231 L1803.52 682.231 L1802.96 682.231 L1802.4 682.231 L1801.84 682.231 L1801.28 682.231 L1800.72 682.231 L1800.16 682.231 L1799.6 682.231 L1799.04 682.231 L1798.48 682.231 L1797.92 682.231 L1797.36 682.231 L1796.8 682.231 L1796.25 682.231 L1795.69 682.231 L1795.13 682.231 L1794.57 682.231 L1794.01 682.231 L1793.45 682.231 L1792.89 682.231 L1792.33 682.231 L1791.77 682.231 L1791.21 682.231 L1790.65 682.231 L1790.09 682.231 L1789.53 682.231 L1788.98 682.231 L1788.42 682.231 L1787.86 682.231 L1787.3 682.231 L1786.74 682.231 L1786.18 682.231 L1785.62 682.231 L1785.06 682.231 L1784.5 682.231 L1783.94 682.231 L1783.38 682.231 L1782.82 682.231 L1782.26 682.231 L1781.71 682.231 L1781.15 682.231 L1780.59 682.231 L1780.03 682.231 L1779.47 682.231 L1778.91 682.231 L1778.35 682.231 L1777.79 682.231 L1777.23 682.231 L1776.67 682.231 L1776.11 682.231 L1775.55 682.231 L1774.99 682.231 L1774.43 682.231 L1773.88 682.231 L1773.32 682.231 L1772.76 682.231 L1772.2 682.231 L1771.64 682.231 L1771.08 682.231 L1770.52 682.231 L1769.96 682.231 L1769.4 682.231 L1768.84 682.231 L1768.28 682.231 L1767.72 682.231 L1767.16 682.231 L1766.61 682.231 L1766.05 682.231 L1765.49 682.231 L1764.93 682.231 L1764.37 682.231 L1763.81 682.231 L1763.25 682.231 L1762.69 682.231 L1762.13 682.231 L1761.57 682.231 L1761.01 682.231 L1760.45 682.231 L1759.89 682.231 L1759.34 682.231 L1758.78 682.231 L1758.22 682.231 L1757.66 682.231 L1757.1 682.231 L1756.54 682.231 L1755.98 682.231 L1755.42 682.231 L1754.86 682.231 L1754.3 682.231 L1753.74 682.231 L1753.18 682.231 L1752.62 682.231 L1752.06 682.231 L1751.51 682.231 L1750.95 682.231 L1750.39 682.231 L1749.83 682.231 L1749.27 682.231 L1748.71 682.231 L1748.15 682.231 L1747.59 682.231 L1747.03 682.231 L1746.47 682.231 L1745.91 682.231 L1745.35 682.231 L1744.79 682.231 L1744.24 682.231 L1743.68 682.231 L1743.12 682.231 L1742.56 682.231 L1742 682.231 L1741.44 682.231 L1740.88 682.231 L1740.32 682.231 L1739.76 682.231 L1739.2 682.231 L1738.64 682.231 L1738.08 682.231 L1737.52 682.231 L1736.97 682.231 L1736.41 682.231 L1735.85 682.231 L1735.29 682.231 L1734.73 682.231 L1734.17 682.231 L1733.61 682.231 L1733.05 682.231 L1732.49 682.231 L1731.93 682.231 L1731.37 682.231 L1730.81 682.231 L1730.25 682.231 L1729.69 682.231 L1729.14 682.231 L1728.58 682.231 L1728.02 682.231 L1727.46 682.231 L1726.9 682.231 L1726.34 682.231 L1725.78 682.231 L1725.22 682.231 L1724.66 682.231 L1724.1 682.231 L1723.54 682.231 L1722.98 682.231 L1722.42 682.231 L1721.87 682.231 L1721.31 682.231 L1720.75 682.231 L1720.19 682.231 L1719.63 682.231 L1719.07 682.231 L1718.51 682.231 L1717.95 682.231 L1717.39 682.231 L1716.83 682.231 L1716.27 682.231 L1715.71 682.231 L1715.15 682.231 L1714.6 682.231 L1714.04 682.231 L1713.48 682.231 L1712.92 682.231 L1712.36 682.231 L1711.8 682.231 L1711.24 682.231 L1710.68 682.231 L1710.12 682.231 L1709.56 682.231 L1709 682.231 L1708.44 682.231 L1707.88 682.231 L1707.32 682.231 L1706.77 682.231 L1706.21 682.231 L1705.65 682.231 L1705.09 682.231 L1704.53 682.231 L1703.97 682.231 L1703.41 682.231 L1702.85 682.231 L1702.29 682.231 L1701.73 682.231 L1701.17 682.231 L1700.61 682.231 L1700.05 682.231 L1699.5 682.231 L1698.94 682.231 L1698.38 682.231 L1697.82 682.231 L1697.26 682.231 L1696.7 682.231 L1696.14 682.231 L1695.58 682.231 L1695.02 682.231 L1694.46 682.231 L1693.9 682.231 L1693.34 682.231 L1692.78 682.231 L1692.23 682.231 L1691.67 682.231 L1691.11 682.231 L1690.55 682.231 L1689.99 682.231 L1689.43 682.231 L1688.87 682.231 L1688.31 682.231 L1687.75 682.231 L1687.19 682.231 L1686.63 682.231 L1686.07 682.231 L1685.51 682.231 L1684.95 682.231 L1684.4 682.231 L1683.84 682.231 L1683.28 682.231 L1682.72 682.231 L1682.16 682.231 L1681.6 682.231 L1681.04 682.231 L1680.48 682.231 L1679.92 682.231 L1679.36 682.231 L1678.8 682.231 L1678.24 682.231 L1677.68 682.231 L1677.13 682.231 L1676.57 682.231 L1676.01 682.231 L1675.45 682.231 L1674.89 682.231 L1674.33 682.231 L1673.77 682.231 L1673.21 682.231 L1672.65 682.231 L1672.09 682.231 L1671.53 682.231 L1670.97 682.231 L1670.41 682.231 L1669.85 682.231 L1669.3 682.231 L1668.74 682.231 L1668.18 682.231 L1667.62 682.231 L1667.06 682.231 L1666.5 682.231 L1665.94 682.231 L1665.38 682.231 L1664.82 682.231 L1664.26 682.231 L1663.7 682.231 L1663.14 682.231 L1662.58 682.231 L1662.03 682.231 L1661.47 682.231 L1660.91 682.231 L1660.35 682.231 L1659.79 682.231 L1659.23 682.231 L1658.67 682.231 L1658.11 682.231 L1657.55 682.231 L1656.99 682.231 L1656.43 682.231 L1655.87 682.231 L1655.31 682.231 L1654.76 682.231 L1654.2 682.231 L1653.64 682.231 L1653.08 682.231 L1652.52 682.231 L1651.96 682.231 L1651.4 682.231 L1650.84 682.231 L1650.28 682.231 L1649.72 682.231 L1649.16 682.231 L1648.6 682.231 L1648.04 682.231 L1647.48 682.231 L1646.93 682.231 L1646.37 682.231 L1645.81 682.231 L1645.25 682.231 L1644.69 682.231 L1644.13 682.231 L1643.57 682.231 L1643.01 682.231 L1642.45 682.231 L1641.89 682.231 L1641.33 682.231 L1640.77 682.231 L1640.21 682.231 L1639.66 682.231 L1639.1 682.231 L1638.54 682.231 L1637.98 682.231 L1637.42 682.231 L1636.86 682.231 L1636.3 682.231 L1635.74 682.231 L1635.18 682.231 L1634.62 682.231 L1634.06 682.231 L1633.5 682.231 L1632.94 682.231 L1632.39 682.231 L1631.83 682.231 L1631.27 682.231 L1630.71 682.231 L1630.15 682.231 L1629.59 682.231 L1629.03 682.231 L1628.47 682.231 L1627.91 682.231 L1627.35 682.231 L1626.79 682.231 L1626.23 682.231 L1625.67 682.231 L1625.11 682.231 L1624.56 682.231 L1624 682.231 L1623.44 682.231 L1622.88 682.231 L1622.32 682.231 L1621.76 682.231 L1621.2 682.231 L1620.64 682.231 L1620.08 682.231 L1619.52 682.231 L1618.96 682.231 L1618.4 682.231 L1617.84 682.231 L1617.29 682.231 L1616.73 682.231 L1616.17 682.231 L1615.61 682.231 L1615.05 682.231 L1614.49 682.231 L1613.93 682.231 L1613.37 682.231 L1612.81 682.231 L1612.25 682.231 L1611.69 682.231 L1611.13 682.231 L1610.57 682.231 L1610.02 682.231 L1609.46 682.231 L1608.9 682.231 L1608.34 682.231 L1607.78 682.231 L1607.22 682.231 L1606.66 682.231 L1606.1 682.231 L1605.54 682.231 L1604.98 682.231 L1604.42 682.231 L1603.86 682.231 L1603.3 682.231 L1602.74 682.231 L1602.19 682.231 L1601.63 682.231 L1601.07 682.231 L1600.51 682.231 L1599.95 682.231 L1599.39 682.231 L1598.83 682.231 L1598.27 682.231 L1597.71 682.231 L1597.15 682.231 L1596.59 682.231 L1596.03 682.231 L1595.47 682.231 L1594.92 682.231 L1594.36 682.231 L1593.8 682.231 L1593.24 682.231 L1592.68 682.231 L1592.12 682.231 L1591.56 682.231 L1591 682.231 L1590.44 682.231 L1589.88 682.231 L1589.32 682.231 L1588.76 682.231 L1588.2 682.231 L1587.65 682.231 L1587.09 682.231 L1586.53 682.231 L1585.97 682.231 L1585.41 682.231 L1584.85 682.231 L1584.29 682.231 L1583.73 682.231 L1583.17 682.231 L1582.61 682.231 L1582.05 682.231 L1581.49 682.231 L1580.93 682.231 L1580.37 682.231 L1579.82 682.231 L1579.26 682.231 L1578.7 682.231 L1578.14 682.231 L1577.58 682.231 L1577.02 682.231 L1576.46 682.231 L1575.9 682.231 L1575.34 682.231 L1574.78 682.231 L1574.22 682.231 L1573.66 682.231 L1573.1 682.231 L1572.55 682.231 L1571.99 682.231 L1571.43 682.231 L1570.87 682.231 L1570.31 682.231 L1569.75 682.231 L1569.19 682.231 L1568.63 682.231 L1568.07 682.231 L1567.51 682.231 L1566.95 682.231 L1566.39 682.231 L1565.83 682.231 L1565.28 682.231 L1564.72 682.231 L1564.16 682.231 L1563.6 682.231 L1563.04 682.231 L1562.48 682.231 L1561.92 682.231 L1561.36 682.231 L1560.8 682.231 L1560.24 682.231 L1559.68 682.231 L1559.12 682.231 L1558.56 682.231 L1558 682.231 L1557.45 682.231 L1556.89 682.231 L1556.33 682.231 L1555.77 682.231 L1555.21 682.231 L1554.65 682.231 L1554.09 682.231 L1553.53 682.231 L1552.97 682.231 L1552.41 682.231 L1551.85 682.231 L1551.29 682.231 L1550.73 682.231 L1550.18 682.231 L1549.62 682.231 L1549.06 682.231 L1548.5 682.231 L1547.94 682.231 L1547.38 682.231 L1546.82 682.231 L1546.26 682.231 L1545.7 682.231 L1545.14 682.231 L1544.58 682.231 L1544.02 682.231 L1543.46 682.231 L1542.9 682.231 L1542.35 682.231 L1541.79 682.231 L1541.23 682.231 L1540.67 682.231 L1540.11 682.231 L1539.55 682.231 L1538.99 682.231 L1538.43 682.231 L1537.87 682.231 L1537.31 682.231 L1536.75 682.231 L1536.19 682.231 L1535.63 682.231 L1535.08 682.231 L1534.52 682.231 L1533.96 682.231 L1533.4 682.231 L1532.84 682.231 L1532.28 682.231 L1531.72 682.231 L1531.16 682.231 L1530.6 682.231 L1530.04 682.231 L1529.48 682.231 L1528.92 682.231 L1528.36 682.231 L1527.81 682.231 L1527.25 682.231 L1526.69 682.231 L1526.13 682.231 L1525.57 682.231 L1525.01 682.231 L1524.45 682.231 L1523.89 682.231 L1523.33 682.231 L1522.77 682.231 L1522.21 682.231 L1521.65 682.231 L1521.09 682.231 L1520.53 682.231 L1519.98 682.231 L1519.42 682.231 L1518.86 682.231 L1518.3 682.231 L1517.74 682.231 L1517.18 682.231 L1516.62 682.231 L1516.06 682.231 L1515.5 682.231 L1514.94 682.231 L1514.38 682.231 L1513.82 682.231 L1513.26 682.231 L1512.71 682.231 L1512.15 682.231 L1511.59 682.231 L1511.03 682.231 L1510.47 682.231 L1509.91 682.231 L1509.35 682.231 L1508.79 682.231 L1508.23 682.231 L1507.67 682.231 L1507.11 682.231 L1506.55 682.231 L1505.99 682.231 L1505.44 682.231 L1504.88 682.231 L1504.32 682.231 L1503.76 682.231 L1503.2 682.231 L1502.64 682.231 L1502.08 682.231 L1501.52 682.231 L1500.96 682.231 L1500.4 682.231 L1499.84 682.231 L1499.28 682.231 L1498.72 682.231 L1498.16 682.231 L1497.61 682.231 L1497.05 682.231 L1496.49 682.231 L1495.93 682.231 L1495.37 682.231 L1494.81 682.231 L1494.25 682.231 L1493.69 682.231 L1493.13 682.231 L1492.57 682.231 L1492.01 682.231 L1491.45 682.231 L1490.89 682.231 L1490.34 682.231 L1489.78 682.231 L1489.22 682.231 L1488.66 682.231 L1488.1 682.231 L1487.54 682.231 L1486.98 682.231 L1486.42 682.231 L1485.86 682.231 L1485.3 682.231 L1484.74 682.231 L1484.18 682.231 L1483.62 682.231 L1483.07 682.231 L1482.51 682.231 L1481.95 682.231 L1481.39 682.231 L1480.83 682.231 L1480.27 682.231 L1479.71 682.231 L1479.15 682.231 L1478.59 682.231 L1478.03 682.231 L1477.47 682.231 L1476.91 682.231 L1476.35 682.231 L1475.79 682.231 L1475.24 682.231 L1474.68 682.231 L1474.12 682.231 L1473.56 682.231 L1473 682.231 L1472.44 682.231 L1471.88 682.231 L1471.32 682.231 L1470.76 682.231 L1470.2 682.231 L1469.64 682.231 L1469.08 682.231 L1468.52 682.231 L1467.97 682.231 L1467.41 682.231 L1466.85 682.231 L1466.29 682.231 L1465.73 682.231 L1465.17 682.231 L1464.61 682.231 L1464.05 682.231 L1463.49 682.231 L1462.93 682.231 L1462.37 682.231 L1461.81 682.231 L1461.25 682.231 L1460.7 682.231 L1460.14 682.231 L1459.58 682.231 L1459.02 682.231 L1458.46 682.231 L1457.9 682.231 L1457.34 682.231 L1456.78 682.231 L1456.22 682.231 L1455.66 682.231 L1455.1 682.231 L1454.54 682.231 L1453.98 682.231 L1453.42 682.231 L1452.87 682.231 L1452.31 682.231 L1451.75 682.231 L1451.19 682.231 L1450.63 682.231 L1450.07 682.231 L1449.51 682.231 L1448.95 682.231 L1448.39 682.231 L1447.83 682.231 L1447.27 682.231 L1446.71 682.231 L1446.15 682.231 L1445.6 682.231 L1445.04 682.231 L1444.48 682.231 L1443.92 682.231 L1443.36 682.231 L1442.8 682.231 L1442.24 682.231 L1441.68 682.231 L1441.12 682.231 L1440.56 682.231 L1440 682.231 L1439.44 682.231 L1438.88 682.231 L1438.33 682.231 L1437.77 682.231 L1437.21 682.231 L1436.65 682.231 L1436.09 682.231 L1435.53 682.231 L1434.97 682.231 L1434.41 682.231 L1433.85 682.231 L1433.29 682.231 L1432.73 682.231 L1432.17 682.231 L1431.61 682.231 L1431.05 682.231 L1430.5 682.231 L1429.94 682.231 L1429.38 682.231 L1428.82 682.231 L1428.26 682.231 L1427.7 682.231 L1427.14 682.231 L1426.58 682.231 L1426.02 682.231 L1425.46 682.231 L1424.9 682.231 L1424.34 682.231 L1423.78 682.231 L1423.23 682.231 L1422.67 682.231 L1422.11 682.231 L1421.55 682.231 L1420.99 682.231 L1420.43 682.231 L1419.87 682.231 L1419.31 682.231 L1418.75 682.231 L1418.19 682.231 L1417.63 682.231 L1417.07 682.231 L1416.51 682.231 L1415.95 682.231 L1415.4 682.231 L1414.84 682.231 L1414.28 682.231 L1413.72 682.231 L1413.16 682.231 L1412.6 682.231 L1412.04 682.231 L1411.48 682.231 L1410.92 682.231 L1410.36 682.231 L1409.8 682.231 L1409.24 682.231 L1408.68 682.231 L1408.13 682.231 L1407.57 682.231 L1407.01 682.231 L1406.45 682.231 L1405.89 682.231 L1405.33 682.231 L1404.77 682.231 L1404.21 682.231 L1403.65 682.231 L1403.09 682.231 L1402.53 682.231 L1401.97 682.231 L1401.41 682.231 L1400.86 682.231 L1400.3 682.231 L1399.74 682.231 L1399.18 682.231 L1398.62 682.231 L1398.06 682.231 L1397.5 682.231 L1396.94 682.231 L1396.38 682.231 L1395.82 682.231 L1395.26 682.231 L1394.7 682.231 L1394.14 682.231 L1393.58 682.231 L1393.03 682.231 L1392.47 682.231 L1391.91 682.231 L1391.35 682.231 L1390.79 682.231 L1390.23 682.231 L1389.67 682.231 L1389.11 682.231 L1388.55 682.231 L1387.99 682.231 L1387.43 682.231 L1386.87 682.231 L1386.31 682.231 L1385.76 682.231 L1385.2 682.231 L1384.64 682.231 L1384.08 682.231 L1383.52 682.231 L1382.96 682.231 L1382.4 682.231 L1381.84 682.231 L1381.28 682.231 L1380.72 682.231 L1380.16 682.231 L1379.6 682.231 L1379.04 682.231 L1378.49 682.231 L1377.93 682.231 L1377.37 682.231 L1376.81 682.231 L1376.25 682.231 L1375.69 682.231 L1375.13 682.231 L1374.57 682.231 L1374.01 682.231 L1373.45 682.231 L1372.89 682.231 L1372.33 682.231 L1371.77 682.231 L1371.21 682.231 L1370.66 682.231 L1370.1 682.231 L1369.54 682.231 L1368.98 682.231 L1368.42 682.231 L1367.86 682.231 L1367.3 682.231 L1366.74 682.231 L1366.18 682.231 L1365.62 682.231 L1365.06 682.231 L1364.5 682.231 L1363.94 682.231 L1363.39 682.231 L1362.83 682.231 L1362.27 682.231 L1361.71 682.231 L1361.15 682.231 L1360.59 682.231 L1360.03 682.231 L1359.47 682.231 L1358.91 682.231 L1358.35 682.231 L1357.79 682.231 L1357.23 682.231 L1356.67 682.231 L1356.12 682.231 L1355.56 682.231 L1355 682.231 L1354.44 682.231 L1353.88 682.231 L1353.32 682.231 L1352.76 682.231 L1352.2 682.231 L1351.64 682.231 L1351.08 682.231 L1350.52 682.231 L1349.96 682.231 L1349.4 682.231 L1348.84 682.231 L1348.29 682.231 L1347.73 682.231 L1347.17 682.231 L1346.61 682.231 L1346.05 682.231 L1345.49 682.231 L1344.93 682.231 L1344.37 682.231 L1343.81 682.231 L1343.25 682.231 L1342.69 682.231 L1342.13 682.231 L1341.57 682.231 L1341.02 682.231 L1340.46 682.231 L1339.9 682.231 L1339.34 682.231 L1338.78 682.231 L1338.22 682.231 L1337.66 682.231 L1337.1 682.231 L1336.54 682.231 L1335.98 682.231 L1335.42 682.231 L1334.86 682.231 L1334.3 682.231 L1333.75 682.231 L1333.19 682.231 L1332.63 682.231 L1332.07 682.231 L1331.51 682.231 L1330.95 682.231 L1330.39 682.231 L1329.83 682.231 L1329.27 682.231 L1328.71 682.231 L1328.15 682.231 L1327.59 682.231 L1327.03 682.231 L1326.47 682.231 L1325.92 682.231 L1325.36 682.231 L1324.8 682.231 L1324.24 682.231 L1323.68 682.231 L1323.12 682.231 L1322.56 682.231 L1322 682.231 L1321.44 682.231 L1320.88 682.231 L1320.32 682.231 L1319.76 682.231 L1319.2 682.231 L1318.65 682.231 L1318.09 682.231 L1317.53 682.231 L1316.97 682.231 L1316.41 682.231 L1315.85 682.231 L1315.29 682.231 L1314.73 682.231 L1314.17 682.231 L1313.61 682.231 L1313.05 682.231 L1312.49 682.231 L1311.93 682.231 L1311.38 682.231 L1310.82 682.231 L1310.26 682.231 L1309.7 682.231 L1309.14 682.231 L1308.58 682.231 L1308.02 682.231 L1307.46 682.231 L1306.9 682.231 L1306.34 682.231 L1305.78 682.231 L1305.22 682.231 L1304.66 682.231 L1304.1 682.231 L1303.55 682.231 L1302.99 682.231 L1302.43 682.231 L1301.87 682.231 L1301.31 682.231 L1300.75 682.231 L1300.19 682.231 L1299.63 682.231 L1299.07 682.231 L1298.51 682.231 L1297.95 682.231 L1297.39 682.231 L1296.83 682.231 L1296.28 682.231 L1295.72 682.231 L1295.16 682.231 L1294.6 682.231 L1294.04 682.231 L1293.48 682.231 L1292.92 682.231 L1292.36 682.231 L1291.8 682.231 L1291.24 682.231 L1290.68 682.231 L1290.12 682.231 L1289.56 682.231 L1289 682.231 L1288.45 682.231 L1287.89 682.231 L1287.33 682.231 L1286.77 682.231 L1286.21 682.231 L1285.65 682.231 L1285.09 682.231 L1284.53 682.231 L1283.97 682.231 L1283.41 682.231 L1282.85 682.231 L1282.29 682.231 L1281.73 682.231 L1281.18 682.231 L1280.62 682.231 L1280.06 682.231 L1279.5 682.231 L1278.94 682.231 L1278.38 682.231 L1277.82 682.231 L1277.26 682.231 L1276.7 682.231 L1276.14 682.231 L1275.58 682.231 L1275.02 682.231 L1274.46 682.231 L1273.91 682.231 L1273.35 682.231 L1272.79 682.231 L1272.23 682.231 L1271.67 682.231 L1271.11 682.231 L1270.55 682.231 L1269.99 682.231 L1269.43 682.231 L1268.87 682.231 L1268.31 682.231 L1267.75 682.231 L1267.19 682.231 L1266.63 682.231 L1266.08 682.231 L1265.52 682.231 L1264.96 682.231 L1264.4 682.231 L1263.84 682.231 L1263.28 682.231 L1262.72 682.231 L1262.16 682.231 L1261.6 682.231 L1261.04 682.231 L1260.48 682.231 L1259.92 682.231 L1259.36 682.231 L1258.81 682.231 L1258.25 682.231 L1257.69 682.231 L1257.13 682.231 L1256.57 682.231 L1256.01 682.231 L1255.45 682.231 L1254.89 682.231 L1254.33 682.231 L1253.77 682.231 L1253.21 682.231 L1252.65 682.231 L1252.09 682.231 L1251.54 682.231 L1250.98 682.231 L1250.42 682.231 L1249.86 682.231 L1249.3 682.231 L1248.74 682.231 L1248.18 682.231 L1247.62 682.231 L1247.06 682.231 L1246.5 682.231 L1245.94 682.231 L1245.38 682.231 L1244.82 682.231 L1244.26 682.231 L1243.71 682.231 L1243.15 682.231 L1242.59 682.231 L1242.03 682.231 L1241.47 682.231 L1240.91 682.231 L1240.35 682.231 L1239.79 682.231 L1239.23 682.231 L1238.67 682.231 L1238.11 682.231 L1237.55 682.231 L1236.99 682.231 L1236.44 682.231 L1235.88 682.231 L1235.32 682.231 L1234.76 682.231 L1234.2 682.231 L1233.64 682.231 L1233.08 682.231 L1232.52 682.231 L1231.96 682.231 L1231.4 682.231 L1230.84 682.231 L1230.28 682.231 L1229.72 682.231 L1229.17 682.231 L1228.61 682.231 L1228.05 682.231 L1227.49 682.231 L1226.93 682.231 L1226.37 682.231 L1225.81 682.231 L1225.25 682.231 L1224.69 682.231 L1224.13 682.231 L1223.57 682.231 L1223.01 682.231 L1222.45 682.231 L1221.89 682.231 L1221.34 682.231 L1220.78 682.231 L1220.22 682.231 L1219.66 682.231 L1219.1 682.231 L1218.54 682.231 L1217.98 682.231 L1217.42 682.231 L1216.86 682.231 L1216.3 682.231 L1215.74 682.231 L1215.18 682.231 L1214.62 682.231 L1214.07 682.231 L1213.51 682.231 L1212.95 682.231 L1212.39 682.231 L1211.83 682.231 L1211.27 682.231 L1210.71 682.231 L1210.15 682.231 L1209.59 682.231 L1209.03 682.231 L1208.47 682.231 L1207.91 682.231 L1207.35 682.231 L1206.8 682.231 L1206.24 682.231 L1205.68 682.231 L1205.12 682.231 L1204.56 682.231 L1204 682.231 L1203.44 682.231 L1202.88 682.231 L1202.32 682.231 L1201.76 682.231 L1201.2 682.231 L1200.64 682.231 L1200.08 682.231 L1199.52 682.231 L1198.97 682.231 L1198.41 682.231 L1197.85 682.231 L1197.29 682.231 L1196.73 682.231 L1196.17 682.231 L1195.61 682.231 L1195.05 682.231 L1194.49 682.231 L1193.93 682.231 L1193.37 682.231 L1192.81 682.231 L1192.25 682.231 L1191.7 682.231 L1191.14 682.231 L1190.58 682.231 L1190.02 682.231 L1189.46 682.231 L1188.9 682.231 L1188.34 682.231 L1187.78 682.231 L1187.22 682.231 L1186.66 682.231 L1186.1 682.231 L1185.54 682.231 L1184.98 682.231 L1184.43 682.231 L1183.87 682.231 L1183.31 682.231 L1182.75 682.231 L1182.19 682.231 L1181.63 682.231 L1181.07 682.231 L1180.51 682.231 L1179.95 682.231 L1179.39 682.231 L1178.83 682.231 L1178.27 682.231 L1177.71 682.231 L1177.15 682.231 L1176.6 682.231 L1176.04 682.231 L1175.48 682.231 L1174.92 682.231 L1174.36 682.231 L1173.8 682.231 L1173.24 682.231 L1172.68 682.231 L1172.12 682.231 L1171.56 682.231 L1171 682.231 L1170.44 682.231 L1169.88 682.231 L1169.33 682.231 L1168.77 682.231 L1168.21 682.231 L1167.65 682.231 L1167.09 682.231 L1166.53 682.231 L1165.97 682.231 L1165.41 682.231 L1164.85 682.231 L1164.29 682.231 L1163.73 682.231 L1163.17 682.231 L1162.61 682.231 L1162.05 682.231 L1161.5 682.231 L1160.94 682.231 L1160.38 682.231 L1159.82 682.231 L1159.26 682.231 L1158.7 682.231 L1158.14 682.231 L1157.58 682.231 L1157.02 682.231 L1156.46 682.231 L1155.9 682.231 L1155.34 682.231 L1154.78 682.231 L1154.23 682.231 L1153.67 682.231 L1153.11 682.231 L1152.55 682.231 L1151.99 682.231 L1151.43 682.231 L1150.87 682.231 L1150.31 682.231 L1149.75 682.231 L1149.19 682.231 L1148.63 682.231 L1148.07 682.231 L1147.51 682.231 L1146.96 682.231 L1146.4 682.231 L1145.84 682.231 L1145.28 682.231 L1144.72 682.231 L1144.16 682.231 L1143.6 682.231 L1143.04 682.231 L1142.48 682.231 L1141.92 682.231 L1141.36 682.231 L1140.8 682.231 L1140.24 682.231 L1139.68 682.231 L1139.13 682.231 L1138.57 682.231 L1138.01 682.231 L1137.45 682.231 L1136.89 682.231 L1136.33 682.231 L1135.77 682.231 L1135.21 682.231 L1134.65 682.231 L1134.09 682.231 L1133.53 682.231 L1132.97 682.231 L1132.41 682.231 L1131.86 682.231 L1131.3 682.231 L1130.74 682.231 L1130.18 682.231 L1129.62 682.231 L1129.06 682.231 L1128.5 682.231 L1127.94 682.231 L1127.38 682.231 L1126.82 682.231 L1126.26 682.231 L1125.7 682.231 L1125.14 682.231 L1124.59 682.231 L1124.03 682.231 L1123.47 682.231 L1122.91 682.231 L1122.35 682.231 L1121.79 682.231 L1121.23 682.231 L1120.67 682.231 L1120.11 682.231 L1119.55 682.231 L1118.99 682.231 L1118.43 682.231 L1117.87 682.231 L1117.31 682.231 L1116.76 682.231 L1116.2 682.231 L1115.64 682.231 L1115.08 682.231 L1114.52 682.231 L1113.96 682.231 L1113.4 682.231 L1112.84 682.231 L1112.28 682.231 L1111.72 682.231 L1111.16 682.231 L1110.6 682.231 L1110.04 682.231 L1109.49 682.231 L1108.93 682.231 L1108.37 682.231 L1107.81 682.231 L1107.25 682.231 L1106.69 682.231 L1106.13 682.231 L1105.57 682.231 L1105.01 682.231 L1104.45 682.231 L1103.89 682.231 L1103.33 682.231 L1102.77 682.231 L1102.22 682.231 L1101.66 682.231 L1101.1 682.231 L1100.54 682.231 L1099.98 682.231 L1099.42 682.231 L1098.86 682.231 L1098.3 682.231 L1097.74 682.231 L1097.18 682.231 L1096.62 682.231 L1096.06 682.231 L1095.5 682.231 L1094.94 682.231 L1094.39 682.231 L1093.83 682.231 L1093.27 682.231 L1092.71 682.231 L1092.15 682.231 L1091.59 682.231 L1091.03 682.231 L1090.47 682.231 L1089.91 682.231 L1089.35 682.231 L1088.79 682.231 L1088.23 682.231 L1087.67 682.231 L1087.12 682.231 L1086.56 682.231 L1086 682.231 L1085.44 682.231 L1084.88 682.231 L1084.32 682.231 L1083.76 682.231 L1083.2 682.231 L1082.64 682.231 L1082.08 682.231 L1081.52 682.231 L1080.96 682.231 L1080.4 682.231 L1079.85 682.231 L1079.29 682.231 L1078.73 682.231 L1078.17 682.231 L1077.61 682.231 L1077.05 682.231 L1076.49 682.231 L1075.93 682.231 L1075.37 682.231 L1074.81 682.231 L1074.25 682.231 L1073.69 682.231 L1073.13 682.231 L1072.57 682.231 L1072.02 682.231 L1071.46 682.231 L1070.9 682.231 L1070.34 682.231 L1069.78 682.231 L1069.22 682.231 L1068.66 682.231 L1068.1 682.231 L1067.54 682.231 L1066.98 682.231 L1066.42 682.231 L1065.86 682.231 L1065.3 682.231 L1064.75 682.231 L1064.19 682.231 L1063.63 682.231 L1063.07 682.231 L1062.51 682.231 L1061.95 682.231 L1061.39 682.231 L1060.83 682.231 L1060.27 682.231 L1059.71 682.231 L1059.15 682.231 L1058.59 682.231 L1058.03 682.231 L1057.48 682.231 L1056.92 682.231 L1056.36 682.231 L1055.8 682.231 L1055.24 682.231 L1054.68 682.231 L1054.12 682.231 L1053.56 682.231 L1053 682.231 L1052.44 682.231 L1051.88 682.231 L1051.32 682.231 L1050.76 682.231 L1050.2 682.231 L1049.65 682.231 L1049.09 682.231 L1048.53 682.231 L1047.97 682.231 L1047.41 682.231 L1046.85 682.231 L1046.29 682.231 L1045.73 682.231 L1045.17 682.231 L1044.61 682.231 L1044.05 682.231 L1043.49 682.231 L1042.93 682.231 L1042.38 682.231 L1041.82 682.231 L1041.26 682.231 L1040.7 682.231 L1040.14 682.231 L1039.58 682.231 L1039.02 682.231 L1038.46 682.231 L1037.9 682.231 L1037.34 682.231 L1036.78 682.231 L1036.22 682.231 L1035.66 682.231 L1035.1 682.231 L1034.55 682.231 L1033.99 682.231 L1033.43 682.231 L1032.87 682.231 L1032.31 682.231 L1031.75 682.231 L1031.19 682.231 L1030.63 682.231 L1030.07 682.231 L1029.51 682.231 L1028.95 682.231 L1028.39 682.231 L1027.83 682.231 L1027.28 682.231 L1026.72 682.231 L1026.16 682.231 L1025.6 682.231 L1025.04 682.231 L1024.48 682.231 L1023.92 682.231 L1023.36 682.231 L1022.8 682.231 L1022.24 682.231 L1021.68 682.231 L1021.12 682.231 L1020.56 682.231 L1020.01 682.231 L1019.45 682.231 L1018.89 682.231 L1018.33 682.231 L1017.77 682.231 L1017.21 682.231 L1016.65 682.231 L1016.09 682.231 L1015.53 682.231 L1014.97 682.231 L1014.41 682.231 L1013.85 682.231 L1013.29 682.231 L1012.73 682.231 L1012.18 682.231 L1011.62 682.231 L1011.06 682.231 L1010.5 682.231 L1009.94 682.231 L1009.38 682.231 L1008.82 682.231 L1008.26 682.231 L1007.7 682.231 L1007.14 682.231 L1006.58 682.231 L1006.02 682.231 L1005.46 682.231 L1004.91 682.231 L1004.35 682.231 L1003.79 682.231 L1003.23 682.231 L1002.67 682.231 L1002.11 682.231 L1001.55 682.231 L1000.99 682.231 L1000.43 682.231 L999.872 682.231 L999.313 682.231 L998.754 682.231 L998.194 682.231 L997.635 682.231 L997.076 682.231 L996.517 682.231 L995.957 682.231 L995.398 682.231 L994.839 682.231 L994.28 682.231 L993.72 682.231 L993.161 682.231 L992.602 682.231 L992.043 682.231 L991.483 682.231 L990.924 682.231 L990.365 682.231 L989.806 682.231 L989.246 682.231 L988.687 682.231 L988.128 682.231 L987.569 682.231 L987.009 682.231 L986.45 682.231 L985.891 682.231 L985.332 682.231 L984.772 682.231 L984.213 682.231 L983.654 682.231 L983.095 682.231 L982.535 682.231 L981.976 682.231 L981.417 682.231 L980.858 682.231 L980.298 682.231 L979.739 682.231 L979.18 682.231 L978.621 682.231 L978.061 682.231 L977.502 682.231 L976.943 682.231 L976.384 682.231 L975.824 682.231 L975.265 682.231 L974.706 682.231 L974.147 682.231 L973.587 682.231 L973.028 682.231 L972.469 682.231 L971.91 682.231 L971.35 682.231 L970.791 682.231 L970.232 682.231 L969.673 682.231 L969.113 682.231 L968.554 682.231 L967.995 682.231 L967.436 682.231 L966.876 682.231 L966.317 682.231 L965.758 682.231 L965.199 682.231 L964.639 682.231 L964.08 682.231 L963.521 682.231 L962.962 682.231 L962.402 682.231 L961.843 682.231 L961.284 682.231 L960.725 682.231 L960.165 682.231 L959.606 682.231 L959.047 682.231 L958.488 682.231 L957.928 682.231 L957.369 682.231 L956.81 682.231 L956.251 682.231 L955.691 682.231 L955.132 682.231 L954.573 682.231 L954.014 682.231 L953.454 682.231 L952.895 682.231 L952.336 682.231 L951.777 682.231 L951.217 682.231 L950.658 682.231 L950.099 682.231 L949.54 682.231 L948.98 682.231 L948.421 682.231 L947.862 682.231 L947.303 682.231 L946.743 682.231 L946.184 682.231 L945.625 682.231 L945.066 682.231 L944.506 682.231 L943.947 682.231 L943.388 682.231 L942.829 682.231 L942.269 682.231 L941.71 682.231 L941.151 682.231 L940.592 682.231 L940.032 682.231 L939.473 682.231 L938.914 682.231 L938.355 682.231 L937.795 682.231 L937.236 682.231 L936.677 682.231 L936.118 682.231 L935.558 682.231 L934.999 682.231 L934.44 682.231 L933.881 682.231 L933.321 682.231 L932.762 682.231 L932.203 682.231 L931.644 682.231 L931.084 682.231 L930.525 682.231 L929.966 682.231 L929.406 682.231 L928.847 682.231 L928.288 682.231 L927.729 682.231 L927.169 682.231 L926.61 682.231 L926.051 682.231 L925.492 682.231 L924.932 682.231 L924.373 682.231 L923.814 682.231 L923.255 682.231 L922.695 682.231 L922.136 682.231 L921.577 682.231 L921.018 682.231 L920.458 682.231 L919.899 682.231 L919.34 682.231 L918.781 682.231 L918.221 682.231 L917.662 682.231 L917.103 682.231 L916.544 682.231 L915.984 682.231 L915.425 682.231 L914.866 682.231 L914.307 682.231 L913.747 682.231 L913.188 682.231 L912.629 682.231 L912.07 682.231 L911.51 682.231 L910.951 682.231 L910.392 682.231 L909.833 682.231 L909.273 682.231 L908.714 682.231 L908.155 682.231 L907.596 682.231 L907.036 682.231 L906.477 682.231 L905.918 682.231 L905.359 682.231 L904.799 682.231 L904.24 682.231 L903.681 682.231 L903.122 682.231 L902.562 682.231 L902.003 682.231 L901.444 682.231 L900.885 682.231 L900.325 682.231 L899.766 682.231 L899.207 682.231 L898.648 682.231 L898.088 682.231 L897.529 682.231 L896.97 682.231 L896.411 682.231 L895.851 682.231 L895.292 682.231 L894.733 682.231 L894.174 682.231 L893.614 682.231 L893.055 682.231 L892.496 682.231 L891.937 682.231 L891.377 682.231 L890.818 682.231 L890.259 682.231 L889.7 682.231 L889.14 682.231 L888.581 682.231 L888.022 682.231 L887.463 682.231 L886.903 682.231 L886.344 682.231 L885.785 682.231 L885.226 682.231 L884.666 682.231 L884.107 682.231 L883.548 682.231 L882.989 682.231 L882.429 682.231 L881.87 682.231 L881.311 682.231 L880.752 682.231 L880.192 682.231 L879.633 682.231 L879.074 682.231 L878.515 682.231 L877.955 682.231 L877.396 682.231 L876.837 682.231 L876.278 682.231 L875.718 682.231 L875.159 682.231 L874.6 682.231 L874.041 682.231 L873.481 682.231 L872.922 682.231 L872.363 682.231 L871.804 682.231 L871.244 682.231 L870.685 682.231 L870.126 682.231 L869.567 682.231 L869.007 682.231 L868.448 682.231 L867.889 682.231 L867.33 682.231 L866.77 682.231 L866.211 682.231 L865.652 682.231 L865.093 682.231 L864.533 682.231 L863.974 682.231 L863.415 682.231 L862.856 682.231 L862.296 682.231 L861.737 682.231 L861.178 682.231 L860.619 682.231 L860.059 682.231 L859.5 682.231 L858.941 682.231 L858.382 682.231 L857.822 682.231 L857.263 682.231 L856.704 682.231 L856.145 682.231 L855.585 682.231 L855.026 682.231 L854.467 682.231 L853.908 682.231 L853.348 682.231 L852.789 682.231 L852.23 682.231 L851.671 682.231 L851.111 682.231 L850.552 682.231 L849.993 682.231 L849.434 682.231 L848.874 682.231 L848.315 682.231 L847.756 682.231 L847.197 682.231 L846.637 682.231 L846.078 682.231 L845.519 682.231 L844.96 682.231 L844.4 682.231 L843.841 682.231 L843.282 682.231 L842.723 682.231 L842.163 682.231 L841.604 682.231 L841.045 682.231 L840.486 682.231 L839.926 682.231 L839.367 682.231 L838.808 682.231 L838.249 682.231 L837.689 682.231 L837.13 682.231 L836.571 682.231 L836.012 682.231 L835.452 682.231 L834.893 682.231 L834.334 682.231 L833.775 682.231 L833.215 682.231 L832.656 682.231 L832.097 682.231 L831.538 682.231 L830.978 682.231 L830.419 682.231 L829.86 682.231 L829.301 682.231 L828.741 682.231 L828.182 682.231 L827.623 682.231 L827.064 682.231 L826.504 682.231 L825.945 682.231 L825.386 682.231 L824.827 682.231 L824.267 682.231 L823.708 682.231 L823.149 682.231 L822.59 682.231 L822.03 682.231 L821.471 682.231 L820.912 682.231 L820.353 682.231 L819.793 682.231 L819.234 682.231 L818.675 682.231 L818.116 682.231 L817.556 682.231 L816.997 682.231 L816.438 682.231 L815.879 682.231 L815.319 682.231 L814.76 682.231 L814.201 682.231 L813.642 682.231 L813.082 682.231 L812.523 682.231 L811.964 682.231 L811.405 682.231 L810.845 682.231 L810.286 682.231 L809.727 682.231 L809.168 682.231 L808.608 682.231 L808.049 682.231 L807.49 682.231 L806.931 682.231 L806.371 682.231 L805.812 682.231 L805.253 682.231 L804.693 682.231 L804.134 682.231 L803.575 682.231 L803.016 682.231 L802.456 682.231 L801.897 682.231 L801.338 682.231 L800.779 682.231 L800.219 682.231 L799.66 682.231 L799.101 682.231 L798.542 682.231 L797.982 682.231 L797.423 682.231 L796.864 682.231 L796.305 682.231 L795.745 682.231 L795.186 682.231 L794.627 682.231 L794.068 682.231 L793.508 682.231 L792.949 682.231 L792.39 682.231 L791.831 682.231 L791.271 682.231 L790.712 682.231 L790.153 682.231 L789.594 682.231 L789.034 682.231 L788.475 682.231 L787.916 682.231 L787.357 682.231 L786.797 682.231 L786.238 682.231 L785.679 682.231 L785.12 682.231 L784.56 682.231 L784.001 682.231 L783.442 682.231 L782.883 682.231 L782.323 682.231 L781.764 682.231 L781.205 682.231 L780.646 682.231 L780.086 682.231 L779.527 682.231 L778.968 682.231 L778.409 682.231 L777.849 682.231 L777.29 682.231 L776.731 682.231 L776.172 682.231 L775.612 682.231 L775.053 682.231 L774.494 682.231 L773.935 682.231 L773.375 682.231 L772.816 682.231 L772.257 682.231 L771.698 682.231 L771.138 682.231 L770.579 682.231 L770.02 682.231 L769.461 682.231 L768.901 682.231 L768.342 682.231 L767.783 682.231 L767.224 682.231 L766.664 682.231 L766.105 682.231 L765.546 682.231 L764.987 682.231 L764.427 682.231 L763.868 682.231 L763.309 682.231 L762.75 682.231 L762.19 682.231 L761.631 682.231 L761.072 682.231 L760.513 682.231 L759.953 682.231 L759.394 682.231 L758.835 682.231 L758.276 682.231 L757.716 682.231 L757.157 682.231 L756.598 682.231 L756.039 682.231 L755.479 682.231 L754.92 682.231 L754.361 682.231 L753.802 682.231 L753.242 682.231 L752.683 682.231 L752.124 682.231 L751.565 682.231 L751.005 682.231 L750.446 682.231 L749.887 682.231 L749.328 682.231 L748.768 682.231 L748.209 682.231 L747.65 682.231 L747.091 682.231 L746.531 682.231 L745.972 682.231 L745.413 682.231 L744.854 682.231 L744.294 682.231 L743.735 682.231 L743.176 682.231 L742.617 682.231 L742.057 682.231 L741.498 682.231 L740.939 682.231 L740.38 682.231 L739.82 682.231 L739.261 682.231 L738.702 682.231 L738.143 682.231 L737.583 682.231 L737.024 682.231 L736.465 682.231 L735.906 682.231 L735.346 682.231 L734.787 682.231 L734.228 682.231 L733.669 682.231 L733.109 682.231 L732.55 682.231 L731.991 682.231 L731.432 682.231 L730.872 682.231 L730.313 682.231 L729.754 682.231 L729.195 682.231 L728.635 682.231 L728.076 682.231 L727.517 682.231 L726.958 682.231 L726.398 682.231 L725.839 682.231 L725.28 682.231 L724.721 682.231 L724.161 682.231 L723.602 682.231 L723.043 682.231 L722.484 682.231 L721.924 682.231 L721.365 682.231 L720.806 682.231 L720.247 682.231  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.121 720.806,683.121 721.365,683.121 721.924,683.121 722.484,683.121 723.043,683.121 723.602,683.121 724.161,683.121 724.721,683.121 725.28,683.121 725.839,683.121 726.398,683.121 726.958,683.121 727.517,683.121 728.076,683.121 728.635,683.121 729.195,683.121 729.754,683.121 730.313,683.121 730.872,683.121 731.432,683.121 731.991,683.121 732.55,683.121 733.109,683.121 733.669,683.121 734.228,683.121 734.787,683.121 735.346,683.121 735.906,683.121 736.465,683.121 737.024,683.121 737.583,683.121 738.143,683.121 738.702,683.121 739.261,683.121 739.82,683.121 740.38,683.121 740.939,683.121 741.498,683.121 742.057,683.121 742.617,683.121 743.176,683.121 743.735,683.121 744.294,683.121 744.854,683.121 745.413,683.121 745.972,683.121 746.531,683.121 747.091,683.121 747.65,683.121 748.209,683.121 748.768,683.121 749.328,683.121 749.887,683.121 750.446,683.121 751.005,683.121 751.565,683.121 752.124,683.121 752.683,683.121 753.242,683.121 753.802,683.121 754.361,683.121 754.92,683.121 755.479,683.121 756.039,683.121 756.598,683.121 757.157,683.121 757.716,683.121 758.276,683.121 758.835,683.121 759.394,683.121 759.953,683.121 760.513,683.121 761.072,683.121 761.631,683.121 762.19,683.121 762.75,683.121 763.309,683.121 763.868,683.121 764.427,683.121 764.987,683.121 765.546,683.121 766.105,683.121 766.664,683.121 767.224,683.121 767.783,683.121 768.342,683.121 768.901,683.121 769.461,683.121 770.02,683.121 770.579,683.121 771.138,683.121 771.698,683.121 772.257,683.121 772.816,683.121 773.375,683.121 773.935,683.121 774.494,683.121 775.053,683.121 775.612,683.121 776.172,683.121 776.731,683.121 777.29,683.121 777.849,683.121 778.409,683.121 778.968,683.121 779.527,683.121 780.086,683.121 780.646,683.121 781.205,683.121 781.764,683.121 782.323,683.121 782.883,683.121 783.442,683.121 784.001,683.121 784.56,683.121 785.12,683.121 785.679,683.121 786.238,683.121 786.797,683.121 787.357,683.121 787.916,683.121 788.475,683.121 789.034,683.121 789.594,683.121 790.153,683.121 790.712,683.121 791.271,683.121 791.831,683.121 792.39,683.121 792.949,683.121 793.508,683.121 794.068,683.121 794.627,683.121 795.186,683.121 795.745,683.121 796.305,683.121 796.864,683.121 797.423,683.121 797.982,683.121 798.542,683.121 799.101,683.121 799.66,683.121 800.219,683.121 800.779,683.121 801.338,683.121 801.897,683.121 802.456,683.121 803.016,683.121 803.575,683.121 804.134,683.121 804.693,683.121 805.253,683.121 805.812,683.121 806.371,683.121 806.931,683.121 807.49,683.121 808.049,683.121 808.608,683.121 809.168,683.121 809.727,683.121 810.286,683.121 810.845,683.121 811.405,683.121 811.964,683.121 812.523,683.121 813.082,683.121 813.642,683.121 814.201,683.121 814.76,683.121 815.319,683.121 815.879,683.121 816.438,683.121 816.997,683.121 817.556,683.121 818.116,683.121 818.675,683.121 819.234,683.121 819.793,683.121 820.353,683.121 820.912,683.121 821.471,683.121 822.03,683.121 822.59,683.121 823.149,683.121 823.708,683.121 824.267,683.121 824.827,683.121 825.386,683.121 825.945,683.121 826.504,683.121 827.064,683.121 827.623,683.121 828.182,683.121 828.741,683.121 829.301,683.121 829.86,683.121 830.419,683.121 830.978,683.121 831.538,683.121 832.097,683.121 832.656,683.121 833.215,683.121 833.775,683.121 834.334,683.121 834.893,683.121 835.452,683.121 836.012,683.121 836.571,683.121 837.13,683.121 837.689,683.121 838.249,683.121 838.808,683.121 839.367,683.121 839.926,683.121 840.486,683.121 841.045,683.121 841.604,683.121 842.163,683.121 842.723,683.121 843.282,683.121 843.841,683.121 844.4,683.121 844.96,683.121 845.519,683.121 846.078,683.121 846.637,683.121 847.197,683.121 847.756,683.121 848.315,683.121 848.874,683.121 849.434,683.121 849.993,683.121 850.552,683.121 851.111,683.121 851.671,683.121 852.23,683.121 852.789,683.121 853.348,683.121 853.908,683.121 854.467,683.121 855.026,683.121 855.585,683.121 856.145,683.121 856.704,683.121 857.263,683.121 857.822,683.121 858.382,683.121 858.941,683.121 859.5,683.121 860.059,683.121 860.619,683.121 861.178,683.121 861.737,683.121 862.296,683.121 862.856,683.121 863.415,683.121 863.974,683.121 864.533,683.121 865.093,683.121 865.652,683.121 866.211,683.121 866.77,683.121 867.33,683.121 867.889,683.121 868.448,683.121 869.007,683.121 869.567,683.121 870.126,683.121 870.685,683.121 871.244,683.121 871.804,683.121 872.363,683.121 872.922,683.121 873.481,683.121 874.041,683.121 874.6,683.121 875.159,683.121 875.718,683.121 876.278,683.121 876.837,683.121 877.396,683.121 877.955,683.121 878.515,683.121 879.074,683.121 879.633,683.121 880.192,683.121 880.752,683.121 881.311,683.121 881.87,683.121 882.429,683.121 882.989,683.121 883.548,683.121 884.107,683.121 884.666,683.121 885.226,683.121 885.785,683.121 886.344,683.121 886.903,683.121 887.463,683.121 888.022,683.121 888.581,683.121 889.14,683.121 889.7,683.121 890.259,683.121 890.818,683.121 891.377,683.121 891.937,683.121 892.496,683.121 893.055,683.121 893.614,683.121 894.174,683.121 894.733,683.121 895.292,683.121 895.851,683.121 896.411,683.121 896.97,683.121 897.529,683.121 898.088,683.121 898.648,683.121 899.207,683.121 899.766,683.121 900.325,683.121 900.885,683.121 901.444,683.121 902.003,683.121 902.562,683.121 903.122,683.121 903.681,683.121 904.24,683.121 904.799,683.121 905.359,683.121 905.918,683.121 906.477,683.121 907.036,683.121 907.596,683.121 908.155,683.121 908.714,683.121 909.273,683.121 909.833,683.121 910.392,683.121 910.951,683.121 911.51,683.121 912.07,683.121 912.629,683.121 913.188,683.121 913.747,683.121 914.307,683.121 914.866,683.121 915.425,683.121 915.984,683.121 916.544,683.121 917.103,683.121 917.662,683.121 918.221,683.121 918.781,683.121 919.34,683.121 919.899,683.121 920.458,683.121 921.018,683.121 921.577,683.121 922.136,683.121 922.695,683.121 923.255,683.121 923.814,683.121 924.373,683.121 924.932,683.121 925.492,683.121 926.051,683.121 926.61,683.121 927.169,683.121 927.729,683.121 928.288,683.121 928.847,683.121 929.406,683.121 929.966,683.121 930.525,683.121 931.084,683.121 931.644,683.121 932.203,683.121 932.762,683.121 933.321,683.121 933.881,683.121 934.44,683.121 934.999,683.121 935.558,683.121 936.118,683.121 936.677,683.121 937.236,683.121 937.795,683.121 938.355,683.121 938.914,683.121 939.473,683.121 940.032,683.121 940.592,683.121 941.151,683.121 941.71,683.121 942.269,683.121 942.829,683.121 943.388,683.121 943.947,683.121 944.506,683.121 945.066,683.121 945.625,683.121 946.184,683.121 946.743,683.121 947.303,683.121 947.862,683.121 948.421,683.121 948.98,683.121 949.54,683.121 950.099,683.121 950.658,683.121 951.217,683.121 951.777,683.121 952.336,683.121 952.895,683.121 953.454,683.121 954.014,683.121 954.573,683.121 955.132,683.121 955.691,683.121 956.251,683.121 956.81,683.121 957.369,683.121 957.928,683.121 958.488,683.121 959.047,683.121 959.606,683.121 960.165,683.121 960.725,683.121 961.284,683.121 961.843,683.121 962.402,683.121 962.962,683.121 963.521,683.121 964.08,683.121 964.639,683.121 965.199,683.121 965.758,683.121 966.317,683.121 966.876,683.121 967.436,683.121 967.995,683.121 968.554,683.121 969.113,683.121 969.673,683.121 970.232,683.121 970.791,683.121 971.35,683.121 971.91,683.121 972.469,683.121 973.028,683.121 973.587,683.121 974.147,683.121 974.706,683.121 975.265,683.121 975.824,683.121 976.384,683.121 976.943,683.121 977.502,683.121 978.061,683.121 978.621,683.121 979.18,683.121 979.739,683.121 980.298,683.121 980.858,683.121 981.417,683.121 981.976,683.121 982.535,683.121 983.095,683.121 983.654,683.121 984.213,683.121 984.772,683.121 985.332,683.121 985.891,683.121 986.45,683.121 987.009,683.121 987.569,683.121 988.128,683.121 988.687,683.121 989.246,683.121 989.806,683.121 990.365,683.121 990.924,683.121 991.483,683.121 992.043,683.121 992.602,683.121 993.161,683.121 993.72,683.121 994.28,683.121 994.839,683.121 995.398,683.121 995.957,683.121 996.517,683.121 997.076,683.121 997.635,683.121 998.194,683.121 998.754,683.121 999.313,683.121 999.872,683.121 1000.43,683.121 1000.99,683.121 1001.55,683.121 1002.11,683.121 1002.67,683.121 1003.23,683.121 1003.79,683.121 1004.35,683.121 1004.91,683.121 1005.46,683.121 1006.02,683.121 1006.58,683.121 1007.14,683.121 1007.7,683.121 1008.26,683.121 1008.82,683.121 1009.38,683.121 1009.94,683.121 1010.5,683.121 1011.06,683.121 1011.62,683.121 1012.18,683.121 1012.73,683.121 1013.29,683.121 1013.85,683.121 1014.41,683.121 1014.97,683.121 1015.53,683.121 1016.09,683.121 1016.65,683.121 1017.21,683.121 1017.77,683.121 1018.33,683.121 1018.89,683.121 1019.45,683.121 1020.01,683.121 1020.56,683.121 1021.12,683.121 1021.68,683.121 1022.24,683.121 1022.8,683.121 1023.36,683.121 1023.92,683.121 1024.48,683.121 1025.04,683.121 1025.6,683.121 1026.16,683.121 1026.72,683.121 1027.28,683.121 1027.83,683.121 1028.39,683.121 1028.95,683.121 1029.51,683.121 1030.07,683.121 1030.63,683.121 1031.19,683.121 1031.75,683.121 1032.31,683.121 1032.87,683.121 1033.43,683.121 1033.99,683.121 1034.55,683.121 1035.1,683.121 1035.66,683.121 1036.22,683.121 1036.78,683.121 1037.34,683.121 1037.9,683.121 1038.46,683.121 1039.02,683.121 1039.58,683.121 1040.14,683.121 1040.7,683.121 1041.26,683.121 1041.82,683.121 1042.38,683.121 1042.93,683.121 1043.49,683.121 1044.05,683.121 1044.61,683.121 1045.17,683.121 1045.73,683.121 1046.29,683.121 1046.85,683.121 1047.41,683.121 1047.97,683.121 1048.53,683.121 1049.09,683.121 1049.65,683.121 1050.2,683.121 1050.76,683.121 1051.32,683.121 1051.88,683.121 1052.44,683.121 1053,683.121 1053.56,683.121 1054.12,683.121 1054.68,683.121 1055.24,683.121 1055.8,683.121 1056.36,683.121 1056.92,683.121 1057.48,683.121 1058.03,683.121 1058.59,683.121 1059.15,683.121 1059.71,683.121 1060.27,683.121 1060.83,683.121 1061.39,683.121 1061.95,683.121 1062.51,683.121 1063.07,683.121 1063.63,683.121 1064.19,683.121 1064.75,683.121 1065.3,683.121 1065.86,683.121 1066.42,683.121 1066.98,683.121 1067.54,683.121 1068.1,683.121 1068.66,683.121 1069.22,683.121 1069.78,683.121 1070.34,683.121 1070.9,683.121 1071.46,683.121 1072.02,683.121 1072.57,683.121 1073.13,683.121 1073.69,683.121 1074.25,683.121 1074.81,683.121 1075.37,683.121 1075.93,683.121 1076.49,683.121 1077.05,683.121 1077.61,683.121 1078.17,683.121 1078.73,683.121 1079.29,683.121 1079.85,683.121 1080.4,683.121 1080.96,683.121 1081.52,683.121 1082.08,683.121 1082.64,683.121 1083.2,683.121 1083.76,683.121 1084.32,683.121 1084.88,683.121 1085.44,683.121 1086,683.121 1086.56,683.121 1087.12,683.121 1087.67,683.121 1088.23,683.121 1088.79,683.121 1089.35,683.121 1089.91,683.121 1090.47,683.121 1091.03,683.121 1091.59,683.121 1092.15,683.121 1092.71,683.121 1093.27,683.121 1093.83,683.121 1094.39,683.121 1094.94,683.121 1095.5,683.121 1096.06,683.121 1096.62,683.121 1097.18,683.121 1097.74,683.121 1098.3,683.121 1098.86,683.121 1099.42,683.121 1099.98,683.121 1100.54,683.121 1101.1,683.121 1101.66,683.121 1102.22,683.121 1102.77,683.121 1103.33,683.121 1103.89,683.121 1104.45,683.121 1105.01,683.121 1105.57,683.121 1106.13,683.121 1106.69,683.121 1107.25,683.121 1107.81,683.121 1108.37,683.121 1108.93,683.121 1109.49,683.121 1110.04,683.121 1110.6,683.121 1111.16,683.121 1111.72,683.121 1112.28,683.121 1112.84,683.121 1113.4,683.121 1113.96,683.121 1114.52,683.121 1115.08,683.121 1115.64,683.121 1116.2,683.121 1116.76,683.121 1117.31,683.121 1117.87,683.121 1118.43,683.121 1118.99,683.121 1119.55,683.121 1120.11,683.121 1120.67,683.121 1121.23,683.121 1121.79,683.121 1122.35,683.121 1122.91,683.121 1123.47,683.121 1124.03,683.121 1124.59,683.121 1125.14,683.121 1125.7,683.121 1126.26,683.121 1126.82,683.121 1127.38,683.121 1127.94,683.121 1128.5,683.121 1129.06,683.121 1129.62,683.121 1130.18,683.121 1130.74,683.121 1131.3,683.121 1131.86,683.121 1132.41,683.121 1132.97,683.121 1133.53,683.121 1134.09,683.121 1134.65,683.121 1135.21,683.121 1135.77,683.121 1136.33,683.121 1136.89,683.121 1137.45,683.121 1138.01,683.121 1138.57,683.121 1139.13,683.121 1139.68,683.121 1140.24,683.121 1140.8,683.121 1141.36,683.121 1141.92,683.121 1142.48,683.121 1143.04,683.121 1143.6,683.121 1144.16,683.121 1144.72,683.121 1145.28,683.121 1145.84,683.121 1146.4,683.121 1146.96,683.121 1147.51,683.121 1148.07,683.121 1148.63,683.121 1149.19,683.121 1149.75,683.121 1150.31,683.121 1150.87,683.121 1151.43,683.121 1151.99,683.121 1152.55,683.121 1153.11,683.121 1153.67,683.121 1154.23,683.121 1154.78,683.121 1155.34,683.121 1155.9,683.121 1156.46,683.121 1157.02,683.121 1157.58,683.121 1158.14,683.121 1158.7,683.121 1159.26,683.121 1159.82,683.121 1160.38,683.121 1160.94,683.121 1161.5,683.121 1162.05,683.121 1162.61,683.121 1163.17,683.121 1163.73,683.121 1164.29,683.121 1164.85,683.121 1165.41,683.121 1165.97,683.121 1166.53,683.121 1167.09,683.121 1167.65,683.121 1168.21,683.121 1168.77,683.121 1169.33,683.121 1169.88,683.121 1170.44,683.121 1171,683.121 1171.56,683.121 1172.12,683.121 1172.68,683.121 1173.24,683.121 1173.8,683.121 1174.36,683.121 1174.92,683.121 1175.48,683.121 1176.04,683.121 1176.6,683.121 1177.15,683.121 1177.71,683.121 1178.27,683.121 1178.83,683.121 1179.39,683.121 1179.95,683.121 1180.51,683.121 1181.07,683.121 1181.63,683.121 1182.19,683.121 1182.75,683.121 1183.31,683.121 1183.87,683.121 1184.43,683.121 1184.98,683.121 1185.54,683.121 1186.1,683.121 1186.66,683.121 1187.22,683.121 1187.78,683.121 1188.34,683.121 1188.9,683.121 1189.46,683.121 1190.02,683.121 1190.58,683.121 1191.14,683.121 1191.7,683.121 1192.25,683.121 1192.81,683.121 1193.37,683.121 1193.93,683.121 1194.49,683.121 1195.05,683.121 1195.61,683.121 1196.17,683.121 1196.73,683.121 1197.29,683.121 1197.85,683.121 1198.41,683.121 1198.97,683.121 1199.52,683.121 1200.08,683.121 1200.64,683.121 1201.2,683.121 1201.76,683.121 1202.32,683.121 1202.88,683.121 1203.44,683.121 1204,683.121 1204.56,683.121 1205.12,683.121 1205.68,683.121 1206.24,683.121 1206.8,683.121 1207.35,683.121 1207.91,683.121 1208.47,683.121 1209.03,683.121 1209.59,683.121 1210.15,683.121 1210.71,683.121 1211.27,683.121 1211.83,683.121 1212.39,683.121 1212.95,683.121 1213.51,683.121 1214.07,683.121 1214.62,683.121 1215.18,683.121 1215.74,683.121 1216.3,683.121 1216.86,683.121 1217.42,683.121 1217.98,683.121 1218.54,683.121 1219.1,683.121 1219.66,683.121 1220.22,683.121 1220.78,683.121 1221.34,683.121 1221.89,683.121 1222.45,683.121 1223.01,683.121 1223.57,683.121 1224.13,683.121 1224.69,683.121 1225.25,683.121 1225.81,683.121 1226.37,683.121 1226.93,683.121 1227.49,683.121 1228.05,683.121 1228.61,683.121 1229.17,683.121 1229.72,683.121 1230.28,683.121 1230.84,683.121 1231.4,683.121 1231.96,683.121 1232.52,683.121 1233.08,683.121 1233.64,683.121 1234.2,683.121 1234.76,683.121 1235.32,683.121 1235.88,683.121 1236.44,683.121 1236.99,683.121 1237.55,683.121 1238.11,683.121 1238.67,683.121 1239.23,683.121 1239.79,683.121 1240.35,683.121 1240.91,683.121 1241.47,683.121 1242.03,683.121 1242.59,683.121 1243.15,683.121 1243.71,683.121 1244.26,683.121 1244.82,683.121 1245.38,683.121 1245.94,683.121 1246.5,683.121 1247.06,683.121 1247.62,683.121 1248.18,683.121 1248.74,683.121 1249.3,683.121 1249.86,683.121 1250.42,683.121 1250.98,683.121 1251.54,683.121 1252.09,683.121 1252.65,683.121 1253.21,683.121 1253.77,683.121 1254.33,683.121 1254.89,683.121 1255.45,683.121 1256.01,683.121 1256.57,683.121 1257.13,683.121 1257.69,683.121 1258.25,683.121 1258.81,683.121 1259.36,683.121 1259.92,683.121 1260.48,683.121 1261.04,683.121 1261.6,683.121 1262.16,683.121 1262.72,683.121 1263.28,683.121 1263.84,683.121 1264.4,683.121 1264.96,683.121 1265.52,683.121 1266.08,683.121 1266.63,683.121 1267.19,683.121 1267.75,683.121 1268.31,683.121 1268.87,683.121 1269.43,683.121 1269.99,683.121 1270.55,683.121 1271.11,683.121 1271.67,683.121 1272.23,683.121 1272.79,683.121 1273.35,683.121 1273.91,683.121 1274.46,683.121 1275.02,683.121 1275.58,683.121 1276.14,683.121 1276.7,683.121 1277.26,683.121 1277.82,683.121 1278.38,683.121 1278.94,683.121 1279.5,683.121 1280.06,683.121 1280.62,683.121 1281.18,683.121 1281.73,683.121 1282.29,683.121 1282.85,683.121 1283.41,683.121 1283.97,683.121 1284.53,683.121 1285.09,683.121 1285.65,683.121 1286.21,683.121 1286.77,683.121 1287.33,683.121 1287.89,683.121 1288.45,683.121 1289,683.121 1289.56,683.121 1290.12,683.121 1290.68,683.121 1291.24,683.121 1291.8,683.121 1292.36,683.121 1292.92,683.121 1293.48,683.121 1294.04,683.121 1294.6,683.121 1295.16,683.121 1295.72,683.121 1296.28,683.121 1296.83,683.121 1297.39,683.121 1297.95,683.121 1298.51,683.121 1299.07,683.121 1299.63,683.121 1300.19,683.121 1300.75,683.121 1301.31,683.121 1301.87,683.121 1302.43,683.121 1302.99,683.121 1303.55,683.121 1304.1,683.121 1304.66,683.121 1305.22,683.121 1305.78,683.121 1306.34,683.121 1306.9,683.121 1307.46,683.121 1308.02,683.121 1308.58,683.121 1309.14,683.121 1309.7,683.121 1310.26,683.121 1310.82,683.121 1311.38,683.121 1311.93,683.121 1312.49,683.121 1313.05,683.121 1313.61,683.121 1314.17,683.121 1314.73,683.121 1315.29,683.121 1315.85,683.121 1316.41,683.121 1316.97,683.121 1317.53,683.121 1318.09,683.121 1318.65,683.121 1319.2,683.121 1319.76,683.121 1320.32,683.121 1320.88,683.121 1321.44,683.121 1322,683.121 1322.56,683.121 1323.12,683.121 1323.68,683.121 1324.24,683.121 1324.8,683.121 1325.36,683.121 1325.92,683.121 1326.47,683.121 1327.03,683.121 1327.59,683.121 1328.15,683.121 1328.71,683.121 1329.27,683.121 1329.83,683.121 1330.39,683.121 1330.95,683.121 1331.51,683.121 1332.07,683.121 1332.63,683.121 1333.19,683.121 1333.75,683.121 1334.3,683.121 1334.86,683.121 1335.42,683.121 1335.98,683.121 1336.54,683.121 1337.1,683.121 1337.66,683.121 1338.22,683.121 1338.78,683.121 1339.34,683.121 1339.9,683.121 1340.46,683.121 1341.02,683.121 1341.57,683.121 1342.13,683.121 1342.69,683.121 1343.25,683.121 1343.81,683.121 1344.37,683.121 1344.93,683.121 1345.49,683.121 1346.05,683.121 1346.61,683.121 1347.17,683.121 1347.73,683.121 1348.29,683.121 1348.84,683.121 1349.4,683.121 1349.96,683.121 1350.52,683.121 1351.08,683.121 1351.64,683.121 1352.2,683.121 1352.76,683.121 1353.32,683.121 1353.88,683.121 1354.44,683.121 1355,683.121 1355.56,683.121 1356.12,683.121 1356.67,683.121 1357.23,683.121 1357.79,683.121 1358.35,683.121 1358.91,683.121 1359.47,683.121 1360.03,683.121 1360.59,683.121 1361.15,683.121 1361.71,683.121 1362.27,683.121 1362.83,683.121 1363.39,683.121 1363.94,683.121 1364.5,683.121 1365.06,683.121 1365.62,683.121 1366.18,683.121 1366.74,683.121 1367.3,683.121 1367.86,683.121 1368.42,683.121 1368.98,683.121 1369.54,683.121 1370.1,683.121 1370.66,683.121 1371.21,683.121 1371.77,683.121 1372.33,683.121 1372.89,683.121 1373.45,683.121 1374.01,683.121 1374.57,683.121 1375.13,683.121 1375.69,683.121 1376.25,683.121 1376.81,683.121 1377.37,683.121 1377.93,683.121 1378.49,683.121 1379.04,683.121 1379.6,683.121 1380.16,683.121 1380.72,683.121 1381.28,683.121 1381.84,683.121 1382.4,683.121 1382.96,683.121 1383.52,683.121 1384.08,683.121 1384.64,683.121 1385.2,683.121 1385.76,683.121 1386.31,683.121 1386.87,683.121 1387.43,683.121 1387.99,683.121 1388.55,683.121 1389.11,683.121 1389.67,683.121 1390.23,683.121 1390.79,683.121 1391.35,683.121 1391.91,683.121 1392.47,683.121 1393.03,683.121 1393.58,683.121 1394.14,683.121 1394.7,683.121 1395.26,683.121 1395.82,683.121 1396.38,683.121 1396.94,683.121 1397.5,683.121 1398.06,683.121 1398.62,683.121 1399.18,683.121 1399.74,683.121 1400.3,683.121 1400.86,683.121 1401.41,683.121 1401.97,683.121 1402.53,683.121 1403.09,683.121 1403.65,683.121 1404.21,683.121 1404.77,683.121 1405.33,683.121 1405.89,683.121 1406.45,683.121 1407.01,683.121 1407.57,683.121 1408.13,683.121 1408.68,683.121 1409.24,683.121 1409.8,683.121 1410.36,683.121 1410.92,683.121 1411.48,683.121 1412.04,683.121 1412.6,683.121 1413.16,683.121 1413.72,683.121 1414.28,683.121 1414.84,683.121 1415.4,683.121 1415.95,683.121 1416.51,683.121 1417.07,683.121 1417.63,683.121 1418.19,683.121 1418.75,683.121 1419.31,683.121 1419.87,683.121 1420.43,683.121 1420.99,683.121 1421.55,683.121 1422.11,683.121 1422.67,683.121 1423.23,683.121 1423.78,683.121 1424.34,683.121 1424.9,683.121 1425.46,683.121 1426.02,683.121 1426.58,683.121 1427.14,683.121 1427.7,683.121 1428.26,683.121 1428.82,683.121 1429.38,683.121 1429.94,683.121 1430.5,683.121 1431.05,683.121 1431.61,683.121 1432.17,683.121 1432.73,683.121 1433.29,683.121 1433.85,683.121 1434.41,683.121 1434.97,683.121 1435.53,683.121 1436.09,683.121 1436.65,683.121 1437.21,683.121 1437.77,683.121 1438.33,683.121 1438.88,683.121 1439.44,683.121 1440,683.121 1440.56,683.121 1441.12,683.121 1441.68,683.121 1442.24,683.121 1442.8,683.121 1443.36,683.121 1443.92,683.121 1444.48,683.121 1445.04,683.121 1445.6,683.121 1446.15,683.121 1446.71,683.121 1447.27,683.121 1447.83,683.121 1448.39,683.121 1448.95,683.121 1449.51,683.121 1450.07,683.121 1450.63,683.121 1451.19,683.121 1451.75,683.121 1452.31,683.121 1452.87,683.121 1453.42,683.121 1453.98,683.121 1454.54,683.121 1455.1,683.121 1455.66,683.121 1456.22,683.121 1456.78,683.121 1457.34,683.121 1457.9,683.121 1458.46,683.121 1459.02,683.121 1459.58,683.121 1460.14,683.121 1460.7,683.121 1461.25,683.121 1461.81,683.121 1462.37,683.121 1462.93,683.121 1463.49,683.121 1464.05,683.121 1464.61,683.121 1465.17,683.121 1465.73,683.121 1466.29,683.121 1466.85,683.121 1467.41,683.121 1467.97,683.121 1468.52,683.121 1469.08,683.121 1469.64,683.121 1470.2,683.121 1470.76,683.121 1471.32,683.121 1471.88,683.121 1472.44,683.121 1473,683.121 1473.56,683.121 1474.12,683.121 1474.68,683.121 1475.24,683.121 1475.79,683.121 1476.35,683.121 1476.91,683.121 1477.47,683.121 1478.03,683.121 1478.59,683.121 1479.15,683.121 1479.71,683.121 1480.27,683.121 1480.83,683.121 1481.39,683.121 1481.95,683.121 1482.51,683.121 1483.07,683.121 1483.62,683.121 1484.18,683.121 1484.74,683.121 1485.3,683.121 1485.86,683.121 1486.42,683.121 1486.98,683.121 1487.54,683.121 1488.1,683.121 1488.66,683.121 1489.22,683.121 1489.78,683.121 1490.34,683.121 1490.89,683.121 1491.45,683.121 1492.01,683.121 1492.57,683.121 1493.13,683.121 1493.69,683.121 1494.25,683.121 1494.81,683.121 1495.37,683.121 1495.93,683.121 1496.49,683.121 1497.05,683.121 1497.61,683.121 1498.16,683.121 1498.72,683.121 1499.28,683.121 1499.84,683.121 1500.4,683.121 1500.96,683.121 1501.52,683.121 1502.08,683.121 1502.64,683.121 1503.2,683.121 1503.76,683.121 1504.32,683.121 1504.88,683.121 1505.44,683.121 1505.99,683.121 1506.55,683.121 1507.11,683.121 1507.67,683.121 1508.23,683.121 1508.79,683.121 1509.35,683.121 1509.91,683.121 1510.47,683.121 1511.03,683.121 1511.59,683.121 1512.15,683.121 1512.71,683.121 1513.26,683.121 1513.82,683.121 1514.38,683.121 1514.94,683.121 1515.5,683.121 1516.06,683.121 1516.62,683.121 1517.18,683.121 1517.74,683.121 1518.3,683.121 1518.86,683.121 1519.42,683.121 1519.98,683.121 1520.53,683.121 1521.09,683.121 1521.65,683.121 1522.21,683.121 1522.77,683.121 1523.33,683.121 1523.89,683.121 1524.45,683.121 1525.01,683.121 1525.57,683.121 1526.13,683.121 1526.69,683.121 1527.25,683.121 1527.81,683.121 1528.36,683.121 1528.92,683.121 1529.48,683.121 1530.04,683.121 1530.6,683.121 1531.16,683.121 1531.72,683.121 1532.28,683.121 1532.84,683.121 1533.4,683.121 1533.96,683.121 1534.52,683.121 1535.08,683.121 1535.63,683.121 1536.19,683.121 1536.75,683.121 1537.31,683.121 1537.87,683.121 1538.43,683.121 1538.99,683.121 1539.55,683.121 1540.11,683.121 1540.67,683.121 1541.23,683.121 1541.79,683.121 1542.35,683.121 1542.9,683.121 1543.46,683.121 1544.02,683.121 1544.58,683.121 1545.14,683.121 1545.7,683.121 1546.26,683.121 1546.82,683.121 1547.38,683.121 1547.94,683.121 1548.5,683.121 1549.06,683.121 1549.62,683.121 1550.18,683.121 1550.73,683.121 1551.29,683.121 1551.85,683.121 1552.41,683.121 1552.97,683.121 1553.53,683.121 1554.09,683.121 1554.65,683.121 1555.21,683.121 1555.77,683.121 1556.33,683.121 1556.89,683.121 1557.45,683.121 1558,683.121 1558.56,683.121 1559.12,683.121 1559.68,683.121 1560.24,683.121 1560.8,683.121 1561.36,683.121 1561.92,683.121 1562.48,683.121 1563.04,683.121 1563.6,683.121 1564.16,683.121 1564.72,683.121 1565.28,683.121 1565.83,683.121 1566.39,683.121 1566.95,683.121 1567.51,683.121 1568.07,683.121 1568.63,683.121 1569.19,683.121 1569.75,683.121 1570.31,683.121 1570.87,683.121 1571.43,683.121 1571.99,683.121 1572.55,683.121 1573.1,683.121 1573.66,683.121 1574.22,683.121 1574.78,683.121 1575.34,683.121 1575.9,683.121 1576.46,683.121 1577.02,683.121 1577.58,683.121 1578.14,683.121 1578.7,683.121 1579.26,683.121 1579.82,683.121 1580.37,683.121 1580.93,683.121 1581.49,683.121 1582.05,683.121 1582.61,683.121 1583.17,683.121 1583.73,683.121 1584.29,683.121 1584.85,683.121 1585.41,683.121 1585.97,683.121 1586.53,683.121 1587.09,683.121 1587.65,683.121 1588.2,683.121 1588.76,683.121 1589.32,683.121 1589.88,683.121 1590.44,683.121 1591,683.121 1591.56,683.121 1592.12,683.121 1592.68,683.121 1593.24,683.121 1593.8,683.121 1594.36,683.121 1594.92,683.121 1595.47,683.121 1596.03,683.121 1596.59,683.121 1597.15,683.121 1597.71,683.121 1598.27,683.121 1598.83,683.121 1599.39,683.121 1599.95,683.121 1600.51,683.121 1601.07,683.121 1601.63,683.121 1602.19,683.121 1602.74,683.121 1603.3,683.121 1603.86,683.121 1604.42,683.121 1604.98,683.121 1605.54,683.121 1606.1,683.121 1606.66,683.121 1607.22,683.121 1607.78,683.121 1608.34,683.121 1608.9,683.121 1609.46,683.121 1610.02,683.121 1610.57,683.121 1611.13,683.121 1611.69,683.121 1612.25,683.121 1612.81,683.121 1613.37,683.121 1613.93,683.121 1614.49,683.121 1615.05,683.121 1615.61,683.121 1616.17,683.121 1616.73,683.121 1617.29,683.121 1617.84,683.121 1618.4,683.121 1618.96,683.121 1619.52,683.121 1620.08,683.121 1620.64,683.121 1621.2,683.121 1621.76,683.121 1622.32,683.121 1622.88,683.121 1623.44,683.121 1624,683.121 1624.56,683.121 1625.11,683.121 1625.67,683.121 1626.23,683.121 1626.79,683.121 1627.35,683.121 1627.91,683.121 1628.47,683.121 1629.03,683.121 1629.59,683.121 1630.15,683.121 1630.71,683.121 1631.27,683.121 1631.83,683.121 1632.39,683.121 1632.94,683.121 1633.5,683.121 1634.06,683.121 1634.62,683.121 1635.18,683.121 1635.74,683.121 1636.3,683.121 1636.86,683.121 1637.42,683.121 1637.98,683.121 1638.54,683.121 1639.1,683.121 1639.66,683.121 1640.21,683.121 1640.77,683.121 1641.33,683.121 1641.89,683.121 1642.45,683.121 1643.01,683.121 1643.57,683.121 1644.13,683.121 1644.69,683.121 1645.25,683.121 1645.81,683.121 1646.37,683.121 1646.93,683.121 1647.48,683.121 1648.04,683.121 1648.6,683.121 1649.16,683.121 1649.72,683.121 1650.28,683.121 1650.84,683.121 1651.4,683.121 1651.96,683.121 1652.52,683.121 1653.08,683.121 1653.64,683.121 1654.2,683.121 1654.76,683.121 1655.31,683.121 1655.87,683.121 1656.43,683.121 1656.99,683.121 1657.55,683.121 1658.11,683.121 1658.67,683.121 1659.23,683.121 1659.79,683.121 1660.35,683.121 1660.91,683.121 1661.47,683.121 1662.03,683.121 1662.58,683.121 1663.14,683.121 1663.7,683.121 1664.26,683.121 1664.82,683.121 1665.38,683.121 1665.94,683.121 1666.5,683.121 1667.06,683.121 1667.62,683.121 1668.18,683.121 1668.74,683.121 1669.3,683.121 1669.85,683.121 1670.41,683.121 1670.97,683.121 1671.53,683.121 1672.09,683.121 1672.65,683.121 1673.21,683.121 1673.77,683.121 1674.33,683.121 1674.89,683.121 1675.45,683.121 1676.01,683.121 1676.57,683.121 1677.13,683.121 1677.68,683.121 1678.24,683.121 1678.8,683.121 1679.36,683.121 1679.92,683.121 1680.48,683.121 1681.04,683.121 1681.6,683.121 1682.16,683.121 1682.72,683.121 1683.28,683.121 1683.84,683.121 1684.4,683.121 1684.95,683.121 1685.51,683.121 1686.07,683.121 1686.63,683.121 1687.19,683.121 1687.75,683.121 1688.31,683.121 1688.87,683.121 1689.43,683.121 1689.99,683.121 1690.55,683.121 1691.11,683.121 1691.67,683.121 1692.23,683.121 1692.78,683.121 1693.34,683.121 1693.9,683.121 1694.46,683.121 1695.02,683.121 1695.58,683.121 1696.14,683.121 1696.7,683.121 1697.26,683.121 1697.82,683.121 1698.38,683.121 1698.94,683.121 1699.5,683.121 1700.05,683.121 1700.61,683.121 1701.17,683.121 1701.73,683.121 1702.29,683.121 1702.85,683.121 1703.41,683.121 1703.97,683.121 1704.53,683.121 1705.09,683.121 1705.65,683.121 1706.21,683.121 1706.77,683.121 1707.32,683.121 1707.88,683.121 1708.44,683.121 1709,683.121 1709.56,683.121 1710.12,683.121 1710.68,683.121 1711.24,683.121 1711.8,683.121 1712.36,683.121 1712.92,683.121 1713.48,683.121 1714.04,683.121 1714.6,683.121 1715.15,683.121 1715.71,683.121 1716.27,683.121 1716.83,683.121 1717.39,683.121 1717.95,683.121 1718.51,683.121 1719.07,683.121 1719.63,683.121 1720.19,683.121 1720.75,683.121 1721.31,683.121 1721.87,683.121 1722.42,683.121 1722.98,683.121 1723.54,683.121 1724.1,683.121 1724.66,683.121 1725.22,683.121 1725.78,683.121 1726.34,683.121 1726.9,683.121 1727.46,683.121 1728.02,683.121 1728.58,683.121 1729.14,683.121 1729.69,683.121 1730.25,683.121 1730.81,683.121 1731.37,683.121 1731.93,683.121 1732.49,683.121 1733.05,683.121 1733.61,683.121 1734.17,683.121 1734.73,683.121 1735.29,683.121 1735.85,683.121 1736.41,683.121 1736.97,683.121 1737.52,683.121 1738.08,683.121 1738.64,683.121 1739.2,683.121 1739.76,683.121 1740.32,683.121 1740.88,683.121 1741.44,683.121 1742,683.121 1742.56,683.121 1743.12,683.121 1743.68,683.121 1744.24,683.121 1744.79,683.121 1745.35,683.121 1745.91,683.121 1746.47,683.121 1747.03,683.121 1747.59,683.121 1748.15,683.121 1748.71,683.121 1749.27,683.121 1749.83,683.121 1750.39,683.121 1750.95,683.121 1751.51,683.121 1752.06,683.121 1752.62,683.121 1753.18,683.121 1753.74,683.121 1754.3,683.121 1754.86,683.121 1755.42,683.121 1755.98,683.121 1756.54,683.121 1757.1,683.121 1757.66,683.121 1758.22,683.121 1758.78,683.121 1759.34,683.121 1759.89,683.121 1760.45,683.121 1761.01,683.121 1761.57,683.121 1762.13,683.121 1762.69,683.121 1763.25,683.121 1763.81,683.121 1764.37,683.121 1764.93,683.121 1765.49,683.121 1766.05,683.121 1766.61,683.121 1767.16,683.121 1767.72,683.121 1768.28,683.121 1768.84,683.121 1769.4,683.121 1769.96,683.121 1770.52,683.121 1771.08,683.121 1771.64,683.121 1772.2,683.121 1772.76,683.121 1773.32,683.121 1773.88,683.121 1774.43,683.121 1774.99,683.121 1775.55,683.121 1776.11,683.121 1776.67,683.121 1777.23,683.121 1777.79,683.121 1778.35,683.121 1778.91,683.121 1779.47,683.121 1780.03,683.121 1780.59,683.121 1781.15,683.121 1781.71,683.121 1782.26,683.121 1782.82,683.121 1783.38,683.121 1783.94,683.121 1784.5,683.121 1785.06,683.121 1785.62,683.121 1786.18,683.121 1786.74,683.121 1787.3,683.121 1787.86,683.121 1788.42,683.121 1788.98,683.121 1789.53,683.121 1790.09,683.121 1790.65,683.121 1791.21,683.121 1791.77,683.121 1792.33,683.121 1792.89,683.121 1793.45,683.121 1794.01,683.121 1794.57,683.121 1795.13,683.121 1795.69,683.121 1796.25,683.121 1796.8,683.121 1797.36,683.121 1797.92,683.121 1798.48,683.121 1799.04,683.121 1799.6,683.121 1800.16,683.121 1800.72,683.121 1801.28,683.121 1801.84,683.121 1802.4,683.121 1802.96,683.121 1803.52,683.121 1804.08,683.121 1804.63,683.121 1805.19,683.121 1805.75,683.121 1806.31,683.121 1806.87,683.121 1807.43,683.121 1807.99,683.121 1808.55,683.121 1809.11,683.121 1809.67,683.121 1810.23,683.121 1810.79,683.121 1811.35,683.121 1811.9,683.121 1812.46,683.121 1813.02,683.121 1813.58,683.121 1814.14,683.121 1814.7,683.121 1815.26,683.121 1815.82,683.121 1816.38,683.121 1816.94,683.121 1817.5,683.121 1818.06,683.121 1818.62,683.121 1819.18,683.121 1819.73,683.121 1820.29,683.121 1820.85,683.121 1821.41,683.121 1821.97,683.121 1822.53,683.121 1823.09,683.121 1823.65,683.121 1824.21,683.121 1824.77,683.121 1825.33,683.121 1825.89,683.121 1826.45,683.121 1827,683.121 1827.56,683.121 1828.12,683.121 1828.68,683.121 1829.24,683.121 1829.8,683.121 1830.36,683.121 1830.92,683.121 1831.48,683.121 1832.04,683.121 1832.6,683.121 1833.16,683.121 1833.72,683.121 1834.27,683.121 1834.83,683.121 1835.39,683.121 1835.95,683.121 1836.51,683.121 1837.07,683.121 1837.63,683.121 1838.19,683.121 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.032774824682566 ± 0.018530144613563334\nProjected Energy: -4.012748595672859 ± (0.004371553913697923, 0.004478957938207628)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\ntime_step = determine_constant_time_step(df) the time step\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\ntime_step = determine_constant_time_step(df) the time step\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.15053</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">4.0095e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">4.256e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.575e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.487e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">6.863e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3525e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.97986399832163\n -3.363124291613383\n -0.7590191922770746\n  0.13584182219622143\n  0.15789998694608975\n  0.8767114411781467\n  1.530592997097333\n  1.583573261186733\n  3.072870330325869\n  3.125672653951833\n  4.862107221562173\n  6.260694850380588\n  6.402671211183114\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087834\n 0.03307039977204201\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\nRimuIO.save_state(filename, vector; metadata...) Save a vector and optinal metadata in Arrow format.\nRimuIO.load_state(filename) Load a file created by save_state.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.DVecAsTable","page":"I/O","title":"Rimu.RimuIO.DVecAsTable","text":"struct DVecAsTable\n\nWrapper over the storage of a DVec that allows us to treat a DVec as a table from Tables.jl. Constructed with Tables.table(::DVec).\n\n\n\n\n\n","category":"type"},{"location":"rimuio.html#Rimu.RimuIO.PDVecAsTable","page":"I/O","title":"Rimu.RimuIO.PDVecAsTable","text":"struct PDVecAsTable\n\nWrapper over the storage of a PDVec that allows us to treat a PDVec as a table from Tables.jl. Constructed with Tables.table(::PDVec).\n\n\n\n\n\n","category":"type"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.load_state-Union{Tuple{D}, Tuple{Type{D}, Any}} where D","page":"I/O","title":"Rimu.RimuIO.load_state","text":"load_state(filename; kwargs...) -> PDVec, NamedTuple\nload_state(PDVec, filename; kwargs...) -> PDVec, NamedTuple\nload_state(DVec, filename; kwargs...) -> DVec, NamedTuple\n\nLoad the state saved in the Arrow file filename. kwargs are passed to the constructor of PDVec/DVec. Any metadata stored in the file is be parsed as a number (if possible) and returned alongside the vector in a NamedTuple.\n\nSee also save_state.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_state-Tuple{Any, Any}","page":"I/O","title":"Rimu.RimuIO.save_state","text":"save_state(filename, vector; io, kwargs...)\n\nSave PDVec or DVec vector to an arrow file filename.\n\nio determines the output stream to write progress to. Defaults to stderr when MPI is enabled and devnull otherwise.\n\nAll other kwargs are saved as strings to the arrow file and will be parsed back when the state is loaded.\n\nSee also load_state.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates. Indexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nFields\n\nspectral_states: Tuple of SpectralStates\nmax_length::Ref{Int}: Maximum length of the simulation\nstep::Ref{Int}: Current step of the simulation\nsimulation_plan: Simulation plan\nreporting_strategy: Reporting strategy\npost_step_strategy: Post-step strategy\nreplica_strategy: Replica strategy\n\nSee also ReplicaStrategy, Rimu.SpectralState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy for ProjectorMonteCarloProblem. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\nSee also ProjectorMonteCarloProblem, ReportToFile.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy for ProjectorMonteCarloProblem that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df, save_df, ReportDFAndInfo, and ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data during a simulation of a ProjectorMonteCarloProblem.\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nExtended help\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nRimu.refine_reporting_strategy\nRimu.report!\nRimu.report_after_step!\nRimu.finalize_report!\nRimu.reporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with Rimu.advance!.\n\nFields\n\nhamiltonian: Hamiltonian\nalgorithm: Algorithm\nv: Vector\npv: Previous vector\nwm: Working memory\nshift_parameters: Shift parameters\nid::String: id is appended to column names\n\nSee also SpectralStrategy, ReplicaStrategy, Rimu.SpectralState, Rimu.ReplicaState, Rimu.replica_stats, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several Rimu.SingleStates representing the ground state and excited states of a single replica. Indexing the SpectralState state[i] returns the ith SingleState.\n\nFields\n\nsingle_states: Tuple of SingleStates\nspectral_strategy: Strategy for computing the spectral states\nid::String: Identifies the replica\n\nSee also SpectralStrategy, Rimu.ReplicaState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after Rimu.reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an r×s AbstractMatrix of configuration vectors from the state, or the result of solve(::ProjectorMonteCarloProblem). The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also ProjectorMonteCarloProblem, Rimu.PMCSimulation, Rimu.SingleState, Rimu.ReplicaState, Rimu.SpectralState.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
