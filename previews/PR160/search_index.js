var documenterSearchIndex = {"docs":
[{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"https://github.com/joachimbrand/Rimu.jl/blob/develop/scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Firstly, we load all needed modules. Rimu for FCIQMC calculation, and DataFrames for output","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\naIni = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(aIni; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}((1, 1, 1, 1, 1, 1)); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now we define the operators for the observables we wish to calculate","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ([G2RealCorrelator(d) for d in dvals]...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, which are subtyped to AbstractHamiltonian, but with less functionality than a full Hamiltonian. It calculates the two-body correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables are calculated using the \"replica trick\" whereby several copies or \"replicas\" of the model are run simultaneously. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one. For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the necessary FCIQMC variables are calculated for each replica, (e.g. shift, norm etc.), this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_reps = 3\nreplica = AllOverlaps(num_reps; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We need a reasonable number of timesteps to get good statistics, and we are running multiple replicas, so we will only use a small number of walkers:","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies are the same as before","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dτ = 0.001\nreporting_interval = 1\nsvec = DVec(aIni => 1)\nseedCRNG!(17)\nparams = RunTillLastStep(dτ = dτ, laststep = steps_equilibrate + steps_measure)\ns_strat = DoubleLogUpdate(targetwalkers = targetwalkers, ζ = 0.08)\nr_strat = ReportDFAndInfo(reporting_interval = reporting_interval, info_interval = 100)\nτ_strat = ConstantTimeStep();","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now we run the main FCIQMC loop:","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(H, svec;\n            params,\n            laststep = steps_equilibrate + steps_measure,\n            s_strat,\n            r_strat,\n            τ_strat,\n            replica,\n            threading = false, # only for reproducible runs\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_noise_1\", \"shift_2\", \"shift_noise_2\", \"shift_3\", \"shift_noise_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult using MonteCarloMeasurements. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now we can calculate the correlation function for each value of d","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_reps replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.23371704332410984 ± 0.009280794042868867\n   G2(1) = 0.9136950345378299 ± 0.0024573263222350743\n   G2(2) = 0.9743406699481799 ± 0.002855736685481106\n   G2(3) = 0.9902115477038705 ± 0.0016748495930840534\n   G2(4) = 0.9743406699481799 ± 0.002855736685481106\n   G2(5) = 0.9136950345378299 ± 0.0024573263222350743\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is highest at d=3 which is the longest possible separation with periodic boundary conditions.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_reps replicas:\")\nfor i in 1:num_reps\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9080095881894175 ± 0.24941890410414647\n   Replica 2: -3.550108958747843 ± 0.20011126335506224\n   Replica 3: -3.6198507114345078 ± 0.21537104828971096\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Finished !","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"https://github.com/joachimbrand/Rimu.jl/blob/develop/scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Firstly, we load all needed modules. Rimu for FCIQMC calculation;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now we define the physical problem: Setting the number of lattice sites m = 6; and the number of particles n = 6:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"m = n = 6","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"6","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Generating a configuration that particles are evenly distributed:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"aIni = near_uniform(BoseFS{n,m})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}((1, 1, 1, 1, 1, 1))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"where BoseFS is used to create a bosonic system. The Hamiltonian is defined based on the configuration aIni, with additional onsite interaction strength u = 6.0 and the hopping strength t = 1.0:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Ĥ = HubbardReal1D(aIni; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}((1, 1, 1, 1, 1, 1)); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now let's setup the Monte Carlo settings. The number of walkers to use in this Monte Carlo run:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"1000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The number of time steps before doing statistics, i.e. letting the walkers to sample Hilbert and to equilibrate:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"1000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"And the number of time steps used for getting statistics, e.g. time-average of shift, projected energy, walker numbers, etc.:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_measure = 2_000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"2000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Set the size of a time step","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dτ = 0.001","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"0.001","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"and we report QMC data every k-th step, set the interval to record QMC data:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"reporting_interval = 1","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"1","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now we prepare initial state and allocate memory. The initial address is defined above as aIni = near_uniform(Ĥ). Putting one of walkers into the initial address aIni","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"svec = DVec(aIni => 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|1 1 1 1 1 1⟩\" => 1","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's plant a seed for the random number generator to get consistent result:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"seedCRNG!(17)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"1-element Vector{RandomNumbers.Xorshifts.Xoshiro256StarStar}:\n RandomNumbers.Xorshifts.Xoshiro256StarStar(0xaa4ef3ee45ebfd60, 0x69ac85241a55a21a, 0xfb87477d260ef03e, 0x1af9d30575ed5945)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now let's setup all the FCIQMC strategies.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Passing dτ and total number of time steps into params:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"params = RunTillLastStep(dτ = dτ, laststep = steps_equilibrate + steps_measure)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RunTillLastStep{Float64}\n  step: Int64 0\n  laststep: Int64 3000\n  shiftMode: Bool false\n  shift: Float64 0.0\n  dτ: Float64 0.001\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Strategy for updating the shift:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"s_strat = DoubleLogUpdate(targetwalkers = targetwalkers, ζ = 0.08)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DoubleLogUpdate{Int64}(1000, 0.08, 0.0016)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Strategy for reporting info:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"r_strat = ReportDFAndInfo(reporting_interval = reporting_interval, info_interval = 100)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ReportDFAndInfo\n  reporting_interval: Int64 1\n  info_interval: Int64 100\n  io: IOContext{Base.PipeEndpoint}\n  writeinfo: Bool false\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Strategy for updating dτ:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"τ_strat = ConstantTimeStep()","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ConstantTimeStep()","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"set up the calculation and reporting of the projected energy in this case we are projecting onto the starting vector, which contains a single configuration","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step = ProjectedEnergy(Ĥ, copy(svec))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Int64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}((1, 1, 1, 1, 1, 1)); u=6.0, t=1.0), Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Int64}(Pair{BoseFS{6, 6, BitString{11, 1, UInt16}}, Int64}[BoseFS{6,6}((1, 1, 1, 1, 1, 1)) => 1]), Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}(Pair{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}[BoseFS{6,6}((1, 1, 1, 1, 2, 0)) => -1.4142135623730951, BoseFS{6,6}((0, 2, 1, 1, 1, 1)) => -1.4142135623730951, BoseFS{6,6}((1, 1, 1, 1, 0, 2)) => -1.4142135623730951, BoseFS{6,6}((1, 2, 0, 1, 1, 1)) => -1.4142135623730951, BoseFS{6,6}((2, 0, 1, 1, 1, 1)) => -1.4142135623730951, BoseFS{6,6}((1, 1, 1, 2, 0, 1)) => -1.4142135623730951, BoseFS{6,6}((1, 1, 2, 0, 1, 1)) => -1.4142135623730951, BoseFS{6,6}((1, 1, 0, 2, 1, 1)) => -1.4142135623730951, BoseFS{6,6}((1, 1, 1, 0, 2, 1)) => -1.4142135623730951, BoseFS{6,6}((1, 0, 2, 1, 1, 1)) => -1.4142135623730951, BoseFS{6,6}((2, 1, 1, 1, 1, 0)) => -1.4142135623730951, BoseFS{6,6}((0, 1, 1, 1, 1, 2)) => -1.4142135623730951]))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Print out info about what we are doing:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\"Finding ground state for:\")\nprintln(Ĥ)\nprintln(\"Strategies for run:\")\nprintln(params, s_strat)\nprintln(τ_strat)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Finding ground state for:\nHubbardReal1D(BoseFS{6,6}((1, 1, 1, 1, 1, 1)); u=6.0, t=1.0)\nStrategies for run:\nRunTillLastStep{Float64}\n  step: Int64 0\n  laststep: Int64 3000\n  shiftMode: Bool false\n  shift: Float64 0.0\n  dτ: Float64 0.001\nDoubleLogUpdate{Int64}(1000, 0.08, 0.0016)\nConstantTimeStep()\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Finally, we can start the main FCIQMC loop:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df, state = lomc!(Ĥ,svec;\n            params,\n            laststep = steps_equilibrate + steps_measure,\n            s_strat,\n            r_strat,\n            τ_strat,\n            post_step,\n            threading = false, # only for reproducible runs\n)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(df = 3000×15 DataFrame\n  Row │ steps  dτ       shift       shiftMode  len    norm     spawn_attempts  spawns  deaths  clones  zombies  annihilations  shift_noise  vproj  hproj\n      │ Int64  Float64  Float64     Bool       Int64  Float64  Int64           Int64   Int64   Int64   Int64    Int64          Float64      Int64  Float64\n──────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n    1 │     1    0.001   11.0524         true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n    2 │     2    0.001   22.1048         true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n    3 │     3    0.001   33.1572         true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n    4 │     4    0.001   44.2096         true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n    5 │     5    0.001   55.262          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n    6 │     6    0.001   66.3145         true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n    7 │     7    0.001   77.3669         true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n    8 │     8    0.001   88.4193         true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n    9 │     9    0.001   99.4717         true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   10 │    10    0.001  110.524          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   11 │    11    0.001  121.576          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   12 │    12    0.001  132.629          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   13 │    13    0.001  143.681          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   14 │    14    0.001  154.734          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   15 │    15    0.001  165.786          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   16 │    16    0.001  176.839          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   17 │    17    0.001  187.891          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   18 │    18    0.001  198.943          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   19 │    19    0.001  209.996          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   20 │    20    0.001  221.048          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   21 │    21    0.001  232.101          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   22 │    22    0.001  243.153          true      1      1.0               1       0       0       0        0              0          0.0      1     0.0\n   23 │    23    0.001  197.645          true      1      2.0               1       0       0       1        0              0          0.0      2     0.0\n   24 │    24    0.001  207.588          true      1      2.0               2       0       0       0        0              0          0.0      2     0.0\n   25 │    25    0.001  217.531          true      1      2.0               2       0       0       0        0              0          0.0      2     0.0\n   26 │    26    0.001  227.475          true      1      2.0               2       0       0       0        0              0          0.0      2     0.0\n   27 │    27    0.001  204.332          true      1      3.0               2       0       0       1        0              0          0.0      3     0.0\n   28 │    28    0.001  190.152          true      1      4.0               3       0       0       1        0              0          0.0      4     0.0\n   29 │    29    0.001  198.986          true      1      4.0               4       0       0       0        0              0          0.0      4     0.0\n   30 │    30    0.001  189.612          true      1      5.0               4       0       0       1        0              0          0.0      5     0.0\n   31 │    31    0.001  183.212          true      1      6.0               5       0       0       1        0              0          0.0      6     0.0\n   32 │    32    0.001  167.923          true      1      8.0               6       0       0       2        0              0          0.0      8     0.0\n   33 │    33    0.001  166.037          true      1      9.0               8       0       0       1        0              0          0.0      9     0.0\n   34 │    34    0.001  164.976          true      1     10.0               9       0       0       1        0              0          0.0     10     0.0\n   35 │    35    0.001  157.467          true      1     12.0              10       0       0       2        0              0          0.0     12     0.0\n   36 │    36    0.001  151.965          true      1     14.0              12       0       0       2        0              0          0.0     14     0.0\n   37 │    37    0.001  147.899          true      1     16.0              14       0       0       2        0              0          0.0     16     0.0\n   38 │    38    0.001  140.492          true      2     19.0              16       1       0       2        0              0          0.0     18    -1.41421\n   39 │    39    0.001  134.87           true      2     22.0              19       0       0       3        0              0          0.0     20    -2.82843\n   40 │    40    0.001  124.266          true      3     27.0              22       1       0       4        0              0          0.0     23    -5.65685\n   41 │    41    0.001  121.448          true      3     30.0              27       0       0       3        0              0          0.0     25    -7.07107\n   42 │    42    0.001  114.479          true      4     35.0              30       1       0       4        0              0          0.0     28    -9.89949\n   43 │    43    0.001  108.947          true      6     40.0              35       2       0       3        0              0          0.0     31   -11.3137\n   44 │    44    0.001  106.32           true      6     44.0              40       0       0       4        0              0          0.0     35   -11.3137\n   45 │    45    0.001  100.887          true      7     50.0              44       1       0       5        0              0          0.0     38   -12.7279\n   46 │    46    0.001   96.4321         true      8     56.0              50       1       0       5        0              0          0.0     42   -15.5563\n   47 │    47    0.001   88.8826         true      8     65.0              56       2       0       7        0              0          0.0     46   -22.6274\n   48 │    48    0.001   87.2088         true      8     70.0              65       0       0       5        0              0          0.0     50   -24.0416\n   49 │    49    0.001   83.6863         true      9     77.0              70       1       0       6        0              0          0.0     55   -26.8701\n   50 │    50    0.001   78.7684         true     10     86.0              77       2       0       7        0              0          0.0     60   -29.6985\n   51 │    51    0.001   73.7178         true     10     96.0              86       1       0       9        0              0          0.0     65   -32.5269\n   52 │    52    0.001   72.5203         true     10    102.0              96       0       0       6        0              0          0.0     70   -33.9411\n   53 │    53    0.001   70.7565         true     11    109.0             102       2       0       5        0              0          0.0     75   -33.9411\n   54 │    54    0.001   65.7803         true     14    121.0             109       5       0       7        0              0          0.0     81   -42.4264\n   55 │    55    0.001   60.2255         true     14    135.0             121       3       0      11        0              0          0.0     87   -50.9117\n   56 │    56    0.001   57.5984         true     14    145.0             135       2       0       8        0              0          0.0     92   -57.9828\n   57 │    57    0.001   56.8409         true     14    152.0             145       0       0       7        0              0          0.0     97   -59.397\n   58 │    58    0.001   53.1586         true     14    165.0             152       3       0      10        0              0          0.0    103   -66.468\n   59 │    59    0.001   50.3128         true     14    177.0             165       1       0      11        0              0          0.0    108   -73.5391\n   60 │    60    0.001   46.8717         true     16    191.0             177       4       0      10        0              0          0.0    114   -80.6102\n   61 │    61    0.001   44.5483         true     17    203.0             191       5       0       7        0              0          0.0    119   -87.6812\n   62 │    62    0.001   41.2824         true     17    218.0             203       5       0      10        0              0          0.0    124   -97.5807\n   63 │    63    0.001   40.4185         true     19    227.0             218       4       0       5        0              0          0.0    129  -100.409\n   64 │    64    0.001   38.5875         true     20    239.0             227       4       0       8        0              0          0.0    134  -107.48\n   65 │    65    0.001   36.2324         true     24    253.0             239       6       0       8        0              0          0.0    140  -114.551\n   66 │    66    0.001   33.7315         true     25    268.0             253       6       0       9        0              0          0.0    146  -123.037\n   67 │    67    0.001   32.264          true     26    280.0             268       6       0       6        0              0          0.0    152  -130.108\n   68 │    68    0.001   32.002          true     26    288.0             280       1       0       7        0              0          0.0    157  -134.35\n   69 │    69    0.001   29.5818         true     28    304.0             288       8       0       8        0              0          0.0    162  -144.25\n   70 │    70    0.001   28.07           true     28    317.0             304       2       0      11        0              0          0.0    166  -155.563\n   71 │    71    0.001   26.3817         true     28    331.0             317       4       0      10        0              0          0.0    171  -168.291\n   72 │    72    0.001   24.2987         true     31    347.0             331       7       0       9        0              0          0.0    175  -178.191\n   73 │    73    0.001   22.7646         true     33    361.0             347       7       0       7        0              0          0.0    180  -188.09\n   74 │    74    0.001   21.508          true     35    374.0             361       5       0       8        0              0          0.0    185  -195.161\n   75 │    75    0.001   19.8728         true     37    389.0             374       9       0       6        0              0          0.0    189  -207.889\n   76 │    76    0.001   18.7011         true     38    402.0             389       6       0       7        0              0          0.0    194  -217.789\n   77 │    77    0.001   18.3524         true     40    411.0             402       5       0       4        0              0          0.0    197  -222.032\n   78 │    78    0.001   17.2341         true     41    424.0             411       6       0       7        0              0          0.0    201  -231.931\n   79 │    79    0.001   15.0298         true     42    443.0             424      12       0       7        0              0          0.0    204  -248.902\n   80 │    80    0.001   14.1516         true     43    455.0             443       7       0       5        0              0          0.0    207  -257.387\n   81 │    81    0.001   12.9386         true     44    469.0             455       9       0       5        0              0          0.0    210  -268.701\n   82 │    82    0.001   12.0884         true     46    481.0             469       9       0       3        0              0          0.0    214  -272.943\n   83 │    83    0.001   10.7536         true     49    496.0             481      11       0       4        0              0          0.0    217  -281.428\n   84 │    84    0.001    9.76436        true     52    509.0             496      10       0       3        0              0          0.0    219  -288.5\n   85 │    85    0.001    9.41463        true     52    518.0             509       6       0       3        0              0          0.0    222  -296.985\n   86 │    86    0.001    8.13771        true     53    533.0             518      13       0       2        0              0          0.0    225  -306.884\n   87 │    87    0.001    7.32771        true     55    545.0             533       9       0       3        0              0          0.0    227  -315.37\n   88 │    88    0.001    6.96234        true     56    554.0             545       6       0       3        0              0          0.0    229  -322.441\n   89 │    89    0.001    6.8827         true     56    561.0             554       6       1       2        0              0          0.0    231  -328.098\n   90 │    90    0.001    6.50886        true     56    570.0             561       9       1       1        0              0          0.0    233  -332.34\n   91 │    91    0.001    5.28865        true     62    585.0             570      15       2       2        0              0          0.0    234  -337.997\n   92 │    92    0.001    5.03814        true     65    593.0             585       8       1       1        0              0          0.0    235  -342.24\n   93 │    93    0.001    5.18909        true     66    598.0             593       6       2       1        0              0          0.0    236  -343.654\n   94 │    94    0.001    5.06212        true     69    605.0             598       7       1       1        0              0          0.0    237  -347.897\n   95 │    95    0.001    4.39585        true     70    616.0             605      11       2       2        0              0          0.0    239  -356.382\n   96 │    96    0.001    4.24902        true     72    623.0             616       7       1       1        0              0          0.0    240  -357.796\n   97 │    97    0.001    4.74462        true     71    625.0             623       6       5       1        0              0          0.0    241  -359.21\n   98 │    98    0.001    4.07296        true     74    636.0             625      10       0       1        0              0          0.0    244  -364.867\n   99 │    99    0.001    4.03084        true     74    642.0             636       8       3       1        0              0          0.0    245  -370.524\n  100 │   100    0.001    3.85501        true     75    649.0             642       6       0       1        0              0          0.0    246  -374.767\n  101 │   101    0.001    4.1704         true     74    652.0             649       7       4       0        0              0          0.0    247  -379.009\n  102 │   102    0.001    3.73606        true     79    661.0             652      11       3       1        0              0          0.0    248  -380.423\n  103 │   103    0.001    3.17321        true     81    671.0             661       9       0       1        0              0          0.0    250  -386.08\n  104 │   104    0.001    2.72438        true     82    680.0             671       9       1       1        0              0          0.0    251  -390.323\n  105 │   105    0.001    1.44368        true     82    696.0             680      16       1       1        0              0          0.0    252  -400.222\n  106 │   106    0.001    1.78938        true     82    698.0             696       4       2       0        0              0          0.0    252  -403.051\n  107 │   107    0.001    2.59879        true     81    696.0             698       8      10       0        0              0          0.0    252  -403.051\n  108 │   108    0.001    2.82767        true     82    699.0             696       8       5       0        0              0          0.0    252  -405.879\n  109 │   109    0.001    1.89698        true     84    712.0             699      14       2       1        0              0          0.0    254  -410.122\n  110 │   110    0.001    1.30237        true     88    722.0             712      10       1       1        0              0          0.0    255  -414.365\n  111 │   111    0.001    1.71059        true     87    723.0             722       6       6       1        0              0          0.0    256  -414.365\n  112 │   112    0.001    1.44331        true     89    730.0             723      10       3       0        0              0          0.0    256  -420.021\n  113 │   113    0.001    0.616378       true     91    742.0             730      13       1       0        0              0          0.0    256  -427.092\n  114 │   114    0.001    1.42442        true     91    739.0             742       2       5       0        0              0          0.0    256  -422.85\n  115 │   115    0.001    1.35811        true     92    744.0             739       8       4       1        0              0          0.0    258  -422.85\n  116 │   116    0.001    0.525625       true     92    756.0             744      15       3       0        0              0          0.0    258  -429.921\n  117 │   117    0.001    0.435261       true     94    761.0             756      11       6       0        0              0          0.0    259  -436.992\n  118 │   118    0.001    0.337873       true     96    766.0             761      10       5       0        0              0          0.0    259  -436.992\n  119 │   119    0.001    0.76439        true     95    766.0             766       4       4       0        0              0          0.0    260  -439.82\n  120 │   120    0.001    0.660001       true     97    771.0             766      10       5       0        0              0          0.0    260  -442.649\n  121 │   121    0.001    0.129095       true     98    780.0             771      11       2       0        0              0          0.0    260  -449.72\n  122 │   122    0.001    0.005226       true     99    785.0             780       8       3       0        0              0          0.0    260  -452.548\n  123 │   123    0.001   -0.331878       true    100    792.0             785      12       5       0        0              0          0.0    261  -453.963\n  124 │   124    0.001   -0.98262        true    100    802.0             792      13       3       0        0              0          0.0    261  -462.448\n  125 │   125    0.001   -0.832824       true    100    804.0             802       5       3       0        0              0          0.0    261  -465.276\n  126 │   126    0.001   -1.09047        true    101    810.0             804       9       3       0        0              0          0.0    260  -468.105\n  127 │   127    0.001   -1.55529        true    101    818.0             810      14       6       0        0              0          0.0    262  -478.004\n  128 │   128    0.001   -2.22536        true    102    828.0             818      14       4       0        0              0          0.0    261  -485.075\n  129 │   129    0.001   -2.80555        true    106    837.0             828      13       4       0        0              0          0.0    261  -486.489\n  130 │   130    0.001   -3.39359        true    108    846.0             837      17       8       0        0              0          0.0    260  -489.318\n  131 │   131    0.001   -3.79842        true    110    853.0             846      14       7       0        0              0          0.0    260  -490.732\n  132 │   132    0.001   -3.73512        true    108    855.0             853      14      12       0        0              0          0.0    259  -490.732\n  133 │   133    0.001   -4.43332        true    108    865.0             855      18       8       0        0              0          0.0    259  -494.975\n  134 │   134    0.001   -4.85897        true    109    872.0             865      17      10       0        0              0          0.0    258  -506.288\n  135 │   135    0.001   -4.45246        true    109    870.0             872       7       9       0        0              0          0.0    257  -504.874\n  136 │   136    0.001   -4.69726        true    112    875.0             870      10       5       0        0              0          0.0    257  -504.874\n  137 │   137    0.001   -4.01599        true    111    870.0             875       5      10       0        0              0          0.0    256  -502.046\n  138 │   138    0.001   -3.98054        true    111    872.0             870      10       8       0        0              0          0.0    255  -502.046\n  139 │   139    0.001   -3.94834        true    110    874.0             872      11       9       0        0              0          0.0    255  -500.632\n  140 │   140    0.001   -3.73286        true    108    874.0             874      12      12       0        0              0          0.0    256  -509.117\n  141 │   141    0.001   -3.79699        true    108    877.0             874      11       8       0        0              0          0.0    255  -507.703\n  142 │   142    0.001   -4.78769        true    115    890.0             877      22       9       0        0              0          0.0    254  -516.188\n  143 │   143    0.001   -4.69287        true    114    891.0             890      10       9       0        0              0          0.0    253  -516.188\n  144 │   144    0.001   -4.87372        true    115    895.0             891      15      11       0        0              0          0.0    253  -520.431\n  145 │   145    0.001   -4.69623        true    113    895.0             895      12      12       0        0              0          0.0    251  -523.259\n  146 │   146    0.001   -5.24489        true    115    903.0             895      16       8       0        0              0          0.0    250  -524.673\n  147 │   147    0.001   -4.9007         true    115    901.0             903       8      10       0        0              0          0.0    248  -523.259\n  148 │   148    0.001   -5.00515        true    115    904.0             901      10       7       0        0              0          0.0    247  -523.259\n  149 │   149    0.001   -5.8306         true    117    915.0             904      17       6       0        0              0          0.0    246  -527.502\n  150 │   150    0.001   -5.24134        true    114    910.0             915      10      15       0        0              0          0.0    245  -527.502\n  151 │   151    0.001   -4.82099        true    111    907.0             910      14      17       0        0              0          0.0    244  -527.502\n  152 │   152    0.001   -4.30415        true    113    903.0             907       7      11       0        0              0          0.0    242  -531.744\n  153 │   153    0.001   -4.05048        true    114    902.0             903      10      11       0        0              0          0.0    241  -531.744\n  154 │   154    0.001   -4.60599        true    117    910.0             902      20      12       0        0              0          0.0    241  -531.744\n  155 │   155    0.001   -4.63423        true    117    912.0             910       9       7       0        0              0          0.0    240  -535.987\n  156 │   156    0.001   -5.28817        true    121    921.0             912      15       6       0        0              0          0.0    239  -537.401\n  157 │   157    0.001   -4.71229        true    122    916.0             921       5      10       0        0              0          0.0    238  -531.744\n  158 │   158    0.001   -4.66094        true    121    917.0             916      11      10       0        0              0          0.0    238  -530.33\n  159 │   159    0.001   -5.58321        true    123    929.0             917      21       9       0        0              0          0.0    238  -534.573\n  160 │   160    0.001   -5.55316        true    123    930.0             929      13      12       0        0              0          0.0    237  -528.916\n  161 │   161    0.001   -5.69985        true    121    933.0             930      16      13       0        0              0          0.0    237  -528.916\n  162 │   162    0.001   -5.32609        true    121    930.0             933       7      10       0        0              0          0.0    236  -531.744\n  163 │   163    0.001   -4.85825        true    120    926.0             930      11      15       0        0              0          0.0    235  -527.502\n  164 │   164    0.001   -5.34977        true    124    933.0             926      18      11       0        0              0          0.0    235  -531.744\n  165 │   165    0.001   -5.67494        true    123    938.0             933      14       9       0        0              0          0.0    235  -537.401\n  166 │   166    0.001   -5.04889        true    123    932.0             938       7      13       0        0              0          0.0    234  -531.744\n  167 │   167    0.001   -5.02372        true    123    933.0             932      10       9       0        0              0          0.0    233  -533.159\n  168 │   168    0.001   -5.0875         true    124    935.0             933      14      12       0        0              0          0.0    232  -533.159\n  169 │   169    0.001   -4.80523        true    124    933.0             935      10      12       0        0              0          0.0    231  -531.744\n  170 │   170    0.001   -5.8234         true    128    946.0             933      19       6       0        0              0          0.0    231  -535.987\n  171 │   171    0.001   -5.82079        true    127    947.0             946      14      13       0        0              0          0.0    229  -535.987\n  172 │   172    0.001   -6.76117        true    130    959.0             947      19       7       0        0              0          0.0    228  -538.815\n  173 │   173    0.001   -6.86418        true    132    961.0             959      15      13       0        0              0          0.0    227  -537.401\n  174 │   174    0.001   -7.39276        true    133    968.0             961      21      14       0        0              0          0.0    226  -545.886\n  175 │   175    0.001   -6.7485         true    131    961.0             968       8      15       0        0              0          0.0    225  -540.23\n  176 │   176    0.001   -6.34449        true    131    957.0             961      11      15       0        0              0          0.0    223  -538.815\n  177 │   177    0.001   -7.03798        true    132    966.0             957      16       7       0        0              0          0.0    223  -544.472\n  178 │   178    0.001   -6.89812        true    132    965.0             966      11      12       0        0              0          0.0    223  -543.058\n  179 │   179    0.001   -7.3469         true    133    971.0             965      20      14       0        0              0          0.0    223  -541.644\n  180 │   180    0.001   -8.05267        true    134    980.0             971      19      10       0        0              0          0.0    222  -541.644\n  181 │   181    0.001   -8.10357        true    134    981.0             980      16      15       0        0              0          0.0    221  -543.058\n  182 │   182    0.001   -8.57044        true    134    987.0             981      14       8       0        0              0          0.0    221  -540.23\n  183 │   183    0.001   -7.96871        true    134    980.0             987       6      13       0        0              0          0.0    219  -537.401\n  184 │   184    0.001   -7.68621        true    134    977.0             980      10      13       0        0              0          0.0    217  -530.33\n  185 │   185    0.001   -7.14631        true    135    971.0             977      10      16       0        0              0          0.0    217  -528.916\n  186 │   186    0.001   -7.35095        true    137    974.0             971      14      11       0        0              0          0.0    216  -530.33\n  187 │   187    0.001   -7.55975        true    137    977.0             974      15      12       0        0              0          0.0    214  -531.744\n  188 │   188    0.001   -7.43895        true    137    976.0             977      12      13       0        0              0          0.0    214  -526.087\n  189 │   189    0.001   -7.2327         true    137    974.0             976      12      14       0        0              0          0.0    212  -524.673\n  190 │   190    0.001   -6.34844        true    135    964.0             974       5      15       0        0              0          0.0    211  -521.845\n  191 │   191    0.001   -6.20508        true    134    963.0             964      13      14       0        0              0          0.0    212  -520.431\n  192 │   192    0.001   -6.39857        true    133    966.0             963      17      14       0        0              0          0.0    211  -520.431\n  193 │   193    0.001   -7.09995        true    134    975.0             966      18       9       0        0              0          0.0    210  -526.087\n  194 │   194    0.001   -7.14309        true    136    976.0             975      14      13       0        0              0          0.0    208  -523.259\n  195 │   195    0.001   -6.51687        true    134    969.0             976      10      17       0        0              0          0.0    206  -519.016\n  196 │   196    0.001   -6.97019        true    135    975.0             969      15       9       0        0              0          0.0    205  -524.673\n  197 │   197    0.001   -7.34707        true    136    980.0             975      19      14       0        0              0          0.0    204  -527.502\n  198 │   198    0.001   -7.06457        true    137    977.0             980      13      16       0        0              0          0.0    204  -520.431\n  199 │   199    0.001   -7.11082        true    139    978.0             977      13      12       0        0              0          0.0    202  -514.774\n  200 │   200    0.001   -6.99175        true    141    977.0             978      15      16       0        0              0          0.0    201  -509.117\n  201 │   201    0.001   -7.2047         true    141    980.0             977      12       9       0        0              0          0.0    200  -510.531\n  202 │   202    0.001   -6.92219        true    139    977.0             980      11      14       0        0              0          0.0    199  -509.117\n  203 │   203    0.001   -6.88496        true    142    977.0             977      11      11       0        0              0          0.0    199  -507.703\n  204 │   204    0.001   -6.42906        true    143    972.0             977      11      16       0        0              0          0.0    199  -506.288\n  205 │   205    0.001   -6.55135        true    144    974.0             972      18      16       0        0              0          0.0    197  -509.117\n  206 │   206    0.001   -6.59293        true    145    975.0             974      15      14       0        0              0          0.0    195  -504.874\n  207 │   207    0.001   -6.55242        true    146    975.0             975      11      11       0        0              0          0.0    194  -509.117\n  208 │   208    0.001   -6.59556        true    144    976.0             975      14      13       0        0              0          0.0    193  -509.117\n  209 │   209    0.001   -6.47305        true    145    975.0             976      14      15       0        0              0          0.0    192  -500.632\n  210 │   210    0.001   -5.92883        true    144    969.0             975      12      18       0        0              0          0.0    190  -497.803\n  211 │   211    0.001   -5.79419        true    145    968.0             969       9      10       0        0              0          0.0    189  -497.803\n  212 │   212    0.001   -5.74216        true    144    968.0             968      13      13       0        0              0          0.0    188  -502.046\n  213 │   213    0.001   -5.26754        true    144    963.0             968      11      16       0        0              0          0.0    188  -497.803\n  214 │   214    0.001   -5.20722        true    144    963.0             963      13      13       0        0              0          0.0    187  -497.803\n  215 │   215    0.001   -5.14689        true    145    963.0             963      11      11       0        0              0          0.0    186  -497.803\n  216 │   216    0.001   -5.50915        true    143    968.0             963      16      11       0        0              0          0.0    185  -499.217\n  217 │   217    0.001   -5.37277        true    145    967.0             968      13      14       0        0              0          0.0    185  -499.217\n  218 │   218    0.001   -5.82382        true    146    973.0             967      15       9       0        0              0          0.0    185  -502.046\n  219 │   219    0.001   -5.86385        true    145    974.0             973      11      10       0        0              0          0.0    184  -504.874\n  220 │   220    0.001   -5.98909        true    143    976.0             974      15      13       0        0              0          0.0    186  -500.632\n  221 │   221    0.001   -6.69923        true    144    985.0             976      24      15       0        0              0          0.0    187  -502.046\n  222 │   222    0.001   -7.41725        true    145    994.0             985      24      15       0        0              0          0.0    186  -507.703\n  223 │   223    0.001   -7.73533        true    145    998.0             994      15      11       0        0              0          0.0    186  -507.703\n  224 │   224    0.001   -8.22124        true    148   1004.0             998      17      11       0        0              0          0.0    184  -506.288\n  225 │   225    0.001   -8.22762        true    147   1004.0            1004      17      17       0        0              0          0.0    187  -504.874\n  226 │   226    0.001   -8.47747        true    148   1007.0            1004      18      15       0        0              0          0.0    185  -511.945\n  227 │   227    0.001   -8.32641        true    146   1005.0            1007      15      17       0        0              0          0.0    185  -507.703\n  228 │   228    0.001   -8.41554        true    148   1006.0            1005      17      16       0        0              0          0.0    183  -506.288\n  229 │   229    0.001   -8.42511        true    150   1006.0            1006      11      11       0        0              0          0.0    181  -509.117\n  230 │   230    0.001   -8.27229        true    154   1004.0            1006      17      19       0        0              0          0.0    180  -506.288\n  231 │   231    0.001   -7.87129        true    152    999.0            1004      15      20       0        0              0          0.0    180  -502.046\n  232 │   232    0.001   -7.29591        true    152    992.0             999       9      16       0        0              0          0.0    178  -502.046\n  233 │   233    0.001   -7.36527        true    151    993.0             992      17      16       0        0              0          0.0    177  -500.632\n  234 │   234    0.001   -6.69397        true    151    985.0             993       7      15       0        0              0          0.0    175  -493.561\n  235 │   235    0.001   -7.00049        true    152    989.0             985      15      11       0        0              0          0.0    175  -494.975\n  236 │   236    0.001   -7.06525        true    151    990.0             989      18      17       0        0              0          0.0    175  -492.146\n  237 │   237    0.001   -6.71881        true    150    986.0             990      10      14       0        0              0          0.0    174  -490.732\n  238 │   238    0.001   -6.19818        true    150    980.0             986       5      11       0        0              0          0.0    173  -487.904\n  239 │   239    0.001   -5.41301        true    150    971.0             980      11      20       0        0              0          0.0    172  -487.904\n  240 │   240    0.001   -5.70138        true    149    975.0             971      15      11       0        0              0          0.0    171  -494.975\n  241 │   241    0.001   -5.24133        true    147    970.0             975      11      16       0        0              0          0.0    170  -492.146\n  242 │   242    0.001   -5.10843        true    147    969.0             970      10      11       0        0              0          0.0    169  -487.904\n  243 │   243    0.001   -4.72051        true    145    965.0             969      10      14       0        0              0          0.0    168  -485.075\n  244 │   244    0.001   -5.33719        true    144    973.0             965      19      11       0        0              0          0.0    170  -486.489\n  245 │   245    0.001   -5.71165        true    141    978.0             973      18      13       0        0              0          0.0    169  -493.561\n  246 │   246    0.001   -5.34163        true    141    974.0             978       9      13       0        0              0          0.0    169  -493.561\n  247 │   247    0.001   -5.7173         true    142    979.0             974      16      11       0        0              0          0.0    168  -497.803\n  248 │   248    0.001   -5.84987        true    144    981.0             979      11       9       0        0              0          0.0    167  -499.217\n  249 │   249    0.001   -5.73595        true    144    980.0             981      14      15       0        0              0          0.0    166  -500.632\n  250 │   250    0.001   -5.53693        true    145    978.0             980       9      11       0        0              0          0.0    166  -500.632\n  251 │   251    0.001   -4.99918        true    146    972.0             978      10      16       0        0              0          0.0    165  -502.046\n  252 │   252    0.001   -5.2052         true    149    975.0             972      15      12       0        0              0          0.0    165  -504.874\n  253 │   253    0.001   -4.82924        true    151    971.0             975      10      14       0        0              0          0.0    164  -506.288\n  254 │   254    0.001   -4.95005        true    151    973.0             971      15      13       0        0              0          0.0    163  -502.046\n  255 │   255    0.001   -4.31709        true    150    966.0             973       9      16       0        0              0          0.0    164  -497.803\n  256 │   256    0.001   -4.93473        true    153    974.0             966      19      11       0        0              0          0.0    163  -502.046\n  257 │   257    0.001   -4.64086        true    153    971.0             974       7      10       0        0              0          0.0    163  -496.389\n  258 │   258    0.001   -4.34127        true    150    968.0             971      10      13       0        0              0          0.0    163  -494.975\n  259 │   259    0.001   -4.54174        true    151    971.0             968      15      12       0        0              0          0.0    163  -494.975\n  260 │   260    0.001   -4.91376        true    152    976.0             971      15      10       0        0              0          0.0    163  -490.732\n  261 │   261    0.001   -5.20863        true    152    980.0             976      14      10       0        0              0          0.0    164  -497.803\n  262 │   262    0.001   -4.67518        true    150    974.0             980       6      12       0        0              0          0.0    164  -496.389\n  263 │   263    0.001   -4.96746        true    149    978.0             974      11       7       0        0              0          0.0    163  -497.803\n  264 │   264    0.001   -5.51383        true    147    985.0             978      19      12       0        0              0          0.0    162  -500.632\n  265 │   265    0.001   -5.48965        true    150    985.0             985      11      11       0        0              0          0.0    161  -497.803\n  266 │   266    0.001   -5.29962        true    149    983.0             985      14      16       0        0              0          0.0    161  -487.904\n  267 │   267    0.001   -5.10599        true    151    981.0             983      12      14       0        0              0          0.0    161  -486.489\n  268 │   268    0.001   -5.15844        true    150    982.0             981      14      13       0        0              0          0.0    160  -487.904\n  269 │   269    0.001   -5.04624        true    150    981.0             982      16      17       0        0              0          0.0    160  -486.489\n  270 │   270    0.001   -5.01554        true    149    981.0             981      13      13       0        0              0          0.0    159  -485.075\n  271 │   271    0.001   -5.06799        true    149    982.0             981      11      10       0        0              0          0.0    158  -486.489\n  272 │   272    0.001   -4.45517        true    148    975.0             982      11      18       0        0              0          0.0    157  -486.489\n  273 │   273    0.001   -4.83206        true    147    980.0             975      17      12       0        0              0          0.0    157  -490.732\n  274 │   274    0.001   -5.215          true    146    985.0             980      16      11       0        0              0          0.0    159  -485.075\n  275 │   275    0.001   -5.60398        true    148    990.0             985      11       6       0        0              0          0.0    159  -487.904\n  276 │   276    0.001   -5.5879         true    148    990.0             990      13      13       0        0              0          0.0    158  -489.318\n  277 │   277    0.001   -5.24146        true    150    986.0             990       9      13       0        0              0          0.0    157  -490.732\n  278 │   278    0.001   -5.54927        true    152    990.0             986      16      12       0        0              0          0.0    157  -487.904\n  279 │   279    0.001   -5.20282        true    152    986.0             990      10      14       0        0              0          0.0    157  -485.075\n  280 │   280    0.001   -4.76542        true    152    981.0             986      10      15       0        0              0          0.0    156  -485.075\n  281 │   281    0.001   -4.6515         true    151    980.0             981      13      14       0        0              0          0.0    157  -487.904\n  282 │   282    0.001   -5.28259        true    153    988.0             980      20      12       0        0              0          0.0    158  -489.318\n  283 │   283    0.001   -5.01513        true    153    985.0             988      10      13       0        0              0          0.0    158  -489.318\n  284 │   284    0.001   -4.40898        true    153    978.0             985       6      13       0        0              0          0.0    157  -486.489\n  285 │   285    0.001   -4.70645        true    155    982.0             978      15      11       0        0              0          0.0    157  -483.661\n  286 │   286    0.001   -5.66849        true    157    994.0             982      19       7       0        0              0          0.0    157  -492.146\n  287 │   287    0.001   -6.47568        true    161   1004.0             994      23      13       0        0              0          0.0    156  -493.561\n  288 │   288    0.001   -6.31936        true    163   1002.0            1004      17      19       0        0              0          0.0    155  -489.318\n  289 │   289    0.001   -7.13289        true    163   1012.0            1002      23      13       0        0              0          0.0    156  -492.146\n  290 │   290    0.001   -7.0713         true    163   1011.0            1012      14      15       0        0              0          0.0    156  -490.732\n  291 │   291    0.001   -7.33059        true    158   1014.0            1011      15      12       0        0              0          0.0    155  -492.146\n  292 │   292    0.001   -7.11105        true    159   1011.0            1014      12      15       0        0              0          0.0    154  -487.904\n  293 │   293    0.001   -7.0478         true    162   1010.0            1011      18      19       0        0              0          0.0    154  -480.833\n  294 │   294    0.001   -6.73991        true    162   1006.0            1010      15      19       0        0              0          0.0    152  -479.418\n  295 │   295    0.001   -6.74949        true    164   1006.0            1006      12      12       0        0              0          0.0    151  -476.59\n  296 │   296    0.001   -6.10756        true    164    998.0            1006      11      19       0        0              0          0.0    151  -470.933\n  297 │   297    0.001   -5.77664        true    165    994.0             998       9      13       0        0              0          0.0    150  -465.276\n  298 │   298    0.001   -5.84906        true    166    995.0             994      15      14       0        0              0          0.0    150  -465.276\n  299 │   299    0.001   -6.25007        true    166   1000.0             995      18      13       0        0              0          0.0    151  -461.034\n  300 │   300    0.001   -6.73821        true    167   1006.0            1000      16      10       0        0              0          0.0    150  -465.276\n  301 │   301    0.001   -5.68643        true    167    993.0            1006       5      18       0        0              0          0.0    149  -463.862\n  302 │   302    0.001   -5.92135        true    167    996.0             993      16      13       0        0              0          0.0    148  -461.034\n  303 │   303    0.001   -5.99682        true    168    997.0             996      16      15       0        0              0          0.0    147  -461.034\n  304 │   304    0.001   -5.99201        true    171    997.0             997      15      15       0        0              0          0.0    146  -463.862\n  305 │   305    0.001   -5.65916        true    170    993.0             997      15      19       0        0              0          0.0    145  -459.619\n  306 │   306    0.001   -4.65582        true    169    981.0             993       7      19       0        0              0          0.0    145  -459.619\n  307 │   307    0.001   -4.62512        true    169    981.0             981      12      12       0        0              0          0.0    144  -453.963\n  308 │   308    0.001   -3.84235        true    167    972.0             981      10      19       0        0              0          0.0    143  -448.306\n  309 │   309    0.001   -3.62884        true    170    970.0             972      11      13       0        0              0          0.0    142  -449.72\n  310 │   310    0.001   -3.74818        true    169    972.0             970      13      11       0        0              0          0.0    143  -451.134\n  311 │   311    0.001   -3.87047        true    169    974.0             972      18      16       0        0              0          0.0    144  -451.134\n  312 │   312    0.001   -4.07927        true    171    977.0             974      11       8       0        0              0          0.0    144  -449.72\n  313 │   313    0.001   -4.12551        true    169    978.0             977      11      10       0        0              0          0.0    144  -451.134\n  314 │   314    0.001   -4.00644        true    171    977.0             978      10      11       0        0              0          0.0    144  -448.306\n  315 │   315    0.001   -3.1297         true    169    967.0             977       5      15       0        0              0          0.0    143  -446.891\n  316 │   316    0.001   -3.07601        true    167    967.0             967       9       9       0        0              0          0.0    143  -446.891\n  317 │   317    0.001   -3.77827        true    166    976.0             967      17       8       0        0              0          0.0    145  -452.548\n  318 │   318    0.001   -4.32256        true    165    983.0             976      17      10       0        0              0          0.0    144  -452.548\n  319 │   319    0.001   -4.70913        true    166    988.0             983      14       9       0        0              0          0.0    143  -455.377\n  320 │   320    0.001   -4.27581        true    164    983.0             988       8      13       0        0              0          0.0    143  -452.548\n  321 │   321    0.001   -4.41423        true    164    985.0             983      16      14       0        0              0          0.0    142  -452.548\n  322 │   322    0.001   -4.96789        true    165    992.0             985      18      11       0        0              0          0.0    141  -452.548\n  323 │   323    0.001   -4.29431        true    165    984.0             992       8      16       0        0              0          0.0    140  -453.963\n  324 │   324    0.001   -4.5169         true    168    987.0             984      18      15       0        0              0          0.0    139  -451.134\n  325 │   325    0.001   -4.41325        true    168    986.0             987       9      10       0        0              0          0.0    139  -453.963\n  326 │   326    0.001   -4.63859        true    168    989.0             986      20      17       0        0              0          0.0    140  -453.963\n  327 │   327    0.001   -4.95026        true    168    993.0             989      15      11       0        0              0          0.0    139  -458.205\n  328 │   328    0.001   -4.69212        true    169    990.0             993      13      16       0        0              0          0.0    138  -461.034\n  329 │   329    0.001   -4.51102        true    167    988.0             990      12      14       0        0              0          0.0    137  -459.619\n  330 │   330    0.001   -5.23166        true    163    997.0             988      18       9       0        0              0          0.0    138  -465.276\n  331 │   331    0.001   -5.30866        true    162    998.0             997      12      11       0        0              0          0.0    138  -466.69\n  332 │   332    0.001   -5.46882        true    159   1000.0             998      13      11       0        0              0          0.0    139  -466.69\n  333 │   333    0.001   -5.30546        true    160    998.0            1000      12      14       0        0              0          0.0    139  -466.69\n  334 │   334    0.001   -5.62865        true    159   1002.0             998      17      13       0        0              0          0.0    139  -466.69\n  335 │   335    0.001   -6.03802        true    161   1007.0            1002      20      15       0        0              0          0.0    138  -463.862\n  336 │   336    0.001   -5.88696        true    163   1005.0            1007      15      17       0        0              0          0.0    138  -462.448\n  337 │   337    0.001   -5.1609         true    164    996.0            1005      12      21       0        0              0          0.0    137  -461.034\n  338 │   338    0.001   -5.72598        true    166   1003.0             996      15       8       0        0              0          0.0    137  -463.862\n  339 │   339    0.001   -5.97447        true    162   1006.0            1003      16      13       0        0              0          0.0    137  -462.448\n  340 │   340    0.001   -5.82165        true    162   1004.0            1006       9      11       0        0              0          0.0    138  -456.791\n  341 │   341    0.001   -5.17524        true    161    996.0            1004       7      15       0        0              0          0.0    138  -452.548\n  342 │   342    0.001   -5.08686        true    162    995.0             996      14      15       0        0              0          0.0    137  -451.134\n  343 │   343    0.001   -5.3245         true    165    998.0             995      17      14       0        0              0          0.0    136  -455.377\n  344 │   344    0.001   -5.56622        true    166   1001.0             998      12       9       0        0              0          0.0    135  -453.963\n  345 │   345    0.001   -5.40462        true    166    999.0            1001      13      15       0        0              0          0.0    134  -455.377\n  346 │   346    0.001   -5.07563        true    166    995.0             999       7      11       0        0              0          0.0    133  -452.548\n  347 │   347    0.001   -4.82121        true    166    992.0             995      14      17       0        0              0          0.0    133  -452.548\n  348 │   348    0.001   -4.23051        true    164    985.0             992       7      14       0        0              0          0.0    133  -448.306\n  349 │   349    0.001   -4.61949        true    168    990.0             985      15      10       0        0              0          0.0    132  -449.72\n  350 │   350    0.001   -4.60341        true    170    990.0             990      14      14       0        0              0          0.0    132  -445.477\n  351 │   351    0.001   -4.83423        true    171    993.0             990      10       7       0        0              0          0.0    132  -449.72\n  352 │   352    0.001   -6.20815        true    175   1010.0             993      24       7       0        0              0          0.0    132  -455.377\n  353 │   353    0.001   -5.81911        true    174   1005.0            1010      13      18       0        0              0          0.0    131  -455.377\n  354 │   354    0.001   -5.74585        true    175   1004.0            1005      13      14       0        0              0          0.0    130  -452.548\n  355 │   355    0.001   -5.67092        true    175   1003.0            1004      14      15       0        0              0          0.0    130  -449.72\n  356 │   356    0.001   -5.10423        true    176    996.0            1003      11      18       0        0              0          0.0    129  -446.891\n  357 │   357    0.001   -5.75062        true    178   1004.0             996      21      13       0        0              0          0.0    129  -446.891\n  358 │   358    0.001   -6.32396        true    179   1011.0            1004      15       8       0        0              0          0.0    130  -446.891\n  359 │   359    0.001   -5.44876        true    178   1000.0            1011      13      24       0        0              0          0.0    129  -441.235\n  360 │   360    0.001   -5.53032        true    177   1001.0            1000      19      18       0        0              0          0.0    129  -444.063\n  361 │   361    0.001   -5.45036        true    178   1000.0            1001      12      13       0        0              0          0.0    129  -445.477\n  362 │   362    0.001   -5.36872        true    178    999.0            1000      10      11       0        0              0          0.0    128  -444.063\n  363 │   363    0.001   -5.03974        true    177    995.0             999      13      17       0        0              0          0.0    128  -446.891\n  364 │   364    0.001   -5.5223         true    179   1001.0             995      15       9       0        0              0          0.0    128  -446.891\n  365 │   365    0.001   -6.33504        true    180   1011.0            1001      15       5       0        0              0          0.0    127  -448.306\n  366 │   366    0.001   -5.62288        true    178   1002.0            1011      12      21       0        0              0          0.0    126  -445.477\n  367 │   367    0.001   -6.11324        true    180   1008.0            1002      17      11       0        0              0          0.0    125  -446.891\n  368 │   368    0.001   -5.55735        true    180   1001.0            1008      10      17       0        0              0          0.0    124  -439.82\n  369 │   369    0.001   -5.80314        true    181   1004.0            1001      11       8       0        0              0          0.0    124  -441.235\n  370 │   370    0.001   -4.91057        true    179    993.0            1004       8      19       0        0              0          0.0    124  -436.992\n  371 │   371    0.001   -4.98146        true    179    994.0             993      12      11       0        0              0          0.0    124  -436.992\n  372 │   372    0.001   -5.21774        true    181    997.0             994      13      10       0        0              0          0.0    123  -438.406\n  373 │   373    0.001   -5.29474        true    183    998.0             997      17      16       0        0              0          0.0    124  -435.578\n  374 │   374    0.001   -4.79947        true    181    992.0             998      17      23       0        0              0          0.0    126  -428.507\n  375 │   375    0.001   -4.53947        true    183    989.0             992      10      13       0        0              0          0.0    126  -427.092\n  376 │   376    0.001   -4.93327        true    182    994.0             989      11       6       0        0              0          0.0    126  -427.092\n  377 │   377    0.001   -5.25135        true    181    998.0             994      16      12       0        0              0          0.0    126  -427.092\n  378 │   378    0.001   -5.57455        true    182   1002.0             998      18      14       0        0              0          0.0    127  -424.264\n  379 │   379    0.001   -5.33307        true    183    999.0            1002       7      10       0        0              0          0.0    127  -421.436\n  380 │   380    0.001   -5.00409        true    180    995.0             999      12      16       0        0              0          0.0    126  -424.264\n  381 │   381    0.001   -5.64952        true    179   1003.0             995      21      13       0        0              0          0.0    125  -429.921\n  382 │   382    0.001   -6.22183        true    180   1010.0            1003      25      18       0        0              0          0.0    126  -431.335\n  383 │   383    0.001   -5.99501        true    181   1007.0            1010      11      14       0        0              0          0.0    125  -427.092\n  384 │   384    0.001   -5.2736         true    182    998.0            1007       8      17       0        0              0          0.0    124  -425.678\n  385 │   385    0.001   -4.69604        true    180    991.0             998       8      15       0        0              0          0.0    123  -427.092\n  386 │   386    0.001   -5.09224        true    183    996.0             991      19      14       0        0              0          0.0    124  -429.921\n  387 │   387    0.001   -5.90102        true    182   1006.0             996      19       9       0        0              0          0.0    124  -428.507\n  388 │   388    0.001   -6.71772        true    186   1016.0            1006      21      11       0        0              0          0.0    124  -434.164\n  389 │   389    0.001   -7.14371        true    185   1021.0            1016      20      15       0        0              0          0.0    124  -438.406\n  390 │   390    0.001   -7.01696        true    187   1019.0            1021      10      12       0        0              0          0.0    123  -438.406\n  391 │   391    0.001   -7.52614        true    185   1025.0            1019      16      10       0        0              0          0.0    123  -436.992\n  392 │   392    0.001   -7.40627        true    182   1023.0            1025      16      18       0        0              0          0.0    122  -436.992\n  393 │   393    0.001   -7.76109        true    182   1027.0            1023      22      18       0        0              0          0.0    121  -434.164\n  394 │   394    0.001   -7.64465        true    182   1025.0            1027      11      13       0        0              0          0.0    120  -435.578\n  395 │   395    0.001   -8.16043        true    184   1031.0            1025      17      11       0        0              0          0.0    120  -432.749\n  396 │   396    0.001   -7.65336        true    183   1024.0            1031      11      18       0        0              0          0.0    120  -420.021\n  397 │   397    0.001   -8.16804        true    184   1030.0            1024      20      14       0        0              0          0.0    120  -421.436\n  398 │   398    0.001   -7.0986         true    184   1016.0            1030      11      25       0        0              0          0.0    120  -418.607\n  399 │   399    0.001   -7.68427        true    185   1023.0            1016      18      11       0        0              0          0.0    119  -421.436\n  400 │   400    0.001   -7.16038        true    185   1016.0            1023       9      16       0        0              0          0.0    118  -418.607\n  401 │   401    0.001   -6.70246        true    184   1010.0            1016      10      16       0        0              0          0.0    118  -414.365\n  402 │   402    0.001   -6.55663        true    183   1008.0            1010      14      16       0        0              0          0.0    117  -415.779\n  403 │   403    0.001   -6.48839        true    184   1007.0            1008      19      20       0        0              0          0.0    116  -412.95\n  404 │   404    0.001   -6.58054        true    183   1008.0            1007      20      19       0        0              0          0.0    115  -411.536\n  405 │   405    0.001   -6.99705        true    187   1013.0            1008      21      16       0        0              0          0.0    116  -411.536\n  406 │   406    0.001   -7.17867        true    187   1015.0            1013      19      17       0        0              0          0.0    118  -410.122\n  407 │   407    0.001   -8.08207        true    188   1026.0            1015      23      12       0        0              0          0.0    117  -417.193\n  408 │   408    0.001   -8.20263        true    186   1027.0            1026      13      12       0        0              0          0.0    116  -415.779\n  409 │   409    0.001   -7.92682        true    187   1023.0            1027      12      16       0        0              0          0.0    115  -410.122\n  410 │   410    0.001   -7.80351        true    189   1021.0            1023      14      16       0        0              0          0.0    116  -415.779\n  411 │   411    0.001   -7.7568         true    190   1020.0            1021      13      14       0        0              0          0.0    116  -415.779\n  412 │   412    0.001   -7.46786        true    191   1016.0            1020      15      19       0        0              0          0.0    115  -414.365\n  413 │   413    0.001   -7.81388        true    193   1020.0            1016      18      14       0        0              0          0.0    116  -414.365\n  414 │   414    0.001   -7.12237        true    193   1011.0            1020      14      23       0        0              0          0.0    115  -411.536\n  415 │   415    0.001   -6.57293        true    191   1004.0            1011      14      21       0        0              0          0.0    114  -412.95\n  416 │   416    0.001   -5.84454        true    191    995.0            1004      10      19       0        0              0          0.0    113  -415.779\n  417 │   417    0.001   -5.83652        true    192    995.0             995      10      10       0        0              0          0.0    113  -414.365\n  418 │   418    0.001   -5.74645        true    192    994.0             995      11      12       0        0              0          0.0    112  -417.193\n  419 │   419    0.001   -5.73682        true    192    994.0             994      16      16       0        0              0          0.0    112  -422.85\n  420 │   420    0.001   -6.0549         true    196    998.0             994      16      12       0        0              0          0.0    112  -418.607\n  421 │   421    0.001   -5.9699         true    196    997.0             998      13      14       0        0              0          0.0    111  -414.365\n  422 │   422    0.001   -5.39015        true    196    990.0             997       8      15       0        0              0          0.0    111  -411.536\n  423 │   423    0.001   -5.0437         true    199    986.0             990      11      15       0        0              0          0.0    111  -411.536\n  424 │   424    0.001   -5.26905        true    199    989.0             986      15      12       0        0              0          0.0    111  -417.193\n  425 │   425    0.001   -5.08617        true    200    987.0             989      14      16       0        0              0          0.0    110  -417.193\n  426 │   426    0.001   -4.56767        true    201    981.0             987      10      16       0        0              0          0.0    111  -412.95\n  427 │   427    0.001   -4.70317        true    201    983.0             981      13      11       0        0              0          0.0    113  -414.365\n  428 │   428    0.001   -4.42632        true    199    980.0             983       9      12       0        0              0          0.0    112  -414.365\n  429 │   429    0.001   -4.89206        true    204    986.0             980      23      17       0        0              0          0.0    112  -414.365\n  430 │   430    0.001   -5.1174         true    201    989.0             986      16      13       0        0              0          0.0    112  -412.95\n  431 │   431    0.001   -5.26455        true    202    991.0             989      17      15       0        0              0          0.0    111  -411.536\n  432 │   432    0.001   -5.49674        true    198    994.0             991      20      17       0        0              0          0.0    112  -410.122\n  433 │   433    0.001   -5.97818        true    203   1000.0             994      19      13       0        0              0          0.0    111  -411.536\n  434 │   434    0.001   -5.97818        true    207   1000.0            1000      12      12       0        0              0          0.0    110  -405.879\n  435 │   435    0.001   -5.65113        true    206    996.0            1000      12      16       0        0              0          0.0    109  -408.708\n  436 │   436    0.001   -5.31635        true    205    992.0             996      12      16       0        0              0          0.0    109  -410.122\n  437 │   437    0.001   -5.71375        true    209    997.0             992      22      17       0        0              0          0.0    108  -408.708\n  438 │   438    0.001   -5.134          true    209    990.0             997      19      26       0        0              0          0.0    108  -401.637\n  439 │   439    0.001   -4.78756        true    207    986.0             990       5       9       0        0              0          0.0    107  -400.222\n  440 │   440    0.001   -5.26005        true    209    992.0             986      20      14       0        0              0          0.0    106  -401.637\n  441 │   441    0.001   -5.41155        true    206    994.0             992      11       9       0        0              0          0.0    105  -405.879\n  442 │   442    0.001   -5.23757        true    206    992.0             994      10      12       0        0              0          0.0    105  -408.708\n  443 │   443    0.001   -5.14242        true    209    991.0             992      10      11       0        0              0          0.0    104  -408.708\n  444 │   444    0.001   -5.53862        true    210    996.0             991      11       6       0        0              0          0.0    104  -408.708\n  445 │   445    0.001   -5.94082        true    209   1001.0             996      17      12       0        0              0          0.0    106  -410.122\n  446 │   446    0.001   -6.0239         true    209   1002.0            1001      12      11       0        0              0          0.0    107  -408.708\n  447 │   447    0.001   -5.45504        true    206    995.0            1002      11      18       0        0              0          0.0    106  -407.294\n  448 │   448    0.001   -5.20061        true    207    992.0             995      15      18       0        0              0          0.0    106  -410.122\n  449 │   449    0.001   -5.10546        true    205    991.0             992      11      12       0        0              0          0.0    105  -412.95\n  450 │   450    0.001   -5.4197         true    201    995.0             991      24      20       0        0              0          0.0    105  -412.95\n  451 │   451    0.001   -5.65734        true    202    998.0             995      18      15       0        0              0          0.0    104  -415.779\n  452 │   452    0.001   -6.06193        true    201   1003.0             998      17      12       0        0              0          0.0    103  -418.607\n  453 │   453    0.001   -6.06673        true    200   1003.0            1003      17      17       0        0              0          0.0    102  -410.122\n  454 │   454    0.001   -6.07152        true    201   1003.0            1003      14      14       0        0              0          0.0    103  -407.294\n  455 │   455    0.001   -6.23886        true    201   1005.0            1003      12      10       0        0              0          0.0    103  -405.879\n  456 │   456    0.001   -5.67649        true    201    998.0            1005       5      12       0        0              0          0.0    104  -404.465\n  457 │   457    0.001   -5.75501        true    201    999.0             998      17      16       0        0              0          0.0    104  -401.637\n  458 │   458    0.001   -6.40426        true    203   1007.0             999      16       8       0        0              0          0.0    104  -401.637\n  459 │   459    0.001   -6.81959        true    205   1012.0            1007      17      12       0        0              0          0.0    103  -398.808\n  460 │   460    0.001   -7.16057        true    206   1016.0            1012      15      11       0        0              0          0.0    103  -395.98\n  461 │   461    0.001   -6.86407        true    205   1012.0            1016      15      19       0        0              0          0.0    102  -397.394\n  462 │   462    0.001   -6.6409         true    203   1009.0            1012      13      16       0        0              0          0.0    101  -395.98\n  463 │   463    0.001   -6.3311         true    201   1005.0            1009       8      12       0        0              0          0.0    101  -403.051\n  464 │   464    0.001   -6.01366        true    201   1001.0            1005      10      14       0        0              0          0.0    100  -401.637\n  465 │   465    0.001   -5.68853        true    201    997.0            1001      14      18       0        0              0          0.0     99  -401.637\n  466 │   466    0.001   -5.27347        true    201    992.0             997      13      18       0        0              0          0.0     98  -397.394\n  467 │   467    0.001   -5.01347        true    200    989.0             992      12      15       0        0              0          0.0     98  -395.98\n  468 │   468    0.001   -4.83059        true    201    987.0             989      12      14       0        0              0          0.0     97  -397.394\n  469 │   469    0.001   -4.64413        true    201    985.0             987      11      13       0        0              0          0.0     97  -400.222\n  470 │   470    0.001   -4.78547        true    202    987.0             985      14      12       0        0              0          0.0     97  -403.051\n  471 │   471    0.001   -4.76453        true    204    987.0             987      10      10       0        0              0          0.0     97  -401.637\n  472 │   472    0.001   -4.49519        true    203    984.0             987      10      13       0        0              0          0.0     96  -398.808\n  473 │   473    0.001   -4.137          true    202    980.0             984      17      21       0        0              0          0.0     95  -398.808\n  474 │   474    0.001   -3.93798        true    201    978.0             980       8      10       0        0              0          0.0     95  -398.808\n  475 │   475    0.001   -4.48435        true    202    985.0             978      17      10       0        0              0          0.0     96  -397.394\n  476 │   476    0.001   -4.29432        true    202    983.0             985      13      15       0        0              0          0.0     96  -401.637\n  477 │   477    0.001   -4.01747        true    202    980.0             983      11      14       0        0              0          0.0     97  -397.394\n  478 │   478    0.001   -4.64856        true    204    988.0             980      17       9       0        0              0          0.0     97  -395.98\n  479 │   479    0.001   -3.88252        true    203    979.0             988      10      19       0        0              0          0.0     97  -394.566\n  480 │   480    0.001   -3.76517        true    202    978.0             979       9      10       0        0              0          0.0     96  -393.151\n  481 │   481    0.001   -3.39515        true    198    974.0             978       9      13       0        0              0          0.0     96  -395.98\n  482 │   482    0.001   -3.43674        true    196    975.0             974      17      16       0        0              0          0.0     96  -390.323\n  483 │   483    0.001   -3.73031        true    198    979.0             975      12       8       0        0              0          0.0     96  -388.909\n  484 │   484    0.001   -4.36045        true    198    987.0             979      21      13       0        0              0          0.0     97  -388.909\n  485 │   485    0.001   -3.84195        true    198    981.0             987      10      16       0        0              0          0.0     96  -388.909\n  486 │   486    0.001   -3.89439        true    197    982.0             981       9       8       0        0              0          0.0     96  -390.323\n  487 │   487    0.001   -3.69897        true    198    980.0             982      13      15       0        0              0          0.0     95  -391.737\n  488 │   488    0.001   -3.74987        true    198    981.0             980      14      13       0        0              0          0.0     95  -393.151\n  489 │   489    0.001   -3.71918        true    198    981.0             981      15      15       0        0              0          0.0     95  -390.323\n  490 │   490    0.001   -3.77162        true    200    982.0             981      12      11       0        0              0          0.0     95  -390.323\n  491 │   491    0.001   -3.65942        true    201    981.0             982      12      13       0        0              0          0.0     95  -387.495\n  492 │   492    0.001   -3.29533        true    204    977.0             981      10      14       0        0              0          0.0     96  -383.252\n  493 │   493    0.001   -3.67464        true    204    982.0             977      21      16       0        0              0          0.0     97  -386.08\n  494 │   494    0.001   -3.97728        true    203    986.0             982      20      16       0        0              0          0.0     98  -391.737\n  495 │   495    0.001   -3.95473        true    204    986.0             986      15      15       0        0              0          0.0     97  -384.666\n  496 │   496    0.001   -5.001          true    206    999.0             986      22       9       0        0              0          0.0     97  -390.323\n  497 │   497    0.001   -5.08104        true    206   1000.0             999      13      12       0        0              0          0.0     98  -386.08\n  498 │   498    0.001   -5.48802        true    206   1005.0            1000      13       8       0        0              0          0.0     97  -391.737\n  499 │   499    0.001   -5.17058        true    206   1001.0            1005       7      11       0        0              0          0.0     97  -390.323\n  500 │   500    0.001   -4.92725        true    203    998.0            1001      18      21       0        0              0          0.0     96  -393.151\n  501 │   501    0.001   -4.34969        true    203    991.0             998      11      18       0        0              0          0.0     96  -390.323\n  502 │   502    0.001   -4.08783        true    202    988.0             991      14      17       0        0              0          0.0     95  -387.495\n  503 │   503    0.001   -4.31591        true    204    991.0             988      17      14       0        0              0          0.0     94  -386.08\n  504 │   504    0.001   -3.72301        true    202    984.0             991      10      17       0        0              0          0.0     94  -381.838\n  505 │   505    0.001   -3.53118        true    201    982.0             984      11      13       0        0              0          0.0     93  -383.252\n  506 │   506    0.001   -3.83383        true    203    986.0             982      16      12       0        0              0          0.0     93  -386.08\n  507 │   507    0.001   -3.64558        true    203    984.0             986      15      17       0        0              0          0.0     92  -384.666\n  508 │   508    0.001   -3.53681        true    204    983.0             984       9      10       0        0              0          0.0     91  -383.252\n  509 │   509    0.001   -4.25307        true    204    992.0             983      20      11       0        0              0          0.0     93  -384.666\n  510 │   510    0.001   -4.15792        true    203    991.0             992      15      16       0        0              0          0.0     93  -383.252\n  511 │   511    0.001   -3.23264        true    202    980.0             991       8      19       0        0              0          0.0     93  -380.423\n  512 │   512    0.001   -3.03362        true    200    978.0             980      13      15       0        0              0          0.0     93  -379.009\n  513 │   513    0.001   -2.74733        true    197    975.0             978       9      12       0        0              0          0.0     94  -377.595\n  514 │   514    0.001   -2.79047        true    197    976.0             975      12      11       0        0              0          0.0     94  -380.423\n  515 │   515    0.001   -2.5004         true    196    973.0             976       9      12       0        0              0          0.0     94  -380.423\n  516 │   516    0.001   -2.45661        true    198    973.0             973      13      13       0        0              0          0.0     93  -384.666\n  517 │   517    0.001   -2.99776        true    199    980.0             973      15       8       0        0              0          0.0     93  -387.495\n  518 │   518    0.001   -2.88213        true    195    979.0             980      13      14       0        0              0          0.0     93  -388.909\n  519 │   519    0.001   -3.26386        true    195    984.0             979      18      13       0        0              0          0.0     92  -393.151\n  520 │   520    0.001   -3.15509        true    196    983.0             984       9      10       0        0              0          0.0     91  -391.737\n  521 │   521    0.001   -2.96146        true    197    981.0             983      13      15       0        0              0          0.0     92  -391.737\n  522 │   522    0.001   -3.01391        true    198    982.0             981      11      10       0        0              0          0.0     92  -391.737\n  523 │   523    0.001   -2.81848        true    197    980.0             982      13      15       0        0              0          0.0     91  -391.737\n  524 │   524    0.001   -2.95252        true    198    982.0             980      14      12       0        0              0          0.0     91  -386.08\n  525 │   525    0.001   -3.33788        true    199    987.0             982      16      11       0        0              0          0.0     92  -387.495\n  526 │   526    0.001   -3.81149        true    197    993.0             987      21      15       0        0              0          0.0     93  -388.909\n  527 │   527    0.001   -4.45502        true    198   1001.0             993      17       9       0        0              0          0.0     93  -388.909\n  528 │   528    0.001   -3.55495        true    196    990.0            1001       9      20       0        0              0          0.0     93  -388.909\n  529 │   529    0.001   -3.70355        true    195    992.0             990      12      10       0        0              0          0.0     92  -388.909\n  530 │   530    0.001   -4.34613        true    195   1000.0             992      19      11       0        0              0          0.0     92  -391.737\n  531 │   531    0.001   -3.9371         true    195    995.0            1000      11      16       0        0              0          0.0     93  -388.909\n  532 │   532    0.001   -4.25647        true    195    999.0             995      14      10       0        0              0          0.0     95  -386.08\n  533 │   533    0.001   -4.33651        true    195   1000.0             999      13      12       0        0              0          0.0     96  -383.252\n  534 │   534    0.001   -4.58094        true    200   1003.0            1000      19      16       0        0              0          0.0     96  -386.08\n  535 │   535    0.001   -4.66705        true    199   1004.0            1003      14      13       0        0              0          0.0     97  -386.08\n  536 │   536    0.001   -4.83582        true    199   1006.0            1004      12      10       0        0              0          0.0     97  -386.08\n  537 │   537    0.001   -4.60169        true    199   1003.0            1006      12      15       0        0              0          0.0     97  -390.323\n  538 │   538    0.001   -4.6878         true    201   1004.0            1003      15      14       0        0              0          0.0     97  -386.08\n  539 │   539    0.001   -5.09955        true    201   1009.0            1004      16      11       0        0              0          0.0     97  -386.08\n  540 │   540    0.001   -5.43674        true    201   1013.0            1009      18      14       0        0              0          0.0     99  -390.323\n  541 │   541    0.001   -5.85918        true    203   1018.0            1013      20      15       0        0              0          0.0     99  -391.737\n  542 │   542    0.001   -5.64689        true    202   1015.0            1018      14      17       0        0              0          0.0     98  -386.08\n  543 │   543    0.001   -5.67072        true    205   1015.0            1015      15      15       0        0              0          0.0     97  -383.252\n  544 │   544    0.001   -5.04884        true    202   1007.0            1015      14      22       0        0              0          0.0     97  -390.323\n  545 │   545    0.001   -5.46416        true    204   1012.0            1007      16      11       0        0              0          0.0     98  -390.323\n  546 │   546    0.001   -5.48325        true    204   1012.0            1012      16      16       0        0              0          0.0     98  -397.394\n  547 │   547    0.001   -4.77339        true    202   1003.0            1012      10      19       0        0              0          0.0     97  -397.394\n  548 │   548    0.001   -4.8595         true    203   1004.0            1003      23      22       0        0              0          0.0     97  -395.98\n  549 │   549    0.001   -5.02828        true    203   1006.0            1004      14      12       0        0              0          0.0     96  -398.808\n  550 │   550    0.001   -4.54971        true    202   1000.0            1006      15      21       0        0              0          0.0     96  -394.566\n  551 │   551    0.001   -4.71275        true    205   1002.0            1000      16      14       0        0              0          0.0     96  -388.909\n  552 │   552    0.001   -5.36486        true    206   1010.0            1002      23      15       0        0              0          0.0     97  -395.98\n  553 │   553    0.001   -4.97581        true    205   1005.0            1010      10      15       0        0              0          0.0     98  -390.323\n  554 │   554    0.001   -5.14602        true    204   1007.0            1005      14      12       0        0              0          0.0     97  -388.909\n  555 │   555    0.001   -5.39992        true    203   1010.0            1007      14      11       0        0              0          0.0     97  -393.151\n  556 │   556    0.001   -5.49659        true    207   1011.0            1010      14      13       0        0              0          0.0     97  -394.566\n  557 │   557    0.001   -5.67536        true    209   1013.0            1011      14      12       0        0              0          0.0     97  -393.151\n  558 │   558    0.001   -6.57733        true    209   1024.0            1013      21      10       0        0              0          0.0     98  -401.637\n  559 │   559    0.001   -7.17119        true    209   1031.0            1024      19      12       0        0              0          0.0     97  -403.051\n  560 │   560    0.001   -7.14085        true    208   1030.0            1031      15      16       0        0              0          0.0     98  -395.98\n  561 │   561    0.001   -6.95013        true    207   1027.0            1030      17      20       0        0              0          0.0     98  -394.566\n  562 │   562    0.001   -6.75404        true    206   1024.0            1027      11      14       0        0              0          0.0     97  -393.151\n  563 │   563    0.001   -6.95121        true    206   1026.0            1024      16      14       0        0              0          0.0     97  -390.323\n  564 │   564    0.001   -6.43364        true    201   1019.0            1026      13      20       0        0              0          0.0     96  -391.737\n  565 │   565    0.001   -5.98187        true    200   1013.0            1019      10      16       0        0              0          0.0     97  -394.566\n  566 │   566    0.001   -6.16348        true    200   1015.0            1013       9       7       0        0              0          0.0     97  -394.566\n  567 │   567    0.001   -6.42813        true    201   1018.0            1015      15      12       0        0              0          0.0     96  -394.566\n  568 │   568    0.001   -6.37648        true    202   1017.0            1018      17      18       0        0              0          0.0     96  -394.566\n  569 │   569    0.001   -6.32317        true    203   1016.0            1017      16      17       0        0              0          0.0     96  -393.151\n  570 │   570    0.001   -6.82904        true    203   1022.0            1016      13       7       0        0              0          0.0     95  -395.98\n  571 │   571    0.001   -6.06149        true    203   1012.0            1022      15      25       0        0              0          0.0     95  -397.394\n  572 │   572    0.001   -5.59535        true    203   1006.0            1012      13      19       0        0              0          0.0     95  -398.808\n  573 │   573    0.001   -5.36121        true    203   1003.0            1006      13      16       0        0              0          0.0     95  -394.566\n  574 │   574    0.001   -5.03993        true    203    999.0            1003       7      11       0        0              0          0.0     94  -394.566\n  575 │   575    0.001   -5.11997        true    200   1000.0             999      16      15       0        0              0          0.0     93  -391.737\n  576 │   576    0.001   -5.36441        true    200   1003.0            1000      16      13       0        0              0          0.0     93  -390.323\n  577 │   577    0.001   -5.6129         true    202   1006.0            1003      12       9       0        0              0          0.0     93  -390.323\n  578 │   578    0.001   -4.88917        true    199    997.0            1006      17      26       0        0              0          0.0     92  -380.423\n  579 │   579    0.001   -3.56421        true    198    981.0             997       7      23       0        0              0          0.0     92  -374.767\n  580 │   580    0.001   -3.11655        true    201    976.0             981       8      13       0        0              0          0.0     92  -374.767\n  581 │   581    0.001   -3.66084        true    201    983.0             976      18      11       0        0              0          0.0     93  -373.352\n  582 │   582    0.001   -3.63341        true    201    983.0             983      13      13       0        0              0          0.0     93  -369.11\n  583 │   583    0.001   -3.68894        true    201    984.0             983      19      18       0        0              0          0.0     93  -371.938\n  584 │   584    0.001   -3.08057        true    197    977.0             984      12      19       0        0              0          0.0     93  -373.352\n  585 │   585    0.001   -2.54067        true    194    971.0             977      11      17       0        0              0          0.0     93  -370.524\n  586 │   586    0.001   -2.91269        true    193    976.0             971      12       7       0        0              0          0.0     93  -370.524\n  587 │   587    0.001   -3.20757        true    195    980.0             976      13       9       0        0              0          0.0     93  -374.767\n  588 │   588    0.001   -2.92506        true    193    977.0             980      16      19       0        0              0          0.0     94  -370.524\n  589 │   589    0.001   -4.04883        true    194    991.0             977      23       9       0        0              0          0.0     94  -374.767\n  590 │   590    0.001   -3.78697        true    194    988.0             991      11      14       0        0              0          0.0     95  -370.524\n  591 │   591    0.001   -4.09735        true    197    992.0             988      17      13       0        0              0          0.0     94  -376.181\n  592 │   592    0.001   -4.0022         true    196    991.0             992      14      15       0        0              0          0.0     94  -379.009\n  593 │   593    0.001   -3.32633        true    193    983.0             991       9      17       0        0              0          0.0     94  -373.352\n  594 │   594    0.001   -3.2989         true    194    983.0             983      15      15       0        0              0          0.0     94  -371.938\n  595 │   595    0.001   -3.02205        true    192    980.0             983      11      14       0        0              0          0.0     94  -371.938\n  596 │   596    0.001   -2.82302        true    191    978.0             980      10      12       0        0              0          0.0     95  -371.938\n  597 │   597    0.001   -2.78743        true    192    978.0             978      16      16       0        0              0          0.0     95  -370.524\n  598 │   598    0.001   -2.33359        true    191    973.0             978       9      14       0        0              0          0.0     94  -373.352\n  599 │   599    0.001   -2.95797        true    189    981.0             973      16       8       0        0              0          0.0     94  -376.181\n  600 │   600    0.001   -2.84405        true    189    980.0             981      15      16       0        0              0          0.0     95  -377.595\n  601 │   601    0.001   -2.97809        true    190    982.0             980       9       7       0        0              0          0.0     95  -381.838\n  602 │   602    0.001   -3.19793        true    190    985.0             982      18      15       0        0              0          0.0     96  -381.838\n  603 │   603    0.001   -3.4219         true    191    988.0             985      12       9       0        0              0          0.0     96  -380.423\n  604 │   604    0.001   -3.48513        true    190    989.0             988      12      11       0        0              0          0.0     96  -381.838\n  605 │   605    0.001   -3.5499         true    188    990.0             989      16      15       0        0              0          0.0     96  -384.666\n  606 │   606    0.001   -3.28617        true    189    987.0             990      13      16       0        0              0          0.0     95  -383.252\n  607 │   607    0.001   -3.18252        true    186    986.0             987      12      13       0        0              0          0.0     95  -388.909\n  608 │   608    0.001   -3.65501        true    185    992.0             986      16      10       0        0              0          0.0     94  -397.394\n  609 │   609    0.001   -3.72438        true    186    993.0             992      16      15       0        0              0          0.0     94  -397.394\n  610 │   610    0.001   -3.87732        true    187    995.0             993      15      13       0        0              0          0.0     95  -397.394\n  611 │   611    0.001   -3.8693         true    190    995.0             995      11      11       0        0              0          0.0     94  -395.98\n  612 │   612    0.001   -3.61488        true    189    992.0             995      14      17       0        0              0          0.0     93  -400.222\n  613 │   613    0.001   -3.1897         true    191    987.0             992      14      19       0        0              0          0.0     92  -400.222\n  614 │   614    0.001   -3.16876        true    190    987.0             987      15      15       0        0              0          0.0     93  -400.222\n  615 │   615    0.001   -3.80656        true    192    995.0             987      18      10       0        0              0          0.0     96  -394.566\n  616 │   616    0.001   -3.88051        true    191    996.0             995      15      14       0        0              0          0.0     96  -393.151\n  617 │   617    0.001   -3.87409        true    192    996.0             996      16      16       0        0              0          0.0     96  -388.909\n  618 │   618    0.001   -3.29216        true    190    989.0             996       9      16       0        0              0          0.0     96  -388.909\n  619 │   619    0.001   -3.10928        true    188    987.0             989      13      15       0        0              0          0.0     96  -390.323\n  620 │   620    0.001   -3.66503        true    189    994.0             987      12       5       0        0              0          0.0     96  -390.323\n  621 │   621    0.001   -3.73745        true    192    995.0             994      14      13       0        0              0          0.0     96  -393.151\n  622 │   622    0.001   -3.89328        true    192    997.0             995      12      10       0        0              0          0.0     96  -390.323\n  623 │   623    0.001   -4.052          true    194    999.0             997      16      14       0        0              0          0.0     96  -391.737\n  624 │   624    0.001   -3.96868        true    193    998.0             999      15      16       0        0              0          0.0     96  -395.98\n  625 │   625    0.001   -3.80179        true    190    996.0             998      14      16       0        0              0          0.0     97  -394.566\n  626 │   626    0.001   -3.95906        true    187    998.0             996      16      14       0        0              0          0.0     96  -388.909\n  627 │   627    0.001   -4.11922        true    186   1000.0             998      14      12       0        0              0          0.0     97  -388.909\n  628 │   628    0.001   -4.11922        true    186   1000.0            1000      10      10       0        0              0          0.0     96  -384.666\n  629 │   629    0.001   -4.11922        true    188   1000.0            1000      13      13       0        0              0          0.0     96  -381.838\n  630 │   630    0.001   -4.36366        true    190   1003.0            1000      17      14       0        0              0          0.0     95  -386.08\n  631 │   631    0.001   -4.36845        true    189   1003.0            1003      13      13       0        0              0          0.0     96  -386.08\n  632 │   632    0.001   -4.04717        true    190    999.0            1003       7      11       0        0              0          0.0     96  -384.666\n  633 │   633    0.001   -3.80015        true    189    996.0             999      12      15       0        0              0          0.0     97  -383.252\n  634 │   634    0.001   -3.71177        true    188    995.0             996      14      15       0        0              0          0.0     97  -387.495\n  635 │   635    0.001   -4.27581        true    188   1002.0             995      18      11       0        0              0          0.0     97  -390.323\n  636 │   636    0.001   -4.68518        true    187   1007.0            1002      15      10       0        0              0          0.0     97  -388.909\n  637 │   637    0.001   -3.96377        true    185    998.0            1007       7      16       0        0              0          0.0     96  -383.252\n  638 │   638    0.001   -3.87876        true    184    997.0             998      16      17       0        0              0          0.0     96  -380.423\n  639 │   639    0.001   -3.54591        true    186    993.0             997       9      13       0        0              0          0.0     96  -379.009\n  640 │   640    0.001   -3.94452        true    188    998.0             993      13       8       0        0              0          0.0     97  -377.595\n  641 │   641    0.001   -4.10468        true    188   1000.0             998      16      14       0        0              0          0.0     97  -380.423\n  642 │   642    0.001   -4.18624        true    188   1001.0            1000      14      13       0        0              0          0.0     97  -380.423\n  643 │   643    0.001   -4.75648        true    188   1008.0            1001      19      12       0        0              0          0.0     97  -381.838\n  644 │   644    0.001   -4.76923        true    191   1008.0            1008      12      12       0        0              0          0.0     97  -379.009\n  645 │   645    0.001   -4.53876        true    191   1005.0            1008       8      11       0        0              0          0.0     97  -377.595\n  646 │   646    0.001   -5.5153         true    192   1017.0            1005      22      10       0        0              0          0.0     97  -379.009\n  647 │   647    0.001   -5.38164        true    191   1015.0            1017      13      15       0        0              0          0.0     97  -376.181\n  648 │   648    0.001   -5.48582        true    189   1016.0            1015      13      12       0        0              0          0.0     97  -374.767\n  649 │   649    0.001   -5.35043        true    188   1014.0            1016      15      17       0        0              0          0.0     96  -373.352\n  650 │   650    0.001   -5.05014        true    189   1010.0            1014      12      16       0        0              0          0.0     95  -370.524\n  651 │   651    0.001   -5.38859        true    190   1014.0            1010      15      11       0        0              0          0.0     96  -373.352\n  652 │   652    0.001   -5.7321         true    189   1018.0            1014      17      13       0        0              0          0.0     97  -374.767\n  653 │   653    0.001   -5.11685        true    188   1010.0            1018      15      23       0        0              0          0.0     98  -373.352\n  654 │   654    0.001   -4.80896        true    188   1006.0            1010      15      19       0        0              0          0.0     97  -373.352\n  655 │   655    0.001   -5.14234        true    190   1010.0            1006      12       8       0        0              0          0.0     96  -370.524\n  656 │   656    0.001   -4.99652        true    187   1008.0            1010      17      19       0        0              0          0.0     98  -369.11\n  657 │   657    0.001   -5.89492        true    189   1019.0            1008      24      13       0        0              0          0.0     99  -371.938\n  658 │   658    0.001   -5.60409        true    189   1015.0            1019      12      16       0        0              0          0.0     99  -370.524\n  659 │   659    0.001   -5.86874        true    190   1018.0            1015      15      12       0        0              0          0.0     99  -370.524\n  660 │   660    0.001   -6.93273        true    195   1031.0            1018      23      10       0        0              0          0.0    100  -373.352\n  661 │   661    0.001   -6.10629        true    195   1020.0            1031       9      20       0        0              0          0.0    100  -369.11\n  662 │   662    0.001   -6.45734        true    193   1024.0            1020      18      14       0        0              0          0.0    102  -371.938\n  663 │   663    0.001   -6.33576        true    195   1022.0            1024      17      19       0        0              0          0.0    101  -369.11\n  664 │   664    0.001   -6.05058        true    195   1018.0            1022      13      17       0        0              0          0.0    100  -367.696\n  665 │   665    0.001   -5.75786        true    195   1014.0            1018      12      16       0        0              0          0.0    101  -367.696\n  666 │   666    0.001   -6.18148        true    198   1019.0            1014      19      14       0        0              0          0.0    102  -366.281\n  667 │   667    0.001   -5.72971        true    197   1013.0            1019      11      17       0        0              0          0.0    101  -364.867\n  668 │   668    0.001   -5.26562        true    196   1007.0            1013      11      17       0        0              0          0.0    101  -364.867\n  669 │   669    0.001   -4.70757        true    194   1000.0            1007       9      16       0        0              0          0.0    102  -367.696\n  670 │   670    0.001   -4.13436        true    193    993.0            1000      11      18       0        0              0          0.0    101  -362.039\n  671 │   671    0.001   -3.87622        true    191    990.0             993      12      15       0        0              0          0.0    101  -364.867\n  672 │   672    0.001   -4.02483        true    190    992.0             990      12      10       0        0              0          0.0    100  -363.453\n  673 │   673    0.001   -4.50404        true    190    998.0             992      13       7       0        0              0          0.0     99  -362.039\n  674 │   674    0.001   -4.82723        true    190   1002.0             998      16      12       0        0              0          0.0     98  -364.867\n  675 │   675    0.001   -5.15553        true    191   1006.0            1002      16      12       0        0              0          0.0     98  -363.453\n  676 │   676    0.001   -5.48891        true    189   1010.0            1006      19      15       0        0              0          0.0     98  -366.281\n  677 │   677    0.001   -5.424          true    190   1009.0            1010      14      15       0        0              0          0.0     98  -364.867\n  678 │   678    0.001   -5.35742        true    191   1008.0            1009      16      17       0        0              0          0.0     97  -363.453\n  679 │   679    0.001   -5.61267        true    191   1011.0            1008      17      14       0        0              0          0.0     96  -363.453\n  680 │   680    0.001   -6.35337        true    193   1020.0            1011      21      12       0        0              0          0.0     95  -364.867\n  681 │   681    0.001   -6.70443        true    195   1024.0            1020      14      10       0        0              0          0.0     95  -363.453\n  682 │   682    0.001   -6.02201        true    194   1015.0            1024      12      21       0        0              0          0.0     96  -363.453\n  683 │   683    0.001   -5.88489        true    194   1013.0            1015      17      19       0        0              0          0.0     95  -362.039\n  684 │   684    0.001   -5.09602        true    193   1003.0            1013      11      21       0        0              0          0.0     96  -360.624\n  685 │   685    0.001   -5.10082        true    191   1003.0            1003      15      15       0        0              0          0.0     97  -363.453\n  686 │   686    0.001   -5.02421        true    189   1002.0            1003      11      12       0        0              0          0.0     97  -366.281\n  687 │   687    0.001   -4.53732        true    191    996.0            1002      10      16       0        0              0          0.0     96  -364.867\n  688 │   688    0.001   -4.6946         true    191    998.0             996      11       9       0        0              0          0.0     96  -366.281\n  689 │   689    0.001   -5.26174        true    193   1005.0             998      23      16       0        0              0          0.0     96  -367.696\n  690 │   690    0.001   -5.10717        true    193   1003.0            1005      13      15       0        0              0          0.0     98  -362.039\n  691 │   691    0.001   -5.11196        true    193   1003.0            1003      14      14       0        0              0          0.0     98  -362.039\n  692 │   692    0.001   -5.44153        true    195   1007.0            1003      15      11       0        0              0          0.0     98  -369.11\n  693 │   693    0.001   -5.37162        true    196   1006.0            1007       9      10       0        0              0          0.0     98  -369.11\n  694 │   694    0.001   -5.38119        true    195   1006.0            1006      15      15       0        0              0          0.0     97  -370.524\n  695 │   695    0.001   -5.55283        true    191   1008.0            1006      16      14       0        0              0          0.0     96  -369.11\n  696 │   696    0.001   -5.80808        true    192   1011.0            1008      15      12       0        0              0          0.0     97  -366.281\n  697 │   697    0.001   -6.22815        true    193   1016.0            1011      19      14       0        0              0          0.0     96  -366.281\n  698 │   698    0.001   -6.41401        true    194   1018.0            1016      15      13       0        0              0          0.0     96  -364.867\n  699 │   699    0.001   -6.28209        true    196   1016.0            1018      16      18       0        0              0          0.0     96  -367.696\n  700 │   700    0.001   -6.54807        true    195   1019.0            1016      18      15       0        0              0          0.0     96  -369.11\n  701 │   701    0.001   -6.0963         true    195   1013.0            1019      12      18       0        0              0          0.0     95  -363.453\n  702 │   702    0.001   -4.89964        true    195    998.0            1013       8      23       0        0              0          0.0     94  -363.453\n  703 │   703    0.001   -4.40437        true    195    992.0             998       8      14       0        0              0          0.0     93  -359.21\n  704 │   704    0.001   -5.04694        true    196   1000.0             992      20      12       0        0              0          0.0     92  -362.039\n  705 │   705    0.001   -5.85889        true    195   1010.0            1000      19       9       0        0              0          0.0     92  -364.867\n  706 │   706    0.001   -5.71307        true    197   1008.0            1010      15      17       0        0              0          0.0     91  -364.867\n  707 │   707    0.001   -5.23865        true    195   1002.0            1008       8      14       0        0              0          0.0     91  -363.453\n  708 │   708    0.001   -5.07881        true    195   1000.0            1002      14      16       0        0              0          0.0     90  -366.281\n  709 │   709    0.001   -5.24185        true    193   1002.0            1000      14      12       0        0              0          0.0     91  -371.938\n  710 │   710    0.001   -5.00037        true    190    999.0            1002      12      15       0        0              0          0.0     90  -373.352\n  711 │   711    0.001   -5.08041        true    192   1000.0             999      14      13       0        0              0          0.0     90  -370.524\n  712 │   712    0.001   -5.08041        true    191   1000.0            1000      14      14       0        0              0          0.0     89  -370.524\n  713 │   713    0.001   -4.42498        true    192    992.0            1000       9      17       0        0              0          0.0     89  -364.867\n  714 │   714    0.001   -3.7514         true    193    984.0             992       9      17       0        0              0          0.0     89  -363.453\n  715 │   715    0.001   -3.97399        true    195    987.0             984      22      19       0        0              0          0.0     90  -367.696\n  716 │   716    0.001   -4.77564        true    194    997.0             987      21      11       0        0              0          0.0     92  -370.524\n  717 │   717    0.001   -4.93436        true    195    999.0             997      17      15       0        0              0          0.0     92  -370.524\n  718 │   718    0.001   -5.58361        true    195   1007.0             999      24      16       0        0              0          0.0     93  -369.11\n  719 │   719    0.001   -4.7804         true    192    997.0            1007       9      19       0        0              0          0.0     93  -363.453\n  720 │   720    0.001   -5.02076        true    191   1000.0             997      16      13       0        0              0          0.0     93  -366.281\n  721 │   721    0.001   -5.02076        true    191   1000.0            1000      12      12       0        0              0          0.0     93  -364.867\n  722 │   722    0.001   -4.93912        true    193    999.0            1000      11      12       0        0              0          0.0     94  -363.453\n  723 │   723    0.001   -5.18219        true    190   1002.0             999      20      17       0        0              0          0.0     94  -362.039\n  724 │   724    0.001   -5.10391        true    190   1001.0            1002      16      17       0        0              0          0.0     93  -364.867\n  725 │   725    0.001   -5.26839        true    189   1003.0            1001      17      15       0        0              0          0.0     92  -367.696\n  726 │   726    0.001   -5.84069        true    190   1010.0            1003      17      10       0        0              0          0.0     92  -371.938\n  727 │   727    0.001   -5.04467        true    188   1000.0            1010      13      23       0        0              0          0.0     91  -369.11\n  728 │   728    0.001   -5.69487        true    188   1008.0            1000      17       9       0        0              0          0.0     90  -373.352\n  729 │   729    0.001   -5.22045        true    186   1002.0            1008       9      15       0        0              0          0.0     89  -369.11\n  730 │   730    0.001   -4.65159        true    186    995.0            1002       8      15       0        0              0          0.0     90  -364.867\n  731 │   731    0.001   -4.97095        true    185    999.0             995      15      11       0        0              0          0.0     91  -363.453\n  732 │   732    0.001   -4.80582        true    188    997.0             999      20      22       0        0              0          0.0     91  -366.281\n  733 │   733    0.001   -5.12774        true    190   1001.0             997      15      11       0        0              0          0.0     91  -366.281\n  734 │   734    0.001   -5.53592        true    192   1006.0            1001      14       9       0        0              0          0.0     91  -363.453\n  735 │   735    0.001   -4.56628        true    190    994.0            1006       8      20       0        0              0          0.0     91  -359.21\n  736 │   736    0.001   -4.80256        true    190    997.0             994      14      11       0        0              0          0.0     91  -360.624\n  737 │   737    0.001   -4.96128        true    190    999.0             997      14      12       0        0              0          0.0     91  -362.039\n  738 │   738    0.001   -4.87795        true    191    998.0             999      12      13       0        0              0          0.0     90  -357.796\n  739 │   739    0.001   -4.87475        true    194    998.0             998      15      15       0        0              0          0.0     89  -354.968\n  740 │   740    0.001   -5.03491        true    194   1000.0             998      15      13       0        0              0          0.0     89  -357.796\n  741 │   741    0.001   -5.03491        true    195   1000.0            1000      14      14       0        0              0          0.0     89  -360.624\n  742 │   742    0.001   -5.03491        true    195   1000.0            1000      17      17       0        0              0          0.0     89  -364.867\n  743 │   743    0.001   -5.44189        true    193   1005.0            1000      22      17       0        0              0          0.0     90  -373.352\n  744 │   744    0.001   -5.28733        true    194   1003.0            1005      11      13       0        0              0          0.0     90  -370.524\n  745 │   745    0.001   -4.72063        true    192    996.0            1003       9      16       0        0              0          0.0     90  -370.524\n  746 │   746    0.001   -3.97352        true    190    987.0             996       9      18       0        0              0          0.0     90  -369.11\n  747 │   747    0.001   -3.45502        true    189    981.0             987       9      15       0        0              0          0.0     90  -367.696\n  748 │   748    0.001   -4.41643        true    193    993.0             981      26      14       0        0              0          0.0     90  -367.696\n  749 │   749    0.001   -3.91065        true    189    987.0             993      13      19       0        0              0          0.0     90  -367.696\n  750 │   750    0.001   -4.13736        true    189    990.0             987      14      11       0        0              0          0.0     91  -367.696\n  751 │   751    0.001   -4.20366        true    188    991.0             990      13      12       0        0              0          0.0     91  -373.352\n  752 │   752    0.001   -4.02435        true    187    989.0             991       9      11       0        0              0          0.0     90  -373.352\n  753 │   753    0.001   -3.67595        true    186    985.0             989      13      17       0        0              0          0.0     91  -373.352\n  754 │   754    0.001   -3.15319        true    185    979.0             985       8      14       0        0              0          0.0     91  -367.696\n  755 │   755    0.001   -3.70061        true    186    986.0             979      17      10       0        0              0          0.0     91  -370.524\n  756 │   756    0.001   -4.50147        true    185    996.0             986      20      10       0        0              0          0.0     91  -379.009\n  757 │   757    0.001   -4.2489         true    184    993.0             996       9      12       0        0              0          0.0     91  -379.009\n  758 │   758    0.001   -4.72923        true    188    999.0             993      21      15       0        0              0          0.0     92  -384.666\n  759 │   759    0.001   -4.97231        true    188   1002.0             999      15      12       0        0              0          0.0     91  -386.08\n  760 │   760    0.001   -5.30061        true    187   1006.0            1002      16      12       0        0              0          0.0     90  -386.08\n  761 │   761    0.001   -4.57687        true    185    997.0            1006      14      23       0        0              0          0.0     89  -377.595\n  762 │   762    0.001   -4.24402        true    187    993.0             997      14      18       0        0              0          0.0     89  -370.524\n  763 │   763    0.001   -4.47894        true    188    996.0             993      17      14       0        0              0          0.0     90  -370.524\n  764 │   764    0.001   -4.39056        true    191    995.0             996      14      15       0        0              0          0.0     90  -369.11\n  765 │   765    0.001   -3.72381        true    190    987.0             995      13      21       0        0              0          0.0     89  -373.352\n  766 │   766    0.001   -3.3715         true    190    983.0             987      11      15       0        0              0          0.0     88  -371.938\n  767 │   767    0.001   -3.50992        true    188    985.0             983      12      10       0        0              0          0.0     88  -374.767\n  768 │   768    0.001   -3.07047        true    189    980.0             985      12      17       0        0              0          0.0     88  -371.938\n  769 │   769    0.001   -2.53702        true    188    974.0             980       6      12       0        0              0          0.0     88  -371.938\n  770 │   770    0.001   -2.91269        true    188    979.0             974      12       7       0        0              0          0.0     89  -374.767\n  771 │   771    0.001   -3.04526        true    189    981.0             979      16      14       0        0              0          0.0     89  -373.352\n  772 │   772    0.001   -2.84804        true    189    979.0             981      14      16       0        0              0          0.0     88  -371.938\n  773 │   773    0.001   -3.47817        true    191    987.0             979      22      14       0        0              0          0.0     88  -373.352\n  774 │   774    0.001   -3.45723        true    191    987.0             987      11      11       0        0              0          0.0     90  -371.938\n  775 │   775    0.001   -3.76633        true    193    991.0             987      13       9       0        0              0          0.0     89  -374.767\n  776 │   776    0.001   -3.99851        true    195    994.0             991      14      11       0        0              0          0.0     89  -370.524\n  777 │   777    0.001   -3.98888        true    194    994.0             994      17      17       0        0              0          0.0     89  -369.11\n  778 │   778    0.001   -4.30697        true    195    998.0             994      17      13       0        0              0          0.0     88  -364.867\n  779 │   779    0.001   -4.54869        true    196   1001.0             998      11       8       0        0              0          0.0     89  -366.281\n  780 │   780    0.001   -4.46873        true    200   1000.0            1001      15      16       0        0              0          0.0     89  -363.453\n  781 │   781    0.001   -4.30536        true    197    998.0            1000      13      15       0        0              0          0.0     89  -362.039\n  782 │   782    0.001   -4.38388        true    198    999.0             998       9       8       0        0              0          0.0     88  -362.039\n  783 │   783    0.001   -4.54548        true    199   1001.0             999      14      12       0        0              0          0.0     88  -362.039\n  784 │   784    0.001   -3.97445        true    196    994.0            1001      10      17       0        0              0          0.0     89  -359.21\n  785 │   785    0.001   -4.53745        true    197   1001.0             994      20      13       0        0              0          0.0     90  -359.21\n  786 │   786    0.001   -4.53905        true    196   1001.0            1001      12      12       0        0              0          0.0     91  -357.796\n  787 │   787    0.001   -4.78484        true    198   1004.0            1001      13      10       0        0              0          0.0     91  -359.21\n  788 │   788    0.001   -5.19659        true    198   1009.0            1004      18      13       0        0              0          0.0     92  -359.21\n  789 │   789    0.001   -5.21093        true    201   1009.0            1009      18      18       0        0              0          0.0     92  -363.453\n  790 │   790    0.001   -5.22526        true    203   1009.0            1009      13      13       0        0              0          0.0     92  -357.796\n  791 │   791    0.001   -5.15869        true    203   1008.0            1009      18      19       0        0              0          0.0     91  -359.21\n  792 │   792    0.001   -4.35787        true    202    998.0            1008      13      23       0        0              0          0.0     90  -359.21\n  793 │   793    0.001   -4.35467        true    202    998.0             998      14      14       0        0              0          0.0     91  -357.796\n  794 │   794    0.001   -3.61225        true    201    989.0             998       5      14       0        0              0          0.0     90  -354.968\n  795 │   795    0.001   -3.42937        true    201    987.0             989      13      15       0        0              0          0.0     90  -354.968\n  796 │   796    0.001   -3.40844        true    200    987.0             987      14      14       0        0              0          0.0     89  -359.21\n  797 │   797    0.001   -3.05613        true    200    983.0             987      13      17       0        0              0          0.0     88  -356.382\n  798 │   798    0.001   -3.0287         true    201    983.0             983      10      10       0        0              0          0.0     88  -353.553\n  799 │   799    0.001   -3.33263        true    202    987.0             983      12       8       0        0              0          0.0     88  -356.382\n  800 │   800    0.001   -3.22898        true    202    986.0             987      11      12       0        0              0          0.0     89  -356.382\n  801 │   801    0.001   -3.37177        true    198    988.0             986      14      12       0        0              0          0.0     89  -356.382\n  802 │   802    0.001   -3.02142        true    200    984.0             988       8      12       0        0              0          0.0     88  -356.382\n  803 │   803    0.001   -3.0785         true    201    985.0             984      13      12       0        0              0          0.0     89  -357.796\n  804 │   804    0.001   -3.13712        true    201    986.0             985       9       8       0        0              0          0.0     89  -362.039\n  805 │   805    0.001   -2.86591        true    200    983.0             986      13      16       0        0              0          0.0     90  -356.382\n  806 │   806    0.001   -2.83847        true    201    983.0             983       9       9       0        0              0          0.0     90  -356.382\n  807 │   807    0.001   -2.89401        true    199    984.0             983      10       9       0        0              0          0.0     90  -356.382\n  808 │   808    0.001   -2.20207        true    197    976.0             984       8      16       0        0              0          0.0     90  -356.382\n  809 │   809    0.001   -1.912          true    198    973.0             976      10      13       0        0              0          0.0     89  -357.796\n  810 │   810    0.001   -1.95203        true    196    974.0             973      14      13       0        0              0          0.0     89  -357.796\n  811 │   811    0.001   -1.99361        true    198    975.0             974      11      10       0        0              0          0.0     89  -354.968\n  812 │   812    0.001   -2.12032        true    197    977.0             975      16      14       0        0              0          0.0     89  -359.21\n  813 │   813    0.001   -2.49963        true    198    982.0             977      15      10       0        0              0          0.0     89  -357.796\n  814 │   814    0.001   -1.88681        true    199    975.0             982      10      17       0        0              0          0.0     88  -357.796\n  815 │   815    0.001   -1.51084        true    199    971.0             975       9      13       0        0              0          0.0     88  -350.725\n  816 │   816    0.001   -1.71548        true    198    974.0             971      12       9       0        0              0          0.0     88  -350.725\n  817 │   817    0.001   -1.33753        true    200    970.0             974       9      13       0        0              0          0.0     88  -349.311\n  818 │   818    0.001   -2.29208        true    201    982.0             970      19       7       0        0              0          0.0     89  -356.382\n  819 │   819    0.001   -2.42904        true    201    984.0             982      17      15       0        0              0          0.0     89  -356.382\n  820 │   820    0.001   -2.98167        true    202    991.0             984      15       8       0        0              0          0.0     89  -359.21\n  821 │   821    0.001   -3.94936        true    208   1003.0             991      19       7       0        0              0          0.0     88  -364.867\n  822 │   822    0.001   -4.35993        true    204   1008.0            1003      15      10       0        0              0          0.0     90  -363.453\n  823 │   823    0.001   -4.04822        true    203   1004.0            1008       8      12       0        0              0          0.0     89  -369.11\n  824 │   824    0.001   -4.70223        true    205   1012.0            1004      20      12       0        0              0          0.0     90  -369.11\n  825 │   825    0.001   -4.55989        true    205   1010.0            1012      11      13       0        0              0          0.0     90  -367.696\n  826 │   826    0.001   -4.57581        true    203   1010.0            1010      11      11       0        0              0          0.0     90  -366.281\n  827 │   827    0.001   -4.26792        true    203   1006.0            1010       8      12       0        0              0          0.0     90  -366.281\n  828 │   828    0.001   -4.35857        true    204   1007.0            1006      15      14       0        0              0          0.0     91  -366.281\n  829 │   829    0.001   -4.45072        true    205   1008.0            1007      13      12       0        0              0          0.0     91  -366.281\n  830 │   830    0.001   -4.46347        true    205   1008.0            1008      15      15       0        0              0          0.0     91  -362.039\n  831 │   831    0.001   -5.28175        true    208   1018.0            1008      20      10       0        0              0          0.0     92  -359.21\n  832 │   832    0.001   -5.2301         true    209   1017.0            1018      14      15       0        0              0          0.0     91  -359.21\n  833 │   833    0.001   -5.8168         true    209   1024.0            1017      16       9       0        0              0          0.0     91  -363.453\n  834 │   834    0.001   -5.61533        true    205   1021.0            1024      15      18       0        0              0          0.0     92  -362.039\n  835 │   835    0.001   -5.56862        true    204   1020.0            1021      10      11       0        0              0          0.0     92  -357.796\n  836 │   836    0.001   -5.60031        true    205   1020.0            1020      15      15       0        0              0          0.0     93  -356.382\n  837 │   837    0.001   -6.03102        true    208   1025.0            1020      17      12       0        0              0          0.0     93  -354.968\n  838 │   838    0.001   -6.309          true    209   1028.0            1025      13      10       0        0              0          0.0     93  -352.139\n  839 │   839    0.001   -5.87553        true    210   1022.0            1028      11      17       0        0              0          0.0     92  -353.553\n  840 │   840    0.001   -5.83046        true    213   1021.0            1022       9      10       0        0              0          0.0     92  -352.139\n  841 │   841    0.001   -6.26235        true    210   1026.0            1021      20      15       0        0              0          0.0     92  -354.968\n  842 │   842    0.001   -5.90478        true    212   1021.0            1026      12      17       0        0              0          0.0     92  -354.968\n  843 │   843    0.001   -5.69792        true    212   1018.0            1021      12      15       0        0              0          0.0     92  -352.139\n  844 │   844    0.001   -5.2441         true    210   1012.0            1018       8      14       0        0              0          0.0     91  -350.725\n  845 │   845    0.001   -5.10176        true    208   1010.0            1012      12      14       0        0              0          0.0     91  -349.311\n  846 │   846    0.001   -5.11768        true    207   1010.0            1010      12      12       0        0              0          0.0     91  -349.311\n  847 │   847    0.001   -5.29502        true    209   1012.0            1010      13      11       0        0              0          0.0     91  -347.897\n  848 │   848    0.001   -5.636          true    211   1016.0            1012      16      12       0        0              0          0.0     90  -350.725\n  849 │   849    0.001   -5.90199        true    216   1019.0            1016      23      20       0        0              0          0.0     90  -350.725\n  850 │   850    0.001   -5.28895        true    212   1011.0            1019      13      21       0        0              0          0.0     90  -347.897\n  851 │   851    0.001   -5.38713        true    213   1012.0            1011      14      13       0        0              0          0.0     89  -347.897\n  852 │   852    0.001   -5.56732        true    212   1014.0            1012      13      11       0        0              0          0.0     88  -350.725\n  853 │   853    0.001   -5.50905        true    209   1013.0            1014      17      18       0        0              0          0.0     88  -346.482\n  854 │   854    0.001   -6.01161        true    208   1019.0            1013      21      15       0        0              0          0.0     87  -353.553\n  855 │   855    0.001   -5.72078        true    208   1015.0            1019      12      16       0        0              0          0.0     88  -353.553\n  856 │   856    0.001   -6.06554        true    208   1019.0            1015      17      13       0        0              0          0.0     89  -354.968\n  857 │   857    0.001   -6.1757         true    208   1020.0            1019      15      14       0        0              0          0.0     88  -359.21\n  858 │   858    0.001   -6.28734        true    209   1021.0            1020      14      13       0        0              0          0.0     89  -360.624\n  859 │   859    0.001   -7.43189        true    210   1035.0            1021      23       9       0        0              0          0.0     89  -364.867\n  860 │   860    0.001   -7.3291         true    208   1033.0            1035      17      19       0        0              0          0.0     90  -357.796\n  861 │   861    0.001   -6.74665        true    206   1025.0            1033      14      22       0        0              0          0.0     89  -354.968\n  862 │   862    0.001   -7.18323        true    212   1030.0            1025      20      15       0        0              0          0.0     89  -349.311\n  863 │   863    0.001   -7.07193        true    215   1028.0            1030      16      18       0        0              0          0.0     89  -346.482\n  864 │   864    0.001   -6.71826        true    216   1023.0            1028      12      17       0        0              0          0.0     90  -349.311\n  865 │   865    0.001   -5.95306        true    215   1013.0            1023      14      24       0        0              0          0.0     90  -345.068\n  866 │   866    0.001   -6.05424        true    217   1014.0            1013      16      15       0        0              0          0.0     90  -342.24\n  867 │   867    0.001   -6.47786        true    216   1019.0            1014      14       9       0        0              0          0.0     91  -345.068\n  868 │   868    0.001   -6.18703        true    220   1015.0            1019      12      16       0        0              0          0.0     91  -342.24\n  869 │   869    0.001   -6.37149        true    217   1017.0            1015      18      16       0        0              0          0.0     90  -337.997\n  870 │   870    0.001   -6.23783        true    217   1015.0            1017      16      18       0        0              0          0.0     90  -330.926\n  871 │   871    0.001   -6.42228        true    217   1017.0            1015      15      13       0        0              0          0.0     89  -329.512\n  872 │   872    0.001   -6.52945        true    216   1018.0            1017      15      14       0        0              0          0.0     89  -329.512\n  873 │   873    0.001   -6.55799        true    216   1018.0            1018      17      17       0        0              0          0.0     89  -323.855\n  874 │   874    0.001   -6.98634        true    216   1023.0            1018      14       9       0        0              0          0.0     89  -330.926\n  875 │   875    0.001   -6.54272        true    215   1017.0            1023      13      19       0        0              0          0.0     89  -328.098\n  876 │   876    0.001   -6.56969        true    215   1017.0            1017       9       9       0        0              0          0.0     88  -328.098\n  877 │   877    0.001   -5.54687        true    213   1004.0            1017       9      22       0        0              0          0.0     88  -326.683\n  878 │   878    0.001   -5.22751        true    212   1000.0            1004      12      16       0        0              0          0.0     88  -323.855\n  879 │   879    0.001   -4.4074         true    211    990.0            1000      16      26       0        0              0          0.0     88  -323.855\n  880 │   880    0.001   -4.4737         true    210    991.0             990      10       9       0        0              0          0.0     88  -325.269\n  881 │   881    0.001   -4.21184        true    210    988.0             991      10      13       0        0              0          0.0     88  -325.269\n  882 │   882    0.001   -4.60444        true    210    993.0             988      12       7       0        0              0          0.0     88  -326.683\n  883 │   883    0.001   -4.92124        true    209    997.0             993      17      13       0        0              0          0.0     89  -328.098\n  884 │   884    0.001   -5.64974        true    209   1006.0             997      19      10       0        0              0          0.0     89  -329.512\n  885 │   885    0.001   -5.82138        true    210   1008.0            1006      12      10       0        0              0          0.0     90  -330.926\n  886 │   886    0.001   -5.99587        true    212   1010.0            1008      13      11       0        0              0          0.0     90  -333.754\n  887 │   887    0.001   -5.2814         true    210   1001.0            1010      11      20       0        0              0          0.0     91  -330.926\n  888 │   888    0.001   -4.62823        true    209    993.0            1001      13      21       0        0              0          0.0     90  -330.926\n  889 │   889    0.001   -4.94503        true    211    997.0             993      14      10       0        0              0          0.0     90  -336.583\n  890 │   890    0.001   -4.28282        true    208    989.0             997       8      16       0        0              0          0.0     89  -337.997\n  891 │   891    0.001   -4.84064        true    209    996.0             989      19      12       0        0              0          0.0     90  -342.24\n  892 │   892    0.001   -4.17616        true    206    988.0             996      10      18       0        0              0          0.0     90  -340.825\n  893 │   893    0.001   -4.2394         true    206    989.0             988      14      13       0        0              0          0.0     90  -339.411\n  894 │   894    0.001   -4.79722        true    206    996.0             989      19      12       0        0              0          0.0     91  -340.825\n  895 │   895    0.001   -4.38013        true    203    991.0             996      15      20       0        0              0          0.0     91  -337.997\n  896 │   896    0.001   -3.70427        true    202    983.0             991       8      16       0        0              0          0.0     91  -337.997\n  897 │   897    0.001   -3.51064        true    198    981.0             983      12      14       0        0              0          0.0     93  -336.583\n  898 │   898    0.001   -3.31342        true    196    979.0             981      12      14       0        0              0          0.0     93  -335.169\n  899 │   899    0.001   -3.52913        true    198    982.0             979      13      10       0        0              0          0.0     94  -337.997\n  900 │   900    0.001   -4.32682        true    200    992.0             982      19       9       0        0              0          0.0     94  -340.825\n  901 │   901    0.001   -3.90164        true    201    987.0             992      11      16       0        0              0          0.0     93  -337.997\n  902 │   902    0.001   -3.79799        true    200    986.0             987      14      15       0        0              0          0.0     93  -337.997\n  903 │   903    0.001   -4.27048        true    200    992.0             986      16      10       0        0              0          0.0     94  -343.654\n  904 │   904    0.001   -4.42197        true    197    994.0             992      12      10       0        0              0          0.0     94  -343.654\n  905 │   905    0.001   -5.14785        true    199   1003.0             994      19      10       0        0              0          0.0     95  -349.311\n  906 │   906    0.001   -5.15265        true    199   1003.0            1003      13      13       0        0              0          0.0     96  -350.725\n  907 │   907    0.001   -4.42193        true    196    994.0            1003      12      21       0        0              0          0.0     96  -352.139\n  908 │   908    0.001   -4.49435        true    198    995.0             994      16      15       0        0              0          0.0     95  -352.139\n  909 │   909    0.001   -5.05839        true    198   1002.0             995      14       7       0        0              0          0.0     94  -354.968\n  910 │   910    0.001   -5.30554        true    199   1005.0            1002      11       8       0        0              0          0.0     94  -353.553\n  911 │   911    0.001   -5.71848        true    198   1010.0            1005      14       9       0        0              0          0.0     94  -359.21\n  912 │   912    0.001   -6.21772        true    200   1016.0            1010      18      12       0        0              0          0.0     93  -360.624\n  913 │   913    0.001   -6.00182        true    199   1013.0            1016      13      16       0        0              0          0.0     92  -360.624\n  914 │   914    0.001   -5.86122        true    198   1011.0            1013      13      15       0        0              0          0.0     91  -357.796\n  915 │   915    0.001   -6.03999        true    197   1013.0            1011      13      11       0        0              0          0.0     92  -360.624\n  916 │   916    0.001   -5.98006        true    198   1012.0            1013      17      18       0        0              0          0.0     91  -360.624\n  917 │   917    0.001   -6.16025        true    200   1014.0            1012      19      17       0        0              0          0.0     91  -357.796\n  918 │   918    0.001   -6.50376        true    200   1018.0            1014      14      10       0        0              0          0.0     91  -356.382\n  919 │   919    0.001   -6.21104        true    199   1014.0            1018       9      13       0        0              0          0.0     90  -356.382\n  920 │   920    0.001   -6.7147         true    200   1020.0            1014      20      14       0        0              0          0.0     89  -357.796\n  921 │   921    0.001   -5.6997         true    198   1007.0            1020      11      24       0        0              0          0.0     91  -349.311\n  922 │   922    0.001   -6.03435        true    201   1011.0            1007      15      11       0        0              0          0.0     90  -350.725\n  923 │   923    0.001   -5.32219        true    198   1002.0            1011       9      18       0        0              0          0.0     89  -349.311\n  924 │   924    0.001   -5.4881         true    198   1004.0            1002      15      13       0        0              0          0.0     89  -350.725\n  925 │   925    0.001   -5.73795        true    197   1007.0            1004      15      12       0        0              0          0.0     89  -350.725\n  926 │   926    0.001   -6.0726         true    199   1011.0            1007      18      14       0        0              0          0.0     88  -349.311\n  927 │   927    0.001   -5.92852        true    202   1009.0            1011      14      16       0        0              0          0.0     88  -347.897\n  928 │   928    0.001   -5.53749        true    203   1004.0            1009      12      17       0        0              0          0.0     87  -343.654\n  929 │   929    0.001   -5.54388        true    202   1004.0            1004      15      15       0        0              0          0.0     87  -345.068\n  930 │   930    0.001   -4.89746        true    201    996.0            1004      12      20       0        0              0          0.0     86  -337.997\n  931 │   931    0.001   -4.56268        true    202    992.0             996      13      17       0        0              0          0.0     87  -333.754\n  932 │   932    0.001   -4.13749        true    205    987.0             992      14      19       0        0              0          0.0     86  -335.169\n  933 │   933    0.001   -4.28174        true    204    989.0             987      13      11       0        0              0          0.0     85  -336.583\n  934 │   934    0.001   -4.26404        true    203    989.0             989      17      17       0        0              0          0.0     85  -333.754\n  935 │   935    0.001   -4.32881        true    203    990.0             989      12      11       0        0              0          0.0     84  -330.926\n  936 │   936    0.001   -4.55963        true    204    993.0             990      16      13       0        0              0          0.0     86  -328.098\n  937 │   937    0.001   -4.13648        true    204    988.0             993      13      18       0        0              0          0.0     86  -326.683\n  938 │   938    0.001   -4.11716        true    199    988.0             988      17      17       0        0              0          0.0     86  -329.512\n  939 │   939    0.001   -4.18039        true    200    989.0             988      14      13       0        0              0          0.0     87  -330.926\n  940 │   940    0.001   -4.32754        true    201    991.0             989      17      15       0        0              0          0.0     87  -328.098\n  941 │   941    0.001   -4.06568        true    203    988.0             991       5       8       0        0              0          0.0     87  -326.683\n  942 │   942    0.001   -3.88102        true    203    986.0             988      11      13       0        0              0          0.0     87  -325.269\n  943 │   943    0.001   -3.69277        true    204    984.0             986      10      12       0        0              0          0.0     87  -325.269\n  944 │   944    0.001   -3.74985        true    204    985.0             984      13      12       0        0              0          0.0     87  -329.512\n  945 │   945    0.001   -3.72567        true    206    985.0             985      12      12       0        0              0          0.0     87  -328.098\n  946 │   946    0.001   -3.867          true    202    987.0             985      12      10       0        0              0          0.0     87  -333.754\n  947 │   947    0.001   -3.76335        true    202    986.0             987      13      14       0        0              0          0.0     88  -329.512\n  948 │   948    0.001   -3.49214        true    201    983.0             986       9      12       0        0              0          0.0     89  -330.926\n  949 │   949    0.001   -3.54767        true    201    984.0             983      14      13       0        0              0          0.0     89  -333.754\n  950 │   950    0.001   -4.26481        true    201    993.0             984      18       9       0        0              0          0.0     88  -333.754\n  951 │   951    0.001   -4.74514        true    203    999.0             993      16      10       0        0              0          0.0     88  -336.583\n  952 │   952    0.001   -3.67471        true    202    986.0             999      10      23       0        0              0          0.0     88  -333.754\n  953 │   953    0.001   -3.48647        true    202    984.0             986      16      18       0        0              0          0.0     88  -332.34\n  954 │   954    0.001   -4.28574        true    204    994.0             984      19       9       0        0              0          0.0     88  -335.169\n  955 │   955    0.001   -4.44013        true    206    996.0             994      14      12       0        0              0          0.0     89  -336.583\n  956 │   956    0.001   -4.51561        true    205    997.0             996      18      17       0        0              0          0.0     89  -333.754\n  957 │   957    0.001   -3.77085        true    202    988.0             997      14      23       0        0              0          0.0     89  -335.169\n  958 │   958    0.001   -3.50338        true    203    985.0             988      12      15       0        0              0          0.0     89  -333.754\n  959 │   959    0.001   -3.23029        true    203    982.0             985      10      13       0        0              0          0.0     89  -337.997\n  960 │   960    0.001   -3.03487        true    203    980.0             982      14      16       0        0              0          0.0     89  -333.754\n  961 │   961    0.001   -3.41781        true    208    985.0             980      18      13       0        0              0          0.0     89  -332.34\n  962 │   962    0.001   -3.14472        true    209    982.0             985       9      12       0        0              0          0.0     89  -329.512\n  963 │   963    0.001   -3.36457        true    209    985.0             982      15      12       0        0              0          0.0     89  -326.683\n  964 │   964    0.001   -3.5059         true    206    987.0             985      16      14       0        0              0          0.0     88  -329.512\n  965 │   965    0.001   -3.65015        true    206    989.0             987      15      13       0        0              0          0.0     90  -326.683\n  966 │   966    0.001   -4.37166        true    205    998.0             989      16       7       0        0              0          0.0     90  -328.098\n  967 │   967    0.001   -4.85757        true    206   1004.0             998      18      12       0        0              0          0.0     90  -332.34\n  968 │   968    0.001   -4.37484        true    207    998.0            1004      12      18       0        0              0          0.0     89  -330.926\n  969 │   969    0.001   -4.04393        true    203    994.0             998      10      14       0        0              0          0.0     90  -332.34\n  970 │   970    0.001   -3.54025        true    204    988.0             994       6      12       0        0              0          0.0     90  -332.34\n  971 │   971    0.001   -3.10693        true    204    983.0             988       9      14       0        0              0          0.0     89  -336.583\n  972 │   972    0.001   -2.91331        true    207    981.0             983      14      16       0        0              0          0.0     89  -332.34\n  973 │   973    0.001   -2.04654        true    206    971.0             981       6      16       0        0              0          0.0     89  -330.926\n  974 │   974    0.001   -1.91538        true    205    970.0             971      11      12       0        0              0          0.0     90  -332.34\n  975 │   975    0.001   -1.61388        true    203    967.0             970       8      11       0        0              0          0.0     90  -336.583\n  976 │   976    0.001   -1.81295        true    205    970.0             967      14      11       0        0              0          0.0     90  -342.24\n  977 │   977    0.001   -2.18375        true    205    975.0             970      14       9       0        0              0          0.0     90  -346.482\n  978 │   978    0.001   -1.89178        true    204    972.0             975       7      10       0        0              0          0.0     90  -342.24\n  979 │   979    0.001   -2.18146        true    204    976.0             972      12       8       0        0              0          0.0     90  -342.24\n  980 │   980    0.001   -2.30963        true    204    978.0             976      10       8       0        0              0          0.0     91  -342.24\n  981 │   981    0.001   -2.77312        true    206    984.0             978      18      12       0        0              0          0.0     91  -340.825\n  982 │   982    0.001   -2.08119        true    206    976.0             984       7      15       0        0              0          0.0     91  -337.997\n  983 │   983    0.001   -3.03948        true    207    988.0             976      17       5       0        0              0          0.0     91  -340.825\n  984 │   984    0.001   -3.18518        true    207    990.0             988      13      11       0        0              0          0.0     92  -342.24\n  985 │   985    0.001   -3.08663        true    210    989.0             990      14      15       0        0              0          0.0     92  -340.825\n  986 │   986    0.001   -2.32297        true    207    980.0             989       9      18       0        0              0          0.0     92  -339.411\n  987 │   987    0.001   -3.53016        true    207    995.0             980      24       9       0        0              0          0.0     92  -343.654\n  988 │   988    0.001   -3.52214        true    209    995.0             995      14      14       0        0              0          0.0     92  -343.654\n  989 │   989    0.001   -4.24889        true    210   1004.0             995      17       8       0        0              0          0.0     92  -345.068\n  990 │   990    0.001   -4.17397        true    212   1003.0            1004      11      12       0        0              0          0.0     92  -345.068\n  991 │   991    0.001   -4.26007        true    213   1004.0            1003      14      13       0        0              0          0.0     92  -345.068\n  992 │   992    0.001   -3.94071        true    215   1000.0            1004      11      15       0        0              0          0.0     92  -346.482\n  993 │   993    0.001   -4.10375        true    218   1002.0            1000      14      12       0        0              0          0.0     92  -347.897\n  994 │   994    0.001   -3.78054        true    218    998.0            1002       6      10       0        0              0          0.0     92  -343.654\n  995 │   995    0.001   -3.3675         true    217    993.0             998      12      17       0        0              0          0.0     92  -345.068\n  996 │   996    0.001   -3.19174        true    216    991.0             993      11      13       0        0              0          0.0     91  -345.068\n  997 │   997    0.001   -2.59884        true    213    984.0             991      11      18       0        0              0          0.0     90  -346.482\n  998 │   998    0.001   -2.24065        true    214    980.0             984       9      13       0        0              0          0.0     89  -340.825\n  999 │   999    0.001   -2.04163        true    210    978.0             980      12      14       0        0              0          0.0     89  -335.169\n 1000 │  1000    0.001   -1.83899        true    209    976.0             978      10      12       0        0              0          0.0     88  -336.583\n 1001 │  1001    0.001   -2.13387        true    212    980.0             976      17      13       0        0              0          0.0     88  -333.754\n 1002 │  1002    0.001   -2.68233        true    215    987.0             980      19      12       0        0              0          0.0     88  -333.754\n 1003 │  1003    0.001   -3.64751        true    218    999.0             987      19       7       0        0              0          0.0     89  -335.169\n 1004 │  1004    0.001   -3.72755        true    222   1000.0             999      19      18       0        0              0          0.0     90  -337.997\n 1005 │  1005    0.001   -3.97198        true    223   1003.0            1000      15      12       0        0              0          0.0     91  -340.825\n 1006 │  1006    0.001   -3.32332        true    223    995.0            1003      12      20       0        0              0          0.0     90  -342.24\n 1007 │  1007    0.001   -4.21246        true    223   1006.0             995      17       6       0        0              0          0.0     91  -345.068\n 1008 │  1008    0.001   -4.22203        true    224   1006.0            1006      14      14       0        0              0          0.0     90  -345.068\n 1009 │  1009    0.001   -4.15045        true    222   1005.0            1006      13      14       0        0              0          0.0     89  -342.24\n 1010 │  1010    0.001   -4.40164        true    222   1008.0            1005      16      13       0        0              0          0.0     88  -342.24\n 1011 │  1011    0.001   -4.00862        true    225   1003.0            1008      11      16       0        0              0          0.0     88  -340.825\n 1012 │  1012    0.001   -4.33819        true    224   1007.0            1003      13       9       0        0              0          0.0     87  -339.411\n 1013 │  1013    0.001   -4.34935        true    222   1007.0            1007      14      14       0        0              0          0.0     87  -335.169\n 1014 │  1014    0.001   -3.87287        true    222   1001.0            1007       4      10       0        0              0          0.0     87  -335.169\n 1015 │  1015    0.001   -3.71126        true    224    999.0            1001      13      15       0        0              0          0.0     87  -332.34\n 1016 │  1016    0.001   -4.03574        true    224   1003.0             999      19      15       0        0              0          0.0     87  -330.926\n 1017 │  1017    0.001   -4.04053        true    224   1003.0            1003      12      12       0        0              0          0.0     88  -329.512\n 1018 │  1018    0.001   -3.22768        true    222    993.0            1003      15      25       0        0              0          0.0     87  -329.512\n 1019 │  1019    0.001   -3.38063        true    219    995.0             993      16      14       0        0              0          0.0     87  -329.512\n 1020 │  1020    0.001   -3.61827        true    221    998.0             995      15      12       0        0              0          0.0     87  -330.926\n 1021 │  1021    0.001   -4.34764        true    222   1007.0             998      18       9       0        0              0          0.0     87  -332.34\n 1022 │  1022    0.001   -3.62622        true    221    998.0            1007       9      18       0        0              0          0.0     87  -329.512\n 1023 │  1023    0.001   -4.03082        true    220   1003.0             998      19      14       0        0              0          0.0     87  -329.512\n 1024 │  1024    0.001   -4.03561        true    216   1003.0            1003      16      16       0        0              0          0.0     86  -325.269\n 1025 │  1025    0.001   -4.12172        true    213   1004.0            1003      19      18       0        0              0          0.0     85  -323.855\n 1026 │  1026    0.001   -4.20934        true    212   1005.0            1004      14      13       0        0              0          0.0     85  -326.683\n 1027 │  1027    0.001   -3.31926        true    205    994.0            1005      12      23       0        0              0          0.0     87  -323.855\n 1028 │  1028    0.001   -2.73295        true    206    987.0             994       6      13       0        0              0          0.0     87  -323.855\n 1029 │  1029    0.001   -2.95967        true    207    990.0             987      11       8       0        0              0          0.0     87  -328.098\n 1030 │  1030    0.001   -2.61322        true    206    986.0             990      13      17       0        0              0          0.0     87  -332.34\n 1031 │  1031    0.001   -3.16793        true    207    993.0             986      19      12       0        0              0          0.0     86  -337.997\n 1032 │  1032    0.001   -2.66214        true    206    987.0             993      12      18       0        0              0          0.0     86  -335.169\n 1033 │  1033    0.001   -3.05353        true    205    992.0             987      13       8       0        0              0          0.0     87  -337.997\n 1034 │  1034    0.001   -2.71098        true    206    988.0             992      11      15       0        0              0          0.0     87  -335.169\n 1035 │  1035    0.001   -2.85668        true    205    990.0             988      15      13       0        0              0          0.0     88  -336.583\n 1036 │  1036    0.001   -2.59295        true    206    987.0             990      10      13       0        0              0          0.0     88  -335.169\n 1037 │  1037    0.001   -2.4065         true    206    985.0             987      13      15       0        0              0          0.0     88  -335.169\n 1038 │  1038    0.001   -2.63047        true    205    988.0             985      15      12       0        0              0          0.0     88  -337.997\n 1039 │  1039    0.001   -3.51463        true    208    999.0             988      16       5       0        0              0          0.0     88  -337.997\n 1040 │  1040    0.001   -3.83911        true    209   1003.0             999      14      10       0        0              0          0.0     89  -339.411\n 1041 │  1041    0.001   -3.59947        true    208   1000.0            1003      12      15       0        0              0          0.0     90  -339.411\n 1042 │  1042    0.001   -3.8439         true    206   1003.0            1000      13      10       0        0              0          0.0     89  -339.411\n 1043 │  1043    0.001   -4.0924         true    207   1006.0            1003      12       9       0        0              0          0.0     89  -339.411\n 1044 │  1044    0.001   -4.50653        true    208   1011.0            1006      17      12       0        0              0          0.0     89  -339.411\n 1045 │  1045    0.001   -4.76581        true    212   1014.0            1011      16      13       0        0              0          0.0     89  -337.997\n 1046 │  1046    0.001   -5.02912        true    214   1017.0            1014      18      15       0        0              0          0.0     91  -337.997\n 1047 │  1047    0.001   -4.4925         true    211   1010.0            1017      12      19       0        0              0          0.0     91  -336.583\n 1048 │  1048    0.001   -4.50842        true    212   1010.0            1010      13      13       0        0              0          0.0     91  -337.997\n 1049 │  1049    0.001   -4.20053        true    211   1006.0            1010       8      12       0        0              0          0.0     91  -337.997\n 1050 │  1050    0.001   -3.64032        true    208    999.0            1006      13      20       0        0              0          0.0     91  -337.997\n 1051 │  1051    0.001   -3.80192        true    210   1001.0             999      12      10       0        0              0          0.0     91  -337.997\n 1052 │  1052    0.001   -3.06654        true    209    992.0            1001      10      19       0        0              0          0.0     91  -337.997\n 1053 │  1053    0.001   -3.05369        true    212    992.0             992      12      12       0        0              0          0.0     91  -340.825\n 1054 │  1054    0.001   -2.79369        true    212    989.0             992      11      14       0        0              0          0.0     90  -340.825\n 1055 │  1055    0.001   -3.26954        true    211    995.0             989      14       8       0        0              0          0.0     91  -342.24\n 1056 │  1056    0.001   -4.23975        true    214   1007.0             995      19       7       0        0              0          0.0     91  -345.068\n 1057 │  1057    0.001   -4.00745        true    212   1004.0            1007      16      19       0        0              0          0.0     91  -349.311\n 1058 │  1058    0.001   -4.09507        true    212   1005.0            1004      17      16       0        0              0          0.0     90  -356.382\n 1059 │  1059    0.001   -3.61443        true    212    999.0            1005       9      15       0        0              0          0.0     89  -354.968\n 1060 │  1060    0.001   -2.7919         true    213    989.0             999       8      18       0        0              0          0.0     89  -352.139\n 1061 │  1061    0.001   -3.02135        true    216    992.0             989      13      10       0        0              0          0.0     89  -352.139\n 1062 │  1062    0.001   -2.0986         true    216    981.0             992       7      18       0        0              0          0.0     88  -349.311\n 1063 │  1063    0.001   -2.73065        true    217    989.0             981      20      12       0        0              0          0.0     88  -350.725\n 1064 │  1064    0.001   -3.85996        true    222   1003.0             989      24      10       0        0              0          0.0     89  -353.553\n 1065 │  1065    0.001   -4.35144        true    223   1009.0            1003      17      11       0        0              0          0.0     89  -350.725\n 1066 │  1066    0.001   -4.92992        true    224   1016.0            1009      15       8       0        0              0          0.0     89  -353.553\n 1067 │  1067    0.001   -5.35591        true    225   1021.0            1016      12       7       0        0              0          0.0     88  -354.968\n 1068 │  1068    0.001   -5.54885        true    225   1023.0            1021      11       9       0        0              0          0.0     87  -360.624\n 1069 │  1069    0.001   -4.9446         true    223   1015.0            1023      12      20       0        0              0          0.0     86  -359.21\n 1070 │  1070    0.001   -4.32272        true    219   1007.0            1015      10      18       0        0              0          0.0     86  -353.553\n 1071 │  1071    0.001   -3.51951        true    219    997.0            1007       7      17       0        0              0          0.0     85  -350.725\n 1072 │  1072    0.001   -3.9229         true    220   1002.0             997      16      11       0        0              0          0.0     87  -352.139\n 1073 │  1073    0.001   -3.68142        true    221    999.0            1002      12      15       0        0              0          0.0     87  -350.725\n 1074 │  1074    0.001   -3.51629        true    219    997.0             999      10      12       0        0              0          0.0     87  -350.725\n 1075 │  1075    0.001   -3.51149        true    218    997.0             997      12      12       0        0              0          0.0     88  -350.725\n 1076 │  1076    0.001   -3.01412        true    216    991.0             997       9      15       0        0              0          0.0     87  -349.311\n 1077 │  1077    0.001   -2.83481        true    215    989.0             991      12      14       0        0              0          0.0     87  -347.897\n 1078 │  1078    0.001   -3.47452        true    216    997.0             989      18      10       0        0              0          0.0     86  -343.654\n 1079 │  1079    0.001   -3.46971        true    219    997.0             997      16      16       0        0              0          0.0     86  -342.24\n 1080 │  1080    0.001   -3.38302        true    215    996.0             997      14      15       0        0              0          0.0     85  -342.24\n 1081 │  1081    0.001   -2.3875         true    208    984.0             996      11      23       0        0              0          0.0     85  -340.825\n 1082 │  1082    0.001   -2.85774        true    208    990.0             984      21      15       0        0              0          0.0     85  -343.654\n 1083 │  1083    0.001   -2.59402        true    210    987.0             990       5       8       0        0              0          0.0     85  -339.411\n 1084 │  1084    0.001   -2.40756        true    209    985.0             987      12      14       0        0              0          0.0     87  -333.754\n 1085 │  1085    0.001   -2.79655        true    210    990.0             985      11       6       0        0              0          0.0     87  -339.411\n 1086 │  1086    0.001   -2.94515        true    209    992.0             990      12      10       0        0              0          0.0     87  -342.24\n 1087 │  1087    0.001   -2.76761        true    207    990.0             992      15      17       0        0              0          0.0     88  -345.068\n 1088 │  1088    0.001   -2.25548        true    205    984.0             990       9      15       0        0              0          0.0     88  -347.897\n 1089 │  1089    0.001   -2.64326        true    207    989.0             984      14       9       0        0              0          0.0     88  -350.725\n 1090 │  1090    0.001   -2.46038        true    208    987.0             989      14      16       0        0              0          0.0     88  -352.139\n 1091 │  1091    0.001   -2.27393        true    209    985.0             987      12      14       0        0              0          0.0     89  -349.311\n 1092 │  1092    0.001   -2.58044        true    211    989.0             985      14      10       0        0              0          0.0     90  -345.068\n 1093 │  1093    0.001   -2.4802         true    210    988.0             989      11      12       0        0              0          0.0     90  -342.24\n 1094 │  1094    0.001   -2.37825        true    213    987.0             988      10      11       0        0              0          0.0     89  -342.24\n 1095 │  1095    0.001   -2.19179        true    212    985.0             987      12      14       0        0              0          0.0     89  -345.068\n 1096 │  1096    0.001   -1.66904        true    210    979.0             985      13      19       0        0              0          0.0     88  -340.825\n 1097 │  1097    0.001   -1.55169        true    209    978.0             979      12      13       0        0              0          0.0     89  -340.825\n 1098 │  1098    0.001   -1.84915        true    209    982.0             978      18      14       0        0              0          0.0     89  -349.311\n 1099 │  1099    0.001   -1.48703        true    210    978.0             982       8      12       0        0              0          0.0     91  -346.482\n 1100 │  1100    0.001   -1.45144        true    210    978.0             978      12      12       0        0              0          0.0     90  -346.482\n 1101 │  1101    0.001   -2.24596        true    209    988.0             978      19       9       0        0              0          0.0     90  -350.725\n 1102 │  1102    0.001   -2.22665        true    212    988.0             988      14      14       0        0              0          0.0     90  -345.068\n 1103 │  1103    0.001   -1.79333        true    211    983.0             988      12      17       0        0              0          0.0     91  -345.068\n 1104 │  1104    0.001   -2.09726        true    211    987.0             983      14      10       0        0              0          0.0     91  -347.897\n 1105 │  1105    0.001   -2.48866        true    213    992.0             987      22      17       0        0              0          0.0     91  -349.311\n 1106 │  1106    0.001   -2.06348        true    213    987.0             992      13      18       0        0              0          0.0     91  -350.725\n 1107 │  1107    0.001   -3.02866        true    213    999.0             987      21       9       0        0              0          0.0     92  -352.139\n 1108 │  1108    0.001   -3.59683        true    214   1006.0             999      22      15       0        0              0          0.0     93  -356.382\n 1109 │  1109    0.001   -3.52525        true    211   1005.0            1006      14      15       0        0              0          0.0     93  -360.624\n 1110 │  1110    0.001   -4.09962        true    209   1012.0            1005      16       9       0        0              0          0.0     93  -364.867\n 1111 │  1111    0.001   -3.71454        true    209   1007.0            1012      10      15       0        0              0          0.0     92  -362.039\n 1112 │  1112    0.001   -3.96844        true    209   1010.0            1007      14      11       0        0              0          0.0     92  -364.867\n 1113 │  1113    0.001   -4.22638        true    209   1013.0            1010      14      11       0        0              0          0.0     92  -363.453\n 1114 │  1114    0.001   -4.00503        true    207   1010.0            1013      14      17       0        0              0          0.0     94  -364.867\n 1115 │  1115    0.001   -4.18237        true    209   1012.0            1010      16      14       0        0              0          0.0     94  -360.624\n 1116 │  1116    0.001   -4.28205        true    209   1013.0            1012      12      11       0        0              0          0.0     95  -359.21\n 1117 │  1117    0.001   -4.0607         true    208   1010.0            1013       9      12       0        0              0          0.0     95  -357.796\n 1118 │  1118    0.001   -3.67166        true    207   1005.0            1010      12      17       0        0              0          0.0     96  -354.968\n 1119 │  1119    0.001   -3.51709        true    211   1003.0            1005      12      14       0        0              0          0.0     95  -353.553\n 1120 │  1120    0.001   -3.76558        true    209   1006.0            1003      16      13       0        0              0          0.0     95  -352.139\n 1121 │  1121    0.001   -3.61277        true    209   1004.0            1006      13      15       0        0              0          0.0     95  -350.725\n 1122 │  1122    0.001   -4.34737        true    212   1013.0            1004      21      12       0        0              0          0.0     96  -352.139\n 1123 │  1123    0.001   -3.88328        true    208   1007.0            1013      10      16       0        0              0          0.0     95  -349.311\n 1124 │  1124    0.001   -3.40679        true    206   1001.0            1007       9      15       0        0              0          0.0     94  -346.482\n 1125 │  1125    0.001   -2.99978        true    206    996.0            1001       8      13       0        0              0          0.0     93  -347.897\n 1126 │  1126    0.001   -2.50031        true    203    990.0             996       9      15       0        0              0          0.0     93  -347.897\n 1127 │  1127    0.001   -2.48423        true    202    990.0             990      11      11       0        0              0          0.0     94  -347.897\n 1128 │  1128    0.001   -2.38568        true    203    989.0             990      13      14       0        0              0          0.0     94  -345.068\n 1129 │  1129    0.001   -2.86154        true    204    995.0             989      12       6       0        0              0          0.0     93  -347.897\n 1130 │  1130    0.001   -3.01737        true    203    997.0             995      12      10       0        0              0          0.0     95  -347.897\n 1131 │  1131    0.001   -3.09437        true    199    998.0             997      16      15       0        0              0          0.0     96  -345.068\n 1132 │  1132    0.001   -3.82374        true    199   1007.0             998      20      11       0        0              0          0.0     97  -350.725\n 1133 │  1133    0.001   -3.51012        true    200   1003.0            1007      14      18       0        0              0          0.0     97  -349.311\n 1134 │  1134    0.001   -3.59623        true    201   1004.0            1003      17      16       0        0              0          0.0     98  -346.482\n 1135 │  1135    0.001   -3.5213         true    203   1003.0            1004      17      18       0        0              0          0.0     98  -347.897\n 1136 │  1136    0.001   -3.93186        true    205   1008.0            1003      16      11       0        0              0          0.0     98  -349.311\n 1137 │  1137    0.001   -4.83027        true    208   1019.0            1008      19       8       0        0              0          0.0     98  -356.382\n 1138 │  1138    0.001   -4.94042        true    209   1020.0            1019      14      13       0        0              0          0.0     97  -360.624\n 1139 │  1139    0.001   -5.05207        true    209   1021.0            1020      14      13       0        0              0          0.0     96  -362.039\n 1140 │  1140    0.001   -5.64286        true    211   1028.0            1021      17      10       0        0              0          0.0     97  -363.453\n 1141 │  1141    0.001   -5.36892        true    211   1024.0            1028      10      14       0        0              0          0.0     98  -362.039\n 1142 │  1142    0.001   -5.08749        true    208   1020.0            1024      13      17       0        0              0          0.0     99  -363.453\n 1143 │  1143    0.001   -5.19913        true    211   1021.0            1020      14      13       0        0              0          0.0    100  -357.796\n 1144 │  1144    0.001   -5.15242        true    210   1020.0            1021      15      16       0        0              0          0.0    101  -363.453\n 1145 │  1145    0.001   -5.34395        true    211   1022.0            1020      20      18       0        0              0          0.0    100  -362.039\n 1146 │  1146    0.001   -4.81794        true    206   1015.0            1022      16      23       0        0              0          0.0     99  -360.624\n 1147 │  1147    0.001   -4.35797        true    207   1009.0            1015       8      14       0        0              0          0.0     99  -357.796\n 1148 │  1148    0.001   -4.69515        true    208   1013.0            1009      19      15       0        0              0          0.0     99  -362.039\n 1149 │  1149    0.001   -4.39297        true    206   1009.0            1013      14      18       0        0              0          0.0     98  -364.867\n 1150 │  1150    0.001   -4.32639        true    207   1008.0            1009      14      15       0        0              0          0.0     98  -364.867\n 1151 │  1151    0.001   -3.52558        true    206    998.0            1008       5      15       0        0              0          0.0     98  -364.867\n 1152 │  1152    0.001   -2.61798        true    207    987.0             998      10      21       0        0              0          0.0     97  -356.382\n 1153 │  1153    0.001   -3.00938        true    206    992.0             987      16      11       0        0              0          0.0     98  -357.796\n 1154 │  1154    0.001   -3.24293        true    207    995.0             992      23      20       0        0              0          0.0     98  -360.624\n 1155 │  1155    0.001   -3.23491        true    207    995.0             995      12      12       0        0              0          0.0     98  -357.796\n 1156 │  1156    0.001   -3.22689        true    207    995.0             995      11      11       0        0              0          0.0    100  -357.796\n 1157 │  1157    0.001   -2.97246        true    209    992.0             995      11      14       0        0              0          0.0    100  -362.039\n 1158 │  1158    0.001   -2.21591        true    208    983.0             992       8      17       0        0              0          0.0    100  -362.039\n 1159 │  1159    0.001   -2.27145        true    207    984.0             983      12      11       0        0              0          0.0    100  -364.867\n 1160 │  1160    0.001   -2.16267        true    206    983.0             984      14      15       0        0              0          0.0     99  -367.696\n 1161 │  1161    0.001   -1.80251        true    206    979.0             983      12      16       0        0              0          0.0     99  -369.11\n 1162 │  1162    0.001   -2.51528        true    207    988.0             979      14       5       0        0              0          0.0     99  -371.938\n 1163 │  1163    0.001   -2.82566        true    207    992.0             988      13       9       0        0              0          0.0    100  -370.524\n 1164 │  1164    0.001   -2.64813        true    210    990.0             992      17      19       0        0              0          0.0    100  -373.352\n 1165 │  1165    0.001   -2.21888        true    210    985.0             990       9      14       0        0              0          0.0    100  -371.938\n 1166 │  1166    0.001   -2.11182        true    211    984.0             985      10      11       0        0              0          0.0    100  -371.938\n 1167 │  1167    0.001   -2.58206        true    212    990.0             984      18      12       0        0              0          0.0     99  -374.767\n 1168 │  1168    0.001   -2.31833        true    212    987.0             990      10      13       0        0              0          0.0     99  -380.423\n 1169 │  1169    0.001   -2.95613        true    212    995.0             987      16       8       0        0              0          0.0     99  -387.495\n 1170 │  1170    0.001   -3.19377        true    214    998.0             995      15      12       0        0              0          0.0    100  -390.323\n 1171 │  1171    0.001   -2.9449         true    214    995.0             998      11      14       0        0              0          0.0    100  -387.495\n 1172 │  1172    0.001   -3.26427        true    215    999.0             995      14      10       0        0              0          0.0    100  -387.495\n 1173 │  1173    0.001   -3.42587        true    214   1001.0             999      15      13       0        0              0          0.0    101  -386.08\n 1174 │  1174    0.001   -3.91512        true    216   1007.0            1001      20      14       0        0              0          0.0    101  -387.495\n 1175 │  1175    0.001   -3.8452         true    216   1006.0            1007      12      13       0        0              0          0.0    101  -387.495\n 1176 │  1176    0.001   -3.52968        true    217   1002.0            1006      13      17       0        0              0          0.0    101  -386.08\n 1177 │  1177    0.001   -4.4238         true    221   1013.0            1002      21      10       0        0              0          0.0    101  -387.495\n 1178 │  1178    0.001   -4.76604        true    218   1017.0            1013      15      11       0        0              0          0.0    101  -387.495\n 1179 │  1179    0.001   -5.19321        true    217   1022.0            1017      14       9       0        0              0          0.0    100  -388.909\n 1180 │  1180    0.001   -4.10249        true    216   1008.0            1022       9      23       0        0              0          0.0    100  -384.666\n 1181 │  1181    0.001   -3.62808        true    217   1002.0            1008      12      18       0        0              0          0.0     99  -384.666\n 1182 │  1182    0.001   -3.30487        true    217    998.0            1002      12      16       0        0              0          0.0     99  -379.009\n 1183 │  1183    0.001   -2.89182        true    216    993.0             998      10      15       0        0              0          0.0     98  -377.595\n 1184 │  1184    0.001   -3.45379        true    218   1000.0             993      14       7       0        0              0          0.0     97  -379.009\n 1185 │  1185    0.001   -3.04477        true    214    995.0            1000      14      19       0        0              0          0.0     97  -381.838\n 1186 │  1186    0.001   -2.62567        true    212    990.0             995      10      15       0        0              0          0.0     97  -380.423\n 1187 │  1187    0.001   -3.42969        true    211   1000.0             990      15       5       0        0              0          0.0     98  -387.495\n 1188 │  1188    0.001   -3.18453        true    211    997.0            1000       7      10       0        0              0          0.0     99  -386.08\n 1189 │  1189    0.001   -3.26152        true    208    998.0             997      14      13       0        0              0          0.0    100  -384.666\n 1190 │  1190    0.001   -3.66612        true    209   1003.0             998      12       7       0        0              0          0.0    100  -384.666\n 1191 │  1191    0.001   -3.91461        true    211   1006.0            1003      14      11       0        0              0          0.0    100  -387.495\n 1192 │  1192    0.001   -3.7618         true    212   1004.0            1006      10      12       0        0              0          0.0    100  -386.08\n 1193 │  1193    0.001   -3.76818        true    211   1004.0            1004      13      13       0        0              0          0.0    100  -387.495\n 1194 │  1194    0.001   -4.5833         true    211   1014.0            1004      22      12       0        0              0          0.0    100  -390.323\n 1195 │  1195    0.001   -4.76633        true    213   1016.0            1014      15      13       0        0              0          0.0    100  -390.323\n 1196 │  1196    0.001   -4.71137        true    209   1015.0            1016      15      16       0        0              0          0.0     99  -390.323\n 1197 │  1197    0.001   -4.49366        true    207   1012.0            1015      10      13       0        0              0          0.0    100  -387.495\n 1198 │  1198    0.001   -4.10858        true    207   1007.0            1012      11      16       0        0              0          0.0     99  -387.495\n 1199 │  1199    0.001   -4.44323        true    209   1011.0            1007      11       7       0        0              0          0.0     99  -387.495\n 1200 │  1200    0.001   -4.70251        true    210   1014.0            1011      17      14       0        0              0          0.0     98  -391.737\n 1201 │  1201    0.001   -4.64424        true    208   1013.0            1014      14      15       0        0              0          0.0     97  -393.151\n 1202 │  1202    0.001   -4.74542        true    206   1014.0            1013      19      18       0        0              0          0.0     97  -400.222\n 1203 │  1203    0.001   -5.24909        true    206   1020.0            1014      18      12       0        0              0          0.0     97  -401.637\n 1204 │  1204    0.001   -5.04042        true    205   1017.0            1020       9      12       0        0              0          0.0     97  -400.222\n 1205 │  1205    0.001   -5.14758        true    203   1018.0            1017      17      16       0        0              0          0.0     97  -400.222\n 1206 │  1206    0.001   -5.25625        true    202   1019.0            1018      15      14       0        0              0          0.0     97  -401.637\n 1207 │  1207    0.001   -4.96542        true    203   1015.0            1019      13      17       0        0              0          0.0     98  -393.151\n 1208 │  1208    0.001   -4.34354        true    202   1007.0            1015       9      17       0        0              0          0.0     98  -393.151\n 1209 │  1209    0.001   -4.27363        true    203   1006.0            1007      10      11       0        0              0          0.0     98  -391.737\n 1210 │  1210    0.001   -4.76843        true    202   1012.0            1006      15       9       0        0              0          0.0     99  -390.323\n 1211 │  1211    0.001   -4.13989        true    200   1004.0            1012      12      20       0        0              0          0.0     98  -391.737\n 1212 │  1212    0.001   -4.71323        true    204   1011.0            1004      16       9       0        0              0          0.0     99  -394.566\n 1213 │  1213    0.001   -4.32617        true    201   1006.0            1011      13      18       0        0              0          0.0     98  -393.151\n 1214 │  1214    0.001   -4.57872        true    202   1009.0            1006      15      12       0        0              0          0.0     97  -400.222\n 1215 │  1215    0.001   -4.83531        true    202   1012.0            1009      15      12       0        0              0          0.0     96  -398.808\n 1216 │  1216    0.001   -4.61214        true    198   1009.0            1012      12      15       0        0              0          0.0     97  -398.808\n 1217 │  1217    0.001   -4.62648        true    198   1009.0            1009       9       9       0        0              0          0.0     97  -400.222\n 1218 │  1218    0.001   -4.96366        true    198   1013.0            1009      15      11       0        0              0          0.0     97  -400.222\n 1219 │  1219    0.001   -5.62622        true    198   1021.0            1013      18      10       0        0              0          0.0     97  -404.465\n 1220 │  1220    0.001   -6.1376         true    202   1027.0            1021      22      16       0        0              0          0.0     97  -410.122\n 1221 │  1221    0.001   -5.22116        true    200   1015.0            1027       6      18       0        0              0          0.0     96  -410.122\n 1222 │  1222    0.001   -5.40561        true    199   1017.0            1015      15      13       0        0              0          0.0     95  -408.708\n 1223 │  1223    0.001   -5.27195        true    198   1015.0            1017      15      17       0        0              0          0.0     94  -405.879\n 1224 │  1224    0.001   -5.37613        true    200   1016.0            1015      14      13       0        0              0          0.0     94  -412.95\n 1225 │  1225    0.001   -5.16022        true    201   1013.0            1016      13      16       0        0              0          0.0     95  -411.536\n 1226 │  1226    0.001   -5.34183        true    203   1015.0            1013      14      12       0        0              0          0.0     96  -412.95\n 1227 │  1227    0.001   -5.20471        true    202   1013.0            1015      13      15       0        0              0          0.0     95  -417.193\n 1228 │  1228    0.001   -5.22538        true    202   1013.0            1013      11      11       0        0              0          0.0     95  -412.95\n 1229 │  1229    0.001   -6.12735        true    206   1024.0            1013      23      12       0        0              0          0.0     95  -414.365\n 1230 │  1230    0.001   -5.60556        true    206   1017.0            1024      14      21       0        0              0          0.0     95  -414.365\n 1231 │  1231    0.001   -5.71273        true    204   1018.0            1017      15      14       0        0              0          0.0     94  -414.365\n 1232 │  1232    0.001   -5.25891        true    200   1012.0            1018      10      16       0        0              0          0.0     94  -417.193\n 1233 │  1233    0.001   -4.95483        true    198   1008.0            1012      14      18       0        0              0          0.0     94  -410.122\n 1234 │  1234    0.001   -4.88658        true    199   1007.0            1008      14      15       0        0              0          0.0     94  -407.294\n 1235 │  1235    0.001   -4.08337        true    197    997.0            1007      14      24       0        0              0          0.0     94  -403.051\n 1236 │  1236    0.001   -3.3386         true    196    988.0             997      12      21       0        0              0          0.0     93  -408.708\n 1237 │  1237    0.001   -2.73909        true    193    981.0             988       9      16       0        0              0          0.0     93  -405.879\n 1238 │  1238    0.001   -2.375          true    194    977.0             981       7      11       0        0              0          0.0     95  -404.465\n 1239 │  1239    0.001   -2.50464        true    194    979.0             977      12      10       0        0              0          0.0     95  -404.465\n 1240 │  1240    0.001   -2.55399        true    195    980.0             979      13      12       0        0              0          0.0     96  -403.051\n 1241 │  1241    0.001   -2.35497        true    195    978.0             980      15      17       0        0              0          0.0     98  -405.879\n 1242 │  1242    0.001   -1.81722        true    195    972.0             978       8      14       0        0              0          0.0     98  -404.465\n 1243 │  1243    0.001   -2.27393        true    196    978.0             972      18      12       0        0              0          0.0     99  -403.051\n 1244 │  1244    0.001   -2.40504        true    196    980.0             978      11       9       0        0              0          0.0     99  -400.222\n 1245 │  1245    0.001   -2.12254        true    196    977.0             980      12      15       0        0              0          0.0     99  -403.051\n 1246 │  1246    0.001   -2.16879        true    197    978.0             977      11      10       0        0              0          0.0     99  -405.879\n 1247 │  1247    0.001   -2.63228        true    199    984.0             978       9       3       0        0              0          0.0     99  -408.708\n 1248 │  1248    0.001   -2.19078        true    198    979.0             984      11      16       0        0              0          0.0    100  -408.708\n 1249 │  1249    0.001   -2.24013        true    199    980.0             979      14      13       0        0              0          0.0     99  -405.879\n 1250 │  1250    0.001   -1.53895        true    196    972.0             980       7      15       0        0              0          0.0     99  -408.708\n 1251 │  1251    0.001   -1.74497        true    198    975.0             972      11       8       0        0              0          0.0     99  -410.122\n 1252 │  1252    0.001   -1.62073        true    199    974.0             975      11      12       0        0              0          0.0     99  -405.879\n 1253 │  1253    0.001   -1.91301        true    198    978.0             974      11       7       0        0              0          0.0     99  -407.294\n 1254 │  1254    0.001   -2.21047        true    199    982.0             978      14      10       0        0              0          0.0     99  -405.879\n 1255 │  1255    0.001   -2.59584        true    200    987.0             982      11       6       0        0              0          0.0     98  -405.879\n 1256 │  1256    0.001   -2.24353        true    198    983.0             987      10      14       0        0              0          0.0     98  -398.808\n 1257 │  1257    0.001   -2.79511        true    197    990.0             983      16       9       0        0              0          0.0     99  -397.394\n 1258 │  1258    0.001   -3.6807         true    197   1001.0             990      20       9       0        0              0          0.0     99  -408.708\n 1259 │  1259    0.001   -3.5191         true    194    999.0            1001      14      16       0        0              0          0.0     98  -412.95\n 1260 │  1260    0.001   -3.6807         true    197   1001.0             999      14      12       0        0              0          0.0     99  -415.779\n 1261 │  1261    0.001   -3.92649        true    197   1004.0            1001      15      12       0        0              0          0.0     99  -415.779\n 1262 │  1262    0.001   -3.93288        true    196   1004.0            1004      17      17       0        0              0          0.0     99  -415.779\n 1263 │  1263    0.001   -3.45015        true    197    998.0            1004      10      16       0        0              0          0.0     99  -414.365\n 1264 │  1264    0.001   -3.44695        true    195    998.0             998      16      16       0        0              0          0.0     99  -411.536\n 1265 │  1265    0.001   -3.11603        true    193    994.0             998      11      15       0        0              0          0.0     99  -411.536\n 1266 │  1266    0.001   -3.02427        true    193    993.0             994      12      13       0        0              0          0.0     99  -407.294\n 1267 │  1267    0.001   -2.93081        true    192    992.0             993      12      13       0        0              0          0.0    101  -400.222\n 1268 │  1268    0.001   -3.57339        true    192   1000.0             992      14       6       0        0              0          0.0    102  -401.637\n 1269 │  1269    0.001   -4.46609        true    193   1011.0            1000      24      13       0        0              0          0.0    102  -408.708\n 1270 │  1270    0.001   -4.56426        true    191   1012.0            1011      13      12       0        0              0          0.0    103  -412.95\n 1271 │  1271    0.001   -4.42192        true    190   1010.0            1012       9      11       0        0              0          0.0    104  -414.365\n 1272 │  1272    0.001   -4.5186         true    190   1011.0            1010      14      13       0        0              0          0.0    106  -414.365\n 1273 │  1273    0.001   -4.85831        true    194   1015.0            1011      20      16       0        0              0          0.0    105  -414.365\n 1274 │  1274    0.001   -4.96249        true    190   1016.0            1015      20      19       0        0              0          0.0    105  -417.193\n 1275 │  1275    0.001   -4.66599        true    190   1012.0            1016      14      18       0        0              0          0.0    104  -412.95\n 1276 │  1276    0.001   -4.36191        true    191   1008.0            1012      16      20       0        0              0          0.0    103  -412.95\n 1277 │  1277    0.001   -4.21259        true    193   1006.0            1008      14      16       0        0              0          0.0    102  -411.536\n 1278 │  1278    0.001   -4.54597        true    193   1010.0            1006      14      10       0        0              0          0.0    102  -408.708\n 1279 │  1279    0.001   -5.04521        true    193   1016.0            1010      16      10       0        0              0          0.0    102  -417.193\n 1280 │  1280    0.001   -4.90982        true    193   1014.0            1016      10      12       0        0              0          0.0    102  -412.95\n 1281 │  1281    0.001   -5.09285        true    192   1016.0            1014      16      14       0        0              0          0.0    104  -407.294\n 1282 │  1282    0.001   -5.19853        true    192   1017.0            1016      16      15       0        0              0          0.0    103  -407.294\n 1283 │  1283    0.001   -5.46585        true    191   1020.0            1017      16      13       0        0              0          0.0    103  -411.536\n 1284 │  1284    0.001   -4.28863        true    192   1005.0            1020       7      22       0        0              0          0.0    103  -407.294\n 1285 │  1285    0.001   -4.29661        true    197   1005.0            1005      13      13       0        0              0          0.0    103  -404.465\n 1286 │  1286    0.001   -4.46681        true    199   1007.0            1005      16      14       0        0              0          0.0    104  -401.637\n 1287 │  1287    0.001   -4.72071        true    200   1010.0            1007      15      12       0        0              0          0.0    104  -404.465\n 1288 │  1288    0.001   -3.92468        true    197   1000.0            1010      13      23       0        0              0          0.0    104  -408.708\n 1289 │  1289    0.001   -3.51566        true    196    995.0            1000       7      12       0        0              0          0.0    104  -404.465\n 1290 │  1290    0.001   -4.97063        true    198   1013.0             995      24       6       0        0              0          0.0    105  -410.122\n 1291 │  1291    0.001   -5.15224        true    199   1015.0            1013      11       9       0        0              0          0.0    105  -411.536\n 1292 │  1292    0.001   -4.85385        true    200   1011.0            1015       7      11       0        0              0          0.0    105  -412.95\n 1293 │  1293    0.001   -4.87135        true    200   1011.0            1011       9       9       0        0              0          0.0    105  -410.122\n 1294 │  1294    0.001   -4.80811        true    199   1010.0            1011      13      14       0        0              0          0.0    105  -410.122\n 1295 │  1295    0.001   -4.66228        true    197   1008.0            1010       9      11       0        0              0          0.0    104  -410.122\n 1296 │  1296    0.001   -4.26926        true    198   1003.0            1008      10      15       0        0              0          0.0    104  -408.708\n 1297 │  1297    0.001   -4.11118        true    195   1001.0            1003      11      13       0        0              0          0.0    104  -407.294\n 1298 │  1298    0.001   -4.35697        true    196   1004.0            1001      16      13       0        0              0          0.0    103  -405.879\n 1299 │  1299    0.001   -3.95597        true    196    999.0            1004      16      21       0        0              0          0.0    103  -407.294\n 1300 │  1300    0.001   -3.87264        true    196    998.0             999      15      16       0        0              0          0.0    104  -405.879\n 1301 │  1301    0.001   -4.0328         true    198   1000.0             998      18      16       0        0              0          0.0    103  -408.708\n 1302 │  1302    0.001   -4.35855        true    195   1004.0            1000      18      14       0        0              0          0.0    105  -408.708\n 1303 │  1303    0.001   -3.30147        true    194    991.0            1004      11      24       0        0              0          0.0    104  -403.051\n 1304 │  1304    0.001   -3.77956        true    194    997.0             991      21      15       0        0              0          0.0    103  -405.879\n 1305 │  1305    0.001   -4.58913        true    195   1007.0             997      18       8       0        0              0          0.0    103  -420.021\n 1306 │  1306    0.001   -4.43806        true    195   1005.0            1007      13      15       0        0              0          0.0    102  -417.193\n 1307 │  1307    0.001   -4.5272         true    195   1006.0            1005      11      10       0        0              0          0.0    101  -417.193\n 1308 │  1308    0.001   -5.50437        true    196   1018.0            1006      21       9       0        0              0          0.0    102  -422.85\n 1309 │  1309    0.001   -5.85291        true    198   1022.0            1018      13       9       0        0              0          0.0    102  -421.436\n 1310 │  1310    0.001   -5.40726        true    198   1016.0            1022      16      22       0        0              0          0.0    102  -415.779\n 1311 │  1311    0.001   -5.3523         true    200   1015.0            1016      12      13       0        0              0          0.0    101  -415.779\n 1312 │  1312    0.001   -5.45648        true    200   1016.0            1015      13      12       0        0              0          0.0    103  -415.779\n 1313 │  1313    0.001   -5.56215        true    205   1017.0            1016      17      16       0        0              0          0.0    103  -414.365\n 1314 │  1314    0.001   -5.98932        true    207   1022.0            1017      18      13       0        0              0          0.0    102  -422.85\n 1315 │  1315    0.001   -5.78425        true    207   1019.0            1022      14      17       0        0              0          0.0    101  -417.193\n 1316 │  1316    0.001   -5.49343        true    207   1015.0            1019      14      18       0        0              0          0.0    101  -408.708\n 1317 │  1317    0.001   -5.67788        true    208   1017.0            1015      13      11       0        0              0          0.0    102  -410.122\n 1318 │  1318    0.001   -5.78504        true    208   1018.0            1017      16      15       0        0              0          0.0    103  -412.95\n 1319 │  1319    0.001   -6.21339        true    208   1023.0            1018      19      14       0        0              0          0.0    104  -412.95\n 1320 │  1320    0.001   -6.01013        true    207   1020.0            1023      14      17       0        0              0          0.0    106  -411.536\n 1321 │  1321    0.001   -5.47988        true    207   1013.0            1020      10      17       0        0              0          0.0    105  -407.294\n 1322 │  1322    0.001   -5.01579        true    205   1007.0            1013       9      15       0        0              0          0.0    106  -407.294\n 1323 │  1323    0.001   -4.78349        true    202   1004.0            1007       9      12       0        0              0          0.0    106  -404.465\n 1324 │  1324    0.001   -4.54569        true    201   1001.0            1004      16      19       0        0              0          0.0    107  -407.294\n 1325 │  1325    0.001   -4.79148        true    198   1004.0            1001      13      10       0        0              0          0.0    106  -412.95\n 1326 │  1326    0.001   -4.96026        true    201   1006.0            1004      19      17       0        0              0          0.0    106  -411.536\n 1327 │  1327    0.001   -4.96983        true    203   1006.0            1006      13      13       0        0              0          0.0    105  -408.708\n 1328 │  1328    0.001   -4.6543         true    203   1002.0            1006      13      17       0        0              0          0.0    106  -412.95\n 1329 │  1329    0.001   -4.73889        true    205   1003.0            1002      14      13       0        0              0          0.0    106  -410.122\n 1330 │  1330    0.001   -4.74369        true    202   1003.0            1003      18      18       0        0              0          0.0    106  -408.708\n 1331 │  1331    0.001   -5.31599        true    205   1010.0            1003      17      10       0        0              0          0.0    107  -408.708\n 1332 │  1332    0.001   -5.65444        true    205   1014.0            1010      21      17       0        0              0          0.0    108  -411.536\n 1333 │  1333    0.001   -5.11142        true    205   1007.0            1014      10      17       0        0              0          0.0    108  -408.708\n 1334 │  1334    0.001   -4.87912        true    204   1004.0            1007      12      15       0        0              0          0.0    108  -404.465\n 1335 │  1335    0.001   -5.12897        true    208   1007.0            1004      18      15       0        0              0          0.0    107  -400.222\n 1336 │  1336    0.001   -4.81535        true    208   1003.0            1007      11      15       0        0              0          0.0    106  -398.808\n 1337 │  1337    0.001   -4.49407        true    210    999.0            1003      10      14       0        0              0          0.0    107  -395.98\n 1338 │  1338    0.001   -5.14332        true    212   1007.0             999      16       8       0        0              0          0.0    106  -404.465\n 1339 │  1339    0.001   -5.15448        true    209   1007.0            1007      14      14       0        0              0          0.0    106  -405.879\n 1340 │  1340    0.001   -5.32755        true    209   1009.0            1007      16      14       0        0              0          0.0    106  -405.879\n 1341 │  1341    0.001   -5.82568        true    206   1015.0            1009      17      11       0        0              0          0.0    105  -403.051\n 1342 │  1342    0.001   -6.64951        true    204   1025.0            1015      22      12       0        0              0          0.0    104  -410.122\n 1343 │  1343    0.001   -6.12984        true    205   1018.0            1025      14      21       0        0              0          0.0    104  -408.708\n 1344 │  1344    0.001   -5.91755        true    202   1015.0            1018      14      17       0        0              0          0.0    103  -408.708\n 1345 │  1345    0.001   -5.86094        true    200   1014.0            1015       8       9       0        0              0          0.0    102  -408.708\n 1346 │  1346    0.001   -5.47982        true    197   1009.0            1014      12      17       0        0              0          0.0    102  -407.294\n 1347 │  1347    0.001   -5.00748        true    195   1003.0            1009      13      19       0        0              0          0.0    101  -407.294\n 1348 │  1348    0.001   -5.66054        true    196   1011.0            1003      17       9       0        0              0          0.0    101  -412.95\n 1349 │  1349    0.001   -5.59729        true    195   1010.0            1011      16      17       0        0              0          0.0    101  -412.95\n 1350 │  1350    0.001   -5.85523        true    197   1013.0            1010      19      16       0        0              0          0.0    100  -412.95\n 1351 │  1351    0.001   -5.31006        true    196   1006.0            1013      12      19       0        0              0          0.0     99  -412.95\n 1352 │  1352    0.001   -5.40071        true    199   1007.0            1006      15      14       0        0              0          0.0     98  -414.365\n 1353 │  1353    0.001   -5.57377        true    199   1009.0            1007      16      14       0        0              0          0.0     98  -411.536\n 1354 │  1354    0.001   -5.18274        true    198   1004.0            1009      10      15       0        0              0          0.0     97  -407.294\n 1355 │  1355    0.001   -5.43259        true    194   1007.0            1004      19      16       0        0              0          0.0     96  -410.122\n 1356 │  1356    0.001   -5.20029        true    196   1004.0            1007      11      14       0        0              0          0.0     95  -407.294\n 1357 │  1357    0.001   -5.36907        true    195   1006.0            1004      17      15       0        0              0          0.0     96  -404.465\n 1358 │  1358    0.001   -5.70245        true    196   1010.0            1006      14      10       0        0              0          0.0     95  -407.294\n 1359 │  1359    0.001   -5.39456        true    196   1006.0            1010      12      16       0        0              0          0.0     95  -405.879\n 1360 │  1360    0.001   -5.07903        true    194   1002.0            1006       7      11       0        0              0          0.0     94  -405.879\n 1361 │  1361    0.001   -4.83755        true    194    999.0            1002      10      13       0        0              0          0.0     94  -407.294\n 1362 │  1362    0.001   -4.17987        true    195    991.0             999      10      18       0        0              0          0.0     94  -404.465\n 1363 │  1363    0.001   -4.2477         true    195    992.0             991      17      16       0        0              0          0.0     94  -405.879\n 1364 │  1364    0.001   -4.3992         true    195    994.0             992      11       9       0        0              0          0.0     94  -407.294\n 1365 │  1365    0.001   -4.38957        true    194    994.0             994      14      14       0        0              0          0.0     94  -408.708\n 1366 │  1366    0.001   -4.29781        true    194    993.0             994      14      15       0        0              0          0.0     95  -401.637\n 1367 │  1367    0.001   -3.6265         true    193    985.0             993      11      19       0        0              0          0.0     94  -400.222\n 1368 │  1368    0.001   -3.76784        true    192    987.0             985      12      10       0        0              0          0.0     93  -401.637\n 1369 │  1369    0.001   -3.7469         true    190    987.0             987      10      10       0        0              0          0.0     93  -407.294\n 1370 │  1370    0.001   -3.39459        true    189    983.0             987      12      16       0        0              0          0.0     93  -403.051\n 1371 │  1371    0.001   -3.78117        true    188    988.0             983      16      11       0        0              0          0.0     93  -405.879\n 1372 │  1372    0.001   -3.26479        true    186    982.0             988       5      11       0        0              0          0.0     93  -401.637\n 1373 │  1373    0.001   -3.15259        true    186    981.0             982      12      13       0        0              0          0.0     93  -400.222\n 1374 │  1374    0.001   -3.45394        true    186    985.0             981      12       8       0        0              0          0.0     94  -401.637\n 1375 │  1375    0.001   -3.59528        true    187    987.0             985      13      11       0        0              0          0.0     95  -398.808\n 1376 │  1376    0.001   -3.90437        true    188    991.0             987      17      13       0        0              0          0.0     96  -394.566\n 1377 │  1377    0.001   -3.31148        true    187    984.0             991       9      16       0        0              0          0.0     96  -395.98\n 1378 │  1378    0.001   -3.45135        true    189    986.0             984      12      10       0        0              0          0.0     97  -394.566\n 1379 │  1379    0.001   -3.75916        true    189    990.0             986      23      19       0        0              0          0.0     97  -393.151\n 1380 │  1380    0.001   -3.57806        true    186    988.0             990      15      17       0        0              0          0.0     98  -395.98\n 1381 │  1381    0.001   -3.3106         true    185    985.0             988      13      16       0        0              0          0.0     98  -398.808\n 1382 │  1382    0.001   -3.36922        true    185    986.0             985      15      14       0        0              0          0.0     98  -397.394\n 1383 │  1383    0.001   -3.59456        true    185    989.0             986      14      11       0        0              0          0.0     98  -395.98\n 1384 │  1384    0.001   -3.16328        true    187    984.0             989      13      18       0        0              0          0.0     98  -391.737\n 1385 │  1385    0.001   -2.72178        true    188    979.0             984       9      14       0        0              0          0.0     97  -390.323\n 1386 │  1386    0.001   -2.77113        true    189    980.0             979      13      12       0        0              0          0.0     98  -394.566\n 1387 │  1387    0.001   -3.56724        true    192    990.0             980      18       8       0        0              0          0.0     99  -395.98\n 1388 │  1388    0.001   -3.71584        true    194    992.0             990      16      14       0        0              0          0.0     99  -398.808\n 1389 │  1389    0.001   -4.43997        true    195   1001.0             992      21      12       0        0              0          0.0    101  -404.465\n 1390 │  1390    0.001   -4.767          true    197   1005.0            1001      18      14       0        0              0          0.0    103  -403.051\n 1391 │  1391    0.001   -4.04094        true    196    996.0            1005      11      20       0        0              0          0.0    103  -401.637\n 1392 │  1392    0.001   -3.95256        true    197    995.0             996      12      13       0        0              0          0.0    102  -400.222\n 1393 │  1393    0.001   -4.0265         true    197    996.0             995      17      16       0        0              0          0.0    102  -400.222\n 1394 │  1394    0.001   -3.19667        true    197    986.0             996       6      16       0        0              0          0.0    102  -394.566\n 1395 │  1395    0.001   -4.24295        true    199    999.0             986      23      10       0        0              0          0.0    101  -401.637\n 1396 │  1396    0.001   -4.40455        true    200   1001.0             999      16      14       0        0              0          0.0    103  -401.637\n 1397 │  1397    0.001   -4.07942        true    202    997.0            1001      13      17       0        0              0          0.0    102  -398.808\n 1398 │  1398    0.001   -3.91076        true    202    995.0             997      11      13       0        0              0          0.0    101  -397.394\n 1399 │  1399    0.001   -3.82068        true    203    994.0             995      10      11       0        0              0          0.0    102  -391.737\n 1400 │  1400    0.001   -3.39956        true    201    989.0             994      17      22       0        0              0          0.0    103  -387.495\n 1401 │  1401    0.001   -2.96827        true    201    984.0             989      12      17       0        0              0          0.0    104  -387.495\n 1402 │  1402    0.001   -2.77645        true    200    982.0             984       9      11       0        0              0          0.0    105  -386.08\n 1403 │  1403    0.001   -3.24444        true    199    988.0             982      17      11       0        0              0          0.0    105  -391.737\n 1404 │  1404    0.001   -3.47252        true    202    991.0             988       9       6       0        0              0          0.0    105  -387.495\n 1405 │  1405    0.001   -2.46393        true    199    979.0             991      13      25       0        0              0          0.0    107  -384.666\n 1406 │  1406    0.001   -2.67964        true    200    982.0             979      13      10       0        0              0          0.0    107  -386.08\n 1407 │  1407    0.001   -3.39504        true    200    991.0             982      22      13       0        0              0          0.0    106  -388.909\n 1408 │  1408    0.001   -3.38057        true    200    991.0             991      16      16       0        0              0          0.0    107  -388.909\n 1409 │  1409    0.001   -3.85866        true    204    997.0             991      14       8       0        0              0          0.0    107  -387.495\n 1410 │  1410    0.001   -4.18058        true    204   1001.0             997      13       9       0        0              0          0.0    108  -388.909\n 1411 │  1411    0.001   -4.34506        true    206   1003.0            1001      12      10       0        0              0          0.0    109  -384.666\n 1412 │  1412    0.001   -4.34985        true    208   1003.0            1003      16      16       0        0              0          0.0    109  -380.423\n 1413 │  1413    0.001   -5.40547        true    209   1016.0            1003      17       4       0        0              0          0.0    110  -384.666\n 1414 │  1414    0.001   -5.7515         true    207   1020.0            1016      15      11       0        0              0          0.0    109  -381.838\n 1415 │  1415    0.001   -5.54283        true    207   1017.0            1020      15      18       0        0              0          0.0    109  -380.423\n 1416 │  1416    0.001   -4.76347        true    204   1007.0            1017      11      21       0        0              0          0.0    108  -377.595\n 1417 │  1417    0.001   -5.01737        true    202   1010.0            1007      17      14       0        0              0          0.0    107  -380.423\n 1418 │  1418    0.001   -5.35582        true    202   1014.0            1010      15      11       0        0              0          0.0    107  -384.666\n 1419 │  1419    0.001   -5.4585         true    203   1015.0            1014      14      13       0        0              0          0.0    107  -381.838\n 1420 │  1420    0.001   -6.44139        true    205   1027.0            1015      19       7       0        0              0          0.0    108  -381.838\n 1421 │  1421    0.001   -5.76577        true    203   1018.0            1027       8      17       0        0              0          0.0    107  -376.181\n 1422 │  1422    0.001   -6.59198        true    201   1028.0            1018      23      13       0        0              0          0.0    107  -379.009\n 1423 │  1423    0.001   -7.03209        true    201   1033.0            1028      14       9       0        0              0          0.0    107  -376.181\n 1424 │  1424    0.001   -6.44963        true    204   1025.0            1033      11      19       0        0              0          0.0    106  -371.938\n 1425 │  1425    0.001   -6.56871        true    205   1026.0            1025      17      16       0        0              0          0.0    106  -370.524\n 1426 │  1426    0.001   -5.81055        true    204   1016.0            1026       9      19       0        0              0          0.0    105  -370.524\n 1427 │  1427    0.001   -6.07654        true    205   1019.0            1016      10       7       0        0              0          0.0    104  -370.524\n 1428 │  1428    0.001   -5.38275        true    201   1010.0            1019      13      22       0        0              0          0.0    103  -369.11\n 1429 │  1429    0.001   -5.07486        true    199   1006.0            1010      14      18       0        0              0          0.0    103  -369.11\n 1430 │  1430    0.001   -4.92204        true    202   1004.0            1006      13      15       0        0              0          0.0    103  -366.281\n 1431 │  1431    0.001   -5.00966        true    199   1005.0            1004      13      12       0        0              0          0.0    102  -363.453\n 1432 │  1432    0.001   -5.0988         true    198   1006.0            1005      17      16       0        0              0          0.0    101  -359.21\n 1433 │  1433    0.001   -5.6742         true    200   1013.0            1006      17      10       0        0              0          0.0    101  -357.796\n 1434 │  1434    0.001   -6.49644        true    200   1023.0            1013      25      15       0        0              0          0.0    100  -363.453\n 1435 │  1435    0.001   -6.6922         true    201   1025.0            1023      14      12       0        0              0          0.0     99  -366.281\n 1436 │  1436    0.001   -6.49253        true    201   1022.0            1025      17      20       0        0              0          0.0     99  -370.524\n 1437 │  1437    0.001   -6.68688        true    203   1024.0            1022      13      11       0        0              0          0.0     99  -370.524\n 1438 │  1438    0.001   -7.04295        true    204   1028.0            1024      20      16       0        0              0          0.0    101  -374.767\n 1439 │  1439    0.001   -6.36959        true    204   1019.0            1028      13      22       0        0              0          0.0    100  -373.352\n 1440 │  1440    0.001   -6.39971        true    205   1019.0            1019      16      16       0        0              0          0.0    100  -374.767\n 1441 │  1441    0.001   -6.58982        true    203   1021.0            1019      16      14       0        0              0          0.0     99  -376.181\n 1442 │  1442    0.001   -6.86249        true    204   1024.0            1021      17      14       0        0              0          0.0     98  -381.838\n 1443 │  1443    0.001   -5.93854        true    203   1012.0            1024      10      22       0        0              0          0.0     99  -376.181\n 1444 │  1444    0.001   -5.7962         true    206   1010.0            1012      15      17       0        0              0          0.0     99  -376.181\n 1445 │  1445    0.001   -6.13465        true    207   1014.0            1010      18      14       0        0              0          0.0     99  -373.352\n 1446 │  1446    0.001   -6.63831        true    208   1020.0            1014      16      10       0        0              0          0.0     99  -373.352\n 1447 │  1447    0.001   -7.14859        true    207   1026.0            1020      18      12       0        0              0          0.0    101  -377.595\n 1448 │  1448    0.001   -6.79102        true    206   1021.0            1026      17      22       0        0              0          0.0    101  -381.838\n 1449 │  1449    0.001   -6.42369        true    204   1016.0            1021      12      17       0        0              0          0.0    100  -377.595\n 1450 │  1450    0.001   -6.2883         true    206   1014.0            1016      11      13       0        0              0          0.0    100  -380.423\n 1451 │  1451    0.001   -5.98801        true    209   1010.0            1014      10      14       0        0              0          0.0     99  -373.352\n 1452 │  1452    0.001   -5.43642        true    208   1003.0            1010      11      18       0        0              0          0.0    100  -373.352\n 1453 │  1453    0.001   -5.52253        true    205   1004.0            1003      14      13       0        0              0          0.0    100  -374.767\n 1454 │  1454    0.001   -4.958          true    204    997.0            1004      14      21       0        0              0          0.0    100  -371.938\n 1455 │  1455    0.001   -4.95319        true    204    997.0             997      16      16       0        0              0          0.0     99  -374.767\n 1456 │  1456    0.001   -3.71137        true    200    982.0             997       7      22       0        0              0          0.0     98  -371.938\n 1457 │  1457    0.001   -4.01402        true    199    986.0             982      15      11       0        0              0          0.0     99  -373.352\n 1458 │  1458    0.001   -3.7428         true    199    983.0             986      13      16       0        0              0          0.0     99  -370.524\n 1459 │  1459    0.001   -3.96402        true    200    986.0             983      18      15       0        0              0          0.0     99  -373.352\n 1460 │  1460    0.001   -3.4434         true    200    980.0             986      12      18       0        0              0          0.0     99  -369.11\n 1461 │  1461    0.001   -3.90914        true    200    986.0             980      14       8       0        0              0          0.0     99  -374.767\n 1462 │  1462    0.001   -3.88658        true    199    986.0             986      10      10       0        0              0          0.0     99  -371.938\n 1463 │  1463    0.001   -4.02937        true    203    988.0             986      12      10       0        0              0          0.0    100  -370.524\n 1464 │  1464    0.001   -4.25746        true    203    991.0             988      18      15       0        0              0          0.0     99  -374.767\n 1465 │  1465    0.001   -3.91296        true    205    987.0             991      11      15       0        0              0          0.0     98  -369.11\n 1466 │  1466    0.001   -4.13967        true    205    990.0             987      21      18       0        0              0          0.0     99  -373.352\n 1467 │  1467    0.001   -3.95858        true    203    988.0             990      10      12       0        0              0          0.0     98  -374.767\n 1468 │  1468    0.001   -4.10427        true    201    990.0             988      11       9       0        0              0          0.0     98  -374.767\n 1469 │  1469    0.001   -4.00573        true    200    989.0             990      14      15       0        0              0          0.0     99  -373.352\n 1470 │  1470    0.001   -3.90548        true    199    988.0             989      15      16       0        0              0          0.0     99  -370.524\n 1471 │  1471    0.001   -3.55513        true    199    984.0             988      12      16       0        0              0          0.0     99  -373.352\n 1472 │  1472    0.001   -3.3633         true    199    982.0             984      10      12       0        0              0          0.0    100  -374.767\n 1473 │  1473    0.001   -3.50026        true    198    984.0             982      15      13       0        0              0          0.0    100  -374.767\n 1474 │  1474    0.001   -3.72286        true    197    987.0             984      15      12       0        0              0          0.0    102  -374.767\n 1475 │  1475    0.001   -4.19647        true    197    993.0             987      16      10       0        0              0          0.0    103  -373.352\n 1476 │  1476    0.001   -3.85586        true    195    989.0             993      12      16       0        0              0          0.0    102  -374.767\n 1477 │  1477    0.001   -4.00301        true    198    991.0             989      14      12       0        0              0          0.0    102  -370.524\n 1478 │  1478    0.001   -3.98855        true    197    991.0             991      16      16       0        0              0          0.0    102  -369.11\n 1479 │  1479    0.001   -4.30278        true    197    995.0             991      16      12       0        0              0          0.0    103  -371.938\n 1480 │  1480    0.001   -3.80121        true    196    989.0             995      15      21       0        0              0          0.0    103  -369.11\n 1481 │  1481    0.001   -4.27707        true    198    995.0             989      20      14       0        0              0          0.0    102  -376.181\n 1482 │  1482    0.001   -4.26905        true    197    995.0             995      17      17       0        0              0          0.0    101  -374.767\n 1483 │  1483    0.001   -4.58841        true    197    999.0             995      15      11       0        0              0          0.0    102  -370.524\n 1484 │  1484    0.001   -4.42328        true    199    997.0             999      12      14       0        0              0          0.0    102  -369.11\n 1485 │  1485    0.001   -4.66364        true    196   1000.0             997      20      17       0        0              0          0.0    102  -373.352\n 1486 │  1486    0.001   -4.66364        true    196   1000.0            1000      12      12       0        0              0          0.0    101  -369.11\n 1487 │  1487    0.001   -5.07063        true    197   1005.0            1000      15      10       0        0              0          0.0    101  -373.352\n 1488 │  1488    0.001   -4.99737        true    196   1004.0            1005      13      14       0        0              0          0.0    101  -370.524\n 1489 │  1489    0.001   -4.84105        true    197   1002.0            1004      14      16       0        0              0          0.0    101  -367.696\n 1490 │  1490    0.001   -4.84424        true    195   1002.0            1002      16      16       0        0              0          0.0    101  -366.281\n 1491 │  1491    0.001   -5.33461        true    198   1008.0            1002      14       8       0        0              0          0.0    102  -367.696\n 1492 │  1492    0.001   -5.26636        true    196   1007.0            1008      15      16       0        0              0          0.0    102  -363.453\n 1493 │  1493    0.001   -5.52026        true    193   1010.0            1007      17      14       0        0              0          0.0    104  -362.039\n 1494 │  1494    0.001   -4.64259        true    191    999.0            1010       6      17       0        0              0          0.0    103  -357.796\n 1495 │  1495    0.001   -5.45375        true    193   1009.0             999      16       6       0        0              0          0.0    103  -360.624\n 1496 │  1496    0.001   -5.14395        true    192   1005.0            1009      16      20       0        0              0          0.0    102  -362.039\n 1497 │  1497    0.001   -4.49978        true    194    997.0            1005      11      19       0        0              0          0.0    101  -362.039\n 1498 │  1498    0.001   -4.49497        true    194    997.0             997      11      11       0        0              0          0.0    101  -357.796\n 1499 │  1499    0.001   -4.65369        true    196    999.0             997      19      17       0        0              0          0.0    101  -357.796\n 1500 │  1500    0.001   -4.16052        true    195    993.0             999       9      15       0        0              0          0.0    101  -357.796\n 1501 │  1501    0.001   -3.73737        true    195    988.0             993      11      16       0        0              0          0.0    101  -356.382\n 1502 │  1502    0.001   -3.55271        true    193    986.0             988      13      15       0        0              0          0.0    100  -356.382\n 1503 │  1503    0.001   -4.18954        true    192    994.0             986      16       8       0        0              0          0.0    100  -360.624\n 1504 │  1504    0.001   -4.01557        true    190    992.0             994      12      14       0        0              0          0.0    101  -359.21\n 1505 │  1505    0.001   -3.92041        true    189    991.0             992      15      16       0        0              0          0.0    101  -359.21\n 1506 │  1506    0.001   -4.23465        true    190    995.0             991      16      12       0        0              0          0.0    102  -357.796\n 1507 │  1507    0.001   -4.88009        true    189   1003.0             995      20      12       0        0              0          0.0    101  -362.039\n 1508 │  1508    0.001   -4.55881        true    190    999.0            1003      11      15       0        0              0          0.0    100  -363.453\n 1509 │  1509    0.001   -5.20806        true    191   1007.0             999      20      12       0        0              0          0.0    101  -362.039\n 1510 │  1510    0.001   -4.65001        true    192   1000.0            1007       7      14       0        0              0          0.0    101  -357.796\n 1511 │  1511    0.001   -4.40484        true    193    997.0            1000      15      18       0        0              0          0.0    100  -360.624\n 1512 │  1512    0.001   -4.6452         true    195   1000.0             997      13      10       0        0              0          0.0     99  -360.624\n 1513 │  1513    0.001   -5.21441        true    197   1007.0            1000      19      12       0        0              0          0.0     99  -362.039\n 1514 │  1514    0.001   -5.46831        true    200   1010.0            1007      14      11       0        0              0          0.0     98  -363.453\n 1515 │  1515    0.001   -5.16042        true    199   1006.0            1010      11      15       0        0              0          0.0     98  -364.867\n 1516 │  1516    0.001   -5.0076         true    195   1004.0            1006      12      14       0        0              0          0.0     99  -366.281\n 1517 │  1517    0.001   -5.01399        true    194   1004.0            1004      14      14       0        0              0          0.0     98  -366.281\n 1518 │  1518    0.001   -5.02038        true    196   1004.0            1004      15      15       0        0              0          0.0     97  -364.867\n 1519 │  1519    0.001   -5.02676        true    195   1004.0            1004      14      14       0        0              0          0.0     98  -366.281\n 1520 │  1520    0.001   -4.7074         true    193   1000.0            1004       8      12       0        0              0          0.0     98  -363.453\n 1521 │  1521    0.001   -5.51935        true    194   1010.0            1000      22      12       0        0              0          0.0     98  -371.938\n 1522 │  1522    0.001   -5.93823        true    193   1015.0            1010      16      11       0        0              0          0.0     99  -374.767\n 1523 │  1523    0.001   -6.12268        true    192   1017.0            1015      16      14       0        0              0          0.0     98  -379.009\n 1524 │  1524    0.001   -5.66681        true    191   1011.0            1017      13      19       0        0              0          0.0     97  -376.181\n 1525 │  1525    0.001   -5.44182        true    190   1008.0            1011      11      14       0        0              0          0.0     97  -373.352\n 1526 │  1526    0.001   -5.21135        true    192   1005.0            1008      13      16       0        0              0          0.0     96  -376.181\n 1527 │  1527    0.001   -4.40332        true    192    995.0            1005       6      16       0        0              0          0.0     96  -371.938\n 1528 │  1528    0.001   -3.73657        true    192    987.0             995      12      20       0        0              0          0.0     96  -371.938\n 1529 │  1529    0.001   -3.88082        true    192    989.0             987      13      11       0        0              0          0.0     97  -374.767\n 1530 │  1530    0.001   -4.02797        true    192    991.0             989      18      16       0        0              0          0.0     97  -374.767\n 1531 │  1531    0.001   -4.26015        true    194    994.0             991      16      13       0        0              0          0.0     97  -373.352\n 1532 │  1532    0.001   -4.16839        true    195    993.0             994      16      17       0        0              0          0.0     96  -374.767\n 1533 │  1533    0.001   -4.81192        true    197   1001.0             993      23      15       0        0              0          0.0     95  -381.838\n 1534 │  1534    0.001   -4.73196        true    195   1000.0            1001      13      14       0        0              0          0.0     94  -379.009\n 1535 │  1535    0.001   -5.05771        true    196   1004.0            1000      12       8       0        0              0          0.0     93  -379.009\n 1536 │  1536    0.001   -4.98278        true    198   1003.0            1004       8       9       0        0              0          0.0     94  -379.009\n 1537 │  1537    0.001   -5.15012        true    198   1005.0            1003      15      13       0        0              0          0.0     94  -379.009\n 1538 │  1538    0.001   -5.56307        true    199   1010.0            1005      14       9       0        0              0          0.0     95  -376.181\n 1539 │  1539    0.001   -5.65974        true    201   1011.0            1010      14      13       0        0              0          0.0     95  -377.595\n 1540 │  1540    0.001   -5.67724        true    199   1011.0            1011      14      14       0        0              0          0.0     95  -376.181\n 1541 │  1541    0.001   -5.53316        true    200   1009.0            1011      11      13       0        0              0          0.0     95  -379.009\n 1542 │  1542    0.001   -5.95086        true    201   1014.0            1009      20      15       0        0              0          0.0     95  -377.595\n 1543 │  1543    0.001   -5.40784        true    200   1007.0            1014      12      19       0        0              0          0.0     96  -380.423\n 1544 │  1544    0.001   -5.33793        true    200   1006.0            1007      12      13       0        0              0          0.0     96  -379.009\n 1545 │  1545    0.001   -5.75206        true    200   1011.0            1006      21      16       0        0              0          0.0     98  -373.352\n 1546 │  1546    0.001   -6.09178        true    202   1015.0            1011      20      16       0        0              0          0.0     98  -367.696\n 1547 │  1547    0.001   -4.98225        true    203   1001.0            1015      10      24       0        0              0          0.0     97  -356.382\n 1548 │  1548    0.001   -5.06532        true    203   1002.0            1001      16      15       0        0              0          0.0     97  -356.382\n 1549 │  1549    0.001   -5.31247        true    200   1005.0            1002      21      18       0        0              0          0.0     96  -363.453\n 1550 │  1550    0.001   -5.4016         true    198   1006.0            1005      12      11       0        0              0          0.0     96  -366.281\n 1551 │  1551    0.001   -4.51401        true    197    995.0            1006       5      16       0        0              0          0.0     95  -362.039\n 1552 │  1552    0.001   -4.34181        true    194    993.0             995      16      18       0        0              0          0.0     95  -362.039\n 1553 │  1553    0.001   -4.16605        true    194    991.0             993      16      18       0        0              0          0.0     94  -359.21\n 1554 │  1554    0.001   -4.15158        true    193    991.0             991      12      12       0        0              0          0.0     94  -357.796\n 1555 │  1555    0.001   -4.13712        true    194    991.0             991      13      13       0        0              0          0.0     94  -357.796\n 1556 │  1556    0.001   -4.61521        true    194    997.0             991      14       8       0        0              0          0.0     95  -360.624\n 1557 │  1557    0.001   -4.93713        true    194   1001.0             997      16      12       0        0              0          0.0     95  -356.382\n 1558 │  1558    0.001   -5.34531        true    193   1006.0            1001      14       9       0        0              0          0.0     96  -356.382\n 1559 │  1559    0.001   -5.67869        true    192   1010.0            1006      21      17       0        0              0          0.0     97  -360.624\n 1560 │  1560    0.001   -6.2582         true    194   1017.0            1010      20      13       0        0              0          0.0     96  -363.453\n 1561 │  1561    0.001   -6.28517        true    196   1017.0            1017      14      14       0        0              0          0.0     95  -367.696\n 1562 │  1562    0.001   -6.31215        true    197   1017.0            1017      18      18       0        0              0          0.0     96  -363.453\n 1563 │  1563    0.001   -6.41931        true    200   1018.0            1017      14      13       0        0              0          0.0     96  -362.039\n 1564 │  1564    0.001   -6.68798        true    201   1021.0            1018      16      13       0        0              0          0.0     96  -362.039\n 1565 │  1565    0.001   -7.27877        true    202   1028.0            1021      18      11       0        0              0          0.0     96  -362.039\n 1566 │  1566    0.001   -7.08447        true    202   1025.0            1028      13      16       0        0              0          0.0     95  -360.624\n 1567 │  1567    0.001   -7.04433        true    203   1024.0            1025      19      20       0        0              0          0.0     95  -356.382\n 1568 │  1568    0.001   -7.32099        true    203   1027.0            1024      19      16       0        0              0          0.0     94  -362.039\n 1569 │  1569    0.001   -6.80553        true    203   1020.0            1027      12      19       0        0              0          0.0     94  -359.21\n 1570 │  1570    0.001   -6.51659        true    203   1016.0            1020      16      20       0        0              0          0.0     93  -356.382\n 1571 │  1571    0.001   -6.13942        true    203   1011.0            1016      10      15       0        0              0          0.0     95  -354.968\n 1572 │  1572    0.001   -6.31819        true    205   1013.0            1011      14      12       0        0              0          0.0     96  -346.482\n 1573 │  1573    0.001   -6.41937        true    203   1014.0            1013      17      16       0        0              0          0.0     97  -349.311\n 1574 │  1574    0.001   -5.55157        true    201   1003.0            1014       9      20       0        0              0          0.0     96  -346.482\n 1575 │  1575    0.001   -5.31193        true    203   1000.0            1003      15      18       0        0              0          0.0     96  -345.068\n 1576 │  1576    0.001   -5.80006        true    202   1006.0            1000      16      10       0        0              0          0.0     98  -350.725\n 1577 │  1577    0.001   -6.2142         true    202   1011.0            1006      13       8       0        0              0          0.0     99  -349.311\n 1578 │  1578    0.001   -6.2317         true    201   1011.0            1011      10      10       0        0              0          0.0    100  -345.068\n 1579 │  1579    0.001   -6.49098        true    198   1014.0            1011      16      13       0        0              0          0.0    100  -346.482\n 1580 │  1580    0.001   -5.94796        true    200   1007.0            1014      14      21       0        0              0          0.0     99  -342.24\n 1581 │  1581    0.001   -6.36328        true    201   1012.0            1007      16      11       0        0              0          0.0     98  -340.825\n 1582 │  1582    0.001   -6.14011        true    200   1009.0            1012      12      15       0        0              0          0.0     97  -339.411\n 1583 │  1583    0.001   -5.99254        true    203   1007.0            1009      14      16       0        0              0          0.0     98  -335.169\n 1584 │  1584    0.001   -5.43449        true    199   1000.0            1007      10      17       0        0              0          0.0     98  -329.512\n 1585 │  1585    0.001   -5.67893        true    201   1003.0            1000      15      12       0        0              0          0.0     98  -328.098\n 1586 │  1586    0.001   -5.19412        true    199    997.0            1003      11      17       0        0              0          0.0     97  -325.269\n 1587 │  1587    0.001   -5.27112        true    201    998.0             997      15      14       0        0              0          0.0     96  -326.683\n 1588 │  1588    0.001   -5.10422        true    198    996.0             998      11      13       0        0              0          0.0     96  -326.683\n 1589 │  1589    0.001   -4.93379        true    199    994.0             996      14      16       0        0              0          0.0     95  -326.683\n 1590 │  1590    0.001   -4.75981        true    199    992.0             994      13      15       0        0              0          0.0     94  -319.612\n 1591 │  1591    0.001   -4.41726        true    199    988.0             992      13      17       0        0              0          0.0     94  -316.784\n 1592 │  1592    0.001   -4.14979        true    200    985.0             988      10      13       0        0              0          0.0     94  -313.955\n 1593 │  1593    0.001   -3.79357        true    199    981.0             985      10      14       0        0              0          0.0     94  -315.37\n 1594 │  1594    0.001   -3.76288        true    200    981.0             981      14      14       0        0              0          0.0     93  -319.612\n 1595 │  1595    0.001   -3.73218        true    201    981.0             981      16      16       0        0              0          0.0     93  -318.198\n 1596 │  1596    0.001   -3.86768        true    200    983.0             981      16      14       0        0              0          0.0     94  -321.026\n 1597 │  1597    0.001   -4.17162        true    200    987.0             983      11       7       0        0              0          0.0     94  -319.612\n 1598 │  1598    0.001   -4.56301        true    201    992.0             987      17      12       0        0              0          0.0     93  -319.612\n 1599 │  1599    0.001   -3.72341        true    197    982.0             992       7      17       0        0              0          0.0     93  -319.612\n 1600 │  1600    0.001   -4.02605        true    197    986.0             982      12       8       0        0              0          0.0     93  -316.784\n 1601 │  1601    0.001   -4.58076        true    198    993.0             986      14       7       0        0              0          0.0     93  -316.784\n 1602 │  1602    0.001   -4.81567        true    198    996.0             993      17      14       0        0              0          0.0     92  -321.026\n 1603 │  1603    0.001   -4.80926        true    198    996.0             996      16      16       0        0              0          0.0     92  -319.612\n 1604 │  1604    0.001   -5.53688        true    200   1005.0             996      20      11       0        0              0          0.0     93  -322.441\n 1605 │  1605    0.001   -5.05624        true    200    999.0            1005      10      16       0        0              0          0.0     92  -316.784\n 1606 │  1606    0.001   -5.78648        true    200   1008.0             999      16       7       0        0              0          0.0     92  -322.441\n 1607 │  1607    0.001   -5.55601        true    199   1005.0            1008      15      18       0        0              0          0.0     93  -326.683\n 1608 │  1608    0.001   -5.48276        true    201   1004.0            1005      12      13       0        0              0          0.0     92  -323.855\n 1609 │  1609    0.001   -4.83634        true    203    996.0            1004      12      20       0        0              0          0.0     91  -321.026\n 1610 │  1610    0.001   -4.66591        true    207    994.0             996      18      20       0        0              0          0.0     91  -315.37\n 1611 │  1611    0.001   -4.32725        true    208    990.0             994      12      16       0        0              0          0.0     91  -313.955\n 1612 │  1612    0.001   -3.9808         true    208    986.0             990      17      21       0        0              0          0.0     91  -316.784\n 1613 │  1613    0.001   -3.79256        true    210    984.0             986      14      16       0        0              0          0.0     91  -315.37\n 1614 │  1614    0.001   -3.93244        true    210    986.0             984      14      12       0        0              0          0.0     91  -321.026\n 1615 │  1615    0.001   -4.15778        true    208    989.0             986      19      16       0        0              0          0.0     92  -316.784\n 1616 │  1616    0.001   -4.14008        true    208    989.0             989      14      14       0        0              0          0.0     92  -316.784\n 1617 │  1617    0.001   -4.20485        true    207    990.0             989      15      14       0        0              0          0.0     92  -313.955\n 1618 │  1618    0.001   -4.27115        true    208    991.0             990      17      16       0        0              0          0.0     92  -312.541\n 1619 │  1619    0.001   -4.4212         true    208    993.0             991      23      21       0        0              0          0.0     92  -312.541\n 1620 │  1620    0.001   -4.0806         true    207    989.0             993      14      18       0        0              0          0.0     92  -311.127\n 1621 │  1621    0.001   -4.55645        true    206    995.0             989      14       8       0        0              0          0.0     93  -311.127\n 1622 │  1622    0.001   -4.6304         true    207    996.0             995      13      12       0        0              0          0.0     94  -312.541\n 1623 │  1623    0.001   -4.78768        true    207    998.0             996      16      14       0        0              0          0.0     95  -311.127\n 1624 │  1624    0.001   -4.21011        true    207    991.0             998      11      18       0        0              0          0.0     95  -311.127\n 1625 │  1625    0.001   -4.85173        true    209    999.0             991      19      11       0        0              0          0.0     96  -316.784\n 1626 │  1626    0.001   -5.01333        true    209   1001.0             999      17      15       0        0              0          0.0     95  -318.198\n 1627 │  1627    0.001   -4.27794        true    207    992.0            1001      12      21       0        0              0          0.0     94  -316.784\n 1628 │  1628    0.001   -4.75716        true    208    998.0             992      21      15       0        0              0          0.0     94  -319.612\n 1629 │  1629    0.001   -5.08035        true    211   1002.0             998      19      15       0        0              0          0.0     94  -318.198\n 1630 │  1630    0.001   -4.67534        true    209    997.0            1002      12      17       0        0              0          0.0     93  -321.026\n 1631 │  1631    0.001   -4.67054        true    210    997.0             997      13      13       0        0              0          0.0     93  -328.098\n 1632 │  1632    0.001   -4.82926        true    210    999.0             997      13      11       0        0              0          0.0     92  -330.926\n 1633 │  1633    0.001   -3.59314        true    208    984.0             999       8      23       0        0              0          0.0     91  -326.683\n 1634 │  1634    0.001   -3.40131        true    206    982.0             984      12      14       0        0              0          0.0     91  -330.926\n 1635 │  1635    0.001   -3.28911        true    205    981.0             982      11      12       0        0              0          0.0     91  -333.754\n 1636 │  1636    0.001   -3.34156        true    203    982.0             981      14      13       0        0              0          0.0     90  -336.583\n 1637 │  1637    0.001   -3.06282        true    204    979.0             982      13      16       0        0              0          0.0     90  -337.997\n 1638 │  1638    0.001   -2.94547        true    204    978.0             979       8       9       0        0              0          0.0     90  -336.583\n 1639 │  1639    0.001   -2.32373        true    203    971.0             978       9      16       0        0              0          0.0     91  -339.411\n 1640 │  1640    0.001   -2.36064        true    204    972.0             971      14      13       0        0              0          0.0     91  -339.411\n 1641 │  1641    0.001   -2.23121        true    203    971.0             972      11      12       0        0              0          0.0     91  -342.24\n 1642 │  1642    0.001   -2.01587        true    202    969.0             971       8      10       0        0              0          0.0     91  -339.411\n 1643 │  1643    0.001   -1.96549        true    203    969.0             969      12      12       0        0              0          0.0     91  -336.583\n 1644 │  1644    0.001   -2.08335        true    206    971.0             969      13      11       0        0              0          0.0     91  -339.411\n 1645 │  1645    0.001   -1.95218        true    205    970.0             971      13      14       0        0              0          0.0     92  -336.583\n 1646 │  1646    0.001   -2.74038        true    206    980.0             970      17       7       0        0              0          0.0     93  -340.825\n 1647 │  1647    0.001   -2.95747        true    204    983.0             980      13      10       0        0              0          0.0     94  -340.825\n 1648 │  1648    0.001   -3.26141        true    207    987.0             983      19      15       0        0              0          0.0     94  -335.169\n 1649 │  1649    0.001   -3.48812        true    209    990.0             987      10       7       0        0              0          0.0     93  -332.34\n 1650 │  1650    0.001   -3.88312        true    213    995.0             990      14       9       0        0              0          0.0     93  -329.512\n 1651 │  1651    0.001   -3.299          true    214    988.0             995       8      15       0        0              0          0.0     94  -326.683\n 1652 │  1652    0.001   -3.11434        true    215    986.0             988      13      15       0        0              0          0.0     94  -328.098\n 1653 │  1653    0.001   -3.33968        true    213    989.0             986      17      14       0        0              0          0.0     94  -329.512\n 1654 │  1654    0.001   -3.23943        true    212    988.0             989      13      14       0        0              0          0.0     94  -332.34\n 1655 │  1655    0.001   -2.5567         true    211    980.0             988      10      18       0        0              0          0.0     94  -330.926\n 1656 │  1656    0.001   -2.60759        true    207    981.0             980      13      12       0        0              0          0.0     95  -332.34\n 1657 │  1657    0.001   -2.5769         true    206    981.0             981      13      13       0        0              0          0.0     95  -332.34\n 1658 │  1658    0.001   -2.79537        true    203    984.0             981      17      14       0        0              0          0.0     94  -336.583\n 1659 │  1659    0.001   -3.75867        true    206    996.0             984      22      10       0        0              0          0.0     94  -342.24\n 1660 │  1660    0.001   -3.67028        true    208    995.0             996      16      17       0        0              0          0.0     94  -342.24\n 1661 │  1661    0.001   -3.82612        true    207    997.0             995      14      12       0        0              0          0.0     95  -347.897\n 1662 │  1662    0.001   -3.82131        true    207    997.0             997      15      15       0        0              0          0.0     97  -350.725\n 1663 │  1663    0.001   -3.89831        true    207    998.0             997      12      11       0        0              0          0.0     97  -354.968\n 1664 │  1664    0.001   -3.40304        true    209    992.0             998      11      17       0        0              0          0.0     96  -347.897\n 1665 │  1665    0.001   -3.39019        true    211    992.0             992      18      18       0        0              0          0.0     98  -349.311\n 1666 │  1666    0.001   -3.54169        true    211    994.0             992      11       9       0        0              0          0.0     97  -347.897\n 1667 │  1667    0.001   -4.43012        true    214   1005.0             994      21      10       0        0              0          0.0     97  -347.897\n 1668 │  1668    0.001   -5.00449        true    212   1012.0            1005      15       8       0        0              0          0.0     98  -352.139\n 1669 │  1669    0.001   -5.34547        true    213   1016.0            1012      19      15       0        0              0          0.0     97  -350.725\n 1670 │  1670    0.001   -4.23864        true    212   1002.0            1016       3      17       0        0              0          0.0     97  -346.482\n 1671 │  1671    0.001   -4.64801        true    211   1007.0            1002      12       7       0        0              0          0.0     98  -345.068\n 1672 │  1672    0.001   -5.8657         true    213   1022.0            1007      23       8       0        0              0          0.0    100  -352.139\n 1673 │  1673    0.001   -6.29876        true    213   1027.0            1022      22      17       0        0              0          0.0    100  -354.968\n 1674 │  1674    0.001   -6.65859        true    214   1031.0            1027      14      10       0        0              0          0.0     99  -354.968\n 1675 │  1675    0.001   -5.67199        true    210   1018.0            1031      11      24       0        0              0          0.0     99  -352.139\n 1676 │  1676    0.001   -5.62034        true    212   1017.0            1018      12      13       0        0              0          0.0     98  -353.553\n 1677 │  1677    0.001   -5.80762        true    212   1019.0            1017      19      17       0        0              0          0.0     98  -353.553\n 1678 │  1678    0.001   -4.95208        true    212   1008.0            1019       9      20       0        0              0          0.0    100  -356.382\n 1679 │  1679    0.001   -4.23299        true    212    999.0            1008      14      23       0        0              0          0.0    100  -349.311\n 1680 │  1680    0.001   -3.5753         true    211    991.0             999      11      19       0        0              0          0.0    100  -349.311\n 1681 │  1681    0.001   -3.56084        true    210    991.0             991      14      14       0        0              0          0.0    100  -354.968\n 1682 │  1682    0.001   -3.87508        true    213    995.0             991      17      13       0        0              0          0.0    100  -356.382\n 1683 │  1683    0.001   -4.35764        true    214   1001.0             995      16      10       0        0              0          0.0     99  -359.21\n 1684 │  1684    0.001   -4.35924        true    213   1001.0            1001      13      13       0        0              0          0.0     98  -362.039\n 1685 │  1685    0.001   -4.60503        true    213   1004.0            1001      17      14       0        0              0          0.0     98  -359.21\n 1686 │  1686    0.001   -5.33963        true    213   1013.0            1004      16       7       0        0              0          0.0     98  -356.382\n 1687 │  1687    0.001   -5.11828        true    215   1010.0            1013      14      17       0        0              0          0.0     98  -357.796\n 1688 │  1688    0.001   -5.37621        true    214   1013.0            1010      16      13       0        0              0          0.0     99  -360.624\n 1689 │  1689    0.001   -5.15486        true    210   1010.0            1013      11      14       0        0              0          0.0     98  -364.867\n 1690 │  1690    0.001   -5.4128         true    211   1013.0            1010      20      17       0        0              0          0.0     98  -363.453\n 1691 │  1691    0.001   -5.2722         true    211   1011.0            1013      12      14       0        0              0          0.0     97  -367.696\n 1692 │  1692    0.001   -5.12812        true    211   1009.0            1011      14      16       0        0              0          0.0     96  -367.696\n 1693 │  1693    0.001   -4.4929         true    212   1001.0            1009      14      22       0        0              0          0.0     95  -367.696\n 1694 │  1694    0.001   -4.81993        true    213   1005.0            1001      14      10       0        0              0          0.0     97  -366.281\n 1695 │  1695    0.001   -5.63583        true    214   1015.0            1005      19       9       0        0              0          0.0     98  -369.11\n 1696 │  1696    0.001   -5.41812        true    216   1012.0            1015       9      12       0        0              0          0.0     98  -366.281\n 1697 │  1697    0.001   -5.19494        true    212   1009.0            1012      16      19       0        0              0          0.0     97  -367.696\n 1698 │  1698    0.001   -5.20928        true    212   1009.0            1009      17      17       0        0              0          0.0     97  -366.281\n 1699 │  1699    0.001   -4.57406        true    212   1001.0            1009      10      18       0        0              0          0.0     97  -360.624\n 1700 │  1700    0.001   -4.33074        true    214    998.0            1001      12      15       0        0              0          0.0     97  -360.624\n 1701 │  1701    0.001   -4.16384        true    213    996.0             998       9      11       0        0              0          0.0     97  -360.624\n 1702 │  1702    0.001   -3.91128        true    213    993.0             996      11      14       0        0              0          0.0     96  -363.453\n 1703 │  1703    0.001   -3.98217        true    211    994.0             993      12      11       0        0              0          0.0     96  -367.696\n 1704 │  1704    0.001   -3.89041        true    211    993.0             994      12      13       0        0              0          0.0     97  -369.11\n 1705 │  1705    0.001   -4.04335        true    210    995.0             993      15      13       0        0              0          0.0     96  -376.181\n 1706 │  1706    0.001   -5.09456        true    215   1008.0             995      22       9       0        0              0          0.0     96  -374.767\n 1707 │  1707    0.001   -4.62014        true    215   1002.0            1008       8      14       0        0              0          0.0     95  -370.524\n 1708 │  1708    0.001   -5.27225        true    216   1010.0            1002      20      12       0        0              0          0.0     94  -374.767\n 1709 │  1709    0.001   -4.63926        true    213   1002.0            1010      11      19       0        0              0          0.0     94  -371.938\n 1710 │  1710    0.001   -4.8864         true    215   1005.0            1002      15      12       0        0              0          0.0     93  -373.352\n 1711 │  1711    0.001   -5.05661        true    217   1007.0            1005      17      15       0        0              0          0.0     93  -376.181\n 1712 │  1712    0.001   -5.22968        true    222   1009.0            1007      15      13       0        0              0          0.0     93  -374.767\n 1713 │  1713    0.001   -5.32484        true    221   1010.0            1009      14      13       0        0              0          0.0     93  -376.181\n 1714 │  1714    0.001   -5.42152        true    217   1011.0            1010      13      12       0        0              0          0.0     93  -377.595\n 1715 │  1715    0.001   -5.60028        true    214   1013.0            1011      17      15       0        0              0          0.0     92  -380.423\n 1716 │  1716    0.001   -5.45969        true    215   1011.0            1013       8      10       0        0              0          0.0     92  -379.009\n 1717 │  1717    0.001   -4.74753        true    212   1002.0            1011      10      19       0        0              0          0.0     92  -377.595\n 1718 │  1718    0.001   -4.09661        true    213    994.0            1002      10      18       0        0              0          0.0     92  -377.595\n 1719 │  1719    0.001   -4.00485        true    213    993.0             994      13      14       0        0              0          0.0     93  -376.181\n 1720 │  1720    0.001   -3.5817         true    211    988.0             993      16      21       0        0              0          0.0     92  -374.767\n 1721 │  1721    0.001   -3.23134        true    210    984.0             988      10      14       0        0              0          0.0     92  -370.524\n 1722 │  1722    0.001   -3.12257        true    209    983.0             984      16      17       0        0              0          0.0     93  -367.696\n 1723 │  1723    0.001   -2.92894        true    208    981.0             983      11      13       0        0              0          0.0     94  -369.11\n 1724 │  1724    0.001   -2.89825        true    208    981.0             981      13      13       0        0              0          0.0     93  -370.524\n 1725 │  1725    0.001   -3.1996         true    204    985.0             981      17      13       0        0              0          0.0     93  -373.352\n 1726 │  1726    0.001   -2.76015        true    204    980.0             985      10      15       0        0              0          0.0     94  -371.938\n 1727 │  1727    0.001   -2.89419        true    201    982.0             980      12      10       0        0              0          0.0     93  -370.524\n 1728 │  1728    0.001   -2.94818        true    204    983.0             982      16      15       0        0              0          0.0     93  -376.181\n 1729 │  1729    0.001   -2.42115        true    202    977.0             983      10      16       0        0              0          0.0     93  -371.938\n 1730 │  1730    0.001   -2.21671        true    202    975.0             977      10      12       0        0              0          0.0     93  -371.938\n 1731 │  1731    0.001   -2.25985        true    204    976.0             975      12      11       0        0              0          0.0     94  -370.524\n 1732 │  1732    0.001   -2.38803        true    205    978.0             976      12      10       0        0              0          0.0     94  -374.767\n 1733 │  1733    0.001   -2.60236        true    208    981.0             978      14      11       0        0              0          0.0     94  -374.767\n 1734 │  1734    0.001   -2.73786        true    209    983.0             981      16      14       0        0              0          0.0     94  -379.009\n 1735 │  1735    0.001   -2.71042        true    207    983.0             983      11      11       0        0              0          0.0     94  -384.666\n 1736 │  1736    0.001   -2.84884        true    210    985.0             983      17      15       0        0              0          0.0     94  -383.252\n 1737 │  1737    0.001   -2.90746        true    208    986.0             985      14      13       0        0              0          0.0     94  -380.423\n 1738 │  1738    0.001   -3.29765        true    209    991.0             986      13       8       0        0              0          0.0     95  -379.009\n 1739 │  1739    0.001   -3.52983        true    209    994.0             991      15      12       0        0              0          0.0     96  -379.009\n 1740 │  1740    0.001   -3.92964        true    208    999.0             994      15      10       0        0              0          0.0     96  -377.595\n 1741 │  1741    0.001   -4.49782        true    213   1006.0             999      16       9       0        0              0          0.0     95  -377.595\n 1742 │  1742    0.001   -4.8312         true    215   1010.0            1006      16      12       0        0              0          0.0     96  -377.595\n 1743 │  1743    0.001   -4.84712        true    218   1010.0            1010      15      15       0        0              0          0.0     95  -376.181\n 1744 │  1744    0.001   -5.66699        true    216   1020.0            1010      19       9       0        0              0          0.0     96  -384.666\n 1745 │  1745    0.001   -5.69867        true    217   1020.0            1020      13      13       0        0              0          0.0     96  -386.08\n 1746 │  1746    0.001   -5.5702         true    219   1018.0            1020      16      18       0        0              0          0.0     97  -384.666\n 1747 │  1747    0.001   -5.0357         true    218   1011.0            1018       8      15       0        0              0          0.0     97  -384.666\n 1748 │  1748    0.001   -4.72972        true    220   1007.0            1011      16      20       0        0              0          0.0     96  -379.009\n 1749 │  1749    0.001   -4.00831        true    220    998.0            1007       9      18       0        0              0          0.0     96  -379.009\n 1750 │  1750    0.001   -3.75944        true    221    995.0             998      10      13       0        0              0          0.0     96  -376.181\n 1751 │  1751    0.001   -3.17532        true    217    988.0             995       7      14       0        0              0          0.0     95  -374.767\n 1752 │  1752    0.001   -2.40928        true    214    979.0             988      10      19       0        0              0          0.0     95  -373.352\n 1753 │  1753    0.001   -2.62499        true    214    982.0             979      12       9       0        0              0          0.0     96  -371.938\n 1754 │  1754    0.001   -1.84462        true    211    973.0             982       7      16       0        0              0          0.0     95  -369.11\n 1755 │  1755    0.001   -2.55214        true    213    982.0             973      22      13       0        0              0          0.0     96  -369.11\n 1756 │  1756    0.001   -2.85478        true    214    986.0             982      15      11       0        0              0          0.0     97  -364.867\n 1757 │  1757    0.001   -3.16259        true    215    990.0             986      13       9       0        0              0          0.0     97  -366.281\n 1758 │  1758    0.001   -2.98149        true    215    988.0             990      11      13       0        0              0          0.0     97  -370.524\n 1759 │  1759    0.001   -3.37409        true    218    993.0             988      19      14       0        0              0          0.0     97  -370.524\n 1760 │  1760    0.001   -3.36285        true    216    993.0             993      15      15       0        0              0          0.0     97  -369.11\n 1761 │  1761    0.001   -3.84318        true    213    999.0             993      17      11       0        0              0          0.0     98  -371.938\n 1762 │  1762    0.001   -4.24897        true    213   1004.0             999      19      14       0        0              0          0.0     98  -370.524\n 1763 │  1763    0.001   -3.92961        true    211   1000.0            1004      12      16       0        0              0          0.0     98  -369.11\n 1764 │  1764    0.001   -3.92961        true    208   1000.0            1000      11      11       0        0              0          0.0     98  -362.039\n 1765 │  1765    0.001   -4.33659        true    208   1005.0            1000      15      10       0        0              0          0.0     99  -360.624\n 1766 │  1766    0.001   -4.83029        true    209   1011.0            1005      19      13       0        0              0          0.0     99  -360.624\n 1767 │  1767    0.001   -4.6862         true    209   1009.0            1011      16      18       0        0              0          0.0     98  -362.039\n 1768 │  1768    0.001   -5.34497        true    208   1017.0            1009      19      11       0        0              0          0.0     97  -364.867\n 1769 │  1769    0.001   -5.45213        true    208   1018.0            1017      14      13       0        0              0          0.0     97  -367.696\n 1770 │  1770    0.001   -5.0789         true    207   1013.0            1018      13      18       0        0              0          0.0     96  -366.281\n 1771 │  1771    0.001   -4.37136        true    205   1004.0            1013      12      21       0        0              0          0.0     96  -362.039\n 1772 │  1772    0.001   -3.56092        true    202    994.0            1004      12      22       0        0              0          0.0     95  -362.039\n 1773 │  1773    0.001   -3.55129        true    202    994.0             994      17      17       0        0              0          0.0     94  -362.039\n 1774 │  1774    0.001   -2.63361        true    201    983.0             994      10      21       0        0              0          0.0     95  -362.039\n 1775 │  1775    0.001   -2.93755        true    201    987.0             983      14      10       0        0              0          0.0     97  -362.039\n 1776 │  1776    0.001   -3.08179        true    200    989.0             987      12      10       0        0              0          0.0     97  -369.11\n 1777 │  1777    0.001   -2.7334         true    199    985.0             989       8      12       0        0              0          0.0     97  -369.11\n 1778 │  1778    0.001   -3.20476        true    200    991.0             985      18      12       0        0              0          0.0     98  -364.867\n 1779 │  1779    0.001   -3.1903         true    200    991.0             991      15      15       0        0              0          0.0     97  -370.524\n 1780 │  1780    0.001   -3.50453        true    202    995.0             991      16      12       0        0              0          0.0     97  -364.867\n 1781 │  1781    0.001   -3.33233        true    201    993.0             995      12      14       0        0              0          0.0     98  -364.867\n 1782 │  1782    0.001   -3.56724        true    199    996.0             993      13      10       0        0              0          0.0     98  -364.867\n 1783 │  1783    0.001   -3.96944        true    198   1001.0             996      11       6       0        0              0          0.0     99  -369.11\n 1784 │  1784    0.001   -3.80784        true    194    999.0            1001      11      13       0        0              0          0.0     99  -369.11\n 1785 │  1785    0.001   -3.88788        true    194   1000.0             999      19      18       0        0              0          0.0    101  -370.524\n 1786 │  1786    0.001   -2.98531        true    195    989.0            1000       9      20       0        0              0          0.0    101  -370.524\n 1787 │  1787    0.001   -3.37911        true    194    994.0             989      15      10       0        0              0          0.0    102  -373.352\n 1788 │  1788    0.001   -3.12283        true    196    991.0             994      11      14       0        0              0          0.0    101  -373.352\n 1789 │  1789    0.001   -3.68273        true    195    998.0             991      15       8       0        0              0          0.0    101  -373.352\n 1790 │  1790    0.001   -4.574          true    196   1009.0             998      23      12       0        0              0          0.0    100  -376.181\n 1791 │  1791    0.001   -4.9917         true    196   1014.0            1009      17      12       0        0              0          0.0    101  -377.595\n 1792 │  1792    0.001   -4.77217        true    197   1011.0            1014       6       9       0        0              0          0.0    100  -376.181\n 1793 │  1793    0.001   -5.03145        true    197   1014.0            1011      15      12       0        0              0          0.0    100  -377.595\n 1794 │  1794    0.001   -5.05369        true    195   1014.0            1014      10      10       0        0              0          0.0    101  -377.595\n 1795 │  1795    0.001   -5.317          true    196   1017.0            1014      13      10       0        0              0          0.0    101  -374.767\n 1796 │  1796    0.001   -5.50429        true    196   1019.0            1017      16      14       0        0              0          0.0    101  -371.938\n 1797 │  1797    0.001   -5.77428        true    196   1022.0            1019      12       9       0        0              0          0.0    102  -373.352\n 1798 │  1798    0.001   -5.64926        true    196   1020.0            1022      14      16       0        0              0          0.0    101  -371.938\n 1799 │  1799    0.001   -4.06505        true    194   1000.0            1020       7      27       0        0              0          0.0    100  -363.453\n 1800 │  1800    0.001   -4.95775        true    199   1011.0            1000      18       7       0        0              0          0.0    100  -363.453\n 1801 │  1801    0.001   -4.24559        true    198   1002.0            1011       7      16       0        0              0          0.0     99  -360.624\n 1802 │  1802    0.001   -4.4115         true    200   1004.0            1002      15      13       0        0              0          0.0     98  -356.382\n 1803 │  1803    0.001   -4.66135        true    200   1007.0            1004      14      11       0        0              0          0.0     99  -357.796\n 1804 │  1804    0.001   -5.15726        true    200   1013.0            1007      18      12       0        0              0          0.0     99  -360.624\n 1805 │  1805    0.001   -4.6121         true    198   1006.0            1013      13      20       0        0              0          0.0     99  -359.21\n 1806 │  1806    0.001   -4.62167        true    198   1006.0            1006      13      13       0        0              0          0.0    100  -357.796\n 1807 │  1807    0.001   -4.55009        true    198   1005.0            1006      12      13       0        0              0          0.0    100  -360.624\n 1808 │  1808    0.001   -5.28556        true    199   1014.0            1005      21      12       0        0              0          0.0    100  -356.382\n 1809 │  1809    0.001   -4.90445        true    196   1009.0            1014      13      18       0        0              0          0.0     99  -356.382\n 1810 │  1810    0.001   -4.75688        true    199   1007.0            1009      15      17       0        0              0          0.0     98  -352.139\n 1811 │  1811    0.001   -4.36187        true    199   1002.0            1007       9      14       0        0              0          0.0     98  -349.311\n 1812 │  1812    0.001   -5.01397        true    201   1010.0            1002      22      14       0        0              0          0.0     98  -356.382\n 1813 │  1813    0.001   -4.38098        true    199   1002.0            1010       8      16       0        0              0          0.0     97  -356.382\n 1814 │  1814    0.001   -4.46558        true    199   1003.0            1002      15      14       0        0              0          0.0     96  -360.624\n 1815 │  1815    0.001   -3.57051        true    198    992.0            1003      11      22       0        0              0          0.0     95  -356.382\n 1816 │  1816    0.001   -3.39298        true    196    990.0             992       9      11       0        0              0          0.0     95  -356.382\n 1817 │  1817    0.001   -3.21188        true    193    988.0             990      14      16       0        0              0          0.0     95  -357.796\n 1818 │  1818    0.001   -2.77856        true    192    983.0             988      11      16       0        0              0          0.0     95  -352.139\n 1819 │  1819    0.001   -3.33015        true    194    990.0             983      21      14       0        0              0          0.0     94  -342.24\n 1820 │  1820    0.001   -3.72515        true    191    995.0             990      17      12       0        0              0          0.0     93  -346.482\n 1821 │  1821    0.001   -3.88098        true    190    997.0             995      19      17       0        0              0          0.0     95  -349.311\n 1822 │  1822    0.001   -4.12135        true    191   1000.0             997      18      15       0        0              0          0.0     96  -352.139\n 1823 │  1823    0.001   -3.71232        true    195    995.0            1000      14      19       0        0              0          0.0     95  -350.725\n 1824 │  1824    0.001   -4.11333        true    197   1000.0             995      18      13       0        0              0          0.0     96  -357.796\n 1825 │  1825    0.001   -3.54012        true    197    993.0            1000       9      16       0        0              0          0.0     96  -352.139\n 1826 │  1826    0.001   -3.69306        true    200    995.0             993      15      13       0        0              0          0.0     96  -352.139\n 1827 │  1827    0.001   -4.3385         true    202   1003.0             995      17       9       0        0              0          0.0     96  -352.139\n 1828 │  1828    0.001   -4.34329        true    204   1003.0            1003      15      15       0        0              0          0.0     95  -352.139\n 1829 │  1829    0.001   -4.34809        true    204   1003.0            1003      14      14       0        0              0          0.0     96  -352.139\n 1830 │  1830    0.001   -4.10844        true    204   1000.0            1003      13      16       0        0              0          0.0     96  -349.311\n 1831 │  1831    0.001   -4.10844        true    198   1000.0            1000      16      16       0        0              0          0.0     96  -356.382\n 1832 │  1832    0.001   -3.86328        true    198    997.0            1000       8      11       0        0              0          0.0     96  -349.311\n 1833 │  1833    0.001   -3.85847        true    198    997.0             997      13      13       0        0              0          0.0     96  -349.311\n 1834 │  1834    0.001   -3.4434         true    194    992.0             997      12      17       0        0              0          0.0     97  -347.897\n 1835 │  1835    0.001   -3.26587        true    193    990.0             992      12      14       0        0              0          0.0     96  -345.068\n 1836 │  1836    0.001   -3.24979        true    193    990.0             990      12      12       0        0              0          0.0     96  -346.482\n 1837 │  1837    0.001   -3.23371        true    193    990.0             990      12      12       0        0              0          0.0     98  -347.897\n 1838 │  1838    0.001   -3.54666        true    191    994.0             990      19      15       0        0              0          0.0     99  -346.482\n 1839 │  1839    0.001   -3.78294        true    191    997.0             994      14      11       0        0              0          0.0    100  -345.068\n 1840 │  1840    0.001   -3.45009        true    189    993.0             997      12      16       0        0              0          0.0     99  -342.24\n 1841 │  1841    0.001   -2.86159        true    189    986.0             993      13      20       0        0              0          0.0     99  -336.583\n 1842 │  1842    0.001   -2.34096        true    185    980.0             986      10      16       0        0              0          0.0     99  -335.169\n 1843 │  1843    0.001   -2.22533        true    187    979.0             980      13      14       0        0              0          0.0    100  -336.583\n 1844 │  1844    0.001   -3.10311        true    188    990.0             979      16       5       0        0              0          0.0    100  -340.825\n 1845 │  1845    0.001   -3.08703        true    187    990.0             990      10      10       0        0              0          0.0     99  -337.997\n 1846 │  1846    0.001   -2.98849        true    189    989.0             990      12      13       0        0              0          0.0     99  -339.411\n 1847 │  1847    0.001   -2.80561        true    193    987.0             989      14      16       0        0              0          0.0    101  -336.583\n 1848 │  1848    0.001   -3.197          true    193    992.0             987      14       9       0        0              0          0.0    100  -337.997\n 1849 │  1849    0.001   -3.3485         true    191    994.0             992      16      14       0        0              0          0.0    100  -336.583\n 1850 │  1850    0.001   -3.42092        true    191    995.0             994      18      17       0        0              0          0.0    100  -342.24\n 1851 │  1851    0.001   -3.4129         true    193    995.0             995      14      14       0        0              0          0.0    102  -340.825\n 1852 │  1852    0.001   -3.2407         true    194    993.0             995      11      13       0        0              0          0.0    102  -342.24\n 1853 │  1853    0.001   -3.14724        true    195    992.0             993       7       8       0        0              0          0.0    102  -339.411\n 1854 │  1854    0.001   -3.38079        true    195    995.0             992      11       8       0        0              0          0.0    101  -340.825\n 1855 │  1855    0.001   -3.70015        true    194    999.0             995      15      11       0        0              0          0.0    102  -339.411\n 1856 │  1856    0.001   -3.61683        true    194    998.0             999      13      14       0        0              0          0.0    101  -345.068\n 1857 │  1857    0.001   -3.69535        true    193    999.0             998      12      11       0        0              0          0.0    100  -345.068\n 1858 │  1858    0.001   -4.5065         true    194   1009.0             999      23      13       0        0              0          0.0     99  -350.725\n 1859 │  1859    0.001   -4.35894        true    191   1007.0            1009      13      15       0        0              0          0.0     98  -353.553\n 1860 │  1860    0.001   -5.33674        true    197   1019.0            1007      18       6       0        0              0          0.0     99  -356.382\n 1861 │  1861    0.001   -5.4469         true    198   1020.0            1019      17      16       0        0              0          0.0     99  -350.725\n 1862 │  1862    0.001   -5.55854        true    198   1021.0            1020      15      14       0        0              0          0.0     98  -352.139\n 1863 │  1863    0.001   -4.46515        true    198   1007.0            1021      10      24       0        0              0          0.0     99  -343.654\n 1864 │  1864    0.001   -4.47631        true    202   1007.0            1007      14      14       0        0              0          0.0     98  -345.068\n 1865 │  1865    0.001   -4.4064         true    201   1006.0            1007      12      13       0        0              0          0.0     98  -343.654\n 1866 │  1866    0.001   -4.49704        true    202   1007.0            1006      11      10       0        0              0          0.0     98  -343.654\n 1867 │  1867    0.001   -3.93899        true    199   1000.0            1007      11      18       0        0              0          0.0     97  -340.825\n 1868 │  1868    0.001   -3.61194        true    195    996.0            1000      13      17       0        0              0          0.0     97  -340.825\n 1869 │  1869    0.001   -3.68741        true    195    997.0             996      12      11       0        0              0          0.0     96  -337.997\n 1870 │  1870    0.001   -3.27235        true    194    992.0             997       9      14       0        0              0          0.0     97  -335.169\n 1871 │  1871    0.001   -4.40306        true    195   1006.0             992      19       5       0        0              0          0.0     97  -336.583\n 1872 │  1872    0.001   -4.81719        true    197   1011.0            1006      15      10       0        0              0          0.0     96  -337.997\n 1873 │  1873    0.001   -4.99596        true    198   1013.0            1011      13      11       0        0              0          0.0     96  -335.169\n 1874 │  1874    0.001   -5.17757        true    198   1015.0            1013      18      16       0        0              0          0.0     97  -333.754\n 1875 │  1875    0.001   -5.20139        true    198   1015.0            1015      19      19       0        0              0          0.0     96  -335.169\n 1876 │  1876    0.001   -4.903          true    199   1011.0            1015      12      16       0        0              0          0.0     96  -332.34\n 1877 │  1877    0.001   -4.59702        true    199   1007.0            1011      13      17       0        0              0          0.0     97  -328.098\n 1878 │  1878    0.001   -4.93167        true    198   1011.0            1007      14      10       0        0              0          0.0     97  -330.926\n 1879 │  1879    0.001   -4.86842        true    198   1010.0            1011      10      11       0        0              0          0.0     97  -328.098\n 1880 │  1880    0.001   -4.15395        true    196   1001.0            1010      12      21       0        0              0          0.0     99  -323.855\n 1881 │  1881    0.001   -4.7242         true    198   1008.0            1001      19      12       0        0              0          0.0     98  -329.512\n 1882 │  1882    0.001   -4.33118        true    197   1003.0            1008      12      17       0        0              0          0.0     99  -328.098\n 1883 │  1883    0.001   -4.57967        true    198   1006.0            1003      12       9       0        0              0          0.0     98  -330.926\n 1884 │  1884    0.001   -3.93774        true    201    998.0            1006      15      23       0        0              0          0.0     98  -325.269\n 1885 │  1885    0.001   -4.34234        true    203   1003.0             998      15      10       0        0              0          0.0     99  -322.441\n 1886 │  1886    0.001   -4.9954         true    201   1011.0            1003      19      11       0        0              0          0.0     99  -326.683\n 1887 │  1887    0.001   -5.49574        true    204   1017.0            1011      15       9       0        0              0          0.0     99  -323.855\n 1888 │  1888    0.001   -4.95912        true    208   1010.0            1017       8      15       0        0              0          0.0     98  -322.441\n 1889 │  1889    0.001   -4.16309        true    203   1000.0            1010      11      21       0        0              0          0.0     98  -322.441\n 1890 │  1890    0.001   -3.75407        true    204    995.0            1000       9      14       0        0              0          0.0     98  -323.855\n 1891 │  1891    0.001   -3.82802        true    203    996.0             995      12      11       0        0              0          0.0     98  -329.512\n 1892 │  1892    0.001   -3.8216         true    201    996.0             996      14      14       0        0              0          0.0    100  -329.512\n 1893 │  1893    0.001   -3.65117        true    201    994.0             996      14      16       0        0              0          0.0    100  -326.683\n 1894 │  1894    0.001   -3.14749        true    199    988.0             994       8      14       0        0              0          0.0     99  -325.269\n 1895 │  1895    0.001   -3.37558        true    199    991.0             988      19      16       0        0              0          0.0    100  -322.441\n 1896 │  1896    0.001   -3.68981        true    199    995.0             991      17      13       0        0              0          0.0    101  -322.441\n 1897 │  1897    0.001   -4.41656        true    200   1004.0             995      19      10       0        0              0          0.0    100  -328.098\n 1898 │  1898    0.001   -4.0972         true    199   1000.0            1004      10      14       0        0              0          0.0     99  -328.098\n 1899 │  1899    0.001   -3.85204        true    199    997.0            1000      13      16       0        0              0          0.0    101  -326.683\n 1900 │  1900    0.001   -3.92903        true    199    998.0             997      14      13       0        0              0          0.0    101  -322.441\n 1901 │  1901    0.001   -3.84402        true    200    997.0             998      13      14       0        0              0          0.0    101  -322.441\n 1902 │  1902    0.001   -4.08439        true    204   1000.0             997      15      12       0        0              0          0.0    101  -319.612\n 1903 │  1903    0.001   -4.08439        true    205   1000.0            1000      18      18       0        0              0          0.0    102  -322.441\n 1904 │  1904    0.001   -4.32882        true    204   1003.0            1000      14      11       0        0              0          0.0    101  -325.269\n 1905 │  1905    0.001   -4.33361        true    205   1003.0            1003      12      12       0        0              0          0.0    100  -325.269\n 1906 │  1906    0.001   -3.43855        true    204    992.0            1003       8      19       0        0              0          0.0    101  -321.026\n 1907 │  1907    0.001   -3.91776        true    205    998.0             992      15       9       0        0              0          0.0    100  -321.026\n 1908 │  1908    0.001   -3.91455        true    205    998.0             998      13      13       0        0              0          0.0    101  -318.198\n 1909 │  1909    0.001   -3.99307        true    205    999.0             998      10       9       0        0              0          0.0    102  -313.955\n 1910 │  1910    0.001   -3.66409        true    203    995.0             999      16      20       0        0              0          0.0    101  -311.127\n 1911 │  1911    0.001   -3.81992        true    205    997.0             995      14      12       0        0              0          0.0    102  -313.955\n 1912 │  1912    0.001   -4.22332        true    207   1002.0             997      13       8       0        0              0          0.0    101  -315.37\n 1913 │  1913    0.001   -3.49027        true    206    993.0            1002       4      13       0        0              0          0.0    100  -313.955\n 1914 │  1914    0.001   -3.14967        true    205    989.0             993      11      15       0        0              0          0.0    100  -315.37\n 1915 │  1915    0.001   -2.386          true    203    980.0             989       7      16       0        0              0          0.0    100  -312.541\n 1916 │  1916    0.001   -2.85175        true    205    986.0             980      16      10       0        0              0          0.0    100  -316.784\n 1917 │  1917    0.001   -2.91191        true    203    987.0             986      12      11       0        0              0          0.0     99  -316.784\n 1918 │  1918    0.001   -2.64257        true    204    984.0             987      17      20       0        0              0          0.0     98  -322.441\n 1919 │  1919    0.001   -2.86516        true    204    987.0             984      16      13       0        0              0          0.0    100  -328.098\n 1920 │  1920    0.001   -2.67871        true    202    985.0             987       8      10       0        0              0          0.0    100  -328.098\n 1921 │  1921    0.001   -2.57164        true    203    984.0             985      12      13       0        0              0          0.0     99  -325.269\n 1922 │  1922    0.001   -2.71152        true    205    986.0             984      11       9       0        0              0          0.0     99  -325.269\n 1923 │  1923    0.001   -2.93686        true    206    989.0             986      16      13       0        0              0          0.0     99  -328.098\n 1924 │  1924    0.001   -2.25642        true    201    981.0             989       9      17       0        0              0          0.0    101  -323.855\n 1925 │  1925    0.001   -2.1425         true    200    980.0             981      11      12       0        0              0          0.0    101  -326.683\n 1926 │  1926    0.001   -1.77644        true    198    976.0             980       9      13       0        0              0          0.0    101  -328.098\n 1927 │  1927    0.001   -1.82113        true    199    977.0             976      13      12       0        0              0          0.0    101  -328.098\n 1928 │  1928    0.001   -1.7839         true    198    977.0             977      14      14       0        0              0          0.0    101  -326.683\n 1929 │  1929    0.001   -1.57946        true    197    975.0             977      12      14       0        0              0          0.0    101  -330.926\n 1930 │  1930    0.001   -1.70616        true    198    977.0             975       8       6       0        0              0          0.0    101  -332.34\n 1931 │  1931    0.001   -1.75241        true    196    978.0             977      13      12       0        0              0          0.0    101  -325.269\n 1932 │  1932    0.001   -2.38159        true    196    986.0             978      13       5       0        0              0          0.0    102  -326.683\n 1933 │  1933    0.001   -2.27623        true    199    985.0             986      12      13       0        0              0          0.0    102  -325.269\n 1934 │  1934    0.001   -3.15827        true    203    996.0             985      19       8       0        0              0          0.0    102  -328.098\n 1935 │  1935    0.001   -2.82348        true    204    992.0             996      10      14       0        0              0          0.0    102  -323.855\n 1936 │  1936    0.001   -2.81063        true    203    992.0             992      14      14       0        0              0          0.0    102  -323.855\n 1937 │  1937    0.001   -2.88           true    204    993.0             992      14      13       0        0              0          0.0    102  -328.098\n 1938 │  1938    0.001   -3.03294        true    207    995.0             993      15      13       0        0              0          0.0    103  -323.855\n 1939 │  1939    0.001   -2.11779        true    206    984.0             995       8      19       0        0              0          0.0    103  -323.855\n 1940 │  1940    0.001   -1.5929         true    205    978.0             984      10      16       0        0              0          0.0    102  -323.855\n 1941 │  1941    0.001   -1.47383        true    207    977.0             978       9      10       0        0              0          0.0    101  -329.512\n 1942 │  1942    0.001   -1.18565        true    207    974.0             977      10      13       0        0              0          0.0    100  -329.512\n 1943 │  1943    0.001   -1.39445        true    205    977.0             974      15      12       0        0              0          0.0    100  -332.34\n 1944 │  1944    0.001   -2.76486        true    207    994.0             977      22       5       0        0              0          0.0    100  -335.169\n 1945 │  1945    0.001   -2.91925        true    207    996.0             994      11       9       0        0              0          0.0    100  -337.997\n 1946 │  1946    0.001   -3.48433        true    207   1003.0             996      19      12       0        0              0          0.0    100  -336.583\n 1947 │  1947    0.001   -3.73282        true    206   1006.0            1003      15      12       0        0              0          0.0    100  -337.997\n 1948 │  1948    0.001   -3.66124        true    203   1005.0            1006      12      13       0        0              0          0.0    100  -336.583\n 1949 │  1949    0.001   -3.66922        true    206   1005.0            1005      12      12       0        0              0          0.0    100  -335.169\n 1950 │  1950    0.001   -3.51465        true    205   1003.0            1005      13      15       0        0              0          0.0    101  -339.411\n 1951 │  1951    0.001   -3.84422        true    205   1007.0            1003      18      14       0        0              0          0.0    101  -340.825\n 1952 │  1952    0.001   -3.36773        true    204   1001.0            1007      13      19       0        0              0          0.0    101  -339.411\n 1953 │  1953    0.001   -3.20613        true    205    999.0            1001      15      17       0        0              0          0.0    101  -337.997\n 1954 │  1954    0.001   -2.95912        true    207    996.0             999      14      17       0        0              0          0.0    101  -332.34\n 1955 │  1955    0.001   -2.62433        true    207    992.0             996      13      17       0        0              0          0.0    101  -330.926\n 1956 │  1956    0.001   -2.28178        true    205    988.0             992      10      14       0        0              0          0.0    101  -330.926\n 1957 │  1957    0.001   -2.17984        true    205    987.0             988      14      15       0        0              0          0.0    101  -337.997\n 1958 │  1958    0.001   -1.82753        true    205    983.0             987       7      11       0        0              0          0.0    101  -337.997\n 1959 │  1959    0.001   -2.2141         true    206    988.0             983      17      12       0        0              0          0.0    101  -346.482\n 1960 │  1960    0.001   -3.01654        true    208    998.0             988      21      11       0        0              0          0.0    101  -347.897\n 1961 │  1961    0.001   -2.60349        true    206    993.0             998      11      16       0        0              0          0.0    102  -350.725\n 1962 │  1962    0.001   -2.51004        true    207    992.0             993       7       8       0        0              0          0.0    102  -349.311\n 1963 │  1963    0.001   -2.82556        true    209    996.0             992      15      11       0        0              0          0.0    102  -346.482\n 1964 │  1964    0.001   -2.81914        true    211    996.0             996      15      15       0        0              0          0.0    102  -345.068\n 1965 │  1965    0.001   -2.81273        true    212    996.0             996       9       9       0        0              0          0.0    102  -343.654\n 1966 │  1966    0.001   -3.05173        true    214    999.0             996      13      10       0        0              0          0.0    103  -345.068\n 1967 │  1967    0.001   -2.72275        true    213    995.0             999      10      14       0        0              0          0.0    102  -343.654\n 1968 │  1968    0.001   -3.4495         true    216   1004.0             995      21      12       0        0              0          0.0    102  -347.897\n 1969 │  1969    0.001   -3.78034        true    215   1008.0            1004      18      14       0        0              0          0.0    103  -349.311\n 1970 │  1970    0.001   -3.46864        true    213   1004.0            1008      14      18       0        0              0          0.0    102  -349.311\n 1971 │  1971    0.001   -3.23083        true    212   1001.0            1004      10      13       0        0              0          0.0    103  -347.897\n 1972 │  1972    0.001   -3.23243        true    216   1001.0            1001      13      13       0        0              0          0.0    103  -347.897\n 1973 │  1973    0.001   -2.98911        true    213    998.0            1001      12      15       0        0              0          0.0    103  -345.068\n 1974 │  1974    0.001   -3.31231        true    210   1002.0             998      19      15       0        0              0          0.0    102  -347.897\n 1975 │  1975    0.001   -3.47822        true    209   1004.0            1002      17      15       0        0              0          0.0    101  -349.311\n 1976 │  1976    0.001   -4.05155        true    209   1011.0            1004      16       9       0        0              0          0.0    100  -353.553\n 1977 │  1977    0.001   -4.23032        true    208   1013.0            1011      11       9       0        0              0          0.0    100  -352.139\n 1978 │  1978    0.001   -4.08972        true    206   1011.0            1013      13      15       0        0              0          0.0     99  -353.553\n 1979 │  1979    0.001   -4.26849        true    207   1013.0            1011      11       9       0        0              0          0.0     99  -353.553\n 1980 │  1980    0.001   -4.53046        true    206   1016.0            1013      17      14       0        0              0          0.0     98  -354.968\n 1981 │  1981    0.001   -4.4755         true    205   1015.0            1016      21      22       0        0              0          0.0    100  -359.21\n 1982 │  1982    0.001   -4.65995        true    204   1017.0            1015      17      15       0        0              0          0.0    101  -357.796\n 1983 │  1983    0.001   -4.44586        true    200   1014.0            1017      10      13       0        0              0          0.0    101  -357.796\n 1984 │  1984    0.001   -3.98383        true    198   1008.0            1014      12      18       0        0              0          0.0    101  -357.796\n 1985 │  1985    0.001   -4.56129        true    200   1015.0            1008      14       7       0        0              0          0.0    101  -360.624\n 1986 │  1986    0.001   -4.18215        true    200   1010.0            1015      12      17       0        0              0          0.0    100  -356.382\n 1987 │  1987    0.001   -4.27882        true    201   1011.0            1010      14      13       0        0              0          0.0    102  -353.553\n 1988 │  1988    0.001   -3.32198        true    200    999.0            1011       5      17       0        0              0          0.0    102  -350.725\n 1989 │  1989    0.001   -2.993          true    203    995.0             999       9      13       0        0              0          0.0    102  -346.482\n 1990 │  1990    0.001   -2.5739         true    202    990.0             995      16      21       0        0              0          0.0    102  -347.897\n 1991 │  1991    0.001   -2.06177        true    204    984.0             990       9      15       0        0              0          0.0    102  -345.068\n 1992 │  1992    0.001   -2.36699        true    206    988.0             984      19      15       0        0              0          0.0    103  -349.311\n 1993 │  1993    0.001   -2.75959        true    204    993.0             988      14       9       0        0              0          0.0    103  -349.311\n 1994 │  1994    0.001   -3.23992        true    204    999.0             993      17      11       0        0              0          0.0    103  -352.139\n 1995 │  1995    0.001   -3.72694        true    205   1005.0             999      11       5       0        0              0          0.0    103  -353.553\n 1996 │  1996    0.001   -3.81608        true    200   1006.0            1005      15      14       0        0              0          0.0    102  -357.796\n 1997 │  1997    0.001   -3.74449        true    199   1005.0            1006       9      10       0        0              0          0.0    102  -359.21\n 1998 │  1998    0.001   -3.18213        true    200    998.0            1005      12      19       0        0              0          0.0    102  -352.139\n 1999 │  1999    0.001   -3.26065        true    199    999.0             998      19      18       0        0              0          0.0    101  -353.553\n 2000 │  2000    0.001   -3.09552        true    199    997.0             999       7       9       0        0              0          0.0    101  -350.725\n 2001 │  2001    0.001   -3.25424        true    199    999.0             997       9       7       0        0              0          0.0    101  -350.725\n 2002 │  2002    0.001   -3.17092        true    201    998.0             999      11      12       0        0              0          0.0    101  -345.068\n 2003 │  2003    0.001   -3.57551        true    201   1003.0             998      15      10       0        0              0          0.0    101  -347.897\n 2004 │  2004    0.001   -3.5803         true    202   1003.0            1003      16      16       0        0              0          0.0    100  -353.553\n 2005 │  2005    0.001   -4.15261        true    203   1010.0            1003      14       7       0        0              0          0.0    101  -352.139\n 2006 │  2006    0.001   -4.24928        true    203   1011.0            1010      11      10       0        0              0          0.0    100  -357.796\n 2007 │  2007    0.001   -4.82982        true    202   1018.0            1011      20      13       0        0              0          0.0    100  -366.281\n 2008 │  2008    0.001   -5.01852        true    202   1020.0            1018      14      12       0        0              0          0.0    100  -369.11\n 2009 │  2009    0.001   -5.28986        true    203   1023.0            1020      18      15       0        0              0          0.0     99  -369.11\n 2010 │  2010    0.001   -5.24643        true    200   1022.0            1023      19      20       0        0              0          0.0     99  -373.352\n 2011 │  2011    0.001   -5.6795         true    203   1027.0            1022      19      14       0        0              0          0.0     98  -370.524\n 2012 │  2012    0.001   -5.88088        true    202   1029.0            1027      13      11       0        0              0          0.0     97  -373.352\n 2013 │  2013    0.001   -6.16417        true    201   1032.0            1029      17      14       0        0              0          0.0     97  -371.938\n 2014 │  2014    0.001   -6.2936         true    202   1033.0            1032      15      14       0        0              0          0.0     96  -373.352\n 2015 │  2015    0.001   -5.87021        true    200   1027.0            1033      11      17       0        0              0          0.0     98  -373.352\n 2016 │  2016    0.001   -5.5944         true    199   1023.0            1027      15      19       0        0              0          0.0     98  -374.767\n 2017 │  2017    0.001   -5.94922        true    200   1027.0            1023      17      13       0        0              0          0.0     97  -370.524\n 2018 │  2018    0.001   -5.35372        true    199   1019.0            1027      16      24       0        0              0          0.0     97  -369.11\n 2019 │  2019    0.001   -5.70352        true    199   1023.0            1019      23      19       0        0              0          0.0     97  -366.281\n 2020 │  2020    0.001   -5.58022        true    202   1021.0            1023      16      18       0        0              0          0.0     96  -363.453\n 2021 │  2021    0.001   -5.45347        true    203   1019.0            1021      14      16       0        0              0          0.0     95  -357.796\n 2022 │  2022    0.001   -4.67884        true    203   1009.0            1019      10      20       0        0              0          0.0     94  -352.139\n 2023 │  2023    0.001   -5.09654        true    206   1014.0            1009      16      11       0        0              0          0.0     94  -353.553\n 2024 │  2024    0.001   -4.87701        true    208   1011.0            1014      13      16       0        0              0          0.0     94  -353.553\n 2025 │  2025    0.001   -4.97519        true    209   1012.0            1011      14      13       0        0              0          0.0     94  -347.897\n 2026 │  2026    0.001   -4.99427        true    210   1012.0            1012      19      19       0        0              0          0.0     93  -347.897\n 2027 │  2027    0.001   -4.6092         true    207   1007.0            1012      13      18       0        0              0          0.0     92  -345.068\n 2028 │  2028    0.001   -3.88778        true    205    998.0            1007      13      22       0        0              0          0.0     93  -342.24\n 2029 │  2029    0.001   -3.63892        true    206    995.0             998      15      18       0        0              0          0.0     94  -342.24\n 2030 │  2030    0.001   -3.6309         true    209    995.0             995      15      15       0        0              0          0.0     93  -342.24\n 2031 │  2031    0.001   -3.95026        true    206    999.0             995      17      13       0        0              0          0.0     93  -342.24\n 2032 │  2032    0.001   -4.19334        true    207   1002.0             999      19      16       0        0              0          0.0     93  -343.654\n 2033 │  2033    0.001   -4.60271        true    207   1007.0            1002      23      18       0        0              0          0.0     93  -343.654\n 2034 │  2034    0.001   -4.37041        true    206   1004.0            1007      14      17       0        0              0          0.0     94  -339.411\n 2035 │  2035    0.001   -4.3768         true    205   1004.0            1004      10      10       0        0              0          0.0     95  -339.411\n 2036 │  2036    0.001   -3.64841        true    204    995.0            1004      14      23       0        0              0          0.0     94  -342.24\n 2037 │  2037    0.001   -3.47621        true    205    993.0             995      10      12       0        0              0          0.0     94  -347.897\n 2038 │  2038    0.001   -3.5471         true    204    994.0             993      17      16       0        0              0          0.0     94  -352.139\n 2039 │  2039    0.001   -3.78338        true    206    997.0             994      15      12       0        0              0          0.0     94  -352.139\n 2040 │  2040    0.001   -3.86038        true    206    998.0             997      13      12       0        0              0          0.0     93  -357.796\n 2041 │  2041    0.001   -4.02054        true    206   1000.0             998      15      13       0        0              0          0.0     95  -353.553\n 2042 │  2042    0.001   -3.20043        true    205    990.0            1000       9      19       0        0              0          0.0     95  -352.139\n 2043 │  2043    0.001   -3.01933        true    207    988.0             990      10      12       0        0              0          0.0     95  -349.311\n 2044 │  2044    0.001   -2.83467        true    208    986.0             988       7       9       0        0              0          0.0     95  -346.482\n 2045 │  2045    0.001   -2.56345        true    210    983.0             986      11      14       0        0              0          0.0     94  -345.068\n 2046 │  2046    0.001   -2.2033         true    212    979.0             983      10      14       0        0              0          0.0     95  -343.654\n 2047 │  2047    0.001   -1.6677         true    213    973.0             979      10      16       0        0              0          0.0     95  -342.24\n 2048 │  2048    0.001   -1.70773        true    215    974.0             973      13      12       0        0              0          0.0     96  -342.24\n 2049 │  2049    0.001   -1.91653        true    217    977.0             974      15      12       0        0              0          0.0     97  -342.24\n 2050 │  2050    0.001   -3.04029        true    217    991.0             977      25      11       0        0              0          0.0     98  -343.654\n 2051 │  2051    0.001   -2.86098        true    217    989.0             991      12      14       0        0              0          0.0     97  -340.825\n 2052 │  2052    0.001   -2.42969        true    215    984.0             989       8      13       0        0              0          0.0     97  -337.997\n 2053 │  2053    0.001   -2.56957        true    217    986.0             984      14      12       0        0              0          0.0     97  -339.411\n 2054 │  2054    0.001   -2.38133        true    217    984.0             986      10      12       0        0              0          0.0     97  -335.169\n 2055 │  2055    0.001   -2.02314        true    213    980.0             984      14      18       0        0              0          0.0     97  -333.754\n 2056 │  2056    0.001   -2.15718        true    213    982.0             980      17      15       0        0              0          0.0     97  -336.583\n 2057 │  2057    0.001   -2.37702        true    215    985.0             982      13      10       0        0              0          0.0     97  -335.169\n 2058 │  2058    0.001   -2.68354        true    212    989.0             985      15      11       0        0              0          0.0     96  -335.169\n 2059 │  2059    0.001   -2.66584        true    213    989.0             989      15      15       0        0              0          0.0     96  -333.754\n 2060 │  2060    0.001   -2.56559        true    216    988.0             989      13      14       0        0              0          0.0     95  -335.169\n 2061 │  2061    0.001   -3.12238        true    214    995.0             988      16       9       0        0              0          0.0     94  -337.997\n 2062 │  2062    0.001   -3.03231        true    215    994.0             995      12      13       0        0              0          0.0     95  -335.169\n 2063 │  2063    0.001   -3.26858        true    214    997.0             994      15      12       0        0              0          0.0     95  -337.997\n 2064 │  2064    0.001   -3.26378        true    215    997.0             997      12      12       0        0              0          0.0     95  -337.997\n 2065 │  2065    0.001   -2.43638        true    212    987.0             997       6      16       0        0              0          0.0     95  -335.169\n 2066 │  2066    0.001   -2.58063        true    213    989.0             987      13      11       0        0              0          0.0     96  -336.583\n 2067 │  2067    0.001   -3.13845        true    215    996.0             989      17      10       0        0              0          0.0     96  -339.411\n 2068 │  2068    0.001   -3.13204        true    213    996.0             996      11      11       0        0              0          0.0     97  -339.411\n 2069 │  2069    0.001   -4.02189        true    217   1007.0             996      17       6       0        0              0          0.0     97  -345.068\n 2070 │  2070    0.001   -4.03305        true    215   1007.0            1007      13      13       0        0              0          0.0     98  -345.068\n 2071 │  2071    0.001   -3.88198        true    215   1005.0            1007      12      14       0        0              0          0.0     98  -343.654\n 2072 │  2072    0.001   -3.72741        true    210   1003.0            1005      19      21       0        0              0          0.0     97  -347.897\n 2073 │  2073    0.001   -4.54174        true    214   1013.0            1003      18       8       0        0              0          0.0     97  -349.311\n 2074 │  2074    0.001   -4.15864        true    213   1008.0            1013       8      13       0        0              0          0.0     97  -347.897\n 2075 │  2075    0.001   -4.49456        true    213   1012.0            1008      16      12       0        0              0          0.0     97  -352.139\n 2076 │  2076    0.001   -4.59424        true    214   1013.0            1012      14      13       0        0              0          0.0     98  -349.311\n 2077 │  2077    0.001   -4.93648        true    217   1017.0            1013      20      16       0        0              0          0.0     99  -345.068\n 2078 │  2078    0.001   -5.12377        true    218   1019.0            1017      13      11       0        0              0          0.0     99  -350.725\n 2079 │  2079    0.001   -5.07376        true    218   1018.0            1019      12      13       0        0              0          0.0     99  -346.482\n 2080 │  2080    0.001   -4.21578        true    214   1007.0            1018      11      22       0        0              0          0.0     98  -347.897\n 2081 │  2081    0.001   -4.22694        true    213   1007.0            1007      16      16       0        0              0          0.0     97  -345.068\n 2082 │  2082    0.001   -4.48084        true    214   1010.0            1007      17      14       0        0              0          0.0     96  -347.897\n 2083 │  2083    0.001   -4.49676        true    213   1010.0            1010      15      15       0        0              0          0.0     95  -350.725\n 2084 │  2084    0.001   -3.61909        true    214    999.0            1010      12      23       0        0              0          0.0     96  -345.068\n 2085 │  2085    0.001   -3.20806        true    214    994.0             999      12      17       0        0              0          0.0     96  -342.24\n 2086 │  2086    0.001   -3.93394        true    212   1003.0             994      14       5       0        0              0          0.0     98  -345.068\n 2087 │  2087    0.001   -4.02004        true    212   1004.0            1003      13      12       0        0              0          0.0    100  -350.725\n 2088 │  2088    0.001   -3.70068        true    211   1000.0            1004      10      14       0        0              0          0.0    102  -353.553\n 2089 │  2089    0.001   -3.61904        true    211    999.0            1000      15      16       0        0              0          0.0    102  -354.968\n 2090 │  2090    0.001   -3.29006        true    212    995.0             999       8      12       0        0              0          0.0    102  -353.553\n 2091 │  2091    0.001   -3.44589        true    211    997.0             995      13      11       0        0              0          0.0    103  -354.968\n 2092 │  2092    0.001   -2.94853        true    211    991.0             997      10      16       0        0              0          0.0    102  -356.382\n 2093 │  2093    0.001   -2.76922        true    210    989.0             991      11      13       0        0              0          0.0    101  -356.382\n 2094 │  2094    0.001   -2.91637        true    210    991.0             989      12      10       0        0              0          0.0    101  -356.382\n 2095 │  2095    0.001   -3.63963        true    211   1000.0             991      21      12       0        0              0          0.0    103  -357.796\n 2096 │  2096    0.001   -3.88406        true    208   1003.0            1000      19      16       0        0              0          0.0    104  -362.039\n 2097 │  2097    0.001   -3.07121        true    209    993.0            1003       5      15       0        0              0          0.0    104  -359.21\n 2098 │  2098    0.001   -2.81307        true    210    990.0             993      12      15       0        0              0          0.0    104  -354.968\n 2099 │  2099    0.001   -3.45374        true    211    998.0             990      17       9       0        0              0          0.0    105  -357.796\n 2100 │  2100    0.001   -3.53226        true    213    999.0             998      13      12       0        0              0          0.0    105  -357.796\n 2101 │  2101    0.001   -4.2625         true    213   1008.0             999      21      12       0        0              0          0.0    105  -363.453\n 2102 │  2102    0.001   -4.67901        true    217   1013.0            1008      19      14       0        0              0          0.0    104  -363.453\n 2103 │  2103    0.001   -5.50125        true    216   1023.0            1013      21      11       0        0              0          0.0    103  -367.696\n 2104 │  2104    0.001   -5.29799        true    212   1020.0            1023      15      18       0        0              0          0.0    103  -370.524\n 2105 │  2105    0.001   -5.96718        true    212   1028.0            1020      17       9       0        0              0          0.0    102  -374.767\n 2106 │  2106    0.001   -5.2137         true    211   1018.0            1028       5      15       0        0              0          0.0    101  -371.938\n 2107 │  2107    0.001   -5.16205        true    207   1017.0            1018      18      19       0        0              0          0.0    101  -371.938\n 2108 │  2108    0.001   -5.42937        true    209   1020.0            1017      16      13       0        0              0          0.0    101  -369.11\n 2109 │  2109    0.001   -5.54102        true    210   1021.0            1020      15      14       0        0              0          0.0    101  -373.352\n 2110 │  2110    0.001   -5.41427        true    210   1019.0            1021      13      15       0        0              0          0.0    102  -367.696\n 2111 │  2111    0.001   -4.96249        true    208   1013.0            1019      10      16       0        0              0          0.0    102  -366.281\n 2112 │  2112    0.001   -5.30474        true    205   1017.0            1013      16      12       0        0              0          0.0    102  -369.11\n 2113 │  2113    0.001   -5.49202        true    204   1019.0            1017      17      15       0        0              0          0.0    101  -370.524\n 2114 │  2114    0.001   -5.12076        true    209   1014.0            1019      17      22       0        0              0          0.0    100  -363.453\n 2115 │  2115    0.001   -4.17156        true    205   1002.0            1014      11      23       0        0              0          0.0    100  -364.867\n 2116 │  2116    0.001   -4.58093        true    205   1007.0            1002      17      12       0        0              0          0.0    100  -366.281\n 2117 │  2117    0.001   -4.754          true    208   1009.0            1007      16      14       0        0              0          0.0     99  -364.867\n 2118 │  2118    0.001   -5.01059        true    208   1012.0            1009      16      13       0        0              0          0.0    100  -366.281\n 2119 │  2119    0.001   -4.86825        true    206   1010.0            1012      11      13       0        0              0          0.0    100  -369.11\n 2120 │  2120    0.001   -4.96492        true    206   1011.0            1010      18      17       0        0              0          0.0     99  -371.938\n 2121 │  2121    0.001   -4.65894        true    206   1007.0            1011      13      17       0        0              0          0.0     99  -370.524\n 2122 │  2122    0.001   -4.99359        true    206   1011.0            1007      13       9       0        0              0          0.0     99  -371.938\n 2123 │  2123    0.001   -4.44414        true    204   1004.0            1011       8      15       0        0              0          0.0     99  -370.524\n 2124 │  2124    0.001   -4.53176        true    202   1005.0            1004      18      17       0        0              0          0.0     98  -373.352\n 2125 │  2125    0.001   -4.21432        true    202   1001.0            1005      11      15       0        0              0          0.0     98  -370.524\n 2126 │  2126    0.001   -4.21592        true    202   1001.0            1001      12      12       0        0              0          0.0     98  -370.524\n 2127 │  2127    0.001   -3.8089         true    201    996.0            1001      10      15       0        0              0          0.0     97  -371.938\n 2128 │  2128    0.001   -3.22697        true    198    989.0             996      10      17       0        0              0          0.0     97  -373.352\n 2129 │  2129    0.001   -2.54653        true    201    981.0             989      11      19       0        0              0          0.0     96  -373.352\n 2130 │  2130    0.001   -3.0134         true    203    987.0             981      16      10       0        0              0          0.0     95  -370.524\n 2131 │  2131    0.001   -3.81505        true    203    997.0             987      17       7       0        0              0          0.0     96  -373.352\n 2132 │  2132    0.001   -4.21845        true    204   1002.0             997      20      15       0        0              0          0.0     96  -373.352\n 2133 │  2133    0.001   -4.62782        true    205   1007.0            1002      18      13       0        0              0          0.0     96  -373.352\n 2134 │  2134    0.001   -3.90641        true    202    998.0            1007       9      18       0        0              0          0.0     95  -374.767\n 2135 │  2135    0.001   -4.63578        true    201   1007.0             998      18       9       0        0              0          0.0     96  -379.009\n 2136 │  2136    0.001   -3.83256        true    201    997.0            1007      14      24       0        0              0          0.0     95  -381.838\n 2137 │  2137    0.001   -3.99128        true    203    999.0             997      12      10       0        0              0          0.0     95  -381.838\n 2138 │  2138    0.001   -3.3336         true    201    991.0             999       9      17       0        0              0          0.0     95  -377.595\n 2139 │  2139    0.001   -3.15428        true    198    989.0             991       7       9       0        0              0          0.0     95  -376.181\n 2140 │  2140    0.001   -3.38373        true    196    992.0             989      19      16       0        0              0          0.0     95  -379.009\n 2141 │  2141    0.001   -3.61728        true    194    995.0             992      16      13       0        0              0          0.0     96  -379.009\n 2142 │  2142    0.001   -3.60926        true    196    995.0             995      14      14       0        0              0          0.0     95  -380.423\n 2143 │  2143    0.001   -3.02514        true    194    988.0             995      10      17       0        0              0          0.0     94  -376.181\n 2144 │  2144    0.001   -2.75768        true    195    985.0             988      11      14       0        0              0          0.0     94  -376.181\n 2145 │  2145    0.001   -3.06419        true    195    989.0             985      20      16       0        0              0          0.0     94  -380.423\n 2146 │  2146    0.001   -3.12896        true    197    990.0             989      12      11       0        0              0          0.0     95  -377.595\n 2147 │  2147    0.001   -4.01455        true    197   1001.0             990      17       6       0        0              0          0.0     95  -379.009\n 2148 │  2148    0.001   -4.01615        true    198   1001.0            1001      14      14       0        0              0          0.0     95  -379.009\n 2149 │  2149    0.001   -4.01775        true    197   1001.0            1001      11      11       0        0              0          0.0     95  -374.767\n 2150 │  2150    0.001   -4.34477        true    202   1005.0            1001      15      11       0        0              0          0.0     95  -373.352\n 2151 │  2151    0.001   -3.94577        true    205   1000.0            1005      12      17       0        0              0          0.0     95  -370.524\n 2152 │  2152    0.001   -3.94577        true    206   1000.0            1000      13      13       0        0              0          0.0     94  -371.938\n 2153 │  2153    0.001   -3.04319        true    205    989.0            1000       8      19       0        0              0          0.0     93  -367.696\n 2154 │  2154    0.001   -3.10796        true    205    990.0             989      16      15       0        0              0          0.0     94  -370.524\n 2155 │  2155    0.001   -2.76152        true    207    986.0             990      10      14       0        0              0          0.0     93  -364.867\n 2156 │  2156    0.001   -1.99071        true    207    977.0             986       7      16       0        0              0          0.0     92  -360.624\n 2157 │  2157    0.001   -1.70253        true    208    974.0             977       8      11       0        0              0          0.0     93  -360.624\n 2158 │  2158    0.001   -1.99481        true    209    978.0             974      16      12       0        0              0          0.0     93  -362.039\n 2159 │  2159    0.001   -2.20914        true    209    981.0             978      13      10       0        0              0          0.0     93  -363.453\n 2160 │  2160    0.001   -2.59329        true    213    986.0             981      13       8       0        0              0          0.0     93  -363.453\n 2161 │  2161    0.001   -2.07267        true    209    980.0             986       8      14       0        0              0          0.0     93  -363.453\n 2162 │  2162    0.001   -2.37273        true    209    984.0             980      16      12       0        0              0          0.0     93  -363.453\n 2163 │  2163    0.001   -2.59532        true    211    987.0             984      13      10       0        0              0          0.0     93  -364.867\n 2164 │  2164    0.001   -2.15996        true    210    982.0             987       8      13       0        0              0          0.0     94  -362.039\n 2165 │  2165    0.001   -1.88123        true    211    979.0             982       8      11       0        0              0          0.0     94  -362.039\n 2166 │  2166    0.001   -1.76388        true    212    978.0             979      11      12       0        0              0          0.0     94  -354.968\n 2167 │  2167    0.001   -1.97821        true    211    981.0             978      14      11       0        0              0          0.0     94  -360.624\n 2168 │  2168    0.001   -2.44508        true    208    987.0             981      19      13       0        0              0          0.0     94  -359.21\n 2169 │  2169    0.001   -3.00082        true    210    994.0             987      17      10       0        0              0          0.0     93  -359.21\n 2170 │  2170    0.001   -2.99119        true    209    994.0             994      11      11       0        0              0          0.0     92  -362.039\n 2171 │  2171    0.001   -2.57007        true    210    989.0             994      16      21       0        0              0          0.0     92  -359.21\n 2172 │  2172    0.001   -1.88962        true    207    981.0             989      11      19       0        0              0          0.0     92  -356.382\n 2173 │  2173    0.001   -2.19098        true    207    985.0             981       9       5       0        0              0          0.0     92  -359.21\n 2174 │  2174    0.001   -2.1668         true    207    985.0             985      10      10       0        0              0          0.0     92  -359.21\n 2175 │  2175    0.001   -1.3936         true    206    976.0             985      10      19       0        0              0          0.0     92  -356.382\n 2176 │  2176    0.001   -1.18735        true    208    974.0             976       8      10       0        0              0          0.0     93  -357.796\n 2177 │  2177    0.001   -1.47963        true    209    978.0             974      13       9       0        0              0          0.0     93  -357.796\n 2178 │  2178    0.001   -1.44403        true    209    978.0             978      13      13       0        0              0          0.0     93  -359.21\n 2179 │  2179    0.001   -1.65836        true    211    981.0             978      16      13       0        0              0          0.0     92  -357.796\n 2180 │  2180    0.001   -1.79386        true    207    983.0             981      13      11       0        0              0          0.0     93  -353.553\n 2181 │  2181    0.001   -2.18043        true    207    988.0             983      12       7       0        0              0          0.0     93  -353.553\n 2182 │  2182    0.001   -2.40851        true    211    991.0             988      16      13       0        0              0          0.0     93  -352.139\n 2183 │  2183    0.001   -2.80472        true    212    996.0             991      12       7       0        0              0          0.0     95  -354.968\n 2184 │  2184    0.001   -2.63429        true    212    994.0             996      11      13       0        0              0          0.0     95  -350.725\n 2185 │  2185    0.001   -2.46031        true    211    992.0             994      10      12       0        0              0          0.0     94  -349.311\n 2186 │  2186    0.001   -2.28277        true    214    990.0             992      12      14       0        0              0          0.0     96  -349.311\n 2187 │  2187    0.001   -3.16836        true    218   1001.0             990      17       6       0        0              0          0.0     96  -350.725\n 2188 │  2188    0.001   -3.41415        true    215   1004.0            1001      13      10       0        0              0          0.0     96  -354.968\n 2189 │  2189    0.001   -3.50177        true    212   1005.0            1004      14      13       0        0              0          0.0     96  -356.382\n 2190 │  2190    0.001   -3.67198        true    212   1007.0            1005      17      15       0        0              0          0.0     95  -360.624\n 2191 │  2191    0.001   -2.95056        true    214    998.0            1007       9      18       0        0              0          0.0     95  -354.968\n 2192 │  2192    0.001   -2.86556        true    213    997.0             998      12      13       0        0              0          0.0     94  -354.968\n 2193 │  2193    0.001   -3.5129         true    215   1005.0             997      17       9       0        0              0          0.0     95  -353.553\n 2194 │  2194    0.001   -3.03226        true    214    999.0            1005      16      22       0        0              0          0.0     95  -356.382\n 2195 │  2195    0.001   -3.84341        true    215   1009.0             999      19       9       0        0              0          0.0     96  -359.21\n 2196 │  2196    0.001   -4.01933        true    215   1011.0            1009      22      20       0        0              0          0.0     96  -360.624\n 2197 │  2197    0.001   -4.4394         true    215   1016.0            1011      19      14       0        0              0          0.0     96  -360.624\n 2198 │  2198    0.001   -4.70539        true    215   1019.0            1016      18      15       0        0              0          0.0     95  -357.796\n 2199 │  2199    0.001   -4.41456        true    214   1015.0            1019      13      17       0        0              0          0.0     94  -360.624\n 2200 │  2200    0.001   -4.75933        true    214   1019.0            1015      18      14       0        0              0          0.0     95  -363.453\n 2201 │  2201    0.001   -4.86948        true    213   1020.0            1019      14      13       0        0              0          0.0     94  -364.867\n 2202 │  2202    0.001   -4.58053        true    212   1016.0            1020      14      18       0        0              0          0.0     94  -364.867\n 2203 │  2203    0.001   -3.5551         true    211   1003.0            1016       9      22       0        0              0          0.0     94  -362.039\n 2204 │  2204    0.001   -3.72244        true    211   1005.0            1003      19      17       0        0              0          0.0     96  -363.453\n 2205 │  2205    0.001   -3.73042        true    210   1005.0            1005      11      11       0        0              0          0.0     96  -363.453\n 2206 │  2206    0.001   -3.81956        true    208   1006.0            1005      18      17       0        0              0          0.0     96  -362.039\n 2207 │  2207    0.001   -3.17763        true    207    998.0            1006      12      20       0        0              0          0.0     95  -356.382\n 2208 │  2208    0.001   -3.01073        true    208    996.0             998      11      13       0        0              0          0.0     95  -357.796\n 2209 │  2209    0.001   -3.57581        true    211   1003.0             996      14       7       0        0              0          0.0     94  -360.624\n 2210 │  2210    0.001   -3.1728         true    213    998.0            1003       6      11       0        0              0          0.0     94  -356.382\n 2211 │  2211    0.001   -3.5774         true    211   1003.0             998      14       9       0        0              0          0.0     95  -359.21\n 2212 │  2212    0.001   -3.58219        true    210   1003.0            1003      13      13       0        0              0          0.0     96  -356.382\n 2213 │  2213    0.001   -3.83069        true    212   1006.0            1003      12       9       0        0              0          0.0     96  -357.796\n 2214 │  2214    0.001   -3.51516        true    209   1002.0            1006       9      13       0        0              0          0.0     96  -363.453\n 2215 │  2215    0.001   -2.86424        true    207    994.0            1002       8      16       0        0              0          0.0     96  -363.453\n 2216 │  2216    0.001   -3.50873        true    206   1002.0             994      13       5       0        0              0          0.0     95  -366.281\n 2217 │  2217    0.001   -3.51192        true    205   1002.0            1002      15      15       0        0              0          0.0     96  -364.867\n 2218 │  2218    0.001   -3.59652        true    204   1003.0            1002       9       8       0        0              0          0.0     96  -364.867\n 2219 │  2219    0.001   -3.43843        true    206   1001.0            1003      11      13       0        0              0          0.0     96  -363.453\n 2220 │  2220    0.001   -3.52151        true    204   1002.0            1001      16      15       0        0              0          0.0     96  -364.867\n 2221 │  2221    0.001   -4.33504        true    204   1012.0            1002      16       6       0        0              0          0.0     96  -367.696\n 2222 │  2222    0.001   -3.94997        true    202   1007.0            1012      10      15       0        0              0          0.0     96  -367.696\n 2223 │  2223    0.001   -4.44588        true    202   1013.0            1007      16      10       0        0              0          0.0     96  -370.524\n 2224 │  2224    0.001   -4.46655        true    202   1013.0            1013      14      14       0        0              0          0.0     96  -373.352\n 2225 │  2225    0.001   -3.92139        true    197   1006.0            1013      12      19       0        0              0          0.0     96  -373.352\n 2226 │  2226    0.001   -4.65773        true    199   1015.0            1006      19      10       0        0              0          0.0     97  -374.767\n 2227 │  2227    0.001   -4.27859        true    198   1010.0            1015      12      17       0        0              0          0.0     98  -374.767\n 2228 │  2228    0.001   -4.21368        true    200   1009.0            1010      13      14       0        0              0          0.0     98  -371.938\n 2229 │  2229    0.001   -3.98504        true    197   1006.0            1009      12      15       0        0              0          0.0     98  -376.181\n 2230 │  2230    0.001   -4.64095        true    200   1014.0            1006      15       7       0        0              0          0.0     97  -379.009\n 2231 │  2231    0.001   -5.22457        true    202   1021.0            1014      13       6       0        0              0          0.0     97  -380.423\n 2232 │  2232    0.001   -4.77688        true    201   1015.0            1021      10      16       0        0              0          0.0     96  -380.423\n 2233 │  2233    0.001   -4.88105        true    201   1016.0            1015      12      11       0        0              0          0.0     96  -377.595\n 2234 │  2234    0.001   -5.22708        true    199   1020.0            1016      15      11       0        0              0          0.0     96  -376.181\n 2235 │  2235    0.001   -6.13405        true    202   1031.0            1020      18       7       0        0              0          0.0     96  -379.009\n 2236 │  2236    0.001   -5.70663        true    203   1025.0            1031      12      18       0        0              0          0.0     95  -379.009\n 2237 │  2237    0.001   -6.22241        true    202   1031.0            1025      22      16       0        0              0          0.0     95  -381.838\n 2238 │  2238    0.001   -5.63561        true    203   1023.0            1031      13      21       0        0              0          0.0     94  -379.009\n 2239 │  2239    0.001   -5.192          true    203   1017.0            1023      13      19       0        0              0          0.0     94  -374.767\n 2240 │  2240    0.001   -5.21897        true    203   1017.0            1017      17      17       0        0              0          0.0     95  -370.524\n 2241 │  2241    0.001   -6.04438        true    202   1027.0            1017      20      10       0        0              0          0.0     96  -373.352\n 2242 │  2242    0.001   -6.32502        true    206   1030.0            1027      19      16       0        0              0          0.0     95  -374.767\n 2243 │  2243    0.001   -6.29306        true    205   1029.0            1030      16      17       0        0              0          0.0     95  -370.524\n 2244 │  2244    0.001   -6.81322        true    207   1035.0            1029      18      12       0        0              0          0.0     95  -371.938\n 2245 │  2245    0.001   -6.55228        true    204   1031.0            1035      16      20       0        0              0          0.0     95  -373.352\n 2246 │  2246    0.001   -6.04522        true    205   1024.0            1031       7      14       0        0              0          0.0     94  -369.11\n 2247 │  2247    0.001   -5.52344        true    203   1017.0            1024      12      19       0        0              0          0.0     93  -369.11\n 2248 │  2248    0.001   -5.47013        true    204   1016.0            1017      14      15       0        0              0          0.0     92  -364.867\n 2249 │  2249    0.001   -5.09296        true    205   1011.0            1016      12      17       0        0              0          0.0     92  -362.039\n 2250 │  2250    0.001   -5.51303        true    205   1016.0            1011      17      12       0        0              0          0.0     92  -363.453\n 2251 │  2251    0.001   -4.89337        true    207   1008.0            1016      13      21       0        0              0          0.0     92  -359.21\n 2252 │  2252    0.001   -4.58166        true    207   1004.0            1008      14      18       0        0              0          0.0     92  -362.039\n 2253 │  2253    0.001   -4.42534        true    206   1002.0            1004      16      18       0        0              0          0.0     92  -369.11\n 2254 │  2254    0.001   -4.42853        true    205   1002.0            1002      16      16       0        0              0          0.0     91  -371.938\n 2255 │  2255    0.001   -3.44859        true    204    990.0            1002      10      22       0        0              0          0.0     91  -366.281\n 2256 │  2256    0.001   -3.10214        true    204    986.0             990      12      16       0        0              0          0.0     91  -367.696\n 2257 │  2257    0.001   -2.9139         true    203    984.0             986       6       8       0        0              0          0.0     90  -364.867\n 2258 │  2258    0.001   -3.30168        true    200    989.0             984      16      11       0        0              0          0.0     91  -362.039\n 2259 │  2259    0.001   -3.53113        true    203    992.0             989      12       9       0        0              0          0.0     92  -356.382\n 2260 │  2260    0.001   -3.51827        true    203    992.0             992      10      10       0        0              0          0.0     92  -357.796\n 2261 │  2261    0.001   -3.25828        true    204    989.0             992      12      15       0        0              0          0.0     92  -354.968\n 2262 │  2262    0.001   -3.40543        true    204    991.0             989      11       9       0        0              0          0.0     92  -350.725\n 2263 │  2263    0.001   -3.06093        true    202    987.0             991      13      17       0        0              0          0.0     91  -352.139\n 2264 │  2264    0.001   -3.45232        true    201    992.0             987      17      12       0        0              0          0.0     90  -354.968\n 2265 │  2265    0.001   -3.43947        true    202    992.0             992      10      10       0        0              0          0.0     90  -357.796\n 2266 │  2266    0.001   -3.59097        true    200    994.0             992      16      14       0        0              0          0.0     91  -362.039\n 2267 │  2267    0.001   -3.00466        true    200    987.0             994       9      16       0        0              0          0.0     91  -362.039\n 2268 │  2268    0.001   -3.47827        true    202    993.0             987      11       5       0        0              0          0.0     93  -362.039\n 2269 │  2269    0.001   -3.38482        true    199    992.0             993      17      18       0        0              0          0.0     94  -367.696\n 2270 │  2270    0.001   -3.45418        true    198    993.0             992      12      11       0        0              0          0.0     94  -364.867\n 2271 │  2271    0.001   -3.03103        true    203    988.0             993      17      22       0        0              0          0.0     94  -360.624\n 2272 │  2272    0.001   -3.09426        true    203    989.0             988      12      11       0        0              0          0.0     93  -360.624\n 2273 │  2273    0.001   -3.15903        true    200    990.0             989      15      14       0        0              0          0.0     93  -359.21\n 2274 │  2274    0.001   -3.71789        true    201    997.0             990      18      11       0        0              0          0.0     93  -362.039\n 2275 │  2275    0.001   -4.03981        true    199   1001.0             997      14      10       0        0              0          0.0     92  -364.867\n 2276 │  2276    0.001   -4.20428        true    198   1003.0            1001      19      17       0        0              0          0.0     94  -367.696\n 2277 │  2277    0.001   -4.37162        true    196   1005.0            1003      15      13       0        0              0          0.0     96  -366.281\n 2278 │  2278    0.001   -4.54183        true    196   1007.0            1005      11       9       0        0              0          0.0     96  -369.11\n 2279 │  2279    0.001   -4.63399        true    198   1008.0            1007      13      12       0        0              0          0.0     96  -367.696\n 2280 │  2280    0.001   -5.2918         true    199   1016.0            1008      17       9       0        0              0          0.0     96  -367.696\n 2281 │  2281    0.001   -5.39747        true    199   1017.0            1016      13      12       0        0              0          0.0     95  -367.696\n 2282 │  2282    0.001   -5.02227        true    202   1012.0            1017      10      15       0        0              0          0.0     95  -364.867\n 2283 │  2283    0.001   -5.68388        true    205   1020.0            1012      22      14       0        0              0          0.0     96  -366.281\n 2284 │  2284    0.001   -5.95521        true    207   1023.0            1020      15      12       0        0              0          0.0     95  -359.21\n 2285 │  2285    0.001   -7.02201        true    206   1036.0            1023      26      13       0        0              0          0.0     95  -364.867\n 2286 │  2286    0.001   -7.23598        true    207   1038.0            1036      17      15       0        0              0          0.0     95  -369.11\n 2287 │  2287    0.001   -6.98059        true    206   1034.0            1038      13      17       0        0              0          0.0     94  -369.11\n 2288 │  2288    0.001   -6.8761         true    204   1032.0            1034      15      17       0        0              0          0.0     94  -371.938\n 2289 │  2289    0.001   -6.37112        true    198   1025.0            1032      16      23       0        0              0          0.0     94  -371.938\n 2290 │  2290    0.001   -6.09157        true    199   1021.0            1025       9      13       0        0              0          0.0     94  -371.938\n 2291 │  2291    0.001   -6.04486        true    201   1020.0            1021      15      16       0        0              0          0.0     93  -374.767\n 2292 │  2292    0.001   -6.63463        true    201   1027.0            1020      21      14       0        0              0          0.0     93  -371.938\n 2293 │  2293    0.001   -5.39598        true    199   1011.0            1027       4      20       0        0              0          0.0     93  -367.696\n 2294 │  2294    0.001   -5.41348        true    198   1011.0            1011      12      12       0        0              0          0.0     93  -366.281\n 2295 │  2295    0.001   -5.67276        true    198   1014.0            1011      13      10       0        0              0          0.0     93  -364.867\n 2296 │  2296    0.001   -6.41607        true    201   1023.0            1014      19      10       0        0              0          0.0     93  -363.453\n 2297 │  2297    0.001   -6.45246        true    201   1023.0            1023       9       9       0        0              0          0.0     93  -360.624\n 2298 │  2298    0.001   -6.80728        true    202   1027.0            1023      16      12       0        0              0          0.0     93  -367.696\n 2299 │  2299    0.001   -7.08792        true    206   1030.0            1027      17      14       0        0              0          0.0     93  -364.867\n 2300 │  2300    0.001   -7.13522        true    205   1030.0            1030      16      16       0        0              0          0.0     93  -364.867\n 2301 │  2301    0.001   -7.3408         true    204   1032.0            1030      11       9       0        0              0          0.0     92  -363.453\n 2302 │  2302    0.001   -5.95539        true    204   1014.0            1032       7      25       0        0              0          0.0     92  -357.796\n 2303 │  2303    0.001   -5.1689         true    201   1004.0            1014      13      23       0        0              0          0.0     92  -354.968\n 2304 │  2304    0.001   -5.41875        true    200   1007.0            1004      16      13       0        0              0          0.0     92  -353.553\n 2305 │  2305    0.001   -5.18645        true    198   1004.0            1007      19      22       0        0              0          0.0     94  -353.553\n 2306 │  2306    0.001   -4.86709        true    198   1000.0            1004      18      22       0        0              0          0.0     94  -349.311\n 2307 │  2307    0.001   -4.04698        true    198    990.0            1000       7      17       0        0              0          0.0     94  -343.654\n 2308 │  2308    0.001   -4.60584        true    200    997.0             990      20      13       0        0              0          0.0     94  -347.897\n 2309 │  2309    0.001   -4.43718        true    201    995.0             997      10      12       0        0              0          0.0     94  -345.068\n 2310 │  2310    0.001   -4.26497        true    201    993.0             995      12      14       0        0              0          0.0     94  -339.411\n 2311 │  2311    0.001   -5.07138        true    203   1003.0             993      19       9       0        0              0          0.0     94  -342.24\n 2312 │  2312    0.001   -5.80511        true    203   1012.0            1003      19      10       0        0              0          0.0     94  -340.825\n 2313 │  2313    0.001   -6.54668        true    204   1021.0            1012      25      16       0        0              0          0.0     93  -339.411\n 2314 │  2314    0.001   -6.01855        true    202   1014.0            1021      14      21       0        0              0          0.0     92  -337.997\n 2315 │  2315    0.001   -5.55652        true    201   1008.0            1014       9      15       0        0              0          0.0     92  -335.169\n 2316 │  2316    0.001   -5.40721        true    201   1006.0            1008      14      16       0        0              0          0.0     91  -335.169\n 2317 │  2317    0.001   -5.09168        true    201   1002.0            1006      12      16       0        0              0          0.0     91  -335.169\n 2318 │  2318    0.001   -4.8502         true    197    999.0            1002      10      13       0        0              0          0.0     92  -336.583\n 2319 │  2319    0.001   -5.01179        true    199   1001.0             999      14      12       0        0              0          0.0     92  -339.411\n 2320 │  2320    0.001   -4.93183        true    200   1000.0            1001      14      15       0        0              0          0.0     91  -339.411\n 2321 │  2321    0.001   -4.35863        true    199    993.0            1000      10      17       0        0              0          0.0     90  -339.411\n 2322 │  2322    0.001   -5.16503        true    201   1003.0             993      15       5       0        0              0          0.0     90  -339.411\n 2323 │  2323    0.001   -4.68022        true    199    997.0            1003      12      18       0        0              0          0.0     90  -337.997\n 2324 │  2324    0.001   -3.77011        true    196    986.0             997       5      16       0        0              0          0.0     90  -335.169\n 2325 │  2325    0.001   -3.58187        true    199    984.0             986      16      18       0        0              0          0.0     90  -337.997\n 2326 │  2326    0.001   -3.88709        true    200    988.0             984      13       9       0        0              0          0.0     90  -339.411\n 2327 │  2327    0.001   -3.95033        true    201    989.0             988      10       9       0        0              0          0.0     90  -339.411\n 2328 │  2328    0.001   -4.34413        true    205    994.0             989      19      14       0        0              0          0.0     91  -336.583\n 2329 │  2329    0.001   -4.82557        true    207   1000.0             994      20      14       0        0              0          0.0     93  -340.825\n 2330 │  2330    0.001   -4.3345         true    205    994.0            1000      10      16       0        0              0          0.0     93  -339.411\n 2331 │  2331    0.001   -4.16052        true    203    992.0             994       9      11       0        0              0          0.0     93  -342.24\n 2332 │  2332    0.001   -3.65262        true    203    986.0             992      10      16       0        0              0          0.0     92  -342.24\n 2333 │  2333    0.001   -3.96043        true    205    990.0             986      14      10       0        0              0          0.0     93  -343.654\n 2334 │  2334    0.001   -4.02673        true    202    991.0             990      13      12       0        0              0          0.0     93  -345.068\n 2335 │  2335    0.001   -4.34097        true    200    995.0             991      20      16       0        0              0          0.0     94  -345.068\n 2336 │  2336    0.001   -4.66033        true    203    999.0             995      15      11       0        0              0          0.0     95  -346.482\n 2337 │  2337    0.001   -4.74037        true    203   1000.0             999      12      11       0        0              0          0.0     94  -350.725\n 2338 │  2338    0.001   -4.08494        true    203    992.0            1000      11      19       0        0              0          0.0     95  -352.139\n 2339 │  2339    0.001   -3.65976        true    196    987.0             992      13      18       0        0              0          0.0     96  -350.725\n 2340 │  2340    0.001   -3.72146        true    197    988.0             987      17      16       0        0              0          0.0     97  -350.725\n 2341 │  2341    0.001   -4.03184        true    199    992.0             988      16      12       0        0              0          0.0     96  -350.725\n 2342 │  2342    0.001   -4.59277        true    199    999.0             992      16       9       0        0              0          0.0     97  -352.139\n 2343 │  2343    0.001   -4.67281        true    200   1000.0             999      15      14       0        0              0          0.0     98  -353.553\n 2344 │  2344    0.001   -4.67281        true    201   1000.0            1000      16      16       0        0              0          0.0     99  -354.968\n 2345 │  2345    0.001   -4.34576        true    199    996.0            1000      13      17       0        0              0          0.0    101  -352.139\n 2346 │  2346    0.001   -4.58476        true    199    999.0             996      16      13       0        0              0          0.0    100  -349.311\n 2347 │  2347    0.001   -4.09159        true    197    993.0             999      10      16       0        0              0          0.0    101  -353.553\n 2348 │  2348    0.001   -4.08035        true    197    993.0             993      12      12       0        0              0          0.0    101  -350.725\n 2349 │  2349    0.001   -4.39715        true    199    997.0             993      10       6       0        0              0          0.0    101  -350.725\n 2350 │  2350    0.001   -5.0445         true    199   1005.0             997      19      11       0        0              0          0.0    103  -350.725\n 2351 │  2351    0.001   -4.88993        true    200   1003.0            1005      14      16       0        0              0          0.0    103  -350.725\n 2352 │  2352    0.001   -4.65028        true    198   1000.0            1003      15      18       0        0              0          0.0    103  -353.553\n 2353 │  2353    0.001   -5.05727        true    199   1005.0            1000      14       9       0        0              0          0.0    103  -356.382\n 2354 │  2354    0.001   -4.4131         true    196    997.0            1005      13      21       0        0              0          0.0    104  -356.382\n 2355 │  2355    0.001   -4.49009        true    195    998.0             997      11      10       0        0              0          0.0    105  -356.382\n 2356 │  2356    0.001   -4.976          true    197   1004.0             998      15       9       0        0              0          0.0    104  -357.796\n 2357 │  2357    0.001   -5.38776        true    198   1009.0            1004      18      13       0        0              0          0.0    105  -357.796\n 2358 │  2358    0.001   -5.96624        true    202   1016.0            1009      19      12       0        0              0          0.0    104  -357.796\n 2359 │  2359    0.001   -5.50832        true    202   1010.0            1016       9      15       0        0              0          0.0    105  -353.553\n 2360 │  2360    0.001   -5.20043        true    201   1006.0            1010       9      13       0        0              0          0.0    105  -352.139\n 2361 │  2361    0.001   -5.04762        true    201   1004.0            1006       9      11       0        0              0          0.0    105  -353.553\n 2362 │  2362    0.001   -5.21639        true    200   1006.0            1004      17      15       0        0              0          0.0    106  -354.968\n 2363 │  2363    0.001   -5.7112         true    199   1012.0            1006      20      14       0        0              0          0.0    107  -353.553\n 2364 │  2364    0.001   -5.73028        true    200   1012.0            1012      15      15       0        0              0          0.0    107  -354.968\n 2365 │  2365    0.001   -5.99091        true    201   1015.0            1012      19      16       0        0              0          0.0    107  -354.968\n 2366 │  2366    0.001   -5.85378        true    200   1013.0            1015      14      16       0        0              0          0.0    107  -352.139\n 2367 │  2367    0.001   -6.11575        true    199   1016.0            1013      17      14       0        0              0          0.0    107  -345.068\n 2368 │  2368    0.001   -5.65783        true    198   1010.0            1016      11      17       0        0              0          0.0    107  -342.24\n 2369 │  2369    0.001   -5.67375        true    197   1010.0            1010      16      16       0        0              0          0.0    106  -345.068\n 2370 │  2370    0.001   -6.49362        true    201   1020.0            1010      21      11       0        0              0          0.0    106  -347.897\n 2371 │  2371    0.001   -6.12432        true    200   1015.0            1020      14      19       0        0              0          0.0    105  -345.068\n 2372 │  2372    0.001   -5.98719        true    200   1013.0            1015      15      17       0        0              0          0.0    104  -345.068\n 2373 │  2373    0.001   -5.92727        true    198   1012.0            1013      14      15       0        0              0          0.0    103  -349.311\n 2374 │  2374    0.001   -5.29873        true    199   1004.0            1012      17      25       0        0              0          0.0    103  -345.068\n 2375 │  2375    0.001   -5.79131        true    196   1010.0            1004      19      13       0        0              0          0.0    104  -347.897\n 2376 │  2376    0.001   -5.64549        true    196   1008.0            1010      12      14       0        0              0          0.0    104  -347.897\n 2377 │  2377    0.001   -4.76287        true    195    997.0            1008       9      20       0        0              0          0.0    105  -342.24\n 2378 │  2378    0.001   -5.08479        true    196   1001.0             997      12       8       0        0              0          0.0    106  -346.482\n 2379 │  2379    0.001   -5.24926        true    200   1003.0            1001      18      16       0        0              0          0.0    105  -349.311\n 2380 │  2380    0.001   -5.57883        true    201   1007.0            1003      19      15       0        0              0          0.0    104  -353.553\n 2381 │  2381    0.001   -5.10234        true    202   1001.0            1007      12      18       0        0              0          0.0    103  -352.139\n 2382 │  2382    0.001   -5.42937        true    205   1005.0            1001      19      15       0        0              0          0.0    103  -352.139\n 2383 │  2383    0.001   -5.5185         true    205   1006.0            1005      15      14       0        0              0          0.0    103  -350.725\n 2384 │  2384    0.001   -5.03993        true    204   1000.0            1006       7      13       0        0              0          0.0    103  -347.897\n 2385 │  2385    0.001   -4.71288        true    205    996.0            1000       7      11       0        0              0          0.0    103  -345.068\n 2386 │  2386    0.001   -4.70647        true    205    996.0             996      14      14       0        0              0          0.0    102  -343.654\n 2387 │  2387    0.001   -5.35286        true    207   1004.0             996      16       8       0        0              0          0.0    101  -346.482\n 2388 │  2388    0.001   -5.52163        true    204   1006.0            1004      12      10       0        0              0          0.0    101  -345.068\n 2389 │  2389    0.001   -5.04307        true    204   1000.0            1006      13      19       0        0              0          0.0    100  -345.068\n 2390 │  2390    0.001   -5.45005        true    204   1005.0            1000      12       7       0        0              0          0.0    100  -345.068\n 2391 │  2391    0.001   -5.05105        true    203   1000.0            1005      11      16       0        0              0          0.0    100  -342.24\n 2392 │  2392    0.001   -4.96941        true    201    999.0            1000      15      16       0        0              0          0.0    101  -342.24\n 2393 │  2393    0.001   -5.04945        true    201   1000.0             999      16      15       0        0              0          0.0    100  -339.411\n 2394 │  2394    0.001   -4.55837        true    202    994.0            1000      13      19       0        0              0          0.0     99  -337.997\n 2395 │  2395    0.001   -4.54874        true    201    994.0             994       8       8       0        0              0          0.0     98  -333.754\n 2396 │  2396    0.001   -4.53911        true    204    994.0             994      13      13       0        0              0          0.0     98  -332.34\n 2397 │  2397    0.001   -4.61154        true    205    995.0             994      14      13       0        0              0          0.0     97  -335.169\n 2398 │  2398    0.001   -5.58175        true    206   1007.0             995      21       9       0        0              0          0.0     97  -337.997\n 2399 │  2399    0.001   -4.86034        true    208    998.0            1007       6      15       0        0              0          0.0     96  -333.754\n 2400 │  2400    0.001   -5.58971        true    210   1007.0             998      17       8       0        0              0          0.0     96  -337.997\n 2401 │  2401    0.001   -5.8436         true    211   1010.0            1007      16      13       0        0              0          0.0     95  -340.825\n 2402 │  2402    0.001   -5.61679        true    211   1007.0            1010      12      15       0        0              0          0.0     95  -339.411\n 2403 │  2403    0.001   -5.87069        true    211   1010.0            1007      12       9       0        0              0          0.0     94  -336.583\n 2404 │  2404    0.001   -5.64387        true    213   1007.0            1010      14      17       0        0              0          0.0     93  -332.34\n 2405 │  2405    0.001   -5.65503        true    212   1007.0            1007      13      13       0        0              0          0.0     92  -329.512\n 2406 │  2406    0.001   -6.23146        true    214   1014.0            1007      17      10       0        0              0          0.0     93  -330.926\n 2407 │  2407    0.001   -5.93117        true    213   1010.0            1014      10      14       0        0              0          0.0     93  -328.098\n 2408 │  2408    0.001   -5.05351        true    211    999.0            1010      11      22       0        0              0          0.0     93  -322.441\n 2409 │  2409    0.001   -4.72452        true    214    995.0             999      13      17       0        0              0          0.0     93  -323.855\n 2410 │  2410    0.001   -4.22295        true    217    989.0             995      12      18       0        0              0          0.0     92  -321.026\n 2411 │  2411    0.001   -4.53462        true    219    993.0             989      14      10       0        0              0          0.0     94  -318.198\n 2412 │  2412    0.001   -4.35886        true    219    991.0             993      13      15       0        0              0          0.0     93  -321.026\n 2413 │  2413    0.001   -4.75507        true    219    996.0             991      13       8       0        0              0          0.0     93  -325.269\n 2414 │  2414    0.001   -4.17314        true    216    989.0             996      10      17       0        0              0          0.0     92  -325.269\n 2415 │  2415    0.001   -4.40259        true    217    992.0             989      17      14       0        0              0          0.0     92  -322.441\n 2416 │  2416    0.001   -4.8818         true    217    998.0             992      16      10       0        0              0          0.0     91  -322.441\n 2417 │  2417    0.001   -5.205          true    218   1002.0             998      17      13       0        0              0          0.0     91  -323.855\n 2418 │  2418    0.001   -5.3709         true    221   1004.0            1002      16      14       0        0              0          0.0     90  -325.269\n 2419 │  2419    0.001   -5.70175        true    220   1008.0            1004      16      12       0        0              0          0.0     90  -329.512\n 2420 │  2420    0.001   -6.19877        true    217   1014.0            1008      18      12       0        0              0          0.0     90  -328.098\n 2421 │  2421    0.001   -6.1405         true    216   1013.0            1014      15      16       0        0              0          0.0     89  -328.098\n 2422 │  2422    0.001   -5.91915        true    215   1010.0            1013      14      17       0        0              0          0.0     89  -328.098\n 2423 │  2423    0.001   -5.93507        true    214   1010.0            1010      12      12       0        0              0          0.0     88  -326.683\n 2424 │  2424    0.001   -6.27352        true    218   1014.0            1010      17      13       0        0              0          0.0     88  -325.269\n 2425 │  2425    0.001   -6.85714        true    219   1021.0            1014      15       8       0        0              0          0.0     90  -326.683\n 2426 │  2426    0.001   -6.16791        true    218   1012.0            1021      11      20       0        0              0          0.0     90  -326.683\n 2427 │  2427    0.001   -6.98936        true    222   1022.0            1012      23      13       0        0              0          0.0     89  -326.683\n 2428 │  2428    0.001   -5.81765        true    220   1007.0            1022      11      26       0        0              0          0.0     88  -319.612\n 2429 │  2429    0.001   -5.50404        true    219   1003.0            1007      14      18       0        0              0          0.0     88  -322.441\n 2430 │  2430    0.001   -4.36182        true    218    989.0            1003       4      18       0        0              0          0.0     88  -319.612\n 2431 │  2431    0.001   -3.76452        true    215    982.0             989      11      18       0        0              0          0.0     89  -322.441\n 2432 │  2432    0.001   -4.14988        true    218    987.0             982      16      11       0        0              0          0.0     88  -323.855\n 2433 │  2433    0.001   -4.04623        true    220    986.0             987      13      14       0        0              0          0.0     89  -319.612\n 2434 │  2434    0.001   -3.10821        true    218    975.0             986       9      20       0        0              0          0.0     90  -318.198\n 2435 │  2435    0.001   -3.40179        true    218    979.0             975      13       9       0        0              0          0.0     90  -321.026\n 2436 │  2436    0.001   -3.11739        true    218    976.0             979      12      15       0        0              0          0.0     89  -318.198\n 2437 │  2437    0.001   -2.74341        true    216    972.0             976       9      13       0        0              0          0.0     89  -318.198\n 2438 │  2438    0.001   -2.61398        true    216    971.0             972      11      12       0        0              0          0.0     89  -323.855\n 2439 │  2439    0.001   -2.56689        true    218    971.0             971      11      11       0        0              0          0.0     88  -323.855\n 2440 │  2440    0.001   -1.84473        true    217    963.0             971       9      17       0        0              0          0.0     89  -321.026\n 2441 │  2441    0.001   -1.5298         true    217    960.0             963      11      14       0        0              0          0.0     89  -318.198\n 2442 │  2442    0.001   -1.46448        true    219    960.0             960      15      15       0        0              0          0.0     89  -319.612\n 2443 │  2443    0.001   -1.99201        true    218    967.0             960      17      10       0        0              0          0.0     89  -321.026\n 2444 │  2444    0.001   -1.5153         true    219    962.0             967      10      15       0        0              0          0.0     89  -315.37\n 2445 │  2445    0.001   -1.5381         true    221    963.0             962      13      12       0        0              0          0.0     89  -321.026\n 2446 │  2446    0.001   -1.47777        true    221    963.0             963       9       9       0        0              0          0.0     90  -319.612\n 2447 │  2447    0.001   -1.58674        true    221    965.0             963      15      13       0        0              0          0.0     90  -316.784\n 2448 │  2448    0.001   -1.10584        true    223    960.0             965      11      16       0        0              0          0.0     89  -313.955\n 2449 │  2449    0.001   -1.21035        true    223    962.0             960      13      11       0        0              0          0.0     89  -316.784\n 2450 │  2450    0.001   -2.07613        true    221    973.0             962      18       7       0        0              0          0.0     89  -326.683\n 2451 │  2451    0.001   -2.61728        true    223    980.0             973      18      11       0        0              0          0.0     89  -328.098\n 2452 │  2452    0.001   -2.33478        true    221    977.0             980      14      17       0        0              0          0.0     90  -325.269\n 2453 │  2453    0.001   -2.88011        true    220    984.0             977      14       7       0        0              0          0.0     89  -328.098\n 2454 │  2454    0.001   -2.85431        true    218    984.0             984      13      13       0        0              0          0.0     91  -326.683\n 2455 │  2455    0.001   -3.15953        true    217    988.0             984      14      10       0        0              0          0.0     91  -326.683\n 2456 │  2456    0.001   -2.72621        true    216    983.0             988       8      13       0        0              0          0.0     90  -325.269\n 2457 │  2457    0.001   -2.69878        true    217    983.0             983      14      14       0        0              0          0.0     90  -321.026\n 2458 │  2458    0.001   -3.08535        true    215    988.0             983      10       5       0        0              0          0.0     92  -323.855\n 2459 │  2459    0.001   -2.56898        true    214    982.0             988      11      17       0        0              0          0.0     91  -328.098\n 2460 │  2460    0.001   -1.7047         true    213    972.0             982       7      17       0        0              0          0.0     91  -326.683\n 2461 │  2461    0.001   -2.24481        true    213    979.0             972      20      13       0        0              0          0.0     90  -329.512\n 2462 │  2462    0.001   -1.6253         true    207    972.0             979       8      15       0        0              0          0.0     90  -323.855\n 2463 │  2463    0.001   -1.66377        true    205    973.0             972      11      10       0        0              0          0.0     90  -326.683\n 2464 │  2464    0.001   -1.87118        true    206    976.0             973      17      14       0        0              0          0.0     91  -328.098\n 2465 │  2465    0.001   -1.74866        true    205    975.0             976      13      14       0        0              0          0.0     91  -335.169\n 2466 │  2466    0.001   -1.95885        true    205    978.0             975      15      12       0        0              0          0.0     91  -340.825\n 2467 │  2467    0.001   -2.17318        true    203    981.0             978      15      12       0        0              0          0.0     92  -336.583\n 2468 │  2468    0.001   -2.39164        true    202    984.0             981      10       7       0        0              0          0.0     91  -339.411\n 2469 │  2469    0.001   -2.36584        true    202    984.0             984      12      12       0        0              0          0.0     91  -345.068\n 2470 │  2470    0.001   -2.17401        true    203    982.0             984       8      10       0        0              0          0.0     92  -345.068\n 2471 │  2471    0.001   -2.14495        true    203    982.0             982      13      13       0        0              0          0.0     92  -349.311\n 2472 │  2472    0.001   -1.94952        true    204    980.0             982      10      12       0        0              0          0.0     92  -345.068\n 2473 │  2473    0.001   -2.24958        true    205    984.0             980      15      11       0        0              0          0.0     92  -343.654\n 2474 │  2474    0.001   -2.96672        true    205    993.0             984      21      12       0        0              0          0.0     93  -347.897\n 2475 │  2475    0.001   -3.03762        true    204    994.0             993      15      14       0        0              0          0.0     92  -353.553\n 2476 │  2476    0.001   -2.53394        true    207    988.0             994      12      18       0        0              0          0.0     92  -352.139\n 2477 │  2477    0.001   -3.00867        true    207    994.0             988      18      12       0        0              0          0.0     91  -356.382\n 2478 │  2478    0.001   -2.83469        true    205    992.0             994      15      17       0        0              0          0.0     90  -356.382\n 2479 │  2479    0.001   -2.90406        true    205    993.0             992      13      12       0        0              0          0.0     90  -354.968\n 2480 │  2480    0.001   -2.39827        true    203    987.0             993       9      15       0        0              0          0.0     90  -356.382\n 2481 │  2481    0.001   -2.70737        true    204    991.0             987      16      12       0        0              0          0.0     91  -354.968\n 2482 │  2482    0.001   -3.10357        true    202    996.0             991      17      12       0        0              0          0.0     93  -359.21\n 2483 │  2483    0.001   -3.42421        true    203   1000.0             996      16      12       0        0              0          0.0     94  -359.21\n 2484 │  2484    0.001   -3.91235        true    202   1006.0            1000      13       7       0        0              0          0.0     93  -366.281\n 2485 │  2485    0.001   -3.51534        true    202   1001.0            1006       8      13       0        0              0          0.0     93  -362.039\n 2486 │  2486    0.001   -3.51694        true    202   1001.0            1001      17      17       0        0              0          0.0     93  -366.281\n 2487 │  2487    0.001   -3.27362        true    204    998.0            1001      11      14       0        0              0          0.0     93  -364.867\n 2488 │  2488    0.001   -4.08398        true    206   1008.0             998      22      12       0        0              0          0.0     93  -367.696\n 2489 │  2489    0.001   -4.33923        true    207   1011.0            1008      14      11       0        0              0          0.0     93  -369.11\n 2490 │  2490    0.001   -4.59851        true    207   1014.0            1011      14      11       0        0              0          0.0     92  -369.11\n 2491 │  2491    0.001   -4.29822        true    208   1010.0            1014      15      19       0        0              0          0.0     91  -366.281\n 2492 │  2492    0.001   -4.23331        true    208   1009.0            1010      10      11       0        0              0          0.0     91  -371.938\n 2493 │  2493    0.001   -4.5705         true    209   1013.0            1009      12       8       0        0              0          0.0     91  -371.938\n 2494 │  2494    0.001   -3.37384        true    207    998.0            1013       9      24       0        0              0          0.0     91  -367.696\n 2495 │  2495    0.001   -2.79627        true    206    991.0             998      10      17       0        0              0          0.0     92  -367.696\n 2496 │  2496    0.001   -2.86411        true    207    992.0             991       8       7       0        0              0          0.0     93  -366.281\n 2497 │  2497    0.001   -2.52156        true    207    988.0             992      13      17       0        0              0          0.0     93  -364.867\n 2498 │  2498    0.001   -2.41961        true    207    987.0             988      17      18       0        0              0          0.0     93  -369.11\n 2499 │  2499    0.001   -2.4813         true    204    988.0             987      14      13       0        0              0          0.0     94  -373.352\n 2500 │  2500    0.001   -2.627          true    206    990.0             988      14      12       0        0              0          0.0     95  -371.938\n 2501 │  2501    0.001   -2.93996        true    206    994.0             990      16      12       0        0              0          0.0     95  -374.767\n 2502 │  2502    0.001   -3.09435        true    205    996.0             994       9       7       0        0              0          0.0     94  -380.423\n 2503 │  2503    0.001   -3.16982        true    205    997.0             996      11      10       0        0              0          0.0     94  -379.009\n 2504 │  2504    0.001   -2.67246        true    206    991.0             997      15      21       0        0              0          0.0     95  -380.423\n 2505 │  2505    0.001   -2.41059        true    204    988.0             991      13      16       0        0              0          0.0     96  -373.352\n 2506 │  2506    0.001   -3.04935        true    204    996.0             988      15       7       0        0              0          0.0     97  -374.767\n 2507 │  2507    0.001   -3.20662        true    202    998.0             996      14      12       0        0              0          0.0     97  -373.352\n 2508 │  2508    0.001   -3.20342        true    201    998.0             998      12      12       0        0              0          0.0     97  -373.352\n 2509 │  2509    0.001   -3.20022        true    201    998.0             998      10      10       0        0              0          0.0     98  -370.524\n 2510 │  2510    0.001   -2.8693         true    202    994.0             998      11      15       0        0              0          0.0     97  -367.696\n 2511 │  2511    0.001   -3.51379        true    204   1002.0             994      23      15       0        0              0          0.0     99  -371.938\n 2512 │  2512    0.001   -3.51698        true    202   1002.0            1002      11      11       0        0              0          0.0     99  -371.938\n 2513 │  2513    0.001   -3.4387         true    202   1001.0            1002      12      13       0        0              0          0.0     99  -371.938\n 2514 │  2514    0.001   -3.35874        true    202   1000.0            1001      13      14       0        0              0          0.0     99  -371.938\n 2515 │  2515    0.001   -3.84688        true    205   1006.0            1000      18      12       0        0              0          0.0    100  -373.352\n 2516 │  2516    0.001   -3.44987        true    204   1001.0            1006      12      17       0        0              0          0.0    100  -371.938\n 2517 │  2517    0.001   -3.36991        true    202   1000.0            1001      10      11       0        0              0          0.0    100  -376.181\n 2518 │  2518    0.001   -3.36991        true    198   1000.0            1000      14      14       0        0              0          0.0    100  -379.009\n 2519 │  2519    0.001   -3.12474        true    197    997.0            1000      11      14       0        0              0          0.0    100  -379.009\n 2520 │  2520    0.001   -3.11994        true    199    997.0             997      14      14       0        0              0          0.0    101  -377.595\n 2521 │  2521    0.001   -2.78709        true    199    993.0             997      13      17       0        0              0          0.0    101  -376.181\n 2522 │  2522    0.001   -3.91827        true    201   1007.0             993      24      10       0        0              0          0.0    101  -387.495\n 2523 │  2523    0.001   -4.73576        true    205   1017.0            1007      16       6       0        0              0          0.0    101  -390.323\n 2524 │  2524    0.001   -5.00308        true    206   1020.0            1017      15      12       0        0              0          0.0    101  -393.151\n 2525 │  2525    0.001   -4.63379        true    206   1015.0            1020      13      18       0        0              0          0.0    100  -394.566\n 2526 │  2526    0.001   -5.45761        true    206   1025.0            1015      21      11       0        0              0          0.0    100  -397.394\n 2527 │  2527    0.001   -5.65619        true    204   1027.0            1025      13      11       0        0              0          0.0     99  -400.222\n 2528 │  2528    0.001   -5.77823        true    205   1028.0            1027      13      12       0        0              0          0.0     99  -404.465\n 2529 │  2529    0.001   -5.743          true    204   1027.0            1028      13      14       0        0              0          0.0     99  -403.051\n 2530 │  2530    0.001   -5.3075         true    203   1021.0            1027      15      21       0        0              0          0.0     99  -403.051\n 2531 │  2531    0.001   -5.26079        true    205   1020.0            1021      14      15       0        0              0          0.0    100  -407.294\n 2532 │  2532    0.001   -4.32678        true    200   1008.0            1020      10      22       0        0              0          0.0    100  -398.808\n 2533 │  2533    0.001   -4.09631        true    200   1005.0            1008      10      13       0        0              0          0.0    101  -400.222\n 2534 │  2534    0.001   -3.61567        true    201    999.0            1005      15      21       0        0              0          0.0    100  -393.151\n 2535 │  2535    0.001   -3.69571        true    199   1000.0             999      12      11       0        0              0          0.0     99  -394.566\n 2536 │  2536    0.001   -3.28668        true    196    995.0            1000      13      18       0        0              0          0.0     99  -394.566\n 2537 │  2537    0.001   -3.11448        true    194    993.0             995      10      12       0        0              0          0.0     98  -394.566\n 2538 │  2538    0.001   -3.43128        true    194    997.0             993      13       9       0        0              0          0.0     97  -395.98\n 2539 │  2539    0.001   -3.91607        true    196   1003.0             997      19      13       0        0              0          0.0     96  -397.394\n 2540 │  2540    0.001   -4.6498         true    197   1012.0            1003      18       9       0        0              0          0.0     96  -395.98\n 2541 │  2541    0.001   -4.66889        true    198   1012.0            1012      12      12       0        0              0          0.0     96  -397.394\n 2542 │  2542    0.001   -4.44572        true    198   1009.0            1012      11      14       0        0              0          0.0     95  -397.394\n 2543 │  2543    0.001   -5.02421        true    198   1016.0            1009      18      11       0        0              0          0.0     96  -398.808\n 2544 │  2544    0.001   -6.16634        true    200   1030.0            1016      21       7       0        0              0          0.0     97  -401.637\n 2545 │  2545    0.001   -6.13437        true    199   1029.0            1030      13      14       0        0              0          0.0     96  -398.808\n 2546 │  2546    0.001   -5.14264        true    194   1016.0            1029      14      27       0        0              0          0.0     96  -398.808\n 2547 │  2547    0.001   -4.52297        true    198   1008.0            1016      13      21       0        0              0          0.0     96  -395.98\n 2548 │  2548    0.001   -3.72215        true    197    998.0            1008       9      19       0        0              0          0.0     95  -397.394\n 2549 │  2549    0.001   -3.80067        true    198    999.0             998      13      12       0        0              0          0.0     96  -395.98\n 2550 │  2550    0.001   -3.88071        true    201   1000.0             999      16      15       0        0              0          0.0     96  -398.808\n 2551 │  2551    0.001   -3.71735        true    200    998.0            1000      14      16       0        0              0          0.0     96  -400.222\n 2552 │  2552    0.001   -3.71415        true    197    998.0             998       9       9       0        0              0          0.0     96  -397.394\n 2553 │  2553    0.001   -3.3011         true    197    993.0             998      12      17       0        0              0          0.0     95  -398.808\n 2554 │  2554    0.001   -3.20764        true    194    992.0             993      16      17       0        0              0          0.0     95  -395.98\n 2555 │  2555    0.001   -4.01325        true    194   1002.0             992      19       9       0        0              0          0.0     94  -397.394\n 2556 │  2556    0.001   -4.2604         true    196   1005.0            1002      16      13       0        0              0          0.0     93  -395.98\n 2557 │  2557    0.001   -4.34953        true    196   1006.0            1005      13      12       0        0              0          0.0     93  -397.394\n 2558 │  2558    0.001   -4.52117        true    199   1008.0            1006      14      12       0        0              0          0.0     95  -397.394\n 2559 │  2559    0.001   -4.69566        true    198   1010.0            1008      19      17       0        0              0          0.0     95  -397.394\n 2560 │  2560    0.001   -4.79233        true    200   1011.0            1010      14      13       0        0              0          0.0     95  -401.637\n 2561 │  2561    0.001   -5.2124         true    203   1016.0            1011      15      10       0        0              0          0.0     95  -400.222\n 2562 │  2562    0.001   -4.67365        true    202   1009.0            1016       9      16       0        0              0          0.0     95  -395.98\n 2563 │  2563    0.001   -4.52608        true    201   1007.0            1009       8      10       0        0              0          0.0     95  -394.566\n 2564 │  2564    0.001   -4.13107        true    195   1002.0            1007      14      19       0        0              0          0.0     94  -395.98\n 2565 │  2565    0.001   -4.54044        true    194   1007.0            1002      18      13       0        0              0          0.0     95  -393.151\n 2566 │  2566    0.001   -4.22682        true    195   1003.0            1007       7      11       0        0              0          0.0     94  -390.323\n 2567 │  2567    0.001   -4.39417        true    195   1005.0            1003      13      11       0        0              0          0.0     94  -393.151\n 2568 │  2568    0.001   -3.8318         true    193    998.0            1005       8      15       0        0              0          0.0     93  -390.323\n 2569 │  2569    0.001   -4.23639        true    192   1003.0             998      15      10       0        0              0          0.0     94  -387.495\n 2570 │  2570    0.001   -4.64696        true    194   1008.0            1003      10       5       0        0              0          0.0     94  -384.666\n 2571 │  2571    0.001   -4.41649        true    192   1005.0            1008      13      16       0        0              0          0.0     94  -387.495\n 2572 │  2572    0.001   -4.7486         true    190   1009.0            1005      14      10       0        0              0          0.0     95  -386.08\n 2573 │  2573    0.001   -4.68202        true    189   1008.0            1009      15      16       0        0              0          0.0     96  -387.495\n 2574 │  2574    0.001   -4.37032        true    189   1004.0            1008      13      17       0        0              0          0.0     96  -387.495\n 2575 │  2575    0.001   -4.62016        true    191   1007.0            1004      15      12       0        0              0          0.0     95  -384.666\n 2576 │  2576    0.001   -4.30655        true    191   1003.0            1007       8      12       0        0              0          0.0     95  -384.666\n 2577 │  2577    0.001   -4.39266        true    193   1004.0            1003      18      17       0        0              0          0.0     94  -387.495\n 2578 │  2578    0.001   -4.23633        true    194   1002.0            1004      16      18       0        0              0          0.0     93  -384.666\n 2579 │  2579    0.001   -3.66747        true    193    995.0            1002      10      17       0        0              0          0.0     94  -387.495\n 2580 │  2580    0.001   -3.98683        true    193    999.0             995      15      11       0        0              0          0.0     95  -383.252\n 2581 │  2581    0.001   -4.47385        true    193   1005.0             999      17      11       0        0              0          0.0     95  -381.838\n 2582 │  2582    0.001   -4.15641        true    191   1001.0            1005       9      13       0        0              0          0.0     94  -379.009\n 2583 │  2583    0.001   -4.32088        true    192   1003.0            1001      16      14       0        0              0          0.0     94  -383.252\n 2584 │  2584    0.001   -4.40699        true    194   1004.0            1003      14      13       0        0              0          0.0     94  -376.181\n 2585 │  2585    0.001   -4.65684        true    193   1007.0            1004      16      13       0        0              0          0.0     95  -380.423\n 2586 │  2586    0.001   -4.34322        true    195   1003.0            1007       8      12       0        0              0          0.0     95  -381.838\n 2587 │  2587    0.001   -4.02194        true    196    999.0            1003      11      15       0        0              0          0.0     96  -381.838\n 2588 │  2588    0.001   -4.26502        true    196   1002.0             999      14      11       0        0              0          0.0     96  -383.252\n 2589 │  2589    0.001   -4.18674        true    193   1001.0            1002      15      16       0        0              0          0.0     96  -380.423\n 2590 │  2590    0.001   -4.67599        true    192   1007.0            1001      17      11       0        0              0          0.0     96  -379.009\n 2591 │  2591    0.001   -3.95458        true    193    998.0            1007      13      22       0        0              0          0.0     95  -381.838\n 2592 │  2592    0.001   -4.35917        true    196   1003.0             998      15      10       0        0              0          0.0     95  -380.423\n 2593 │  2593    0.001   -4.52651        true    195   1005.0            1003      16      14       0        0              0          0.0     95  -380.423\n 2594 │  2594    0.001   -4.77771        true    195   1008.0            1005      13      10       0        0              0          0.0     95  -383.252\n 2595 │  2595    0.001   -4.46601        true    195   1004.0            1008      17      21       0        0              0          0.0     96  -383.252\n 2596 │  2596    0.001   -5.36156        true    198   1015.0            1004      21      10       0        0              0          0.0     96  -384.666\n 2597 │  2597    0.001   -5.06317        true    196   1011.0            1015      12      16       0        0              0          0.0     95  -386.08\n 2598 │  2598    0.001   -5.40288        true    196   1015.0            1011      15      11       0        0              0          0.0     95  -388.909\n 2599 │  2599    0.001   -5.4267         true    196   1015.0            1015      11      11       0        0              0          0.0     95  -391.737\n 2600 │  2600    0.001   -4.88582        true    197   1008.0            1015      14      21       0        0              0          0.0     94  -387.495\n 2601 │  2601    0.001   -4.57411        true    196   1004.0            1008      11      15       0        0              0          0.0     94  -387.495\n 2602 │  2602    0.001   -4.74289        true    196   1006.0            1004      15      13       0        0              0          0.0     93  -391.737\n 2603 │  2603    0.001   -4.18268        true    194    999.0            1006       8      15       0        0              0          0.0     92  -391.737\n 2604 │  2604    0.001   -3.77165        true    194    994.0             999      13      18       0        0              0          0.0     93  -390.323\n 2605 │  2605    0.001   -3.35052        true    191    989.0             994      14      19       0        0              0          0.0     93  -380.423\n 2606 │  2606    0.001   -3.41529        true    189    990.0             989      15      14       0        0              0          0.0     92  -380.423\n 2607 │  2607    0.001   -2.98604        true    190    985.0             990      11      16       0        0              0          0.0     91  -376.181\n 2608 │  2608    0.001   -2.87898        true    192    984.0             985      16      17       0        0              0          0.0     91  -379.009\n 2609 │  2609    0.001   -2.93605        true    194    985.0             984      12      11       0        0              0          0.0     91  -377.595\n 2610 │  2610    0.001   -2.66296        true    195    982.0             985      13      16       0        0              0          0.0     91  -381.838\n 2611 │  2611    0.001   -2.55076        true    194    981.0             982      13      14       0        0              0          0.0     90  -383.252\n 2612 │  2612    0.001   -2.18667        true    195    977.0             981       9      13       0        0              0          0.0     90  -386.08\n 2613 │  2613    0.001   -2.31631        true    196    979.0             977      14      12       0        0              0          0.0     91  -383.252\n 2614 │  2614    0.001   -2.78093        true    198    985.0             979      16      10       0        0              0          0.0     91  -387.495\n 2615 │  2615    0.001   -3.41681        true    199    993.0             985      21      13       0        0              0          0.0     91  -390.323\n 2616 │  2616    0.001   -3.15867        true    197    990.0             993      11      14       0        0              0          0.0     90  -387.495\n 2617 │  2617    0.001   -2.64654        true    195    984.0             990      10      16       0        0              0          0.0     90  -388.909\n 2618 │  2618    0.001   -2.62074        true    197    984.0             984       9       9       0        0              0          0.0     90  -387.495\n 2619 │  2619    0.001   -2.59493        true    199    984.0             984      16      16       0        0              0          0.0     90  -388.909\n 2620 │  2620    0.001   -2.48615        true    197    983.0             984      14      15       0        0              0          0.0     90  -386.08\n 2621 │  2621    0.001   -1.95913        true    196    977.0             983       8      14       0        0              0          0.0     89  -387.495\n 2622 │  2622    0.001   -2.75286        true    197    987.0             977      14       4       0        0              0          0.0     89  -393.151\n 2623 │  2623    0.001   -2.97957        true    195    990.0             987      16      13       0        0              0          0.0     90  -394.566\n 2624 │  2624    0.001   -3.04587        true    195    991.0             990      12      11       0        0              0          0.0     92  -394.566\n 2625 │  2625    0.001   -3.52397        true    195    997.0             991      19      13       0        0              0          0.0     93  -398.808\n 2626 │  2626    0.001   -3.84589        true    194   1001.0             997      13       9       0        0              0          0.0     93  -403.051\n 2627 │  2627    0.001   -4.01036        true    194   1003.0            1001      15      13       0        0              0          0.0     94  -400.222\n 2628 │  2628    0.001   -4.01515        true    194   1003.0            1003       8       8       0        0              0          0.0     94  -398.808\n 2629 │  2629    0.001   -4.34472        true    194   1007.0            1003      16      12       0        0              0          0.0     94  -397.394\n 2630 │  2630    0.001   -5.16221        true    193   1017.0            1007      19       9       0        0              0          0.0     93  -407.294\n 2631 │  2631    0.001   -5.02855        true    194   1015.0            1017      12      14       0        0              0          0.0     92  -407.294\n 2632 │  2632    0.001   -5.45336        true    194   1020.0            1015      12       7       0        0              0          0.0     93  -405.879\n 2633 │  2633    0.001   -4.6811         true    190   1010.0            1020      10      20       0        0              0          0.0     93  -407.294\n 2634 │  2634    0.001   -4.37321        true    191   1006.0            1010       8      12       0        0              0          0.0     93  -404.465\n 2635 │  2635    0.001   -4.38278        true    190   1006.0            1006      10      10       0        0              0          0.0     93  -405.879\n 2636 │  2636    0.001   -4.14865        true    185   1003.0            1006      13      16       0        0              0          0.0     94  -405.879\n 2637 │  2637    0.001   -4.07204        true    185   1002.0            1003      10      11       0        0              0          0.0     96  -407.294\n 2638 │  2638    0.001   -4.07524        true    186   1002.0            1002      14      14       0        0              0          0.0     96  -405.879\n 2639 │  2639    0.001   -3.83376        true    186    999.0            1002      11      14       0        0              0          0.0     96  -403.051\n 2640 │  2640    0.001   -3.99536        true    189   1001.0             999      12      10       0        0              0          0.0     96  -401.637\n 2641 │  2641    0.001   -4.24115        true    187   1004.0            1001      13      10       0        0              0          0.0     95  -404.465\n 2642 │  2642    0.001   -4.16622        true    191   1003.0            1004      14      15       0        0              0          0.0     95  -403.051\n 2643 │  2643    0.001   -3.4355         true    189    994.0            1003      12      21       0        0              0          0.0     94  -394.566\n 2644 │  2644    0.001   -4.48616        true    191   1007.0             994      24      11       0        0              0          0.0     95  -400.222\n 2645 │  2645    0.001   -4.49732        true    193   1007.0            1007      16      16       0        0              0          0.0     96  -397.394\n 2646 │  2646    0.001   -3.77591        true    194    998.0            1007       6      15       0        0              0          0.0     96  -393.151\n 2647 │  2647    0.001   -3.28064        true    194    992.0             998       9      15       0        0              0          0.0     96  -386.08\n 2648 │  2648    0.001   -3.75985        true    194    998.0             992      17      11       0        0              0          0.0     96  -387.495\n 2649 │  2649    0.001   -4.24576        true    194   1004.0             998      16      10       0        0              0          0.0     97  -388.909\n 2650 │  2650    0.001   -4.17083        true    195   1003.0            1004      14      15       0        0              0          0.0     96  -384.666\n 2651 │  2651    0.001   -4.82389        true    194   1011.0            1003      19      11       0        0              0          0.0     96  -387.495\n 2652 │  2652    0.001   -5.00266        true    197   1013.0            1011      15      13       0        0              0          0.0     96  -386.08\n 2653 │  2653    0.001   -4.86206        true    202   1011.0            1013      16      18       0        0              0          0.0     97  -383.252\n 2654 │  2654    0.001   -5.04083        true    206   1013.0            1011      16      14       0        0              0          0.0     96  -386.08\n 2655 │  2655    0.001   -4.41452        true    204   1005.0            1013      10      18       0        0              0          0.0     97  -386.08\n 2656 │  2656    0.001   -3.60649        true    201    995.0            1005       3      13       0        0              0          0.0     96  -383.252\n 2657 │  2657    0.001   -4.17053        true    202   1002.0             995      21      14       0        0              0          0.0     95  -383.252\n 2658 │  2658    0.001   -3.84733        true    203    998.0            1002      10      14       0        0              0          0.0     95  -383.252\n 2659 │  2659    0.001   -4.00749        true    201   1000.0             998      15      13       0        0              0          0.0     94  -386.08\n 2660 │  2660    0.001   -4.49562        true    202   1006.0            1000      16      10       0        0              0          0.0     94  -388.909\n 2661 │  2661    0.001   -4.74817        true    202   1009.0            1006      15      12       0        0              0          0.0     93  -388.909\n 2662 │  2662    0.001   -4.84334        true    203   1010.0            1009      12      11       0        0              0          0.0     92  -390.323\n 2663 │  2663    0.001   -4.4543         true    203   1005.0            1010      10      15       0        0              0          0.0     91  -391.737\n 2664 │  2664    0.001   -4.46228        true    202   1005.0            1005      15      15       0        0              0          0.0     90  -388.909\n 2665 │  2665    0.001   -3.98163        true    200    999.0            1005      10      16       0        0              0          0.0     90  -388.909\n 2666 │  2666    0.001   -3.5706         true    200    994.0             999      13      18       0        0              0          0.0     90  -391.737\n 2667 │  2667    0.001   -2.81877        true    199    985.0             994      12      21       0        0              0          0.0     90  -388.909\n 2668 │  2668    0.001   -3.04274        true    200    988.0             985      10       7       0        0              0          0.0     91  -391.737\n 2669 │  2669    0.001   -3.84518        true    204    998.0             988      23      13       0        0              0          0.0     91  -394.566\n 2670 │  2670    0.001   -4.0869         true    203   1001.0             998      11       8       0        0              0          0.0     91  -397.394\n 2671 │  2671    0.001   -4.65714        true    203   1008.0            1001      18      11       0        0              0          0.0     92  -397.394\n 2672 │  2672    0.001   -5.39523        true    204   1017.0            1008      19      10       0        0              0          0.0     92  -400.222\n 2673 │  2673    0.001   -4.04666        true    202   1000.0            1017       6      23       0        0              0          0.0     91  -391.737\n 2674 │  2674    0.001   -4.2911         true    202   1003.0            1000      15      12       0        0              0          0.0     91  -391.737\n 2675 │  2675    0.001   -4.05146        true    201   1000.0            1003      11      14       0        0              0          0.0     92  -391.737\n 2676 │  2676    0.001   -3.80629        true    200    997.0            1000      12      15       0        0              0          0.0     92  -391.737\n 2677 │  2677    0.001   -4.53479        true    199   1006.0             997      18       9       0        0              0          0.0     92  -390.323\n 2678 │  2678    0.001   -4.21926        true    195   1002.0            1006      15      19       0        0              0          0.0     92  -391.737\n 2679 │  2679    0.001   -4.30385        true    197   1003.0            1002      11      10       0        0              0          0.0     91  -390.323\n 2680 │  2680    0.001   -4.63342        true    200   1007.0            1003      17      13       0        0              0          0.0     90  -394.566\n 2681 │  2681    0.001   -5.45091        true    202   1017.0            1007      18       8       0        0              0          0.0     90  -394.566\n 2682 │  2682    0.001   -4.42809        true    200   1004.0            1017       6      19       0        0              0          0.0     89  -393.151\n 2683 │  2683    0.001   -4.02709        true    199    999.0            1004      11      16       0        0              0          0.0     91  -393.151\n 2684 │  2684    0.001   -4.02549        true    196    999.0             999      15      15       0        0              0          0.0     91  -391.737\n 2685 │  2685    0.001   -4.18709        true    197   1001.0             999      10       8       0        0              0          0.0     90  -391.737\n 2686 │  2686    0.001   -3.6981         true    199    995.0            1001      10      16       0        0              0          0.0     91  -393.151\n 2687 │  2687    0.001   -3.60803        true    197    994.0             995      17      18       0        0              0          0.0     92  -397.394\n 2688 │  2688    0.001   -4.41523        true    198   1004.0             994      20      10       0        0              0          0.0     92  -398.808\n 2689 │  2689    0.001   -4.09586        true    197   1000.0            1004       9      13       0        0              0          0.0     91  -394.566\n 2690 │  2690    0.001   -3.68684        true    194    995.0            1000      11      16       0        0              0          0.0     92  -393.151\n 2691 │  2691    0.001   -3.76079        true    194    996.0             995       9       8       0        0              0          0.0     92  -393.151\n 2692 │  2692    0.001   -3.50822        true    196    993.0             996      16      19       0        0              0          0.0     93  -393.151\n 2693 │  2693    0.001   -3.16762        true    194    989.0             993      11      15       0        0              0          0.0     92  -393.151\n 2694 │  2694    0.001   -2.48718        true    192    981.0             989       7      15       0        0              0          0.0     92  -391.737\n 2695 │  2695    0.001   -2.78853        true    193    985.0             981      13       9       0        0              0          0.0     92  -394.566\n 2696 │  2696    0.001   -3.0125         true    193    988.0             985      14      11       0        0              0          0.0     92  -395.98\n 2697 │  2697    0.001   -2.49612        true    193    982.0             988       7      13       0        0              0          0.0     92  -393.151\n 2698 │  2698    0.001   -2.63308        true    193    984.0             982      10       8       0        0              0          0.0     92  -391.737\n 2699 │  2699    0.001   -2.27489        true    192    980.0             984       8      12       0        0              0          0.0     93  -390.323\n 2700 │  2700    0.001   -1.99239        true    191    977.0             980      10      13       0        0              0          0.0     93  -390.323\n 2701 │  2701    0.001   -2.95131        true    192    989.0             977      19       7       0        0              0          0.0     93  -397.394\n 2702 │  2702    0.001   -3.26297        true    193    993.0             989      16      12       0        0              0          0.0     94  -395.98\n 2703 │  2703    0.001   -3.25174        true    194    993.0             993      14      14       0        0              0          0.0     95  -394.566\n 2704 │  2704    0.001   -3.15828        true    193    992.0             993      13      14       0        0              0          0.0     95  -391.737\n 2705 │  2705    0.001   -3.55569        true    193    997.0             992       9       4       0        0              0          0.0     95  -393.151\n 2706 │  2706    0.001   -3.05832        true    194    991.0             997       7      13       0        0              0          0.0     94  -395.98\n 2707 │  2707    0.001   -3.45453        true    195    996.0             991      15      10       0        0              0          0.0     93  -398.808\n 2708 │  2708    0.001   -3.28409        true    193    994.0             996       9      11       0        0              0          0.0     92  -400.222\n 2709 │  2709    0.001   -3.60218        true    194    998.0             994      16      12       0        0              0          0.0     92  -397.394\n 2710 │  2710    0.001   -3.68069        true    192    999.0             998      11      10       0        0              0          0.0     93  -398.808\n 2711 │  2711    0.001   -2.77561        true    190    988.0             999       7      18       0        0              0          0.0     94  -393.151\n 2712 │  2712    0.001   -3.3324         true    188    995.0             988      15       8       0        0              0          0.0     94  -400.222\n 2713 │  2713    0.001   -3.57004        true    190    998.0             995      14      11       0        0              0          0.0     94  -401.637\n 2714 │  2714    0.001   -3.81175        true    188   1001.0             998      16      13       0        0              0          0.0     96  -401.637\n 2715 │  2715    0.001   -3.73179        true    189   1000.0            1001      10      11       0        0              0          0.0     96  -398.808\n 2716 │  2716    0.001   -3.81335        true    187   1001.0            1000      13      12       0        0              0          0.0     96  -400.222\n 2717 │  2717    0.001   -3.81495        true    188   1001.0            1001      15      15       0        0              0          0.0     97  -395.98\n 2718 │  2718    0.001   -3.48983        true    190    997.0            1001      11      15       0        0              0          0.0     96  -395.98\n 2719 │  2719    0.001   -2.82761        true    187    989.0             997       8      16       0        0              0          0.0     95  -397.394\n 2720 │  2720    0.001   -3.13928        true    189    993.0             989      12       8       0        0              0          0.0     95  -395.98\n 2721 │  2721    0.001   -3.29223        true    192    995.0             993      15      13       0        0              0          0.0     95  -397.394\n 2722 │  2722    0.001   -3.69323        true    194   1000.0             995      15      10       0        0              0          0.0     95  -401.637\n 2723 │  2723    0.001   -3.36617        true    194    996.0            1000       8      12       0        0              0          0.0     95  -400.222\n 2724 │  2724    0.001   -3.68682        true    195   1000.0             996      13       9       0        0              0          0.0     95  -400.222\n 2725 │  2725    0.001   -3.19574        true    195    994.0            1000      13      19       0        0              0          0.0     94  -400.222\n 2726 │  2726    0.001   -3.10398        true    194    993.0             994       7       8       0        0              0          0.0     95  -400.222\n 2727 │  2727    0.001   -3.82898        true    198   1002.0             993      18       9       0        0              0          0.0     95  -405.879\n 2728 │  2728    0.001   -3.5875         true    197    999.0            1002      15      18       0        0              0          0.0     95  -405.879\n 2729 │  2729    0.001   -3.7491         true    196   1001.0             999      12      10       0        0              0          0.0     95  -405.879\n 2730 │  2730    0.001   -4.15728        true    195   1006.0            1001      18      13       0        0              0          0.0     94  -407.294\n 2731 │  2731    0.001   -4.24792        true    194   1007.0            1006      17      16       0        0              0          0.0     93  -408.708\n 2732 │  2732    0.001   -5.22573        true    196   1019.0            1007      20       8       0        0              0          0.0     94  -412.95\n 2733 │  2733    0.001   -5.33588        true    198   1020.0            1019      13      12       0        0              0          0.0     95  -410.122\n 2734 │  2734    0.001   -4.56362        true    198   1010.0            1020      11      21       0        0              0          0.0     95  -404.465\n 2735 │  2735    0.001   -3.93063        true    197   1002.0            1010      12      20       0        0              0          0.0     94  -401.637\n 2736 │  2736    0.001   -3.60743        true    199    998.0            1002      11      15       0        0              0          0.0     93  -398.808\n 2737 │  2737    0.001   -3.68595        true    200    999.0             998      12      11       0        0              0          0.0     93  -397.394\n 2738 │  2738    0.001   -3.43893        true    200    996.0             999      12      15       0        0              0          0.0     93  -395.98\n 2739 │  2739    0.001   -3.02185        true    197    991.0             996       9      14       0        0              0          0.0     94  -394.566\n 2740 │  2740    0.001   -3.49994        true    197    997.0             991      12       6       0        0              0          0.0     94  -395.98\n 2741 │  2741    0.001   -3.90334        true    198   1002.0             997      12       7       0        0              0          0.0     93  -400.222\n 2742 │  2742    0.001   -3.33448        true    196    995.0            1002      12      19       0        0              0          0.0     93  -398.808\n 2743 │  2743    0.001   -2.83291        true    193    989.0             995      11      17       0        0              0          0.0     93  -394.566\n 2744 │  2744    0.001   -3.06236        true    196    992.0             989      16      13       0        0              0          0.0     94  -393.151\n 2745 │  2745    0.001   -3.21386        true    195    994.0             992      12      10       0        0              0          0.0     94  -398.808\n 2746 │  2746    0.001   -3.85834        true    196   1002.0             994      17       9       0        0              0          0.0     95  -400.222\n 2747 │  2747    0.001   -3.53513        true    195    998.0            1002      14      18       0        0              0          0.0     98  -397.394\n 2748 │  2748    0.001   -3.77685        true    197   1001.0             998      16      13       0        0              0          0.0     98  -401.637\n 2749 │  2749    0.001   -3.85993        true    198   1002.0            1001      14      13       0        0              0          0.0     97  -398.808\n 2750 │  2750    0.001   -4.67346        true    199   1012.0            1002      18       8       0        0              0          0.0     96  -398.808\n 2751 │  2751    0.001   -4.45029        true    199   1009.0            1012      10      13       0        0              0          0.0     95  -398.808\n 2752 │  2752    0.001   -4.46463        true    200   1009.0            1009      14      14       0        0              0          0.0     95  -398.808\n 2753 │  2753    0.001   -4.55979        true    198   1010.0            1009      13      12       0        0              0          0.0     95  -391.737\n 2754 │  2754    0.001   -5.21951        true    198   1018.0            1010      19      11       0        0              0          0.0     95  -388.909\n 2755 │  2755    0.001   -5.24805        true    199   1018.0            1018      12      12       0        0              0          0.0     94  -391.737\n 2756 │  2756    0.001   -4.71356        true    195   1011.0            1018      13      20       0        0              0          0.0     94  -388.909\n 2757 │  2757    0.001   -5.13363        true    195   1016.0            1011      17      12       0        0              0          0.0     97  -388.909\n 2758 │  2758    0.001   -5.15902        true    195   1016.0            1016      13      13       0        0              0          0.0     98  -387.495\n 2759 │  2759    0.001   -5.10407        true    198   1015.0            1016      11      12       0        0              0          0.0     98  -386.08\n 2760 │  2760    0.001   -5.20824        true    200   1016.0            1015      17      16       0        0              0          0.0     98  -386.08\n 2761 │  2761    0.001   -5.23364        true    200   1016.0            1016      16      16       0        0              0          0.0     99  -387.495\n 2762 │  2762    0.001   -5.49963        true    199   1019.0            1016      19      16       0        0              0          0.0     99  -391.737\n 2763 │  2763    0.001   -5.2088         true    199   1015.0            1019      13      17       0        0              0          0.0     98  -393.151\n 2764 │  2764    0.001   -5.39325        true    201   1017.0            1015      13      11       0        0              0          0.0     97  -394.566\n 2765 │  2765    0.001   -5.66057        true    200   1020.0            1017      18      15       0        0              0          0.0     97  -398.808\n 2766 │  2766    0.001   -5.93191        true    202   1023.0            1020      18      15       0        0              0          0.0     97  -398.808\n 2767 │  2767    0.001   -6.44548        true    199   1029.0            1023      19      13       0        0              0          0.0     96  -403.051\n 2768 │  2768    0.001   -5.77438        true    197   1020.0            1029      16      25       0        0              0          0.0     96  -404.465\n 2769 │  2769    0.001   -5.72603        true    196   1019.0            1020      16      17       0        0              0          0.0     96  -401.637\n 2770 │  2770    0.001   -4.7895         true    197   1007.0            1019      14      26       0        0              0          0.0     96  -395.98\n 2771 │  2771    0.001   -4.80066        true    198   1007.0            1007      13      13       0        0              0          0.0     95  -397.394\n 2772 │  2772    0.001   -5.13531        true    200   1011.0            1007      17      13       0        0              0          0.0     97  -398.808\n 2773 │  2773    0.001   -5.07206        true    199   1010.0            1011      14      15       0        0              0          0.0     97  -397.394\n 2774 │  2774    0.001   -5.08798        true    201   1010.0            1010      15      15       0        0              0          0.0     97  -397.394\n 2775 │  2775    0.001   -4.6177         true    199   1004.0            1010      14      20       0        0              0          0.0     97  -395.98\n 2776 │  2776    0.001   -4.78648        true    197   1006.0            1004      18      16       0        0              0          0.0     96  -393.151\n 2777 │  2777    0.001   -4.30791        true    198   1000.0            1006      11      17       0        0              0          0.0     96  -394.566\n 2778 │  2778    0.001   -4.55234        true    198   1003.0            1000      14      11       0        0              0          0.0     95  -391.737\n 2779 │  2779    0.001   -4.71969        true    194   1005.0            1003      17      15       0        0              0          0.0     97  -395.98\n 2780 │  2780    0.001   -4.15732        true    195    998.0            1005      12      19       0        0              0          0.0     96  -393.151\n 2781 │  2781    0.001   -3.99043        true    194    996.0             998      12      14       0        0              0          0.0     96  -390.323\n 2782 │  2782    0.001   -4.71805        true    193   1005.0             996      19      10       0        0              0          0.0     95  -401.637\n 2783 │  2783    0.001   -4.72603        true    194   1005.0            1005      14      14       0        0              0          0.0     96  -403.051\n 2784 │  2784    0.001   -4.49006        true    194   1002.0            1005      13      16       0        0              0          0.0     99  -400.222\n 2785 │  2785    0.001   -4.00317        true    191    996.0            1002       9      15       0        0              0          0.0     99  -397.394\n 2786 │  2786    0.001   -4.16045        true    191    998.0             996      10       8       0        0              0          0.0     99  -395.98\n 2787 │  2787    0.001   -4.23897        true    191    999.0             998       8       7       0        0              0          0.0     99  -395.98\n 2788 │  2788    0.001   -5.37297        true    194   1013.0             999      20       6       0        0              0          0.0     99  -397.394\n 2789 │  2789    0.001   -4.74666        true    194   1005.0            1013      14      22       0        0              0          0.0     99  -395.98\n 2790 │  2790    0.001   -4.91686        true    193   1007.0            1005      16      14       0        0              0          0.0    100  -395.98\n 2791 │  2791    0.001   -4.60325        true    192   1003.0            1007      10      14       0        0              0          0.0     99  -397.394\n 2792 │  2792    0.001   -4.60804        true    192   1003.0            1003      14      14       0        0              0          0.0     99  -393.151\n 2793 │  2793    0.001   -4.77538        true    191   1005.0            1003      16      14       0        0              0          0.0     98  -394.566\n 2794 │  2794    0.001   -4.53942        true    192   1002.0            1005      10      13       0        0              0          0.0     98  -394.566\n 2795 │  2795    0.001   -4.62401        true    193   1003.0            1002      12      11       0        0              0          0.0     98  -394.566\n 2796 │  2796    0.001   -4.95358        true    195   1007.0            1003      17      13       0        0              0          0.0     98  -397.394\n 2797 │  2797    0.001   -4.63996        true    193   1003.0            1007      13      17       0        0              0          0.0     97  -397.394\n 2798 │  2798    0.001   -3.9913         true    190    995.0            1003       6      14       0        0              0          0.0     99  -397.394\n 2799 │  2799    0.001   -3.90123        true    191    994.0             995      12      13       0        0              0          0.0     98  -400.222\n 2800 │  2800    0.001   -3.72725        true    190    992.0             994      10      12       0        0              0          0.0     99  -401.637\n 2801 │  2801    0.001   -4.20646        true    192    998.0             992      13       7       0        0              0          0.0     99  -400.222\n 2802 │  2802    0.001   -4.44818        true    195   1001.0             998      14      11       0        0              0          0.0     99  -395.98\n 2803 │  2803    0.001   -4.69397        true    194   1004.0            1001      15      12       0        0              0          0.0     98  -393.151\n 2804 │  2804    0.001   -4.21124        true    196    998.0            1004       7      13       0        0              0          0.0     99  -391.737\n 2805 │  2805    0.001   -4.53444        true    194   1002.0             998      15      11       0        0              0          0.0     99  -391.737\n 2806 │  2806    0.001   -4.78158        true    193   1005.0            1002      15      12       0        0              0          0.0     99  -393.151\n 2807 │  2807    0.001   -4.70833        true    192   1004.0            1005      19      20       0        0              0          0.0     98  -393.151\n 2808 │  2808    0.001   -3.97994        true    189    995.0            1004      11      20       0        0              0          0.0     98  -393.151\n 2809 │  2809    0.001   -3.80774        true    189    993.0             995      12      14       0        0              0          0.0     98  -388.909\n 2810 │  2810    0.001   -3.5496         true    188    990.0             993      13      16       0        0              0          0.0     97  -387.495\n 2811 │  2811    0.001   -2.87145        true    188    982.0             990       5      13       0        0              0          0.0     97  -384.666\n 2812 │  2812    0.001   -3.33944        true    188    988.0             982      16      10       0        0              0          0.0     97  -383.252\n 2813 │  2813    0.001   -3.40268        true    188    989.0             988      15      14       0        0              0          0.0     96  -377.595\n 2814 │  2814    0.001   -3.2198         true    187    987.0             989      12      14       0        0              0          0.0     96  -381.838\n 2815 │  2815    0.001   -3.36404        true    190    989.0             987      16      14       0        0              0          0.0     96  -383.252\n 2816 │  2816    0.001   -2.84979        true    188    983.0             989       9      15       0        0              0          0.0     96  -384.666\n 2817 │  2817    0.001   -2.98821        true    189    985.0             983      13      11       0        0              0          0.0     96  -386.08\n 2818 │  2818    0.001   -2.88114        true    189    984.0             985      11      12       0        0              0          0.0     96  -384.666\n 2819 │  2819    0.001   -3.35139        true    191    990.0             984      19      13       0        0              0          0.0     95  -387.495\n 2820 │  2820    0.001   -2.92214        true    192    985.0             990      15      20       0        0              0          0.0     96  -386.08\n 2821 │  2821    0.001   -2.73211        true    192    983.0             985      12      14       0        0              0          0.0     96  -380.423\n 2822 │  2822    0.001   -2.87053        true    193    985.0             983      12      10       0        0              0          0.0     96  -384.666\n 2823 │  2823    0.001   -2.84634        true    193    985.0             985      13      13       0        0              0          0.0     96  -384.666\n 2824 │  2824    0.001   -2.32359        true    191    979.0             985       7      13       0        0              0          0.0     96  -381.838\n 2825 │  2825    0.001   -1.95554        true    193    975.0             979      12      16       0        0              0          0.0     96  -374.767\n 2826 │  2826    0.001   -2.16573        true    192    978.0             975      12       9       0        0              0          0.0     96  -374.767\n 2827 │  2827    0.001   -2.38006        true    191    981.0             978      19      16       0        0              0          0.0     95  -377.595\n 2828 │  2828    0.001   -2.59853        true    189    984.0             981      10       7       0        0              0          0.0     95  -383.252\n 2829 │  2829    0.001   -2.57272        true    192    984.0             984      11      11       0        0              0          0.0     95  -384.666\n 2830 │  2830    0.001   -2.46394        true    194    983.0             984       9      10       0        0              0          0.0     95  -383.252\n 2831 │  2831    0.001   -2.02039        true    196    978.0             983      14      19       0        0              0          0.0     94  -383.252\n 2832 │  2832    0.001   -2.06819        true    195    979.0             978      14      13       0        0              0          0.0     93  -381.838\n 2833 │  2833    0.001   -2.61561        true    195    986.0             979      12       5       0        0              0          0.0     93  -383.252\n 2834 │  2834    0.001   -2.26135        true    192    982.0             986      10      14       0        0              0          0.0     94  -379.009\n 2835 │  2835    0.001   -2.39831        true    195    984.0             982      12      10       0        0              0          0.0     94  -383.252\n 2836 │  2836    0.001   -3.11545        true    196    993.0             984      19      10       0        0              0          0.0     94  -386.08\n 2837 │  2837    0.001   -3.35036        true    196    996.0             993      17      14       0        0              0          0.0     95  -379.009\n 2838 │  2838    0.001   -3.50764        true    198    998.0             996      16      14       0        0              0          0.0     96  -380.423\n 2839 │  2839    0.001   -4.07479        true    199   1005.0             998      17      10       0        0              0          0.0     97  -380.423\n 2840 │  2840    0.001   -3.43061        true    197    997.0            1005       7      15       0        0              0          0.0     96  -377.595\n 2841 │  2841    0.001   -3.1799         true    195    994.0             997      15      18       0        0              0          0.0     97  -374.767\n 2842 │  2842    0.001   -2.84124        true    196    990.0             994      11      15       0        0              0          0.0     97  -376.181\n 2843 │  2843    0.001   -3.4819         true    200    998.0             990      23      15       0        0              0          0.0     96  -377.595\n 2844 │  2844    0.001   -3.39689        true    199    997.0             998      15      16       0        0              0          0.0     97  -377.595\n 2845 │  2845    0.001   -2.89953        true    199    991.0             997       9      15       0        0              0          0.0     97  -379.009\n 2846 │  2846    0.001   -2.96736        true    198    992.0             991      14      13       0        0              0          0.0     97  -380.423\n 2847 │  2847    0.001   -3.6915         true    201   1001.0             992      19      10       0        0              0          0.0     97  -386.08\n 2848 │  2848    0.001   -3.61154        true    201   1000.0            1001      14      15       0        0              0          0.0     98  -386.08\n 2849 │  2849    0.001   -3.77457        true    204   1002.0            1000      14      12       0        0              0          0.0     98  -390.323\n 2850 │  2850    0.001   -3.45137        true    201    998.0            1002      11      15       0        0              0          0.0     98  -391.737\n 2851 │  2851    0.001   -3.61153        true    200   1000.0             998      12      10       0        0              0          0.0     98  -395.98\n 2852 │  2852    0.001   -3.69309        true    202   1001.0            1000      12      11       0        0              0          0.0     98  -400.222\n 2853 │  2853    0.001   -3.12206        true    203    994.0            1001      11      18       0        0              0          0.0     98  -395.98\n 2854 │  2854    0.001   -3.52186        true    204    999.0             994      19      14       0        0              0          0.0     97  -391.737\n 2855 │  2855    0.001   -4.09004        true    204   1006.0             999      17      10       0        0              0          0.0     98  -388.909\n 2856 │  2856    0.001   -4.01845        true    206   1005.0            1006      15      16       0        0              0          0.0     98  -384.666\n 2857 │  2857    0.001   -4.67342        true    208   1013.0            1005      18      10       0        0              0          0.0     98  -384.666\n 2858 │  2858    0.001   -4.77459        true    209   1014.0            1013      14      13       0        0              0          0.0     97  -383.252\n 2859 │  2859    0.001   -5.35822        true    209   1021.0            1014      17      10       0        0              0          0.0     97  -384.666\n 2860 │  2860    0.001   -4.83009        true    204   1014.0            1021      12      19       0        0              0          0.0     97  -384.666\n 2861 │  2861    0.001   -4.206          true    202   1006.0            1014       9      17       0        0              0          0.0     96  -381.838\n 2862 │  2862    0.001   -4.05318        true    202   1004.0            1006      14      16       0        0              0          0.0     97  -376.181\n 2863 │  2863    0.001   -4.1408         true    202   1005.0            1004      14      13       0        0              0          0.0     96  -374.767\n 2864 │  2864    0.001   -4.71517        true    202   1012.0            1005      17      10       0        0              0          0.0     96  -371.938\n 2865 │  2865    0.001   -5.13642        true    203   1017.0            1012      15      10       0        0              0          0.0     97  -371.938\n 2866 │  2866    0.001   -5.1634         true    204   1017.0            1017      14      14       0        0              0          0.0     96  -366.281\n 2867 │  2867    0.001   -5.75009        true    208   1024.0            1017      20      13       0        0              0          0.0     97  -370.524\n 2868 │  2868    0.001   -5.62851        true    206   1022.0            1024       9      11       0        0              0          0.0     97  -364.867\n 2869 │  2869    0.001   -5.66333        true    204   1022.0            1022      17      17       0        0              0          0.0     96  -364.867\n 2870 │  2870    0.001   -4.65352        true    204   1009.0            1022      10      23       0        0              0          0.0     96  -354.968\n 2871 │  2871    0.001   -4.26249        true    203   1004.0            1009      10      15       0        0              0          0.0     95  -354.968\n 2872 │  2872    0.001   -4.02469        true    206   1001.0            1004      10      13       0        0              0          0.0     94  -353.553\n 2873 │  2873    0.001   -3.94473        true    206   1000.0            1001      16      17       0        0              0          0.0     94  -349.311\n 2874 │  2874    0.001   -4.02629        true    206   1001.0            1000      11      10       0        0              0          0.0     94  -346.482\n 2875 │  2875    0.001   -4.02789        true    205   1001.0            1001      12      12       0        0              0          0.0     94  -346.482\n 2876 │  2876    0.001   -4.51714        true    206   1007.0            1001      16      10       0        0              0          0.0     94  -349.311\n 2877 │  2877    0.001   -5.174          true    207   1015.0            1007      16       8       0        0              0          0.0     93  -349.311\n 2878 │  2878    0.001   -5.11739        true    206   1014.0            1015      16      17       0        0              0          0.0     93  -347.897\n 2879 │  2879    0.001   -4.57437        true    205   1007.0            1014      11      18       0        0              0          0.0     92  -354.968\n 2880 │  2880    0.001   -4.74743        true    205   1009.0            1007      15      13       0        0              0          0.0     92  -352.139\n 2881 │  2881    0.001   -4.59986        true    205   1007.0            1009      11      13       0        0              0          0.0     91  -352.139\n 2882 │  2882    0.001   -4.4488         true    202   1005.0            1007      14      16       0        0              0          0.0     92  -347.897\n 2883 │  2883    0.001   -3.96815        true    203    999.0            1005      10      16       0        0              0          0.0     93  -349.311\n 2884 │  2884    0.001   -4.45518        true    205   1005.0             999      15       9       0        0              0          0.0     93  -352.139\n 2885 │  2885    0.001   -5.27108        true    206   1015.0            1005      19       9       0        0              0          0.0     93  -350.725\n 2886 │  2886    0.001   -5.61585        true    207   1019.0            1015      17      13       0        0              0          0.0     93  -353.553\n 2887 │  2887    0.001   -5.32502        true    208   1015.0            1019      11      15       0        0              0          0.0     94  -350.725\n 2888 │  2888    0.001   -5.02663        true    208   1011.0            1015       9      13       0        0              0          0.0     94  -349.311\n 2889 │  2889    0.001   -5.28591        true    206   1014.0            1011      10       7       0        0              0          0.0     93  -353.553\n 2890 │  2890    0.001   -6.02922        true    206   1023.0            1014      19      10       0        0              0          0.0     93  -354.968\n 2891 │  2891    0.001   -6.22498        true    209   1025.0            1023      17      15       0        0              0          0.0     92  -356.382\n 2892 │  2892    0.001   -5.46448        true    209   1015.0            1025       9      19       0        0              0          0.0     92  -356.382\n 2893 │  2893    0.001   -5.72913        true    210   1018.0            1015      17      14       0        0              0          0.0     92  -354.968\n 2894 │  2894    0.001   -5.99779        true    207   1021.0            1018      23      20       0        0              0          0.0     92  -352.139\n 2895 │  2895    0.001   -5.71073        true    206   1017.0            1021       8      12       0        0              0          0.0     91  -349.311\n 2896 │  2896    0.001   -6.6949         true    209   1029.0            1017      22      10       0        0              0          0.0     91  -347.897\n 2897 │  2897    0.001   -6.18364        true    209   1022.0            1029      15      22       0        0              0          0.0     90  -346.482\n 2898 │  2898    0.001   -5.97857        true    206   1019.0            1022      12      15       0        0              0          0.0     90  -346.482\n 2899 │  2899    0.001   -5.60731        true    205   1014.0            1019       9      14       0        0              0          0.0     90  -345.068\n 2900 │  2900    0.001   -6.03093        true    207   1019.0            1014      16      11       0        0              0          0.0     90  -345.068\n 2901 │  2901    0.001   -6.14109        true    207   1020.0            1019      16      15       0        0              0          0.0     90  -347.897\n 2902 │  2902    0.001   -5.69136        true    205   1014.0            1020      10      16       0        0              0          0.0     90  -349.311\n 2903 │  2903    0.001   -5.06726        true    202   1006.0            1014      13      21       0        0              0          0.0     89  -345.068\n 2904 │  2904    0.001   -4.67025        true    202   1001.0            1006      10      15       0        0              0          0.0     88  -342.24\n 2905 │  2905    0.001   -5.40224        true    202   1010.0            1001      23      14       0        0              0          0.0     88  -345.068\n 2906 │  2906    0.001   -5.82112        true    201   1015.0            1010      17      12       0        0              0          0.0     88  -347.897\n 2907 │  2907    0.001   -6.08577        true    203   1018.0            1015      14      11       0        0              0          0.0     87  -345.068\n 2908 │  2908    0.001   -6.91198        true    204   1028.0            1018      22      12       0        0              0          0.0     86  -349.311\n 2909 │  2909    0.001   -7.11476        true    202   1030.0            1028      14      12       0        0              0          0.0     87  -349.311\n 2910 │  2910    0.001   -6.36595        true    201   1020.0            1030      12      22       0        0              0          0.0     87  -347.897\n 2911 │  2911    0.001   -6.63728        true    200   1023.0            1020      17      14       0        0              0          0.0     87  -343.654\n 2912 │  2912    0.001   -6.35398        true    200   1019.0            1023      16      20       0        0              0          0.0     87  -339.411\n 2913 │  2913    0.001   -7.18098        true    206   1029.0            1019      22      12       0        0              0          0.0     86  -342.24\n 2914 │  2914    0.001   -6.66972        true    205   1022.0            1029      13      20       0        0              0          0.0     85  -342.24\n 2915 │  2915    0.001   -6.54469        true    203   1020.0            1022      17      19       0        0              0          0.0     85  -337.997\n 2916 │  2916    0.001   -6.9754         true    204   1025.0            1020      17      12       0        0              0          0.0     85  -342.24\n 2917 │  2917    0.001   -6.77573        true    203   1022.0            1025      17      20       0        0              0          0.0     85  -337.997\n 2918 │  2918    0.001   -6.89035        true    202   1023.0            1022      12      11       0        0              0          0.0     86  -336.583\n 2919 │  2919    0.001   -6.76705        true    199   1021.0            1023      16      18       0        0              0          0.0     87  -337.997\n 2920 │  2920    0.001   -7.11936        true    201   1025.0            1021      16      12       0        0              0          0.0     87  -339.411\n 2921 │  2921    0.001   -6.99949        true    198   1023.0            1025      16      18       0        0              0          0.0     87  -336.583\n 2922 │  2922    0.001   -6.87619        true    200   1021.0            1023      11      13       0        0              0          0.0     87  -337.997\n 2923 │  2923    0.001   -7.30808        true    198   1026.0            1021      21      16       0        0              0          0.0     87  -342.24\n 2924 │  2924    0.001   -6.79051        true    198   1019.0            1026       9      16       0        0              0          0.0     86  -340.825\n 2925 │  2925    0.001   -6.41925        true    198   1014.0            1019      12      17       0        0              0          0.0     87  -339.411\n 2926 │  2926    0.001   -6.11896        true    197   1010.0            1014      16      20       0        0              0          0.0     88  -342.24\n 2927 │  2927    0.001   -5.72992        true    195   1005.0            1010      13      18       0        0              0          0.0     89  -343.654\n 2928 │  2928    0.001   -5.90013        true    198   1007.0            1005      15      13       0        0              0          0.0     88  -347.897\n 2929 │  2929    0.001   -5.42364        true    197   1001.0            1007      11      17       0        0              0          0.0     88  -345.068\n 2930 │  2930    0.001   -5.75066        true    199   1005.0            1001      16      12       0        0              0          0.0     88  -349.311\n 2931 │  2931    0.001   -5.10649        true    198    997.0            1005       6      14       0        0              0          0.0     88  -347.897\n 2932 │  2932    0.001   -5.18349        true    197    998.0             997      11      10       0        0              0          0.0     87  -346.482\n 2933 │  2933    0.001   -5.6694         true    196   1004.0             998      13       7       0        0              0          0.0     88  -347.897\n 2934 │  2934    0.001   -5.67578        true    197   1004.0            1004      16      16       0        0              0          0.0     88  -346.482\n 2935 │  2935    0.001   -5.11125        true    197    997.0            1004      12      19       0        0              0          0.0     88  -347.897\n 2936 │  2936    0.001   -4.86054        true    197    994.0             997      16      19       0        0              0          0.0     88  -352.139\n 2937 │  2937    0.001   -4.85091        true    197    994.0             994      14      14       0        0              0          0.0     87  -346.482\n 2938 │  2938    0.001   -5.49539        true    196   1002.0             994      17       9       0        0              0          0.0     87  -353.553\n 2939 │  2939    0.001   -5.49859        true    196   1002.0            1002      17      17       0        0              0          0.0     87  -356.382\n 2940 │  2940    0.001   -5.33875        true    196   1000.0            1002      15      17       0        0              0          0.0     86  -353.553\n 2941 │  2941    0.001   -4.51864        true    197    990.0            1000      10      20       0        0              0          0.0     85  -349.311\n 2942 │  2942    0.001   -4.00651        true    197    984.0             990      10      16       0        0              0          0.0     84  -349.311\n 2943 │  2943    0.001   -4.14639        true    197    986.0             984      13      11       0        0              0          0.0     83  -352.139\n 2944 │  2944    0.001   -3.95815        true    194    984.0             986      14      16       0        0              0          0.0     83  -353.553\n 2945 │  2945    0.001   -3.09883        true    195    974.0             984       7      17       0        0              0          0.0     82  -350.725\n 2946 │  2946    0.001   -3.30763        true    193    977.0             974      14      11       0        0              0          0.0     82  -349.311\n 2947 │  2947    0.001   -3.52058        true    192    980.0             977      13      10       0        0              0          0.0     82  -353.553\n 2948 │  2948    0.001   -3.48825        true    194    980.0             980      13      13       0        0              0          0.0     82  -349.311\n 2949 │  2949    0.001   -3.37262        true    192    979.0             980      13      14       0        0              0          0.0     82  -347.897\n 2950 │  2950    0.001   -3.17179        true    188    977.0             979      17      19       0        0              0          0.0     83  -349.311\n 2951 │  2951    0.001   -3.63415        true    189    983.0             977      12       6       0        0              0          0.0     83  -349.311\n 2952 │  2952    0.001   -2.93991        true    193    975.0             983      11      19       0        0              0          0.0     83  -346.482\n 2953 │  2953    0.001   -3.3168         true    194    980.0             975      19      14       0        0              0          0.0     83  -347.897\n 2954 │  2954    0.001   -3.3677         true    194    981.0             980      13      12       0        0              0          0.0     83  -345.068\n 2955 │  2955    0.001   -3.66905        true    194    985.0             981      12       8       0        0              0          0.0     84  -345.068\n 2956 │  2956    0.001   -3.64487        true    194    985.0             985      13      13       0        0              0          0.0     84  -345.068\n 2957 │  2957    0.001   -3.5378         true    192    984.0             985      13      14       0        0              0          0.0     84  -346.482\n 2958 │  2958    0.001   -3.26283        true    189    981.0             984      13      16       0        0              0          0.0     85  -346.482\n 2959 │  2959    0.001   -3.56418        true    194    985.0             981      14      10       0        0              0          0.0     85  -350.725\n 2960 │  2960    0.001   -3.70552        true    194    987.0             985      12      10       0        0              0          0.0     86  -350.725\n 2961 │  2961    0.001   -3.84977        true    194    989.0             987      13      11       0        0              0          0.0     86  -350.725\n 2962 │  2962    0.001   -4.24357        true    195    994.0             989      16      11       0        0              0          0.0     88  -352.139\n 2963 │  2963    0.001   -4.31599        true    197    995.0             994      14      13       0        0              0          0.0     88  -352.139\n 2964 │  2964    0.001   -4.22592        true    197    994.0             995      14      15       0        0              0          0.0     87  -346.482\n 2965 │  2965    0.001   -5.11435        true    200   1005.0             994      16       5       0        0              0          0.0     87  -349.311\n 2966 │  2966    0.001   -4.55198        true    196    998.0            1005      14      21       0        0              0          0.0     87  -349.311\n 2967 │  2967    0.001   -4.22107        true    196    994.0             998      10      14       0        0              0          0.0     86  -345.068\n 2968 │  2968    0.001   -5.27172        true    196   1007.0             994      20       7       0        0              0          0.0     85  -343.654\n 2969 │  2969    0.001   -5.84815        true    200   1014.0            1007      16       9       0        0              0          0.0     84  -343.654\n 2970 │  2970    0.001   -5.70929        true    199   1012.0            1014      16      18       0        0              0          0.0     83  -343.654\n 2971 │  2971    0.001   -5.24314        true    199   1006.0            1012       9      15       0        0              0          0.0     83  -342.24\n 2972 │  2972    0.001   -5.25271        true    199   1006.0            1006      11      11       0        0              0          0.0     83  -343.654\n 2973 │  2973    0.001   -5.34336        true    198   1007.0            1006      15      14       0        0              0          0.0     83  -343.654\n 2974 │  2974    0.001   -5.59725        true    197   1010.0            1007      15      12       0        0              0          0.0     83  -346.482\n 2975 │  2975    0.001   -5.69393        true    199   1011.0            1010      13      12       0        0              0          0.0     83  -345.068\n 2976 │  2976    0.001   -5.46893        true    198   1008.0            1011      16      19       0        0              0          0.0     83  -345.068\n 2977 │  2977    0.001   -5.40069        true    197   1007.0            1008      14      15       0        0              0          0.0     84  -340.825\n 2978 │  2978    0.001   -5.49284        true    198   1008.0            1007      15      14       0        0              0          0.0     84  -339.411\n 2979 │  2979    0.001   -5.26237        true    198   1005.0            1008      12      15       0        0              0          0.0     83  -342.24\n 2980 │  2980    0.001   -5.18912        true    200   1004.0            1005      12      13       0        0              0          0.0     83  -339.411\n 2981 │  2981    0.001   -5.51996        true    199   1008.0            1004      12       8       0        0              0          0.0     83  -343.654\n 2982 │  2982    0.001   -5.37064        true    200   1006.0            1008      12      14       0        0              0          0.0     83  -346.482\n 2983 │  2983    0.001   -5.78478        true    199   1011.0            1006      12       7       0        0              0          0.0     83  -349.311\n 2984 │  2984    0.001   -5.88295        true    201   1012.0            1011      14      13       0        0              0          0.0     83  -349.311\n 2985 │  2985    0.001   -5.74061        true    204   1010.0            1012      14      16       0        0              0          0.0     83  -346.482\n 2986 │  2986    0.001   -5.75654        true    207   1010.0            1010      20      20       0        0              0          0.0     83  -346.482\n 2987 │  2987    0.001   -5.69162        true    204   1009.0            1010      13      14       0        0              0          0.0     83  -350.725\n 2988 │  2988    0.001   -6.83039        true    207   1023.0            1009      23       9       0        0              0          0.0     82  -353.553\n 2989 │  2989    0.001   -6.78697        true    209   1022.0            1023      12      13       0        0              0          0.0     81  -353.553\n 2990 │  2990    0.001   -6.90159        true    207   1023.0            1022      13      12       0        0              0          0.0     81  -357.796\n 2991 │  2991    0.001   -6.77828        true    208   1021.0            1023      12      14       0        0              0          0.0     80  -360.624\n 2992 │  2992    0.001   -7.21017        true    210   1026.0            1021      20      15       0        0              0          0.0     81  -362.039\n 2993 │  2993    0.001   -7.01229        true    211   1023.0            1026      12      15       0        0              0          0.0     82  -364.867\n 2994 │  2994    0.001   -7.92141        true    213   1034.0            1023      26      15       0        0              0          0.0     82  -373.352\n 2995 │  2995    0.001   -7.65863        true    215   1030.0            1034      13      17       0        0              0          0.0     81  -370.524\n 2996 │  2996    0.001   -7.54732        true    214   1028.0            1030      16      18       0        0              0          0.0     81  -373.352\n 2997 │  2997    0.001   -7.27338        true    210   1024.0            1028      16      20       0        0              0          0.0     81  -369.11\n 2998 │  2998    0.001   -6.75159        true    208   1017.0            1024      16      23       0        0              0          0.0     81  -367.696\n 2999 │  2999    0.001   -6.77857        true    208   1017.0            1017      17      17       0        0              0          0.0     80  -360.624\n 3000 │  3000    0.001   -7.12585        true    210   1021.0            1017      18      14       0        0              0          0.0     80  -357.796, state = QMCState\n  H:    HubbardReal1D(BoseFS{6,6}((1, 1, 1, 1, 1, 1)); u=6.0, t=1.0)\n  step: 3000 / 3000\n  replicas: \n    1: ReplicaState(v: 210-element DVec, w: 208-element DVec))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here is how to save the output data stored in df into a .arrow file, which can be read in later:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\"Writing data to disk...\")\nsave_df(\"fciqmcdata.arrow\", df)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"\"fciqmcdata.arrow\"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now let's look at the calculated energy from the shift. Loading the equilibrated data","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"qmcdata = last(df,steps_measure);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"compute the average shift and its standard error","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(qmcdata)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.17 ± 0.11\n  with uncertainty of ± 0.010035050978284115\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"For the projected energy, it a bit more complicated as it's a ratio of two means:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(qmcdata)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -3.8095 ± (0.0464748, 0.0446146) (MC)\n  95% confidence interval: [-3.89952, -3.71784]) (MC)\n  linear error propagation: -3.81237 ± 0.0458021\n  |δ_y| = |0.00793661| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. Let's get its median and lower and upper error bars for a 95% confidence interval","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)\n\nprintln(\"Energy from $steps_measure steps with $targetwalkers walkers:\n         Shift: $(se.mean) ± $(se.err);\n         Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\")","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\n         Shift: -4.171133393316872 ± 0.11084076088102625;\n         Projected Energy: -3.8094962777074164 ± (0.09002094530769744, 0.09165363955893246)\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Finished !","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-Rimu/StatsTools","page":"StatsTools","title":"Module Rimu/StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module Rimu/StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h; \n    shift_name=:shift, \n    norm_name=:norm, \n    dτ=df.dτ[end], \n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names  of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj, \n    vproj_name=:vproj, \n    shift_name=:shift, \n    dτ=df.dτ[end], \n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame  returned by lomc!. The keyword arguments hproj_name, vproj_name, and  shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\", \n    vec_name=\"dot\", \n    h=0,\n    skip=0, \n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)  \n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas. \n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n)  and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector  holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector  holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by  lomc!. The keyword arguments shift_name, op_name and vec_name can be used to  change the names of the relevant columns, see AllOverlaps for default  formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific  reweighting depth can be set with keyword argument h. The default is h = 0 which  calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique  described in Umrigar et al. (1993).  Reweighting is done over h time steps and length(shift) - skip time steps are used  for the blocking analysis done with ratio_of_means().  dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ... \nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\n\nFunctions Rimu.jl uses to do FCIQMC:\n\nfciqmc_col!\nstep_stats\nupdate_dvec!\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\nRimuIO.save_dvec(filename, dv) Save dict vector in BSON format.\nRimuIO.load_dvec(filename) Load BSON file into dict vector.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename) -> DataFrame\n\nLoad Arrow file into dataframe.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.load_dvec-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_dvec","text":"RimuIO.load_dvec(filename) -> AbstractDVec\n\nLoad AbstractDVec stored in BSON.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrames.DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame)\n\nSave dataframe in Arrow format.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_dvec-Tuple{Any, Any}","page":"I/O","title":"Rimu.RimuIO.save_dvec","text":"RimuIO.save_dvec(filename, dvec)\n\nSave dvec in BSON format.\n\nNotes\n\nOnly the localpart is saved. You may need to re-wrap the result in MPIData if using MPI.\nWhen using this function with MPI, make sure to save the vectors from different ranks to different files, e.g. by saving as RimuIO.save_dvec(\"filename-$(mpi_rank()).bson\", dvec).\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"module Hamiltonians\n\nThis module defines Hamiltonian types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nOther\n\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\n\nObservables\n\nG2MomCorrelator\nG2RealCorrelator\nDensityMatrixDiagonal\nMomentum\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Usage-with-FCIQMC-and-exact-diagonalisation","page":"Hamiltonians","title":"Usage with FCIQMC and exact diagonalisation","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"In order to define a specific model Hamiltonian with relevant parameters for the model, instantiate the model like this in the input file:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"hubb = HubbardReal1D(BoseFS((1,2,0,3)); u=1.0, t=1.0)","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonian hubb is now ready to be used for FCIQMC in lomc!  and for exact diagonalisation with KrylovKit.jl directly, or after  transforming into a sparse matrix first with ","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"using SparseArrays\nsh = sparse(hubb)","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"or into a full matrix with","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"using LinearAlgebra\nfh = Matrix(hubb)","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This functionality relies on ","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.BasisSetRep\nsparse\nMatrix","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BasisSetRep","page":"Hamiltonians","title":"Rimu.Hamiltonians.BasisSetRep","text":"BasisSetRep(h::AbstractHamiltonian, addr=starting_address(h); sizelim=10^4, nnzs = 0)\n\nEagerly construct the basis set representation of the operator h with all addresses reachable from addr. An ArgumentError is thrown if dimension(h) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour. Providing the number nnzs of expected calculated matrix elements may improve performance.\n\nFields\n\nsm: sparse matrix representing h in the basis basis\nbasis: vector of addresses\nh: the Hamiltonian\n\nExample\n\njulia> h = HubbardReal1D(BoseFS((1,0,0)));\n\njulia> bsr = BasisSetRep(h)\nBasisSetRep(HubbardReal1D(BoseFS{1,3}((1, 0, 0)); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\n julia> using LinearAlgebra; eigvals(Matrix(bsr))\n 3-element Vector{Float64}:\n  -2.0\n   1.0\n   1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896\n -0.5773502691896\n -0.5773502691896\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  BoseFS{1,3}((0, 0, 1)) => -0.5773502691896\n  BoseFS{1,3}((0, 1, 0)) => -0.5773502691896\n  BoseFS{1,3}((1, 0, 0)) => -0.5773502691896\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#SparseArrays.sparse","page":"Hamiltonians","title":"SparseArrays.sparse","text":"sparse(h::AbstractHamiltonian, addr=starting_address(h); sizelim=10^4)\nsparse(bsr::BasisSetRep)\n\nReturn a sparse matrix representation of h or bsr. An ArgumentError is thrown if dimension(h) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nSee BasisSetRep.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.Matrix","page":"Hamiltonians","title":"Base.Matrix","text":"Matrix(h::AbstractHamiltonian, addr=starting_address(h); sizelim=10^4)\nMatrix(bsr::BasisSetRep)\n\nReturn a dense matrix representation of h or bsr. An ArgumentError is thrown if dimension(h) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nSee BasisSetRep.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants  of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; u=ones(C, C), t=ones(C), geometry=PeriodicBoundaries(M,))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in arbitrary dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  frac12sum_iστu_στ n_iσ n_iτ\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model. This address only provides a single species of (non-interacting) fermions. You probably want to use CompositeFS.\nCompositeFS: For multi-component models.\n\nGeometries\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nOther parameters\n\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object for use with regular Vectors indexed by integers. Works with stochastic methods of lomc!(). Optionally, a starting_address can be provided.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and  HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and  HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing  Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS{3}((1,1,1)); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}((1, 1, 1)); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}((1, 1, 1)); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS((2, 1, 0)), 1)\n(BoseFS{3,3}((1, 0, 2)), 2.0)\n\njulia> get_offdiagonal(G, BoseFS((2, 1, 0)), 1)\n(BoseFS{3,3}((1, 0, 2)), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to  AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS((1,1,1)); u=6.0, t=1.0);\n\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}((2, 0, 1)), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}((2, 0, 1)), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to  AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. For some Hamiltonians, this reduces the size of the Hilbert space by half.\n\nParitySymmetry changes the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS((0,2,1)))\nHubbardReal1D(BoseFS{3,3}((0, 2, 1)); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal symmetry is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical  observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"G2MomCorrelator\nG2RealCorrelator\nDensityMatrixDiagonal\nMomentum","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M. Can be applied to a vector in any SingleComponentFockAddress basis.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}((1, 0, 2, 1, 2, 1, 1, 3))\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done  with addresses (typically not integers) from an address space that may be large (and will  not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress  from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nMethods that need to be implemented:\n\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer)\ndiagonal_element(::AbstractHamiltonian, address)\nstarting_address(::AbstractHamiltonian)\n\nOptional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::Type{T}, ::AbstractHamiltonian): defaults to dimension of address space\nmomentum(::AbstractHamiltonian): no default\n\nProvides:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRep: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over reachable off-diagonal matrix elements of type <:AbstractOffdiagonals. Defaults to returning Offdiagonals(h, a)\n\nSee also\n\nOffdiagonals\nAbstractOffdiagonals\n\njulia> addr = BoseFS((3,2,1));\n\n\njulia> H = HubbardReal1D(addr);\n\n\njulia> h = offdiagonals(H, addr)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (BoseFS{6,3}((2, 3, 1)), -3.0)\n (BoseFS{6,3}((2, 2, 2)), -2.449489742783178)\n (BoseFS{6,3}((3, 1, 2)), -2.0)\n (BoseFS{6,3}((4, 1, 1)), -2.8284271247461903)\n (BoseFS{6,3}((4, 2, 0)), -2.0)\n (BoseFS{6,3}((3, 3, 0)), -1.7320508075688772)\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, add)\n\nCompute the diagonal matrix element of the linear operator ham at address add.\n\nExample\n\njulia> addr = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(addr);\n\n\njulia> diagonal_element(H, addr)\n8.666666666666664\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. Part of the AbstractHamiltonian interface. When called on an AbstractMatrix return the index of the lowest diagonal element.\n\nExample\n\njulia> addr = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(addr);\n\n\njulia> addr == starting_address(H)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, add)\n\nCompute the number of number of reachable configurations from address add.\n\nExample\n\njulia> addr = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(addr);\n\n\njulia> num_offdiagonals(H, addr)\n10\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(addr);\n\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}((2, 1, 3)), 1.0)\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nLOStructure speficies properties of the linear operator op. If a special structure is known this can speed up calculations. Implemented structures are:\n\nIsDiagonal: The operator is diagonal.\nIsHermitian: The operator is complex and Hermitian or real and symmetric.\nAdjointKnown: The operator is not Hermitian, but its adjoint is implemented.\nAdjointUnknown: adjoint for this operator is not implemented.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(::Type{T}, h)\n\nReturn the dimension of Hilbert space as T. If the result does not fit into T, return nothing. If T<:AbstractFloat, an approximate value computed with the improved Stirling formula may be returned instead.\n\nExamples\n\njulia> dimension(HubbardMom1D(BoseFS((1,2,3))))\n28\njulia> dimension(HubbardMom1D(near_uniform(BoseFS{200,100})))\n\n\njulia> dimension(Float64, HubbardMom1D(near_uniform(BoseFS{200,100})))\n1.3862737677578234e81\njulia> dimension(BigInt, HubbardMom1D(near_uniform(BoseFS{200,100})))\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS((10, 0, 0, 0, 2, 0, 1))\nBoseFS{13,7}((10, 0, 0, 0, 2, 0, 1))\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(x, H::AbstractHamiltonian, v)\n\nEvaluate x⋅H(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address)\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the possibly non-zero off-diagonal matrix elements of the column of ham indexed by add.\n\nThis is the default implementation defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also\n\noffdiagonals\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"LatticeGeometry\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\nnum_neighbours\nneighbour_site","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LatticeGeometry","page":"Hamiltonians","title":"Rimu.Hamiltonians.LatticeGeometry","text":"abstract type LatticeGeometry\n\nA LatticeGeometry controls which sites in an AbstractFockAddress are considered to be neighbours.\n\nCurrently only supported by HubbardRealSpace.\n\nAvailable implementations\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nInterface to implement\n\nBase.size: return the lattice size.\nneighbour_site(::LatticeGeometry, ::Int, ::Int)\nnum_neighbours(::LatticeGeometry)\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(size...) <: LatticeGeometry\n\nRectangular lattice with periodic boundary conditions of size size.\n\nThe dimension of the lattice is controlled by the number of arguments given to its constructor.\n\nThis is the default geometry used by HubbardRealSpace.\n\nExample\n\njulia> lattice = PeriodicBoundaries(5, 4) # 2D lattice of size 5 × 4\nPeriodicBoundaries(5, 4)\n\njulia> num_neighbours(lattice)\n4\n\njulia> neighbour_site(lattice, 1, 1)\n2\n\njulia> neighbour_site(lattice, 1, 2)\n5\n\njulia> neighbour_site(lattice, 1, 3)\n6\n\njulia> neighbour_site(lattice, 1, 4)\n16\n\nSee also\n\nLatticeGeometry\nHardwallBoundaries\nLadderBoundaries\nnum_neighbours\nneighbour_site\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries\n\nRectangular lattice with hard wall boundary conditions of size size. neighbour_site() will return 0 for some neighbours of boundary sites.\n\nThe dimension of the lattice is controlled by the number of arguments given to its constructor.\n\nExample\n\njulia> lattice = HardwallBoundaries(5) # 1D lattice of size 5\nHardwallBoundaries(5)\n\njulia> neighbour_site(lattice, 1, 1)\n2\n\njulia> neighbour_site(lattice, 1, 2)\n0\n\n\nSee also\n\nLatticeGeometry\nPeriodicBoundaries\nLadderBoundaries\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(size...; subgeometry=PeriodicBoundaries) <: LatticeGeometry\n\nLattice geometry where the first dimension is of size 2 and has hardwall boundary conditions. Using this geometry is more efficient than using HardwallBoundaries with a size of 2, as it does not generate rejected neighbours.\n\nIn other dimensions, it behaves like its subgeometry, which can be any LatticeGeometry.\n\nExample\n\njulia> lattice = LadderBoundaries(2, 3, 4) # 3D lattice of size 2 × 3 × 4\nLadderBoundaries(2, 3, 4)\n\njulia> num_neighbours(lattice)\n5\n\njulia> neighbour_site(lattice, 1, 1)\n2\n\njulia> neighbour_site(lattice, 1, 2)\n3\n\njulia> neighbour_site(lattice, 1, 3)\n5\n\njulia> neighbour_site(lattice, 1, 4)\n7\n\njulia> neighbour_site(lattice, 1, 5)\n19\n\nSee also\n\nLatticeGeometry\nPeriodicBoundaries\nHardwallBoundaries\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.num_neighbours","page":"Hamiltonians","title":"Rimu.Hamiltonians.num_neighbours","text":"num_neighbours(geom::LatticeGeometry)\n\nReturn the number of neighbours each lattice site has in this geometry.\n\nNote that for efficiency reasons, all sites are expected to have the same number of neighbours. If some of the neighbours are invalid, this is handled by having neighbour_site return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbour_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbour_site","text":"neighbour_site(geom::LatticeGeometry, site, i)\n\nFind the i-th neighbour of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"consistentrng.html#Random-Numbers","page":"Random Numbers","title":"Random Numbers","text":"","category":"section"},{"location":"consistentrng.html","page":"Random Numbers","title":"Random Numbers","text":"Generating good quality random numbers is crucial for any Monte Carlo code. In addition to generating pseudo random numbers with good statistics and in minimal CPU time, we also have the requirement that computations should be reproducible and the random number sequences independent on each worker when the code runs in parallel mode.","category":"page"},{"location":"consistentrng.html","page":"Random Numbers","title":"Random Numbers","text":"We define the random number generator in the module ConsistentRNG.jl, which is loaded onto each process. Furthermore, independent seeds are used to seed the RNGs on each worker (from goQMC.jl). These seeds are generated using the Random.RandomDevice random number generator, which draws entropy from the operating system / hardware. The seeds are saved to file with a filename that includes the number of processes used. If a suitable file is found, then seeds are read in from the file. This behaviour can be controlled by the flag reuseRandomSeeds in the input file.","category":"page"},{"location":"consistentrng.html","page":"Random Numbers","title":"Random Numbers","text":"For the random number generator we are currently using 'Xoroshiro128Plus' from 'RandomNumbers.jl'. For benchmarks and statistical test results see the Documentation of RandomNumbers.jl.","category":"page"},{"location":"consistentrng.html#Module-ConsistentRNG","page":"Random Numbers","title":"Module ConsistentRNG","text":"","category":"section"},{"location":"consistentrng.html","page":"Random Numbers","title":"Random Numbers","text":"Modules = [Rimu.ConsistentRNG]","category":"page"},{"location":"consistentrng.html#Rimu.ConsistentRNG","page":"Random Numbers","title":"Rimu.ConsistentRNG","text":"module ConsistentRNG\n\nProvides a an array random number generators with one for each thread.\n\nExports cRand() and seedCRNG!(). These are thread consistent.\n\n\n\n\n\n","category":"module"},{"location":"consistentrng.html#Rimu.ConsistentRNG.CRNGs","page":"Random Numbers","title":"Rimu.ConsistentRNG.CRNGs","text":"CRNGs[]\n\nDefines an array of random number generators suitable for threaded code. For MPI or distributed runs it should be seeded separately on each process with seedCRNG!. Currently we are using 'Xoshiro256StarStar' from 'RandomNumbers.jl', see the Documentation and this Blog post. In order to change the random number generator, edit 'ConsistentRNG.jl'.\n\nrng = CRNGs[][Threads.threadid()]\nrand(rng)\n\n\n\n\n\n","category":"constant"},{"location":"consistentrng.html#Rimu.ConsistentRNG.CRNG","page":"Random Numbers","title":"Rimu.ConsistentRNG.CRNG","text":"Baseline random number generator used throughout. Currently we are using 'Xoshiro256StarStar' from 'RandomNumbers.jl', see the Documentation and this Blog post. In order to change the random number generator, edit 'ConsistentRNG.jl'.\n\n\n\n\n\n","category":"type"},{"location":"consistentrng.html#Rimu.ConsistentRNG.cRand-Tuple","page":"Random Numbers","title":"Rimu.ConsistentRNG.cRand","text":"r = cRand(args...)\n\nSimilar to 'rand(args)' but uses consistent random number generator 'CRNGs[]'. 'cRand()' generates a single uniformly distributed random number in the interval [0,1). Currently we are using 'Xoshiro256StarStar' from 'RandomNumbers.jl', see the Documentation and this Blog post.\n\n\n\n\n\n","category":"method"},{"location":"consistentrng.html#Rimu.ConsistentRNG.cRandn-Tuple","page":"Random Numbers","title":"Rimu.ConsistentRNG.cRandn","text":"r = cRandn(args...)\n\nSimilar to 'randn(args)' but uses consistent random number generators 'CRNGs[]'. 'cRandn()' generates a single normally distributed random number. Currently we are using 'Xoshiro256StarStar' from 'RandomNumbers.jl', see the Documentation and this Blog post.\n\n\n\n\n\n","category":"method"},{"location":"consistentrng.html#Rimu.ConsistentRNG.check_crng_independence-Tuple{Any}","page":"Random Numbers","title":"Rimu.ConsistentRNG.check_crng_independence","text":"ConsistentRNG.check_crng_independence(v)\n\nPrimitve test to check the random number generators. It throws an error if some of the threaded random number generators are equal. Returns the number of threaded RNGs.\n\n\n\n\n\n","category":"method"},{"location":"consistentrng.html#Rimu.ConsistentRNG.newChildRNG","page":"Random Numbers","title":"Rimu.ConsistentRNG.newChildRNG","text":"newChildRNG(parent_rng = trng())\n\nRandom number generator that is seeded deterministically from the thread-consistent global rng trng(). By scrambling with hash(), a statistically independent pseudo-random sequence from the parent rng is accessed.\n\n\n\n\n\n","category":"function"},{"location":"consistentrng.html#Rimu.ConsistentRNG.seedCRNG!-Tuple{Vector}","page":"Random Numbers","title":"Rimu.ConsistentRNG.seedCRNG!","text":"seedCRNG!([seed])\n\nSeed the threaded consistent random number generators CRNGs[]. If a single number is given, this will be used to seed a random sequence, which is hashed and then used to generate seeds for each rng in the vector CRNGs. When no argument is given, each rng is seeded randomly.\n\n\n\n\n\n","category":"method"},{"location":"consistentrng.html#Rimu.ConsistentRNG.sync_cRandn-Tuple{Any}","page":"Random Numbers","title":"Rimu.ConsistentRNG.sync_cRandn","text":"sync_cRandn(v)\n\nGenerate one random number with cRandn() in a synchronous way. Defaults to cRandn().\n\n\n\n\n\n","category":"method"},{"location":"consistentrng.html#Rimu.ConsistentRNG.trng-Tuple{}","page":"Random Numbers","title":"Rimu.ConsistentRNG.trng","text":"trng()\n\nThread local random number generator.\n\nrand(trng())\nrand(trng(),UInt)\n\n\n\n\n\n","category":"method"},{"location":"consistentrng.html#Index","page":"Random Numbers","title":"Index","text":"","category":"section"},{"location":"consistentrng.html","page":"Random Numbers","title":"Random Numbers","text":"Pages   = [\"consistentrng.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.ConsistentRNG.check_crng_independence-Tuple{Rimu.RMPI.MPIData}","page":"RMPI","title":"Rimu.ConsistentRNG.check_crng_independence","text":"ConsistentRNGs.check_crng_independence(dv::MPIData)\n\nDoes a sanity check to detect dependence of random number generators across all MPI ranks. Returns the size of the combined RNG state, i.e. mpi_size()*Threads.nthreads()*fieldcount(ConsistentRNG.CRNG). MPI syncronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.ConsistentRNG.sync_cRandn-Tuple{Rimu.RMPI.MPIData}","page":"RMPI","title":"Rimu.ConsistentRNG.sync_cRandn","text":"ConsistentRNG.sync_cRandn(md::MPIData)\n\nGenerate one random number with cRandn() in a synchronous way such that all MPI ranks have the same random number. The argument is ignored unless it is of type MPIData, in which case a random number from the root rank is broadcasted to all MPI ranks. MPI syncronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.RMPI.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_rank","page":"RMPI","title":"Rimu.RMPI.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed_CRNGs!","page":"RMPI","title":"Rimu.RMPI.mpi_seed_CRNGs!","text":"mpi_seed_CRNGs!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from cRand() will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_size","page":"RMPI","title":"Rimu.RMPI.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Modifying-the-Project.toml-file","page":"Code testing","title":"Modifying the Project.toml file","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"In order for the testing code to be able to run on the cloud server, external packages that are accessed in the code with using or import need to be installed first. This is done in the script actions.yml via the package manager, based on the information contained in the file test/Project.toml. More packages can be added to this file using the package manager in the following way: Say we want to install the package DelimitedFiles. At the Julia REPL, type the following:","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"julia> cd(\"test\")\njulia> ]\n(v1.0) pkg> activate .\n(test) pkg> add DelimitedFiles","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"This will a new line to the file Project.toml with the name of the package and the corresponding uuid. When Pipelines now runs the commands in yml script, it will install the package DelimitedFiles before running the runtest.jl script.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added to test/example.jl. ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples that require MPI functionality should have mpi in the filename, and tests for these  should instead be added to test/mpi_runtests.jl.","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations (see below) that should make it straightforward to implement efficient Hamiltonians.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress\n\nSupertype representing a Fock state.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(add) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(add)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(add) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS((10, 0, 0, 0, 2, 0, 1))\nBoseFS{13,7}((10, 0, 0, 0, 2, 0, 1))\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS((1,1,1,1,0,0,1,0,0))\nFermiFS{5,9}((1, 1, 1, 1, 0, 0, 1, 0, 0))\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1)\n FermiFSIndex(occnum=1, mode=2)\n FermiFSIndex(occnum=1, mode=3)\n FermiFSIndex(occnum=1, mode=4)\n FermiFSIndex(occnum=1, mode=7)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{M}\n\nA type representing a single component Fock state with M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nis_occupied\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(a::SingleComponentFockAddress, creations::NTuple{N}, destructions::NTuple{N})\n\nGenerate an excitation on address a by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmarangle to\nαmathrmnaddrangle\n\nReturns the new address nadd and the value α. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS((1,1,0,0,1,1,1,1))\nFermiFS{6,8}((1, 1, 0, 0, 1, 1, 1, 1))\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3), FermiFSIndex(occnum=0, mode=4), FermiFSIndex(occnum=1, mode=2), FermiFSIndex(occnum=1, mode=5))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}((1, 0, 1, 1, 0, 1, 1, 1)), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS((1, 0, 2)), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS((1, 1, 1, 0)), (2,3))\n(FermiFSIndex(occnum=1, mode=2), FermiFSIndex(occnum=1, mode=3))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS((1, 1, 1, 0)), 2)\nFermiFSIndex(occnum=1, mode=2)\n\njulia> find_occupied_mode(BoseFS((1, 0, 2)), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS((1, 0, 2)), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.is_occupied","page":"BitString addresses","title":"Rimu.BitStringAddresses.is_occupied","text":"is_occupied(::SingleComponentFockAddress, i)\n\nReturn true if index i points to an occupied mode.\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1)\nFermiFSIndex(occnum=1, mode=2)\nFermiFSIndex(occnum=1, mode=4)\nFermiFSIndex(occnum=1, mode=7)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}((0, 1, 2, 0)) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 enrty, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}((0, 1, 2, 0)) => 1\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a bitstring of type S <: BitString.\n\nConstructors\n\nBoseFS{N,M}(bs::BitString): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\nBoseFS(::BitString): Automatically determine N and M. This constructor is not type stable!\nBoseFS{[N,M,S]}(onr): Create BoseFS{N,M} from onr representation. This is efficient as long as at least N is provided.\n\nSee also: SingleComponentFockAddress, FermiFS, BitString.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the bit offset of the mode.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M})\nnear_uniform(BoseFS{N,M,S}) -> bfs::BoseFS{N,M,S}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles. Specifying the bit address type S is optional.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5,BitString{14}})\nBoseFS{7,5}((2, 2, 1, 1, 1))\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}((2, 2, 1, 1, 1))\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.onr-Tuple{BoseFS}","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"onr(bs)\n\nCompute and return the occupation number representation of the bit string address bs as an SVector{M,Int32}, where M is the number of modes.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a bitstring of type S <: BitString.\n\nConstructors\n\nFermiFS{N,M}(bs::BitString): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\nFermiFS(::BitString): Automatically determine N and M. This constructor is not type stable!\nFermiFS{[N,M,S]}(onr): Create FermiFS{N,M} from onr representation. This is efficient as long as at least N is provided.\n\nSee also: SingleComponentFockAddress, BoseFS, BitString.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs or onrs.\n\njulia> f2c = FermiFS2C((1,0,0),(0,1,1))\nCompositeFS(\n  FermiFS{1,3}((1, 0, 0)),\n  FermiFS{2,3}((0, 1, 1)),\n)\n\njulia> f2c isa FermiFS2C\ntrue\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#BitStrings","page":"BitString addresses","title":"BitStrings","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as bitstrings. Using this approach over an occupation number representation makes the addresses much more space-efficient. The API for BitStrings is as follows.","category":"page"},{"location":"addresses.html#BitString-API","page":"BitString addresses","title":"BitString API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.chunk_bits-Tuple{Any, Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.chunk_bits","text":"chunks_bits(::Type{<:BitString}, i)\nchunks_bits(s, i)\n\nNumber of bits in the i-th chunk of s.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.chunk_type-Union{Tuple{Type{<:BitString{<:Any, <:Any, T}}}, Tuple{T}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.chunk_type","text":"chunk_type(::Type{<:BitString})\nchunk_type(s::BitString)\n\nType of unsigned integer used to store the chunks.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.chunks-Tuple{BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.chunks","text":"chunks(s::BitString)\n\nSVector that stores the chunks of s.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_bits-Union{Tuple{Type{<:BitString{B}}}, Tuple{B}} where B","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_bits","text":"num_bits(::Type{<:BitString})\nnum_bits(s::BitString)\n\nTotal number of bits stored in bitstring.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_chunks-Union{Tuple{Type{<:BitString{<:Any, N}}}, Tuple{N}} where N","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_chunks","text":"num_chunks(::Type{<:BitString})\nnum_chunks(s::BitString)\n\nNumber of chunks in bitstring. Equivalent to length(chunks(s)).\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_chunks-Union{Tuple{Val{B}}, Tuple{B}} where B","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_chunks","text":"num_chunks(::Val{B})\n\nDetermine the number and type of chunks needed to store B bits.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.top_chunk_bits-Union{Tuple{Type{<:BitString{B}}}, Tuple{B}} where B","page":"BitString addresses","title":"Rimu.BitStringAddresses.top_chunk_bits","text":"top_chunk_bits(::Type{<:BitString})\ntop_chunk_bits(s::BitString)\n\nNumber of bits stored in top chunk. Equivalent to chunk_bits(s, 1).\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.8.0.  Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given  if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation  G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle \n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere \n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (\\hat{A}_1, ..., \\hat{A}_K), overlaps of  langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}.  The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last  as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap  langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DeltaMemory","page":"API","title":"Rimu.DeltaMemory","text":"DeltaMemory(Δ::Int) <: MemoryStrategy\n\nBefore updating the shift, memory noise with a memory length of Δ is applied, where Δ = 1 means no memory noise.\n\nr̃ = (pnorm - tnorm)/(dτ*pnorm) + shift\nr = r̃ - <r̃>\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DeltaMemory2","page":"API","title":"Rimu.DeltaMemory2","text":"DeltaMemory2(Δ::Int) <: MemoryStrategy\n\nBefore updating the shift, memory noise with a memory length of Δ is applied, where Δ = 1 means no memory noise.\n\nr̃ = pnorm - tnorm + shift*dτ*pnorm\nr = (r̃ - <r̃>)/(dτ*pnorm)\n\nThe long-term average of r is not guaranteed to be zero.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DeltaMemory3","page":"API","title":"Rimu.DeltaMemory3","text":"DeltaMemory3(Δ::Int, level::Float64) <: MemoryStrategy\n\nBefore updating the shift, apply multiplicative memory noise with a memory length of Δ at level level, where Δ = 1 means no memory noise.\n\nr̃ = (pnorm - tnorm)/pnorm + dτ*shift\nr = r̃ - <r̃>\nw .*= 1 + level*r\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MemoryStrategy","page":"API","title":"Rimu.MemoryStrategy","text":"Abstract type for defining the strategy for injectimg memory noise. Implemented strategies:\n\nNoMemory\nDeltaMemory\nShiftMemory\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, -, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoMemory","page":"API","title":"Rimu.NoMemory","text":"NoMemory <: MemoryStrategy\n\nDefault strategy for MemoryStrategy indicating that no memory noise will be used.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoThreading","page":"API","title":"Rimu.NoThreading","text":"NoThreading <: ThreadingStrategy\n\nThreadingStrategy that disables threading.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a replica after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step(::PostStepStrategy, ::ReplicaState).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedMemory","page":"API","title":"Rimu.ProjectedMemory","text":"ProjectedMemory(Δ::Int, projector, pp::Number) <: MemoryStrategy\nProjectedMemory(Δ::Int, projector, v::AbstractDVec)\n\nBefore updating the shift, apply memory noise to minimize the fluctuations of the overlap of the coefficient vector with projector. Averaging over Δ time steps is applied, where Δ = 1 means no memory noise is applied. Use pp to initialise the value of the projection or pass v in order to initialise the projection with pp = projector.v.\n\nr̃ = (projector⋅v - projector⋅w)/projector⋅v + dτ*shift\nr = r̃ - <r̃>\n\nwhere v is the coefficient vector before and w after applying a regular FCIQMC step.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PurgeNegatives","page":"API","title":"Rimu.PurgeNegatives","text":"PurgeNegatives <: MemoryStrategy\n\nPurge all negative sign walkers.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.QMCState","page":"API","title":"Rimu.QMCState","text":"QMCState\n\nHolds all information needed to run lomc!, except the dataframe. Holds an NTuple of ReplicaStates, the Hamiltonian, and various strategies that control the algorithm. Constructed and returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState(v, w, pnorm, params, id)\n\nStruct that holds all information needed for an independent run of the algorithm.\n\nCan be advanced a step forward with advance!.\n\nFields\n\nhamiltonian: the model Hamiltonian.\nv: vector.\nw: working memory.\npnorm: previous walker number (see walkernumber).\nparams: the FciqmcRunStrategy.\nid: appended to reported columns.\n\nSee also QMCState, ReplicaStrategy, replica_stats, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report\n\nInternal structure that holds the temporary reported values. See report!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReporting strategy that writes the report directly to a file. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nKeyword arguments\n\nfilename: the file to report to. If the file already exists, a new file is created.\nreporting_interval: interval between simulation steps that are reported to a DataFrame.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_r_strat\nreport!\nreport_after_step\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftMemory","page":"API","title":"Rimu.ShiftMemory","text":"ShiftMemory(Δ::Int) <: MemoryStrategy\n\nEffectively replaces the fluctuating shift update procedure for the coefficient vector by an averaged shift over Δ timesteps, where Δ = 1 means no averaging.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"Abstract type for defining the strategy for updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SplittablesThreading","page":"API","title":"Rimu.SplittablesThreading","text":"SplittablesThreading <: ThreadingStrategy\n\nThreadingStrategy based on SplittablesBase.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ThreadingStrategy","page":"API","title":"Rimu.ThreadingStrategy","text":"abstract type ThreadingStrategy\n\nControls how threading is performed in lomc!.\n\nInterface\n\nfciqmc_step!\nworking_memory\n\nImplemented Strategies\n\nNoThreading\nThreadsThreading\nSplittablesThreading\nThreadsXSumThreading\nThreadsXForeachThreading\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ThreadsThreading","page":"API","title":"Rimu.ThreadsThreading","text":"ThreadsThreading <: ThreadingStrategy\n\nThreadingStrategy based on Base.Threads.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ThreadsXForeachThreading","page":"API","title":"Rimu.ThreadsXForeachThreading","text":"ThreadsXForeachThreading <: ThreadingStrategy\n\nThreadingStrategy based on ThreadsX.foreach.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ThreadsXSumThreading","page":"API","title":"Rimu.ThreadsXSumThreading","text":"ThreadsXSumThreading <: ThreadingStrategy\n\nThreadingStrategy based on ThreadsX.sum.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TripleLogUpdate","page":"API","title":"Rimu.TripleLogUpdate","text":"TripleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, η = 0.01) <: ShiftStrategy\n\nStrategy for updating the shift according to the extended log formula with damping parameters ζ, ξ, and η.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n- fracηdτlnleft(fracℜ(Ψ^n+1)_1^2 + ℑ(Ψ^n+1)_1^2\nℜ(Ψ^n)_1^2 + ℑ(Ψ^n)_1^2right)\n\nwhere N_mathrmw is the walkernumber(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, s_strat)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Union{Tuple{T}, Tuple{Any, Rimu.QMCState, Rimu.ReplicaState{T, T1, V, W, R} where {T1, V, W, R<:FciqmcRunStrategy{T1}}}} where T","page":"API","title":"Rimu.advance!","text":"advance!(report::Report, state::QMCState, replica::ReplicaState)\n\nAdvance the replica by one step. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.apply_memory_noise!-Union{Tuple{T}, Tuple{K}, Tuple{Union{AbstractDVec{K, T}, AbstractArray{T}}, Any, Any, Any, Any, Any}} where {K, T<:Real}","page":"API","title":"Rimu.apply_memory_noise!","text":"r = apply_memory_noise!(w, v, shift, dτ, pnorm, m_strat::MemoryStrategy)\n\nApply memory noise to w, i.e. w .+= r.*v, computing the noise r according to m_strat. Note that m_strat needs to be compatible with StochasticStyle(w). Otherwise, an error exception is thrown. See MemoryStrategy.\n\nw is the walker array after fciqmc step, v the previous one, pnorm the norm of v, and r the instantaneously applied noise.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.fciqmc_step!","page":"API","title":"Rimu.fciqmc_step!","text":"fciqmc_step!(t_strat::ThreadingStrategy, w, ham, v, shift, dτ) -> stat_names, stats\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = 1 - dτ(hatH - S)v^n \n\nwhere Ĥ == ham and S == shift.\n\nWhether the operation is performed in stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(w). See StochasticStyle.\n\nWhether the multiplication is performed on multiple threads is controlled by t_strat (see ThreadingStrategy). w is the working memory corresponding to t_strat (see working_memory).\n\nReturns the step stats generated by the StochasticStyle.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::QMCState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. v can be a single starting vector. The default choice is\n\nv = DVec(starting_address(ham) => 10; style=IsStochasticInteger())\n\nand triggers the integer walker FCIQMC algorithm. See DVec and StochasticStyle.\n\nKeyword arguments, defaults, and precedence:\n\nparams::FciqmcRunStrategy = RunTillLastStep(laststep = 100, dτ = 0.01, shift = diagonal_element(ham, starting_address(ham))) - basic parameters of simulation state, see FciqmcRunStrategy; is mutated\nlaststep - can be used to override information otherwise contained in params\ns_strat::ShiftStrategy = DoubleLogUpdate(targetwalkers = 100, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\npost_step::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nreplica::ReplicaStrategy = NoStats(1) - run several synchronised simulation, see ReplicaStrategy.\nr_strat::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step dynamically, see TimeStepStrategy\nm_strat::MemoryStrategy = NoMemory() - experimental: inject memory noise, see MemoryStrategy\nthreading = :auto - can be used to control the use of multithreading (overridden by wm)\n:auto - use multithreading if s_strat.targetwalkers ≥ 500\ntrue - use multithreading if available (set shell variable JULIA_NUM_THREADS!)\nfalse - run on single thread\nwm - working memory; if set, it controls the use of multithreading and overrides threading; is mutated\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed into lomc! that will be pushed into\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a QMCState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS((1,2,3));\n\n\njulia> hamiltonian = HubbardReal1D(add);\n\n\njulia> df1, state = lomc!(hamiltonian);\n\n\njulia> df2, _ = lomc!(state, df1; laststep=200); # Continuation run\n\n\njulia> size(df1)\n(100, 13)\n\njulia> size(df2)\n(200, 13)\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.ntuple_working_memory-Tuple{Any}","page":"API","title":"Rimu.ntuple_working_memory","text":"ntuple_working_memory(dv::AbstractDVec)\n\nCreate a NTuple{N} of vectors that are similar to dv, where N = Threads.nthreads().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step","page":"API","title":"Rimu.post_step","text":"post_step(::PostStepStrategy, ::ReplicaState) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs.  This function is only called every reporting_interval steps, as defined by the ReportingStrategy.  See also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_r_strat-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_r_strat","text":"refine_r_strat(r_strat::ReportingStrategy) -> r_strat\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, replicas::NTuple{N,ReplicaState}) -> (names, values)\n\nReturn the names and values of statistics related to N replicas consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This fuction will be called every reporting_interval steps from lomc!,  or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also ReplicaState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step-Tuple{ReportingStrategy, Vararg{Any}}","page":"API","title":"Rimu.report_after_step","text":"report_after_step(::ReportingStrategy, step, report, state)\n\nThis function is called at the very end of a step, after reporting_interval steps. For example, it can be used to print some information to stdout.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.select_threading_strategy-Tuple{Rimu.ThreadingStrategy, Any}","page":"API","title":"Rimu.select_threading_strategy","text":"select_threading_strategy(threading, targetwalkers)\n\nSelect a ThreadingStrategy to control threading in lomc!.\n\nthreading can be:\n\n:auto: decide whether threading should be done or not based on targetwalkers and whether threads are available.\ntrue or false: use the default ThreadingStrategy or NoThreading.\nAny ThreadingStrategy.\n\nThe default ThreadingStrategy is currently SplittablesThreading.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.sort_into_targets!-Tuple{Any, Any, Any}","page":"API","title":"Rimu.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> agg, wm, agg_stats\n\nAggregate coefficients from source to agg and from stats to agg_stats according to thread- or MPI-level parallelism. wm passes back a reference to working memory.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift","page":"API","title":"Rimu.update_shift","text":"update_shift(s <: ShiftStrategy, shift, shiftMode, tnorm, pnorm, dτ, step, df, v_new, v_old)\n\nUpdate the shift according to strategy s. See ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.working_memory","page":"API","title":"Rimu.working_memory","text":"working_memory(t_strat::ThreadingStrategy, dv)\n\nCreate a working memory instance compatible with t_strat. The working memory must be compatible with sort_into_targets!.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#ConsistentRNG","page":"API","title":"ConsistentRNG","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module ConsistentRNG","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Rimu/StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_threshold and abs_threshold keywords. Stochastic selection of spawns is controlled  by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting a threshold to spawning and setting compression to NoCompression.\n\nParameters:\n\nrel_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g. abs_threshold = 0.1 * target_walkers.\nproj_threshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns. See WithReplacement for behaviour and possible arguments.\ncompression = ThresholdCompression(proj_threshold): CompressionStrategy used to compress the vector after a step. Overrides proj_threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsExplosive","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsExplosive","text":"IsExplosive{T=Float64}(;\n    splatter_factor,\n    explosion_threshold,\n    compression\n) <: StochasticStyle{T}\n\nQMC propagation with explosive walkers. Walkers with small walker numbers do not perform the standard death/spawning steps. Instead, a walker will either die completely and spawn with a greater magnitude (refered to as explosion below), or stay unchanged and not spawn. The probabilty of exploding is controlled by the shift and dτ.\n\nWalkers with high walker numbers spawn as if IsDynamicSemistochastic was used.\n\nLike IsDynamicSemistochastic, the vector is compressed after all spawning is performed.\n\nThis style is experimental.\n\nParameters\n\nsplatter_factor = 1.0: The spawning strength to use with exploded walkers.\nexplosion_threshold = 1.0: Entries smaller or equal than this value will attempt to explode.\nproj_threshold = 1.0: Threshold to use in vector compression. See ThresholdCompression.\ncompression = ThresholdCompression(proj_threshold): CompressionStrategy to use to compress the vector. Overrides proj_threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex target number walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations).\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\nfciqmc_col!\nupdate_dvec!\nCompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc! and DVec.\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\nfciqmc_col!(::StochasticStyle, w, H, address, value, shift, dτ)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\nupdate_dvec! for arbitrary transformations after the spawning step.\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\n\nReturn a tuple of names (Symbol or String) and a tuple of zeros of values of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.fciqmc_col!","page":"Stochastic styles","title":"Rimu.Interfaces.fciqmc_col!","text":"fciqmc_col!(w, ham, add, num, shift, dτ)\nfciqmc_col!(::StochasticStyle, args...)\n\nSpawning and diagonal step of FCIQMC for single column of ham. In essence it computes\n\nw .+= (1 .+ dτ.*(shift .- ham[:,add])).*num.\n\nThe StochasticStyle(w), picks the algorithm used.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.update_dvec!","page":"Stochastic styles","title":"Rimu.Interfaces.update_dvec!","text":"update_dvec!([::StochasticStyle,] dvec) -> dvec, nt\n\nPerform an arbitrary transformation on dvec after the spawning step is completed and report statistics to the DataFrame.\n\nReturns the new dvec and a NamedTuple nt of statistics to be reported.\n\nWhen extending this function for a custom StochasticStyle, define a method for the two-argument call signature!\n\nThe default implementation uses CompressionStrategy to compress the vector.\n\nNote: update_dvec! may return a new vector.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step. \n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as  MyCompressionStrategy <: CompressionStrategy and define a method for \n\ncompress!(s::MyCompressionStrategy, v)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!(::CompressionStrategy, v)\n\nCompress the vector v and return it.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Throws an error if no known default style is known.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, ham, add, val, dτ, shift, threshold=0, report_stats=false)\n-> (clones, deaths, zombies, annihilations)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0, [report_annihilations::Bool])\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited and the number of annihilations.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!-Tuple{Rimu.StochasticStyles.SpawningStrategy, Any, Any, Any, Any, Any}","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, ham::AbstractHamiltonian, add, val, dτ)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, dτ)\n\nPerform stochastic spawns to w from address add with val walkers. dτ is a factor multiplied to every spawns, while val also controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"method"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0, strength=1.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\nstrength sets the number of spawns to perform, e.g. if val=5 and strength=2, 10 spawns will be performed on average.\n\nspawn! with this strategy returns the number of spawns and annihilations.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by strat.strength.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is affected by strat.strength.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold and strat.strength parameters.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, and the number of spawns and annihilations.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawns and annihilations.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawns and annihilations.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0, strength=1.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\nstrength sets the number of spawns to perform, e.g. if val=5 and strength=2, 10 spawns will be performed.\n\nspawn! with this strategy returns the number of spawns and annihilations.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0, strength=1.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\nstrength sets the number of spawns to perform, e.g. if val=5 and strength=2, 10 spawns will be performed.\n\nspawn! with this strategy returns the number of spawns and annihilations.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"https://github.com/joachimbrand/Rimu.jl/blob/develop/scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground-state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS((0, 0, 0, 0, 10, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"hamiltonian = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. Wrap a vector in MPIData to make it MPI distributed. We set the vector's style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"dvec = MPIData(DVec(address => 1.0; style=IsDynamicSemistochastic()))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"r_strat = ReportToFile(filename=\"result.arrow\", save_if=is_mpi_root(), reporting_interval = 1, chunk_size=1000)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step = ProjectedEnergy(hamiltonian, dvec)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation. The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(hamiltonian, dvec; r_strat, s_strat, post_step, dτ=1e-4, laststep=10_000)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Cufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!()  is done by wrapping the primary data structures as MPIData. As a consequence, data will  be stored in a distributed fashion among the MPI ranks and only communicated between ranks when  necessary. The relevant functionality is provided by the module Rimu.RMPI.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract type for data structures that behave similar to sparse vectors, but are indexed by an arbitrary type V (could be non-integers) similarly to dictionaries. AbstractDVecs  are  designed to work well with lomc! and KrylovKit.\n\nConcrete implementations are available as DVec and InitiatorDVec.\n\nAbstractDvecs lie somewhere between AbstractDicts and sparse AbstractVectors, while being subtyped to neither. Generally they behave like a dictionary, while supportting various linear algebra functionality. Indexing with a value not stored in the dictionary returns zero(V). Setting a stored value to 0 or below eps(V::AbstractFloat) removes the value from the dictionary. Their length signals the number of stored elements, not the size of the vector space.\n\nThey have a StochasticStyle which selects the spawning algorithm in FCIQMC.\n\nTo iterate over an AbstractDVec, use keys, pairs, or values.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above. Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, haskey, empty!, isempty) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. How the initiators are handled is controlled by the initiator keyword argument (see below).\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an InitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for AbstractDVecs.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes common linear algebra operations such as dot or norm.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, calues, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following functions.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"zero!\nadd!\nwalkernumber","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.zero!","page":"Dict vectors","title":"Rimu.DictVectors.zero!","text":"zero!(v)\n\nReplace v by a zero vector as an inplace operation. For AbstractDVec types it means removing all non-zero elements. For AbstractArrays, it sets all of the values to zero.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.add!","page":"Dict vectors","title":"Rimu.DictVectors.add!","text":"add!(x::AbstractDVec,y::AbstactDVec)\n\nInplace add x+y and store result in x.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(w)\n\nCompute the number of walkers in w. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(w) is identical to norm(w,1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\nwalkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\n\nWhen defining a new InitiatorRule, also define a corresponding method for value!\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.value","page":"Dict vectors","title":"Rimu.DictVectors.value","text":"value(i::InitiatorRule, v::InitiatorValue)\n\nConvert the InitiatorValue v into a scalar value according to the InitiatorRule i.\n\nInternal function that implements functionality of InitiatorDVec.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold) <: InitiatorRule\n\nInitiator rule to be passed to InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold) <: InitiatorRule\n\nSimplified initiator rule to be passed to InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold) <: InitiatorRule\n\nInitiator rule to be passed to InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
