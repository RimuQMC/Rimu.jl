var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.212066158822459 ± 0.0021509329674481163\n   G2(1) = 0.9173603641097987 ± 0.0009180367836629764\n   G2(2) = 0.9822932247792246 ± 0.0009638305361771767\n   G2(3) = 0.9886266633994938 ± 0.0012865846022355025\n   G2(4) = 0.9822932247792246 ± 0.0009638305361771767\n   G2(5) = 0.9173603641097987 ± 0.0009180367836629764\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.008738044308444 ± 0.14586098137916567\n   Replica 2: -3.9539131427423433 ± 0.1410034071215865\n   Replica 3: -3.999349372433246 ± 0.12879942133477407\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip240\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip241\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip242\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.13 2211.02,1003.13 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.42 2211.02,745.42 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.711 2211.02,487.711 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.002 2211.02,230.002 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.13 423.181,1003.13 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.42 423.181,745.42 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.711 423.181,487.711 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.002 423.181,230.002 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M290.043 1016.47 L306.363 1016.47 L306.363 1020.41 L284.418 1020.41 L284.418 1016.47 Q287.08 1013.72 291.664 1009.09 Q296.27 1004.44 297.451 1003.09 Q299.696 1000.57 300.576 998.834 Q301.478 997.075 301.478 995.385 Q301.478 992.631 299.534 990.895 Q297.613 989.158 294.511 989.158 Q292.312 989.158 289.858 989.922 Q287.427 990.686 284.65 992.237 L284.65 987.515 Q287.474 986.381 289.927 985.802 Q292.381 985.223 294.418 985.223 Q299.789 985.223 302.983 987.908 Q306.177 990.594 306.177 995.084 Q306.177 997.214 305.367 999.135 Q304.58 1001.03 302.474 1003.63 Q301.895 1004.3 298.793 1007.51 Q295.691 1010.71 290.043 1016.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M316.224 985.848 L334.58 985.848 L334.58 989.783 L320.506 989.783 L320.506 998.256 Q321.524 997.908 322.543 997.746 Q323.562 997.561 324.58 997.561 Q330.367 997.561 333.747 1000.73 Q337.126 1003.9 337.126 1009.32 Q337.126 1014.9 333.654 1018 Q330.182 1021.08 323.862 1021.08 Q321.687 1021.08 319.418 1020.71 Q317.173 1020.34 314.765 1019.6 L314.765 1014.9 Q316.849 1016.03 319.071 1016.59 Q321.293 1017.14 323.77 1017.14 Q327.774 1017.14 330.112 1015.04 Q332.45 1012.93 332.45 1009.32 Q332.45 1005.71 330.112 1003.6 Q327.774 1001.5 323.77 1001.5 Q321.895 1001.5 320.02 1001.91 Q318.168 1002.33 316.224 1003.21 L316.224 985.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M356.339 988.927 Q352.728 988.927 350.899 992.492 Q349.094 996.033 349.094 1003.16 Q349.094 1010.27 350.899 1013.83 Q352.728 1017.38 356.339 1017.38 Q359.973 1017.38 361.779 1013.83 Q363.608 1010.27 363.608 1003.16 Q363.608 996.033 361.779 992.492 Q359.973 988.927 356.339 988.927 M356.339 985.223 Q362.149 985.223 365.205 989.83 Q368.284 994.413 368.284 1003.16 Q368.284 1011.89 365.205 1016.5 Q362.149 1021.08 356.339 1021.08 Q350.529 1021.08 347.45 1016.5 Q344.395 1011.89 344.395 1003.16 Q344.395 994.413 347.45 989.83 Q350.529 985.223 356.339 985.223 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M286.062 728.14 L304.418 728.14 L304.418 732.075 L290.344 732.075 L290.344 740.547 Q291.363 740.2 292.381 740.038 Q293.4 739.853 294.418 739.853 Q300.205 739.853 303.585 743.024 Q306.964 746.195 306.964 751.612 Q306.964 757.19 303.492 760.292 Q300.02 763.371 293.701 763.371 Q291.525 763.371 289.256 763.001 Q287.011 762.63 284.603 761.889 L284.603 757.19 Q286.687 758.325 288.909 758.88 Q291.131 759.436 293.608 759.436 Q297.613 759.436 299.951 757.329 Q302.288 755.223 302.288 751.612 Q302.288 748.001 299.951 745.894 Q297.613 743.788 293.608 743.788 Q291.733 743.788 289.858 744.204 Q288.006 744.621 286.062 745.501 L286.062 728.14 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M326.177 731.218 Q322.566 731.218 320.737 734.783 Q318.932 738.325 318.932 745.454 Q318.932 752.561 320.737 756.126 Q322.566 759.667 326.177 759.667 Q329.811 759.667 331.617 756.126 Q333.446 752.561 333.446 745.454 Q333.446 738.325 331.617 734.783 Q329.811 731.218 326.177 731.218 M326.177 727.515 Q331.987 727.515 335.043 732.121 Q338.122 736.704 338.122 745.454 Q338.122 754.181 335.043 758.788 Q331.987 763.371 326.177 763.371 Q320.367 763.371 317.288 758.788 Q314.233 754.181 314.233 745.454 Q314.233 736.704 317.288 732.121 Q320.367 727.515 326.177 727.515 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M356.339 731.218 Q352.728 731.218 350.899 734.783 Q349.094 738.325 349.094 745.454 Q349.094 752.561 350.899 756.126 Q352.728 759.667 356.339 759.667 Q359.973 759.667 361.779 756.126 Q363.608 752.561 363.608 745.454 Q363.608 738.325 361.779 734.783 Q359.973 731.218 356.339 731.218 M356.339 727.515 Q362.149 727.515 365.205 732.121 Q368.284 736.704 368.284 745.454 Q368.284 754.181 365.205 758.788 Q362.149 763.371 356.339 763.371 Q350.529 763.371 347.45 758.788 Q344.395 754.181 344.395 745.454 Q344.395 736.704 347.45 732.121 Q350.529 727.515 356.339 727.515 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M284.835 470.431 L307.057 470.431 L307.057 472.422 L294.511 504.991 L289.627 504.991 L301.432 474.366 L284.835 474.366 L284.835 470.431 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M316.224 470.431 L334.58 470.431 L334.58 474.366 L320.506 474.366 L320.506 482.838 Q321.524 482.491 322.543 482.329 Q323.562 482.144 324.58 482.144 Q330.367 482.144 333.747 485.315 Q337.126 488.486 337.126 493.903 Q337.126 499.482 333.654 502.584 Q330.182 505.662 323.862 505.662 Q321.687 505.662 319.418 505.292 Q317.173 504.922 314.765 504.181 L314.765 499.482 Q316.849 500.616 319.071 501.172 Q321.293 501.727 323.77 501.727 Q327.774 501.727 330.112 499.621 Q332.45 497.514 332.45 493.903 Q332.45 490.292 330.112 488.186 Q327.774 486.079 323.77 486.079 Q321.895 486.079 320.02 486.496 Q318.168 486.912 316.224 487.792 L316.224 470.431 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M356.339 473.51 Q352.728 473.51 350.899 477.074 Q349.094 480.616 349.094 487.746 Q349.094 494.852 350.899 498.417 Q352.728 501.959 356.339 501.959 Q359.973 501.959 361.779 498.417 Q363.608 494.852 363.608 487.746 Q363.608 480.616 361.779 477.074 Q359.973 473.51 356.339 473.51 M356.339 469.806 Q362.149 469.806 365.205 474.412 Q368.284 478.996 368.284 487.746 Q368.284 496.473 365.205 501.079 Q362.149 505.662 356.339 505.662 Q350.529 505.662 347.45 501.079 Q344.395 496.473 344.395 487.746 Q344.395 478.996 347.45 474.412 Q350.529 469.806 356.339 469.806 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M256.664 243.347 L264.303 243.347 L264.303 216.982 L255.992 218.648 L255.992 214.389 L264.256 212.722 L268.932 212.722 L268.932 243.347 L276.571 243.347 L276.571 247.282 L256.664 247.282 L256.664 243.347 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M296.015 215.801 Q292.404 215.801 290.576 219.366 Q288.77 222.907 288.77 230.037 Q288.77 237.144 290.576 240.708 Q292.404 244.25 296.015 244.25 Q299.65 244.25 301.455 240.708 Q303.284 237.144 303.284 230.037 Q303.284 222.907 301.455 219.366 Q299.65 215.801 296.015 215.801 M296.015 212.097 Q301.826 212.097 304.881 216.704 Q307.96 221.287 307.96 230.037 Q307.96 238.764 304.881 243.37 Q301.826 247.954 296.015 247.954 Q290.205 247.954 287.127 243.37 Q284.071 238.764 284.071 230.037 Q284.071 221.287 287.127 216.704 Q290.205 212.097 296.015 212.097 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M326.177 215.801 Q322.566 215.801 320.737 219.366 Q318.932 222.907 318.932 230.037 Q318.932 237.144 320.737 240.708 Q322.566 244.25 326.177 244.25 Q329.811 244.25 331.617 240.708 Q333.446 237.144 333.446 230.037 Q333.446 222.907 331.617 219.366 Q329.811 215.801 326.177 215.801 M326.177 212.097 Q331.987 212.097 335.043 216.704 Q338.122 221.287 338.122 230.037 Q338.122 238.764 335.043 243.37 Q331.987 247.954 326.177 247.954 Q320.367 247.954 317.288 243.37 Q314.233 238.764 314.233 230.037 Q314.233 221.287 317.288 216.704 Q320.367 212.097 326.177 212.097 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M356.339 215.801 Q352.728 215.801 350.899 219.366 Q349.094 222.907 349.094 230.037 Q349.094 237.144 350.899 240.708 Q352.728 244.25 356.339 244.25 Q359.973 244.25 361.779 240.708 Q363.608 237.144 363.608 230.037 Q363.608 222.907 361.779 219.366 Q359.973 215.801 356.339 215.801 M356.339 212.097 Q362.149 212.097 365.205 216.704 Q368.284 221.287 368.284 230.037 Q368.284 238.764 365.205 243.37 Q362.149 247.954 356.339 247.954 Q350.529 247.954 347.45 243.37 Q344.395 238.764 344.395 230.037 Q344.395 221.287 347.45 216.704 Q350.529 212.097 356.339 212.097 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip242)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.002 4017.76,230.002 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1246.4 461.101,1245.74 461.669,1243.97 462.238,1241.1 462.806,1240.29 463.375,1238.34 463.943,1237.34 464.511,1236.26 465.08,1234.02 465.648,1232.76 466.216,1230.33 466.785,1228.82 467.353,1227.2 467.921,1225.46 468.49,1223.56 469.058,1220.49 469.626,1218.26 470.195,1215.94 470.763,1213.39 471.331,1209.63 471.9,1206.76 472.468,1202.64 473.036,1199.43 473.605,1195.03 474.173,1191.6 474.741,1185.83 475.31,1180.9 475.878,1176.78 476.446,1171.41 477.015,1166.84 477.583,1160.1 478.152,1154.14 478.72,1147.06 479.288,1140.67 479.857,1134.14 480.425,1127.43 480.993,1120.35 481.562,1114.26 482.13,1107.77 482.698,1099.07 483.267,1092.14 483.835,1082.81 484.403,1074.64 484.972,1066.34 485.54,1058.78 486.108,1045.98 486.677,1036.3 487.245,1026.42 487.813,1015.46 488.382,1007.64 488.95,999.51 489.518,988.2 490.087,979.891 490.655,968.253 491.224,957.783 491.792,946.395 492.36,936.915 492.929,926.348 493.497,915.626 494.065,905.05 494.634,894.51 495.202,884.987 495.77,876.245 496.339,866.577 496.907,856.861 497.475,848.104 498.044,839.267 498.612,829.461 499.18,819.62 499.749,808.544 500.317,798.701 500.885,787.979 501.454,779.224 502.022,770.361 502.59,760.49 503.159,750.759 503.727,738.768 504.295,726.835 504.864,716.036 505.432,707.712 506.001,698.23 506.569,688.768 507.137,678.526 507.706,668.53 508.274,659.444 508.842,651.298 509.411,643.433 509.979,634.385 510.547,626.649 511.116,616.902 511.684,605.193 512.252,597.008 512.821,587.699 513.389,579.701 513.957,569.831 514.526,562.219 515.094,554.752 515.662,547.371 516.231,538.12 516.799,532.145 517.367,524.055 517.936,518.45 518.504,512.871 519.072,504.973 519.641,498.494 520.209,492.232 520.778,484.967 521.346,477.877 521.914,472.817 522.483,466.732 523.051,461.019 523.619,455.303 524.188,450.604 524.756,446.095 525.324,438.659 525.893,433.364 526.461,429.197 527.029,424.163 527.598,420.157 528.166,415.131 528.734,409.121 529.303,405.226 529.871,400.551 530.439,395.89 531.008,391.46 531.576,387.227 532.144,383.975 532.713,378.698 533.281,374.705 533.85,369.725 534.418,365.909 534.986,360.306 535.555,353.871 536.123,350.785 536.691,346.79 537.26,343.833 537.828,343.206 538.396,342.357 538.965,340.279 539.533,336.463 540.101,334.997 540.67,334.256 541.238,332.332 541.806,330.325 542.375,326.277 542.943,323.782 543.511,321.193 544.08,317.648 544.648,316.322 545.216,314.922 545.785,313.45 546.353,310.947 546.921,309.532 547.49,309.337 548.058,307.921 548.627,306.714 549.195,304.972 549.763,302.566 550.332,299.108 550.9,299.913 551.468,299.618 552.037,298.198 552.605,293.638 553.173,291.651 553.742,291.565 554.31,288.505 554.878,285.361 555.447,282.574 556.015,281.804 556.583,281.367 557.152,280.743 557.72,278.853 558.288,277.177 558.857,275.802 559.425,274.361 559.993,271.82 560.562,270.562 561.13,270.423 561.698,270.193 562.267,269.842 562.835,270.559 563.404,270.253 563.972,268.85 564.54,269.684 565.109,269.348 565.677,269.804 566.245,270.308 566.814,270.819 567.382,267.08 567.95,266.628 568.519,265.352 569.087,264.027 569.655,264.719 570.224,264.077 570.792,262.617 571.36,261.138 571.929,260.749 572.497,260.44 573.065,259.961 573.634,259.719 574.202,259.446 574.77,260.069 575.339,259.46 575.907,256.071 576.476,254.932 577.044,253.452 577.612,253.34 578.181,251.393 578.749,251.515 579.317,250.525 579.886,250.723 580.454,251.846 581.022,250.775 581.591,249.748 582.159,251.738 582.727,250.468 583.296,250.378 583.864,250.362 584.432,249.275 585.001,246.179 585.569,244.254 586.137,245.613 586.706,246.964 587.274,243.794 587.842,244.901 588.411,245.119 588.979,245.506 589.547,246.835 590.116,243.734 590.684,240.907 591.253,241.551 591.821,242.231 592.389,240.518 592.958,243.098 593.526,241.278 594.094,243.76 594.663,240.883 595.231,242.246 595.799,244.734 596.368,243.72 596.936,244.844 597.504,243.806 598.073,244.711 598.641,245.705 599.209,245.584 599.778,244.31 600.346,245.33 600.914,243.022 601.483,241.21 602.051,240.54 602.619,243.932 603.188,241.873 603.756,239.93 604.325,239.972 604.893,239.203 605.461,241.584 606.03,239.685 606.598,241.101 607.166,241.244 607.735,240.318 608.303,239.514 608.871,238.952 609.44,241.142 610.008,241.114 610.576,243.349 611.145,244.25 611.713,244.159 612.281,244.076 612.85,243.967 613.418,244.909 613.986,243.273 614.555,245.093 615.123,241.688 615.691,241.719 616.26,243.551 616.828,244.222 617.396,241.882 617.965,238.724 618.533,238.938 619.102,238.121 619.67,239.484 620.238,240.751 620.807,240.685 621.375,240.552 621.943,239.582 622.512,236.728 623.08,236.748 623.648,235.916 624.217,236.238 624.785,235.43 625.353,236.663 625.922,236.857 626.49,237.087 627.058,235.199 627.627,236.518 628.195,236.734 628.763,235.756 629.332,238.049 629.9,238.06 630.468,242.249 631.037,239.831 631.605,236.402 632.173,236.678 632.742,235.874 633.31,236.866 633.879,236.968 634.447,237.036 635.015,237.252 635.584,236.222 636.152,237.175 636.72,235.989 637.289,237.086 637.857,237.914 638.425,238.093 638.994,239.147 639.562,237.966 640.13,236.925 640.699,235.692 641.267,236.002 641.835,236.083 642.404,235.285 642.972,236.502 643.54,237.533 644.109,238.414 644.677,239.562 645.245,238.069 645.814,235.813 646.382,235.688 646.951,236.806 647.519,236.675 648.087,235.645 648.656,233.67 649.224,232.842 649.792,233.11 650.361,234.345 650.929,236.614 651.497,235.668 652.066,234.671 652.634,234.813 653.202,233.758 653.771,231.901 654.339,231.095 654.907,232.45 655.476,232.658 656.044,231.918 656.612,231.236 657.181,231.553 657.749,232.887 658.317,234.289 658.886,235.654 659.454,233.719 660.022,231.763 660.591,233.058 661.159,233.484 661.728,232.708 662.296,231.978 662.864,232.141 663.433,232.285 664.001,230.494 664.569,229.991 665.138,230.697 665.706,231.093 666.274,230.62 666.843,231.915 667.411,230.052 667.979,229.53 668.548,231.859 669.116,232.276 669.684,231.379 670.253,233.578 670.821,229.7 671.389,229.104 671.958,228.64 672.526,229.174 673.094,230.893 673.663,229.392 674.231,231.024 674.799,231.235 675.368,232.969 675.936,233.225 676.505,232.472 677.073,233.639 677.641,232.806 678.21,234.161 678.778,234.454 679.346,233.742 679.915,233.89 680.483,234.055 681.051,235.083 681.62,236.034 682.188,236.964 682.756,235.735 683.325,235.5 683.893,235.376 684.461,234.39 685.03,234.282 685.598,234.298 686.166,232.273 686.735,229.314 687.303,230.779 687.871,232.227 688.44,231.576 689.008,230.856 689.577,231.186 690.145,229.166 690.713,228.454 691.282,227.888 691.85,227.384 692.418,229.053 692.987,230.66 693.555,231.957 694.123,233.236 694.692,232.297 695.26,232.62 695.828,233.785 696.397,235.104 696.965,236.372 697.533,236.562 698.102,238.579 698.67,240.338 699.238,238.916 699.807,238.719 700.375,236.483 700.943,236.304 701.512,236.171 702.08,236.098 702.648,237.03 703.217,240.221 703.785,241.018 704.354,240.478 704.922,239.955 705.49,239.593 706.059,239.443 706.627,238.006 707.195,238.636 707.764,237.048 708.332,237.731 708.9,238.49 709.469,236.967 710.037,236.767 710.605,237.409 711.174,236.135 711.742,236.845 712.31,236.747 712.879,236.317 713.447,236.214 714.015,235.927 714.584,235.597 715.152,236.565 715.72,235.238 716.289,234.963 716.857,235.681 717.425,233.318 717.994,231.1 718.562,232.146 719.131,232.296 719.699,233.077 720.267,230.94 720.836,228.855 721.404,231.247 721.972,231.423 722.541,230.607 723.109,229.597 723.677,229.588 724.246,228.565 724.814,230.702 725.382,227.69 725.951,228.043 726.519,228.147 727.087,228.381 727.656,224.622 728.224,225.223 728.792,224.666 729.361,225.133 729.929,225.606 730.497,227.145 731.066,227.401 731.634,225.503 732.203,224.017 732.771,224.629 733.339,226.134 733.908,226.645 734.476,226.186 735.044,228.705 735.613,230.21 736.181,233.468 736.749,233.238 737.318,235.227 737.886,236.213 738.454,235.981 739.023,235.572 739.591,233.062 740.159,233.176 740.728,235.311 741.296,237.188 741.864,236.993 742.433,236.676 743.001,237.527 743.569,237.131 744.138,237.757 744.706,237.413 745.274,237.16 745.843,236.673 746.411,236.522 746.98,236.137 747.548,235.656 748.116,235.54 748.685,235.075 749.253,236.887 749.821,236.454 750.39,237.16 750.958,237.774 751.526,237.301 752.095,236.777 752.663,235.398 753.231,233.887 753.8,232.704 754.368,233.619 754.936,233.374 755.505,232.046 756.073,231.842 756.641,230.729 757.21,230.713 757.778,230.643 758.346,231.701 758.915,231.647 759.483,230.447 760.052,231.651 760.62,231.524 761.188,232.342 761.757,230.131 762.325,232.196 762.893,231.06 763.462,228.07 764.03,230.41 764.598,229.311 765.167,230.625 765.735,230.718 766.303,231.569 766.872,229.377 767.44,231.55 768.008,229.628 768.577,229.74 769.145,231.876 769.713,231.747 770.282,230.635 770.85,229.574 771.418,229.444 771.987,228.558 772.555,227.897 773.123,230.265 773.692,230.337 774.26,231.271 774.829,230.211 775.397,228.257 775.965,229.341 776.534,228.224 777.102,228.466 777.67,227.636 778.239,229.17 778.807,229.365 779.375,229.451 779.944,230.657 780.512,229.707 781.08,230.812 781.649,229.748 782.217,228.675 782.785,231.003 783.354,231.185 783.922,230.198 784.49,229.314 785.059,228.545 785.627,228.014 786.195,228.326 786.764,227.721 787.332,227.031 787.9,226.468 788.469,227.884 789.037,228.228 789.606,229.641 790.174,229.962 790.742,230.099 791.311,230.146 791.879,228.027 792.447,226.996 793.016,226.379 793.584,226.667 794.152,226.067 794.721,227.522 795.289,228.828 795.857,229.037 796.426,228.336 796.994,227.49 797.562,226.836 798.131,230.137 798.699,230.442 799.267,229.387 799.836,228.575 800.404,230.145 800.972,230.614 801.541,228.569 802.109,229.13 802.678,229.481 803.246,231.937 803.814,230.901 804.383,231.099 804.951,229.196 805.519,228.363 806.088,227.763 806.656,229.183 807.224,227.291 807.793,224.727 808.361,225.075 808.929,224.531 809.498,225.147 810.066,223.569 810.634,222.245 811.203,221.93 811.771,225.017 812.339,225.583 812.908,227.316 813.476,228.881 814.044,230.324 814.613,229.674 815.181,230.179 815.749,233.449 816.318,232.473 816.886,233.783 817.455,233.767 818.023,233.773 818.591,235.802 819.16,235.721 819.728,236.601 820.296,235.394 820.865,236.153 821.433,234.918 822.001,232.856 822.57,231.953 823.138,233.174 823.706,233.199 824.275,231.301 824.843,230.623 825.411,228.755 825.98,228.009 826.548,228.559 827.116,228.867 827.685,226.326 828.253,226.947 828.821,226.489 829.39,227.018 829.958,228.634 830.526,227.996 831.095,229.297 831.663,228.7 832.232,227.927 832.8,231.346 833.368,234.644 833.937,236.636 834.505,235.412 835.073,236.372 835.642,235.966 836.21,234.69 836.778,234.618 837.347,235.342 837.915,235.085 838.483,233.903 839.052,233.721 839.62,233.606 840.188,233.354 840.757,236.287 841.325,234.956 841.893,235.827 842.462,236.465 843.03,237.248 843.598,237.863 844.167,237.236 844.735,234.785 845.304,235.638 845.872,235.334 846.44,233.802 847.009,229.585 847.577,226.457 848.145,225.734 848.714,226.271 849.282,228.727 849.85,229.044 850.419,231.153 850.987,230.075 851.555,229.311 852.124,229.445 852.692,231.617 853.26,231.492 853.829,232.508 854.397,235.515 854.965,234.101 855.534,233.826 856.102,234.843 856.67,233.461 857.239,236.383 857.807,235.208 858.375,236.229 858.944,235.726 859.512,235.223 860.081,233.98 860.649,231.717 861.217,231.425 861.786,231.29 862.354,235.315 862.922,235.814 863.491,233.35 864.059,233.078 864.627,234.924 865.196,235.836 865.764,237.678 866.332,237.065 866.901,237.705 867.469,235.132 868.037,231.553 868.606,231.306 869.174,230.913 869.742,231.75 870.311,231.647 870.879,231.48 871.447,232.457 872.016,233.441 872.584,233.193 873.152,235.921 873.721,234.492 874.289,234.082 874.858,233.877 875.426,233.655 875.994,233.305 876.563,232.885 877.131,229.536 877.699,227.233 878.268,227.48 878.836,226.672 879.404,226.861 879.973,227.775 880.541,229.818 881.109,228.664 881.678,229.682 882.246,228.442 882.814,228.568 883.383,229.502 883.951,228.389 884.519,230.483 885.088,231.375 885.656,232.437 886.224,230.112 886.793,229.7 887.361,229.8 887.93,229.48 888.498,230.662 889.066,229.832 889.635,228.757 890.203,228.576 890.771,226.598 891.34,227.982 891.908,228.039 892.476,228.233 893.045,227.236 893.613,226.327 894.181,225.717 894.75,222.83 895.318,223.478 895.886,226.108 896.455,226.478 897.023,227.753 897.591,227.081 898.16,227.426 898.728,227.692 899.296,226.918 899.865,228.146 900.433,229.603 901.001,228.568 901.57,227.634 902.138,226.995 902.707,226.941 903.275,227.215 903.843,228.365 904.412,228.526 904.98,229.658 905.548,231.708 906.117,230.476 906.685,230.424 907.253,228.425 907.822,229.783 908.39,229.786 908.958,228.885 909.527,229.009 910.095,229.069 910.663,228.135 911.232,228.413 911.8,230.48 912.368,228.321 912.937,228.661 913.505,227.722 914.073,226.917 914.642,230.147 915.21,231.16 915.779,231.004 916.347,230.94 916.915,229.772 917.484,231.125 918.052,230.353 918.62,228.367 919.189,227.559 919.757,227.779 920.325,226.938 920.894,228.582 921.462,229.709 922.03,228.853 922.599,227.879 923.167,226.26 923.735,227.845 924.304,228.038 924.872,227.298 925.44,227.805 926.009,227.183 926.577,230.48 927.145,229.584 927.714,229.636 928.282,231.653 928.85,232.608 929.419,232.615 929.987,233.727 930.556,233.647 931.124,234.611 931.692,233.309 932.261,232.345 932.829,233.219 933.397,232.895 933.966,231.918 934.534,233.077 935.102,232.06 935.671,233.075 936.239,235.041 936.807,235.895 937.376,235.446 937.944,234.112 938.512,235.938 939.081,235.824 939.649,234.459 940.217,234.36 940.786,234.207 941.354,232.829 941.922,234.842 942.491,232.615 943.059,230.448 943.627,229.325 944.196,230.376 944.764,230.564 945.333,232.845 945.901,232.669 946.469,231.606 947.038,234.532 947.606,234.223 948.174,230.807 948.743,229.943 949.311,230.136 949.879,231.09 950.448,231.163 951.016,232.046 951.584,234.84 952.153,234.42 952.721,236.224 953.289,239.267 953.858,238.742 954.426,237.124 954.994,237.833 955.563,238.187 956.131,237.66 956.699,235.99 957.268,235.595 957.836,235.05 958.405,234.39 958.973,233.026 959.541,232.683 960.11,233.459 960.678,233.101 961.246,231.603 961.815,232.373 962.383,232.124 962.951,232.062 963.52,231.936 964.088,231.795 964.656,230.493 965.225,231.461 965.793,232.217 966.361,232.921 966.93,231.571 967.498,231.343 968.066,225.81 968.635,226.073 969.203,225.332 969.771,226.694 970.34,226.806 970.908,228.093 971.476,227.184 972.045,227.4 972.613,227.454 973.182,227.472 973.75,227.42 974.318,222.46 974.887,221.713 975.455,223.137 976.023,221.483 976.592,223.02 977.16,223.606 977.728,226.033 978.297,225.397 978.865,226.792 979.433,225.916 980.002,228.161 980.57,226.315 981.138,225.517 981.707,224.796 982.275,224.992 982.843,226.36 983.412,227.732 983.98,227.902 984.548,228.051 985.117,228.094 985.685,227.005 986.253,227.304 986.822,227.517 987.39,227.859 987.959,228.991 988.527,228.052 989.095,227.274 989.664,227.826 990.232,226.966 990.8,226.335 991.369,227.664 991.937,227.879 992.505,228.12 993.074,229.288 993.642,230.47 994.21,229.524 994.779,229.561 995.347,231.045 995.915,232.008 996.484,232.797 997.052,233.509 997.62,233.512 998.189,232.202 998.757,231.143 999.325,233.162 999.894,233.036 1000.46,233.863 1001.03,235.523 1001.6,234.101 1002.17,232.859 1002.74,232.35 1003.3,231.055 1003.87,230.818 1004.44,229.726 1005.01,231.739 1005.58,231.593 1006.15,232.576 1006.71,231.551 1007.28,231.343 1007.85,232.124 1008.42,234.193 1008.99,233.799 1009.56,232.232 1010.12,232.229 1010.69,231.105 1011.26,233.142 1011.83,233.028 1012.4,233.789 1012.97,233.507 1013.53,234.265 1014.1,233.781 1014.67,233.431 1015.24,234.066 1015.81,229.539 1016.38,231.668 1016.94,232.439 1017.51,232.207 1018.08,231.971 1018.65,233.021 1019.22,232.748 1019.79,232.488 1020.35,232.293 1020.92,231.144 1021.49,228.927 1022.06,228.931 1022.63,227.921 1023.2,227.05 1023.76,228.145 1024.33,228.266 1024.9,224.198 1025.47,224.369 1026.04,224.644 1026.61,223.807 1027.17,225.216 1027.74,226.535 1028.31,226.924 1028.88,227.151 1029.45,227.483 1030.02,227.58 1030.58,226.607 1031.15,225.742 1031.72,226.168 1032.29,225.513 1032.86,224.845 1033.43,227.272 1033.99,227.45 1034.56,227.813 1035.13,226.916 1035.7,224.24 1036.27,224.831 1036.84,227.184 1037.4,226.462 1037.97,227.012 1038.54,227.276 1039.11,226.709 1039.68,225.833 1040.25,225.135 1040.81,222.779 1041.38,225.458 1041.95,230.045 1042.52,231.156 1043.09,231.18 1043.66,231.209 1044.22,230.289 1044.79,229.117 1045.36,226.252 1045.93,225.635 1046.5,225.813 1047.07,227.485 1047.63,228.807 1048.2,225.913 1048.77,227.47 1049.34,230.092 1049.91,231.17 1050.48,232.51 1051.05,232.406 1051.61,231.154 1052.18,232.061 1052.75,233.068 1053.32,233.132 1053.89,234.959 1054.46,235.791 1055.02,235.416 1055.59,232.111 1056.16,231.126 1056.73,232.3 1057.3,232.133 1057.87,233.052 1058.43,232.834 1059,232.683 1059.57,233.785 1060.14,232.545 1060.71,229.273 1061.28,229.563 1061.84,230.565 1062.41,230.411 1062.98,231.257 1063.55,230.232 1064.12,229.556 1064.69,231.772 1065.25,233.887 1065.82,232.782 1066.39,233.836 1066.96,232.588 1067.53,231.384 1068.1,230.346 1068.66,229.36 1069.23,229.472 1069.8,230.636 1070.37,229.6 1070.94,228.501 1071.51,228.534 1072.07,228.516 1072.64,230.699 1073.21,230.743 1073.78,233.81 1074.35,235.554 1074.92,235.155 1075.48,232.87 1076.05,231.697 1076.62,232.801 1077.19,232.727 1077.76,231.624 1078.33,233.753 1078.89,232.572 1079.46,232.457 1080.03,232.382 1080.6,231.442 1081.17,231.367 1081.74,228.173 1082.3,229.358 1082.87,229.383 1083.44,230.554 1084.01,230.194 1084.58,228.98 1085.15,230.044 1085.71,230.244 1086.28,232.206 1086.85,229.174 1087.42,230.194 1087.99,229.117 1088.56,229.135 1089.12,228.275 1089.69,229.461 1090.26,229.534 1090.83,231.717 1091.4,230.71 1091.97,231.526 1092.53,231.41 1093.1,230.121 1093.67,230.006 1094.24,230.023 1094.81,231.137 1095.38,232.003 1095.94,231.771 1096.51,231.816 1097.08,232.61 1097.65,233.617 1098.22,233.391 1098.79,235.115 1099.35,233.746 1099.92,234.315 1100.49,233.03 1101.06,232.893 1101.63,231.72 1102.2,231.622 1102.76,231.502 1103.33,226.319 1103.9,227.393 1104.47,228.754 1105.04,229.905 1105.61,230.018 1106.17,229.889 1106.74,229.91 1107.31,231.139 1107.88,229.902 1108.45,227.677 1109.02,230.81 1109.58,231.79 1110.15,231.727 1110.72,232.313 1111.29,230.849 1111.86,230.82 1112.43,232.553 1112.99,231.422 1113.56,231.363 1114.13,230.176 1114.7,233.207 1115.27,232.735 1115.84,232.584 1116.4,232.463 1116.97,231.01 1117.54,229.929 1118.11,229.724 1118.68,229.726 1119.25,229.746 1119.81,228.709 1120.38,228.775 1120.95,231.764 1121.52,230.547 1122.09,232.307 1122.66,231.963 1123.23,233.577 1123.79,232.313 1124.36,232.098 1124.93,232.836 1125.5,231.563 1126.07,231.402 1126.64,232.256 1127.2,230.919 1127.77,231.738 1128.34,233.314 1128.91,231.676 1129.48,226.32 1130.05,225.38 1130.61,224.61 1131.18,224.934 1131.75,226.115 1132.32,226.154 1132.89,227.078 1133.46,226.113 1134.02,225.39 1134.59,224.649 1135.16,224.119 1135.73,225.648 1136.3,225.984 1136.87,225.372 1137.43,225.866 1138,227.196 1138.57,226.31 1139.14,227.608 1139.71,227.51 1140.28,225.62 1140.84,224.92 1141.41,225.283 1141.98,225.459 1142.55,225.66 1143.12,226.11 1143.69,225.274 1144.25,224.53 1144.82,224.847 1145.39,225.519 1145.96,225.938 1146.53,225.283 1147.1,224.677 1147.66,225.262 1148.23,225.557 1148.8,225.993 1149.37,227.368 1149.94,225.72 1150.51,227.076 1151.07,228.569 1151.64,225.782 1152.21,226.229 1152.78,226.479 1153.35,228.885 1153.92,227.924 1154.48,228.334 1155.05,226.466 1155.62,226.775 1156.19,228.021 1156.76,228.358 1157.33,230.653 1157.89,231.827 1158.46,229.928 1159.03,228.356 1159.6,230.826 1160.17,229.869 1160.74,230.107 1161.3,231.51 1161.87,233.723 1162.44,232.495 1163.01,231.386 1163.58,231.414 1164.15,230.786 1164.71,231.864 1165.28,231.901 1165.85,231.855 1166.42,232.978 1166.99,233.035 1167.56,236.236 1168.12,237.131 1168.69,234.628 1169.26,235.317 1169.83,237.144 1170.4,234.444 1170.97,234.1 1171.53,234.788 1172.1,237.503 1172.67,236.189 1173.24,235.771 1173.81,234.524 1174.38,232.201 1174.94,232.226 1175.51,231.078 1176.08,230.109 1176.65,230.045 1177.22,231.416 1177.79,233.507 1178.35,234.262 1178.92,234.066 1179.49,231.97 1180.06,232.642 1180.63,231.331 1181.2,230.156 1181.76,229.321 1182.33,228.327 1182.9,229.509 1183.47,229.294 1184.04,230.602 1184.61,231.694 1185.17,231.476 1185.74,231.613 1186.31,232.643 1186.88,233.395 1187.45,235.182 1188.02,235.141 1188.58,234.886 1189.15,233.577 1189.72,231.931 1190.29,232.688 1190.86,233.532 1191.43,233.287 1192,233.125 1192.56,232.555 1193.13,230.247 1193.7,231.105 1194.27,229.765 1194.84,229.888 1195.41,229.878 1195.97,232.057 1196.54,229.562 1197.11,229.629 1197.68,227.615 1198.25,227.945 1198.82,228.012 1199.38,226.895 1199.95,226.88 1200.52,225.889 1201.09,226.132 1201.66,225.356 1202.23,227.563 1202.79,226.826 1203.36,226.896 1203.93,228.269 1204.5,227.371 1205.07,227.647 1205.64,227.729 1206.2,229.936 1206.77,230.83 1207.34,227.598 1207.91,227.643 1208.48,226.494 1209.05,226.775 1209.61,224.919 1210.18,225.513 1210.75,226.491 1211.32,225.858 1211.89,225.464 1212.46,226.862 1213.02,229.048 1213.59,228.029 1214.16,227.243 1214.73,228.314 1215.3,228.534 1215.87,228.604 1216.43,229.801 1217,230.637 1217.57,231.618 1218.14,232.506 1218.71,232.468 1219.28,232.542 1219.84,233.378 1220.41,235.168 1220.98,233.846 1221.55,233.589 1222.12,232.381 1222.69,232.557 1223.25,232.663 1223.82,231.374 1224.39,230.327 1224.96,230.365 1225.53,229.244 1226.1,231.327 1226.66,229.385 1227.23,233.803 1227.8,233.597 1228.37,234.361 1228.94,233.925 1229.51,232.641 1230.07,230.245 1230.64,231.278 1231.21,231.367 1231.78,232.275 1232.35,231.024 1232.92,230.925 1233.48,229.957 1234.05,231.813 1234.62,232.606 1235.19,231.32 1235.76,231.428 1236.33,232.369 1236.89,232.255 1237.46,230.115 1238.03,228.088 1238.6,227.326 1239.17,226.661 1239.74,226.826 1240.3,229.25 1240.87,227.193 1241.44,228.326 1242.01,227.39 1242.58,227.758 1243.15,228.799 1243.71,228.791 1244.28,230.938 1244.85,230.964 1245.42,231.04 1245.99,230.908 1246.56,230.968 1247.12,231.869 1247.69,229.384 1248.26,227.366 1248.83,229.824 1249.4,229.961 1249.97,228.982 1250.53,228.957 1251.1,229.834 1251.67,229.751 1252.24,229.901 1252.81,230.81 1253.38,230.668 1253.94,228.407 1254.51,230.512 1255.08,230.331 1255.65,231.16 1256.22,231.057 1256.79,231.01 1257.35,228.921 1257.92,226.817 1258.49,226.917 1259.06,228.038 1259.63,227.097 1260.2,228.102 1260.76,225.183 1261.33,225.631 1261.9,226.929 1262.47,227.047 1263.04,227.536 1263.61,227.634 1264.18,225.626 1264.74,225.869 1265.31,226.046 1265.88,225.435 1266.45,225.579 1267.02,227.024 1267.59,228.318 1268.15,228.596 1268.72,229.747 1269.29,230.981 1269.86,231.856 1270.43,230.751 1271,231.502 1271.56,231.416 1272.13,232.401 1272.7,230.155 1273.27,230.113 1273.84,229.227 1274.41,230.503 1274.97,232.615 1275.54,232.595 1276.11,233.608 1276.68,232.518 1277.25,232.348 1277.82,231.201 1278.38,229.295 1278.95,229.459 1279.52,229.591 1280.09,229.579 1280.66,228.772 1281.23,228.935 1281.79,228.76 1282.36,229.722 1282.93,232.025 1283.5,234.035 1284.07,232.772 1284.64,233.591 1285.2,231.196 1285.77,230.286 1286.34,229.143 1286.91,230.328 1287.48,232.395 1288.05,233.238 1288.61,232.016 1289.18,232.156 1289.75,233.054 1290.32,233.882 1290.89,233.612 1291.46,232.217 1292.02,229.98 1292.59,227.788 1293.16,227.982 1293.73,228.813 1294.3,228.929 1294.87,229.099 1295.43,230.29 1296,230.201 1296.57,230.15 1297.14,230.178 1297.71,226.052 1298.28,227.044 1298.84,225.229 1299.41,224.579 1299.98,224.96 1300.55,225.18 1301.12,225.406 1301.69,225.645 1302.25,227.048 1302.82,228.255 1303.39,228.489 1303.96,224.653 1304.53,225.301 1305.1,226.859 1305.66,228.253 1306.23,228.528 1306.8,228.598 1307.37,227.786 1307.94,228.025 1308.51,228.176 1309.07,229.311 1309.64,229.409 1310.21,231.583 1310.78,232.578 1311.35,231.307 1311.92,232.208 1312.48,232.121 1313.05,235.022 1313.62,236.899 1314.19,236.589 1314.76,236.158 1315.33,232.528 1315.89,231.453 1316.46,231.389 1317.03,233.55 1317.6,233.488 1318.17,234.493 1318.74,232.319 1319.3,234.198 1319.87,233.851 1320.44,232.636 1321.01,234.446 1321.58,234.236 1322.15,234.913 1322.71,234.605 1323.28,232.161 1323.85,231.011 1324.42,229.923 1324.99,229.998 1325.56,229.145 1326.12,228.252 1326.69,229.614 1327.26,231.79 1327.83,230.727 1328.4,229.742 1328.97,231.049 1329.53,227.76 1330.1,226.774 1330.67,227.943 1331.24,228.195 1331.81,228.249 1332.38,228.348 1332.94,227.587 1333.51,227.82 1334.08,225.097 1334.65,225.493 1335.22,226.865 1335.79,227.288 1336.36,228.545 1336.92,231.818 1337.49,230.87 1338.06,230.646 1338.63,231.566 1339.2,231.437 1339.77,232.313 1340.33,232.051 1340.9,229.817 1341.47,229.89 1342.04,230.908 1342.61,233.873 1343.18,233.383 1343.74,232.36 1344.31,232.424 1344.88,230.017 1345.45,228.902 1346.02,229.898 1346.59,230.883 1347.15,231.819 1347.72,229.728 1348.29,231.899 1348.86,230.733 1349.43,230.792 1350,229.836 1350.56,229.909 1351.13,229.906 1351.7,229.905 1352.27,229.65 1352.84,230.685 1353.41,232.958 1353.97,232.883 1354.54,231.455 1355.11,230.297 1355.68,229.179 1356.25,229.263 1356.82,230.334 1357.38,229.236 1357.95,227.159 1358.52,224.275 1359.09,225.782 1359.66,229.308 1360.23,231.378 1360.79,231.446 1361.36,231.553 1361.93,233.53 1362.5,233.103 1363.07,232.767 1363.64,233.345 1364.2,235.279 1364.77,234.786 1365.34,234.08 1365.91,237.971 1366.48,240.515 1367.05,238.807 1367.61,239.154 1368.18,238.431 1368.75,239.762 1369.32,238.711 1369.89,236.595 1370.46,236.151 1371.02,236.607 1371.59,233.831 1372.16,234.27 1372.73,237.071 1373.3,236.444 1373.87,233.897 1374.43,233.474 1375,234.163 1375.57,233.67 1376.14,231.079 1376.71,229.653 1377.28,230.513 1377.84,230.319 1378.41,228.926 1378.98,228.668 1379.55,227.635 1380.12,228.652 1380.69,227.56 1381.25,228.88 1381.82,224.497 1382.39,223.626 1382.96,225.161 1383.53,226.49 1384.1,225.395 1384.66,225.551 1385.23,228.97 1385.8,230.174 1386.37,232.022 1386.94,230.659 1387.51,230.448 1388.07,228.156 1388.64,229.359 1389.21,230.127 1389.78,225.795 1390.35,226.906 1390.92,229.084 1391.48,229.113 1392.05,229.082 1392.62,228.064 1393.19,227.156 1393.76,227.239 1394.33,225.145 1394.89,226.358 1395.46,225.452 1396.03,224.647 1396.6,226.059 1397.17,226.426 1397.74,228.672 1398.3,230.664 1398.87,228.348 1399.44,227.44 1400.01,227.575 1400.58,227.767 1401.15,225.756 1401.71,226.053 1402.28,226.116 1402.85,226.373 1403.42,225.61 1403.99,225.936 1404.56,225.267 1405.13,225.537 1405.69,227.876 1406.26,227.977 1406.83,227.045 1407.4,227.297 1407.97,228.718 1408.54,230.524 1409.1,229.315 1409.67,231.516 1410.24,233.771 1410.81,233.675 1411.38,232.33 1411.95,232.1 1412.51,233.952 1413.08,231.534 1413.65,228.423 1414.22,229.683 1414.79,229.557 1415.36,226.576 1415.92,225.573 1416.49,226.853 1417.06,227.224 1417.63,228.544 1418.2,224.282 1418.77,224.996 1419.33,225.155 1419.9,227.515 1420.47,227.762 1421.04,228.918 1421.61,229.136 1422.18,227.974 1422.74,229.256 1423.31,229.321 1423.88,227.463 1424.45,227.562 1425.02,228.588 1425.59,231.721 1426.15,230.62 1426.72,231.486 1427.29,233.284 1427.86,234.041 1428.43,232.653 1429,233.317 1429.56,233.11 1430.13,231.891 1430.7,231.707 1431.27,231.641 1431.84,232.772 1432.41,232.613 1432.97,233.626 1433.54,233.358 1434.11,230.921 1434.68,229.833 1435.25,229.731 1435.82,230.863 1436.38,230.835 1436.95,230.743 1437.52,229.47 1438.09,230.616 1438.66,230.424 1439.23,230.041 1439.79,231.167 1440.36,231.13 1440.93,231.028 1441.5,229.627 1442.07,229.466 1442.64,230.544 1443.2,230.541 1443.77,232.465 1444.34,233.442 1444.91,232.979 1445.48,232.627 1446.05,232.274 1446.61,231.073 1447.18,231.902 1447.75,230.778 1448.32,232.574 1448.89,231.33 1449.46,230.026 1450.02,231.872 1450.59,231.689 1451.16,229.719 1451.73,229.829 1452.3,229.804 1452.87,229.485 1453.43,228.401 1454,227.224 1454.57,226.135 1455.14,226.494 1455.71,224.813 1456.28,225.247 1456.84,225.852 1457.41,227.053 1457.98,227.225 1458.55,226.266 1459.12,226.563 1459.69,229.955 1460.25,228.011 1460.82,228.376 1461.39,227.315 1461.96,227.335 1462.53,225.322 1463.1,223.706 1463.66,224.191 1464.23,222.588 1464.8,222.141 1465.37,223.615 1465.94,225.15 1466.51,225.435 1467.07,225.916 1467.64,228.002 1468.21,224.285 1468.78,224.687 1469.35,225.191 1469.92,225.5 1470.48,224.684 1471.05,226.18 1471.62,228.669 1472.19,227.607 1472.76,228.827 1473.33,231.248 1473.89,231.188 1474.46,231.284 1475.03,230.352 1475.6,230.489 1476.17,230.62 1476.74,228.848 1477.31,225.906 1477.87,229.235 1478.44,231.534 1479.01,233.553 1479.58,233.385 1480.15,234.346 1480.72,236.307 1481.28,237.874 1481.85,237.285 1482.42,238.025 1482.99,237.826 1483.56,238.14 1484.13,239.593 1484.69,237.876 1485.26,239.626 1485.83,239.014 1486.4,238.326 1486.97,238.688 1487.54,238.045 1488.1,237.647 1488.67,234.988 1489.24,233.683 1489.81,231.123 1490.38,231.928 1490.95,233.736 1491.51,231.449 1492.08,228.989 1492.65,227.974 1493.22,224.851 1493.79,224.134 1494.36,226.238 1494.92,228.456 1495.49,228.438 1496.06,226.396 1496.63,226.51 1497.2,226.622 1497.77,225.766 1498.33,229.108 1498.9,229.358 1499.47,228.422 1500.04,227.482 1500.61,226.536 1501.18,226.923 1501.74,227.29 1502.31,227.45 1502.88,228.6 1503.45,226.728 1504.02,228.918 1504.59,229.099 1505.15,230.174 1505.72,230.129 1506.29,227.865 1506.86,228.04 1507.43,228.165 1508,227.232 1508.56,228.513 1509.13,228.48 1509.7,229.664 1510.27,227.849 1510.84,227.923 1511.41,229.307 1511.97,228.311 1512.54,229.552 1513.11,230.764 1513.68,230.738 1514.25,228.74 1514.82,229.772 1515.38,228.993 1515.95,227.16 1516.52,225.396 1517.09,225.869 1517.66,225.081 1518.23,225.707 1518.79,225.981 1519.36,226.17 1519.93,225.301 1520.5,227.712 1521.07,228.013 1521.64,230.32 1522.2,230.354 1522.77,228.264 1523.34,228.672 1523.91,230.808 1524.48,229.873 1525.05,229.014 1525.61,231.281 1526.18,231.285 1526.75,229.984 1527.32,229.851 1527.89,231.688 1528.46,230.728 1529.02,230.766 1529.59,231.071 1530.16,230.886 1530.73,231.006 1531.3,232.223 1531.87,231.009 1532.43,231.103 1533,230.176 1533.57,230.138 1534.14,228.853 1534.71,225.924 1535.28,227.29 1535.84,228.45 1536.41,229.478 1536.98,229.27 1537.55,230.452 1538.12,230.464 1538.69,229.354 1539.25,227.516 1539.82,228.717 1540.39,228.987 1540.96,229.068 1541.53,231.27 1542.1,231.184 1542.66,232.103 1543.23,235.202 1543.8,233.894 1544.37,232.916 1544.94,232.194 1545.51,234.373 1546.08,233.004 1546.64,236.004 1547.21,235.461 1547.78,233.045 1548.35,230.827 1548.92,232.97 1549.49,234.796 1550.05,234.461 1550.62,234.991 1551.19,235.71 1551.76,235.156 1552.33,234.813 1552.9,234.259 1553.46,235.828 1554.03,233.511 1554.6,233.479 1555.17,234.401 1555.74,233.209 1556.31,231.953 1556.87,232.745 1557.44,232.479 1558.01,232.244 1558.58,232.283 1559.15,232.158 1559.72,233.068 1560.28,231.973 1560.85,231.706 1561.42,232.455 1561.99,231.365 1562.56,231.057 1563.13,230.929 1563.69,229.671 1564.26,228.621 1564.83,227.642 1565.4,227.792 1565.97,227.98 1566.54,229.103 1567.1,227.89 1567.67,226.74 1568.24,226.936 1568.81,228.1 1569.38,228.481 1569.95,230.742 1570.51,230.686 1571.08,228.448 1571.65,227.46 1572.22,227.624 1572.79,227.767 1573.36,229.04 1573.92,229.156 1574.49,229.388 1575.06,227.178 1575.63,226.337 1576.2,225.524 1576.77,223.855 1577.33,224.294 1577.9,226.896 1578.47,227.109 1579.04,228.043 1579.61,227.277 1580.18,227.623 1580.74,225.978 1581.31,226.26 1581.88,225.487 1582.45,225.854 1583.02,225.032 1583.59,225.362 1584.15,223.666 1584.72,223.201 1585.29,223.728 1585.86,223.298 1586.43,223 1587,224.522 1587.56,227.112 1588.13,226.178 1588.7,225.317 1589.27,224.86 1589.84,226.016 1590.41,225.148 1590.97,225.537 1591.54,227.154 1592.11,228.292 1592.68,229.736 1593.25,228.663 1593.82,231.038 1594.38,229.235 1594.95,229.314 1595.52,228.327 1596.09,229.372 1596.66,226.35 1597.23,226.55 1597.79,226.969 1598.36,226.399 1598.93,225.576 1599.5,224.027 1600.07,224.692 1600.64,226.214 1601.2,226.542 1601.77,225.931 1602.34,223.236 1602.91,223.759 1603.48,224.461 1604.05,226.98 1604.61,229.535 1605.18,232.796 1605.75,233.841 1606.32,234.751 1606.89,234.617 1607.46,234.44 1608.02,234.431 1608.59,231.972 1609.16,234.12 1609.73,232.882 1610.3,232.72 1610.87,232.657 1611.43,235.49 1612,238.219 1612.57,237.86 1613.14,238.461 1613.71,237.934 1614.28,240.423 1614.84,239.895 1615.41,237.4 1615.98,237.174 1616.55,236.718 1617.12,234.515 1617.69,234.348 1618.26,234.187 1618.82,231.855 1619.39,231.671 1619.96,233.736 1620.53,234.601 1621.1,234.407 1621.67,234.184 1622.23,235.881 1622.8,234.341 1623.37,231.105 1623.94,230.106 1624.51,233.411 1625.08,233.367 1625.64,233.202 1626.21,231.878 1626.78,230.929 1627.35,229.72 1627.92,229.586 1628.49,230.671 1629.05,231.436 1629.62,231.465 1630.19,230.382 1630.76,229.439 1631.33,229.631 1631.9,230.577 1632.46,231.534 1633.03,229.344 1633.6,230.068 1634.17,229.937 1634.74,230.011 1635.31,229.097 1635.87,229.22 1636.44,228.249 1637.01,229.555 1637.58,228.467 1638.15,229.487 1638.72,228.671 1639.28,229.726 1639.85,230.628 1640.42,228.39 1640.99,229.577 1641.56,228.379 1642.13,229.505 1642.69,229.504 1643.26,229.535 1643.83,230.923 1644.4,230.766 1644.97,230.756 1645.54,231.505 1646.1,230.209 1646.67,230.332 1647.24,229.002 1647.81,228.971 1648.38,230.989 1648.95,231.947 1649.51,232.837 1650.08,232.715 1650.65,233.358 1651.22,233.063 1651.79,234.971 1652.36,233.55 1652.92,233.177 1653.49,228.411 1654.06,228.715 1654.63,226.427 1655.2,227.553 1655.77,228.562 1656.33,228.344 1656.9,227.271 1657.47,225.418 1658.04,225.709 1658.61,226.99 1659.18,228.287 1659.74,228.463 1660.31,227.423 1660.88,227.561 1661.45,226.677 1662.02,228.254 1662.59,228.451 1663.15,228.523 1663.72,227.655 1664.29,226.983 1664.86,228.397 1665.43,228.712 1666,229.999 1666.56,232.131 1667.13,231.038 1667.7,229.751 1668.27,229.778 1668.84,228.798 1669.41,229.953 1669.97,229.878 1670.54,229.874 1671.11,231.063 1671.68,230.926 1672.25,229.955 1672.82,232.911 1673.38,234.94 1673.95,234.697 1674.52,235.709 1675.09,234.226 1675.66,232.028 1676.23,232.992 1676.79,235.793 1677.36,235.431 1677.93,233.98 1678.5,232.576 1679.07,233.363 1679.64,235.231 1680.2,235.103 1680.77,235.697 1681.34,234.285 1681.91,234.191 1682.48,232.893 1683.05,235.595 1683.61,233.184 1684.18,232.36 1684.75,231.977 1685.32,234.8 1685.89,232.17 1686.46,233.824 1687.02,235.395 1687.59,238.823 1688.16,237.141 1688.73,236.603 1689.3,235.892 1689.87,234.209 1690.44,230.82 1691,231.465 1691.57,230.336 1692.14,230.204 1692.71,232.113 1693.28,232.775 1693.85,233.466 1694.41,234.138 1694.98,234.716 1695.55,235.107 1696.12,234.488 1696.69,232.787 1697.26,230.32 1697.82,231.042 1698.39,228.73 1698.96,227.78 1699.53,228.839 1700.1,231.692 1700.67,229.334 1701.23,229.13 1701.8,227.858 1702.37,225.763 1702.94,224.678 1703.51,224.841 1704.08,225.183 1704.64,226.451 1705.21,226.537 1705.78,226.635 1706.35,226.784 1706.92,225.831 1707.49,222.997 1708.05,223.44 1708.62,223.644 1709.19,225.044 1709.76,226.213 1710.33,226.569 1710.9,225.687 1711.46,227.965 1712.03,226.106 1712.6,226.741 1713.17,225.89 1713.74,226.217 1714.31,226.421 1714.87,227.555 1715.44,227.779 1716.01,228.671 1716.58,228.769 1717.15,228.844 1717.72,228.711 1718.28,229.967 1718.85,231.93 1719.42,230.831 1719.99,230.798 1720.56,231.564 1721.13,232.469 1721.69,231.101 1722.26,231.165 1722.83,230.1 1723.4,228.873 1723.97,228.772 1724.54,227.988 1725.1,229.255 1725.67,229.683 1726.24,231.73 1726.81,231.665 1727.38,231.634 1727.95,231.498 1728.51,231.388 1729.08,232.243 1729.65,233.049 1730.22,232.881 1730.79,232.484 1731.36,232.216 1731.92,227.974 1732.49,228.017 1733.06,228.107 1733.63,228.231 1734.2,226.266 1734.77,226.603 1735.33,227.965 1735.9,228.242 1736.47,227.375 1737.04,227.625 1737.61,229.72 1738.18,231.67 1738.74,231.454 1739.31,231.222 1739.88,233.061 1740.45,232.832 1741.02,230.556 1741.59,232.589 1742.15,233.447 1742.72,235.287 1743.29,233.698 1743.86,233.212 1744.43,233.078 1745,231.47 1745.56,231.597 1746.13,230.565 1746.7,230.196 1747.27,229.059 1747.84,228.947 1748.41,230.019 1748.97,230.886 1749.54,230.998 1750.11,231.797 1750.68,231.603 1751.25,231.63 1751.82,231.551 1752.38,230.32 1752.95,230.345 1753.52,230.167 1754.09,231.287 1754.66,232.197 1755.23,231.932 1755.79,231.794 1756.36,230.43 1756.93,230.272 1757.5,230.132 1758.07,231.261 1758.64,227.994 1759.21,227.927 1759.77,227.938 1760.34,229.906 1760.91,231.035 1761.48,229.889 1762.05,228.745 1762.62,230.859 1763.18,230.778 1763.75,227.718 1764.32,227.673 1764.89,227.649 1765.46,227.59 1766.03,227.466 1766.59,227.39 1767.16,227.529 1767.73,227.625 1768.3,226.73 1768.87,225.069 1769.44,228.687 1770,229.925 1770.57,228.702 1771.14,228.767 1771.71,226.923 1772.28,226.128 1772.85,228.499 1773.41,229.708 1773.98,229.82 1774.55,228.602 1775.12,226.755 1775.69,227.959 1776.26,229.064 1776.82,228.047 1777.39,225.102 1777.96,226.471 1778.53,225.834 1779.1,225.871 1779.67,225.165 1780.23,227.568 1780.8,227.744 1781.37,227.674 1781.94,226.924 1782.51,227.411 1783.08,226.753 1783.64,225.881 1784.21,226.142 1784.78,226.409 1785.35,225.586 1785.92,224.92 1786.49,223.147 1787.05,226.474 1787.62,224.753 1788.19,226.204 1788.76,226.559 1789.33,228.889 1789.9,227.925 1790.46,225.157 1791.03,221.282 1791.6,219.895 1792.17,224.186 1792.74,224.564 1793.31,225.056 1793.87,225.575 1794.44,227.166 1795.01,228.384 1795.58,227.591 1796.15,228.133 1796.72,228.316 1797.28,228.385 1797.85,230.773 1798.42,230.748 1798.99,231.018 1799.56,232.06 1800.13,234.292 1800.69,230.893 1801.26,228.876 1801.83,229.092 1802.4,229.325 1802.97,230.514 1803.54,230.64 1804.1,229.574 1804.67,229.688 1805.24,229.957 1805.81,233.197 1806.38,235.119 1806.95,237.105 1807.51,234.637 1808.08,233.578 1808.65,234.34 1809.22,235.236 1809.79,235.035 1810.36,232.785 1810.92,232.576 1811.49,234.631 1812.06,236.545 1812.63,237.173 1813.2,235.637 1813.77,233.277 1814.33,233.851 1814.9,232.546 1815.47,231.282 1816.04,230.255 1816.61,231.252 1817.18,230.988 1817.74,229.136 1818.31,230.13 1818.88,230.092 1819.45,231.178 1820.02,227.804 1820.59,226.864 1821.15,227.221 1821.72,228.55 1822.29,228.693 1822.86,228.78 1823.43,228.815 1824,228.99 1824.56,227.055 1825.13,229.364 1825.7,228.437 1826.27,227.557 1826.84,227.65 1827.41,226.674 1827.97,228.184 1828.54,227.473 1829.11,227.68 1829.68,226.987 1830.25,229.539 1830.82,229.689 1831.39,227.541 1831.95,225.838 1832.52,225.021 1833.09,225.484 1833.66,225.739 1834.23,225.033 1834.8,226.436 1835.36,223.781 1835.93,223.439 1836.5,222.971 1837.07,227.518 1837.64,226.65 1838.21,228.358 1838.77,228.43 1839.34,226.628 1839.91,230.077 1840.48,229.942 1841.05,230.086 1841.62,230.182 1842.18,232.4 1842.75,232.362 1843.32,233.326 1843.89,234.123 1844.46,234.149 1845.03,234.075 1845.59,231.86 1846.16,231.893 1846.73,231.977 1847.3,232.042 1847.87,229.036 1848.44,231.452 1849,231.376 1849.57,231.229 1850.14,233.278 1850.71,233.132 1851.28,233.271 1851.85,235.224 1852.41,236.194 1852.98,237.811 1853.55,237.637 1854.12,237.972 1854.69,237.575 1855.26,237 1855.82,237.49 1856.39,236.894 1856.96,235.464 1857.53,238.965 1858.1,236.235 1858.67,233.691 1859.23,235.65 1859.8,236.439 1860.37,236.794 1860.94,237.379 1861.51,236.003 1862.08,234.385 1862.64,235.004 1863.21,235.526 1863.78,232.822 1864.35,232.604 1864.92,232.255 1865.49,231.856 1866.05,231.568 1866.62,231.404 1867.19,231.307 1867.76,230.088 1868.33,228.808 1868.9,228.759 1869.46,228.727 1870.03,227.596 1870.6,226.611 1871.17,226.649 1871.74,224.721 1872.31,226.049 1872.87,227.133 1873.44,227.177 1874.01,227.196 1874.58,225.46 1875.15,225.751 1875.72,225.22 1876.28,225.565 1876.85,226.984 1877.42,229.33 1877.99,230.455 1878.56,231.41 1879.13,230.346 1879.69,231.456 1880.26,231.281 1880.83,231.132 1881.4,229.981 1881.97,231.026 1882.54,234.864 1883.1,235.444 1883.67,237.148 1884.24,236.628 1884.81,235.967 1885.38,236.604 1885.95,234.059 1886.51,231.651 1887.08,229.432 1887.65,229.287 1888.22,228.14 1888.79,229.318 1889.36,229.336 1889.92,230.312 1890.49,229.046 1891.06,227.039 1891.63,230.368 1892.2,230.29 1892.77,230.012 1893.33,229.852 1893.9,229.898 1894.47,227.841 1895.04,228.012 1895.61,227.982 1896.18,229.367 1896.74,227.458 1897.31,227.743 1897.88,226.56 1898.45,227.616 1899.02,227.952 1899.59,228.257 1900.16,229.215 1900.72,229.134 1901.29,231.113 1901.86,230.981 1902.43,229.825 1903,229.857 1903.57,228.698 1904.13,226.632 1904.7,228.923 1905.27,229.837 1905.84,229.947 1906.41,229.967 1906.98,229.736 1907.54,229.847 1908.11,229.922 1908.68,228.756 1909.25,228.809 1909.82,230.876 1910.39,230.786 1910.95,228.548 1911.52,227.778 1912.09,226.795 1912.66,226.131 1913.23,224.486 1913.8,225.045 1914.36,225.517 1914.93,225.893 1915.5,225.974 1916.07,226.352 1916.64,230.665 1917.21,228.727 1917.77,231.959 1918.34,231.836 1918.91,231.769 1919.48,231.536 1920.05,231.508 1920.62,231.16 1921.18,231.979 1921.75,231.746 1922.32,230.49 1922.89,231.576 1923.46,230.486 1924.03,231.457 1924.59,230.493 1925.16,230.563 1925.73,230.702 1926.3,230.521 1926.87,231.451 1927.44,229.083 1928,229.042 1928.57,228.137 1929.14,229.203 1929.71,230.106 1930.28,229.934 1930.85,230.072 1931.41,229.099 1931.98,227.033 1932.55,228.195 1933.12,229.226 1933.69,228.219 1934.26,228.206 1934.82,229.243 1935.39,227.993 1935.96,228.113 1936.53,226.276 1937.1,227.666 1937.67,228.563 1938.23,229.641 1938.8,229.709 1939.37,229.651 1939.94,230.873 1940.51,229.923 1941.08,231.067 1941.64,234.358 1942.21,233.142 1942.78,233.636 1943.35,233.385 1943.92,235.238 1944.49,233.837 1945.05,234.677 1945.62,237.342 1946.19,236.843 1946.76,237.232 1947.33,238.702 1947.9,237.926 1948.46,238.41 1949.03,236.707 1949.6,233.888 1950.17,233.398 1950.74,233.929 1951.31,233.317 1951.87,233.163 1952.44,230.807 1953.01,230.778 1953.58,230.475 1954.15,231.352 1954.72,230.006 1955.28,227.946 1955.85,227.085 1956.42,229.094 1956.99,228.823 1957.56,226.967 1958.13,224.059 1958.69,222.269 1959.26,223.797 1959.83,222.142 1960.4,221.736 1960.97,222.403 1961.54,222.96 1962.1,223.584 1962.67,225.139 1963.24,225.538 1963.81,226.96 1964.38,227.06 1964.95,229.142 1965.51,231.279 1966.08,229.968 1966.65,229.992 1967.22,230.002 1967.79,229.153 1968.36,228.102 1968.92,230.034 1969.49,229.962 1970.06,230.046 1970.63,229.776 1971.2,229.819 1971.77,229.833 1972.34,230.042 1972.9,230.052 1973.47,229.154 1974.04,229.102 1974.61,228.091 1975.18,230.123 1975.75,234.448 1976.31,233.822 1976.88,231.561 1977.45,233.572 1978.02,233.517 1978.59,229.27 1979.16,230.316 1979.72,226.266 1980.29,227.484 1980.86,225.635 1981.43,225.677 1982,226.044 1982.57,227.44 1983.13,225.661 1983.7,224.922 1984.27,225.237 1984.84,225.595 1985.41,225.037 1985.98,225.551 1986.54,224.967 1987.11,227.656 1987.68,229.996 1988.25,230.021 1988.82,230.29 1989.39,231.476 1989.95,231.425 1990.52,231.45 1991.09,233.668 1991.66,233.309 1992.23,233.215 1992.8,231.193 1993.36,232.173 1993.93,233.138 1994.5,233.034 1995.07,234.888 1995.64,234.295 1996.21,234.103 1996.77,233.714 1997.34,232.649 1997.91,233.611 1998.48,232.333 1999.05,229.933 1999.62,228.893 2000.18,229.964 2000.75,231.043 2001.32,229.972 2001.89,229.073 2002.46,226.038 2003.03,226.529 2003.59,224.57 2004.16,225.945 2004.73,226.238 2005.3,227.413 2005.87,227.659 2006.44,232.903 2007,233.943 2007.57,232.534 2008.14,232.227 2008.71,233.14 2009.28,232.985 2009.85,232.806 2010.41,231.566 2010.98,231.257 2011.55,233.396 2012.12,231.073 2012.69,229.005 2013.26,229.065 2013.82,228.315 2014.39,228.332 2014.96,229.508 2015.53,231.637 2016.1,231.516 2016.67,231.536 2017.23,233.517 2017.8,233.574 2018.37,235.477 2018.94,233.12 2019.51,232.004 2020.08,229.89 2020.64,229.787 2021.21,230.802 2021.78,231.628 2022.35,231.376 2022.92,230.456 2023.49,231.319 2024.05,230.51 2024.62,231.361 2025.19,230.435 2025.76,230.466 2026.33,233.552 2026.9,234.264 2027.46,234.865 2028.03,234.337 2028.6,232.903 2029.17,233.815 2029.74,233.386 2030.31,232.947 2030.87,231.478 2031.44,230.313 2032.01,230.384 2032.58,230.113 2033.15,229.85 2033.72,229.689 2034.28,231.594 2034.85,230.117 2035.42,230.751 2035.99,230.636 2036.56,228.314 2037.13,227.493 2037.69,227.296 2038.26,225.529 2038.83,224.714 2039.4,225.19 2039.97,224.346 2040.54,225.858 2041.11,225.142 2041.67,224.434 2042.24,223.698 2042.81,223.028 2043.38,224.842 2043.95,225.206 2044.52,225.338 2045.08,226.671 2045.65,227.845 2046.22,228.893 2046.79,229.098 2047.36,229.06 2047.93,229.235 2048.49,227.238 2049.06,226.611 2049.63,228.051 2050.2,227.061 2050.77,226.453 2051.34,230.073 2051.9,231.252 2052.47,230.12 2053.04,233.327 2053.61,234.177 2054.18,234.797 2054.75,236.388 2055.31,237.061 2055.88,237.605 2056.45,237.221 2057.02,235.534 2057.59,235.881 2058.16,236.205 2058.72,236.959 2059.29,234.291 2059.86,232.978 2060.43,233.824 2061,232.592 2061.57,229.086 2062.13,230.222 2062.7,229.776 2063.27,230.594 2063.84,230.409 2064.41,230.39 2064.98,230.365 2065.54,228.278 2066.11,226.198 2066.68,227.369 2067.25,227.388 2067.82,228.592 2068.39,228.498 2068.95,230.935 2069.52,231.901 2070.09,230.357 2070.66,231.501 2071.23,233.582 2071.8,234.184 2072.36,232.876 2072.93,233.623 2073.5,233.064 2074.07,232.741 2074.64,231.352 2075.21,232.122 2075.77,233.95 2076.34,233.362 2076.91,234.102 2077.48,231.947 2078.05,229.666 2078.62,229.617 2079.18,230.554 2079.75,230.244 2080.32,229.048 2080.89,230.036 2081.46,229.697 2082.03,228.59 2082.59,227.561 2083.16,227.401 2083.73,227.555 2084.3,227.887 2084.87,227.055 2085.44,226.195 2086,225.14 2086.57,224.538 2087.14,223.681 2087.71,225.205 2088.28,225.37 2088.85,226.513 2089.41,226.686 2089.98,225.921 2090.55,224.102 2091.12,224.602 2091.69,225.207 2092.26,224.555 2092.82,224.933 2093.39,225.332 2093.96,222.556 2094.53,222.921 2095.1,224.377 2095.67,225.738 2096.23,225.984 2096.8,228.284 2097.37,228.32 2097.94,228.548 2098.51,229.798 2099.08,232.829 2099.64,229.58 2100.21,228.516 2100.78,227.454 2101.35,228.361 2101.92,226.349 2102.49,226.589 2103.05,225.967 2103.62,225.488 2104.19,229.079 2104.76,228.252 2105.33,229.434 2105.9,230.49 2106.46,229.442 2107.03,230.685 2107.6,230.65 2108.17,229.508 2108.74,229.611 2109.31,229.76 2109.87,230.973 2110.44,232.994 2111.01,235.932 2111.58,235.418 2112.15,234.048 2112.72,232.561 2113.29,230.676 2113.85,231.664 2114.42,231.359 2114.99,232.335 2115.56,231.336 2116.13,227.098 2116.7,226.197 2117.26,229.301 2117.83,230.45 2118.4,230.367 2118.97,229.242 2119.54,230.281 2120.11,228.089 2120.67,229.52 2121.24,231.811 2121.81,230.608 2122.38,229.418 2122.95,228.603 2123.52,228.799 2124.08,228.076 2124.65,226.208 2125.22,226.585 2125.79,227.042 2126.36,226.216 2126.93,226.385 2127.49,228.843 2128.06,230.05 2128.63,230.032 2129.2,229.888 2129.77,229.899 2130.34,229.885 2130.9,231.971 2131.47,231.799 2132.04,231.586 2132.61,230.499 2133.18,227.38 2133.75,229.675 2134.31,228.484 2134.88,230.431 2135.45,229.31 2136.02,234.413 2136.59,234.372 2137.16,234.388 2137.72,230.359 2138.29,231.384 2138.86,231.166 2139.43,232.842 2140,234.757 2140.57,234.365 2141.13,234.014 2141.7,233.891 2142.27,232.651 2142.84,231.564 2143.41,229.342 2143.98,228.174 2144.54,228.47 2145.11,228.452 2145.68,228.58 2146.25,228.763 2146.82,227.821 2147.39,229.018 2147.95,229.31 2148.52,231.232 2149.09,228.98 2149.66,229.246 2150.23,230.453 2150.8,227.338 2151.36,225.573 2151.93,224.753 2152.5,226.1 2153.07,227.498 2153.64,228.953 2154.21,233.225 2154.77,232.924 2155.34,232.708 2155.91,232.508 2156.48,232.281 2157.05,234.295 2157.62,235.903 2158.18,235.554 2158.75,234.132 2159.32,235.761 2159.89,234.455 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.03 ± 0.02\n  with uncertainty of ± 0.0012618326751706436\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01613 ± (0.00271638, 0.00273203) (MC)\n  95% confidence interval: [-4.02173, -4.01083] (MC)\n  linear error propagation: -4.01616 ± 0.00278992\n  |δ_y| = |0.00144453| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.016130603275341, val_l = 0.005597262948403348, val_u = 0.005297686853930728)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip270\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip270)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip271\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip270)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip272\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1144.55 2211.02,1144.55 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,970.353 2211.02,970.353 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,796.156 2211.02,796.156 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,621.958 2211.02,621.958 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,447.761 2211.02,447.761 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,273.564 2211.02,273.564 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1144.55 365.751,1144.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,970.353 365.751,970.353 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,796.156 365.751,796.156 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,621.958 365.751,621.958 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,447.761 365.751,447.761 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,273.564 365.751,273.564 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M298.909 1130.35 Q295.298 1130.35 293.469 1133.91 Q291.664 1137.46 291.664 1144.59 Q291.664 1151.69 293.469 1155.26 Q295.298 1158.8 298.909 1158.8 Q302.543 1158.8 304.349 1155.26 Q306.177 1151.69 306.177 1144.59 Q306.177 1137.46 304.349 1133.91 Q302.543 1130.35 298.909 1130.35 M298.909 1126.65 Q304.719 1126.65 307.775 1131.25 Q310.853 1135.84 310.853 1144.59 Q310.853 1153.31 307.775 1157.92 Q304.719 1162.5 298.909 1162.5 Q293.099 1162.5 290.02 1157.92 Q286.964 1153.31 286.964 1144.59 Q286.964 1135.84 290.02 1131.25 Q293.099 1126.65 298.909 1126.65 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M259.557 983.698 L267.196 983.698 L267.196 957.332 L258.886 958.999 L258.886 954.74 L267.15 953.073 L271.826 953.073 L271.826 983.698 L279.465 983.698 L279.465 987.633 L259.557 987.633 L259.557 983.698 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 956.152 Q295.298 956.152 293.469 959.717 Q291.664 963.258 291.664 970.388 Q291.664 977.494 293.469 981.059 Q295.298 984.601 298.909 984.601 Q302.543 984.601 304.349 981.059 Q306.177 977.494 306.177 970.388 Q306.177 963.258 304.349 959.717 Q302.543 956.152 298.909 956.152 M298.909 952.448 Q304.719 952.448 307.775 957.055 Q310.853 961.638 310.853 970.388 Q310.853 979.115 307.775 983.721 Q304.719 988.304 298.909 988.304 Q293.099 988.304 290.02 983.721 Q286.964 979.115 286.964 970.388 Q286.964 961.638 290.02 957.055 Q293.099 952.448 298.909 952.448 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M262.775 809.501 L279.094 809.501 L279.094 813.436 L257.15 813.436 L257.15 809.501 Q259.812 806.746 264.395 802.116 Q269.002 797.464 270.182 796.121 Q272.428 793.598 273.307 791.862 Q274.21 790.103 274.21 788.413 Q274.21 785.658 272.266 783.922 Q270.344 782.186 267.242 782.186 Q265.043 782.186 262.59 782.95 Q260.159 783.714 257.381 785.265 L257.381 780.542 Q260.205 779.408 262.659 778.83 Q265.113 778.251 267.15 778.251 Q272.52 778.251 275.715 780.936 Q278.909 783.621 278.909 788.112 Q278.909 790.241 278.099 792.163 Q277.312 794.061 275.205 796.653 Q274.627 797.325 271.525 800.542 Q268.423 803.737 262.775 809.501 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 781.954 Q295.298 781.954 293.469 785.519 Q291.664 789.061 291.664 796.191 Q291.664 803.297 293.469 806.862 Q295.298 810.403 298.909 810.403 Q302.543 810.403 304.349 806.862 Q306.177 803.297 306.177 796.191 Q306.177 789.061 304.349 785.519 Q302.543 781.954 298.909 781.954 M298.909 778.251 Q304.719 778.251 307.775 782.857 Q310.853 787.441 310.853 796.191 Q310.853 804.917 307.775 809.524 Q304.719 814.107 298.909 814.107 Q293.099 814.107 290.02 809.524 Q286.964 804.917 286.964 796.191 Q286.964 787.441 290.02 782.857 Q293.099 778.251 298.909 778.251 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M272.914 620.604 Q276.27 621.322 278.145 623.59 Q280.043 625.859 280.043 629.192 Q280.043 634.308 276.525 637.109 Q273.006 639.91 266.525 639.91 Q264.349 639.91 262.034 639.47 Q259.742 639.053 257.289 638.197 L257.289 633.683 Q259.233 634.817 261.548 635.396 Q263.863 635.975 266.386 635.975 Q270.784 635.975 273.076 634.239 Q275.39 632.502 275.39 629.192 Q275.39 626.137 273.238 624.424 Q271.108 622.688 267.289 622.688 L263.261 622.688 L263.261 618.845 L267.474 618.845 Q270.923 618.845 272.752 617.479 Q274.58 616.09 274.58 613.498 Q274.58 610.836 272.682 609.424 Q270.807 607.989 267.289 607.989 Q265.367 607.989 263.168 608.405 Q260.969 608.822 258.33 609.702 L258.33 605.535 Q260.992 604.794 263.307 604.424 Q265.645 604.054 267.705 604.054 Q273.029 604.054 276.131 606.484 Q279.233 608.891 279.233 613.012 Q279.233 615.882 277.59 617.873 Q275.946 619.84 272.914 620.604 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 607.757 Q295.298 607.757 293.469 611.322 Q291.664 614.864 291.664 621.993 Q291.664 629.1 293.469 632.664 Q295.298 636.206 298.909 636.206 Q302.543 636.206 304.349 632.664 Q306.177 629.1 306.177 621.993 Q306.177 614.864 304.349 611.322 Q302.543 607.757 298.909 607.757 M298.909 604.054 Q304.719 604.054 307.775 608.66 Q310.853 613.243 310.853 621.993 Q310.853 630.72 307.775 635.326 Q304.719 639.91 298.909 639.91 Q293.099 639.91 290.02 635.326 Q286.964 630.72 286.964 621.993 Q286.964 613.243 290.02 608.66 Q293.099 604.054 298.909 604.054 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M271.594 434.555 L259.789 453.004 L271.594 453.004 L271.594 434.555 M270.367 430.481 L276.247 430.481 L276.247 453.004 L281.177 453.004 L281.177 456.893 L276.247 456.893 L276.247 465.041 L271.594 465.041 L271.594 456.893 L255.992 456.893 L255.992 452.379 L270.367 430.481 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 433.56 Q295.298 433.56 293.469 437.125 Q291.664 440.666 291.664 447.796 Q291.664 454.902 293.469 458.467 Q295.298 462.009 298.909 462.009 Q302.543 462.009 304.349 458.467 Q306.177 454.902 306.177 447.796 Q306.177 440.666 304.349 437.125 Q302.543 433.56 298.909 433.56 M298.909 429.856 Q304.719 429.856 307.775 434.463 Q310.853 439.046 310.853 447.796 Q310.853 456.523 307.775 461.129 Q304.719 465.712 298.909 465.712 Q293.099 465.712 290.02 461.129 Q286.964 456.523 286.964 447.796 Q286.964 439.046 290.02 434.463 Q293.099 429.856 298.909 429.856 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M258.793 256.284 L277.15 256.284 L277.15 260.219 L263.076 260.219 L263.076 268.691 Q264.094 268.344 265.113 268.182 Q266.131 267.997 267.15 267.997 Q272.937 267.997 276.316 271.168 Q279.696 274.339 279.696 279.756 Q279.696 285.335 276.224 288.437 Q272.752 291.515 266.432 291.515 Q264.256 291.515 261.988 291.145 Q259.742 290.774 257.335 290.034 L257.335 285.335 Q259.418 286.469 261.641 287.024 Q263.863 287.58 266.34 287.58 Q270.344 287.58 272.682 285.474 Q275.02 283.367 275.02 279.756 Q275.02 276.145 272.682 274.038 Q270.344 271.932 266.34 271.932 Q264.465 271.932 262.59 272.349 Q260.738 272.765 258.793 273.645 L258.793 256.284 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 259.363 Q295.298 259.363 293.469 262.927 Q291.664 266.469 291.664 273.599 Q291.664 280.705 293.469 284.27 Q295.298 287.812 298.909 287.812 Q302.543 287.812 304.349 284.27 Q306.177 280.705 306.177 273.599 Q306.177 266.469 304.349 262.927 Q302.543 259.363 298.909 259.363 M298.909 255.659 Q304.719 255.659 307.775 260.265 Q310.853 264.849 310.853 273.599 Q310.853 282.325 307.775 286.932 Q304.719 291.515 298.909 291.515 Q293.099 291.515 290.02 286.932 Q286.964 282.325 286.964 273.599 Q286.964 264.849 290.02 260.265 Q293.099 255.659 298.909 255.659 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip272)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1016.2 400.199,898.279 400.786,790.085 401.372,690.962 401.958,600.305 402.545,517.556 403.131,442.198 403.718,373.748 404.304,311.759 404.891,361.101 405.477,305.875 406.063,345.808 406.65,454.035 407.236,400.878 407.823,420.876 408.409,375.848 408.995,334.623 409.582,354.441 410.168,317.818 410.755,335.361 411.341,306.191 411.927,279.223 412.514,255.708 413.1,236.001 413.687,256.063 414.273,242.055 414.86,228.92 415.446,219.895 416.032,242.55 416.619,236.539 417.205,258.634 417.792,254.796 418.378,274.501 418.964,270.127 419.551,308.624 420.137,326.167 420.724,326.309 421.31,344.437 421.896,347.189 422.483,378.894 423.069,395.719 423.656,423.867 424.242,440.083 424.829,455.339 425.415,470.337 426.001,486.845 426.588,491.608 427.174,498.839 427.761,524.226 428.347,532.277 428.933,558.35 429.52,573.194 430.106,587.48 430.693,595.142 431.279,637.089 431.865,655.981 432.452,674.7 433.038,698.418 433.625,703.019 434.211,708.784 434.798,730.762 435.384,736.367 435.97,757.828 436.557,772.705 437.143,791.021 437.73,800.15 438.316,813.514 438.902,826.994 439.489,839.399 440.075,851.248 440.662,858.891 441.248,863.453 441.835,871.266 442.421,879.083 443.007,883.456 443.594,888.059 444.18,895.822 444.767,903.604 445.353,915.198 445.939,922.838 446.526,933.08 447.112,937.437 447.699,942.147 448.285,949.77 448.871,957.004 449.458,970.422 450.044,983.587 450.631,993.714 451.217,997.494 451.804,1004.3 452.39,1011.13 452.976,1019.94 453.563,1028.22 454.149,1034.41 454.736,1038.52 455.322,1042.1 455.908,1048.49 456.495,1052.06 457.081,1060.2 457.668,1072.7 458.254,1077.72 458.84,1085.25 459.427,1090.16 460.013,1099.06 460.6,1103.49 461.186,1107.76 461.773,1111.99 462.359,1120.05 462.945,1121.85 463.532,1127.88 464.118,1129.29 464.705,1130.79 465.291,1136.78 465.877,1140.26 466.464,1143.48 467.05,1148.67 467.637,1153.68 468.223,1155.18 468.809,1158.62 469.396,1161.54 469.982,1164.59 470.569,1165.99 471.155,1167.16 471.742,1173.52 472.328,1176.34 472.914,1177.36 473.501,1179.95 474.087,1180.92 474.674,1183.71 475.26,1188.26 475.846,1189.43 476.433,1191.98 477.019,1194.62 477.606,1196.99 478.192,1199.15 478.778,1199.82 479.365,1203.84 479.951,1205.91 480.538,1209.66 481.124,1211.68 481.711,1216.61 482.297,1222.97 482.883,1224.23 483.47,1226.98 484.056,1228.22 484.643,1225.93 485.229,1224 485.815,1224 486.402,1226.72 486.988,1225.94 487.575,1224.08 488.161,1224.06 488.748,1224.21 489.334,1227.53 489.92,1228.59 490.507,1229.85 491.093,1232.62 491.68,1232.14 492.266,1231.81 492.852,1231.62 493.439,1233.02 494.025,1232.86 494.612,1230.91 495.198,1230.79 495.784,1230.4 496.371,1230.84 496.957,1232.31 497.544,1235.39 498.13,1232.27 498.717,1230.75 499.303,1230.9 499.889,1235.71 500.476,1236.85 501.062,1235.26 501.649,1238.02 502.235,1240.98 502.821,1243.5 503.408,1243.16 503.994,1242.35 504.581,1241.83 505.167,1243.17 505.753,1244.24 506.34,1244.92 506.926,1245.73 507.513,1248.16 508.099,1248.81 508.686,1247.89 509.272,1247.11 509.858,1246.5 510.445,1244.38 511.031,1243.7 511.618,1244.6 512.204,1242.33 512.79,1241.72 513.377,1239.98 513.963,1238.16 514.55,1236.31 515.136,1240.55 515.722,1240.17 516.309,1240.99 516.895,1241.91 517.482,1239.98 518.068,1239.94 518.655,1241.09 519.241,1242.3 519.827,1241.99 520.414,1241.59 521,1241.43 521.587,1240.96 522.173,1240.53 522.759,1238.84 523.346,1238.88 523.932,1242.87 524.519,1243.77 525.105,1245.17 525.691,1244.69 526.278,1246.8 526.864,1246.04 527.451,1246.85 528.037,1246.01 528.624,1243.86 529.21,1244.77 529.796,1245.65 530.383,1242.31 530.969,1243.5 531.556,1243.07 532.142,1242.54 532.728,1243.51 533.315,1247.33 533.901,1249.58 534.488,1247.29 535.074,1244.97 535.661,1248.95 536.247,1247.02 536.833,1246.31 537.42,1245.36 538.006,1243.08 538.593,1246.96 539.179,1250.53 539.765,1249.33 540.352,1248.07 540.938,1250.13 541.525,1246.24 542.111,1248.43 542.697,1244.65 543.284,1248.3 543.87,1246.1 544.457,1242.29 545.043,1243.31 545.63,1241.36 546.216,1242.41 546.802,1240.77 547.389,1238.98 547.975,1238.72 548.562,1240.08 549.148,1238.26 549.734,1241.07 550.321,1243.24 550.907,1243.87 551.494,1238.85 552.08,1241.35 552.666,1243.73 553.253,1243.4 553.839,1244.2 554.426,1240.64 555.012,1242.97 555.599,1240.73 556.185,1240.23 556.771,1241.22 557.358,1242.06 557.944,1242.58 558.531,1239.29 559.117,1239.02 559.703,1235.6 560.29,1233.98 560.876,1233.72 561.463,1233.45 562.049,1233.22 562.635,1231.52 563.222,1233.4 563.808,1230.5 564.395,1234.84 564.981,1234.48 565.568,1231.6 566.154,1230.3 566.74,1233.18 567.327,1237.26 567.913,1236.72 568.5,1237.61 569.086,1235.5 569.672,1233.48 570.259,1233.28 570.845,1233.17 571.432,1234.24 572.018,1237.94 572.605,1237.73 573.191,1238.7 573.777,1238.1 574.364,1239.05 574.95,1237.19 575.537,1236.74 576.123,1236.23 576.709,1238.66 577.296,1236.69 577.882,1236.21 578.469,1237.39 579.055,1234.05 579.641,1233.82 580.228,1227.76 580.814,1230.8 581.401,1235.3 581.987,1234.74 582.574,1235.68 583.16,1234.14 583.746,1233.81 584.333,1233.53 584.919,1233.04 585.506,1234.27 586.092,1232.78 586.678,1234.23 587.265,1232.55 587.851,1231.21 588.438,1230.74 589.024,1229.06 589.61,1230.45 590.197,1231.68 590.783,1233.2 591.37,1232.62 591.956,1232.34 592.543,1233.29 593.129,1231.46 593.715,1229.85 594.302,1228.42 594.888,1226.59 595.475,1228.41 596.061,1231.32 596.647,1231.34 597.234,1229.63 597.82,1229.63 598.407,1230.88 598.993,1233.46 599.579,1234.51 600.166,1234.06 600.752,1232.27 601.339,1229 601.925,1230.14 602.512,1231.36 603.098,1231.04 603.684,1232.37 604.271,1234.84 604.857,1235.9 605.444,1234 606.03,1233.64 606.616,1234.59 607.203,1235.49 607.789,1235.01 608.376,1233.13 608.962,1231.11 609.548,1229.1 610.135,1231.63 610.721,1234.23 611.308,1232.4 611.894,1231.72 612.481,1232.7 613.067,1233.64 613.653,1233.36 614.24,1233.1 614.826,1235.51 615.413,1236.2 615.999,1235.22 616.585,1234.66 617.172,1235.28 617.758,1233.47 618.345,1235.99 618.931,1236.71 619.518,1233.51 620.104,1232.88 620.69,1234.06 621.277,1230.99 621.863,1236.24 622.45,1237.08 623.036,1237.74 623.622,1237.04 624.209,1234.69 624.795,1236.74 625.382,1234.5 625.968,1234.18 626.554,1231.75 627.141,1231.32 627.727,1232.27 628.314,1230.59 628.9,1231.65 629.487,1229.7 630.073,1229.18 630.659,1230.04 631.246,1229.74 631.832,1229.4 632.419,1227.87 633.005,1226.41 633.591,1224.96 634.178,1226.48 634.764,1226.65 635.351,1226.67 635.937,1227.89 636.523,1227.92 637.11,1227.78 637.696,1230.47 638.283,1234.49 638.869,1232.49 639.456,1230.47 640.042,1231.31 640.628,1232.26 641.215,1231.78 641.801,1234.53 642.388,1235.54 642.974,1236.36 643.56,1237.11 644.147,1234.88 644.733,1232.69 645.32,1230.88 645.906,1229.06 646.492,1230.27 647.079,1229.76 647.665,1228.08 648.252,1226.15 648.838,1224.25 649.425,1223.82 650.011,1220.84 650.597,1218.16 651.184,1219.86 651.77,1219.89 652.357,1222.76 652.943,1222.83 653.529,1222.84 654.116,1222.78 654.702,1221.32 655.289,1216.69 655.875,1215.3 656.462,1215.76 657.048,1216.2 657.634,1216.43 658.221,1216.38 658.807,1218.12 659.394,1217.03 659.98,1219 660.566,1217.86 661.153,1216.6 661.739,1218.48 662.326,1218.57 662.912,1217.5 663.498,1219.06 664.085,1217.91 664.671,1217.86 665.258,1218.28 665.844,1218.25 666.431,1218.48 667.017,1218.78 667.603,1217.28 668.19,1218.94 668.776,1219.18 669.363,1218.05 669.949,1221.17 670.535,1224.15 671.122,1222.67 671.708,1222.41 672.295,1221.27 672.881,1224.13 673.467,1226.98 674.054,1223.72 674.64,1223.44 675.227,1224.53 675.813,1225.9 676.4,1225.93 676.986,1227.35 677.572,1224.44 678.159,1228.57 678.745,1228.15 679.332,1228.06 679.918,1227.79 680.504,1233 681.091,1232.32 681.677,1233.21 682.264,1232.71 682.85,1232.2 683.436,1230.2 684.023,1229.92 684.609,1232.6 685.196,1234.76 685.782,1234.08 686.369,1232.16 686.955,1231.57 687.541,1232.29 688.128,1228.93 688.714,1226.89 689.301,1222.38 689.887,1222.6 690.473,1219.76 691.06,1218.25 691.646,1218.41 692.233,1218.81 692.819,1222.14 693.405,1221.9 693.992,1218.85 694.578,1216.11 695.165,1216.18 695.751,1216.43 696.338,1215.07 696.924,1215.42 697.51,1214.35 698.097,1214.62 698.683,1214.77 699.27,1215.25 699.856,1215.28 700.442,1215.64 701.029,1216.14 701.615,1216.15 702.202,1216.64 702.788,1213.99 703.375,1214.41 703.961,1213.25 704.547,1212.2 705.134,1212.65 705.72,1213.18 706.307,1214.91 706.893,1216.85 707.479,1218.39 708.066,1217.05 708.652,1217.29 709.239,1219.03 709.825,1219.26 710.411,1220.75 710.998,1220.75 711.584,1220.83 712.171,1219.35 712.757,1219.38 713.344,1220.99 713.93,1219.31 714.516,1219.45 715.103,1218.27 715.689,1221.26 716.276,1218.41 716.862,1219.92 717.448,1224.01 718.035,1220.84 718.621,1222.34 719.208,1220.55 719.794,1220.4 720.38,1219.21 720.967,1222.19 721.553,1219.21 722.14,1221.82 722.726,1221.68 723.313,1218.74 723.899,1218.86 724.485,1220.35 725.072,1221.8 725.658,1221.99 726.245,1223.22 726.831,1224.17 727.417,1220.97 728.004,1220.86 728.59,1219.56 729.177,1220.99 729.763,1223.68 730.349,1222.23 730.936,1223.79 731.522,1223.5 732.109,1224.69 732.695,1222.64 733.282,1222.39 733.868,1222.29 734.454,1220.64 735.041,1221.94 735.627,1220.42 736.214,1221.87 736.8,1223.35 737.386,1220.18 737.973,1219.9 738.559,1221.23 739.146,1222.44 739.732,1223.52 740.318,1224.29 740.905,1223.92 741.491,1224.79 742.078,1225.8 742.664,1226.66 743.251,1224.81 743.837,1224.39 744.423,1222.49 745.01,1222.06 745.596,1221.87 746.183,1221.8 746.769,1224.72 747.355,1226.19 747.942,1227.12 748.528,1226.82 749.115,1227.74 749.701,1225.84 750.288,1224.11 750.874,1223.86 751.46,1224.85 752.047,1226.06 752.633,1227.02 753.22,1222.56 753.806,1222.14 754.392,1223.58 754.979,1224.72 755.565,1222.59 756.152,1221.94 756.738,1224.74 757.324,1224.01 757.911,1223.55 758.497,1220.17 759.084,1221.55 759.67,1221.26 760.257,1223.85 760.843,1225.02 761.429,1225.89 762.016,1223.99 762.602,1226.62 763.189,1230.22 763.775,1229.88 764.361,1230.76 764.948,1230.06 765.534,1232.36 766.121,1234.34 766.707,1234.98 767.293,1230.97 767.88,1230.33 768.466,1228.07 769.053,1225.99 769.639,1224.03 770.226,1224.91 770.812,1224.23 771.398,1219.71 771.985,1220.96 772.571,1219.08 773.158,1219 773.744,1218.89 774.33,1215.98 774.917,1215.93 775.503,1214.56 776.09,1216.05 776.676,1214.86 777.262,1216.4 777.849,1219.12 778.435,1220.29 779.022,1218.55 779.608,1218.43 780.195,1220.97 780.781,1221.87 781.367,1224.43 781.954,1225.49 782.54,1224.78 783.127,1224.4 783.713,1227.92 784.299,1227.17 784.886,1227.88 785.472,1227.25 786.059,1225.11 786.645,1226.02 787.232,1224.29 787.818,1225.13 788.404,1226.23 788.991,1221.57 789.577,1216.97 790.164,1214.08 790.75,1215.6 791.336,1214.12 791.923,1214.51 792.509,1216.12 793.096,1216.09 793.682,1214.97 794.268,1215.18 794.855,1216.68 795.441,1216.82 796.028,1216.88 796.614,1217.13 797.201,1212.98 797.787,1214.65 798.373,1213.31 798.96,1212.27 799.546,1211.01 800.133,1209.96 800.719,1210.61 801.305,1213.82 801.892,1212.5 802.478,1212.77 803.065,1214.75 803.651,1220.47 804.237,1224.79 804.824,1225.88 805.41,1225.25 805.997,1221.98 806.583,1221.57 807.17,1218.69 807.756,1220.15 808.342,1221.2 808.929,1221.03 809.515,1218.05 810.102,1218.18 810.688,1216.74 811.274,1212.51 811.861,1214.32 812.447,1214.59 813.034,1213.07 813.62,1214.86 814.206,1210.71 814.793,1212.17 815.379,1210.61 815.966,1211.14 816.552,1211.68 817.139,1213.26 817.725,1216.29 818.311,1216.64 818.898,1216.79 819.484,1211.19 820.071,1210.35 820.657,1213.61 821.243,1213.89 821.83,1211.25 822.416,1209.86 823.003,1207.14 823.589,1207.78 824.175,1206.7 824.762,1210.06 825.348,1214.88 825.935,1215.18 826.521,1215.68 827.108,1214.5 827.694,1214.6 828.28,1214.78 828.867,1213.39 829.453,1211.97 830.04,1212.22 830.626,1208.35 831.212,1210.17 831.799,1210.62 832.385,1210.79 832.972,1210.99 833.558,1211.38 834.145,1211.87 834.731,1216.42 835.317,1219.6 835.904,1219.33 836.49,1220.51 837.077,1220.34 837.663,1219.17 838.249,1216.42 838.836,1218.01 839.422,1216.65 840.009,1218.36 840.595,1218.23 841.181,1216.98 841.768,1218.53 842.354,1215.69 842.941,1214.44 843.527,1212.94 844.114,1216.08 844.7,1216.65 845.286,1216.52 845.873,1216.97 846.459,1215.35 847.046,1216.48 847.632,1217.96 848.218,1218.25 848.805,1221.01 849.391,1219.19 849.978,1219.17 850.564,1218.96 851.15,1220.38 851.737,1221.7 852.323,1222.64 852.91,1226.71 853.496,1226.02 854.083,1222.58 854.669,1222.18 855.255,1220.52 855.842,1221.51 856.428,1221.11 857.015,1220.82 857.601,1221.94 858.187,1220.34 858.774,1218.38 859.36,1219.82 859.947,1221.14 860.533,1222.08 861.119,1222.24 861.706,1221.95 862.292,1220.44 862.879,1220.26 863.465,1218.74 864.052,1215.92 864.638,1217.58 865.224,1217.64 865.811,1220.38 866.397,1218.55 866.984,1218.55 867.57,1219.8 868.156,1219.66 868.743,1219.6 869.329,1220.92 869.916,1220.58 870.502,1217.78 871.089,1220.74 871.675,1220.32 872.261,1221.65 872.848,1222.82 873.434,1218.45 874.021,1217.05 874.607,1217.23 875.193,1217.29 875.78,1218.88 876.366,1217.02 876.953,1218.05 877.539,1220.78 878.125,1221.94 878.712,1221.7 879.298,1222.92 879.885,1220.74 880.471,1219.22 881.058,1220.41 881.644,1221.78 882.23,1224.07 882.817,1221.99 883.403,1221.78 883.99,1222.85 884.576,1222.23 885.162,1223.14 885.749,1218.68 886.335,1219.9 886.922,1219.84 887.508,1217.07 888.094,1215.7 888.681,1215.62 889.267,1214.01 889.854,1214.02 890.44,1212.59 891.027,1214.27 891.613,1215.51 892.199,1214.24 892.786,1214.6 893.372,1215.87 893.959,1214.22 894.545,1215.54 895.131,1214.08 895.718,1211.28 896.304,1209.96 896.891,1210.42 897.477,1212.12 898.063,1209.48 898.65,1209.48 899.236,1211.21 899.823,1211.23 900.409,1211.32 900.996,1213.11 901.582,1210.25 902.168,1213.2 902.755,1216.12 903.341,1217.66 903.928,1216.23 904.514,1215.96 905.1,1212.79 905.687,1212.96 906.273,1214.36 906.86,1210.27 907.446,1210.57 908.032,1215.18 908.619,1216.35 909.205,1216.08 909.792,1214.76 910.378,1214.63 910.965,1213.38 911.551,1209.46 912.137,1209.91 912.724,1207.29 913.31,1202.9 913.897,1203.37 914.483,1205.39 915.069,1204.21 915.656,1203.5 916.242,1204.01 916.829,1206.12 917.415,1206.51 918.002,1207.11 918.588,1207.89 919.174,1209.66 919.761,1210.05 920.347,1208.91 920.934,1209.31 921.52,1211.29 922.106,1210.19 922.693,1210.47 923.279,1210.49 923.866,1210.61 924.452,1210.76 925.038,1212.5 925.625,1211.16 926.211,1210.07 926.798,1209.04 927.384,1210.82 927.971,1211.1 928.557,1218.68 929.143,1218.43 929.73,1219.56 930.316,1217.81 930.903,1217.75 931.489,1216.06 932.075,1217.36 932.662,1217.14 933.248,1217.14 933.835,1217.18 934.421,1217.32 935.007,1224.2 935.594,1225.42 936.18,1223.7 936.767,1226.15 937.353,1224.27 937.94,1223.66 938.526,1220.5 939.112,1221.48 939.699,1219.69 940.285,1220.98 940.872,1218 941.458,1220.59 942.044,1221.79 942.631,1222.9 943.217,1222.77 943.804,1221.03 944.39,1219.24 944.976,1219.07 945.563,1218.92 946.149,1218.91 946.736,1220.46 947.322,1220.13 947.909,1219.91 948.495,1219.51 949.081,1218.01 949.668,1219.32 950.254,1220.45 950.841,1219.76 951.427,1221 952.013,1221.95 952.6,1220.23 953.186,1219.99 953.773,1219.72 954.359,1218.16 954.945,1216.55 955.532,1217.84 956.118,1217.8 956.705,1215.77 957.291,1214.41 957.878,1213.27 958.464,1212.21 959.05,1212.11 959.637,1213.82 960.223,1215.23 960.81,1212.41 961.396,1212.49 961.982,1211.27 962.569,1208.86 963.155,1210.68 963.742,1212.29 964.328,1212.92 964.915,1214.64 965.501,1214.94 966.087,1216.43 966.674,1213.66 967.26,1213.81 967.847,1212.41 968.433,1213.76 969.019,1214 969.606,1212.89 970.192,1209.97 970.779,1210.4 971.365,1212.46 971.951,1212.41 972.538,1213.9 973.124,1211.05 973.711,1211.13 974.297,1209.99 974.884,1210.28 975.47,1209.14 976.056,1209.69 976.643,1210.07 977.229,1209.1 977.816,1215.24 978.402,1212.32 978.988,1211.21 979.575,1211.46 980.161,1211.73 980.748,1210.22 981.334,1210.52 981.92,1210.8 982.507,1211.01 983.093,1212.53 983.68,1215.56 984.266,1215.58 984.853,1217 985.439,1218.26 986.025,1216.83 986.612,1216.71 987.198,1222.35 987.785,1222.27 988.371,1222.05 988.957,1223.34 989.544,1221.57 990.13,1219.89 990.717,1219.45 991.303,1219.22 991.889,1218.84 992.476,1218.78 993.062,1220.18 993.649,1221.46 994.235,1220.99 994.822,1221.99 995.408,1223.03 995.994,1219.83 996.581,1219.66 997.167,1219.23 997.754,1220.53 998.34,1224.28 998.926,1223.63 999.513,1220.53 1000.1,1221.6 1000.69,1220.94 1001.27,1220.66 1001.86,1221.51 1002.44,1222.81 1003.03,1223.88 1003.62,1227.24 1004.2,1223.76 1004.79,1217.57 1005.38,1216.04 1005.96,1215.97 1006.55,1215.9 1007.14,1217.14 1007.72,1218.75 1008.31,1222.71 1008.9,1223.66 1009.48,1223.53 1010.07,1221.35 1010.65,1219.6 1011.24,1223.61 1011.83,1221.58 1012.41,1218.04 1013,1216.55 1013.59,1214.66 1014.17,1214.74 1014.76,1216.41 1015.35,1215.12 1015.93,1213.67 1016.52,1213.5 1017.11,1210.89 1017.69,1209.6 1018.28,1209.96 1018.86,1214.39 1019.45,1215.69 1020.04,1214.04 1020.62,1214.21 1021.21,1212.88 1021.8,1213.1 1022.38,1213.23 1022.97,1211.64 1023.56,1213.25 1024.14,1217.7 1024.73,1217.32 1025.32,1215.95 1025.9,1216.14 1026.49,1214.96 1027.07,1216.35 1027.66,1217.27 1028.25,1214.23 1028.83,1211.25 1029.42,1212.68 1030.01,1211.14 1030.59,1212.77 1031.18,1214.36 1031.77,1215.75 1032.35,1217.1 1032.94,1216.97 1033.52,1215.38 1034.11,1216.79 1034.7,1218.31 1035.28,1218.31 1035.87,1218.37 1036.46,1215.4 1037.04,1215.32 1037.63,1211.07 1038.22,1208.55 1038.8,1208.95 1039.39,1211.97 1039.98,1213.52 1040.56,1211.94 1041.15,1211.97 1041.73,1213.42 1042.32,1210.43 1042.91,1211.97 1043.49,1212.06 1044.08,1212.09 1044.67,1213.33 1045.25,1213.39 1045.84,1217.76 1046.43,1216.18 1047.01,1216.16 1047.6,1214.56 1048.19,1215.04 1048.77,1216.71 1049.36,1215.27 1049.94,1214.99 1050.53,1212.28 1051.12,1216.4 1051.7,1215.02 1052.29,1216.5 1052.88,1216.5 1053.46,1217.71 1054.05,1216.12 1054.64,1216.03 1055.22,1213.03 1055.81,1214.38 1056.39,1213.23 1056.98,1213.35 1057.57,1215.09 1058.15,1215.25 1058.74,1215.22 1059.33,1213.69 1059.91,1212.46 1060.5,1212.73 1061.09,1212.62 1061.67,1211.47 1062.26,1210.01 1062.85,1210.22 1063.43,1207.74 1064.02,1209.5 1064.6,1208.61 1065.19,1210.27 1065.78,1210.38 1066.36,1211.92 1066.95,1212.01 1067.54,1212.13 1068.12,1219.23 1068.71,1217.85 1069.3,1216.05 1069.88,1214.5 1070.47,1214.35 1071.06,1214.52 1071.64,1214.5 1072.23,1212.8 1072.81,1214.48 1073.4,1217.55 1073.99,1213.29 1074.57,1211.92 1075.16,1211.96 1075.75,1211.1 1076.33,1213.06 1076.92,1213.08 1077.51,1210.66 1078.09,1212.15 1078.68,1212.2 1079.26,1213.8 1079.85,1209.61 1080.44,1210.17 1081.02,1210.31 1081.61,1210.41 1082.2,1212.35 1082.78,1213.81 1083.37,1214.09 1083.96,1214.1 1084.54,1214.08 1085.13,1215.52 1085.72,1215.46 1086.3,1211.37 1086.89,1213 1087.47,1210.56 1088.06,1210.97 1088.65,1208.69 1089.23,1210.34 1089.82,1210.57 1090.41,1209.5 1090.99,1211.18 1091.58,1211.36 1092.17,1210.14 1092.75,1211.93 1093.34,1210.77 1093.93,1208.54 1094.51,1210.72 1095.1,1218.05 1095.68,1219.44 1096.27,1220.62 1096.86,1220.32 1097.44,1218.84 1098.03,1218.89 1098.62,1217.73 1099.2,1219.13 1099.79,1220.23 1100.38,1221.37 1100.96,1222.24 1101.55,1220.3 1102.14,1219.96 1102.72,1220.91 1103.31,1220.35 1103.89,1218.64 1104.48,1219.93 1105.07,1218.24 1105.65,1218.44 1106.24,1221.11 1106.83,1222.19 1107.41,1221.83 1108,1221.71 1108.59,1221.56 1109.17,1221.06 1109.76,1222.31 1110.34,1223.46 1110.93,1223.17 1111.52,1222.39 1112.1,1221.93 1112.69,1222.94 1113.28,1223.9 1113.86,1223.24 1114.45,1222.97 1115.04,1222.49 1115.62,1220.71 1116.21,1223.04 1116.8,1221.29 1117.38,1219.32 1117.97,1223.19 1118.55,1222.69 1119.14,1222.45 1119.73,1219.23 1120.31,1220.59 1120.9,1220.08 1121.49,1222.69 1122.07,1222.36 1122.66,1220.74 1123.25,1220.33 1123.83,1217.21 1124.42,1215.57 1125.01,1218.14 1125.59,1220.31 1126.18,1216.95 1126.76,1218.25 1127.35,1217.92 1127.94,1215.98 1128.52,1212.88 1129.11,1214.48 1129.7,1215.95 1130.28,1215.87 1130.87,1216.7 1131.46,1215.19 1132.04,1215.09 1132.63,1215.1 1133.21,1213.5 1133.8,1213.34 1134.39,1208.82 1134.97,1207.41 1135.56,1210.69 1136.15,1209.61 1136.73,1206.93 1137.32,1210.48 1137.91,1210.84 1138.49,1209.77 1139.08,1205.88 1139.67,1207.5 1140.25,1207.91 1140.84,1209.48 1141.42,1212.57 1142.01,1212.48 1142.6,1214 1143.18,1215.31 1143.77,1215.4 1144.36,1213.5 1144.94,1210.57 1145.53,1209.43 1146.12,1209.59 1146.7,1212.38 1147.29,1211.4 1147.88,1213.14 1148.46,1214.72 1149.05,1215.87 1149.63,1217.26 1150.22,1215.67 1150.81,1215.98 1151.39,1214.2 1151.98,1212.67 1152.57,1212.93 1153.15,1212.7 1153.74,1211.23 1154.33,1210.12 1154.91,1207.56 1155.5,1207.47 1156.09,1207.69 1156.67,1209.37 1157.26,1211.55 1157.84,1210.45 1158.43,1209.21 1159.02,1209.45 1159.6,1209.59 1160.19,1210.29 1160.78,1213.41 1161.36,1212.22 1161.95,1214.04 1162.54,1213.87 1163.12,1213.89 1163.71,1210.89 1164.29,1214.27 1164.88,1214.19 1165.47,1216.98 1166.05,1216.59 1166.64,1216.55 1167.23,1218.14 1167.81,1218.25 1168.4,1219.69 1168.99,1219.47 1169.57,1220.64 1170.16,1217.73 1170.75,1218.81 1171.33,1218.8 1171.92,1216.99 1172.5,1218.28 1173.09,1217.97 1173.68,1217.92 1174.26,1214.94 1174.85,1213.71 1175.44,1218.14 1176.02,1218.14 1176.61,1219.79 1177.2,1219.5 1177.78,1222.13 1178.37,1221.45 1178.96,1220.23 1179.54,1221.2 1180.13,1221.85 1180.71,1220.05 1181.3,1217.13 1181.89,1218.56 1182.47,1219.69 1183.06,1218.29 1183.65,1218.03 1184.23,1217.98 1184.82,1216.37 1185.41,1215.22 1185.99,1213.85 1186.58,1212.58 1187.16,1212.56 1187.75,1212.39 1188.34,1211.17 1188.92,1208.6 1189.51,1210.29 1190.1,1210.54 1190.68,1212.11 1191.27,1211.8 1191.86,1211.59 1192.44,1213.3 1193.03,1214.71 1193.62,1214.65 1194.2,1216.18 1194.79,1213.33 1195.37,1215.97 1195.96,1209.89 1196.55,1210.07 1197.13,1208.91 1197.72,1209.4 1198.31,1211.07 1198.89,1214.31 1199.48,1212.87 1200.07,1212.72 1200.65,1211.42 1201.24,1213.09 1201.83,1213.2 1202.41,1214.51 1203,1211.95 1203.58,1210.81 1204.17,1212.51 1204.76,1212.33 1205.34,1210.99 1205.93,1211.08 1206.52,1213.98 1207.1,1216.76 1207.69,1217.87 1208.28,1218.85 1208.86,1218.72 1209.45,1215.46 1210.03,1218.32 1210.62,1216.83 1211.21,1218.17 1211.79,1217.73 1212.38,1216.36 1212.97,1216.4 1213.55,1213.47 1214.14,1213.41 1214.73,1213.28 1215.31,1213.44 1215.9,1213.33 1216.49,1212.06 1217.07,1215.44 1217.66,1218.23 1218.24,1214.92 1218.83,1214.73 1219.42,1216.08 1220,1216.15 1220.59,1214.97 1221.18,1215.08 1221.76,1214.89 1222.35,1213.63 1222.94,1213.81 1223.52,1216.91 1224.11,1214.05 1224.7,1214.29 1225.28,1213.13 1225.87,1213.24 1226.45,1213.28 1227.04,1216.13 1227.63,1219.06 1228.21,1219.01 1228.8,1217.55 1229.39,1218.89 1229.97,1217.59 1230.56,1221.65 1231.15,1221.17 1231.73,1219.5 1232.32,1219.42 1232.91,1218.83 1233.49,1218.76 1234.08,1221.59 1234.66,1221.37 1235.25,1221.24 1235.84,1222.19 1236.42,1222.11 1237.01,1220.24 1237.6,1218.54 1238.18,1218.21 1238.77,1216.66 1239.36,1214.96 1239.94,1213.73 1240.53,1215.21 1241.11,1214.15 1241.7,1214.23 1242.29,1212.83 1242.87,1215.86 1243.46,1215.92 1244.05,1217.14 1244.63,1215.4 1245.22,1212.47 1245.81,1212.42 1246.39,1210.95 1246.98,1212.36 1247.57,1212.53 1248.15,1214.05 1248.74,1216.65 1249.32,1216.44 1249.91,1216.27 1250.5,1216.3 1251.08,1217.42 1251.67,1217.23 1252.26,1217.5 1252.84,1216.21 1253.43,1213.04 1254.02,1210.2 1254.6,1211.84 1255.19,1210.64 1255.78,1213.85 1256.36,1215.07 1256.95,1216.64 1257.53,1215.03 1258.12,1212.17 1258.71,1210.94 1259.29,1212.54 1259.88,1212.29 1260.47,1210.99 1261.05,1209.76 1261.64,1210.03 1262.23,1211.86 1262.81,1214.89 1263.4,1217.91 1263.98,1217.7 1264.57,1216.61 1265.16,1216.49 1265.74,1216.28 1266.33,1214.66 1266.92,1214.78 1267.5,1214.84 1268.09,1214.8 1268.68,1220.47 1269.26,1219.22 1269.85,1221.79 1270.44,1222.81 1271.02,1222.43 1271.61,1222.27 1272.19,1222.09 1272.78,1221.88 1273.37,1220.08 1273.95,1218.49 1274.54,1218.22 1275.13,1223.53 1275.71,1222.79 1276.3,1220.77 1276.89,1218.94 1277.47,1218.61 1278.06,1218.55 1278.65,1219.71 1279.23,1219.44 1279.82,1219.29 1280.4,1217.77 1280.99,1217.65 1281.58,1214.67 1282.16,1213.25 1282.75,1214.94 1283.34,1213.66 1283.92,1213.72 1284.51,1209.65 1285.1,1206.91 1285.68,1207.15 1286.27,1207.57 1286.86,1212.43 1287.44,1213.85 1288.03,1213.9 1288.61,1210.87 1289.2,1210.86 1289.79,1209.38 1290.37,1212.26 1290.96,1209.6 1291.55,1209.97 1292.13,1211.55 1292.72,1208.97 1293.31,1209.14 1293.89,1208.09 1294.48,1208.38 1295.06,1211.64 1295.65,1213.17 1296.24,1214.64 1296.82,1214.54 1297.41,1215.72 1298,1216.97 1298.58,1215.14 1299.17,1212.15 1299.76,1213.57 1300.34,1214.91 1300.93,1213.11 1301.52,1217.61 1302.1,1219.03 1302.69,1217.51 1303.27,1217.22 1303.86,1217.19 1304.45,1217.1 1305.03,1218.2 1305.62,1217.94 1306.21,1221.74 1306.79,1221.33 1307.38,1219.57 1307.97,1219.07 1308.55,1217.41 1309.14,1212.94 1309.73,1214.2 1310.31,1214.48 1310.9,1213.2 1311.48,1213.33 1312.07,1212.08 1312.66,1212.38 1313.24,1215.41 1313.83,1215.32 1314.42,1213.91 1315,1209.79 1315.59,1210.37 1316.18,1211.69 1316.76,1211.54 1317.35,1214.79 1317.93,1216.33 1318.52,1214.99 1319.11,1213.63 1319.69,1212.31 1320.28,1215.15 1320.87,1212.16 1321.45,1213.72 1322.04,1213.62 1322.63,1214.92 1323.21,1214.82 1323.8,1214.83 1324.39,1214.83 1324.97,1215.19 1325.56,1213.77 1326.14,1210.61 1326.73,1210.63 1327.32,1212.53 1327.9,1214.09 1328.49,1215.62 1329.08,1215.53 1329.66,1214.07 1330.25,1215.58 1330.84,1218.46 1331.42,1222.49 1332.01,1220.58 1332.6,1215.84 1333.18,1213.01 1333.77,1212.87 1334.35,1212.69 1334.94,1209.91 1335.53,1210.41 1336.11,1210.79 1336.7,1209.91 1337.29,1207.15 1337.87,1207.69 1338.46,1208.53 1339.05,1203.03 1339.63,1199.27 1340.22,1201.36 1340.8,1200.64 1341.39,1201.4 1341.98,1199.32 1342.56,1200.51 1343.15,1203.22 1343.74,1203.65 1344.32,1202.86 1344.91,1206.52 1345.5,1205.81 1346.08,1201.81 1346.67,1202.49 1347.26,1205.85 1347.84,1206.33 1348.43,1205.28 1349.01,1205.85 1349.6,1209.33 1350.19,1211.27 1350.77,1210.09 1351.36,1210.34 1351.95,1212.26 1352.53,1212.64 1353.12,1214.1 1353.71,1212.76 1354.29,1214.3 1354.88,1212.55 1355.47,1218.61 1356.05,1219.95 1356.64,1218.02 1357.22,1216.32 1357.81,1217.92 1358.4,1217.83 1358.98,1213.25 1359.57,1211.62 1360.16,1209.06 1360.74,1210.89 1361.33,1211.16 1361.92,1214.31 1362.5,1212.7 1363.09,1211.66 1363.68,1217.62 1364.26,1216.2 1364.85,1213.29 1365.43,1213.28 1366.02,1213.34 1366.61,1214.77 1367.19,1216.07 1367.78,1216.03 1368.37,1218.98 1368.95,1217.45 1369.54,1218.79 1370.13,1220.02 1370.71,1218.23 1371.3,1217.83 1371.88,1214.84 1372.47,1212.13 1373.06,1215.3 1373.64,1216.59 1374.23,1216.48 1374.82,1216.28 1375.4,1219.1 1375.99,1218.81 1376.58,1218.83 1377.16,1218.58 1377.75,1219.73 1378.34,1219.4 1378.92,1220.43 1379.51,1220.18 1380.09,1217.09 1380.68,1217.01 1381.27,1218.34 1381.85,1218.08 1382.44,1216.2 1383.03,1213.74 1383.61,1215.39 1384.2,1212.38 1384.79,1209.22 1385.37,1209.25 1385.96,1211.01 1386.55,1211.26 1387.13,1208.65 1387.72,1211.88 1388.3,1216.13 1388.89,1214.44 1389.48,1214.62 1390.06,1218.73 1390.65,1220.2 1391.24,1218.57 1391.82,1218.14 1392.41,1216.4 1393,1222.29 1393.58,1221.47 1394.17,1221.39 1394.75,1218.27 1395.34,1218 1395.93,1216.47 1396.51,1216.2 1397.1,1217.82 1397.69,1216.11 1398.27,1216.04 1398.86,1218.62 1399.45,1218.55 1400.03,1217.21 1400.62,1212.92 1401.21,1214.4 1401.79,1213.18 1402.38,1210.66 1402.96,1209.52 1403.55,1211.33 1404.14,1210.34 1404.72,1210.54 1405.31,1212.14 1405.9,1212.34 1406.48,1212.39 1407.07,1210.78 1407.66,1210.93 1408.24,1209.46 1408.83,1209.73 1409.42,1213 1410,1214.48 1410.59,1214.62 1411.17,1213.07 1411.76,1213.09 1412.35,1213.19 1412.93,1214.93 1413.52,1213.36 1414.11,1213.61 1414.69,1214.13 1415.28,1212.57 1415.87,1212.59 1416.45,1212.7 1417.04,1214.61 1417.63,1214.84 1418.21,1213.37 1418.8,1213.35 1419.38,1210.68 1419.97,1209.27 1420.56,1209.81 1421.14,1210.22 1421.73,1210.64 1422.32,1212.23 1422.9,1211.06 1423.49,1212.56 1424.08,1210.06 1424.66,1211.71 1425.25,1213.47 1425.83,1210.92 1426.42,1211.13 1427.01,1213.8 1427.59,1213.65 1428.18,1213.69 1428.77,1214.14 1429.35,1215.65 1429.94,1217.31 1430.53,1218.88 1431.11,1218.49 1431.7,1220.89 1432.29,1220.44 1432.87,1219.74 1433.46,1218.2 1434.04,1218.04 1434.63,1219.43 1435.22,1219.13 1435.8,1214.55 1436.39,1217.23 1436.98,1216.78 1437.56,1218.28 1438.15,1218.33 1438.74,1221.17 1439.32,1223.51 1439.91,1223.01 1440.5,1225.37 1441.08,1226.18 1441.67,1224.37 1442.25,1222.44 1442.84,1222.18 1443.43,1221.64 1444.01,1218.88 1444.6,1224.05 1445.19,1223.65 1445.77,1223.1 1446.36,1222.81 1446.95,1224.05 1447.53,1222.14 1448.12,1218.82 1448.7,1220.31 1449.29,1218.7 1449.88,1215.39 1450.46,1215.44 1451.05,1215.28 1451.64,1216.53 1452.22,1216.33 1452.81,1216.14 1453.4,1218.56 1453.98,1222.64 1454.57,1218.17 1455.16,1215.02 1455.74,1212.19 1456.33,1212.32 1456.91,1210.9 1457.5,1208.07 1458.09,1205.72 1458.67,1206.32 1459.26,1205.1 1459.85,1205.16 1460.43,1204.51 1461.02,1202.27 1461.61,1204.39 1462.19,1201.75 1462.78,1202.34 1463.37,1203.05 1463.95,1202.32 1464.54,1202.98 1465.12,1203.31 1465.71,1206.79 1466.3,1208.47 1466.88,1211.9 1467.47,1210.76 1468.06,1208.21 1468.64,1211.27 1469.23,1214.62 1469.82,1216.05 1470.4,1220.4 1470.99,1221.52 1471.57,1218.79 1472.16,1215.84 1472.75,1215.91 1473.33,1218.76 1473.92,1218.7 1474.51,1218.64 1475.09,1219.91 1475.68,1215.42 1476.27,1215.1 1476.85,1216.41 1477.44,1217.75 1478.03,1219.11 1478.61,1218.68 1479.2,1218.25 1479.78,1218.11 1480.37,1216.59 1480.96,1219.21 1481.54,1216.28 1482.13,1216.06 1482.72,1214.6 1483.3,1214.66 1483.89,1217.78 1484.48,1217.59 1485.06,1217.48 1485.65,1218.81 1486.24,1217.12 1486.82,1217.21 1487.41,1215.62 1487.99,1218.13 1488.58,1218.08 1489.17,1216.23 1489.75,1217.62 1490.34,1215.96 1490.93,1214.3 1491.51,1214.31 1492.1,1217.05 1492.69,1215.66 1493.27,1216.74 1493.86,1219.29 1494.45,1221.79 1495.03,1221.27 1495.62,1222.46 1496.2,1221.73 1496.79,1221.47 1497.38,1221.32 1497.96,1222.62 1498.55,1219.43 1499.14,1219.08 1499.72,1215.95 1500.31,1215.9 1500.9,1218.77 1501.48,1218.25 1502.07,1215.35 1502.65,1216.61 1503.24,1217.8 1503.83,1214.7 1504.41,1214.66 1505,1216.42 1505.59,1216.61 1506.17,1214.07 1506.76,1215.35 1507.35,1215.28 1507.93,1214.84 1508.52,1215.07 1509.11,1214.88 1509.69,1213.17 1510.28,1214.79 1510.86,1214.63 1511.45,1215.88 1512.04,1215.93 1512.62,1217.69 1513.21,1221.75 1513.8,1219.99 1514.38,1218.46 1514.97,1217.09 1515.56,1217.39 1516.14,1215.78 1516.73,1215.75 1517.32,1217.27 1517.9,1219.82 1518.49,1218.23 1519.07,1217.89 1519.66,1217.81 1520.25,1214.8 1520.83,1214.88 1521.42,1213.58 1522.01,1209.24 1522.59,1210.91 1523.18,1212.15 1523.77,1213.07 1524.35,1210 1524.94,1211.78 1525.52,1207.54 1526.11,1208.13 1526.7,1211.33 1527.28,1214.31 1527.87,1211.33 1528.46,1208.72 1529.04,1209.05 1529.63,1208.2 1530.22,1207.07 1530.8,1207.68 1531.39,1208.01 1531.98,1208.65 1532.56,1206.36 1533.15,1209.41 1533.73,1209.36 1534.32,1207.99 1534.91,1209.52 1535.49,1211.17 1536.08,1210.02 1536.67,1210.32 1537.25,1210.58 1537.84,1210.46 1538.43,1210.57 1539.01,1209.26 1539.6,1210.69 1540.19,1211 1540.77,1209.92 1541.36,1211.36 1541.94,1211.75 1542.53,1211.9 1543.12,1213.61 1543.7,1215.06 1544.29,1216.45 1544.88,1216.3 1545.46,1216.11 1546.05,1214.62 1546.64,1216.31 1547.22,1217.95 1547.81,1217.77 1548.4,1216.25 1548.98,1215.77 1549.57,1212.7 1550.15,1212.76 1550.74,1215.82 1551.33,1217.22 1551.91,1217.07 1552.5,1216.94 1553.09,1215.24 1553.67,1215.11 1554.26,1214.81 1554.85,1217.87 1555.43,1219.1 1556.02,1220.32 1556.6,1222.73 1557.19,1222.29 1557.78,1218.88 1558.36,1218.67 1558.95,1217.46 1559.54,1218.57 1560.12,1218.16 1560.71,1220.49 1561.3,1220.21 1561.88,1221.37 1562.47,1220.99 1563.06,1222.23 1563.64,1221.91 1564.23,1224.36 1564.81,1225.17 1565.4,1224.63 1565.99,1225.39 1566.57,1225.98 1567.16,1224.08 1567.75,1220.67 1568.33,1222.04 1568.92,1223.32 1569.51,1224.07 1570.09,1222.63 1570.68,1223.93 1571.27,1223.52 1571.85,1221.42 1572.44,1219.93 1573.02,1217.99 1573.61,1219.47 1574.2,1216.24 1574.78,1218.7 1575.37,1218.61 1575.96,1219.99 1576.54,1218.59 1577.13,1222.77 1577.72,1222.59 1578.3,1222.11 1578.89,1222.97 1579.47,1224.2 1580.06,1226.45 1580.65,1225.69 1581.23,1223.75 1581.82,1223.4 1582.41,1224.33 1582.99,1228.14 1583.58,1227.6 1584.17,1226.81 1584.75,1223.5 1585.34,1220.07 1585.93,1215.58 1586.51,1214.06 1587.1,1212.69 1587.68,1212.75 1588.27,1212.87 1588.86,1212.76 1589.44,1216.04 1590.03,1213.02 1590.62,1214.62 1591.2,1214.76 1591.79,1214.78 1592.38,1210.78 1592.96,1206.85 1593.55,1207.12 1594.14,1206.07 1594.72,1206.58 1595.31,1202.9 1595.89,1203.35 1596.48,1206.55 1597.07,1206.67 1597.65,1207.1 1598.24,1209.98 1598.83,1210.08 1599.41,1210.19 1600,1213.3 1600.59,1213.51 1601.17,1210.6 1601.76,1209.31 1602.34,1209.45 1602.93,1209.64 1603.52,1207.18 1604.1,1209.15 1604.69,1213.51 1605.28,1214.86 1605.86,1210.29 1606.45,1210.26 1607.04,1210.39 1607.62,1212.14 1608.21,1213.4 1608.8,1215.04 1609.38,1215.23 1609.97,1213.75 1610.55,1212.67 1611.14,1212.59 1611.73,1214.05 1612.31,1215.34 1612.9,1215.09 1613.49,1213.79 1614.07,1212.46 1614.66,1215.44 1615.25,1214.46 1615.83,1214.64 1616.42,1214.54 1617.01,1215.8 1617.59,1215.65 1618.18,1217.01 1618.76,1215.26 1619.35,1216.77 1619.94,1215.4 1620.52,1216.54 1621.11,1215.12 1621.7,1213.89 1622.28,1216.96 1622.87,1215.36 1623.46,1217.03 1624.04,1215.52 1624.63,1215.53 1625.22,1215.5 1625.8,1213.6 1626.39,1213.79 1626.97,1213.79 1627.56,1212.73 1628.15,1214.48 1628.73,1214.31 1629.32,1216.13 1629.91,1216.2 1630.49,1213.44 1631.08,1212.1 1631.67,1210.81 1632.25,1210.91 1632.84,1209.94 1633.42,1210.26 1634.01,1207.54 1634.6,1209.37 1635.18,1209.79 1635.77,1216.28 1636.36,1215.9 1636.94,1219.09 1637.53,1217.64 1638.12,1216.31 1638.7,1216.65 1639.29,1218.17 1639.88,1220.79 1640.46,1220.52 1641.05,1218.87 1641.63,1217.17 1642.22,1216.97 1642.81,1218.45 1643.39,1218.33 1643.98,1219.61 1644.57,1217.53 1645.15,1217.3 1645.74,1217.25 1646.33,1218.48 1646.91,1219.47 1647.5,1217.61 1648.09,1217.21 1648.67,1215.48 1649.26,1212.53 1649.84,1213.99 1650.43,1215.73 1651.02,1215.7 1651.6,1217.06 1652.19,1215.5 1652.78,1215.6 1653.36,1215.61 1653.95,1213.98 1654.54,1214.14 1655.12,1215.45 1655.71,1211.37 1656.29,1208.48 1656.88,1208.69 1657.47,1207.16 1658.05,1209.06 1658.64,1211.98 1659.23,1210.6 1659.81,1206.63 1660.4,1206.98 1660.99,1208.84 1661.57,1210.68 1662.16,1209.52 1662.75,1206.84 1663.33,1206.88 1663.92,1205.91 1664.5,1207.72 1665.09,1207.73 1665.68,1209.41 1666.26,1205.59 1666.85,1208.78 1667.44,1209.83 1668.02,1210.3 1668.61,1206.34 1669.2,1209.85 1669.78,1207.5 1670.37,1205.22 1670.96,1200.32 1671.54,1202.42 1672.13,1202.97 1672.71,1203.78 1673.3,1205.95 1673.89,1210.52 1674.47,1209.61 1675.06,1211.13 1675.65,1211.3 1676.23,1208.66 1676.82,1207.69 1677.41,1206.65 1677.99,1205.63 1678.58,1204.72 1679.17,1204.05 1679.75,1204.77 1680.34,1207 1680.92,1210.33 1681.51,1209.33 1682.1,1212.49 1682.68,1213.83 1683.27,1212.43 1683.86,1208.53 1684.44,1211.74 1685.03,1212.03 1685.62,1213.81 1686.2,1216.75 1686.79,1218.35 1687.37,1218.27 1687.96,1217.94 1688.55,1216.33 1689.13,1216.31 1689.72,1216.27 1690.31,1216.15 1690.89,1217.55 1691.48,1221.55 1692.07,1221.13 1692.65,1221.03 1693.24,1219.28 1693.83,1217.81 1694.41,1217.42 1695,1218.72 1695.58,1215.71 1696.17,1218.32 1696.76,1217.55 1697.34,1218.81 1697.93,1218.47 1698.52,1218.29 1699.1,1216.83 1699.69,1216.59 1700.28,1215.42 1700.86,1215.32 1701.45,1215.25 1702.04,1215.47 1702.62,1213.77 1703.21,1211.06 1703.79,1212.53 1704.38,1212.55 1704.97,1211.47 1705.55,1210.18 1706.14,1212 1706.73,1211.88 1707.31,1213.32 1707.9,1215.01 1708.49,1215.18 1709.07,1216.29 1709.66,1214.6 1710.24,1214.03 1710.83,1211.22 1711.42,1211.26 1712,1211.26 1712.59,1211.4 1713.18,1211.51 1713.76,1210.29 1714.35,1209.12 1714.94,1209.27 1715.52,1209.74 1716.11,1210.04 1716.7,1215.83 1717.28,1215.83 1717.87,1215.76 1718.45,1215.64 1719.04,1218.39 1719.63,1218.03 1720.21,1216.25 1720.8,1215.92 1721.39,1217.16 1721.97,1216.89 1722.56,1214.07 1723.15,1211.38 1723.73,1211.64 1724.32,1211.92 1724.91,1209.34 1725.49,1209.58 1726.08,1212.64 1726.66,1209.82 1727.25,1208.57 1727.84,1205.92 1728.42,1207.98 1729.01,1208.55 1729.6,1208.65 1730.18,1210.79 1730.77,1210.58 1731.36,1211.96 1731.94,1212.45 1732.53,1214.01 1733.11,1214.19 1733.7,1212.74 1734.29,1211.55 1734.87,1211.37 1735.46,1210.24 1736.05,1210.46 1736.63,1210.38 1737.22,1210.44 1737.81,1212.1 1738.39,1212.06 1738.98,1212.29 1739.57,1210.74 1740.15,1209.45 1740.74,1209.76 1741.32,1209.9 1741.91,1211.73 1742.5,1211.94 1743.08,1212.12 1743.67,1210.56 1744.26,1215.03 1744.84,1215.18 1745.43,1215.22 1746.02,1212.56 1746.6,1211.01 1747.19,1212.56 1747.78,1214.14 1748.36,1211.26 1748.95,1211.35 1749.53,1215.54 1750.12,1215.67 1750.71,1215.76 1751.29,1215.91 1751.88,1216.14 1752.47,1216.32 1753.05,1216.2 1753.64,1216.13 1754.23,1217.43 1754.81,1219.8 1755.4,1214.96 1755.99,1213.28 1756.57,1214.97 1757.16,1214.92 1757.74,1217.49 1758.33,1218.66 1758.92,1215.51 1759.5,1213.88 1760.09,1213.74 1760.68,1215.42 1761.26,1218 1761.85,1216.43 1762.44,1214.96 1763.02,1216.39 1763.61,1220.49 1764.19,1218.74 1764.78,1219.71 1765.37,1219.77 1765.95,1220.85 1766.54,1217.68 1767.13,1217.51 1767.71,1217.66 1768.3,1218.76 1768.89,1218.17 1769.47,1219.15 1770.06,1220.43 1770.65,1220.18 1771.23,1219.92 1771.82,1221.15 1772.4,1222.18 1772.99,1224.75 1773.58,1220.37 1774.16,1222.83 1774.75,1220.98 1775.34,1220.59 1775.92,1217.48 1776.51,1218.84 1777.1,1222.7 1777.68,1228.14 1778.27,1230.27 1778.86,1224.67 1779.44,1224.31 1780.03,1223.78 1780.61,1223.2 1781.2,1221.13 1781.79,1219.53 1782.37,1220.67 1782.96,1219.99 1783.55,1219.79 1784.13,1219.74 1784.72,1216.49 1785.31,1216.5 1785.89,1216.11 1786.48,1214.64 1787.06,1211.5 1787.65,1216.08 1788.24,1218.84 1788.82,1218.57 1789.41,1218.28 1790,1216.65 1790.58,1216.47 1791.17,1217.92 1791.76,1217.77 1792.34,1217.41 1792.93,1212.94 1793.52,1210.19 1794.1,1207.3 1794.69,1210.53 1795.27,1211.87 1795.86,1210.72 1796.45,1209.36 1797.03,1209.49 1797.62,1212.47 1798.21,1212.69 1798.79,1209.77 1799.38,1206.99 1799.97,1205.94 1800.55,1207.88 1801.14,1211 1801.73,1210.11 1802.31,1211.81 1802.9,1213.49 1803.48,1214.87 1804.07,1213.49 1804.66,1213.82 1805.24,1216.35 1805.83,1215 1806.42,1215.05 1807,1213.55 1807.59,1218.17 1808.18,1219.52 1808.76,1219.12 1809.35,1217.36 1809.94,1217.2 1810.52,1217.12 1811.11,1217.1 1811.69,1216.9 1812.28,1219.59 1812.87,1216.49 1813.45,1217.78 1814.04,1219.03 1814.63,1218.97 1815.21,1220.38 1815.8,1218.39 1816.39,1219.42 1816.97,1219.2 1817.56,1220.22 1818.14,1216.79 1818.73,1216.59 1819.32,1219.56 1819.9,1221.97 1820.49,1223.2 1821.08,1222.7 1821.66,1222.47 1822.25,1223.55 1822.84,1221.76 1823.42,1225.5 1824.01,1226.14 1824.6,1226.96 1825.18,1220.91 1825.77,1222.16 1826.35,1219.91 1826.94,1219.85 1827.53,1222.37 1828.11,1217.72 1828.7,1217.9 1829.29,1217.7 1829.87,1217.57 1830.46,1214.5 1831.05,1214.49 1831.63,1213.09 1832.22,1211.9 1832.81,1211.75 1833.39,1211.74 1833.98,1214.69 1834.56,1214.6 1835.15,1214.43 1835.74,1214.29 1836.32,1218.38 1836.91,1215.07 1837.5,1215.14 1838.08,1215.31 1838.67,1212.44 1839.26,1212.55 1839.84,1212.28 1840.43,1209.48 1841.01,1208 1841.6,1205.59 1842.19,1205.61 1842.77,1204.94 1843.36,1205.28 1843.95,1205.87 1844.53,1205 1845.12,1205.62 1845.71,1207.42 1846.29,1202.41 1846.88,1205.96 1847.47,1209.32 1848.05,1206.5 1848.64,1205.26 1849.22,1204.59 1849.81,1203.59 1850.4,1205.3 1850.98,1207.38 1851.57,1206.4 1852.16,1205.55 1852.74,1209.14 1853.33,1209.36 1853.92,1209.78 1854.5,1210.27 1855.09,1210.61 1855.68,1210.8 1856.26,1210.89 1856.85,1212.54 1857.43,1214.3 1858.02,1214.4 1858.61,1214.48 1859.19,1216.07 1859.78,1217.49 1860.37,1217.53 1860.95,1220.27 1861.54,1218.59 1862.13,1217.2 1862.71,1217.22 1863.3,1217.27 1863.88,1219.73 1864.47,1219.46 1865.06,1220.3 1865.64,1219.96 1866.23,1218.13 1866.82,1214.98 1867.4,1213.44 1867.99,1212.11 1868.58,1213.54 1869.16,1212 1869.75,1212.21 1870.34,1212.38 1870.92,1213.93 1871.51,1212.49 1872.09,1207.16 1872.68,1206.22 1873.27,1203.71 1873.85,1204.24 1874.44,1204.98 1875.03,1203.93 1875.61,1207.28 1876.2,1210.5 1876.79,1213.52 1877.37,1213.73 1877.96,1215.33 1878.55,1213.76 1879.13,1213.75 1879.72,1212.42 1880.3,1214.16 1880.89,1216.95 1881.48,1212.44 1882.06,1212.54 1882.65,1212.92 1883.24,1213.14 1883.82,1213.08 1884.41,1215.91 1885,1215.74 1885.58,1215.83 1886.17,1213.98 1886.76,1216.62 1887.34,1216.3 1887.93,1217.99 1888.51,1216.63 1889.1,1216.23 1889.69,1215.87 1890.27,1214.6 1890.86,1214.73 1891.45,1212.02 1892.03,1212.18 1892.62,1213.74 1893.21,1213.7 1893.79,1215.31 1894.38,1218.18 1894.96,1215.12 1895.55,1213.89 1896.14,1213.74 1896.72,1213.72 1897.31,1214.04 1897.9,1213.89 1898.48,1213.79 1899.07,1215.4 1899.66,1215.36 1900.24,1212.54 1900.83,1212.65 1901.42,1215.71 1902,1216.81 1902.59,1218.22 1903.17,1219.22 1903.76,1221.58 1904.35,1220.96 1904.93,1220.45 1905.52,1220.05 1906.11,1220.05 1906.69,1219.64 1907.28,1213.8 1907.87,1216.46 1908.45,1212.03 1909.04,1212.15 1909.63,1212.19 1910.21,1212.47 1910.8,1212.46 1911.38,1212.9 1911.97,1211.74 1912.56,1212.01 1913.14,1213.7 1913.73,1212.18 1914.32,1213.65 1914.9,1212.29 1915.49,1213.58 1916.08,1213.47 1916.66,1213.27 1917.25,1213.5 1917.83,1212.2 1918.42,1215.43 1919.01,1215.51 1919.59,1216.78 1920.18,1215.36 1920.77,1214.14 1921.35,1214.37 1921.94,1214.19 1922.53,1215.53 1923.11,1218.39 1923.7,1216.87 1924.29,1215.5 1924.87,1216.91 1925.46,1216.98 1926.04,1215.6 1926.63,1217.34 1927.22,1217.23 1927.8,1219.81 1928.39,1218 1928.98,1216.82 1929.56,1215.38 1930.15,1215.29 1930.74,1215.38 1931.32,1213.71 1931.91,1214.99 1932.5,1213.42 1933.08,1208.84 1933.67,1210.4 1934.25,1209.63 1934.84,1209.88 1935.43,1207.23 1936.01,1209.02 1936.6,1207.76 1937.19,1203.93 1937.77,1204.43 1938.36,1203.7 1938.95,1201.46 1939.53,1202.3 1940.12,1201.42 1940.71,1203.55 1941.29,1207.28 1941.88,1207.85 1942.46,1207.03 1943.05,1207.77 1943.64,1207.89 1944.22,1211.06 1944.81,1211.08 1945.4,1211.47 1945.98,1210.25 1946.57,1212.07 1947.16,1214.91 1947.74,1216.15 1948.33,1213.46 1948.91,1213.86 1949.5,1216.45 1950.09,1220.52 1950.67,1223.13 1951.26,1221.25 1951.85,1223.68 1952.43,1224.45 1953.02,1223.76 1953.61,1223.2 1954.19,1222.54 1954.78,1220.58 1955.37,1220.16 1955.95,1218.33 1956.54,1218.27 1957.12,1215.49 1957.71,1212.56 1958.3,1214.34 1958.88,1214.3 1959.47,1214.29 1960.06,1215.46 1960.64,1216.93 1961.23,1214.32 1961.82,1214.42 1962.4,1214.3 1962.99,1214.68 1963.58,1214.62 1964.16,1214.61 1964.75,1214.32 1965.33,1214.31 1965.92,1215.55 1966.51,1215.64 1967.09,1217.06 1967.68,1214.31 1968.27,1208.33 1968.85,1209.08 1969.44,1212.1 1970.03,1209.28 1970.61,1209.25 1971.2,1215.02 1971.78,1213.6 1972.37,1219.17 1972.96,1217.6 1973.54,1220.21 1974.13,1220.26 1974.72,1219.88 1975.3,1218.06 1975.89,1220.58 1976.48,1221.71 1977.06,1221.42 1977.65,1221.05 1978.24,1221.94 1978.82,1221.37 1979.41,1222.29 1979.99,1218.73 1980.58,1215.57 1981.17,1215.54 1981.75,1215.16 1982.34,1213.52 1982.93,1213.55 1983.51,1213.48 1984.1,1210.37 1984.69,1210.77 1985.27,1210.81 1985.86,1213.52 1986.45,1212.13 1987.03,1210.74 1987.62,1210.8 1988.2,1208.15 1988.79,1208.84 1989.38,1208.99 1989.96,1209.41 1990.55,1210.79 1991.14,1209.38 1991.72,1211.05 1992.31,1214.3 1992.9,1215.74 1993.48,1214.29 1994.07,1212.81 1994.65,1214.26 1995.24,1215.49 1995.83,1219.69 1996.41,1219.13 1997,1221.91 1997.59,1220.17 1998.17,1219.88 1998.76,1218.36 1999.35,1218.1 1999.93,1210.93 2000.52,1209.41 2001.11,1211.25 2001.69,1211.61 2002.28,1210.28 2002.86,1210.41 2003.45,1210.58 2004.04,1212.22 2004.62,1212.6 2005.21,1209.61 2005.8,1212.73 2006.38,1215.55 2006.97,1215.5 2007.56,1216.56 2008.14,1216.58 2008.73,1215 2009.32,1212.08 2009.9,1212.2 2010.49,1212.13 2011.07,1209.35 2011.66,1209.18 2012.25,1206.45 2012.83,1209.56 2013.42,1211.02 2014.01,1213.88 2014.59,1214.03 2015.18,1212.63 2015.77,1211.47 2016.35,1211.78 2016.94,1213.01 2017.53,1211.81 2018.11,1212.89 2018.7,1211.7 2019.28,1212.94 2019.87,1212.89 2020.46,1208.61 2021.04,1207.53 2021.63,1206.58 2022.22,1207.18 2022.8,1209.05 2023.39,1207.7 2023.98,1208.2 2024.56,1208.71 2025.15,1210.66 2025.73,1212.23 2026.32,1212.12 2026.91,1212.49 2027.49,1212.85 2028.08,1213.07 2028.67,1210.45 2029.25,1212.45 2029.84,1211.57 2030.43,1211.71 2031.01,1214.89 2031.6,1216.07 2032.19,1216.41 2032.77,1218.91 2033.36,1220.15 2033.94,1219.64 2034.53,1220.92 2035.12,1219 2035.7,1220.1 2036.29,1221.2 2036.88,1222.36 2037.46,1223.45 2038.05,1221.15 2038.64,1220.79 2039.22,1220.73 2039.81,1219.03 2040.4,1217.5 2040.98,1216.12 2041.57,1215.87 2042.15,1215.94 2042.74,1215.73 2043.33,1218.5 2043.91,1219.43 2044.5,1217.55 2045.09,1218.96 2045.67,1219.88 2046.26,1214.99 2046.85,1213.36 2047.43,1214.89 2048.02,1210.46 2048.6,1209.19 2049.19,1208.22 2049.78,1205.88 2050.36,1204.77 2050.95,1203.83 2051.54,1204.15 2052.12,1206.3 2052.71,1205.67 2053.3,1205.06 2053.88,1203.84 2054.47,1207.36 2055.06,1209.05 2055.64,1207.8 2056.23,1209.4 2056.81,1214.17 2057.4,1212.63 2057.99,1213.24 2058.57,1212.12 2059.16,1212.36 2059.75,1212.37 2060.33,1212.4 2060.92,1215.26 2061.51,1218.17 2062.09,1216.66 2062.68,1216.71 2063.27,1215.12 2063.85,1215.29 2064.44,1211.97 2065.02,1210.61 2065.61,1212.69 2066.2,1211.1 2066.78,1208.19 2067.37,1207.26 2067.96,1208.95 2068.54,1207.84 2069.13,1208.52 2069.72,1208.88 2070.3,1210.73 2070.89,1209.63 2071.48,1207.04 2072.06,1207.75 2072.65,1206.63 2073.23,1209.5 2073.82,1212.6 2074.41,1212.67 2074.99,1211.39 2075.58,1211.8 2076.17,1213.45 2076.75,1212.11 2077.34,1212.58 2077.93,1214.11 2078.51,1215.56 2079.1,1215.85 2079.68,1215.71 2080.27,1215.32 2080.86,1216.52 2081.44,1217.78 2082.03,1219.33 2082.62,1220.29 2083.2,1221.61 2083.79,1219.69 2084.38,1219.6 2084.96,1218.15 2085.55,1218.01 2086.14,1219.15 2086.72,1221.75 2087.31,1221.23 2087.89,1220.54 2088.48,1221.57 2089.07,1221.19 2089.65,1220.78 2090.24,1224.72 2090.83,1224.42 2091.41,1222.61 2092,1220.89 2092.59,1220.67 2093.17,1217.62 2093.76,1217.62 2094.35,1217.35 2094.93,1215.66 2095.52,1211.48 2096.1,1215.89 2096.69,1217.37 2097.28,1218.87 2097.86,1217.69 2098.45,1220.5 2099.04,1220.27 2099.62,1221.22 2100.21,1221.99 2100.8,1217.17 2101.38,1218.33 2101.97,1216.75 2102.55,1215.31 2103.14,1216.74 2103.73,1215.04 2104.31,1215.07 2104.9,1216.63 2105.49,1216.5 2106.07,1216.31 2106.66,1214.64 2107.25,1211.82 2107.83,1207.67 2108.42,1208.22 2109.01,1209.98 2109.59,1211.92 2110.18,1214.46 2110.76,1213.08 2111.35,1213.45 2111.94,1212.07 2112.52,1213.38 2113.11,1219.19 2113.7,1220.5 2114.28,1216.34 2114.87,1214.77 2115.46,1214.87 2116.04,1216.41 2116.63,1215 2117.22,1218.02 2117.8,1216.1 2118.39,1212.95 2118.97,1214.56 2119.56,1216.18 2120.15,1217.32 2120.73,1217.09 2121.32,1218.12 2121.91,1220.74 2122.49,1220.32 2123.08,1219.79 2123.67,1221 2124.25,1220.87 2124.84,1217.59 2125.42,1215.96 2126.01,1215.98 2126.6,1216.18 2127.18,1216.17 2127.77,1216.19 2128.36,1213.31 2128.94,1213.5 2129.53,1213.74 2130.12,1215.2 2130.7,1219.48 2131.29,1216.39 2131.88,1218.04 2132.46,1215.4 2133.05,1216.93 2133.63,1209.9 2134.22,1209.84 2134.81,1209.7 2135.39,1215.15 2135.98,1213.73 2136.57,1213.99 2137.15,1211.64 2137.74,1208.91 2138.33,1209.33 2138.91,1209.7 2139.5,1209.76 2140.09,1211.37 2140.67,1212.8 2141.26,1215.82 2141.84,1217.45 2142.43,1217.09 2143.02,1217.16 2143.6,1217.02 2144.19,1216.81 2144.78,1218.14 2145.36,1216.55 2145.95,1216.17 2146.54,1213.54 2147.12,1216.61 2147.71,1216.28 2148.3,1214.63 2148.88,1218.91 2149.47,1221.41 2150.05,1222.65 2150.64,1220.95 2151.23,1219.13 2151.81,1217.19 2152.4,1211.32 2152.99,1211.65 2153.57,1211.87 2154.16,1212.08 2154.75,1212.32 2155.33,1209.48 2155.92,1207.13 2156.5,1207.45 2157.09,1209.27 2157.68,1206.91 2158.26,1208.56 \"/>\n<path clip-path=\"url(#clip272)\" d=\"M986.025 1215.11 L986.612 1215.11 L987.198 1215.11 L987.785 1215.11 L988.371 1215.11 L988.957 1215.11 L989.544 1215.11 L990.13 1215.11 L990.717 1215.11 L991.303 1215.11 L991.889 1215.11 L992.476 1215.11 L993.062 1215.11 L993.649 1215.11 L994.235 1215.11 L994.822 1215.11 L995.408 1215.11 L995.994 1215.11 L996.581 1215.11 L997.167 1215.11 L997.754 1215.11 L998.34 1215.11 L998.926 1215.11 L999.513 1215.11 L1000.1 1215.11 L1000.69 1215.11 L1001.27 1215.11 L1001.86 1215.11 L1002.44 1215.11 L1003.03 1215.11 L1003.62 1215.11 L1004.2 1215.11 L1004.79 1215.11 L1005.38 1215.11 L1005.96 1215.11 L1006.55 1215.11 L1007.14 1215.11 L1007.72 1215.11 L1008.31 1215.11 L1008.9 1215.11 L1009.48 1215.11 L1010.07 1215.11 L1010.65 1215.11 L1011.24 1215.11 L1011.83 1215.11 L1012.41 1215.11 L1013 1215.11 L1013.59 1215.11 L1014.17 1215.11 L1014.76 1215.11 L1015.35 1215.11 L1015.93 1215.11 L1016.52 1215.11 L1017.11 1215.11 L1017.69 1215.11 L1018.28 1215.11 L1018.86 1215.11 L1019.45 1215.11 L1020.04 1215.11 L1020.62 1215.11 L1021.21 1215.11 L1021.8 1215.11 L1022.38 1215.11 L1022.97 1215.11 L1023.56 1215.11 L1024.14 1215.11 L1024.73 1215.11 L1025.32 1215.11 L1025.9 1215.11 L1026.49 1215.11 L1027.07 1215.11 L1027.66 1215.11 L1028.25 1215.11 L1028.83 1215.11 L1029.42 1215.11 L1030.01 1215.11 L1030.59 1215.11 L1031.18 1215.11 L1031.77 1215.11 L1032.35 1215.11 L1032.94 1215.11 L1033.52 1215.11 L1034.11 1215.11 L1034.7 1215.11 L1035.28 1215.11 L1035.87 1215.11 L1036.46 1215.11 L1037.04 1215.11 L1037.63 1215.11 L1038.22 1215.11 L1038.8 1215.11 L1039.39 1215.11 L1039.98 1215.11 L1040.56 1215.11 L1041.15 1215.11 L1041.73 1215.11 L1042.32 1215.11 L1042.91 1215.11 L1043.49 1215.11 L1044.08 1215.11 L1044.67 1215.11 L1045.25 1215.11 L1045.84 1215.11 L1046.43 1215.11 L1047.01 1215.11 L1047.6 1215.11 L1048.19 1215.11 L1048.77 1215.11 L1049.36 1215.11 L1049.94 1215.11 L1050.53 1215.11 L1051.12 1215.11 L1051.7 1215.11 L1052.29 1215.11 L1052.88 1215.11 L1053.46 1215.11 L1054.05 1215.11 L1054.64 1215.11 L1055.22 1215.11 L1055.81 1215.11 L1056.39 1215.11 L1056.98 1215.11 L1057.57 1215.11 L1058.15 1215.11 L1058.74 1215.11 L1059.33 1215.11 L1059.91 1215.11 L1060.5 1215.11 L1061.09 1215.11 L1061.67 1215.11 L1062.26 1215.11 L1062.85 1215.11 L1063.43 1215.11 L1064.02 1215.11 L1064.6 1215.11 L1065.19 1215.11 L1065.78 1215.11 L1066.36 1215.11 L1066.95 1215.11 L1067.54 1215.11 L1068.12 1215.11 L1068.71 1215.11 L1069.3 1215.11 L1069.88 1215.11 L1070.47 1215.11 L1071.06 1215.11 L1071.64 1215.11 L1072.23 1215.11 L1072.81 1215.11 L1073.4 1215.11 L1073.99 1215.11 L1074.57 1215.11 L1075.16 1215.11 L1075.75 1215.11 L1076.33 1215.11 L1076.92 1215.11 L1077.51 1215.11 L1078.09 1215.11 L1078.68 1215.11 L1079.26 1215.11 L1079.85 1215.11 L1080.44 1215.11 L1081.02 1215.11 L1081.61 1215.11 L1082.2 1215.11 L1082.78 1215.11 L1083.37 1215.11 L1083.96 1215.11 L1084.54 1215.11 L1085.13 1215.11 L1085.72 1215.11 L1086.3 1215.11 L1086.89 1215.11 L1087.47 1215.11 L1088.06 1215.11 L1088.65 1215.11 L1089.23 1215.11 L1089.82 1215.11 L1090.41 1215.11 L1090.99 1215.11 L1091.58 1215.11 L1092.17 1215.11 L1092.75 1215.11 L1093.34 1215.11 L1093.93 1215.11 L1094.51 1215.11 L1095.1 1215.11 L1095.68 1215.11 L1096.27 1215.11 L1096.86 1215.11 L1097.44 1215.11 L1098.03 1215.11 L1098.62 1215.11 L1099.2 1215.11 L1099.79 1215.11 L1100.38 1215.11 L1100.96 1215.11 L1101.55 1215.11 L1102.14 1215.11 L1102.72 1215.11 L1103.31 1215.11 L1103.89 1215.11 L1104.48 1215.11 L1105.07 1215.11 L1105.65 1215.11 L1106.24 1215.11 L1106.83 1215.11 L1107.41 1215.11 L1108 1215.11 L1108.59 1215.11 L1109.17 1215.11 L1109.76 1215.11 L1110.34 1215.11 L1110.93 1215.11 L1111.52 1215.11 L1112.1 1215.11 L1112.69 1215.11 L1113.28 1215.11 L1113.86 1215.11 L1114.45 1215.11 L1115.04 1215.11 L1115.62 1215.11 L1116.21 1215.11 L1116.8 1215.11 L1117.38 1215.11 L1117.97 1215.11 L1118.55 1215.11 L1119.14 1215.11 L1119.73 1215.11 L1120.31 1215.11 L1120.9 1215.11 L1121.49 1215.11 L1122.07 1215.11 L1122.66 1215.11 L1123.25 1215.11 L1123.83 1215.11 L1124.42 1215.11 L1125.01 1215.11 L1125.59 1215.11 L1126.18 1215.11 L1126.76 1215.11 L1127.35 1215.11 L1127.94 1215.11 L1128.52 1215.11 L1129.11 1215.11 L1129.7 1215.11 L1130.28 1215.11 L1130.87 1215.11 L1131.46 1215.11 L1132.04 1215.11 L1132.63 1215.11 L1133.21 1215.11 L1133.8 1215.11 L1134.39 1215.11 L1134.97 1215.11 L1135.56 1215.11 L1136.15 1215.11 L1136.73 1215.11 L1137.32 1215.11 L1137.91 1215.11 L1138.49 1215.11 L1139.08 1215.11 L1139.67 1215.11 L1140.25 1215.11 L1140.84 1215.11 L1141.42 1215.11 L1142.01 1215.11 L1142.6 1215.11 L1143.18 1215.11 L1143.77 1215.11 L1144.36 1215.11 L1144.94 1215.11 L1145.53 1215.11 L1146.12 1215.11 L1146.7 1215.11 L1147.29 1215.11 L1147.88 1215.11 L1148.46 1215.11 L1149.05 1215.11 L1149.63 1215.11 L1150.22 1215.11 L1150.81 1215.11 L1151.39 1215.11 L1151.98 1215.11 L1152.57 1215.11 L1153.15 1215.11 L1153.74 1215.11 L1154.33 1215.11 L1154.91 1215.11 L1155.5 1215.11 L1156.09 1215.11 L1156.67 1215.11 L1157.26 1215.11 L1157.84 1215.11 L1158.43 1215.11 L1159.02 1215.11 L1159.6 1215.11 L1160.19 1215.11 L1160.78 1215.11 L1161.36 1215.11 L1161.95 1215.11 L1162.54 1215.11 L1163.12 1215.11 L1163.71 1215.11 L1164.29 1215.11 L1164.88 1215.11 L1165.47 1215.11 L1166.05 1215.11 L1166.64 1215.11 L1167.23 1215.11 L1167.81 1215.11 L1168.4 1215.11 L1168.99 1215.11 L1169.57 1215.11 L1170.16 1215.11 L1170.75 1215.11 L1171.33 1215.11 L1171.92 1215.11 L1172.5 1215.11 L1173.09 1215.11 L1173.68 1215.11 L1174.26 1215.11 L1174.85 1215.11 L1175.44 1215.11 L1176.02 1215.11 L1176.61 1215.11 L1177.2 1215.11 L1177.78 1215.11 L1178.37 1215.11 L1178.96 1215.11 L1179.54 1215.11 L1180.13 1215.11 L1180.71 1215.11 L1181.3 1215.11 L1181.89 1215.11 L1182.47 1215.11 L1183.06 1215.11 L1183.65 1215.11 L1184.23 1215.11 L1184.82 1215.11 L1185.41 1215.11 L1185.99 1215.11 L1186.58 1215.11 L1187.16 1215.11 L1187.75 1215.11 L1188.34 1215.11 L1188.92 1215.11 L1189.51 1215.11 L1190.1 1215.11 L1190.68 1215.11 L1191.27 1215.11 L1191.86 1215.11 L1192.44 1215.11 L1193.03 1215.11 L1193.62 1215.11 L1194.2 1215.11 L1194.79 1215.11 L1195.37 1215.11 L1195.96 1215.11 L1196.55 1215.11 L1197.13 1215.11 L1197.72 1215.11 L1198.31 1215.11 L1198.89 1215.11 L1199.48 1215.11 L1200.07 1215.11 L1200.65 1215.11 L1201.24 1215.11 L1201.83 1215.11 L1202.41 1215.11 L1203 1215.11 L1203.58 1215.11 L1204.17 1215.11 L1204.76 1215.11 L1205.34 1215.11 L1205.93 1215.11 L1206.52 1215.11 L1207.1 1215.11 L1207.69 1215.11 L1208.28 1215.11 L1208.86 1215.11 L1209.45 1215.11 L1210.03 1215.11 L1210.62 1215.11 L1211.21 1215.11 L1211.79 1215.11 L1212.38 1215.11 L1212.97 1215.11 L1213.55 1215.11 L1214.14 1215.11 L1214.73 1215.11 L1215.31 1215.11 L1215.9 1215.11 L1216.49 1215.11 L1217.07 1215.11 L1217.66 1215.11 L1218.24 1215.11 L1218.83 1215.11 L1219.42 1215.11 L1220 1215.11 L1220.59 1215.11 L1221.18 1215.11 L1221.76 1215.11 L1222.35 1215.11 L1222.94 1215.11 L1223.52 1215.11 L1224.11 1215.11 L1224.7 1215.11 L1225.28 1215.11 L1225.87 1215.11 L1226.45 1215.11 L1227.04 1215.11 L1227.63 1215.11 L1228.21 1215.11 L1228.8 1215.11 L1229.39 1215.11 L1229.97 1215.11 L1230.56 1215.11 L1231.15 1215.11 L1231.73 1215.11 L1232.32 1215.11 L1232.91 1215.11 L1233.49 1215.11 L1234.08 1215.11 L1234.66 1215.11 L1235.25 1215.11 L1235.84 1215.11 L1236.42 1215.11 L1237.01 1215.11 L1237.6 1215.11 L1238.18 1215.11 L1238.77 1215.11 L1239.36 1215.11 L1239.94 1215.11 L1240.53 1215.11 L1241.11 1215.11 L1241.7 1215.11 L1242.29 1215.11 L1242.87 1215.11 L1243.46 1215.11 L1244.05 1215.11 L1244.63 1215.11 L1245.22 1215.11 L1245.81 1215.11 L1246.39 1215.11 L1246.98 1215.11 L1247.57 1215.11 L1248.15 1215.11 L1248.74 1215.11 L1249.32 1215.11 L1249.91 1215.11 L1250.5 1215.11 L1251.08 1215.11 L1251.67 1215.11 L1252.26 1215.11 L1252.84 1215.11 L1253.43 1215.11 L1254.02 1215.11 L1254.6 1215.11 L1255.19 1215.11 L1255.78 1215.11 L1256.36 1215.11 L1256.95 1215.11 L1257.53 1215.11 L1258.12 1215.11 L1258.71 1215.11 L1259.29 1215.11 L1259.88 1215.11 L1260.47 1215.11 L1261.05 1215.11 L1261.64 1215.11 L1262.23 1215.11 L1262.81 1215.11 L1263.4 1215.11 L1263.98 1215.11 L1264.57 1215.11 L1265.16 1215.11 L1265.74 1215.11 L1266.33 1215.11 L1266.92 1215.11 L1267.5 1215.11 L1268.09 1215.11 L1268.68 1215.11 L1269.26 1215.11 L1269.85 1215.11 L1270.44 1215.11 L1271.02 1215.11 L1271.61 1215.11 L1272.19 1215.11 L1272.78 1215.11 L1273.37 1215.11 L1273.95 1215.11 L1274.54 1215.11 L1275.13 1215.11 L1275.71 1215.11 L1276.3 1215.11 L1276.89 1215.11 L1277.47 1215.11 L1278.06 1215.11 L1278.65 1215.11 L1279.23 1215.11 L1279.82 1215.11 L1280.4 1215.11 L1280.99 1215.11 L1281.58 1215.11 L1282.16 1215.11 L1282.75 1215.11 L1283.34 1215.11 L1283.92 1215.11 L1284.51 1215.11 L1285.1 1215.11 L1285.68 1215.11 L1286.27 1215.11 L1286.86 1215.11 L1287.44 1215.11 L1288.03 1215.11 L1288.61 1215.11 L1289.2 1215.11 L1289.79 1215.11 L1290.37 1215.11 L1290.96 1215.11 L1291.55 1215.11 L1292.13 1215.11 L1292.72 1215.11 L1293.31 1215.11 L1293.89 1215.11 L1294.48 1215.11 L1295.06 1215.11 L1295.65 1215.11 L1296.24 1215.11 L1296.82 1215.11 L1297.41 1215.11 L1298 1215.11 L1298.58 1215.11 L1299.17 1215.11 L1299.76 1215.11 L1300.34 1215.11 L1300.93 1215.11 L1301.52 1215.11 L1302.1 1215.11 L1302.69 1215.11 L1303.27 1215.11 L1303.86 1215.11 L1304.45 1215.11 L1305.03 1215.11 L1305.62 1215.11 L1306.21 1215.11 L1306.79 1215.11 L1307.38 1215.11 L1307.97 1215.11 L1308.55 1215.11 L1309.14 1215.11 L1309.73 1215.11 L1310.31 1215.11 L1310.9 1215.11 L1311.48 1215.11 L1312.07 1215.11 L1312.66 1215.11 L1313.24 1215.11 L1313.83 1215.11 L1314.42 1215.11 L1315 1215.11 L1315.59 1215.11 L1316.18 1215.11 L1316.76 1215.11 L1317.35 1215.11 L1317.93 1215.11 L1318.52 1215.11 L1319.11 1215.11 L1319.69 1215.11 L1320.28 1215.11 L1320.87 1215.11 L1321.45 1215.11 L1322.04 1215.11 L1322.63 1215.11 L1323.21 1215.11 L1323.8 1215.11 L1324.39 1215.11 L1324.97 1215.11 L1325.56 1215.11 L1326.14 1215.11 L1326.73 1215.11 L1327.32 1215.11 L1327.9 1215.11 L1328.49 1215.11 L1329.08 1215.11 L1329.66 1215.11 L1330.25 1215.11 L1330.84 1215.11 L1331.42 1215.11 L1332.01 1215.11 L1332.6 1215.11 L1333.18 1215.11 L1333.77 1215.11 L1334.35 1215.11 L1334.94 1215.11 L1335.53 1215.11 L1336.11 1215.11 L1336.7 1215.11 L1337.29 1215.11 L1337.87 1215.11 L1338.46 1215.11 L1339.05 1215.11 L1339.63 1215.11 L1340.22 1215.11 L1340.8 1215.11 L1341.39 1215.11 L1341.98 1215.11 L1342.56 1215.11 L1343.15 1215.11 L1343.74 1215.11 L1344.32 1215.11 L1344.91 1215.11 L1345.5 1215.11 L1346.08 1215.11 L1346.67 1215.11 L1347.26 1215.11 L1347.84 1215.11 L1348.43 1215.11 L1349.01 1215.11 L1349.6 1215.11 L1350.19 1215.11 L1350.77 1215.11 L1351.36 1215.11 L1351.95 1215.11 L1352.53 1215.11 L1353.12 1215.11 L1353.71 1215.11 L1354.29 1215.11 L1354.88 1215.11 L1355.47 1215.11 L1356.05 1215.11 L1356.64 1215.11 L1357.22 1215.11 L1357.81 1215.11 L1358.4 1215.11 L1358.98 1215.11 L1359.57 1215.11 L1360.16 1215.11 L1360.74 1215.11 L1361.33 1215.11 L1361.92 1215.11 L1362.5 1215.11 L1363.09 1215.11 L1363.68 1215.11 L1364.26 1215.11 L1364.85 1215.11 L1365.43 1215.11 L1366.02 1215.11 L1366.61 1215.11 L1367.19 1215.11 L1367.78 1215.11 L1368.37 1215.11 L1368.95 1215.11 L1369.54 1215.11 L1370.13 1215.11 L1370.71 1215.11 L1371.3 1215.11 L1371.88 1215.11 L1372.47 1215.11 L1373.06 1215.11 L1373.64 1215.11 L1374.23 1215.11 L1374.82 1215.11 L1375.4 1215.11 L1375.99 1215.11 L1376.58 1215.11 L1377.16 1215.11 L1377.75 1215.11 L1378.34 1215.11 L1378.92 1215.11 L1379.51 1215.11 L1380.09 1215.11 L1380.68 1215.11 L1381.27 1215.11 L1381.85 1215.11 L1382.44 1215.11 L1383.03 1215.11 L1383.61 1215.11 L1384.2 1215.11 L1384.79 1215.11 L1385.37 1215.11 L1385.96 1215.11 L1386.55 1215.11 L1387.13 1215.11 L1387.72 1215.11 L1388.3 1215.11 L1388.89 1215.11 L1389.48 1215.11 L1390.06 1215.11 L1390.65 1215.11 L1391.24 1215.11 L1391.82 1215.11 L1392.41 1215.11 L1393 1215.11 L1393.58 1215.11 L1394.17 1215.11 L1394.75 1215.11 L1395.34 1215.11 L1395.93 1215.11 L1396.51 1215.11 L1397.1 1215.11 L1397.69 1215.11 L1398.27 1215.11 L1398.86 1215.11 L1399.45 1215.11 L1400.03 1215.11 L1400.62 1215.11 L1401.21 1215.11 L1401.79 1215.11 L1402.38 1215.11 L1402.96 1215.11 L1403.55 1215.11 L1404.14 1215.11 L1404.72 1215.11 L1405.31 1215.11 L1405.9 1215.11 L1406.48 1215.11 L1407.07 1215.11 L1407.66 1215.11 L1408.24 1215.11 L1408.83 1215.11 L1409.42 1215.11 L1410 1215.11 L1410.59 1215.11 L1411.17 1215.11 L1411.76 1215.11 L1412.35 1215.11 L1412.93 1215.11 L1413.52 1215.11 L1414.11 1215.11 L1414.69 1215.11 L1415.28 1215.11 L1415.87 1215.11 L1416.45 1215.11 L1417.04 1215.11 L1417.63 1215.11 L1418.21 1215.11 L1418.8 1215.11 L1419.38 1215.11 L1419.97 1215.11 L1420.56 1215.11 L1421.14 1215.11 L1421.73 1215.11 L1422.32 1215.11 L1422.9 1215.11 L1423.49 1215.11 L1424.08 1215.11 L1424.66 1215.11 L1425.25 1215.11 L1425.83 1215.11 L1426.42 1215.11 L1427.01 1215.11 L1427.59 1215.11 L1428.18 1215.11 L1428.77 1215.11 L1429.35 1215.11 L1429.94 1215.11 L1430.53 1215.11 L1431.11 1215.11 L1431.7 1215.11 L1432.29 1215.11 L1432.87 1215.11 L1433.46 1215.11 L1434.04 1215.11 L1434.63 1215.11 L1435.22 1215.11 L1435.8 1215.11 L1436.39 1215.11 L1436.98 1215.11 L1437.56 1215.11 L1438.15 1215.11 L1438.74 1215.11 L1439.32 1215.11 L1439.91 1215.11 L1440.5 1215.11 L1441.08 1215.11 L1441.67 1215.11 L1442.25 1215.11 L1442.84 1215.11 L1443.43 1215.11 L1444.01 1215.11 L1444.6 1215.11 L1445.19 1215.11 L1445.77 1215.11 L1446.36 1215.11 L1446.95 1215.11 L1447.53 1215.11 L1448.12 1215.11 L1448.7 1215.11 L1449.29 1215.11 L1449.88 1215.11 L1450.46 1215.11 L1451.05 1215.11 L1451.64 1215.11 L1452.22 1215.11 L1452.81 1215.11 L1453.4 1215.11 L1453.98 1215.11 L1454.57 1215.11 L1455.16 1215.11 L1455.74 1215.11 L1456.33 1215.11 L1456.91 1215.11 L1457.5 1215.11 L1458.09 1215.11 L1458.67 1215.11 L1459.26 1215.11 L1459.85 1215.11 L1460.43 1215.11 L1461.02 1215.11 L1461.61 1215.11 L1462.19 1215.11 L1462.78 1215.11 L1463.37 1215.11 L1463.95 1215.11 L1464.54 1215.11 L1465.12 1215.11 L1465.71 1215.11 L1466.3 1215.11 L1466.88 1215.11 L1467.47 1215.11 L1468.06 1215.11 L1468.64 1215.11 L1469.23 1215.11 L1469.82 1215.11 L1470.4 1215.11 L1470.99 1215.11 L1471.57 1215.11 L1472.16 1215.11 L1472.75 1215.11 L1473.33 1215.11 L1473.92 1215.11 L1474.51 1215.11 L1475.09 1215.11 L1475.68 1215.11 L1476.27 1215.11 L1476.85 1215.11 L1477.44 1215.11 L1478.03 1215.11 L1478.61 1215.11 L1479.2 1215.11 L1479.78 1215.11 L1480.37 1215.11 L1480.96 1215.11 L1481.54 1215.11 L1482.13 1215.11 L1482.72 1215.11 L1483.3 1215.11 L1483.89 1215.11 L1484.48 1215.11 L1485.06 1215.11 L1485.65 1215.11 L1486.24 1215.11 L1486.82 1215.11 L1487.41 1215.11 L1487.99 1215.11 L1488.58 1215.11 L1489.17 1215.11 L1489.75 1215.11 L1490.34 1215.11 L1490.93 1215.11 L1491.51 1215.11 L1492.1 1215.11 L1492.69 1215.11 L1493.27 1215.11 L1493.86 1215.11 L1494.45 1215.11 L1495.03 1215.11 L1495.62 1215.11 L1496.2 1215.11 L1496.79 1215.11 L1497.38 1215.11 L1497.96 1215.11 L1498.55 1215.11 L1499.14 1215.11 L1499.72 1215.11 L1500.31 1215.11 L1500.9 1215.11 L1501.48 1215.11 L1502.07 1215.11 L1502.65 1215.11 L1503.24 1215.11 L1503.83 1215.11 L1504.41 1215.11 L1505 1215.11 L1505.59 1215.11 L1506.17 1215.11 L1506.76 1215.11 L1507.35 1215.11 L1507.93 1215.11 L1508.52 1215.11 L1509.11 1215.11 L1509.69 1215.11 L1510.28 1215.11 L1510.86 1215.11 L1511.45 1215.11 L1512.04 1215.11 L1512.62 1215.11 L1513.21 1215.11 L1513.8 1215.11 L1514.38 1215.11 L1514.97 1215.11 L1515.56 1215.11 L1516.14 1215.11 L1516.73 1215.11 L1517.32 1215.11 L1517.9 1215.11 L1518.49 1215.11 L1519.07 1215.11 L1519.66 1215.11 L1520.25 1215.11 L1520.83 1215.11 L1521.42 1215.11 L1522.01 1215.11 L1522.59 1215.11 L1523.18 1215.11 L1523.77 1215.11 L1524.35 1215.11 L1524.94 1215.11 L1525.52 1215.11 L1526.11 1215.11 L1526.7 1215.11 L1527.28 1215.11 L1527.87 1215.11 L1528.46 1215.11 L1529.04 1215.11 L1529.63 1215.11 L1530.22 1215.11 L1530.8 1215.11 L1531.39 1215.11 L1531.98 1215.11 L1532.56 1215.11 L1533.15 1215.11 L1533.73 1215.11 L1534.32 1215.11 L1534.91 1215.11 L1535.49 1215.11 L1536.08 1215.11 L1536.67 1215.11 L1537.25 1215.11 L1537.84 1215.11 L1538.43 1215.11 L1539.01 1215.11 L1539.6 1215.11 L1540.19 1215.11 L1540.77 1215.11 L1541.36 1215.11 L1541.94 1215.11 L1542.53 1215.11 L1543.12 1215.11 L1543.7 1215.11 L1544.29 1215.11 L1544.88 1215.11 L1545.46 1215.11 L1546.05 1215.11 L1546.64 1215.11 L1547.22 1215.11 L1547.81 1215.11 L1548.4 1215.11 L1548.98 1215.11 L1549.57 1215.11 L1550.15 1215.11 L1550.74 1215.11 L1551.33 1215.11 L1551.91 1215.11 L1552.5 1215.11 L1553.09 1215.11 L1553.67 1215.11 L1554.26 1215.11 L1554.85 1215.11 L1555.43 1215.11 L1556.02 1215.11 L1556.6 1215.11 L1557.19 1215.11 L1557.78 1215.11 L1558.36 1215.11 L1558.95 1215.11 L1559.54 1215.11 L1560.12 1215.11 L1560.71 1215.11 L1561.3 1215.11 L1561.88 1215.11 L1562.47 1215.11 L1563.06 1215.11 L1563.64 1215.11 L1564.23 1215.11 L1564.81 1215.11 L1565.4 1215.11 L1565.99 1215.11 L1566.57 1215.11 L1567.16 1215.11 L1567.75 1215.11 L1568.33 1215.11 L1568.92 1215.11 L1569.51 1215.11 L1570.09 1215.11 L1570.68 1215.11 L1571.27 1215.11 L1571.85 1215.11 L1572.44 1215.11 L1573.02 1215.11 L1573.61 1215.11 L1574.2 1215.11 L1574.78 1215.11 L1575.37 1215.11 L1575.96 1215.11 L1576.54 1215.11 L1577.13 1215.11 L1577.72 1215.11 L1578.3 1215.11 L1578.89 1215.11 L1579.47 1215.11 L1580.06 1215.11 L1580.65 1215.11 L1581.23 1215.11 L1581.82 1215.11 L1582.41 1215.11 L1582.99 1215.11 L1583.58 1215.11 L1584.17 1215.11 L1584.75 1215.11 L1585.34 1215.11 L1585.93 1215.11 L1586.51 1215.11 L1587.1 1215.11 L1587.68 1215.11 L1588.27 1215.11 L1588.86 1215.11 L1589.44 1215.11 L1590.03 1215.11 L1590.62 1215.11 L1591.2 1215.11 L1591.79 1215.11 L1592.38 1215.11 L1592.96 1215.11 L1593.55 1215.11 L1594.14 1215.11 L1594.72 1215.11 L1595.31 1215.11 L1595.89 1215.11 L1596.48 1215.11 L1597.07 1215.11 L1597.65 1215.11 L1598.24 1215.11 L1598.83 1215.11 L1599.41 1215.11 L1600 1215.11 L1600.59 1215.11 L1601.17 1215.11 L1601.76 1215.11 L1602.34 1215.11 L1602.93 1215.11 L1603.52 1215.11 L1604.1 1215.11 L1604.69 1215.11 L1605.28 1215.11 L1605.86 1215.11 L1606.45 1215.11 L1607.04 1215.11 L1607.62 1215.11 L1608.21 1215.11 L1608.8 1215.11 L1609.38 1215.11 L1609.97 1215.11 L1610.55 1215.11 L1611.14 1215.11 L1611.73 1215.11 L1612.31 1215.11 L1612.9 1215.11 L1613.49 1215.11 L1614.07 1215.11 L1614.66 1215.11 L1615.25 1215.11 L1615.83 1215.11 L1616.42 1215.11 L1617.01 1215.11 L1617.59 1215.11 L1618.18 1215.11 L1618.76 1215.11 L1619.35 1215.11 L1619.94 1215.11 L1620.52 1215.11 L1621.11 1215.11 L1621.7 1215.11 L1622.28 1215.11 L1622.87 1215.11 L1623.46 1215.11 L1624.04 1215.11 L1624.63 1215.11 L1625.22 1215.11 L1625.8 1215.11 L1626.39 1215.11 L1626.97 1215.11 L1627.56 1215.11 L1628.15 1215.11 L1628.73 1215.11 L1629.32 1215.11 L1629.91 1215.11 L1630.49 1215.11 L1631.08 1215.11 L1631.67 1215.11 L1632.25 1215.11 L1632.84 1215.11 L1633.42 1215.11 L1634.01 1215.11 L1634.6 1215.11 L1635.18 1215.11 L1635.77 1215.11 L1636.36 1215.11 L1636.94 1215.11 L1637.53 1215.11 L1638.12 1215.11 L1638.7 1215.11 L1639.29 1215.11 L1639.88 1215.11 L1640.46 1215.11 L1641.05 1215.11 L1641.63 1215.11 L1642.22 1215.11 L1642.81 1215.11 L1643.39 1215.11 L1643.98 1215.11 L1644.57 1215.11 L1645.15 1215.11 L1645.74 1215.11 L1646.33 1215.11 L1646.91 1215.11 L1647.5 1215.11 L1648.09 1215.11 L1648.67 1215.11 L1649.26 1215.11 L1649.84 1215.11 L1650.43 1215.11 L1651.02 1215.11 L1651.6 1215.11 L1652.19 1215.11 L1652.78 1215.11 L1653.36 1215.11 L1653.95 1215.11 L1654.54 1215.11 L1655.12 1215.11 L1655.71 1215.11 L1656.29 1215.11 L1656.88 1215.11 L1657.47 1215.11 L1658.05 1215.11 L1658.64 1215.11 L1659.23 1215.11 L1659.81 1215.11 L1660.4 1215.11 L1660.99 1215.11 L1661.57 1215.11 L1662.16 1215.11 L1662.75 1215.11 L1663.33 1215.11 L1663.92 1215.11 L1664.5 1215.11 L1665.09 1215.11 L1665.68 1215.11 L1666.26 1215.11 L1666.85 1215.11 L1667.44 1215.11 L1668.02 1215.11 L1668.61 1215.11 L1669.2 1215.11 L1669.78 1215.11 L1670.37 1215.11 L1670.96 1215.11 L1671.54 1215.11 L1672.13 1215.11 L1672.71 1215.11 L1673.3 1215.11 L1673.89 1215.11 L1674.47 1215.11 L1675.06 1215.11 L1675.65 1215.11 L1676.23 1215.11 L1676.82 1215.11 L1677.41 1215.11 L1677.99 1215.11 L1678.58 1215.11 L1679.17 1215.11 L1679.75 1215.11 L1680.34 1215.11 L1680.92 1215.11 L1681.51 1215.11 L1682.1 1215.11 L1682.68 1215.11 L1683.27 1215.11 L1683.86 1215.11 L1684.44 1215.11 L1685.03 1215.11 L1685.62 1215.11 L1686.2 1215.11 L1686.79 1215.11 L1687.37 1215.11 L1687.96 1215.11 L1688.55 1215.11 L1689.13 1215.11 L1689.72 1215.11 L1690.31 1215.11 L1690.89 1215.11 L1691.48 1215.11 L1692.07 1215.11 L1692.65 1215.11 L1693.24 1215.11 L1693.83 1215.11 L1694.41 1215.11 L1695 1215.11 L1695.58 1215.11 L1696.17 1215.11 L1696.76 1215.11 L1697.34 1215.11 L1697.93 1215.11 L1698.52 1215.11 L1699.1 1215.11 L1699.69 1215.11 L1700.28 1215.11 L1700.86 1215.11 L1701.45 1215.11 L1702.04 1215.11 L1702.62 1215.11 L1703.21 1215.11 L1703.79 1215.11 L1704.38 1215.11 L1704.97 1215.11 L1705.55 1215.11 L1706.14 1215.11 L1706.73 1215.11 L1707.31 1215.11 L1707.9 1215.11 L1708.49 1215.11 L1709.07 1215.11 L1709.66 1215.11 L1710.24 1215.11 L1710.83 1215.11 L1711.42 1215.11 L1712 1215.11 L1712.59 1215.11 L1713.18 1215.11 L1713.76 1215.11 L1714.35 1215.11 L1714.94 1215.11 L1715.52 1215.11 L1716.11 1215.11 L1716.7 1215.11 L1717.28 1215.11 L1717.87 1215.11 L1718.45 1215.11 L1719.04 1215.11 L1719.63 1215.11 L1720.21 1215.11 L1720.8 1215.11 L1721.39 1215.11 L1721.97 1215.11 L1722.56 1215.11 L1723.15 1215.11 L1723.73 1215.11 L1724.32 1215.11 L1724.91 1215.11 L1725.49 1215.11 L1726.08 1215.11 L1726.66 1215.11 L1727.25 1215.11 L1727.84 1215.11 L1728.42 1215.11 L1729.01 1215.11 L1729.6 1215.11 L1730.18 1215.11 L1730.77 1215.11 L1731.36 1215.11 L1731.94 1215.11 L1732.53 1215.11 L1733.11 1215.11 L1733.7 1215.11 L1734.29 1215.11 L1734.87 1215.11 L1735.46 1215.11 L1736.05 1215.11 L1736.63 1215.11 L1737.22 1215.11 L1737.81 1215.11 L1738.39 1215.11 L1738.98 1215.11 L1739.57 1215.11 L1740.15 1215.11 L1740.74 1215.11 L1741.32 1215.11 L1741.91 1215.11 L1742.5 1215.11 L1743.08 1215.11 L1743.67 1215.11 L1744.26 1215.11 L1744.84 1215.11 L1745.43 1215.11 L1746.02 1215.11 L1746.6 1215.11 L1747.19 1215.11 L1747.78 1215.11 L1748.36 1215.11 L1748.95 1215.11 L1749.53 1215.11 L1750.12 1215.11 L1750.71 1215.11 L1751.29 1215.11 L1751.88 1215.11 L1752.47 1215.11 L1753.05 1215.11 L1753.64 1215.11 L1754.23 1215.11 L1754.81 1215.11 L1755.4 1215.11 L1755.99 1215.11 L1756.57 1215.11 L1757.16 1215.11 L1757.74 1215.11 L1758.33 1215.11 L1758.92 1215.11 L1759.5 1215.11 L1760.09 1215.11 L1760.68 1215.11 L1761.26 1215.11 L1761.85 1215.11 L1762.44 1215.11 L1763.02 1215.11 L1763.61 1215.11 L1764.19 1215.11 L1764.78 1215.11 L1765.37 1215.11 L1765.95 1215.11 L1766.54 1215.11 L1767.13 1215.11 L1767.71 1215.11 L1768.3 1215.11 L1768.89 1215.11 L1769.47 1215.11 L1770.06 1215.11 L1770.65 1215.11 L1771.23 1215.11 L1771.82 1215.11 L1772.4 1215.11 L1772.99 1215.11 L1773.58 1215.11 L1774.16 1215.11 L1774.75 1215.11 L1775.34 1215.11 L1775.92 1215.11 L1776.51 1215.11 L1777.1 1215.11 L1777.68 1215.11 L1778.27 1215.11 L1778.86 1215.11 L1779.44 1215.11 L1780.03 1215.11 L1780.61 1215.11 L1781.2 1215.11 L1781.79 1215.11 L1782.37 1215.11 L1782.96 1215.11 L1783.55 1215.11 L1784.13 1215.11 L1784.72 1215.11 L1785.31 1215.11 L1785.89 1215.11 L1786.48 1215.11 L1787.06 1215.11 L1787.65 1215.11 L1788.24 1215.11 L1788.82 1215.11 L1789.41 1215.11 L1790 1215.11 L1790.58 1215.11 L1791.17 1215.11 L1791.76 1215.11 L1792.34 1215.11 L1792.93 1215.11 L1793.52 1215.11 L1794.1 1215.11 L1794.69 1215.11 L1795.27 1215.11 L1795.86 1215.11 L1796.45 1215.11 L1797.03 1215.11 L1797.62 1215.11 L1798.21 1215.11 L1798.79 1215.11 L1799.38 1215.11 L1799.97 1215.11 L1800.55 1215.11 L1801.14 1215.11 L1801.73 1215.11 L1802.31 1215.11 L1802.9 1215.11 L1803.48 1215.11 L1804.07 1215.11 L1804.66 1215.11 L1805.24 1215.11 L1805.83 1215.11 L1806.42 1215.11 L1807 1215.11 L1807.59 1215.11 L1808.18 1215.11 L1808.76 1215.11 L1809.35 1215.11 L1809.94 1215.11 L1810.52 1215.11 L1811.11 1215.11 L1811.69 1215.11 L1812.28 1215.11 L1812.87 1215.11 L1813.45 1215.11 L1814.04 1215.11 L1814.63 1215.11 L1815.21 1215.11 L1815.8 1215.11 L1816.39 1215.11 L1816.97 1215.11 L1817.56 1215.11 L1818.14 1215.11 L1818.73 1215.11 L1819.32 1215.11 L1819.9 1215.11 L1820.49 1215.11 L1821.08 1215.11 L1821.66 1215.11 L1822.25 1215.11 L1822.84 1215.11 L1823.42 1215.11 L1824.01 1215.11 L1824.6 1215.11 L1825.18 1215.11 L1825.77 1215.11 L1826.35 1215.11 L1826.94 1215.11 L1827.53 1215.11 L1828.11 1215.11 L1828.7 1215.11 L1829.29 1215.11 L1829.87 1215.11 L1830.46 1215.11 L1831.05 1215.11 L1831.63 1215.11 L1832.22 1215.11 L1832.81 1215.11 L1833.39 1215.11 L1833.98 1215.11 L1834.56 1215.11 L1835.15 1215.11 L1835.74 1215.11 L1836.32 1215.11 L1836.91 1215.11 L1837.5 1215.11 L1838.08 1215.11 L1838.67 1215.11 L1839.26 1215.11 L1839.84 1215.11 L1840.43 1215.11 L1841.01 1215.11 L1841.6 1215.11 L1842.19 1215.11 L1842.77 1215.11 L1843.36 1215.11 L1843.95 1215.11 L1844.53 1215.11 L1845.12 1215.11 L1845.71 1215.11 L1846.29 1215.11 L1846.88 1215.11 L1847.47 1215.11 L1848.05 1215.11 L1848.64 1215.11 L1849.22 1215.11 L1849.81 1215.11 L1850.4 1215.11 L1850.98 1215.11 L1851.57 1215.11 L1852.16 1215.11 L1852.74 1215.11 L1853.33 1215.11 L1853.92 1215.11 L1854.5 1215.11 L1855.09 1215.11 L1855.68 1215.11 L1856.26 1215.11 L1856.85 1215.11 L1857.43 1215.11 L1858.02 1215.11 L1858.61 1215.11 L1859.19 1215.11 L1859.78 1215.11 L1860.37 1215.11 L1860.95 1215.11 L1861.54 1215.11 L1862.13 1215.11 L1862.71 1215.11 L1863.3 1215.11 L1863.88 1215.11 L1864.47 1215.11 L1865.06 1215.11 L1865.64 1215.11 L1866.23 1215.11 L1866.82 1215.11 L1867.4 1215.11 L1867.99 1215.11 L1868.58 1215.11 L1869.16 1215.11 L1869.75 1215.11 L1870.34 1215.11 L1870.92 1215.11 L1871.51 1215.11 L1872.09 1215.11 L1872.68 1215.11 L1873.27 1215.11 L1873.85 1215.11 L1874.44 1215.11 L1875.03 1215.11 L1875.61 1215.11 L1876.2 1215.11 L1876.79 1215.11 L1877.37 1215.11 L1877.96 1215.11 L1878.55 1215.11 L1879.13 1215.11 L1879.72 1215.11 L1880.3 1215.11 L1880.89 1215.11 L1881.48 1215.11 L1882.06 1215.11 L1882.65 1215.11 L1883.24 1215.11 L1883.82 1215.11 L1884.41 1215.11 L1885 1215.11 L1885.58 1215.11 L1886.17 1215.11 L1886.76 1215.11 L1887.34 1215.11 L1887.93 1215.11 L1888.51 1215.11 L1889.1 1215.11 L1889.69 1215.11 L1890.27 1215.11 L1890.86 1215.11 L1891.45 1215.11 L1892.03 1215.11 L1892.62 1215.11 L1893.21 1215.11 L1893.79 1215.11 L1894.38 1215.11 L1894.96 1215.11 L1895.55 1215.11 L1896.14 1215.11 L1896.72 1215.11 L1897.31 1215.11 L1897.9 1215.11 L1898.48 1215.11 L1899.07 1215.11 L1899.66 1215.11 L1900.24 1215.11 L1900.83 1215.11 L1901.42 1215.11 L1902 1215.11 L1902.59 1215.11 L1903.17 1215.11 L1903.76 1215.11 L1904.35 1215.11 L1904.93 1215.11 L1905.52 1215.11 L1906.11 1215.11 L1906.69 1215.11 L1907.28 1215.11 L1907.87 1215.11 L1908.45 1215.11 L1909.04 1215.11 L1909.63 1215.11 L1910.21 1215.11 L1910.8 1215.11 L1911.38 1215.11 L1911.97 1215.11 L1912.56 1215.11 L1913.14 1215.11 L1913.73 1215.11 L1914.32 1215.11 L1914.9 1215.11 L1915.49 1215.11 L1916.08 1215.11 L1916.66 1215.11 L1917.25 1215.11 L1917.83 1215.11 L1918.42 1215.11 L1919.01 1215.11 L1919.59 1215.11 L1920.18 1215.11 L1920.77 1215.11 L1921.35 1215.11 L1921.94 1215.11 L1922.53 1215.11 L1923.11 1215.11 L1923.7 1215.11 L1924.29 1215.11 L1924.87 1215.11 L1925.46 1215.11 L1926.04 1215.11 L1926.63 1215.11 L1927.22 1215.11 L1927.8 1215.11 L1928.39 1215.11 L1928.98 1215.11 L1929.56 1215.11 L1930.15 1215.11 L1930.74 1215.11 L1931.32 1215.11 L1931.91 1215.11 L1932.5 1215.11 L1933.08 1215.11 L1933.67 1215.11 L1934.25 1215.11 L1934.84 1215.11 L1935.43 1215.11 L1936.01 1215.11 L1936.6 1215.11 L1937.19 1215.11 L1937.77 1215.11 L1938.36 1215.11 L1938.95 1215.11 L1939.53 1215.11 L1940.12 1215.11 L1940.71 1215.11 L1941.29 1215.11 L1941.88 1215.11 L1942.46 1215.11 L1943.05 1215.11 L1943.64 1215.11 L1944.22 1215.11 L1944.81 1215.11 L1945.4 1215.11 L1945.98 1215.11 L1946.57 1215.11 L1947.16 1215.11 L1947.74 1215.11 L1948.33 1215.11 L1948.91 1215.11 L1949.5 1215.11 L1950.09 1215.11 L1950.67 1215.11 L1951.26 1215.11 L1951.85 1215.11 L1952.43 1215.11 L1953.02 1215.11 L1953.61 1215.11 L1954.19 1215.11 L1954.78 1215.11 L1955.37 1215.11 L1955.95 1215.11 L1956.54 1215.11 L1957.12 1215.11 L1957.71 1215.11 L1958.3 1215.11 L1958.88 1215.11 L1959.47 1215.11 L1960.06 1215.11 L1960.64 1215.11 L1961.23 1215.11 L1961.82 1215.11 L1962.4 1215.11 L1962.99 1215.11 L1963.58 1215.11 L1964.16 1215.11 L1964.75 1215.11 L1965.33 1215.11 L1965.92 1215.11 L1966.51 1215.11 L1967.09 1215.11 L1967.68 1215.11 L1968.27 1215.11 L1968.85 1215.11 L1969.44 1215.11 L1970.03 1215.11 L1970.61 1215.11 L1971.2 1215.11 L1971.78 1215.11 L1972.37 1215.11 L1972.96 1215.11 L1973.54 1215.11 L1974.13 1215.11 L1974.72 1215.11 L1975.3 1215.11 L1975.89 1215.11 L1976.48 1215.11 L1977.06 1215.11 L1977.65 1215.11 L1978.24 1215.11 L1978.82 1215.11 L1979.41 1215.11 L1979.99 1215.11 L1980.58 1215.11 L1981.17 1215.11 L1981.75 1215.11 L1982.34 1215.11 L1982.93 1215.11 L1983.51 1215.11 L1984.1 1215.11 L1984.69 1215.11 L1985.27 1215.11 L1985.86 1215.11 L1986.45 1215.11 L1987.03 1215.11 L1987.62 1215.11 L1988.2 1215.11 L1988.79 1215.11 L1989.38 1215.11 L1989.96 1215.11 L1990.55 1215.11 L1991.14 1215.11 L1991.72 1215.11 L1992.31 1215.11 L1992.9 1215.11 L1993.48 1215.11 L1994.07 1215.11 L1994.65 1215.11 L1995.24 1215.11 L1995.83 1215.11 L1996.41 1215.11 L1997 1215.11 L1997.59 1215.11 L1998.17 1215.11 L1998.76 1215.11 L1999.35 1215.11 L1999.93 1215.11 L2000.52 1215.11 L2001.11 1215.11 L2001.69 1215.11 L2002.28 1215.11 L2002.86 1215.11 L2003.45 1215.11 L2004.04 1215.11 L2004.62 1215.11 L2005.21 1215.11 L2005.8 1215.11 L2006.38 1215.11 L2006.97 1215.11 L2007.56 1215.11 L2008.14 1215.11 L2008.73 1215.11 L2009.32 1215.11 L2009.9 1215.11 L2010.49 1215.11 L2011.07 1215.11 L2011.66 1215.11 L2012.25 1215.11 L2012.83 1215.11 L2013.42 1215.11 L2014.01 1215.11 L2014.59 1215.11 L2015.18 1215.11 L2015.77 1215.11 L2016.35 1215.11 L2016.94 1215.11 L2017.53 1215.11 L2018.11 1215.11 L2018.7 1215.11 L2019.28 1215.11 L2019.87 1215.11 L2020.46 1215.11 L2021.04 1215.11 L2021.63 1215.11 L2022.22 1215.11 L2022.8 1215.11 L2023.39 1215.11 L2023.98 1215.11 L2024.56 1215.11 L2025.15 1215.11 L2025.73 1215.11 L2026.32 1215.11 L2026.91 1215.11 L2027.49 1215.11 L2028.08 1215.11 L2028.67 1215.11 L2029.25 1215.11 L2029.84 1215.11 L2030.43 1215.11 L2031.01 1215.11 L2031.6 1215.11 L2032.19 1215.11 L2032.77 1215.11 L2033.36 1215.11 L2033.94 1215.11 L2034.53 1215.11 L2035.12 1215.11 L2035.7 1215.11 L2036.29 1215.11 L2036.88 1215.11 L2037.46 1215.11 L2038.05 1215.11 L2038.64 1215.11 L2039.22 1215.11 L2039.81 1215.11 L2040.4 1215.11 L2040.98 1215.11 L2041.57 1215.11 L2042.15 1215.11 L2042.74 1215.11 L2043.33 1215.11 L2043.91 1215.11 L2044.5 1215.11 L2045.09 1215.11 L2045.67 1215.11 L2046.26 1215.11 L2046.85 1215.11 L2047.43 1215.11 L2048.02 1215.11 L2048.6 1215.11 L2049.19 1215.11 L2049.78 1215.11 L2050.36 1215.11 L2050.95 1215.11 L2051.54 1215.11 L2052.12 1215.11 L2052.71 1215.11 L2053.3 1215.11 L2053.88 1215.11 L2054.47 1215.11 L2055.06 1215.11 L2055.64 1215.11 L2056.23 1215.11 L2056.81 1215.11 L2057.4 1215.11 L2057.99 1215.11 L2058.57 1215.11 L2059.16 1215.11 L2059.75 1215.11 L2060.33 1215.11 L2060.92 1215.11 L2061.51 1215.11 L2062.09 1215.11 L2062.68 1215.11 L2063.27 1215.11 L2063.85 1215.11 L2064.44 1215.11 L2065.02 1215.11 L2065.61 1215.11 L2066.2 1215.11 L2066.78 1215.11 L2067.37 1215.11 L2067.96 1215.11 L2068.54 1215.11 L2069.13 1215.11 L2069.72 1215.11 L2070.3 1215.11 L2070.89 1215.11 L2071.48 1215.11 L2072.06 1215.11 L2072.65 1215.11 L2073.23 1215.11 L2073.82 1215.11 L2074.41 1215.11 L2074.99 1215.11 L2075.58 1215.11 L2076.17 1215.11 L2076.75 1215.11 L2077.34 1215.11 L2077.93 1215.11 L2078.51 1215.11 L2079.1 1215.11 L2079.68 1215.11 L2080.27 1215.11 L2080.86 1215.11 L2081.44 1215.11 L2082.03 1215.11 L2082.62 1215.11 L2083.2 1215.11 L2083.79 1215.11 L2084.38 1215.11 L2084.96 1215.11 L2085.55 1215.11 L2086.14 1215.11 L2086.72 1215.11 L2087.31 1215.11 L2087.89 1215.11 L2088.48 1215.11 L2089.07 1215.11 L2089.65 1215.11 L2090.24 1215.11 L2090.83 1215.11 L2091.41 1215.11 L2092 1215.11 L2092.59 1215.11 L2093.17 1215.11 L2093.76 1215.11 L2094.35 1215.11 L2094.93 1215.11 L2095.52 1215.11 L2096.1 1215.11 L2096.69 1215.11 L2097.28 1215.11 L2097.86 1215.11 L2098.45 1215.11 L2099.04 1215.11 L2099.62 1215.11 L2100.21 1215.11 L2100.8 1215.11 L2101.38 1215.11 L2101.97 1215.11 L2102.55 1215.11 L2103.14 1215.11 L2103.73 1215.11 L2104.31 1215.11 L2104.9 1215.11 L2105.49 1215.11 L2106.07 1215.11 L2106.66 1215.11 L2107.25 1215.11 L2107.83 1215.11 L2108.42 1215.11 L2109.01 1215.11 L2109.59 1215.11 L2110.18 1215.11 L2110.76 1215.11 L2111.35 1215.11 L2111.94 1215.11 L2112.52 1215.11 L2113.11 1215.11 L2113.7 1215.11 L2114.28 1215.11 L2114.87 1215.11 L2115.46 1215.11 L2116.04 1215.11 L2116.63 1215.11 L2117.22 1215.11 L2117.8 1215.11 L2118.39 1215.11 L2118.97 1215.11 L2119.56 1215.11 L2120.15 1215.11 L2120.73 1215.11 L2121.32 1215.11 L2121.91 1215.11 L2122.49 1215.11 L2123.08 1215.11 L2123.67 1215.11 L2124.25 1215.11 L2124.84 1215.11 L2125.42 1215.11 L2126.01 1215.11 L2126.6 1215.11 L2127.18 1215.11 L2127.77 1215.11 L2128.36 1215.11 L2128.94 1215.11 L2129.53 1215.11 L2130.12 1215.11 L2130.7 1215.11 L2131.29 1215.11 L2131.88 1215.11 L2132.46 1215.11 L2133.05 1215.11 L2133.63 1215.11 L2134.22 1215.11 L2134.81 1215.11 L2135.39 1215.11 L2135.98 1215.11 L2136.57 1215.11 L2137.15 1215.11 L2137.74 1215.11 L2138.33 1215.11 L2138.91 1215.11 L2139.5 1215.11 L2140.09 1215.11 L2140.67 1215.11 L2141.26 1215.11 L2141.84 1215.11 L2142.43 1215.11 L2143.02 1215.11 L2143.6 1215.11 L2144.19 1215.11 L2144.78 1215.11 L2145.36 1215.11 L2145.95 1215.11 L2146.54 1215.11 L2147.12 1215.11 L2147.71 1215.11 L2148.3 1215.11 L2148.88 1215.11 L2149.47 1215.11 L2150.05 1215.11 L2150.64 1215.11 L2151.23 1215.11 L2151.81 1215.11 L2152.4 1215.11 L2152.99 1215.11 L2153.57 1215.11 L2154.16 1215.11 L2154.75 1215.11 L2155.33 1215.11 L2155.92 1215.11 L2156.5 1215.11 L2157.09 1215.11 L2157.68 1215.11 L2158.26 1215.11 L2158.26 1214.41 L2157.68 1214.41 L2157.09 1214.41 L2156.5 1214.41 L2155.92 1214.41 L2155.33 1214.41 L2154.75 1214.41 L2154.16 1214.41 L2153.57 1214.41 L2152.99 1214.41 L2152.4 1214.41 L2151.81 1214.41 L2151.23 1214.41 L2150.64 1214.41 L2150.05 1214.41 L2149.47 1214.41 L2148.88 1214.41 L2148.3 1214.41 L2147.71 1214.41 L2147.12 1214.41 L2146.54 1214.41 L2145.95 1214.41 L2145.36 1214.41 L2144.78 1214.41 L2144.19 1214.41 L2143.6 1214.41 L2143.02 1214.41 L2142.43 1214.41 L2141.84 1214.41 L2141.26 1214.41 L2140.67 1214.41 L2140.09 1214.41 L2139.5 1214.41 L2138.91 1214.41 L2138.33 1214.41 L2137.74 1214.41 L2137.15 1214.41 L2136.57 1214.41 L2135.98 1214.41 L2135.39 1214.41 L2134.81 1214.41 L2134.22 1214.41 L2133.63 1214.41 L2133.05 1214.41 L2132.46 1214.41 L2131.88 1214.41 L2131.29 1214.41 L2130.7 1214.41 L2130.12 1214.41 L2129.53 1214.41 L2128.94 1214.41 L2128.36 1214.41 L2127.77 1214.41 L2127.18 1214.41 L2126.6 1214.41 L2126.01 1214.41 L2125.42 1214.41 L2124.84 1214.41 L2124.25 1214.41 L2123.67 1214.41 L2123.08 1214.41 L2122.49 1214.41 L2121.91 1214.41 L2121.32 1214.41 L2120.73 1214.41 L2120.15 1214.41 L2119.56 1214.41 L2118.97 1214.41 L2118.39 1214.41 L2117.8 1214.41 L2117.22 1214.41 L2116.63 1214.41 L2116.04 1214.41 L2115.46 1214.41 L2114.87 1214.41 L2114.28 1214.41 L2113.7 1214.41 L2113.11 1214.41 L2112.52 1214.41 L2111.94 1214.41 L2111.35 1214.41 L2110.76 1214.41 L2110.18 1214.41 L2109.59 1214.41 L2109.01 1214.41 L2108.42 1214.41 L2107.83 1214.41 L2107.25 1214.41 L2106.66 1214.41 L2106.07 1214.41 L2105.49 1214.41 L2104.9 1214.41 L2104.31 1214.41 L2103.73 1214.41 L2103.14 1214.41 L2102.55 1214.41 L2101.97 1214.41 L2101.38 1214.41 L2100.8 1214.41 L2100.21 1214.41 L2099.62 1214.41 L2099.04 1214.41 L2098.45 1214.41 L2097.86 1214.41 L2097.28 1214.41 L2096.69 1214.41 L2096.1 1214.41 L2095.52 1214.41 L2094.93 1214.41 L2094.35 1214.41 L2093.76 1214.41 L2093.17 1214.41 L2092.59 1214.41 L2092 1214.41 L2091.41 1214.41 L2090.83 1214.41 L2090.24 1214.41 L2089.65 1214.41 L2089.07 1214.41 L2088.48 1214.41 L2087.89 1214.41 L2087.31 1214.41 L2086.72 1214.41 L2086.14 1214.41 L2085.55 1214.41 L2084.96 1214.41 L2084.38 1214.41 L2083.79 1214.41 L2083.2 1214.41 L2082.62 1214.41 L2082.03 1214.41 L2081.44 1214.41 L2080.86 1214.41 L2080.27 1214.41 L2079.68 1214.41 L2079.1 1214.41 L2078.51 1214.41 L2077.93 1214.41 L2077.34 1214.41 L2076.75 1214.41 L2076.17 1214.41 L2075.58 1214.41 L2074.99 1214.41 L2074.41 1214.41 L2073.82 1214.41 L2073.23 1214.41 L2072.65 1214.41 L2072.06 1214.41 L2071.48 1214.41 L2070.89 1214.41 L2070.3 1214.41 L2069.72 1214.41 L2069.13 1214.41 L2068.54 1214.41 L2067.96 1214.41 L2067.37 1214.41 L2066.78 1214.41 L2066.2 1214.41 L2065.61 1214.41 L2065.02 1214.41 L2064.44 1214.41 L2063.85 1214.41 L2063.27 1214.41 L2062.68 1214.41 L2062.09 1214.41 L2061.51 1214.41 L2060.92 1214.41 L2060.33 1214.41 L2059.75 1214.41 L2059.16 1214.41 L2058.57 1214.41 L2057.99 1214.41 L2057.4 1214.41 L2056.81 1214.41 L2056.23 1214.41 L2055.64 1214.41 L2055.06 1214.41 L2054.47 1214.41 L2053.88 1214.41 L2053.3 1214.41 L2052.71 1214.41 L2052.12 1214.41 L2051.54 1214.41 L2050.95 1214.41 L2050.36 1214.41 L2049.78 1214.41 L2049.19 1214.41 L2048.6 1214.41 L2048.02 1214.41 L2047.43 1214.41 L2046.85 1214.41 L2046.26 1214.41 L2045.67 1214.41 L2045.09 1214.41 L2044.5 1214.41 L2043.91 1214.41 L2043.33 1214.41 L2042.74 1214.41 L2042.15 1214.41 L2041.57 1214.41 L2040.98 1214.41 L2040.4 1214.41 L2039.81 1214.41 L2039.22 1214.41 L2038.64 1214.41 L2038.05 1214.41 L2037.46 1214.41 L2036.88 1214.41 L2036.29 1214.41 L2035.7 1214.41 L2035.12 1214.41 L2034.53 1214.41 L2033.94 1214.41 L2033.36 1214.41 L2032.77 1214.41 L2032.19 1214.41 L2031.6 1214.41 L2031.01 1214.41 L2030.43 1214.41 L2029.84 1214.41 L2029.25 1214.41 L2028.67 1214.41 L2028.08 1214.41 L2027.49 1214.41 L2026.91 1214.41 L2026.32 1214.41 L2025.73 1214.41 L2025.15 1214.41 L2024.56 1214.41 L2023.98 1214.41 L2023.39 1214.41 L2022.8 1214.41 L2022.22 1214.41 L2021.63 1214.41 L2021.04 1214.41 L2020.46 1214.41 L2019.87 1214.41 L2019.28 1214.41 L2018.7 1214.41 L2018.11 1214.41 L2017.53 1214.41 L2016.94 1214.41 L2016.35 1214.41 L2015.77 1214.41 L2015.18 1214.41 L2014.59 1214.41 L2014.01 1214.41 L2013.42 1214.41 L2012.83 1214.41 L2012.25 1214.41 L2011.66 1214.41 L2011.07 1214.41 L2010.49 1214.41 L2009.9 1214.41 L2009.32 1214.41 L2008.73 1214.41 L2008.14 1214.41 L2007.56 1214.41 L2006.97 1214.41 L2006.38 1214.41 L2005.8 1214.41 L2005.21 1214.41 L2004.62 1214.41 L2004.04 1214.41 L2003.45 1214.41 L2002.86 1214.41 L2002.28 1214.41 L2001.69 1214.41 L2001.11 1214.41 L2000.52 1214.41 L1999.93 1214.41 L1999.35 1214.41 L1998.76 1214.41 L1998.17 1214.41 L1997.59 1214.41 L1997 1214.41 L1996.41 1214.41 L1995.83 1214.41 L1995.24 1214.41 L1994.65 1214.41 L1994.07 1214.41 L1993.48 1214.41 L1992.9 1214.41 L1992.31 1214.41 L1991.72 1214.41 L1991.14 1214.41 L1990.55 1214.41 L1989.96 1214.41 L1989.38 1214.41 L1988.79 1214.41 L1988.2 1214.41 L1987.62 1214.41 L1987.03 1214.41 L1986.45 1214.41 L1985.86 1214.41 L1985.27 1214.41 L1984.69 1214.41 L1984.1 1214.41 L1983.51 1214.41 L1982.93 1214.41 L1982.34 1214.41 L1981.75 1214.41 L1981.17 1214.41 L1980.58 1214.41 L1979.99 1214.41 L1979.41 1214.41 L1978.82 1214.41 L1978.24 1214.41 L1977.65 1214.41 L1977.06 1214.41 L1976.48 1214.41 L1975.89 1214.41 L1975.3 1214.41 L1974.72 1214.41 L1974.13 1214.41 L1973.54 1214.41 L1972.96 1214.41 L1972.37 1214.41 L1971.78 1214.41 L1971.2 1214.41 L1970.61 1214.41 L1970.03 1214.41 L1969.44 1214.41 L1968.85 1214.41 L1968.27 1214.41 L1967.68 1214.41 L1967.09 1214.41 L1966.51 1214.41 L1965.92 1214.41 L1965.33 1214.41 L1964.75 1214.41 L1964.16 1214.41 L1963.58 1214.41 L1962.99 1214.41 L1962.4 1214.41 L1961.82 1214.41 L1961.23 1214.41 L1960.64 1214.41 L1960.06 1214.41 L1959.47 1214.41 L1958.88 1214.41 L1958.3 1214.41 L1957.71 1214.41 L1957.12 1214.41 L1956.54 1214.41 L1955.95 1214.41 L1955.37 1214.41 L1954.78 1214.41 L1954.19 1214.41 L1953.61 1214.41 L1953.02 1214.41 L1952.43 1214.41 L1951.85 1214.41 L1951.26 1214.41 L1950.67 1214.41 L1950.09 1214.41 L1949.5 1214.41 L1948.91 1214.41 L1948.33 1214.41 L1947.74 1214.41 L1947.16 1214.41 L1946.57 1214.41 L1945.98 1214.41 L1945.4 1214.41 L1944.81 1214.41 L1944.22 1214.41 L1943.64 1214.41 L1943.05 1214.41 L1942.46 1214.41 L1941.88 1214.41 L1941.29 1214.41 L1940.71 1214.41 L1940.12 1214.41 L1939.53 1214.41 L1938.95 1214.41 L1938.36 1214.41 L1937.77 1214.41 L1937.19 1214.41 L1936.6 1214.41 L1936.01 1214.41 L1935.43 1214.41 L1934.84 1214.41 L1934.25 1214.41 L1933.67 1214.41 L1933.08 1214.41 L1932.5 1214.41 L1931.91 1214.41 L1931.32 1214.41 L1930.74 1214.41 L1930.15 1214.41 L1929.56 1214.41 L1928.98 1214.41 L1928.39 1214.41 L1927.8 1214.41 L1927.22 1214.41 L1926.63 1214.41 L1926.04 1214.41 L1925.46 1214.41 L1924.87 1214.41 L1924.29 1214.41 L1923.7 1214.41 L1923.11 1214.41 L1922.53 1214.41 L1921.94 1214.41 L1921.35 1214.41 L1920.77 1214.41 L1920.18 1214.41 L1919.59 1214.41 L1919.01 1214.41 L1918.42 1214.41 L1917.83 1214.41 L1917.25 1214.41 L1916.66 1214.41 L1916.08 1214.41 L1915.49 1214.41 L1914.9 1214.41 L1914.32 1214.41 L1913.73 1214.41 L1913.14 1214.41 L1912.56 1214.41 L1911.97 1214.41 L1911.38 1214.41 L1910.8 1214.41 L1910.21 1214.41 L1909.63 1214.41 L1909.04 1214.41 L1908.45 1214.41 L1907.87 1214.41 L1907.28 1214.41 L1906.69 1214.41 L1906.11 1214.41 L1905.52 1214.41 L1904.93 1214.41 L1904.35 1214.41 L1903.76 1214.41 L1903.17 1214.41 L1902.59 1214.41 L1902 1214.41 L1901.42 1214.41 L1900.83 1214.41 L1900.24 1214.41 L1899.66 1214.41 L1899.07 1214.41 L1898.48 1214.41 L1897.9 1214.41 L1897.31 1214.41 L1896.72 1214.41 L1896.14 1214.41 L1895.55 1214.41 L1894.96 1214.41 L1894.38 1214.41 L1893.79 1214.41 L1893.21 1214.41 L1892.62 1214.41 L1892.03 1214.41 L1891.45 1214.41 L1890.86 1214.41 L1890.27 1214.41 L1889.69 1214.41 L1889.1 1214.41 L1888.51 1214.41 L1887.93 1214.41 L1887.34 1214.41 L1886.76 1214.41 L1886.17 1214.41 L1885.58 1214.41 L1885 1214.41 L1884.41 1214.41 L1883.82 1214.41 L1883.24 1214.41 L1882.65 1214.41 L1882.06 1214.41 L1881.48 1214.41 L1880.89 1214.41 L1880.3 1214.41 L1879.72 1214.41 L1879.13 1214.41 L1878.55 1214.41 L1877.96 1214.41 L1877.37 1214.41 L1876.79 1214.41 L1876.2 1214.41 L1875.61 1214.41 L1875.03 1214.41 L1874.44 1214.41 L1873.85 1214.41 L1873.27 1214.41 L1872.68 1214.41 L1872.09 1214.41 L1871.51 1214.41 L1870.92 1214.41 L1870.34 1214.41 L1869.75 1214.41 L1869.16 1214.41 L1868.58 1214.41 L1867.99 1214.41 L1867.4 1214.41 L1866.82 1214.41 L1866.23 1214.41 L1865.64 1214.41 L1865.06 1214.41 L1864.47 1214.41 L1863.88 1214.41 L1863.3 1214.41 L1862.71 1214.41 L1862.13 1214.41 L1861.54 1214.41 L1860.95 1214.41 L1860.37 1214.41 L1859.78 1214.41 L1859.19 1214.41 L1858.61 1214.41 L1858.02 1214.41 L1857.43 1214.41 L1856.85 1214.41 L1856.26 1214.41 L1855.68 1214.41 L1855.09 1214.41 L1854.5 1214.41 L1853.92 1214.41 L1853.33 1214.41 L1852.74 1214.41 L1852.16 1214.41 L1851.57 1214.41 L1850.98 1214.41 L1850.4 1214.41 L1849.81 1214.41 L1849.22 1214.41 L1848.64 1214.41 L1848.05 1214.41 L1847.47 1214.41 L1846.88 1214.41 L1846.29 1214.41 L1845.71 1214.41 L1845.12 1214.41 L1844.53 1214.41 L1843.95 1214.41 L1843.36 1214.41 L1842.77 1214.41 L1842.19 1214.41 L1841.6 1214.41 L1841.01 1214.41 L1840.43 1214.41 L1839.84 1214.41 L1839.26 1214.41 L1838.67 1214.41 L1838.08 1214.41 L1837.5 1214.41 L1836.91 1214.41 L1836.32 1214.41 L1835.74 1214.41 L1835.15 1214.41 L1834.56 1214.41 L1833.98 1214.41 L1833.39 1214.41 L1832.81 1214.41 L1832.22 1214.41 L1831.63 1214.41 L1831.05 1214.41 L1830.46 1214.41 L1829.87 1214.41 L1829.29 1214.41 L1828.7 1214.41 L1828.11 1214.41 L1827.53 1214.41 L1826.94 1214.41 L1826.35 1214.41 L1825.77 1214.41 L1825.18 1214.41 L1824.6 1214.41 L1824.01 1214.41 L1823.42 1214.41 L1822.84 1214.41 L1822.25 1214.41 L1821.66 1214.41 L1821.08 1214.41 L1820.49 1214.41 L1819.9 1214.41 L1819.32 1214.41 L1818.73 1214.41 L1818.14 1214.41 L1817.56 1214.41 L1816.97 1214.41 L1816.39 1214.41 L1815.8 1214.41 L1815.21 1214.41 L1814.63 1214.41 L1814.04 1214.41 L1813.45 1214.41 L1812.87 1214.41 L1812.28 1214.41 L1811.69 1214.41 L1811.11 1214.41 L1810.52 1214.41 L1809.94 1214.41 L1809.35 1214.41 L1808.76 1214.41 L1808.18 1214.41 L1807.59 1214.41 L1807 1214.41 L1806.42 1214.41 L1805.83 1214.41 L1805.24 1214.41 L1804.66 1214.41 L1804.07 1214.41 L1803.48 1214.41 L1802.9 1214.41 L1802.31 1214.41 L1801.73 1214.41 L1801.14 1214.41 L1800.55 1214.41 L1799.97 1214.41 L1799.38 1214.41 L1798.79 1214.41 L1798.21 1214.41 L1797.62 1214.41 L1797.03 1214.41 L1796.45 1214.41 L1795.86 1214.41 L1795.27 1214.41 L1794.69 1214.41 L1794.1 1214.41 L1793.52 1214.41 L1792.93 1214.41 L1792.34 1214.41 L1791.76 1214.41 L1791.17 1214.41 L1790.58 1214.41 L1790 1214.41 L1789.41 1214.41 L1788.82 1214.41 L1788.24 1214.41 L1787.65 1214.41 L1787.06 1214.41 L1786.48 1214.41 L1785.89 1214.41 L1785.31 1214.41 L1784.72 1214.41 L1784.13 1214.41 L1783.55 1214.41 L1782.96 1214.41 L1782.37 1214.41 L1781.79 1214.41 L1781.2 1214.41 L1780.61 1214.41 L1780.03 1214.41 L1779.44 1214.41 L1778.86 1214.41 L1778.27 1214.41 L1777.68 1214.41 L1777.1 1214.41 L1776.51 1214.41 L1775.92 1214.41 L1775.34 1214.41 L1774.75 1214.41 L1774.16 1214.41 L1773.58 1214.41 L1772.99 1214.41 L1772.4 1214.41 L1771.82 1214.41 L1771.23 1214.41 L1770.65 1214.41 L1770.06 1214.41 L1769.47 1214.41 L1768.89 1214.41 L1768.3 1214.41 L1767.71 1214.41 L1767.13 1214.41 L1766.54 1214.41 L1765.95 1214.41 L1765.37 1214.41 L1764.78 1214.41 L1764.19 1214.41 L1763.61 1214.41 L1763.02 1214.41 L1762.44 1214.41 L1761.85 1214.41 L1761.26 1214.41 L1760.68 1214.41 L1760.09 1214.41 L1759.5 1214.41 L1758.92 1214.41 L1758.33 1214.41 L1757.74 1214.41 L1757.16 1214.41 L1756.57 1214.41 L1755.99 1214.41 L1755.4 1214.41 L1754.81 1214.41 L1754.23 1214.41 L1753.64 1214.41 L1753.05 1214.41 L1752.47 1214.41 L1751.88 1214.41 L1751.29 1214.41 L1750.71 1214.41 L1750.12 1214.41 L1749.53 1214.41 L1748.95 1214.41 L1748.36 1214.41 L1747.78 1214.41 L1747.19 1214.41 L1746.6 1214.41 L1746.02 1214.41 L1745.43 1214.41 L1744.84 1214.41 L1744.26 1214.41 L1743.67 1214.41 L1743.08 1214.41 L1742.5 1214.41 L1741.91 1214.41 L1741.32 1214.41 L1740.74 1214.41 L1740.15 1214.41 L1739.57 1214.41 L1738.98 1214.41 L1738.39 1214.41 L1737.81 1214.41 L1737.22 1214.41 L1736.63 1214.41 L1736.05 1214.41 L1735.46 1214.41 L1734.87 1214.41 L1734.29 1214.41 L1733.7 1214.41 L1733.11 1214.41 L1732.53 1214.41 L1731.94 1214.41 L1731.36 1214.41 L1730.77 1214.41 L1730.18 1214.41 L1729.6 1214.41 L1729.01 1214.41 L1728.42 1214.41 L1727.84 1214.41 L1727.25 1214.41 L1726.66 1214.41 L1726.08 1214.41 L1725.49 1214.41 L1724.91 1214.41 L1724.32 1214.41 L1723.73 1214.41 L1723.15 1214.41 L1722.56 1214.41 L1721.97 1214.41 L1721.39 1214.41 L1720.8 1214.41 L1720.21 1214.41 L1719.63 1214.41 L1719.04 1214.41 L1718.45 1214.41 L1717.87 1214.41 L1717.28 1214.41 L1716.7 1214.41 L1716.11 1214.41 L1715.52 1214.41 L1714.94 1214.41 L1714.35 1214.41 L1713.76 1214.41 L1713.18 1214.41 L1712.59 1214.41 L1712 1214.41 L1711.42 1214.41 L1710.83 1214.41 L1710.24 1214.41 L1709.66 1214.41 L1709.07 1214.41 L1708.49 1214.41 L1707.9 1214.41 L1707.31 1214.41 L1706.73 1214.41 L1706.14 1214.41 L1705.55 1214.41 L1704.97 1214.41 L1704.38 1214.41 L1703.79 1214.41 L1703.21 1214.41 L1702.62 1214.41 L1702.04 1214.41 L1701.45 1214.41 L1700.86 1214.41 L1700.28 1214.41 L1699.69 1214.41 L1699.1 1214.41 L1698.52 1214.41 L1697.93 1214.41 L1697.34 1214.41 L1696.76 1214.41 L1696.17 1214.41 L1695.58 1214.41 L1695 1214.41 L1694.41 1214.41 L1693.83 1214.41 L1693.24 1214.41 L1692.65 1214.41 L1692.07 1214.41 L1691.48 1214.41 L1690.89 1214.41 L1690.31 1214.41 L1689.72 1214.41 L1689.13 1214.41 L1688.55 1214.41 L1687.96 1214.41 L1687.37 1214.41 L1686.79 1214.41 L1686.2 1214.41 L1685.62 1214.41 L1685.03 1214.41 L1684.44 1214.41 L1683.86 1214.41 L1683.27 1214.41 L1682.68 1214.41 L1682.1 1214.41 L1681.51 1214.41 L1680.92 1214.41 L1680.34 1214.41 L1679.75 1214.41 L1679.17 1214.41 L1678.58 1214.41 L1677.99 1214.41 L1677.41 1214.41 L1676.82 1214.41 L1676.23 1214.41 L1675.65 1214.41 L1675.06 1214.41 L1674.47 1214.41 L1673.89 1214.41 L1673.3 1214.41 L1672.71 1214.41 L1672.13 1214.41 L1671.54 1214.41 L1670.96 1214.41 L1670.37 1214.41 L1669.78 1214.41 L1669.2 1214.41 L1668.61 1214.41 L1668.02 1214.41 L1667.44 1214.41 L1666.85 1214.41 L1666.26 1214.41 L1665.68 1214.41 L1665.09 1214.41 L1664.5 1214.41 L1663.92 1214.41 L1663.33 1214.41 L1662.75 1214.41 L1662.16 1214.41 L1661.57 1214.41 L1660.99 1214.41 L1660.4 1214.41 L1659.81 1214.41 L1659.23 1214.41 L1658.64 1214.41 L1658.05 1214.41 L1657.47 1214.41 L1656.88 1214.41 L1656.29 1214.41 L1655.71 1214.41 L1655.12 1214.41 L1654.54 1214.41 L1653.95 1214.41 L1653.36 1214.41 L1652.78 1214.41 L1652.19 1214.41 L1651.6 1214.41 L1651.02 1214.41 L1650.43 1214.41 L1649.84 1214.41 L1649.26 1214.41 L1648.67 1214.41 L1648.09 1214.41 L1647.5 1214.41 L1646.91 1214.41 L1646.33 1214.41 L1645.74 1214.41 L1645.15 1214.41 L1644.57 1214.41 L1643.98 1214.41 L1643.39 1214.41 L1642.81 1214.41 L1642.22 1214.41 L1641.63 1214.41 L1641.05 1214.41 L1640.46 1214.41 L1639.88 1214.41 L1639.29 1214.41 L1638.7 1214.41 L1638.12 1214.41 L1637.53 1214.41 L1636.94 1214.41 L1636.36 1214.41 L1635.77 1214.41 L1635.18 1214.41 L1634.6 1214.41 L1634.01 1214.41 L1633.42 1214.41 L1632.84 1214.41 L1632.25 1214.41 L1631.67 1214.41 L1631.08 1214.41 L1630.49 1214.41 L1629.91 1214.41 L1629.32 1214.41 L1628.73 1214.41 L1628.15 1214.41 L1627.56 1214.41 L1626.97 1214.41 L1626.39 1214.41 L1625.8 1214.41 L1625.22 1214.41 L1624.63 1214.41 L1624.04 1214.41 L1623.46 1214.41 L1622.87 1214.41 L1622.28 1214.41 L1621.7 1214.41 L1621.11 1214.41 L1620.52 1214.41 L1619.94 1214.41 L1619.35 1214.41 L1618.76 1214.41 L1618.18 1214.41 L1617.59 1214.41 L1617.01 1214.41 L1616.42 1214.41 L1615.83 1214.41 L1615.25 1214.41 L1614.66 1214.41 L1614.07 1214.41 L1613.49 1214.41 L1612.9 1214.41 L1612.31 1214.41 L1611.73 1214.41 L1611.14 1214.41 L1610.55 1214.41 L1609.97 1214.41 L1609.38 1214.41 L1608.8 1214.41 L1608.21 1214.41 L1607.62 1214.41 L1607.04 1214.41 L1606.45 1214.41 L1605.86 1214.41 L1605.28 1214.41 L1604.69 1214.41 L1604.1 1214.41 L1603.52 1214.41 L1602.93 1214.41 L1602.34 1214.41 L1601.76 1214.41 L1601.17 1214.41 L1600.59 1214.41 L1600 1214.41 L1599.41 1214.41 L1598.83 1214.41 L1598.24 1214.41 L1597.65 1214.41 L1597.07 1214.41 L1596.48 1214.41 L1595.89 1214.41 L1595.31 1214.41 L1594.72 1214.41 L1594.14 1214.41 L1593.55 1214.41 L1592.96 1214.41 L1592.38 1214.41 L1591.79 1214.41 L1591.2 1214.41 L1590.62 1214.41 L1590.03 1214.41 L1589.44 1214.41 L1588.86 1214.41 L1588.27 1214.41 L1587.68 1214.41 L1587.1 1214.41 L1586.51 1214.41 L1585.93 1214.41 L1585.34 1214.41 L1584.75 1214.41 L1584.17 1214.41 L1583.58 1214.41 L1582.99 1214.41 L1582.41 1214.41 L1581.82 1214.41 L1581.23 1214.41 L1580.65 1214.41 L1580.06 1214.41 L1579.47 1214.41 L1578.89 1214.41 L1578.3 1214.41 L1577.72 1214.41 L1577.13 1214.41 L1576.54 1214.41 L1575.96 1214.41 L1575.37 1214.41 L1574.78 1214.41 L1574.2 1214.41 L1573.61 1214.41 L1573.02 1214.41 L1572.44 1214.41 L1571.85 1214.41 L1571.27 1214.41 L1570.68 1214.41 L1570.09 1214.41 L1569.51 1214.41 L1568.92 1214.41 L1568.33 1214.41 L1567.75 1214.41 L1567.16 1214.41 L1566.57 1214.41 L1565.99 1214.41 L1565.4 1214.41 L1564.81 1214.41 L1564.23 1214.41 L1563.64 1214.41 L1563.06 1214.41 L1562.47 1214.41 L1561.88 1214.41 L1561.3 1214.41 L1560.71 1214.41 L1560.12 1214.41 L1559.54 1214.41 L1558.95 1214.41 L1558.36 1214.41 L1557.78 1214.41 L1557.19 1214.41 L1556.6 1214.41 L1556.02 1214.41 L1555.43 1214.41 L1554.85 1214.41 L1554.26 1214.41 L1553.67 1214.41 L1553.09 1214.41 L1552.5 1214.41 L1551.91 1214.41 L1551.33 1214.41 L1550.74 1214.41 L1550.15 1214.41 L1549.57 1214.41 L1548.98 1214.41 L1548.4 1214.41 L1547.81 1214.41 L1547.22 1214.41 L1546.64 1214.41 L1546.05 1214.41 L1545.46 1214.41 L1544.88 1214.41 L1544.29 1214.41 L1543.7 1214.41 L1543.12 1214.41 L1542.53 1214.41 L1541.94 1214.41 L1541.36 1214.41 L1540.77 1214.41 L1540.19 1214.41 L1539.6 1214.41 L1539.01 1214.41 L1538.43 1214.41 L1537.84 1214.41 L1537.25 1214.41 L1536.67 1214.41 L1536.08 1214.41 L1535.49 1214.41 L1534.91 1214.41 L1534.32 1214.41 L1533.73 1214.41 L1533.15 1214.41 L1532.56 1214.41 L1531.98 1214.41 L1531.39 1214.41 L1530.8 1214.41 L1530.22 1214.41 L1529.63 1214.41 L1529.04 1214.41 L1528.46 1214.41 L1527.87 1214.41 L1527.28 1214.41 L1526.7 1214.41 L1526.11 1214.41 L1525.52 1214.41 L1524.94 1214.41 L1524.35 1214.41 L1523.77 1214.41 L1523.18 1214.41 L1522.59 1214.41 L1522.01 1214.41 L1521.42 1214.41 L1520.83 1214.41 L1520.25 1214.41 L1519.66 1214.41 L1519.07 1214.41 L1518.49 1214.41 L1517.9 1214.41 L1517.32 1214.41 L1516.73 1214.41 L1516.14 1214.41 L1515.56 1214.41 L1514.97 1214.41 L1514.38 1214.41 L1513.8 1214.41 L1513.21 1214.41 L1512.62 1214.41 L1512.04 1214.41 L1511.45 1214.41 L1510.86 1214.41 L1510.28 1214.41 L1509.69 1214.41 L1509.11 1214.41 L1508.52 1214.41 L1507.93 1214.41 L1507.35 1214.41 L1506.76 1214.41 L1506.17 1214.41 L1505.59 1214.41 L1505 1214.41 L1504.41 1214.41 L1503.83 1214.41 L1503.24 1214.41 L1502.65 1214.41 L1502.07 1214.41 L1501.48 1214.41 L1500.9 1214.41 L1500.31 1214.41 L1499.72 1214.41 L1499.14 1214.41 L1498.55 1214.41 L1497.96 1214.41 L1497.38 1214.41 L1496.79 1214.41 L1496.2 1214.41 L1495.62 1214.41 L1495.03 1214.41 L1494.45 1214.41 L1493.86 1214.41 L1493.27 1214.41 L1492.69 1214.41 L1492.1 1214.41 L1491.51 1214.41 L1490.93 1214.41 L1490.34 1214.41 L1489.75 1214.41 L1489.17 1214.41 L1488.58 1214.41 L1487.99 1214.41 L1487.41 1214.41 L1486.82 1214.41 L1486.24 1214.41 L1485.65 1214.41 L1485.06 1214.41 L1484.48 1214.41 L1483.89 1214.41 L1483.3 1214.41 L1482.72 1214.41 L1482.13 1214.41 L1481.54 1214.41 L1480.96 1214.41 L1480.37 1214.41 L1479.78 1214.41 L1479.2 1214.41 L1478.61 1214.41 L1478.03 1214.41 L1477.44 1214.41 L1476.85 1214.41 L1476.27 1214.41 L1475.68 1214.41 L1475.09 1214.41 L1474.51 1214.41 L1473.92 1214.41 L1473.33 1214.41 L1472.75 1214.41 L1472.16 1214.41 L1471.57 1214.41 L1470.99 1214.41 L1470.4 1214.41 L1469.82 1214.41 L1469.23 1214.41 L1468.64 1214.41 L1468.06 1214.41 L1467.47 1214.41 L1466.88 1214.41 L1466.3 1214.41 L1465.71 1214.41 L1465.12 1214.41 L1464.54 1214.41 L1463.95 1214.41 L1463.37 1214.41 L1462.78 1214.41 L1462.19 1214.41 L1461.61 1214.41 L1461.02 1214.41 L1460.43 1214.41 L1459.85 1214.41 L1459.26 1214.41 L1458.67 1214.41 L1458.09 1214.41 L1457.5 1214.41 L1456.91 1214.41 L1456.33 1214.41 L1455.74 1214.41 L1455.16 1214.41 L1454.57 1214.41 L1453.98 1214.41 L1453.4 1214.41 L1452.81 1214.41 L1452.22 1214.41 L1451.64 1214.41 L1451.05 1214.41 L1450.46 1214.41 L1449.88 1214.41 L1449.29 1214.41 L1448.7 1214.41 L1448.12 1214.41 L1447.53 1214.41 L1446.95 1214.41 L1446.36 1214.41 L1445.77 1214.41 L1445.19 1214.41 L1444.6 1214.41 L1444.01 1214.41 L1443.43 1214.41 L1442.84 1214.41 L1442.25 1214.41 L1441.67 1214.41 L1441.08 1214.41 L1440.5 1214.41 L1439.91 1214.41 L1439.32 1214.41 L1438.74 1214.41 L1438.15 1214.41 L1437.56 1214.41 L1436.98 1214.41 L1436.39 1214.41 L1435.8 1214.41 L1435.22 1214.41 L1434.63 1214.41 L1434.04 1214.41 L1433.46 1214.41 L1432.87 1214.41 L1432.29 1214.41 L1431.7 1214.41 L1431.11 1214.41 L1430.53 1214.41 L1429.94 1214.41 L1429.35 1214.41 L1428.77 1214.41 L1428.18 1214.41 L1427.59 1214.41 L1427.01 1214.41 L1426.42 1214.41 L1425.83 1214.41 L1425.25 1214.41 L1424.66 1214.41 L1424.08 1214.41 L1423.49 1214.41 L1422.9 1214.41 L1422.32 1214.41 L1421.73 1214.41 L1421.14 1214.41 L1420.56 1214.41 L1419.97 1214.41 L1419.38 1214.41 L1418.8 1214.41 L1418.21 1214.41 L1417.63 1214.41 L1417.04 1214.41 L1416.45 1214.41 L1415.87 1214.41 L1415.28 1214.41 L1414.69 1214.41 L1414.11 1214.41 L1413.52 1214.41 L1412.93 1214.41 L1412.35 1214.41 L1411.76 1214.41 L1411.17 1214.41 L1410.59 1214.41 L1410 1214.41 L1409.42 1214.41 L1408.83 1214.41 L1408.24 1214.41 L1407.66 1214.41 L1407.07 1214.41 L1406.48 1214.41 L1405.9 1214.41 L1405.31 1214.41 L1404.72 1214.41 L1404.14 1214.41 L1403.55 1214.41 L1402.96 1214.41 L1402.38 1214.41 L1401.79 1214.41 L1401.21 1214.41 L1400.62 1214.41 L1400.03 1214.41 L1399.45 1214.41 L1398.86 1214.41 L1398.27 1214.41 L1397.69 1214.41 L1397.1 1214.41 L1396.51 1214.41 L1395.93 1214.41 L1395.34 1214.41 L1394.75 1214.41 L1394.17 1214.41 L1393.58 1214.41 L1393 1214.41 L1392.41 1214.41 L1391.82 1214.41 L1391.24 1214.41 L1390.65 1214.41 L1390.06 1214.41 L1389.48 1214.41 L1388.89 1214.41 L1388.3 1214.41 L1387.72 1214.41 L1387.13 1214.41 L1386.55 1214.41 L1385.96 1214.41 L1385.37 1214.41 L1384.79 1214.41 L1384.2 1214.41 L1383.61 1214.41 L1383.03 1214.41 L1382.44 1214.41 L1381.85 1214.41 L1381.27 1214.41 L1380.68 1214.41 L1380.09 1214.41 L1379.51 1214.41 L1378.92 1214.41 L1378.34 1214.41 L1377.75 1214.41 L1377.16 1214.41 L1376.58 1214.41 L1375.99 1214.41 L1375.4 1214.41 L1374.82 1214.41 L1374.23 1214.41 L1373.64 1214.41 L1373.06 1214.41 L1372.47 1214.41 L1371.88 1214.41 L1371.3 1214.41 L1370.71 1214.41 L1370.13 1214.41 L1369.54 1214.41 L1368.95 1214.41 L1368.37 1214.41 L1367.78 1214.41 L1367.19 1214.41 L1366.61 1214.41 L1366.02 1214.41 L1365.43 1214.41 L1364.85 1214.41 L1364.26 1214.41 L1363.68 1214.41 L1363.09 1214.41 L1362.5 1214.41 L1361.92 1214.41 L1361.33 1214.41 L1360.74 1214.41 L1360.16 1214.41 L1359.57 1214.41 L1358.98 1214.41 L1358.4 1214.41 L1357.81 1214.41 L1357.22 1214.41 L1356.64 1214.41 L1356.05 1214.41 L1355.47 1214.41 L1354.88 1214.41 L1354.29 1214.41 L1353.71 1214.41 L1353.12 1214.41 L1352.53 1214.41 L1351.95 1214.41 L1351.36 1214.41 L1350.77 1214.41 L1350.19 1214.41 L1349.6 1214.41 L1349.01 1214.41 L1348.43 1214.41 L1347.84 1214.41 L1347.26 1214.41 L1346.67 1214.41 L1346.08 1214.41 L1345.5 1214.41 L1344.91 1214.41 L1344.32 1214.41 L1343.74 1214.41 L1343.15 1214.41 L1342.56 1214.41 L1341.98 1214.41 L1341.39 1214.41 L1340.8 1214.41 L1340.22 1214.41 L1339.63 1214.41 L1339.05 1214.41 L1338.46 1214.41 L1337.87 1214.41 L1337.29 1214.41 L1336.7 1214.41 L1336.11 1214.41 L1335.53 1214.41 L1334.94 1214.41 L1334.35 1214.41 L1333.77 1214.41 L1333.18 1214.41 L1332.6 1214.41 L1332.01 1214.41 L1331.42 1214.41 L1330.84 1214.41 L1330.25 1214.41 L1329.66 1214.41 L1329.08 1214.41 L1328.49 1214.41 L1327.9 1214.41 L1327.32 1214.41 L1326.73 1214.41 L1326.14 1214.41 L1325.56 1214.41 L1324.97 1214.41 L1324.39 1214.41 L1323.8 1214.41 L1323.21 1214.41 L1322.63 1214.41 L1322.04 1214.41 L1321.45 1214.41 L1320.87 1214.41 L1320.28 1214.41 L1319.69 1214.41 L1319.11 1214.41 L1318.52 1214.41 L1317.93 1214.41 L1317.35 1214.41 L1316.76 1214.41 L1316.18 1214.41 L1315.59 1214.41 L1315 1214.41 L1314.42 1214.41 L1313.83 1214.41 L1313.24 1214.41 L1312.66 1214.41 L1312.07 1214.41 L1311.48 1214.41 L1310.9 1214.41 L1310.31 1214.41 L1309.73 1214.41 L1309.14 1214.41 L1308.55 1214.41 L1307.97 1214.41 L1307.38 1214.41 L1306.79 1214.41 L1306.21 1214.41 L1305.62 1214.41 L1305.03 1214.41 L1304.45 1214.41 L1303.86 1214.41 L1303.27 1214.41 L1302.69 1214.41 L1302.1 1214.41 L1301.52 1214.41 L1300.93 1214.41 L1300.34 1214.41 L1299.76 1214.41 L1299.17 1214.41 L1298.58 1214.41 L1298 1214.41 L1297.41 1214.41 L1296.82 1214.41 L1296.24 1214.41 L1295.65 1214.41 L1295.06 1214.41 L1294.48 1214.41 L1293.89 1214.41 L1293.31 1214.41 L1292.72 1214.41 L1292.13 1214.41 L1291.55 1214.41 L1290.96 1214.41 L1290.37 1214.41 L1289.79 1214.41 L1289.2 1214.41 L1288.61 1214.41 L1288.03 1214.41 L1287.44 1214.41 L1286.86 1214.41 L1286.27 1214.41 L1285.68 1214.41 L1285.1 1214.41 L1284.51 1214.41 L1283.92 1214.41 L1283.34 1214.41 L1282.75 1214.41 L1282.16 1214.41 L1281.58 1214.41 L1280.99 1214.41 L1280.4 1214.41 L1279.82 1214.41 L1279.23 1214.41 L1278.65 1214.41 L1278.06 1214.41 L1277.47 1214.41 L1276.89 1214.41 L1276.3 1214.41 L1275.71 1214.41 L1275.13 1214.41 L1274.54 1214.41 L1273.95 1214.41 L1273.37 1214.41 L1272.78 1214.41 L1272.19 1214.41 L1271.61 1214.41 L1271.02 1214.41 L1270.44 1214.41 L1269.85 1214.41 L1269.26 1214.41 L1268.68 1214.41 L1268.09 1214.41 L1267.5 1214.41 L1266.92 1214.41 L1266.33 1214.41 L1265.74 1214.41 L1265.16 1214.41 L1264.57 1214.41 L1263.98 1214.41 L1263.4 1214.41 L1262.81 1214.41 L1262.23 1214.41 L1261.64 1214.41 L1261.05 1214.41 L1260.47 1214.41 L1259.88 1214.41 L1259.29 1214.41 L1258.71 1214.41 L1258.12 1214.41 L1257.53 1214.41 L1256.95 1214.41 L1256.36 1214.41 L1255.78 1214.41 L1255.19 1214.41 L1254.6 1214.41 L1254.02 1214.41 L1253.43 1214.41 L1252.84 1214.41 L1252.26 1214.41 L1251.67 1214.41 L1251.08 1214.41 L1250.5 1214.41 L1249.91 1214.41 L1249.32 1214.41 L1248.74 1214.41 L1248.15 1214.41 L1247.57 1214.41 L1246.98 1214.41 L1246.39 1214.41 L1245.81 1214.41 L1245.22 1214.41 L1244.63 1214.41 L1244.05 1214.41 L1243.46 1214.41 L1242.87 1214.41 L1242.29 1214.41 L1241.7 1214.41 L1241.11 1214.41 L1240.53 1214.41 L1239.94 1214.41 L1239.36 1214.41 L1238.77 1214.41 L1238.18 1214.41 L1237.6 1214.41 L1237.01 1214.41 L1236.42 1214.41 L1235.84 1214.41 L1235.25 1214.41 L1234.66 1214.41 L1234.08 1214.41 L1233.49 1214.41 L1232.91 1214.41 L1232.32 1214.41 L1231.73 1214.41 L1231.15 1214.41 L1230.56 1214.41 L1229.97 1214.41 L1229.39 1214.41 L1228.8 1214.41 L1228.21 1214.41 L1227.63 1214.41 L1227.04 1214.41 L1226.45 1214.41 L1225.87 1214.41 L1225.28 1214.41 L1224.7 1214.41 L1224.11 1214.41 L1223.52 1214.41 L1222.94 1214.41 L1222.35 1214.41 L1221.76 1214.41 L1221.18 1214.41 L1220.59 1214.41 L1220 1214.41 L1219.42 1214.41 L1218.83 1214.41 L1218.24 1214.41 L1217.66 1214.41 L1217.07 1214.41 L1216.49 1214.41 L1215.9 1214.41 L1215.31 1214.41 L1214.73 1214.41 L1214.14 1214.41 L1213.55 1214.41 L1212.97 1214.41 L1212.38 1214.41 L1211.79 1214.41 L1211.21 1214.41 L1210.62 1214.41 L1210.03 1214.41 L1209.45 1214.41 L1208.86 1214.41 L1208.28 1214.41 L1207.69 1214.41 L1207.1 1214.41 L1206.52 1214.41 L1205.93 1214.41 L1205.34 1214.41 L1204.76 1214.41 L1204.17 1214.41 L1203.58 1214.41 L1203 1214.41 L1202.41 1214.41 L1201.83 1214.41 L1201.24 1214.41 L1200.65 1214.41 L1200.07 1214.41 L1199.48 1214.41 L1198.89 1214.41 L1198.31 1214.41 L1197.72 1214.41 L1197.13 1214.41 L1196.55 1214.41 L1195.96 1214.41 L1195.37 1214.41 L1194.79 1214.41 L1194.2 1214.41 L1193.62 1214.41 L1193.03 1214.41 L1192.44 1214.41 L1191.86 1214.41 L1191.27 1214.41 L1190.68 1214.41 L1190.1 1214.41 L1189.51 1214.41 L1188.92 1214.41 L1188.34 1214.41 L1187.75 1214.41 L1187.16 1214.41 L1186.58 1214.41 L1185.99 1214.41 L1185.41 1214.41 L1184.82 1214.41 L1184.23 1214.41 L1183.65 1214.41 L1183.06 1214.41 L1182.47 1214.41 L1181.89 1214.41 L1181.3 1214.41 L1180.71 1214.41 L1180.13 1214.41 L1179.54 1214.41 L1178.96 1214.41 L1178.37 1214.41 L1177.78 1214.41 L1177.2 1214.41 L1176.61 1214.41 L1176.02 1214.41 L1175.44 1214.41 L1174.85 1214.41 L1174.26 1214.41 L1173.68 1214.41 L1173.09 1214.41 L1172.5 1214.41 L1171.92 1214.41 L1171.33 1214.41 L1170.75 1214.41 L1170.16 1214.41 L1169.57 1214.41 L1168.99 1214.41 L1168.4 1214.41 L1167.81 1214.41 L1167.23 1214.41 L1166.64 1214.41 L1166.05 1214.41 L1165.47 1214.41 L1164.88 1214.41 L1164.29 1214.41 L1163.71 1214.41 L1163.12 1214.41 L1162.54 1214.41 L1161.95 1214.41 L1161.36 1214.41 L1160.78 1214.41 L1160.19 1214.41 L1159.6 1214.41 L1159.02 1214.41 L1158.43 1214.41 L1157.84 1214.41 L1157.26 1214.41 L1156.67 1214.41 L1156.09 1214.41 L1155.5 1214.41 L1154.91 1214.41 L1154.33 1214.41 L1153.74 1214.41 L1153.15 1214.41 L1152.57 1214.41 L1151.98 1214.41 L1151.39 1214.41 L1150.81 1214.41 L1150.22 1214.41 L1149.63 1214.41 L1149.05 1214.41 L1148.46 1214.41 L1147.88 1214.41 L1147.29 1214.41 L1146.7 1214.41 L1146.12 1214.41 L1145.53 1214.41 L1144.94 1214.41 L1144.36 1214.41 L1143.77 1214.41 L1143.18 1214.41 L1142.6 1214.41 L1142.01 1214.41 L1141.42 1214.41 L1140.84 1214.41 L1140.25 1214.41 L1139.67 1214.41 L1139.08 1214.41 L1138.49 1214.41 L1137.91 1214.41 L1137.32 1214.41 L1136.73 1214.41 L1136.15 1214.41 L1135.56 1214.41 L1134.97 1214.41 L1134.39 1214.41 L1133.8 1214.41 L1133.21 1214.41 L1132.63 1214.41 L1132.04 1214.41 L1131.46 1214.41 L1130.87 1214.41 L1130.28 1214.41 L1129.7 1214.41 L1129.11 1214.41 L1128.52 1214.41 L1127.94 1214.41 L1127.35 1214.41 L1126.76 1214.41 L1126.18 1214.41 L1125.59 1214.41 L1125.01 1214.41 L1124.42 1214.41 L1123.83 1214.41 L1123.25 1214.41 L1122.66 1214.41 L1122.07 1214.41 L1121.49 1214.41 L1120.9 1214.41 L1120.31 1214.41 L1119.73 1214.41 L1119.14 1214.41 L1118.55 1214.41 L1117.97 1214.41 L1117.38 1214.41 L1116.8 1214.41 L1116.21 1214.41 L1115.62 1214.41 L1115.04 1214.41 L1114.45 1214.41 L1113.86 1214.41 L1113.28 1214.41 L1112.69 1214.41 L1112.1 1214.41 L1111.52 1214.41 L1110.93 1214.41 L1110.34 1214.41 L1109.76 1214.41 L1109.17 1214.41 L1108.59 1214.41 L1108 1214.41 L1107.41 1214.41 L1106.83 1214.41 L1106.24 1214.41 L1105.65 1214.41 L1105.07 1214.41 L1104.48 1214.41 L1103.89 1214.41 L1103.31 1214.41 L1102.72 1214.41 L1102.14 1214.41 L1101.55 1214.41 L1100.96 1214.41 L1100.38 1214.41 L1099.79 1214.41 L1099.2 1214.41 L1098.62 1214.41 L1098.03 1214.41 L1097.44 1214.41 L1096.86 1214.41 L1096.27 1214.41 L1095.68 1214.41 L1095.1 1214.41 L1094.51 1214.41 L1093.93 1214.41 L1093.34 1214.41 L1092.75 1214.41 L1092.17 1214.41 L1091.58 1214.41 L1090.99 1214.41 L1090.41 1214.41 L1089.82 1214.41 L1089.23 1214.41 L1088.65 1214.41 L1088.06 1214.41 L1087.47 1214.41 L1086.89 1214.41 L1086.3 1214.41 L1085.72 1214.41 L1085.13 1214.41 L1084.54 1214.41 L1083.96 1214.41 L1083.37 1214.41 L1082.78 1214.41 L1082.2 1214.41 L1081.61 1214.41 L1081.02 1214.41 L1080.44 1214.41 L1079.85 1214.41 L1079.26 1214.41 L1078.68 1214.41 L1078.09 1214.41 L1077.51 1214.41 L1076.92 1214.41 L1076.33 1214.41 L1075.75 1214.41 L1075.16 1214.41 L1074.57 1214.41 L1073.99 1214.41 L1073.4 1214.41 L1072.81 1214.41 L1072.23 1214.41 L1071.64 1214.41 L1071.06 1214.41 L1070.47 1214.41 L1069.88 1214.41 L1069.3 1214.41 L1068.71 1214.41 L1068.12 1214.41 L1067.54 1214.41 L1066.95 1214.41 L1066.36 1214.41 L1065.78 1214.41 L1065.19 1214.41 L1064.6 1214.41 L1064.02 1214.41 L1063.43 1214.41 L1062.85 1214.41 L1062.26 1214.41 L1061.67 1214.41 L1061.09 1214.41 L1060.5 1214.41 L1059.91 1214.41 L1059.33 1214.41 L1058.74 1214.41 L1058.15 1214.41 L1057.57 1214.41 L1056.98 1214.41 L1056.39 1214.41 L1055.81 1214.41 L1055.22 1214.41 L1054.64 1214.41 L1054.05 1214.41 L1053.46 1214.41 L1052.88 1214.41 L1052.29 1214.41 L1051.7 1214.41 L1051.12 1214.41 L1050.53 1214.41 L1049.94 1214.41 L1049.36 1214.41 L1048.77 1214.41 L1048.19 1214.41 L1047.6 1214.41 L1047.01 1214.41 L1046.43 1214.41 L1045.84 1214.41 L1045.25 1214.41 L1044.67 1214.41 L1044.08 1214.41 L1043.49 1214.41 L1042.91 1214.41 L1042.32 1214.41 L1041.73 1214.41 L1041.15 1214.41 L1040.56 1214.41 L1039.98 1214.41 L1039.39 1214.41 L1038.8 1214.41 L1038.22 1214.41 L1037.63 1214.41 L1037.04 1214.41 L1036.46 1214.41 L1035.87 1214.41 L1035.28 1214.41 L1034.7 1214.41 L1034.11 1214.41 L1033.52 1214.41 L1032.94 1214.41 L1032.35 1214.41 L1031.77 1214.41 L1031.18 1214.41 L1030.59 1214.41 L1030.01 1214.41 L1029.42 1214.41 L1028.83 1214.41 L1028.25 1214.41 L1027.66 1214.41 L1027.07 1214.41 L1026.49 1214.41 L1025.9 1214.41 L1025.32 1214.41 L1024.73 1214.41 L1024.14 1214.41 L1023.56 1214.41 L1022.97 1214.41 L1022.38 1214.41 L1021.8 1214.41 L1021.21 1214.41 L1020.62 1214.41 L1020.04 1214.41 L1019.45 1214.41 L1018.86 1214.41 L1018.28 1214.41 L1017.69 1214.41 L1017.11 1214.41 L1016.52 1214.41 L1015.93 1214.41 L1015.35 1214.41 L1014.76 1214.41 L1014.17 1214.41 L1013.59 1214.41 L1013 1214.41 L1012.41 1214.41 L1011.83 1214.41 L1011.24 1214.41 L1010.65 1214.41 L1010.07 1214.41 L1009.48 1214.41 L1008.9 1214.41 L1008.31 1214.41 L1007.72 1214.41 L1007.14 1214.41 L1006.55 1214.41 L1005.96 1214.41 L1005.38 1214.41 L1004.79 1214.41 L1004.2 1214.41 L1003.62 1214.41 L1003.03 1214.41 L1002.44 1214.41 L1001.86 1214.41 L1001.27 1214.41 L1000.69 1214.41 L1000.1 1214.41 L999.513 1214.41 L998.926 1214.41 L998.34 1214.41 L997.754 1214.41 L997.167 1214.41 L996.581 1214.41 L995.994 1214.41 L995.408 1214.41 L994.822 1214.41 L994.235 1214.41 L993.649 1214.41 L993.062 1214.41 L992.476 1214.41 L991.889 1214.41 L991.303 1214.41 L990.717 1214.41 L990.13 1214.41 L989.544 1214.41 L988.957 1214.41 L988.371 1214.41 L987.785 1214.41 L987.198 1214.41 L986.612 1214.41 L986.025 1214.41  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.76 986.612,1214.76 987.198,1214.76 987.785,1214.76 988.371,1214.76 988.957,1214.76 989.544,1214.76 990.13,1214.76 990.717,1214.76 991.303,1214.76 991.889,1214.76 992.476,1214.76 993.062,1214.76 993.649,1214.76 994.235,1214.76 994.822,1214.76 995.408,1214.76 995.994,1214.76 996.581,1214.76 997.167,1214.76 997.754,1214.76 998.34,1214.76 998.926,1214.76 999.513,1214.76 1000.1,1214.76 1000.69,1214.76 1001.27,1214.76 1001.86,1214.76 1002.44,1214.76 1003.03,1214.76 1003.62,1214.76 1004.2,1214.76 1004.79,1214.76 1005.38,1214.76 1005.96,1214.76 1006.55,1214.76 1007.14,1214.76 1007.72,1214.76 1008.31,1214.76 1008.9,1214.76 1009.48,1214.76 1010.07,1214.76 1010.65,1214.76 1011.24,1214.76 1011.83,1214.76 1012.41,1214.76 1013,1214.76 1013.59,1214.76 1014.17,1214.76 1014.76,1214.76 1015.35,1214.76 1015.93,1214.76 1016.52,1214.76 1017.11,1214.76 1017.69,1214.76 1018.28,1214.76 1018.86,1214.76 1019.45,1214.76 1020.04,1214.76 1020.62,1214.76 1021.21,1214.76 1021.8,1214.76 1022.38,1214.76 1022.97,1214.76 1023.56,1214.76 1024.14,1214.76 1024.73,1214.76 1025.32,1214.76 1025.9,1214.76 1026.49,1214.76 1027.07,1214.76 1027.66,1214.76 1028.25,1214.76 1028.83,1214.76 1029.42,1214.76 1030.01,1214.76 1030.59,1214.76 1031.18,1214.76 1031.77,1214.76 1032.35,1214.76 1032.94,1214.76 1033.52,1214.76 1034.11,1214.76 1034.7,1214.76 1035.28,1214.76 1035.87,1214.76 1036.46,1214.76 1037.04,1214.76 1037.63,1214.76 1038.22,1214.76 1038.8,1214.76 1039.39,1214.76 1039.98,1214.76 1040.56,1214.76 1041.15,1214.76 1041.73,1214.76 1042.32,1214.76 1042.91,1214.76 1043.49,1214.76 1044.08,1214.76 1044.67,1214.76 1045.25,1214.76 1045.84,1214.76 1046.43,1214.76 1047.01,1214.76 1047.6,1214.76 1048.19,1214.76 1048.77,1214.76 1049.36,1214.76 1049.94,1214.76 1050.53,1214.76 1051.12,1214.76 1051.7,1214.76 1052.29,1214.76 1052.88,1214.76 1053.46,1214.76 1054.05,1214.76 1054.64,1214.76 1055.22,1214.76 1055.81,1214.76 1056.39,1214.76 1056.98,1214.76 1057.57,1214.76 1058.15,1214.76 1058.74,1214.76 1059.33,1214.76 1059.91,1214.76 1060.5,1214.76 1061.09,1214.76 1061.67,1214.76 1062.26,1214.76 1062.85,1214.76 1063.43,1214.76 1064.02,1214.76 1064.6,1214.76 1065.19,1214.76 1065.78,1214.76 1066.36,1214.76 1066.95,1214.76 1067.54,1214.76 1068.12,1214.76 1068.71,1214.76 1069.3,1214.76 1069.88,1214.76 1070.47,1214.76 1071.06,1214.76 1071.64,1214.76 1072.23,1214.76 1072.81,1214.76 1073.4,1214.76 1073.99,1214.76 1074.57,1214.76 1075.16,1214.76 1075.75,1214.76 1076.33,1214.76 1076.92,1214.76 1077.51,1214.76 1078.09,1214.76 1078.68,1214.76 1079.26,1214.76 1079.85,1214.76 1080.44,1214.76 1081.02,1214.76 1081.61,1214.76 1082.2,1214.76 1082.78,1214.76 1083.37,1214.76 1083.96,1214.76 1084.54,1214.76 1085.13,1214.76 1085.72,1214.76 1086.3,1214.76 1086.89,1214.76 1087.47,1214.76 1088.06,1214.76 1088.65,1214.76 1089.23,1214.76 1089.82,1214.76 1090.41,1214.76 1090.99,1214.76 1091.58,1214.76 1092.17,1214.76 1092.75,1214.76 1093.34,1214.76 1093.93,1214.76 1094.51,1214.76 1095.1,1214.76 1095.68,1214.76 1096.27,1214.76 1096.86,1214.76 1097.44,1214.76 1098.03,1214.76 1098.62,1214.76 1099.2,1214.76 1099.79,1214.76 1100.38,1214.76 1100.96,1214.76 1101.55,1214.76 1102.14,1214.76 1102.72,1214.76 1103.31,1214.76 1103.89,1214.76 1104.48,1214.76 1105.07,1214.76 1105.65,1214.76 1106.24,1214.76 1106.83,1214.76 1107.41,1214.76 1108,1214.76 1108.59,1214.76 1109.17,1214.76 1109.76,1214.76 1110.34,1214.76 1110.93,1214.76 1111.52,1214.76 1112.1,1214.76 1112.69,1214.76 1113.28,1214.76 1113.86,1214.76 1114.45,1214.76 1115.04,1214.76 1115.62,1214.76 1116.21,1214.76 1116.8,1214.76 1117.38,1214.76 1117.97,1214.76 1118.55,1214.76 1119.14,1214.76 1119.73,1214.76 1120.31,1214.76 1120.9,1214.76 1121.49,1214.76 1122.07,1214.76 1122.66,1214.76 1123.25,1214.76 1123.83,1214.76 1124.42,1214.76 1125.01,1214.76 1125.59,1214.76 1126.18,1214.76 1126.76,1214.76 1127.35,1214.76 1127.94,1214.76 1128.52,1214.76 1129.11,1214.76 1129.7,1214.76 1130.28,1214.76 1130.87,1214.76 1131.46,1214.76 1132.04,1214.76 1132.63,1214.76 1133.21,1214.76 1133.8,1214.76 1134.39,1214.76 1134.97,1214.76 1135.56,1214.76 1136.15,1214.76 1136.73,1214.76 1137.32,1214.76 1137.91,1214.76 1138.49,1214.76 1139.08,1214.76 1139.67,1214.76 1140.25,1214.76 1140.84,1214.76 1141.42,1214.76 1142.01,1214.76 1142.6,1214.76 1143.18,1214.76 1143.77,1214.76 1144.36,1214.76 1144.94,1214.76 1145.53,1214.76 1146.12,1214.76 1146.7,1214.76 1147.29,1214.76 1147.88,1214.76 1148.46,1214.76 1149.05,1214.76 1149.63,1214.76 1150.22,1214.76 1150.81,1214.76 1151.39,1214.76 1151.98,1214.76 1152.57,1214.76 1153.15,1214.76 1153.74,1214.76 1154.33,1214.76 1154.91,1214.76 1155.5,1214.76 1156.09,1214.76 1156.67,1214.76 1157.26,1214.76 1157.84,1214.76 1158.43,1214.76 1159.02,1214.76 1159.6,1214.76 1160.19,1214.76 1160.78,1214.76 1161.36,1214.76 1161.95,1214.76 1162.54,1214.76 1163.12,1214.76 1163.71,1214.76 1164.29,1214.76 1164.88,1214.76 1165.47,1214.76 1166.05,1214.76 1166.64,1214.76 1167.23,1214.76 1167.81,1214.76 1168.4,1214.76 1168.99,1214.76 1169.57,1214.76 1170.16,1214.76 1170.75,1214.76 1171.33,1214.76 1171.92,1214.76 1172.5,1214.76 1173.09,1214.76 1173.68,1214.76 1174.26,1214.76 1174.85,1214.76 1175.44,1214.76 1176.02,1214.76 1176.61,1214.76 1177.2,1214.76 1177.78,1214.76 1178.37,1214.76 1178.96,1214.76 1179.54,1214.76 1180.13,1214.76 1180.71,1214.76 1181.3,1214.76 1181.89,1214.76 1182.47,1214.76 1183.06,1214.76 1183.65,1214.76 1184.23,1214.76 1184.82,1214.76 1185.41,1214.76 1185.99,1214.76 1186.58,1214.76 1187.16,1214.76 1187.75,1214.76 1188.34,1214.76 1188.92,1214.76 1189.51,1214.76 1190.1,1214.76 1190.68,1214.76 1191.27,1214.76 1191.86,1214.76 1192.44,1214.76 1193.03,1214.76 1193.62,1214.76 1194.2,1214.76 1194.79,1214.76 1195.37,1214.76 1195.96,1214.76 1196.55,1214.76 1197.13,1214.76 1197.72,1214.76 1198.31,1214.76 1198.89,1214.76 1199.48,1214.76 1200.07,1214.76 1200.65,1214.76 1201.24,1214.76 1201.83,1214.76 1202.41,1214.76 1203,1214.76 1203.58,1214.76 1204.17,1214.76 1204.76,1214.76 1205.34,1214.76 1205.93,1214.76 1206.52,1214.76 1207.1,1214.76 1207.69,1214.76 1208.28,1214.76 1208.86,1214.76 1209.45,1214.76 1210.03,1214.76 1210.62,1214.76 1211.21,1214.76 1211.79,1214.76 1212.38,1214.76 1212.97,1214.76 1213.55,1214.76 1214.14,1214.76 1214.73,1214.76 1215.31,1214.76 1215.9,1214.76 1216.49,1214.76 1217.07,1214.76 1217.66,1214.76 1218.24,1214.76 1218.83,1214.76 1219.42,1214.76 1220,1214.76 1220.59,1214.76 1221.18,1214.76 1221.76,1214.76 1222.35,1214.76 1222.94,1214.76 1223.52,1214.76 1224.11,1214.76 1224.7,1214.76 1225.28,1214.76 1225.87,1214.76 1226.45,1214.76 1227.04,1214.76 1227.63,1214.76 1228.21,1214.76 1228.8,1214.76 1229.39,1214.76 1229.97,1214.76 1230.56,1214.76 1231.15,1214.76 1231.73,1214.76 1232.32,1214.76 1232.91,1214.76 1233.49,1214.76 1234.08,1214.76 1234.66,1214.76 1235.25,1214.76 1235.84,1214.76 1236.42,1214.76 1237.01,1214.76 1237.6,1214.76 1238.18,1214.76 1238.77,1214.76 1239.36,1214.76 1239.94,1214.76 1240.53,1214.76 1241.11,1214.76 1241.7,1214.76 1242.29,1214.76 1242.87,1214.76 1243.46,1214.76 1244.05,1214.76 1244.63,1214.76 1245.22,1214.76 1245.81,1214.76 1246.39,1214.76 1246.98,1214.76 1247.57,1214.76 1248.15,1214.76 1248.74,1214.76 1249.32,1214.76 1249.91,1214.76 1250.5,1214.76 1251.08,1214.76 1251.67,1214.76 1252.26,1214.76 1252.84,1214.76 1253.43,1214.76 1254.02,1214.76 1254.6,1214.76 1255.19,1214.76 1255.78,1214.76 1256.36,1214.76 1256.95,1214.76 1257.53,1214.76 1258.12,1214.76 1258.71,1214.76 1259.29,1214.76 1259.88,1214.76 1260.47,1214.76 1261.05,1214.76 1261.64,1214.76 1262.23,1214.76 1262.81,1214.76 1263.4,1214.76 1263.98,1214.76 1264.57,1214.76 1265.16,1214.76 1265.74,1214.76 1266.33,1214.76 1266.92,1214.76 1267.5,1214.76 1268.09,1214.76 1268.68,1214.76 1269.26,1214.76 1269.85,1214.76 1270.44,1214.76 1271.02,1214.76 1271.61,1214.76 1272.19,1214.76 1272.78,1214.76 1273.37,1214.76 1273.95,1214.76 1274.54,1214.76 1275.13,1214.76 1275.71,1214.76 1276.3,1214.76 1276.89,1214.76 1277.47,1214.76 1278.06,1214.76 1278.65,1214.76 1279.23,1214.76 1279.82,1214.76 1280.4,1214.76 1280.99,1214.76 1281.58,1214.76 1282.16,1214.76 1282.75,1214.76 1283.34,1214.76 1283.92,1214.76 1284.51,1214.76 1285.1,1214.76 1285.68,1214.76 1286.27,1214.76 1286.86,1214.76 1287.44,1214.76 1288.03,1214.76 1288.61,1214.76 1289.2,1214.76 1289.79,1214.76 1290.37,1214.76 1290.96,1214.76 1291.55,1214.76 1292.13,1214.76 1292.72,1214.76 1293.31,1214.76 1293.89,1214.76 1294.48,1214.76 1295.06,1214.76 1295.65,1214.76 1296.24,1214.76 1296.82,1214.76 1297.41,1214.76 1298,1214.76 1298.58,1214.76 1299.17,1214.76 1299.76,1214.76 1300.34,1214.76 1300.93,1214.76 1301.52,1214.76 1302.1,1214.76 1302.69,1214.76 1303.27,1214.76 1303.86,1214.76 1304.45,1214.76 1305.03,1214.76 1305.62,1214.76 1306.21,1214.76 1306.79,1214.76 1307.38,1214.76 1307.97,1214.76 1308.55,1214.76 1309.14,1214.76 1309.73,1214.76 1310.31,1214.76 1310.9,1214.76 1311.48,1214.76 1312.07,1214.76 1312.66,1214.76 1313.24,1214.76 1313.83,1214.76 1314.42,1214.76 1315,1214.76 1315.59,1214.76 1316.18,1214.76 1316.76,1214.76 1317.35,1214.76 1317.93,1214.76 1318.52,1214.76 1319.11,1214.76 1319.69,1214.76 1320.28,1214.76 1320.87,1214.76 1321.45,1214.76 1322.04,1214.76 1322.63,1214.76 1323.21,1214.76 1323.8,1214.76 1324.39,1214.76 1324.97,1214.76 1325.56,1214.76 1326.14,1214.76 1326.73,1214.76 1327.32,1214.76 1327.9,1214.76 1328.49,1214.76 1329.08,1214.76 1329.66,1214.76 1330.25,1214.76 1330.84,1214.76 1331.42,1214.76 1332.01,1214.76 1332.6,1214.76 1333.18,1214.76 1333.77,1214.76 1334.35,1214.76 1334.94,1214.76 1335.53,1214.76 1336.11,1214.76 1336.7,1214.76 1337.29,1214.76 1337.87,1214.76 1338.46,1214.76 1339.05,1214.76 1339.63,1214.76 1340.22,1214.76 1340.8,1214.76 1341.39,1214.76 1341.98,1214.76 1342.56,1214.76 1343.15,1214.76 1343.74,1214.76 1344.32,1214.76 1344.91,1214.76 1345.5,1214.76 1346.08,1214.76 1346.67,1214.76 1347.26,1214.76 1347.84,1214.76 1348.43,1214.76 1349.01,1214.76 1349.6,1214.76 1350.19,1214.76 1350.77,1214.76 1351.36,1214.76 1351.95,1214.76 1352.53,1214.76 1353.12,1214.76 1353.71,1214.76 1354.29,1214.76 1354.88,1214.76 1355.47,1214.76 1356.05,1214.76 1356.64,1214.76 1357.22,1214.76 1357.81,1214.76 1358.4,1214.76 1358.98,1214.76 1359.57,1214.76 1360.16,1214.76 1360.74,1214.76 1361.33,1214.76 1361.92,1214.76 1362.5,1214.76 1363.09,1214.76 1363.68,1214.76 1364.26,1214.76 1364.85,1214.76 1365.43,1214.76 1366.02,1214.76 1366.61,1214.76 1367.19,1214.76 1367.78,1214.76 1368.37,1214.76 1368.95,1214.76 1369.54,1214.76 1370.13,1214.76 1370.71,1214.76 1371.3,1214.76 1371.88,1214.76 1372.47,1214.76 1373.06,1214.76 1373.64,1214.76 1374.23,1214.76 1374.82,1214.76 1375.4,1214.76 1375.99,1214.76 1376.58,1214.76 1377.16,1214.76 1377.75,1214.76 1378.34,1214.76 1378.92,1214.76 1379.51,1214.76 1380.09,1214.76 1380.68,1214.76 1381.27,1214.76 1381.85,1214.76 1382.44,1214.76 1383.03,1214.76 1383.61,1214.76 1384.2,1214.76 1384.79,1214.76 1385.37,1214.76 1385.96,1214.76 1386.55,1214.76 1387.13,1214.76 1387.72,1214.76 1388.3,1214.76 1388.89,1214.76 1389.48,1214.76 1390.06,1214.76 1390.65,1214.76 1391.24,1214.76 1391.82,1214.76 1392.41,1214.76 1393,1214.76 1393.58,1214.76 1394.17,1214.76 1394.75,1214.76 1395.34,1214.76 1395.93,1214.76 1396.51,1214.76 1397.1,1214.76 1397.69,1214.76 1398.27,1214.76 1398.86,1214.76 1399.45,1214.76 1400.03,1214.76 1400.62,1214.76 1401.21,1214.76 1401.79,1214.76 1402.38,1214.76 1402.96,1214.76 1403.55,1214.76 1404.14,1214.76 1404.72,1214.76 1405.31,1214.76 1405.9,1214.76 1406.48,1214.76 1407.07,1214.76 1407.66,1214.76 1408.24,1214.76 1408.83,1214.76 1409.42,1214.76 1410,1214.76 1410.59,1214.76 1411.17,1214.76 1411.76,1214.76 1412.35,1214.76 1412.93,1214.76 1413.52,1214.76 1414.11,1214.76 1414.69,1214.76 1415.28,1214.76 1415.87,1214.76 1416.45,1214.76 1417.04,1214.76 1417.63,1214.76 1418.21,1214.76 1418.8,1214.76 1419.38,1214.76 1419.97,1214.76 1420.56,1214.76 1421.14,1214.76 1421.73,1214.76 1422.32,1214.76 1422.9,1214.76 1423.49,1214.76 1424.08,1214.76 1424.66,1214.76 1425.25,1214.76 1425.83,1214.76 1426.42,1214.76 1427.01,1214.76 1427.59,1214.76 1428.18,1214.76 1428.77,1214.76 1429.35,1214.76 1429.94,1214.76 1430.53,1214.76 1431.11,1214.76 1431.7,1214.76 1432.29,1214.76 1432.87,1214.76 1433.46,1214.76 1434.04,1214.76 1434.63,1214.76 1435.22,1214.76 1435.8,1214.76 1436.39,1214.76 1436.98,1214.76 1437.56,1214.76 1438.15,1214.76 1438.74,1214.76 1439.32,1214.76 1439.91,1214.76 1440.5,1214.76 1441.08,1214.76 1441.67,1214.76 1442.25,1214.76 1442.84,1214.76 1443.43,1214.76 1444.01,1214.76 1444.6,1214.76 1445.19,1214.76 1445.77,1214.76 1446.36,1214.76 1446.95,1214.76 1447.53,1214.76 1448.12,1214.76 1448.7,1214.76 1449.29,1214.76 1449.88,1214.76 1450.46,1214.76 1451.05,1214.76 1451.64,1214.76 1452.22,1214.76 1452.81,1214.76 1453.4,1214.76 1453.98,1214.76 1454.57,1214.76 1455.16,1214.76 1455.74,1214.76 1456.33,1214.76 1456.91,1214.76 1457.5,1214.76 1458.09,1214.76 1458.67,1214.76 1459.26,1214.76 1459.85,1214.76 1460.43,1214.76 1461.02,1214.76 1461.61,1214.76 1462.19,1214.76 1462.78,1214.76 1463.37,1214.76 1463.95,1214.76 1464.54,1214.76 1465.12,1214.76 1465.71,1214.76 1466.3,1214.76 1466.88,1214.76 1467.47,1214.76 1468.06,1214.76 1468.64,1214.76 1469.23,1214.76 1469.82,1214.76 1470.4,1214.76 1470.99,1214.76 1471.57,1214.76 1472.16,1214.76 1472.75,1214.76 1473.33,1214.76 1473.92,1214.76 1474.51,1214.76 1475.09,1214.76 1475.68,1214.76 1476.27,1214.76 1476.85,1214.76 1477.44,1214.76 1478.03,1214.76 1478.61,1214.76 1479.2,1214.76 1479.78,1214.76 1480.37,1214.76 1480.96,1214.76 1481.54,1214.76 1482.13,1214.76 1482.72,1214.76 1483.3,1214.76 1483.89,1214.76 1484.48,1214.76 1485.06,1214.76 1485.65,1214.76 1486.24,1214.76 1486.82,1214.76 1487.41,1214.76 1487.99,1214.76 1488.58,1214.76 1489.17,1214.76 1489.75,1214.76 1490.34,1214.76 1490.93,1214.76 1491.51,1214.76 1492.1,1214.76 1492.69,1214.76 1493.27,1214.76 1493.86,1214.76 1494.45,1214.76 1495.03,1214.76 1495.62,1214.76 1496.2,1214.76 1496.79,1214.76 1497.38,1214.76 1497.96,1214.76 1498.55,1214.76 1499.14,1214.76 1499.72,1214.76 1500.31,1214.76 1500.9,1214.76 1501.48,1214.76 1502.07,1214.76 1502.65,1214.76 1503.24,1214.76 1503.83,1214.76 1504.41,1214.76 1505,1214.76 1505.59,1214.76 1506.17,1214.76 1506.76,1214.76 1507.35,1214.76 1507.93,1214.76 1508.52,1214.76 1509.11,1214.76 1509.69,1214.76 1510.28,1214.76 1510.86,1214.76 1511.45,1214.76 1512.04,1214.76 1512.62,1214.76 1513.21,1214.76 1513.8,1214.76 1514.38,1214.76 1514.97,1214.76 1515.56,1214.76 1516.14,1214.76 1516.73,1214.76 1517.32,1214.76 1517.9,1214.76 1518.49,1214.76 1519.07,1214.76 1519.66,1214.76 1520.25,1214.76 1520.83,1214.76 1521.42,1214.76 1522.01,1214.76 1522.59,1214.76 1523.18,1214.76 1523.77,1214.76 1524.35,1214.76 1524.94,1214.76 1525.52,1214.76 1526.11,1214.76 1526.7,1214.76 1527.28,1214.76 1527.87,1214.76 1528.46,1214.76 1529.04,1214.76 1529.63,1214.76 1530.22,1214.76 1530.8,1214.76 1531.39,1214.76 1531.98,1214.76 1532.56,1214.76 1533.15,1214.76 1533.73,1214.76 1534.32,1214.76 1534.91,1214.76 1535.49,1214.76 1536.08,1214.76 1536.67,1214.76 1537.25,1214.76 1537.84,1214.76 1538.43,1214.76 1539.01,1214.76 1539.6,1214.76 1540.19,1214.76 1540.77,1214.76 1541.36,1214.76 1541.94,1214.76 1542.53,1214.76 1543.12,1214.76 1543.7,1214.76 1544.29,1214.76 1544.88,1214.76 1545.46,1214.76 1546.05,1214.76 1546.64,1214.76 1547.22,1214.76 1547.81,1214.76 1548.4,1214.76 1548.98,1214.76 1549.57,1214.76 1550.15,1214.76 1550.74,1214.76 1551.33,1214.76 1551.91,1214.76 1552.5,1214.76 1553.09,1214.76 1553.67,1214.76 1554.26,1214.76 1554.85,1214.76 1555.43,1214.76 1556.02,1214.76 1556.6,1214.76 1557.19,1214.76 1557.78,1214.76 1558.36,1214.76 1558.95,1214.76 1559.54,1214.76 1560.12,1214.76 1560.71,1214.76 1561.3,1214.76 1561.88,1214.76 1562.47,1214.76 1563.06,1214.76 1563.64,1214.76 1564.23,1214.76 1564.81,1214.76 1565.4,1214.76 1565.99,1214.76 1566.57,1214.76 1567.16,1214.76 1567.75,1214.76 1568.33,1214.76 1568.92,1214.76 1569.51,1214.76 1570.09,1214.76 1570.68,1214.76 1571.27,1214.76 1571.85,1214.76 1572.44,1214.76 1573.02,1214.76 1573.61,1214.76 1574.2,1214.76 1574.78,1214.76 1575.37,1214.76 1575.96,1214.76 1576.54,1214.76 1577.13,1214.76 1577.72,1214.76 1578.3,1214.76 1578.89,1214.76 1579.47,1214.76 1580.06,1214.76 1580.65,1214.76 1581.23,1214.76 1581.82,1214.76 1582.41,1214.76 1582.99,1214.76 1583.58,1214.76 1584.17,1214.76 1584.75,1214.76 1585.34,1214.76 1585.93,1214.76 1586.51,1214.76 1587.1,1214.76 1587.68,1214.76 1588.27,1214.76 1588.86,1214.76 1589.44,1214.76 1590.03,1214.76 1590.62,1214.76 1591.2,1214.76 1591.79,1214.76 1592.38,1214.76 1592.96,1214.76 1593.55,1214.76 1594.14,1214.76 1594.72,1214.76 1595.31,1214.76 1595.89,1214.76 1596.48,1214.76 1597.07,1214.76 1597.65,1214.76 1598.24,1214.76 1598.83,1214.76 1599.41,1214.76 1600,1214.76 1600.59,1214.76 1601.17,1214.76 1601.76,1214.76 1602.34,1214.76 1602.93,1214.76 1603.52,1214.76 1604.1,1214.76 1604.69,1214.76 1605.28,1214.76 1605.86,1214.76 1606.45,1214.76 1607.04,1214.76 1607.62,1214.76 1608.21,1214.76 1608.8,1214.76 1609.38,1214.76 1609.97,1214.76 1610.55,1214.76 1611.14,1214.76 1611.73,1214.76 1612.31,1214.76 1612.9,1214.76 1613.49,1214.76 1614.07,1214.76 1614.66,1214.76 1615.25,1214.76 1615.83,1214.76 1616.42,1214.76 1617.01,1214.76 1617.59,1214.76 1618.18,1214.76 1618.76,1214.76 1619.35,1214.76 1619.94,1214.76 1620.52,1214.76 1621.11,1214.76 1621.7,1214.76 1622.28,1214.76 1622.87,1214.76 1623.46,1214.76 1624.04,1214.76 1624.63,1214.76 1625.22,1214.76 1625.8,1214.76 1626.39,1214.76 1626.97,1214.76 1627.56,1214.76 1628.15,1214.76 1628.73,1214.76 1629.32,1214.76 1629.91,1214.76 1630.49,1214.76 1631.08,1214.76 1631.67,1214.76 1632.25,1214.76 1632.84,1214.76 1633.42,1214.76 1634.01,1214.76 1634.6,1214.76 1635.18,1214.76 1635.77,1214.76 1636.36,1214.76 1636.94,1214.76 1637.53,1214.76 1638.12,1214.76 1638.7,1214.76 1639.29,1214.76 1639.88,1214.76 1640.46,1214.76 1641.05,1214.76 1641.63,1214.76 1642.22,1214.76 1642.81,1214.76 1643.39,1214.76 1643.98,1214.76 1644.57,1214.76 1645.15,1214.76 1645.74,1214.76 1646.33,1214.76 1646.91,1214.76 1647.5,1214.76 1648.09,1214.76 1648.67,1214.76 1649.26,1214.76 1649.84,1214.76 1650.43,1214.76 1651.02,1214.76 1651.6,1214.76 1652.19,1214.76 1652.78,1214.76 1653.36,1214.76 1653.95,1214.76 1654.54,1214.76 1655.12,1214.76 1655.71,1214.76 1656.29,1214.76 1656.88,1214.76 1657.47,1214.76 1658.05,1214.76 1658.64,1214.76 1659.23,1214.76 1659.81,1214.76 1660.4,1214.76 1660.99,1214.76 1661.57,1214.76 1662.16,1214.76 1662.75,1214.76 1663.33,1214.76 1663.92,1214.76 1664.5,1214.76 1665.09,1214.76 1665.68,1214.76 1666.26,1214.76 1666.85,1214.76 1667.44,1214.76 1668.02,1214.76 1668.61,1214.76 1669.2,1214.76 1669.78,1214.76 1670.37,1214.76 1670.96,1214.76 1671.54,1214.76 1672.13,1214.76 1672.71,1214.76 1673.3,1214.76 1673.89,1214.76 1674.47,1214.76 1675.06,1214.76 1675.65,1214.76 1676.23,1214.76 1676.82,1214.76 1677.41,1214.76 1677.99,1214.76 1678.58,1214.76 1679.17,1214.76 1679.75,1214.76 1680.34,1214.76 1680.92,1214.76 1681.51,1214.76 1682.1,1214.76 1682.68,1214.76 1683.27,1214.76 1683.86,1214.76 1684.44,1214.76 1685.03,1214.76 1685.62,1214.76 1686.2,1214.76 1686.79,1214.76 1687.37,1214.76 1687.96,1214.76 1688.55,1214.76 1689.13,1214.76 1689.72,1214.76 1690.31,1214.76 1690.89,1214.76 1691.48,1214.76 1692.07,1214.76 1692.65,1214.76 1693.24,1214.76 1693.83,1214.76 1694.41,1214.76 1695,1214.76 1695.58,1214.76 1696.17,1214.76 1696.76,1214.76 1697.34,1214.76 1697.93,1214.76 1698.52,1214.76 1699.1,1214.76 1699.69,1214.76 1700.28,1214.76 1700.86,1214.76 1701.45,1214.76 1702.04,1214.76 1702.62,1214.76 1703.21,1214.76 1703.79,1214.76 1704.38,1214.76 1704.97,1214.76 1705.55,1214.76 1706.14,1214.76 1706.73,1214.76 1707.31,1214.76 1707.9,1214.76 1708.49,1214.76 1709.07,1214.76 1709.66,1214.76 1710.24,1214.76 1710.83,1214.76 1711.42,1214.76 1712,1214.76 1712.59,1214.76 1713.18,1214.76 1713.76,1214.76 1714.35,1214.76 1714.94,1214.76 1715.52,1214.76 1716.11,1214.76 1716.7,1214.76 1717.28,1214.76 1717.87,1214.76 1718.45,1214.76 1719.04,1214.76 1719.63,1214.76 1720.21,1214.76 1720.8,1214.76 1721.39,1214.76 1721.97,1214.76 1722.56,1214.76 1723.15,1214.76 1723.73,1214.76 1724.32,1214.76 1724.91,1214.76 1725.49,1214.76 1726.08,1214.76 1726.66,1214.76 1727.25,1214.76 1727.84,1214.76 1728.42,1214.76 1729.01,1214.76 1729.6,1214.76 1730.18,1214.76 1730.77,1214.76 1731.36,1214.76 1731.94,1214.76 1732.53,1214.76 1733.11,1214.76 1733.7,1214.76 1734.29,1214.76 1734.87,1214.76 1735.46,1214.76 1736.05,1214.76 1736.63,1214.76 1737.22,1214.76 1737.81,1214.76 1738.39,1214.76 1738.98,1214.76 1739.57,1214.76 1740.15,1214.76 1740.74,1214.76 1741.32,1214.76 1741.91,1214.76 1742.5,1214.76 1743.08,1214.76 1743.67,1214.76 1744.26,1214.76 1744.84,1214.76 1745.43,1214.76 1746.02,1214.76 1746.6,1214.76 1747.19,1214.76 1747.78,1214.76 1748.36,1214.76 1748.95,1214.76 1749.53,1214.76 1750.12,1214.76 1750.71,1214.76 1751.29,1214.76 1751.88,1214.76 1752.47,1214.76 1753.05,1214.76 1753.64,1214.76 1754.23,1214.76 1754.81,1214.76 1755.4,1214.76 1755.99,1214.76 1756.57,1214.76 1757.16,1214.76 1757.74,1214.76 1758.33,1214.76 1758.92,1214.76 1759.5,1214.76 1760.09,1214.76 1760.68,1214.76 1761.26,1214.76 1761.85,1214.76 1762.44,1214.76 1763.02,1214.76 1763.61,1214.76 1764.19,1214.76 1764.78,1214.76 1765.37,1214.76 1765.95,1214.76 1766.54,1214.76 1767.13,1214.76 1767.71,1214.76 1768.3,1214.76 1768.89,1214.76 1769.47,1214.76 1770.06,1214.76 1770.65,1214.76 1771.23,1214.76 1771.82,1214.76 1772.4,1214.76 1772.99,1214.76 1773.58,1214.76 1774.16,1214.76 1774.75,1214.76 1775.34,1214.76 1775.92,1214.76 1776.51,1214.76 1777.1,1214.76 1777.68,1214.76 1778.27,1214.76 1778.86,1214.76 1779.44,1214.76 1780.03,1214.76 1780.61,1214.76 1781.2,1214.76 1781.79,1214.76 1782.37,1214.76 1782.96,1214.76 1783.55,1214.76 1784.13,1214.76 1784.72,1214.76 1785.31,1214.76 1785.89,1214.76 1786.48,1214.76 1787.06,1214.76 1787.65,1214.76 1788.24,1214.76 1788.82,1214.76 1789.41,1214.76 1790,1214.76 1790.58,1214.76 1791.17,1214.76 1791.76,1214.76 1792.34,1214.76 1792.93,1214.76 1793.52,1214.76 1794.1,1214.76 1794.69,1214.76 1795.27,1214.76 1795.86,1214.76 1796.45,1214.76 1797.03,1214.76 1797.62,1214.76 1798.21,1214.76 1798.79,1214.76 1799.38,1214.76 1799.97,1214.76 1800.55,1214.76 1801.14,1214.76 1801.73,1214.76 1802.31,1214.76 1802.9,1214.76 1803.48,1214.76 1804.07,1214.76 1804.66,1214.76 1805.24,1214.76 1805.83,1214.76 1806.42,1214.76 1807,1214.76 1807.59,1214.76 1808.18,1214.76 1808.76,1214.76 1809.35,1214.76 1809.94,1214.76 1810.52,1214.76 1811.11,1214.76 1811.69,1214.76 1812.28,1214.76 1812.87,1214.76 1813.45,1214.76 1814.04,1214.76 1814.63,1214.76 1815.21,1214.76 1815.8,1214.76 1816.39,1214.76 1816.97,1214.76 1817.56,1214.76 1818.14,1214.76 1818.73,1214.76 1819.32,1214.76 1819.9,1214.76 1820.49,1214.76 1821.08,1214.76 1821.66,1214.76 1822.25,1214.76 1822.84,1214.76 1823.42,1214.76 1824.01,1214.76 1824.6,1214.76 1825.18,1214.76 1825.77,1214.76 1826.35,1214.76 1826.94,1214.76 1827.53,1214.76 1828.11,1214.76 1828.7,1214.76 1829.29,1214.76 1829.87,1214.76 1830.46,1214.76 1831.05,1214.76 1831.63,1214.76 1832.22,1214.76 1832.81,1214.76 1833.39,1214.76 1833.98,1214.76 1834.56,1214.76 1835.15,1214.76 1835.74,1214.76 1836.32,1214.76 1836.91,1214.76 1837.5,1214.76 1838.08,1214.76 1838.67,1214.76 1839.26,1214.76 1839.84,1214.76 1840.43,1214.76 1841.01,1214.76 1841.6,1214.76 1842.19,1214.76 1842.77,1214.76 1843.36,1214.76 1843.95,1214.76 1844.53,1214.76 1845.12,1214.76 1845.71,1214.76 1846.29,1214.76 1846.88,1214.76 1847.47,1214.76 1848.05,1214.76 1848.64,1214.76 1849.22,1214.76 1849.81,1214.76 1850.4,1214.76 1850.98,1214.76 1851.57,1214.76 1852.16,1214.76 1852.74,1214.76 1853.33,1214.76 1853.92,1214.76 1854.5,1214.76 1855.09,1214.76 1855.68,1214.76 1856.26,1214.76 1856.85,1214.76 1857.43,1214.76 1858.02,1214.76 1858.61,1214.76 1859.19,1214.76 1859.78,1214.76 1860.37,1214.76 1860.95,1214.76 1861.54,1214.76 1862.13,1214.76 1862.71,1214.76 1863.3,1214.76 1863.88,1214.76 1864.47,1214.76 1865.06,1214.76 1865.64,1214.76 1866.23,1214.76 1866.82,1214.76 1867.4,1214.76 1867.99,1214.76 1868.58,1214.76 1869.16,1214.76 1869.75,1214.76 1870.34,1214.76 1870.92,1214.76 1871.51,1214.76 1872.09,1214.76 1872.68,1214.76 1873.27,1214.76 1873.85,1214.76 1874.44,1214.76 1875.03,1214.76 1875.61,1214.76 1876.2,1214.76 1876.79,1214.76 1877.37,1214.76 1877.96,1214.76 1878.55,1214.76 1879.13,1214.76 1879.72,1214.76 1880.3,1214.76 1880.89,1214.76 1881.48,1214.76 1882.06,1214.76 1882.65,1214.76 1883.24,1214.76 1883.82,1214.76 1884.41,1214.76 1885,1214.76 1885.58,1214.76 1886.17,1214.76 1886.76,1214.76 1887.34,1214.76 1887.93,1214.76 1888.51,1214.76 1889.1,1214.76 1889.69,1214.76 1890.27,1214.76 1890.86,1214.76 1891.45,1214.76 1892.03,1214.76 1892.62,1214.76 1893.21,1214.76 1893.79,1214.76 1894.38,1214.76 1894.96,1214.76 1895.55,1214.76 1896.14,1214.76 1896.72,1214.76 1897.31,1214.76 1897.9,1214.76 1898.48,1214.76 1899.07,1214.76 1899.66,1214.76 1900.24,1214.76 1900.83,1214.76 1901.42,1214.76 1902,1214.76 1902.59,1214.76 1903.17,1214.76 1903.76,1214.76 1904.35,1214.76 1904.93,1214.76 1905.52,1214.76 1906.11,1214.76 1906.69,1214.76 1907.28,1214.76 1907.87,1214.76 1908.45,1214.76 1909.04,1214.76 1909.63,1214.76 1910.21,1214.76 1910.8,1214.76 1911.38,1214.76 1911.97,1214.76 1912.56,1214.76 1913.14,1214.76 1913.73,1214.76 1914.32,1214.76 1914.9,1214.76 1915.49,1214.76 1916.08,1214.76 1916.66,1214.76 1917.25,1214.76 1917.83,1214.76 1918.42,1214.76 1919.01,1214.76 1919.59,1214.76 1920.18,1214.76 1920.77,1214.76 1921.35,1214.76 1921.94,1214.76 1922.53,1214.76 1923.11,1214.76 1923.7,1214.76 1924.29,1214.76 1924.87,1214.76 1925.46,1214.76 1926.04,1214.76 1926.63,1214.76 1927.22,1214.76 1927.8,1214.76 1928.39,1214.76 1928.98,1214.76 1929.56,1214.76 1930.15,1214.76 1930.74,1214.76 1931.32,1214.76 1931.91,1214.76 1932.5,1214.76 1933.08,1214.76 1933.67,1214.76 1934.25,1214.76 1934.84,1214.76 1935.43,1214.76 1936.01,1214.76 1936.6,1214.76 1937.19,1214.76 1937.77,1214.76 1938.36,1214.76 1938.95,1214.76 1939.53,1214.76 1940.12,1214.76 1940.71,1214.76 1941.29,1214.76 1941.88,1214.76 1942.46,1214.76 1943.05,1214.76 1943.64,1214.76 1944.22,1214.76 1944.81,1214.76 1945.4,1214.76 1945.98,1214.76 1946.57,1214.76 1947.16,1214.76 1947.74,1214.76 1948.33,1214.76 1948.91,1214.76 1949.5,1214.76 1950.09,1214.76 1950.67,1214.76 1951.26,1214.76 1951.85,1214.76 1952.43,1214.76 1953.02,1214.76 1953.61,1214.76 1954.19,1214.76 1954.78,1214.76 1955.37,1214.76 1955.95,1214.76 1956.54,1214.76 1957.12,1214.76 1957.71,1214.76 1958.3,1214.76 1958.88,1214.76 1959.47,1214.76 1960.06,1214.76 1960.64,1214.76 1961.23,1214.76 1961.82,1214.76 1962.4,1214.76 1962.99,1214.76 1963.58,1214.76 1964.16,1214.76 1964.75,1214.76 1965.33,1214.76 1965.92,1214.76 1966.51,1214.76 1967.09,1214.76 1967.68,1214.76 1968.27,1214.76 1968.85,1214.76 1969.44,1214.76 1970.03,1214.76 1970.61,1214.76 1971.2,1214.76 1971.78,1214.76 1972.37,1214.76 1972.96,1214.76 1973.54,1214.76 1974.13,1214.76 1974.72,1214.76 1975.3,1214.76 1975.89,1214.76 1976.48,1214.76 1977.06,1214.76 1977.65,1214.76 1978.24,1214.76 1978.82,1214.76 1979.41,1214.76 1979.99,1214.76 1980.58,1214.76 1981.17,1214.76 1981.75,1214.76 1982.34,1214.76 1982.93,1214.76 1983.51,1214.76 1984.1,1214.76 1984.69,1214.76 1985.27,1214.76 1985.86,1214.76 1986.45,1214.76 1987.03,1214.76 1987.62,1214.76 1988.2,1214.76 1988.79,1214.76 1989.38,1214.76 1989.96,1214.76 1990.55,1214.76 1991.14,1214.76 1991.72,1214.76 1992.31,1214.76 1992.9,1214.76 1993.48,1214.76 1994.07,1214.76 1994.65,1214.76 1995.24,1214.76 1995.83,1214.76 1996.41,1214.76 1997,1214.76 1997.59,1214.76 1998.17,1214.76 1998.76,1214.76 1999.35,1214.76 1999.93,1214.76 2000.52,1214.76 2001.11,1214.76 2001.69,1214.76 2002.28,1214.76 2002.86,1214.76 2003.45,1214.76 2004.04,1214.76 2004.62,1214.76 2005.21,1214.76 2005.8,1214.76 2006.38,1214.76 2006.97,1214.76 2007.56,1214.76 2008.14,1214.76 2008.73,1214.76 2009.32,1214.76 2009.9,1214.76 2010.49,1214.76 2011.07,1214.76 2011.66,1214.76 2012.25,1214.76 2012.83,1214.76 2013.42,1214.76 2014.01,1214.76 2014.59,1214.76 2015.18,1214.76 2015.77,1214.76 2016.35,1214.76 2016.94,1214.76 2017.53,1214.76 2018.11,1214.76 2018.7,1214.76 2019.28,1214.76 2019.87,1214.76 2020.46,1214.76 2021.04,1214.76 2021.63,1214.76 2022.22,1214.76 2022.8,1214.76 2023.39,1214.76 2023.98,1214.76 2024.56,1214.76 2025.15,1214.76 2025.73,1214.76 2026.32,1214.76 2026.91,1214.76 2027.49,1214.76 2028.08,1214.76 2028.67,1214.76 2029.25,1214.76 2029.84,1214.76 2030.43,1214.76 2031.01,1214.76 2031.6,1214.76 2032.19,1214.76 2032.77,1214.76 2033.36,1214.76 2033.94,1214.76 2034.53,1214.76 2035.12,1214.76 2035.7,1214.76 2036.29,1214.76 2036.88,1214.76 2037.46,1214.76 2038.05,1214.76 2038.64,1214.76 2039.22,1214.76 2039.81,1214.76 2040.4,1214.76 2040.98,1214.76 2041.57,1214.76 2042.15,1214.76 2042.74,1214.76 2043.33,1214.76 2043.91,1214.76 2044.5,1214.76 2045.09,1214.76 2045.67,1214.76 2046.26,1214.76 2046.85,1214.76 2047.43,1214.76 2048.02,1214.76 2048.6,1214.76 2049.19,1214.76 2049.78,1214.76 2050.36,1214.76 2050.95,1214.76 2051.54,1214.76 2052.12,1214.76 2052.71,1214.76 2053.3,1214.76 2053.88,1214.76 2054.47,1214.76 2055.06,1214.76 2055.64,1214.76 2056.23,1214.76 2056.81,1214.76 2057.4,1214.76 2057.99,1214.76 2058.57,1214.76 2059.16,1214.76 2059.75,1214.76 2060.33,1214.76 2060.92,1214.76 2061.51,1214.76 2062.09,1214.76 2062.68,1214.76 2063.27,1214.76 2063.85,1214.76 2064.44,1214.76 2065.02,1214.76 2065.61,1214.76 2066.2,1214.76 2066.78,1214.76 2067.37,1214.76 2067.96,1214.76 2068.54,1214.76 2069.13,1214.76 2069.72,1214.76 2070.3,1214.76 2070.89,1214.76 2071.48,1214.76 2072.06,1214.76 2072.65,1214.76 2073.23,1214.76 2073.82,1214.76 2074.41,1214.76 2074.99,1214.76 2075.58,1214.76 2076.17,1214.76 2076.75,1214.76 2077.34,1214.76 2077.93,1214.76 2078.51,1214.76 2079.1,1214.76 2079.68,1214.76 2080.27,1214.76 2080.86,1214.76 2081.44,1214.76 2082.03,1214.76 2082.62,1214.76 2083.2,1214.76 2083.79,1214.76 2084.38,1214.76 2084.96,1214.76 2085.55,1214.76 2086.14,1214.76 2086.72,1214.76 2087.31,1214.76 2087.89,1214.76 2088.48,1214.76 2089.07,1214.76 2089.65,1214.76 2090.24,1214.76 2090.83,1214.76 2091.41,1214.76 2092,1214.76 2092.59,1214.76 2093.17,1214.76 2093.76,1214.76 2094.35,1214.76 2094.93,1214.76 2095.52,1214.76 2096.1,1214.76 2096.69,1214.76 2097.28,1214.76 2097.86,1214.76 2098.45,1214.76 2099.04,1214.76 2099.62,1214.76 2100.21,1214.76 2100.8,1214.76 2101.38,1214.76 2101.97,1214.76 2102.55,1214.76 2103.14,1214.76 2103.73,1214.76 2104.31,1214.76 2104.9,1214.76 2105.49,1214.76 2106.07,1214.76 2106.66,1214.76 2107.25,1214.76 2107.83,1214.76 2108.42,1214.76 2109.01,1214.76 2109.59,1214.76 2110.18,1214.76 2110.76,1214.76 2111.35,1214.76 2111.94,1214.76 2112.52,1214.76 2113.11,1214.76 2113.7,1214.76 2114.28,1214.76 2114.87,1214.76 2115.46,1214.76 2116.04,1214.76 2116.63,1214.76 2117.22,1214.76 2117.8,1214.76 2118.39,1214.76 2118.97,1214.76 2119.56,1214.76 2120.15,1214.76 2120.73,1214.76 2121.32,1214.76 2121.91,1214.76 2122.49,1214.76 2123.08,1214.76 2123.67,1214.76 2124.25,1214.76 2124.84,1214.76 2125.42,1214.76 2126.01,1214.76 2126.6,1214.76 2127.18,1214.76 2127.77,1214.76 2128.36,1214.76 2128.94,1214.76 2129.53,1214.76 2130.12,1214.76 2130.7,1214.76 2131.29,1214.76 2131.88,1214.76 2132.46,1214.76 2133.05,1214.76 2133.63,1214.76 2134.22,1214.76 2134.81,1214.76 2135.39,1214.76 2135.98,1214.76 2136.57,1214.76 2137.15,1214.76 2137.74,1214.76 2138.33,1214.76 2138.91,1214.76 2139.5,1214.76 2140.09,1214.76 2140.67,1214.76 2141.26,1214.76 2141.84,1214.76 2142.43,1214.76 2143.02,1214.76 2143.6,1214.76 2144.19,1214.76 2144.78,1214.76 2145.36,1214.76 2145.95,1214.76 2146.54,1214.76 2147.12,1214.76 2147.71,1214.76 2148.3,1214.76 2148.88,1214.76 2149.47,1214.76 2150.05,1214.76 2150.64,1214.76 2151.23,1214.76 2151.81,1214.76 2152.4,1214.76 2152.99,1214.76 2153.57,1214.76 2154.16,1214.76 2154.75,1214.76 2155.33,1214.76 2155.92,1214.76 2156.5,1214.76 2157.09,1214.76 2157.68,1214.76 2158.26,1214.76 \"/>\n<path clip-path=\"url(#clip272)\" d=\"M986.025 1214.61 L986.612 1214.61 L987.198 1214.61 L987.785 1214.61 L988.371 1214.61 L988.957 1214.61 L989.544 1214.61 L990.13 1214.61 L990.717 1214.61 L991.303 1214.61 L991.889 1214.61 L992.476 1214.61 L993.062 1214.61 L993.649 1214.61 L994.235 1214.61 L994.822 1214.61 L995.408 1214.61 L995.994 1214.61 L996.581 1214.61 L997.167 1214.61 L997.754 1214.61 L998.34 1214.61 L998.926 1214.61 L999.513 1214.61 L1000.1 1214.61 L1000.69 1214.61 L1001.27 1214.61 L1001.86 1214.61 L1002.44 1214.61 L1003.03 1214.61 L1003.62 1214.61 L1004.2 1214.61 L1004.79 1214.61 L1005.38 1214.61 L1005.96 1214.61 L1006.55 1214.61 L1007.14 1214.61 L1007.72 1214.61 L1008.31 1214.61 L1008.9 1214.61 L1009.48 1214.61 L1010.07 1214.61 L1010.65 1214.61 L1011.24 1214.61 L1011.83 1214.61 L1012.41 1214.61 L1013 1214.61 L1013.59 1214.61 L1014.17 1214.61 L1014.76 1214.61 L1015.35 1214.61 L1015.93 1214.61 L1016.52 1214.61 L1017.11 1214.61 L1017.69 1214.61 L1018.28 1214.61 L1018.86 1214.61 L1019.45 1214.61 L1020.04 1214.61 L1020.62 1214.61 L1021.21 1214.61 L1021.8 1214.61 L1022.38 1214.61 L1022.97 1214.61 L1023.56 1214.61 L1024.14 1214.61 L1024.73 1214.61 L1025.32 1214.61 L1025.9 1214.61 L1026.49 1214.61 L1027.07 1214.61 L1027.66 1214.61 L1028.25 1214.61 L1028.83 1214.61 L1029.42 1214.61 L1030.01 1214.61 L1030.59 1214.61 L1031.18 1214.61 L1031.77 1214.61 L1032.35 1214.61 L1032.94 1214.61 L1033.52 1214.61 L1034.11 1214.61 L1034.7 1214.61 L1035.28 1214.61 L1035.87 1214.61 L1036.46 1214.61 L1037.04 1214.61 L1037.63 1214.61 L1038.22 1214.61 L1038.8 1214.61 L1039.39 1214.61 L1039.98 1214.61 L1040.56 1214.61 L1041.15 1214.61 L1041.73 1214.61 L1042.32 1214.61 L1042.91 1214.61 L1043.49 1214.61 L1044.08 1214.61 L1044.67 1214.61 L1045.25 1214.61 L1045.84 1214.61 L1046.43 1214.61 L1047.01 1214.61 L1047.6 1214.61 L1048.19 1214.61 L1048.77 1214.61 L1049.36 1214.61 L1049.94 1214.61 L1050.53 1214.61 L1051.12 1214.61 L1051.7 1214.61 L1052.29 1214.61 L1052.88 1214.61 L1053.46 1214.61 L1054.05 1214.61 L1054.64 1214.61 L1055.22 1214.61 L1055.81 1214.61 L1056.39 1214.61 L1056.98 1214.61 L1057.57 1214.61 L1058.15 1214.61 L1058.74 1214.61 L1059.33 1214.61 L1059.91 1214.61 L1060.5 1214.61 L1061.09 1214.61 L1061.67 1214.61 L1062.26 1214.61 L1062.85 1214.61 L1063.43 1214.61 L1064.02 1214.61 L1064.6 1214.61 L1065.19 1214.61 L1065.78 1214.61 L1066.36 1214.61 L1066.95 1214.61 L1067.54 1214.61 L1068.12 1214.61 L1068.71 1214.61 L1069.3 1214.61 L1069.88 1214.61 L1070.47 1214.61 L1071.06 1214.61 L1071.64 1214.61 L1072.23 1214.61 L1072.81 1214.61 L1073.4 1214.61 L1073.99 1214.61 L1074.57 1214.61 L1075.16 1214.61 L1075.75 1214.61 L1076.33 1214.61 L1076.92 1214.61 L1077.51 1214.61 L1078.09 1214.61 L1078.68 1214.61 L1079.26 1214.61 L1079.85 1214.61 L1080.44 1214.61 L1081.02 1214.61 L1081.61 1214.61 L1082.2 1214.61 L1082.78 1214.61 L1083.37 1214.61 L1083.96 1214.61 L1084.54 1214.61 L1085.13 1214.61 L1085.72 1214.61 L1086.3 1214.61 L1086.89 1214.61 L1087.47 1214.61 L1088.06 1214.61 L1088.65 1214.61 L1089.23 1214.61 L1089.82 1214.61 L1090.41 1214.61 L1090.99 1214.61 L1091.58 1214.61 L1092.17 1214.61 L1092.75 1214.61 L1093.34 1214.61 L1093.93 1214.61 L1094.51 1214.61 L1095.1 1214.61 L1095.68 1214.61 L1096.27 1214.61 L1096.86 1214.61 L1097.44 1214.61 L1098.03 1214.61 L1098.62 1214.61 L1099.2 1214.61 L1099.79 1214.61 L1100.38 1214.61 L1100.96 1214.61 L1101.55 1214.61 L1102.14 1214.61 L1102.72 1214.61 L1103.31 1214.61 L1103.89 1214.61 L1104.48 1214.61 L1105.07 1214.61 L1105.65 1214.61 L1106.24 1214.61 L1106.83 1214.61 L1107.41 1214.61 L1108 1214.61 L1108.59 1214.61 L1109.17 1214.61 L1109.76 1214.61 L1110.34 1214.61 L1110.93 1214.61 L1111.52 1214.61 L1112.1 1214.61 L1112.69 1214.61 L1113.28 1214.61 L1113.86 1214.61 L1114.45 1214.61 L1115.04 1214.61 L1115.62 1214.61 L1116.21 1214.61 L1116.8 1214.61 L1117.38 1214.61 L1117.97 1214.61 L1118.55 1214.61 L1119.14 1214.61 L1119.73 1214.61 L1120.31 1214.61 L1120.9 1214.61 L1121.49 1214.61 L1122.07 1214.61 L1122.66 1214.61 L1123.25 1214.61 L1123.83 1214.61 L1124.42 1214.61 L1125.01 1214.61 L1125.59 1214.61 L1126.18 1214.61 L1126.76 1214.61 L1127.35 1214.61 L1127.94 1214.61 L1128.52 1214.61 L1129.11 1214.61 L1129.7 1214.61 L1130.28 1214.61 L1130.87 1214.61 L1131.46 1214.61 L1132.04 1214.61 L1132.63 1214.61 L1133.21 1214.61 L1133.8 1214.61 L1134.39 1214.61 L1134.97 1214.61 L1135.56 1214.61 L1136.15 1214.61 L1136.73 1214.61 L1137.32 1214.61 L1137.91 1214.61 L1138.49 1214.61 L1139.08 1214.61 L1139.67 1214.61 L1140.25 1214.61 L1140.84 1214.61 L1141.42 1214.61 L1142.01 1214.61 L1142.6 1214.61 L1143.18 1214.61 L1143.77 1214.61 L1144.36 1214.61 L1144.94 1214.61 L1145.53 1214.61 L1146.12 1214.61 L1146.7 1214.61 L1147.29 1214.61 L1147.88 1214.61 L1148.46 1214.61 L1149.05 1214.61 L1149.63 1214.61 L1150.22 1214.61 L1150.81 1214.61 L1151.39 1214.61 L1151.98 1214.61 L1152.57 1214.61 L1153.15 1214.61 L1153.74 1214.61 L1154.33 1214.61 L1154.91 1214.61 L1155.5 1214.61 L1156.09 1214.61 L1156.67 1214.61 L1157.26 1214.61 L1157.84 1214.61 L1158.43 1214.61 L1159.02 1214.61 L1159.6 1214.61 L1160.19 1214.61 L1160.78 1214.61 L1161.36 1214.61 L1161.95 1214.61 L1162.54 1214.61 L1163.12 1214.61 L1163.71 1214.61 L1164.29 1214.61 L1164.88 1214.61 L1165.47 1214.61 L1166.05 1214.61 L1166.64 1214.61 L1167.23 1214.61 L1167.81 1214.61 L1168.4 1214.61 L1168.99 1214.61 L1169.57 1214.61 L1170.16 1214.61 L1170.75 1214.61 L1171.33 1214.61 L1171.92 1214.61 L1172.5 1214.61 L1173.09 1214.61 L1173.68 1214.61 L1174.26 1214.61 L1174.85 1214.61 L1175.44 1214.61 L1176.02 1214.61 L1176.61 1214.61 L1177.2 1214.61 L1177.78 1214.61 L1178.37 1214.61 L1178.96 1214.61 L1179.54 1214.61 L1180.13 1214.61 L1180.71 1214.61 L1181.3 1214.61 L1181.89 1214.61 L1182.47 1214.61 L1183.06 1214.61 L1183.65 1214.61 L1184.23 1214.61 L1184.82 1214.61 L1185.41 1214.61 L1185.99 1214.61 L1186.58 1214.61 L1187.16 1214.61 L1187.75 1214.61 L1188.34 1214.61 L1188.92 1214.61 L1189.51 1214.61 L1190.1 1214.61 L1190.68 1214.61 L1191.27 1214.61 L1191.86 1214.61 L1192.44 1214.61 L1193.03 1214.61 L1193.62 1214.61 L1194.2 1214.61 L1194.79 1214.61 L1195.37 1214.61 L1195.96 1214.61 L1196.55 1214.61 L1197.13 1214.61 L1197.72 1214.61 L1198.31 1214.61 L1198.89 1214.61 L1199.48 1214.61 L1200.07 1214.61 L1200.65 1214.61 L1201.24 1214.61 L1201.83 1214.61 L1202.41 1214.61 L1203 1214.61 L1203.58 1214.61 L1204.17 1214.61 L1204.76 1214.61 L1205.34 1214.61 L1205.93 1214.61 L1206.52 1214.61 L1207.1 1214.61 L1207.69 1214.61 L1208.28 1214.61 L1208.86 1214.61 L1209.45 1214.61 L1210.03 1214.61 L1210.62 1214.61 L1211.21 1214.61 L1211.79 1214.61 L1212.38 1214.61 L1212.97 1214.61 L1213.55 1214.61 L1214.14 1214.61 L1214.73 1214.61 L1215.31 1214.61 L1215.9 1214.61 L1216.49 1214.61 L1217.07 1214.61 L1217.66 1214.61 L1218.24 1214.61 L1218.83 1214.61 L1219.42 1214.61 L1220 1214.61 L1220.59 1214.61 L1221.18 1214.61 L1221.76 1214.61 L1222.35 1214.61 L1222.94 1214.61 L1223.52 1214.61 L1224.11 1214.61 L1224.7 1214.61 L1225.28 1214.61 L1225.87 1214.61 L1226.45 1214.61 L1227.04 1214.61 L1227.63 1214.61 L1228.21 1214.61 L1228.8 1214.61 L1229.39 1214.61 L1229.97 1214.61 L1230.56 1214.61 L1231.15 1214.61 L1231.73 1214.61 L1232.32 1214.61 L1232.91 1214.61 L1233.49 1214.61 L1234.08 1214.61 L1234.66 1214.61 L1235.25 1214.61 L1235.84 1214.61 L1236.42 1214.61 L1237.01 1214.61 L1237.6 1214.61 L1238.18 1214.61 L1238.77 1214.61 L1239.36 1214.61 L1239.94 1214.61 L1240.53 1214.61 L1241.11 1214.61 L1241.7 1214.61 L1242.29 1214.61 L1242.87 1214.61 L1243.46 1214.61 L1244.05 1214.61 L1244.63 1214.61 L1245.22 1214.61 L1245.81 1214.61 L1246.39 1214.61 L1246.98 1214.61 L1247.57 1214.61 L1248.15 1214.61 L1248.74 1214.61 L1249.32 1214.61 L1249.91 1214.61 L1250.5 1214.61 L1251.08 1214.61 L1251.67 1214.61 L1252.26 1214.61 L1252.84 1214.61 L1253.43 1214.61 L1254.02 1214.61 L1254.6 1214.61 L1255.19 1214.61 L1255.78 1214.61 L1256.36 1214.61 L1256.95 1214.61 L1257.53 1214.61 L1258.12 1214.61 L1258.71 1214.61 L1259.29 1214.61 L1259.88 1214.61 L1260.47 1214.61 L1261.05 1214.61 L1261.64 1214.61 L1262.23 1214.61 L1262.81 1214.61 L1263.4 1214.61 L1263.98 1214.61 L1264.57 1214.61 L1265.16 1214.61 L1265.74 1214.61 L1266.33 1214.61 L1266.92 1214.61 L1267.5 1214.61 L1268.09 1214.61 L1268.68 1214.61 L1269.26 1214.61 L1269.85 1214.61 L1270.44 1214.61 L1271.02 1214.61 L1271.61 1214.61 L1272.19 1214.61 L1272.78 1214.61 L1273.37 1214.61 L1273.95 1214.61 L1274.54 1214.61 L1275.13 1214.61 L1275.71 1214.61 L1276.3 1214.61 L1276.89 1214.61 L1277.47 1214.61 L1278.06 1214.61 L1278.65 1214.61 L1279.23 1214.61 L1279.82 1214.61 L1280.4 1214.61 L1280.99 1214.61 L1281.58 1214.61 L1282.16 1214.61 L1282.75 1214.61 L1283.34 1214.61 L1283.92 1214.61 L1284.51 1214.61 L1285.1 1214.61 L1285.68 1214.61 L1286.27 1214.61 L1286.86 1214.61 L1287.44 1214.61 L1288.03 1214.61 L1288.61 1214.61 L1289.2 1214.61 L1289.79 1214.61 L1290.37 1214.61 L1290.96 1214.61 L1291.55 1214.61 L1292.13 1214.61 L1292.72 1214.61 L1293.31 1214.61 L1293.89 1214.61 L1294.48 1214.61 L1295.06 1214.61 L1295.65 1214.61 L1296.24 1214.61 L1296.82 1214.61 L1297.41 1214.61 L1298 1214.61 L1298.58 1214.61 L1299.17 1214.61 L1299.76 1214.61 L1300.34 1214.61 L1300.93 1214.61 L1301.52 1214.61 L1302.1 1214.61 L1302.69 1214.61 L1303.27 1214.61 L1303.86 1214.61 L1304.45 1214.61 L1305.03 1214.61 L1305.62 1214.61 L1306.21 1214.61 L1306.79 1214.61 L1307.38 1214.61 L1307.97 1214.61 L1308.55 1214.61 L1309.14 1214.61 L1309.73 1214.61 L1310.31 1214.61 L1310.9 1214.61 L1311.48 1214.61 L1312.07 1214.61 L1312.66 1214.61 L1313.24 1214.61 L1313.83 1214.61 L1314.42 1214.61 L1315 1214.61 L1315.59 1214.61 L1316.18 1214.61 L1316.76 1214.61 L1317.35 1214.61 L1317.93 1214.61 L1318.52 1214.61 L1319.11 1214.61 L1319.69 1214.61 L1320.28 1214.61 L1320.87 1214.61 L1321.45 1214.61 L1322.04 1214.61 L1322.63 1214.61 L1323.21 1214.61 L1323.8 1214.61 L1324.39 1214.61 L1324.97 1214.61 L1325.56 1214.61 L1326.14 1214.61 L1326.73 1214.61 L1327.32 1214.61 L1327.9 1214.61 L1328.49 1214.61 L1329.08 1214.61 L1329.66 1214.61 L1330.25 1214.61 L1330.84 1214.61 L1331.42 1214.61 L1332.01 1214.61 L1332.6 1214.61 L1333.18 1214.61 L1333.77 1214.61 L1334.35 1214.61 L1334.94 1214.61 L1335.53 1214.61 L1336.11 1214.61 L1336.7 1214.61 L1337.29 1214.61 L1337.87 1214.61 L1338.46 1214.61 L1339.05 1214.61 L1339.63 1214.61 L1340.22 1214.61 L1340.8 1214.61 L1341.39 1214.61 L1341.98 1214.61 L1342.56 1214.61 L1343.15 1214.61 L1343.74 1214.61 L1344.32 1214.61 L1344.91 1214.61 L1345.5 1214.61 L1346.08 1214.61 L1346.67 1214.61 L1347.26 1214.61 L1347.84 1214.61 L1348.43 1214.61 L1349.01 1214.61 L1349.6 1214.61 L1350.19 1214.61 L1350.77 1214.61 L1351.36 1214.61 L1351.95 1214.61 L1352.53 1214.61 L1353.12 1214.61 L1353.71 1214.61 L1354.29 1214.61 L1354.88 1214.61 L1355.47 1214.61 L1356.05 1214.61 L1356.64 1214.61 L1357.22 1214.61 L1357.81 1214.61 L1358.4 1214.61 L1358.98 1214.61 L1359.57 1214.61 L1360.16 1214.61 L1360.74 1214.61 L1361.33 1214.61 L1361.92 1214.61 L1362.5 1214.61 L1363.09 1214.61 L1363.68 1214.61 L1364.26 1214.61 L1364.85 1214.61 L1365.43 1214.61 L1366.02 1214.61 L1366.61 1214.61 L1367.19 1214.61 L1367.78 1214.61 L1368.37 1214.61 L1368.95 1214.61 L1369.54 1214.61 L1370.13 1214.61 L1370.71 1214.61 L1371.3 1214.61 L1371.88 1214.61 L1372.47 1214.61 L1373.06 1214.61 L1373.64 1214.61 L1374.23 1214.61 L1374.82 1214.61 L1375.4 1214.61 L1375.99 1214.61 L1376.58 1214.61 L1377.16 1214.61 L1377.75 1214.61 L1378.34 1214.61 L1378.92 1214.61 L1379.51 1214.61 L1380.09 1214.61 L1380.68 1214.61 L1381.27 1214.61 L1381.85 1214.61 L1382.44 1214.61 L1383.03 1214.61 L1383.61 1214.61 L1384.2 1214.61 L1384.79 1214.61 L1385.37 1214.61 L1385.96 1214.61 L1386.55 1214.61 L1387.13 1214.61 L1387.72 1214.61 L1388.3 1214.61 L1388.89 1214.61 L1389.48 1214.61 L1390.06 1214.61 L1390.65 1214.61 L1391.24 1214.61 L1391.82 1214.61 L1392.41 1214.61 L1393 1214.61 L1393.58 1214.61 L1394.17 1214.61 L1394.75 1214.61 L1395.34 1214.61 L1395.93 1214.61 L1396.51 1214.61 L1397.1 1214.61 L1397.69 1214.61 L1398.27 1214.61 L1398.86 1214.61 L1399.45 1214.61 L1400.03 1214.61 L1400.62 1214.61 L1401.21 1214.61 L1401.79 1214.61 L1402.38 1214.61 L1402.96 1214.61 L1403.55 1214.61 L1404.14 1214.61 L1404.72 1214.61 L1405.31 1214.61 L1405.9 1214.61 L1406.48 1214.61 L1407.07 1214.61 L1407.66 1214.61 L1408.24 1214.61 L1408.83 1214.61 L1409.42 1214.61 L1410 1214.61 L1410.59 1214.61 L1411.17 1214.61 L1411.76 1214.61 L1412.35 1214.61 L1412.93 1214.61 L1413.52 1214.61 L1414.11 1214.61 L1414.69 1214.61 L1415.28 1214.61 L1415.87 1214.61 L1416.45 1214.61 L1417.04 1214.61 L1417.63 1214.61 L1418.21 1214.61 L1418.8 1214.61 L1419.38 1214.61 L1419.97 1214.61 L1420.56 1214.61 L1421.14 1214.61 L1421.73 1214.61 L1422.32 1214.61 L1422.9 1214.61 L1423.49 1214.61 L1424.08 1214.61 L1424.66 1214.61 L1425.25 1214.61 L1425.83 1214.61 L1426.42 1214.61 L1427.01 1214.61 L1427.59 1214.61 L1428.18 1214.61 L1428.77 1214.61 L1429.35 1214.61 L1429.94 1214.61 L1430.53 1214.61 L1431.11 1214.61 L1431.7 1214.61 L1432.29 1214.61 L1432.87 1214.61 L1433.46 1214.61 L1434.04 1214.61 L1434.63 1214.61 L1435.22 1214.61 L1435.8 1214.61 L1436.39 1214.61 L1436.98 1214.61 L1437.56 1214.61 L1438.15 1214.61 L1438.74 1214.61 L1439.32 1214.61 L1439.91 1214.61 L1440.5 1214.61 L1441.08 1214.61 L1441.67 1214.61 L1442.25 1214.61 L1442.84 1214.61 L1443.43 1214.61 L1444.01 1214.61 L1444.6 1214.61 L1445.19 1214.61 L1445.77 1214.61 L1446.36 1214.61 L1446.95 1214.61 L1447.53 1214.61 L1448.12 1214.61 L1448.7 1214.61 L1449.29 1214.61 L1449.88 1214.61 L1450.46 1214.61 L1451.05 1214.61 L1451.64 1214.61 L1452.22 1214.61 L1452.81 1214.61 L1453.4 1214.61 L1453.98 1214.61 L1454.57 1214.61 L1455.16 1214.61 L1455.74 1214.61 L1456.33 1214.61 L1456.91 1214.61 L1457.5 1214.61 L1458.09 1214.61 L1458.67 1214.61 L1459.26 1214.61 L1459.85 1214.61 L1460.43 1214.61 L1461.02 1214.61 L1461.61 1214.61 L1462.19 1214.61 L1462.78 1214.61 L1463.37 1214.61 L1463.95 1214.61 L1464.54 1214.61 L1465.12 1214.61 L1465.71 1214.61 L1466.3 1214.61 L1466.88 1214.61 L1467.47 1214.61 L1468.06 1214.61 L1468.64 1214.61 L1469.23 1214.61 L1469.82 1214.61 L1470.4 1214.61 L1470.99 1214.61 L1471.57 1214.61 L1472.16 1214.61 L1472.75 1214.61 L1473.33 1214.61 L1473.92 1214.61 L1474.51 1214.61 L1475.09 1214.61 L1475.68 1214.61 L1476.27 1214.61 L1476.85 1214.61 L1477.44 1214.61 L1478.03 1214.61 L1478.61 1214.61 L1479.2 1214.61 L1479.78 1214.61 L1480.37 1214.61 L1480.96 1214.61 L1481.54 1214.61 L1482.13 1214.61 L1482.72 1214.61 L1483.3 1214.61 L1483.89 1214.61 L1484.48 1214.61 L1485.06 1214.61 L1485.65 1214.61 L1486.24 1214.61 L1486.82 1214.61 L1487.41 1214.61 L1487.99 1214.61 L1488.58 1214.61 L1489.17 1214.61 L1489.75 1214.61 L1490.34 1214.61 L1490.93 1214.61 L1491.51 1214.61 L1492.1 1214.61 L1492.69 1214.61 L1493.27 1214.61 L1493.86 1214.61 L1494.45 1214.61 L1495.03 1214.61 L1495.62 1214.61 L1496.2 1214.61 L1496.79 1214.61 L1497.38 1214.61 L1497.96 1214.61 L1498.55 1214.61 L1499.14 1214.61 L1499.72 1214.61 L1500.31 1214.61 L1500.9 1214.61 L1501.48 1214.61 L1502.07 1214.61 L1502.65 1214.61 L1503.24 1214.61 L1503.83 1214.61 L1504.41 1214.61 L1505 1214.61 L1505.59 1214.61 L1506.17 1214.61 L1506.76 1214.61 L1507.35 1214.61 L1507.93 1214.61 L1508.52 1214.61 L1509.11 1214.61 L1509.69 1214.61 L1510.28 1214.61 L1510.86 1214.61 L1511.45 1214.61 L1512.04 1214.61 L1512.62 1214.61 L1513.21 1214.61 L1513.8 1214.61 L1514.38 1214.61 L1514.97 1214.61 L1515.56 1214.61 L1516.14 1214.61 L1516.73 1214.61 L1517.32 1214.61 L1517.9 1214.61 L1518.49 1214.61 L1519.07 1214.61 L1519.66 1214.61 L1520.25 1214.61 L1520.83 1214.61 L1521.42 1214.61 L1522.01 1214.61 L1522.59 1214.61 L1523.18 1214.61 L1523.77 1214.61 L1524.35 1214.61 L1524.94 1214.61 L1525.52 1214.61 L1526.11 1214.61 L1526.7 1214.61 L1527.28 1214.61 L1527.87 1214.61 L1528.46 1214.61 L1529.04 1214.61 L1529.63 1214.61 L1530.22 1214.61 L1530.8 1214.61 L1531.39 1214.61 L1531.98 1214.61 L1532.56 1214.61 L1533.15 1214.61 L1533.73 1214.61 L1534.32 1214.61 L1534.91 1214.61 L1535.49 1214.61 L1536.08 1214.61 L1536.67 1214.61 L1537.25 1214.61 L1537.84 1214.61 L1538.43 1214.61 L1539.01 1214.61 L1539.6 1214.61 L1540.19 1214.61 L1540.77 1214.61 L1541.36 1214.61 L1541.94 1214.61 L1542.53 1214.61 L1543.12 1214.61 L1543.7 1214.61 L1544.29 1214.61 L1544.88 1214.61 L1545.46 1214.61 L1546.05 1214.61 L1546.64 1214.61 L1547.22 1214.61 L1547.81 1214.61 L1548.4 1214.61 L1548.98 1214.61 L1549.57 1214.61 L1550.15 1214.61 L1550.74 1214.61 L1551.33 1214.61 L1551.91 1214.61 L1552.5 1214.61 L1553.09 1214.61 L1553.67 1214.61 L1554.26 1214.61 L1554.85 1214.61 L1555.43 1214.61 L1556.02 1214.61 L1556.6 1214.61 L1557.19 1214.61 L1557.78 1214.61 L1558.36 1214.61 L1558.95 1214.61 L1559.54 1214.61 L1560.12 1214.61 L1560.71 1214.61 L1561.3 1214.61 L1561.88 1214.61 L1562.47 1214.61 L1563.06 1214.61 L1563.64 1214.61 L1564.23 1214.61 L1564.81 1214.61 L1565.4 1214.61 L1565.99 1214.61 L1566.57 1214.61 L1567.16 1214.61 L1567.75 1214.61 L1568.33 1214.61 L1568.92 1214.61 L1569.51 1214.61 L1570.09 1214.61 L1570.68 1214.61 L1571.27 1214.61 L1571.85 1214.61 L1572.44 1214.61 L1573.02 1214.61 L1573.61 1214.61 L1574.2 1214.61 L1574.78 1214.61 L1575.37 1214.61 L1575.96 1214.61 L1576.54 1214.61 L1577.13 1214.61 L1577.72 1214.61 L1578.3 1214.61 L1578.89 1214.61 L1579.47 1214.61 L1580.06 1214.61 L1580.65 1214.61 L1581.23 1214.61 L1581.82 1214.61 L1582.41 1214.61 L1582.99 1214.61 L1583.58 1214.61 L1584.17 1214.61 L1584.75 1214.61 L1585.34 1214.61 L1585.93 1214.61 L1586.51 1214.61 L1587.1 1214.61 L1587.68 1214.61 L1588.27 1214.61 L1588.86 1214.61 L1589.44 1214.61 L1590.03 1214.61 L1590.62 1214.61 L1591.2 1214.61 L1591.79 1214.61 L1592.38 1214.61 L1592.96 1214.61 L1593.55 1214.61 L1594.14 1214.61 L1594.72 1214.61 L1595.31 1214.61 L1595.89 1214.61 L1596.48 1214.61 L1597.07 1214.61 L1597.65 1214.61 L1598.24 1214.61 L1598.83 1214.61 L1599.41 1214.61 L1600 1214.61 L1600.59 1214.61 L1601.17 1214.61 L1601.76 1214.61 L1602.34 1214.61 L1602.93 1214.61 L1603.52 1214.61 L1604.1 1214.61 L1604.69 1214.61 L1605.28 1214.61 L1605.86 1214.61 L1606.45 1214.61 L1607.04 1214.61 L1607.62 1214.61 L1608.21 1214.61 L1608.8 1214.61 L1609.38 1214.61 L1609.97 1214.61 L1610.55 1214.61 L1611.14 1214.61 L1611.73 1214.61 L1612.31 1214.61 L1612.9 1214.61 L1613.49 1214.61 L1614.07 1214.61 L1614.66 1214.61 L1615.25 1214.61 L1615.83 1214.61 L1616.42 1214.61 L1617.01 1214.61 L1617.59 1214.61 L1618.18 1214.61 L1618.76 1214.61 L1619.35 1214.61 L1619.94 1214.61 L1620.52 1214.61 L1621.11 1214.61 L1621.7 1214.61 L1622.28 1214.61 L1622.87 1214.61 L1623.46 1214.61 L1624.04 1214.61 L1624.63 1214.61 L1625.22 1214.61 L1625.8 1214.61 L1626.39 1214.61 L1626.97 1214.61 L1627.56 1214.61 L1628.15 1214.61 L1628.73 1214.61 L1629.32 1214.61 L1629.91 1214.61 L1630.49 1214.61 L1631.08 1214.61 L1631.67 1214.61 L1632.25 1214.61 L1632.84 1214.61 L1633.42 1214.61 L1634.01 1214.61 L1634.6 1214.61 L1635.18 1214.61 L1635.77 1214.61 L1636.36 1214.61 L1636.94 1214.61 L1637.53 1214.61 L1638.12 1214.61 L1638.7 1214.61 L1639.29 1214.61 L1639.88 1214.61 L1640.46 1214.61 L1641.05 1214.61 L1641.63 1214.61 L1642.22 1214.61 L1642.81 1214.61 L1643.39 1214.61 L1643.98 1214.61 L1644.57 1214.61 L1645.15 1214.61 L1645.74 1214.61 L1646.33 1214.61 L1646.91 1214.61 L1647.5 1214.61 L1648.09 1214.61 L1648.67 1214.61 L1649.26 1214.61 L1649.84 1214.61 L1650.43 1214.61 L1651.02 1214.61 L1651.6 1214.61 L1652.19 1214.61 L1652.78 1214.61 L1653.36 1214.61 L1653.95 1214.61 L1654.54 1214.61 L1655.12 1214.61 L1655.71 1214.61 L1656.29 1214.61 L1656.88 1214.61 L1657.47 1214.61 L1658.05 1214.61 L1658.64 1214.61 L1659.23 1214.61 L1659.81 1214.61 L1660.4 1214.61 L1660.99 1214.61 L1661.57 1214.61 L1662.16 1214.61 L1662.75 1214.61 L1663.33 1214.61 L1663.92 1214.61 L1664.5 1214.61 L1665.09 1214.61 L1665.68 1214.61 L1666.26 1214.61 L1666.85 1214.61 L1667.44 1214.61 L1668.02 1214.61 L1668.61 1214.61 L1669.2 1214.61 L1669.78 1214.61 L1670.37 1214.61 L1670.96 1214.61 L1671.54 1214.61 L1672.13 1214.61 L1672.71 1214.61 L1673.3 1214.61 L1673.89 1214.61 L1674.47 1214.61 L1675.06 1214.61 L1675.65 1214.61 L1676.23 1214.61 L1676.82 1214.61 L1677.41 1214.61 L1677.99 1214.61 L1678.58 1214.61 L1679.17 1214.61 L1679.75 1214.61 L1680.34 1214.61 L1680.92 1214.61 L1681.51 1214.61 L1682.1 1214.61 L1682.68 1214.61 L1683.27 1214.61 L1683.86 1214.61 L1684.44 1214.61 L1685.03 1214.61 L1685.62 1214.61 L1686.2 1214.61 L1686.79 1214.61 L1687.37 1214.61 L1687.96 1214.61 L1688.55 1214.61 L1689.13 1214.61 L1689.72 1214.61 L1690.31 1214.61 L1690.89 1214.61 L1691.48 1214.61 L1692.07 1214.61 L1692.65 1214.61 L1693.24 1214.61 L1693.83 1214.61 L1694.41 1214.61 L1695 1214.61 L1695.58 1214.61 L1696.17 1214.61 L1696.76 1214.61 L1697.34 1214.61 L1697.93 1214.61 L1698.52 1214.61 L1699.1 1214.61 L1699.69 1214.61 L1700.28 1214.61 L1700.86 1214.61 L1701.45 1214.61 L1702.04 1214.61 L1702.62 1214.61 L1703.21 1214.61 L1703.79 1214.61 L1704.38 1214.61 L1704.97 1214.61 L1705.55 1214.61 L1706.14 1214.61 L1706.73 1214.61 L1707.31 1214.61 L1707.9 1214.61 L1708.49 1214.61 L1709.07 1214.61 L1709.66 1214.61 L1710.24 1214.61 L1710.83 1214.61 L1711.42 1214.61 L1712 1214.61 L1712.59 1214.61 L1713.18 1214.61 L1713.76 1214.61 L1714.35 1214.61 L1714.94 1214.61 L1715.52 1214.61 L1716.11 1214.61 L1716.7 1214.61 L1717.28 1214.61 L1717.87 1214.61 L1718.45 1214.61 L1719.04 1214.61 L1719.63 1214.61 L1720.21 1214.61 L1720.8 1214.61 L1721.39 1214.61 L1721.97 1214.61 L1722.56 1214.61 L1723.15 1214.61 L1723.73 1214.61 L1724.32 1214.61 L1724.91 1214.61 L1725.49 1214.61 L1726.08 1214.61 L1726.66 1214.61 L1727.25 1214.61 L1727.84 1214.61 L1728.42 1214.61 L1729.01 1214.61 L1729.6 1214.61 L1730.18 1214.61 L1730.77 1214.61 L1731.36 1214.61 L1731.94 1214.61 L1732.53 1214.61 L1733.11 1214.61 L1733.7 1214.61 L1734.29 1214.61 L1734.87 1214.61 L1735.46 1214.61 L1736.05 1214.61 L1736.63 1214.61 L1737.22 1214.61 L1737.81 1214.61 L1738.39 1214.61 L1738.98 1214.61 L1739.57 1214.61 L1740.15 1214.61 L1740.74 1214.61 L1741.32 1214.61 L1741.91 1214.61 L1742.5 1214.61 L1743.08 1214.61 L1743.67 1214.61 L1744.26 1214.61 L1744.84 1214.61 L1745.43 1214.61 L1746.02 1214.61 L1746.6 1214.61 L1747.19 1214.61 L1747.78 1214.61 L1748.36 1214.61 L1748.95 1214.61 L1749.53 1214.61 L1750.12 1214.61 L1750.71 1214.61 L1751.29 1214.61 L1751.88 1214.61 L1752.47 1214.61 L1753.05 1214.61 L1753.64 1214.61 L1754.23 1214.61 L1754.81 1214.61 L1755.4 1214.61 L1755.99 1214.61 L1756.57 1214.61 L1757.16 1214.61 L1757.74 1214.61 L1758.33 1214.61 L1758.92 1214.61 L1759.5 1214.61 L1760.09 1214.61 L1760.68 1214.61 L1761.26 1214.61 L1761.85 1214.61 L1762.44 1214.61 L1763.02 1214.61 L1763.61 1214.61 L1764.19 1214.61 L1764.78 1214.61 L1765.37 1214.61 L1765.95 1214.61 L1766.54 1214.61 L1767.13 1214.61 L1767.71 1214.61 L1768.3 1214.61 L1768.89 1214.61 L1769.47 1214.61 L1770.06 1214.61 L1770.65 1214.61 L1771.23 1214.61 L1771.82 1214.61 L1772.4 1214.61 L1772.99 1214.61 L1773.58 1214.61 L1774.16 1214.61 L1774.75 1214.61 L1775.34 1214.61 L1775.92 1214.61 L1776.51 1214.61 L1777.1 1214.61 L1777.68 1214.61 L1778.27 1214.61 L1778.86 1214.61 L1779.44 1214.61 L1780.03 1214.61 L1780.61 1214.61 L1781.2 1214.61 L1781.79 1214.61 L1782.37 1214.61 L1782.96 1214.61 L1783.55 1214.61 L1784.13 1214.61 L1784.72 1214.61 L1785.31 1214.61 L1785.89 1214.61 L1786.48 1214.61 L1787.06 1214.61 L1787.65 1214.61 L1788.24 1214.61 L1788.82 1214.61 L1789.41 1214.61 L1790 1214.61 L1790.58 1214.61 L1791.17 1214.61 L1791.76 1214.61 L1792.34 1214.61 L1792.93 1214.61 L1793.52 1214.61 L1794.1 1214.61 L1794.69 1214.61 L1795.27 1214.61 L1795.86 1214.61 L1796.45 1214.61 L1797.03 1214.61 L1797.62 1214.61 L1798.21 1214.61 L1798.79 1214.61 L1799.38 1214.61 L1799.97 1214.61 L1800.55 1214.61 L1801.14 1214.61 L1801.73 1214.61 L1802.31 1214.61 L1802.9 1214.61 L1803.48 1214.61 L1804.07 1214.61 L1804.66 1214.61 L1805.24 1214.61 L1805.83 1214.61 L1806.42 1214.61 L1807 1214.61 L1807.59 1214.61 L1808.18 1214.61 L1808.76 1214.61 L1809.35 1214.61 L1809.94 1214.61 L1810.52 1214.61 L1811.11 1214.61 L1811.69 1214.61 L1812.28 1214.61 L1812.87 1214.61 L1813.45 1214.61 L1814.04 1214.61 L1814.63 1214.61 L1815.21 1214.61 L1815.8 1214.61 L1816.39 1214.61 L1816.97 1214.61 L1817.56 1214.61 L1818.14 1214.61 L1818.73 1214.61 L1819.32 1214.61 L1819.9 1214.61 L1820.49 1214.61 L1821.08 1214.61 L1821.66 1214.61 L1822.25 1214.61 L1822.84 1214.61 L1823.42 1214.61 L1824.01 1214.61 L1824.6 1214.61 L1825.18 1214.61 L1825.77 1214.61 L1826.35 1214.61 L1826.94 1214.61 L1827.53 1214.61 L1828.11 1214.61 L1828.7 1214.61 L1829.29 1214.61 L1829.87 1214.61 L1830.46 1214.61 L1831.05 1214.61 L1831.63 1214.61 L1832.22 1214.61 L1832.81 1214.61 L1833.39 1214.61 L1833.98 1214.61 L1834.56 1214.61 L1835.15 1214.61 L1835.74 1214.61 L1836.32 1214.61 L1836.91 1214.61 L1837.5 1214.61 L1838.08 1214.61 L1838.67 1214.61 L1839.26 1214.61 L1839.84 1214.61 L1840.43 1214.61 L1841.01 1214.61 L1841.6 1214.61 L1842.19 1214.61 L1842.77 1214.61 L1843.36 1214.61 L1843.95 1214.61 L1844.53 1214.61 L1845.12 1214.61 L1845.71 1214.61 L1846.29 1214.61 L1846.88 1214.61 L1847.47 1214.61 L1848.05 1214.61 L1848.64 1214.61 L1849.22 1214.61 L1849.81 1214.61 L1850.4 1214.61 L1850.98 1214.61 L1851.57 1214.61 L1852.16 1214.61 L1852.74 1214.61 L1853.33 1214.61 L1853.92 1214.61 L1854.5 1214.61 L1855.09 1214.61 L1855.68 1214.61 L1856.26 1214.61 L1856.85 1214.61 L1857.43 1214.61 L1858.02 1214.61 L1858.61 1214.61 L1859.19 1214.61 L1859.78 1214.61 L1860.37 1214.61 L1860.95 1214.61 L1861.54 1214.61 L1862.13 1214.61 L1862.71 1214.61 L1863.3 1214.61 L1863.88 1214.61 L1864.47 1214.61 L1865.06 1214.61 L1865.64 1214.61 L1866.23 1214.61 L1866.82 1214.61 L1867.4 1214.61 L1867.99 1214.61 L1868.58 1214.61 L1869.16 1214.61 L1869.75 1214.61 L1870.34 1214.61 L1870.92 1214.61 L1871.51 1214.61 L1872.09 1214.61 L1872.68 1214.61 L1873.27 1214.61 L1873.85 1214.61 L1874.44 1214.61 L1875.03 1214.61 L1875.61 1214.61 L1876.2 1214.61 L1876.79 1214.61 L1877.37 1214.61 L1877.96 1214.61 L1878.55 1214.61 L1879.13 1214.61 L1879.72 1214.61 L1880.3 1214.61 L1880.89 1214.61 L1881.48 1214.61 L1882.06 1214.61 L1882.65 1214.61 L1883.24 1214.61 L1883.82 1214.61 L1884.41 1214.61 L1885 1214.61 L1885.58 1214.61 L1886.17 1214.61 L1886.76 1214.61 L1887.34 1214.61 L1887.93 1214.61 L1888.51 1214.61 L1889.1 1214.61 L1889.69 1214.61 L1890.27 1214.61 L1890.86 1214.61 L1891.45 1214.61 L1892.03 1214.61 L1892.62 1214.61 L1893.21 1214.61 L1893.79 1214.61 L1894.38 1214.61 L1894.96 1214.61 L1895.55 1214.61 L1896.14 1214.61 L1896.72 1214.61 L1897.31 1214.61 L1897.9 1214.61 L1898.48 1214.61 L1899.07 1214.61 L1899.66 1214.61 L1900.24 1214.61 L1900.83 1214.61 L1901.42 1214.61 L1902 1214.61 L1902.59 1214.61 L1903.17 1214.61 L1903.76 1214.61 L1904.35 1214.61 L1904.93 1214.61 L1905.52 1214.61 L1906.11 1214.61 L1906.69 1214.61 L1907.28 1214.61 L1907.87 1214.61 L1908.45 1214.61 L1909.04 1214.61 L1909.63 1214.61 L1910.21 1214.61 L1910.8 1214.61 L1911.38 1214.61 L1911.97 1214.61 L1912.56 1214.61 L1913.14 1214.61 L1913.73 1214.61 L1914.32 1214.61 L1914.9 1214.61 L1915.49 1214.61 L1916.08 1214.61 L1916.66 1214.61 L1917.25 1214.61 L1917.83 1214.61 L1918.42 1214.61 L1919.01 1214.61 L1919.59 1214.61 L1920.18 1214.61 L1920.77 1214.61 L1921.35 1214.61 L1921.94 1214.61 L1922.53 1214.61 L1923.11 1214.61 L1923.7 1214.61 L1924.29 1214.61 L1924.87 1214.61 L1925.46 1214.61 L1926.04 1214.61 L1926.63 1214.61 L1927.22 1214.61 L1927.8 1214.61 L1928.39 1214.61 L1928.98 1214.61 L1929.56 1214.61 L1930.15 1214.61 L1930.74 1214.61 L1931.32 1214.61 L1931.91 1214.61 L1932.5 1214.61 L1933.08 1214.61 L1933.67 1214.61 L1934.25 1214.61 L1934.84 1214.61 L1935.43 1214.61 L1936.01 1214.61 L1936.6 1214.61 L1937.19 1214.61 L1937.77 1214.61 L1938.36 1214.61 L1938.95 1214.61 L1939.53 1214.61 L1940.12 1214.61 L1940.71 1214.61 L1941.29 1214.61 L1941.88 1214.61 L1942.46 1214.61 L1943.05 1214.61 L1943.64 1214.61 L1944.22 1214.61 L1944.81 1214.61 L1945.4 1214.61 L1945.98 1214.61 L1946.57 1214.61 L1947.16 1214.61 L1947.74 1214.61 L1948.33 1214.61 L1948.91 1214.61 L1949.5 1214.61 L1950.09 1214.61 L1950.67 1214.61 L1951.26 1214.61 L1951.85 1214.61 L1952.43 1214.61 L1953.02 1214.61 L1953.61 1214.61 L1954.19 1214.61 L1954.78 1214.61 L1955.37 1214.61 L1955.95 1214.61 L1956.54 1214.61 L1957.12 1214.61 L1957.71 1214.61 L1958.3 1214.61 L1958.88 1214.61 L1959.47 1214.61 L1960.06 1214.61 L1960.64 1214.61 L1961.23 1214.61 L1961.82 1214.61 L1962.4 1214.61 L1962.99 1214.61 L1963.58 1214.61 L1964.16 1214.61 L1964.75 1214.61 L1965.33 1214.61 L1965.92 1214.61 L1966.51 1214.61 L1967.09 1214.61 L1967.68 1214.61 L1968.27 1214.61 L1968.85 1214.61 L1969.44 1214.61 L1970.03 1214.61 L1970.61 1214.61 L1971.2 1214.61 L1971.78 1214.61 L1972.37 1214.61 L1972.96 1214.61 L1973.54 1214.61 L1974.13 1214.61 L1974.72 1214.61 L1975.3 1214.61 L1975.89 1214.61 L1976.48 1214.61 L1977.06 1214.61 L1977.65 1214.61 L1978.24 1214.61 L1978.82 1214.61 L1979.41 1214.61 L1979.99 1214.61 L1980.58 1214.61 L1981.17 1214.61 L1981.75 1214.61 L1982.34 1214.61 L1982.93 1214.61 L1983.51 1214.61 L1984.1 1214.61 L1984.69 1214.61 L1985.27 1214.61 L1985.86 1214.61 L1986.45 1214.61 L1987.03 1214.61 L1987.62 1214.61 L1988.2 1214.61 L1988.79 1214.61 L1989.38 1214.61 L1989.96 1214.61 L1990.55 1214.61 L1991.14 1214.61 L1991.72 1214.61 L1992.31 1214.61 L1992.9 1214.61 L1993.48 1214.61 L1994.07 1214.61 L1994.65 1214.61 L1995.24 1214.61 L1995.83 1214.61 L1996.41 1214.61 L1997 1214.61 L1997.59 1214.61 L1998.17 1214.61 L1998.76 1214.61 L1999.35 1214.61 L1999.93 1214.61 L2000.52 1214.61 L2001.11 1214.61 L2001.69 1214.61 L2002.28 1214.61 L2002.86 1214.61 L2003.45 1214.61 L2004.04 1214.61 L2004.62 1214.61 L2005.21 1214.61 L2005.8 1214.61 L2006.38 1214.61 L2006.97 1214.61 L2007.56 1214.61 L2008.14 1214.61 L2008.73 1214.61 L2009.32 1214.61 L2009.9 1214.61 L2010.49 1214.61 L2011.07 1214.61 L2011.66 1214.61 L2012.25 1214.61 L2012.83 1214.61 L2013.42 1214.61 L2014.01 1214.61 L2014.59 1214.61 L2015.18 1214.61 L2015.77 1214.61 L2016.35 1214.61 L2016.94 1214.61 L2017.53 1214.61 L2018.11 1214.61 L2018.7 1214.61 L2019.28 1214.61 L2019.87 1214.61 L2020.46 1214.61 L2021.04 1214.61 L2021.63 1214.61 L2022.22 1214.61 L2022.8 1214.61 L2023.39 1214.61 L2023.98 1214.61 L2024.56 1214.61 L2025.15 1214.61 L2025.73 1214.61 L2026.32 1214.61 L2026.91 1214.61 L2027.49 1214.61 L2028.08 1214.61 L2028.67 1214.61 L2029.25 1214.61 L2029.84 1214.61 L2030.43 1214.61 L2031.01 1214.61 L2031.6 1214.61 L2032.19 1214.61 L2032.77 1214.61 L2033.36 1214.61 L2033.94 1214.61 L2034.53 1214.61 L2035.12 1214.61 L2035.7 1214.61 L2036.29 1214.61 L2036.88 1214.61 L2037.46 1214.61 L2038.05 1214.61 L2038.64 1214.61 L2039.22 1214.61 L2039.81 1214.61 L2040.4 1214.61 L2040.98 1214.61 L2041.57 1214.61 L2042.15 1214.61 L2042.74 1214.61 L2043.33 1214.61 L2043.91 1214.61 L2044.5 1214.61 L2045.09 1214.61 L2045.67 1214.61 L2046.26 1214.61 L2046.85 1214.61 L2047.43 1214.61 L2048.02 1214.61 L2048.6 1214.61 L2049.19 1214.61 L2049.78 1214.61 L2050.36 1214.61 L2050.95 1214.61 L2051.54 1214.61 L2052.12 1214.61 L2052.71 1214.61 L2053.3 1214.61 L2053.88 1214.61 L2054.47 1214.61 L2055.06 1214.61 L2055.64 1214.61 L2056.23 1214.61 L2056.81 1214.61 L2057.4 1214.61 L2057.99 1214.61 L2058.57 1214.61 L2059.16 1214.61 L2059.75 1214.61 L2060.33 1214.61 L2060.92 1214.61 L2061.51 1214.61 L2062.09 1214.61 L2062.68 1214.61 L2063.27 1214.61 L2063.85 1214.61 L2064.44 1214.61 L2065.02 1214.61 L2065.61 1214.61 L2066.2 1214.61 L2066.78 1214.61 L2067.37 1214.61 L2067.96 1214.61 L2068.54 1214.61 L2069.13 1214.61 L2069.72 1214.61 L2070.3 1214.61 L2070.89 1214.61 L2071.48 1214.61 L2072.06 1214.61 L2072.65 1214.61 L2073.23 1214.61 L2073.82 1214.61 L2074.41 1214.61 L2074.99 1214.61 L2075.58 1214.61 L2076.17 1214.61 L2076.75 1214.61 L2077.34 1214.61 L2077.93 1214.61 L2078.51 1214.61 L2079.1 1214.61 L2079.68 1214.61 L2080.27 1214.61 L2080.86 1214.61 L2081.44 1214.61 L2082.03 1214.61 L2082.62 1214.61 L2083.2 1214.61 L2083.79 1214.61 L2084.38 1214.61 L2084.96 1214.61 L2085.55 1214.61 L2086.14 1214.61 L2086.72 1214.61 L2087.31 1214.61 L2087.89 1214.61 L2088.48 1214.61 L2089.07 1214.61 L2089.65 1214.61 L2090.24 1214.61 L2090.83 1214.61 L2091.41 1214.61 L2092 1214.61 L2092.59 1214.61 L2093.17 1214.61 L2093.76 1214.61 L2094.35 1214.61 L2094.93 1214.61 L2095.52 1214.61 L2096.1 1214.61 L2096.69 1214.61 L2097.28 1214.61 L2097.86 1214.61 L2098.45 1214.61 L2099.04 1214.61 L2099.62 1214.61 L2100.21 1214.61 L2100.8 1214.61 L2101.38 1214.61 L2101.97 1214.61 L2102.55 1214.61 L2103.14 1214.61 L2103.73 1214.61 L2104.31 1214.61 L2104.9 1214.61 L2105.49 1214.61 L2106.07 1214.61 L2106.66 1214.61 L2107.25 1214.61 L2107.83 1214.61 L2108.42 1214.61 L2109.01 1214.61 L2109.59 1214.61 L2110.18 1214.61 L2110.76 1214.61 L2111.35 1214.61 L2111.94 1214.61 L2112.52 1214.61 L2113.11 1214.61 L2113.7 1214.61 L2114.28 1214.61 L2114.87 1214.61 L2115.46 1214.61 L2116.04 1214.61 L2116.63 1214.61 L2117.22 1214.61 L2117.8 1214.61 L2118.39 1214.61 L2118.97 1214.61 L2119.56 1214.61 L2120.15 1214.61 L2120.73 1214.61 L2121.32 1214.61 L2121.91 1214.61 L2122.49 1214.61 L2123.08 1214.61 L2123.67 1214.61 L2124.25 1214.61 L2124.84 1214.61 L2125.42 1214.61 L2126.01 1214.61 L2126.6 1214.61 L2127.18 1214.61 L2127.77 1214.61 L2128.36 1214.61 L2128.94 1214.61 L2129.53 1214.61 L2130.12 1214.61 L2130.7 1214.61 L2131.29 1214.61 L2131.88 1214.61 L2132.46 1214.61 L2133.05 1214.61 L2133.63 1214.61 L2134.22 1214.61 L2134.81 1214.61 L2135.39 1214.61 L2135.98 1214.61 L2136.57 1214.61 L2137.15 1214.61 L2137.74 1214.61 L2138.33 1214.61 L2138.91 1214.61 L2139.5 1214.61 L2140.09 1214.61 L2140.67 1214.61 L2141.26 1214.61 L2141.84 1214.61 L2142.43 1214.61 L2143.02 1214.61 L2143.6 1214.61 L2144.19 1214.61 L2144.78 1214.61 L2145.36 1214.61 L2145.95 1214.61 L2146.54 1214.61 L2147.12 1214.61 L2147.71 1214.61 L2148.3 1214.61 L2148.88 1214.61 L2149.47 1214.61 L2150.05 1214.61 L2150.64 1214.61 L2151.23 1214.61 L2151.81 1214.61 L2152.4 1214.61 L2152.99 1214.61 L2153.57 1214.61 L2154.16 1214.61 L2154.75 1214.61 L2155.33 1214.61 L2155.92 1214.61 L2156.5 1214.61 L2157.09 1214.61 L2157.68 1214.61 L2158.26 1214.61 L2158.26 1214.42 L2157.68 1214.42 L2157.09 1214.42 L2156.5 1214.42 L2155.92 1214.42 L2155.33 1214.42 L2154.75 1214.42 L2154.16 1214.42 L2153.57 1214.42 L2152.99 1214.42 L2152.4 1214.42 L2151.81 1214.42 L2151.23 1214.42 L2150.64 1214.42 L2150.05 1214.42 L2149.47 1214.42 L2148.88 1214.42 L2148.3 1214.42 L2147.71 1214.42 L2147.12 1214.42 L2146.54 1214.42 L2145.95 1214.42 L2145.36 1214.42 L2144.78 1214.42 L2144.19 1214.42 L2143.6 1214.42 L2143.02 1214.42 L2142.43 1214.42 L2141.84 1214.42 L2141.26 1214.42 L2140.67 1214.42 L2140.09 1214.42 L2139.5 1214.42 L2138.91 1214.42 L2138.33 1214.42 L2137.74 1214.42 L2137.15 1214.42 L2136.57 1214.42 L2135.98 1214.42 L2135.39 1214.42 L2134.81 1214.42 L2134.22 1214.42 L2133.63 1214.42 L2133.05 1214.42 L2132.46 1214.42 L2131.88 1214.42 L2131.29 1214.42 L2130.7 1214.42 L2130.12 1214.42 L2129.53 1214.42 L2128.94 1214.42 L2128.36 1214.42 L2127.77 1214.42 L2127.18 1214.42 L2126.6 1214.42 L2126.01 1214.42 L2125.42 1214.42 L2124.84 1214.42 L2124.25 1214.42 L2123.67 1214.42 L2123.08 1214.42 L2122.49 1214.42 L2121.91 1214.42 L2121.32 1214.42 L2120.73 1214.42 L2120.15 1214.42 L2119.56 1214.42 L2118.97 1214.42 L2118.39 1214.42 L2117.8 1214.42 L2117.22 1214.42 L2116.63 1214.42 L2116.04 1214.42 L2115.46 1214.42 L2114.87 1214.42 L2114.28 1214.42 L2113.7 1214.42 L2113.11 1214.42 L2112.52 1214.42 L2111.94 1214.42 L2111.35 1214.42 L2110.76 1214.42 L2110.18 1214.42 L2109.59 1214.42 L2109.01 1214.42 L2108.42 1214.42 L2107.83 1214.42 L2107.25 1214.42 L2106.66 1214.42 L2106.07 1214.42 L2105.49 1214.42 L2104.9 1214.42 L2104.31 1214.42 L2103.73 1214.42 L2103.14 1214.42 L2102.55 1214.42 L2101.97 1214.42 L2101.38 1214.42 L2100.8 1214.42 L2100.21 1214.42 L2099.62 1214.42 L2099.04 1214.42 L2098.45 1214.42 L2097.86 1214.42 L2097.28 1214.42 L2096.69 1214.42 L2096.1 1214.42 L2095.52 1214.42 L2094.93 1214.42 L2094.35 1214.42 L2093.76 1214.42 L2093.17 1214.42 L2092.59 1214.42 L2092 1214.42 L2091.41 1214.42 L2090.83 1214.42 L2090.24 1214.42 L2089.65 1214.42 L2089.07 1214.42 L2088.48 1214.42 L2087.89 1214.42 L2087.31 1214.42 L2086.72 1214.42 L2086.14 1214.42 L2085.55 1214.42 L2084.96 1214.42 L2084.38 1214.42 L2083.79 1214.42 L2083.2 1214.42 L2082.62 1214.42 L2082.03 1214.42 L2081.44 1214.42 L2080.86 1214.42 L2080.27 1214.42 L2079.68 1214.42 L2079.1 1214.42 L2078.51 1214.42 L2077.93 1214.42 L2077.34 1214.42 L2076.75 1214.42 L2076.17 1214.42 L2075.58 1214.42 L2074.99 1214.42 L2074.41 1214.42 L2073.82 1214.42 L2073.23 1214.42 L2072.65 1214.42 L2072.06 1214.42 L2071.48 1214.42 L2070.89 1214.42 L2070.3 1214.42 L2069.72 1214.42 L2069.13 1214.42 L2068.54 1214.42 L2067.96 1214.42 L2067.37 1214.42 L2066.78 1214.42 L2066.2 1214.42 L2065.61 1214.42 L2065.02 1214.42 L2064.44 1214.42 L2063.85 1214.42 L2063.27 1214.42 L2062.68 1214.42 L2062.09 1214.42 L2061.51 1214.42 L2060.92 1214.42 L2060.33 1214.42 L2059.75 1214.42 L2059.16 1214.42 L2058.57 1214.42 L2057.99 1214.42 L2057.4 1214.42 L2056.81 1214.42 L2056.23 1214.42 L2055.64 1214.42 L2055.06 1214.42 L2054.47 1214.42 L2053.88 1214.42 L2053.3 1214.42 L2052.71 1214.42 L2052.12 1214.42 L2051.54 1214.42 L2050.95 1214.42 L2050.36 1214.42 L2049.78 1214.42 L2049.19 1214.42 L2048.6 1214.42 L2048.02 1214.42 L2047.43 1214.42 L2046.85 1214.42 L2046.26 1214.42 L2045.67 1214.42 L2045.09 1214.42 L2044.5 1214.42 L2043.91 1214.42 L2043.33 1214.42 L2042.74 1214.42 L2042.15 1214.42 L2041.57 1214.42 L2040.98 1214.42 L2040.4 1214.42 L2039.81 1214.42 L2039.22 1214.42 L2038.64 1214.42 L2038.05 1214.42 L2037.46 1214.42 L2036.88 1214.42 L2036.29 1214.42 L2035.7 1214.42 L2035.12 1214.42 L2034.53 1214.42 L2033.94 1214.42 L2033.36 1214.42 L2032.77 1214.42 L2032.19 1214.42 L2031.6 1214.42 L2031.01 1214.42 L2030.43 1214.42 L2029.84 1214.42 L2029.25 1214.42 L2028.67 1214.42 L2028.08 1214.42 L2027.49 1214.42 L2026.91 1214.42 L2026.32 1214.42 L2025.73 1214.42 L2025.15 1214.42 L2024.56 1214.42 L2023.98 1214.42 L2023.39 1214.42 L2022.8 1214.42 L2022.22 1214.42 L2021.63 1214.42 L2021.04 1214.42 L2020.46 1214.42 L2019.87 1214.42 L2019.28 1214.42 L2018.7 1214.42 L2018.11 1214.42 L2017.53 1214.42 L2016.94 1214.42 L2016.35 1214.42 L2015.77 1214.42 L2015.18 1214.42 L2014.59 1214.42 L2014.01 1214.42 L2013.42 1214.42 L2012.83 1214.42 L2012.25 1214.42 L2011.66 1214.42 L2011.07 1214.42 L2010.49 1214.42 L2009.9 1214.42 L2009.32 1214.42 L2008.73 1214.42 L2008.14 1214.42 L2007.56 1214.42 L2006.97 1214.42 L2006.38 1214.42 L2005.8 1214.42 L2005.21 1214.42 L2004.62 1214.42 L2004.04 1214.42 L2003.45 1214.42 L2002.86 1214.42 L2002.28 1214.42 L2001.69 1214.42 L2001.11 1214.42 L2000.52 1214.42 L1999.93 1214.42 L1999.35 1214.42 L1998.76 1214.42 L1998.17 1214.42 L1997.59 1214.42 L1997 1214.42 L1996.41 1214.42 L1995.83 1214.42 L1995.24 1214.42 L1994.65 1214.42 L1994.07 1214.42 L1993.48 1214.42 L1992.9 1214.42 L1992.31 1214.42 L1991.72 1214.42 L1991.14 1214.42 L1990.55 1214.42 L1989.96 1214.42 L1989.38 1214.42 L1988.79 1214.42 L1988.2 1214.42 L1987.62 1214.42 L1987.03 1214.42 L1986.45 1214.42 L1985.86 1214.42 L1985.27 1214.42 L1984.69 1214.42 L1984.1 1214.42 L1983.51 1214.42 L1982.93 1214.42 L1982.34 1214.42 L1981.75 1214.42 L1981.17 1214.42 L1980.58 1214.42 L1979.99 1214.42 L1979.41 1214.42 L1978.82 1214.42 L1978.24 1214.42 L1977.65 1214.42 L1977.06 1214.42 L1976.48 1214.42 L1975.89 1214.42 L1975.3 1214.42 L1974.72 1214.42 L1974.13 1214.42 L1973.54 1214.42 L1972.96 1214.42 L1972.37 1214.42 L1971.78 1214.42 L1971.2 1214.42 L1970.61 1214.42 L1970.03 1214.42 L1969.44 1214.42 L1968.85 1214.42 L1968.27 1214.42 L1967.68 1214.42 L1967.09 1214.42 L1966.51 1214.42 L1965.92 1214.42 L1965.33 1214.42 L1964.75 1214.42 L1964.16 1214.42 L1963.58 1214.42 L1962.99 1214.42 L1962.4 1214.42 L1961.82 1214.42 L1961.23 1214.42 L1960.64 1214.42 L1960.06 1214.42 L1959.47 1214.42 L1958.88 1214.42 L1958.3 1214.42 L1957.71 1214.42 L1957.12 1214.42 L1956.54 1214.42 L1955.95 1214.42 L1955.37 1214.42 L1954.78 1214.42 L1954.19 1214.42 L1953.61 1214.42 L1953.02 1214.42 L1952.43 1214.42 L1951.85 1214.42 L1951.26 1214.42 L1950.67 1214.42 L1950.09 1214.42 L1949.5 1214.42 L1948.91 1214.42 L1948.33 1214.42 L1947.74 1214.42 L1947.16 1214.42 L1946.57 1214.42 L1945.98 1214.42 L1945.4 1214.42 L1944.81 1214.42 L1944.22 1214.42 L1943.64 1214.42 L1943.05 1214.42 L1942.46 1214.42 L1941.88 1214.42 L1941.29 1214.42 L1940.71 1214.42 L1940.12 1214.42 L1939.53 1214.42 L1938.95 1214.42 L1938.36 1214.42 L1937.77 1214.42 L1937.19 1214.42 L1936.6 1214.42 L1936.01 1214.42 L1935.43 1214.42 L1934.84 1214.42 L1934.25 1214.42 L1933.67 1214.42 L1933.08 1214.42 L1932.5 1214.42 L1931.91 1214.42 L1931.32 1214.42 L1930.74 1214.42 L1930.15 1214.42 L1929.56 1214.42 L1928.98 1214.42 L1928.39 1214.42 L1927.8 1214.42 L1927.22 1214.42 L1926.63 1214.42 L1926.04 1214.42 L1925.46 1214.42 L1924.87 1214.42 L1924.29 1214.42 L1923.7 1214.42 L1923.11 1214.42 L1922.53 1214.42 L1921.94 1214.42 L1921.35 1214.42 L1920.77 1214.42 L1920.18 1214.42 L1919.59 1214.42 L1919.01 1214.42 L1918.42 1214.42 L1917.83 1214.42 L1917.25 1214.42 L1916.66 1214.42 L1916.08 1214.42 L1915.49 1214.42 L1914.9 1214.42 L1914.32 1214.42 L1913.73 1214.42 L1913.14 1214.42 L1912.56 1214.42 L1911.97 1214.42 L1911.38 1214.42 L1910.8 1214.42 L1910.21 1214.42 L1909.63 1214.42 L1909.04 1214.42 L1908.45 1214.42 L1907.87 1214.42 L1907.28 1214.42 L1906.69 1214.42 L1906.11 1214.42 L1905.52 1214.42 L1904.93 1214.42 L1904.35 1214.42 L1903.76 1214.42 L1903.17 1214.42 L1902.59 1214.42 L1902 1214.42 L1901.42 1214.42 L1900.83 1214.42 L1900.24 1214.42 L1899.66 1214.42 L1899.07 1214.42 L1898.48 1214.42 L1897.9 1214.42 L1897.31 1214.42 L1896.72 1214.42 L1896.14 1214.42 L1895.55 1214.42 L1894.96 1214.42 L1894.38 1214.42 L1893.79 1214.42 L1893.21 1214.42 L1892.62 1214.42 L1892.03 1214.42 L1891.45 1214.42 L1890.86 1214.42 L1890.27 1214.42 L1889.69 1214.42 L1889.1 1214.42 L1888.51 1214.42 L1887.93 1214.42 L1887.34 1214.42 L1886.76 1214.42 L1886.17 1214.42 L1885.58 1214.42 L1885 1214.42 L1884.41 1214.42 L1883.82 1214.42 L1883.24 1214.42 L1882.65 1214.42 L1882.06 1214.42 L1881.48 1214.42 L1880.89 1214.42 L1880.3 1214.42 L1879.72 1214.42 L1879.13 1214.42 L1878.55 1214.42 L1877.96 1214.42 L1877.37 1214.42 L1876.79 1214.42 L1876.2 1214.42 L1875.61 1214.42 L1875.03 1214.42 L1874.44 1214.42 L1873.85 1214.42 L1873.27 1214.42 L1872.68 1214.42 L1872.09 1214.42 L1871.51 1214.42 L1870.92 1214.42 L1870.34 1214.42 L1869.75 1214.42 L1869.16 1214.42 L1868.58 1214.42 L1867.99 1214.42 L1867.4 1214.42 L1866.82 1214.42 L1866.23 1214.42 L1865.64 1214.42 L1865.06 1214.42 L1864.47 1214.42 L1863.88 1214.42 L1863.3 1214.42 L1862.71 1214.42 L1862.13 1214.42 L1861.54 1214.42 L1860.95 1214.42 L1860.37 1214.42 L1859.78 1214.42 L1859.19 1214.42 L1858.61 1214.42 L1858.02 1214.42 L1857.43 1214.42 L1856.85 1214.42 L1856.26 1214.42 L1855.68 1214.42 L1855.09 1214.42 L1854.5 1214.42 L1853.92 1214.42 L1853.33 1214.42 L1852.74 1214.42 L1852.16 1214.42 L1851.57 1214.42 L1850.98 1214.42 L1850.4 1214.42 L1849.81 1214.42 L1849.22 1214.42 L1848.64 1214.42 L1848.05 1214.42 L1847.47 1214.42 L1846.88 1214.42 L1846.29 1214.42 L1845.71 1214.42 L1845.12 1214.42 L1844.53 1214.42 L1843.95 1214.42 L1843.36 1214.42 L1842.77 1214.42 L1842.19 1214.42 L1841.6 1214.42 L1841.01 1214.42 L1840.43 1214.42 L1839.84 1214.42 L1839.26 1214.42 L1838.67 1214.42 L1838.08 1214.42 L1837.5 1214.42 L1836.91 1214.42 L1836.32 1214.42 L1835.74 1214.42 L1835.15 1214.42 L1834.56 1214.42 L1833.98 1214.42 L1833.39 1214.42 L1832.81 1214.42 L1832.22 1214.42 L1831.63 1214.42 L1831.05 1214.42 L1830.46 1214.42 L1829.87 1214.42 L1829.29 1214.42 L1828.7 1214.42 L1828.11 1214.42 L1827.53 1214.42 L1826.94 1214.42 L1826.35 1214.42 L1825.77 1214.42 L1825.18 1214.42 L1824.6 1214.42 L1824.01 1214.42 L1823.42 1214.42 L1822.84 1214.42 L1822.25 1214.42 L1821.66 1214.42 L1821.08 1214.42 L1820.49 1214.42 L1819.9 1214.42 L1819.32 1214.42 L1818.73 1214.42 L1818.14 1214.42 L1817.56 1214.42 L1816.97 1214.42 L1816.39 1214.42 L1815.8 1214.42 L1815.21 1214.42 L1814.63 1214.42 L1814.04 1214.42 L1813.45 1214.42 L1812.87 1214.42 L1812.28 1214.42 L1811.69 1214.42 L1811.11 1214.42 L1810.52 1214.42 L1809.94 1214.42 L1809.35 1214.42 L1808.76 1214.42 L1808.18 1214.42 L1807.59 1214.42 L1807 1214.42 L1806.42 1214.42 L1805.83 1214.42 L1805.24 1214.42 L1804.66 1214.42 L1804.07 1214.42 L1803.48 1214.42 L1802.9 1214.42 L1802.31 1214.42 L1801.73 1214.42 L1801.14 1214.42 L1800.55 1214.42 L1799.97 1214.42 L1799.38 1214.42 L1798.79 1214.42 L1798.21 1214.42 L1797.62 1214.42 L1797.03 1214.42 L1796.45 1214.42 L1795.86 1214.42 L1795.27 1214.42 L1794.69 1214.42 L1794.1 1214.42 L1793.52 1214.42 L1792.93 1214.42 L1792.34 1214.42 L1791.76 1214.42 L1791.17 1214.42 L1790.58 1214.42 L1790 1214.42 L1789.41 1214.42 L1788.82 1214.42 L1788.24 1214.42 L1787.65 1214.42 L1787.06 1214.42 L1786.48 1214.42 L1785.89 1214.42 L1785.31 1214.42 L1784.72 1214.42 L1784.13 1214.42 L1783.55 1214.42 L1782.96 1214.42 L1782.37 1214.42 L1781.79 1214.42 L1781.2 1214.42 L1780.61 1214.42 L1780.03 1214.42 L1779.44 1214.42 L1778.86 1214.42 L1778.27 1214.42 L1777.68 1214.42 L1777.1 1214.42 L1776.51 1214.42 L1775.92 1214.42 L1775.34 1214.42 L1774.75 1214.42 L1774.16 1214.42 L1773.58 1214.42 L1772.99 1214.42 L1772.4 1214.42 L1771.82 1214.42 L1771.23 1214.42 L1770.65 1214.42 L1770.06 1214.42 L1769.47 1214.42 L1768.89 1214.42 L1768.3 1214.42 L1767.71 1214.42 L1767.13 1214.42 L1766.54 1214.42 L1765.95 1214.42 L1765.37 1214.42 L1764.78 1214.42 L1764.19 1214.42 L1763.61 1214.42 L1763.02 1214.42 L1762.44 1214.42 L1761.85 1214.42 L1761.26 1214.42 L1760.68 1214.42 L1760.09 1214.42 L1759.5 1214.42 L1758.92 1214.42 L1758.33 1214.42 L1757.74 1214.42 L1757.16 1214.42 L1756.57 1214.42 L1755.99 1214.42 L1755.4 1214.42 L1754.81 1214.42 L1754.23 1214.42 L1753.64 1214.42 L1753.05 1214.42 L1752.47 1214.42 L1751.88 1214.42 L1751.29 1214.42 L1750.71 1214.42 L1750.12 1214.42 L1749.53 1214.42 L1748.95 1214.42 L1748.36 1214.42 L1747.78 1214.42 L1747.19 1214.42 L1746.6 1214.42 L1746.02 1214.42 L1745.43 1214.42 L1744.84 1214.42 L1744.26 1214.42 L1743.67 1214.42 L1743.08 1214.42 L1742.5 1214.42 L1741.91 1214.42 L1741.32 1214.42 L1740.74 1214.42 L1740.15 1214.42 L1739.57 1214.42 L1738.98 1214.42 L1738.39 1214.42 L1737.81 1214.42 L1737.22 1214.42 L1736.63 1214.42 L1736.05 1214.42 L1735.46 1214.42 L1734.87 1214.42 L1734.29 1214.42 L1733.7 1214.42 L1733.11 1214.42 L1732.53 1214.42 L1731.94 1214.42 L1731.36 1214.42 L1730.77 1214.42 L1730.18 1214.42 L1729.6 1214.42 L1729.01 1214.42 L1728.42 1214.42 L1727.84 1214.42 L1727.25 1214.42 L1726.66 1214.42 L1726.08 1214.42 L1725.49 1214.42 L1724.91 1214.42 L1724.32 1214.42 L1723.73 1214.42 L1723.15 1214.42 L1722.56 1214.42 L1721.97 1214.42 L1721.39 1214.42 L1720.8 1214.42 L1720.21 1214.42 L1719.63 1214.42 L1719.04 1214.42 L1718.45 1214.42 L1717.87 1214.42 L1717.28 1214.42 L1716.7 1214.42 L1716.11 1214.42 L1715.52 1214.42 L1714.94 1214.42 L1714.35 1214.42 L1713.76 1214.42 L1713.18 1214.42 L1712.59 1214.42 L1712 1214.42 L1711.42 1214.42 L1710.83 1214.42 L1710.24 1214.42 L1709.66 1214.42 L1709.07 1214.42 L1708.49 1214.42 L1707.9 1214.42 L1707.31 1214.42 L1706.73 1214.42 L1706.14 1214.42 L1705.55 1214.42 L1704.97 1214.42 L1704.38 1214.42 L1703.79 1214.42 L1703.21 1214.42 L1702.62 1214.42 L1702.04 1214.42 L1701.45 1214.42 L1700.86 1214.42 L1700.28 1214.42 L1699.69 1214.42 L1699.1 1214.42 L1698.52 1214.42 L1697.93 1214.42 L1697.34 1214.42 L1696.76 1214.42 L1696.17 1214.42 L1695.58 1214.42 L1695 1214.42 L1694.41 1214.42 L1693.83 1214.42 L1693.24 1214.42 L1692.65 1214.42 L1692.07 1214.42 L1691.48 1214.42 L1690.89 1214.42 L1690.31 1214.42 L1689.72 1214.42 L1689.13 1214.42 L1688.55 1214.42 L1687.96 1214.42 L1687.37 1214.42 L1686.79 1214.42 L1686.2 1214.42 L1685.62 1214.42 L1685.03 1214.42 L1684.44 1214.42 L1683.86 1214.42 L1683.27 1214.42 L1682.68 1214.42 L1682.1 1214.42 L1681.51 1214.42 L1680.92 1214.42 L1680.34 1214.42 L1679.75 1214.42 L1679.17 1214.42 L1678.58 1214.42 L1677.99 1214.42 L1677.41 1214.42 L1676.82 1214.42 L1676.23 1214.42 L1675.65 1214.42 L1675.06 1214.42 L1674.47 1214.42 L1673.89 1214.42 L1673.3 1214.42 L1672.71 1214.42 L1672.13 1214.42 L1671.54 1214.42 L1670.96 1214.42 L1670.37 1214.42 L1669.78 1214.42 L1669.2 1214.42 L1668.61 1214.42 L1668.02 1214.42 L1667.44 1214.42 L1666.85 1214.42 L1666.26 1214.42 L1665.68 1214.42 L1665.09 1214.42 L1664.5 1214.42 L1663.92 1214.42 L1663.33 1214.42 L1662.75 1214.42 L1662.16 1214.42 L1661.57 1214.42 L1660.99 1214.42 L1660.4 1214.42 L1659.81 1214.42 L1659.23 1214.42 L1658.64 1214.42 L1658.05 1214.42 L1657.47 1214.42 L1656.88 1214.42 L1656.29 1214.42 L1655.71 1214.42 L1655.12 1214.42 L1654.54 1214.42 L1653.95 1214.42 L1653.36 1214.42 L1652.78 1214.42 L1652.19 1214.42 L1651.6 1214.42 L1651.02 1214.42 L1650.43 1214.42 L1649.84 1214.42 L1649.26 1214.42 L1648.67 1214.42 L1648.09 1214.42 L1647.5 1214.42 L1646.91 1214.42 L1646.33 1214.42 L1645.74 1214.42 L1645.15 1214.42 L1644.57 1214.42 L1643.98 1214.42 L1643.39 1214.42 L1642.81 1214.42 L1642.22 1214.42 L1641.63 1214.42 L1641.05 1214.42 L1640.46 1214.42 L1639.88 1214.42 L1639.29 1214.42 L1638.7 1214.42 L1638.12 1214.42 L1637.53 1214.42 L1636.94 1214.42 L1636.36 1214.42 L1635.77 1214.42 L1635.18 1214.42 L1634.6 1214.42 L1634.01 1214.42 L1633.42 1214.42 L1632.84 1214.42 L1632.25 1214.42 L1631.67 1214.42 L1631.08 1214.42 L1630.49 1214.42 L1629.91 1214.42 L1629.32 1214.42 L1628.73 1214.42 L1628.15 1214.42 L1627.56 1214.42 L1626.97 1214.42 L1626.39 1214.42 L1625.8 1214.42 L1625.22 1214.42 L1624.63 1214.42 L1624.04 1214.42 L1623.46 1214.42 L1622.87 1214.42 L1622.28 1214.42 L1621.7 1214.42 L1621.11 1214.42 L1620.52 1214.42 L1619.94 1214.42 L1619.35 1214.42 L1618.76 1214.42 L1618.18 1214.42 L1617.59 1214.42 L1617.01 1214.42 L1616.42 1214.42 L1615.83 1214.42 L1615.25 1214.42 L1614.66 1214.42 L1614.07 1214.42 L1613.49 1214.42 L1612.9 1214.42 L1612.31 1214.42 L1611.73 1214.42 L1611.14 1214.42 L1610.55 1214.42 L1609.97 1214.42 L1609.38 1214.42 L1608.8 1214.42 L1608.21 1214.42 L1607.62 1214.42 L1607.04 1214.42 L1606.45 1214.42 L1605.86 1214.42 L1605.28 1214.42 L1604.69 1214.42 L1604.1 1214.42 L1603.52 1214.42 L1602.93 1214.42 L1602.34 1214.42 L1601.76 1214.42 L1601.17 1214.42 L1600.59 1214.42 L1600 1214.42 L1599.41 1214.42 L1598.83 1214.42 L1598.24 1214.42 L1597.65 1214.42 L1597.07 1214.42 L1596.48 1214.42 L1595.89 1214.42 L1595.31 1214.42 L1594.72 1214.42 L1594.14 1214.42 L1593.55 1214.42 L1592.96 1214.42 L1592.38 1214.42 L1591.79 1214.42 L1591.2 1214.42 L1590.62 1214.42 L1590.03 1214.42 L1589.44 1214.42 L1588.86 1214.42 L1588.27 1214.42 L1587.68 1214.42 L1587.1 1214.42 L1586.51 1214.42 L1585.93 1214.42 L1585.34 1214.42 L1584.75 1214.42 L1584.17 1214.42 L1583.58 1214.42 L1582.99 1214.42 L1582.41 1214.42 L1581.82 1214.42 L1581.23 1214.42 L1580.65 1214.42 L1580.06 1214.42 L1579.47 1214.42 L1578.89 1214.42 L1578.3 1214.42 L1577.72 1214.42 L1577.13 1214.42 L1576.54 1214.42 L1575.96 1214.42 L1575.37 1214.42 L1574.78 1214.42 L1574.2 1214.42 L1573.61 1214.42 L1573.02 1214.42 L1572.44 1214.42 L1571.85 1214.42 L1571.27 1214.42 L1570.68 1214.42 L1570.09 1214.42 L1569.51 1214.42 L1568.92 1214.42 L1568.33 1214.42 L1567.75 1214.42 L1567.16 1214.42 L1566.57 1214.42 L1565.99 1214.42 L1565.4 1214.42 L1564.81 1214.42 L1564.23 1214.42 L1563.64 1214.42 L1563.06 1214.42 L1562.47 1214.42 L1561.88 1214.42 L1561.3 1214.42 L1560.71 1214.42 L1560.12 1214.42 L1559.54 1214.42 L1558.95 1214.42 L1558.36 1214.42 L1557.78 1214.42 L1557.19 1214.42 L1556.6 1214.42 L1556.02 1214.42 L1555.43 1214.42 L1554.85 1214.42 L1554.26 1214.42 L1553.67 1214.42 L1553.09 1214.42 L1552.5 1214.42 L1551.91 1214.42 L1551.33 1214.42 L1550.74 1214.42 L1550.15 1214.42 L1549.57 1214.42 L1548.98 1214.42 L1548.4 1214.42 L1547.81 1214.42 L1547.22 1214.42 L1546.64 1214.42 L1546.05 1214.42 L1545.46 1214.42 L1544.88 1214.42 L1544.29 1214.42 L1543.7 1214.42 L1543.12 1214.42 L1542.53 1214.42 L1541.94 1214.42 L1541.36 1214.42 L1540.77 1214.42 L1540.19 1214.42 L1539.6 1214.42 L1539.01 1214.42 L1538.43 1214.42 L1537.84 1214.42 L1537.25 1214.42 L1536.67 1214.42 L1536.08 1214.42 L1535.49 1214.42 L1534.91 1214.42 L1534.32 1214.42 L1533.73 1214.42 L1533.15 1214.42 L1532.56 1214.42 L1531.98 1214.42 L1531.39 1214.42 L1530.8 1214.42 L1530.22 1214.42 L1529.63 1214.42 L1529.04 1214.42 L1528.46 1214.42 L1527.87 1214.42 L1527.28 1214.42 L1526.7 1214.42 L1526.11 1214.42 L1525.52 1214.42 L1524.94 1214.42 L1524.35 1214.42 L1523.77 1214.42 L1523.18 1214.42 L1522.59 1214.42 L1522.01 1214.42 L1521.42 1214.42 L1520.83 1214.42 L1520.25 1214.42 L1519.66 1214.42 L1519.07 1214.42 L1518.49 1214.42 L1517.9 1214.42 L1517.32 1214.42 L1516.73 1214.42 L1516.14 1214.42 L1515.56 1214.42 L1514.97 1214.42 L1514.38 1214.42 L1513.8 1214.42 L1513.21 1214.42 L1512.62 1214.42 L1512.04 1214.42 L1511.45 1214.42 L1510.86 1214.42 L1510.28 1214.42 L1509.69 1214.42 L1509.11 1214.42 L1508.52 1214.42 L1507.93 1214.42 L1507.35 1214.42 L1506.76 1214.42 L1506.17 1214.42 L1505.59 1214.42 L1505 1214.42 L1504.41 1214.42 L1503.83 1214.42 L1503.24 1214.42 L1502.65 1214.42 L1502.07 1214.42 L1501.48 1214.42 L1500.9 1214.42 L1500.31 1214.42 L1499.72 1214.42 L1499.14 1214.42 L1498.55 1214.42 L1497.96 1214.42 L1497.38 1214.42 L1496.79 1214.42 L1496.2 1214.42 L1495.62 1214.42 L1495.03 1214.42 L1494.45 1214.42 L1493.86 1214.42 L1493.27 1214.42 L1492.69 1214.42 L1492.1 1214.42 L1491.51 1214.42 L1490.93 1214.42 L1490.34 1214.42 L1489.75 1214.42 L1489.17 1214.42 L1488.58 1214.42 L1487.99 1214.42 L1487.41 1214.42 L1486.82 1214.42 L1486.24 1214.42 L1485.65 1214.42 L1485.06 1214.42 L1484.48 1214.42 L1483.89 1214.42 L1483.3 1214.42 L1482.72 1214.42 L1482.13 1214.42 L1481.54 1214.42 L1480.96 1214.42 L1480.37 1214.42 L1479.78 1214.42 L1479.2 1214.42 L1478.61 1214.42 L1478.03 1214.42 L1477.44 1214.42 L1476.85 1214.42 L1476.27 1214.42 L1475.68 1214.42 L1475.09 1214.42 L1474.51 1214.42 L1473.92 1214.42 L1473.33 1214.42 L1472.75 1214.42 L1472.16 1214.42 L1471.57 1214.42 L1470.99 1214.42 L1470.4 1214.42 L1469.82 1214.42 L1469.23 1214.42 L1468.64 1214.42 L1468.06 1214.42 L1467.47 1214.42 L1466.88 1214.42 L1466.3 1214.42 L1465.71 1214.42 L1465.12 1214.42 L1464.54 1214.42 L1463.95 1214.42 L1463.37 1214.42 L1462.78 1214.42 L1462.19 1214.42 L1461.61 1214.42 L1461.02 1214.42 L1460.43 1214.42 L1459.85 1214.42 L1459.26 1214.42 L1458.67 1214.42 L1458.09 1214.42 L1457.5 1214.42 L1456.91 1214.42 L1456.33 1214.42 L1455.74 1214.42 L1455.16 1214.42 L1454.57 1214.42 L1453.98 1214.42 L1453.4 1214.42 L1452.81 1214.42 L1452.22 1214.42 L1451.64 1214.42 L1451.05 1214.42 L1450.46 1214.42 L1449.88 1214.42 L1449.29 1214.42 L1448.7 1214.42 L1448.12 1214.42 L1447.53 1214.42 L1446.95 1214.42 L1446.36 1214.42 L1445.77 1214.42 L1445.19 1214.42 L1444.6 1214.42 L1444.01 1214.42 L1443.43 1214.42 L1442.84 1214.42 L1442.25 1214.42 L1441.67 1214.42 L1441.08 1214.42 L1440.5 1214.42 L1439.91 1214.42 L1439.32 1214.42 L1438.74 1214.42 L1438.15 1214.42 L1437.56 1214.42 L1436.98 1214.42 L1436.39 1214.42 L1435.8 1214.42 L1435.22 1214.42 L1434.63 1214.42 L1434.04 1214.42 L1433.46 1214.42 L1432.87 1214.42 L1432.29 1214.42 L1431.7 1214.42 L1431.11 1214.42 L1430.53 1214.42 L1429.94 1214.42 L1429.35 1214.42 L1428.77 1214.42 L1428.18 1214.42 L1427.59 1214.42 L1427.01 1214.42 L1426.42 1214.42 L1425.83 1214.42 L1425.25 1214.42 L1424.66 1214.42 L1424.08 1214.42 L1423.49 1214.42 L1422.9 1214.42 L1422.32 1214.42 L1421.73 1214.42 L1421.14 1214.42 L1420.56 1214.42 L1419.97 1214.42 L1419.38 1214.42 L1418.8 1214.42 L1418.21 1214.42 L1417.63 1214.42 L1417.04 1214.42 L1416.45 1214.42 L1415.87 1214.42 L1415.28 1214.42 L1414.69 1214.42 L1414.11 1214.42 L1413.52 1214.42 L1412.93 1214.42 L1412.35 1214.42 L1411.76 1214.42 L1411.17 1214.42 L1410.59 1214.42 L1410 1214.42 L1409.42 1214.42 L1408.83 1214.42 L1408.24 1214.42 L1407.66 1214.42 L1407.07 1214.42 L1406.48 1214.42 L1405.9 1214.42 L1405.31 1214.42 L1404.72 1214.42 L1404.14 1214.42 L1403.55 1214.42 L1402.96 1214.42 L1402.38 1214.42 L1401.79 1214.42 L1401.21 1214.42 L1400.62 1214.42 L1400.03 1214.42 L1399.45 1214.42 L1398.86 1214.42 L1398.27 1214.42 L1397.69 1214.42 L1397.1 1214.42 L1396.51 1214.42 L1395.93 1214.42 L1395.34 1214.42 L1394.75 1214.42 L1394.17 1214.42 L1393.58 1214.42 L1393 1214.42 L1392.41 1214.42 L1391.82 1214.42 L1391.24 1214.42 L1390.65 1214.42 L1390.06 1214.42 L1389.48 1214.42 L1388.89 1214.42 L1388.3 1214.42 L1387.72 1214.42 L1387.13 1214.42 L1386.55 1214.42 L1385.96 1214.42 L1385.37 1214.42 L1384.79 1214.42 L1384.2 1214.42 L1383.61 1214.42 L1383.03 1214.42 L1382.44 1214.42 L1381.85 1214.42 L1381.27 1214.42 L1380.68 1214.42 L1380.09 1214.42 L1379.51 1214.42 L1378.92 1214.42 L1378.34 1214.42 L1377.75 1214.42 L1377.16 1214.42 L1376.58 1214.42 L1375.99 1214.42 L1375.4 1214.42 L1374.82 1214.42 L1374.23 1214.42 L1373.64 1214.42 L1373.06 1214.42 L1372.47 1214.42 L1371.88 1214.42 L1371.3 1214.42 L1370.71 1214.42 L1370.13 1214.42 L1369.54 1214.42 L1368.95 1214.42 L1368.37 1214.42 L1367.78 1214.42 L1367.19 1214.42 L1366.61 1214.42 L1366.02 1214.42 L1365.43 1214.42 L1364.85 1214.42 L1364.26 1214.42 L1363.68 1214.42 L1363.09 1214.42 L1362.5 1214.42 L1361.92 1214.42 L1361.33 1214.42 L1360.74 1214.42 L1360.16 1214.42 L1359.57 1214.42 L1358.98 1214.42 L1358.4 1214.42 L1357.81 1214.42 L1357.22 1214.42 L1356.64 1214.42 L1356.05 1214.42 L1355.47 1214.42 L1354.88 1214.42 L1354.29 1214.42 L1353.71 1214.42 L1353.12 1214.42 L1352.53 1214.42 L1351.95 1214.42 L1351.36 1214.42 L1350.77 1214.42 L1350.19 1214.42 L1349.6 1214.42 L1349.01 1214.42 L1348.43 1214.42 L1347.84 1214.42 L1347.26 1214.42 L1346.67 1214.42 L1346.08 1214.42 L1345.5 1214.42 L1344.91 1214.42 L1344.32 1214.42 L1343.74 1214.42 L1343.15 1214.42 L1342.56 1214.42 L1341.98 1214.42 L1341.39 1214.42 L1340.8 1214.42 L1340.22 1214.42 L1339.63 1214.42 L1339.05 1214.42 L1338.46 1214.42 L1337.87 1214.42 L1337.29 1214.42 L1336.7 1214.42 L1336.11 1214.42 L1335.53 1214.42 L1334.94 1214.42 L1334.35 1214.42 L1333.77 1214.42 L1333.18 1214.42 L1332.6 1214.42 L1332.01 1214.42 L1331.42 1214.42 L1330.84 1214.42 L1330.25 1214.42 L1329.66 1214.42 L1329.08 1214.42 L1328.49 1214.42 L1327.9 1214.42 L1327.32 1214.42 L1326.73 1214.42 L1326.14 1214.42 L1325.56 1214.42 L1324.97 1214.42 L1324.39 1214.42 L1323.8 1214.42 L1323.21 1214.42 L1322.63 1214.42 L1322.04 1214.42 L1321.45 1214.42 L1320.87 1214.42 L1320.28 1214.42 L1319.69 1214.42 L1319.11 1214.42 L1318.52 1214.42 L1317.93 1214.42 L1317.35 1214.42 L1316.76 1214.42 L1316.18 1214.42 L1315.59 1214.42 L1315 1214.42 L1314.42 1214.42 L1313.83 1214.42 L1313.24 1214.42 L1312.66 1214.42 L1312.07 1214.42 L1311.48 1214.42 L1310.9 1214.42 L1310.31 1214.42 L1309.73 1214.42 L1309.14 1214.42 L1308.55 1214.42 L1307.97 1214.42 L1307.38 1214.42 L1306.79 1214.42 L1306.21 1214.42 L1305.62 1214.42 L1305.03 1214.42 L1304.45 1214.42 L1303.86 1214.42 L1303.27 1214.42 L1302.69 1214.42 L1302.1 1214.42 L1301.52 1214.42 L1300.93 1214.42 L1300.34 1214.42 L1299.76 1214.42 L1299.17 1214.42 L1298.58 1214.42 L1298 1214.42 L1297.41 1214.42 L1296.82 1214.42 L1296.24 1214.42 L1295.65 1214.42 L1295.06 1214.42 L1294.48 1214.42 L1293.89 1214.42 L1293.31 1214.42 L1292.72 1214.42 L1292.13 1214.42 L1291.55 1214.42 L1290.96 1214.42 L1290.37 1214.42 L1289.79 1214.42 L1289.2 1214.42 L1288.61 1214.42 L1288.03 1214.42 L1287.44 1214.42 L1286.86 1214.42 L1286.27 1214.42 L1285.68 1214.42 L1285.1 1214.42 L1284.51 1214.42 L1283.92 1214.42 L1283.34 1214.42 L1282.75 1214.42 L1282.16 1214.42 L1281.58 1214.42 L1280.99 1214.42 L1280.4 1214.42 L1279.82 1214.42 L1279.23 1214.42 L1278.65 1214.42 L1278.06 1214.42 L1277.47 1214.42 L1276.89 1214.42 L1276.3 1214.42 L1275.71 1214.42 L1275.13 1214.42 L1274.54 1214.42 L1273.95 1214.42 L1273.37 1214.42 L1272.78 1214.42 L1272.19 1214.42 L1271.61 1214.42 L1271.02 1214.42 L1270.44 1214.42 L1269.85 1214.42 L1269.26 1214.42 L1268.68 1214.42 L1268.09 1214.42 L1267.5 1214.42 L1266.92 1214.42 L1266.33 1214.42 L1265.74 1214.42 L1265.16 1214.42 L1264.57 1214.42 L1263.98 1214.42 L1263.4 1214.42 L1262.81 1214.42 L1262.23 1214.42 L1261.64 1214.42 L1261.05 1214.42 L1260.47 1214.42 L1259.88 1214.42 L1259.29 1214.42 L1258.71 1214.42 L1258.12 1214.42 L1257.53 1214.42 L1256.95 1214.42 L1256.36 1214.42 L1255.78 1214.42 L1255.19 1214.42 L1254.6 1214.42 L1254.02 1214.42 L1253.43 1214.42 L1252.84 1214.42 L1252.26 1214.42 L1251.67 1214.42 L1251.08 1214.42 L1250.5 1214.42 L1249.91 1214.42 L1249.32 1214.42 L1248.74 1214.42 L1248.15 1214.42 L1247.57 1214.42 L1246.98 1214.42 L1246.39 1214.42 L1245.81 1214.42 L1245.22 1214.42 L1244.63 1214.42 L1244.05 1214.42 L1243.46 1214.42 L1242.87 1214.42 L1242.29 1214.42 L1241.7 1214.42 L1241.11 1214.42 L1240.53 1214.42 L1239.94 1214.42 L1239.36 1214.42 L1238.77 1214.42 L1238.18 1214.42 L1237.6 1214.42 L1237.01 1214.42 L1236.42 1214.42 L1235.84 1214.42 L1235.25 1214.42 L1234.66 1214.42 L1234.08 1214.42 L1233.49 1214.42 L1232.91 1214.42 L1232.32 1214.42 L1231.73 1214.42 L1231.15 1214.42 L1230.56 1214.42 L1229.97 1214.42 L1229.39 1214.42 L1228.8 1214.42 L1228.21 1214.42 L1227.63 1214.42 L1227.04 1214.42 L1226.45 1214.42 L1225.87 1214.42 L1225.28 1214.42 L1224.7 1214.42 L1224.11 1214.42 L1223.52 1214.42 L1222.94 1214.42 L1222.35 1214.42 L1221.76 1214.42 L1221.18 1214.42 L1220.59 1214.42 L1220 1214.42 L1219.42 1214.42 L1218.83 1214.42 L1218.24 1214.42 L1217.66 1214.42 L1217.07 1214.42 L1216.49 1214.42 L1215.9 1214.42 L1215.31 1214.42 L1214.73 1214.42 L1214.14 1214.42 L1213.55 1214.42 L1212.97 1214.42 L1212.38 1214.42 L1211.79 1214.42 L1211.21 1214.42 L1210.62 1214.42 L1210.03 1214.42 L1209.45 1214.42 L1208.86 1214.42 L1208.28 1214.42 L1207.69 1214.42 L1207.1 1214.42 L1206.52 1214.42 L1205.93 1214.42 L1205.34 1214.42 L1204.76 1214.42 L1204.17 1214.42 L1203.58 1214.42 L1203 1214.42 L1202.41 1214.42 L1201.83 1214.42 L1201.24 1214.42 L1200.65 1214.42 L1200.07 1214.42 L1199.48 1214.42 L1198.89 1214.42 L1198.31 1214.42 L1197.72 1214.42 L1197.13 1214.42 L1196.55 1214.42 L1195.96 1214.42 L1195.37 1214.42 L1194.79 1214.42 L1194.2 1214.42 L1193.62 1214.42 L1193.03 1214.42 L1192.44 1214.42 L1191.86 1214.42 L1191.27 1214.42 L1190.68 1214.42 L1190.1 1214.42 L1189.51 1214.42 L1188.92 1214.42 L1188.34 1214.42 L1187.75 1214.42 L1187.16 1214.42 L1186.58 1214.42 L1185.99 1214.42 L1185.41 1214.42 L1184.82 1214.42 L1184.23 1214.42 L1183.65 1214.42 L1183.06 1214.42 L1182.47 1214.42 L1181.89 1214.42 L1181.3 1214.42 L1180.71 1214.42 L1180.13 1214.42 L1179.54 1214.42 L1178.96 1214.42 L1178.37 1214.42 L1177.78 1214.42 L1177.2 1214.42 L1176.61 1214.42 L1176.02 1214.42 L1175.44 1214.42 L1174.85 1214.42 L1174.26 1214.42 L1173.68 1214.42 L1173.09 1214.42 L1172.5 1214.42 L1171.92 1214.42 L1171.33 1214.42 L1170.75 1214.42 L1170.16 1214.42 L1169.57 1214.42 L1168.99 1214.42 L1168.4 1214.42 L1167.81 1214.42 L1167.23 1214.42 L1166.64 1214.42 L1166.05 1214.42 L1165.47 1214.42 L1164.88 1214.42 L1164.29 1214.42 L1163.71 1214.42 L1163.12 1214.42 L1162.54 1214.42 L1161.95 1214.42 L1161.36 1214.42 L1160.78 1214.42 L1160.19 1214.42 L1159.6 1214.42 L1159.02 1214.42 L1158.43 1214.42 L1157.84 1214.42 L1157.26 1214.42 L1156.67 1214.42 L1156.09 1214.42 L1155.5 1214.42 L1154.91 1214.42 L1154.33 1214.42 L1153.74 1214.42 L1153.15 1214.42 L1152.57 1214.42 L1151.98 1214.42 L1151.39 1214.42 L1150.81 1214.42 L1150.22 1214.42 L1149.63 1214.42 L1149.05 1214.42 L1148.46 1214.42 L1147.88 1214.42 L1147.29 1214.42 L1146.7 1214.42 L1146.12 1214.42 L1145.53 1214.42 L1144.94 1214.42 L1144.36 1214.42 L1143.77 1214.42 L1143.18 1214.42 L1142.6 1214.42 L1142.01 1214.42 L1141.42 1214.42 L1140.84 1214.42 L1140.25 1214.42 L1139.67 1214.42 L1139.08 1214.42 L1138.49 1214.42 L1137.91 1214.42 L1137.32 1214.42 L1136.73 1214.42 L1136.15 1214.42 L1135.56 1214.42 L1134.97 1214.42 L1134.39 1214.42 L1133.8 1214.42 L1133.21 1214.42 L1132.63 1214.42 L1132.04 1214.42 L1131.46 1214.42 L1130.87 1214.42 L1130.28 1214.42 L1129.7 1214.42 L1129.11 1214.42 L1128.52 1214.42 L1127.94 1214.42 L1127.35 1214.42 L1126.76 1214.42 L1126.18 1214.42 L1125.59 1214.42 L1125.01 1214.42 L1124.42 1214.42 L1123.83 1214.42 L1123.25 1214.42 L1122.66 1214.42 L1122.07 1214.42 L1121.49 1214.42 L1120.9 1214.42 L1120.31 1214.42 L1119.73 1214.42 L1119.14 1214.42 L1118.55 1214.42 L1117.97 1214.42 L1117.38 1214.42 L1116.8 1214.42 L1116.21 1214.42 L1115.62 1214.42 L1115.04 1214.42 L1114.45 1214.42 L1113.86 1214.42 L1113.28 1214.42 L1112.69 1214.42 L1112.1 1214.42 L1111.52 1214.42 L1110.93 1214.42 L1110.34 1214.42 L1109.76 1214.42 L1109.17 1214.42 L1108.59 1214.42 L1108 1214.42 L1107.41 1214.42 L1106.83 1214.42 L1106.24 1214.42 L1105.65 1214.42 L1105.07 1214.42 L1104.48 1214.42 L1103.89 1214.42 L1103.31 1214.42 L1102.72 1214.42 L1102.14 1214.42 L1101.55 1214.42 L1100.96 1214.42 L1100.38 1214.42 L1099.79 1214.42 L1099.2 1214.42 L1098.62 1214.42 L1098.03 1214.42 L1097.44 1214.42 L1096.86 1214.42 L1096.27 1214.42 L1095.68 1214.42 L1095.1 1214.42 L1094.51 1214.42 L1093.93 1214.42 L1093.34 1214.42 L1092.75 1214.42 L1092.17 1214.42 L1091.58 1214.42 L1090.99 1214.42 L1090.41 1214.42 L1089.82 1214.42 L1089.23 1214.42 L1088.65 1214.42 L1088.06 1214.42 L1087.47 1214.42 L1086.89 1214.42 L1086.3 1214.42 L1085.72 1214.42 L1085.13 1214.42 L1084.54 1214.42 L1083.96 1214.42 L1083.37 1214.42 L1082.78 1214.42 L1082.2 1214.42 L1081.61 1214.42 L1081.02 1214.42 L1080.44 1214.42 L1079.85 1214.42 L1079.26 1214.42 L1078.68 1214.42 L1078.09 1214.42 L1077.51 1214.42 L1076.92 1214.42 L1076.33 1214.42 L1075.75 1214.42 L1075.16 1214.42 L1074.57 1214.42 L1073.99 1214.42 L1073.4 1214.42 L1072.81 1214.42 L1072.23 1214.42 L1071.64 1214.42 L1071.06 1214.42 L1070.47 1214.42 L1069.88 1214.42 L1069.3 1214.42 L1068.71 1214.42 L1068.12 1214.42 L1067.54 1214.42 L1066.95 1214.42 L1066.36 1214.42 L1065.78 1214.42 L1065.19 1214.42 L1064.6 1214.42 L1064.02 1214.42 L1063.43 1214.42 L1062.85 1214.42 L1062.26 1214.42 L1061.67 1214.42 L1061.09 1214.42 L1060.5 1214.42 L1059.91 1214.42 L1059.33 1214.42 L1058.74 1214.42 L1058.15 1214.42 L1057.57 1214.42 L1056.98 1214.42 L1056.39 1214.42 L1055.81 1214.42 L1055.22 1214.42 L1054.64 1214.42 L1054.05 1214.42 L1053.46 1214.42 L1052.88 1214.42 L1052.29 1214.42 L1051.7 1214.42 L1051.12 1214.42 L1050.53 1214.42 L1049.94 1214.42 L1049.36 1214.42 L1048.77 1214.42 L1048.19 1214.42 L1047.6 1214.42 L1047.01 1214.42 L1046.43 1214.42 L1045.84 1214.42 L1045.25 1214.42 L1044.67 1214.42 L1044.08 1214.42 L1043.49 1214.42 L1042.91 1214.42 L1042.32 1214.42 L1041.73 1214.42 L1041.15 1214.42 L1040.56 1214.42 L1039.98 1214.42 L1039.39 1214.42 L1038.8 1214.42 L1038.22 1214.42 L1037.63 1214.42 L1037.04 1214.42 L1036.46 1214.42 L1035.87 1214.42 L1035.28 1214.42 L1034.7 1214.42 L1034.11 1214.42 L1033.52 1214.42 L1032.94 1214.42 L1032.35 1214.42 L1031.77 1214.42 L1031.18 1214.42 L1030.59 1214.42 L1030.01 1214.42 L1029.42 1214.42 L1028.83 1214.42 L1028.25 1214.42 L1027.66 1214.42 L1027.07 1214.42 L1026.49 1214.42 L1025.9 1214.42 L1025.32 1214.42 L1024.73 1214.42 L1024.14 1214.42 L1023.56 1214.42 L1022.97 1214.42 L1022.38 1214.42 L1021.8 1214.42 L1021.21 1214.42 L1020.62 1214.42 L1020.04 1214.42 L1019.45 1214.42 L1018.86 1214.42 L1018.28 1214.42 L1017.69 1214.42 L1017.11 1214.42 L1016.52 1214.42 L1015.93 1214.42 L1015.35 1214.42 L1014.76 1214.42 L1014.17 1214.42 L1013.59 1214.42 L1013 1214.42 L1012.41 1214.42 L1011.83 1214.42 L1011.24 1214.42 L1010.65 1214.42 L1010.07 1214.42 L1009.48 1214.42 L1008.9 1214.42 L1008.31 1214.42 L1007.72 1214.42 L1007.14 1214.42 L1006.55 1214.42 L1005.96 1214.42 L1005.38 1214.42 L1004.79 1214.42 L1004.2 1214.42 L1003.62 1214.42 L1003.03 1214.42 L1002.44 1214.42 L1001.86 1214.42 L1001.27 1214.42 L1000.69 1214.42 L1000.1 1214.42 L999.513 1214.42 L998.926 1214.42 L998.34 1214.42 L997.754 1214.42 L997.167 1214.42 L996.581 1214.42 L995.994 1214.42 L995.408 1214.42 L994.822 1214.42 L994.235 1214.42 L993.649 1214.42 L993.062 1214.42 L992.476 1214.42 L991.889 1214.42 L991.303 1214.42 L990.717 1214.42 L990.13 1214.42 L989.544 1214.42 L988.957 1214.42 L988.371 1214.42 L987.785 1214.42 L987.198 1214.42 L986.612 1214.42 L986.025 1214.42  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.51 986.612,1214.51 987.198,1214.51 987.785,1214.51 988.371,1214.51 988.957,1214.51 989.544,1214.51 990.13,1214.51 990.717,1214.51 991.303,1214.51 991.889,1214.51 992.476,1214.51 993.062,1214.51 993.649,1214.51 994.235,1214.51 994.822,1214.51 995.408,1214.51 995.994,1214.51 996.581,1214.51 997.167,1214.51 997.754,1214.51 998.34,1214.51 998.926,1214.51 999.513,1214.51 1000.1,1214.51 1000.69,1214.51 1001.27,1214.51 1001.86,1214.51 1002.44,1214.51 1003.03,1214.51 1003.62,1214.51 1004.2,1214.51 1004.79,1214.51 1005.38,1214.51 1005.96,1214.51 1006.55,1214.51 1007.14,1214.51 1007.72,1214.51 1008.31,1214.51 1008.9,1214.51 1009.48,1214.51 1010.07,1214.51 1010.65,1214.51 1011.24,1214.51 1011.83,1214.51 1012.41,1214.51 1013,1214.51 1013.59,1214.51 1014.17,1214.51 1014.76,1214.51 1015.35,1214.51 1015.93,1214.51 1016.52,1214.51 1017.11,1214.51 1017.69,1214.51 1018.28,1214.51 1018.86,1214.51 1019.45,1214.51 1020.04,1214.51 1020.62,1214.51 1021.21,1214.51 1021.8,1214.51 1022.38,1214.51 1022.97,1214.51 1023.56,1214.51 1024.14,1214.51 1024.73,1214.51 1025.32,1214.51 1025.9,1214.51 1026.49,1214.51 1027.07,1214.51 1027.66,1214.51 1028.25,1214.51 1028.83,1214.51 1029.42,1214.51 1030.01,1214.51 1030.59,1214.51 1031.18,1214.51 1031.77,1214.51 1032.35,1214.51 1032.94,1214.51 1033.52,1214.51 1034.11,1214.51 1034.7,1214.51 1035.28,1214.51 1035.87,1214.51 1036.46,1214.51 1037.04,1214.51 1037.63,1214.51 1038.22,1214.51 1038.8,1214.51 1039.39,1214.51 1039.98,1214.51 1040.56,1214.51 1041.15,1214.51 1041.73,1214.51 1042.32,1214.51 1042.91,1214.51 1043.49,1214.51 1044.08,1214.51 1044.67,1214.51 1045.25,1214.51 1045.84,1214.51 1046.43,1214.51 1047.01,1214.51 1047.6,1214.51 1048.19,1214.51 1048.77,1214.51 1049.36,1214.51 1049.94,1214.51 1050.53,1214.51 1051.12,1214.51 1051.7,1214.51 1052.29,1214.51 1052.88,1214.51 1053.46,1214.51 1054.05,1214.51 1054.64,1214.51 1055.22,1214.51 1055.81,1214.51 1056.39,1214.51 1056.98,1214.51 1057.57,1214.51 1058.15,1214.51 1058.74,1214.51 1059.33,1214.51 1059.91,1214.51 1060.5,1214.51 1061.09,1214.51 1061.67,1214.51 1062.26,1214.51 1062.85,1214.51 1063.43,1214.51 1064.02,1214.51 1064.6,1214.51 1065.19,1214.51 1065.78,1214.51 1066.36,1214.51 1066.95,1214.51 1067.54,1214.51 1068.12,1214.51 1068.71,1214.51 1069.3,1214.51 1069.88,1214.51 1070.47,1214.51 1071.06,1214.51 1071.64,1214.51 1072.23,1214.51 1072.81,1214.51 1073.4,1214.51 1073.99,1214.51 1074.57,1214.51 1075.16,1214.51 1075.75,1214.51 1076.33,1214.51 1076.92,1214.51 1077.51,1214.51 1078.09,1214.51 1078.68,1214.51 1079.26,1214.51 1079.85,1214.51 1080.44,1214.51 1081.02,1214.51 1081.61,1214.51 1082.2,1214.51 1082.78,1214.51 1083.37,1214.51 1083.96,1214.51 1084.54,1214.51 1085.13,1214.51 1085.72,1214.51 1086.3,1214.51 1086.89,1214.51 1087.47,1214.51 1088.06,1214.51 1088.65,1214.51 1089.23,1214.51 1089.82,1214.51 1090.41,1214.51 1090.99,1214.51 1091.58,1214.51 1092.17,1214.51 1092.75,1214.51 1093.34,1214.51 1093.93,1214.51 1094.51,1214.51 1095.1,1214.51 1095.68,1214.51 1096.27,1214.51 1096.86,1214.51 1097.44,1214.51 1098.03,1214.51 1098.62,1214.51 1099.2,1214.51 1099.79,1214.51 1100.38,1214.51 1100.96,1214.51 1101.55,1214.51 1102.14,1214.51 1102.72,1214.51 1103.31,1214.51 1103.89,1214.51 1104.48,1214.51 1105.07,1214.51 1105.65,1214.51 1106.24,1214.51 1106.83,1214.51 1107.41,1214.51 1108,1214.51 1108.59,1214.51 1109.17,1214.51 1109.76,1214.51 1110.34,1214.51 1110.93,1214.51 1111.52,1214.51 1112.1,1214.51 1112.69,1214.51 1113.28,1214.51 1113.86,1214.51 1114.45,1214.51 1115.04,1214.51 1115.62,1214.51 1116.21,1214.51 1116.8,1214.51 1117.38,1214.51 1117.97,1214.51 1118.55,1214.51 1119.14,1214.51 1119.73,1214.51 1120.31,1214.51 1120.9,1214.51 1121.49,1214.51 1122.07,1214.51 1122.66,1214.51 1123.25,1214.51 1123.83,1214.51 1124.42,1214.51 1125.01,1214.51 1125.59,1214.51 1126.18,1214.51 1126.76,1214.51 1127.35,1214.51 1127.94,1214.51 1128.52,1214.51 1129.11,1214.51 1129.7,1214.51 1130.28,1214.51 1130.87,1214.51 1131.46,1214.51 1132.04,1214.51 1132.63,1214.51 1133.21,1214.51 1133.8,1214.51 1134.39,1214.51 1134.97,1214.51 1135.56,1214.51 1136.15,1214.51 1136.73,1214.51 1137.32,1214.51 1137.91,1214.51 1138.49,1214.51 1139.08,1214.51 1139.67,1214.51 1140.25,1214.51 1140.84,1214.51 1141.42,1214.51 1142.01,1214.51 1142.6,1214.51 1143.18,1214.51 1143.77,1214.51 1144.36,1214.51 1144.94,1214.51 1145.53,1214.51 1146.12,1214.51 1146.7,1214.51 1147.29,1214.51 1147.88,1214.51 1148.46,1214.51 1149.05,1214.51 1149.63,1214.51 1150.22,1214.51 1150.81,1214.51 1151.39,1214.51 1151.98,1214.51 1152.57,1214.51 1153.15,1214.51 1153.74,1214.51 1154.33,1214.51 1154.91,1214.51 1155.5,1214.51 1156.09,1214.51 1156.67,1214.51 1157.26,1214.51 1157.84,1214.51 1158.43,1214.51 1159.02,1214.51 1159.6,1214.51 1160.19,1214.51 1160.78,1214.51 1161.36,1214.51 1161.95,1214.51 1162.54,1214.51 1163.12,1214.51 1163.71,1214.51 1164.29,1214.51 1164.88,1214.51 1165.47,1214.51 1166.05,1214.51 1166.64,1214.51 1167.23,1214.51 1167.81,1214.51 1168.4,1214.51 1168.99,1214.51 1169.57,1214.51 1170.16,1214.51 1170.75,1214.51 1171.33,1214.51 1171.92,1214.51 1172.5,1214.51 1173.09,1214.51 1173.68,1214.51 1174.26,1214.51 1174.85,1214.51 1175.44,1214.51 1176.02,1214.51 1176.61,1214.51 1177.2,1214.51 1177.78,1214.51 1178.37,1214.51 1178.96,1214.51 1179.54,1214.51 1180.13,1214.51 1180.71,1214.51 1181.3,1214.51 1181.89,1214.51 1182.47,1214.51 1183.06,1214.51 1183.65,1214.51 1184.23,1214.51 1184.82,1214.51 1185.41,1214.51 1185.99,1214.51 1186.58,1214.51 1187.16,1214.51 1187.75,1214.51 1188.34,1214.51 1188.92,1214.51 1189.51,1214.51 1190.1,1214.51 1190.68,1214.51 1191.27,1214.51 1191.86,1214.51 1192.44,1214.51 1193.03,1214.51 1193.62,1214.51 1194.2,1214.51 1194.79,1214.51 1195.37,1214.51 1195.96,1214.51 1196.55,1214.51 1197.13,1214.51 1197.72,1214.51 1198.31,1214.51 1198.89,1214.51 1199.48,1214.51 1200.07,1214.51 1200.65,1214.51 1201.24,1214.51 1201.83,1214.51 1202.41,1214.51 1203,1214.51 1203.58,1214.51 1204.17,1214.51 1204.76,1214.51 1205.34,1214.51 1205.93,1214.51 1206.52,1214.51 1207.1,1214.51 1207.69,1214.51 1208.28,1214.51 1208.86,1214.51 1209.45,1214.51 1210.03,1214.51 1210.62,1214.51 1211.21,1214.51 1211.79,1214.51 1212.38,1214.51 1212.97,1214.51 1213.55,1214.51 1214.14,1214.51 1214.73,1214.51 1215.31,1214.51 1215.9,1214.51 1216.49,1214.51 1217.07,1214.51 1217.66,1214.51 1218.24,1214.51 1218.83,1214.51 1219.42,1214.51 1220,1214.51 1220.59,1214.51 1221.18,1214.51 1221.76,1214.51 1222.35,1214.51 1222.94,1214.51 1223.52,1214.51 1224.11,1214.51 1224.7,1214.51 1225.28,1214.51 1225.87,1214.51 1226.45,1214.51 1227.04,1214.51 1227.63,1214.51 1228.21,1214.51 1228.8,1214.51 1229.39,1214.51 1229.97,1214.51 1230.56,1214.51 1231.15,1214.51 1231.73,1214.51 1232.32,1214.51 1232.91,1214.51 1233.49,1214.51 1234.08,1214.51 1234.66,1214.51 1235.25,1214.51 1235.84,1214.51 1236.42,1214.51 1237.01,1214.51 1237.6,1214.51 1238.18,1214.51 1238.77,1214.51 1239.36,1214.51 1239.94,1214.51 1240.53,1214.51 1241.11,1214.51 1241.7,1214.51 1242.29,1214.51 1242.87,1214.51 1243.46,1214.51 1244.05,1214.51 1244.63,1214.51 1245.22,1214.51 1245.81,1214.51 1246.39,1214.51 1246.98,1214.51 1247.57,1214.51 1248.15,1214.51 1248.74,1214.51 1249.32,1214.51 1249.91,1214.51 1250.5,1214.51 1251.08,1214.51 1251.67,1214.51 1252.26,1214.51 1252.84,1214.51 1253.43,1214.51 1254.02,1214.51 1254.6,1214.51 1255.19,1214.51 1255.78,1214.51 1256.36,1214.51 1256.95,1214.51 1257.53,1214.51 1258.12,1214.51 1258.71,1214.51 1259.29,1214.51 1259.88,1214.51 1260.47,1214.51 1261.05,1214.51 1261.64,1214.51 1262.23,1214.51 1262.81,1214.51 1263.4,1214.51 1263.98,1214.51 1264.57,1214.51 1265.16,1214.51 1265.74,1214.51 1266.33,1214.51 1266.92,1214.51 1267.5,1214.51 1268.09,1214.51 1268.68,1214.51 1269.26,1214.51 1269.85,1214.51 1270.44,1214.51 1271.02,1214.51 1271.61,1214.51 1272.19,1214.51 1272.78,1214.51 1273.37,1214.51 1273.95,1214.51 1274.54,1214.51 1275.13,1214.51 1275.71,1214.51 1276.3,1214.51 1276.89,1214.51 1277.47,1214.51 1278.06,1214.51 1278.65,1214.51 1279.23,1214.51 1279.82,1214.51 1280.4,1214.51 1280.99,1214.51 1281.58,1214.51 1282.16,1214.51 1282.75,1214.51 1283.34,1214.51 1283.92,1214.51 1284.51,1214.51 1285.1,1214.51 1285.68,1214.51 1286.27,1214.51 1286.86,1214.51 1287.44,1214.51 1288.03,1214.51 1288.61,1214.51 1289.2,1214.51 1289.79,1214.51 1290.37,1214.51 1290.96,1214.51 1291.55,1214.51 1292.13,1214.51 1292.72,1214.51 1293.31,1214.51 1293.89,1214.51 1294.48,1214.51 1295.06,1214.51 1295.65,1214.51 1296.24,1214.51 1296.82,1214.51 1297.41,1214.51 1298,1214.51 1298.58,1214.51 1299.17,1214.51 1299.76,1214.51 1300.34,1214.51 1300.93,1214.51 1301.52,1214.51 1302.1,1214.51 1302.69,1214.51 1303.27,1214.51 1303.86,1214.51 1304.45,1214.51 1305.03,1214.51 1305.62,1214.51 1306.21,1214.51 1306.79,1214.51 1307.38,1214.51 1307.97,1214.51 1308.55,1214.51 1309.14,1214.51 1309.73,1214.51 1310.31,1214.51 1310.9,1214.51 1311.48,1214.51 1312.07,1214.51 1312.66,1214.51 1313.24,1214.51 1313.83,1214.51 1314.42,1214.51 1315,1214.51 1315.59,1214.51 1316.18,1214.51 1316.76,1214.51 1317.35,1214.51 1317.93,1214.51 1318.52,1214.51 1319.11,1214.51 1319.69,1214.51 1320.28,1214.51 1320.87,1214.51 1321.45,1214.51 1322.04,1214.51 1322.63,1214.51 1323.21,1214.51 1323.8,1214.51 1324.39,1214.51 1324.97,1214.51 1325.56,1214.51 1326.14,1214.51 1326.73,1214.51 1327.32,1214.51 1327.9,1214.51 1328.49,1214.51 1329.08,1214.51 1329.66,1214.51 1330.25,1214.51 1330.84,1214.51 1331.42,1214.51 1332.01,1214.51 1332.6,1214.51 1333.18,1214.51 1333.77,1214.51 1334.35,1214.51 1334.94,1214.51 1335.53,1214.51 1336.11,1214.51 1336.7,1214.51 1337.29,1214.51 1337.87,1214.51 1338.46,1214.51 1339.05,1214.51 1339.63,1214.51 1340.22,1214.51 1340.8,1214.51 1341.39,1214.51 1341.98,1214.51 1342.56,1214.51 1343.15,1214.51 1343.74,1214.51 1344.32,1214.51 1344.91,1214.51 1345.5,1214.51 1346.08,1214.51 1346.67,1214.51 1347.26,1214.51 1347.84,1214.51 1348.43,1214.51 1349.01,1214.51 1349.6,1214.51 1350.19,1214.51 1350.77,1214.51 1351.36,1214.51 1351.95,1214.51 1352.53,1214.51 1353.12,1214.51 1353.71,1214.51 1354.29,1214.51 1354.88,1214.51 1355.47,1214.51 1356.05,1214.51 1356.64,1214.51 1357.22,1214.51 1357.81,1214.51 1358.4,1214.51 1358.98,1214.51 1359.57,1214.51 1360.16,1214.51 1360.74,1214.51 1361.33,1214.51 1361.92,1214.51 1362.5,1214.51 1363.09,1214.51 1363.68,1214.51 1364.26,1214.51 1364.85,1214.51 1365.43,1214.51 1366.02,1214.51 1366.61,1214.51 1367.19,1214.51 1367.78,1214.51 1368.37,1214.51 1368.95,1214.51 1369.54,1214.51 1370.13,1214.51 1370.71,1214.51 1371.3,1214.51 1371.88,1214.51 1372.47,1214.51 1373.06,1214.51 1373.64,1214.51 1374.23,1214.51 1374.82,1214.51 1375.4,1214.51 1375.99,1214.51 1376.58,1214.51 1377.16,1214.51 1377.75,1214.51 1378.34,1214.51 1378.92,1214.51 1379.51,1214.51 1380.09,1214.51 1380.68,1214.51 1381.27,1214.51 1381.85,1214.51 1382.44,1214.51 1383.03,1214.51 1383.61,1214.51 1384.2,1214.51 1384.79,1214.51 1385.37,1214.51 1385.96,1214.51 1386.55,1214.51 1387.13,1214.51 1387.72,1214.51 1388.3,1214.51 1388.89,1214.51 1389.48,1214.51 1390.06,1214.51 1390.65,1214.51 1391.24,1214.51 1391.82,1214.51 1392.41,1214.51 1393,1214.51 1393.58,1214.51 1394.17,1214.51 1394.75,1214.51 1395.34,1214.51 1395.93,1214.51 1396.51,1214.51 1397.1,1214.51 1397.69,1214.51 1398.27,1214.51 1398.86,1214.51 1399.45,1214.51 1400.03,1214.51 1400.62,1214.51 1401.21,1214.51 1401.79,1214.51 1402.38,1214.51 1402.96,1214.51 1403.55,1214.51 1404.14,1214.51 1404.72,1214.51 1405.31,1214.51 1405.9,1214.51 1406.48,1214.51 1407.07,1214.51 1407.66,1214.51 1408.24,1214.51 1408.83,1214.51 1409.42,1214.51 1410,1214.51 1410.59,1214.51 1411.17,1214.51 1411.76,1214.51 1412.35,1214.51 1412.93,1214.51 1413.52,1214.51 1414.11,1214.51 1414.69,1214.51 1415.28,1214.51 1415.87,1214.51 1416.45,1214.51 1417.04,1214.51 1417.63,1214.51 1418.21,1214.51 1418.8,1214.51 1419.38,1214.51 1419.97,1214.51 1420.56,1214.51 1421.14,1214.51 1421.73,1214.51 1422.32,1214.51 1422.9,1214.51 1423.49,1214.51 1424.08,1214.51 1424.66,1214.51 1425.25,1214.51 1425.83,1214.51 1426.42,1214.51 1427.01,1214.51 1427.59,1214.51 1428.18,1214.51 1428.77,1214.51 1429.35,1214.51 1429.94,1214.51 1430.53,1214.51 1431.11,1214.51 1431.7,1214.51 1432.29,1214.51 1432.87,1214.51 1433.46,1214.51 1434.04,1214.51 1434.63,1214.51 1435.22,1214.51 1435.8,1214.51 1436.39,1214.51 1436.98,1214.51 1437.56,1214.51 1438.15,1214.51 1438.74,1214.51 1439.32,1214.51 1439.91,1214.51 1440.5,1214.51 1441.08,1214.51 1441.67,1214.51 1442.25,1214.51 1442.84,1214.51 1443.43,1214.51 1444.01,1214.51 1444.6,1214.51 1445.19,1214.51 1445.77,1214.51 1446.36,1214.51 1446.95,1214.51 1447.53,1214.51 1448.12,1214.51 1448.7,1214.51 1449.29,1214.51 1449.88,1214.51 1450.46,1214.51 1451.05,1214.51 1451.64,1214.51 1452.22,1214.51 1452.81,1214.51 1453.4,1214.51 1453.98,1214.51 1454.57,1214.51 1455.16,1214.51 1455.74,1214.51 1456.33,1214.51 1456.91,1214.51 1457.5,1214.51 1458.09,1214.51 1458.67,1214.51 1459.26,1214.51 1459.85,1214.51 1460.43,1214.51 1461.02,1214.51 1461.61,1214.51 1462.19,1214.51 1462.78,1214.51 1463.37,1214.51 1463.95,1214.51 1464.54,1214.51 1465.12,1214.51 1465.71,1214.51 1466.3,1214.51 1466.88,1214.51 1467.47,1214.51 1468.06,1214.51 1468.64,1214.51 1469.23,1214.51 1469.82,1214.51 1470.4,1214.51 1470.99,1214.51 1471.57,1214.51 1472.16,1214.51 1472.75,1214.51 1473.33,1214.51 1473.92,1214.51 1474.51,1214.51 1475.09,1214.51 1475.68,1214.51 1476.27,1214.51 1476.85,1214.51 1477.44,1214.51 1478.03,1214.51 1478.61,1214.51 1479.2,1214.51 1479.78,1214.51 1480.37,1214.51 1480.96,1214.51 1481.54,1214.51 1482.13,1214.51 1482.72,1214.51 1483.3,1214.51 1483.89,1214.51 1484.48,1214.51 1485.06,1214.51 1485.65,1214.51 1486.24,1214.51 1486.82,1214.51 1487.41,1214.51 1487.99,1214.51 1488.58,1214.51 1489.17,1214.51 1489.75,1214.51 1490.34,1214.51 1490.93,1214.51 1491.51,1214.51 1492.1,1214.51 1492.69,1214.51 1493.27,1214.51 1493.86,1214.51 1494.45,1214.51 1495.03,1214.51 1495.62,1214.51 1496.2,1214.51 1496.79,1214.51 1497.38,1214.51 1497.96,1214.51 1498.55,1214.51 1499.14,1214.51 1499.72,1214.51 1500.31,1214.51 1500.9,1214.51 1501.48,1214.51 1502.07,1214.51 1502.65,1214.51 1503.24,1214.51 1503.83,1214.51 1504.41,1214.51 1505,1214.51 1505.59,1214.51 1506.17,1214.51 1506.76,1214.51 1507.35,1214.51 1507.93,1214.51 1508.52,1214.51 1509.11,1214.51 1509.69,1214.51 1510.28,1214.51 1510.86,1214.51 1511.45,1214.51 1512.04,1214.51 1512.62,1214.51 1513.21,1214.51 1513.8,1214.51 1514.38,1214.51 1514.97,1214.51 1515.56,1214.51 1516.14,1214.51 1516.73,1214.51 1517.32,1214.51 1517.9,1214.51 1518.49,1214.51 1519.07,1214.51 1519.66,1214.51 1520.25,1214.51 1520.83,1214.51 1521.42,1214.51 1522.01,1214.51 1522.59,1214.51 1523.18,1214.51 1523.77,1214.51 1524.35,1214.51 1524.94,1214.51 1525.52,1214.51 1526.11,1214.51 1526.7,1214.51 1527.28,1214.51 1527.87,1214.51 1528.46,1214.51 1529.04,1214.51 1529.63,1214.51 1530.22,1214.51 1530.8,1214.51 1531.39,1214.51 1531.98,1214.51 1532.56,1214.51 1533.15,1214.51 1533.73,1214.51 1534.32,1214.51 1534.91,1214.51 1535.49,1214.51 1536.08,1214.51 1536.67,1214.51 1537.25,1214.51 1537.84,1214.51 1538.43,1214.51 1539.01,1214.51 1539.6,1214.51 1540.19,1214.51 1540.77,1214.51 1541.36,1214.51 1541.94,1214.51 1542.53,1214.51 1543.12,1214.51 1543.7,1214.51 1544.29,1214.51 1544.88,1214.51 1545.46,1214.51 1546.05,1214.51 1546.64,1214.51 1547.22,1214.51 1547.81,1214.51 1548.4,1214.51 1548.98,1214.51 1549.57,1214.51 1550.15,1214.51 1550.74,1214.51 1551.33,1214.51 1551.91,1214.51 1552.5,1214.51 1553.09,1214.51 1553.67,1214.51 1554.26,1214.51 1554.85,1214.51 1555.43,1214.51 1556.02,1214.51 1556.6,1214.51 1557.19,1214.51 1557.78,1214.51 1558.36,1214.51 1558.95,1214.51 1559.54,1214.51 1560.12,1214.51 1560.71,1214.51 1561.3,1214.51 1561.88,1214.51 1562.47,1214.51 1563.06,1214.51 1563.64,1214.51 1564.23,1214.51 1564.81,1214.51 1565.4,1214.51 1565.99,1214.51 1566.57,1214.51 1567.16,1214.51 1567.75,1214.51 1568.33,1214.51 1568.92,1214.51 1569.51,1214.51 1570.09,1214.51 1570.68,1214.51 1571.27,1214.51 1571.85,1214.51 1572.44,1214.51 1573.02,1214.51 1573.61,1214.51 1574.2,1214.51 1574.78,1214.51 1575.37,1214.51 1575.96,1214.51 1576.54,1214.51 1577.13,1214.51 1577.72,1214.51 1578.3,1214.51 1578.89,1214.51 1579.47,1214.51 1580.06,1214.51 1580.65,1214.51 1581.23,1214.51 1581.82,1214.51 1582.41,1214.51 1582.99,1214.51 1583.58,1214.51 1584.17,1214.51 1584.75,1214.51 1585.34,1214.51 1585.93,1214.51 1586.51,1214.51 1587.1,1214.51 1587.68,1214.51 1588.27,1214.51 1588.86,1214.51 1589.44,1214.51 1590.03,1214.51 1590.62,1214.51 1591.2,1214.51 1591.79,1214.51 1592.38,1214.51 1592.96,1214.51 1593.55,1214.51 1594.14,1214.51 1594.72,1214.51 1595.31,1214.51 1595.89,1214.51 1596.48,1214.51 1597.07,1214.51 1597.65,1214.51 1598.24,1214.51 1598.83,1214.51 1599.41,1214.51 1600,1214.51 1600.59,1214.51 1601.17,1214.51 1601.76,1214.51 1602.34,1214.51 1602.93,1214.51 1603.52,1214.51 1604.1,1214.51 1604.69,1214.51 1605.28,1214.51 1605.86,1214.51 1606.45,1214.51 1607.04,1214.51 1607.62,1214.51 1608.21,1214.51 1608.8,1214.51 1609.38,1214.51 1609.97,1214.51 1610.55,1214.51 1611.14,1214.51 1611.73,1214.51 1612.31,1214.51 1612.9,1214.51 1613.49,1214.51 1614.07,1214.51 1614.66,1214.51 1615.25,1214.51 1615.83,1214.51 1616.42,1214.51 1617.01,1214.51 1617.59,1214.51 1618.18,1214.51 1618.76,1214.51 1619.35,1214.51 1619.94,1214.51 1620.52,1214.51 1621.11,1214.51 1621.7,1214.51 1622.28,1214.51 1622.87,1214.51 1623.46,1214.51 1624.04,1214.51 1624.63,1214.51 1625.22,1214.51 1625.8,1214.51 1626.39,1214.51 1626.97,1214.51 1627.56,1214.51 1628.15,1214.51 1628.73,1214.51 1629.32,1214.51 1629.91,1214.51 1630.49,1214.51 1631.08,1214.51 1631.67,1214.51 1632.25,1214.51 1632.84,1214.51 1633.42,1214.51 1634.01,1214.51 1634.6,1214.51 1635.18,1214.51 1635.77,1214.51 1636.36,1214.51 1636.94,1214.51 1637.53,1214.51 1638.12,1214.51 1638.7,1214.51 1639.29,1214.51 1639.88,1214.51 1640.46,1214.51 1641.05,1214.51 1641.63,1214.51 1642.22,1214.51 1642.81,1214.51 1643.39,1214.51 1643.98,1214.51 1644.57,1214.51 1645.15,1214.51 1645.74,1214.51 1646.33,1214.51 1646.91,1214.51 1647.5,1214.51 1648.09,1214.51 1648.67,1214.51 1649.26,1214.51 1649.84,1214.51 1650.43,1214.51 1651.02,1214.51 1651.6,1214.51 1652.19,1214.51 1652.78,1214.51 1653.36,1214.51 1653.95,1214.51 1654.54,1214.51 1655.12,1214.51 1655.71,1214.51 1656.29,1214.51 1656.88,1214.51 1657.47,1214.51 1658.05,1214.51 1658.64,1214.51 1659.23,1214.51 1659.81,1214.51 1660.4,1214.51 1660.99,1214.51 1661.57,1214.51 1662.16,1214.51 1662.75,1214.51 1663.33,1214.51 1663.92,1214.51 1664.5,1214.51 1665.09,1214.51 1665.68,1214.51 1666.26,1214.51 1666.85,1214.51 1667.44,1214.51 1668.02,1214.51 1668.61,1214.51 1669.2,1214.51 1669.78,1214.51 1670.37,1214.51 1670.96,1214.51 1671.54,1214.51 1672.13,1214.51 1672.71,1214.51 1673.3,1214.51 1673.89,1214.51 1674.47,1214.51 1675.06,1214.51 1675.65,1214.51 1676.23,1214.51 1676.82,1214.51 1677.41,1214.51 1677.99,1214.51 1678.58,1214.51 1679.17,1214.51 1679.75,1214.51 1680.34,1214.51 1680.92,1214.51 1681.51,1214.51 1682.1,1214.51 1682.68,1214.51 1683.27,1214.51 1683.86,1214.51 1684.44,1214.51 1685.03,1214.51 1685.62,1214.51 1686.2,1214.51 1686.79,1214.51 1687.37,1214.51 1687.96,1214.51 1688.55,1214.51 1689.13,1214.51 1689.72,1214.51 1690.31,1214.51 1690.89,1214.51 1691.48,1214.51 1692.07,1214.51 1692.65,1214.51 1693.24,1214.51 1693.83,1214.51 1694.41,1214.51 1695,1214.51 1695.58,1214.51 1696.17,1214.51 1696.76,1214.51 1697.34,1214.51 1697.93,1214.51 1698.52,1214.51 1699.1,1214.51 1699.69,1214.51 1700.28,1214.51 1700.86,1214.51 1701.45,1214.51 1702.04,1214.51 1702.62,1214.51 1703.21,1214.51 1703.79,1214.51 1704.38,1214.51 1704.97,1214.51 1705.55,1214.51 1706.14,1214.51 1706.73,1214.51 1707.31,1214.51 1707.9,1214.51 1708.49,1214.51 1709.07,1214.51 1709.66,1214.51 1710.24,1214.51 1710.83,1214.51 1711.42,1214.51 1712,1214.51 1712.59,1214.51 1713.18,1214.51 1713.76,1214.51 1714.35,1214.51 1714.94,1214.51 1715.52,1214.51 1716.11,1214.51 1716.7,1214.51 1717.28,1214.51 1717.87,1214.51 1718.45,1214.51 1719.04,1214.51 1719.63,1214.51 1720.21,1214.51 1720.8,1214.51 1721.39,1214.51 1721.97,1214.51 1722.56,1214.51 1723.15,1214.51 1723.73,1214.51 1724.32,1214.51 1724.91,1214.51 1725.49,1214.51 1726.08,1214.51 1726.66,1214.51 1727.25,1214.51 1727.84,1214.51 1728.42,1214.51 1729.01,1214.51 1729.6,1214.51 1730.18,1214.51 1730.77,1214.51 1731.36,1214.51 1731.94,1214.51 1732.53,1214.51 1733.11,1214.51 1733.7,1214.51 1734.29,1214.51 1734.87,1214.51 1735.46,1214.51 1736.05,1214.51 1736.63,1214.51 1737.22,1214.51 1737.81,1214.51 1738.39,1214.51 1738.98,1214.51 1739.57,1214.51 1740.15,1214.51 1740.74,1214.51 1741.32,1214.51 1741.91,1214.51 1742.5,1214.51 1743.08,1214.51 1743.67,1214.51 1744.26,1214.51 1744.84,1214.51 1745.43,1214.51 1746.02,1214.51 1746.6,1214.51 1747.19,1214.51 1747.78,1214.51 1748.36,1214.51 1748.95,1214.51 1749.53,1214.51 1750.12,1214.51 1750.71,1214.51 1751.29,1214.51 1751.88,1214.51 1752.47,1214.51 1753.05,1214.51 1753.64,1214.51 1754.23,1214.51 1754.81,1214.51 1755.4,1214.51 1755.99,1214.51 1756.57,1214.51 1757.16,1214.51 1757.74,1214.51 1758.33,1214.51 1758.92,1214.51 1759.5,1214.51 1760.09,1214.51 1760.68,1214.51 1761.26,1214.51 1761.85,1214.51 1762.44,1214.51 1763.02,1214.51 1763.61,1214.51 1764.19,1214.51 1764.78,1214.51 1765.37,1214.51 1765.95,1214.51 1766.54,1214.51 1767.13,1214.51 1767.71,1214.51 1768.3,1214.51 1768.89,1214.51 1769.47,1214.51 1770.06,1214.51 1770.65,1214.51 1771.23,1214.51 1771.82,1214.51 1772.4,1214.51 1772.99,1214.51 1773.58,1214.51 1774.16,1214.51 1774.75,1214.51 1775.34,1214.51 1775.92,1214.51 1776.51,1214.51 1777.1,1214.51 1777.68,1214.51 1778.27,1214.51 1778.86,1214.51 1779.44,1214.51 1780.03,1214.51 1780.61,1214.51 1781.2,1214.51 1781.79,1214.51 1782.37,1214.51 1782.96,1214.51 1783.55,1214.51 1784.13,1214.51 1784.72,1214.51 1785.31,1214.51 1785.89,1214.51 1786.48,1214.51 1787.06,1214.51 1787.65,1214.51 1788.24,1214.51 1788.82,1214.51 1789.41,1214.51 1790,1214.51 1790.58,1214.51 1791.17,1214.51 1791.76,1214.51 1792.34,1214.51 1792.93,1214.51 1793.52,1214.51 1794.1,1214.51 1794.69,1214.51 1795.27,1214.51 1795.86,1214.51 1796.45,1214.51 1797.03,1214.51 1797.62,1214.51 1798.21,1214.51 1798.79,1214.51 1799.38,1214.51 1799.97,1214.51 1800.55,1214.51 1801.14,1214.51 1801.73,1214.51 1802.31,1214.51 1802.9,1214.51 1803.48,1214.51 1804.07,1214.51 1804.66,1214.51 1805.24,1214.51 1805.83,1214.51 1806.42,1214.51 1807,1214.51 1807.59,1214.51 1808.18,1214.51 1808.76,1214.51 1809.35,1214.51 1809.94,1214.51 1810.52,1214.51 1811.11,1214.51 1811.69,1214.51 1812.28,1214.51 1812.87,1214.51 1813.45,1214.51 1814.04,1214.51 1814.63,1214.51 1815.21,1214.51 1815.8,1214.51 1816.39,1214.51 1816.97,1214.51 1817.56,1214.51 1818.14,1214.51 1818.73,1214.51 1819.32,1214.51 1819.9,1214.51 1820.49,1214.51 1821.08,1214.51 1821.66,1214.51 1822.25,1214.51 1822.84,1214.51 1823.42,1214.51 1824.01,1214.51 1824.6,1214.51 1825.18,1214.51 1825.77,1214.51 1826.35,1214.51 1826.94,1214.51 1827.53,1214.51 1828.11,1214.51 1828.7,1214.51 1829.29,1214.51 1829.87,1214.51 1830.46,1214.51 1831.05,1214.51 1831.63,1214.51 1832.22,1214.51 1832.81,1214.51 1833.39,1214.51 1833.98,1214.51 1834.56,1214.51 1835.15,1214.51 1835.74,1214.51 1836.32,1214.51 1836.91,1214.51 1837.5,1214.51 1838.08,1214.51 1838.67,1214.51 1839.26,1214.51 1839.84,1214.51 1840.43,1214.51 1841.01,1214.51 1841.6,1214.51 1842.19,1214.51 1842.77,1214.51 1843.36,1214.51 1843.95,1214.51 1844.53,1214.51 1845.12,1214.51 1845.71,1214.51 1846.29,1214.51 1846.88,1214.51 1847.47,1214.51 1848.05,1214.51 1848.64,1214.51 1849.22,1214.51 1849.81,1214.51 1850.4,1214.51 1850.98,1214.51 1851.57,1214.51 1852.16,1214.51 1852.74,1214.51 1853.33,1214.51 1853.92,1214.51 1854.5,1214.51 1855.09,1214.51 1855.68,1214.51 1856.26,1214.51 1856.85,1214.51 1857.43,1214.51 1858.02,1214.51 1858.61,1214.51 1859.19,1214.51 1859.78,1214.51 1860.37,1214.51 1860.95,1214.51 1861.54,1214.51 1862.13,1214.51 1862.71,1214.51 1863.3,1214.51 1863.88,1214.51 1864.47,1214.51 1865.06,1214.51 1865.64,1214.51 1866.23,1214.51 1866.82,1214.51 1867.4,1214.51 1867.99,1214.51 1868.58,1214.51 1869.16,1214.51 1869.75,1214.51 1870.34,1214.51 1870.92,1214.51 1871.51,1214.51 1872.09,1214.51 1872.68,1214.51 1873.27,1214.51 1873.85,1214.51 1874.44,1214.51 1875.03,1214.51 1875.61,1214.51 1876.2,1214.51 1876.79,1214.51 1877.37,1214.51 1877.96,1214.51 1878.55,1214.51 1879.13,1214.51 1879.72,1214.51 1880.3,1214.51 1880.89,1214.51 1881.48,1214.51 1882.06,1214.51 1882.65,1214.51 1883.24,1214.51 1883.82,1214.51 1884.41,1214.51 1885,1214.51 1885.58,1214.51 1886.17,1214.51 1886.76,1214.51 1887.34,1214.51 1887.93,1214.51 1888.51,1214.51 1889.1,1214.51 1889.69,1214.51 1890.27,1214.51 1890.86,1214.51 1891.45,1214.51 1892.03,1214.51 1892.62,1214.51 1893.21,1214.51 1893.79,1214.51 1894.38,1214.51 1894.96,1214.51 1895.55,1214.51 1896.14,1214.51 1896.72,1214.51 1897.31,1214.51 1897.9,1214.51 1898.48,1214.51 1899.07,1214.51 1899.66,1214.51 1900.24,1214.51 1900.83,1214.51 1901.42,1214.51 1902,1214.51 1902.59,1214.51 1903.17,1214.51 1903.76,1214.51 1904.35,1214.51 1904.93,1214.51 1905.52,1214.51 1906.11,1214.51 1906.69,1214.51 1907.28,1214.51 1907.87,1214.51 1908.45,1214.51 1909.04,1214.51 1909.63,1214.51 1910.21,1214.51 1910.8,1214.51 1911.38,1214.51 1911.97,1214.51 1912.56,1214.51 1913.14,1214.51 1913.73,1214.51 1914.32,1214.51 1914.9,1214.51 1915.49,1214.51 1916.08,1214.51 1916.66,1214.51 1917.25,1214.51 1917.83,1214.51 1918.42,1214.51 1919.01,1214.51 1919.59,1214.51 1920.18,1214.51 1920.77,1214.51 1921.35,1214.51 1921.94,1214.51 1922.53,1214.51 1923.11,1214.51 1923.7,1214.51 1924.29,1214.51 1924.87,1214.51 1925.46,1214.51 1926.04,1214.51 1926.63,1214.51 1927.22,1214.51 1927.8,1214.51 1928.39,1214.51 1928.98,1214.51 1929.56,1214.51 1930.15,1214.51 1930.74,1214.51 1931.32,1214.51 1931.91,1214.51 1932.5,1214.51 1933.08,1214.51 1933.67,1214.51 1934.25,1214.51 1934.84,1214.51 1935.43,1214.51 1936.01,1214.51 1936.6,1214.51 1937.19,1214.51 1937.77,1214.51 1938.36,1214.51 1938.95,1214.51 1939.53,1214.51 1940.12,1214.51 1940.71,1214.51 1941.29,1214.51 1941.88,1214.51 1942.46,1214.51 1943.05,1214.51 1943.64,1214.51 1944.22,1214.51 1944.81,1214.51 1945.4,1214.51 1945.98,1214.51 1946.57,1214.51 1947.16,1214.51 1947.74,1214.51 1948.33,1214.51 1948.91,1214.51 1949.5,1214.51 1950.09,1214.51 1950.67,1214.51 1951.26,1214.51 1951.85,1214.51 1952.43,1214.51 1953.02,1214.51 1953.61,1214.51 1954.19,1214.51 1954.78,1214.51 1955.37,1214.51 1955.95,1214.51 1956.54,1214.51 1957.12,1214.51 1957.71,1214.51 1958.3,1214.51 1958.88,1214.51 1959.47,1214.51 1960.06,1214.51 1960.64,1214.51 1961.23,1214.51 1961.82,1214.51 1962.4,1214.51 1962.99,1214.51 1963.58,1214.51 1964.16,1214.51 1964.75,1214.51 1965.33,1214.51 1965.92,1214.51 1966.51,1214.51 1967.09,1214.51 1967.68,1214.51 1968.27,1214.51 1968.85,1214.51 1969.44,1214.51 1970.03,1214.51 1970.61,1214.51 1971.2,1214.51 1971.78,1214.51 1972.37,1214.51 1972.96,1214.51 1973.54,1214.51 1974.13,1214.51 1974.72,1214.51 1975.3,1214.51 1975.89,1214.51 1976.48,1214.51 1977.06,1214.51 1977.65,1214.51 1978.24,1214.51 1978.82,1214.51 1979.41,1214.51 1979.99,1214.51 1980.58,1214.51 1981.17,1214.51 1981.75,1214.51 1982.34,1214.51 1982.93,1214.51 1983.51,1214.51 1984.1,1214.51 1984.69,1214.51 1985.27,1214.51 1985.86,1214.51 1986.45,1214.51 1987.03,1214.51 1987.62,1214.51 1988.2,1214.51 1988.79,1214.51 1989.38,1214.51 1989.96,1214.51 1990.55,1214.51 1991.14,1214.51 1991.72,1214.51 1992.31,1214.51 1992.9,1214.51 1993.48,1214.51 1994.07,1214.51 1994.65,1214.51 1995.24,1214.51 1995.83,1214.51 1996.41,1214.51 1997,1214.51 1997.59,1214.51 1998.17,1214.51 1998.76,1214.51 1999.35,1214.51 1999.93,1214.51 2000.52,1214.51 2001.11,1214.51 2001.69,1214.51 2002.28,1214.51 2002.86,1214.51 2003.45,1214.51 2004.04,1214.51 2004.62,1214.51 2005.21,1214.51 2005.8,1214.51 2006.38,1214.51 2006.97,1214.51 2007.56,1214.51 2008.14,1214.51 2008.73,1214.51 2009.32,1214.51 2009.9,1214.51 2010.49,1214.51 2011.07,1214.51 2011.66,1214.51 2012.25,1214.51 2012.83,1214.51 2013.42,1214.51 2014.01,1214.51 2014.59,1214.51 2015.18,1214.51 2015.77,1214.51 2016.35,1214.51 2016.94,1214.51 2017.53,1214.51 2018.11,1214.51 2018.7,1214.51 2019.28,1214.51 2019.87,1214.51 2020.46,1214.51 2021.04,1214.51 2021.63,1214.51 2022.22,1214.51 2022.8,1214.51 2023.39,1214.51 2023.98,1214.51 2024.56,1214.51 2025.15,1214.51 2025.73,1214.51 2026.32,1214.51 2026.91,1214.51 2027.49,1214.51 2028.08,1214.51 2028.67,1214.51 2029.25,1214.51 2029.84,1214.51 2030.43,1214.51 2031.01,1214.51 2031.6,1214.51 2032.19,1214.51 2032.77,1214.51 2033.36,1214.51 2033.94,1214.51 2034.53,1214.51 2035.12,1214.51 2035.7,1214.51 2036.29,1214.51 2036.88,1214.51 2037.46,1214.51 2038.05,1214.51 2038.64,1214.51 2039.22,1214.51 2039.81,1214.51 2040.4,1214.51 2040.98,1214.51 2041.57,1214.51 2042.15,1214.51 2042.74,1214.51 2043.33,1214.51 2043.91,1214.51 2044.5,1214.51 2045.09,1214.51 2045.67,1214.51 2046.26,1214.51 2046.85,1214.51 2047.43,1214.51 2048.02,1214.51 2048.6,1214.51 2049.19,1214.51 2049.78,1214.51 2050.36,1214.51 2050.95,1214.51 2051.54,1214.51 2052.12,1214.51 2052.71,1214.51 2053.3,1214.51 2053.88,1214.51 2054.47,1214.51 2055.06,1214.51 2055.64,1214.51 2056.23,1214.51 2056.81,1214.51 2057.4,1214.51 2057.99,1214.51 2058.57,1214.51 2059.16,1214.51 2059.75,1214.51 2060.33,1214.51 2060.92,1214.51 2061.51,1214.51 2062.09,1214.51 2062.68,1214.51 2063.27,1214.51 2063.85,1214.51 2064.44,1214.51 2065.02,1214.51 2065.61,1214.51 2066.2,1214.51 2066.78,1214.51 2067.37,1214.51 2067.96,1214.51 2068.54,1214.51 2069.13,1214.51 2069.72,1214.51 2070.3,1214.51 2070.89,1214.51 2071.48,1214.51 2072.06,1214.51 2072.65,1214.51 2073.23,1214.51 2073.82,1214.51 2074.41,1214.51 2074.99,1214.51 2075.58,1214.51 2076.17,1214.51 2076.75,1214.51 2077.34,1214.51 2077.93,1214.51 2078.51,1214.51 2079.1,1214.51 2079.68,1214.51 2080.27,1214.51 2080.86,1214.51 2081.44,1214.51 2082.03,1214.51 2082.62,1214.51 2083.2,1214.51 2083.79,1214.51 2084.38,1214.51 2084.96,1214.51 2085.55,1214.51 2086.14,1214.51 2086.72,1214.51 2087.31,1214.51 2087.89,1214.51 2088.48,1214.51 2089.07,1214.51 2089.65,1214.51 2090.24,1214.51 2090.83,1214.51 2091.41,1214.51 2092,1214.51 2092.59,1214.51 2093.17,1214.51 2093.76,1214.51 2094.35,1214.51 2094.93,1214.51 2095.52,1214.51 2096.1,1214.51 2096.69,1214.51 2097.28,1214.51 2097.86,1214.51 2098.45,1214.51 2099.04,1214.51 2099.62,1214.51 2100.21,1214.51 2100.8,1214.51 2101.38,1214.51 2101.97,1214.51 2102.55,1214.51 2103.14,1214.51 2103.73,1214.51 2104.31,1214.51 2104.9,1214.51 2105.49,1214.51 2106.07,1214.51 2106.66,1214.51 2107.25,1214.51 2107.83,1214.51 2108.42,1214.51 2109.01,1214.51 2109.59,1214.51 2110.18,1214.51 2110.76,1214.51 2111.35,1214.51 2111.94,1214.51 2112.52,1214.51 2113.11,1214.51 2113.7,1214.51 2114.28,1214.51 2114.87,1214.51 2115.46,1214.51 2116.04,1214.51 2116.63,1214.51 2117.22,1214.51 2117.8,1214.51 2118.39,1214.51 2118.97,1214.51 2119.56,1214.51 2120.15,1214.51 2120.73,1214.51 2121.32,1214.51 2121.91,1214.51 2122.49,1214.51 2123.08,1214.51 2123.67,1214.51 2124.25,1214.51 2124.84,1214.51 2125.42,1214.51 2126.01,1214.51 2126.6,1214.51 2127.18,1214.51 2127.77,1214.51 2128.36,1214.51 2128.94,1214.51 2129.53,1214.51 2130.12,1214.51 2130.7,1214.51 2131.29,1214.51 2131.88,1214.51 2132.46,1214.51 2133.05,1214.51 2133.63,1214.51 2134.22,1214.51 2134.81,1214.51 2135.39,1214.51 2135.98,1214.51 2136.57,1214.51 2137.15,1214.51 2137.74,1214.51 2138.33,1214.51 2138.91,1214.51 2139.5,1214.51 2140.09,1214.51 2140.67,1214.51 2141.26,1214.51 2141.84,1214.51 2142.43,1214.51 2143.02,1214.51 2143.6,1214.51 2144.19,1214.51 2144.78,1214.51 2145.36,1214.51 2145.95,1214.51 2146.54,1214.51 2147.12,1214.51 2147.71,1214.51 2148.3,1214.51 2148.88,1214.51 2149.47,1214.51 2150.05,1214.51 2150.64,1214.51 2151.23,1214.51 2151.81,1214.51 2152.4,1214.51 2152.99,1214.51 2153.57,1214.51 2154.16,1214.51 2154.75,1214.51 2155.33,1214.51 2155.92,1214.51 2156.5,1214.51 2157.09,1214.51 2157.68,1214.51 2158.26,1214.51 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.33,1195.07 1398.87,899.083 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1233.39 985.439,1195.07 2158.26,1195.07 2158.26,1233.39 985.439,1233.39 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip273\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip273)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-9047.34 166.588,-9677.06 167.147,-9221.72 167.706,-7987.64 168.266,-8593.77 168.825,-8365.75 169.384,-8879.19 169.943,-9349.26 170.503,-9123.28 171.062,-9540.87 171.621,-9340.85 172.18,-9673.46 172.74,-9980.97 173.299,-10249.1 173.858,-10473.8 174.417,-10245.1 174.977,-10404.8 175.536,-10554.6 176.095,-10657.5 176.655,-10399.1 177.214,-10467.7 177.773,-10215.7 178.332,-10259.5 178.892,-10034.8 179.451,-10084.7 180.01,-9645.72 180.569,-9445.68 181.129,-9444.06 181.688,-9237.35 182.247,-9205.97 182.806,-8844.45 183.366,-8652.6 183.925,-8331.64 184.484,-8146.73 185.043,-7972.77 185.603,-7801.76 186.162,-7613.52 186.721,-7559.22 187.28,-7476.76 187.84,-7187.28 188.399,-7095.48 188.958,-6798.18 189.517,-6628.91 190.077,-6466.02 190.636,-6378.65 191.195,-5900.34 191.754,-5684.92 192.314,-5471.47 192.873,-5201.03 193.432,-5148.57 193.991,-5082.83 194.551,-4832.22 195.11,-4768.31 195.669,-4523.59 196.228,-4353.96 196.788,-4145.11 197.347,-4041.02 197.906,-3888.63 198.465,-3734.92 199.025,-3593.47 199.584,-3458.36 200.143,-3371.21 200.702,-3319.19 201.262,-3230.1 201.821,-3140.97 202.38,-3091.1 202.939,-3038.62 203.499,-2950.1 204.058,-2861.36 204.617,-2729.16 205.176,-2642.04 205.736,-2525.25 206.295,-2475.58 206.854,-2421.87 207.413,-2334.94 207.973,-2252.46 208.532,-2099.46 209.091,-1949.35 209.65,-1833.87 210.21,-1790.77 210.769,-1713.13 211.328,-1635.24 211.887,-1534.78 212.447,-1440.43 213.006,-1369.77 213.565,-1322.97 214.124,-1282.14 214.684,-1209.23 215.243,-1168.59 215.802,-1075.76 216.361,-933.222 216.921,-875.951 217.48,-790.095 218.039,-734.107 218.598,-632.601 219.158,-582.151 219.717,-533.458 220.276,-485.181 220.835,-393.31 221.395,-372.726 221.954,-303.996 222.513,-287.892 223.072,-270.861 223.632,-202.568 224.191,-162.82 224.75,-126.115 225.309,-66.9311 225.869,-9.78829 226.428,7.21637 226.987,46.5203 227.546,79.7883 228.106,114.58 228.665,130.48 229.224,143.899 229.783,216.384 230.343,248.554 230.902,260.144 231.461,289.711 232.02,300.814 232.58,332.608 233.139,384.488 233.698,397.763 234.257,426.877 234.817,456.987 235.376,484.016 235.935,508.605 236.494,516.243 237.054,562.076 237.613,585.779 238.172,628.537 238.731,651.512 239.291,707.734 239.85,780.2 240.409,794.573 240.968,825.947 241.528,840.098 242.087,813.973 242.646,792.009 243.205,791.946 243.765,823.048 244.324,814.094 244.883,792.914 245.442,792.65 246.002,794.425 246.561,832.238 247.12,844.283 247.679,858.693 248.239,890.29 248.798,884.831 249.357,881.041 249.916,878.911 250.476,894.856 251.035,892.996 251.594,870.796 252.153,869.445 252.713,864.995 253.272,869.969 253.831,886.727 254.39,921.919 254.95,886.288 255.509,868.938 256.068,870.645 256.627,925.493 257.187,938.506 257.746,920.339 258.305,951.866 258.864,985.615 259.424,1014.31 259.983,1010.43 260.542,1001.29 261.101,995.365 261.661,1010.55 262.22,1022.75 262.779,1030.51 263.338,1039.76 263.898,1067.48 264.457,1074.92 265.016,1064.44 265.575,1055.48 266.135,1048.59 266.694,1024.33 267.253,1016.58 267.812,1026.87 268.372,1001.03 268.931,994.036 269.49,974.213 270.049,953.465 270.609,932.413 271.168,980.675 271.727,976.406 272.286,985.702 272.846,996.169 273.405,974.241 273.964,973.802 274.523,986.845 275.083,1000.63 275.642,997.173 276.201,992.563 276.76,990.796 277.32,985.337 277.879,980.46 278.438,961.162 278.997,961.624 279.557,1007.18 280.116,1017.39 280.675,1033.44 281.234,1027.92 281.794,1051.94 282.353,1043.32 282.912,1052.51 283.471,1042.94 284.031,1018.46 284.59,1028.84 285.149,1038.84 285.708,1000.77 286.268,1014.38 286.827,1009.45 287.386,1003.36 287.945,1014.44 288.505,1057.99 289.064,1083.68 289.623,1057.56 290.182,1031.14 290.742,1076.47 291.301,1054.53 291.86,1046.43 292.419,1035.56 292.979,1009.51 293.538,1053.77 294.097,1094.5 294.656,1080.88 295.216,1066.49 295.775,1089.92 296.334,1045.62 296.893,1070.53 297.453,1027.52 298.012,1069.04 298.571,1044 299.13,1000.55 299.69,1012.14 300.249,989.963 300.808,1001.92 301.368,983.192 301.927,962.762 302.486,959.811 303.045,975.299 303.605,954.587 304.164,986.625 304.723,1011.42 305.282,1018.59 305.842,961.353 306.401,989.806 306.96,1017 307.519,1013.26 308.079,1022.38 308.638,981.714 309.197,1008.29 309.756,982.792 310.316,977.086 310.875,988.313 311.434,997.888 311.993,1003.85 312.553,966.3 313.112,963.295 313.671,924.288 314.23,905.795 314.79,902.825 315.349,899.754 315.908,897.108 316.467,877.766 317.027,899.211 317.586,866.069 318.145,915.639 318.704,911.518 319.264,878.717 319.823,863.828 320.382,896.676 320.941,943.147 321.501,937.041 322.06,947.238 322.619,923.103 323.178,900.058 323.738,897.775 324.297,896.566 324.856,908.71 325.415,950.966 325.975,948.569 326.534,959.654 327.093,952.733 327.652,963.579 328.212,942.393 328.771,937.266 329.33,931.498 329.889,959.182 330.449,936.713 331.008,931.271 331.567,944.671 332.126,906.591 332.686,903.923 333.245,834.91 333.804,869.541 334.363,920.848 334.923,914.498 335.482,925.147 336.041,907.649 336.6,903.901 337.16,900.668 337.719,895.082 338.278,909.141 338.837,892.123 339.397,908.673 339.956,889.462 340.515,874.161 341.074,868.88 341.634,849.657 342.193,865.559 342.752,879.578 343.311,896.938 343.871,890.287 344.43,887.138 344.989,897.878 345.548,877.009 346.108,858.665 346.667,842.378 347.226,821.57 347.785,842.283 348.345,875.498 348.904,875.685 349.463,856.227 350.022,856.208 350.582,870.437 351.141,899.888 351.7,911.813 352.259,906.705 352.819,886.264 353.378,849.051 353.937,861.962 354.496,875.972 355.056,872.285 355.615,887.454 356.174,915.57 356.733,927.675 357.293,906.007 357.852,901.965 358.411,912.806 358.97,922.963 359.53,917.581 360.089,896.093 360.648,873.076 361.207,850.185 361.767,879.001 362.326,908.691 362.885,887.732 363.444,880.079 364.004,891.23 364.563,901.907 365.122,898.732 365.681,895.796 366.241,923.301 366.8,931.058 367.359,919.953 367.918,913.499 368.478,920.615 369.037,900.029 369.596,928.771 370.155,936.955 370.715,900.456 371.274,893.309 371.833,906.738 372.392,871.656 372.952,931.621 373.511,941.09 374.07,948.654 374.629,940.678 375.189,913.909 375.748,937.242 376.307,911.762 376.866,908.117 377.426,880.418 377.985,875.477 378.544,886.34 379.103,867.175 379.663,879.19 380.222,856.948 380.781,851.049 381.34,860.906 381.9,857.41 382.459,853.611 383.018,836.12 383.577,819.526 384.137,802.936 384.696,820.228 385.255,822.166 385.814,822.434 386.374,836.346 386.933,836.697 387.492,835.129 388.051,865.73 388.611,911.594 389.17,888.77 389.729,865.731 390.288,875.299 390.848,886.156 391.407,880.697 391.966,912.096 392.525,923.54 393.085,932.89 393.644,941.458 394.203,916.057 394.762,891.087 395.322,870.476 395.881,849.702 396.44,863.515 396.999,857.71 397.559,838.527 398.118,816.53 398.677,794.902 399.236,789.926 399.796,755.95 400.355,725.379 400.914,744.744 401.473,745.11 402.033,777.828 402.592,778.66 403.151,778.808 403.71,778.067 404.27,761.436 404.829,708.656 405.388,692.832 405.947,697.998 406.507,703.048 407.066,705.712 407.625,705.129 408.184,724.986 408.744,712.527 409.303,735.011 409.862,722.013 410.421,707.603 410.981,729.102 411.54,730.114 412.099,717.847 412.658,735.721 413.218,722.598 413.777,722.031 414.336,726.745 414.895,726.43 415.455,729.038 416.014,732.428 416.573,715.394 417.132,734.35 417.692,737.069 418.251,724.189 418.81,759.754 419.369,793.681 419.929,776.861 420.488,773.846 421.047,760.818 421.606,793.536 422.166,826.024 422.725,788.77 423.284,785.612 423.843,798.016 424.403,813.718 424.962,813.982 425.521,830.184 426.08,797.029 426.64,844.137 427.199,839.315 427.758,838.289 428.318,835.176 428.877,894.587 429.436,886.834 429.995,897.018 430.555,891.354 431.114,885.45 431.673,862.695 432.232,859.558 432.792,890.093 433.351,914.734 433.91,906.994 434.469,885.086 435.029,878.274 435.588,886.503 436.147,848.16 436.706,824.913 437.266,773.537 437.825,776.092 438.384,743.682 438.943,726.483 439.503,728.226 440.062,732.852 440.621,770.757 441.18,768.01 441.74,733.327 442.299,701.989 442.858,702.863 443.417,705.709 443.977,690.18 444.536,694.122 445.095,682.008 445.654,685.043 446.214,686.759 446.773,692.264 447.332,692.58 447.891,696.659 448.451,702.362 449.01,702.456 449.569,708.092 450.128,677.866 450.688,682.595 451.247,669.421 451.806,657.481 452.365,662.572 452.925,668.607 453.484,688.318 454.043,710.521 454.602,727.977 455.162,712.721 455.721,715.454 456.28,735.36 456.839,737.947 457.399,754.889 457.958,754.928 458.517,755.811 459.076,738.959 459.636,739.271 460.195,757.655 460.754,738.573 461.313,740.064 461.873,726.712 462.432,760.796 462.991,728.252 463.55,745.465 464.11,792.127 464.669,755.956 465.228,773.107 465.787,752.661 466.347,751.001 466.906,737.386 467.465,771.384 468.024,737.39 468.584,767.15 469.143,765.518 469.702,731.975 470.261,733.428 470.821,750.403 471.38,766.888 471.939,769.059 472.498,783.162 473.058,793.97 473.617,757.428 474.176,756.218 474.735,741.412 475.295,757.697 475.854,788.342 476.413,771.853 476.972,789.597 477.532,786.34 478.091,799.834 478.65,776.481 479.209,773.678 479.769,772.528 480.328,753.739 480.887,768.475 481.446,751.178 482.006,767.673 482.565,784.607 483.124,748.422 483.683,745.234 484.243,760.404 484.802,774.237 485.361,786.526 485.92,795.312 486.48,791.034 487.039,801.036 487.598,812.571 488.157,822.312 488.717,801.184 489.276,796.448 489.835,774.796 490.394,769.867 490.954,767.725 491.513,766.949 492.072,800.189 492.631,816.968 493.191,827.564 493.75,824.175 494.309,834.603 494.868,813.001 495.428,793.265 495.987,790.355 496.546,801.662 497.105,815.438 497.665,826.477 498.224,775.615 498.783,770.775 499.342,787.24 499.902,800.179 500.461,775.949 501.02,768.526 501.579,800.484 502.139,792.111 502.698,786.863 503.257,748.379 503.816,764.1 504.376,760.701 504.935,790.282 505.494,803.618 506.053,813.543 506.613,791.939 507.172,821.884 507.731,862.885 508.29,859.052 508.85,869.092 509.409,861.136 509.968,887.296 510.527,909.953 511.087,917.246 511.646,871.499 512.205,864.174 512.764,838.383 513.324,814.635 513.883,792.302 514.442,802.427 515.001,794.593 515.561,743.034 516.12,757.359 516.679,735.927 517.238,735.016 517.798,733.753 518.357,700.541 518.916,700.03 519.475,684.345 520.035,701.387 520.594,687.724 521.153,705.349 521.712,736.367 522.272,749.711 522.831,729.867 523.39,728.489 523.949,757.415 524.509,767.694 525.068,796.866 525.627,808.955 526.186,800.942 526.746,796.542 527.305,836.75 527.864,828.152 528.423,836.271 528.983,829.062 529.542,804.632 530.101,815.054 530.66,795.256 531.22,804.846 531.779,817.379 532.338,764.284 532.897,711.852 533.457,678.929 534.016,696.243 534.575,679.38 535.134,683.838 535.694,702.152 536.253,701.846 536.812,688.987 537.371,691.386 537.931,708.492 538.49,710.164 539.049,710.825 539.608,713.688 540.168,666.313 540.727,685.419 541.286,670.122 541.845,658.226 542.405,643.837 542.964,631.855 543.523,639.345 544.082,675.875 544.642,660.92 545.201,663.977 545.76,686.527 546.319,751.764 546.879,800.988 547.438,813.399 547.997,806.3 548.556,768.935 549.116,764.337 549.675,731.468 550.234,748.087 550.793,760.069 551.353,758.175 551.912,724.171 552.471,725.642 553.031,709.188 553.59,660.945 554.149,681.583 554.708,684.655 555.268,667.412 555.827,687.731 556.386,640.503 556.945,657.104 557.505,639.351 558.064,645.386 558.623,651.564 559.182,669.58 559.742,704.037 560.301,708.113 560.86,709.798 561.419,645.899 561.979,636.372 562.538,673.488 563.097,676.741 563.656,646.657 564.216,630.725 564.775,599.761 565.334,607.101 565.893,594.781 566.453,633.102 567.012,687.974 567.571,691.393 568.13,697.164 568.69,683.709 569.249,684.796 569.808,686.912 570.367,671.066 570.927,654.802 571.486,657.647 572.045,613.579 572.604,634.329 573.164,639.413 573.723,641.391 574.282,643.7 574.841,648.089 575.401,653.691 575.96,705.533 576.519,741.831 577.078,738.796 577.638,752.256 578.197,750.308 578.756,736.951 579.315,705.545 579.875,723.732 580.434,708.157 580.993,727.725 581.552,726.233 582.112,712.01 582.671,729.64 583.23,697.223 583.789,683.041 584.349,665.889 584.908,701.744 585.467,708.187 586.026,706.709 586.586,711.804 587.145,693.376 587.704,706.23 588.263,723.16 588.823,726.399 589.382,757.857 589.941,737.199 590.5,736.934 591.06,734.485 591.619,750.683 592.178,765.771 592.737,776.469 593.297,822.921 593.856,815.005 594.415,775.863 594.974,771.266 595.534,752.364 596.093,763.594 596.652,759.091 597.211,755.704 597.771,768.56 598.33,750.245 598.889,727.922 599.448,744.308 600.008,759.411 600.567,770.157 601.126,771.931 601.685,768.583 602.245,751.39 602.804,749.377 603.363,732.042 603.922,699.901 604.482,718.754 605.041,719.44 605.6,750.722 606.159,729.872 606.719,729.891 607.278,744.117 607.837,742.505 608.396,741.882 608.956,756.828 609.515,753.036 610.074,721.041 610.633,754.83 611.193,750.006 611.752,765.155 612.311,778.491 612.87,728.714 613.43,712.729 613.989,714.831 614.548,715.537 615.107,733.62 615.667,712.408 616.226,724.208 616.785,755.297 617.344,768.489 617.904,765.783 618.463,779.668 619.022,754.811 619.581,737.541 620.141,751.09 620.7,766.723 621.259,792.77 621.818,769.073 622.378,766.702 622.937,778.912 623.496,771.792 624.055,782.233 624.615,731.313 625.174,745.254 625.733,744.564 626.292,712.953 626.852,697.389 627.411,696.472 627.97,678.127 628.529,678.244 629.089,661.895 629.648,681.03 630.207,695.211 630.766,680.702 631.326,684.812 631.885,699.32 632.444,680.466 633.003,695.554 633.563,678.917 634.122,646.929 634.681,631.876 635.24,637.145 635.8,656.545 636.359,626.419 636.918,626.379 637.477,646.155 638.037,646.335 638.596,647.412 639.155,667.861 639.714,635.216 640.274,668.862 640.833,702.181 641.392,719.702 641.951,703.373 642.511,700.3 643.07,664.214 643.629,666.109 644.188,682.033 644.748,635.387 645.307,638.869 645.866,691.417 646.425,704.756 646.985,701.745 647.544,686.682 648.103,685.209 648.662,670.939 649.222,626.232 649.781,631.365 650.34,601.494 650.899,551.352 651.459,556.818 652.018,579.755 652.577,566.31 653.136,558.281 653.696,564.101 654.255,588.157 654.814,592.554 655.373,599.448 655.933,608.307 656.492,628.469 657.051,632.945 657.61,619.888 658.17,624.472 658.729,647.118 659.288,634.488 659.847,637.684 660.407,638 660.966,639.358 661.525,640.977 662.084,660.92 662.644,645.541 663.203,633.172 663.762,621.391 664.321,641.768 664.881,644.88 665.44,731.332 665.999,728.515 666.558,741.317 667.118,721.42 667.677,720.688 668.236,701.479 668.795,716.333 669.355,713.817 669.914,713.766 670.473,714.263 671.032,715.869 671.592,794.262 672.151,808.245 672.71,788.565 673.269,816.488 673.829,795.114 674.388,788.104 674.947,752.096 675.506,763.283 676.066,742.851 676.625,757.564 677.184,723.616 677.743,753.14 678.303,766.759 678.862,779.422 679.421,777.968 679.981,758.09 680.54,737.69 681.099,735.731 681.658,734.037 682.218,733.966 682.777,751.635 683.336,747.858 683.895,745.362 684.455,740.755 685.014,723.643 685.573,738.691 686.132,751.5 686.692,743.692 687.251,757.838 687.81,768.669 688.369,748.965 688.929,746.31 689.488,743.184 690.047,725.414 690.606,707.058 691.166,721.777 691.725,721.354 692.284,698.149 692.843,682.667 693.403,669.604 693.962,657.512 694.521,656.377 695.08,675.957 695.64,691.957 696.199,659.795 696.758,660.797 697.317,646.818 697.877,619.406 698.436,640.164 698.995,658.487 699.554,665.628 700.114,685.306 700.673,688.71 701.232,705.629 701.791,674.045 702.351,675.803 702.91,659.822 703.469,675.181 704.028,677.973 704.588,665.26 705.147,631.981 705.706,636.899 706.265,660.447 706.825,659.794 707.384,676.813 707.943,644.374 708.502,645.215 709.062,632.274 709.621,635.544 710.18,622.51 710.739,628.826 711.299,633.187 711.858,622.108 712.417,692.152 712.976,658.805 713.536,646.142 714.095,649.043 714.654,652.087 715.213,634.928 715.773,638.297 716.332,641.54 716.891,643.854 717.45,661.246 718.01,695.747 718.569,696.026 719.128,712.198 719.687,726.511 720.247,710.239 720.806,708.915 721.365,773.172 721.924,772.286 722.484,769.717 723.043,784.447 723.602,764.324 724.161,745.139 724.721,740.104 725.28,737.497 725.839,733.161 726.398,732.421 726.958,748.427 727.517,763.023 728.076,757.65 728.635,769.091 729.195,780.933 729.754,744.504 730.313,742.555 730.872,737.637 731.432,752.385 731.991,795.231 732.55,787.76 733.109,752.488 733.669,764.679 734.228,757.153 734.787,753.934 735.346,763.654 735.906,778.396 736.465,790.604 737.024,828.932 737.583,789.26 738.143,718.705 738.702,701.203 739.261,700.479 739.82,699.65 740.38,713.76 740.939,732.086 741.498,777.302 742.057,788.128 742.617,786.69 743.176,761.774 743.735,741.79 744.294,787.551 744.854,764.412 745.413,724.014 745.972,707.015 746.531,685.555 747.091,686.413 747.65,705.402 748.209,690.753 748.768,674.244 749.328,672.291 749.887,642.489 750.446,627.808 751.005,631.946 751.565,682.421 752.124,697.284 752.683,678.446 753.242,680.377 753.802,665.227 754.361,667.731 754.92,669.237 755.479,651.019 756.039,669.411 756.598,720.122 757.157,715.786 757.716,700.161 758.276,702.415 758.835,688.974 759.394,704.722 759.953,715.281 760.513,680.551 761.072,646.647 761.631,662.886 762.19,645.404 762.75,663.905 763.309,682.074 763.868,697.984 764.427,713.37 764.987,711.806 765.546,693.665 766.105,709.761 766.664,727.155 767.224,727.095 767.783,727.84 768.342,693.976 768.901,693.078 769.461,644.512 770.02,615.793 770.579,620.376 771.138,654.86 771.698,672.456 772.257,654.541 772.816,654.836 773.375,671.383 773.935,637.313 774.494,654.79 775.053,655.797 775.612,656.229 776.172,670.296 776.731,671.034 777.29,720.83 777.849,702.781 778.409,702.58 778.968,684.369 779.527,689.853 780.086,708.873 780.646,692.465 781.205,689.308 781.764,658.349 782.323,705.386 782.883,689.606 783.442,706.465 784.001,706.46 784.56,720.236 785.12,702.129 785.679,701.152 786.238,666.959 786.797,682.281 787.357,669.222 787.916,670.57 788.475,690.422 789.034,692.195 789.594,691.931 790.153,674.391 790.712,660.401 791.271,663.438 791.831,662.186 792.39,649.113 792.949,632.431 793.508,634.874 794.068,606.607 794.627,626.658 795.186,616.509 795.745,635.458 796.305,636.685 796.864,654.279 797.423,655.286 797.982,656.68 798.542,737.63 799.101,721.924 799.66,701.366 800.219,683.668 800.779,681.927 801.338,683.94 801.897,683.641 802.456,664.347 803.016,683.455 803.575,718.42 804.134,669.924 804.693,654.246 805.253,654.684 805.812,644.914 806.371,667.257 806.931,667.445 807.49,639.899 808.049,656.933 808.608,657.428 809.168,675.685 809.727,627.893 810.286,634.356 810.845,635.885 811.405,636.995 811.964,659.121 812.523,675.812 813.082,679.056 813.642,679.121 814.201,678.891 814.76,695.262 815.319,694.615 815.879,647.986 816.438,666.607 816.997,638.725 817.556,643.433 818.116,617.379 818.675,636.205 819.234,638.885 819.793,626.61 820.353,645.795 820.912,647.835 821.471,633.962 822.03,654.321 822.59,641.146 823.149,615.771 823.708,640.561 824.267,724.18 824.827,740.034 825.386,753.492 825.945,750.089 826.504,733.163 827.064,733.745 827.623,720.453 828.182,736.478 828.741,748.989 829.301,762.006 829.86,771.935 830.419,749.828 830.978,745.907 831.538,756.714 832.097,750.405 832.656,730.843 833.215,745.599 833.775,726.377 834.334,728.655 834.893,759.046 835.452,771.342 836.012,767.235 836.571,765.925 837.13,764.181 837.689,758.463 838.249,772.752 838.808,785.845 839.367,782.57 839.926,773.638 840.486,768.451 841.045,779.96 841.604,790.89 842.163,783.385 842.723,780.222 843.282,774.754 843.841,754.443 844.4,781.084 844.96,761.148 845.519,738.624 846.078,782.776 846.637,777.062 847.197,774.313 847.756,737.643 848.315,753.088 848.874,747.283 849.434,777.098 849.993,773.337 850.552,754.798 851.111,750.11 851.671,714.561 852.23,695.865 852.789,725.198 853.348,749.912 853.908,711.601 854.467,726.39 855.026,722.693 855.585,700.585 856.145,665.235 856.704,683.457 857.263,700.159 857.822,699.295 858.382,708.735 858.941,691.522 859.5,690.371 860.059,690.511 860.619,672.23 861.178,670.41 861.737,618.922 862.296,602.828 862.856,640.214 863.415,627.893 863.974,597.346 864.533,637.825 865.093,641.892 865.652,629.76 866.211,585.342 866.77,603.812 867.33,608.511 867.889,626.43 868.448,661.681 869.007,660.608 869.567,678.006 870.126,692.922 870.685,693.886 871.244,672.301 871.804,638.905 872.363,625.918 872.922,627.689 873.481,659.483 874.041,648.285 874.6,668.125 875.159,686.204 875.718,699.29 876.278,715.112 876.837,697.061 877.396,700.589 877.955,680.244 878.515,662.861 879.074,665.775 879.633,663.164 880.192,646.444 880.752,633.76 881.311,604.506 881.87,603.546 882.429,605.989 882.989,625.142 883.548,649.993 884.107,637.472 884.666,623.336 885.226,626.099 885.785,627.641 886.344,635.664 886.903,671.216 887.463,657.65 888.022,678.389 888.581,676.516 889.14,676.709 889.7,642.455 890.259,681.085 890.818,680.167 891.377,711.909 891.937,707.473 892.496,707.044 893.055,725.18 893.614,726.378 894.174,742.869 894.733,740.315 895.292,753.667 895.851,720.507 896.411,732.815 896.97,732.705 897.529,712.114 898.088,726.745 898.648,723.216 899.207,722.654 899.766,688.692 900.325,674.653 900.885,725.177 901.444,725.212 902.003,743.961 902.562,740.633 903.122,770.688 903.681,762.952 904.24,749.026 904.799,760.016 905.359,767.465 905.918,746.952 906.477,713.628 907.036,729.92 907.596,742.855 908.155,726.906 908.714,723.965 909.273,723.326 909.833,704.942 910.392,691.858 910.951,676.215 911.51,661.736 912.07,661.556 912.629,659.633 913.188,645.663 913.747,616.36 914.307,635.643 914.866,638.503 915.425,656.458 915.984,652.935 916.544,650.49 917.103,669.974 917.662,686.016 918.221,685.328 918.781,702.84 919.34,670.301 919.899,700.439 920.458,631.068 921.018,633.137 921.577,619.97 922.136,625.503 922.695,644.54 923.255,681.461 923.814,665.127 924.373,663.33 924.932,648.608 925.492,667.619 926.051,668.858 926.61,683.803 927.169,654.603 927.729,641.548 928.288,660.998 928.847,658.897 929.406,643.629 929.966,644.704 930.525,677.693 931.084,709.501 931.644,722.049 932.203,733.292 932.762,731.743 933.321,694.675 933.881,727.191 934.44,710.283 934.999,725.486 935.558,720.523 936.118,704.867 936.677,705.358 937.236,671.979 937.795,671.289 938.355,669.788 938.914,671.544 939.473,670.325 940.032,655.836 940.592,694.365 941.151,726.236 941.71,688.446 942.269,686.354 942.829,701.747 943.388,702.449 943.947,689.002 944.506,690.345 945.066,688.067 945.625,673.811 946.184,675.787 946.743,711.112 947.303,678.528 947.862,681.226 948.421,668.07 948.98,669.338 949.54,669.758 950.099,702.293 950.658,735.631 951.217,735.051 951.777,718.415 952.336,733.787 952.895,718.905 953.454,765.249 954.014,759.717 954.573,740.722 955.132,739.818 955.691,733.066 956.251,732.287 956.81,764.48 957.369,762.027 957.928,760.518 958.488,771.309 959.047,770.464 959.606,749.18 960.165,729.798 960.725,725.95 961.284,708.299 961.843,688.963 962.402,674.894 962.962,691.717 963.521,679.667 964.08,680.56 964.639,664.594 965.199,699.22 965.758,699.833 966.317,713.725 966.876,693.897 967.436,660.486 967.995,660 968.554,643.22 969.113,659.298 969.673,661.195 970.232,678.552 970.791,708.148 971.35,705.784 971.91,703.877 972.469,704.2 973.028,717.011 973.587,714.825 974.147,717.907 974.706,703.174 975.265,667.026 975.824,634.699 976.384,653.375 976.943,639.605 977.502,676.232 978.061,690.196 978.621,708.065 979.18,689.704 979.739,657.066 980.298,643.026 980.858,661.302 981.417,658.478 981.976,643.657 982.535,629.652 983.095,632.703 983.654,653.594 984.213,688.117 984.772,722.548 985.332,720.185 985.891,707.765 986.45,706.316 987.009,703.968 987.569,685.525 988.128,686.845 988.687,687.578 989.246,687.099 989.806,751.795 990.365,737.469 990.924,766.807 991.483,778.446 992.043,774.147 992.602,772.267 993.161,770.206 993.72,767.873 994.28,747.245 994.839,729.216 995.398,726.082 995.957,786.659 996.517,778.16 997.076,755.215 997.635,734.308 998.194,730.523 998.754,729.89 999.313,743.063 999.872,739.998 1000.43,738.242 1000.99,720.972 1001.55,719.645 1002.11,685.634 1002.67,669.472 1003.23,688.687 1003.79,674.104 1004.35,674.787 1004.91,628.366 1005.46,597.126 1006.02,599.892 1006.58,604.68 1007.14,660.098 1007.7,676.248 1008.26,676.815 1008.82,642.322 1009.38,642.206 1009.94,625.268 1010.5,658.168 1011.06,627.824 1011.62,632.01 1012.18,649.98 1012.73,620.603 1013.29,622.55 1013.85,610.546 1014.41,613.898 1014.97,651.029 1015.53,668.48 1016.09,685.277 1016.65,684.124 1017.21,697.536 1017.77,711.826 1018.33,690.971 1018.89,656.855 1019.45,673.023 1020.01,688.299 1020.56,667.814 1021.12,719.175 1021.68,735.341 1022.24,718 1022.8,714.678 1023.36,714.383 1023.92,713.366 1024.48,725.824 1025.04,722.912 1025.6,766.251 1026.16,761.557 1026.72,741.459 1027.28,735.792 1027.83,716.907 1028.39,665.879 1028.95,680.241 1029.51,683.494 1030.07,668.814 1030.63,670.375 1031.19,656.128 1031.75,659.543 1032.31,694.067 1032.87,692.971 1033.43,676.994 1033.99,629.997 1034.55,636.528 1035.1,651.613 1035.66,649.883 1036.22,687.027 1036.78,704.54 1037.34,689.232 1037.9,673.763 1038.46,658.758 1039.02,691.101 1039.58,657.023 1040.14,674.796 1040.7,673.643 1041.26,688.427 1041.82,687.333 1042.38,687.414 1042.93,687.46 1043.49,691.488 1044.05,675.331 1044.61,639.313 1045.17,639.588 1045.73,661.195 1046.29,678.965 1046.85,696.461 1047.41,695.394 1047.97,678.787 1048.53,695.945 1049.09,728.778 1049.65,774.816 1050.2,752.987 1050.76,698.975 1051.32,666.634 1051.88,665.136 1052.44,663.011 1053,631.363 1053.56,637.019 1054.12,641.35 1054.68,631.384 1055.24,599.814 1055.8,605.973 1056.36,615.652 1056.92,552.852 1057.48,510.016 1058.03,533.865 1058.59,525.638 1059.15,534.268 1059.71,510.551 1060.27,524.204 1060.83,555.021 1061.39,560.003 1061.95,550.899 1062.51,592.717 1063.07,584.613 1063.63,539.011 1064.19,546.734 1064.75,585 1065.3,590.464 1065.86,578.525 1066.42,585.013 1066.98,624.719 1067.54,646.825 1068.1,633.397 1068.66,636.295 1069.22,658.089 1069.78,662.478 1070.34,679.108 1070.9,663.865 1071.46,681.43 1072.02,661.453 1072.57,730.491 1073.13,745.814 1073.69,723.758 1074.25,704.44 1074.81,722.672 1075.37,721.643 1075.93,669.401 1076.49,650.795 1077.05,621.648 1077.61,642.491 1078.17,645.602 1078.73,681.486 1079.29,663.156 1079.85,651.28 1080.4,719.222 1080.96,703.113 1081.52,669.879 1082.08,669.714 1082.64,670.472 1083.2,686.736 1083.76,701.575 1084.32,701.159 1084.88,734.815 1085.44,717.309 1086,732.615 1086.56,746.613 1087.12,726.162 1087.67,721.627 1088.23,687.498 1088.79,656.597 1089.35,692.782 1089.91,707.54 1090.47,706.215 1091.03,703.956 1091.59,736.169 1092.15,732.819 1092.71,733.05 1093.27,730.215 1093.83,743.28 1094.39,739.522 1094.94,751.261 1095.5,748.485 1096.06,713.2 1096.62,712.273 1097.18,727.506 1097.74,724.471 1098.3,703.011 1098.86,675.012 1099.42,693.867 1099.98,659.445 1100.54,623.433 1101.1,623.79 1101.66,643.858 1102.22,646.764 1102.77,616.916 1103.33,653.822 1103.89,702.259 1104.45,682.96 1105.01,685.037 1105.57,731.949 1106.13,748.719 1106.69,730.028 1107.25,725.177 1107.81,705.318 1108.37,772.557 1108.93,763.141 1109.49,762.203 1110.04,726.718 1110.6,723.605 1111.16,706.138 1111.72,703.053 1112.28,721.565 1112.84,702.062 1113.4,701.276 1113.96,730.652 1114.52,729.877 1115.08,714.521 1115.64,665.697 1116.2,682.492 1116.76,668.669 1117.31,639.872 1117.87,626.916 1118.43,647.567 1118.99,636.275 1119.55,638.518 1120.11,656.777 1120.67,659.093 1121.23,659.599 1121.79,641.28 1122.35,642.93 1122.91,626.15 1123.47,629.26 1124.03,666.614 1124.59,683.454 1125.14,685.095 1125.7,667.378 1126.26,667.556 1126.82,668.748 1127.38,688.536 1127.94,670.686 1128.5,673.506 1129.06,679.406 1129.62,661.686 1130.18,661.906 1130.74,663.155 1131.3,684.88 1131.86,687.529 1132.41,670.733 1132.97,670.614 1133.53,640.156 1134.09,623.997 1134.65,630.232 1135.21,634.864 1135.77,639.621 1136.33,657.83 1136.89,644.452 1137.45,661.553 1138.01,633.031 1138.57,651.836 1139.13,671.947 1139.68,642.888 1140.24,645.196 1140.8,675.672 1141.36,674.02 1141.92,674.473 1142.48,679.543 1143.04,696.737 1143.6,715.696 1144.16,733.608 1144.72,729.188 1145.28,756.575 1145.84,751.391 1146.4,743.376 1146.96,725.842 1147.51,724.045 1148.07,739.925 1148.63,736.425 1149.19,684.25 1149.75,714.797 1150.31,709.677 1150.87,726.832 1151.43,727.345 1151.99,759.708 1152.55,786.414 1153.11,780.766 1153.67,807.605 1154.23,816.855 1154.78,796.257 1155.34,774.213 1155.9,771.247 1156.46,765.114 1157.02,733.671 1157.58,792.52 1158.14,787.989 1158.7,781.738 1159.26,778.376 1159.82,792.526 1160.38,770.753 1160.94,732.885 1161.5,749.957 1162.05,731.554 1162.61,693.84 1163.17,694.409 1163.73,692.525 1164.29,706.797 1164.85,704.537 1165.41,702.334 1165.97,729.997 1166.53,776.49 1167.09,725.522 1167.65,689.595 1168.21,657.306 1168.77,658.854 1169.33,642.648 1169.88,610.316 1170.44,583.549 1171,590.444 1171.56,576.463 1172.12,577.139 1172.68,569.741 1173.24,544.184 1173.8,568.431 1174.36,538.244 1174.92,544.985 1175.48,553.09 1176.04,544.787 1176.6,552.283 1177.15,556.095 1177.71,595.805 1178.27,614.867 1178.83,654.08 1179.39,641.055 1179.95,611.947 1180.51,646.852 1181.07,685.097 1181.63,701.339 1182.19,750.906 1182.75,763.701 1183.31,732.58 1183.87,698.947 1184.43,699.708 1184.98,732.215 1185.54,731.536 1186.1,730.86 1186.66,745.307 1187.22,694.191 1187.78,690.539 1188.34,705.448 1188.9,720.686 1189.46,736.287 1190.02,731.286 1190.58,726.479 1191.14,724.801 1191.7,707.548 1192.25,737.349 1192.81,704 1193.37,701.489 1193.93,684.862 1194.49,685.514 1195.05,721.04 1195.61,718.962 1196.17,717.604 1196.73,732.809 1197.29,713.554 1197.85,714.536 1198.41,696.4 1198.97,725.015 1199.52,724.509 1200.08,703.426 1200.64,719.273 1201.2,700.311 1201.76,681.391 1202.32,681.562 1202.88,712.745 1203.44,696.913 1204,709.221 1204.56,738.298 1205.12,766.821 1205.68,760.822 1206.24,774.431 1206.8,766.148 1207.35,763.182 1207.91,761.453 1208.47,776.24 1209.03,739.903 1209.59,735.897 1210.15,700.261 1210.71,699.622 1211.27,732.363 1211.83,726.489 1212.39,693.313 1212.95,707.772 1213.51,721.323 1214.07,685.976 1214.62,685.508 1215.18,705.583 1215.74,707.686 1216.3,678.819 1216.86,693.419 1217.42,692.596 1217.98,687.564 1218.54,690.135 1219.1,687.984 1219.66,668.502 1220.22,686.931 1220.78,685.149 1221.34,699.393 1221.89,699.931 1222.45,720.092 1223.01,766.384 1223.57,746.229 1224.13,728.861 1224.69,713.199 1225.25,716.626 1225.81,698.269 1226.37,697.947 1226.93,715.248 1227.49,744.298 1228.05,726.218 1228.61,722.379 1229.17,721.421 1229.72,687.075 1230.28,688.038 1230.84,673.194 1231.4,623.66 1231.96,642.707 1232.52,656.926 1233.08,667.404 1233.64,632.36 1234.2,652.608 1234.76,604.304 1235.32,611.045 1235.88,647.503 1236.44,681.495 1236.99,647.487 1237.55,617.747 1238.11,621.556 1238.67,611.813 1239.23,598.901 1239.79,605.904 1240.35,609.726 1240.91,616.981 1241.47,590.883 1242.03,625.677 1242.59,625.103 1243.15,609.471 1243.71,626.919 1244.26,645.731 1244.82,632.642 1245.38,635.995 1245.94,638.93 1246.5,637.635 1247.06,638.895 1247.62,623.889 1248.18,640.19 1248.74,643.798 1249.3,631.462 1249.86,647.886 1250.42,652.313 1250.98,654.004 1251.54,673.499 1252.09,690.09 1252.65,705.89 1253.21,704.255 1253.77,701.987 1254.33,684.988 1254.89,704.297 1255.45,722.989 1256.01,720.917 1256.57,703.612 1257.13,698.209 1257.69,663.142 1258.25,663.798 1258.81,698.762 1259.36,714.741 1259.92,712.951 1260.48,711.446 1261.04,692.152 1261.6,690.623 1262.16,687.231 1262.72,722.11 1263.28,736.17 1263.84,750.024 1264.4,777.521 1264.96,772.548 1265.52,733.562 1266.08,731.176 1266.63,717.421 1267.19,730.039 1267.75,725.447 1268.31,751.966 1268.87,748.788 1269.43,762.047 1269.99,757.686 1270.55,771.836 1271.11,768.197 1271.67,796.148 1272.23,805.363 1272.79,799.223 1273.35,807.861 1273.91,814.58 1274.46,792.944 1275.02,754.074 1275.58,769.603 1276.14,784.25 1276.7,792.853 1277.26,776.335 1277.82,791.147 1278.38,786.561 1278.94,762.587 1279.5,745.621 1280.06,723.461 1280.62,740.403 1281.18,703.47 1281.73,731.513 1282.29,730.505 1282.85,746.223 1283.41,730.319 1283.97,777.934 1284.53,775.931 1285.09,770.412 1285.65,780.282 1286.21,794.283 1286.77,819.885 1287.33,811.325 1287.89,789.123 1288.45,785.157 1289,795.79 1289.56,839.2 1290.12,833.102 1290.68,824.039 1291.24,786.314 1291.8,747.132 1292.36,695.941 1292.92,678.601 1293.48,663.047 1294.04,663.69 1294.6,665.067 1295.16,663.834 1295.72,701.254 1296.28,666.762 1296.83,685.028 1297.39,686.685 1297.95,686.846 1298.51,641.301 1299.07,596.418 1299.63,599.551 1300.19,587.602 1300.75,593.338 1301.31,551.388 1301.87,556.541 1302.43,593.045 1302.99,594.34 1303.55,599.333 1304.1,632.092 1304.66,633.325 1305.22,634.532 1305.78,670.012 1306.34,672.331 1306.9,639.261 1307.46,624.454 1308.02,626.105 1308.58,628.266 1309.14,600.155 1309.7,622.67 1310.26,672.355 1310.82,687.725 1311.38,635.632 1311.93,635.283 1312.49,636.839 1313.05,656.72 1313.61,671.086 1314.17,689.818 1314.73,692.005 1315.29,675.079 1315.85,662.823 1316.41,661.924 1316.97,678.519 1317.53,693.229 1318.09,690.394 1318.65,675.627 1319.2,660.387 1319.76,694.358 1320.32,683.182 1320.88,685.231 1321.44,684.084 1322,698.448 1322.56,696.795 1323.12,712.277 1323.68,692.315 1324.24,709.539 1324.8,693.984 1325.36,706.958 1325.92,690.796 1326.47,676.696 1327.03,711.677 1327.59,693.531 1328.15,712.476 1328.71,695.287 1329.27,695.465 1329.83,695.134 1330.39,673.447 1330.95,675.628 1331.51,675.558 1332.07,663.524 1332.63,683.467 1333.19,681.467 1333.75,702.274 1334.3,703.056 1334.86,671.645 1335.42,656.264 1335.98,641.627 1336.54,642.687 1337.1,631.703 1337.66,635.329 1338.22,604.261 1338.78,625.161 1339.34,629.956 1339.9,703.959 1340.46,699.687 1341.02,735.965 1341.57,719.422 1342.13,704.332 1342.69,708.199 1343.25,725.551 1343.81,755.415 1344.37,752.28 1344.93,733.524 1345.49,714.112 1346.05,711.877 1346.61,728.663 1347.17,727.29 1347.73,741.905 1348.29,718.197 1348.84,715.648 1349.4,714.991 1349.96,729.076 1350.52,740.329 1351.08,719.08 1351.64,714.626 1352.2,694.8 1352.76,661.24 1353.32,677.803 1353.88,697.718 1354.44,697.376 1355,712.851 1355.56,695.069 1356.12,696.261 1356.67,696.365 1357.23,677.696 1357.79,679.526 1358.35,694.517 1358.91,647.984 1359.47,615.068 1360.03,617.38 1360.59,599.932 1361.15,621.603 1361.71,654.961 1362.27,639.148 1362.83,593.986 1363.39,597.917 1363.94,619.164 1364.5,640.083 1365.06,626.874 1365.62,596.338 1366.18,596.746 1366.74,585.782 1367.3,606.334 1367.86,606.486 1368.42,625.674 1368.98,582.118 1369.54,618.464 1370.1,630.469 1370.66,635.783 1371.21,590.642 1371.77,630.65 1372.33,603.898 1372.89,577.911 1373.45,521.963 1374.01,545.887 1374.57,552.188 1375.13,561.403 1375.69,586.168 1376.25,638.287 1376.81,627.877 1377.37,645.203 1377.93,647.182 1378.49,617.066 1379.04,605.979 1379.6,594.22 1380.16,582.544 1380.72,572.143 1381.28,564.514 1381.84,572.71 1382.4,598.166 1382.96,636.152 1383.52,624.696 1384.08,660.73 1384.64,676.021 1385.2,660.089 1385.76,615.569 1386.31,652.147 1386.87,655.561 1387.43,675.8 1387.99,709.297 1388.55,727.577 1389.11,726.67 1389.67,722.904 1390.23,704.54 1390.79,704.281 1391.35,703.813 1391.91,702.507 1392.47,718.426 1393.03,764.036 1393.58,759.266 1394.14,758.094 1394.7,738.163 1395.26,721.384 1395.82,716.976 1396.38,731.836 1396.94,697.467 1397.5,727.239 1398.06,718.477 1398.62,732.822 1399.18,728.963 1399.74,726.935 1400.3,710.254 1400.86,707.494 1401.41,694.186 1401.97,693.044 1402.53,692.255 1403.09,694.7 1403.65,675.364 1404.21,644.479 1404.77,661.186 1405.33,661.457 1405.89,649.15 1406.45,634.407 1407.01,655.19 1407.57,653.84 1408.13,670.244 1408.68,689.494 1409.24,691.435 1409.8,704.12 1410.36,684.839 1410.92,678.352 1411.48,646.235 1412.04,646.723 1412.6,646.702 1413.16,648.338 1413.72,649.618 1414.28,635.711 1414.84,622.313 1415.4,624.027 1415.95,629.391 1416.51,632.851 1417.07,698.873 1417.63,698.826 1418.19,698.028 1418.75,696.671 1419.31,728.029 1419.87,723.889 1420.43,703.578 1420.99,699.858 1421.55,714.004 1422.11,710.892 1422.67,678.734 1423.23,648.139 1423.78,651.017 1424.34,654.225 1424.9,624.865 1425.46,627.536 1426.02,662.504 1426.58,630.325 1427.14,616.003 1427.7,585.876 1428.26,609.34 1428.82,615.872 1429.38,616.994 1429.94,641.38 1430.5,638.928 1431.05,654.676 1431.61,660.3 1432.17,678.114 1432.73,680.162 1433.29,663.644 1433.85,649.998 1434.41,647.967 1434.97,635.08 1435.53,637.588 1436.09,636.666 1436.65,637.402 1437.21,656.305 1437.77,655.807 1438.33,658.507 1438.88,640.83 1439.44,626.107 1440,629.604 1440.56,631.18 1441.12,652.093 1441.68,654.449 1442.24,656.569 1442.8,638.766 1443.36,689.725 1443.92,691.395 1444.48,691.856 1445.04,661.579 1445.6,643.859 1446.15,661.557 1446.71,679.573 1447.27,646.721 1447.83,647.742 1448.39,695.578 1448.95,696.995 1449.51,698.084 1450.07,699.726 1450.63,702.424 1451.19,704.387 1451.75,703.015 1452.31,702.275 1452.87,717.038 1453.42,744.058 1453.98,688.867 1454.54,669.818 1455.1,689.058 1455.66,688.431 1456.22,717.747 1456.78,731.158 1457.34,695.166 1457.9,676.628 1458.46,674.97 1459.02,694.157 1459.58,723.57 1460.14,705.677 1460.7,688.967 1461.25,705.215 1461.81,751.974 1462.37,732.038 1462.93,743.106 1463.49,743.816 1464.05,756.133 1464.61,719.969 1465.17,717.961 1465.73,719.76 1466.29,732.231 1466.85,725.543 1467.41,736.654 1467.97,751.326 1468.52,748.497 1469.08,745.509 1469.64,759.499 1470.2,771.288 1470.76,800.561 1471.32,750.622 1471.88,778.655 1472.44,757.546 1473,753.157 1473.56,717.66 1474.12,733.135 1474.68,777.161 1475.24,839.182 1475.79,863.46 1476.35,799.611 1476.91,795.488 1477.47,789.462 1478.03,782.864 1478.59,759.301 1479.15,741.061 1479.71,754 1480.27,746.24 1480.83,743.946 1481.39,743.388 1481.95,706.343 1482.51,706.503 1483.07,702.032 1483.62,685.302 1484.18,649.464 1484.74,701.714 1485.3,733.149 1485.86,730.112 1486.42,726.722 1486.98,708.243 1487.54,706.105 1488.1,722.673 1488.66,721.007 1489.22,716.881 1489.78,665.868 1490.34,634.545 1490.89,601.539 1491.45,638.375 1492.01,653.657 1492.57,640.531 1493.13,625.032 1493.69,626.6 1494.25,660.554 1494.81,662.986 1495.37,629.769 1495.93,598.079 1496.49,586.122 1497.05,608.193 1497.61,643.731 1498.16,633.657 1498.72,653.055 1499.28,672.184 1499.84,687.94 1500.4,672.172 1500.96,675.944 1501.52,704.757 1502.08,689.413 1502.64,689.973 1503.2,672.854 1503.76,725.521 1504.32,740.928 1504.88,736.305 1505.44,716.303 1505.99,714.512 1506.55,713.548 1507.11,713.375 1507.67,710.992 1508.23,741.664 1508.79,706.333 1509.35,721.089 1509.91,735.381 1510.47,734.678 1511.03,750.698 1511.59,728.039 1512.15,739.753 1512.71,737.293 1513.26,748.872 1513.82,709.742 1514.38,707.538 1514.94,741.353 1515.5,768.812 1516.06,782.875 1516.62,777.154 1517.18,774.563 1517.74,786.919 1518.3,766.487 1518.86,809.13 1519.42,816.388 1519.98,825.704 1520.53,756.71 1521.09,771.074 1521.65,745.321 1522.21,744.705 1522.77,773.451 1523.33,720.338 1523.89,722.447 1524.45,720.202 1525.01,718.658 1525.57,683.693 1526.13,683.546 1526.69,667.62 1527.25,654.021 1527.81,652.339 1528.36,652.225 1528.92,685.888 1529.48,684.802 1530.04,682.888 1530.6,681.254 1531.16,727.912 1531.72,690.218 1532.28,690.97 1532.84,692.863 1533.4,660.191 1533.96,661.478 1534.52,658.33 1535.08,626.479 1535.63,609.525 1536.19,582.023 1536.75,582.355 1537.31,574.679 1537.87,578.514 1538.43,585.271 1538.99,575.349 1539.55,582.474 1540.11,602.948 1540.67,545.831 1541.23,586.296 1541.79,624.561 1542.35,592.492 1542.9,578.267 1543.46,570.648 1544.02,559.296 1544.58,578.79 1545.14,602.5 1545.7,591.36 1546.26,581.568 1546.82,622.554 1547.38,625.116 1547.94,629.807 1548.5,635.402 1549.06,639.368 1549.62,641.464 1550.18,642.56 1550.73,661.334 1551.29,681.423 1551.85,682.57 1552.41,683.451 1552.97,701.595 1553.53,717.776 1554.09,718.223 1554.65,749.458 1555.21,730.286 1555.77,714.517 1556.33,714.709 1556.89,715.277 1557.45,743.34 1558,740.192 1558.56,749.804 1559.12,745.876 1559.68,725.01 1560.24,689.115 1560.8,671.644 1561.36,656.473 1561.92,672.774 1562.48,655.207 1563.04,657.514 1563.6,659.459 1564.16,677.215 1564.72,660.782 1565.28,599.952 1565.83,589.293 1566.39,560.642 1566.95,566.66 1567.51,575.075 1568.07,563.158 1568.63,601.334 1569.19,638.051 1569.75,672.457 1570.31,674.899 1570.87,693.134 1571.43,675.218 1571.99,675.146 1572.55,659.997 1573.1,679.805 1573.66,711.595 1574.22,660.239 1574.78,661.338 1575.34,665.625 1575.9,668.134 1576.46,667.464 1577.02,699.802 1577.58,697.792 1578.14,698.868 1578.7,677.748 1579.26,707.903 1579.82,704.223 1580.37,723.46 1580.93,707.976 1581.49,703.425 1582.05,699.271 1582.61,684.77 1583.17,686.28 1583.73,655.439 1584.29,657.166 1584.85,675.043 1585.41,674.608 1585.97,692.859 1586.53,725.664 1587.09,690.757 1587.65,676.735 1588.2,675.048 1588.76,674.753 1589.32,678.399 1589.88,676.739 1590.44,675.602 1591,693.955 1591.56,693.501 1592.12,661.375 1592.68,662.523 1593.24,697.452 1593.8,709.986 1594.36,726.099 1594.92,737.476 1595.47,764.429 1596.03,757.367 1596.59,751.504 1597.15,747.006 1597.71,747.005 1598.27,742.315 1598.83,675.723 1599.39,705.979 1599.95,655.545 1600.51,656.88 1601.07,657.361 1601.63,660.49 1602.19,660.458 1602.74,665.477 1603.3,652.223 1603.86,655.27 1604.42,674.503 1604.98,657.271 1605.54,673.929 1606.1,658.51 1606.66,673.224 1607.22,671.969 1607.78,669.614 1608.34,672.241 1608.9,657.452 1609.46,694.25 1610.02,695.172 1610.57,709.683 1611.13,693.518 1611.69,679.566 1612.25,682.242 1612.81,680.095 1613.37,695.365 1613.93,728.067 1614.49,710.748 1615.05,695.12 1615.61,711.166 1616.17,711.921 1616.73,696.193 1617.29,716.05 1617.84,714.787 1618.4,744.173 1618.96,723.534 1619.52,710.179 1620.08,693.681 1620.64,692.719 1621.2,693.721 1621.76,674.61 1622.32,689.288 1622.88,671.321 1623.44,619.108 1624,636.953 1624.56,628.194 1625.11,631.031 1625.67,600.729 1626.23,621.231 1626.79,606.779 1627.35,563.199 1627.91,568.819 1628.47,560.547 1629.03,535.016 1629.59,544.619 1630.15,534.496 1630.71,558.865 1631.27,601.355 1631.83,607.879 1632.39,598.449 1632.94,606.901 1633.5,608.31 1634.06,644.449 1634.62,644.653 1635.18,649.176 1635.74,635.234 1636.3,655.987 1636.86,688.344 1637.42,702.483 1637.98,671.852 1638.54,676.389 1639.1,705.885 1639.66,752.339 1640.21,782.125 1640.77,760.632 1641.33,788.388 1641.89,797.134 1642.45,789.266 1643.01,782.909 1643.57,775.318 1644.13,752.979 1644.69,748.225 1645.25,727.321 1645.81,726.689 1646.37,694.927 1646.93,661.589 1647.48,681.822 1648.04,681.448 1648.6,681.299 1649.16,694.636 1649.72,711.41 1650.28,681.644 1650.84,682.768 1651.4,681.448 1651.96,685.676 1652.52,685.079 1653.08,684.912 1653.64,681.675 1654.2,681.506 1654.76,695.613 1655.31,696.688 1655.87,712.846 1656.43,681.506 1656.99,613.308 1657.55,621.824 1658.11,656.294 1658.67,624.112 1659.23,623.866 1659.79,689.652 1660.35,673.445 1660.91,736.912 1661.47,718.966 1662.03,748.729 1662.58,749.402 1663.14,744.999 1663.7,724.324 1664.26,753.003 1664.82,765.899 1665.38,762.541 1665.94,758.388 1666.5,768.491 1667.06,761.96 1667.62,772.482 1668.18,731.902 1668.74,695.87 1669.3,695.477 1669.85,691.245 1670.41,672.494 1670.97,672.839 1671.53,672.004 1672.09,636.599 1672.65,641.13 1673.21,641.596 1673.77,672.465 1674.33,656.653 1674.89,640.776 1675.45,641.449 1676.01,611.25 1676.57,619.098 1677.13,620.81 1677.68,625.68 1678.24,641.328 1678.8,625.35 1679.36,644.385 1679.92,681.445 1680.48,697.806 1681.04,681.314 1681.6,664.349 1682.16,680.883 1682.72,695.017 1683.28,742.906 1683.84,736.435 1684.4,768.178 1684.95,748.336 1685.51,744.989 1686.07,727.725 1686.63,724.673 1687.19,642.919 1687.75,625.605 1688.31,646.611 1688.87,650.678 1689.43,635.597 1689.99,637.065 1690.55,638.974 1691.11,657.636 1691.67,662.031 1692.23,627.935 1692.78,663.485 1693.34,695.672 1693.9,695.046 1694.46,707.112 1695.02,707.36 1695.58,689.396 1696.14,656.063 1696.7,657.462 1697.26,656.686 1697.82,624.985 1698.38,622.991 1698.94,591.837 1699.5,627.361 1700.05,643.996 1700.61,676.646 1701.17,678.305 1701.73,662.398 1702.29,649.157 1702.85,652.624 1703.41,666.673 1703.97,652.946 1704.53,665.284 1705.09,651.727 1705.65,665.873 1706.21,665.263 1706.77,616.497 1707.32,604.167 1707.88,593.358 1708.44,600.201 1709,621.484 1709.56,606.194 1710.12,611.786 1710.68,617.667 1711.24,639.908 1711.8,657.786 1712.36,656.576 1712.92,660.717 1713.48,664.819 1714.04,667.401 1714.6,637.518 1715.15,660.266 1715.71,650.267 1716.27,651.846 1716.83,688.146 1717.39,701.548 1717.95,705.401 1718.51,733.92 1719.07,748.048 1719.63,742.236 1720.19,756.91 1720.75,734.999 1721.31,747.475 1721.87,760.057 1722.42,773.276 1722.98,785.679 1723.54,759.469 1724.1,755.346 1724.66,754.76 1725.22,735.32 1725.78,717.927 1726.34,702.142 1726.9,699.26 1727.46,700.144 1728.02,697.687 1728.58,729.269 1729.14,739.941 1729.69,718.404 1730.25,734.539 1730.81,744.973 1731.37,689.239 1731.93,670.672 1732.49,688.093 1733.05,637.556 1733.61,623.107 1734.17,612.021 1734.73,585.399 1735.29,572.769 1735.85,561.973 1736.41,565.698 1736.97,590.157 1737.52,582.964 1738.08,576.011 1738.64,562.163 1739.2,602.204 1739.76,621.583 1740.32,607.322 1740.88,625.575 1741.44,679.945 1742,662.371 1742.56,669.314 1743.12,656.523 1743.68,659.254 1744.24,659.419 1744.79,659.703 1745.35,692.377 1745.91,725.531 1746.47,708.352 1747.03,708.856 1747.59,690.771 1748.15,692.682 1748.71,654.84 1749.27,639.341 1749.83,663.06 1750.39,644.947 1750.95,611.684 1751.51,601.073 1752.06,620.422 1752.62,607.74 1753.18,615.45 1753.74,619.602 1754.3,640.64 1754.86,628.093 1755.42,598.611 1755.98,606.659 1756.54,593.948 1757.1,626.664 1757.66,661.967 1758.22,662.838 1758.78,648.225 1759.34,652.925 1759.89,671.658 1760.45,656.412 1761.01,661.73 1761.57,679.226 1762.13,695.803 1762.69,699.072 1763.25,697.455 1763.81,693.002 1764.37,706.699 1764.93,721.091 1765.49,738.776 1766.05,749.691 1766.61,764.764 1767.16,742.883 1767.72,741.777 1768.28,725.296 1768.84,723.655 1769.4,736.66 1769.96,766.381 1770.52,760.376 1771.08,752.564 1771.64,764.248 1772.2,760.006 1772.76,755.331 1773.32,800.154 1773.88,796.744 1774.43,776.162 1774.99,756.593 1775.55,754.063 1776.11,719.235 1776.67,719.196 1777.23,716.139 1777.79,696.935 1778.35,649.28 1778.91,699.558 1779.47,716.407 1780.03,733.524 1780.59,720.075 1781.15,752.132 1781.71,749.505 1782.26,760.3 1782.82,769.042 1783.38,714.118 1783.94,727.391 1784.5,709.36 1785.06,692.93 1785.62,709.267 1786.18,689.888 1786.74,690.226 1787.3,707.978 1787.86,706.514 1788.42,704.294 1788.98,685.299 1789.53,653.151 1790.09,605.833 1790.65,612.122 1791.21,632.091 1791.77,654.298 1792.33,683.2 1792.89,667.433 1793.45,671.724 1794.01,655.935 1794.57,670.957 1795.13,737.125 1795.69,752.143 1796.25,704.606 1796.8,686.757 1797.36,687.933 1797.92,705.51 1798.48,689.401 1799.04,723.761 1799.6,701.869 1800.16,665.977 1800.72,684.361 1801.28,702.873 1801.84,715.854 1802.4,713.209 1802.96,724.941 1803.52,754.823 1804.08,750.086 1804.63,743.963 1805.19,757.828 1805.75,756.336 1806.31,718.89 1806.87,700.293 1807.43,700.559 1807.99,702.809 1808.55,702.678 1809.11,702.929 1809.67,670.125 1810.23,672.234 1810.79,675.039 1811.35,691.661 1811.9,740.49 1812.46,705.262 1813.02,724.084 1813.58,693.951 1814.14,711.436 1814.7,631.264 1815.26,630.552 1815.82,628.95 1816.38,691.097 1816.94,674.846 1817.5,677.862 1818.06,651.103 1818.62,619.989 1819.18,624.717 1819.73,628.912 1820.29,629.608 1820.85,647.976 1821.41,664.282 1821.97,698.759 1822.53,717.297 1823.09,713.22 1823.65,713.976 1824.21,712.444 1824.77,710.008 1825.33,725.167 1825.89,707.055 1826.45,702.767 1827,672.751 1827.56,707.788 1828.12,703.926 1828.68,685.185 1829.24,733.963 1829.8,762.438 1830.36,776.642 1830.92,757.166 1831.48,736.449 1832.04,714.388 1832.6,647.468 1833.16,651.227 1833.72,653.727 1834.27,656.048 1834.83,658.849 1835.39,626.381 1835.95,599.636 1836.51,603.333 1837.07,624.088 1837.63,597.074 1838.19,615.924 \"/>\n<path clip-path=\"url(#clip273)\" d=\"M720.247 690.58 L720.806 690.58 L721.365 690.58 L721.924 690.58 L722.484 690.58 L723.043 690.58 L723.602 690.58 L724.161 690.58 L724.721 690.58 L725.28 690.58 L725.839 690.58 L726.398 690.58 L726.958 690.58 L727.517 690.58 L728.076 690.58 L728.635 690.58 L729.195 690.58 L729.754 690.58 L730.313 690.58 L730.872 690.58 L731.432 690.58 L731.991 690.58 L732.55 690.58 L733.109 690.58 L733.669 690.58 L734.228 690.58 L734.787 690.58 L735.346 690.58 L735.906 690.58 L736.465 690.58 L737.024 690.58 L737.583 690.58 L738.143 690.58 L738.702 690.58 L739.261 690.58 L739.82 690.58 L740.38 690.58 L740.939 690.58 L741.498 690.58 L742.057 690.58 L742.617 690.58 L743.176 690.58 L743.735 690.58 L744.294 690.58 L744.854 690.58 L745.413 690.58 L745.972 690.58 L746.531 690.58 L747.091 690.58 L747.65 690.58 L748.209 690.58 L748.768 690.58 L749.328 690.58 L749.887 690.58 L750.446 690.58 L751.005 690.58 L751.565 690.58 L752.124 690.58 L752.683 690.58 L753.242 690.58 L753.802 690.58 L754.361 690.58 L754.92 690.58 L755.479 690.58 L756.039 690.58 L756.598 690.58 L757.157 690.58 L757.716 690.58 L758.276 690.58 L758.835 690.58 L759.394 690.58 L759.953 690.58 L760.513 690.58 L761.072 690.58 L761.631 690.58 L762.19 690.58 L762.75 690.58 L763.309 690.58 L763.868 690.58 L764.427 690.58 L764.987 690.58 L765.546 690.58 L766.105 690.58 L766.664 690.58 L767.224 690.58 L767.783 690.58 L768.342 690.58 L768.901 690.58 L769.461 690.58 L770.02 690.58 L770.579 690.58 L771.138 690.58 L771.698 690.58 L772.257 690.58 L772.816 690.58 L773.375 690.58 L773.935 690.58 L774.494 690.58 L775.053 690.58 L775.612 690.58 L776.172 690.58 L776.731 690.58 L777.29 690.58 L777.849 690.58 L778.409 690.58 L778.968 690.58 L779.527 690.58 L780.086 690.58 L780.646 690.58 L781.205 690.58 L781.764 690.58 L782.323 690.58 L782.883 690.58 L783.442 690.58 L784.001 690.58 L784.56 690.58 L785.12 690.58 L785.679 690.58 L786.238 690.58 L786.797 690.58 L787.357 690.58 L787.916 690.58 L788.475 690.58 L789.034 690.58 L789.594 690.58 L790.153 690.58 L790.712 690.58 L791.271 690.58 L791.831 690.58 L792.39 690.58 L792.949 690.58 L793.508 690.58 L794.068 690.58 L794.627 690.58 L795.186 690.58 L795.745 690.58 L796.305 690.58 L796.864 690.58 L797.423 690.58 L797.982 690.58 L798.542 690.58 L799.101 690.58 L799.66 690.58 L800.219 690.58 L800.779 690.58 L801.338 690.58 L801.897 690.58 L802.456 690.58 L803.016 690.58 L803.575 690.58 L804.134 690.58 L804.693 690.58 L805.253 690.58 L805.812 690.58 L806.371 690.58 L806.931 690.58 L807.49 690.58 L808.049 690.58 L808.608 690.58 L809.168 690.58 L809.727 690.58 L810.286 690.58 L810.845 690.58 L811.405 690.58 L811.964 690.58 L812.523 690.58 L813.082 690.58 L813.642 690.58 L814.201 690.58 L814.76 690.58 L815.319 690.58 L815.879 690.58 L816.438 690.58 L816.997 690.58 L817.556 690.58 L818.116 690.58 L818.675 690.58 L819.234 690.58 L819.793 690.58 L820.353 690.58 L820.912 690.58 L821.471 690.58 L822.03 690.58 L822.59 690.58 L823.149 690.58 L823.708 690.58 L824.267 690.58 L824.827 690.58 L825.386 690.58 L825.945 690.58 L826.504 690.58 L827.064 690.58 L827.623 690.58 L828.182 690.58 L828.741 690.58 L829.301 690.58 L829.86 690.58 L830.419 690.58 L830.978 690.58 L831.538 690.58 L832.097 690.58 L832.656 690.58 L833.215 690.58 L833.775 690.58 L834.334 690.58 L834.893 690.58 L835.452 690.58 L836.012 690.58 L836.571 690.58 L837.13 690.58 L837.689 690.58 L838.249 690.58 L838.808 690.58 L839.367 690.58 L839.926 690.58 L840.486 690.58 L841.045 690.58 L841.604 690.58 L842.163 690.58 L842.723 690.58 L843.282 690.58 L843.841 690.58 L844.4 690.58 L844.96 690.58 L845.519 690.58 L846.078 690.58 L846.637 690.58 L847.197 690.58 L847.756 690.58 L848.315 690.58 L848.874 690.58 L849.434 690.58 L849.993 690.58 L850.552 690.58 L851.111 690.58 L851.671 690.58 L852.23 690.58 L852.789 690.58 L853.348 690.58 L853.908 690.58 L854.467 690.58 L855.026 690.58 L855.585 690.58 L856.145 690.58 L856.704 690.58 L857.263 690.58 L857.822 690.58 L858.382 690.58 L858.941 690.58 L859.5 690.58 L860.059 690.58 L860.619 690.58 L861.178 690.58 L861.737 690.58 L862.296 690.58 L862.856 690.58 L863.415 690.58 L863.974 690.58 L864.533 690.58 L865.093 690.58 L865.652 690.58 L866.211 690.58 L866.77 690.58 L867.33 690.58 L867.889 690.58 L868.448 690.58 L869.007 690.58 L869.567 690.58 L870.126 690.58 L870.685 690.58 L871.244 690.58 L871.804 690.58 L872.363 690.58 L872.922 690.58 L873.481 690.58 L874.041 690.58 L874.6 690.58 L875.159 690.58 L875.718 690.58 L876.278 690.58 L876.837 690.58 L877.396 690.58 L877.955 690.58 L878.515 690.58 L879.074 690.58 L879.633 690.58 L880.192 690.58 L880.752 690.58 L881.311 690.58 L881.87 690.58 L882.429 690.58 L882.989 690.58 L883.548 690.58 L884.107 690.58 L884.666 690.58 L885.226 690.58 L885.785 690.58 L886.344 690.58 L886.903 690.58 L887.463 690.58 L888.022 690.58 L888.581 690.58 L889.14 690.58 L889.7 690.58 L890.259 690.58 L890.818 690.58 L891.377 690.58 L891.937 690.58 L892.496 690.58 L893.055 690.58 L893.614 690.58 L894.174 690.58 L894.733 690.58 L895.292 690.58 L895.851 690.58 L896.411 690.58 L896.97 690.58 L897.529 690.58 L898.088 690.58 L898.648 690.58 L899.207 690.58 L899.766 690.58 L900.325 690.58 L900.885 690.58 L901.444 690.58 L902.003 690.58 L902.562 690.58 L903.122 690.58 L903.681 690.58 L904.24 690.58 L904.799 690.58 L905.359 690.58 L905.918 690.58 L906.477 690.58 L907.036 690.58 L907.596 690.58 L908.155 690.58 L908.714 690.58 L909.273 690.58 L909.833 690.58 L910.392 690.58 L910.951 690.58 L911.51 690.58 L912.07 690.58 L912.629 690.58 L913.188 690.58 L913.747 690.58 L914.307 690.58 L914.866 690.58 L915.425 690.58 L915.984 690.58 L916.544 690.58 L917.103 690.58 L917.662 690.58 L918.221 690.58 L918.781 690.58 L919.34 690.58 L919.899 690.58 L920.458 690.58 L921.018 690.58 L921.577 690.58 L922.136 690.58 L922.695 690.58 L923.255 690.58 L923.814 690.58 L924.373 690.58 L924.932 690.58 L925.492 690.58 L926.051 690.58 L926.61 690.58 L927.169 690.58 L927.729 690.58 L928.288 690.58 L928.847 690.58 L929.406 690.58 L929.966 690.58 L930.525 690.58 L931.084 690.58 L931.644 690.58 L932.203 690.58 L932.762 690.58 L933.321 690.58 L933.881 690.58 L934.44 690.58 L934.999 690.58 L935.558 690.58 L936.118 690.58 L936.677 690.58 L937.236 690.58 L937.795 690.58 L938.355 690.58 L938.914 690.58 L939.473 690.58 L940.032 690.58 L940.592 690.58 L941.151 690.58 L941.71 690.58 L942.269 690.58 L942.829 690.58 L943.388 690.58 L943.947 690.58 L944.506 690.58 L945.066 690.58 L945.625 690.58 L946.184 690.58 L946.743 690.58 L947.303 690.58 L947.862 690.58 L948.421 690.58 L948.98 690.58 L949.54 690.58 L950.099 690.58 L950.658 690.58 L951.217 690.58 L951.777 690.58 L952.336 690.58 L952.895 690.58 L953.454 690.58 L954.014 690.58 L954.573 690.58 L955.132 690.58 L955.691 690.58 L956.251 690.58 L956.81 690.58 L957.369 690.58 L957.928 690.58 L958.488 690.58 L959.047 690.58 L959.606 690.58 L960.165 690.58 L960.725 690.58 L961.284 690.58 L961.843 690.58 L962.402 690.58 L962.962 690.58 L963.521 690.58 L964.08 690.58 L964.639 690.58 L965.199 690.58 L965.758 690.58 L966.317 690.58 L966.876 690.58 L967.436 690.58 L967.995 690.58 L968.554 690.58 L969.113 690.58 L969.673 690.58 L970.232 690.58 L970.791 690.58 L971.35 690.58 L971.91 690.58 L972.469 690.58 L973.028 690.58 L973.587 690.58 L974.147 690.58 L974.706 690.58 L975.265 690.58 L975.824 690.58 L976.384 690.58 L976.943 690.58 L977.502 690.58 L978.061 690.58 L978.621 690.58 L979.18 690.58 L979.739 690.58 L980.298 690.58 L980.858 690.58 L981.417 690.58 L981.976 690.58 L982.535 690.58 L983.095 690.58 L983.654 690.58 L984.213 690.58 L984.772 690.58 L985.332 690.58 L985.891 690.58 L986.45 690.58 L987.009 690.58 L987.569 690.58 L988.128 690.58 L988.687 690.58 L989.246 690.58 L989.806 690.58 L990.365 690.58 L990.924 690.58 L991.483 690.58 L992.043 690.58 L992.602 690.58 L993.161 690.58 L993.72 690.58 L994.28 690.58 L994.839 690.58 L995.398 690.58 L995.957 690.58 L996.517 690.58 L997.076 690.58 L997.635 690.58 L998.194 690.58 L998.754 690.58 L999.313 690.58 L999.872 690.58 L1000.43 690.58 L1000.99 690.58 L1001.55 690.58 L1002.11 690.58 L1002.67 690.58 L1003.23 690.58 L1003.79 690.58 L1004.35 690.58 L1004.91 690.58 L1005.46 690.58 L1006.02 690.58 L1006.58 690.58 L1007.14 690.58 L1007.7 690.58 L1008.26 690.58 L1008.82 690.58 L1009.38 690.58 L1009.94 690.58 L1010.5 690.58 L1011.06 690.58 L1011.62 690.58 L1012.18 690.58 L1012.73 690.58 L1013.29 690.58 L1013.85 690.58 L1014.41 690.58 L1014.97 690.58 L1015.53 690.58 L1016.09 690.58 L1016.65 690.58 L1017.21 690.58 L1017.77 690.58 L1018.33 690.58 L1018.89 690.58 L1019.45 690.58 L1020.01 690.58 L1020.56 690.58 L1021.12 690.58 L1021.68 690.58 L1022.24 690.58 L1022.8 690.58 L1023.36 690.58 L1023.92 690.58 L1024.48 690.58 L1025.04 690.58 L1025.6 690.58 L1026.16 690.58 L1026.72 690.58 L1027.28 690.58 L1027.83 690.58 L1028.39 690.58 L1028.95 690.58 L1029.51 690.58 L1030.07 690.58 L1030.63 690.58 L1031.19 690.58 L1031.75 690.58 L1032.31 690.58 L1032.87 690.58 L1033.43 690.58 L1033.99 690.58 L1034.55 690.58 L1035.1 690.58 L1035.66 690.58 L1036.22 690.58 L1036.78 690.58 L1037.34 690.58 L1037.9 690.58 L1038.46 690.58 L1039.02 690.58 L1039.58 690.58 L1040.14 690.58 L1040.7 690.58 L1041.26 690.58 L1041.82 690.58 L1042.38 690.58 L1042.93 690.58 L1043.49 690.58 L1044.05 690.58 L1044.61 690.58 L1045.17 690.58 L1045.73 690.58 L1046.29 690.58 L1046.85 690.58 L1047.41 690.58 L1047.97 690.58 L1048.53 690.58 L1049.09 690.58 L1049.65 690.58 L1050.2 690.58 L1050.76 690.58 L1051.32 690.58 L1051.88 690.58 L1052.44 690.58 L1053 690.58 L1053.56 690.58 L1054.12 690.58 L1054.68 690.58 L1055.24 690.58 L1055.8 690.58 L1056.36 690.58 L1056.92 690.58 L1057.48 690.58 L1058.03 690.58 L1058.59 690.58 L1059.15 690.58 L1059.71 690.58 L1060.27 690.58 L1060.83 690.58 L1061.39 690.58 L1061.95 690.58 L1062.51 690.58 L1063.07 690.58 L1063.63 690.58 L1064.19 690.58 L1064.75 690.58 L1065.3 690.58 L1065.86 690.58 L1066.42 690.58 L1066.98 690.58 L1067.54 690.58 L1068.1 690.58 L1068.66 690.58 L1069.22 690.58 L1069.78 690.58 L1070.34 690.58 L1070.9 690.58 L1071.46 690.58 L1072.02 690.58 L1072.57 690.58 L1073.13 690.58 L1073.69 690.58 L1074.25 690.58 L1074.81 690.58 L1075.37 690.58 L1075.93 690.58 L1076.49 690.58 L1077.05 690.58 L1077.61 690.58 L1078.17 690.58 L1078.73 690.58 L1079.29 690.58 L1079.85 690.58 L1080.4 690.58 L1080.96 690.58 L1081.52 690.58 L1082.08 690.58 L1082.64 690.58 L1083.2 690.58 L1083.76 690.58 L1084.32 690.58 L1084.88 690.58 L1085.44 690.58 L1086 690.58 L1086.56 690.58 L1087.12 690.58 L1087.67 690.58 L1088.23 690.58 L1088.79 690.58 L1089.35 690.58 L1089.91 690.58 L1090.47 690.58 L1091.03 690.58 L1091.59 690.58 L1092.15 690.58 L1092.71 690.58 L1093.27 690.58 L1093.83 690.58 L1094.39 690.58 L1094.94 690.58 L1095.5 690.58 L1096.06 690.58 L1096.62 690.58 L1097.18 690.58 L1097.74 690.58 L1098.3 690.58 L1098.86 690.58 L1099.42 690.58 L1099.98 690.58 L1100.54 690.58 L1101.1 690.58 L1101.66 690.58 L1102.22 690.58 L1102.77 690.58 L1103.33 690.58 L1103.89 690.58 L1104.45 690.58 L1105.01 690.58 L1105.57 690.58 L1106.13 690.58 L1106.69 690.58 L1107.25 690.58 L1107.81 690.58 L1108.37 690.58 L1108.93 690.58 L1109.49 690.58 L1110.04 690.58 L1110.6 690.58 L1111.16 690.58 L1111.72 690.58 L1112.28 690.58 L1112.84 690.58 L1113.4 690.58 L1113.96 690.58 L1114.52 690.58 L1115.08 690.58 L1115.64 690.58 L1116.2 690.58 L1116.76 690.58 L1117.31 690.58 L1117.87 690.58 L1118.43 690.58 L1118.99 690.58 L1119.55 690.58 L1120.11 690.58 L1120.67 690.58 L1121.23 690.58 L1121.79 690.58 L1122.35 690.58 L1122.91 690.58 L1123.47 690.58 L1124.03 690.58 L1124.59 690.58 L1125.14 690.58 L1125.7 690.58 L1126.26 690.58 L1126.82 690.58 L1127.38 690.58 L1127.94 690.58 L1128.5 690.58 L1129.06 690.58 L1129.62 690.58 L1130.18 690.58 L1130.74 690.58 L1131.3 690.58 L1131.86 690.58 L1132.41 690.58 L1132.97 690.58 L1133.53 690.58 L1134.09 690.58 L1134.65 690.58 L1135.21 690.58 L1135.77 690.58 L1136.33 690.58 L1136.89 690.58 L1137.45 690.58 L1138.01 690.58 L1138.57 690.58 L1139.13 690.58 L1139.68 690.58 L1140.24 690.58 L1140.8 690.58 L1141.36 690.58 L1141.92 690.58 L1142.48 690.58 L1143.04 690.58 L1143.6 690.58 L1144.16 690.58 L1144.72 690.58 L1145.28 690.58 L1145.84 690.58 L1146.4 690.58 L1146.96 690.58 L1147.51 690.58 L1148.07 690.58 L1148.63 690.58 L1149.19 690.58 L1149.75 690.58 L1150.31 690.58 L1150.87 690.58 L1151.43 690.58 L1151.99 690.58 L1152.55 690.58 L1153.11 690.58 L1153.67 690.58 L1154.23 690.58 L1154.78 690.58 L1155.34 690.58 L1155.9 690.58 L1156.46 690.58 L1157.02 690.58 L1157.58 690.58 L1158.14 690.58 L1158.7 690.58 L1159.26 690.58 L1159.82 690.58 L1160.38 690.58 L1160.94 690.58 L1161.5 690.58 L1162.05 690.58 L1162.61 690.58 L1163.17 690.58 L1163.73 690.58 L1164.29 690.58 L1164.85 690.58 L1165.41 690.58 L1165.97 690.58 L1166.53 690.58 L1167.09 690.58 L1167.65 690.58 L1168.21 690.58 L1168.77 690.58 L1169.33 690.58 L1169.88 690.58 L1170.44 690.58 L1171 690.58 L1171.56 690.58 L1172.12 690.58 L1172.68 690.58 L1173.24 690.58 L1173.8 690.58 L1174.36 690.58 L1174.92 690.58 L1175.48 690.58 L1176.04 690.58 L1176.6 690.58 L1177.15 690.58 L1177.71 690.58 L1178.27 690.58 L1178.83 690.58 L1179.39 690.58 L1179.95 690.58 L1180.51 690.58 L1181.07 690.58 L1181.63 690.58 L1182.19 690.58 L1182.75 690.58 L1183.31 690.58 L1183.87 690.58 L1184.43 690.58 L1184.98 690.58 L1185.54 690.58 L1186.1 690.58 L1186.66 690.58 L1187.22 690.58 L1187.78 690.58 L1188.34 690.58 L1188.9 690.58 L1189.46 690.58 L1190.02 690.58 L1190.58 690.58 L1191.14 690.58 L1191.7 690.58 L1192.25 690.58 L1192.81 690.58 L1193.37 690.58 L1193.93 690.58 L1194.49 690.58 L1195.05 690.58 L1195.61 690.58 L1196.17 690.58 L1196.73 690.58 L1197.29 690.58 L1197.85 690.58 L1198.41 690.58 L1198.97 690.58 L1199.52 690.58 L1200.08 690.58 L1200.64 690.58 L1201.2 690.58 L1201.76 690.58 L1202.32 690.58 L1202.88 690.58 L1203.44 690.58 L1204 690.58 L1204.56 690.58 L1205.12 690.58 L1205.68 690.58 L1206.24 690.58 L1206.8 690.58 L1207.35 690.58 L1207.91 690.58 L1208.47 690.58 L1209.03 690.58 L1209.59 690.58 L1210.15 690.58 L1210.71 690.58 L1211.27 690.58 L1211.83 690.58 L1212.39 690.58 L1212.95 690.58 L1213.51 690.58 L1214.07 690.58 L1214.62 690.58 L1215.18 690.58 L1215.74 690.58 L1216.3 690.58 L1216.86 690.58 L1217.42 690.58 L1217.98 690.58 L1218.54 690.58 L1219.1 690.58 L1219.66 690.58 L1220.22 690.58 L1220.78 690.58 L1221.34 690.58 L1221.89 690.58 L1222.45 690.58 L1223.01 690.58 L1223.57 690.58 L1224.13 690.58 L1224.69 690.58 L1225.25 690.58 L1225.81 690.58 L1226.37 690.58 L1226.93 690.58 L1227.49 690.58 L1228.05 690.58 L1228.61 690.58 L1229.17 690.58 L1229.72 690.58 L1230.28 690.58 L1230.84 690.58 L1231.4 690.58 L1231.96 690.58 L1232.52 690.58 L1233.08 690.58 L1233.64 690.58 L1234.2 690.58 L1234.76 690.58 L1235.32 690.58 L1235.88 690.58 L1236.44 690.58 L1236.99 690.58 L1237.55 690.58 L1238.11 690.58 L1238.67 690.58 L1239.23 690.58 L1239.79 690.58 L1240.35 690.58 L1240.91 690.58 L1241.47 690.58 L1242.03 690.58 L1242.59 690.58 L1243.15 690.58 L1243.71 690.58 L1244.26 690.58 L1244.82 690.58 L1245.38 690.58 L1245.94 690.58 L1246.5 690.58 L1247.06 690.58 L1247.62 690.58 L1248.18 690.58 L1248.74 690.58 L1249.3 690.58 L1249.86 690.58 L1250.42 690.58 L1250.98 690.58 L1251.54 690.58 L1252.09 690.58 L1252.65 690.58 L1253.21 690.58 L1253.77 690.58 L1254.33 690.58 L1254.89 690.58 L1255.45 690.58 L1256.01 690.58 L1256.57 690.58 L1257.13 690.58 L1257.69 690.58 L1258.25 690.58 L1258.81 690.58 L1259.36 690.58 L1259.92 690.58 L1260.48 690.58 L1261.04 690.58 L1261.6 690.58 L1262.16 690.58 L1262.72 690.58 L1263.28 690.58 L1263.84 690.58 L1264.4 690.58 L1264.96 690.58 L1265.52 690.58 L1266.08 690.58 L1266.63 690.58 L1267.19 690.58 L1267.75 690.58 L1268.31 690.58 L1268.87 690.58 L1269.43 690.58 L1269.99 690.58 L1270.55 690.58 L1271.11 690.58 L1271.67 690.58 L1272.23 690.58 L1272.79 690.58 L1273.35 690.58 L1273.91 690.58 L1274.46 690.58 L1275.02 690.58 L1275.58 690.58 L1276.14 690.58 L1276.7 690.58 L1277.26 690.58 L1277.82 690.58 L1278.38 690.58 L1278.94 690.58 L1279.5 690.58 L1280.06 690.58 L1280.62 690.58 L1281.18 690.58 L1281.73 690.58 L1282.29 690.58 L1282.85 690.58 L1283.41 690.58 L1283.97 690.58 L1284.53 690.58 L1285.09 690.58 L1285.65 690.58 L1286.21 690.58 L1286.77 690.58 L1287.33 690.58 L1287.89 690.58 L1288.45 690.58 L1289 690.58 L1289.56 690.58 L1290.12 690.58 L1290.68 690.58 L1291.24 690.58 L1291.8 690.58 L1292.36 690.58 L1292.92 690.58 L1293.48 690.58 L1294.04 690.58 L1294.6 690.58 L1295.16 690.58 L1295.72 690.58 L1296.28 690.58 L1296.83 690.58 L1297.39 690.58 L1297.95 690.58 L1298.51 690.58 L1299.07 690.58 L1299.63 690.58 L1300.19 690.58 L1300.75 690.58 L1301.31 690.58 L1301.87 690.58 L1302.43 690.58 L1302.99 690.58 L1303.55 690.58 L1304.1 690.58 L1304.66 690.58 L1305.22 690.58 L1305.78 690.58 L1306.34 690.58 L1306.9 690.58 L1307.46 690.58 L1308.02 690.58 L1308.58 690.58 L1309.14 690.58 L1309.7 690.58 L1310.26 690.58 L1310.82 690.58 L1311.38 690.58 L1311.93 690.58 L1312.49 690.58 L1313.05 690.58 L1313.61 690.58 L1314.17 690.58 L1314.73 690.58 L1315.29 690.58 L1315.85 690.58 L1316.41 690.58 L1316.97 690.58 L1317.53 690.58 L1318.09 690.58 L1318.65 690.58 L1319.2 690.58 L1319.76 690.58 L1320.32 690.58 L1320.88 690.58 L1321.44 690.58 L1322 690.58 L1322.56 690.58 L1323.12 690.58 L1323.68 690.58 L1324.24 690.58 L1324.8 690.58 L1325.36 690.58 L1325.92 690.58 L1326.47 690.58 L1327.03 690.58 L1327.59 690.58 L1328.15 690.58 L1328.71 690.58 L1329.27 690.58 L1329.83 690.58 L1330.39 690.58 L1330.95 690.58 L1331.51 690.58 L1332.07 690.58 L1332.63 690.58 L1333.19 690.58 L1333.75 690.58 L1334.3 690.58 L1334.86 690.58 L1335.42 690.58 L1335.98 690.58 L1336.54 690.58 L1337.1 690.58 L1337.66 690.58 L1338.22 690.58 L1338.78 690.58 L1339.34 690.58 L1339.9 690.58 L1340.46 690.58 L1341.02 690.58 L1341.57 690.58 L1342.13 690.58 L1342.69 690.58 L1343.25 690.58 L1343.81 690.58 L1344.37 690.58 L1344.93 690.58 L1345.49 690.58 L1346.05 690.58 L1346.61 690.58 L1347.17 690.58 L1347.73 690.58 L1348.29 690.58 L1348.84 690.58 L1349.4 690.58 L1349.96 690.58 L1350.52 690.58 L1351.08 690.58 L1351.64 690.58 L1352.2 690.58 L1352.76 690.58 L1353.32 690.58 L1353.88 690.58 L1354.44 690.58 L1355 690.58 L1355.56 690.58 L1356.12 690.58 L1356.67 690.58 L1357.23 690.58 L1357.79 690.58 L1358.35 690.58 L1358.91 690.58 L1359.47 690.58 L1360.03 690.58 L1360.59 690.58 L1361.15 690.58 L1361.71 690.58 L1362.27 690.58 L1362.83 690.58 L1363.39 690.58 L1363.94 690.58 L1364.5 690.58 L1365.06 690.58 L1365.62 690.58 L1366.18 690.58 L1366.74 690.58 L1367.3 690.58 L1367.86 690.58 L1368.42 690.58 L1368.98 690.58 L1369.54 690.58 L1370.1 690.58 L1370.66 690.58 L1371.21 690.58 L1371.77 690.58 L1372.33 690.58 L1372.89 690.58 L1373.45 690.58 L1374.01 690.58 L1374.57 690.58 L1375.13 690.58 L1375.69 690.58 L1376.25 690.58 L1376.81 690.58 L1377.37 690.58 L1377.93 690.58 L1378.49 690.58 L1379.04 690.58 L1379.6 690.58 L1380.16 690.58 L1380.72 690.58 L1381.28 690.58 L1381.84 690.58 L1382.4 690.58 L1382.96 690.58 L1383.52 690.58 L1384.08 690.58 L1384.64 690.58 L1385.2 690.58 L1385.76 690.58 L1386.31 690.58 L1386.87 690.58 L1387.43 690.58 L1387.99 690.58 L1388.55 690.58 L1389.11 690.58 L1389.67 690.58 L1390.23 690.58 L1390.79 690.58 L1391.35 690.58 L1391.91 690.58 L1392.47 690.58 L1393.03 690.58 L1393.58 690.58 L1394.14 690.58 L1394.7 690.58 L1395.26 690.58 L1395.82 690.58 L1396.38 690.58 L1396.94 690.58 L1397.5 690.58 L1398.06 690.58 L1398.62 690.58 L1399.18 690.58 L1399.74 690.58 L1400.3 690.58 L1400.86 690.58 L1401.41 690.58 L1401.97 690.58 L1402.53 690.58 L1403.09 690.58 L1403.65 690.58 L1404.21 690.58 L1404.77 690.58 L1405.33 690.58 L1405.89 690.58 L1406.45 690.58 L1407.01 690.58 L1407.57 690.58 L1408.13 690.58 L1408.68 690.58 L1409.24 690.58 L1409.8 690.58 L1410.36 690.58 L1410.92 690.58 L1411.48 690.58 L1412.04 690.58 L1412.6 690.58 L1413.16 690.58 L1413.72 690.58 L1414.28 690.58 L1414.84 690.58 L1415.4 690.58 L1415.95 690.58 L1416.51 690.58 L1417.07 690.58 L1417.63 690.58 L1418.19 690.58 L1418.75 690.58 L1419.31 690.58 L1419.87 690.58 L1420.43 690.58 L1420.99 690.58 L1421.55 690.58 L1422.11 690.58 L1422.67 690.58 L1423.23 690.58 L1423.78 690.58 L1424.34 690.58 L1424.9 690.58 L1425.46 690.58 L1426.02 690.58 L1426.58 690.58 L1427.14 690.58 L1427.7 690.58 L1428.26 690.58 L1428.82 690.58 L1429.38 690.58 L1429.94 690.58 L1430.5 690.58 L1431.05 690.58 L1431.61 690.58 L1432.17 690.58 L1432.73 690.58 L1433.29 690.58 L1433.85 690.58 L1434.41 690.58 L1434.97 690.58 L1435.53 690.58 L1436.09 690.58 L1436.65 690.58 L1437.21 690.58 L1437.77 690.58 L1438.33 690.58 L1438.88 690.58 L1439.44 690.58 L1440 690.58 L1440.56 690.58 L1441.12 690.58 L1441.68 690.58 L1442.24 690.58 L1442.8 690.58 L1443.36 690.58 L1443.92 690.58 L1444.48 690.58 L1445.04 690.58 L1445.6 690.58 L1446.15 690.58 L1446.71 690.58 L1447.27 690.58 L1447.83 690.58 L1448.39 690.58 L1448.95 690.58 L1449.51 690.58 L1450.07 690.58 L1450.63 690.58 L1451.19 690.58 L1451.75 690.58 L1452.31 690.58 L1452.87 690.58 L1453.42 690.58 L1453.98 690.58 L1454.54 690.58 L1455.1 690.58 L1455.66 690.58 L1456.22 690.58 L1456.78 690.58 L1457.34 690.58 L1457.9 690.58 L1458.46 690.58 L1459.02 690.58 L1459.58 690.58 L1460.14 690.58 L1460.7 690.58 L1461.25 690.58 L1461.81 690.58 L1462.37 690.58 L1462.93 690.58 L1463.49 690.58 L1464.05 690.58 L1464.61 690.58 L1465.17 690.58 L1465.73 690.58 L1466.29 690.58 L1466.85 690.58 L1467.41 690.58 L1467.97 690.58 L1468.52 690.58 L1469.08 690.58 L1469.64 690.58 L1470.2 690.58 L1470.76 690.58 L1471.32 690.58 L1471.88 690.58 L1472.44 690.58 L1473 690.58 L1473.56 690.58 L1474.12 690.58 L1474.68 690.58 L1475.24 690.58 L1475.79 690.58 L1476.35 690.58 L1476.91 690.58 L1477.47 690.58 L1478.03 690.58 L1478.59 690.58 L1479.15 690.58 L1479.71 690.58 L1480.27 690.58 L1480.83 690.58 L1481.39 690.58 L1481.95 690.58 L1482.51 690.58 L1483.07 690.58 L1483.62 690.58 L1484.18 690.58 L1484.74 690.58 L1485.3 690.58 L1485.86 690.58 L1486.42 690.58 L1486.98 690.58 L1487.54 690.58 L1488.1 690.58 L1488.66 690.58 L1489.22 690.58 L1489.78 690.58 L1490.34 690.58 L1490.89 690.58 L1491.45 690.58 L1492.01 690.58 L1492.57 690.58 L1493.13 690.58 L1493.69 690.58 L1494.25 690.58 L1494.81 690.58 L1495.37 690.58 L1495.93 690.58 L1496.49 690.58 L1497.05 690.58 L1497.61 690.58 L1498.16 690.58 L1498.72 690.58 L1499.28 690.58 L1499.84 690.58 L1500.4 690.58 L1500.96 690.58 L1501.52 690.58 L1502.08 690.58 L1502.64 690.58 L1503.2 690.58 L1503.76 690.58 L1504.32 690.58 L1504.88 690.58 L1505.44 690.58 L1505.99 690.58 L1506.55 690.58 L1507.11 690.58 L1507.67 690.58 L1508.23 690.58 L1508.79 690.58 L1509.35 690.58 L1509.91 690.58 L1510.47 690.58 L1511.03 690.58 L1511.59 690.58 L1512.15 690.58 L1512.71 690.58 L1513.26 690.58 L1513.82 690.58 L1514.38 690.58 L1514.94 690.58 L1515.5 690.58 L1516.06 690.58 L1516.62 690.58 L1517.18 690.58 L1517.74 690.58 L1518.3 690.58 L1518.86 690.58 L1519.42 690.58 L1519.98 690.58 L1520.53 690.58 L1521.09 690.58 L1521.65 690.58 L1522.21 690.58 L1522.77 690.58 L1523.33 690.58 L1523.89 690.58 L1524.45 690.58 L1525.01 690.58 L1525.57 690.58 L1526.13 690.58 L1526.69 690.58 L1527.25 690.58 L1527.81 690.58 L1528.36 690.58 L1528.92 690.58 L1529.48 690.58 L1530.04 690.58 L1530.6 690.58 L1531.16 690.58 L1531.72 690.58 L1532.28 690.58 L1532.84 690.58 L1533.4 690.58 L1533.96 690.58 L1534.52 690.58 L1535.08 690.58 L1535.63 690.58 L1536.19 690.58 L1536.75 690.58 L1537.31 690.58 L1537.87 690.58 L1538.43 690.58 L1538.99 690.58 L1539.55 690.58 L1540.11 690.58 L1540.67 690.58 L1541.23 690.58 L1541.79 690.58 L1542.35 690.58 L1542.9 690.58 L1543.46 690.58 L1544.02 690.58 L1544.58 690.58 L1545.14 690.58 L1545.7 690.58 L1546.26 690.58 L1546.82 690.58 L1547.38 690.58 L1547.94 690.58 L1548.5 690.58 L1549.06 690.58 L1549.62 690.58 L1550.18 690.58 L1550.73 690.58 L1551.29 690.58 L1551.85 690.58 L1552.41 690.58 L1552.97 690.58 L1553.53 690.58 L1554.09 690.58 L1554.65 690.58 L1555.21 690.58 L1555.77 690.58 L1556.33 690.58 L1556.89 690.58 L1557.45 690.58 L1558 690.58 L1558.56 690.58 L1559.12 690.58 L1559.68 690.58 L1560.24 690.58 L1560.8 690.58 L1561.36 690.58 L1561.92 690.58 L1562.48 690.58 L1563.04 690.58 L1563.6 690.58 L1564.16 690.58 L1564.72 690.58 L1565.28 690.58 L1565.83 690.58 L1566.39 690.58 L1566.95 690.58 L1567.51 690.58 L1568.07 690.58 L1568.63 690.58 L1569.19 690.58 L1569.75 690.58 L1570.31 690.58 L1570.87 690.58 L1571.43 690.58 L1571.99 690.58 L1572.55 690.58 L1573.1 690.58 L1573.66 690.58 L1574.22 690.58 L1574.78 690.58 L1575.34 690.58 L1575.9 690.58 L1576.46 690.58 L1577.02 690.58 L1577.58 690.58 L1578.14 690.58 L1578.7 690.58 L1579.26 690.58 L1579.82 690.58 L1580.37 690.58 L1580.93 690.58 L1581.49 690.58 L1582.05 690.58 L1582.61 690.58 L1583.17 690.58 L1583.73 690.58 L1584.29 690.58 L1584.85 690.58 L1585.41 690.58 L1585.97 690.58 L1586.53 690.58 L1587.09 690.58 L1587.65 690.58 L1588.2 690.58 L1588.76 690.58 L1589.32 690.58 L1589.88 690.58 L1590.44 690.58 L1591 690.58 L1591.56 690.58 L1592.12 690.58 L1592.68 690.58 L1593.24 690.58 L1593.8 690.58 L1594.36 690.58 L1594.92 690.58 L1595.47 690.58 L1596.03 690.58 L1596.59 690.58 L1597.15 690.58 L1597.71 690.58 L1598.27 690.58 L1598.83 690.58 L1599.39 690.58 L1599.95 690.58 L1600.51 690.58 L1601.07 690.58 L1601.63 690.58 L1602.19 690.58 L1602.74 690.58 L1603.3 690.58 L1603.86 690.58 L1604.42 690.58 L1604.98 690.58 L1605.54 690.58 L1606.1 690.58 L1606.66 690.58 L1607.22 690.58 L1607.78 690.58 L1608.34 690.58 L1608.9 690.58 L1609.46 690.58 L1610.02 690.58 L1610.57 690.58 L1611.13 690.58 L1611.69 690.58 L1612.25 690.58 L1612.81 690.58 L1613.37 690.58 L1613.93 690.58 L1614.49 690.58 L1615.05 690.58 L1615.61 690.58 L1616.17 690.58 L1616.73 690.58 L1617.29 690.58 L1617.84 690.58 L1618.4 690.58 L1618.96 690.58 L1619.52 690.58 L1620.08 690.58 L1620.64 690.58 L1621.2 690.58 L1621.76 690.58 L1622.32 690.58 L1622.88 690.58 L1623.44 690.58 L1624 690.58 L1624.56 690.58 L1625.11 690.58 L1625.67 690.58 L1626.23 690.58 L1626.79 690.58 L1627.35 690.58 L1627.91 690.58 L1628.47 690.58 L1629.03 690.58 L1629.59 690.58 L1630.15 690.58 L1630.71 690.58 L1631.27 690.58 L1631.83 690.58 L1632.39 690.58 L1632.94 690.58 L1633.5 690.58 L1634.06 690.58 L1634.62 690.58 L1635.18 690.58 L1635.74 690.58 L1636.3 690.58 L1636.86 690.58 L1637.42 690.58 L1637.98 690.58 L1638.54 690.58 L1639.1 690.58 L1639.66 690.58 L1640.21 690.58 L1640.77 690.58 L1641.33 690.58 L1641.89 690.58 L1642.45 690.58 L1643.01 690.58 L1643.57 690.58 L1644.13 690.58 L1644.69 690.58 L1645.25 690.58 L1645.81 690.58 L1646.37 690.58 L1646.93 690.58 L1647.48 690.58 L1648.04 690.58 L1648.6 690.58 L1649.16 690.58 L1649.72 690.58 L1650.28 690.58 L1650.84 690.58 L1651.4 690.58 L1651.96 690.58 L1652.52 690.58 L1653.08 690.58 L1653.64 690.58 L1654.2 690.58 L1654.76 690.58 L1655.31 690.58 L1655.87 690.58 L1656.43 690.58 L1656.99 690.58 L1657.55 690.58 L1658.11 690.58 L1658.67 690.58 L1659.23 690.58 L1659.79 690.58 L1660.35 690.58 L1660.91 690.58 L1661.47 690.58 L1662.03 690.58 L1662.58 690.58 L1663.14 690.58 L1663.7 690.58 L1664.26 690.58 L1664.82 690.58 L1665.38 690.58 L1665.94 690.58 L1666.5 690.58 L1667.06 690.58 L1667.62 690.58 L1668.18 690.58 L1668.74 690.58 L1669.3 690.58 L1669.85 690.58 L1670.41 690.58 L1670.97 690.58 L1671.53 690.58 L1672.09 690.58 L1672.65 690.58 L1673.21 690.58 L1673.77 690.58 L1674.33 690.58 L1674.89 690.58 L1675.45 690.58 L1676.01 690.58 L1676.57 690.58 L1677.13 690.58 L1677.68 690.58 L1678.24 690.58 L1678.8 690.58 L1679.36 690.58 L1679.92 690.58 L1680.48 690.58 L1681.04 690.58 L1681.6 690.58 L1682.16 690.58 L1682.72 690.58 L1683.28 690.58 L1683.84 690.58 L1684.4 690.58 L1684.95 690.58 L1685.51 690.58 L1686.07 690.58 L1686.63 690.58 L1687.19 690.58 L1687.75 690.58 L1688.31 690.58 L1688.87 690.58 L1689.43 690.58 L1689.99 690.58 L1690.55 690.58 L1691.11 690.58 L1691.67 690.58 L1692.23 690.58 L1692.78 690.58 L1693.34 690.58 L1693.9 690.58 L1694.46 690.58 L1695.02 690.58 L1695.58 690.58 L1696.14 690.58 L1696.7 690.58 L1697.26 690.58 L1697.82 690.58 L1698.38 690.58 L1698.94 690.58 L1699.5 690.58 L1700.05 690.58 L1700.61 690.58 L1701.17 690.58 L1701.73 690.58 L1702.29 690.58 L1702.85 690.58 L1703.41 690.58 L1703.97 690.58 L1704.53 690.58 L1705.09 690.58 L1705.65 690.58 L1706.21 690.58 L1706.77 690.58 L1707.32 690.58 L1707.88 690.58 L1708.44 690.58 L1709 690.58 L1709.56 690.58 L1710.12 690.58 L1710.68 690.58 L1711.24 690.58 L1711.8 690.58 L1712.36 690.58 L1712.92 690.58 L1713.48 690.58 L1714.04 690.58 L1714.6 690.58 L1715.15 690.58 L1715.71 690.58 L1716.27 690.58 L1716.83 690.58 L1717.39 690.58 L1717.95 690.58 L1718.51 690.58 L1719.07 690.58 L1719.63 690.58 L1720.19 690.58 L1720.75 690.58 L1721.31 690.58 L1721.87 690.58 L1722.42 690.58 L1722.98 690.58 L1723.54 690.58 L1724.1 690.58 L1724.66 690.58 L1725.22 690.58 L1725.78 690.58 L1726.34 690.58 L1726.9 690.58 L1727.46 690.58 L1728.02 690.58 L1728.58 690.58 L1729.14 690.58 L1729.69 690.58 L1730.25 690.58 L1730.81 690.58 L1731.37 690.58 L1731.93 690.58 L1732.49 690.58 L1733.05 690.58 L1733.61 690.58 L1734.17 690.58 L1734.73 690.58 L1735.29 690.58 L1735.85 690.58 L1736.41 690.58 L1736.97 690.58 L1737.52 690.58 L1738.08 690.58 L1738.64 690.58 L1739.2 690.58 L1739.76 690.58 L1740.32 690.58 L1740.88 690.58 L1741.44 690.58 L1742 690.58 L1742.56 690.58 L1743.12 690.58 L1743.68 690.58 L1744.24 690.58 L1744.79 690.58 L1745.35 690.58 L1745.91 690.58 L1746.47 690.58 L1747.03 690.58 L1747.59 690.58 L1748.15 690.58 L1748.71 690.58 L1749.27 690.58 L1749.83 690.58 L1750.39 690.58 L1750.95 690.58 L1751.51 690.58 L1752.06 690.58 L1752.62 690.58 L1753.18 690.58 L1753.74 690.58 L1754.3 690.58 L1754.86 690.58 L1755.42 690.58 L1755.98 690.58 L1756.54 690.58 L1757.1 690.58 L1757.66 690.58 L1758.22 690.58 L1758.78 690.58 L1759.34 690.58 L1759.89 690.58 L1760.45 690.58 L1761.01 690.58 L1761.57 690.58 L1762.13 690.58 L1762.69 690.58 L1763.25 690.58 L1763.81 690.58 L1764.37 690.58 L1764.93 690.58 L1765.49 690.58 L1766.05 690.58 L1766.61 690.58 L1767.16 690.58 L1767.72 690.58 L1768.28 690.58 L1768.84 690.58 L1769.4 690.58 L1769.96 690.58 L1770.52 690.58 L1771.08 690.58 L1771.64 690.58 L1772.2 690.58 L1772.76 690.58 L1773.32 690.58 L1773.88 690.58 L1774.43 690.58 L1774.99 690.58 L1775.55 690.58 L1776.11 690.58 L1776.67 690.58 L1777.23 690.58 L1777.79 690.58 L1778.35 690.58 L1778.91 690.58 L1779.47 690.58 L1780.03 690.58 L1780.59 690.58 L1781.15 690.58 L1781.71 690.58 L1782.26 690.58 L1782.82 690.58 L1783.38 690.58 L1783.94 690.58 L1784.5 690.58 L1785.06 690.58 L1785.62 690.58 L1786.18 690.58 L1786.74 690.58 L1787.3 690.58 L1787.86 690.58 L1788.42 690.58 L1788.98 690.58 L1789.53 690.58 L1790.09 690.58 L1790.65 690.58 L1791.21 690.58 L1791.77 690.58 L1792.33 690.58 L1792.89 690.58 L1793.45 690.58 L1794.01 690.58 L1794.57 690.58 L1795.13 690.58 L1795.69 690.58 L1796.25 690.58 L1796.8 690.58 L1797.36 690.58 L1797.92 690.58 L1798.48 690.58 L1799.04 690.58 L1799.6 690.58 L1800.16 690.58 L1800.72 690.58 L1801.28 690.58 L1801.84 690.58 L1802.4 690.58 L1802.96 690.58 L1803.52 690.58 L1804.08 690.58 L1804.63 690.58 L1805.19 690.58 L1805.75 690.58 L1806.31 690.58 L1806.87 690.58 L1807.43 690.58 L1807.99 690.58 L1808.55 690.58 L1809.11 690.58 L1809.67 690.58 L1810.23 690.58 L1810.79 690.58 L1811.35 690.58 L1811.9 690.58 L1812.46 690.58 L1813.02 690.58 L1813.58 690.58 L1814.14 690.58 L1814.7 690.58 L1815.26 690.58 L1815.82 690.58 L1816.38 690.58 L1816.94 690.58 L1817.5 690.58 L1818.06 690.58 L1818.62 690.58 L1819.18 690.58 L1819.73 690.58 L1820.29 690.58 L1820.85 690.58 L1821.41 690.58 L1821.97 690.58 L1822.53 690.58 L1823.09 690.58 L1823.65 690.58 L1824.21 690.58 L1824.77 690.58 L1825.33 690.58 L1825.89 690.58 L1826.45 690.58 L1827 690.58 L1827.56 690.58 L1828.12 690.58 L1828.68 690.58 L1829.24 690.58 L1829.8 690.58 L1830.36 690.58 L1830.92 690.58 L1831.48 690.58 L1832.04 690.58 L1832.6 690.58 L1833.16 690.58 L1833.72 690.58 L1834.27 690.58 L1834.83 690.58 L1835.39 690.58 L1835.95 690.58 L1836.51 690.58 L1837.07 690.58 L1837.63 690.58 L1838.19 690.58 L1838.19 682.686 L1837.63 682.686 L1837.07 682.686 L1836.51 682.686 L1835.95 682.686 L1835.39 682.686 L1834.83 682.686 L1834.27 682.686 L1833.72 682.686 L1833.16 682.686 L1832.6 682.686 L1832.04 682.686 L1831.48 682.686 L1830.92 682.686 L1830.36 682.686 L1829.8 682.686 L1829.24 682.686 L1828.68 682.686 L1828.12 682.686 L1827.56 682.686 L1827 682.686 L1826.45 682.686 L1825.89 682.686 L1825.33 682.686 L1824.77 682.686 L1824.21 682.686 L1823.65 682.686 L1823.09 682.686 L1822.53 682.686 L1821.97 682.686 L1821.41 682.686 L1820.85 682.686 L1820.29 682.686 L1819.73 682.686 L1819.18 682.686 L1818.62 682.686 L1818.06 682.686 L1817.5 682.686 L1816.94 682.686 L1816.38 682.686 L1815.82 682.686 L1815.26 682.686 L1814.7 682.686 L1814.14 682.686 L1813.58 682.686 L1813.02 682.686 L1812.46 682.686 L1811.9 682.686 L1811.35 682.686 L1810.79 682.686 L1810.23 682.686 L1809.67 682.686 L1809.11 682.686 L1808.55 682.686 L1807.99 682.686 L1807.43 682.686 L1806.87 682.686 L1806.31 682.686 L1805.75 682.686 L1805.19 682.686 L1804.63 682.686 L1804.08 682.686 L1803.52 682.686 L1802.96 682.686 L1802.4 682.686 L1801.84 682.686 L1801.28 682.686 L1800.72 682.686 L1800.16 682.686 L1799.6 682.686 L1799.04 682.686 L1798.48 682.686 L1797.92 682.686 L1797.36 682.686 L1796.8 682.686 L1796.25 682.686 L1795.69 682.686 L1795.13 682.686 L1794.57 682.686 L1794.01 682.686 L1793.45 682.686 L1792.89 682.686 L1792.33 682.686 L1791.77 682.686 L1791.21 682.686 L1790.65 682.686 L1790.09 682.686 L1789.53 682.686 L1788.98 682.686 L1788.42 682.686 L1787.86 682.686 L1787.3 682.686 L1786.74 682.686 L1786.18 682.686 L1785.62 682.686 L1785.06 682.686 L1784.5 682.686 L1783.94 682.686 L1783.38 682.686 L1782.82 682.686 L1782.26 682.686 L1781.71 682.686 L1781.15 682.686 L1780.59 682.686 L1780.03 682.686 L1779.47 682.686 L1778.91 682.686 L1778.35 682.686 L1777.79 682.686 L1777.23 682.686 L1776.67 682.686 L1776.11 682.686 L1775.55 682.686 L1774.99 682.686 L1774.43 682.686 L1773.88 682.686 L1773.32 682.686 L1772.76 682.686 L1772.2 682.686 L1771.64 682.686 L1771.08 682.686 L1770.52 682.686 L1769.96 682.686 L1769.4 682.686 L1768.84 682.686 L1768.28 682.686 L1767.72 682.686 L1767.16 682.686 L1766.61 682.686 L1766.05 682.686 L1765.49 682.686 L1764.93 682.686 L1764.37 682.686 L1763.81 682.686 L1763.25 682.686 L1762.69 682.686 L1762.13 682.686 L1761.57 682.686 L1761.01 682.686 L1760.45 682.686 L1759.89 682.686 L1759.34 682.686 L1758.78 682.686 L1758.22 682.686 L1757.66 682.686 L1757.1 682.686 L1756.54 682.686 L1755.98 682.686 L1755.42 682.686 L1754.86 682.686 L1754.3 682.686 L1753.74 682.686 L1753.18 682.686 L1752.62 682.686 L1752.06 682.686 L1751.51 682.686 L1750.95 682.686 L1750.39 682.686 L1749.83 682.686 L1749.27 682.686 L1748.71 682.686 L1748.15 682.686 L1747.59 682.686 L1747.03 682.686 L1746.47 682.686 L1745.91 682.686 L1745.35 682.686 L1744.79 682.686 L1744.24 682.686 L1743.68 682.686 L1743.12 682.686 L1742.56 682.686 L1742 682.686 L1741.44 682.686 L1740.88 682.686 L1740.32 682.686 L1739.76 682.686 L1739.2 682.686 L1738.64 682.686 L1738.08 682.686 L1737.52 682.686 L1736.97 682.686 L1736.41 682.686 L1735.85 682.686 L1735.29 682.686 L1734.73 682.686 L1734.17 682.686 L1733.61 682.686 L1733.05 682.686 L1732.49 682.686 L1731.93 682.686 L1731.37 682.686 L1730.81 682.686 L1730.25 682.686 L1729.69 682.686 L1729.14 682.686 L1728.58 682.686 L1728.02 682.686 L1727.46 682.686 L1726.9 682.686 L1726.34 682.686 L1725.78 682.686 L1725.22 682.686 L1724.66 682.686 L1724.1 682.686 L1723.54 682.686 L1722.98 682.686 L1722.42 682.686 L1721.87 682.686 L1721.31 682.686 L1720.75 682.686 L1720.19 682.686 L1719.63 682.686 L1719.07 682.686 L1718.51 682.686 L1717.95 682.686 L1717.39 682.686 L1716.83 682.686 L1716.27 682.686 L1715.71 682.686 L1715.15 682.686 L1714.6 682.686 L1714.04 682.686 L1713.48 682.686 L1712.92 682.686 L1712.36 682.686 L1711.8 682.686 L1711.24 682.686 L1710.68 682.686 L1710.12 682.686 L1709.56 682.686 L1709 682.686 L1708.44 682.686 L1707.88 682.686 L1707.32 682.686 L1706.77 682.686 L1706.21 682.686 L1705.65 682.686 L1705.09 682.686 L1704.53 682.686 L1703.97 682.686 L1703.41 682.686 L1702.85 682.686 L1702.29 682.686 L1701.73 682.686 L1701.17 682.686 L1700.61 682.686 L1700.05 682.686 L1699.5 682.686 L1698.94 682.686 L1698.38 682.686 L1697.82 682.686 L1697.26 682.686 L1696.7 682.686 L1696.14 682.686 L1695.58 682.686 L1695.02 682.686 L1694.46 682.686 L1693.9 682.686 L1693.34 682.686 L1692.78 682.686 L1692.23 682.686 L1691.67 682.686 L1691.11 682.686 L1690.55 682.686 L1689.99 682.686 L1689.43 682.686 L1688.87 682.686 L1688.31 682.686 L1687.75 682.686 L1687.19 682.686 L1686.63 682.686 L1686.07 682.686 L1685.51 682.686 L1684.95 682.686 L1684.4 682.686 L1683.84 682.686 L1683.28 682.686 L1682.72 682.686 L1682.16 682.686 L1681.6 682.686 L1681.04 682.686 L1680.48 682.686 L1679.92 682.686 L1679.36 682.686 L1678.8 682.686 L1678.24 682.686 L1677.68 682.686 L1677.13 682.686 L1676.57 682.686 L1676.01 682.686 L1675.45 682.686 L1674.89 682.686 L1674.33 682.686 L1673.77 682.686 L1673.21 682.686 L1672.65 682.686 L1672.09 682.686 L1671.53 682.686 L1670.97 682.686 L1670.41 682.686 L1669.85 682.686 L1669.3 682.686 L1668.74 682.686 L1668.18 682.686 L1667.62 682.686 L1667.06 682.686 L1666.5 682.686 L1665.94 682.686 L1665.38 682.686 L1664.82 682.686 L1664.26 682.686 L1663.7 682.686 L1663.14 682.686 L1662.58 682.686 L1662.03 682.686 L1661.47 682.686 L1660.91 682.686 L1660.35 682.686 L1659.79 682.686 L1659.23 682.686 L1658.67 682.686 L1658.11 682.686 L1657.55 682.686 L1656.99 682.686 L1656.43 682.686 L1655.87 682.686 L1655.31 682.686 L1654.76 682.686 L1654.2 682.686 L1653.64 682.686 L1653.08 682.686 L1652.52 682.686 L1651.96 682.686 L1651.4 682.686 L1650.84 682.686 L1650.28 682.686 L1649.72 682.686 L1649.16 682.686 L1648.6 682.686 L1648.04 682.686 L1647.48 682.686 L1646.93 682.686 L1646.37 682.686 L1645.81 682.686 L1645.25 682.686 L1644.69 682.686 L1644.13 682.686 L1643.57 682.686 L1643.01 682.686 L1642.45 682.686 L1641.89 682.686 L1641.33 682.686 L1640.77 682.686 L1640.21 682.686 L1639.66 682.686 L1639.1 682.686 L1638.54 682.686 L1637.98 682.686 L1637.42 682.686 L1636.86 682.686 L1636.3 682.686 L1635.74 682.686 L1635.18 682.686 L1634.62 682.686 L1634.06 682.686 L1633.5 682.686 L1632.94 682.686 L1632.39 682.686 L1631.83 682.686 L1631.27 682.686 L1630.71 682.686 L1630.15 682.686 L1629.59 682.686 L1629.03 682.686 L1628.47 682.686 L1627.91 682.686 L1627.35 682.686 L1626.79 682.686 L1626.23 682.686 L1625.67 682.686 L1625.11 682.686 L1624.56 682.686 L1624 682.686 L1623.44 682.686 L1622.88 682.686 L1622.32 682.686 L1621.76 682.686 L1621.2 682.686 L1620.64 682.686 L1620.08 682.686 L1619.52 682.686 L1618.96 682.686 L1618.4 682.686 L1617.84 682.686 L1617.29 682.686 L1616.73 682.686 L1616.17 682.686 L1615.61 682.686 L1615.05 682.686 L1614.49 682.686 L1613.93 682.686 L1613.37 682.686 L1612.81 682.686 L1612.25 682.686 L1611.69 682.686 L1611.13 682.686 L1610.57 682.686 L1610.02 682.686 L1609.46 682.686 L1608.9 682.686 L1608.34 682.686 L1607.78 682.686 L1607.22 682.686 L1606.66 682.686 L1606.1 682.686 L1605.54 682.686 L1604.98 682.686 L1604.42 682.686 L1603.86 682.686 L1603.3 682.686 L1602.74 682.686 L1602.19 682.686 L1601.63 682.686 L1601.07 682.686 L1600.51 682.686 L1599.95 682.686 L1599.39 682.686 L1598.83 682.686 L1598.27 682.686 L1597.71 682.686 L1597.15 682.686 L1596.59 682.686 L1596.03 682.686 L1595.47 682.686 L1594.92 682.686 L1594.36 682.686 L1593.8 682.686 L1593.24 682.686 L1592.68 682.686 L1592.12 682.686 L1591.56 682.686 L1591 682.686 L1590.44 682.686 L1589.88 682.686 L1589.32 682.686 L1588.76 682.686 L1588.2 682.686 L1587.65 682.686 L1587.09 682.686 L1586.53 682.686 L1585.97 682.686 L1585.41 682.686 L1584.85 682.686 L1584.29 682.686 L1583.73 682.686 L1583.17 682.686 L1582.61 682.686 L1582.05 682.686 L1581.49 682.686 L1580.93 682.686 L1580.37 682.686 L1579.82 682.686 L1579.26 682.686 L1578.7 682.686 L1578.14 682.686 L1577.58 682.686 L1577.02 682.686 L1576.46 682.686 L1575.9 682.686 L1575.34 682.686 L1574.78 682.686 L1574.22 682.686 L1573.66 682.686 L1573.1 682.686 L1572.55 682.686 L1571.99 682.686 L1571.43 682.686 L1570.87 682.686 L1570.31 682.686 L1569.75 682.686 L1569.19 682.686 L1568.63 682.686 L1568.07 682.686 L1567.51 682.686 L1566.95 682.686 L1566.39 682.686 L1565.83 682.686 L1565.28 682.686 L1564.72 682.686 L1564.16 682.686 L1563.6 682.686 L1563.04 682.686 L1562.48 682.686 L1561.92 682.686 L1561.36 682.686 L1560.8 682.686 L1560.24 682.686 L1559.68 682.686 L1559.12 682.686 L1558.56 682.686 L1558 682.686 L1557.45 682.686 L1556.89 682.686 L1556.33 682.686 L1555.77 682.686 L1555.21 682.686 L1554.65 682.686 L1554.09 682.686 L1553.53 682.686 L1552.97 682.686 L1552.41 682.686 L1551.85 682.686 L1551.29 682.686 L1550.73 682.686 L1550.18 682.686 L1549.62 682.686 L1549.06 682.686 L1548.5 682.686 L1547.94 682.686 L1547.38 682.686 L1546.82 682.686 L1546.26 682.686 L1545.7 682.686 L1545.14 682.686 L1544.58 682.686 L1544.02 682.686 L1543.46 682.686 L1542.9 682.686 L1542.35 682.686 L1541.79 682.686 L1541.23 682.686 L1540.67 682.686 L1540.11 682.686 L1539.55 682.686 L1538.99 682.686 L1538.43 682.686 L1537.87 682.686 L1537.31 682.686 L1536.75 682.686 L1536.19 682.686 L1535.63 682.686 L1535.08 682.686 L1534.52 682.686 L1533.96 682.686 L1533.4 682.686 L1532.84 682.686 L1532.28 682.686 L1531.72 682.686 L1531.16 682.686 L1530.6 682.686 L1530.04 682.686 L1529.48 682.686 L1528.92 682.686 L1528.36 682.686 L1527.81 682.686 L1527.25 682.686 L1526.69 682.686 L1526.13 682.686 L1525.57 682.686 L1525.01 682.686 L1524.45 682.686 L1523.89 682.686 L1523.33 682.686 L1522.77 682.686 L1522.21 682.686 L1521.65 682.686 L1521.09 682.686 L1520.53 682.686 L1519.98 682.686 L1519.42 682.686 L1518.86 682.686 L1518.3 682.686 L1517.74 682.686 L1517.18 682.686 L1516.62 682.686 L1516.06 682.686 L1515.5 682.686 L1514.94 682.686 L1514.38 682.686 L1513.82 682.686 L1513.26 682.686 L1512.71 682.686 L1512.15 682.686 L1511.59 682.686 L1511.03 682.686 L1510.47 682.686 L1509.91 682.686 L1509.35 682.686 L1508.79 682.686 L1508.23 682.686 L1507.67 682.686 L1507.11 682.686 L1506.55 682.686 L1505.99 682.686 L1505.44 682.686 L1504.88 682.686 L1504.32 682.686 L1503.76 682.686 L1503.2 682.686 L1502.64 682.686 L1502.08 682.686 L1501.52 682.686 L1500.96 682.686 L1500.4 682.686 L1499.84 682.686 L1499.28 682.686 L1498.72 682.686 L1498.16 682.686 L1497.61 682.686 L1497.05 682.686 L1496.49 682.686 L1495.93 682.686 L1495.37 682.686 L1494.81 682.686 L1494.25 682.686 L1493.69 682.686 L1493.13 682.686 L1492.57 682.686 L1492.01 682.686 L1491.45 682.686 L1490.89 682.686 L1490.34 682.686 L1489.78 682.686 L1489.22 682.686 L1488.66 682.686 L1488.1 682.686 L1487.54 682.686 L1486.98 682.686 L1486.42 682.686 L1485.86 682.686 L1485.3 682.686 L1484.74 682.686 L1484.18 682.686 L1483.62 682.686 L1483.07 682.686 L1482.51 682.686 L1481.95 682.686 L1481.39 682.686 L1480.83 682.686 L1480.27 682.686 L1479.71 682.686 L1479.15 682.686 L1478.59 682.686 L1478.03 682.686 L1477.47 682.686 L1476.91 682.686 L1476.35 682.686 L1475.79 682.686 L1475.24 682.686 L1474.68 682.686 L1474.12 682.686 L1473.56 682.686 L1473 682.686 L1472.44 682.686 L1471.88 682.686 L1471.32 682.686 L1470.76 682.686 L1470.2 682.686 L1469.64 682.686 L1469.08 682.686 L1468.52 682.686 L1467.97 682.686 L1467.41 682.686 L1466.85 682.686 L1466.29 682.686 L1465.73 682.686 L1465.17 682.686 L1464.61 682.686 L1464.05 682.686 L1463.49 682.686 L1462.93 682.686 L1462.37 682.686 L1461.81 682.686 L1461.25 682.686 L1460.7 682.686 L1460.14 682.686 L1459.58 682.686 L1459.02 682.686 L1458.46 682.686 L1457.9 682.686 L1457.34 682.686 L1456.78 682.686 L1456.22 682.686 L1455.66 682.686 L1455.1 682.686 L1454.54 682.686 L1453.98 682.686 L1453.42 682.686 L1452.87 682.686 L1452.31 682.686 L1451.75 682.686 L1451.19 682.686 L1450.63 682.686 L1450.07 682.686 L1449.51 682.686 L1448.95 682.686 L1448.39 682.686 L1447.83 682.686 L1447.27 682.686 L1446.71 682.686 L1446.15 682.686 L1445.6 682.686 L1445.04 682.686 L1444.48 682.686 L1443.92 682.686 L1443.36 682.686 L1442.8 682.686 L1442.24 682.686 L1441.68 682.686 L1441.12 682.686 L1440.56 682.686 L1440 682.686 L1439.44 682.686 L1438.88 682.686 L1438.33 682.686 L1437.77 682.686 L1437.21 682.686 L1436.65 682.686 L1436.09 682.686 L1435.53 682.686 L1434.97 682.686 L1434.41 682.686 L1433.85 682.686 L1433.29 682.686 L1432.73 682.686 L1432.17 682.686 L1431.61 682.686 L1431.05 682.686 L1430.5 682.686 L1429.94 682.686 L1429.38 682.686 L1428.82 682.686 L1428.26 682.686 L1427.7 682.686 L1427.14 682.686 L1426.58 682.686 L1426.02 682.686 L1425.46 682.686 L1424.9 682.686 L1424.34 682.686 L1423.78 682.686 L1423.23 682.686 L1422.67 682.686 L1422.11 682.686 L1421.55 682.686 L1420.99 682.686 L1420.43 682.686 L1419.87 682.686 L1419.31 682.686 L1418.75 682.686 L1418.19 682.686 L1417.63 682.686 L1417.07 682.686 L1416.51 682.686 L1415.95 682.686 L1415.4 682.686 L1414.84 682.686 L1414.28 682.686 L1413.72 682.686 L1413.16 682.686 L1412.6 682.686 L1412.04 682.686 L1411.48 682.686 L1410.92 682.686 L1410.36 682.686 L1409.8 682.686 L1409.24 682.686 L1408.68 682.686 L1408.13 682.686 L1407.57 682.686 L1407.01 682.686 L1406.45 682.686 L1405.89 682.686 L1405.33 682.686 L1404.77 682.686 L1404.21 682.686 L1403.65 682.686 L1403.09 682.686 L1402.53 682.686 L1401.97 682.686 L1401.41 682.686 L1400.86 682.686 L1400.3 682.686 L1399.74 682.686 L1399.18 682.686 L1398.62 682.686 L1398.06 682.686 L1397.5 682.686 L1396.94 682.686 L1396.38 682.686 L1395.82 682.686 L1395.26 682.686 L1394.7 682.686 L1394.14 682.686 L1393.58 682.686 L1393.03 682.686 L1392.47 682.686 L1391.91 682.686 L1391.35 682.686 L1390.79 682.686 L1390.23 682.686 L1389.67 682.686 L1389.11 682.686 L1388.55 682.686 L1387.99 682.686 L1387.43 682.686 L1386.87 682.686 L1386.31 682.686 L1385.76 682.686 L1385.2 682.686 L1384.64 682.686 L1384.08 682.686 L1383.52 682.686 L1382.96 682.686 L1382.4 682.686 L1381.84 682.686 L1381.28 682.686 L1380.72 682.686 L1380.16 682.686 L1379.6 682.686 L1379.04 682.686 L1378.49 682.686 L1377.93 682.686 L1377.37 682.686 L1376.81 682.686 L1376.25 682.686 L1375.69 682.686 L1375.13 682.686 L1374.57 682.686 L1374.01 682.686 L1373.45 682.686 L1372.89 682.686 L1372.33 682.686 L1371.77 682.686 L1371.21 682.686 L1370.66 682.686 L1370.1 682.686 L1369.54 682.686 L1368.98 682.686 L1368.42 682.686 L1367.86 682.686 L1367.3 682.686 L1366.74 682.686 L1366.18 682.686 L1365.62 682.686 L1365.06 682.686 L1364.5 682.686 L1363.94 682.686 L1363.39 682.686 L1362.83 682.686 L1362.27 682.686 L1361.71 682.686 L1361.15 682.686 L1360.59 682.686 L1360.03 682.686 L1359.47 682.686 L1358.91 682.686 L1358.35 682.686 L1357.79 682.686 L1357.23 682.686 L1356.67 682.686 L1356.12 682.686 L1355.56 682.686 L1355 682.686 L1354.44 682.686 L1353.88 682.686 L1353.32 682.686 L1352.76 682.686 L1352.2 682.686 L1351.64 682.686 L1351.08 682.686 L1350.52 682.686 L1349.96 682.686 L1349.4 682.686 L1348.84 682.686 L1348.29 682.686 L1347.73 682.686 L1347.17 682.686 L1346.61 682.686 L1346.05 682.686 L1345.49 682.686 L1344.93 682.686 L1344.37 682.686 L1343.81 682.686 L1343.25 682.686 L1342.69 682.686 L1342.13 682.686 L1341.57 682.686 L1341.02 682.686 L1340.46 682.686 L1339.9 682.686 L1339.34 682.686 L1338.78 682.686 L1338.22 682.686 L1337.66 682.686 L1337.1 682.686 L1336.54 682.686 L1335.98 682.686 L1335.42 682.686 L1334.86 682.686 L1334.3 682.686 L1333.75 682.686 L1333.19 682.686 L1332.63 682.686 L1332.07 682.686 L1331.51 682.686 L1330.95 682.686 L1330.39 682.686 L1329.83 682.686 L1329.27 682.686 L1328.71 682.686 L1328.15 682.686 L1327.59 682.686 L1327.03 682.686 L1326.47 682.686 L1325.92 682.686 L1325.36 682.686 L1324.8 682.686 L1324.24 682.686 L1323.68 682.686 L1323.12 682.686 L1322.56 682.686 L1322 682.686 L1321.44 682.686 L1320.88 682.686 L1320.32 682.686 L1319.76 682.686 L1319.2 682.686 L1318.65 682.686 L1318.09 682.686 L1317.53 682.686 L1316.97 682.686 L1316.41 682.686 L1315.85 682.686 L1315.29 682.686 L1314.73 682.686 L1314.17 682.686 L1313.61 682.686 L1313.05 682.686 L1312.49 682.686 L1311.93 682.686 L1311.38 682.686 L1310.82 682.686 L1310.26 682.686 L1309.7 682.686 L1309.14 682.686 L1308.58 682.686 L1308.02 682.686 L1307.46 682.686 L1306.9 682.686 L1306.34 682.686 L1305.78 682.686 L1305.22 682.686 L1304.66 682.686 L1304.1 682.686 L1303.55 682.686 L1302.99 682.686 L1302.43 682.686 L1301.87 682.686 L1301.31 682.686 L1300.75 682.686 L1300.19 682.686 L1299.63 682.686 L1299.07 682.686 L1298.51 682.686 L1297.95 682.686 L1297.39 682.686 L1296.83 682.686 L1296.28 682.686 L1295.72 682.686 L1295.16 682.686 L1294.6 682.686 L1294.04 682.686 L1293.48 682.686 L1292.92 682.686 L1292.36 682.686 L1291.8 682.686 L1291.24 682.686 L1290.68 682.686 L1290.12 682.686 L1289.56 682.686 L1289 682.686 L1288.45 682.686 L1287.89 682.686 L1287.33 682.686 L1286.77 682.686 L1286.21 682.686 L1285.65 682.686 L1285.09 682.686 L1284.53 682.686 L1283.97 682.686 L1283.41 682.686 L1282.85 682.686 L1282.29 682.686 L1281.73 682.686 L1281.18 682.686 L1280.62 682.686 L1280.06 682.686 L1279.5 682.686 L1278.94 682.686 L1278.38 682.686 L1277.82 682.686 L1277.26 682.686 L1276.7 682.686 L1276.14 682.686 L1275.58 682.686 L1275.02 682.686 L1274.46 682.686 L1273.91 682.686 L1273.35 682.686 L1272.79 682.686 L1272.23 682.686 L1271.67 682.686 L1271.11 682.686 L1270.55 682.686 L1269.99 682.686 L1269.43 682.686 L1268.87 682.686 L1268.31 682.686 L1267.75 682.686 L1267.19 682.686 L1266.63 682.686 L1266.08 682.686 L1265.52 682.686 L1264.96 682.686 L1264.4 682.686 L1263.84 682.686 L1263.28 682.686 L1262.72 682.686 L1262.16 682.686 L1261.6 682.686 L1261.04 682.686 L1260.48 682.686 L1259.92 682.686 L1259.36 682.686 L1258.81 682.686 L1258.25 682.686 L1257.69 682.686 L1257.13 682.686 L1256.57 682.686 L1256.01 682.686 L1255.45 682.686 L1254.89 682.686 L1254.33 682.686 L1253.77 682.686 L1253.21 682.686 L1252.65 682.686 L1252.09 682.686 L1251.54 682.686 L1250.98 682.686 L1250.42 682.686 L1249.86 682.686 L1249.3 682.686 L1248.74 682.686 L1248.18 682.686 L1247.62 682.686 L1247.06 682.686 L1246.5 682.686 L1245.94 682.686 L1245.38 682.686 L1244.82 682.686 L1244.26 682.686 L1243.71 682.686 L1243.15 682.686 L1242.59 682.686 L1242.03 682.686 L1241.47 682.686 L1240.91 682.686 L1240.35 682.686 L1239.79 682.686 L1239.23 682.686 L1238.67 682.686 L1238.11 682.686 L1237.55 682.686 L1236.99 682.686 L1236.44 682.686 L1235.88 682.686 L1235.32 682.686 L1234.76 682.686 L1234.2 682.686 L1233.64 682.686 L1233.08 682.686 L1232.52 682.686 L1231.96 682.686 L1231.4 682.686 L1230.84 682.686 L1230.28 682.686 L1229.72 682.686 L1229.17 682.686 L1228.61 682.686 L1228.05 682.686 L1227.49 682.686 L1226.93 682.686 L1226.37 682.686 L1225.81 682.686 L1225.25 682.686 L1224.69 682.686 L1224.13 682.686 L1223.57 682.686 L1223.01 682.686 L1222.45 682.686 L1221.89 682.686 L1221.34 682.686 L1220.78 682.686 L1220.22 682.686 L1219.66 682.686 L1219.1 682.686 L1218.54 682.686 L1217.98 682.686 L1217.42 682.686 L1216.86 682.686 L1216.3 682.686 L1215.74 682.686 L1215.18 682.686 L1214.62 682.686 L1214.07 682.686 L1213.51 682.686 L1212.95 682.686 L1212.39 682.686 L1211.83 682.686 L1211.27 682.686 L1210.71 682.686 L1210.15 682.686 L1209.59 682.686 L1209.03 682.686 L1208.47 682.686 L1207.91 682.686 L1207.35 682.686 L1206.8 682.686 L1206.24 682.686 L1205.68 682.686 L1205.12 682.686 L1204.56 682.686 L1204 682.686 L1203.44 682.686 L1202.88 682.686 L1202.32 682.686 L1201.76 682.686 L1201.2 682.686 L1200.64 682.686 L1200.08 682.686 L1199.52 682.686 L1198.97 682.686 L1198.41 682.686 L1197.85 682.686 L1197.29 682.686 L1196.73 682.686 L1196.17 682.686 L1195.61 682.686 L1195.05 682.686 L1194.49 682.686 L1193.93 682.686 L1193.37 682.686 L1192.81 682.686 L1192.25 682.686 L1191.7 682.686 L1191.14 682.686 L1190.58 682.686 L1190.02 682.686 L1189.46 682.686 L1188.9 682.686 L1188.34 682.686 L1187.78 682.686 L1187.22 682.686 L1186.66 682.686 L1186.1 682.686 L1185.54 682.686 L1184.98 682.686 L1184.43 682.686 L1183.87 682.686 L1183.31 682.686 L1182.75 682.686 L1182.19 682.686 L1181.63 682.686 L1181.07 682.686 L1180.51 682.686 L1179.95 682.686 L1179.39 682.686 L1178.83 682.686 L1178.27 682.686 L1177.71 682.686 L1177.15 682.686 L1176.6 682.686 L1176.04 682.686 L1175.48 682.686 L1174.92 682.686 L1174.36 682.686 L1173.8 682.686 L1173.24 682.686 L1172.68 682.686 L1172.12 682.686 L1171.56 682.686 L1171 682.686 L1170.44 682.686 L1169.88 682.686 L1169.33 682.686 L1168.77 682.686 L1168.21 682.686 L1167.65 682.686 L1167.09 682.686 L1166.53 682.686 L1165.97 682.686 L1165.41 682.686 L1164.85 682.686 L1164.29 682.686 L1163.73 682.686 L1163.17 682.686 L1162.61 682.686 L1162.05 682.686 L1161.5 682.686 L1160.94 682.686 L1160.38 682.686 L1159.82 682.686 L1159.26 682.686 L1158.7 682.686 L1158.14 682.686 L1157.58 682.686 L1157.02 682.686 L1156.46 682.686 L1155.9 682.686 L1155.34 682.686 L1154.78 682.686 L1154.23 682.686 L1153.67 682.686 L1153.11 682.686 L1152.55 682.686 L1151.99 682.686 L1151.43 682.686 L1150.87 682.686 L1150.31 682.686 L1149.75 682.686 L1149.19 682.686 L1148.63 682.686 L1148.07 682.686 L1147.51 682.686 L1146.96 682.686 L1146.4 682.686 L1145.84 682.686 L1145.28 682.686 L1144.72 682.686 L1144.16 682.686 L1143.6 682.686 L1143.04 682.686 L1142.48 682.686 L1141.92 682.686 L1141.36 682.686 L1140.8 682.686 L1140.24 682.686 L1139.68 682.686 L1139.13 682.686 L1138.57 682.686 L1138.01 682.686 L1137.45 682.686 L1136.89 682.686 L1136.33 682.686 L1135.77 682.686 L1135.21 682.686 L1134.65 682.686 L1134.09 682.686 L1133.53 682.686 L1132.97 682.686 L1132.41 682.686 L1131.86 682.686 L1131.3 682.686 L1130.74 682.686 L1130.18 682.686 L1129.62 682.686 L1129.06 682.686 L1128.5 682.686 L1127.94 682.686 L1127.38 682.686 L1126.82 682.686 L1126.26 682.686 L1125.7 682.686 L1125.14 682.686 L1124.59 682.686 L1124.03 682.686 L1123.47 682.686 L1122.91 682.686 L1122.35 682.686 L1121.79 682.686 L1121.23 682.686 L1120.67 682.686 L1120.11 682.686 L1119.55 682.686 L1118.99 682.686 L1118.43 682.686 L1117.87 682.686 L1117.31 682.686 L1116.76 682.686 L1116.2 682.686 L1115.64 682.686 L1115.08 682.686 L1114.52 682.686 L1113.96 682.686 L1113.4 682.686 L1112.84 682.686 L1112.28 682.686 L1111.72 682.686 L1111.16 682.686 L1110.6 682.686 L1110.04 682.686 L1109.49 682.686 L1108.93 682.686 L1108.37 682.686 L1107.81 682.686 L1107.25 682.686 L1106.69 682.686 L1106.13 682.686 L1105.57 682.686 L1105.01 682.686 L1104.45 682.686 L1103.89 682.686 L1103.33 682.686 L1102.77 682.686 L1102.22 682.686 L1101.66 682.686 L1101.1 682.686 L1100.54 682.686 L1099.98 682.686 L1099.42 682.686 L1098.86 682.686 L1098.3 682.686 L1097.74 682.686 L1097.18 682.686 L1096.62 682.686 L1096.06 682.686 L1095.5 682.686 L1094.94 682.686 L1094.39 682.686 L1093.83 682.686 L1093.27 682.686 L1092.71 682.686 L1092.15 682.686 L1091.59 682.686 L1091.03 682.686 L1090.47 682.686 L1089.91 682.686 L1089.35 682.686 L1088.79 682.686 L1088.23 682.686 L1087.67 682.686 L1087.12 682.686 L1086.56 682.686 L1086 682.686 L1085.44 682.686 L1084.88 682.686 L1084.32 682.686 L1083.76 682.686 L1083.2 682.686 L1082.64 682.686 L1082.08 682.686 L1081.52 682.686 L1080.96 682.686 L1080.4 682.686 L1079.85 682.686 L1079.29 682.686 L1078.73 682.686 L1078.17 682.686 L1077.61 682.686 L1077.05 682.686 L1076.49 682.686 L1075.93 682.686 L1075.37 682.686 L1074.81 682.686 L1074.25 682.686 L1073.69 682.686 L1073.13 682.686 L1072.57 682.686 L1072.02 682.686 L1071.46 682.686 L1070.9 682.686 L1070.34 682.686 L1069.78 682.686 L1069.22 682.686 L1068.66 682.686 L1068.1 682.686 L1067.54 682.686 L1066.98 682.686 L1066.42 682.686 L1065.86 682.686 L1065.3 682.686 L1064.75 682.686 L1064.19 682.686 L1063.63 682.686 L1063.07 682.686 L1062.51 682.686 L1061.95 682.686 L1061.39 682.686 L1060.83 682.686 L1060.27 682.686 L1059.71 682.686 L1059.15 682.686 L1058.59 682.686 L1058.03 682.686 L1057.48 682.686 L1056.92 682.686 L1056.36 682.686 L1055.8 682.686 L1055.24 682.686 L1054.68 682.686 L1054.12 682.686 L1053.56 682.686 L1053 682.686 L1052.44 682.686 L1051.88 682.686 L1051.32 682.686 L1050.76 682.686 L1050.2 682.686 L1049.65 682.686 L1049.09 682.686 L1048.53 682.686 L1047.97 682.686 L1047.41 682.686 L1046.85 682.686 L1046.29 682.686 L1045.73 682.686 L1045.17 682.686 L1044.61 682.686 L1044.05 682.686 L1043.49 682.686 L1042.93 682.686 L1042.38 682.686 L1041.82 682.686 L1041.26 682.686 L1040.7 682.686 L1040.14 682.686 L1039.58 682.686 L1039.02 682.686 L1038.46 682.686 L1037.9 682.686 L1037.34 682.686 L1036.78 682.686 L1036.22 682.686 L1035.66 682.686 L1035.1 682.686 L1034.55 682.686 L1033.99 682.686 L1033.43 682.686 L1032.87 682.686 L1032.31 682.686 L1031.75 682.686 L1031.19 682.686 L1030.63 682.686 L1030.07 682.686 L1029.51 682.686 L1028.95 682.686 L1028.39 682.686 L1027.83 682.686 L1027.28 682.686 L1026.72 682.686 L1026.16 682.686 L1025.6 682.686 L1025.04 682.686 L1024.48 682.686 L1023.92 682.686 L1023.36 682.686 L1022.8 682.686 L1022.24 682.686 L1021.68 682.686 L1021.12 682.686 L1020.56 682.686 L1020.01 682.686 L1019.45 682.686 L1018.89 682.686 L1018.33 682.686 L1017.77 682.686 L1017.21 682.686 L1016.65 682.686 L1016.09 682.686 L1015.53 682.686 L1014.97 682.686 L1014.41 682.686 L1013.85 682.686 L1013.29 682.686 L1012.73 682.686 L1012.18 682.686 L1011.62 682.686 L1011.06 682.686 L1010.5 682.686 L1009.94 682.686 L1009.38 682.686 L1008.82 682.686 L1008.26 682.686 L1007.7 682.686 L1007.14 682.686 L1006.58 682.686 L1006.02 682.686 L1005.46 682.686 L1004.91 682.686 L1004.35 682.686 L1003.79 682.686 L1003.23 682.686 L1002.67 682.686 L1002.11 682.686 L1001.55 682.686 L1000.99 682.686 L1000.43 682.686 L999.872 682.686 L999.313 682.686 L998.754 682.686 L998.194 682.686 L997.635 682.686 L997.076 682.686 L996.517 682.686 L995.957 682.686 L995.398 682.686 L994.839 682.686 L994.28 682.686 L993.72 682.686 L993.161 682.686 L992.602 682.686 L992.043 682.686 L991.483 682.686 L990.924 682.686 L990.365 682.686 L989.806 682.686 L989.246 682.686 L988.687 682.686 L988.128 682.686 L987.569 682.686 L987.009 682.686 L986.45 682.686 L985.891 682.686 L985.332 682.686 L984.772 682.686 L984.213 682.686 L983.654 682.686 L983.095 682.686 L982.535 682.686 L981.976 682.686 L981.417 682.686 L980.858 682.686 L980.298 682.686 L979.739 682.686 L979.18 682.686 L978.621 682.686 L978.061 682.686 L977.502 682.686 L976.943 682.686 L976.384 682.686 L975.824 682.686 L975.265 682.686 L974.706 682.686 L974.147 682.686 L973.587 682.686 L973.028 682.686 L972.469 682.686 L971.91 682.686 L971.35 682.686 L970.791 682.686 L970.232 682.686 L969.673 682.686 L969.113 682.686 L968.554 682.686 L967.995 682.686 L967.436 682.686 L966.876 682.686 L966.317 682.686 L965.758 682.686 L965.199 682.686 L964.639 682.686 L964.08 682.686 L963.521 682.686 L962.962 682.686 L962.402 682.686 L961.843 682.686 L961.284 682.686 L960.725 682.686 L960.165 682.686 L959.606 682.686 L959.047 682.686 L958.488 682.686 L957.928 682.686 L957.369 682.686 L956.81 682.686 L956.251 682.686 L955.691 682.686 L955.132 682.686 L954.573 682.686 L954.014 682.686 L953.454 682.686 L952.895 682.686 L952.336 682.686 L951.777 682.686 L951.217 682.686 L950.658 682.686 L950.099 682.686 L949.54 682.686 L948.98 682.686 L948.421 682.686 L947.862 682.686 L947.303 682.686 L946.743 682.686 L946.184 682.686 L945.625 682.686 L945.066 682.686 L944.506 682.686 L943.947 682.686 L943.388 682.686 L942.829 682.686 L942.269 682.686 L941.71 682.686 L941.151 682.686 L940.592 682.686 L940.032 682.686 L939.473 682.686 L938.914 682.686 L938.355 682.686 L937.795 682.686 L937.236 682.686 L936.677 682.686 L936.118 682.686 L935.558 682.686 L934.999 682.686 L934.44 682.686 L933.881 682.686 L933.321 682.686 L932.762 682.686 L932.203 682.686 L931.644 682.686 L931.084 682.686 L930.525 682.686 L929.966 682.686 L929.406 682.686 L928.847 682.686 L928.288 682.686 L927.729 682.686 L927.169 682.686 L926.61 682.686 L926.051 682.686 L925.492 682.686 L924.932 682.686 L924.373 682.686 L923.814 682.686 L923.255 682.686 L922.695 682.686 L922.136 682.686 L921.577 682.686 L921.018 682.686 L920.458 682.686 L919.899 682.686 L919.34 682.686 L918.781 682.686 L918.221 682.686 L917.662 682.686 L917.103 682.686 L916.544 682.686 L915.984 682.686 L915.425 682.686 L914.866 682.686 L914.307 682.686 L913.747 682.686 L913.188 682.686 L912.629 682.686 L912.07 682.686 L911.51 682.686 L910.951 682.686 L910.392 682.686 L909.833 682.686 L909.273 682.686 L908.714 682.686 L908.155 682.686 L907.596 682.686 L907.036 682.686 L906.477 682.686 L905.918 682.686 L905.359 682.686 L904.799 682.686 L904.24 682.686 L903.681 682.686 L903.122 682.686 L902.562 682.686 L902.003 682.686 L901.444 682.686 L900.885 682.686 L900.325 682.686 L899.766 682.686 L899.207 682.686 L898.648 682.686 L898.088 682.686 L897.529 682.686 L896.97 682.686 L896.411 682.686 L895.851 682.686 L895.292 682.686 L894.733 682.686 L894.174 682.686 L893.614 682.686 L893.055 682.686 L892.496 682.686 L891.937 682.686 L891.377 682.686 L890.818 682.686 L890.259 682.686 L889.7 682.686 L889.14 682.686 L888.581 682.686 L888.022 682.686 L887.463 682.686 L886.903 682.686 L886.344 682.686 L885.785 682.686 L885.226 682.686 L884.666 682.686 L884.107 682.686 L883.548 682.686 L882.989 682.686 L882.429 682.686 L881.87 682.686 L881.311 682.686 L880.752 682.686 L880.192 682.686 L879.633 682.686 L879.074 682.686 L878.515 682.686 L877.955 682.686 L877.396 682.686 L876.837 682.686 L876.278 682.686 L875.718 682.686 L875.159 682.686 L874.6 682.686 L874.041 682.686 L873.481 682.686 L872.922 682.686 L872.363 682.686 L871.804 682.686 L871.244 682.686 L870.685 682.686 L870.126 682.686 L869.567 682.686 L869.007 682.686 L868.448 682.686 L867.889 682.686 L867.33 682.686 L866.77 682.686 L866.211 682.686 L865.652 682.686 L865.093 682.686 L864.533 682.686 L863.974 682.686 L863.415 682.686 L862.856 682.686 L862.296 682.686 L861.737 682.686 L861.178 682.686 L860.619 682.686 L860.059 682.686 L859.5 682.686 L858.941 682.686 L858.382 682.686 L857.822 682.686 L857.263 682.686 L856.704 682.686 L856.145 682.686 L855.585 682.686 L855.026 682.686 L854.467 682.686 L853.908 682.686 L853.348 682.686 L852.789 682.686 L852.23 682.686 L851.671 682.686 L851.111 682.686 L850.552 682.686 L849.993 682.686 L849.434 682.686 L848.874 682.686 L848.315 682.686 L847.756 682.686 L847.197 682.686 L846.637 682.686 L846.078 682.686 L845.519 682.686 L844.96 682.686 L844.4 682.686 L843.841 682.686 L843.282 682.686 L842.723 682.686 L842.163 682.686 L841.604 682.686 L841.045 682.686 L840.486 682.686 L839.926 682.686 L839.367 682.686 L838.808 682.686 L838.249 682.686 L837.689 682.686 L837.13 682.686 L836.571 682.686 L836.012 682.686 L835.452 682.686 L834.893 682.686 L834.334 682.686 L833.775 682.686 L833.215 682.686 L832.656 682.686 L832.097 682.686 L831.538 682.686 L830.978 682.686 L830.419 682.686 L829.86 682.686 L829.301 682.686 L828.741 682.686 L828.182 682.686 L827.623 682.686 L827.064 682.686 L826.504 682.686 L825.945 682.686 L825.386 682.686 L824.827 682.686 L824.267 682.686 L823.708 682.686 L823.149 682.686 L822.59 682.686 L822.03 682.686 L821.471 682.686 L820.912 682.686 L820.353 682.686 L819.793 682.686 L819.234 682.686 L818.675 682.686 L818.116 682.686 L817.556 682.686 L816.997 682.686 L816.438 682.686 L815.879 682.686 L815.319 682.686 L814.76 682.686 L814.201 682.686 L813.642 682.686 L813.082 682.686 L812.523 682.686 L811.964 682.686 L811.405 682.686 L810.845 682.686 L810.286 682.686 L809.727 682.686 L809.168 682.686 L808.608 682.686 L808.049 682.686 L807.49 682.686 L806.931 682.686 L806.371 682.686 L805.812 682.686 L805.253 682.686 L804.693 682.686 L804.134 682.686 L803.575 682.686 L803.016 682.686 L802.456 682.686 L801.897 682.686 L801.338 682.686 L800.779 682.686 L800.219 682.686 L799.66 682.686 L799.101 682.686 L798.542 682.686 L797.982 682.686 L797.423 682.686 L796.864 682.686 L796.305 682.686 L795.745 682.686 L795.186 682.686 L794.627 682.686 L794.068 682.686 L793.508 682.686 L792.949 682.686 L792.39 682.686 L791.831 682.686 L791.271 682.686 L790.712 682.686 L790.153 682.686 L789.594 682.686 L789.034 682.686 L788.475 682.686 L787.916 682.686 L787.357 682.686 L786.797 682.686 L786.238 682.686 L785.679 682.686 L785.12 682.686 L784.56 682.686 L784.001 682.686 L783.442 682.686 L782.883 682.686 L782.323 682.686 L781.764 682.686 L781.205 682.686 L780.646 682.686 L780.086 682.686 L779.527 682.686 L778.968 682.686 L778.409 682.686 L777.849 682.686 L777.29 682.686 L776.731 682.686 L776.172 682.686 L775.612 682.686 L775.053 682.686 L774.494 682.686 L773.935 682.686 L773.375 682.686 L772.816 682.686 L772.257 682.686 L771.698 682.686 L771.138 682.686 L770.579 682.686 L770.02 682.686 L769.461 682.686 L768.901 682.686 L768.342 682.686 L767.783 682.686 L767.224 682.686 L766.664 682.686 L766.105 682.686 L765.546 682.686 L764.987 682.686 L764.427 682.686 L763.868 682.686 L763.309 682.686 L762.75 682.686 L762.19 682.686 L761.631 682.686 L761.072 682.686 L760.513 682.686 L759.953 682.686 L759.394 682.686 L758.835 682.686 L758.276 682.686 L757.716 682.686 L757.157 682.686 L756.598 682.686 L756.039 682.686 L755.479 682.686 L754.92 682.686 L754.361 682.686 L753.802 682.686 L753.242 682.686 L752.683 682.686 L752.124 682.686 L751.565 682.686 L751.005 682.686 L750.446 682.686 L749.887 682.686 L749.328 682.686 L748.768 682.686 L748.209 682.686 L747.65 682.686 L747.091 682.686 L746.531 682.686 L745.972 682.686 L745.413 682.686 L744.854 682.686 L744.294 682.686 L743.735 682.686 L743.176 682.686 L742.617 682.686 L742.057 682.686 L741.498 682.686 L740.939 682.686 L740.38 682.686 L739.82 682.686 L739.261 682.686 L738.702 682.686 L738.143 682.686 L737.583 682.686 L737.024 682.686 L736.465 682.686 L735.906 682.686 L735.346 682.686 L734.787 682.686 L734.228 682.686 L733.669 682.686 L733.109 682.686 L732.55 682.686 L731.991 682.686 L731.432 682.686 L730.872 682.686 L730.313 682.686 L729.754 682.686 L729.195 682.686 L728.635 682.686 L728.076 682.686 L727.517 682.686 L726.958 682.686 L726.398 682.686 L725.839 682.686 L725.28 682.686 L724.721 682.686 L724.161 682.686 L723.602 682.686 L723.043 682.686 L722.484 682.686 L721.924 682.686 L721.365 682.686 L720.806 682.686 L720.247 682.686  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.633 720.806,686.633 721.365,686.633 721.924,686.633 722.484,686.633 723.043,686.633 723.602,686.633 724.161,686.633 724.721,686.633 725.28,686.633 725.839,686.633 726.398,686.633 726.958,686.633 727.517,686.633 728.076,686.633 728.635,686.633 729.195,686.633 729.754,686.633 730.313,686.633 730.872,686.633 731.432,686.633 731.991,686.633 732.55,686.633 733.109,686.633 733.669,686.633 734.228,686.633 734.787,686.633 735.346,686.633 735.906,686.633 736.465,686.633 737.024,686.633 737.583,686.633 738.143,686.633 738.702,686.633 739.261,686.633 739.82,686.633 740.38,686.633 740.939,686.633 741.498,686.633 742.057,686.633 742.617,686.633 743.176,686.633 743.735,686.633 744.294,686.633 744.854,686.633 745.413,686.633 745.972,686.633 746.531,686.633 747.091,686.633 747.65,686.633 748.209,686.633 748.768,686.633 749.328,686.633 749.887,686.633 750.446,686.633 751.005,686.633 751.565,686.633 752.124,686.633 752.683,686.633 753.242,686.633 753.802,686.633 754.361,686.633 754.92,686.633 755.479,686.633 756.039,686.633 756.598,686.633 757.157,686.633 757.716,686.633 758.276,686.633 758.835,686.633 759.394,686.633 759.953,686.633 760.513,686.633 761.072,686.633 761.631,686.633 762.19,686.633 762.75,686.633 763.309,686.633 763.868,686.633 764.427,686.633 764.987,686.633 765.546,686.633 766.105,686.633 766.664,686.633 767.224,686.633 767.783,686.633 768.342,686.633 768.901,686.633 769.461,686.633 770.02,686.633 770.579,686.633 771.138,686.633 771.698,686.633 772.257,686.633 772.816,686.633 773.375,686.633 773.935,686.633 774.494,686.633 775.053,686.633 775.612,686.633 776.172,686.633 776.731,686.633 777.29,686.633 777.849,686.633 778.409,686.633 778.968,686.633 779.527,686.633 780.086,686.633 780.646,686.633 781.205,686.633 781.764,686.633 782.323,686.633 782.883,686.633 783.442,686.633 784.001,686.633 784.56,686.633 785.12,686.633 785.679,686.633 786.238,686.633 786.797,686.633 787.357,686.633 787.916,686.633 788.475,686.633 789.034,686.633 789.594,686.633 790.153,686.633 790.712,686.633 791.271,686.633 791.831,686.633 792.39,686.633 792.949,686.633 793.508,686.633 794.068,686.633 794.627,686.633 795.186,686.633 795.745,686.633 796.305,686.633 796.864,686.633 797.423,686.633 797.982,686.633 798.542,686.633 799.101,686.633 799.66,686.633 800.219,686.633 800.779,686.633 801.338,686.633 801.897,686.633 802.456,686.633 803.016,686.633 803.575,686.633 804.134,686.633 804.693,686.633 805.253,686.633 805.812,686.633 806.371,686.633 806.931,686.633 807.49,686.633 808.049,686.633 808.608,686.633 809.168,686.633 809.727,686.633 810.286,686.633 810.845,686.633 811.405,686.633 811.964,686.633 812.523,686.633 813.082,686.633 813.642,686.633 814.201,686.633 814.76,686.633 815.319,686.633 815.879,686.633 816.438,686.633 816.997,686.633 817.556,686.633 818.116,686.633 818.675,686.633 819.234,686.633 819.793,686.633 820.353,686.633 820.912,686.633 821.471,686.633 822.03,686.633 822.59,686.633 823.149,686.633 823.708,686.633 824.267,686.633 824.827,686.633 825.386,686.633 825.945,686.633 826.504,686.633 827.064,686.633 827.623,686.633 828.182,686.633 828.741,686.633 829.301,686.633 829.86,686.633 830.419,686.633 830.978,686.633 831.538,686.633 832.097,686.633 832.656,686.633 833.215,686.633 833.775,686.633 834.334,686.633 834.893,686.633 835.452,686.633 836.012,686.633 836.571,686.633 837.13,686.633 837.689,686.633 838.249,686.633 838.808,686.633 839.367,686.633 839.926,686.633 840.486,686.633 841.045,686.633 841.604,686.633 842.163,686.633 842.723,686.633 843.282,686.633 843.841,686.633 844.4,686.633 844.96,686.633 845.519,686.633 846.078,686.633 846.637,686.633 847.197,686.633 847.756,686.633 848.315,686.633 848.874,686.633 849.434,686.633 849.993,686.633 850.552,686.633 851.111,686.633 851.671,686.633 852.23,686.633 852.789,686.633 853.348,686.633 853.908,686.633 854.467,686.633 855.026,686.633 855.585,686.633 856.145,686.633 856.704,686.633 857.263,686.633 857.822,686.633 858.382,686.633 858.941,686.633 859.5,686.633 860.059,686.633 860.619,686.633 861.178,686.633 861.737,686.633 862.296,686.633 862.856,686.633 863.415,686.633 863.974,686.633 864.533,686.633 865.093,686.633 865.652,686.633 866.211,686.633 866.77,686.633 867.33,686.633 867.889,686.633 868.448,686.633 869.007,686.633 869.567,686.633 870.126,686.633 870.685,686.633 871.244,686.633 871.804,686.633 872.363,686.633 872.922,686.633 873.481,686.633 874.041,686.633 874.6,686.633 875.159,686.633 875.718,686.633 876.278,686.633 876.837,686.633 877.396,686.633 877.955,686.633 878.515,686.633 879.074,686.633 879.633,686.633 880.192,686.633 880.752,686.633 881.311,686.633 881.87,686.633 882.429,686.633 882.989,686.633 883.548,686.633 884.107,686.633 884.666,686.633 885.226,686.633 885.785,686.633 886.344,686.633 886.903,686.633 887.463,686.633 888.022,686.633 888.581,686.633 889.14,686.633 889.7,686.633 890.259,686.633 890.818,686.633 891.377,686.633 891.937,686.633 892.496,686.633 893.055,686.633 893.614,686.633 894.174,686.633 894.733,686.633 895.292,686.633 895.851,686.633 896.411,686.633 896.97,686.633 897.529,686.633 898.088,686.633 898.648,686.633 899.207,686.633 899.766,686.633 900.325,686.633 900.885,686.633 901.444,686.633 902.003,686.633 902.562,686.633 903.122,686.633 903.681,686.633 904.24,686.633 904.799,686.633 905.359,686.633 905.918,686.633 906.477,686.633 907.036,686.633 907.596,686.633 908.155,686.633 908.714,686.633 909.273,686.633 909.833,686.633 910.392,686.633 910.951,686.633 911.51,686.633 912.07,686.633 912.629,686.633 913.188,686.633 913.747,686.633 914.307,686.633 914.866,686.633 915.425,686.633 915.984,686.633 916.544,686.633 917.103,686.633 917.662,686.633 918.221,686.633 918.781,686.633 919.34,686.633 919.899,686.633 920.458,686.633 921.018,686.633 921.577,686.633 922.136,686.633 922.695,686.633 923.255,686.633 923.814,686.633 924.373,686.633 924.932,686.633 925.492,686.633 926.051,686.633 926.61,686.633 927.169,686.633 927.729,686.633 928.288,686.633 928.847,686.633 929.406,686.633 929.966,686.633 930.525,686.633 931.084,686.633 931.644,686.633 932.203,686.633 932.762,686.633 933.321,686.633 933.881,686.633 934.44,686.633 934.999,686.633 935.558,686.633 936.118,686.633 936.677,686.633 937.236,686.633 937.795,686.633 938.355,686.633 938.914,686.633 939.473,686.633 940.032,686.633 940.592,686.633 941.151,686.633 941.71,686.633 942.269,686.633 942.829,686.633 943.388,686.633 943.947,686.633 944.506,686.633 945.066,686.633 945.625,686.633 946.184,686.633 946.743,686.633 947.303,686.633 947.862,686.633 948.421,686.633 948.98,686.633 949.54,686.633 950.099,686.633 950.658,686.633 951.217,686.633 951.777,686.633 952.336,686.633 952.895,686.633 953.454,686.633 954.014,686.633 954.573,686.633 955.132,686.633 955.691,686.633 956.251,686.633 956.81,686.633 957.369,686.633 957.928,686.633 958.488,686.633 959.047,686.633 959.606,686.633 960.165,686.633 960.725,686.633 961.284,686.633 961.843,686.633 962.402,686.633 962.962,686.633 963.521,686.633 964.08,686.633 964.639,686.633 965.199,686.633 965.758,686.633 966.317,686.633 966.876,686.633 967.436,686.633 967.995,686.633 968.554,686.633 969.113,686.633 969.673,686.633 970.232,686.633 970.791,686.633 971.35,686.633 971.91,686.633 972.469,686.633 973.028,686.633 973.587,686.633 974.147,686.633 974.706,686.633 975.265,686.633 975.824,686.633 976.384,686.633 976.943,686.633 977.502,686.633 978.061,686.633 978.621,686.633 979.18,686.633 979.739,686.633 980.298,686.633 980.858,686.633 981.417,686.633 981.976,686.633 982.535,686.633 983.095,686.633 983.654,686.633 984.213,686.633 984.772,686.633 985.332,686.633 985.891,686.633 986.45,686.633 987.009,686.633 987.569,686.633 988.128,686.633 988.687,686.633 989.246,686.633 989.806,686.633 990.365,686.633 990.924,686.633 991.483,686.633 992.043,686.633 992.602,686.633 993.161,686.633 993.72,686.633 994.28,686.633 994.839,686.633 995.398,686.633 995.957,686.633 996.517,686.633 997.076,686.633 997.635,686.633 998.194,686.633 998.754,686.633 999.313,686.633 999.872,686.633 1000.43,686.633 1000.99,686.633 1001.55,686.633 1002.11,686.633 1002.67,686.633 1003.23,686.633 1003.79,686.633 1004.35,686.633 1004.91,686.633 1005.46,686.633 1006.02,686.633 1006.58,686.633 1007.14,686.633 1007.7,686.633 1008.26,686.633 1008.82,686.633 1009.38,686.633 1009.94,686.633 1010.5,686.633 1011.06,686.633 1011.62,686.633 1012.18,686.633 1012.73,686.633 1013.29,686.633 1013.85,686.633 1014.41,686.633 1014.97,686.633 1015.53,686.633 1016.09,686.633 1016.65,686.633 1017.21,686.633 1017.77,686.633 1018.33,686.633 1018.89,686.633 1019.45,686.633 1020.01,686.633 1020.56,686.633 1021.12,686.633 1021.68,686.633 1022.24,686.633 1022.8,686.633 1023.36,686.633 1023.92,686.633 1024.48,686.633 1025.04,686.633 1025.6,686.633 1026.16,686.633 1026.72,686.633 1027.28,686.633 1027.83,686.633 1028.39,686.633 1028.95,686.633 1029.51,686.633 1030.07,686.633 1030.63,686.633 1031.19,686.633 1031.75,686.633 1032.31,686.633 1032.87,686.633 1033.43,686.633 1033.99,686.633 1034.55,686.633 1035.1,686.633 1035.66,686.633 1036.22,686.633 1036.78,686.633 1037.34,686.633 1037.9,686.633 1038.46,686.633 1039.02,686.633 1039.58,686.633 1040.14,686.633 1040.7,686.633 1041.26,686.633 1041.82,686.633 1042.38,686.633 1042.93,686.633 1043.49,686.633 1044.05,686.633 1044.61,686.633 1045.17,686.633 1045.73,686.633 1046.29,686.633 1046.85,686.633 1047.41,686.633 1047.97,686.633 1048.53,686.633 1049.09,686.633 1049.65,686.633 1050.2,686.633 1050.76,686.633 1051.32,686.633 1051.88,686.633 1052.44,686.633 1053,686.633 1053.56,686.633 1054.12,686.633 1054.68,686.633 1055.24,686.633 1055.8,686.633 1056.36,686.633 1056.92,686.633 1057.48,686.633 1058.03,686.633 1058.59,686.633 1059.15,686.633 1059.71,686.633 1060.27,686.633 1060.83,686.633 1061.39,686.633 1061.95,686.633 1062.51,686.633 1063.07,686.633 1063.63,686.633 1064.19,686.633 1064.75,686.633 1065.3,686.633 1065.86,686.633 1066.42,686.633 1066.98,686.633 1067.54,686.633 1068.1,686.633 1068.66,686.633 1069.22,686.633 1069.78,686.633 1070.34,686.633 1070.9,686.633 1071.46,686.633 1072.02,686.633 1072.57,686.633 1073.13,686.633 1073.69,686.633 1074.25,686.633 1074.81,686.633 1075.37,686.633 1075.93,686.633 1076.49,686.633 1077.05,686.633 1077.61,686.633 1078.17,686.633 1078.73,686.633 1079.29,686.633 1079.85,686.633 1080.4,686.633 1080.96,686.633 1081.52,686.633 1082.08,686.633 1082.64,686.633 1083.2,686.633 1083.76,686.633 1084.32,686.633 1084.88,686.633 1085.44,686.633 1086,686.633 1086.56,686.633 1087.12,686.633 1087.67,686.633 1088.23,686.633 1088.79,686.633 1089.35,686.633 1089.91,686.633 1090.47,686.633 1091.03,686.633 1091.59,686.633 1092.15,686.633 1092.71,686.633 1093.27,686.633 1093.83,686.633 1094.39,686.633 1094.94,686.633 1095.5,686.633 1096.06,686.633 1096.62,686.633 1097.18,686.633 1097.74,686.633 1098.3,686.633 1098.86,686.633 1099.42,686.633 1099.98,686.633 1100.54,686.633 1101.1,686.633 1101.66,686.633 1102.22,686.633 1102.77,686.633 1103.33,686.633 1103.89,686.633 1104.45,686.633 1105.01,686.633 1105.57,686.633 1106.13,686.633 1106.69,686.633 1107.25,686.633 1107.81,686.633 1108.37,686.633 1108.93,686.633 1109.49,686.633 1110.04,686.633 1110.6,686.633 1111.16,686.633 1111.72,686.633 1112.28,686.633 1112.84,686.633 1113.4,686.633 1113.96,686.633 1114.52,686.633 1115.08,686.633 1115.64,686.633 1116.2,686.633 1116.76,686.633 1117.31,686.633 1117.87,686.633 1118.43,686.633 1118.99,686.633 1119.55,686.633 1120.11,686.633 1120.67,686.633 1121.23,686.633 1121.79,686.633 1122.35,686.633 1122.91,686.633 1123.47,686.633 1124.03,686.633 1124.59,686.633 1125.14,686.633 1125.7,686.633 1126.26,686.633 1126.82,686.633 1127.38,686.633 1127.94,686.633 1128.5,686.633 1129.06,686.633 1129.62,686.633 1130.18,686.633 1130.74,686.633 1131.3,686.633 1131.86,686.633 1132.41,686.633 1132.97,686.633 1133.53,686.633 1134.09,686.633 1134.65,686.633 1135.21,686.633 1135.77,686.633 1136.33,686.633 1136.89,686.633 1137.45,686.633 1138.01,686.633 1138.57,686.633 1139.13,686.633 1139.68,686.633 1140.24,686.633 1140.8,686.633 1141.36,686.633 1141.92,686.633 1142.48,686.633 1143.04,686.633 1143.6,686.633 1144.16,686.633 1144.72,686.633 1145.28,686.633 1145.84,686.633 1146.4,686.633 1146.96,686.633 1147.51,686.633 1148.07,686.633 1148.63,686.633 1149.19,686.633 1149.75,686.633 1150.31,686.633 1150.87,686.633 1151.43,686.633 1151.99,686.633 1152.55,686.633 1153.11,686.633 1153.67,686.633 1154.23,686.633 1154.78,686.633 1155.34,686.633 1155.9,686.633 1156.46,686.633 1157.02,686.633 1157.58,686.633 1158.14,686.633 1158.7,686.633 1159.26,686.633 1159.82,686.633 1160.38,686.633 1160.94,686.633 1161.5,686.633 1162.05,686.633 1162.61,686.633 1163.17,686.633 1163.73,686.633 1164.29,686.633 1164.85,686.633 1165.41,686.633 1165.97,686.633 1166.53,686.633 1167.09,686.633 1167.65,686.633 1168.21,686.633 1168.77,686.633 1169.33,686.633 1169.88,686.633 1170.44,686.633 1171,686.633 1171.56,686.633 1172.12,686.633 1172.68,686.633 1173.24,686.633 1173.8,686.633 1174.36,686.633 1174.92,686.633 1175.48,686.633 1176.04,686.633 1176.6,686.633 1177.15,686.633 1177.71,686.633 1178.27,686.633 1178.83,686.633 1179.39,686.633 1179.95,686.633 1180.51,686.633 1181.07,686.633 1181.63,686.633 1182.19,686.633 1182.75,686.633 1183.31,686.633 1183.87,686.633 1184.43,686.633 1184.98,686.633 1185.54,686.633 1186.1,686.633 1186.66,686.633 1187.22,686.633 1187.78,686.633 1188.34,686.633 1188.9,686.633 1189.46,686.633 1190.02,686.633 1190.58,686.633 1191.14,686.633 1191.7,686.633 1192.25,686.633 1192.81,686.633 1193.37,686.633 1193.93,686.633 1194.49,686.633 1195.05,686.633 1195.61,686.633 1196.17,686.633 1196.73,686.633 1197.29,686.633 1197.85,686.633 1198.41,686.633 1198.97,686.633 1199.52,686.633 1200.08,686.633 1200.64,686.633 1201.2,686.633 1201.76,686.633 1202.32,686.633 1202.88,686.633 1203.44,686.633 1204,686.633 1204.56,686.633 1205.12,686.633 1205.68,686.633 1206.24,686.633 1206.8,686.633 1207.35,686.633 1207.91,686.633 1208.47,686.633 1209.03,686.633 1209.59,686.633 1210.15,686.633 1210.71,686.633 1211.27,686.633 1211.83,686.633 1212.39,686.633 1212.95,686.633 1213.51,686.633 1214.07,686.633 1214.62,686.633 1215.18,686.633 1215.74,686.633 1216.3,686.633 1216.86,686.633 1217.42,686.633 1217.98,686.633 1218.54,686.633 1219.1,686.633 1219.66,686.633 1220.22,686.633 1220.78,686.633 1221.34,686.633 1221.89,686.633 1222.45,686.633 1223.01,686.633 1223.57,686.633 1224.13,686.633 1224.69,686.633 1225.25,686.633 1225.81,686.633 1226.37,686.633 1226.93,686.633 1227.49,686.633 1228.05,686.633 1228.61,686.633 1229.17,686.633 1229.72,686.633 1230.28,686.633 1230.84,686.633 1231.4,686.633 1231.96,686.633 1232.52,686.633 1233.08,686.633 1233.64,686.633 1234.2,686.633 1234.76,686.633 1235.32,686.633 1235.88,686.633 1236.44,686.633 1236.99,686.633 1237.55,686.633 1238.11,686.633 1238.67,686.633 1239.23,686.633 1239.79,686.633 1240.35,686.633 1240.91,686.633 1241.47,686.633 1242.03,686.633 1242.59,686.633 1243.15,686.633 1243.71,686.633 1244.26,686.633 1244.82,686.633 1245.38,686.633 1245.94,686.633 1246.5,686.633 1247.06,686.633 1247.62,686.633 1248.18,686.633 1248.74,686.633 1249.3,686.633 1249.86,686.633 1250.42,686.633 1250.98,686.633 1251.54,686.633 1252.09,686.633 1252.65,686.633 1253.21,686.633 1253.77,686.633 1254.33,686.633 1254.89,686.633 1255.45,686.633 1256.01,686.633 1256.57,686.633 1257.13,686.633 1257.69,686.633 1258.25,686.633 1258.81,686.633 1259.36,686.633 1259.92,686.633 1260.48,686.633 1261.04,686.633 1261.6,686.633 1262.16,686.633 1262.72,686.633 1263.28,686.633 1263.84,686.633 1264.4,686.633 1264.96,686.633 1265.52,686.633 1266.08,686.633 1266.63,686.633 1267.19,686.633 1267.75,686.633 1268.31,686.633 1268.87,686.633 1269.43,686.633 1269.99,686.633 1270.55,686.633 1271.11,686.633 1271.67,686.633 1272.23,686.633 1272.79,686.633 1273.35,686.633 1273.91,686.633 1274.46,686.633 1275.02,686.633 1275.58,686.633 1276.14,686.633 1276.7,686.633 1277.26,686.633 1277.82,686.633 1278.38,686.633 1278.94,686.633 1279.5,686.633 1280.06,686.633 1280.62,686.633 1281.18,686.633 1281.73,686.633 1282.29,686.633 1282.85,686.633 1283.41,686.633 1283.97,686.633 1284.53,686.633 1285.09,686.633 1285.65,686.633 1286.21,686.633 1286.77,686.633 1287.33,686.633 1287.89,686.633 1288.45,686.633 1289,686.633 1289.56,686.633 1290.12,686.633 1290.68,686.633 1291.24,686.633 1291.8,686.633 1292.36,686.633 1292.92,686.633 1293.48,686.633 1294.04,686.633 1294.6,686.633 1295.16,686.633 1295.72,686.633 1296.28,686.633 1296.83,686.633 1297.39,686.633 1297.95,686.633 1298.51,686.633 1299.07,686.633 1299.63,686.633 1300.19,686.633 1300.75,686.633 1301.31,686.633 1301.87,686.633 1302.43,686.633 1302.99,686.633 1303.55,686.633 1304.1,686.633 1304.66,686.633 1305.22,686.633 1305.78,686.633 1306.34,686.633 1306.9,686.633 1307.46,686.633 1308.02,686.633 1308.58,686.633 1309.14,686.633 1309.7,686.633 1310.26,686.633 1310.82,686.633 1311.38,686.633 1311.93,686.633 1312.49,686.633 1313.05,686.633 1313.61,686.633 1314.17,686.633 1314.73,686.633 1315.29,686.633 1315.85,686.633 1316.41,686.633 1316.97,686.633 1317.53,686.633 1318.09,686.633 1318.65,686.633 1319.2,686.633 1319.76,686.633 1320.32,686.633 1320.88,686.633 1321.44,686.633 1322,686.633 1322.56,686.633 1323.12,686.633 1323.68,686.633 1324.24,686.633 1324.8,686.633 1325.36,686.633 1325.92,686.633 1326.47,686.633 1327.03,686.633 1327.59,686.633 1328.15,686.633 1328.71,686.633 1329.27,686.633 1329.83,686.633 1330.39,686.633 1330.95,686.633 1331.51,686.633 1332.07,686.633 1332.63,686.633 1333.19,686.633 1333.75,686.633 1334.3,686.633 1334.86,686.633 1335.42,686.633 1335.98,686.633 1336.54,686.633 1337.1,686.633 1337.66,686.633 1338.22,686.633 1338.78,686.633 1339.34,686.633 1339.9,686.633 1340.46,686.633 1341.02,686.633 1341.57,686.633 1342.13,686.633 1342.69,686.633 1343.25,686.633 1343.81,686.633 1344.37,686.633 1344.93,686.633 1345.49,686.633 1346.05,686.633 1346.61,686.633 1347.17,686.633 1347.73,686.633 1348.29,686.633 1348.84,686.633 1349.4,686.633 1349.96,686.633 1350.52,686.633 1351.08,686.633 1351.64,686.633 1352.2,686.633 1352.76,686.633 1353.32,686.633 1353.88,686.633 1354.44,686.633 1355,686.633 1355.56,686.633 1356.12,686.633 1356.67,686.633 1357.23,686.633 1357.79,686.633 1358.35,686.633 1358.91,686.633 1359.47,686.633 1360.03,686.633 1360.59,686.633 1361.15,686.633 1361.71,686.633 1362.27,686.633 1362.83,686.633 1363.39,686.633 1363.94,686.633 1364.5,686.633 1365.06,686.633 1365.62,686.633 1366.18,686.633 1366.74,686.633 1367.3,686.633 1367.86,686.633 1368.42,686.633 1368.98,686.633 1369.54,686.633 1370.1,686.633 1370.66,686.633 1371.21,686.633 1371.77,686.633 1372.33,686.633 1372.89,686.633 1373.45,686.633 1374.01,686.633 1374.57,686.633 1375.13,686.633 1375.69,686.633 1376.25,686.633 1376.81,686.633 1377.37,686.633 1377.93,686.633 1378.49,686.633 1379.04,686.633 1379.6,686.633 1380.16,686.633 1380.72,686.633 1381.28,686.633 1381.84,686.633 1382.4,686.633 1382.96,686.633 1383.52,686.633 1384.08,686.633 1384.64,686.633 1385.2,686.633 1385.76,686.633 1386.31,686.633 1386.87,686.633 1387.43,686.633 1387.99,686.633 1388.55,686.633 1389.11,686.633 1389.67,686.633 1390.23,686.633 1390.79,686.633 1391.35,686.633 1391.91,686.633 1392.47,686.633 1393.03,686.633 1393.58,686.633 1394.14,686.633 1394.7,686.633 1395.26,686.633 1395.82,686.633 1396.38,686.633 1396.94,686.633 1397.5,686.633 1398.06,686.633 1398.62,686.633 1399.18,686.633 1399.74,686.633 1400.3,686.633 1400.86,686.633 1401.41,686.633 1401.97,686.633 1402.53,686.633 1403.09,686.633 1403.65,686.633 1404.21,686.633 1404.77,686.633 1405.33,686.633 1405.89,686.633 1406.45,686.633 1407.01,686.633 1407.57,686.633 1408.13,686.633 1408.68,686.633 1409.24,686.633 1409.8,686.633 1410.36,686.633 1410.92,686.633 1411.48,686.633 1412.04,686.633 1412.6,686.633 1413.16,686.633 1413.72,686.633 1414.28,686.633 1414.84,686.633 1415.4,686.633 1415.95,686.633 1416.51,686.633 1417.07,686.633 1417.63,686.633 1418.19,686.633 1418.75,686.633 1419.31,686.633 1419.87,686.633 1420.43,686.633 1420.99,686.633 1421.55,686.633 1422.11,686.633 1422.67,686.633 1423.23,686.633 1423.78,686.633 1424.34,686.633 1424.9,686.633 1425.46,686.633 1426.02,686.633 1426.58,686.633 1427.14,686.633 1427.7,686.633 1428.26,686.633 1428.82,686.633 1429.38,686.633 1429.94,686.633 1430.5,686.633 1431.05,686.633 1431.61,686.633 1432.17,686.633 1432.73,686.633 1433.29,686.633 1433.85,686.633 1434.41,686.633 1434.97,686.633 1435.53,686.633 1436.09,686.633 1436.65,686.633 1437.21,686.633 1437.77,686.633 1438.33,686.633 1438.88,686.633 1439.44,686.633 1440,686.633 1440.56,686.633 1441.12,686.633 1441.68,686.633 1442.24,686.633 1442.8,686.633 1443.36,686.633 1443.92,686.633 1444.48,686.633 1445.04,686.633 1445.6,686.633 1446.15,686.633 1446.71,686.633 1447.27,686.633 1447.83,686.633 1448.39,686.633 1448.95,686.633 1449.51,686.633 1450.07,686.633 1450.63,686.633 1451.19,686.633 1451.75,686.633 1452.31,686.633 1452.87,686.633 1453.42,686.633 1453.98,686.633 1454.54,686.633 1455.1,686.633 1455.66,686.633 1456.22,686.633 1456.78,686.633 1457.34,686.633 1457.9,686.633 1458.46,686.633 1459.02,686.633 1459.58,686.633 1460.14,686.633 1460.7,686.633 1461.25,686.633 1461.81,686.633 1462.37,686.633 1462.93,686.633 1463.49,686.633 1464.05,686.633 1464.61,686.633 1465.17,686.633 1465.73,686.633 1466.29,686.633 1466.85,686.633 1467.41,686.633 1467.97,686.633 1468.52,686.633 1469.08,686.633 1469.64,686.633 1470.2,686.633 1470.76,686.633 1471.32,686.633 1471.88,686.633 1472.44,686.633 1473,686.633 1473.56,686.633 1474.12,686.633 1474.68,686.633 1475.24,686.633 1475.79,686.633 1476.35,686.633 1476.91,686.633 1477.47,686.633 1478.03,686.633 1478.59,686.633 1479.15,686.633 1479.71,686.633 1480.27,686.633 1480.83,686.633 1481.39,686.633 1481.95,686.633 1482.51,686.633 1483.07,686.633 1483.62,686.633 1484.18,686.633 1484.74,686.633 1485.3,686.633 1485.86,686.633 1486.42,686.633 1486.98,686.633 1487.54,686.633 1488.1,686.633 1488.66,686.633 1489.22,686.633 1489.78,686.633 1490.34,686.633 1490.89,686.633 1491.45,686.633 1492.01,686.633 1492.57,686.633 1493.13,686.633 1493.69,686.633 1494.25,686.633 1494.81,686.633 1495.37,686.633 1495.93,686.633 1496.49,686.633 1497.05,686.633 1497.61,686.633 1498.16,686.633 1498.72,686.633 1499.28,686.633 1499.84,686.633 1500.4,686.633 1500.96,686.633 1501.52,686.633 1502.08,686.633 1502.64,686.633 1503.2,686.633 1503.76,686.633 1504.32,686.633 1504.88,686.633 1505.44,686.633 1505.99,686.633 1506.55,686.633 1507.11,686.633 1507.67,686.633 1508.23,686.633 1508.79,686.633 1509.35,686.633 1509.91,686.633 1510.47,686.633 1511.03,686.633 1511.59,686.633 1512.15,686.633 1512.71,686.633 1513.26,686.633 1513.82,686.633 1514.38,686.633 1514.94,686.633 1515.5,686.633 1516.06,686.633 1516.62,686.633 1517.18,686.633 1517.74,686.633 1518.3,686.633 1518.86,686.633 1519.42,686.633 1519.98,686.633 1520.53,686.633 1521.09,686.633 1521.65,686.633 1522.21,686.633 1522.77,686.633 1523.33,686.633 1523.89,686.633 1524.45,686.633 1525.01,686.633 1525.57,686.633 1526.13,686.633 1526.69,686.633 1527.25,686.633 1527.81,686.633 1528.36,686.633 1528.92,686.633 1529.48,686.633 1530.04,686.633 1530.6,686.633 1531.16,686.633 1531.72,686.633 1532.28,686.633 1532.84,686.633 1533.4,686.633 1533.96,686.633 1534.52,686.633 1535.08,686.633 1535.63,686.633 1536.19,686.633 1536.75,686.633 1537.31,686.633 1537.87,686.633 1538.43,686.633 1538.99,686.633 1539.55,686.633 1540.11,686.633 1540.67,686.633 1541.23,686.633 1541.79,686.633 1542.35,686.633 1542.9,686.633 1543.46,686.633 1544.02,686.633 1544.58,686.633 1545.14,686.633 1545.7,686.633 1546.26,686.633 1546.82,686.633 1547.38,686.633 1547.94,686.633 1548.5,686.633 1549.06,686.633 1549.62,686.633 1550.18,686.633 1550.73,686.633 1551.29,686.633 1551.85,686.633 1552.41,686.633 1552.97,686.633 1553.53,686.633 1554.09,686.633 1554.65,686.633 1555.21,686.633 1555.77,686.633 1556.33,686.633 1556.89,686.633 1557.45,686.633 1558,686.633 1558.56,686.633 1559.12,686.633 1559.68,686.633 1560.24,686.633 1560.8,686.633 1561.36,686.633 1561.92,686.633 1562.48,686.633 1563.04,686.633 1563.6,686.633 1564.16,686.633 1564.72,686.633 1565.28,686.633 1565.83,686.633 1566.39,686.633 1566.95,686.633 1567.51,686.633 1568.07,686.633 1568.63,686.633 1569.19,686.633 1569.75,686.633 1570.31,686.633 1570.87,686.633 1571.43,686.633 1571.99,686.633 1572.55,686.633 1573.1,686.633 1573.66,686.633 1574.22,686.633 1574.78,686.633 1575.34,686.633 1575.9,686.633 1576.46,686.633 1577.02,686.633 1577.58,686.633 1578.14,686.633 1578.7,686.633 1579.26,686.633 1579.82,686.633 1580.37,686.633 1580.93,686.633 1581.49,686.633 1582.05,686.633 1582.61,686.633 1583.17,686.633 1583.73,686.633 1584.29,686.633 1584.85,686.633 1585.41,686.633 1585.97,686.633 1586.53,686.633 1587.09,686.633 1587.65,686.633 1588.2,686.633 1588.76,686.633 1589.32,686.633 1589.88,686.633 1590.44,686.633 1591,686.633 1591.56,686.633 1592.12,686.633 1592.68,686.633 1593.24,686.633 1593.8,686.633 1594.36,686.633 1594.92,686.633 1595.47,686.633 1596.03,686.633 1596.59,686.633 1597.15,686.633 1597.71,686.633 1598.27,686.633 1598.83,686.633 1599.39,686.633 1599.95,686.633 1600.51,686.633 1601.07,686.633 1601.63,686.633 1602.19,686.633 1602.74,686.633 1603.3,686.633 1603.86,686.633 1604.42,686.633 1604.98,686.633 1605.54,686.633 1606.1,686.633 1606.66,686.633 1607.22,686.633 1607.78,686.633 1608.34,686.633 1608.9,686.633 1609.46,686.633 1610.02,686.633 1610.57,686.633 1611.13,686.633 1611.69,686.633 1612.25,686.633 1612.81,686.633 1613.37,686.633 1613.93,686.633 1614.49,686.633 1615.05,686.633 1615.61,686.633 1616.17,686.633 1616.73,686.633 1617.29,686.633 1617.84,686.633 1618.4,686.633 1618.96,686.633 1619.52,686.633 1620.08,686.633 1620.64,686.633 1621.2,686.633 1621.76,686.633 1622.32,686.633 1622.88,686.633 1623.44,686.633 1624,686.633 1624.56,686.633 1625.11,686.633 1625.67,686.633 1626.23,686.633 1626.79,686.633 1627.35,686.633 1627.91,686.633 1628.47,686.633 1629.03,686.633 1629.59,686.633 1630.15,686.633 1630.71,686.633 1631.27,686.633 1631.83,686.633 1632.39,686.633 1632.94,686.633 1633.5,686.633 1634.06,686.633 1634.62,686.633 1635.18,686.633 1635.74,686.633 1636.3,686.633 1636.86,686.633 1637.42,686.633 1637.98,686.633 1638.54,686.633 1639.1,686.633 1639.66,686.633 1640.21,686.633 1640.77,686.633 1641.33,686.633 1641.89,686.633 1642.45,686.633 1643.01,686.633 1643.57,686.633 1644.13,686.633 1644.69,686.633 1645.25,686.633 1645.81,686.633 1646.37,686.633 1646.93,686.633 1647.48,686.633 1648.04,686.633 1648.6,686.633 1649.16,686.633 1649.72,686.633 1650.28,686.633 1650.84,686.633 1651.4,686.633 1651.96,686.633 1652.52,686.633 1653.08,686.633 1653.64,686.633 1654.2,686.633 1654.76,686.633 1655.31,686.633 1655.87,686.633 1656.43,686.633 1656.99,686.633 1657.55,686.633 1658.11,686.633 1658.67,686.633 1659.23,686.633 1659.79,686.633 1660.35,686.633 1660.91,686.633 1661.47,686.633 1662.03,686.633 1662.58,686.633 1663.14,686.633 1663.7,686.633 1664.26,686.633 1664.82,686.633 1665.38,686.633 1665.94,686.633 1666.5,686.633 1667.06,686.633 1667.62,686.633 1668.18,686.633 1668.74,686.633 1669.3,686.633 1669.85,686.633 1670.41,686.633 1670.97,686.633 1671.53,686.633 1672.09,686.633 1672.65,686.633 1673.21,686.633 1673.77,686.633 1674.33,686.633 1674.89,686.633 1675.45,686.633 1676.01,686.633 1676.57,686.633 1677.13,686.633 1677.68,686.633 1678.24,686.633 1678.8,686.633 1679.36,686.633 1679.92,686.633 1680.48,686.633 1681.04,686.633 1681.6,686.633 1682.16,686.633 1682.72,686.633 1683.28,686.633 1683.84,686.633 1684.4,686.633 1684.95,686.633 1685.51,686.633 1686.07,686.633 1686.63,686.633 1687.19,686.633 1687.75,686.633 1688.31,686.633 1688.87,686.633 1689.43,686.633 1689.99,686.633 1690.55,686.633 1691.11,686.633 1691.67,686.633 1692.23,686.633 1692.78,686.633 1693.34,686.633 1693.9,686.633 1694.46,686.633 1695.02,686.633 1695.58,686.633 1696.14,686.633 1696.7,686.633 1697.26,686.633 1697.82,686.633 1698.38,686.633 1698.94,686.633 1699.5,686.633 1700.05,686.633 1700.61,686.633 1701.17,686.633 1701.73,686.633 1702.29,686.633 1702.85,686.633 1703.41,686.633 1703.97,686.633 1704.53,686.633 1705.09,686.633 1705.65,686.633 1706.21,686.633 1706.77,686.633 1707.32,686.633 1707.88,686.633 1708.44,686.633 1709,686.633 1709.56,686.633 1710.12,686.633 1710.68,686.633 1711.24,686.633 1711.8,686.633 1712.36,686.633 1712.92,686.633 1713.48,686.633 1714.04,686.633 1714.6,686.633 1715.15,686.633 1715.71,686.633 1716.27,686.633 1716.83,686.633 1717.39,686.633 1717.95,686.633 1718.51,686.633 1719.07,686.633 1719.63,686.633 1720.19,686.633 1720.75,686.633 1721.31,686.633 1721.87,686.633 1722.42,686.633 1722.98,686.633 1723.54,686.633 1724.1,686.633 1724.66,686.633 1725.22,686.633 1725.78,686.633 1726.34,686.633 1726.9,686.633 1727.46,686.633 1728.02,686.633 1728.58,686.633 1729.14,686.633 1729.69,686.633 1730.25,686.633 1730.81,686.633 1731.37,686.633 1731.93,686.633 1732.49,686.633 1733.05,686.633 1733.61,686.633 1734.17,686.633 1734.73,686.633 1735.29,686.633 1735.85,686.633 1736.41,686.633 1736.97,686.633 1737.52,686.633 1738.08,686.633 1738.64,686.633 1739.2,686.633 1739.76,686.633 1740.32,686.633 1740.88,686.633 1741.44,686.633 1742,686.633 1742.56,686.633 1743.12,686.633 1743.68,686.633 1744.24,686.633 1744.79,686.633 1745.35,686.633 1745.91,686.633 1746.47,686.633 1747.03,686.633 1747.59,686.633 1748.15,686.633 1748.71,686.633 1749.27,686.633 1749.83,686.633 1750.39,686.633 1750.95,686.633 1751.51,686.633 1752.06,686.633 1752.62,686.633 1753.18,686.633 1753.74,686.633 1754.3,686.633 1754.86,686.633 1755.42,686.633 1755.98,686.633 1756.54,686.633 1757.1,686.633 1757.66,686.633 1758.22,686.633 1758.78,686.633 1759.34,686.633 1759.89,686.633 1760.45,686.633 1761.01,686.633 1761.57,686.633 1762.13,686.633 1762.69,686.633 1763.25,686.633 1763.81,686.633 1764.37,686.633 1764.93,686.633 1765.49,686.633 1766.05,686.633 1766.61,686.633 1767.16,686.633 1767.72,686.633 1768.28,686.633 1768.84,686.633 1769.4,686.633 1769.96,686.633 1770.52,686.633 1771.08,686.633 1771.64,686.633 1772.2,686.633 1772.76,686.633 1773.32,686.633 1773.88,686.633 1774.43,686.633 1774.99,686.633 1775.55,686.633 1776.11,686.633 1776.67,686.633 1777.23,686.633 1777.79,686.633 1778.35,686.633 1778.91,686.633 1779.47,686.633 1780.03,686.633 1780.59,686.633 1781.15,686.633 1781.71,686.633 1782.26,686.633 1782.82,686.633 1783.38,686.633 1783.94,686.633 1784.5,686.633 1785.06,686.633 1785.62,686.633 1786.18,686.633 1786.74,686.633 1787.3,686.633 1787.86,686.633 1788.42,686.633 1788.98,686.633 1789.53,686.633 1790.09,686.633 1790.65,686.633 1791.21,686.633 1791.77,686.633 1792.33,686.633 1792.89,686.633 1793.45,686.633 1794.01,686.633 1794.57,686.633 1795.13,686.633 1795.69,686.633 1796.25,686.633 1796.8,686.633 1797.36,686.633 1797.92,686.633 1798.48,686.633 1799.04,686.633 1799.6,686.633 1800.16,686.633 1800.72,686.633 1801.28,686.633 1801.84,686.633 1802.4,686.633 1802.96,686.633 1803.52,686.633 1804.08,686.633 1804.63,686.633 1805.19,686.633 1805.75,686.633 1806.31,686.633 1806.87,686.633 1807.43,686.633 1807.99,686.633 1808.55,686.633 1809.11,686.633 1809.67,686.633 1810.23,686.633 1810.79,686.633 1811.35,686.633 1811.9,686.633 1812.46,686.633 1813.02,686.633 1813.58,686.633 1814.14,686.633 1814.7,686.633 1815.26,686.633 1815.82,686.633 1816.38,686.633 1816.94,686.633 1817.5,686.633 1818.06,686.633 1818.62,686.633 1819.18,686.633 1819.73,686.633 1820.29,686.633 1820.85,686.633 1821.41,686.633 1821.97,686.633 1822.53,686.633 1823.09,686.633 1823.65,686.633 1824.21,686.633 1824.77,686.633 1825.33,686.633 1825.89,686.633 1826.45,686.633 1827,686.633 1827.56,686.633 1828.12,686.633 1828.68,686.633 1829.24,686.633 1829.8,686.633 1830.36,686.633 1830.92,686.633 1831.48,686.633 1832.04,686.633 1832.6,686.633 1833.16,686.633 1833.72,686.633 1834.27,686.633 1834.83,686.633 1835.39,686.633 1835.95,686.633 1836.51,686.633 1837.07,686.633 1837.63,686.633 1838.19,686.633 \"/>\n<path clip-path=\"url(#clip273)\" d=\"M720.247 684.904 L720.806 684.904 L721.365 684.904 L721.924 684.904 L722.484 684.904 L723.043 684.904 L723.602 684.904 L724.161 684.904 L724.721 684.904 L725.28 684.904 L725.839 684.904 L726.398 684.904 L726.958 684.904 L727.517 684.904 L728.076 684.904 L728.635 684.904 L729.195 684.904 L729.754 684.904 L730.313 684.904 L730.872 684.904 L731.432 684.904 L731.991 684.904 L732.55 684.904 L733.109 684.904 L733.669 684.904 L734.228 684.904 L734.787 684.904 L735.346 684.904 L735.906 684.904 L736.465 684.904 L737.024 684.904 L737.583 684.904 L738.143 684.904 L738.702 684.904 L739.261 684.904 L739.82 684.904 L740.38 684.904 L740.939 684.904 L741.498 684.904 L742.057 684.904 L742.617 684.904 L743.176 684.904 L743.735 684.904 L744.294 684.904 L744.854 684.904 L745.413 684.904 L745.972 684.904 L746.531 684.904 L747.091 684.904 L747.65 684.904 L748.209 684.904 L748.768 684.904 L749.328 684.904 L749.887 684.904 L750.446 684.904 L751.005 684.904 L751.565 684.904 L752.124 684.904 L752.683 684.904 L753.242 684.904 L753.802 684.904 L754.361 684.904 L754.92 684.904 L755.479 684.904 L756.039 684.904 L756.598 684.904 L757.157 684.904 L757.716 684.904 L758.276 684.904 L758.835 684.904 L759.394 684.904 L759.953 684.904 L760.513 684.904 L761.072 684.904 L761.631 684.904 L762.19 684.904 L762.75 684.904 L763.309 684.904 L763.868 684.904 L764.427 684.904 L764.987 684.904 L765.546 684.904 L766.105 684.904 L766.664 684.904 L767.224 684.904 L767.783 684.904 L768.342 684.904 L768.901 684.904 L769.461 684.904 L770.02 684.904 L770.579 684.904 L771.138 684.904 L771.698 684.904 L772.257 684.904 L772.816 684.904 L773.375 684.904 L773.935 684.904 L774.494 684.904 L775.053 684.904 L775.612 684.904 L776.172 684.904 L776.731 684.904 L777.29 684.904 L777.849 684.904 L778.409 684.904 L778.968 684.904 L779.527 684.904 L780.086 684.904 L780.646 684.904 L781.205 684.904 L781.764 684.904 L782.323 684.904 L782.883 684.904 L783.442 684.904 L784.001 684.904 L784.56 684.904 L785.12 684.904 L785.679 684.904 L786.238 684.904 L786.797 684.904 L787.357 684.904 L787.916 684.904 L788.475 684.904 L789.034 684.904 L789.594 684.904 L790.153 684.904 L790.712 684.904 L791.271 684.904 L791.831 684.904 L792.39 684.904 L792.949 684.904 L793.508 684.904 L794.068 684.904 L794.627 684.904 L795.186 684.904 L795.745 684.904 L796.305 684.904 L796.864 684.904 L797.423 684.904 L797.982 684.904 L798.542 684.904 L799.101 684.904 L799.66 684.904 L800.219 684.904 L800.779 684.904 L801.338 684.904 L801.897 684.904 L802.456 684.904 L803.016 684.904 L803.575 684.904 L804.134 684.904 L804.693 684.904 L805.253 684.904 L805.812 684.904 L806.371 684.904 L806.931 684.904 L807.49 684.904 L808.049 684.904 L808.608 684.904 L809.168 684.904 L809.727 684.904 L810.286 684.904 L810.845 684.904 L811.405 684.904 L811.964 684.904 L812.523 684.904 L813.082 684.904 L813.642 684.904 L814.201 684.904 L814.76 684.904 L815.319 684.904 L815.879 684.904 L816.438 684.904 L816.997 684.904 L817.556 684.904 L818.116 684.904 L818.675 684.904 L819.234 684.904 L819.793 684.904 L820.353 684.904 L820.912 684.904 L821.471 684.904 L822.03 684.904 L822.59 684.904 L823.149 684.904 L823.708 684.904 L824.267 684.904 L824.827 684.904 L825.386 684.904 L825.945 684.904 L826.504 684.904 L827.064 684.904 L827.623 684.904 L828.182 684.904 L828.741 684.904 L829.301 684.904 L829.86 684.904 L830.419 684.904 L830.978 684.904 L831.538 684.904 L832.097 684.904 L832.656 684.904 L833.215 684.904 L833.775 684.904 L834.334 684.904 L834.893 684.904 L835.452 684.904 L836.012 684.904 L836.571 684.904 L837.13 684.904 L837.689 684.904 L838.249 684.904 L838.808 684.904 L839.367 684.904 L839.926 684.904 L840.486 684.904 L841.045 684.904 L841.604 684.904 L842.163 684.904 L842.723 684.904 L843.282 684.904 L843.841 684.904 L844.4 684.904 L844.96 684.904 L845.519 684.904 L846.078 684.904 L846.637 684.904 L847.197 684.904 L847.756 684.904 L848.315 684.904 L848.874 684.904 L849.434 684.904 L849.993 684.904 L850.552 684.904 L851.111 684.904 L851.671 684.904 L852.23 684.904 L852.789 684.904 L853.348 684.904 L853.908 684.904 L854.467 684.904 L855.026 684.904 L855.585 684.904 L856.145 684.904 L856.704 684.904 L857.263 684.904 L857.822 684.904 L858.382 684.904 L858.941 684.904 L859.5 684.904 L860.059 684.904 L860.619 684.904 L861.178 684.904 L861.737 684.904 L862.296 684.904 L862.856 684.904 L863.415 684.904 L863.974 684.904 L864.533 684.904 L865.093 684.904 L865.652 684.904 L866.211 684.904 L866.77 684.904 L867.33 684.904 L867.889 684.904 L868.448 684.904 L869.007 684.904 L869.567 684.904 L870.126 684.904 L870.685 684.904 L871.244 684.904 L871.804 684.904 L872.363 684.904 L872.922 684.904 L873.481 684.904 L874.041 684.904 L874.6 684.904 L875.159 684.904 L875.718 684.904 L876.278 684.904 L876.837 684.904 L877.396 684.904 L877.955 684.904 L878.515 684.904 L879.074 684.904 L879.633 684.904 L880.192 684.904 L880.752 684.904 L881.311 684.904 L881.87 684.904 L882.429 684.904 L882.989 684.904 L883.548 684.904 L884.107 684.904 L884.666 684.904 L885.226 684.904 L885.785 684.904 L886.344 684.904 L886.903 684.904 L887.463 684.904 L888.022 684.904 L888.581 684.904 L889.14 684.904 L889.7 684.904 L890.259 684.904 L890.818 684.904 L891.377 684.904 L891.937 684.904 L892.496 684.904 L893.055 684.904 L893.614 684.904 L894.174 684.904 L894.733 684.904 L895.292 684.904 L895.851 684.904 L896.411 684.904 L896.97 684.904 L897.529 684.904 L898.088 684.904 L898.648 684.904 L899.207 684.904 L899.766 684.904 L900.325 684.904 L900.885 684.904 L901.444 684.904 L902.003 684.904 L902.562 684.904 L903.122 684.904 L903.681 684.904 L904.24 684.904 L904.799 684.904 L905.359 684.904 L905.918 684.904 L906.477 684.904 L907.036 684.904 L907.596 684.904 L908.155 684.904 L908.714 684.904 L909.273 684.904 L909.833 684.904 L910.392 684.904 L910.951 684.904 L911.51 684.904 L912.07 684.904 L912.629 684.904 L913.188 684.904 L913.747 684.904 L914.307 684.904 L914.866 684.904 L915.425 684.904 L915.984 684.904 L916.544 684.904 L917.103 684.904 L917.662 684.904 L918.221 684.904 L918.781 684.904 L919.34 684.904 L919.899 684.904 L920.458 684.904 L921.018 684.904 L921.577 684.904 L922.136 684.904 L922.695 684.904 L923.255 684.904 L923.814 684.904 L924.373 684.904 L924.932 684.904 L925.492 684.904 L926.051 684.904 L926.61 684.904 L927.169 684.904 L927.729 684.904 L928.288 684.904 L928.847 684.904 L929.406 684.904 L929.966 684.904 L930.525 684.904 L931.084 684.904 L931.644 684.904 L932.203 684.904 L932.762 684.904 L933.321 684.904 L933.881 684.904 L934.44 684.904 L934.999 684.904 L935.558 684.904 L936.118 684.904 L936.677 684.904 L937.236 684.904 L937.795 684.904 L938.355 684.904 L938.914 684.904 L939.473 684.904 L940.032 684.904 L940.592 684.904 L941.151 684.904 L941.71 684.904 L942.269 684.904 L942.829 684.904 L943.388 684.904 L943.947 684.904 L944.506 684.904 L945.066 684.904 L945.625 684.904 L946.184 684.904 L946.743 684.904 L947.303 684.904 L947.862 684.904 L948.421 684.904 L948.98 684.904 L949.54 684.904 L950.099 684.904 L950.658 684.904 L951.217 684.904 L951.777 684.904 L952.336 684.904 L952.895 684.904 L953.454 684.904 L954.014 684.904 L954.573 684.904 L955.132 684.904 L955.691 684.904 L956.251 684.904 L956.81 684.904 L957.369 684.904 L957.928 684.904 L958.488 684.904 L959.047 684.904 L959.606 684.904 L960.165 684.904 L960.725 684.904 L961.284 684.904 L961.843 684.904 L962.402 684.904 L962.962 684.904 L963.521 684.904 L964.08 684.904 L964.639 684.904 L965.199 684.904 L965.758 684.904 L966.317 684.904 L966.876 684.904 L967.436 684.904 L967.995 684.904 L968.554 684.904 L969.113 684.904 L969.673 684.904 L970.232 684.904 L970.791 684.904 L971.35 684.904 L971.91 684.904 L972.469 684.904 L973.028 684.904 L973.587 684.904 L974.147 684.904 L974.706 684.904 L975.265 684.904 L975.824 684.904 L976.384 684.904 L976.943 684.904 L977.502 684.904 L978.061 684.904 L978.621 684.904 L979.18 684.904 L979.739 684.904 L980.298 684.904 L980.858 684.904 L981.417 684.904 L981.976 684.904 L982.535 684.904 L983.095 684.904 L983.654 684.904 L984.213 684.904 L984.772 684.904 L985.332 684.904 L985.891 684.904 L986.45 684.904 L987.009 684.904 L987.569 684.904 L988.128 684.904 L988.687 684.904 L989.246 684.904 L989.806 684.904 L990.365 684.904 L990.924 684.904 L991.483 684.904 L992.043 684.904 L992.602 684.904 L993.161 684.904 L993.72 684.904 L994.28 684.904 L994.839 684.904 L995.398 684.904 L995.957 684.904 L996.517 684.904 L997.076 684.904 L997.635 684.904 L998.194 684.904 L998.754 684.904 L999.313 684.904 L999.872 684.904 L1000.43 684.904 L1000.99 684.904 L1001.55 684.904 L1002.11 684.904 L1002.67 684.904 L1003.23 684.904 L1003.79 684.904 L1004.35 684.904 L1004.91 684.904 L1005.46 684.904 L1006.02 684.904 L1006.58 684.904 L1007.14 684.904 L1007.7 684.904 L1008.26 684.904 L1008.82 684.904 L1009.38 684.904 L1009.94 684.904 L1010.5 684.904 L1011.06 684.904 L1011.62 684.904 L1012.18 684.904 L1012.73 684.904 L1013.29 684.904 L1013.85 684.904 L1014.41 684.904 L1014.97 684.904 L1015.53 684.904 L1016.09 684.904 L1016.65 684.904 L1017.21 684.904 L1017.77 684.904 L1018.33 684.904 L1018.89 684.904 L1019.45 684.904 L1020.01 684.904 L1020.56 684.904 L1021.12 684.904 L1021.68 684.904 L1022.24 684.904 L1022.8 684.904 L1023.36 684.904 L1023.92 684.904 L1024.48 684.904 L1025.04 684.904 L1025.6 684.904 L1026.16 684.904 L1026.72 684.904 L1027.28 684.904 L1027.83 684.904 L1028.39 684.904 L1028.95 684.904 L1029.51 684.904 L1030.07 684.904 L1030.63 684.904 L1031.19 684.904 L1031.75 684.904 L1032.31 684.904 L1032.87 684.904 L1033.43 684.904 L1033.99 684.904 L1034.55 684.904 L1035.1 684.904 L1035.66 684.904 L1036.22 684.904 L1036.78 684.904 L1037.34 684.904 L1037.9 684.904 L1038.46 684.904 L1039.02 684.904 L1039.58 684.904 L1040.14 684.904 L1040.7 684.904 L1041.26 684.904 L1041.82 684.904 L1042.38 684.904 L1042.93 684.904 L1043.49 684.904 L1044.05 684.904 L1044.61 684.904 L1045.17 684.904 L1045.73 684.904 L1046.29 684.904 L1046.85 684.904 L1047.41 684.904 L1047.97 684.904 L1048.53 684.904 L1049.09 684.904 L1049.65 684.904 L1050.2 684.904 L1050.76 684.904 L1051.32 684.904 L1051.88 684.904 L1052.44 684.904 L1053 684.904 L1053.56 684.904 L1054.12 684.904 L1054.68 684.904 L1055.24 684.904 L1055.8 684.904 L1056.36 684.904 L1056.92 684.904 L1057.48 684.904 L1058.03 684.904 L1058.59 684.904 L1059.15 684.904 L1059.71 684.904 L1060.27 684.904 L1060.83 684.904 L1061.39 684.904 L1061.95 684.904 L1062.51 684.904 L1063.07 684.904 L1063.63 684.904 L1064.19 684.904 L1064.75 684.904 L1065.3 684.904 L1065.86 684.904 L1066.42 684.904 L1066.98 684.904 L1067.54 684.904 L1068.1 684.904 L1068.66 684.904 L1069.22 684.904 L1069.78 684.904 L1070.34 684.904 L1070.9 684.904 L1071.46 684.904 L1072.02 684.904 L1072.57 684.904 L1073.13 684.904 L1073.69 684.904 L1074.25 684.904 L1074.81 684.904 L1075.37 684.904 L1075.93 684.904 L1076.49 684.904 L1077.05 684.904 L1077.61 684.904 L1078.17 684.904 L1078.73 684.904 L1079.29 684.904 L1079.85 684.904 L1080.4 684.904 L1080.96 684.904 L1081.52 684.904 L1082.08 684.904 L1082.64 684.904 L1083.2 684.904 L1083.76 684.904 L1084.32 684.904 L1084.88 684.904 L1085.44 684.904 L1086 684.904 L1086.56 684.904 L1087.12 684.904 L1087.67 684.904 L1088.23 684.904 L1088.79 684.904 L1089.35 684.904 L1089.91 684.904 L1090.47 684.904 L1091.03 684.904 L1091.59 684.904 L1092.15 684.904 L1092.71 684.904 L1093.27 684.904 L1093.83 684.904 L1094.39 684.904 L1094.94 684.904 L1095.5 684.904 L1096.06 684.904 L1096.62 684.904 L1097.18 684.904 L1097.74 684.904 L1098.3 684.904 L1098.86 684.904 L1099.42 684.904 L1099.98 684.904 L1100.54 684.904 L1101.1 684.904 L1101.66 684.904 L1102.22 684.904 L1102.77 684.904 L1103.33 684.904 L1103.89 684.904 L1104.45 684.904 L1105.01 684.904 L1105.57 684.904 L1106.13 684.904 L1106.69 684.904 L1107.25 684.904 L1107.81 684.904 L1108.37 684.904 L1108.93 684.904 L1109.49 684.904 L1110.04 684.904 L1110.6 684.904 L1111.16 684.904 L1111.72 684.904 L1112.28 684.904 L1112.84 684.904 L1113.4 684.904 L1113.96 684.904 L1114.52 684.904 L1115.08 684.904 L1115.64 684.904 L1116.2 684.904 L1116.76 684.904 L1117.31 684.904 L1117.87 684.904 L1118.43 684.904 L1118.99 684.904 L1119.55 684.904 L1120.11 684.904 L1120.67 684.904 L1121.23 684.904 L1121.79 684.904 L1122.35 684.904 L1122.91 684.904 L1123.47 684.904 L1124.03 684.904 L1124.59 684.904 L1125.14 684.904 L1125.7 684.904 L1126.26 684.904 L1126.82 684.904 L1127.38 684.904 L1127.94 684.904 L1128.5 684.904 L1129.06 684.904 L1129.62 684.904 L1130.18 684.904 L1130.74 684.904 L1131.3 684.904 L1131.86 684.904 L1132.41 684.904 L1132.97 684.904 L1133.53 684.904 L1134.09 684.904 L1134.65 684.904 L1135.21 684.904 L1135.77 684.904 L1136.33 684.904 L1136.89 684.904 L1137.45 684.904 L1138.01 684.904 L1138.57 684.904 L1139.13 684.904 L1139.68 684.904 L1140.24 684.904 L1140.8 684.904 L1141.36 684.904 L1141.92 684.904 L1142.48 684.904 L1143.04 684.904 L1143.6 684.904 L1144.16 684.904 L1144.72 684.904 L1145.28 684.904 L1145.84 684.904 L1146.4 684.904 L1146.96 684.904 L1147.51 684.904 L1148.07 684.904 L1148.63 684.904 L1149.19 684.904 L1149.75 684.904 L1150.31 684.904 L1150.87 684.904 L1151.43 684.904 L1151.99 684.904 L1152.55 684.904 L1153.11 684.904 L1153.67 684.904 L1154.23 684.904 L1154.78 684.904 L1155.34 684.904 L1155.9 684.904 L1156.46 684.904 L1157.02 684.904 L1157.58 684.904 L1158.14 684.904 L1158.7 684.904 L1159.26 684.904 L1159.82 684.904 L1160.38 684.904 L1160.94 684.904 L1161.5 684.904 L1162.05 684.904 L1162.61 684.904 L1163.17 684.904 L1163.73 684.904 L1164.29 684.904 L1164.85 684.904 L1165.41 684.904 L1165.97 684.904 L1166.53 684.904 L1167.09 684.904 L1167.65 684.904 L1168.21 684.904 L1168.77 684.904 L1169.33 684.904 L1169.88 684.904 L1170.44 684.904 L1171 684.904 L1171.56 684.904 L1172.12 684.904 L1172.68 684.904 L1173.24 684.904 L1173.8 684.904 L1174.36 684.904 L1174.92 684.904 L1175.48 684.904 L1176.04 684.904 L1176.6 684.904 L1177.15 684.904 L1177.71 684.904 L1178.27 684.904 L1178.83 684.904 L1179.39 684.904 L1179.95 684.904 L1180.51 684.904 L1181.07 684.904 L1181.63 684.904 L1182.19 684.904 L1182.75 684.904 L1183.31 684.904 L1183.87 684.904 L1184.43 684.904 L1184.98 684.904 L1185.54 684.904 L1186.1 684.904 L1186.66 684.904 L1187.22 684.904 L1187.78 684.904 L1188.34 684.904 L1188.9 684.904 L1189.46 684.904 L1190.02 684.904 L1190.58 684.904 L1191.14 684.904 L1191.7 684.904 L1192.25 684.904 L1192.81 684.904 L1193.37 684.904 L1193.93 684.904 L1194.49 684.904 L1195.05 684.904 L1195.61 684.904 L1196.17 684.904 L1196.73 684.904 L1197.29 684.904 L1197.85 684.904 L1198.41 684.904 L1198.97 684.904 L1199.52 684.904 L1200.08 684.904 L1200.64 684.904 L1201.2 684.904 L1201.76 684.904 L1202.32 684.904 L1202.88 684.904 L1203.44 684.904 L1204 684.904 L1204.56 684.904 L1205.12 684.904 L1205.68 684.904 L1206.24 684.904 L1206.8 684.904 L1207.35 684.904 L1207.91 684.904 L1208.47 684.904 L1209.03 684.904 L1209.59 684.904 L1210.15 684.904 L1210.71 684.904 L1211.27 684.904 L1211.83 684.904 L1212.39 684.904 L1212.95 684.904 L1213.51 684.904 L1214.07 684.904 L1214.62 684.904 L1215.18 684.904 L1215.74 684.904 L1216.3 684.904 L1216.86 684.904 L1217.42 684.904 L1217.98 684.904 L1218.54 684.904 L1219.1 684.904 L1219.66 684.904 L1220.22 684.904 L1220.78 684.904 L1221.34 684.904 L1221.89 684.904 L1222.45 684.904 L1223.01 684.904 L1223.57 684.904 L1224.13 684.904 L1224.69 684.904 L1225.25 684.904 L1225.81 684.904 L1226.37 684.904 L1226.93 684.904 L1227.49 684.904 L1228.05 684.904 L1228.61 684.904 L1229.17 684.904 L1229.72 684.904 L1230.28 684.904 L1230.84 684.904 L1231.4 684.904 L1231.96 684.904 L1232.52 684.904 L1233.08 684.904 L1233.64 684.904 L1234.2 684.904 L1234.76 684.904 L1235.32 684.904 L1235.88 684.904 L1236.44 684.904 L1236.99 684.904 L1237.55 684.904 L1238.11 684.904 L1238.67 684.904 L1239.23 684.904 L1239.79 684.904 L1240.35 684.904 L1240.91 684.904 L1241.47 684.904 L1242.03 684.904 L1242.59 684.904 L1243.15 684.904 L1243.71 684.904 L1244.26 684.904 L1244.82 684.904 L1245.38 684.904 L1245.94 684.904 L1246.5 684.904 L1247.06 684.904 L1247.62 684.904 L1248.18 684.904 L1248.74 684.904 L1249.3 684.904 L1249.86 684.904 L1250.42 684.904 L1250.98 684.904 L1251.54 684.904 L1252.09 684.904 L1252.65 684.904 L1253.21 684.904 L1253.77 684.904 L1254.33 684.904 L1254.89 684.904 L1255.45 684.904 L1256.01 684.904 L1256.57 684.904 L1257.13 684.904 L1257.69 684.904 L1258.25 684.904 L1258.81 684.904 L1259.36 684.904 L1259.92 684.904 L1260.48 684.904 L1261.04 684.904 L1261.6 684.904 L1262.16 684.904 L1262.72 684.904 L1263.28 684.904 L1263.84 684.904 L1264.4 684.904 L1264.96 684.904 L1265.52 684.904 L1266.08 684.904 L1266.63 684.904 L1267.19 684.904 L1267.75 684.904 L1268.31 684.904 L1268.87 684.904 L1269.43 684.904 L1269.99 684.904 L1270.55 684.904 L1271.11 684.904 L1271.67 684.904 L1272.23 684.904 L1272.79 684.904 L1273.35 684.904 L1273.91 684.904 L1274.46 684.904 L1275.02 684.904 L1275.58 684.904 L1276.14 684.904 L1276.7 684.904 L1277.26 684.904 L1277.82 684.904 L1278.38 684.904 L1278.94 684.904 L1279.5 684.904 L1280.06 684.904 L1280.62 684.904 L1281.18 684.904 L1281.73 684.904 L1282.29 684.904 L1282.85 684.904 L1283.41 684.904 L1283.97 684.904 L1284.53 684.904 L1285.09 684.904 L1285.65 684.904 L1286.21 684.904 L1286.77 684.904 L1287.33 684.904 L1287.89 684.904 L1288.45 684.904 L1289 684.904 L1289.56 684.904 L1290.12 684.904 L1290.68 684.904 L1291.24 684.904 L1291.8 684.904 L1292.36 684.904 L1292.92 684.904 L1293.48 684.904 L1294.04 684.904 L1294.6 684.904 L1295.16 684.904 L1295.72 684.904 L1296.28 684.904 L1296.83 684.904 L1297.39 684.904 L1297.95 684.904 L1298.51 684.904 L1299.07 684.904 L1299.63 684.904 L1300.19 684.904 L1300.75 684.904 L1301.31 684.904 L1301.87 684.904 L1302.43 684.904 L1302.99 684.904 L1303.55 684.904 L1304.1 684.904 L1304.66 684.904 L1305.22 684.904 L1305.78 684.904 L1306.34 684.904 L1306.9 684.904 L1307.46 684.904 L1308.02 684.904 L1308.58 684.904 L1309.14 684.904 L1309.7 684.904 L1310.26 684.904 L1310.82 684.904 L1311.38 684.904 L1311.93 684.904 L1312.49 684.904 L1313.05 684.904 L1313.61 684.904 L1314.17 684.904 L1314.73 684.904 L1315.29 684.904 L1315.85 684.904 L1316.41 684.904 L1316.97 684.904 L1317.53 684.904 L1318.09 684.904 L1318.65 684.904 L1319.2 684.904 L1319.76 684.904 L1320.32 684.904 L1320.88 684.904 L1321.44 684.904 L1322 684.904 L1322.56 684.904 L1323.12 684.904 L1323.68 684.904 L1324.24 684.904 L1324.8 684.904 L1325.36 684.904 L1325.92 684.904 L1326.47 684.904 L1327.03 684.904 L1327.59 684.904 L1328.15 684.904 L1328.71 684.904 L1329.27 684.904 L1329.83 684.904 L1330.39 684.904 L1330.95 684.904 L1331.51 684.904 L1332.07 684.904 L1332.63 684.904 L1333.19 684.904 L1333.75 684.904 L1334.3 684.904 L1334.86 684.904 L1335.42 684.904 L1335.98 684.904 L1336.54 684.904 L1337.1 684.904 L1337.66 684.904 L1338.22 684.904 L1338.78 684.904 L1339.34 684.904 L1339.9 684.904 L1340.46 684.904 L1341.02 684.904 L1341.57 684.904 L1342.13 684.904 L1342.69 684.904 L1343.25 684.904 L1343.81 684.904 L1344.37 684.904 L1344.93 684.904 L1345.49 684.904 L1346.05 684.904 L1346.61 684.904 L1347.17 684.904 L1347.73 684.904 L1348.29 684.904 L1348.84 684.904 L1349.4 684.904 L1349.96 684.904 L1350.52 684.904 L1351.08 684.904 L1351.64 684.904 L1352.2 684.904 L1352.76 684.904 L1353.32 684.904 L1353.88 684.904 L1354.44 684.904 L1355 684.904 L1355.56 684.904 L1356.12 684.904 L1356.67 684.904 L1357.23 684.904 L1357.79 684.904 L1358.35 684.904 L1358.91 684.904 L1359.47 684.904 L1360.03 684.904 L1360.59 684.904 L1361.15 684.904 L1361.71 684.904 L1362.27 684.904 L1362.83 684.904 L1363.39 684.904 L1363.94 684.904 L1364.5 684.904 L1365.06 684.904 L1365.62 684.904 L1366.18 684.904 L1366.74 684.904 L1367.3 684.904 L1367.86 684.904 L1368.42 684.904 L1368.98 684.904 L1369.54 684.904 L1370.1 684.904 L1370.66 684.904 L1371.21 684.904 L1371.77 684.904 L1372.33 684.904 L1372.89 684.904 L1373.45 684.904 L1374.01 684.904 L1374.57 684.904 L1375.13 684.904 L1375.69 684.904 L1376.25 684.904 L1376.81 684.904 L1377.37 684.904 L1377.93 684.904 L1378.49 684.904 L1379.04 684.904 L1379.6 684.904 L1380.16 684.904 L1380.72 684.904 L1381.28 684.904 L1381.84 684.904 L1382.4 684.904 L1382.96 684.904 L1383.52 684.904 L1384.08 684.904 L1384.64 684.904 L1385.2 684.904 L1385.76 684.904 L1386.31 684.904 L1386.87 684.904 L1387.43 684.904 L1387.99 684.904 L1388.55 684.904 L1389.11 684.904 L1389.67 684.904 L1390.23 684.904 L1390.79 684.904 L1391.35 684.904 L1391.91 684.904 L1392.47 684.904 L1393.03 684.904 L1393.58 684.904 L1394.14 684.904 L1394.7 684.904 L1395.26 684.904 L1395.82 684.904 L1396.38 684.904 L1396.94 684.904 L1397.5 684.904 L1398.06 684.904 L1398.62 684.904 L1399.18 684.904 L1399.74 684.904 L1400.3 684.904 L1400.86 684.904 L1401.41 684.904 L1401.97 684.904 L1402.53 684.904 L1403.09 684.904 L1403.65 684.904 L1404.21 684.904 L1404.77 684.904 L1405.33 684.904 L1405.89 684.904 L1406.45 684.904 L1407.01 684.904 L1407.57 684.904 L1408.13 684.904 L1408.68 684.904 L1409.24 684.904 L1409.8 684.904 L1410.36 684.904 L1410.92 684.904 L1411.48 684.904 L1412.04 684.904 L1412.6 684.904 L1413.16 684.904 L1413.72 684.904 L1414.28 684.904 L1414.84 684.904 L1415.4 684.904 L1415.95 684.904 L1416.51 684.904 L1417.07 684.904 L1417.63 684.904 L1418.19 684.904 L1418.75 684.904 L1419.31 684.904 L1419.87 684.904 L1420.43 684.904 L1420.99 684.904 L1421.55 684.904 L1422.11 684.904 L1422.67 684.904 L1423.23 684.904 L1423.78 684.904 L1424.34 684.904 L1424.9 684.904 L1425.46 684.904 L1426.02 684.904 L1426.58 684.904 L1427.14 684.904 L1427.7 684.904 L1428.26 684.904 L1428.82 684.904 L1429.38 684.904 L1429.94 684.904 L1430.5 684.904 L1431.05 684.904 L1431.61 684.904 L1432.17 684.904 L1432.73 684.904 L1433.29 684.904 L1433.85 684.904 L1434.41 684.904 L1434.97 684.904 L1435.53 684.904 L1436.09 684.904 L1436.65 684.904 L1437.21 684.904 L1437.77 684.904 L1438.33 684.904 L1438.88 684.904 L1439.44 684.904 L1440 684.904 L1440.56 684.904 L1441.12 684.904 L1441.68 684.904 L1442.24 684.904 L1442.8 684.904 L1443.36 684.904 L1443.92 684.904 L1444.48 684.904 L1445.04 684.904 L1445.6 684.904 L1446.15 684.904 L1446.71 684.904 L1447.27 684.904 L1447.83 684.904 L1448.39 684.904 L1448.95 684.904 L1449.51 684.904 L1450.07 684.904 L1450.63 684.904 L1451.19 684.904 L1451.75 684.904 L1452.31 684.904 L1452.87 684.904 L1453.42 684.904 L1453.98 684.904 L1454.54 684.904 L1455.1 684.904 L1455.66 684.904 L1456.22 684.904 L1456.78 684.904 L1457.34 684.904 L1457.9 684.904 L1458.46 684.904 L1459.02 684.904 L1459.58 684.904 L1460.14 684.904 L1460.7 684.904 L1461.25 684.904 L1461.81 684.904 L1462.37 684.904 L1462.93 684.904 L1463.49 684.904 L1464.05 684.904 L1464.61 684.904 L1465.17 684.904 L1465.73 684.904 L1466.29 684.904 L1466.85 684.904 L1467.41 684.904 L1467.97 684.904 L1468.52 684.904 L1469.08 684.904 L1469.64 684.904 L1470.2 684.904 L1470.76 684.904 L1471.32 684.904 L1471.88 684.904 L1472.44 684.904 L1473 684.904 L1473.56 684.904 L1474.12 684.904 L1474.68 684.904 L1475.24 684.904 L1475.79 684.904 L1476.35 684.904 L1476.91 684.904 L1477.47 684.904 L1478.03 684.904 L1478.59 684.904 L1479.15 684.904 L1479.71 684.904 L1480.27 684.904 L1480.83 684.904 L1481.39 684.904 L1481.95 684.904 L1482.51 684.904 L1483.07 684.904 L1483.62 684.904 L1484.18 684.904 L1484.74 684.904 L1485.3 684.904 L1485.86 684.904 L1486.42 684.904 L1486.98 684.904 L1487.54 684.904 L1488.1 684.904 L1488.66 684.904 L1489.22 684.904 L1489.78 684.904 L1490.34 684.904 L1490.89 684.904 L1491.45 684.904 L1492.01 684.904 L1492.57 684.904 L1493.13 684.904 L1493.69 684.904 L1494.25 684.904 L1494.81 684.904 L1495.37 684.904 L1495.93 684.904 L1496.49 684.904 L1497.05 684.904 L1497.61 684.904 L1498.16 684.904 L1498.72 684.904 L1499.28 684.904 L1499.84 684.904 L1500.4 684.904 L1500.96 684.904 L1501.52 684.904 L1502.08 684.904 L1502.64 684.904 L1503.2 684.904 L1503.76 684.904 L1504.32 684.904 L1504.88 684.904 L1505.44 684.904 L1505.99 684.904 L1506.55 684.904 L1507.11 684.904 L1507.67 684.904 L1508.23 684.904 L1508.79 684.904 L1509.35 684.904 L1509.91 684.904 L1510.47 684.904 L1511.03 684.904 L1511.59 684.904 L1512.15 684.904 L1512.71 684.904 L1513.26 684.904 L1513.82 684.904 L1514.38 684.904 L1514.94 684.904 L1515.5 684.904 L1516.06 684.904 L1516.62 684.904 L1517.18 684.904 L1517.74 684.904 L1518.3 684.904 L1518.86 684.904 L1519.42 684.904 L1519.98 684.904 L1520.53 684.904 L1521.09 684.904 L1521.65 684.904 L1522.21 684.904 L1522.77 684.904 L1523.33 684.904 L1523.89 684.904 L1524.45 684.904 L1525.01 684.904 L1525.57 684.904 L1526.13 684.904 L1526.69 684.904 L1527.25 684.904 L1527.81 684.904 L1528.36 684.904 L1528.92 684.904 L1529.48 684.904 L1530.04 684.904 L1530.6 684.904 L1531.16 684.904 L1531.72 684.904 L1532.28 684.904 L1532.84 684.904 L1533.4 684.904 L1533.96 684.904 L1534.52 684.904 L1535.08 684.904 L1535.63 684.904 L1536.19 684.904 L1536.75 684.904 L1537.31 684.904 L1537.87 684.904 L1538.43 684.904 L1538.99 684.904 L1539.55 684.904 L1540.11 684.904 L1540.67 684.904 L1541.23 684.904 L1541.79 684.904 L1542.35 684.904 L1542.9 684.904 L1543.46 684.904 L1544.02 684.904 L1544.58 684.904 L1545.14 684.904 L1545.7 684.904 L1546.26 684.904 L1546.82 684.904 L1547.38 684.904 L1547.94 684.904 L1548.5 684.904 L1549.06 684.904 L1549.62 684.904 L1550.18 684.904 L1550.73 684.904 L1551.29 684.904 L1551.85 684.904 L1552.41 684.904 L1552.97 684.904 L1553.53 684.904 L1554.09 684.904 L1554.65 684.904 L1555.21 684.904 L1555.77 684.904 L1556.33 684.904 L1556.89 684.904 L1557.45 684.904 L1558 684.904 L1558.56 684.904 L1559.12 684.904 L1559.68 684.904 L1560.24 684.904 L1560.8 684.904 L1561.36 684.904 L1561.92 684.904 L1562.48 684.904 L1563.04 684.904 L1563.6 684.904 L1564.16 684.904 L1564.72 684.904 L1565.28 684.904 L1565.83 684.904 L1566.39 684.904 L1566.95 684.904 L1567.51 684.904 L1568.07 684.904 L1568.63 684.904 L1569.19 684.904 L1569.75 684.904 L1570.31 684.904 L1570.87 684.904 L1571.43 684.904 L1571.99 684.904 L1572.55 684.904 L1573.1 684.904 L1573.66 684.904 L1574.22 684.904 L1574.78 684.904 L1575.34 684.904 L1575.9 684.904 L1576.46 684.904 L1577.02 684.904 L1577.58 684.904 L1578.14 684.904 L1578.7 684.904 L1579.26 684.904 L1579.82 684.904 L1580.37 684.904 L1580.93 684.904 L1581.49 684.904 L1582.05 684.904 L1582.61 684.904 L1583.17 684.904 L1583.73 684.904 L1584.29 684.904 L1584.85 684.904 L1585.41 684.904 L1585.97 684.904 L1586.53 684.904 L1587.09 684.904 L1587.65 684.904 L1588.2 684.904 L1588.76 684.904 L1589.32 684.904 L1589.88 684.904 L1590.44 684.904 L1591 684.904 L1591.56 684.904 L1592.12 684.904 L1592.68 684.904 L1593.24 684.904 L1593.8 684.904 L1594.36 684.904 L1594.92 684.904 L1595.47 684.904 L1596.03 684.904 L1596.59 684.904 L1597.15 684.904 L1597.71 684.904 L1598.27 684.904 L1598.83 684.904 L1599.39 684.904 L1599.95 684.904 L1600.51 684.904 L1601.07 684.904 L1601.63 684.904 L1602.19 684.904 L1602.74 684.904 L1603.3 684.904 L1603.86 684.904 L1604.42 684.904 L1604.98 684.904 L1605.54 684.904 L1606.1 684.904 L1606.66 684.904 L1607.22 684.904 L1607.78 684.904 L1608.34 684.904 L1608.9 684.904 L1609.46 684.904 L1610.02 684.904 L1610.57 684.904 L1611.13 684.904 L1611.69 684.904 L1612.25 684.904 L1612.81 684.904 L1613.37 684.904 L1613.93 684.904 L1614.49 684.904 L1615.05 684.904 L1615.61 684.904 L1616.17 684.904 L1616.73 684.904 L1617.29 684.904 L1617.84 684.904 L1618.4 684.904 L1618.96 684.904 L1619.52 684.904 L1620.08 684.904 L1620.64 684.904 L1621.2 684.904 L1621.76 684.904 L1622.32 684.904 L1622.88 684.904 L1623.44 684.904 L1624 684.904 L1624.56 684.904 L1625.11 684.904 L1625.67 684.904 L1626.23 684.904 L1626.79 684.904 L1627.35 684.904 L1627.91 684.904 L1628.47 684.904 L1629.03 684.904 L1629.59 684.904 L1630.15 684.904 L1630.71 684.904 L1631.27 684.904 L1631.83 684.904 L1632.39 684.904 L1632.94 684.904 L1633.5 684.904 L1634.06 684.904 L1634.62 684.904 L1635.18 684.904 L1635.74 684.904 L1636.3 684.904 L1636.86 684.904 L1637.42 684.904 L1637.98 684.904 L1638.54 684.904 L1639.1 684.904 L1639.66 684.904 L1640.21 684.904 L1640.77 684.904 L1641.33 684.904 L1641.89 684.904 L1642.45 684.904 L1643.01 684.904 L1643.57 684.904 L1644.13 684.904 L1644.69 684.904 L1645.25 684.904 L1645.81 684.904 L1646.37 684.904 L1646.93 684.904 L1647.48 684.904 L1648.04 684.904 L1648.6 684.904 L1649.16 684.904 L1649.72 684.904 L1650.28 684.904 L1650.84 684.904 L1651.4 684.904 L1651.96 684.904 L1652.52 684.904 L1653.08 684.904 L1653.64 684.904 L1654.2 684.904 L1654.76 684.904 L1655.31 684.904 L1655.87 684.904 L1656.43 684.904 L1656.99 684.904 L1657.55 684.904 L1658.11 684.904 L1658.67 684.904 L1659.23 684.904 L1659.79 684.904 L1660.35 684.904 L1660.91 684.904 L1661.47 684.904 L1662.03 684.904 L1662.58 684.904 L1663.14 684.904 L1663.7 684.904 L1664.26 684.904 L1664.82 684.904 L1665.38 684.904 L1665.94 684.904 L1666.5 684.904 L1667.06 684.904 L1667.62 684.904 L1668.18 684.904 L1668.74 684.904 L1669.3 684.904 L1669.85 684.904 L1670.41 684.904 L1670.97 684.904 L1671.53 684.904 L1672.09 684.904 L1672.65 684.904 L1673.21 684.904 L1673.77 684.904 L1674.33 684.904 L1674.89 684.904 L1675.45 684.904 L1676.01 684.904 L1676.57 684.904 L1677.13 684.904 L1677.68 684.904 L1678.24 684.904 L1678.8 684.904 L1679.36 684.904 L1679.92 684.904 L1680.48 684.904 L1681.04 684.904 L1681.6 684.904 L1682.16 684.904 L1682.72 684.904 L1683.28 684.904 L1683.84 684.904 L1684.4 684.904 L1684.95 684.904 L1685.51 684.904 L1686.07 684.904 L1686.63 684.904 L1687.19 684.904 L1687.75 684.904 L1688.31 684.904 L1688.87 684.904 L1689.43 684.904 L1689.99 684.904 L1690.55 684.904 L1691.11 684.904 L1691.67 684.904 L1692.23 684.904 L1692.78 684.904 L1693.34 684.904 L1693.9 684.904 L1694.46 684.904 L1695.02 684.904 L1695.58 684.904 L1696.14 684.904 L1696.7 684.904 L1697.26 684.904 L1697.82 684.904 L1698.38 684.904 L1698.94 684.904 L1699.5 684.904 L1700.05 684.904 L1700.61 684.904 L1701.17 684.904 L1701.73 684.904 L1702.29 684.904 L1702.85 684.904 L1703.41 684.904 L1703.97 684.904 L1704.53 684.904 L1705.09 684.904 L1705.65 684.904 L1706.21 684.904 L1706.77 684.904 L1707.32 684.904 L1707.88 684.904 L1708.44 684.904 L1709 684.904 L1709.56 684.904 L1710.12 684.904 L1710.68 684.904 L1711.24 684.904 L1711.8 684.904 L1712.36 684.904 L1712.92 684.904 L1713.48 684.904 L1714.04 684.904 L1714.6 684.904 L1715.15 684.904 L1715.71 684.904 L1716.27 684.904 L1716.83 684.904 L1717.39 684.904 L1717.95 684.904 L1718.51 684.904 L1719.07 684.904 L1719.63 684.904 L1720.19 684.904 L1720.75 684.904 L1721.31 684.904 L1721.87 684.904 L1722.42 684.904 L1722.98 684.904 L1723.54 684.904 L1724.1 684.904 L1724.66 684.904 L1725.22 684.904 L1725.78 684.904 L1726.34 684.904 L1726.9 684.904 L1727.46 684.904 L1728.02 684.904 L1728.58 684.904 L1729.14 684.904 L1729.69 684.904 L1730.25 684.904 L1730.81 684.904 L1731.37 684.904 L1731.93 684.904 L1732.49 684.904 L1733.05 684.904 L1733.61 684.904 L1734.17 684.904 L1734.73 684.904 L1735.29 684.904 L1735.85 684.904 L1736.41 684.904 L1736.97 684.904 L1737.52 684.904 L1738.08 684.904 L1738.64 684.904 L1739.2 684.904 L1739.76 684.904 L1740.32 684.904 L1740.88 684.904 L1741.44 684.904 L1742 684.904 L1742.56 684.904 L1743.12 684.904 L1743.68 684.904 L1744.24 684.904 L1744.79 684.904 L1745.35 684.904 L1745.91 684.904 L1746.47 684.904 L1747.03 684.904 L1747.59 684.904 L1748.15 684.904 L1748.71 684.904 L1749.27 684.904 L1749.83 684.904 L1750.39 684.904 L1750.95 684.904 L1751.51 684.904 L1752.06 684.904 L1752.62 684.904 L1753.18 684.904 L1753.74 684.904 L1754.3 684.904 L1754.86 684.904 L1755.42 684.904 L1755.98 684.904 L1756.54 684.904 L1757.1 684.904 L1757.66 684.904 L1758.22 684.904 L1758.78 684.904 L1759.34 684.904 L1759.89 684.904 L1760.45 684.904 L1761.01 684.904 L1761.57 684.904 L1762.13 684.904 L1762.69 684.904 L1763.25 684.904 L1763.81 684.904 L1764.37 684.904 L1764.93 684.904 L1765.49 684.904 L1766.05 684.904 L1766.61 684.904 L1767.16 684.904 L1767.72 684.904 L1768.28 684.904 L1768.84 684.904 L1769.4 684.904 L1769.96 684.904 L1770.52 684.904 L1771.08 684.904 L1771.64 684.904 L1772.2 684.904 L1772.76 684.904 L1773.32 684.904 L1773.88 684.904 L1774.43 684.904 L1774.99 684.904 L1775.55 684.904 L1776.11 684.904 L1776.67 684.904 L1777.23 684.904 L1777.79 684.904 L1778.35 684.904 L1778.91 684.904 L1779.47 684.904 L1780.03 684.904 L1780.59 684.904 L1781.15 684.904 L1781.71 684.904 L1782.26 684.904 L1782.82 684.904 L1783.38 684.904 L1783.94 684.904 L1784.5 684.904 L1785.06 684.904 L1785.62 684.904 L1786.18 684.904 L1786.74 684.904 L1787.3 684.904 L1787.86 684.904 L1788.42 684.904 L1788.98 684.904 L1789.53 684.904 L1790.09 684.904 L1790.65 684.904 L1791.21 684.904 L1791.77 684.904 L1792.33 684.904 L1792.89 684.904 L1793.45 684.904 L1794.01 684.904 L1794.57 684.904 L1795.13 684.904 L1795.69 684.904 L1796.25 684.904 L1796.8 684.904 L1797.36 684.904 L1797.92 684.904 L1798.48 684.904 L1799.04 684.904 L1799.6 684.904 L1800.16 684.904 L1800.72 684.904 L1801.28 684.904 L1801.84 684.904 L1802.4 684.904 L1802.96 684.904 L1803.52 684.904 L1804.08 684.904 L1804.63 684.904 L1805.19 684.904 L1805.75 684.904 L1806.31 684.904 L1806.87 684.904 L1807.43 684.904 L1807.99 684.904 L1808.55 684.904 L1809.11 684.904 L1809.67 684.904 L1810.23 684.904 L1810.79 684.904 L1811.35 684.904 L1811.9 684.904 L1812.46 684.904 L1813.02 684.904 L1813.58 684.904 L1814.14 684.904 L1814.7 684.904 L1815.26 684.904 L1815.82 684.904 L1816.38 684.904 L1816.94 684.904 L1817.5 684.904 L1818.06 684.904 L1818.62 684.904 L1819.18 684.904 L1819.73 684.904 L1820.29 684.904 L1820.85 684.904 L1821.41 684.904 L1821.97 684.904 L1822.53 684.904 L1823.09 684.904 L1823.65 684.904 L1824.21 684.904 L1824.77 684.904 L1825.33 684.904 L1825.89 684.904 L1826.45 684.904 L1827 684.904 L1827.56 684.904 L1828.12 684.904 L1828.68 684.904 L1829.24 684.904 L1829.8 684.904 L1830.36 684.904 L1830.92 684.904 L1831.48 684.904 L1832.04 684.904 L1832.6 684.904 L1833.16 684.904 L1833.72 684.904 L1834.27 684.904 L1834.83 684.904 L1835.39 684.904 L1835.95 684.904 L1836.51 684.904 L1837.07 684.904 L1837.63 684.904 L1838.19 684.904 L1838.19 682.74 L1837.63 682.74 L1837.07 682.74 L1836.51 682.74 L1835.95 682.74 L1835.39 682.74 L1834.83 682.74 L1834.27 682.74 L1833.72 682.74 L1833.16 682.74 L1832.6 682.74 L1832.04 682.74 L1831.48 682.74 L1830.92 682.74 L1830.36 682.74 L1829.8 682.74 L1829.24 682.74 L1828.68 682.74 L1828.12 682.74 L1827.56 682.74 L1827 682.74 L1826.45 682.74 L1825.89 682.74 L1825.33 682.74 L1824.77 682.74 L1824.21 682.74 L1823.65 682.74 L1823.09 682.74 L1822.53 682.74 L1821.97 682.74 L1821.41 682.74 L1820.85 682.74 L1820.29 682.74 L1819.73 682.74 L1819.18 682.74 L1818.62 682.74 L1818.06 682.74 L1817.5 682.74 L1816.94 682.74 L1816.38 682.74 L1815.82 682.74 L1815.26 682.74 L1814.7 682.74 L1814.14 682.74 L1813.58 682.74 L1813.02 682.74 L1812.46 682.74 L1811.9 682.74 L1811.35 682.74 L1810.79 682.74 L1810.23 682.74 L1809.67 682.74 L1809.11 682.74 L1808.55 682.74 L1807.99 682.74 L1807.43 682.74 L1806.87 682.74 L1806.31 682.74 L1805.75 682.74 L1805.19 682.74 L1804.63 682.74 L1804.08 682.74 L1803.52 682.74 L1802.96 682.74 L1802.4 682.74 L1801.84 682.74 L1801.28 682.74 L1800.72 682.74 L1800.16 682.74 L1799.6 682.74 L1799.04 682.74 L1798.48 682.74 L1797.92 682.74 L1797.36 682.74 L1796.8 682.74 L1796.25 682.74 L1795.69 682.74 L1795.13 682.74 L1794.57 682.74 L1794.01 682.74 L1793.45 682.74 L1792.89 682.74 L1792.33 682.74 L1791.77 682.74 L1791.21 682.74 L1790.65 682.74 L1790.09 682.74 L1789.53 682.74 L1788.98 682.74 L1788.42 682.74 L1787.86 682.74 L1787.3 682.74 L1786.74 682.74 L1786.18 682.74 L1785.62 682.74 L1785.06 682.74 L1784.5 682.74 L1783.94 682.74 L1783.38 682.74 L1782.82 682.74 L1782.26 682.74 L1781.71 682.74 L1781.15 682.74 L1780.59 682.74 L1780.03 682.74 L1779.47 682.74 L1778.91 682.74 L1778.35 682.74 L1777.79 682.74 L1777.23 682.74 L1776.67 682.74 L1776.11 682.74 L1775.55 682.74 L1774.99 682.74 L1774.43 682.74 L1773.88 682.74 L1773.32 682.74 L1772.76 682.74 L1772.2 682.74 L1771.64 682.74 L1771.08 682.74 L1770.52 682.74 L1769.96 682.74 L1769.4 682.74 L1768.84 682.74 L1768.28 682.74 L1767.72 682.74 L1767.16 682.74 L1766.61 682.74 L1766.05 682.74 L1765.49 682.74 L1764.93 682.74 L1764.37 682.74 L1763.81 682.74 L1763.25 682.74 L1762.69 682.74 L1762.13 682.74 L1761.57 682.74 L1761.01 682.74 L1760.45 682.74 L1759.89 682.74 L1759.34 682.74 L1758.78 682.74 L1758.22 682.74 L1757.66 682.74 L1757.1 682.74 L1756.54 682.74 L1755.98 682.74 L1755.42 682.74 L1754.86 682.74 L1754.3 682.74 L1753.74 682.74 L1753.18 682.74 L1752.62 682.74 L1752.06 682.74 L1751.51 682.74 L1750.95 682.74 L1750.39 682.74 L1749.83 682.74 L1749.27 682.74 L1748.71 682.74 L1748.15 682.74 L1747.59 682.74 L1747.03 682.74 L1746.47 682.74 L1745.91 682.74 L1745.35 682.74 L1744.79 682.74 L1744.24 682.74 L1743.68 682.74 L1743.12 682.74 L1742.56 682.74 L1742 682.74 L1741.44 682.74 L1740.88 682.74 L1740.32 682.74 L1739.76 682.74 L1739.2 682.74 L1738.64 682.74 L1738.08 682.74 L1737.52 682.74 L1736.97 682.74 L1736.41 682.74 L1735.85 682.74 L1735.29 682.74 L1734.73 682.74 L1734.17 682.74 L1733.61 682.74 L1733.05 682.74 L1732.49 682.74 L1731.93 682.74 L1731.37 682.74 L1730.81 682.74 L1730.25 682.74 L1729.69 682.74 L1729.14 682.74 L1728.58 682.74 L1728.02 682.74 L1727.46 682.74 L1726.9 682.74 L1726.34 682.74 L1725.78 682.74 L1725.22 682.74 L1724.66 682.74 L1724.1 682.74 L1723.54 682.74 L1722.98 682.74 L1722.42 682.74 L1721.87 682.74 L1721.31 682.74 L1720.75 682.74 L1720.19 682.74 L1719.63 682.74 L1719.07 682.74 L1718.51 682.74 L1717.95 682.74 L1717.39 682.74 L1716.83 682.74 L1716.27 682.74 L1715.71 682.74 L1715.15 682.74 L1714.6 682.74 L1714.04 682.74 L1713.48 682.74 L1712.92 682.74 L1712.36 682.74 L1711.8 682.74 L1711.24 682.74 L1710.68 682.74 L1710.12 682.74 L1709.56 682.74 L1709 682.74 L1708.44 682.74 L1707.88 682.74 L1707.32 682.74 L1706.77 682.74 L1706.21 682.74 L1705.65 682.74 L1705.09 682.74 L1704.53 682.74 L1703.97 682.74 L1703.41 682.74 L1702.85 682.74 L1702.29 682.74 L1701.73 682.74 L1701.17 682.74 L1700.61 682.74 L1700.05 682.74 L1699.5 682.74 L1698.94 682.74 L1698.38 682.74 L1697.82 682.74 L1697.26 682.74 L1696.7 682.74 L1696.14 682.74 L1695.58 682.74 L1695.02 682.74 L1694.46 682.74 L1693.9 682.74 L1693.34 682.74 L1692.78 682.74 L1692.23 682.74 L1691.67 682.74 L1691.11 682.74 L1690.55 682.74 L1689.99 682.74 L1689.43 682.74 L1688.87 682.74 L1688.31 682.74 L1687.75 682.74 L1687.19 682.74 L1686.63 682.74 L1686.07 682.74 L1685.51 682.74 L1684.95 682.74 L1684.4 682.74 L1683.84 682.74 L1683.28 682.74 L1682.72 682.74 L1682.16 682.74 L1681.6 682.74 L1681.04 682.74 L1680.48 682.74 L1679.92 682.74 L1679.36 682.74 L1678.8 682.74 L1678.24 682.74 L1677.68 682.74 L1677.13 682.74 L1676.57 682.74 L1676.01 682.74 L1675.45 682.74 L1674.89 682.74 L1674.33 682.74 L1673.77 682.74 L1673.21 682.74 L1672.65 682.74 L1672.09 682.74 L1671.53 682.74 L1670.97 682.74 L1670.41 682.74 L1669.85 682.74 L1669.3 682.74 L1668.74 682.74 L1668.18 682.74 L1667.62 682.74 L1667.06 682.74 L1666.5 682.74 L1665.94 682.74 L1665.38 682.74 L1664.82 682.74 L1664.26 682.74 L1663.7 682.74 L1663.14 682.74 L1662.58 682.74 L1662.03 682.74 L1661.47 682.74 L1660.91 682.74 L1660.35 682.74 L1659.79 682.74 L1659.23 682.74 L1658.67 682.74 L1658.11 682.74 L1657.55 682.74 L1656.99 682.74 L1656.43 682.74 L1655.87 682.74 L1655.31 682.74 L1654.76 682.74 L1654.2 682.74 L1653.64 682.74 L1653.08 682.74 L1652.52 682.74 L1651.96 682.74 L1651.4 682.74 L1650.84 682.74 L1650.28 682.74 L1649.72 682.74 L1649.16 682.74 L1648.6 682.74 L1648.04 682.74 L1647.48 682.74 L1646.93 682.74 L1646.37 682.74 L1645.81 682.74 L1645.25 682.74 L1644.69 682.74 L1644.13 682.74 L1643.57 682.74 L1643.01 682.74 L1642.45 682.74 L1641.89 682.74 L1641.33 682.74 L1640.77 682.74 L1640.21 682.74 L1639.66 682.74 L1639.1 682.74 L1638.54 682.74 L1637.98 682.74 L1637.42 682.74 L1636.86 682.74 L1636.3 682.74 L1635.74 682.74 L1635.18 682.74 L1634.62 682.74 L1634.06 682.74 L1633.5 682.74 L1632.94 682.74 L1632.39 682.74 L1631.83 682.74 L1631.27 682.74 L1630.71 682.74 L1630.15 682.74 L1629.59 682.74 L1629.03 682.74 L1628.47 682.74 L1627.91 682.74 L1627.35 682.74 L1626.79 682.74 L1626.23 682.74 L1625.67 682.74 L1625.11 682.74 L1624.56 682.74 L1624 682.74 L1623.44 682.74 L1622.88 682.74 L1622.32 682.74 L1621.76 682.74 L1621.2 682.74 L1620.64 682.74 L1620.08 682.74 L1619.52 682.74 L1618.96 682.74 L1618.4 682.74 L1617.84 682.74 L1617.29 682.74 L1616.73 682.74 L1616.17 682.74 L1615.61 682.74 L1615.05 682.74 L1614.49 682.74 L1613.93 682.74 L1613.37 682.74 L1612.81 682.74 L1612.25 682.74 L1611.69 682.74 L1611.13 682.74 L1610.57 682.74 L1610.02 682.74 L1609.46 682.74 L1608.9 682.74 L1608.34 682.74 L1607.78 682.74 L1607.22 682.74 L1606.66 682.74 L1606.1 682.74 L1605.54 682.74 L1604.98 682.74 L1604.42 682.74 L1603.86 682.74 L1603.3 682.74 L1602.74 682.74 L1602.19 682.74 L1601.63 682.74 L1601.07 682.74 L1600.51 682.74 L1599.95 682.74 L1599.39 682.74 L1598.83 682.74 L1598.27 682.74 L1597.71 682.74 L1597.15 682.74 L1596.59 682.74 L1596.03 682.74 L1595.47 682.74 L1594.92 682.74 L1594.36 682.74 L1593.8 682.74 L1593.24 682.74 L1592.68 682.74 L1592.12 682.74 L1591.56 682.74 L1591 682.74 L1590.44 682.74 L1589.88 682.74 L1589.32 682.74 L1588.76 682.74 L1588.2 682.74 L1587.65 682.74 L1587.09 682.74 L1586.53 682.74 L1585.97 682.74 L1585.41 682.74 L1584.85 682.74 L1584.29 682.74 L1583.73 682.74 L1583.17 682.74 L1582.61 682.74 L1582.05 682.74 L1581.49 682.74 L1580.93 682.74 L1580.37 682.74 L1579.82 682.74 L1579.26 682.74 L1578.7 682.74 L1578.14 682.74 L1577.58 682.74 L1577.02 682.74 L1576.46 682.74 L1575.9 682.74 L1575.34 682.74 L1574.78 682.74 L1574.22 682.74 L1573.66 682.74 L1573.1 682.74 L1572.55 682.74 L1571.99 682.74 L1571.43 682.74 L1570.87 682.74 L1570.31 682.74 L1569.75 682.74 L1569.19 682.74 L1568.63 682.74 L1568.07 682.74 L1567.51 682.74 L1566.95 682.74 L1566.39 682.74 L1565.83 682.74 L1565.28 682.74 L1564.72 682.74 L1564.16 682.74 L1563.6 682.74 L1563.04 682.74 L1562.48 682.74 L1561.92 682.74 L1561.36 682.74 L1560.8 682.74 L1560.24 682.74 L1559.68 682.74 L1559.12 682.74 L1558.56 682.74 L1558 682.74 L1557.45 682.74 L1556.89 682.74 L1556.33 682.74 L1555.77 682.74 L1555.21 682.74 L1554.65 682.74 L1554.09 682.74 L1553.53 682.74 L1552.97 682.74 L1552.41 682.74 L1551.85 682.74 L1551.29 682.74 L1550.73 682.74 L1550.18 682.74 L1549.62 682.74 L1549.06 682.74 L1548.5 682.74 L1547.94 682.74 L1547.38 682.74 L1546.82 682.74 L1546.26 682.74 L1545.7 682.74 L1545.14 682.74 L1544.58 682.74 L1544.02 682.74 L1543.46 682.74 L1542.9 682.74 L1542.35 682.74 L1541.79 682.74 L1541.23 682.74 L1540.67 682.74 L1540.11 682.74 L1539.55 682.74 L1538.99 682.74 L1538.43 682.74 L1537.87 682.74 L1537.31 682.74 L1536.75 682.74 L1536.19 682.74 L1535.63 682.74 L1535.08 682.74 L1534.52 682.74 L1533.96 682.74 L1533.4 682.74 L1532.84 682.74 L1532.28 682.74 L1531.72 682.74 L1531.16 682.74 L1530.6 682.74 L1530.04 682.74 L1529.48 682.74 L1528.92 682.74 L1528.36 682.74 L1527.81 682.74 L1527.25 682.74 L1526.69 682.74 L1526.13 682.74 L1525.57 682.74 L1525.01 682.74 L1524.45 682.74 L1523.89 682.74 L1523.33 682.74 L1522.77 682.74 L1522.21 682.74 L1521.65 682.74 L1521.09 682.74 L1520.53 682.74 L1519.98 682.74 L1519.42 682.74 L1518.86 682.74 L1518.3 682.74 L1517.74 682.74 L1517.18 682.74 L1516.62 682.74 L1516.06 682.74 L1515.5 682.74 L1514.94 682.74 L1514.38 682.74 L1513.82 682.74 L1513.26 682.74 L1512.71 682.74 L1512.15 682.74 L1511.59 682.74 L1511.03 682.74 L1510.47 682.74 L1509.91 682.74 L1509.35 682.74 L1508.79 682.74 L1508.23 682.74 L1507.67 682.74 L1507.11 682.74 L1506.55 682.74 L1505.99 682.74 L1505.44 682.74 L1504.88 682.74 L1504.32 682.74 L1503.76 682.74 L1503.2 682.74 L1502.64 682.74 L1502.08 682.74 L1501.52 682.74 L1500.96 682.74 L1500.4 682.74 L1499.84 682.74 L1499.28 682.74 L1498.72 682.74 L1498.16 682.74 L1497.61 682.74 L1497.05 682.74 L1496.49 682.74 L1495.93 682.74 L1495.37 682.74 L1494.81 682.74 L1494.25 682.74 L1493.69 682.74 L1493.13 682.74 L1492.57 682.74 L1492.01 682.74 L1491.45 682.74 L1490.89 682.74 L1490.34 682.74 L1489.78 682.74 L1489.22 682.74 L1488.66 682.74 L1488.1 682.74 L1487.54 682.74 L1486.98 682.74 L1486.42 682.74 L1485.86 682.74 L1485.3 682.74 L1484.74 682.74 L1484.18 682.74 L1483.62 682.74 L1483.07 682.74 L1482.51 682.74 L1481.95 682.74 L1481.39 682.74 L1480.83 682.74 L1480.27 682.74 L1479.71 682.74 L1479.15 682.74 L1478.59 682.74 L1478.03 682.74 L1477.47 682.74 L1476.91 682.74 L1476.35 682.74 L1475.79 682.74 L1475.24 682.74 L1474.68 682.74 L1474.12 682.74 L1473.56 682.74 L1473 682.74 L1472.44 682.74 L1471.88 682.74 L1471.32 682.74 L1470.76 682.74 L1470.2 682.74 L1469.64 682.74 L1469.08 682.74 L1468.52 682.74 L1467.97 682.74 L1467.41 682.74 L1466.85 682.74 L1466.29 682.74 L1465.73 682.74 L1465.17 682.74 L1464.61 682.74 L1464.05 682.74 L1463.49 682.74 L1462.93 682.74 L1462.37 682.74 L1461.81 682.74 L1461.25 682.74 L1460.7 682.74 L1460.14 682.74 L1459.58 682.74 L1459.02 682.74 L1458.46 682.74 L1457.9 682.74 L1457.34 682.74 L1456.78 682.74 L1456.22 682.74 L1455.66 682.74 L1455.1 682.74 L1454.54 682.74 L1453.98 682.74 L1453.42 682.74 L1452.87 682.74 L1452.31 682.74 L1451.75 682.74 L1451.19 682.74 L1450.63 682.74 L1450.07 682.74 L1449.51 682.74 L1448.95 682.74 L1448.39 682.74 L1447.83 682.74 L1447.27 682.74 L1446.71 682.74 L1446.15 682.74 L1445.6 682.74 L1445.04 682.74 L1444.48 682.74 L1443.92 682.74 L1443.36 682.74 L1442.8 682.74 L1442.24 682.74 L1441.68 682.74 L1441.12 682.74 L1440.56 682.74 L1440 682.74 L1439.44 682.74 L1438.88 682.74 L1438.33 682.74 L1437.77 682.74 L1437.21 682.74 L1436.65 682.74 L1436.09 682.74 L1435.53 682.74 L1434.97 682.74 L1434.41 682.74 L1433.85 682.74 L1433.29 682.74 L1432.73 682.74 L1432.17 682.74 L1431.61 682.74 L1431.05 682.74 L1430.5 682.74 L1429.94 682.74 L1429.38 682.74 L1428.82 682.74 L1428.26 682.74 L1427.7 682.74 L1427.14 682.74 L1426.58 682.74 L1426.02 682.74 L1425.46 682.74 L1424.9 682.74 L1424.34 682.74 L1423.78 682.74 L1423.23 682.74 L1422.67 682.74 L1422.11 682.74 L1421.55 682.74 L1420.99 682.74 L1420.43 682.74 L1419.87 682.74 L1419.31 682.74 L1418.75 682.74 L1418.19 682.74 L1417.63 682.74 L1417.07 682.74 L1416.51 682.74 L1415.95 682.74 L1415.4 682.74 L1414.84 682.74 L1414.28 682.74 L1413.72 682.74 L1413.16 682.74 L1412.6 682.74 L1412.04 682.74 L1411.48 682.74 L1410.92 682.74 L1410.36 682.74 L1409.8 682.74 L1409.24 682.74 L1408.68 682.74 L1408.13 682.74 L1407.57 682.74 L1407.01 682.74 L1406.45 682.74 L1405.89 682.74 L1405.33 682.74 L1404.77 682.74 L1404.21 682.74 L1403.65 682.74 L1403.09 682.74 L1402.53 682.74 L1401.97 682.74 L1401.41 682.74 L1400.86 682.74 L1400.3 682.74 L1399.74 682.74 L1399.18 682.74 L1398.62 682.74 L1398.06 682.74 L1397.5 682.74 L1396.94 682.74 L1396.38 682.74 L1395.82 682.74 L1395.26 682.74 L1394.7 682.74 L1394.14 682.74 L1393.58 682.74 L1393.03 682.74 L1392.47 682.74 L1391.91 682.74 L1391.35 682.74 L1390.79 682.74 L1390.23 682.74 L1389.67 682.74 L1389.11 682.74 L1388.55 682.74 L1387.99 682.74 L1387.43 682.74 L1386.87 682.74 L1386.31 682.74 L1385.76 682.74 L1385.2 682.74 L1384.64 682.74 L1384.08 682.74 L1383.52 682.74 L1382.96 682.74 L1382.4 682.74 L1381.84 682.74 L1381.28 682.74 L1380.72 682.74 L1380.16 682.74 L1379.6 682.74 L1379.04 682.74 L1378.49 682.74 L1377.93 682.74 L1377.37 682.74 L1376.81 682.74 L1376.25 682.74 L1375.69 682.74 L1375.13 682.74 L1374.57 682.74 L1374.01 682.74 L1373.45 682.74 L1372.89 682.74 L1372.33 682.74 L1371.77 682.74 L1371.21 682.74 L1370.66 682.74 L1370.1 682.74 L1369.54 682.74 L1368.98 682.74 L1368.42 682.74 L1367.86 682.74 L1367.3 682.74 L1366.74 682.74 L1366.18 682.74 L1365.62 682.74 L1365.06 682.74 L1364.5 682.74 L1363.94 682.74 L1363.39 682.74 L1362.83 682.74 L1362.27 682.74 L1361.71 682.74 L1361.15 682.74 L1360.59 682.74 L1360.03 682.74 L1359.47 682.74 L1358.91 682.74 L1358.35 682.74 L1357.79 682.74 L1357.23 682.74 L1356.67 682.74 L1356.12 682.74 L1355.56 682.74 L1355 682.74 L1354.44 682.74 L1353.88 682.74 L1353.32 682.74 L1352.76 682.74 L1352.2 682.74 L1351.64 682.74 L1351.08 682.74 L1350.52 682.74 L1349.96 682.74 L1349.4 682.74 L1348.84 682.74 L1348.29 682.74 L1347.73 682.74 L1347.17 682.74 L1346.61 682.74 L1346.05 682.74 L1345.49 682.74 L1344.93 682.74 L1344.37 682.74 L1343.81 682.74 L1343.25 682.74 L1342.69 682.74 L1342.13 682.74 L1341.57 682.74 L1341.02 682.74 L1340.46 682.74 L1339.9 682.74 L1339.34 682.74 L1338.78 682.74 L1338.22 682.74 L1337.66 682.74 L1337.1 682.74 L1336.54 682.74 L1335.98 682.74 L1335.42 682.74 L1334.86 682.74 L1334.3 682.74 L1333.75 682.74 L1333.19 682.74 L1332.63 682.74 L1332.07 682.74 L1331.51 682.74 L1330.95 682.74 L1330.39 682.74 L1329.83 682.74 L1329.27 682.74 L1328.71 682.74 L1328.15 682.74 L1327.59 682.74 L1327.03 682.74 L1326.47 682.74 L1325.92 682.74 L1325.36 682.74 L1324.8 682.74 L1324.24 682.74 L1323.68 682.74 L1323.12 682.74 L1322.56 682.74 L1322 682.74 L1321.44 682.74 L1320.88 682.74 L1320.32 682.74 L1319.76 682.74 L1319.2 682.74 L1318.65 682.74 L1318.09 682.74 L1317.53 682.74 L1316.97 682.74 L1316.41 682.74 L1315.85 682.74 L1315.29 682.74 L1314.73 682.74 L1314.17 682.74 L1313.61 682.74 L1313.05 682.74 L1312.49 682.74 L1311.93 682.74 L1311.38 682.74 L1310.82 682.74 L1310.26 682.74 L1309.7 682.74 L1309.14 682.74 L1308.58 682.74 L1308.02 682.74 L1307.46 682.74 L1306.9 682.74 L1306.34 682.74 L1305.78 682.74 L1305.22 682.74 L1304.66 682.74 L1304.1 682.74 L1303.55 682.74 L1302.99 682.74 L1302.43 682.74 L1301.87 682.74 L1301.31 682.74 L1300.75 682.74 L1300.19 682.74 L1299.63 682.74 L1299.07 682.74 L1298.51 682.74 L1297.95 682.74 L1297.39 682.74 L1296.83 682.74 L1296.28 682.74 L1295.72 682.74 L1295.16 682.74 L1294.6 682.74 L1294.04 682.74 L1293.48 682.74 L1292.92 682.74 L1292.36 682.74 L1291.8 682.74 L1291.24 682.74 L1290.68 682.74 L1290.12 682.74 L1289.56 682.74 L1289 682.74 L1288.45 682.74 L1287.89 682.74 L1287.33 682.74 L1286.77 682.74 L1286.21 682.74 L1285.65 682.74 L1285.09 682.74 L1284.53 682.74 L1283.97 682.74 L1283.41 682.74 L1282.85 682.74 L1282.29 682.74 L1281.73 682.74 L1281.18 682.74 L1280.62 682.74 L1280.06 682.74 L1279.5 682.74 L1278.94 682.74 L1278.38 682.74 L1277.82 682.74 L1277.26 682.74 L1276.7 682.74 L1276.14 682.74 L1275.58 682.74 L1275.02 682.74 L1274.46 682.74 L1273.91 682.74 L1273.35 682.74 L1272.79 682.74 L1272.23 682.74 L1271.67 682.74 L1271.11 682.74 L1270.55 682.74 L1269.99 682.74 L1269.43 682.74 L1268.87 682.74 L1268.31 682.74 L1267.75 682.74 L1267.19 682.74 L1266.63 682.74 L1266.08 682.74 L1265.52 682.74 L1264.96 682.74 L1264.4 682.74 L1263.84 682.74 L1263.28 682.74 L1262.72 682.74 L1262.16 682.74 L1261.6 682.74 L1261.04 682.74 L1260.48 682.74 L1259.92 682.74 L1259.36 682.74 L1258.81 682.74 L1258.25 682.74 L1257.69 682.74 L1257.13 682.74 L1256.57 682.74 L1256.01 682.74 L1255.45 682.74 L1254.89 682.74 L1254.33 682.74 L1253.77 682.74 L1253.21 682.74 L1252.65 682.74 L1252.09 682.74 L1251.54 682.74 L1250.98 682.74 L1250.42 682.74 L1249.86 682.74 L1249.3 682.74 L1248.74 682.74 L1248.18 682.74 L1247.62 682.74 L1247.06 682.74 L1246.5 682.74 L1245.94 682.74 L1245.38 682.74 L1244.82 682.74 L1244.26 682.74 L1243.71 682.74 L1243.15 682.74 L1242.59 682.74 L1242.03 682.74 L1241.47 682.74 L1240.91 682.74 L1240.35 682.74 L1239.79 682.74 L1239.23 682.74 L1238.67 682.74 L1238.11 682.74 L1237.55 682.74 L1236.99 682.74 L1236.44 682.74 L1235.88 682.74 L1235.32 682.74 L1234.76 682.74 L1234.2 682.74 L1233.64 682.74 L1233.08 682.74 L1232.52 682.74 L1231.96 682.74 L1231.4 682.74 L1230.84 682.74 L1230.28 682.74 L1229.72 682.74 L1229.17 682.74 L1228.61 682.74 L1228.05 682.74 L1227.49 682.74 L1226.93 682.74 L1226.37 682.74 L1225.81 682.74 L1225.25 682.74 L1224.69 682.74 L1224.13 682.74 L1223.57 682.74 L1223.01 682.74 L1222.45 682.74 L1221.89 682.74 L1221.34 682.74 L1220.78 682.74 L1220.22 682.74 L1219.66 682.74 L1219.1 682.74 L1218.54 682.74 L1217.98 682.74 L1217.42 682.74 L1216.86 682.74 L1216.3 682.74 L1215.74 682.74 L1215.18 682.74 L1214.62 682.74 L1214.07 682.74 L1213.51 682.74 L1212.95 682.74 L1212.39 682.74 L1211.83 682.74 L1211.27 682.74 L1210.71 682.74 L1210.15 682.74 L1209.59 682.74 L1209.03 682.74 L1208.47 682.74 L1207.91 682.74 L1207.35 682.74 L1206.8 682.74 L1206.24 682.74 L1205.68 682.74 L1205.12 682.74 L1204.56 682.74 L1204 682.74 L1203.44 682.74 L1202.88 682.74 L1202.32 682.74 L1201.76 682.74 L1201.2 682.74 L1200.64 682.74 L1200.08 682.74 L1199.52 682.74 L1198.97 682.74 L1198.41 682.74 L1197.85 682.74 L1197.29 682.74 L1196.73 682.74 L1196.17 682.74 L1195.61 682.74 L1195.05 682.74 L1194.49 682.74 L1193.93 682.74 L1193.37 682.74 L1192.81 682.74 L1192.25 682.74 L1191.7 682.74 L1191.14 682.74 L1190.58 682.74 L1190.02 682.74 L1189.46 682.74 L1188.9 682.74 L1188.34 682.74 L1187.78 682.74 L1187.22 682.74 L1186.66 682.74 L1186.1 682.74 L1185.54 682.74 L1184.98 682.74 L1184.43 682.74 L1183.87 682.74 L1183.31 682.74 L1182.75 682.74 L1182.19 682.74 L1181.63 682.74 L1181.07 682.74 L1180.51 682.74 L1179.95 682.74 L1179.39 682.74 L1178.83 682.74 L1178.27 682.74 L1177.71 682.74 L1177.15 682.74 L1176.6 682.74 L1176.04 682.74 L1175.48 682.74 L1174.92 682.74 L1174.36 682.74 L1173.8 682.74 L1173.24 682.74 L1172.68 682.74 L1172.12 682.74 L1171.56 682.74 L1171 682.74 L1170.44 682.74 L1169.88 682.74 L1169.33 682.74 L1168.77 682.74 L1168.21 682.74 L1167.65 682.74 L1167.09 682.74 L1166.53 682.74 L1165.97 682.74 L1165.41 682.74 L1164.85 682.74 L1164.29 682.74 L1163.73 682.74 L1163.17 682.74 L1162.61 682.74 L1162.05 682.74 L1161.5 682.74 L1160.94 682.74 L1160.38 682.74 L1159.82 682.74 L1159.26 682.74 L1158.7 682.74 L1158.14 682.74 L1157.58 682.74 L1157.02 682.74 L1156.46 682.74 L1155.9 682.74 L1155.34 682.74 L1154.78 682.74 L1154.23 682.74 L1153.67 682.74 L1153.11 682.74 L1152.55 682.74 L1151.99 682.74 L1151.43 682.74 L1150.87 682.74 L1150.31 682.74 L1149.75 682.74 L1149.19 682.74 L1148.63 682.74 L1148.07 682.74 L1147.51 682.74 L1146.96 682.74 L1146.4 682.74 L1145.84 682.74 L1145.28 682.74 L1144.72 682.74 L1144.16 682.74 L1143.6 682.74 L1143.04 682.74 L1142.48 682.74 L1141.92 682.74 L1141.36 682.74 L1140.8 682.74 L1140.24 682.74 L1139.68 682.74 L1139.13 682.74 L1138.57 682.74 L1138.01 682.74 L1137.45 682.74 L1136.89 682.74 L1136.33 682.74 L1135.77 682.74 L1135.21 682.74 L1134.65 682.74 L1134.09 682.74 L1133.53 682.74 L1132.97 682.74 L1132.41 682.74 L1131.86 682.74 L1131.3 682.74 L1130.74 682.74 L1130.18 682.74 L1129.62 682.74 L1129.06 682.74 L1128.5 682.74 L1127.94 682.74 L1127.38 682.74 L1126.82 682.74 L1126.26 682.74 L1125.7 682.74 L1125.14 682.74 L1124.59 682.74 L1124.03 682.74 L1123.47 682.74 L1122.91 682.74 L1122.35 682.74 L1121.79 682.74 L1121.23 682.74 L1120.67 682.74 L1120.11 682.74 L1119.55 682.74 L1118.99 682.74 L1118.43 682.74 L1117.87 682.74 L1117.31 682.74 L1116.76 682.74 L1116.2 682.74 L1115.64 682.74 L1115.08 682.74 L1114.52 682.74 L1113.96 682.74 L1113.4 682.74 L1112.84 682.74 L1112.28 682.74 L1111.72 682.74 L1111.16 682.74 L1110.6 682.74 L1110.04 682.74 L1109.49 682.74 L1108.93 682.74 L1108.37 682.74 L1107.81 682.74 L1107.25 682.74 L1106.69 682.74 L1106.13 682.74 L1105.57 682.74 L1105.01 682.74 L1104.45 682.74 L1103.89 682.74 L1103.33 682.74 L1102.77 682.74 L1102.22 682.74 L1101.66 682.74 L1101.1 682.74 L1100.54 682.74 L1099.98 682.74 L1099.42 682.74 L1098.86 682.74 L1098.3 682.74 L1097.74 682.74 L1097.18 682.74 L1096.62 682.74 L1096.06 682.74 L1095.5 682.74 L1094.94 682.74 L1094.39 682.74 L1093.83 682.74 L1093.27 682.74 L1092.71 682.74 L1092.15 682.74 L1091.59 682.74 L1091.03 682.74 L1090.47 682.74 L1089.91 682.74 L1089.35 682.74 L1088.79 682.74 L1088.23 682.74 L1087.67 682.74 L1087.12 682.74 L1086.56 682.74 L1086 682.74 L1085.44 682.74 L1084.88 682.74 L1084.32 682.74 L1083.76 682.74 L1083.2 682.74 L1082.64 682.74 L1082.08 682.74 L1081.52 682.74 L1080.96 682.74 L1080.4 682.74 L1079.85 682.74 L1079.29 682.74 L1078.73 682.74 L1078.17 682.74 L1077.61 682.74 L1077.05 682.74 L1076.49 682.74 L1075.93 682.74 L1075.37 682.74 L1074.81 682.74 L1074.25 682.74 L1073.69 682.74 L1073.13 682.74 L1072.57 682.74 L1072.02 682.74 L1071.46 682.74 L1070.9 682.74 L1070.34 682.74 L1069.78 682.74 L1069.22 682.74 L1068.66 682.74 L1068.1 682.74 L1067.54 682.74 L1066.98 682.74 L1066.42 682.74 L1065.86 682.74 L1065.3 682.74 L1064.75 682.74 L1064.19 682.74 L1063.63 682.74 L1063.07 682.74 L1062.51 682.74 L1061.95 682.74 L1061.39 682.74 L1060.83 682.74 L1060.27 682.74 L1059.71 682.74 L1059.15 682.74 L1058.59 682.74 L1058.03 682.74 L1057.48 682.74 L1056.92 682.74 L1056.36 682.74 L1055.8 682.74 L1055.24 682.74 L1054.68 682.74 L1054.12 682.74 L1053.56 682.74 L1053 682.74 L1052.44 682.74 L1051.88 682.74 L1051.32 682.74 L1050.76 682.74 L1050.2 682.74 L1049.65 682.74 L1049.09 682.74 L1048.53 682.74 L1047.97 682.74 L1047.41 682.74 L1046.85 682.74 L1046.29 682.74 L1045.73 682.74 L1045.17 682.74 L1044.61 682.74 L1044.05 682.74 L1043.49 682.74 L1042.93 682.74 L1042.38 682.74 L1041.82 682.74 L1041.26 682.74 L1040.7 682.74 L1040.14 682.74 L1039.58 682.74 L1039.02 682.74 L1038.46 682.74 L1037.9 682.74 L1037.34 682.74 L1036.78 682.74 L1036.22 682.74 L1035.66 682.74 L1035.1 682.74 L1034.55 682.74 L1033.99 682.74 L1033.43 682.74 L1032.87 682.74 L1032.31 682.74 L1031.75 682.74 L1031.19 682.74 L1030.63 682.74 L1030.07 682.74 L1029.51 682.74 L1028.95 682.74 L1028.39 682.74 L1027.83 682.74 L1027.28 682.74 L1026.72 682.74 L1026.16 682.74 L1025.6 682.74 L1025.04 682.74 L1024.48 682.74 L1023.92 682.74 L1023.36 682.74 L1022.8 682.74 L1022.24 682.74 L1021.68 682.74 L1021.12 682.74 L1020.56 682.74 L1020.01 682.74 L1019.45 682.74 L1018.89 682.74 L1018.33 682.74 L1017.77 682.74 L1017.21 682.74 L1016.65 682.74 L1016.09 682.74 L1015.53 682.74 L1014.97 682.74 L1014.41 682.74 L1013.85 682.74 L1013.29 682.74 L1012.73 682.74 L1012.18 682.74 L1011.62 682.74 L1011.06 682.74 L1010.5 682.74 L1009.94 682.74 L1009.38 682.74 L1008.82 682.74 L1008.26 682.74 L1007.7 682.74 L1007.14 682.74 L1006.58 682.74 L1006.02 682.74 L1005.46 682.74 L1004.91 682.74 L1004.35 682.74 L1003.79 682.74 L1003.23 682.74 L1002.67 682.74 L1002.11 682.74 L1001.55 682.74 L1000.99 682.74 L1000.43 682.74 L999.872 682.74 L999.313 682.74 L998.754 682.74 L998.194 682.74 L997.635 682.74 L997.076 682.74 L996.517 682.74 L995.957 682.74 L995.398 682.74 L994.839 682.74 L994.28 682.74 L993.72 682.74 L993.161 682.74 L992.602 682.74 L992.043 682.74 L991.483 682.74 L990.924 682.74 L990.365 682.74 L989.806 682.74 L989.246 682.74 L988.687 682.74 L988.128 682.74 L987.569 682.74 L987.009 682.74 L986.45 682.74 L985.891 682.74 L985.332 682.74 L984.772 682.74 L984.213 682.74 L983.654 682.74 L983.095 682.74 L982.535 682.74 L981.976 682.74 L981.417 682.74 L980.858 682.74 L980.298 682.74 L979.739 682.74 L979.18 682.74 L978.621 682.74 L978.061 682.74 L977.502 682.74 L976.943 682.74 L976.384 682.74 L975.824 682.74 L975.265 682.74 L974.706 682.74 L974.147 682.74 L973.587 682.74 L973.028 682.74 L972.469 682.74 L971.91 682.74 L971.35 682.74 L970.791 682.74 L970.232 682.74 L969.673 682.74 L969.113 682.74 L968.554 682.74 L967.995 682.74 L967.436 682.74 L966.876 682.74 L966.317 682.74 L965.758 682.74 L965.199 682.74 L964.639 682.74 L964.08 682.74 L963.521 682.74 L962.962 682.74 L962.402 682.74 L961.843 682.74 L961.284 682.74 L960.725 682.74 L960.165 682.74 L959.606 682.74 L959.047 682.74 L958.488 682.74 L957.928 682.74 L957.369 682.74 L956.81 682.74 L956.251 682.74 L955.691 682.74 L955.132 682.74 L954.573 682.74 L954.014 682.74 L953.454 682.74 L952.895 682.74 L952.336 682.74 L951.777 682.74 L951.217 682.74 L950.658 682.74 L950.099 682.74 L949.54 682.74 L948.98 682.74 L948.421 682.74 L947.862 682.74 L947.303 682.74 L946.743 682.74 L946.184 682.74 L945.625 682.74 L945.066 682.74 L944.506 682.74 L943.947 682.74 L943.388 682.74 L942.829 682.74 L942.269 682.74 L941.71 682.74 L941.151 682.74 L940.592 682.74 L940.032 682.74 L939.473 682.74 L938.914 682.74 L938.355 682.74 L937.795 682.74 L937.236 682.74 L936.677 682.74 L936.118 682.74 L935.558 682.74 L934.999 682.74 L934.44 682.74 L933.881 682.74 L933.321 682.74 L932.762 682.74 L932.203 682.74 L931.644 682.74 L931.084 682.74 L930.525 682.74 L929.966 682.74 L929.406 682.74 L928.847 682.74 L928.288 682.74 L927.729 682.74 L927.169 682.74 L926.61 682.74 L926.051 682.74 L925.492 682.74 L924.932 682.74 L924.373 682.74 L923.814 682.74 L923.255 682.74 L922.695 682.74 L922.136 682.74 L921.577 682.74 L921.018 682.74 L920.458 682.74 L919.899 682.74 L919.34 682.74 L918.781 682.74 L918.221 682.74 L917.662 682.74 L917.103 682.74 L916.544 682.74 L915.984 682.74 L915.425 682.74 L914.866 682.74 L914.307 682.74 L913.747 682.74 L913.188 682.74 L912.629 682.74 L912.07 682.74 L911.51 682.74 L910.951 682.74 L910.392 682.74 L909.833 682.74 L909.273 682.74 L908.714 682.74 L908.155 682.74 L907.596 682.74 L907.036 682.74 L906.477 682.74 L905.918 682.74 L905.359 682.74 L904.799 682.74 L904.24 682.74 L903.681 682.74 L903.122 682.74 L902.562 682.74 L902.003 682.74 L901.444 682.74 L900.885 682.74 L900.325 682.74 L899.766 682.74 L899.207 682.74 L898.648 682.74 L898.088 682.74 L897.529 682.74 L896.97 682.74 L896.411 682.74 L895.851 682.74 L895.292 682.74 L894.733 682.74 L894.174 682.74 L893.614 682.74 L893.055 682.74 L892.496 682.74 L891.937 682.74 L891.377 682.74 L890.818 682.74 L890.259 682.74 L889.7 682.74 L889.14 682.74 L888.581 682.74 L888.022 682.74 L887.463 682.74 L886.903 682.74 L886.344 682.74 L885.785 682.74 L885.226 682.74 L884.666 682.74 L884.107 682.74 L883.548 682.74 L882.989 682.74 L882.429 682.74 L881.87 682.74 L881.311 682.74 L880.752 682.74 L880.192 682.74 L879.633 682.74 L879.074 682.74 L878.515 682.74 L877.955 682.74 L877.396 682.74 L876.837 682.74 L876.278 682.74 L875.718 682.74 L875.159 682.74 L874.6 682.74 L874.041 682.74 L873.481 682.74 L872.922 682.74 L872.363 682.74 L871.804 682.74 L871.244 682.74 L870.685 682.74 L870.126 682.74 L869.567 682.74 L869.007 682.74 L868.448 682.74 L867.889 682.74 L867.33 682.74 L866.77 682.74 L866.211 682.74 L865.652 682.74 L865.093 682.74 L864.533 682.74 L863.974 682.74 L863.415 682.74 L862.856 682.74 L862.296 682.74 L861.737 682.74 L861.178 682.74 L860.619 682.74 L860.059 682.74 L859.5 682.74 L858.941 682.74 L858.382 682.74 L857.822 682.74 L857.263 682.74 L856.704 682.74 L856.145 682.74 L855.585 682.74 L855.026 682.74 L854.467 682.74 L853.908 682.74 L853.348 682.74 L852.789 682.74 L852.23 682.74 L851.671 682.74 L851.111 682.74 L850.552 682.74 L849.993 682.74 L849.434 682.74 L848.874 682.74 L848.315 682.74 L847.756 682.74 L847.197 682.74 L846.637 682.74 L846.078 682.74 L845.519 682.74 L844.96 682.74 L844.4 682.74 L843.841 682.74 L843.282 682.74 L842.723 682.74 L842.163 682.74 L841.604 682.74 L841.045 682.74 L840.486 682.74 L839.926 682.74 L839.367 682.74 L838.808 682.74 L838.249 682.74 L837.689 682.74 L837.13 682.74 L836.571 682.74 L836.012 682.74 L835.452 682.74 L834.893 682.74 L834.334 682.74 L833.775 682.74 L833.215 682.74 L832.656 682.74 L832.097 682.74 L831.538 682.74 L830.978 682.74 L830.419 682.74 L829.86 682.74 L829.301 682.74 L828.741 682.74 L828.182 682.74 L827.623 682.74 L827.064 682.74 L826.504 682.74 L825.945 682.74 L825.386 682.74 L824.827 682.74 L824.267 682.74 L823.708 682.74 L823.149 682.74 L822.59 682.74 L822.03 682.74 L821.471 682.74 L820.912 682.74 L820.353 682.74 L819.793 682.74 L819.234 682.74 L818.675 682.74 L818.116 682.74 L817.556 682.74 L816.997 682.74 L816.438 682.74 L815.879 682.74 L815.319 682.74 L814.76 682.74 L814.201 682.74 L813.642 682.74 L813.082 682.74 L812.523 682.74 L811.964 682.74 L811.405 682.74 L810.845 682.74 L810.286 682.74 L809.727 682.74 L809.168 682.74 L808.608 682.74 L808.049 682.74 L807.49 682.74 L806.931 682.74 L806.371 682.74 L805.812 682.74 L805.253 682.74 L804.693 682.74 L804.134 682.74 L803.575 682.74 L803.016 682.74 L802.456 682.74 L801.897 682.74 L801.338 682.74 L800.779 682.74 L800.219 682.74 L799.66 682.74 L799.101 682.74 L798.542 682.74 L797.982 682.74 L797.423 682.74 L796.864 682.74 L796.305 682.74 L795.745 682.74 L795.186 682.74 L794.627 682.74 L794.068 682.74 L793.508 682.74 L792.949 682.74 L792.39 682.74 L791.831 682.74 L791.271 682.74 L790.712 682.74 L790.153 682.74 L789.594 682.74 L789.034 682.74 L788.475 682.74 L787.916 682.74 L787.357 682.74 L786.797 682.74 L786.238 682.74 L785.679 682.74 L785.12 682.74 L784.56 682.74 L784.001 682.74 L783.442 682.74 L782.883 682.74 L782.323 682.74 L781.764 682.74 L781.205 682.74 L780.646 682.74 L780.086 682.74 L779.527 682.74 L778.968 682.74 L778.409 682.74 L777.849 682.74 L777.29 682.74 L776.731 682.74 L776.172 682.74 L775.612 682.74 L775.053 682.74 L774.494 682.74 L773.935 682.74 L773.375 682.74 L772.816 682.74 L772.257 682.74 L771.698 682.74 L771.138 682.74 L770.579 682.74 L770.02 682.74 L769.461 682.74 L768.901 682.74 L768.342 682.74 L767.783 682.74 L767.224 682.74 L766.664 682.74 L766.105 682.74 L765.546 682.74 L764.987 682.74 L764.427 682.74 L763.868 682.74 L763.309 682.74 L762.75 682.74 L762.19 682.74 L761.631 682.74 L761.072 682.74 L760.513 682.74 L759.953 682.74 L759.394 682.74 L758.835 682.74 L758.276 682.74 L757.716 682.74 L757.157 682.74 L756.598 682.74 L756.039 682.74 L755.479 682.74 L754.92 682.74 L754.361 682.74 L753.802 682.74 L753.242 682.74 L752.683 682.74 L752.124 682.74 L751.565 682.74 L751.005 682.74 L750.446 682.74 L749.887 682.74 L749.328 682.74 L748.768 682.74 L748.209 682.74 L747.65 682.74 L747.091 682.74 L746.531 682.74 L745.972 682.74 L745.413 682.74 L744.854 682.74 L744.294 682.74 L743.735 682.74 L743.176 682.74 L742.617 682.74 L742.057 682.74 L741.498 682.74 L740.939 682.74 L740.38 682.74 L739.82 682.74 L739.261 682.74 L738.702 682.74 L738.143 682.74 L737.583 682.74 L737.024 682.74 L736.465 682.74 L735.906 682.74 L735.346 682.74 L734.787 682.74 L734.228 682.74 L733.669 682.74 L733.109 682.74 L732.55 682.74 L731.991 682.74 L731.432 682.74 L730.872 682.74 L730.313 682.74 L729.754 682.74 L729.195 682.74 L728.635 682.74 L728.076 682.74 L727.517 682.74 L726.958 682.74 L726.398 682.74 L725.839 682.74 L725.28 682.74 L724.721 682.74 L724.161 682.74 L723.602 682.74 L723.043 682.74 L722.484 682.74 L721.924 682.74 L721.365 682.74 L720.806 682.74 L720.247 682.74  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.792 720.806,683.792 721.365,683.792 721.924,683.792 722.484,683.792 723.043,683.792 723.602,683.792 724.161,683.792 724.721,683.792 725.28,683.792 725.839,683.792 726.398,683.792 726.958,683.792 727.517,683.792 728.076,683.792 728.635,683.792 729.195,683.792 729.754,683.792 730.313,683.792 730.872,683.792 731.432,683.792 731.991,683.792 732.55,683.792 733.109,683.792 733.669,683.792 734.228,683.792 734.787,683.792 735.346,683.792 735.906,683.792 736.465,683.792 737.024,683.792 737.583,683.792 738.143,683.792 738.702,683.792 739.261,683.792 739.82,683.792 740.38,683.792 740.939,683.792 741.498,683.792 742.057,683.792 742.617,683.792 743.176,683.792 743.735,683.792 744.294,683.792 744.854,683.792 745.413,683.792 745.972,683.792 746.531,683.792 747.091,683.792 747.65,683.792 748.209,683.792 748.768,683.792 749.328,683.792 749.887,683.792 750.446,683.792 751.005,683.792 751.565,683.792 752.124,683.792 752.683,683.792 753.242,683.792 753.802,683.792 754.361,683.792 754.92,683.792 755.479,683.792 756.039,683.792 756.598,683.792 757.157,683.792 757.716,683.792 758.276,683.792 758.835,683.792 759.394,683.792 759.953,683.792 760.513,683.792 761.072,683.792 761.631,683.792 762.19,683.792 762.75,683.792 763.309,683.792 763.868,683.792 764.427,683.792 764.987,683.792 765.546,683.792 766.105,683.792 766.664,683.792 767.224,683.792 767.783,683.792 768.342,683.792 768.901,683.792 769.461,683.792 770.02,683.792 770.579,683.792 771.138,683.792 771.698,683.792 772.257,683.792 772.816,683.792 773.375,683.792 773.935,683.792 774.494,683.792 775.053,683.792 775.612,683.792 776.172,683.792 776.731,683.792 777.29,683.792 777.849,683.792 778.409,683.792 778.968,683.792 779.527,683.792 780.086,683.792 780.646,683.792 781.205,683.792 781.764,683.792 782.323,683.792 782.883,683.792 783.442,683.792 784.001,683.792 784.56,683.792 785.12,683.792 785.679,683.792 786.238,683.792 786.797,683.792 787.357,683.792 787.916,683.792 788.475,683.792 789.034,683.792 789.594,683.792 790.153,683.792 790.712,683.792 791.271,683.792 791.831,683.792 792.39,683.792 792.949,683.792 793.508,683.792 794.068,683.792 794.627,683.792 795.186,683.792 795.745,683.792 796.305,683.792 796.864,683.792 797.423,683.792 797.982,683.792 798.542,683.792 799.101,683.792 799.66,683.792 800.219,683.792 800.779,683.792 801.338,683.792 801.897,683.792 802.456,683.792 803.016,683.792 803.575,683.792 804.134,683.792 804.693,683.792 805.253,683.792 805.812,683.792 806.371,683.792 806.931,683.792 807.49,683.792 808.049,683.792 808.608,683.792 809.168,683.792 809.727,683.792 810.286,683.792 810.845,683.792 811.405,683.792 811.964,683.792 812.523,683.792 813.082,683.792 813.642,683.792 814.201,683.792 814.76,683.792 815.319,683.792 815.879,683.792 816.438,683.792 816.997,683.792 817.556,683.792 818.116,683.792 818.675,683.792 819.234,683.792 819.793,683.792 820.353,683.792 820.912,683.792 821.471,683.792 822.03,683.792 822.59,683.792 823.149,683.792 823.708,683.792 824.267,683.792 824.827,683.792 825.386,683.792 825.945,683.792 826.504,683.792 827.064,683.792 827.623,683.792 828.182,683.792 828.741,683.792 829.301,683.792 829.86,683.792 830.419,683.792 830.978,683.792 831.538,683.792 832.097,683.792 832.656,683.792 833.215,683.792 833.775,683.792 834.334,683.792 834.893,683.792 835.452,683.792 836.012,683.792 836.571,683.792 837.13,683.792 837.689,683.792 838.249,683.792 838.808,683.792 839.367,683.792 839.926,683.792 840.486,683.792 841.045,683.792 841.604,683.792 842.163,683.792 842.723,683.792 843.282,683.792 843.841,683.792 844.4,683.792 844.96,683.792 845.519,683.792 846.078,683.792 846.637,683.792 847.197,683.792 847.756,683.792 848.315,683.792 848.874,683.792 849.434,683.792 849.993,683.792 850.552,683.792 851.111,683.792 851.671,683.792 852.23,683.792 852.789,683.792 853.348,683.792 853.908,683.792 854.467,683.792 855.026,683.792 855.585,683.792 856.145,683.792 856.704,683.792 857.263,683.792 857.822,683.792 858.382,683.792 858.941,683.792 859.5,683.792 860.059,683.792 860.619,683.792 861.178,683.792 861.737,683.792 862.296,683.792 862.856,683.792 863.415,683.792 863.974,683.792 864.533,683.792 865.093,683.792 865.652,683.792 866.211,683.792 866.77,683.792 867.33,683.792 867.889,683.792 868.448,683.792 869.007,683.792 869.567,683.792 870.126,683.792 870.685,683.792 871.244,683.792 871.804,683.792 872.363,683.792 872.922,683.792 873.481,683.792 874.041,683.792 874.6,683.792 875.159,683.792 875.718,683.792 876.278,683.792 876.837,683.792 877.396,683.792 877.955,683.792 878.515,683.792 879.074,683.792 879.633,683.792 880.192,683.792 880.752,683.792 881.311,683.792 881.87,683.792 882.429,683.792 882.989,683.792 883.548,683.792 884.107,683.792 884.666,683.792 885.226,683.792 885.785,683.792 886.344,683.792 886.903,683.792 887.463,683.792 888.022,683.792 888.581,683.792 889.14,683.792 889.7,683.792 890.259,683.792 890.818,683.792 891.377,683.792 891.937,683.792 892.496,683.792 893.055,683.792 893.614,683.792 894.174,683.792 894.733,683.792 895.292,683.792 895.851,683.792 896.411,683.792 896.97,683.792 897.529,683.792 898.088,683.792 898.648,683.792 899.207,683.792 899.766,683.792 900.325,683.792 900.885,683.792 901.444,683.792 902.003,683.792 902.562,683.792 903.122,683.792 903.681,683.792 904.24,683.792 904.799,683.792 905.359,683.792 905.918,683.792 906.477,683.792 907.036,683.792 907.596,683.792 908.155,683.792 908.714,683.792 909.273,683.792 909.833,683.792 910.392,683.792 910.951,683.792 911.51,683.792 912.07,683.792 912.629,683.792 913.188,683.792 913.747,683.792 914.307,683.792 914.866,683.792 915.425,683.792 915.984,683.792 916.544,683.792 917.103,683.792 917.662,683.792 918.221,683.792 918.781,683.792 919.34,683.792 919.899,683.792 920.458,683.792 921.018,683.792 921.577,683.792 922.136,683.792 922.695,683.792 923.255,683.792 923.814,683.792 924.373,683.792 924.932,683.792 925.492,683.792 926.051,683.792 926.61,683.792 927.169,683.792 927.729,683.792 928.288,683.792 928.847,683.792 929.406,683.792 929.966,683.792 930.525,683.792 931.084,683.792 931.644,683.792 932.203,683.792 932.762,683.792 933.321,683.792 933.881,683.792 934.44,683.792 934.999,683.792 935.558,683.792 936.118,683.792 936.677,683.792 937.236,683.792 937.795,683.792 938.355,683.792 938.914,683.792 939.473,683.792 940.032,683.792 940.592,683.792 941.151,683.792 941.71,683.792 942.269,683.792 942.829,683.792 943.388,683.792 943.947,683.792 944.506,683.792 945.066,683.792 945.625,683.792 946.184,683.792 946.743,683.792 947.303,683.792 947.862,683.792 948.421,683.792 948.98,683.792 949.54,683.792 950.099,683.792 950.658,683.792 951.217,683.792 951.777,683.792 952.336,683.792 952.895,683.792 953.454,683.792 954.014,683.792 954.573,683.792 955.132,683.792 955.691,683.792 956.251,683.792 956.81,683.792 957.369,683.792 957.928,683.792 958.488,683.792 959.047,683.792 959.606,683.792 960.165,683.792 960.725,683.792 961.284,683.792 961.843,683.792 962.402,683.792 962.962,683.792 963.521,683.792 964.08,683.792 964.639,683.792 965.199,683.792 965.758,683.792 966.317,683.792 966.876,683.792 967.436,683.792 967.995,683.792 968.554,683.792 969.113,683.792 969.673,683.792 970.232,683.792 970.791,683.792 971.35,683.792 971.91,683.792 972.469,683.792 973.028,683.792 973.587,683.792 974.147,683.792 974.706,683.792 975.265,683.792 975.824,683.792 976.384,683.792 976.943,683.792 977.502,683.792 978.061,683.792 978.621,683.792 979.18,683.792 979.739,683.792 980.298,683.792 980.858,683.792 981.417,683.792 981.976,683.792 982.535,683.792 983.095,683.792 983.654,683.792 984.213,683.792 984.772,683.792 985.332,683.792 985.891,683.792 986.45,683.792 987.009,683.792 987.569,683.792 988.128,683.792 988.687,683.792 989.246,683.792 989.806,683.792 990.365,683.792 990.924,683.792 991.483,683.792 992.043,683.792 992.602,683.792 993.161,683.792 993.72,683.792 994.28,683.792 994.839,683.792 995.398,683.792 995.957,683.792 996.517,683.792 997.076,683.792 997.635,683.792 998.194,683.792 998.754,683.792 999.313,683.792 999.872,683.792 1000.43,683.792 1000.99,683.792 1001.55,683.792 1002.11,683.792 1002.67,683.792 1003.23,683.792 1003.79,683.792 1004.35,683.792 1004.91,683.792 1005.46,683.792 1006.02,683.792 1006.58,683.792 1007.14,683.792 1007.7,683.792 1008.26,683.792 1008.82,683.792 1009.38,683.792 1009.94,683.792 1010.5,683.792 1011.06,683.792 1011.62,683.792 1012.18,683.792 1012.73,683.792 1013.29,683.792 1013.85,683.792 1014.41,683.792 1014.97,683.792 1015.53,683.792 1016.09,683.792 1016.65,683.792 1017.21,683.792 1017.77,683.792 1018.33,683.792 1018.89,683.792 1019.45,683.792 1020.01,683.792 1020.56,683.792 1021.12,683.792 1021.68,683.792 1022.24,683.792 1022.8,683.792 1023.36,683.792 1023.92,683.792 1024.48,683.792 1025.04,683.792 1025.6,683.792 1026.16,683.792 1026.72,683.792 1027.28,683.792 1027.83,683.792 1028.39,683.792 1028.95,683.792 1029.51,683.792 1030.07,683.792 1030.63,683.792 1031.19,683.792 1031.75,683.792 1032.31,683.792 1032.87,683.792 1033.43,683.792 1033.99,683.792 1034.55,683.792 1035.1,683.792 1035.66,683.792 1036.22,683.792 1036.78,683.792 1037.34,683.792 1037.9,683.792 1038.46,683.792 1039.02,683.792 1039.58,683.792 1040.14,683.792 1040.7,683.792 1041.26,683.792 1041.82,683.792 1042.38,683.792 1042.93,683.792 1043.49,683.792 1044.05,683.792 1044.61,683.792 1045.17,683.792 1045.73,683.792 1046.29,683.792 1046.85,683.792 1047.41,683.792 1047.97,683.792 1048.53,683.792 1049.09,683.792 1049.65,683.792 1050.2,683.792 1050.76,683.792 1051.32,683.792 1051.88,683.792 1052.44,683.792 1053,683.792 1053.56,683.792 1054.12,683.792 1054.68,683.792 1055.24,683.792 1055.8,683.792 1056.36,683.792 1056.92,683.792 1057.48,683.792 1058.03,683.792 1058.59,683.792 1059.15,683.792 1059.71,683.792 1060.27,683.792 1060.83,683.792 1061.39,683.792 1061.95,683.792 1062.51,683.792 1063.07,683.792 1063.63,683.792 1064.19,683.792 1064.75,683.792 1065.3,683.792 1065.86,683.792 1066.42,683.792 1066.98,683.792 1067.54,683.792 1068.1,683.792 1068.66,683.792 1069.22,683.792 1069.78,683.792 1070.34,683.792 1070.9,683.792 1071.46,683.792 1072.02,683.792 1072.57,683.792 1073.13,683.792 1073.69,683.792 1074.25,683.792 1074.81,683.792 1075.37,683.792 1075.93,683.792 1076.49,683.792 1077.05,683.792 1077.61,683.792 1078.17,683.792 1078.73,683.792 1079.29,683.792 1079.85,683.792 1080.4,683.792 1080.96,683.792 1081.52,683.792 1082.08,683.792 1082.64,683.792 1083.2,683.792 1083.76,683.792 1084.32,683.792 1084.88,683.792 1085.44,683.792 1086,683.792 1086.56,683.792 1087.12,683.792 1087.67,683.792 1088.23,683.792 1088.79,683.792 1089.35,683.792 1089.91,683.792 1090.47,683.792 1091.03,683.792 1091.59,683.792 1092.15,683.792 1092.71,683.792 1093.27,683.792 1093.83,683.792 1094.39,683.792 1094.94,683.792 1095.5,683.792 1096.06,683.792 1096.62,683.792 1097.18,683.792 1097.74,683.792 1098.3,683.792 1098.86,683.792 1099.42,683.792 1099.98,683.792 1100.54,683.792 1101.1,683.792 1101.66,683.792 1102.22,683.792 1102.77,683.792 1103.33,683.792 1103.89,683.792 1104.45,683.792 1105.01,683.792 1105.57,683.792 1106.13,683.792 1106.69,683.792 1107.25,683.792 1107.81,683.792 1108.37,683.792 1108.93,683.792 1109.49,683.792 1110.04,683.792 1110.6,683.792 1111.16,683.792 1111.72,683.792 1112.28,683.792 1112.84,683.792 1113.4,683.792 1113.96,683.792 1114.52,683.792 1115.08,683.792 1115.64,683.792 1116.2,683.792 1116.76,683.792 1117.31,683.792 1117.87,683.792 1118.43,683.792 1118.99,683.792 1119.55,683.792 1120.11,683.792 1120.67,683.792 1121.23,683.792 1121.79,683.792 1122.35,683.792 1122.91,683.792 1123.47,683.792 1124.03,683.792 1124.59,683.792 1125.14,683.792 1125.7,683.792 1126.26,683.792 1126.82,683.792 1127.38,683.792 1127.94,683.792 1128.5,683.792 1129.06,683.792 1129.62,683.792 1130.18,683.792 1130.74,683.792 1131.3,683.792 1131.86,683.792 1132.41,683.792 1132.97,683.792 1133.53,683.792 1134.09,683.792 1134.65,683.792 1135.21,683.792 1135.77,683.792 1136.33,683.792 1136.89,683.792 1137.45,683.792 1138.01,683.792 1138.57,683.792 1139.13,683.792 1139.68,683.792 1140.24,683.792 1140.8,683.792 1141.36,683.792 1141.92,683.792 1142.48,683.792 1143.04,683.792 1143.6,683.792 1144.16,683.792 1144.72,683.792 1145.28,683.792 1145.84,683.792 1146.4,683.792 1146.96,683.792 1147.51,683.792 1148.07,683.792 1148.63,683.792 1149.19,683.792 1149.75,683.792 1150.31,683.792 1150.87,683.792 1151.43,683.792 1151.99,683.792 1152.55,683.792 1153.11,683.792 1153.67,683.792 1154.23,683.792 1154.78,683.792 1155.34,683.792 1155.9,683.792 1156.46,683.792 1157.02,683.792 1157.58,683.792 1158.14,683.792 1158.7,683.792 1159.26,683.792 1159.82,683.792 1160.38,683.792 1160.94,683.792 1161.5,683.792 1162.05,683.792 1162.61,683.792 1163.17,683.792 1163.73,683.792 1164.29,683.792 1164.85,683.792 1165.41,683.792 1165.97,683.792 1166.53,683.792 1167.09,683.792 1167.65,683.792 1168.21,683.792 1168.77,683.792 1169.33,683.792 1169.88,683.792 1170.44,683.792 1171,683.792 1171.56,683.792 1172.12,683.792 1172.68,683.792 1173.24,683.792 1173.8,683.792 1174.36,683.792 1174.92,683.792 1175.48,683.792 1176.04,683.792 1176.6,683.792 1177.15,683.792 1177.71,683.792 1178.27,683.792 1178.83,683.792 1179.39,683.792 1179.95,683.792 1180.51,683.792 1181.07,683.792 1181.63,683.792 1182.19,683.792 1182.75,683.792 1183.31,683.792 1183.87,683.792 1184.43,683.792 1184.98,683.792 1185.54,683.792 1186.1,683.792 1186.66,683.792 1187.22,683.792 1187.78,683.792 1188.34,683.792 1188.9,683.792 1189.46,683.792 1190.02,683.792 1190.58,683.792 1191.14,683.792 1191.7,683.792 1192.25,683.792 1192.81,683.792 1193.37,683.792 1193.93,683.792 1194.49,683.792 1195.05,683.792 1195.61,683.792 1196.17,683.792 1196.73,683.792 1197.29,683.792 1197.85,683.792 1198.41,683.792 1198.97,683.792 1199.52,683.792 1200.08,683.792 1200.64,683.792 1201.2,683.792 1201.76,683.792 1202.32,683.792 1202.88,683.792 1203.44,683.792 1204,683.792 1204.56,683.792 1205.12,683.792 1205.68,683.792 1206.24,683.792 1206.8,683.792 1207.35,683.792 1207.91,683.792 1208.47,683.792 1209.03,683.792 1209.59,683.792 1210.15,683.792 1210.71,683.792 1211.27,683.792 1211.83,683.792 1212.39,683.792 1212.95,683.792 1213.51,683.792 1214.07,683.792 1214.62,683.792 1215.18,683.792 1215.74,683.792 1216.3,683.792 1216.86,683.792 1217.42,683.792 1217.98,683.792 1218.54,683.792 1219.1,683.792 1219.66,683.792 1220.22,683.792 1220.78,683.792 1221.34,683.792 1221.89,683.792 1222.45,683.792 1223.01,683.792 1223.57,683.792 1224.13,683.792 1224.69,683.792 1225.25,683.792 1225.81,683.792 1226.37,683.792 1226.93,683.792 1227.49,683.792 1228.05,683.792 1228.61,683.792 1229.17,683.792 1229.72,683.792 1230.28,683.792 1230.84,683.792 1231.4,683.792 1231.96,683.792 1232.52,683.792 1233.08,683.792 1233.64,683.792 1234.2,683.792 1234.76,683.792 1235.32,683.792 1235.88,683.792 1236.44,683.792 1236.99,683.792 1237.55,683.792 1238.11,683.792 1238.67,683.792 1239.23,683.792 1239.79,683.792 1240.35,683.792 1240.91,683.792 1241.47,683.792 1242.03,683.792 1242.59,683.792 1243.15,683.792 1243.71,683.792 1244.26,683.792 1244.82,683.792 1245.38,683.792 1245.94,683.792 1246.5,683.792 1247.06,683.792 1247.62,683.792 1248.18,683.792 1248.74,683.792 1249.3,683.792 1249.86,683.792 1250.42,683.792 1250.98,683.792 1251.54,683.792 1252.09,683.792 1252.65,683.792 1253.21,683.792 1253.77,683.792 1254.33,683.792 1254.89,683.792 1255.45,683.792 1256.01,683.792 1256.57,683.792 1257.13,683.792 1257.69,683.792 1258.25,683.792 1258.81,683.792 1259.36,683.792 1259.92,683.792 1260.48,683.792 1261.04,683.792 1261.6,683.792 1262.16,683.792 1262.72,683.792 1263.28,683.792 1263.84,683.792 1264.4,683.792 1264.96,683.792 1265.52,683.792 1266.08,683.792 1266.63,683.792 1267.19,683.792 1267.75,683.792 1268.31,683.792 1268.87,683.792 1269.43,683.792 1269.99,683.792 1270.55,683.792 1271.11,683.792 1271.67,683.792 1272.23,683.792 1272.79,683.792 1273.35,683.792 1273.91,683.792 1274.46,683.792 1275.02,683.792 1275.58,683.792 1276.14,683.792 1276.7,683.792 1277.26,683.792 1277.82,683.792 1278.38,683.792 1278.94,683.792 1279.5,683.792 1280.06,683.792 1280.62,683.792 1281.18,683.792 1281.73,683.792 1282.29,683.792 1282.85,683.792 1283.41,683.792 1283.97,683.792 1284.53,683.792 1285.09,683.792 1285.65,683.792 1286.21,683.792 1286.77,683.792 1287.33,683.792 1287.89,683.792 1288.45,683.792 1289,683.792 1289.56,683.792 1290.12,683.792 1290.68,683.792 1291.24,683.792 1291.8,683.792 1292.36,683.792 1292.92,683.792 1293.48,683.792 1294.04,683.792 1294.6,683.792 1295.16,683.792 1295.72,683.792 1296.28,683.792 1296.83,683.792 1297.39,683.792 1297.95,683.792 1298.51,683.792 1299.07,683.792 1299.63,683.792 1300.19,683.792 1300.75,683.792 1301.31,683.792 1301.87,683.792 1302.43,683.792 1302.99,683.792 1303.55,683.792 1304.1,683.792 1304.66,683.792 1305.22,683.792 1305.78,683.792 1306.34,683.792 1306.9,683.792 1307.46,683.792 1308.02,683.792 1308.58,683.792 1309.14,683.792 1309.7,683.792 1310.26,683.792 1310.82,683.792 1311.38,683.792 1311.93,683.792 1312.49,683.792 1313.05,683.792 1313.61,683.792 1314.17,683.792 1314.73,683.792 1315.29,683.792 1315.85,683.792 1316.41,683.792 1316.97,683.792 1317.53,683.792 1318.09,683.792 1318.65,683.792 1319.2,683.792 1319.76,683.792 1320.32,683.792 1320.88,683.792 1321.44,683.792 1322,683.792 1322.56,683.792 1323.12,683.792 1323.68,683.792 1324.24,683.792 1324.8,683.792 1325.36,683.792 1325.92,683.792 1326.47,683.792 1327.03,683.792 1327.59,683.792 1328.15,683.792 1328.71,683.792 1329.27,683.792 1329.83,683.792 1330.39,683.792 1330.95,683.792 1331.51,683.792 1332.07,683.792 1332.63,683.792 1333.19,683.792 1333.75,683.792 1334.3,683.792 1334.86,683.792 1335.42,683.792 1335.98,683.792 1336.54,683.792 1337.1,683.792 1337.66,683.792 1338.22,683.792 1338.78,683.792 1339.34,683.792 1339.9,683.792 1340.46,683.792 1341.02,683.792 1341.57,683.792 1342.13,683.792 1342.69,683.792 1343.25,683.792 1343.81,683.792 1344.37,683.792 1344.93,683.792 1345.49,683.792 1346.05,683.792 1346.61,683.792 1347.17,683.792 1347.73,683.792 1348.29,683.792 1348.84,683.792 1349.4,683.792 1349.96,683.792 1350.52,683.792 1351.08,683.792 1351.64,683.792 1352.2,683.792 1352.76,683.792 1353.32,683.792 1353.88,683.792 1354.44,683.792 1355,683.792 1355.56,683.792 1356.12,683.792 1356.67,683.792 1357.23,683.792 1357.79,683.792 1358.35,683.792 1358.91,683.792 1359.47,683.792 1360.03,683.792 1360.59,683.792 1361.15,683.792 1361.71,683.792 1362.27,683.792 1362.83,683.792 1363.39,683.792 1363.94,683.792 1364.5,683.792 1365.06,683.792 1365.62,683.792 1366.18,683.792 1366.74,683.792 1367.3,683.792 1367.86,683.792 1368.42,683.792 1368.98,683.792 1369.54,683.792 1370.1,683.792 1370.66,683.792 1371.21,683.792 1371.77,683.792 1372.33,683.792 1372.89,683.792 1373.45,683.792 1374.01,683.792 1374.57,683.792 1375.13,683.792 1375.69,683.792 1376.25,683.792 1376.81,683.792 1377.37,683.792 1377.93,683.792 1378.49,683.792 1379.04,683.792 1379.6,683.792 1380.16,683.792 1380.72,683.792 1381.28,683.792 1381.84,683.792 1382.4,683.792 1382.96,683.792 1383.52,683.792 1384.08,683.792 1384.64,683.792 1385.2,683.792 1385.76,683.792 1386.31,683.792 1386.87,683.792 1387.43,683.792 1387.99,683.792 1388.55,683.792 1389.11,683.792 1389.67,683.792 1390.23,683.792 1390.79,683.792 1391.35,683.792 1391.91,683.792 1392.47,683.792 1393.03,683.792 1393.58,683.792 1394.14,683.792 1394.7,683.792 1395.26,683.792 1395.82,683.792 1396.38,683.792 1396.94,683.792 1397.5,683.792 1398.06,683.792 1398.62,683.792 1399.18,683.792 1399.74,683.792 1400.3,683.792 1400.86,683.792 1401.41,683.792 1401.97,683.792 1402.53,683.792 1403.09,683.792 1403.65,683.792 1404.21,683.792 1404.77,683.792 1405.33,683.792 1405.89,683.792 1406.45,683.792 1407.01,683.792 1407.57,683.792 1408.13,683.792 1408.68,683.792 1409.24,683.792 1409.8,683.792 1410.36,683.792 1410.92,683.792 1411.48,683.792 1412.04,683.792 1412.6,683.792 1413.16,683.792 1413.72,683.792 1414.28,683.792 1414.84,683.792 1415.4,683.792 1415.95,683.792 1416.51,683.792 1417.07,683.792 1417.63,683.792 1418.19,683.792 1418.75,683.792 1419.31,683.792 1419.87,683.792 1420.43,683.792 1420.99,683.792 1421.55,683.792 1422.11,683.792 1422.67,683.792 1423.23,683.792 1423.78,683.792 1424.34,683.792 1424.9,683.792 1425.46,683.792 1426.02,683.792 1426.58,683.792 1427.14,683.792 1427.7,683.792 1428.26,683.792 1428.82,683.792 1429.38,683.792 1429.94,683.792 1430.5,683.792 1431.05,683.792 1431.61,683.792 1432.17,683.792 1432.73,683.792 1433.29,683.792 1433.85,683.792 1434.41,683.792 1434.97,683.792 1435.53,683.792 1436.09,683.792 1436.65,683.792 1437.21,683.792 1437.77,683.792 1438.33,683.792 1438.88,683.792 1439.44,683.792 1440,683.792 1440.56,683.792 1441.12,683.792 1441.68,683.792 1442.24,683.792 1442.8,683.792 1443.36,683.792 1443.92,683.792 1444.48,683.792 1445.04,683.792 1445.6,683.792 1446.15,683.792 1446.71,683.792 1447.27,683.792 1447.83,683.792 1448.39,683.792 1448.95,683.792 1449.51,683.792 1450.07,683.792 1450.63,683.792 1451.19,683.792 1451.75,683.792 1452.31,683.792 1452.87,683.792 1453.42,683.792 1453.98,683.792 1454.54,683.792 1455.1,683.792 1455.66,683.792 1456.22,683.792 1456.78,683.792 1457.34,683.792 1457.9,683.792 1458.46,683.792 1459.02,683.792 1459.58,683.792 1460.14,683.792 1460.7,683.792 1461.25,683.792 1461.81,683.792 1462.37,683.792 1462.93,683.792 1463.49,683.792 1464.05,683.792 1464.61,683.792 1465.17,683.792 1465.73,683.792 1466.29,683.792 1466.85,683.792 1467.41,683.792 1467.97,683.792 1468.52,683.792 1469.08,683.792 1469.64,683.792 1470.2,683.792 1470.76,683.792 1471.32,683.792 1471.88,683.792 1472.44,683.792 1473,683.792 1473.56,683.792 1474.12,683.792 1474.68,683.792 1475.24,683.792 1475.79,683.792 1476.35,683.792 1476.91,683.792 1477.47,683.792 1478.03,683.792 1478.59,683.792 1479.15,683.792 1479.71,683.792 1480.27,683.792 1480.83,683.792 1481.39,683.792 1481.95,683.792 1482.51,683.792 1483.07,683.792 1483.62,683.792 1484.18,683.792 1484.74,683.792 1485.3,683.792 1485.86,683.792 1486.42,683.792 1486.98,683.792 1487.54,683.792 1488.1,683.792 1488.66,683.792 1489.22,683.792 1489.78,683.792 1490.34,683.792 1490.89,683.792 1491.45,683.792 1492.01,683.792 1492.57,683.792 1493.13,683.792 1493.69,683.792 1494.25,683.792 1494.81,683.792 1495.37,683.792 1495.93,683.792 1496.49,683.792 1497.05,683.792 1497.61,683.792 1498.16,683.792 1498.72,683.792 1499.28,683.792 1499.84,683.792 1500.4,683.792 1500.96,683.792 1501.52,683.792 1502.08,683.792 1502.64,683.792 1503.2,683.792 1503.76,683.792 1504.32,683.792 1504.88,683.792 1505.44,683.792 1505.99,683.792 1506.55,683.792 1507.11,683.792 1507.67,683.792 1508.23,683.792 1508.79,683.792 1509.35,683.792 1509.91,683.792 1510.47,683.792 1511.03,683.792 1511.59,683.792 1512.15,683.792 1512.71,683.792 1513.26,683.792 1513.82,683.792 1514.38,683.792 1514.94,683.792 1515.5,683.792 1516.06,683.792 1516.62,683.792 1517.18,683.792 1517.74,683.792 1518.3,683.792 1518.86,683.792 1519.42,683.792 1519.98,683.792 1520.53,683.792 1521.09,683.792 1521.65,683.792 1522.21,683.792 1522.77,683.792 1523.33,683.792 1523.89,683.792 1524.45,683.792 1525.01,683.792 1525.57,683.792 1526.13,683.792 1526.69,683.792 1527.25,683.792 1527.81,683.792 1528.36,683.792 1528.92,683.792 1529.48,683.792 1530.04,683.792 1530.6,683.792 1531.16,683.792 1531.72,683.792 1532.28,683.792 1532.84,683.792 1533.4,683.792 1533.96,683.792 1534.52,683.792 1535.08,683.792 1535.63,683.792 1536.19,683.792 1536.75,683.792 1537.31,683.792 1537.87,683.792 1538.43,683.792 1538.99,683.792 1539.55,683.792 1540.11,683.792 1540.67,683.792 1541.23,683.792 1541.79,683.792 1542.35,683.792 1542.9,683.792 1543.46,683.792 1544.02,683.792 1544.58,683.792 1545.14,683.792 1545.7,683.792 1546.26,683.792 1546.82,683.792 1547.38,683.792 1547.94,683.792 1548.5,683.792 1549.06,683.792 1549.62,683.792 1550.18,683.792 1550.73,683.792 1551.29,683.792 1551.85,683.792 1552.41,683.792 1552.97,683.792 1553.53,683.792 1554.09,683.792 1554.65,683.792 1555.21,683.792 1555.77,683.792 1556.33,683.792 1556.89,683.792 1557.45,683.792 1558,683.792 1558.56,683.792 1559.12,683.792 1559.68,683.792 1560.24,683.792 1560.8,683.792 1561.36,683.792 1561.92,683.792 1562.48,683.792 1563.04,683.792 1563.6,683.792 1564.16,683.792 1564.72,683.792 1565.28,683.792 1565.83,683.792 1566.39,683.792 1566.95,683.792 1567.51,683.792 1568.07,683.792 1568.63,683.792 1569.19,683.792 1569.75,683.792 1570.31,683.792 1570.87,683.792 1571.43,683.792 1571.99,683.792 1572.55,683.792 1573.1,683.792 1573.66,683.792 1574.22,683.792 1574.78,683.792 1575.34,683.792 1575.9,683.792 1576.46,683.792 1577.02,683.792 1577.58,683.792 1578.14,683.792 1578.7,683.792 1579.26,683.792 1579.82,683.792 1580.37,683.792 1580.93,683.792 1581.49,683.792 1582.05,683.792 1582.61,683.792 1583.17,683.792 1583.73,683.792 1584.29,683.792 1584.85,683.792 1585.41,683.792 1585.97,683.792 1586.53,683.792 1587.09,683.792 1587.65,683.792 1588.2,683.792 1588.76,683.792 1589.32,683.792 1589.88,683.792 1590.44,683.792 1591,683.792 1591.56,683.792 1592.12,683.792 1592.68,683.792 1593.24,683.792 1593.8,683.792 1594.36,683.792 1594.92,683.792 1595.47,683.792 1596.03,683.792 1596.59,683.792 1597.15,683.792 1597.71,683.792 1598.27,683.792 1598.83,683.792 1599.39,683.792 1599.95,683.792 1600.51,683.792 1601.07,683.792 1601.63,683.792 1602.19,683.792 1602.74,683.792 1603.3,683.792 1603.86,683.792 1604.42,683.792 1604.98,683.792 1605.54,683.792 1606.1,683.792 1606.66,683.792 1607.22,683.792 1607.78,683.792 1608.34,683.792 1608.9,683.792 1609.46,683.792 1610.02,683.792 1610.57,683.792 1611.13,683.792 1611.69,683.792 1612.25,683.792 1612.81,683.792 1613.37,683.792 1613.93,683.792 1614.49,683.792 1615.05,683.792 1615.61,683.792 1616.17,683.792 1616.73,683.792 1617.29,683.792 1617.84,683.792 1618.4,683.792 1618.96,683.792 1619.52,683.792 1620.08,683.792 1620.64,683.792 1621.2,683.792 1621.76,683.792 1622.32,683.792 1622.88,683.792 1623.44,683.792 1624,683.792 1624.56,683.792 1625.11,683.792 1625.67,683.792 1626.23,683.792 1626.79,683.792 1627.35,683.792 1627.91,683.792 1628.47,683.792 1629.03,683.792 1629.59,683.792 1630.15,683.792 1630.71,683.792 1631.27,683.792 1631.83,683.792 1632.39,683.792 1632.94,683.792 1633.5,683.792 1634.06,683.792 1634.62,683.792 1635.18,683.792 1635.74,683.792 1636.3,683.792 1636.86,683.792 1637.42,683.792 1637.98,683.792 1638.54,683.792 1639.1,683.792 1639.66,683.792 1640.21,683.792 1640.77,683.792 1641.33,683.792 1641.89,683.792 1642.45,683.792 1643.01,683.792 1643.57,683.792 1644.13,683.792 1644.69,683.792 1645.25,683.792 1645.81,683.792 1646.37,683.792 1646.93,683.792 1647.48,683.792 1648.04,683.792 1648.6,683.792 1649.16,683.792 1649.72,683.792 1650.28,683.792 1650.84,683.792 1651.4,683.792 1651.96,683.792 1652.52,683.792 1653.08,683.792 1653.64,683.792 1654.2,683.792 1654.76,683.792 1655.31,683.792 1655.87,683.792 1656.43,683.792 1656.99,683.792 1657.55,683.792 1658.11,683.792 1658.67,683.792 1659.23,683.792 1659.79,683.792 1660.35,683.792 1660.91,683.792 1661.47,683.792 1662.03,683.792 1662.58,683.792 1663.14,683.792 1663.7,683.792 1664.26,683.792 1664.82,683.792 1665.38,683.792 1665.94,683.792 1666.5,683.792 1667.06,683.792 1667.62,683.792 1668.18,683.792 1668.74,683.792 1669.3,683.792 1669.85,683.792 1670.41,683.792 1670.97,683.792 1671.53,683.792 1672.09,683.792 1672.65,683.792 1673.21,683.792 1673.77,683.792 1674.33,683.792 1674.89,683.792 1675.45,683.792 1676.01,683.792 1676.57,683.792 1677.13,683.792 1677.68,683.792 1678.24,683.792 1678.8,683.792 1679.36,683.792 1679.92,683.792 1680.48,683.792 1681.04,683.792 1681.6,683.792 1682.16,683.792 1682.72,683.792 1683.28,683.792 1683.84,683.792 1684.4,683.792 1684.95,683.792 1685.51,683.792 1686.07,683.792 1686.63,683.792 1687.19,683.792 1687.75,683.792 1688.31,683.792 1688.87,683.792 1689.43,683.792 1689.99,683.792 1690.55,683.792 1691.11,683.792 1691.67,683.792 1692.23,683.792 1692.78,683.792 1693.34,683.792 1693.9,683.792 1694.46,683.792 1695.02,683.792 1695.58,683.792 1696.14,683.792 1696.7,683.792 1697.26,683.792 1697.82,683.792 1698.38,683.792 1698.94,683.792 1699.5,683.792 1700.05,683.792 1700.61,683.792 1701.17,683.792 1701.73,683.792 1702.29,683.792 1702.85,683.792 1703.41,683.792 1703.97,683.792 1704.53,683.792 1705.09,683.792 1705.65,683.792 1706.21,683.792 1706.77,683.792 1707.32,683.792 1707.88,683.792 1708.44,683.792 1709,683.792 1709.56,683.792 1710.12,683.792 1710.68,683.792 1711.24,683.792 1711.8,683.792 1712.36,683.792 1712.92,683.792 1713.48,683.792 1714.04,683.792 1714.6,683.792 1715.15,683.792 1715.71,683.792 1716.27,683.792 1716.83,683.792 1717.39,683.792 1717.95,683.792 1718.51,683.792 1719.07,683.792 1719.63,683.792 1720.19,683.792 1720.75,683.792 1721.31,683.792 1721.87,683.792 1722.42,683.792 1722.98,683.792 1723.54,683.792 1724.1,683.792 1724.66,683.792 1725.22,683.792 1725.78,683.792 1726.34,683.792 1726.9,683.792 1727.46,683.792 1728.02,683.792 1728.58,683.792 1729.14,683.792 1729.69,683.792 1730.25,683.792 1730.81,683.792 1731.37,683.792 1731.93,683.792 1732.49,683.792 1733.05,683.792 1733.61,683.792 1734.17,683.792 1734.73,683.792 1735.29,683.792 1735.85,683.792 1736.41,683.792 1736.97,683.792 1737.52,683.792 1738.08,683.792 1738.64,683.792 1739.2,683.792 1739.76,683.792 1740.32,683.792 1740.88,683.792 1741.44,683.792 1742,683.792 1742.56,683.792 1743.12,683.792 1743.68,683.792 1744.24,683.792 1744.79,683.792 1745.35,683.792 1745.91,683.792 1746.47,683.792 1747.03,683.792 1747.59,683.792 1748.15,683.792 1748.71,683.792 1749.27,683.792 1749.83,683.792 1750.39,683.792 1750.95,683.792 1751.51,683.792 1752.06,683.792 1752.62,683.792 1753.18,683.792 1753.74,683.792 1754.3,683.792 1754.86,683.792 1755.42,683.792 1755.98,683.792 1756.54,683.792 1757.1,683.792 1757.66,683.792 1758.22,683.792 1758.78,683.792 1759.34,683.792 1759.89,683.792 1760.45,683.792 1761.01,683.792 1761.57,683.792 1762.13,683.792 1762.69,683.792 1763.25,683.792 1763.81,683.792 1764.37,683.792 1764.93,683.792 1765.49,683.792 1766.05,683.792 1766.61,683.792 1767.16,683.792 1767.72,683.792 1768.28,683.792 1768.84,683.792 1769.4,683.792 1769.96,683.792 1770.52,683.792 1771.08,683.792 1771.64,683.792 1772.2,683.792 1772.76,683.792 1773.32,683.792 1773.88,683.792 1774.43,683.792 1774.99,683.792 1775.55,683.792 1776.11,683.792 1776.67,683.792 1777.23,683.792 1777.79,683.792 1778.35,683.792 1778.91,683.792 1779.47,683.792 1780.03,683.792 1780.59,683.792 1781.15,683.792 1781.71,683.792 1782.26,683.792 1782.82,683.792 1783.38,683.792 1783.94,683.792 1784.5,683.792 1785.06,683.792 1785.62,683.792 1786.18,683.792 1786.74,683.792 1787.3,683.792 1787.86,683.792 1788.42,683.792 1788.98,683.792 1789.53,683.792 1790.09,683.792 1790.65,683.792 1791.21,683.792 1791.77,683.792 1792.33,683.792 1792.89,683.792 1793.45,683.792 1794.01,683.792 1794.57,683.792 1795.13,683.792 1795.69,683.792 1796.25,683.792 1796.8,683.792 1797.36,683.792 1797.92,683.792 1798.48,683.792 1799.04,683.792 1799.6,683.792 1800.16,683.792 1800.72,683.792 1801.28,683.792 1801.84,683.792 1802.4,683.792 1802.96,683.792 1803.52,683.792 1804.08,683.792 1804.63,683.792 1805.19,683.792 1805.75,683.792 1806.31,683.792 1806.87,683.792 1807.43,683.792 1807.99,683.792 1808.55,683.792 1809.11,683.792 1809.67,683.792 1810.23,683.792 1810.79,683.792 1811.35,683.792 1811.9,683.792 1812.46,683.792 1813.02,683.792 1813.58,683.792 1814.14,683.792 1814.7,683.792 1815.26,683.792 1815.82,683.792 1816.38,683.792 1816.94,683.792 1817.5,683.792 1818.06,683.792 1818.62,683.792 1819.18,683.792 1819.73,683.792 1820.29,683.792 1820.85,683.792 1821.41,683.792 1821.97,683.792 1822.53,683.792 1823.09,683.792 1823.65,683.792 1824.21,683.792 1824.77,683.792 1825.33,683.792 1825.89,683.792 1826.45,683.792 1827,683.792 1827.56,683.792 1828.12,683.792 1828.68,683.792 1829.24,683.792 1829.8,683.792 1830.36,683.792 1830.92,683.792 1831.48,683.792 1832.04,683.792 1832.6,683.792 1833.16,683.792 1833.72,683.792 1834.27,683.792 1834.83,683.792 1835.39,683.792 1835.95,683.792 1836.51,683.792 1837.07,683.792 1837.63,683.792 1838.19,683.792 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.030432225625616 ± 0.019871360839958073\nProjected Energy: -4.016130603275341 ± (0.005597262948403348, 0.005297686853930728)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.521674</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3485e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.2794e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.053e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.303e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.206e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.878e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.363124291613369\n -0.759019192277087\n  0.13584182219621077\n  0.15789998694608798\n  0.8767114411781414\n  1.5305929970973349\n  1.5835732611867357\n  3.07287033032586\n  3.1256726539518436\n  4.862107221562173\n  6.260694850380597\n  6.402671211183108\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
